[
  {
    "owner": "microsoft",
    "repo": "fluentui",
    "content": "TITLE: Conformance Testing with isConformant\nDESCRIPTION: This snippet describes the Conformance testing layer, which ensures the consistency of components by testing support for props like `as`, `ref`, and `className`, and verifying component rendering. This is achieved using the `isConformant` function generated when creating a converged component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/testing.md#2025-04-20_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n\"Conformance\"\n\n```\n\nLANGUAGE: none\nCODE:\n```\nEnsuring the consistency of our components. They test that props like `as`, `ref`, `className` are supported and that the component is rendered.\n\n```\n\nLANGUAGE: none\nCODE:\n```\nThese can be achieved simply through the `isConformant` function generated when creating a converged component.\n```\n\n----------------------------------------\n\nTITLE: Dialog Component Definition\nDESCRIPTION: Defines the Dialog component as a React function component (FC) accepting DialogProps. This is the main component for creating dialogs in Fluent UI React. It utilizes React_2 from the 'react' module.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/etc/react-dialog.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const Dialog: React_2.FC<DialogProps>;\"\n```\n\n----------------------------------------\n\nTITLE: Using a Fluent UI Component - JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the Fluent UI Button component within a React application. The Button is rendered with a primary appearance, showcasing basic usage of Fluent UI components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/QuickStart.stories.mdx#2025-04-20_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { Button } from '@fluentui/react-components';\n\nexport default () => <Button appearance=\"primary\">Get started</Button>;\n```\n\n----------------------------------------\n\nTITLE: Implementing DataGrid with Custom Cells in Fluent UI React (TSX)\nDESCRIPTION: A comprehensive example showing how to create a DataGrid with custom column definitions, cell rendering, sorting capabilities, and selection mode. The example displays a file management interface with icons, avatars, and presence indicators using various Fluent UI components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-table/library/README.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport {\n  FolderRegular,\n  EditRegular,\n  OpenRegular,\n  DocumentRegular,\n  PeopleRegular,\n  DocumentPdfRegular,\n  VideoRegular,\n} from '@fluentui/react-icons';\nimport {\n  PresenceBadgeStatus,\n  Avatar,\n  DataGridBody,\n  DataGridRow,\n  DataGrid,\n  DataGridHeader,\n  DataGridHeaderCell,\n  DataGridCell,\n  TableCellLayout,\n  TableColumnDefinition,\n  createTableColumn,\n} from '@fluentui/react-components';\n\ntype FileCell = {\n  label: string;\n  icon: JSX.Element;\n};\n\ntype LastUpdatedCell = {\n  label: string;\n  timestamp: number;\n};\n\ntype LastUpdateCell = {\n  label: string;\n  icon: JSX.Element;\n};\n\ntype AuthorCell = {\n  label: string;\n  status: PresenceBadgeStatus;\n};\n\ntype Item = {\n  file: FileCell;\n  author: AuthorCell;\n  lastUpdated: LastUpdatedCell;\n  lastUpdate: LastUpdateCell;\n};\n\nconst items: Item[] = [\n  {\n    file: { label: 'Meeting notes', icon: <DocumentRegular /> },\n    author: { label: 'Max Mustermann', status: 'available' },\n    lastUpdated: { label: '7h ago', timestamp: 1 },\n    lastUpdate: {\n      label: 'You edited this',\n      icon: <EditRegular />,\n    },\n  },\n  {\n    file: { label: 'Thursday presentation', icon: <FolderRegular /> },\n    author: { label: 'Erika Mustermann', status: 'busy' },\n    lastUpdated: { label: 'Yesterday at 1:45 PM', timestamp: 2 },\n    lastUpdate: {\n      label: 'You recently opened this',\n      icon: <OpenRegular />,\n    },\n  },\n  {\n    file: { label: 'Training recording', icon: <VideoRegular /> },\n    author: { label: 'John Doe', status: 'away' },\n    lastUpdated: { label: 'Yesterday at 1:45 PM', timestamp: 2 },\n    lastUpdate: {\n      label: 'You recently opened this',\n      icon: <OpenRegular />,\n    },\n  },\n  {\n    file: { label: 'Purchase order', icon: <DocumentPdfRegular /> },\n    author: { label: 'Jane Doe', status: 'offline' },\n    lastUpdated: { label: 'Tue at 9:30 AM', timestamp: 3 },\n    lastUpdate: {\n      label: 'You shared this in a Teams chat',\n      icon: <PeopleRegular />,\n    },\n  },\n];\n\nconst columns: TableColumnDefinition<Item>[] = [\n  createTableColumn<Item>({\n    columnId: 'file',\n    compare: (a, b) => {\n      return a.file.label.localeCompare(b.file.label);\n    },\n    renderHeaderCell: () => {\n      return 'File';\n    },\n    renderCell: item => {\n      return <TableCellLayout media={item.file.icon}>{item.file.label}</TableCellLayout>;\n    },\n  }),\n  createTableColumn<Item>({\n    columnId: 'author',\n    compare: (a, b) => {\n      return a.author.label.localeCompare(b.author.label);\n    },\n    renderHeaderCell: () => {\n      return 'Author';\n    },\n    renderCell: item => {\n      return (\n        <TableCellLayout\n          media={\n            <Avatar aria-label={item.author.label} name={item.author.label} badge={{ status: item.author.status }} />\n          }\n        >\n          {item.author.label}\n        </TableCellLayout>\n      );\n    },\n  }),\n  createTableColumn<Item>({\n    columnId: 'lastUpdated',\n    compare: (a, b) => {\n      return a.lastUpdated.timestamp - b.lastUpdated.timestamp;\n    },\n    renderHeaderCell: () => {\n      return 'Last updated';\n    },\n\n    renderCell: item => {\n      return item.lastUpdated.label;\n    },\n  }),\n  createTableColumn<Item>({\n    columnId: 'lastUpdate',\n    compare: (a, b) => {\n      return a.lastUpdate.label.localeCompare(b.lastUpdate.label);\n    },\n    renderHeaderCell: () => {\n      return 'Last update';\n    },\n    renderCell: item => {\n      return <TableCellLayout media={item.lastUpdate.icon}>{item.lastUpdate.label}</TableCellLayout>;\n    },\n  }),\n];\n\nexport const Default = () => {\n  return (\n    <DataGrid\n      items={items}\n      columns={columns}\n      sortable\n      selectionMode=\"multiselect\"\n      getRowId={item => item.file.label}\n      onSelectionChange={(e, data) => console.log(data)}\n    >\n      <DataGridHeader>\n        <DataGridRow selectionCell={{ 'aria-label': 'Select all rows' }}>\n          {({ renderHeaderCell }) => <DataGridHeaderCell>{renderHeaderCell()}</DataGridHeaderCell>}\n        </DataGridRow>\n      </DataGridHeader>\n      <DataGridBody<Item>>\n        {({ item, rowId }) => (\n          <DataGridRow<Item> key={rowId} selectionCell={{ 'aria-label': 'Select row' }}>\n            {({ renderCell }) => <DataGridCell>{renderCell(item)}</DataGridCell>}\n          </DataGridRow>\n        )}\n      </DataGridBody>\n    </DataGrid>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Avatar with Badge\nDESCRIPTION: This snippet demonstrates how to display an Avatar component with a badge.  The PresenceBadge component is used within the Avatar to indicate a status. This allows for visual representation of availability or status related to the person or entity represented by the avatar.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-avatar/library/README.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Avatar name=\"Allan Munger\" badge={<PresenceBadge status=\"busy\">} />\n```\n\n----------------------------------------\n\nTITLE: Migrating SplitButton from FluentUI Northstar to FluentUI v9 in TSX\nDESCRIPTION: This snippet shows the transformation of a SplitButton component from FluentUI Northstar to FluentUI v9. It demonstrates changes in import statements, component structure, and prop usage. The new version uses the Menu component for more flexible rendering.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/SplitButton.stories.mdx#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// in COMPONENT_NAME.tsx\nimport { SplitButton } from '@fluentui/react-northstar';\n\nexport const Component = ({ menuItems }) => (\n  <SplitButton\n    menu={menuItems}\n    button={{\n      content: 'Split button',\n    }}\n    onMainButtonClick={() => alert('button was clicked')}\n    variables={{ isActionButton: true }}\n  />\n);\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// in COMPONENT_NAME.tsx\nimport {\n  Button,\n  Menu,\n  MenuButtonProps,\n  MenuItem,\n  MenuList,\n  MenuPopover,\n  MenuTrigger,\n  SplitButton,\n} from '@fluentui/react-components';\nimport { useStyles } from './COMPONENT_NAME.styles.ts';\n\nexport const Component = () => {\n  const classes = useStyles();\n  return (\n    <Menu positioning=\"below-end\">\n      <MenuTrigger>\n        {(triggerProps: MenuButtonProps) => (\n          <SplitButton\n            className={classes.actionButton}\n            menuButton={triggerProps}\n            primaryActionButton={{ onClick: () => alert('button clicked') }}\n          >\n            Split button\n          </SplitButton>\n        )}\n      </MenuTrigger>\n\n      <MenuPopover>\n        <MenuList>\n          {menuItems.map(item => (\n            <MenuItem key={item.key}>{item.content}</MenuItem>\n          ))}\n        </MenuList>\n      </MenuPopover>\n    </Menu>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing useMergedRefs Hook in TypeScript\nDESCRIPTION: A public hook that combines multiple React refs into a single ref callback function, useful when a component needs to be referenced by multiple refs.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-utilities/etc/react-utilities.api.md#2025-04-20_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport function useMergedRefs<T>(...refs: (React_2.Ref<T> | undefined)[]): RefObjectFunction<T>;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface and Type Definitions for Fluent UI Avatar Components\nDESCRIPTION: Comprehensive TypeScript definitions for the Avatar component system including types for props, states, context values, and utility functions. Includes definitions for Avatar, AvatarGroup, AvatarGroupItem, and AvatarGroupPopover components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-avatar/library/etc/react-avatar.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"react\" />\n\nimport type { ComponentProps } from '@fluentui/react-utilities';\nimport type { ComponentState } from '@fluentui/react-utilities';\nimport { ContextSelector } from '@fluentui/react-context-selector';\nimport { FC } from 'react';\nimport type { ForwardRefComponent } from '@fluentui/react-utilities';\nimport type { PopoverProps } from '@fluentui/react-popover';\nimport type { PopoverSurface } from '@fluentui/react-popover';\nimport { PresenceBadge } from '@fluentui/react-badge';\nimport { Provider } from 'react';\nimport { ProviderProps } from 'react';\nimport * as React_2 from 'react';\nimport type { Slot } from '@fluentui/react-utilities';\nimport type { SlotClassNames } from '@fluentui/react-utilities';\nimport type { TooltipProps } from '@fluentui/react-tooltip';\n\nexport const Avatar: ForwardRefComponent<AvatarProps>;\n\nexport const avatarClassNames: SlotClassNames<AvatarSlots>;\n\nexport interface AvatarContextValue {\n    shape?: AvatarShape;\n    size?: AvatarSize;\n}\n\nexport type AvatarShape = 'circular' | 'square';\n\nexport type AvatarSize = 16 | 20 | 24 | 28 | 32 | 36 | 40 | 48 | 56 | 64 | 72 | 96 | 120 | 128;\n\nexport type AvatarProps = Omit<ComponentProps<AvatarSlots>, 'color'> & {\n    active?: 'active' | 'inactive' | 'unset';\n    activeAppearance?: 'ring' | 'shadow' | 'ring-shadow';\n    color?: 'neutral' | 'brand' | 'colorful' | AvatarNamedColor;\n    idForColor?: string | undefined;\n    name?: string;\n    shape?: AvatarShape;\n    size?: AvatarSize;\n};\n```\n\n----------------------------------------\n\nTITLE: Merging Styles with FluentUI in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the `mergeStyles` and `mergeStyleSets` functions from the `@fluentui/merge-styles` library to generate CSS class names from style objects. The library allows for dynamic style registration at runtime, promoting efficiency and flexibility. Key parameter: style objects, which are merged to produce consistent class names.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/merge-styles/README.md#2025-04-20_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { mergeStyles, mergeStyleSets } from '@fluentui/merge-styles';\n\n// Produces 'css-0' class name which can be used anywhere\nmergeStyles({ background: 'red' });\n\n// Produces a class map for a bunch of rules all at once\nmergeStyleSets({\n  root: { background: 'red' },\n  child: { background: 'green' },\n});\n\n// Returns { root: 'root-0', child: 'child-1' }\n```\n\n----------------------------------------\n\nTITLE: Defining Popover Props and Types - TypeScript\nDESCRIPTION: This snippet defines the props and types required for the Popover component within the @fluentui/react-popover library. It captures essential props such as appearance, children, event handlers, and positioning options that dictate how the popover behaves and looks. It requires types from Fluent UI utilities and React.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-popover/library/etc/react-popover.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport type OnOpenChangeData = {\n    open: boolean;\n};\n\n// @public\nexport const Popover: React_2.FC<PopoverProps>;\n\n// @public\nexport type PopoverProps = Pick<PortalProps, 'mountNode'> & {\n    appearance?: 'brand' | 'inverted';\n    children: [JSX.Element, JSX.Element] | JSX.Element;\n    closeOnScroll?: boolean;\n    defaultOpen?: boolean;\n    inline?: boolean;\n    mouseLeaveDelay?: number;\n    withArrow?: boolean;\n    onOpenChange?: (e: OpenPopoverEvents, data: OnOpenChangeData) => void;\n    open?: boolean;\n    openOnContext?: boolean;\n    openOnHover?: boolean;\n    closeOnIframeFocus?: boolean;\n    positioning?: PositioningShorthand;\n    size?: PopoverSize;\n    trapFocus?: boolean;\n    legacyTrapFocus?: boolean;\n    inertTrapFocus?: boolean;\n    unstable_disableAutoFocus?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring a Popup with Multiple Interactions in Fluent UI v0\nDESCRIPTION: Shows how to set up both controlled and uncontrolled popups with a `trigger` element in Fluent UI v0, which supports opening a popup via click, hover, context menu, or focus interactions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-popover/library/docs/Spec.md#2025-04-20_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Uncontrolled\n<Popup\n  trigger={<Button icon={<MoreIcon />} title=\"Show popup\" />}\n  content={popupContent}\n  on=['click', 'hover', 'context', 'focus']\n/>\n\n// Controlled\n<Popup\n  open={open}\n  onOpenChange={(e, { open }) => setOpen(open)}\n  trigger={<Button icon={<MoreIcon />} title=\"Show popup\" />}\n  content={popupContent}\n  on=['click', 'hover', 'context', 'focus']\n/>\n\n```\n\n----------------------------------------\n\nTITLE: FluentUI React Button API Types and Components Definition\nDESCRIPTION: Comprehensive TypeScript definitions for FluentUI button components including types, interfaces, and component declarations. Includes various button variants like standard Button, CompoundButton, MenuButton, SplitButton, and ToggleButton along with their associated props, states, and utilities.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-button/library/etc/react-button.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"react\" />\n\nimport type { ARIAButtonSlotProps } from '@fluentui/react-aria';\nimport type { ComponentProps } from '@fluentui/react-utilities';\nimport type { ComponentState } from '@fluentui/react-utilities';\nimport { ForwardRefComponent } from '@fluentui/react-utilities';\nimport * as React_2 from 'react';\nimport type { Slot } from '@fluentui/react-utilities';\nimport type { SlotClassNames } from '@fluentui/react-utilities';\n\n// @public\nexport const Button: ForwardRefComponent<ButtonProps>;\n\n// @public (undocumented)\nexport const buttonClassNames: SlotClassNames<ButtonSlots>;\n\n// @internal\nexport const ButtonContextProvider: React_2.Provider<ButtonContextValue | undefined>;\n\n// @internal\nexport interface ButtonContextValue {\n    // (undocumented)\n    size?: ButtonSize;\n}\n\n// @public (undocumented)\nexport type ButtonProps = ComponentProps<ButtonSlots> & {\n    appearance?: 'secondary' | 'primary' | 'outline' | 'subtle' | 'transparent';\n    disabledFocusable?: boolean;\n    disabled?: boolean;\n    iconPosition?: 'before' | 'after';\n    shape?: 'rounded' | 'circular' | 'square';\n    size?: ButtonSize;\n};\n\n// @public (undocumented)\nexport type ButtonSlots = {\n    root: NonNullable<Slot<ARIAButtonSlotProps<'a'>>>;\n    icon?: Slot<'span'>;\n};\n\n// @public (undocumented)\nexport type ButtonState = ComponentState<ButtonSlots> & Required<Pick<ButtonProps, 'appearance' | 'disabledFocusable' | 'disabled' | 'iconPosition' | 'shape' | 'size'>> & {\n    iconOnly: boolean;\n};\n\n// @public\nexport const CompoundButton: ForwardRefComponent<CompoundButtonProps>;\n\n// @public (undocumented)\nexport const compoundButtonClassNames: SlotClassNames<CompoundButtonSlots>;\n\n// @public (undocumented)\nexport type CompoundButtonProps = ComponentProps<Partial<CompoundButtonSlots>> & Pick<ButtonProps, 'appearance' | 'disabledFocusable' | 'disabled' | 'iconPosition' | 'shape' | 'size'>;\n\n// @public (undocumented)\nexport type CompoundButtonSlots = ButtonSlots & {\n    secondaryContent?: Slot<'span'>;\n    contentContainer: NonNullable<Slot<'span'>>;\n};\n\n// @public (undocumented)\nexport type CompoundButtonState = ComponentState<CompoundButtonSlots> & Omit<ButtonState, keyof ButtonSlots | 'components'>;\n\n// @public\nexport const MenuButton: ForwardRefComponent<MenuButtonProps>;\n\n// @public (undocumented)\nexport const menuButtonClassNames: SlotClassNames<MenuButtonSlots>;\n\n// @public (undocumented)\nexport type MenuButtonProps = ComponentProps<MenuButtonSlots> & Pick<ButtonProps, 'appearance' | 'disabledFocusable' | 'disabled' | 'shape' | 'size'>;\n\n// @public (undocumented)\nexport type MenuButtonSlots = ButtonSlots & {\n    menuIcon?: Slot<'span'>;\n};\n\n// @public (undocumented)\nexport type MenuButtonState = ComponentState<MenuButtonSlots> & Omit<ButtonState, keyof ButtonSlots | 'components' | 'iconPosition'>;\n\n// @public\nconst renderButton_unstable: (state: ButtonState) => JSX.Element;\nexport { renderButton_unstable }\nexport { renderButton_unstable as renderToggleButton_unstable }\n\n// @public\nexport const renderCompoundButton_unstable: (state: CompoundButtonState) => JSX.Element;\n\n// @public\nexport const renderMenuButton_unstable: (state: MenuButtonState) => JSX.Element;\n\n// @public\nexport const renderSplitButton_unstable: (state: SplitButtonState) => JSX.Element;\n\n// @public\nexport const SplitButton: ForwardRefComponent<SplitButtonProps>;\n\n// @public (undocumented)\nexport const splitButtonClassNames: SlotClassNames<SplitButtonSlots>;\n\n// @public (undocumented)\nexport type SplitButtonProps = ComponentProps<SplitButtonSlots> & Omit<ButtonProps, 'root' | 'as'> & Omit<MenuButtonProps, 'root' | 'as'>;\n\n// @public (undocumented)\nexport type SplitButtonSlots = {\n    root: NonNullable<Slot<'div'>>;\n    menuButton?: Slot<typeof MenuButton>;\n    primaryActionButton?: Slot<typeof Button>;\n};\n\n// @public (undocumented)\nexport type SplitButtonState = ComponentState<SplitButtonSlots> & Omit<ButtonState, 'components' | 'iconOnly' | 'root'> & Omit<MenuButtonState, 'components' | 'iconOnly' | 'root'>;\n\n// @public\nexport const ToggleButton: ForwardRefComponent<ToggleButtonProps>;\n\n// @public (undocumented)\nexport const toggleButtonClassNames: SlotClassNames<ButtonSlots>;\n\n// @public (undocumented)\nexport type ToggleButtonProps = ButtonProps & {\n    defaultChecked?: boolean;\n    checked?: boolean;\n};\n\n// @public (undocumented)\nexport type ToggleButtonState = ButtonState & Required<Pick<ToggleButtonProps, 'checked'>>;\n\n// @public\nexport const useButton_unstable: (props: ButtonProps, ref: React_2.Ref<HTMLButtonElement | HTMLAnchorElement>) => ButtonState;\n\n// @internal\nexport const useButtonContext: () => ButtonContextValue;\n\n// @public (undocumented)\nexport const useButtonStyles_unstable: (state: ButtonState) => ButtonState;\n\n// @public\nexport const useCompoundButton_unstable: ({ contentContainer, secondaryContent, ...props }: CompoundButtonProps, ref: React_2.Ref<HTMLButtonElement | HTMLAnchorElement>) => CompoundButtonState;\n\n// @public (undocumented)\nexport const useCompoundButtonStyles_unstable: (state: CompoundButtonState) => CompoundButtonState;\n\n// @public\nexport const useMenuButton_unstable: ({ menuIcon, ...props }: MenuButtonProps, ref: React_2.Ref<HTMLButtonElement | HTMLAnchorElement>) => MenuButtonState;\n\n// @public (undocumented)\nexport const useMenuButtonStyles_unstable: (state: MenuButtonState) => MenuButtonState;\n\n// @public\nexport const useSplitButton_unstable: (props: SplitButtonProps, ref: React_2.Ref<HTMLButtonElement | HTMLAnchorElement>) => SplitButtonState;\n\n// @public (undocumented)\nexport const useSplitButtonStyles_unstable: (state: SplitButtonState) => SplitButtonState;\n\n// @public\nexport const useToggleButton_unstable: (props: ToggleButtonProps, ref: React_2.Ref<HTMLButtonElement | HTMLAnchorElement>) => ToggleButtonState;\n\n// @public (undocumented)\nexport const useToggleButtonStyles_unstable: (state: ToggleButtonState) => ToggleButtonState;\n\n// @public (undocumented)\nexport function useToggleState<TToggleButtonProps extends Pick<ToggleButtonProps, 'checked' | 'defaultChecked' | 'disabled' | 'disabledFocusable'>, TButtonState extends Pick<ButtonState, 'root'>, TToggleButtonState extends Pick<ToggleButtonState, 'checked' | 'root'>>(props: TToggleButtonProps, state: TButtonState): TToggleButtonState;\n\n```\n\n----------------------------------------\n\nTITLE: Using ThemeContext.Consumer in Class Components\nDESCRIPTION: This snippet demonstrates how to access the theme in a Class Component using the ThemeContext.Consumer to retrieve the current theme.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/src/utilities/ThemeProvider/README.md#2025-04-20_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { Theme, ThemeContext } from '@fluentui/react';\n\nclass Content extends React.Component {\n  public render() {\n    return (\n      <ThemeContext.Consumer>\n        {(theme: Theme | undefined) => {\n          ...\n        }}\n      </ThemeContext.Consumer>\n    );\n  }\n}\n\nexport const App = () => (\n  <ThemeProvider>\n    <Content />\n  </ThemeProvider>\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Defining RadioGroup Accessibility in FluentUI\nDESCRIPTION: Outlines the accessibility specifications for the RadioGroup component, including WAI-ARIA roles, states, and properties required for screen readers and assistive technologies.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/radio-group/README.md#2025-04-20_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## **Accessibility**\n\n[W3 Radio Spec](https://www.w3.org/WAI/ARIA/apg/patterns/radio/)\n\n<br />\n\n### **WAI-ARIA Roles, States, and Properties**\n\n| Attributes        | value          | Description                              |\n| ----------------- | -------------- | ---------------------------------------- |\n| `aria-labelledby` |                | used to associate a label with the group |\n| `role`            | `\"radiogroup\"` | used to define a group of radio buttons  |\n```\n\n----------------------------------------\n\nTITLE: Generating Stable Release for Fluent UI Component using Yarn\nDESCRIPTION: This command promotes a Fluent UI component from the preview phase to a stable release, making it ready for production use. Ensure to replace `your-component` with the actual package name.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/component-implementation-guide.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn nx generate prepare-initial-release --project @fluentui/react-your-component-preview --phase=stable\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Component with Semantic HTML Options in TSX\nDESCRIPTION: Demonstrates three button implementation patterns: default semantic button, div with ARIA button behavior, and styled div without button behavior. Shows flexibility in maintaining accessibility while allowing custom implementations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/first-rule-of-aria.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Button>This is a Simple Button</Button>\n<Button as=\"div\">This is a div that looks and behaves as a Button</Button>\n<Button as=\"div\" role={undefined} tabIndex={undefined}>\n  This is a div that looks like Button but doesn't behave as such\n  therefore, I can add a <Link to=\"/somewhere\">Link inside of it</Link>\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Using RadioGroup in JSX\nDESCRIPTION: This snippet provides examples of how to use the RadioGroup and Radio components in JSX to create a group of selectable options. The first example initializes a radio group with a default selected value. The second example includes an onChange handler to update component state based on user input.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-radio/library/README.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<RadioGroup defaultValue=\"B\">\n  <Radio value=\"A\" label=\"Option A\" />\n  <Radio value=\"B\" label=\"Option B\" />\n  <Radio value=\"C\" label=\"Option C\" />\n  <Radio value=\"D\" label=\"Option D\" />\n</RadioGroup>\n\n<RadioGroup value={value} onChange={(_, data) => setValue(data.value)}>\n  <Radio value=\"A\" label=\"Option A\" />\n  <Radio value=\"B\" label=\"Option B\" />\n  <Radio value=\"C\" label=\"Option C\" />\n  <Radio value=\"D\" label=\"Option D\" />\n</RadioGroup>\n```\n\n----------------------------------------\n\nTITLE: Installing Fluent UI React Package\nDESCRIPTION: Commands to install the @fluentui/react package using npm or yarn package managers in an existing project.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Overviews/GetStartedPage/docs/web/GetStartedDevelopExisting.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# with npm\nnpm install @fluentui/react\n\n# with yarn\nyarn add @fluentui/react\n```\n\n----------------------------------------\n\nTITLE: Comparing Button Usage in Fluent UI v8 and v9\nDESCRIPTION: This code snippet demonstrates the changes in Button component usage between Fluent UI v8 and v9, including DefaultButton, PrimaryButton, and IconButton migrations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-button/library/docs/MIGRATION.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n| v8 `Button`                                      | Converged `Button`                                   |\n| ------------------------------------------------ | ---------------------------------------------------- |\n| `<DefaultButton text=\"Hello, world\" />`          | `<Button>Hello, world</Button>`                      |\n| `<PrimaryButton text=\"Hello, world\" />`          | `<Button primary>Hello, world</Button>`              |\n| `<IconButton iconProps={{ iconName: 'Add' }} />` | `<Button subtle icon={ <Icon iconName=\"Add\" /> } />` |\n```\n\n----------------------------------------\n\nTITLE: Implementing React Portal for FluentUI\nDESCRIPTION: Initial implementation of the Portal component with support for SSR and virtual parent rendering\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-portal/library/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Portal implementation details not directly provided in changelog\n```\n\n----------------------------------------\n\nTITLE: Sample Checkbox Usage Examples\nDESCRIPTION: Various examples of Checkbox implementation including basic, linked label, circular variant, controlled component, mixed state, and custom label styling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-checkbox/library/docs/Spec.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Checkbox label=\"Example Checkbox\" />\n\n<Checkbox label={<>Example Checkbox with <a href=\"https://www.microsoft.com\">link</a></>} />\n\n<Checkbox label=\"Circular Checkbox\" circular size=\"large\" />\n\n<Checkbox label=\"Controlled Checkbox\" onChange={onChangeFunction} />\n\n<Checkbox label=\"Mixed Checkbox\" checked=\"mixed\" />\n\n<Checkbox label={{ children: 'Custom Label', style: { color: 'red' }, required: true }} />\n```\n\n----------------------------------------\n\nTITLE: DataGrid Complex Implementation in React/TypeScript\nDESCRIPTION: Advanced DataGrid component with multi-select, sorting, custom row identification, and dynamic rendering of headers and rows\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-table/library/docs/Spec.md#2025-04-20_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGrid\\n  items={items}\\n  columns={columns}\\n  sortable\\n  selectionMode=\"multiselect\"\\n  getRowId={item => item.file.label}\\n  onSelectionChange={(e, data) => console.log(data)}\\n>\\n  <DataGridHeader>\\n    <DataGridRow selectionCell={{ 'aria-label': 'Select all rows' }}>\\n      {({ renderHeaderCell }) => <DataGridHeaderCell>{renderHeaderCell()}</DataGridHeaderCell>}\\n    </DataGridRow>\\n  </DataGridHeader>\\n  <DataGridBody<Item>>\\n    {({ item, rowId }) => (\\n      <DataGridRow<Item> key={rowId} selectionCell={{ 'aria-label': 'Select row' }}>\\n        {({ renderCell }) => <DataGridCell>{renderCell(item)}</DataGridCell>}\\n      </DataGridRow>\\n    )}\\n  </DataGridBody>\\n</DataGrid>\n```\n\n----------------------------------------\n\nTITLE: Dismissible Tag\nDESCRIPTION: This snippet demonstrates how to create a dismissible `<Tag>` component.  Setting the `dismissible` prop allows the tag to be removed.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tags/library/README.md#2025-04-20_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Tag dismissible>Content</Tag>\n```\n\n----------------------------------------\n\nTITLE: Building Hierarchical Components with Accordion in React TSX\nDESCRIPTION: Example of using Accordion component to create a hierarchical structure with multiple accordion items. This demonstrates how children can be used to build complex component hierarchies with header and panel sections.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Slots/Slots.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Accordion>\n  <AccordionItem value=\"1\">\n    <AccordionHeader>Accordion Header 1</AccordionHeader>\n    <AccordionPanel>\n      <div>Accordion Panel 1</div>\n    </AccordionPanel>\n  </AccordionItem>\n  <AccordionItem value=\"2\">\n    <AccordionHeader>Accordion Header 2</AccordionHeader>\n    <AccordionPanel>\n      <div>Accordion Panel 2</div>\n    </AccordionPanel>\n  </AccordionItem>\n  <AccordionItem value=\"3\">\n    <AccordionHeader>Accordion Header 3</AccordionHeader>\n    <AccordionPanel>\n      <div>Accordion Panel 3</div>\n    </AccordionPanel>\n  </AccordionItem>\n</Accordion>\n```\n\n----------------------------------------\n\nTITLE: Avatar HTML Structure - HTML\nDESCRIPTION: Shows the resulting HTML structure of an Avatar component with all possible elements including accessibility attributes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-avatar/library/docs/SPEC.md#2025-04-20_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"{root}\" id=\"avatar-42\" aria-label=\"Miguel Garcia\" aria-labelledby=\"avatar-42 avatar-42__badge\">\n  <!-- Only one of initials OR icon will be rendered, never both -->\n  <span class=\"{initials}\" aria-hidden=\"true\">MG</span>\n  <span class=\"{icon}\" aria-hidden=\"true\"><svg>...</svg></span>\n\n  <!-- The Image -->\n  <img class=\"{image}\" src=\"...\" aria-hidden=\"true\" role=\"presentation\" alt=\"\" />\n\n  <!-- The PresenceBadge's HTML is rendered here -->\n  <span class=\"{PresenceBadge}\" id=\"avatar-42__badge\" aria-hidden=\"true\">...</span>\n</span>\n```\n\n----------------------------------------\n\nTITLE: Creating a Persona with a Name and Secondary Text - React\nDESCRIPTION: This snippet showcases how to create a basic Persona component with a name and a secondary text, representing an individual in the UI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-persona/library/docs/Spec.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Persona name=\"Kevin Sturgis\" secondaryText=\"Software Engineer\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Rendering with Fluent UI React v9\nDESCRIPTION: Complete example of setting up SSR with Fluent UI React v9, including the necessary providers (RendererProvider, SSRProvider, FluentProvider), creating a sample component, and rendering it on the server using Express.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/SSR/SSR.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport express from 'express';\nimport React from 'react';\nimport ReactDOMServer from 'react-dom/server';\nimport {\n  createDOMRenderer,\n  RendererProvider,\n  renderToStyleElements,\n  FluentProvider,\n  webLightTheme,\n  SSRProvider,\n} from '@fluentui/react-components';\n\nconst useExampleStyles = makeStyles({\n  root: {\n    color: 'red',\n  },\n});\n\nconst ExampleComponent: React.FC = () => {\n  const classes = useExampleStyles();\n\n  return <div className={classes.root}>Hello world</div>;\n};\n\nconst server = express();\n\nserver.get('/', (req, res) => {\n  const renderer = createDOMRenderer();\n\n  const html = ReactDOMServer.renderToString(\n    <RendererProvider renderer={renderer}>\n      <SSRProvider>\n        <FluentProvider theme={webLightTheme}>\n          <ExampleComponent />\n        </FluentProvider>\n      </SSRProvider>\n    </RendererProvider>,\n  );\n\n  // Converting Fluent UI styles to style elements. 👇\n  const style = ReactDOMServer.renderToStaticMarkup(<>{renderToStyleElements(renderer)}</>);\n\n  res.write(`\n  <!DOCTYPE html>\n  <html>\n    <head>\n      ${/* 👇 adding Fluent UI styles elements to output */}\n      ${style}\n    </head>\n    <body>\n      <div id=\"root\">${html}</div>\n    </body>\n  </html>\n  `);\n  res.end();\n});\n\nserver.listen(3000, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Exporting FluentUI Components and Utilities in TypeScript\nDESCRIPTION: This code snippet contains a series of export statements for FluentUI components, their associated types, and utility functions. It includes exports for various UI components such as DataGrid, Dialog, Drawer, Dropdown, and others, along with their props, states, and class names.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/etc/react-components.api.md#2025-04-20_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport { DataGridHeaderCellSlots }\n\nexport { DataGridHeaderCellState }\n\nexport { dataGridHeaderClassNames }\n\nexport { DataGridHeaderProps }\n\nexport { DataGridHeaderSlots }\n\nexport { DataGridHeaderState }\n\nexport { DataGridProps }\n\nexport { DataGridRow }\n\nexport { dataGridRowClassNames }\n\nexport { DataGridRowProps }\n\nexport { DataGridRowSlots }\n\nexport { DataGridRowState }\n\nexport { DataGridSelectionCell }\n\nexport { dataGridSelectionCellClassNames }\n\nexport { DataGridSelectionCellProps }\n\nexport { DataGridSelectionCellSlots }\n\nexport { DataGridSelectionCellState }\n\nexport { DataGridSlots }\n\nexport { DataGridState }\n\nexport { Dialog }\n\nexport { DialogActions }\n\nexport { dialogActionsClassNames }\n\nexport { DialogActionsPosition }\n\nexport { DialogActionsProps }\n\nexport { DialogActionsSlots }\n\nexport { DialogActionsState }\n\nexport { DialogBody }\n\nexport { dialogBodyClassNames }\n\nexport { DialogBodyProps }\n\nexport { DialogBodySlots }\n\nexport { DialogBodyState }\n\nexport { DialogContent }\n\nexport { dialogContentClassNames }\n\nexport { DialogContentProps }\n\nexport { DialogContentSlots }\n\nexport { DialogContentState }\n\nexport { DialogContextValue }\n\nexport { DialogModalType }\n\nexport { DialogOpenChangeData }\n\nexport { DialogOpenChangeEvent }\n\nexport { DialogProps }\n\nexport { DialogProvider }\n\nexport { DialogSlots }\n\nexport { DialogState }\n\nexport { DialogSurface }\n\nexport { dialogSurfaceClassNames }\n\nexport { DialogSurfaceContextValue }\n\nexport { DialogSurfaceContextValues }\n\nexport { DialogSurfaceProps }\n\nexport { DialogSurfaceSlots }\n\nexport { DialogSurfaceState }\n\nexport { DialogTitle }\n\nexport { dialogTitleClassNames }\n\nexport { DialogTitleProps }\n\nexport { DialogTitleSlots }\n\nexport { DialogTitleState }\n\nexport { DialogTrigger }\n\nexport { DialogTriggerAction }\n\nexport { DialogTriggerChildProps }\n\nexport { DialogTriggerProps }\n\nexport { DialogTriggerState }\n\nexport { Display }\n\nexport { displayClassNames }\n\nexport { Divider }\n\nexport { dividerClassNames }\n\nexport { DividerProps }\n\nexport { DividerSlots }\n\nexport { DividerState }\n\nexport { Drawer }\n\nexport { DrawerBody }\n\nexport { drawerBodyClassNames }\n\nexport { DrawerBodyProps }\n\nexport { DrawerBodySlots }\n\nexport { DrawerBodyState }\n\nexport { DrawerContextValue }\n\nexport { DrawerFooter }\n\nexport { drawerFooterClassNames }\n\nexport { DrawerFooterProps }\n\nexport { DrawerFooterSlots }\n\nexport { DrawerFooterState }\n\nexport { DrawerHeader }\n\nexport { drawerHeaderClassNames }\n\nexport { DrawerHeaderNavigation }\n\nexport { drawerHeaderNavigationClassNames }\n\nexport { DrawerHeaderNavigationProps }\n\nexport { DrawerHeaderNavigationSlots }\n\nexport { DrawerHeaderNavigationState }\n\nexport { DrawerHeaderProps }\n\nexport { DrawerHeaderSlots }\n\nexport { DrawerHeaderState }\n\nexport { DrawerHeaderTitle }\n\nexport { drawerHeaderTitleClassNames }\n\nexport { DrawerHeaderTitleProps }\n\nexport { DrawerHeaderTitleSlots }\n\nexport { DrawerHeaderTitleState }\n\nexport { DrawerProps }\n\nexport { DrawerProvider }\n\nexport { DrawerSlots }\n\nexport { DrawerState }\n\nexport { Dropdown }\n\nexport { dropdownClassNames }\n\nexport { DropdownContextValues }\n\nexport { DropdownOpenChangeData }\n\nexport { DropdownOpenEvents }\n\nexport { DropdownProps }\n\nexport { DropdownSlots }\n\nexport { DropdownState }\n\nexport { DurationTokens }\n\nexport { EmptySwatch }\n\nexport { emptySwatchClassNames }\n\nexport { EmptySwatchProps }\n\nexport { EmptySwatchSlots }\n\nexport { EmptySwatchState }\n\nexport { Field }\n\nexport { fieldClassNames }\n\nexport { FieldContextProvider }\n\nexport { FieldContextValue }\n\nexport { FieldContextValues }\n\nexport { FieldControlProps }\n\nexport { FieldControlPropsOptions }\n\nexport { FieldProps }\n\nexport { FieldSlots }\n\nexport { FieldState }\n\nexport { flattenTree_unstable }\n\nexport { FlattenTreeItem }\n\nexport { FlatTree }\n\nexport { flatTreeClassNames }\n\nexport { FlatTreeItem }\n\nexport { FlatTreeItemProps }\n\nexport { FlatTreeProps }\n\nexport { FlatTreeSlots }\n\nexport { FlatTreeState }\n\nexport { FluentProvider }\n\nexport { fluentProviderClassNames }\n\nexport { FluentProviderContextValues }\n\nexport { FluentProviderCustomStyleHooks }\n\nexport { FluentProviderProps }\n\nexport { FluentProviderSlots }\n\nexport { FluentProviderState }\n\nexport { FontFamilyTokens }\n\nexport { FontSizeTokens }\n\nexport { FontWeightTokens }\n\nexport { ForwardRefComponent }\n\nexport { getIntrinsicElementProps }\n\nexport { getNativeElementProps }\n\nexport { getPartitionedNativeProps }\n\nexport { getSlotClassNameProp_unstable }\n\nexport { getSlots }\n\nexport { GriffelRenderer }\n\nexport { GriffelResetStyle }\n\nexport { GriffelStyle }\n\nexport { HeadlessFlatTree }\n\nexport { HeadlessFlatTreeItem }\n\nexport { HeadlessFlatTreeItemProps }\n\nexport { HeadlessFlatTreeOptions }\n\nexport { HorizontalSpacingTokens }\n\nexport { IdPrefixProvider }\n\nexport { Image_2 as Image }\n\nexport { imageClassNames }\n\nexport { ImageProps }\n\nexport { ImageSlots }\n\nexport { ImageState }\n\nexport { ImageSwatch }\n\nexport { imageSwatchClassNames }\n\nexport { ImageSwatchProps }\n\nexport { ImageSwatchSlots }\n\nexport { ImageSwatchState }\n\nexport { InfoLabel }\n\nexport { infoLabelClassNames }\n\nexport { InfoLabelProps }\n\nexport { InfoLabelSlots }\n\nexport { InfoLabelState }\n\nexport { InlineDrawer }\n\nexport { inlineDrawerClassNames }\n\nexport { InlineDrawerProps }\n\nexport { InlineDrawerSlots }\n\nexport { InlineDrawerState }\n\nexport { Input }\n\nexport { inputClassNames }\n\nexport { InputOnChangeData }\n\nexport { InputProps }\n\nexport { InputSlots }\n\nexport { InputState }\n\nexport { InteractionTag }\n\nexport { interactionTagClassNames }\n\nexport { InteractionTagPrimary }\n\nexport { interactionTagPrimaryClassNames }\n\nexport { InteractionTagPrimaryContextValues }\n\nexport { InteractionTagPrimaryProps }\n\nexport { InteractionTagPrimarySlots }\n\nexport { InteractionTagPrimaryState }\n\nexport { InteractionTagProps }\n\nexport { InteractionTagSecondary }\n\nexport { interactionTagSecondaryClassNames }\n\nexport { InteractionTagSecondaryProps }\n\nexport { InteractionTagSecondarySlots }\n\nexport { InteractionTagSecondaryState }\n\nexport { InteractionTagSlots }\n\nexport { InteractionTagState }\n\nexport { isHTMLElement }\n\nexport { isTruncatableBreadcrumbContent }\n\nexport { Label }\n\nexport { labelClassNames }\n\nexport { LabelProps }\n\nexport { LabelSlots }\n\nexport { LabelState }\n\nexport { LargeTitle }\n\nexport { largeTitleClassNames }\n\nexport { LineHeightTokens }\n\nexport { Link }\n\nexport { linkClassNames }\n\nexport { LinkProps }\n\nexport { LinkSlots }\n\nexport { LinkState }\n\nexport { List }\n\nexport { Listbox }\n\nexport { listboxClassNames }\n\nexport { ListboxContextValue }\n\nexport { ListboxContextValues }\n\nexport { ListboxProps }\n\nexport { ListboxProvider }\n\nexport { ListboxSlots }\n\nexport { ListboxState }\n\nexport { listClassNames }\n\nexport { ListItem }\n\nexport { listItemClassNames }\n\nexport { ListItemProps }\n\nexport { ListItemSlots }\n\nexport { ListItemState }\n\nexport { ListProps }\n\nexport { ListSlots }\n\nexport { ListState }\n\nexport { makeResetStyles }\n\nexport { makeStaticStyles }\n\nexport { makeStyles }\n\nexport { Menu }\n\nexport { MenuButton }\n\nexport { menuButtonClassNames }\n\nexport { MenuButtonProps }\n\nexport { MenuButtonSlots }\n\nexport { MenuButtonState }\n\nexport { MenuCheckedValueChangeData }\n\nexport { MenuCheckedValueChangeEvent }\n\nexport { MenuContextValue }\n\nexport { MenuContextValues }\n\nexport { MenuDivider }\n\nexport { menuDividerClassNames }\n\nexport { MenuDividerProps }\n\nexport { MenuDividerSlots }\n\nexport { MenuDividerState }\n\nexport { MenuGroup }\n\nexport { menuGroupClassNames }\n\nexport { MenuGroupContextProvider }\n\nexport { MenuGroupContextValue }\n\nexport { MenuGroupContextValues }\n\nexport { MenuGroupHeader }\n\nexport { menuGroupHeaderClassNames }\n\nexport { MenuGroupHeaderProps }\n\nexport { MenuGroupHeaderSlots }\n\nexport { MenuGroupHeaderState }\n\nexport { MenuGroupProps }\n\nexport { MenuGroupSlots }\n\nexport { MenuGroupState }\n\nexport { MenuItem }\n\nexport { MenuItemCheckbox }\n\nexport { menuItemCheckboxClassNames }\n\nexport { MenuItemCheckboxProps }\n\nexport { MenuItemCheckboxState }\n\nexport { menuItemClassNames }\n\nexport { MenuItemLink }\n\nexport { menuItemLinkClassNames }\n\nexport { MenuItemLinkProps }\n\nexport { MenuItemLinkSlots }\n\nexport { MenuItemLinkState }\n\nexport { MenuItemProps }\n\nexport { MenuItemRadio }\n\nexport { menuItemRadioClassNames }\n\nexport { MenuItemRadioProps }\n\nexport { MenuItemRadioState }\n\nexport { MenuItemSelectableProps }\n\nexport { MenuItemSelectableState }\n\nexport { MenuItemSlots }\n\nexport { MenuItemState }\n\nexport { MenuItemSwitch }\n\nexport { menuItemSwitchClassNames }\n\nexport { MenuList }\n\nexport { menuListClassNames }\n\nexport { MenuListContextValue }\n\nexport { MenuListContextValues }\n\nexport { MenuListProps }\n\nexport { MenuListProvider }\n\nexport { MenuListSlots }\n\nexport { MenuListState }\n\nexport { MenuOpenChangeData }\n\nexport { MenuOpenEvent }\n\nexport { MenuOpenEvents }\n\nexport { MenuPopover }\n\nexport { menuPopoverClassNames }\n\nexport { MenuPopoverProps }\n\nexport { MenuPopoverSlots }\n\nexport { MenuPopoverState }\n\nexport { MenuProps }\n\nexport { MenuProvider }\n\nexport { MenuSlots }\n\nexport { MenuSplitGroup }\n\nexport { menuSplitGroupClassNames }\n\nexport { MenuSplitGroupProps }\n\nexport { MenuSplitGroupSlots }\n\nexport { MenuSplitGroupState }\n\nexport { MenuState }\n\nexport { MenuTrigger }\n\nexport { MenuTriggerChildProps }\n\nexport { MenuTriggerContextProvider }\n\nexport { MenuTriggerProps }\n\nexport { MenuTriggerState }\n\nexport { mergeCallbacks }\n\nexport { mergeClasses }\n\nexport { MessageBar }\n\nexport { MessageBarActions }\n\nexport { messageBarActionsClassNames }\n\nexport { MessageBarActionsContextValues }\n\nexport { MessageBarActionsProps }\n\nexport { MessageBarActionsSlots }\n\nexport { MessageBarActionsState }\n\nexport { MessageBarBody }\n\nexport { messageBarBodyClassNames }\n\nexport { MessageBarBodyProps }\n\nexport { MessageBarBodySlots }\n\nexport { MessageBarBodyState }\n\nexport { messageBarClassNames }\n\nexport { MessageBarContextProvider }\n\nexport { MessageBarContextValue }\n\nexport { MessageBarContextValues }\n\nexport { MessageBarGroup }\n```\n\n----------------------------------------\n\nTITLE: Standalone Menu Implementation - TSX\nDESCRIPTION: This snippet presents an independent menu implementation using a custom surface, designed to manage the open state of the menu component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/library/docs/Spec.md#2025-04-20_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nconst [open] = React.useState(false);\n\nconst menu = (\n  <CustomSurface open={open}>\n    <MenuList>\n      <MenuItem>Option 1</MenuItem>\n      <MenuItem>Option 2</MenuItem>\n      <MenuItem>Option 3</MenuItem>\n    </MenuList>\n  <CustomSurface>\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Standard Select Component in React TSX\nDESCRIPTION: Default implementation of the Select component that allows users to choose from predefined options. Shows basic structure with a label and option elements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-select/library/docs/Spec.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<label htmlFor=\"selectID\">Choose a color</label>\n<Select id=\"selectID\">\n  <option>Red</option>\n  <option>Green</option>\n  <option>Blue</option>\n</Select>\n```\n\n----------------------------------------\n\nTITLE: Importing Meta Component from Storybook in JSX\nDESCRIPTION: This code snippet imports the Meta component from Storybook's addon-docs and sets the title for the documentation page.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/GettingStarted.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs';\n\n<Meta title=\"Concepts/Migration/Getting Started\" />\n```\n\n----------------------------------------\n\nTITLE: ActionButton Component Definition in TypeScript\nDESCRIPTION: Defines the ActionButton component that extends React.Component. The component implements a button with specific styling and behavior based on the IButtonProps interface.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport class ActionButton extends React_2.Component<IButtonProps, {}> {\n    // (undocumented)\n    render(): JSX.Element;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Fluent UI React Package with NPM\nDESCRIPTION: Command to install the Fluent UI React package as a dependency in your project using npm.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-resources/src/docs/GettingStartedOverview.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @fluentui/react\n```\n\n----------------------------------------\n\nTITLE: Creating a New Package in Fluent UI\nDESCRIPTION: Command to create a new package in the Fluent UI monorepo. This should be executed from the monorepo root directory to set up the initial package structure for a new component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/component-implementation-guide.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# NOTE: execute this command from monorepo root\n$ yarn create-package\n```\n\n----------------------------------------\n\nTITLE: Managing Focusable Text Elements\nDESCRIPTION: Demonstrates proper implementation of focusable elements using aria-describedby and role=\"group\" instead of making text directly focusable with tabindex.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Accessibility/ComponentLabelling.stories.mdx#2025-04-20_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\naria-describedby=\"notificationText\"\nrole=\"group\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Drawer Component in React with TypeScript\nDESCRIPTION: This example shows how to create a simple Drawer component using Fluent UI React. It includes a header with a title and close button, and a body for content. The drawer is set to 'inline' type and is initially open.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-drawer/library/README.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DrawerBody, DrawerHeader, DrawerHeaderTitle, Drawer } from '@fluentui/react-components';\nimport { Button } from '@fluentui/react-components';\nimport { Dismiss24Regular } from '@fluentui/react-icons';\n\nexport const App = () => (\n  <Drawer type=\"inline\" open>\n    <DrawerHeader>\n      <DrawerHeaderTitle\n        action={\n          <Button\n            appearance=\"subtle\"\n            aria-label=\"Close drawer\"\n            icon={<Dismiss24Regular />}\n            onClick={() => setIsOpen(false)}\n          />\n        }\n      >\n        Title goes here\n      </DrawerHeaderTitle>\n    </DrawerHeader>\n\n    <DrawerBody>\n      <p>Content goes here</p>\n    </DrawerBody>\n  </Drawer>\n);\n```\n\n----------------------------------------\n\nTITLE: Installing @fluentui/react-components Package with Yarn\nDESCRIPTION: This command adds the @fluentui/react-components package to a project using Yarn package manager.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/README.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @fluentui/react-components\n```\n\n----------------------------------------\n\nTITLE: Implementing ARIA Roles for Position Information in Menus\nDESCRIPTION: Demonstrates how to properly implement position information in menu items using ARIA roles instead of hard-coding position text. Uses role=\"menu\" for the container and role=\"menuitem\" for individual items to allow screen readers to automatically announce positions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Accessibility/ComponentLabelling.stories.mdx#2025-04-20_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\nrole=\"menu\"\nrole=\"menuitem\"\n```\n\n----------------------------------------\n\nTITLE: Mapping Props to Styles in React Components\nDESCRIPTION: Illustrates how to map component props to styles by conditionally applying classes based on prop values.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/StylingComponents.stories.mdx#2025-04-20_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { makeStyles } from '@fluentui/react-components';\n\nconst useStyles = makeStyles({\n  root: { color: 'red' },\n  rootPrimary: { color: 'blue' },\n});\n\nfunction Component(props) {\n  const classes = useStyles();\n\n  return <div className={mergeClasses('ui-component', classes.root, props.primary && classes.rootPrimary)} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Badge Component and Props in TypeScript\nDESCRIPTION: This snippet declares the Badge component and its associated props, detailing the optional properties like appearance, color, icon position, shape, and size that are available to configure the badge's appearance and functionality. It also includes type definitions for BadgeSlots and BadgeState.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/etc/react-badge.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"/// <reference types=\\\"react\\\" />\\n\\nimport type { ComponentProps } from '@fluentui/react-utilities';\\nimport type { ComponentState } from '@fluentui/react-utilities';\\nimport type { ForwardRefComponent } from '@fluentui/react-utilities';\\nimport * as React_2 from 'react';\\nimport type { Slot } from '@fluentui/react-utilities';\\nimport type { SlotClassNames } from '@fluentui/react-utilities';\\n\\n// @public\\nexport const Badge: ForwardRefComponent<BadgeProps>;\\n\\n// @public (undocumented)\\nexport const badgeClassNames: SlotClassNames<BadgeSlots>;\\n\\n// @public (undocumented)\\nexport type BadgeProps = Omit<ComponentProps<BadgeSlots>, 'color'> & {\\n    appearance?: 'filled' | 'ghost' | 'outline' | 'tint';\\n    color?: 'brand' | 'danger' | 'important' | 'informative' | 'severe' | 'subtle' | 'success' | 'warning';\\n    iconPosition?: 'before' | 'after';\\n    shape?: 'circular' | 'rounded' | 'square';\\n    size?: 'tiny' | 'extra-small' | 'small' | 'medium' | 'large' | 'extra-large';\\n};\\n\\n// @public (undocumented)\\nexport type BadgeSlots = {\\n    root: Slot<'div'>;\\n    icon?: Slot<'span'>;\\n};\\n\\n// @public (undocumented)\\nexport type BadgeState = ComponentState<BadgeSlots> & Required<Pick<BadgeProps, 'appearance' | 'color' | 'iconPosition' | 'shape' | 'size'>>;\n```\n\n----------------------------------------\n\nTITLE: Import Statements from FluentUI React Components\nDESCRIPTION: TypeScript import statements showing all the available components, types, and utilities from the FluentUI React component library. Includes imports from packages like @griffel/react, @fluentui/react-accordion, @fluentui/react-avatar and others.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/etc/react-components.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { __css } from '@griffel/react';\nimport { __resetCSS } from '@griffel/react';\nimport { __resetStyles } from '@griffel/react';\nimport { __styles } from '@griffel/react';\nimport { Accordion } from '@fluentui/react-accordion';\nimport { accordionClassNames } from '@fluentui/react-accordion';\nimport { AccordionContextValue } from '@fluentui/react-accordion';\nimport { AccordionContextValues } from '@fluentui/react-accordion';\nimport { AccordionHeader } from '@fluentui/react-accordion';\nimport { accordionHeaderClassNames } from '@fluentui/react-accordion';\nimport { AccordionHeaderContextValue } from '@fluentui/react-accordion';\nimport { AccordionHeaderContextValues } from '@fluentui/react-accordion';\nimport { AccordionHeaderExpandIconPosition } from '@fluentui/react-accordion';\nimport { AccordionHeaderProps } from '@fluentui/react-accordion';\nimport { AccordionHeaderSize } from '@fluentui/react-accordion';\nimport { AccordionHeaderSlots } from '@fluentui/react-accordion';\nimport { AccordionHeaderState } from '@fluentui/react-accordion';\nimport { AccordionIndex } from '@fluentui/react-accordion';\nimport { AccordionItem } from '@fluentui/react-accordion';\nimport { accordionItemClassNames } from '@fluentui/react-accordion';\nimport { AccordionItemContextValue } from '@fluentui/react-accordion';\nimport { AccordionItemContextValues } from '@fluentui/react-accordion';\nimport { AccordionItemProps } from '@fluentui/react-accordion';\nimport { AccordionItemProvider } from '@fluentui/react-accordion';\nimport { AccordionItemSlots } from '@fluentui/react-accordion';\nimport { AccordionItemState } from '@fluentui/react-accordion';\nimport { AccordionItemValue } from '@fluentui/react-accordion';\nimport { AccordionPanel } from '@fluentui/react-accordion';\nimport { accordionPanelClassNames } from '@fluentui/react-accordion';\nimport { AccordionPanelProps } from '@fluentui/react-accordion';\nimport { AccordionPanelSlots } from '@fluentui/react-accordion';\nimport { AccordionPanelState } from '@fluentui/react-accordion';\nimport { AccordionProps } from '@fluentui/react-accordion';\nimport { AccordionProvider } from '@fluentui/react-accordion';\nimport { AccordionSlots } from '@fluentui/react-accordion';\nimport { AccordionState } from '@fluentui/react-accordion';\nimport { AccordionToggleData } from '@fluentui/react-accordion';\nimport { AccordionToggleEvent } from '@fluentui/react-accordion';\nimport { AccordionToggleEventHandler } from '@fluentui/react-accordion';\nimport { AlphaSlider } from '@fluentui/react-color-picker';\nimport { alphaSliderClassNames } from '@fluentui/react-color-picker';\nimport { AlphaSliderProps } from '@fluentui/react-color-picker';\nimport { AlphaSliderSlots } from '@fluentui/react-color-picker';\nimport { AlphaSliderState } from '@fluentui/react-color-picker';\nimport { AnnounceContextValue } from '@fluentui/react-shared-contexts';\nimport { AnnounceProvider } from '@fluentui/react-shared-contexts';\nimport { AriaLiveAnnouncer } from '@fluentui/react-aria';\nimport { AriaLiveAnnouncerProps } from '@fluentui/react-aria';\nimport { AriaLiveAnnouncerState } from '@fluentui/react-aria';\nimport { arrowHeights } from '@fluentui/react-popover';\nimport { assertSlots } from '@fluentui/react-utilities';\nimport { AtomMotion } from '@fluentui/react-motion';\nimport { AtomMotionFn } from '@fluentui/react-motion';\nimport { Avatar } from '@fluentui/react-avatar';\nimport { avatarClassNames } from '@fluentui/react-avatar';\nimport { AvatarGroup } from '@fluentui/react-avatar';\nimport { avatarGroupClassNames } from '@fluentui/react-avatar';\nimport { AvatarGroupContextValue } from '@fluentui/react-avatar';\nimport { AvatarGroupContextValues } from '@fluentui/react-avatar';\nimport { AvatarGroupItem } from '@fluentui/react-avatar';\nimport { avatarGroupItemClassNames } from '@fluentui/react-avatar';\nimport { AvatarGroupItemProps } from '@fluentui/react-avatar';\nimport { AvatarGroupItemSlots } from '@fluentui/react-avatar';\nimport { AvatarGroupItemState } from '@fluentui/react-avatar';\nimport { AvatarGroupPopover } from '@fluentui/react-avatar';\nimport { avatarGroupPopoverClassNames } from '@fluentui/react-avatar';\nimport { AvatarGroupPopoverProps } from '@fluentui/react-avatar';\nimport { AvatarGroupPopoverSlots } from '@fluentui/react-avatar';\nimport { AvatarGroupPopoverState } from '@fluentui/react-avatar';\nimport { AvatarGroupProps } from '@fluentui/react-avatar';\nimport { AvatarGroupProvider } from '@fluentui/react-avatar';\nimport { AvatarGroupSlots } from '@fluentui/react-avatar';\nimport { AvatarGroupState } from '@fluentui/react-avatar';\nimport { AvatarNamedColor } from '@fluentui/react-avatar';\nimport { AvatarProps } from '@fluentui/react-avatar';\nimport { AvatarSize } from '@fluentui/react-avatar';\nimport { AvatarSizes } from '@fluentui/react-avatar';\nimport { AvatarSlots } from '@fluentui/react-avatar';\nimport { AvatarState } from '@fluentui/react-avatar';\nimport { Badge } from '@fluentui/react-badge';\nimport { badgeClassNames } from '@fluentui/react-badge';\nimport { BadgeProps } from '@fluentui/react-badge';\nimport { BadgeSlots } from '@fluentui/react-badge';\nimport { BadgeState } from '@fluentui/react-badge';\nimport { Body1 } from '@fluentui/react-text';\nimport { body1ClassNames } from '@fluentui/react-text';\nimport { Body1Strong } from '@fluentui/react-text';\nimport { body1StrongClassNames } from '@fluentui/react-text';\nimport { Body1Stronger } from '@fluentui/react-text';\nimport { body1StrongerClassNames } from '@fluentui/react-text';\nimport { Body2 } from '@fluentui/react-text';\nimport { body2ClassNames } from '@fluentui/react-text';\nimport { BorderRadiusTokens } from '@fluentui/react-theme';\nimport { BrandVariants } from '@fluentui/react-theme';\nimport { Breadcrumb } from '@fluentui/react-breadcrumb';\nimport { BreadcrumbButton } from '@fluentui/react-breadcrumb';\nimport { breadcrumbButtonClassNames } from '@fluentui/react-breadcrumb';\nimport { BreadcrumbButtonProps } from '@fluentui/react-breadcrumb';\nimport { BreadcrumbButtonSlots } from '@fluentui/react-breadcrumb';\nimport { BreadcrumbButtonState } from '@fluentui/react-breadcrumb';\nimport { breadcrumbClassNames } from '@fluentui/react-breadcrumb';\nimport { BreadcrumbContextValues } from '@fluentui/react-breadcrumb';\nimport { BreadcrumbDivider } from '@fluentui/react-breadcrumb';\nimport { breadcrumbDividerClassNames } from '@fluentui/react-breadcrumb';\nimport { BreadcrumbDividerProps } from '@fluentui/react-breadcrumb';\nimport { BreadcrumbDividerSlots } from '@fluentui/react-breadcrumb';\nimport { BreadcrumbDividerState } from '@fluentui/react-breadcrumb';\nimport { BreadcrumbItem } from '@fluentui/react-breadcrumb';\nimport { breadcrumbItemClassNames } from '@fluentui/react-breadcrumb';\nimport { BreadcrumbItemProps } from '@fluentui/react-breadcrumb';\nimport { BreadcrumbItemSlots } from '@fluentui/react-breadcrumb';\nimport { BreadcrumbItemState } from '@fluentui/react-breadcrumb';\nimport { BreadcrumbProps } from '@fluentui/react-breadcrumb';\nimport { BreadcrumbProvider } from '@fluentui/react-breadcrumb';\nimport { BreadcrumbSlots } from '@fluentui/react-breadcrumb';\nimport { BreadcrumbState } from '@fluentui/react-breadcrumb';\nimport { Button } from '@fluentui/react-button';\nimport { buttonClassNames } from '@fluentui/react-button';\nimport { ButtonProps } from '@fluentui/react-button';\nimport { ButtonSlots } from '@fluentui/react-button';\nimport { ButtonState } from '@fluentui/react-button';\nimport { Caption1 } from '@fluentui/react-text';\nimport { caption1ClassNames } from '@fluentui/react-text';\nimport { Caption1Strong } from '@fluentui/react-text';\nimport { caption1StrongClassNames } from '@fluentui/react-text';\nimport { Caption1Stronger } from '@fluentui/react-text';\nimport { caption1StrongerClassNames } from '@fluentui/react-text';\nimport { Caption2 } from '@fluentui/react-text';\nimport { caption2ClassNames } from '@fluentui/react-text';\nimport { Caption2Strong } from '@fluentui/react-text';\nimport { caption2StrongClassNames } from '@fluentui/react-text';\nimport { Card } from '@fluentui/react-card';\nimport { cardClassNames } from '@fluentui/react-card';\nimport { cardCSSVars } from '@fluentui/react-card';\nimport { CardFooter } from '@fluentui/react-card';\nimport { cardFooterClassNames } from '@fluentui/react-card';\nimport { CardFooterProps } from '@fluentui/react-card';\nimport { CardFooterSlots } from '@fluentui/react-card';\nimport { CardFooterState } from '@fluentui/react-card';\nimport { CardHeader } from '@fluentui/react-card';\nimport { cardHeaderClassNames } from '@fluentui/react-card';\nimport { cardHeaderCSSVars } from '@fluentui/react-card';\nimport { CardHeaderProps } from '@fluentui/react-card';\nimport { CardHeaderSlots } from '@fluentui/react-card';\nimport { CardHeaderState } from '@fluentui/react-card';\nimport { CardPreview } from '@fluentui/react-card';\nimport { cardPreviewClassNames } from '@fluentui/react-card';\nimport { CardPreviewProps } from '@fluentui/react-card';\nimport { CardPreviewSlots } from '@fluentui/react-card';\nimport { CardPreviewState } from '@fluentui/react-card';\nimport { CardProps } from '@fluentui/react-card';\nimport { CardSlots } from '@fluentui/react-card';\nimport { CardState } from '@fluentui/react-card';\nimport { Carousel } from '@fluentui/react-carousel';\nimport { CarouselAnnouncerFunction } from '@fluentui/react-carousel';\nimport { CarouselAutoplayButton } from '@fluentui/react-carousel';\nimport { carouselAutoplayButtonClassNames } from '@fluentui/react-carousel';\nimport { CarouselAutoplayButtonProps } from '@fluentui/react-carousel';\nimport { CarouselAutoplayButtonSlots } from '@fluentui/react-carousel';\nimport { CarouselAutoplayButtonState } from '@fluentui/react-carousel';\nimport { CarouselButton } from '@fluentui/react-carousel';\n```\n\n----------------------------------------\n\nTITLE: Conformance Test for mergeClasses Function\nDESCRIPTION: This snippet defines a conformance test for the mergeClasses function, ensuring it properly merges class names passed to it. It validates the order of class names, asserting that the className from props must be the last parameter. Ensuring this order is crucial for CSS specificity. No external dependencies beyond the context of tests are mentioned.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-conformance-griffel/README.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// ✅ good\nmergeClasses(classes.root, 'foo', props.className);\n// ❌ bad\nmergeClasses(classes.root, props.className, 'foo');\n```\n\n----------------------------------------\n\nTITLE: Text Truncation Example with Accessibility Considerations\nDESCRIPTION: Example showing text truncation usage with note on how screen readers will still read the full text content for accessibility.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-text/library/docs/Spec.md#2025-04-20_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Text truncate>This is a very long text that will be truncated.</Text>\n```\n\n----------------------------------------\n\nTITLE: Ant Design Button DOM Structure\nDESCRIPTION: HTML structure for Ant Design button component showing icon and text content wrapped in spans. Includes SVG icon implementation with accessibility attributes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Button.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button type=\"button\" class=\"ant-btn\">\n  <i aria-label=\"icon: download\" class=\"anticon anticon-download\">\n    <svg\n      viewBox=\"64 64 896 896\"\n      focusable=\"false\"\n      class=\"\"\n      data-icon=\"download\"\n      width=\"1em\"\n      height=\"1em\"\n      fill=\"currentColor\"\n      aria-hidden=\"true\"\n    >\n      <path\n        d=\"M505.7 661a8 8 0 0 0 12.6 0l112-141.7c4.1-5.2.4-12.9-6.3-12.9h-74.1V168c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8v338.3H400c-6.7 0-10.4 7.7-6.3 12.9l112 141.8zM878 626h-60c-4.4 0-8 3.6-8 8v154H214V634c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8v198c0 17.7 14.3 32 32 32h684c17.7 0 32-14.3 32-32V634c0-4.4-3.6-8-8-8z\"\n      ></path>\n    </svg>\n  </i>\n  <span>Download</span>\n</button>\n```\n\n----------------------------------------\n\nTITLE: Implementing Accessible Accordion Headers\nDESCRIPTION: Demonstrates different ways to implement accessible accordion headers with proper heading levels and ARIA attributes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-accordion/library/docs/Spec.md#2025-04-20_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n{/* No heading level by default */}\n<AccordionHeader>This is a header</AccordionHeader>\n{/* Generated html */}\n<div>\n  <button>This is a header</button>\n</div>\n\n{/* as semantic heading */}\n<AccordionHeader as=\"h4\">This is a header</AccordionHeader>\n{/* Generated html */}\n<h4>\n  <button>This is a header</button>\n</h4>\n\n{/* if no semantic heading can be used */}\n<AccordionHeader role=\"heading\" aria-level=\"4\">This is a header</AccordionHeader>\n{/* Generated html */}\n<div role=\"heading\" aria-level=\"4\">\n  <button>This is a header</button>\n</h4>\n```\n\n----------------------------------------\n\nTITLE: Migrating Size Prop from v8 to v9\nDESCRIPTION: Demonstrates the conversion of Persona size enum to numeric size values in the v9 Avatar component, highlighting supported and unsupported size mappings\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-avatar/library/docs/MIGRATION.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Size conversion examples\n// Supported sizes\npersonaSize32 => avatar size={32}\npersonaSize24 => avatar size={24}\n\n// Unsupported sizes\npersonaSize8 => use PresenceBadge\npersonaSize16 => use size={20} with custom style\n```\n\n----------------------------------------\n\nTITLE: Controlling Menu Visibility in Fluent UI\nDESCRIPTION: Demonstrates how to control the visibility of a menu in both v7 and v0 of Fluent UI. It includes examples of controlled and uncontrolled components, and handling open/dismiss events.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/library/docs/Spec.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// v7 controlled ContextualMenu\nconst [showContextualMenu, setShowContextualMenu] = React.useState(false);\nconst onShowContextualMenu = () => setShowContextualMenu(true);\nconst onHideContextualMenu = () => setShowContextualMenu(false);\n\n<ContextualMenu\n  hidden={!showContextualMenu}\n  onItemClick={onHideContextualMenu}\n  onDismiss={onHideContextualMenu\n/>;\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// v0 uncontrolled Popup\nconst [open, setOpen] = React.useState(false);\n\n<Popup\n  onOpenChange={(e, props: PopupProps) => {/*react on changes*/}}\n  trigger={<Button icon={<OpenOutsideIcon />} title=\"Open popup\" />}\n/>;\n\n// v0 controlled Popup - used with trigger disables autocontrol\nconst [open, setOpen] = React.useState(false);\n\n<Popup\n  open={open}\n  onOpenChange={(e, props: PopupProps) => setOpen(!props.open)}\n  trigger={<Button icon={<OpenOutsideIcon />} title=\"Open popup\" />}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Extending Component State in FluentUI TypeScript\nDESCRIPTION: This snippet shows how to extend or add slots to the component state, both internally and externally. It demonstrates direct mutation of the state object.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/simplify-prop-merging.md#2025-04-20_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nconst state = useComponentState();\nstate.components.extraSlot = 'div';\nstate.extraSlot = resolveShorthand({\n  /** Shorthand props */\n});\n\nstate.components.icon = 'button';\nstate.icon = filterNativeButtonProps(state.icon);\n```\n\n----------------------------------------\n\nTITLE: Passing Primitive Values to Input Component Slots in React TSX\nDESCRIPTION: Example of passing string values to the contentBefore and contentAfter slots of the Input component to create a currency input format. This demonstrates how primitive values can be used as shorthand for slot content.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Slots/Slots.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Input contentBefore=\"$\" value=\"10\" contentAfter=\".00\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic SearchBox Component in React\nDESCRIPTION: This snippet demonstrates how to implement a basic SearchBox component using Fluent UI's SearchBox. It showcases the usage of 'ariaLabel', 'placeholder', and 'onSearch' event to capture the value entered by the user.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-search/library/docs/Spec.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"<SearchBox\\n    ariaLabel=\\\"SearchBox\\\"\\n    placeholder=\\\"Search\\\"\\n    onSearch={newValue => console.log('value is ' + newValue)}\\n/>\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Dialog Component in React using Fluent UI\nDESCRIPTION: This snippet demonstrates how to implement a dialog using React components from the Fluent UI library. It imports necessary Fluent UI components, establishes a dialog structure, and defines actions for opening and closing the dialog. The example includes a button to open the dialog and buttons within the dialog for closing and performing an action.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport {\n  Button,\n  Dialog,\n  DialogTrigger,\n  DialogSurface,\n  DialogTitle,\n  DialogBody,\n  DialogActions,\n  DialogContent,\n} from '@fluentui/react-components';\n\nexport const DialogExample = () => {\n  return (\n    <Dialog>\n      <DialogTrigger>\n        <Button>Open dialog</Button>\n      </DialogTrigger>\n      <DialogSurface>\n        <DialogBody>\n          <DialogTitle>Dialog title</DialogTitle>\n          <DialogContent>\n            Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam exercitationem cumque repellendus eaque\n            est dolor eius expedita nulla ullam? Tenetur reprehenderit aut voluptatum impedit voluptates in natus iure\n            cumque eaque?\n          </DialogContent>\n          <DialogActions>\n            <DialogTrigger>\n              <Button appearance=\"secondary\">Close</Button>\n            </DialogTrigger>\n            <Button appearance=\"primary\">Do Something</Button>\n          </DialogActions>\n        </DialogBody>\n      </DialogSurface>\n    </Dialog>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up FluentProvider in React 17 - JavaScript\nDESCRIPTION: This snippet shows how to set up the FluentProvider in a React 17 application. It incorporates the DOM render method to ensure the App component is wrapped with the Fluent UI theming context.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/QuickStart.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { FluentProvider, webLightTheme } from '@fluentui/react-components';\n\nimport App from './App';\n\nReactDOM.render(\n  <FluentProvider theme={webLightTheme}>\n    <App />\n  </FluentProvider>,\n  document.getElementById('root'),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Input Submission Dialog in FluentUI with React\nDESCRIPTION: This snippet demonstrates how to create a dialog with async input submission using React hooks for state management and form handling. It includes input validation and submission state handling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/docs/Spec.md#2025-04-20_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nfunction AsyncConfirmDialog() {\n  const [input, setInput] = useState('');\n  const [state, sendInput] = useSendInput();\n  const [isOpen, setIsOpen] = useState(false);\n  const handleInputChange = ev => {\n    setInput(ev.target.value.trim());\n  };\n  const handleOpenChange = (ev, { open }) => {\n    setIsOpen(open);\n    setInput(''); // clean up on cancel/close\n  };\n  const handleSubmit = async ev => {\n    ev.preventDefault();\n    await sendInput(input); // sending data on confirm\n    setIsOpen(false);\n  };\n  return (\n    <>\n      <Dialog open={isOpen} onOpenChange={handleOpenChange}>\n        <DialogTrigger>\n          <Button>Open Dialog</Button>\n        </DialogTrigger>\n        <DialogSurface>\n          <DialogTitle>This is a dialog</DialogTitle>\n          <DialogBody>\n            <form id=\"form-id\" onSubmit={handleSubmit}>\n              <Input required placeholder=\"Some input...\" value={input} onChange={handleInputChange} />\n            </form>\n          </DialogBody>\n          <DialogActions>\n            <DialogTrigger type=\"close\">\n              <Button>Close</Button>\n            </DialogTrigger>\n            <Button disabled={input === ''} form=\"form-id\" type=\"submit\">\n              {state === 'idle' && 'Submit'}\n              {state === 'submitting' && 'Submitting...'}\n            </Button>\n          </DialogActions>\n        </DialogSurface>\n      </Dialog>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Button Components from Fluent UI React\nDESCRIPTION: This snippet shows how to import various button components from the @fluentui/react-components package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-button/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button, CompoundButton, MenuButton, SplitButton, ToggleButton } from '@fluentui/react-components';\n```\n\n----------------------------------------\n\nTITLE: Defining Slots and Props (After)\nDESCRIPTION: This snippet shows the updated type definitions for Slots, Props, and State.  The key difference is that `root` is now explicitly defined as a slot with a specific type.  The `useState` hook now also handles resolving the root element's properties.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/root-as-slot.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Slots = {\n  root: ObjectShorthandProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n  slot: ObjectShorthandProps<SlotProps>;\n};\nexport interface Props extends ComponentProps<Slots> {\n  /* ... */\n}\nexport interface State extends ComponentState<Slots> {\n  /* ... */\n}\n\n// use*State hook\nfunction useState({slot, ...props}: Props): State {\n  // ...\n  return {\n    slot: resolveShorthand(slot)\n    root: getNativeElementProps(state.components.root, props),\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying RootLayout to Include Providers in Next.js\nDESCRIPTION: This TypeScript snippet modifies the RootLayout component in Next.js to include the custom Providers component. It imports necessary modules and applies a Google font, integrating the Providers to wrap the application's children, facilitating theme application and server-side rendering.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/SSR/NextJSAppDir.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Metadata } from 'next';\nimport { Inter } from 'next/font/google';\nimport './globals.css';\n\n// 👇 import the providers\nimport { Providers } from './providers';\n\nconst inter = Inter({ subsets: ['latin'] });\n\nexport const metadata: Metadata = {\n  title: 'Create Next App',\n  description: 'Generated by create next app',\n};\n\nexport default function RootLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <body className={inter.className}>\n        {/* 👇 Apply them to children */}\n        <Providers>{children}</Providers>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fluent UI React Components with FluentProvider\nDESCRIPTION: This React code snippet demonstrates how to use the FluentProvider component to wrap a Button component from @fluentui/react-components. It shows the basic structure for implementing Fluent UI components in a React application.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/README.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { FluentProvider, teamsLightTheme, Button } from '@fluentui/react-components';\n\nReactDOM.render(\n  <FluentProvider theme={teamsLightTheme}>\n    <Button appearance=\"primary\">I am a button.</Button>\n  </FluentProvider>,\n  document.getElementById('root'),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating the Menu Template\nDESCRIPTION: The HTML template defines the structure of the Menu component. It includes slots for 'trigger' and 'menu', and conditionally displays the menu list container based on the 'open' state. This template requires slotted elements for 'trigger' and utilizes attribute bindings and references for DOM manipulation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/menu/README.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<slot name=\"trigger\" ${slotted({ property: 'trigger', filter: elements() })}></slot>\n<span class=\"menu-list-container\" ${ref('menuListContainer')} ?hidden=\"${(x) => !x.open}\">\n  <slot ${slotted({ property: 'menu', filter: elements() })}></slot>\n</span>\n```\n\n----------------------------------------\n\nTITLE: Defining Button Component in React/TypeScript\nDESCRIPTION: Defines a Button class component that extends React.Component with IButtonProps interface.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class Button extends React_2.Component<IButtonProps, {}> {\n    constructor(props: IButtonProps);\n    // (undocumented)\n    render(): JSX.Element;\n}\n```\n\n----------------------------------------\n\nTITLE: FluentUI React Slider API Definitions in TypeScript\nDESCRIPTION: Comprehensive type definitions and component exports for the FluentUI React Slider component. Includes component props, state types, styling utilities, and rendering functions. The code defines the structure and API surface of a customizable slider component with support for horizontal and vertical orientations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-slider/library/etc/react-slider.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"react\" />\n\nimport type { ComponentProps } from '@fluentui/react-utilities';\nimport type { ComponentState } from '@fluentui/react-utilities';\nimport type { ForwardRefComponent } from '@fluentui/react-utilities';\nimport * as React_2 from 'react';\nimport type { Slot } from '@fluentui/react-utilities';\nimport type { SlotClassNames } from '@fluentui/react-utilities';\n\n// @public\nexport const renderSlider_unstable: (state: SliderState) => JSX.Element;\n\n// @public\nexport const Slider: ForwardRefComponent<SliderProps>;\n\n// @public (undocumented)\nexport const sliderClassNames: SlotClassNames<SliderSlots>;\n\n// @public (undocumented)\nexport const sliderCSSVars: {\n    sliderDirectionVar: string;\n    sliderInnerThumbRadiusVar: string;\n    sliderProgressVar: string;\n    sliderProgressColorVar: string;\n    sliderRailSizeVar: string;\n    sliderRailColorVar: string;\n    sliderStepsPercentVar: string;\n    sliderThumbColorVar: string;\n    sliderThumbSizeVar: string;\n};\n\n// @public (undocumented)\nexport type SliderOnChangeData = {\n    value: number;\n};\n\n// @public (undocumented)\nexport type SliderProps = Omit<ComponentProps<Partial<SliderSlots>, 'input'>, 'defaultValue' | 'onChange' | 'size' | 'value'> & {\n    defaultValue?: number;\n    disabled?: boolean;\n    max?: number;\n    min?: number;\n    size?: 'small' | 'medium';\n    step?: number;\n    value?: number;\n    vertical?: boolean;\n    onChange?: (ev: React_2.ChangeEvent<HTMLInputElement>, data: SliderOnChangeData) => void;\n};\n\n// @public (undocumented)\nexport type SliderSlots = {\n    root: NonNullable<Slot<'div'>>;\n    rail: NonNullable<Slot<'div'>>;\n    thumb: NonNullable<Slot<'div'>>;\n    input: NonNullable<Slot<'input'>> & {\n        orient?: 'horizontal' | 'vertical';\n    };\n};\n\n// @public (undocumented)\nexport type SliderState = ComponentState<SliderSlots> & Pick<SliderProps, 'disabled' | 'size' | 'vertical'>;\n\n// @public (undocumented)\nexport const useSlider_unstable: (props: SliderProps, ref: React_2.Ref<HTMLInputElement>) => SliderState;\n\n// @public (undocumented)\nexport const useSliderState_unstable: (state: SliderState, props: SliderProps) => SliderState;\n\n// @public\nexport const useSliderStyles_unstable: (state: SliderState) => SliderState;\n```\n\n----------------------------------------\n\nTITLE: FieldControlProps Definition\nDESCRIPTION: This snippet defines the FieldControlProps type. It picks specific HTML attributes relevant for form controls, such as 'id', 'aria-labelledby', 'aria-describedby', 'aria-invalid', and 'aria-required'.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-field/library/etc/react-field.api.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport type FieldControlProps = Pick<React_2.HTMLAttributes<HTMLElement>, 'id' | 'aria-labelledby' | 'aria-describedby' | 'aria-invalid' | 'aria-required'>;\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Listbox Component in TypeScript\nDESCRIPTION: Defines the Listbox component with support for multiple selection, option management, and event handling. Includes internal methods for managing selected options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Listbox extends FASTElement {\n    constructor();\n    // @internal\n    beforetoggleHandler(e: ToggleEvent): boolean | undefined;\n    clickHandler(e: PointerEvent): boolean | void;\n    connectedCallback(): void;\n    // @internal\n    dropdown?: BaseDropdown;\n    // @internal\n    elementInternals: ElementInternals;\n    // @internal\n    get enabledOptions(): DropdownOption[];\n    // @internal\n    handleChange(source: any, propertyName?: string): void;\n    id: string;\n    multiple?: boolean;\n    multipleChanged(prev: boolean | undefined, next: boolean | undefined): void;\n    options: DropdownOption[];\n    // @internal\n    optionsChanged(prev: DropdownOption[] | undefined, next: DropdownOption[] | undefined): void;\n    // @internal\n    selectedIndex: number;\n    get selectedOptions(): DropdownOption[];\n    selectOption(index?: number): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Controlled Checkbox Component with React Fluent UI\nDESCRIPTION: This snippet demonstrates a controlled Checkbox component in React, using Fluent UI. It shows handling indeterminate and checked states via props. It relies on Fluent UI React components and React state management. The 'isIndeterminate' and 'isChecked' states, and 'onChange' handler are prerequisites.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-switch/library/docs/Spec.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Checkbox\n  label=\"Indeterminate checkbox (controlled)\"\n  indeterminate={isIndeterminate}\n  checked={isChecked}\n  onChange={onChange}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Document for Next.js with Fluent UI\nDESCRIPTION: Implementation of a custom Document component (_document.tsx) that integrates Fluent UI's styling system with Next.js server-side rendering. It creates a DOM renderer for server-side rendering and adds Fluent UI style elements to the output.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/SSR/Nextjs.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createDOMRenderer, renderToStyleElements } from '@fluentui/react-components';\nimport Document, { Html, Head, Main, NextScript, DocumentContext } from 'next/document';\n\nclass MyDocument extends Document {\n  static async getInitialProps(ctx: DocumentContext) {\n    // 👇 creates a renderer that will be used for SSR\n    const renderer = createDOMRenderer();\n    const originalRenderPage = ctx.renderPage;\n\n    ctx.renderPage = () =>\n      originalRenderPage({\n        enhanceApp: App =>\n          function EnhancedApp(props) {\n            const enhancedProps = {\n              ...props,\n              // 👇 this is required to provide a proper renderer instance\n              renderer,\n            };\n\n            return <App {...enhancedProps} />;\n          },\n      });\n\n    const initialProps = await Document.getInitialProps(ctx);\n    const styles = renderToStyleElements(renderer);\n\n    return {\n      ...initialProps,\n      styles: (\n        <>\n          {initialProps.styles}\n          {/* 👇 adding Fluent UI styles elements to output */}\n          {styles}\n        </>\n      ),\n    };\n  }\n\n  render() {\n    return (\n      <Html>\n        <Head />\n        <body>\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    );\n  }\n}\n\nexport default MyDocument;\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Individual Fluent UI Packages\nDESCRIPTION: This snippet demonstrates the TypeScript configuration for individual packages within the Fluent UI monorepo. It extends the base configuration and includes package-specific settings.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/shared/build-system/01_convergence_devstack.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"../../tsconfig.base.json\",\n  \"compilerOptions\": {\n    \"types\": [\"node\", \"jest\"]\n  },\n  \"include\": [\"src\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Text Component Usage in Fabric\nDESCRIPTION: Examples of using the Text component in Fabric with variant, block, and nowrap properties for styling and formatting.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-text/library/docs/Spec.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Text>This is a Text component</Text>\n\n<Text variant=\"medium\">Text</Text>\n\n<Text block>Text</Text>\n\n<Text nowrap>Text with ellipsis</Text>\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Switch Component in Fluent UI React\nDESCRIPTION: These are sample usages of the Switch component in Fluent UI React. The examples illustrate the component in checked, checked & disabled, and checked with change handler states. The code assumes a working Setup with React and Fluent UI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-switch/library/docs/Spec.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Switch checked />\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<Switch checked disabled/>\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<Switch checked onChange={onChange}/>\n```\n\n----------------------------------------\n\nTITLE: Basic Checkbox Usage Examples in React\nDESCRIPTION: Examples demonstrating different checkbox variants including default, disabled, and circular shapes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-checkbox/library/README.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Checkbox label=\"Default checkbox\" />\n<Checkbox disabled label=\"Disabled\" />\n<Checkbox shape=\"circular\" label=\"Circular\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Z-Index Tokens in TypeScript\nDESCRIPTION: This code snippet defines a TypeScript type for `ZIndexTokens`, outlining the semantic layers to be used for managing z-index values within Fluent UI. Each layer corresponds to a specific element type (e.g., background, content, overlay). This promotes consistency and avoids arbitrary z-index assignments.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/z-index-handling.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"// packages/tokens/src/types.ts\\n\\n/**\\n * Design tokens for z-index groups and levels\\n */\\nexport type ZIndexTokens = {\\n  zIndexBackground: string;\\n  zIndexContent: string;\\n  zIndexOverlay: string;\\n  zIndexPopup: string;\\n  zIndexMessages: string;\\n  zIndexFloating: string;\\n  zIndexPriority: string;\\n  zIndexDebug: string;\\n};\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Circular Carousel with Navigation in Fluent UI React\nDESCRIPTION: This example demonstrates how to create a basic circular carousel with cards, navigation buttons, and accessibility announcements. It uses CarouselSlider for content, CarouselNavContainer for navigation controls, and CarouselAnnouncer for screen reader support.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-carousel/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Carousel groupSize={1} circular>\n  <CarouselSlider>\n    {Cards.map((card, index) => (\n      <CarouselCard key={`image-${index}`} index={index}>\n        Card {index + 1}\n      </CarouselCard>\n    ))}\n  </CarouselSlider>\n  <CarouselNavContainer next={{ 'aria-label': 'go to next' }} prev={{ 'aria-label': 'go to prev' }}>\n    <CarouselNav>{index => <CarouselNavButton aria-label={`Carousel Nav Button ${index}`} />}</CarouselNav>\n  </CarouselNavContainer>\n  <CarouselAnnouncer>\n    {(currentIndex, totalSlides, _slideGroupList) => {\n      return `Slide ${currentIndex + 1} of ${totalSlides}`;\n    }}\n  </CarouselAnnouncer>\n</Carousel>\n```\n\n----------------------------------------\n\nTITLE: Using ThemeProvider with Fluent 2 Themes in React\nDESCRIPTION: This code snippet imports ThemeProvider and Fluent 2 themes from Fluent UI and demonstrates how to apply light and dark themes to a React component. The imported themes, Fluent2WebLightTheme and Fluent2WebDarkTheme, are applied using ThemeProvider, allowing developers to easily switch themes in their application.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluent2-theme/README.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n  import { ThemeProvider } from '@fluentui/react';\n  import { Fluent2WebLightTheme, Fluent2WebDarkTheme } from '@fluentui/fluent2-theme';\n\n  <ThemeProvider theme={Fluent2WebLightTheme}>\n    <div>Light Themed</div>\n  </ThemeProvider>\n\n  <ThemeProvider theme={Fluent2WebDarkTheme}>\n    <div>Dark Themed</div>\n  </ThemeProvider>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for RatingDisplay Component\nDESCRIPTION: Shows the basic HTML structure and class names used for rendering a RatingDisplay component\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-rating/library/docs/Spec.md#2025-04-20_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- Container for RatingDisplay -->\n<div class=\"fui-RatingDisplay\">\n  <!-- Container for RatingItem -->\n  <span class=\"fui-RatingItem\">\n    <!-- Icon slot -->\n    <div class=\"fui-RatingItem\">\n      <svg>...</svg>\n    </div>\n  </span>\n  <!--Value label slot-->\n  <span>...</span>\n  <!-- Count label slot -->\n  <span>...</span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Theme with Fluent UI\nDESCRIPTION: This code snippet showcases how to create a custom theme in Fluent UI React using the `createTheme` function. It demonstrates modifying the Button component by specifying variants such as font weight and padding. The primary dependency is the `@fluentui/theme` package, which must be installed prior to usage.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/theme/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTheme, Theme, FontWeights } from '@fluentui/theme';\n\nexport const MyTheme: Theme = createTheme({\n  components: {\n    Button: {\n      variants: {\n        fontWeight: FontWeights.semibold,\n        paddingLeft: '24px',\n        paddingRight: '24px',\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Theme Object in TypeScript\nDESCRIPTION: Example of a theme object structure in Fluent UI, showing how tokens are defined with their corresponding values.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Theming.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst exampleTheme = {\n  borderRadiusSmall: '2px',\n  //...\n  colorNeutralForeground2: '#424242',\n};\n```\n\n----------------------------------------\n\nTITLE: Integration with Third-Party Motion Systems Using Render Callback\nDESCRIPTION: Example showing how to integrate FluentUI components with third-party motion systems like react-transition-group using a render callback in the motion prop.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/motion-definition-n-apis.md#2025-04-20_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\n<DialogSurface\n  motion={{\n    children: (\n      Element /* 1️⃣ default element defined in a component */,\n      props /*   2️⃣ props required to control motion */,\n    ) => {\n      return (\n        // 💡CSSTransition comes from \"react-transition-group\"\n        <CSSTransition classNames=\"my-css-fade\" nodeRef={props.ref} timeout={500} in={props.visible}>\n          {props.children}\n        </CSSTransition>\n      );\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Object-based Shorthand Prop Customization\nDESCRIPTION: Shows how to customize default element props by providing an object with specific properties for a component's slot\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/docs/src/pages/ShorthandProps.mdx#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Loader label={{ content: 'Fetching data...', size: 'small' }} />\n```\n\n----------------------------------------\n\nTITLE: Flex with Buttons\nDESCRIPTION: This example demonstrates the basic usage of the Flex component to create a layout with two buttons.  It uses gap to create spacing between the buttons.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/docs/src/examples/components/Flex/Recipes.mdx#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"<Flex gap=\\\"gap.small\\\">\\n    <Button content=\\\"Accept\\\" />\\n    <Button content=\\\"Deny\\\" />\\n  </Flex>\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Fluent UI React Hooks\nDESCRIPTION: This code snippet exports numerous React hooks used in the Fluent UI library. These hooks provide functionality for various UI components and features, such as dialogs, drawers, fields, menus, and form elements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/etc/react-components.api.md#2025-04-20_snippet_36\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport { useDialogContent_unstable }\n\nexport { useDialogContentStyles_unstable }\n\nexport { useDialogContext_unstable }\n\nexport { useDialogSurface_unstable }\n\nexport { useDialogSurfaceContext_unstable }\n\nexport { useDialogSurfaceContextValues_unstable }\n\nexport { useDialogSurfaceStyles_unstable }\n\nexport { useDialogTitle_unstable }\n\nexport { useDialogTitleStyles_unstable }\n\nexport { useDialogTrigger_unstable }\n\nexport { useDivider_unstable }\n\nexport { useDividerStyles_unstable }\n\nexport { useDrawer_unstable }\n\nexport { useDrawerBody_unstable }\n\nexport { useDrawerBodyStyles_unstable }\n\nexport { useDrawerContext_unstable }\n\nexport { useDrawerContextValue }\n\nexport { useDrawerFooter_unstable }\n\nexport { useDrawerFooterStyles_unstable }\n\nexport { useDrawerHeader_unstable }\n\nexport { useDrawerHeaderNavigation_unstable }\n\nexport { useDrawerHeaderNavigationStyles_unstable }\n\nexport { useDrawerHeaderStyles_unstable }\n\nexport { useDrawerHeaderTitle_unstable }\n\nexport { useDrawerHeaderTitleStyles_unstable }\n\nexport { useDrawerStyles_unstable }\n\nexport { useDropdown_unstable }\n\nexport { useDropdownStyles_unstable }\n\nexport { useEmptySwatch_unstable }\n\nexport { useEmptySwatchStyles_unstable }\n\nexport { useEventCallback }\n\nexport { useField_unstable }\n\nexport { useFieldContext_unstable }\n\nexport { useFieldContextValues_unstable }\n\nexport { useFieldControlProps_unstable }\n\nexport { useFieldStyles_unstable }\n\nexport { useFlatTree_unstable }\n\nexport { useFlatTreeContextValues_unstable }\n\nexport { useFlatTreeStyles_unstable }\n\nexport { useFluent }\n\nexport { useFluentProvider_unstable }\n\nexport { useFluentProviderContextValues_unstable }\n\nexport { useFluentProviderStyles_unstable }\n\nexport { useFluentProviderThemeStyleTag }\n\nexport { useFocusableGroup }\n\nexport { UseFocusableGroupOptions }\n\nexport { useFocusFinders }\n\nexport { useFocusObserved }\n\nexport { useFocusVisible }\n\nexport { useFocusWithin }\n\nexport { useHeadlessFlatTree_unstable }\n\nexport { useId }\n\nexport { useImage_unstable }\n\nexport { useImageStyles_unstable }\n\nexport { useImageSwatch_unstable }\n\nexport { useImageSwatchStyles_unstable }\n\nexport { useInfoLabel_unstable }\n\nexport { useInfoLabelStyles_unstable }\n\nexport { useInlineDrawer_unstable }\n\nexport { useInlineDrawerStyles_unstable }\n\nexport { useInput_unstable }\n\nexport { useInputStyles_unstable }\n\nexport { useInteractionTag_unstable }\n\nexport { useInteractionTagContextValues_unstable }\n\nexport { useInteractionTagPrimary_unstable }\n\nexport { useInteractionTagPrimaryStyles_unstable }\n\nexport { useInteractionTagSecondary_unstable }\n\nexport { useInteractionTagSecondaryStyles_unstable }\n\nexport { useInteractionTagStyles_unstable }\n\nexport { useIsInTableHeader }\n\nexport { useIsomorphicLayoutEffect }\n\nexport { useIsOverflowGroupVisible }\n\nexport { useIsOverflowItemVisible }\n\nexport { useIsSSR }\n\nexport { useKeyboardNavAttribute }\n\nexport { useLabel_unstable }\n\nexport { useLabelStyles_unstable }\n\nexport { useLink_unstable }\n\nexport { useLinkState_unstable }\n\nexport { useLinkStyles_unstable }\n\nexport { useList_unstable }\n\nexport { useListbox_unstable }\n\nexport { useListboxContext_unstable }\n\nexport { useListboxContextValues }\n\nexport { useListboxStyles_unstable }\n\nexport { useListItem_unstable }\n\nexport { useListItemStyles_unstable }\n\nexport { useListStyles_unstable }\n\nexport { useMenu_unstable }\n\nexport { useMenuButton_unstable }\n\nexport { useMenuButtonStyles_unstable }\n\nexport { useMenuContext_unstable }\n\nexport { useMenuContextValues_unstable }\n\nexport { useMenuDivider_unstable }\n\nexport { useMenuDividerStyles_unstable }\n\nexport { useMenuGroup_unstable }\n\nexport { useMenuGroupContext_unstable }\n\nexport { useMenuGroupContextValues_unstable }\n\nexport { useMenuGroupHeader_unstable }\n\nexport { useMenuGroupHeaderStyles_unstable }\n\nexport { useMenuGroupStyles_unstable }\n\nexport { useMenuItem_unstable }\n\nexport { useMenuItemCheckbox_unstable }\n\nexport { useMenuItemCheckboxStyles_unstable }\n\nexport { useMenuItemLink_unstable }\n\nexport { useMenuItemLinkStyles_unstable }\n\nexport { useMenuItemRadio_unstable }\n\nexport { useMenuItemRadioStyles_unstable }\n\nexport { useMenuItemStyles_unstable }\n\nexport { useMenuItemSwitch_unstable }\n\nexport { useMenuItemSwitchStyles_unstable }\n\nexport { useMenuList_unstable }\n\nexport { useMenuListContext_unstable }\n\nexport { useMenuListContextValues_unstable }\n\nexport { useMenuListStyles_unstable }\n\nexport { useMenuPopover_unstable }\n\nexport { useMenuPopoverStyles_unstable }\n\nexport { useMenuSplitGroup_unstable }\n\nexport { useMenuSplitGroupStyles_unstable }\n\nexport { useMenuTrigger_unstable }\n\nexport { useMenuTriggerContext_unstable }\n\nexport { useMergedRefs }\n\nexport { useMessageBar_unstable }\n\nexport { useMessageBarActions_unstable }\n\nexport { useMessageBarActionsContextValue_unstable }\n\nexport { useMessageBarActionsStyles_unstable }\n\nexport { useMessageBarBody_unstable }\n\nexport { useMessageBarBodyStyles_unstable }\n\nexport { useMessageBarContext }\n\nexport { useMessageBarContextValue_unstable }\n\nexport { useMessageBarGroup_unstable }\n\nexport { useMessageBarGroupStyles_unstable }\n\nexport { useMessageBarStyles_unstable }\n\nexport { useMessageBarTitle_unstable }\n\nexport { useMessageBarTitleStyles_unstable }\n\nexport { useModalAttributes }\n\nexport { UseModalAttributesOptions }\n\nexport { useObservedElement }\n\nexport { useOption_unstable }\n\nexport { useOptionGroup_unstable }\n\nexport { useOptionGroupStyles_unstable }\n\nexport { useOptionStyles_unstable }\n\nexport { useOverflowCount }\n\nexport { useOverflowMenu }\n\nexport { useOverflowVisibility }\n\nexport { useOverlayDrawer_unstable }\n\nexport { useOverlayDrawerStyles_unstable }\n\nexport { usePersona_unstable }\n\nexport { usePersonaStyles_unstable }\n\nexport { usePopover_unstable }\n\nexport { usePopoverContext_unstable }\n\nexport { usePopoverSurface_unstable }\n\nexport { usePopoverSurfaceStyles_unstable }\n\nexport { usePopoverTrigger_unstable }\n\nexport { usePortal_unstable }\n\nexport { usePortalMountNode }\n\nexport { usePresenceBadge_unstable }\n\nexport { usePresenceBadgeStyles_unstable }\n\nexport { useProgressBar_unstable }\n\nexport { useProgressBarStyles_unstable }\n\nexport { useRadio_unstable }\n\nexport { useRadioGroup_unstable }\n\nexport { useRadioGroupContext_unstable }\n\nexport { useRadioGroupContextValue_unstable }\n\nexport { useRadioGroupContextValues }\n\nexport { useRadioGroupStyles_unstable }\n\nexport { useRadioStyles_unstable }\n\nexport { useRating_unstable }\n\nexport { useRatingContextValues }\n\nexport { useRatingDisplay_unstable }\n\nexport { useRatingDisplayContextValues }\n\nexport { useRatingDisplayStyles_unstable }\n\nexport { useRatingItem_unstable }\n\nexport { useRatingItemContextValue_unstable }\n\nexport { useRatingItemStyles_unstable }\n\nexport { useRatingStyles_unstable }\n\nexport { useRestoreFocusSource }\n\nexport { useRestoreFocusTarget }\n\nexport { useScrollbarWidth }\n\nexport { useSearchBox_unstable }\n\nexport { useSearchBoxStyles_unstable }\n\nexport { useSelect_unstable }\n\nexport { useSelection }\n\nexport { useSelectStyles_unstable }\n\nexport { useSkeleton_unstable }\n\nexport { useSkeletonContext }\n\nexport { useSkeletonItem_unstable }\n\nexport { useSkeletonItemStyles_unstable }\n\nexport { useSkeletonStyles_unstable }\n\nexport { useSlider_unstable }\n\nexport { useSliderState_unstable }\n\nexport { useSliderStyles_unstable }\n\nexport { useSpinButton_unstable }\n\nexport { useSpinButtonStyles_unstable }\n\nexport { useSpinner_unstable }\n\nexport { useSpinnerStyles_unstable }\n\nexport { useSplitButton_unstable }\n\nexport { useSplitButtonStyles_unstable }\n\nexport { useSubtreeContext_unstable }\n\nexport { useSwatchPicker_unstable }\n\nexport { useSwatchPickerContextValue_unstable }\n\nexport { useSwatchPickerContextValues }\n\nexport { useSwatchPickerRow_unstable }\n\nexport { useSwatchPickerRowStyles_unstable }\n\nexport { useSwatchPickerStyles_unstable }\n\nexport { useSwitch_unstable }\n\nexport { useSwitchStyles_unstable }\n\nexport { useTab_unstable }\n\nexport { useTable_unstable }\n\nexport { useTableBody_unstable }\n\nexport { useTableBodyStyles_unstable }\n\nexport { useTableCell_unstable }\n\nexport { useTableCellActions_unstable }\n\nexport { useTableCellActionsStyles_unstable }\n\nexport { useTableCellLayout_unstable }\n\nexport { useTableCellLayoutStyles_unstable }\n\nexport { useTableCellStyles_unstable }\n\nexport { useTableColumnSizing_unstable }\n\nexport { useTableCompositeNavigation }\n\nexport { useTableContext }\n\nexport { useTableFeatures }\n\nexport { UseTableFeaturesOptions }\n\nexport { useTableHeader_unstable }\n\nexport { useTableHeaderCell_unstable }\n\nexport { useTableHeaderCellStyles_unstable }\n\nexport { useTableHeaderStyles_unstable }\n\nexport { useTableResizeHandle_unstable }\n\nexport { useTableResizeHandleStyles_unstable }\n\nexport { useTableRow_unstable }\n\nexport { useTableRowIdContext }\n\nexport { useTableRowStyles_unstable }\n\nexport { useTableSelection }\n\nexport { useTableSelectionCell_unstable }\n\nexport { useTableSelectionCellStyles_unstable }\n\nexport { useTableSort }\n\nexport { useTableStyles_unstable }\n\nexport { useTabList_unstable }\n\nexport { useTabListContext_unstable }\n\nexport { useTabListContextValues_unstable }\n\nexport { useTabListStyles_unstable }\n\nexport { useTabStyles_unstable }\n\nexport { useTag_unstable }\n\nexport { useTagAvatarContextValues_unstable }\n\nexport { useTagGroup_unstable }\n\nexport { useTagGroupContextValues_unstable }\n\nexport { useTagGroupStyles_unstable }\n\nexport { useTagPicker_unstable }\n\nexport { useTagPickerButton_unstable }\n\nexport { useTagPickerButtonStyles_unstable }\n\nexport { useTagPickerContext_unstable }\n\nexport { useTagPickerControl_unstable }\n\nexport { useTagPickerControlStyles_unstable }\n\nexport { useTagPickerFilter }\n\nexport { useTagPickerGroup_unstable }\n\nexport { useTagPickerGroupStyles_unstable }\n\nexport { useTagPickerInput_unstable }\n\nexport { useTagPickerInputStyles_unstable }\n\nexport { useTagPickerList_unstable }\n\nexport { useTagPickerListStyles_unstable }\n\nexport { useTagPickerOption_unstable }\n\nexport { useTagPickerOptionGroup }\n```\n\n----------------------------------------\n\nTITLE: Using Tokens for CSS Variables in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the exported tokens object to reference CSS variables for theme values.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/docs/MIGRATION-NOTES.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { tokens } from '@fluentui/react-components';\n\n// To refer to the css variable containing the value for color neutral foreground 1:\nconsole.log(tokens.colorNeutralForeground1);\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for DialogActionsProps in TypeScript\nDESCRIPTION: Specifies the type definition for the DialogActions component, which serves as a container for the dialog's action buttons, primarily for styling purposes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/docs/Spec.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype DialogActionsSlots = {\n  root: Slot<'div'>;\n};\n```\n\n----------------------------------------\n\nTITLE: Server-side rendering with renderStatic\nDESCRIPTION: Demonstrates how to use the `renderStatic` method from `@fluentui/merge-styles/lib/server` to render content and extract the CSS rules as a string for server-side rendering. This allows you to pre-render styles on the server for improved performance and SEO.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/merge-styles/README.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { renderStatic } from '@fluentui/merge-styles/lib/server';\n\nlet { html, css } = renderStatic(() => {\n  return ReactDOM.renderToString(...);\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Component Class Names with FluentUI in TSX\nDESCRIPTION: This snippet illustrates the pattern of providing class names for components using `mergeStyleSets` to define a set of styles in a separate file. The `getClassNames` function leverages `mergeStyleSets` to specify styles for elements like root, button, and button icon using TypeScript interfaces.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/merge-styles/README.md#2025-04-20_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\nimport { IStyle, mergeStyleSets } from '@fluentui/merge-styles';\n\nexport interface IComponentClassNames {\n  root: string;\n  button: string;\n  buttonIcon: string;\n}\n\nexport const getClassNames = (): IComponentClassNames => {\n  return mergeStyleSets({\n    root: {\n      background: 'red',\n    },\n\n    button: {\n      backgroundColor: 'green',\n    },\n\n    buttonIcon: {\n      margin: 10,\n    },\n  });\n};\n```\n\nLANGUAGE: TSX\nCODE:\n```\nimport { getClassNames } from './MyComponent.classNames';\n\nexport const MyComponent = () => {\n  let { root, button, buttonIcon } = getClassNames();\n\n  return (\n    <div className={root}>\n      <button className={button}>\n        <i className={buttonIcon} />\n      </button>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: The useButton_unstable Hook with Shorthand Resolution in React\nDESCRIPTION: Defines the useButton_unstable hook which simplifies shorthand props for the button component, ensuring they can be merged seamlessly with other props.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-utilities/src/compose/README.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst useButton_unstable = (props, ref) => {\n  const state = {\n    // Default props\n    as: 'button',\n    // User props\n    ...props,\n    // Overrides\n    ref,\n    icon: resolveShorthand(props.icon, { as: 'span' }),\n  };\n\n  // Apply button behaviors.\n  useButton_unstable(state);\n\n  return { state, render };\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Callout Component Props Interface in TypeScript\nDESCRIPTION: Interface for Callout component properties with extensive configuration options for positioning, accessibility, and styling\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ICalloutProps extends React_2.HTMLAttributes<HTMLDivElement>, React_2.RefAttributes<HTMLDivElement> {\n    alignTargetEdge?: boolean;\n    ariaDescribedBy?: string;\n    // ... multiple other configuration properties\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Drawer Components in TypeScript\nDESCRIPTION: This snippet demonstrates how to import various Drawer components from the @fluentui/react-components package. It includes the main Drawer component along with specialized variants and subcomponents.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-drawer/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Drawer,\n  OverlayDrawer,\n  InlineDrawer,\n  DrawerHeader,\n  DrawerHeaderTitle,\n  DrawerHeaderNavigation,\n  DrawerBody\n} from \"@fluentui/react-components';\"\n```\n\n----------------------------------------\n\nTITLE: Defining CounterBadge Component and Props in TypeScript\nDESCRIPTION: This snippet provides the definition for the CounterBadge component along with its props, defining properties like count, dot, overflowCount, shape, and showZero, which alter its display characteristics. It also includes types for CounterBadgeState that extend the BadgeState.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/etc/react-badge.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\\nexport const CounterBadge: ForwardRefComponent<CounterBadgeProps>;\\n\\n// @public (undocumented)\\nexport const counterBadgeClassNames: SlotClassNames<BadgeSlots>;\\n\\n// @public (undocumented)\\nexport type CounterBadgeProps = Omit<BadgeProps, 'appearance' | 'color' | 'shape'> & {\\n    appearance?: 'filled' | 'ghost';\\n    color?: Extract<BadgeProps['color'], 'brand' | 'danger' | 'important' | 'informative'>;\\n    count?: number;\\n    dot?: boolean;\\n    overflowCount?: number;\\n    shape?: 'circular' | 'rounded';\\n    showZero?: boolean;\\n};\\n\\n// @public (undocumented)\\nexport type CounterBadgeState = Omit<BadgeState, 'appearance' | 'color' | 'shape'> & Required<Pick<CounterBadgeProps, 'appearance' | 'color' | 'count' | 'dot' | 'shape' | 'showZero'>>;\n```\n\n----------------------------------------\n\nTITLE: useFieldControlProps_unstable Definition\nDESCRIPTION: This snippet defines the overloaded useFieldControlProps_unstable function. It either returns the default FieldControlProps or merges provided props with the default ones based on provided options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-field/library/etc/react-field.api.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport function useFieldControlProps_unstable(): FieldControlProps | undefined;\\n\\n// @public\nexport function useFieldControlProps_unstable<Props extends FieldControlProps>(props: Props, options?: FieldControlPropsOptions): Props;\"\n```\n\n----------------------------------------\n\nTITLE: Server-Side Rendering Considerations for React Portals\nDESCRIPTION: Describes how React Portals can be rendered correctly during server-side rendering by using null for missing DOM nodes and adjusting for content that requires fixed positioning.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-portal/library/docs/Spec.md#2025-04-20_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<FluentProvider>\n  <Portal id=\"portal-1\" />\n  <Portal id=\"portal-2\" />\n</FluentProvider>\n```\n\n----------------------------------------\n\nTITLE: Setting TabIndex for ScrollView - JavaScript\nDESCRIPTION: Implementation guidance for setting tabIndex on ScrollView containers. When the ScrollView has no focusable children, set tabIndex to 0 to enable keyboard scrolling. When focusable descendants exist, no tabIndex is needed.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-virtualizer/stories/src/VirtualizerScrollView/VirtualizerScrollViewAccessibility.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntabIndex: 0\n```\n\n----------------------------------------\n\nTITLE: Implementing BaseTextInput Class in TypeScript\nDESCRIPTION: Defines the BaseTextInput class which extends FASTElement. It implements core functionality for text input components, including form association, validation, and event handling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class BaseTextInput extends FASTElement {\n    autocomplete?: string;\n    autofocus: boolean;\n    // @internal\n    beforeinputHandler(e: InputEvent): boolean | void;\n    // @internal\n    changeHandler(e: InputEvent): boolean | void;\n    checkValidity(): boolean;\n    clickHandler(e: MouseEvent): boolean | void;\n    // (undocumented)\n    connectedCallback(): void;\n    // @internal\n    control: HTMLInputElement;\n    // @internal\n    controlLabel: HTMLLabelElement;\n    currentValue: string;\n    // @internal\n    currentValueChanged(prev: string, next: string): void;\n    // @internal\n    defaultSlottedNodes: Node[];\n    // @internal\n    defaultSlottedNodesChanged(prev: Node[] | undefined, next: Node[] | undefined): void;\n    dirname?: string;\n    disabled?: boolean;\n    // @internal\n    elementInternals: ElementInternals;\n    focusinHandler(e: FocusEvent): boolean | void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TagPicker Properties in TypeScript\nDESCRIPTION: This TypeScript type definition specifies the properties expected by the TagPicker component, leveraging ComboboxProps for behavior management. Important properties include event handlers for open change and option selection, and the structure of children elements which must include a popover or trigger component. The main functionality is to provide a cohesive developer interface for TagPicker components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/Spec.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type TagPickerSlots = {};\n\nexport type TagPickerProps = ComponentProps<TagPickerSlots> &\n  Pick<\n    ComboboxProps,\n    'positioning' | 'disabled' | 'defaultOpen' | 'selectedOptions' | 'defaultSelectedOptions' | 'open' | 'freeform'\n  > &\n  Pick<Partial<TagPickerContextValue>, 'size' | 'appearance'> & {\n    onOpenChange?: EventHandler<TagPickerOnOpenChangeData>;\n    onOptionSelect?: EventHandler<TagPickerOnOptionSelectData>;\n\n    /**\n     * Can contain two children including a trigger and a popover\n     */\n    children: [JSX.Element, JSX.Element] | JSX.Element;\n  };\n```\n\n----------------------------------------\n\nTITLE: Standalone Text Component Usage\nDESCRIPTION: Example showing how to use the Text component when installed separately with its provider.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-text/library/README.md#2025-04-20_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { FluentProvider } from '@fluentui/react-provider';\nimport { Text } from '@fluentui/react-text';\n\nconst App = () => (\n  <FluentProvider>\n    <Text>Fluent UI Text!</Text>\n  </FluentProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Menu Items with Icons - TSX\nDESCRIPTION: This snippet illustrates a menu implementation in React that includes icons for each menu item, using the Menu component and its variants.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/library/docs/Spec.md#2025-04-20_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nconst menu = (\n  <Menu>\n    <MenuTrigger><button>Opem menu</button></MenuTrigger>\n    <MenuList>\n      <MenuItem icon={<FileIcon />}>Option 1</MenuItem>\n      <MenuItem icon={<BellIcon />}>Option 2</MenuItem>\n      <MenuItem icon={<LinkIcon />}>Option 3</MenuItem>\n    </MenuList>\n  <Menu>\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Dialog Sample in React using JSX\nDESCRIPTION: Illustrates a simple implementation of a Dialog component with a trigger button and a basic surface, representing minimal functionality.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/docs/Spec.md#2025-04-20_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst dialog = <Dialog>\n  <DialogTrigger>\n    <Button>Open Dialog</Button>\n  <DialogTrigger>\n  <DialogSurface>\n    This is as basic as it gets.\n  </DialogSurface>\n</Dialog>\n```\n\n----------------------------------------\n\nTITLE: DetailsList with selection\nDESCRIPTION: This code demonstrates how to implement selection within a DetailsList component in v8 of Fluent UI. It initializes a `Selection` object and passes it to the `DetailsList` and `MarqueeSelection` components, allowing for both checkbox-based and marquee selection. The `onSelectionChanged` function within the `Selection` class allows reacting to selection changes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-table/library/docs/Spec.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n_selection = new Selection({\n  onSelectionChanged: () => {\n    this.setState({\n      selectionDetails: this._getSelectionDetails(),\n    });\n  },\n});\n\n<DetailsList items={items} selectionMode={SelectionMode.multiple} setKey=\"multiple\" selection={_selection} />;\n\n// Marquee selection\n<MarqueeSelection selection={this._selection}>\n  <DetailsList items={items} selectionMode={SelectionMode.multiple} setKey=\"multiple\" selection={_selection} />;\n</MarqueeSelection>;\n```\n\n----------------------------------------\n\nTITLE: Migrating Button Component from v8 to v9 in JSX\nDESCRIPTION: This code snippet demonstrates how to migrate a PrimaryButton from Fluent UI v8 to a Button with primary appearance in v9.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/GettingStarted.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<PrimaryButton>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Button appearance=\"primary\"/>\n```\n\n----------------------------------------\n\nTITLE: Basic Implementation of Fluent Dialog Web Component\nDESCRIPTION: Demonstrates the basic structure and usage of the fluent-dialog component with various slots for title, content, and actions\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/dialog/README.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<fluent-dialog>\n  <fluent-dialog-body>\n    <!-- Header -->\n    <fluent-text slot=\"title\">Dialog</fluent-text>\n    <fluent-button slot=\"title-action\"><svg></svg></fluent-button>\n\n    <!-- Default Content -->\n    <fluent-text>Default Content</fluent-text>\n\n    <!-- Footer/Actions -->\n    <fluent-button slot=\"action\">Do Something</fluent-button>\n    <fluent-button slot=\"action\">Close</fluent-button>\n  </fluent-dialog-body>\n</fluent-dialog>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Collapse Transition using Fluent UI React\nDESCRIPTION: This TypeScript snippet demonstrates how to create a custom collapse transition using Fluent UI's motion components. The `createCollapsePresence` function is used to define a collapse variant with specific motion tokens for enter and exit animations. The `createPresenceComponent` helper then converts this configuration into a React component that can be used in the application. Key parameters include `enterDuration` and `enterEasing` for the entrance animation, and `exitDuration` and `exitEasing` for the exit animation. This setup relies on Fluent UI's motion and component packages, and the resulting component is demonstrated with `animateOpacity` set to `false` and `unmountOnExit` enabled.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-motion-components-preview/stories/src/Collapse/CollapseCustomization.stories.md#2025-04-20_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { motionTokens, createPresenceComponent } from '@fluentui/react-components';\nimport { createCollapsePresence } from '@fluentui/react-motion-components-preview';\n\nconst CustomCollapseVariant = createPresenceComponent(\n  createCollapsePresence({\n    enterDuration: motionTokens.durationSlow,\n    enterEasing: motionTokens.curveEasyEaseMax,\n    exitDuration: motionTokens.durationNormal,\n    exitEasing: motionTokens.curveEasyEaseMax,\n  }),\n);\n\nconst CustomCollapse = ({ visible }) => (\n  <CustomCollapseVariant animateOpacity={false} unmountOnExit visible={visible}>\n    {/* Content */}\n  </CustomCollapseVariant>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Input with Label in Fluent UI React\nDESCRIPTION: Example usage of the Input component with a Label component, demonstrating how to connect them with htmlFor/id attributes and use contentBefore/contentAfter slots for icons.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-input/library/docs/Spec.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Label htmlFor=\"input1\">Label</Label> // note that the label is not built in\n<Input\n  className=\"rootClass\"\n  input={{ className: 'inputClass' }}\n  id=\"input1\"\n  value=\"something\"\n  onChange={(ev, data) => console.log(data.value)}\n  contentBefore={<SearchIcon />}\n  contentAfter={<ClearIcon />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Avatars with Names\nDESCRIPTION: This snippet shows different examples of the Avatar component using names, sizes, images, and shapes. The component can be customized with properties such as name, size, image path, and shape. These examples cover a range of common use cases for displaying avatars with different visual characteristics.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-avatar/library/README.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Avatar name=\"Miguel Garcia\" />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Avatar size={72} name=\"Mona Kane\" image=\"./MonaKane.jpg\" />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Avatar shape=\"square\" icon={<IDBadgeIcon />} />\n```\n\n----------------------------------------\n\nTITLE: Equivalent RadioGroup Usage in Fluent UI v9\nDESCRIPTION: Shows how to implement the same functionality as the v8 ChoiceGroup using the RadioGroup component in Fluent UI v9. It includes importing necessary components, using hooks, and rendering the RadioGroup with individual Radio components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/RadioGroup.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { Label, Radio, RadioGroup } from '@fluentui/react-components';\nimport { useId } from '@fluentui/react-utilities';\n\nconst RadioGroupBasicExample = () => {\n  const labelId = useId('label');\n\n  return (\n    <>\n      <Label id={labelId} required>\n        Pick One\n      </Label>\n      <RadioGroup aria-labelledby={labelId} defaultValue=\"B\">\n        <Radio value=\"A\" label=\"Option A\" required />\n        <Radio value=\"B\" label=\"Option B\" required />\n        <Radio value=\"C\" label=\"Option C\" disabled required />\n        <Radio value=\"D\" label=\"Option D\" required />\n      </RadioGroup>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Function-based Styling in Fluent UI Components (TSX)\nDESCRIPTION: This snippet illustrates how to define styles as a function of component props and theme settings. It allows for dynamic styling based on the component's state and context.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Styles/ThemeSlotsPage/docs/web/ThemeSlotsImplementation.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// Take in styling input, split out styles for each area.\nconst styles = (props: IComponentStyleProps): IComponentStyles => {\n  return {\n    root: { /* styles */ },\n    child1: ['className', { /* styles */ }],\n    child2: ['className', props.someBoolean && { /* styles */ }],\n    subComponentStyles: {\n      subComponent: (subProps:ISubComponentStyleProps) => {\n        const { theme, disabled, hasBoolean } = props; // parent props are available in subComponents\n        const { required, hasOtherBoolean } = subProps;\n        return ({\n          root: { /* styles */ },\n          child1: { /* styles */ },\n        });\n      }\n    }\n  };\n}\n\n// In render()\nreturn <Component styles={styles} ... />;\n```\n\n----------------------------------------\n\nTITLE: Implementing Utility Functions for FluentUI Components\nDESCRIPTION: Defines a collection of utility functions for working with FluentUI components including style generators, color manipulators, and DOM helpers for accessibility and positioning.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_37\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport const getActivityItemClassNames: (styles: IActivityItemStyles, className: string, activityPersonas: Array<IPersonaProps>, isCompact: boolean) => IActivityItemClassNames;\n\n// @public (undocumented)\nexport const getActivityItemStyles: (theme?: ITheme, customStyles?: IActivityItemStyles, animateBeaconSignal?: IActivityItemProps['animateBeaconSignal'], beaconColorOne?: IActivityItemProps['beaconColorOne'], beaconColorTwo?: IActivityItemProps['beaconColorTwo'], isCompact?: IActivityItemProps['isCompact']) => IActivityItemStyles;\n\n// @public (undocumented)\nexport function getAllSelectedOptions(options: ISelectableOption[], selectedIndices: number[]): ISelectableOption[];\n\n// @public\nexport function getAriaDescribedBy(keySequences: string[]): string;\n```\n\n----------------------------------------\n\nTITLE: Button Component HTML Output Examples\nDESCRIPTION: Shows the rendered HTML output for different button implementations, including semantic button, ARIA-enhanced div, and purely styled div. Demonstrates how the component handles accessibility attributes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/first-rule-of-aria.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Semantic version -->\n<button class=\"button-class\">This is a Simple Button</button>\n<!-- Aria version -->\n<div class=\"button-class\" tabindex=\"0\" role=\"button\">This is a div that looks and behaves as a Button</div>\n<!-- Style only -->\n<div class=\"button-class\">\n  This is a div that looks like Button but doesn't behave as such therefore, I can add a\n  <a href=\"/somewhere\">Link inside of it</a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Null to Disable Slot Rendering - React JSX\nDESCRIPTION: This snippet outlines how to use a value of null for a slot, effectively preventing its rendering while allowing other slots to function correctly.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Slots.md#2025-04-20_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n// 💡 A loader slot will be hidden\n<Button loading loader={null} />\n```\n\n----------------------------------------\n\nTITLE: Using Uncontrolled SpinButton in React\nDESCRIPTION: This example shows how to use a SpinButton component in an uncontrolled manner, where the initial value is set directly in the component without external state management. No dependencies are required, and the SpinButton will maintain its own state internally.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-spinbutton/library/docs/Spec.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<SpinButton defaultValue=\\\"1\\\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Carousel Component Structure in JSX\nDESCRIPTION: Sample code demonstrating the basic structure and usage of the Carousel component with a slider containing cards and navigation controls. It shows how to map through an array of cards and implement navigation buttons.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-carousel/library/docs/Spec.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n  <Carousel>\n    <CarouselSlider>\n      {Cards.map((_cardProps, index) => (\n        <CarouselCard>\n          Card {index + 1}\n        </BannerCard>\n      ))}\n    </CarouselSlider>\n    <CarouselNavContainer>\n      <CarouselNav>{index => <CarouselNavButton/>}</CarouselNav>\n    </CarouselNavContainer>\n  </Carousel>\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Field with Reveal Button in FluentUI v8\nDESCRIPTION: An example of how to create a password input field with a reveal password button using the TextField component in FluentUI v8. It uses the canRevealPassword prop to enable the functionality and revealPasswordAriaLabel for accessibility.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-input/library/docs/Spec-variants.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<TextField type=\"password\" canRevealPassword revealPasswordAriaLabel=\"Show password\" />\n```\n\n----------------------------------------\n\nTITLE: E2E Testing with Cypress\nDESCRIPTION: This snippet describes End-to-end (E2E) testing, preventing regressions in user flows by testing interactions, especially keyboard interactions and focus behaviors. Cypress is the current tool in use for this layer.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/testing.md#2025-04-20_snippet_7\n\nLANGUAGE: none\nCODE:\n```\n\"E2E\"\n\n```\n\nLANGUAGE: none\nCODE:\n```\nPrevent regressions in user flows by testing interactions. This is especially helpful for testing keyboard interactions and focus behaviors. We're currently using [Cypress](https://www.cypress.io/) for this.\n```\n\n----------------------------------------\n\nTITLE: Field Props Definition\nDESCRIPTION: This TypeScript code defines the `FieldProps` type, which specifies the properties that can be passed to the Field component. It includes properties for controlling the field's orientation, validation state, required status, and size, as well as a children prop for rendering the form control within the field.  It uses `Omit` to exclude the 'children' prop from `ComponentProps<FieldSlots>` and then adds it with a more specific type.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-field/library/docs/Spec.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FieldProps = Omit<ComponentProps<FieldSlots>, 'children'> & {\n  /**\n   * The Field's child can be a single form control, or a render function that takes the props that should be spread on\n   * a form control.\n   *\n   * All form controls in this library can be used directly as children (such as `<Input>` or `<RadioGroup>`), as well\n   * as intrinsic form controls like `<input>` or `<textarea>`. Custom controls can also be used as long as they\n   * accept FieldControlProps and spread them on the appropriate element.\n   *\n   * For more complex scenarios, a render function can be used to pass the FieldControlProps to the appropriate control.\n   */\n  children?: React.ReactNode | ((props: FieldControlProps) => React.ReactNode);\n\n  /**\n   * The orientation of the label relative to the field component.\n   * This only affects the label, and not the validationMessage or hint (which always appear below the field component).\n   *\n   * @default vertical\n   */\n  orientation?: 'vertical' | 'horizontal';\n\n  /**\n   * The `validationState` affects the display of the `validationMessage` and `validationMessageIcon`.\n   *\n   * * `error` - (default) The validation message has a red error icon and red text, with `role=\"alert\"` so it is\n   *     announced by screen readers. Additionally, the control inside the field has `aria-invalid` set, which adds a\n   *     red border to some field components (such as `Input`).\n   * * `success` - The validation message has a green checkmark icon and gray text.\n   * * `warning` - The validation message has a yellow exclamation icon and gray text.\n   * * `none` - The validation message has no icon and gray text.\n   *\n   * @default error when `validationMessage` is set; none otherwise.\n   */\n  validationState?: 'error' | 'warning' | 'success' | 'none';\n\n  /**\n   * Marks the Field as required. If `true`, an asterisk will be appended to the label, and `aria-required` will be set\n   * on the Field's child.\n   */\n  required?: boolean;\n\n  /**\n   * The size of the Field's label.\n   *\n   * @default medium\n   */\n  size?: 'small' | 'medium' | 'large';\n};\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Avatar with Initials - JSX\nDESCRIPTION: Displays an Avatar component showing a user's initials derived from their name.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-avatar/library/docs/SPEC.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Avatar name=\"Miguel Garcia\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing SwatchColorPicker in React\nDESCRIPTION: This snippet demonstrates how to use the SwatchColorPicker as a square grid to present selectable color swatches. It imports the necessary components, defines a set of color options, and implements a preview on hover feature using React state. The SwatchColorPicker is configured with 5 columns and square-shaped cells with custom dimensions. Prerequisites include React and '@fluentui/react/lib/SwatchColorPicker' package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-swatch-picker/library/docs/Spec.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { IColorCellProps, SwatchColorPicker } from '@fluentui/react/lib/SwatchColorPicker';\n\nconst colorCellsExample = [\n  { id: 'a', label: 'orange', color: '#ca5010' },\n  { id: 'b', label: 'cyan', color: '#038387' },\n  { id: 'c', label: 'blueMagenta', color: '#8764b8' },\n  { id: 'd', label: 'magenta', color: '#881798' },\n  { id: 'e', label: 'white', color: '#ffffff' },\n];\n\nexport const SwatchColorPickerBasicExample: React.FunctionComponent = () => {\n  const [previewColor, setPreviewColor] = React.useState<string>();\n  const baseId = useId('colorpicker');\n\n  const swatchColorPickerOnCellHovered = (id: string, color: string) => {\n    setPreviewColor(color!);\n  };\n\n  return (\n    <>\n      <div id={`${baseId}-custom-size`}>Simple square swatch color picker</div>\n      <SwatchColorPicker\n        columnCount={5}\n        cellHeight={35}\n        cellWidth={35}\n        cellShape={'square'}\n        colorCells={colorCellsExample}\n        onCellHovered={swatchColorPickerOnCellHovered}\n        aria-labelledby={`${baseId}-custom-size`}\n      />\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript CSS Properties Interface Definition\nDESCRIPTION: Comprehensive TypeScript interface defining CSS properties with their allowed value types. Includes standard CSS properties, custom types like ICSSRule and ICSSPixelUnitRule, and specific value constraints for properties like display, flexDirection, and position.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/merge-styles/etc/merge-styles.api.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    borderWidth?: ICSSRule | ICSSPixelUnitRule;\n    bottom?: ICSSRule | ICSSPixelUnitRule;\n    boxDecorationBreak?: ICSSRule | string;\n    boxShadow?: ICSSRule | string;\n    boxSizing?: ICSSRule | 'border-box' | 'content-box' | string;\n    breakAfter?: ICSSRule | string;\n    breakBefore?: ICSSRule | string;\n    breakInside?: ICSSRule | string;\n    clear?: ICSSRule | string;\n    clipRule?: ICSSRule | string;\n    color?: ICSSRule | string;\n    columnCount?: ICSSRule | number | 'auto' | string;\n    columnFill?: ICSSRule | string;\n    columnGap?: ICSSRule | string;\n    columnRule?: ICSSRule | string;\n    columnRuleColor?: ICSSRule | string;\n    columnRuleWidth?: ICSSRule | ICSSPixelUnitRule;\n    columns?: ICSSRule | string;\n    columnSpan?: ICSSRule | string;\n    columnWidth?: ICSSRule | ICSSPixelUnitRule;\n    content?: string;\n    counterIncrement?: ICSSRule | string;\n    counterReset?: ICSSRule | string;\n    cue?: ICSSRule | string;\n    cueAfter?: ICSSRule | string;\n    cursor?: ICSSRule | string;\n    direction?: ICSSRule | string;\n    display?: ICSSRule | ICSSDisplayRule | string;\n    fill?: ICSSRule | string;\n    fillOpacity?: ICSSRule | number;\n    fillRule?: ICSSRule | string;\n    filter?: ICSSRule | string;\n    flex?: ICSSRule | string | number;\n    flexBasis?: ICSSRule | string | number;\n    flexDirection?: ICSSRule | 'row' | 'row-reverse' | 'column' | 'column-reverse' | string;\n    flexFlow?: ICSSRule | string;\n    flexGrow?: ICSSRule | number | string;\n    flexShrink?: ICSSRule | number | string;\n    flexWrap?: ICSSRule | 'nowrap' | 'wrap' | 'wrap-reverse' | string;\n    float?: ICSSRule | string;\n    flowFrom?: ICSSRule | string;\n    forcedColorAdjust?: 'auto' | 'none' | string;\n    gridArea?: ICSSRule | string;\n    gridAutoColumns?: ICSSRule | string;\n    gridAutoFlow?: ICSSRule | string;\n    gridAutoRows?: ICSSRule | string;\n    gridColumn?: ICSSRule | string;\n    gridColumnEnd?: ICSSRule | string;\n    gridColumnGap?: ICSSRule | string;\n    gridColumnStart?: ICSSRule | string;\n    gridGap?: ICSSRule | string;\n    gridRow?: ICSSRule | string;\n    gridRowEnd?: ICSSRule | string;\n    gridRowGap?: ICSSRule | string;\n    gridRowPosition?: ICSSRule | string;\n    gridRowStart?: ICSSRule | string;\n    gridTemplate?: ICSSRule | string;\n    gridTemplateAreas?: ICSSRule | string;\n    gridTemplateColumns?: ICSSRule | string;\n    gridTemplateRows?: ICSSRule | string;\n    height?: ICSSRule | ICSSPixelUnitRule;\n    hyphenateLimitChars?: ICSSRule | string;\n    hyphenateLimitLines?: ICSSRule | string;\n    hyphenateLimitZone?: ICSSRule | string;\n    hyphens?: ICSSRule | string;\n    justifyContent?: ICSSRule | 'flex-start' | 'flex-end' | 'center' | 'space-between' | 'space-around' | 'space-evenly' | 'stretch' | string;\n    justifyItems?: ICSSRule | 'normal' | 'stretch' | ICSSBaselinePositionRule | ICSSOverflowAndSelfPositionRule | 'left' | 'right' | 'safe left' | 'safe right' | 'unsafe left' | 'unsafe right' | 'legacy' | 'legacy left' | 'legacy right' | 'legacy center' | string;\n    justifySelf?: ICSSRule | 'auto' | 'normal' | 'stretch' | ICSSBaselinePositionRule | ICSSOverflowAndSelfPositionRule | 'left' | 'right' | 'safe left' | 'safe right' | 'unsafe left' | 'unsafe right' | string;\n    left?: ICSSRule | ICSSPixelUnitRule;\n    letterSpacing?: ICSSRule | string;\n    lineHeight?: ICSSRule | 'normal' | ICSSPixelUnitRule | ICSSPercentageRule;\n    listStyle?: ICSSRule | string;\n    listStyleImage?: ICSSRule | string;\n    listStylePosition?: ICSSRule | string;\n    listStyleType?: ICSSRule | string;\n    margin?: ICSSRule | ICSSPixelUnitRule;\n    marginBlockEnd?: ICSSRule | ICSSPixelUnitRule;\n    marginBlockStart?: ICSSRule | ICSSPixelUnitRule;\n    marginBottom?: ICSSRule | ICSSPixelUnitRule;\n    marginInlineEnd?: ICSSRule | ICSSPixelUnitRule;\n    marginInlineStart?: ICSSRule | ICSSPixelUnitRule;\n    marginLeft?: ICSSRule | ICSSPixelUnitRule;\n    marginRight?: ICSSRule | ICSSPixelUnitRule;\n    marginTop?: ICSSRule | ICSSPixelUnitRule;\n    marqueeDirection?: ICSSRule | string;\n    marqueeStyle?: ICSSRule | string;\n    mask?: ICSSRule | string;\n    maskBorder?: ICSSRule | string;\n    maskBorderRepeat?: ICSSRule | string;\n    maskBorderSlice?: ICSSRule | string;\n    maskBorderSource?: ICSSRule | string;\n    maskBorderWidth?: ICSSRule | ICSSPixelUnitRule;\n    maskClip?: ICSSRule | string;\n    maskOrigin?: ICSSRule | string;\n    maxFontSize?: ICSSRule | ICSSPixelUnitRule;\n    maxHeight?: ICSSRule | ICSSPixelUnitRule;\n    maxWidth?: ICSSRule | ICSSPixelUnitRule;\n    minHeight?: ICSSRule | ICSSPixelUnitRule;\n    minWidth?: ICSSRule | ICSSPixelUnitRule;\n    mixBlendMode?: ICSSRule | IMixBlendModes | string;\n    MozOsxFontSmoothing?: 'none' | 'antialiased' | 'grayscale' | 'subpixel-antialiased' | string;\n    MsHighContrastAdjust?: ICSSRule | string;\n    MsOverflowStyle?: 'auto' | 'none' | 'scrollbar' | '-ms-autohiding-scrollbar' | string;\n    objectFit?: ICSSRule | 'cover' | 'contain' | 'fill' | 'none' | string;\n    opacity?: ICSSRule | number | string;\n    order?: ICSSRule | number | string;\n    orphans?: ICSSRule | number | string;\n    outline?: ICSSRule | 0 | string;\n    outlineColor?: ICSSRule | string;\n    outlineOffset?: ICSSRule | string;\n    overflow?: ICSSRule | 'auto' | 'hidden' | 'scroll' | 'visible';\n    overflowStyle?: ICSSRule | string;\n    overflowWrap?: ICSSRule | 'normal' | 'break-word' | string;\n    overflowX?: ICSSRule | 'auto' | 'hidden' | 'scroll' | 'visible' | string;\n    overflowY?: ICSSRule | 'auto' | 'hidden' | 'scroll' | 'visible' | string;\n    padding?: ICSSRule | ICSSPixelUnitRule;\n    paddingBlockEnd?: ICSSRule | ICSSPixelUnitRule;\n    paddingBlockStart?: ICSSRule | ICSSPixelUnitRule;\n    paddingBottom?: ICSSRule | ICSSPixelUnitRule;\n    paddingInlineEnd?: ICSSRule | ICSSPixelUnitRule;\n    paddingInlineStart?: ICSSRule | ICSSPixelUnitRule;\n    paddingLeft?: ICSSRule | ICSSPixelUnitRule;\n    paddingRight?: ICSSRule | ICSSPixelUnitRule;\n    paddingTop?: ICSSRule | ICSSPixelUnitRule;\n    pageBreakAfter?: ICSSRule | string;\n    pageBreakBefore?: ICSSRule | string;\n    pageBreakInside?: ICSSRule | string;\n    pause?: ICSSRule | string;\n    pauseAfter?: ICSSRule | string;\n    pauseBefore?: ICSSRule | string;\n    perspective?: ICSSRule | string;\n    perspectiveOrigin?: ICSSRule | string;\n    placeContent?: ICSSRule | 'normal' | 'space-between' | 'space-around' | 'space-evenly' | 'stretch' | ICSSOverflowAndSelfPositionRule | string;\n    placeItems?: ICSSRule | 'normal' | 'stretch' | ICSSBaselinePositionRule | ICSSOverflowAndSelfPositionRule | string;\n    placeSelf?: ICSSRule | 'auto' | 'normal' | 'stretch' | ICSSBaselinePositionRule | ICSSOverflowAndSelfPositionRule | string;\n    pointerEvents?: ICSSRule | string;\n    position?: ICSSRule | 'static' | 'relative' | 'absolute' | 'fixed' | 'sticky';\n    quotes?: ICSSRule | string;\n    regionFragment?: ICSSRule | string;\n    resize?: ICSSRule | 'none' | 'both' | 'horizontal' | 'vertical' | 'block' | 'inline' | string;\n    restAfter?: ICSSRule | string;\n    restBefore?: ICSSRule | string;\n    right?: ICSSRule | ICSSPixelUnitRule;\n    shapeImageThreshold?: ICSSRule | string;\n    shapeInside?: ICSSRule | string;\n    shapeMargin?: ICSSRule | string;\n    shapeOutside?: ICSSRule | string;\n    speak?: ICSSRule | string;\n    speakAs?: ICSSRule | string;\n    stroke?: ICSSRule | string;\n    strokeLinecap?: ICSSRule | 'butt' | 'round' | 'square' | string;\n    strokeOpacity?: ICSSRule | number | string;\n    strokeWidth?: ICSSRule | ICSSPixelUnitRule;\n    tableLayout?: ICSSRule | string;\n    tabSize?: ICSSRule | string;\n    textAlign?: ICSSRule | string;\n    textAlignLast?: ICSSRule | string;\n    textDecoration?: ICSSRule | string;\n    textDecorationColor?: ICSSRule | string;\n    textDecorationLine?: ICSSRule | string;\n    textDecorationSkip?: ICSSRule | string;\n    textDecorationStyle?: ICSSRule | string;\n    textEmphasis?: ICSSRule | string;\n    textEmphasisColor?: ICSSRule | string;\n    textEmphasisStyle?: ICSSRule | string;\n    textHeight?: ICSSRule | string;\n    textIndent?: ICSSRule | string;\n    textOverflow?: ICSSRule | string;\n    textOverline?: ICSSRule | string;\n    textOverlineColor?: ICSSRule | string;\n    textOverlineMode?: ICSSRule | string;\n    textOverlineStyle?: ICSSRule | string;\n    textOverlineWidth?: ICSSRule | ICSSPixelUnitRule;\n    textRendering?: ICSSRule | string;\n    textShadow?: ICSSRule | string;\n    textSizeAdjust?: 'none' | 'auto' | ICSSPercentageRule | ICSSRule;\n    textTransform?: ICSSRule | string;\n    textUnderlinePosition?: ICSSRule | string;\n    textUnderlineStyle?: ICSSRule | string;\n    top?: ICSSRule | ICSSPixelUnitRule;\n    touchAction?: ICSSRule | string;\n    transform?: ICSSRule | string;\n    transformOrigin?: ICSSRule | string;\n    transformOriginZ?: ICSSRule | string;\n    transformStyle?: ICSSRule | string;\n    transition?: ICSSRule | string;\n    transitionDelay?: ICSSRule | string;\n    transitionDuration?: ICSSRule | string;\n    transitionProperty?: ICSSRule | string;\n    transitionTimingFunction?: ICSSRule | string;\n    unicodeBidi?: ICSSRule | string;\n    userFocus?: ICSSRule | string;\n    userInput?: ICSSRule | string;\n    userSelect?: ICSSRule | 'none' | 'auto' | 'text' | 'all' | 'contain' | string;\n    verticalAlign?: ICSSRule | string;\n    visibility?: ICSSRule | string;\n    voiceBalance?: ICSSRule | string;\n    voiceDuration?: ICSSRule | string;\n    voiceFamily?: ICSSRule | string;\n    voicePitch?: ICSSRule | string;\n    voiceRange?: ICSSRule | string;\n    voiceRate?: ICSSRule | string;\n    voiceStress?: ICSSRule | string;\n    voiceVolume?: ICSSRule | string;\n    WebkitBackdropFilter?: ICSSRule | string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Button Component in TypeScript\nDESCRIPTION: Class definition for FluentUI Button component extending BaseButton with appearance, size and shape properties. Includes type definitions for button options and enums for appearance, shape and size.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Button extends BaseButton {\n    appearance?: ButtonAppearance;\n    appearanceChanged(prev: ButtonAppearance | undefined, next: ButtonAppearance | undefined): void;\n    iconOnly: boolean;\n    iconOnlyChanged(prev: boolean, next: boolean): void;\n    shape?: ButtonShape;\n    shapeChanged(prev: ButtonShape | undefined, next: ButtonShape | undefined): void;\n    size?: ButtonSize;\n    sizeChanged(prev: ButtonSize | undefined, next: ButtonSize | undefined): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Icons in Fluent UI React\nDESCRIPTION: This snippet outlines how to load icons in a Fluent UI React application by calling the initializeIcons function from the @fluentui/react/lib/Icons package. It’s essential to include this step at the root of your application to ensure that icons are available throughout the UI. This function does not take any parameters and initializes the icon set for use.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-examples/src/react/Icon/docs/IconOverview.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { initializeIcons } from '@fluentui/react/lib/Icons';\n\ninitializeIcons();\n```\n\n----------------------------------------\n\nTITLE: Defining IDialogProps Interface in TypeScript\nDESCRIPTION: This snippet defines the IDialogProps interface, which represents the properties for a Dialog component. It includes options for content, styling, accessibility, and behavior of the dialog.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_90\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface IDialogProps extends React_2.ClassAttributes<DialogBase>, IWithResponsiveModeState, IAccessiblePopupProps {\n    // @deprecated\n    ariaDescribedById?: string;\n    // @deprecated\n    ariaLabelledById?: string;\n    // (undocumented)\n    children?: React_2.ReactNode;\n    // @deprecated\n    className?: string;\n    // @deprecated (undocumented)\n    componentRef?: IRefObject<IDialog>;\n    // @deprecated\n    containerClassName?: string;\n    // @deprecated\n    contentClassName?: string;\n    dialogContentProps?: IDialogContentProps;\n    hidden?: boolean;\n    // @deprecated\n    isBlocking?: boolean;\n    // @deprecated\n    isDarkOverlay?: boolean;\n    // @deprecated\n    isOpen?: boolean;\n    maxWidth?: ICSSRule | ICSSPixelUnitRule;\n    minWidth?: ICSSRule | ICSSPixelUnitRule;\n    modalProps?: IModalProps;\n    onDismiss?: (ev?: React_2.MouseEvent<HTMLButtonElement>) => any;\n    // @deprecated\n    onDismissed?: () => any;\n    // @deprecated\n    onLayerDidMount?: () => void;\n    // @deprecated\n    onLayerMounted?: () => void;\n    styles?: IStyleFunctionOrObject<IDialogStyleProps, IDialogStyles>;\n    // @deprecated\n    subText?: string;\n    theme?: ITheme;\n    // @deprecated\n    title?: string | JSX.Element;\n    // @deprecated\n    topButtonsProps?: IButtonProps[];\n    // @deprecated\n    type?: DialogType;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Design Tokens for consistent theming\nDESCRIPTION: Demonstrates the proper approach to using design tokens from FluentUI React theme instead of hardcoding color values. This ensures consistent theming and accessibility.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/styles-handbook.md#2025-04-20_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeStyles } from '@griffel/react';\nimport { tokens } from '@fluentui/react-theme';\n\nconst useClasses = makeStyles({\n  // ❌ Don't do\n  rootA: { color: 'red' /* brand foreground */ },\n  // ✅ Do\n  rootB: { color: tokens.colorBrandForeground1 },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Manipulation Functions in FluentUI\nDESCRIPTION: Provides utility functions for creating, manipulating, and converting colors in different formats (HSV, RGBA, string). These functions are essential for the theming system in FluentUI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_38\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport function getColorFromHSV(hsv: IHSV, a?: number): IColor;\n\n// @public\nexport function getColorFromRGBA(rgba: IRGB): IColor;\n\n// @public\nexport function getColorFromString(inputColor: string, doc?: Document): IColor | undefined;\n\n// @public (undocumented)\nexport function getContrastRatio(color1: IColor, color2: IColor): number;\n\n// @public\nexport function getFullColorString(color: IColor): string;\n```\n\n----------------------------------------\n\nTITLE: Basic List with Item Actions in React TSX\nDESCRIPTION: Example of implementing a basic list with custom actions triggered on list items. Uses the navigationMode 'items' to enable keyboard navigation between items, with each item showing an alert when triggered.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-list/library/docs/Spec.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<List navigationMode=\"items\">\n  {names.map(name => (\n    <ListItem key={name} onAction={() => alert(`Triggered custom action!`)}>\n      {name}\n    </ListItem>\n  ))}\n</List>\n```\n\n----------------------------------------\n\nTITLE: Implementing Accessible Menu Item Labels\nDESCRIPTION: Shows the correct way to implement accessible labels for menu items, avoiding repetitive text in individual items and instead using a single aria-label on the parent menu element.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Accessibility/ComponentLabelling.stories.mdx#2025-04-20_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\naria-label=\"Meeting participants\"\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Motion Animation with AtomMotion in FluentUI React\nDESCRIPTION: Demonstrates how to create a custom motion component using AtomMotion interface. The example shows a simple opacity animation that transitions from 0 to 1 over 1000ms duration. Uses createMotionComponent to generate a reusable motion component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-motion/stories/src/CreateMotionComponent/CreateMotionComponentFactory.stories.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type AtomMotion, createMotionComponent } from '@fluentui/react-components';\n\nconst customAtom: AtomMotion = {\n  // opacity will be animated from 0 to 1\n  keyframes: [{ opacity: 0 }, { opacity: 1 }],\n  // duration of the animation will be \"1000ms\"\n  duration: 1000,\n};\nconst CustomMotion = createMotionComponent(customAtom);\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for DialogTriggerProps in TypeScript\nDESCRIPTION: Defines the TypeScript types for the DialogTrigger component that facilitates dialog visibility control through its children.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/docs/Spec.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport type DialogTriggerProps = {\n  action?: 'open' | 'close';\n  children: (React.ReactElement & { ref?: React.Ref<unknown> }) | (() => React.ReactElement | null);\n};\n```\n\n----------------------------------------\n\nTITLE: Focusable Popover Structure in React\nDESCRIPTION: This code snippet demonstrates a popover that traps focus, ensuring that the focus remains within the popover content until it is closed. It provides a trigger and expected markup to illustrate the behavior.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-popover/library/docs/Spec.md#2025-04-20_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<div id=\"container\">\n  <Popover trapFocus>\n    <PopoverTrigger>\n      <button>Trigger</button>\n    </PopoverTrigger>\n\n    <PopoverSurface>\n      {children}\n    </PopoverSurface>\n  </Popover>\n<div>\n```\n\n----------------------------------------\n\nTITLE: Using MenuTrigger and MenuPopover in FluentUI Menu Components\nDESCRIPTION: Example of proper component hierarchy in FluentUI Menu components, showing MenuTrigger as the first child of Menu and MenuList as the only child of MenuPopover.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/stories/src/Menu/MenuBestPractices.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Use `MenuTrigger` as the first child of `Menu`.\n- Use `MenuList` as the only child of `MenuPopover`.\n```\n\n----------------------------------------\n\nTITLE: SpinButton Basic Example Component\nDESCRIPTION: Defines a React component, SpinButtonBasicExample, which renders a SpinButton component. The SpinButton is configured with properties such as defaultValue, label, min, max, step, iconProps, incrementButtonAriaLabel, and decrementButtonAriaLabel to demonstrate basic usage and customization.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-monaco-editor/src/transpiler/examples/class.txt#2025-04-20_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nexport class SpinButtonBasicExample extends React.Component<any, any> {\n  public render(): JSX.Element {\n    return (\n      <div style={{ width: '400px' }}>\n        <SpinButton\n          defaultValue=\"0\"\n          label={'Basic SpinButton:'}\n          min={0}\n          max={100}\n          step={1}\n          iconProps={{ iconName: 'IncreaseIndentLegacy' }}\n          incrementButtonAriaLabel={'Increase value by 1'}\n          decrementButtonAriaLabel={'Decrease value by 1'}\n        />\n      </div>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Composing with the 'as' Prop in Fluent UI React\nDESCRIPTION: The Fluent UI library allows for component composition through the 'as' prop. The 'as' prop enables specifying the HTML tag or component that a Fluent UI component should render as. This feature allows modifying component behaviors and ensures flexible usage, though the user must ensure accessibility and styling compatibility.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/docs/src/pages/Composition.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  {/* 🧱 Each Fluent UI component has a default value for `as` prop */}\n  {/* Will output: <h1 class=\"ui-header\" /> */}\n  <Header />\n  {/* Uses another tag: <h2 class=\"ui-header\" /> */}\n  <Header as=\"h2\" />\n</>\n```\n\n----------------------------------------\n\nTITLE: Extending Theme with Custom Tokens in TypeScript/React\nDESCRIPTION: Shows how to extend the base set of tokens in Fluent UI with custom tokens, and use them in styles and components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Theming.stories.mdx#2025-04-20_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeStyles, themeToTokensObject, webLightTheme, FluentProvider, Theme } from '@fluentui/react-components';\n\n// You can pass your own custom tokens to a theme and pass that to the provider.\ntype CustomTheme = Theme & {\n  tokenA: string;\n  tokenB: string;\n  tokenC: string;\n};\nconst customTheme: CustomTheme = { ...webLightTheme, tokenA: 'red', tokenB: 'blue', tokenC: 'green' };\nfunction App() {\n  return <FluentProvider theme={customTheme}>{/* ... */}</FluentProvider>;\n}\n\n// ...\n\n// You can construct a custom tokens object by yourself.\nconst customTokens: Record<keyof CustomTheme, string> = {\n  ...tokens,\n  tokenA: `var(--tokenA)`,\n  tokenB: `var(--tokenB)`,\n  tokenC: `var(--tokenC)`,\n};\n\n// You can alternatively use the themeToTokensObject function to construct the custom tokens object.\n// Note: If you do it via the themeToTokensObject you might see a negative effect on tree-shaking since bundles won't know the shape of the output.\nconst alternativeCustomTokens = themeToTokensObject(customTheme);\n\n// You can then use this custom tokens object inside your styles.\nconst useStyles = makeStyles({\n  base: {\n    color: customTokens.tokenA,\n    backgroundColor: customTokens.tokenB,\n    outlineColor: customTokens.tokenC,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Textarea in Fluent UI v9\nDESCRIPTION: This snippet shows the equivalent implementation of textareas using the Textarea component in Fluent UI v9, including standard, disabled, and non-resizable variants.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Textarea.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { Label, Textarea } from '@fluentui/react-components';\nimport { useId } from '@fluentui/react-utilities';\n\nconst TextareaV9BasicExample = () => {\n  const standardTextareaId = useId('standard');\n  const disabledTextareaId = useId('disabled');\n  const nonResizableTextareaId = useId('nonResizable');\n\n  return (\n    <>\n      <div>\n        <Label htmlFor={standardTextareaId}>Standard</Label>\n        <Textarea id={standardTextareaId} />\n      </div>\n      <div>\n        <Label disabled htmlFor={disabledTextareaId}>\n          Disabled\n        </Label>\n        <Textarea defaultValue={dummyText} disabled id={disabledTextareaId} />\n      </div>\n      <div>\n        <Label htmlFor={nonResizableTextareaId}>Non-resizable</Label>\n        <Textarea resize=\"none\" id={nonResizableTextareaId} />\n      </div>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: TagPickerOption Component Definition\nDESCRIPTION: Defines the TagPickerOption React component as a ForwardRefComponent, indicating that it's a component that accepts a ref and forwards it to a child element.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const TagPickerOption: ForwardRefComponent<TagPickerOptionProps>;\"\n```\n\n----------------------------------------\n\nTITLE: Defining PartialTheme Interface in TypeScript for FluentUI\nDESCRIPTION: Interface that allows for partial theme specifications when customizing themes. It includes optional properties for palette, semantic colors, fonts, and other theme aspects, enabling incremental theme customization.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/theme/etc/theme.api.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface PartialTheme {\n    // (undocumented)\n    components?: ComponentsStyles;\n    defaultFontStyle?: IRawStyle;\n    // (undocumented)\n    disableGlobalClassNames?: boolean;\n    // (undocumented)\n    effects?: Partial<IEffects>;\n    // (undocumented)\n    fonts?: Partial<IFontStyles>;\n    // (undocumented)\n    isInverted?: boolean;\n    // (undocumented)\n    palette?: Partial<IPalette>;\n    // (undocumented)\n    rtl?: boolean;\n    // @internal\n    schemes?: {\n        [P in ISchemeNames]?: IScheme;\n    };\n    // (undocumented)\n    semanticColors?: Partial<ISemanticColors>;\n    // Warning: (ae-incompatible-release-tags) The symbol \"spacing\" is marked as @public, but its signature references \"ISpacing\" which is marked as @internal\n    //\n    // (undocumented)\n    spacing?: Partial<ISpacing>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Panel Component and PanelType Enum in TypeScript\nDESCRIPTION: Exports the Panel component as a React FunctionComponent, defines the PanelBase class, and declares the PanelType enum with various panel sizes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_239\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const Panel: React_2.FunctionComponent<IPanelProps>;\n\n// @public (undocumented)\nexport class PanelBase extends React_2.Component<IPanelProps, IPanelState> implements IPanel {\n    constructor(props: IPanelProps);\n    // (undocumented)\n    close(): void;\n    // (undocumented)\n    componentDidMount(): void;\n    // (undocumented)\n    componentDidUpdate(previousProps: IPanelProps, previousState: IPanelState): void;\n    // (undocumented)\n    componentWillUnmount(): void;\n    // (undocumented)\n    static contextType: React_2.Context<WindowProviderProps>;\n    // (undocumented)\n    static defaultProps: IPanelProps;\n    // (undocumented)\n    dismiss: (ev?: React_2.SyntheticEvent<HTMLElement> | KeyboardEvent) => void;\n    // (undocumented)\n    static getDerivedStateFromProps(nextProps: Readonly<IPanelProps>, prevState: Readonly<IPanelState>): Partial<IPanelState> | null;\n    get isActive(): boolean;\n    // (undocumented)\n    open(): void;\n    // (undocumented)\n    render(): JSX.Element | null;\n}\n\n// @public (undocumented)\nexport enum PanelType {\n    custom = 7,\n    customNear = 8,\n    extraLarge = 6,\n    large = 4,\n    largeFixed = 5,\n    medium = 3,\n    smallFixedFar = 1,\n    smallFixedNear = 2,\n    smallFluid = 0\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Theme with Tokens in TypeScript\nDESCRIPTION: Example of a theme definition object in Fluent UI. Each token represents a specific design value that can be used throughout the application, such as border radii or colors.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/_docs/developer/theming.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst exampleTheme = {\n  borderRadiusSmall: '2px',\n  //...\n  colorNeutralForeground2: '#424242',\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing File Type Icons in Fluent UI React\nDESCRIPTION: This snippet demonstrates how to initialize file type icons using the initializeFileTypeIcons function. It allows registering icons and pulling fonts from the default Microsoft Fluent CDN or a custom CDN.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-file-type-icons/README.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { initializeFileTypeIcons } from '@fluentui/react-file-type-icons';\n\n// Register icons and pull the fonts from the default Microsoft Fluent CDN:\ninitializeFileTypeIcons();\n\n// Or register icons and pull the fonts from a different CDN or folder path:\ninitializeFileTypeIcons('https://my.cdn.com/path/to/icons/');\n```\n\n----------------------------------------\n\nTITLE: Persona component example\nDESCRIPTION: This code snippet shows a basic example of using the Persona component. It renders a Persona with a name and a secondary text. This example demonstrates the simplest usage of the Persona component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-persona/library/README.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst PersonaExample = () => {\n  return <Persona name=\"Kevin Sturgis\" secondaryText=\"Software Engineer\" />;\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding Fluent UI Component Styles\nDESCRIPTION: Demonstrates how to override the appearance of Fluent UI components by creating custom styles and passing them through props, including the use of shorthand functions for CSS properties.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/StylingComponents.stories.mdx#2025-04-20_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { makeStyles, tokens, shorthands } from '@fluentui/react-components';\nimport { CallEndRegular } from '@fluentui/react-icons';\n\nconst useOverrides = makeStyles({\n  button: { color: tokens.colorNeutralForeground3 },\n  buttonIcon: {\n    ...shorthands.border('1px', 'solid', tokens.colorNeutralStroke1),\n  },\n  link: { fontWeight: 'bold' },\n});\n\nfunction MyComponent() {\n  const overrides = useOverrides();\n\n  return (\n    <>\n      <Button className={overrides.button} icon={{ className: overrides.buttonIcon, children: <CallEndRegular /> }} />\n      <Link className={overrides.link} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useControllableState Hook in TypeScript\nDESCRIPTION: An internal hook for managing controllable state in components. Takes options including default state, controlled state, and initial state values and returns the current state and a setter function.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-utilities/etc/react-utilities.api.md#2025-04-20_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @internal\nexport const useControllableState: <State>(options: UseControllableStateOptions<State>) => [State, React_2.Dispatch<React_2.SetStateAction<State>>];\n```\n\n----------------------------------------\n\nTITLE: Dialog Component Implementation in TypeScript\nDESCRIPTION: Implementation of the Dialog component class and associated types. Includes modal, non-modal, and alert dialog types with accessibility attributes and event handling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_29\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport const darkModeStylesheetBehavior: (styles: ElementStyles) => MatchMediaStyleSheetBehavior;\n\n// @public\nexport class Dialog extends FASTElement {\n    ariaDescribedby?: string;\n    ariaLabelledby?: string;\n    clickHandler(event: Event): boolean;\n    dialog: HTMLDialogElement;\n    emitBeforeToggle: () => void;\n    emitToggle: () => void;\n    hide(): void;\n    show(): void;\n    type: DialogType;\n}\n\n// @public\nexport class DialogBody extends FASTElement {\n    noTitleAction: boolean;\n}\n\n// @public\nexport const DialogBodyDefinition: FASTElementDefinition<typeof DialogBody>;\n\n// @public\nexport const DialogBodyStyles: ElementStyles;\n\n// @public\nexport const DialogBodyTemplate: ElementViewTemplate;\n\n// @public\nexport const DialogDefinition: FASTElementDefinition<typeof Dialog>;\n\n// @public\nexport const DialogStyles: ElementStyles;\n\n// @public\nexport const DialogTemplate: ElementViewTemplate<Dialog>;\n\n// Warning: (ae-missing-release-tag) \"DialogType\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport const DialogType: {\n    readonly modal: \"modal\";\n    readonly nonModal: \"non-modal\";\n    readonly alert: \"alert\";\n};\n\n// @public (undocumented)\nexport type DialogType = ValuesOf<typeof DialogType>;\n```\n\n----------------------------------------\n\nTITLE: Basic Combobox Usage\nDESCRIPTION: This code snippet demonstrates the basic usage of the Combobox component in FluentUI React. It renders a Combobox with a label and a few options for selecting an animal.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/library/docs/Spec.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<label id=\"pets\">Best pet</label>\n<Combobox aria-labelledby=\"pets\" placeholder=\"Select an animal\">\n  <Option key=\"cat\">Cat</Option>\n  <Option key=\"dog\">Dog</Option>\n  <Option key=\"ferret\">Ferret</Option>\n  <Option key=\"fish\">Fish</Option>\n</Combobox>\n```\n\n----------------------------------------\n\nTITLE: Applying a Theme with FluentProvider in React\nDESCRIPTION: Demonstrates how to use FluentProvider to apply a theme at the root of a React application, setting CSS variables for all child components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Theming.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { FluentProvider, teamsLightTheme } from '@fluentui/react-components';\n\nexport const AppRoot = ({children}) => (\n  <FluentProvider theme={teamsLightTheme}>\n    {children}\n  </FluentProvider>,\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Rating and RatingDisplay Components\nDESCRIPTION: Shows basic usage of Rating and RatingDisplay components without additional configuration, representing the simplest implementation in a React application\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-rating/library/README.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Rating />\n\n<RatingDisplay />\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declarations for FluentUI React Accordion Components\nDESCRIPTION: Comprehensive type definitions and interfaces for the Accordion component ecosystem including core components, context providers, utility functions, and style hooks. Includes type definitions for props, state management, event handling, and component composition.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-accordion/library/etc/react-accordion.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"react\" />\n\nimport type { ARIAButtonSlotProps } from '@fluentui/react-aria';\nimport type { ComponentProps } from '@fluentui/react-utilities';\nimport type { ComponentState } from '@fluentui/react-utilities';\nimport { ContextSelector } from '@fluentui/react-context-selector';\nimport { FC } from 'react';\nimport type { ForwardRefComponent } from '@fluentui/react-utilities';\nimport type { PresenceMotionSlotProps } from '@fluentui/react-motion';\nimport { Provider } from 'react';\nimport { ProviderProps } from 'react';\nimport * as React_2 from 'react';\nimport type { Slot } from '@fluentui/react-utilities';\nimport type { SlotClassNames } from '@fluentui/react-utilities';\n\n// @public\nexport const Accordion: ForwardRefComponent<AccordionProps> & (<TItem>(props: AccordionProps<TItem>) => JSX.Element);\n\n// @public (undocumented)\nexport const accordionClassNames: SlotClassNames<AccordionSlots>;\n\n// @public (undocumented)\nexport type AccordionContextValue<Value = AccordionItemValue> = {\n    openItems: AccordionItemValue[];\n    requestToggle: (data: AccordionRequestToggleData<Value>) => void;\n    collapsible: boolean;\n    multiple: boolean;\n    navigation: 'linear' | 'circular' | undefined;\n};\n\n// @public (undocumented)\nexport type AccordionContextValues = {\n    accordion: AccordionContextValue;\n};\n\n// @public\nexport const AccordionHeader: ForwardRefComponent<AccordionHeaderProps>;\n\n// @public (undocumented)\nexport const accordionHeaderClassNames: SlotClassNames<AccordionHeaderSlots>;\n\n// @public (undocumented)\nexport type AccordionHeaderContextValue = {\n    disabled: boolean;\n    open: boolean;\n    expandIconPosition: AccordionHeaderExpandIconPosition;\n    size: AccordionHeaderSize;\n};\n\n// @public (undocumented)\nexport type AccordionHeaderContextValues = {\n    accordionHeader: AccordionHeaderContextValue;\n};\n\n// @public (undocumented)\nexport type AccordionHeaderExpandIconPosition = 'start' | 'end';\n\n// @public (undocumented)\nexport type AccordionHeaderProps = ComponentProps<Partial<AccordionHeaderSlots>> & {\n    expandIconPosition?: AccordionHeaderExpandIconPosition;\n    inline?: boolean;\n    size?: AccordionHeaderSize;\n};\n\n// @public (undocumented)\nexport const AccordionHeaderProvider: React_2.Provider<AccordionHeaderContextValue>;\n\n// @public (undocumented)\nexport type AccordionHeaderSize = 'small' | 'medium' | 'large' | 'extra-large';\n\n// @public (undocumented)\nexport type AccordionHeaderSlots = {\n    root: NonNullable<Slot<'div', 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'>>;\n    button: NonNullable<Slot<ARIAButtonSlotProps<'a'>>>;\n    expandIcon?: Slot<'span'>;\n    icon?: Slot<'div'>;\n};\n\n// @public (undocumented)\nexport type AccordionHeaderState = ComponentState<AccordionHeaderSlots> & Required<Pick<AccordionHeaderProps, 'inline'>> & AccordionHeaderContextValue;\n\n// @public (undocumented)\nexport type AccordionIndex = number | number[];\n\n// @public\nexport const AccordionItem: ForwardRefComponent<AccordionItemProps>;\n\n// @public (undocumented)\nexport const accordionItemClassNames: SlotClassNames<AccordionItemSlots>;\n\n// @public (undocumented)\nexport type AccordionItemContextValue<Value = AccordionItemValue> = {\n    open: boolean;\n    disabled: boolean;\n    value: Value;\n    onHeaderClick(event: AccordionToggleEvent): void;\n};\n\n// @public (undocumented)\nexport type AccordionItemContextValues<Value = AccordionItemValue> = {\n    accordionItem: AccordionItemContextValue<Value>;\n};\n\n// @public (undocumented)\nexport type AccordionItemProps<Value = AccordionItemValue> = ComponentProps<AccordionItemSlots> & {\n    disabled?: boolean;\n    value: Value;\n};\n\n// @public (undocumented)\nexport const AccordionItemProvider: React_2.Provider<AccordionItemContextValue<unknown>>;\n\n// @public (undocumented)\nexport type AccordionItemSlots = {\n    root: NonNullable<Slot<'div'>>;\n};\n\n// @public (undocumented)\nexport type AccordionItemState<Value = AccordionItemValue> = ComponentState<AccordionItemSlots> & AccordionItemContextValue<Value>;\n\n// @public (undocumented)\nexport type AccordionItemValue = unknown;\n\n// @public\nexport const AccordionPanel: ForwardRefComponent<AccordionPanelProps>;\n\n// @public (undocumented)\nexport const accordionPanelClassNames: SlotClassNames<Omit<AccordionPanelSlots, 'collapseMotion'>>;\n\n// @public (undocumented)\nexport type AccordionPanelProps = ComponentProps<AccordionPanelSlots>;\n\n// @public (undocumented)\nexport type AccordionPanelSlots = {\n    root: NonNullable<Slot<'div'>>;\n    collapseMotion?: Slot<PresenceMotionSlotProps>;\n};\n\n// @public (undocumented)\nexport type AccordionPanelState = ComponentState<AccordionPanelSlots> & {\n    open: boolean;\n};\n\n// @public (undocumented)\nexport type AccordionProps<Value = AccordionItemValue> = ComponentProps<AccordionSlots> & {\n    defaultOpenItems?: Value | Value[];\n    collapsible?: boolean;\n    multiple?: boolean;\n    navigation?: 'linear' | 'circular';\n    onToggle?: AccordionToggleEventHandler<Value>;\n    openItems?: Value | Value[];\n};\n\n// @public (undocumented)\nexport const AccordionProvider: Provider<AccordionContextValue<unknown>> & FC<ProviderProps<AccordionContextValue<unknown>>>;\n\n// @public (undocumented)\nexport type AccordionSlots = {\n    root: NonNullable<Slot<'div'>>;\n};\n\n// @public (undocumented)\nexport type AccordionState<Value = AccordionItemValue> = ComponentState<AccordionSlots> & AccordionContextValue<Value>;\n\n// @public (undocumented)\nexport type AccordionToggleData<Value = AccordionItemValue> = {\n    value: Value;\n    openItems: Value[];\n};\n\n// @public (undocumented)\nexport type AccordionToggleEvent<E = HTMLElement> = React_2.MouseEvent<E> | React_2.KeyboardEvent<E>;\n\n// @public (undocumented)\nexport type AccordionToggleEventHandler<Value = AccordionItemValue> = (event: AccordionToggleEvent, data: AccordionToggleData<Value>) => void;\n\n// @public\nexport const renderAccordion_unstable: (state: AccordionState, contextValues: AccordionContextValues) => JSX.Element;\n\n// @public\nexport const renderAccordionHeader_unstable: (state: AccordionHeaderState, contextValues: AccordionHeaderContextValues) => JSX.Element;\n\n// @public\nexport const renderAccordionItem_unstable: (state: AccordionItemState, contextValues: AccordionItemContextValues) => JSX.Element;\n\n// @public\nexport const renderAccordionPanel_unstable: (state: AccordionPanelState) => JSX.Element;\n\n// @public\nexport const useAccordion_unstable: <Value = unknown>(props: AccordionProps<Value>, ref: React_2.Ref<HTMLElement>) => AccordionState<Value>;\n\n// @public (undocumented)\nexport const useAccordionContext_unstable: <T>(selector: ContextSelector<AccordionContextValue<unknown>, T>) => T;\n\n// @public (undocumented)\nexport function useAccordionContextValues_unstable(state: AccordionState): AccordionContextValues;\n\n// @public\nexport const useAccordionHeader_unstable: (props: AccordionHeaderProps, ref: React_2.Ref<HTMLElement>) => AccordionHeaderState;\n\n// @public (undocumented)\nexport const useAccordionHeaderContext_unstable: () => AccordionHeaderContextValue;\n\n// @public (undocumented)\nexport function useAccordionHeaderContextValues_unstable(state: AccordionHeaderState): AccordionHeaderContextValues;\n\n// @public\nexport const useAccordionHeaderStyles_unstable: (state: AccordionHeaderState) => AccordionHeaderState;\n\n// @public\nexport const useAccordionItem_unstable: (props: AccordionItemProps, ref: React_2.Ref<HTMLElement>) => AccordionItemState;\n\n// @public (undocumented)\nexport const useAccordionItemContext_unstable: () => AccordionItemContextValue<unknown>;\n\n// @public (undocumented)\nexport function useAccordionItemContextValues_unstable(state: AccordionItemState): AccordionItemContextValues;\n\n// @public (undocumented)\nexport const useAccordionItemStyles_unstable: (state: AccordionItemState) => AccordionItemState;\n\n// @public\nexport const useAccordionPanel_unstable: (props: AccordionPanelProps, ref: React_2.Ref<HTMLElement>) => AccordionPanelState;\n\n// @public\nexport const useAccordionPanelStyles_unstable: (state: AccordionPanelState) => AccordionPanelState;\n\n// @public (undocumented)\nexport const useAccordionStyles_unstable: (state: AccordionState) => AccordionState;\n```\n\n----------------------------------------\n\nTITLE: Migrating Slider Styles - Variable Based to Classes\nDESCRIPTION: Demonstrates how to migrate from using variables prop for styling to using makeStyles hook with tokens in v9\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Slider.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// in COMPONENT_NAME.tsx\nimport { Slider } from '@fluentui/react-northstar';\n\nexport const Component = ({ menuItems }) => <Slider variables={{ isVolumeControl: true }} />;\n\n// in slider-styles.ts\nexport const sliderStyles1 = {\n  root: ({ variables: { colorSchemeDefault, isVolumeControl } }) => ({\n    ...(isVolumeControl && {\n      color: colorSchemeDefault.foreground,\n    }),\n  }),\n};\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// in COMPONENT_NAME.tsx\nimport { Slider } from '@fluentui/react-components';\nimport { useStyles } from './COMPONENT_NAME.styles.ts';\n\nexport const Component = () => {\n  const classes = useStyles();\n  return <Slider className={classes.isVolumeControl} />;\n};\n\n// in COMPONENT_NAME.styles.ts\nimport { makeStyles, tokens } from '@fluentui/react-components';\n\nexport const useStyles = makeStyles({\n  isVolumeControl: {\n    color: tokens.colorNeutralForeground1,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Card ARIA Attributes in FluentUI\nDESCRIPTION: Guidance on ARIA attributes for FluentUI Card components. Cards use role=\"group\" by default, and developers should implement appropriate aria-label, aria-describedby, and aria-labelledby attributes for accessibility, particularly for selectable cards.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-card/stories/src/Card/CardBestPractices.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- By default, each card is of role=\"group\".\n- Provide meaningful `aria-label`, `aria-describedby` and `aria-labelledby` whenever needed, especially for selectable cards.\n```\n\n----------------------------------------\n\nTITLE: Using useId Hook in JSX\nDESCRIPTION: Example of how to use the useId hook in a React component to generate a unique ID for form elements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-hooks/README.md#2025-04-20_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useId } from '@fluentui/react-hooks';\n\nconst TextField = ({ labelText, defaultValue }) => {\n  const id = useId('field');\n  return (\n    <div>\n      <label htmlFor={id}>{labelText}</label>\n      <input id={id} type=\"text\" defaultValue={defaultValue} />\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Field Component Usage Example\nDESCRIPTION: This JSX code snippet demonstrates how to use the Field component with various input controls, including Input, RadioGroup, Combobox, Slider, and SpinButton. It shows how to configure properties like label, validationMessage, size, orientation, and required to customize the field's appearance and behavior.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-field/library/docs/Spec.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n\n<>\n  <Field\n    label=\"This is the field label\"\n    validationMessage=\"This is error text\"\n    size=\"small\"\n    orientation=\"horizontal\"\n    required\n  >\n    <Input contentBefore=\"$\" contentAfter=\".00\" />\n  </Field>\n  <Field label=\"Radio group field\">\n    <RadioGroup>\n      <Radio value=\"one\" label=\"Option one\" />\n      <Radio value=\"two\" label=\"Option two\" />\n      <Radio value=\"three\" label=\"Option three\" />\n    </RadioGroup>\n  </Field>\n  <Field label=\"Combobox field\" validationState=\"success\" validationMessage=\"Success text\">\n    <Combobox>\n      <Option value=\"one\">Option one</Option>\n      <Option value=\"two\">Option two</Option>\n      <Option value=\"three\">Option three</Option>\n    </Combobox>\n  </Field>\n  <Field label=\"Slider field\" validationState=\"warning\" validationMessage=\"Warning text\">\n    <Slider defaultValue={25} />\n  </Field>\n  <Field label=\"Spin button field\" hint=\"Hint text\">\n    <SpinButton />\n  </Field>\n</>\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Dialog in FluentUI with React\nDESCRIPTION: This snippet demonstrates how to create a controlled dialog component using React hooks for state management. It includes custom open/close handling and dialog trigger placement.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/docs/Spec.md#2025-04-20_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nconst CustomDialog = () => {\n  const [isOpen, setIsOpen] = React.useState(false);\n  const handleOpenChange = (ev, { open }) => setIsOpen(open);\n  const handleOpen = () => setIsOpen(true);\n  return (\n    <>\n      {/*\n        the trigger component is still useful outside of the Dialog,\n        to provide ARIA attributes, but it will no longer speak with the dialog.\n        A controlled state is required in this case\n      */}\n      <DialogTrigger>\n        <Button onClick={handleOpen}>Button outside Dialog Context</Button>\n      </DialogTrigger>\n      <Dialog open={isOpen} onOpenChange={handleOpenChange}>\n        <DialogSurface>\n          <DialogTitle>This is an alert</DialogTitle>\n          <DialogBody>This is going to be inside the dialog</DialogBody>\n          <DialogActions>\n            {/*\n              In this case the trigger can be used to request close through `onOpenChange`,\n              as it's inside Dialog context\n            */}\n            <DialogTrigger type=\"close\">\n              <Button>Close</Button>\n            </DialogTrigger>\n            <Button>Action</Button>\n          </DialogActions>\n        </DialogSurface>\n      </Dialog>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: TeachingPopoverCarousel Implementation for Multi-step Tutorials in React JSX\nDESCRIPTION: Implementation of a TeachingPopoverCarousel component with multiple cards representing different steps in a tutorial. Includes navigation buttons, previous/next controls, and customizable step text.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-teaching-popover/library/README.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<TeachingPopover>\n  <TeachingPopoverTrigger>\n    <Button>TeachingPopover trigger</Button>\n  </TeachingPopoverTrigger>\n  <TeachingPopoverSurface>\n    <TeachingPopoverHeader>Tips</TeachingPopoverHeader>\n    <TeachingPopoverCarousel defaultValue=\"test-0\">\n      <TeachingPopoverCarouselCard value=\"test-0\">\n        <TeachingPopoverBody media={<Image alt=\"test image\" fit=\"cover\" src={swapImage} />}>\n          <TeachingPopoverTitle>Teaching Bubble Title</TeachingPopoverTitle>\n          <div>This is page: 1</div>\n        </TeachingPopoverBody>\n      </TeachingPopoverCarouselCard>\n\n      <TeachingPopoverCarouselCard value=\"test-1\">\n        <TeachingPopoverBody media={<Image alt=\"test image\" fit=\"cover\" src={swapImage} />}>\n          <TeachingPopoverTitle>Teaching Bubble Title</TeachingPopoverTitle>\n          <div>This is page: 2</div>\n        </TeachingPopoverBody>\n      </TeachingPopoverCarouselCard>\n\n      <TeachingPopoverCarouselCard value=\"test-3\">\n        <TeachingPopoverBody media={<Image alt=\"test image\" fit=\"cover\" src={swapImage} />}>\n          <TeachingPopoverTitle>Teaching Bubble Title</TeachingPopoverTitle>\n          <div>This is page: 3</div>\n        </TeachingPopoverBody>\n      </TeachingPopoverCarouselCard>\n\n      <TeachingPopoverCarouselFooter next=\"Next\" previous=\"Previous\" initialStepText=\"Close\" finalStepText=\"Finish\">\n        <TeachingPopoverCarouselNav>{() => <TeachingPopoverCarouselNavButton />}</TeachingPopoverCarouselNav>\n      </TeachingPopoverCarouselFooter>\n    </TeachingPopoverCarousel>\n  </TeachingPopoverSurface>\n</TeachingPopover>\n```\n\n----------------------------------------\n\nTITLE: Defining useFlexStyles Hook for FluentUI in TypeScript\nDESCRIPTION: Exports a hook that provides CSS class names for various flex layout properties including flex direction, alignment, justification, and spacing options. This utility enables consistent flex layouts across FluentUI components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-migration-v0-v9/library/etc/react-migration-v0-v9.api.md#2025-04-20_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const useFlexStyles: () => Record<\"flex\" | \"fill\" | \"inline\" | \"column\" | \"wrap\" | \"alignItemsFlexStart\" | \"alignItemsCenter\" | \"alignItemsFlexEnd\" | \"alignItemsStretch\" | \"justifyContentFlexStart\" | \"justifyContentCenter\" | \"justifyContentFlexEnd\" | \"justifyContentStretch\" | \"justifyContentSpaceAround\" | \"justifyContentSpaceBetween\" | \"justifyContentSpaceEvenly\" | \"gapForColumnFlexSmall\" | \"gapForColumnFlexSmaller\" | \"gapForColumnFlexMedium\" | \"gapForColumnFlexLarge\" | \"gapForRowFlexSmall\" | \"gapForRowFlexSmaller\" | \"gapForRowFlexMedium\" | \"gapForRowFlexLarge\" | \"paddingMedium\", string>;\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a Button with Styling System in React\nDESCRIPTION: Imports hooks and utilities to extend the Button component setup with additional styling logic, demonstrating how to integrate a styling system with the base button functionality.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-utilities/src/compose/README.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { renderButton_unstable, useButton_unstable, useButtonClasses } from '@fluentui/react-button';\n\nconst Button = React.forwardRef((props, ref) => {\n  const state = useButton_unstable(props, ref);\n\n  // Inject classNames as needed.\n  useButtonStyles_unstable(state);\n\n  // Return the rendered result.\n  return renderButton_unstable(state);\n});\n```\n\n----------------------------------------\n\nTITLE: React Hook: Managing Component State\nDESCRIPTION: The `useSample` hook manages the component's internal state. It accepts props, a ref, and optional default props. It uses `makeMergeProps` and `resolveShorthandProps` from `@fluentui/react-utilities` to merge and resolve props. The hook can manage various types of state, including consuming context and creating side effects. All state operations should mutate the `draftState` object.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/converged-implementation-patterns.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { makeMergeProps, resolveShorthandProps } from '@fluentui/react-utilities';\n\n/**\n * Defines the different slots that can be rendered in this component\n *\n * This means that an icon can be rendered 'somewhere'\n */\nexport const sampleShorthandProps = ['icon'];\n\n// Creates a helper function to merge props while respecting slot props\nconst mergeProps = makeMergeProps<SampleState>({ deepMerge: sampleShorthandProps });\n\n/**\n * @parameter props -> these are normal React props for JSX components\n * @parameter ref -> In case someone wants a ref to the root DOM element\n * @parameter defaultProps -> safe default props, we set defaults internally but if consumer wants component variants with different defaults, they can set them\n */\nexport const useSample = (props: SampleProps, ref: React.Ref<HTMLElement>, defaultProps?: SampleProps): SampleState => {\n  const resolvedRef = useMergedRefs(ref, React.useRef());\n\n  // merges the props we declare internally and what is passed in\n  // by a consumer\n  const state = mergeProps(\n    {\n      // This is essentially shorthand for the `root` slot\n      ref: resolvedRef,\n      as: 'div',\n      icon: { as: 'span' },\n    },\n    defaultProps,\n    resolveShorthandProps(props, sampleShorthandProps),\n  );\n\n  if (checkedValues || onCheckedValuesChange) {\n    state.hasCheckMark = true;\n  }\n\n  // Anything else the component needs to manage its own state and render\n  [someState, setSomeState] = React.useState();\n  const { contextValue } = React.useContext();\n  React.useEffect(...);\n\n  // enlarge the 'uber' state\n  state.someState = someState;\n  state.contextValue = contextValue;\n\n  return state;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Compact Card Layout in JSX\nDESCRIPTION: Sample code for creating a compact horizontal card with a header containing an image, title, and description.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-card/library/docs/Spec.md#2025-04-20_snippet_7\n\nLANGUAGE: JSX\nCODE:\n```\n<Card orientation=\"horizontal\">\n  <CardHeader image={<img src=\"powerpoint.png\" />} header=\"Team offsite 2020\" description=\"Onedrive > Files\" />\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Implementing ColorPicker with proposed v9 API\nDESCRIPTION: Sample code demonstrating the proposed API for the FluentUI v9 ColorPicker. It shows a compositional approach where ColorArea, AlphaSlider, and ColorSlider components are combined within a ColorPicker parent component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-color-picker/library/docs/Spec.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  ColorPicker,\n  ColorArea,\n  ColorSliderProps,\n  AlphaSlider,\n  ColorSlider,\n  ColorPickerOnSelectEventHandler,\n} from '@fluentui/react-color-picker';\n\nexport const Default = () => {\n  const [selectedColor, setSelectedColor] = React.useState({ h: 109, s: 1, v: 0.9, a: 1 });\n  const handleChange: ColorPickerProps['onChange'] = (_, data) => setSelectedColor(data.selectedColorHex);\n\n  return (\n    <>\n      <ColorPicker color={selectedColor} onChange={handleChange}>\n        <ColorArea />\n        <AlphaSlider />\n        <ColorSlider />\n      </ColorPicker>\n      <div style={{ backgroundColor: tinycolor(color).toRgbString() }} />\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Dropdown Usage\nDESCRIPTION: This code snippet demonstrates the basic usage of the Dropdown component in FluentUI React. It renders a Dropdown component with a label and a few options for selecting an animal.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/library/docs/Spec.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n<label id=\"pets\">Best pet</label>\n<Dropdown aria-labelledby=\"pets\" placeholder=\"Select an animal\">\n  <Option key=\"cat\">Cat</Option>\n  <Option key=\"dog\">Dog</Option>\n  <Option key=\"ferret\">Ferret</Option>\n  <Option key=\"fish\">Fish</Option>\n</Dropdown>\n```\n\n----------------------------------------\n\nTITLE: Alias Token Example\nDESCRIPTION: This snippet shows how alias tokens are mapped to different global tokens in different themes. Alias tokens do not represent direct raw values, but act as references to global tokens, enabling theme-specific styling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/theme-tokens.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst themeLight = {\n  alias: {\n    color: {\n      brandForeground: brand.shade10,\n    },\n  },\n};\n\nconst themeDark = {\n  alias: {\n    color: {\n      brandForeground: brand.tint10, // different global token than in light\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Component with Default Theme in FluentUI\nDESCRIPTION: This snippet shows how to create a Text component with default theme styling using makeStyles from FluentUI. It sets the text color to a specific red shade and applies bold font weight.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-text/library/docs/MIGRATION.md#2025-04-20_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeStyles, Text } from '@fluentui/react-components';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n     color: 'rgb(196, 49, 75)',\n     fontWeight: 700\n  },\n})\n\nconst MyComponent = () => {\n    const styles = useStyles()\n\n    return <Text className={styles.root}>{...}</Text>\n}\n```\n\n----------------------------------------\n\nTITLE: DialogActions Component Definition\nDESCRIPTION: Defines the DialogActions component as a forward-ref component accepting DialogActionsProps. It is used to render actions within a dialog.  It relies on ForwardRefComponent from '@fluentui/react-utilities'.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/etc/react-dialog.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const DialogActions: ForwardRefComponent<DialogActionsProps>;\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Fluent UI React Tags\nDESCRIPTION: Demonstrates how to render basic Tag, InteractionTag, and TagGroup components using Fluent UI's React library. These components are used for visualizing and interacting with tags within a user interface.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tags/library/docs/Spec.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Tag>Content</Tag>\n\n<InteractionTag>\n  <InteractionTagPrimary>Content</InteractionTagPrimary>\n</InteractionTag>\n\n<TagGroup>\n  <Tag>Tag 1</Tag>\n  <Tag>Tag 2</Tag>\n  <Tag>Tag 3</Tag>\n</TagGroup>\n```\n\n----------------------------------------\n\nTITLE: Using Props for Menu Item Alignment in FluentUI\nDESCRIPTION: Examples of using hasIcons and hasCheckmarks props for proper alignment of menu items with varying content.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/stories/src/Menu/MenuBestPractices.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Use the `hasIcons` prop for alignment if only some menu items have icons.\n- Use the `hasCheckmarks` prop for alignment if only some menu items are selectable.\n```\n\n----------------------------------------\n\nTITLE: Using Grid Component - Fluent UI - JSX\nDESCRIPTION: This snippet showcases the Fluent UI Grid component used to arrange elements in two dimensions (columns and rows). The grid component is configured with specific column and row layouts using CSS grid properties. Two examples are provided: one with a basic 4-column setup spanning multiple rows, and another demonstrating specific grid positions for items.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/docs/src/pages/Layout.mdx#2025-04-20_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<ExampleSnippet>\n  <Grid columns=\"repeat(4, 1fr)\" rows=\"50px 150px 50px\">\n    <Segment color=\"brand\" content=\"Header\" inverted styles={{ gridColumn: 'span 4' }} />\n    <Segment color=\"green\" content=\"Menu\" inverted styles={{ gridColumn: 'span 1' }} />\n    <Segment content=\"Content\" styles={{ gridColumn: 'span 3' }} />\n    <Segment color=\"brand\" content=\"Footer\" inverted styles={{ gridColumn: 'span 4' }} />\n  </Grid>\n</ExampleSnippet>\n```\n\nLANGUAGE: JSX\nCODE:\n```\n<ExampleSnippet>\n  <Grid columns=\"repeat(2, 1fr)\">\n    <Segment color=\"brand\" content=\"Header\" inverted styles={{ gridColumn: '1/3', gridRow: 1 }} />\n    <Segment color=\"red\" content=\"Menu\" inverted styles={{ gridColumn: '3', gridRow: '1/3' }} />\n    <Segment color=\"green\" content=\"Notes\" inverted styles={{ gridColumn: '1', gridRow: '2' }} />\n    <Segment color=\"grey\" content=\"News\" inverted styles={{ gridColumn: '2', gridRow: '2' }} />\n  </Grid>\n</ExampleSnippet>\n```\n\n----------------------------------------\n\nTITLE: Converting Menu with TabList Behavior - After Migration\nDESCRIPTION: Updated implementation using TabList component in FluentUI v9\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/TabList.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tab, TabList } from '@fluentui/react-components';\nconst Component = props => (\n  <TabList {...props} defaultSelectedValue={'tab1'}>\n    <Tab value=\"tab1\">First Tab</Tab>\n    <Tab value=\"tab2\">Second Tab</Tab>\n    <Tab value=\"tab3\">Third Tab</Tab>\n  </TabList>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing AvatarGroup in React using Fluent UI\nDESCRIPTION: This snippet demonstrates how to use the AvatarGroup component to render a list of names as avatars. It uses the partitionAvatarGroupItems function to divide avatars into inline and overflow groups. The component requires an array of names and outputs an avatar layout. Limitations include needing predefined names and an existing React environment.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-avatar/library/README-AvatarGroup.md#2025-04-20_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nconst names = [\n  'Johnie McConnell',\n  'Allan Munger',\n  'Erik Nason',\n  'Kristin Patterson',\n  'Daisy Phillips',\n  'Carole Poland',\n  'Carlos Slattery',\n  'Robert Tolbert',\n  'Kevin Sturgis',\n  'Charlotte Waltson',\n  'Elliot Woodward',\n];\n\nconst AvatarGroup = () => {\n  const { inlineItems, overflowItems } = partitionAvatarGroupItems({ items: names });\n\n  return (\n    <AvatarGroup {...props}>\n      {inlineItems.map(name => (\n        <AvatarGroupItem name={name} key={name} />\n      ))}\n      <AvatarGroupPopover>\n        {overflowItems.map(name => (\n          <AvatarGroupItem name={name} key={name} />\n        ))}\n      </AvatarGroupPopover>\n    </AvatarGroup>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Custom Styles with FluentProvider in React\nDESCRIPTION: Demonstrates how to use custom component styles with FluentProvider in a React application.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/custom-styling.md#2025-04-20_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nconst customStyles : ComponentStyleHooks = {\n  useCustomButtonStyles_unstable = useFancyButtonStyles;\n}\n\n<App>\n  <FluentProvider theme={webLightTheme} componentStyles={customStyles}>\n      <Component>Hello custom styles!</Component>\n  </FluentProvider>\n</App>\n```\n\n----------------------------------------\n\nTITLE: Implementing SSR-Compatible Default Open Menu\nDESCRIPTION: Shows a method to handle default open state for Menu components during server-side rendering using useIsSSR hook and conditional state management\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/SSR/Portals.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\nimport { Menu, MenuTrigger, MenuList, MenuItem, MenuPopover, useIsSSR, Button } from '@fluentui/react-components';\n\nconst DefaultOpenMenu = () => {\n  const [open, setOpen] = React.useState(false);\n  const isSSR = useIsSSR();\n\n  React.useEffect(() => {\n    if (!isSSR) {\n      setOpen(true);\n    }\n  }, [isSSR]);\n\n  return (\n    <Menu open={open} onOpenChange={(e, data) => setOpen(data.open)}>\n      <MenuTrigger>\n        <Button>SSR Default open</Button>\n      </MenuTrigger>\n\n      <MenuPopover>\n        <MenuList>\n          <MenuItem>New </MenuItem>\n          <MenuItem>New Window</MenuItem>\n          <MenuItem disabled>Open File</MenuItem>\n          <MenuItem>Open Folder</MenuItem>\n        </MenuList>\n      </MenuPopover>\n    </Menu>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definitions for Fluent UI Checkbox Component\nDESCRIPTION: Defines the TypeScript interfaces, types, and component exports for the Fluent UI Checkbox component. Includes definitions for props, state, slots, and utility functions for rendering and styling checkboxes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-checkbox/library/etc/react-checkbox.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"react\" />\n\nimport { ComponentProps } from '@fluentui/react-utilities';\nimport { ComponentState } from '@fluentui/react-utilities';\nimport type { ForwardRefComponent } from '@fluentui/react-utilities';\nimport { Label } from '@fluentui/react-label';\nimport * as React_2 from 'react';\nimport { Slot } from '@fluentui/react-utilities';\nimport type { SlotClassNames } from '@fluentui/react-utilities';\n\n// @public\nexport const Checkbox: ForwardRefComponent<CheckboxProps>;\n\n// @public (undocumented)\nexport const checkboxClassNames: SlotClassNames<CheckboxSlots>;\n\n// @public\nexport interface CheckboxOnChangeData {\n    // (undocumented)\n    checked: 'mixed' | boolean;\n}\n\n// @public\nexport type CheckboxProps = Omit<ComponentProps<Partial<CheckboxSlots>, 'input'>, 'checked' | 'defaultChecked' | 'onChange' | 'size'> & {\n    checked?: 'mixed' | boolean;\n    children?: never;\n    defaultChecked?: 'mixed' | boolean;\n    labelPosition?: 'before' | 'after';\n    onChange?: (ev: React_2.ChangeEvent<HTMLInputElement>, data: CheckboxOnChangeData) => void;\n    shape?: 'square' | 'circular';\n    size?: 'medium' | 'large';\n};\n\n// @public (undocumented)\nexport type CheckboxSlots = {\n    root: NonNullable<Slot<'span'>>;\n    label?: Slot<typeof Label>;\n    input: NonNullable<Slot<'input'>>;\n    indicator: Slot<'div', 'span'>;\n};\n\n// @public\nexport type CheckboxState = ComponentState<CheckboxSlots> & Required<Pick<CheckboxProps, 'checked' | 'disabled' | 'labelPosition' | 'shape' | 'size'>>;\n\n// @public (undocumented)\nexport const renderCheckbox_unstable: (state: CheckboxState) => JSX.Element;\n\n// @public\nexport const useCheckbox_unstable: (props: CheckboxProps, ref: React_2.Ref<HTMLInputElement>) => CheckboxState;\n\n// @public\nexport const useCheckboxStyles_unstable: (state: CheckboxState) => CheckboxState;\n```\n\n----------------------------------------\n\nTITLE: DialogTitle Slots Definition\nDESCRIPTION: Defines the slots available within the DialogTitle component, using Slot from '@fluentui/react-utilities'. It indicates that the DialogTitle component has a 'root' slot (h2, h1, h3, h4, h5, h6 or div), and an optional action slot (div).\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/etc/react-dialog.api.md#2025-04-20_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport type DialogTitleSlots = {\n    root: Slot<'h2', 'h1' | 'h3' | 'h4' | 'h5' | 'h6' | 'div'>;\n    action?: Slot<'div'>;\n};\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Overlay Components - JavaScript\nDESCRIPTION: This snippet exports components related to overlays such as drawers and popovers, which are used to display additional content or navigation options layered on top of the main interface.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/etc/react-components.api.md#2025-04-20_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nexport { OverlayDrawer }\n\nexport { overlayDrawerClassNames }\n\nexport { OverlayDrawerProps }\n\nexport { OverlayDrawerSlots }\n\nexport { OverlayDrawerState }\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Component Rendering with React.lazy for Tooltip\nDESCRIPTION: An example implementation of how to split a Tooltip component using React.lazy. The code demonstrates creating a small synchronous wrapper that only loads the heavier tooltip content when it needs to be displayed.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/future/async-import-hidden-components.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst RenderTooltipContent = React.lazy(() => import('./renderTooltipContent'));\n\nexport const renderTooltip = (state: TooltipState) => {\n  return (\n    <>\n      {state.children}\n      {state.shouldRenderTooltip && (\n        <React.Suspense fallback={null}>\n          <RenderTooltipContent {...state} />\n        </React.Suspense>\n      )}\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Fluent UI Navigation Components\nDESCRIPTION: This chunk outlines various navigation components such as Nav and NavCategory, essential for hierarchical navigation structure within an application. Includes context values for managing selected states and user interactions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-nav-preview/library/etc/react-nav-preview.api.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const Nav: ForwardRefComponent<NavProps>;\n\n// @public\nexport const NavCategory: ForwardRefComponent<NavCategoryProps>;\n\n// @public (undocumented)\nexport type NavCategoryContextValues = {\n    categoryValue: NavCategoryContextValue;\n};\n\n// @public\nexport const NavCategoryItem: ForwardRefComponent<NavCategoryItemProps>;\n\n// @public (undocumented)\nexport const navCategoryItemClassNames: SlotClassNames<NavCategoryItemSlots>;\n\n// @public (undocumented)\nexport type NavCategoryItemContextValues = {\n    navCategoryItem: NavCategoryItemContextValue;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Flex Component - Fluent UI - JSX\nDESCRIPTION: This snippet demonstrates the use of the Fluent UI Flex component to arrange elements in a single direction (either column or row). The example shows layout of buttons inside a header with flex items configured with certain colors and content. This snippet uses Flex.Item to push an item to the end, demonstrating the push prop’s functionality.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/docs/src/pages/Layout.mdx#2025-04-20_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<ExampleSnippet>\n  <Flex gap=\"gap.small\">\n    <Segment color=\"brand\" content=\"Home\" inverted />\n    <Segment color=\"green\" content=\"Search\" inverted />\n    <Flex.Item push>\n      <Segment color=\"red\" content=\"Logout\" inverted />\n    </Flex.Item>\n  </Flex>\n</ExampleSnippet>\n```\n\nLANGUAGE: JSX\nCODE:\n```\n<ExampleSnippet>\n  <Flex column>\n    <Segment color=\"brand\" content=\"Header\" inverted />\n    <Segment content=\"Content\" />\n    <Segment color=\"green\" content=\"Footer\" inverted />\n  </Flex>\n</ExampleSnippet>\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for DialogBodyProps in TypeScript\nDESCRIPTION: Outlines the type definition for the DialogBody component, focusing on its role as a container for the dialog's content without additional behavior.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/docs/Spec.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype DialogBodySlots = {\n  root: Slot<'div'>;\n};\n```\n\n----------------------------------------\n\nTITLE: Best Practices for FluentUI Carousel Implementation\nDESCRIPTION: A markdown document providing guidelines for implementing carousels in FluentUI, including recommendations for card sizing, spacing, focus management, and responsive design considerations. It also includes important warnings about percentage-based widths, group sizing, and autoplay functionality.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-carousel/stories/src/Carousel/CarouselBestPractices.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Best practices\n\n### Do\n\n- Limit cards to a max width of 100% of screen size.\n- Use 'gap' css on CarouselSlider to provide easy spacing between cards, use margin if circular is enabled.\n- Keep cards a uniform size where possible.\n- Set CarouselCards to focusMode='tab-exit' when there is multiple cards in view\n- Avoid focus on CarouselCards if they are a full size banner, out of view cards will be set to 'inert'.\n- Set an event listener on CarouselCards with EMBLA_VISIBILITY_EVENT to update state based on visibility (or use an intersectionObserver).\n\n### Don't\n\n- Use percentage based widths unless also using resize breakpoints to define number of cards, i.e. a 400px window should have max 1-2 cards while a 1000px window could fit 2-4+\n- Set groupSize unless it is a constant set value, i.e. groupSize 2 if the size of cards is set to 50%.\n- Set autoplay to true unless user interacts or an action is taken (i.e. clicking autoplay button).\n```\n\n----------------------------------------\n\nTITLE: Implementing a SplitButton with Menu in React\nDESCRIPTION: This snippet shows how to create a SplitButton component with an associated menu using Menu, MenuTrigger, MenuPopover, and MenuItem components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-button/library/README.md#2025-04-20_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Menu positioning=\"below-end\">\n  <MenuTrigger>\n    {(triggerProps: MenuButtonProps) => <SplitButton menuButton={triggerProps}>Example</SplitButton>}\n  </MenuTrigger>\n\n  <MenuPopover>\n    <MenuList>\n      <MenuItem>Item a</MenuItem>\n      <MenuItem>Item b</MenuItem>\n    </MenuList>\n  </MenuPopover>\n</Menu>\n```\n\n----------------------------------------\n\nTITLE: Implementing Arrow Navigation in React Component\nDESCRIPTION: Demonstrates how to use useArrowNavigationGroup hook to enable circular arrow key navigation between focusable items in a container\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tabster/README.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\nimport { useArrowNavigationGroup } from '@fluentui/react-tabster';\n\nconst Item: React.FC = ({ children }) => <div tabIndex={0}>Item</div>;\n\nconst ArrowNavigationExample: React.FC = ({ children }) => {\n  const attrs = useArrowNavigationGroup({ circular: true });\n\n  return (\n    <div {...attrs}>\n      <Item />\n      <Item />\n      <Item />\n      <Item />\n      <Item />\n      <Item />\n    </div>\n  );\n};\n\nconst App: React.FC = () => {\n  return <ArrowNavigationExample />;\n};\n```\n\n----------------------------------------\n\nTITLE: Documenting Function Parameters in TypeScript\nDESCRIPTION: Demonstrates the correct way to document function parameters using JSDoc comments in TypeScript.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/api-docs/README.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @param myParam - Description here\n */\n```\n\n----------------------------------------\n\nTITLE: Passing Props Object to Avatar Badge Slot in React TSX\nDESCRIPTION: Example of passing props to the badge slot of an Avatar component. This shows how to configure a PresenceBadge with status and accessibility attributes through the slot props object.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Slots/Slots.stories.mdx#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Avatar name=\"Support\" badge={{ status: 'available', 'aria-label': 'available' }} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Dialog Control in React with FluentUI\nDESCRIPTION: This code snippet demonstrates how to manually control a Dialog's open state and focus restoration in a React component using FluentUI. It uses the useState hook for managing the dialog's open state, the useRestoreFocusTarget hook for focus management, and custom event handlers for opening and closing the dialog.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/stories/src/Dialog/DialogTriggerOutsideDialog.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { Button, Dialog, useRestoreFocusTarget } from '@fluentui/react-components';\n\nconst MyComponent = () => {\n  const [open, setOpen] = React.useState(false);\n  const buttonRef = useRestoreFocusTarget();\n\n  const handleOpenDialog = () => setOpen(true);\n  const handleCloseDialog = () => setOpen(false);\n\n  return (\n    <>\n      <Button ref={buttonRef} onClick={handleOpenDialog}>\n        Open dialog\n      </Button>\n      <Dialog open={open} onOpenChange={(_, data) => setOpen(data.open)}>\n        <DialogContent>\n          <DialogBody>\n            <DialogTitle>Dialog title</DialogTitle>\n            This is the dialog content.\n          </DialogBody>\n          <DialogActions>\n            <Button appearance=\"secondary\" onClick={handleCloseDialog}>\n              Close\n            </Button>\n          </DialogActions>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Fluent UI React Components\nDESCRIPTION: This snippet shows how to import various Fluent UI React components, including Button, Input, and Dropdown. These components can be used to build user interfaces with a consistent Fluent design.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Styles/FileTypeIconsPage/docs/web/FileTypeIconsResolutions.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Button, Input, Dropdown } from '@fluentui/react-components';\n```\n\n----------------------------------------\n\nTITLE: Using useObservedElement and useFocusObserved Hooks in FluentUI\nDESCRIPTION: These hooks are used to implement observed elements for focusing. useObservedElement assigns a name to an element, while useFocusObserved returns an imperative method to focus the element. This approach supports deterministic and asynchronous focusing, useful for loading or virtualization scenarios.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Utilities/FocusManagement/useObservedElement/useObservedElementDescription.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nuseObservedElement\nuseFocusObserved\n```\n\n----------------------------------------\n\nTITLE: InteractionTag with different size\nDESCRIPTION: This snippet showcases how to modify the size of an `<InteractionTag>` component. Setting the `size` prop to \"small\" adjusts the tag's dimensions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tags/library/README.md#2025-04-20_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<InteractionTag size=\"small\">\n  <InteractionTagPrimary>Content</InteractionTagPrimary>\n</InteractionTag>\n```\n\n----------------------------------------\n\nTITLE: Implementing Drawer Template in TypeScript with FASTElement\nDESCRIPTION: This code defines the HTML template for the Drawer component using FASTElement's templating system. It creates a dialog element with conditional attributes based on the drawer's configuration properties and includes event handling for clicks and dialog cancellation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/drawer/README.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport function drawerTemplate<T extends Drawer>(): ElementViewTemplate<T> {\n  return html<T>`\n    <dialog\n      class=\"dialog\"\n      part=\"dialog\"\n      role=\"${x => (x.type === 'modal' ? 'dialog' : void 0)}\"\n      aria-modal=\"${x => (x.type === 'modal' ? 'true' : void 0)}\"\n      aria-describedby=\"${x => x.ariaDescribedby}\"\n      aria-labelledby=\"${x => x.ariaLabelledby}\"\n      aria-label=\"${x => x.ariaLabel}\"\n      size=\"${x => x.size}\"\n      position=\"${x => x.position}\"\n      type=\"${x => x.type}\"\n      @click=\"${(x, c) => x.clickHandler(c.event as MouseEvent)}\"\n      @cancel=\"${(x, c) => x.hide()}\"\n      ${ref('dialog')}\n    >\n      <slot></slot>\n    </dialog>\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Fluent UI Debugging in DevTools (JS)\nDESCRIPTION: This JavaScript snippet shows how to disable Fluent UI debugging by deleting the `fluentUIDebug` flag in local storage. This is important for performance measurements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/docs/src/pages/Debugging.mdx#2025-04-20_snippet_3\n\nLANGUAGE: js\nCODE:\n```\ndelete window.localStorage.fluentUIDebug;\n```\n\n----------------------------------------\n\nTITLE: Configuring Menu Positioning with autoSize in FluentUI\nDESCRIPTION: Guidelines for implementing responsive menu positioning that stays within viewport boundaries using the positioning prop with autoSize enabled.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/stories/src/Menu/MenuBestPractices.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- Use `positioning={{ autoSize: true }}` if the Menu could potentially be clipped by the top of the page when forced to render above the trigger, or render past the bottom of the page when forced to render below the trigger (these can happen at high zoom or on small devices). Optionally: use `autoSize: true` for all Menus to force them to stay within the viewport and have their own scrollbars if there is overflow.\n```\n\n----------------------------------------\n\nTITLE: Overriding Existing Theme Tokens in TypeScript\nDESCRIPTION: Demonstrates how to create a custom theme by extending an existing theme and overriding specific tokens in Fluent UI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Theming.stories.mdx#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { webLightTheme, Theme } from '@fluentui/react-components';\n\nexport const customLightTheme: Theme = {\n  ...webLightTheme,\n  colorNeutralForeground1: '#555', // overriden token\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing ColorPicker with Color Preview\nDESCRIPTION: Demonstrates a complete example of implementing the ColorPicker component with color sliders, alpha control, and color area. Uses React state to manage color values and includes a preview display of the selected color.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-color-picker/library/README.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { tinycolor } from '@ctrl/tinycolor';\nimport { ColorPicker, ColorSlider, AlphaSlider, type ColorPickerProps, ColorArea } from '@fluentui/react-components';\n\nexport const App = () => {\n  const [color, setColor] = React.useState(DEFAULT_COLOR_HSV);\n  const handleChange: ColorPickerProps['onColorChange'] = (_, data) =>\n    setColor({ ...data.color, a: data.color.a ?? 1 });\n\n  return (\n    <>\n      <ColorPicker color={color} onColorChange={handleChange}>\n        <ColorSlider />\n        <AlphaSlider />\n        <ColorArea />\n      </ColorPicker>\n\n      <div className={styles.previewColor} style={{ backgroundColor: tinycolor(color).toRgbString() }} />\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Combobox Base Props Definition\nDESCRIPTION: This snippet defines the base properties for the Combobox component. It includes properties for selection, highlighting, portal mounting, appearance, clearability, default open state, auto focus disabling, inline popup behavior, open state control, placeholder text, positioning, size, and value.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/library/etc/react-combobox.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport type ComboboxBaseProps = SelectionProps & HighlightedOptionProps & Pick<PortalProps, 'mountNode'> & {\n    appearance?: 'filled-darker' | 'filled-lighter' | 'outline' | 'underline';\n    clearable?: boolean;\n    defaultOpen?: boolean;\n    defaultValue?: string;\n    disableAutoFocus?: boolean;\n    inlinePopup?: boolean;\n    onOpenChange?: (e: ComboboxBaseOpenEvents, data: ComboboxBaseOpenChangeData) => void;\n    open?: boolean;\n    placeholder?: string;\n    positioning?: PositioningShorthand;\n    size?: 'small' | 'medium' | 'large';\n    value?: string;\n};\"\n```\n\n----------------------------------------\n\nTITLE: Type Definitions and Component Exports in TypeScript\nDESCRIPTION: This section provides type definitions and function exports for the '@fluentui/react-tabs' package, including Tab and TabList components. It defines various props and states necessary for these components, as well as context values and styling hooks. Developers use these exports to implement and customize tab functionality within Fluent UI applications.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tabs/library/etc/react-tabs.api.md#2025-04-20_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { ComponentProps } from '@fluentui/react-utilities';\nimport type { ComponentState } from '@fluentui/react-utilities';\nimport type { ContextSelector } from '@fluentui/react-context-selector';\nimport { FC } from 'react';\nimport type { ForwardRefComponent } from '@fluentui/react-utilities';\nimport { Provider } from 'react';\nimport { ProviderProps } from 'react';\nimport * as React_2 from 'react';\nimport type { Slot } from '@fluentui/react-utilities';\nimport { SlotClassNames } from '@fluentui/react-utilities';\n\n// @public (undocumented)\nexport type RegisterTabEventHandler = (data: TabRegisterData) => void;\n\n// @public\nexport const renderTab_unstable: (state: TabState) => JSX.Element;\n\n// @public\nexport const renderTabList_unstable: (state: TabListState, contextValues: TabListContextValues) => JSX.Element;\n\n// @public (undocumented)\nexport type SelectTabData = {\n    value: TabValue;\n};\n\n// @public (undocumented)\nexport type SelectTabEvent<E = HTMLElement> = React_2.MouseEvent<E> | React_2.KeyboardEvent<E> | React_2.FocusEvent<E>;\n\n// @public (undocumented)\nexport type SelectTabEventHandler = (event: SelectTabEvent, data: SelectTabData) => void;\n\n// @public\nexport const Tab: ForwardRefComponent<TabProps>;\n\n// @public (undocumented)\nexport const tabClassNames: SlotClassNames<TabSlots>;\n\n// @public\nexport const TabList: ForwardRefComponent<TabListProps>;\n\n// @public (undocumented)\nexport const tabListClassNames: SlotClassNames<TabListSlots>;\n\n// @public (undocumented)\nexport type TabListContextValue = Pick<TabListProps, 'onTabSelect' | 'selectTabOnFocus' | 'selectedValue' | 'reserveSelectedTabSpace'> & Required<Pick<TabListProps, 'appearance' | 'disabled' | 'size' | 'vertical'>> & {\n    onRegister: RegisterTabEventHandler;\n    onUnregister: RegisterTabEventHandler;\n    onSelect: SelectTabEventHandler;\n    getRegisteredTabs: () => {\n        selectedValue?: TabValue;\n        previousSelectedValue?: TabValue;\n        registeredTabs: Record<string, TabRegisterData>;\n    };\n};\n\n// @public\nexport type TabListContextValues = {\n    tabList: TabListContextValue;\n};\n\n// @public\nexport type TabListProps = ComponentProps<TabListSlots> & {\n    appearance?: 'transparent' | 'subtle' | 'subtle-circular' | 'filled-circular';\n    reserveSelectedTabSpace?: boolean;\n    defaultSelectedValue?: TabValue;\n    disabled?: boolean;\n    onTabSelect?: SelectTabEventHandler;\n    selectTabOnFocus?: boolean;\n    selectedValue?: TabValue;\n    size?: 'small' | 'medium' | 'large';\n    vertical?: boolean;\n};\n\n// @public (undocumented)\nexport const TabListProvider: Provider<TabListContextValue> & FC<ProviderProps<TabListContextValue>>;\n\n// @public (undocumented)\nexport type TabListSlots = {\n    root: Slot<'div'>;\n};\n\n// @public\nexport type TabListState = ComponentState<Required<TabListSlots>> & TabListContextValue;\n\n// @public\nexport type TabProps = Omit<ComponentProps<Partial<TabSlots>>, 'content' | 'value'> & Pick<Partial<TabSlots>, 'content'> & {\n    disabled?: boolean;\n    value: TabValue;\n};\n\n// @public (undocumented)\nexport type TabRegisterData = {\n    value: TabValue;\n    ref: React_2.RefObject<HTMLElement>;\n};\n\n// @public (undocumented)\nexport type TabSlots = {\n    root: Slot<'button'>;\n    icon?: Slot<'span'>;\n    content: NonNullable<Slot<'span'>>;\n};\n\n// @public\nexport type TabState = ComponentState<TabInternalSlots> & Pick<TabProps, 'value'> & Required<Pick<TabProps, 'disabled'>> & {\n    appearance?: 'transparent' | 'subtle' | 'subtle-circular' | 'filled-circular';\n    iconOnly: boolean;\n    selected: boolean;\n    contentReservedSpaceClassName?: string;\n    size: 'small' | 'medium' | 'large';\n    vertical: boolean;\n};\n\n// @public\nexport type TabValue = unknown;\n\n// @public\nexport const useTab_unstable: (props: TabProps, ref: React_2.Ref<HTMLElement>) => TabState;\n\n// @public\nexport const useTabButtonStyles_unstable: (state: TabState, slot: TabState['root']) => TabState;\n\n// @public\nexport const useTabContentStyles_unstable: (state: TabState) => TabState;\n\n// @public\nexport const useTabIndicatorStyles_unstable: (state: TabState) => TabState;\n\n// @public\nexport const useTabList_unstable: (props: TabListProps, ref: React_2.Ref<HTMLElement>) => TabListState;\n\n// @public (undocumented)\nexport const useTabListContext_unstable: <T>(selector: ContextSelector<TabListContextValue, T>) => T;\n\n// @public (undocumented)\nexport function useTabListContextValues_unstable(state: TabListState): TabListContextValues;\n\n// @public\nexport const useTabListStyles_unstable: (state: TabListState) => TabListState;\n\n// @public\nexport const useTabStyles_unstable: (state: TabState) => TabState;\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Color Picker Component in Fluent UI\nDESCRIPTION: Demonstrates the configuration options for the ColorPicker component, enabling flexible color selection across different input formats and color models\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-color-picker/stories/src/ColorPicker/ColorPickerDescription.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Example Color Picker Configuration\n<ColorPicker\n  defaultColor=\"#FF0000\"\n  showPreview={true}\n  alphaType=\"transparency\"\n  colorMode=\"HSV\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Define OffsetFunction type\nDESCRIPTION: Defines a type called `OffsetFunction` which is a function that takes an `OffsetFunctionParam` and returns either an `OffsetObject` or an `OffsetShorthand`. It provides a way to dynamically calculate the offset based on the positioning context.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-positioning/etc/react-positioning.api.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type OffsetFunction = (param: OffsetFunctionParam) => OffsetObject | OffsetShorthand;\n```\n\n----------------------------------------\n\nTITLE: Defining useOnEvent Hook in Typescript\nDESCRIPTION: Defines a React hook, `useOnEvent`, that attaches an event handler to a specified element upon mounting and handles cleanup during unmounting. It uses the `on()` function from `@fluentui/utilities` to attach the event handler.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-hooks/README.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useOnEvent<TElement extends Element, TEvent extends Event>(\n  element: React.RefObject<TElement | undefined | null> | TElement | Window | undefined | null,\n  eventName: string,\n  callback: (ev: TEvent) => void,\n  useCapture?: boolean,\n): void;\n```\n\n----------------------------------------\n\nTITLE: Migrating TextField from v8 to v9\nDESCRIPTION: Demonstrates how to transition from v8 TextField with inline label and error message to v9 Field and Input components with wrapper pattern\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-field/library/docs/Migration.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<TextField label=\"Name\" errorMessage=\"Please enter a name\" value={name} onChange={onNameChanged} />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Field label=\"Name\" validationMessage=\"Please enter a name\">\n  <Input value={name} onChange={onNameChanged} />\n</Field>\n```\n\n----------------------------------------\n\nTITLE: Rendering Popover Components - TypeScript\nDESCRIPTION: This snippet contains functions for rendering the Popover component, its surface, and trigger based on their respective state objects. Each function takes a state argument and produces a JSX element representing the respective component, facilitating the dynamic rendering process in React components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-popover/library/etc/react-popover.api.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const renderPopover_unstable: (state: PopoverState) => JSX.Element;\n\n// @public\nexport const renderPopoverSurface_unstable: (state: PopoverSurfaceState) => JSX.Element;\n\n// @public\nexport const renderPopoverTrigger_unstable: (state: PopoverTriggerState) => ReactElement<any, string | JSXElementConstructor<any>> | null;\n```\n\n----------------------------------------\n\nTITLE: Implementing Field with ProgressBar in React\nDESCRIPTION: This snippet illustrates the use of the Field component which encapsulates the ProgressBar. It adds a label, hint, validation message, and validation state to the ProgressBar, making the UI more informative and interactive.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-progress/library/README.md#2025-04-20_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\nconst FieldExample = () => {\n  return (\n    <Field\n      label=\"Determinate ProgressBar\"\n      hint=\"This is a determinate Progress with description\"\n      value={0.5}\n      validationState=\"warning\"\n    >\n      <ProgressBar />\n    </Field>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining HeatMapChart Interfaces in TypeScript\nDESCRIPTION: Specifies interfaces for HeatMapChart component props and data structures. Includes options for customization such as color scale domain and range, and sorting order.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/etc/react-charting.api.md#2025-04-20_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface IHeatMapChartProps extends Pick<ICartesianChartProps, Exclude<keyof ICartesianChartProps, 'styles'>> {\n    chartTitle?: string;\n    culture?: string;\n    data: IHeatMapChartData[];\n    domainValuesForColorScale: number[];\n    legendProps?: Partial<ILegendsProps>;\n    rangeValuesForColorScale: string[];\n    showYAxisLables?: boolean;\n    sortOrder?: 'none' | 'alphabetical';\n}\n\nexport interface IHeatMapChartData {\n    data: IHeatMapChartDataPoint[];\n    legend: string;\n    value: number;\n}\n\nexport interface IHeatMapChartDataPoint {\n    callOutAccessibilityData?: IAccessibilityProps;\n    descriptionMessage?: string;\n    onClick?: VoidFunction;\n    ratio?: [number, number];\n    rectText?: string | number;\n    value: number;\n    x: string | Date | number;\n    y: string | Date | number;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an SVG Icon using createSvgIcon in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the createSvgIcon factory function to create a custom SVG icon component named CircleIcon in TypeScript, utilizing JSX for rendering the SVG structure.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/react-icons-northstar/README.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst circleSvg = ({ classes }) => (\n  <svg role=\"presentation\" focusable=\"false\" viewBox=\"8 8 16 16\" className={classes.svg}>\n    <g>\n      <path d=\"M16,8c-4.418,0-8,3.582-8,8s3.582,8,8,8s8-3.582,8-8S20.418,8,16,8z M16,22.85c-3.783,0-6.85-3.067-6.85-6.85S12.217,9.15,16,9.15s6.85,3.067,6.85,6.85S19.783,22.85,16,22.85z\" />\n      <circle className={classes.filledPart} cx=\"16\" cy=\"16\" r=\"8\" />\n    </g>\n  </svg>\n);\n\nconst CircleIcon = createSvgIcon({ svg: circleSvg, displayName: 'CircleIcon' });\n```\n\n----------------------------------------\n\nTITLE: Creating a Horizontal Stack with Spacing\nDESCRIPTION: Demonstrates creating a horizontal stack with defined gap between child components. Shows how to modify stack direction and add spacing.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-examples/src/react/Stack/docs/StackOverview.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack horizontal gap={10}>\n  <Stack.Item>Left Item</Stack.Item>\n  <Stack.Item>Right Item</Stack.Item>\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: DOM Structure of a Fluent UI React Switch - Label Before Indicator\nDESCRIPTION: The DOM structure of a Switch component in Fluent UI with the label positioned before the indicator. It highlights how elements are styled and structured in the DOM. Useful for developers customizing component styles or behavior.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-switch/library/docs/Spec.md#2025-04-20_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<div class=\"fui-Switch\">\n  <input class=\"fui-Switch__input\" id=\"switch-1\" role=\"switch\" type=\"checkbox\" />\n  <label class=\"fui-Switch__label\" for=\"switch-1\" />\n  <div aria-hidden=\"true\" class=\"fui-Switch__indicator\">\n    <CircleFilled />\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: TextArea Internal Component Structure\nDESCRIPTION: Internal implementation structure of the TextArea component showing how the slots and slot props are composed. It uses root and textarea slots with their respective props.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-textarea/library/docs/Spec.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<slots.root {...slotProps.root}>\n  <slots.textarea {...slotProps.textarea} />\n</slots.root>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Calendar for DatePicker in Swift\nDESCRIPTION: Shows how to use a non-default calendar system with the DatePicker. This example creates an Islamic calendar with Arabic locale settings to provide culturally-specific date representations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/DatePickerPage/docs/mac/DatePickerUsage.md#2025-04-20_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\n// Custom calendar\nvar calendar = Calendar(identifier: .islamic)\ncalendar.locale = Locale(identifier: \"ar\")\nDatePickerController(date: nil, calendar: calendar, style: .date)\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js Page with Fluent UI Components\nDESCRIPTION: Example of a Next.js page component using Fluent UI React components and styling system. It demonstrates how to use the makeStyles hook to create custom styles with shorthands and tokens, as well as how to implement basic Fluent UI components like Button and Title1.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/SSR/Nextjs.stories.mdx#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, makeStyles, shorthands, Title1, tokens } from '@fluentui/react-components';\nimport type { NextPage } from 'next';\nimport Head from 'next/head';\n\nconst useStyles = makeStyles({\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    width: '200px',\n\n    ...shorthands.border('2px', 'dashed', tokens.colorPaletteBerryBorder2),\n    ...shorthands.borderRadius(tokens.borderRadiusMedium),\n    ...shorthands.gap('5px'),\n    ...shorthands.padding('10px'),\n  },\n});\n\nconst Home: NextPage = () => {\n  const styles = useStyles();\n\n  return (\n    <>\n      <Head>\n        <title>My app</title>\n      </Head>\n\n      <div className={styles.container}>\n        <Title1>Hello world!</Title1>\n        <Button>A button</Button>\n      </div>\n    </>\n  );\n};\n\nexport default Home;\n```\n\n----------------------------------------\n\nTITLE: TypeScript API Definition for @fluentui/react-textarea\nDESCRIPTION: This code snippet defines the complete public API for the FluentUI Textarea component, including component types, props interface, state interface, rendering functions, and styling utilities. It shows the component architecture using slots, state management, and styling patterns.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-textarea/library/etc/react-textarea.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"react\" />\n\nimport type { ComponentProps } from '@fluentui/react-utilities';\nimport type { ComponentState } from '@fluentui/react-utilities';\nimport type { ForwardRefComponent } from '@fluentui/react-utilities';\nimport * as React_2 from 'react';\nimport type { Slot } from '@fluentui/react-utilities';\nimport { SlotClassNames } from '@fluentui/react-utilities';\n\n// @public\nexport const renderTextarea_unstable: (state: TextareaState) => JSX.Element;\n\n// @public\nexport const Textarea: ForwardRefComponent<TextareaProps>;\n\n// @public (undocumented)\nexport const textareaClassNames: SlotClassNames<TextareaSlots>;\n\n// @public\nexport type TextareaOnChangeData = {\n    value: string;\n};\n\n// @public\nexport type TextareaProps = Omit<ComponentProps<Partial<TextareaSlots>, 'textarea'>, 'defaultValue' | 'onChange' | 'size' | 'value'> & {\n    appearance?: 'outline' | 'filled-darker' | 'filled-lighter' | 'filled-darker-shadow' | 'filled-lighter-shadow';\n    defaultValue?: string;\n    onChange?: (ev: React_2.ChangeEvent<HTMLTextAreaElement>, data: TextareaOnChangeData) => void;\n    resize?: 'none' | 'horizontal' | 'vertical' | 'both';\n    size?: 'small' | 'medium' | 'large';\n    value?: string;\n};\n\n// @public (undocumented)\nexport type TextareaSlots = {\n    root: NonNullable<Slot<'span'>>;\n    textarea: NonNullable<Slot<'textarea'>>;\n};\n\n// @public\nexport type TextareaState = ComponentState<TextareaSlots> & Required<Pick<TextareaProps, 'appearance' | 'resize' | 'size'>>;\n\n// @public\nexport const useTextarea_unstable: (props: TextareaProps, ref: React_2.Ref<HTMLTextAreaElement>) => TextareaState;\n\n// @public\nexport const useTextareaStyles_unstable: (state: TextareaState) => TextareaState;\n```\n\n----------------------------------------\n\nTITLE: Rendering Icons with Microsoft Fluent UI in HTML\nDESCRIPTION: Fluent UI supports several implementations for icons, including font, SVG, and image-based icons. Each type requires a specific HTML structure that involves custom class names and icon data attributes, as shown in the examples. Notably, using these icons often requires initialization, but they are globally registered for convenience.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Icon.md#2025-04-20_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<i data-icon-name=\"CompassNW\" role=\"presentation\" aria-hidden=\"true\" class=\"ms-Icon root-38 css-176 css-144\"></i>\n```\n\nLANGUAGE: html\nCODE:\n```\n<i data-icon-name=\"onedrive-svg\" role=\"presentation\" aria-hidden=\"true\" class=\"ms-Icon root-38 css-144\">\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0,0,2048,2048\">\n    <g fill=\"#1B559B\">\n      <path\n        d=\"M 1860 1196 q 53 10 94 37 q 18 12 35 29 q 16 16 30 40 q 13 23 21 53 q 8 30 8 68 q 0 37 -10 75 q -11 38 -34 69 q -23 31 -58 51 q -36 20 -86 20 h -1079 q -78 0 -131 -24 q -54 -25 -87 -65 q -34 -40 -49 -91 q -15 -52 -15 -107 q 0 -46 12 -81 q 11 -35 31 -61 q 19 -27 43 -45 q 24 -19 50 -31 q 60 -29 136 -35 q 0 -1 4 -26 q 3 -25 16 -61 q 12 -37 36 -80 q 24 -43 64 -79 q 39 -37 98 -61 q 59 -25 141 -25 q 57 0 103 15 q 45 15 81 38 q 35 23 62 52 q 26 28 44 55 q 18 -10 42 -18 q 20 -7 48 -12 q 27 -6 60 -6 q 40 0 91 15 q 50 14 94 48 q 44 33 75 88 q 30 55 30 136 m -1463 174 q 0 53 10 99 q 10 46 29 86 h -170 q -52 0 -100 -23 q -48 -23 -85 -61 q -37 -38 -59 -87 q -22 -50 -22 -104 q 0 -49 11 -87 q 10 -38 27 -66 q 17 -29 39 -49 q 21 -21 44 -35 q 53 -33 121 -41 q -1 -9 -1 -18 q -1 -9 -1 -17 q 0 -72 27 -134 q 27 -63 73 -110 q 45 -47 106 -74 q 60 -27 127 -27 q 36 0 66 7 q 29 6 51 14 q 25 10 45 21 q 27 -48 65 -89 q 37 -41 84 -71 q 46 -30 101 -47 q 55 -17 115 -17 q 39 0 80 8 q 41 7 83 24 q 72 28 121 71 q 49 42 81 90 q 32 47 49 94 q 16 46 22 82 q -23 2 -43 5 q -21 3 -40 8 q -66 -69 -148 -104 q -82 -36 -177 -36 q -76 0 -136 17 q -60 17 -106 45 q -47 28 -81 64 q -34 36 -58 75 q -24 38 -39 76 q -15 37 -23 67 q -51 12 -102 38 q -52 26 -93 68 q -42 42 -67 101 q -26 59 -26 137\"\n      ></path>\n    </g>\n  </svg>\n</i>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div role=\"presentation\" aria-hidden=\"true\" class=\"ms-Icon root-38 ms-Icon-imageContainer image-40 one-149\">\n  <div class=\"ms-Image oneImage-266\">\n    <img\n      src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/office-ui-fabric-react-assets/icon-one.png\"\n      class=\"ms-Image-image is-loaded ms-Image-image--portrait is-fadeIn image-264\"\n    />\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Example Toolbar Component Structure in JSX\nDESCRIPTION: Example showing the public API usage of the Toolbar component with various child components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-toolbar/library/docs/Spec.md#2025-04-20_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Toolbar>\n  <ToolbarButton />\n  <ToolbarDivider />\n  <ToolbarButton />\n  <ToolbarButton />\n  <ToolbarCheckbox />\n  <ToolbarItemGroup>\n    <ToolbarRadio value=\"A\" label=\"Option A\" />\n    <ToolbarRadio value=\"B\" label=\"Option B\" />\n    <ToolbarRadio value=\"C\" label=\"Option C\" />\n    <ToolbarRadio value=\"D\" label=\"Option D\" />\n  </ToolbarItemGroup>\n  <ToolbarItemGroup>\n    <ToolbarCheckbox name=\"typo\" />\n    <ToolbarCheckbox name=\"typo\" />\n  </ToolbarItemGroup>\n</Toolbar>\n```\n\n----------------------------------------\n\nTITLE: Defining RadioGroup Slots in FluentUI\nDESCRIPTION: Details the slots available in the RadioGroup component, including the default slot for radio items and a label slot for the group title.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/radio-group/README.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### **Slots**\n\n| Name  | Description                       |\n| ----- | --------------------------------- |\n|       | The default slot for radios       |\n| label | Provide label for the radio group |\n```\n\n----------------------------------------\n\nTITLE: Passing JSX Elements to Button Component Slots in React TSX\nDESCRIPTION: Example showing how to pass different types of JSX elements (an image and an icon component) to the icon slot of a Button component. This demonstrates slot flexibility with complex content.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Slots/Slots.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<>\n  <Button icon={<img src='site-icon.png' alt='branded site icon' /> }\n  <Button icon={<CalendarRegular24 />} />\n</>\n```\n\n----------------------------------------\n\nTITLE: Implementing Split Button Menu in FluentUI with TSX\nDESCRIPTION: Example code demonstrating how to implement a split button menu in FluentUI using React TSX syntax. The snippet shows a menu with nested items and a split group containing a main action and a submenu trigger.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/library/docs/Spec.md#2025-04-20_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nconst trigger = <button> Open menu </button>\n\n// basic checkbox example\nconst menuSplitbutton= (\n  <Menu trigger={trigger}>\n    <MenuTrigger><button>Opem menu</button></MenuTrigger>\n    <MenuList>\n      <MenuItem>Option 1</MenuItem>\n      <Menu>\n        <MenuSplitGroup>\n          <MenuItem>Main action</MenuItem>\n          <MenuTrigger>\n            <MenuItem />\n          </MenuTrigger>\n        </MenuSplitGroup>\n        <MenuItem>Option 1</MenuItem>\n        <MenuItem>Option 2</MenuItem>\n        <MenuItem>Option 3</MenuItem>\n      </Menu>\n    <MenuList>\n  <Menu>\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories for FluentUI React Label\nDESCRIPTION: Configuration code for including React Label component stories in Storybook. Specifies the file path patterns for both MDX and TypeScript/TSX story files within the react-label package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-label/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-label/stories/src/**/*.stories.mdx', '../packages/react-components/react-label/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Expected DOM Structure\nDESCRIPTION: Depicts the expected HTML DOM structure for a `RadioGroup` containing three `Radio` components. This snippet illustrates the relationship between the root `div` with `role=\"radiogroup\"`, the individual `span` elements representing each radio, and the nested `input`, `div.fui-Radio__indicator`, and `label` elements within each `Radio`.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-radio/library/docs/Spec.md#2025-04-20_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div role=\"radiogroup\" class=\"fui-RadioGroup\" name=\"radiogroup-0\">\n  <span class=\"fui-Radio\">\n    <input type=\"radio\" id=\"radio-1\" name=\"radiogroup-0\" value=\"one\" checked />\n    <div class=\"fui-Radio__indicator\">\n      <svg><circle /></svg>\n    </div>\n    <label class=\"fui-Label\" for=\"radio-1\">Option One</label>\n  </span>\n\n  <span class=\"fui-Radio\">\n    <input type=\"radio\" id=\"radio-2\" name=\"radiogroup-0\" value=\"two\" />\n    <div class=\"fui-Radio__indicator\">\n      <svg><circle /></svg>\n    </div>\n    <label class=\"fui-Label\" for=\"radio-2\">Option Two</label>\n  </span>\n\n  <span class=\"fui-Radio\">\n    <input type=\"radio\" id=\"radio-3\" name=\"radiogroup-0\" value=\"three\" />\n    <div class=\"fui-Radio__indicator\">\n      <svg><circle /></svg>\n    </div>\n    <label class=\"fui-Label\" for=\"radio-3\">Option Three</label>\n  </span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom App Component with Fluent UI Providers\nDESCRIPTION: Implementation of a custom App component (_app.tsx) that wraps the application with necessary Fluent UI providers. It sets up the RendererProvider, SSRProvider, and FluentProvider with a theme to ensure proper styling and hydration.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/SSR/Nextjs.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  createDOMRenderer,\n  FluentProvider,\n  GriffelRenderer,\n  SSRProvider,\n  RendererProvider,\n  webLightTheme,\n} from '@fluentui/react-components';\nimport type { AppProps } from 'next/app';\n\ntype EnhancedAppProps = AppProps & { renderer?: GriffelRenderer };\n\nfunction MyApp({ Component, pageProps, renderer }: EnhancedAppProps) {\n  return (\n    // 👇 Accepts a renderer from <Document /> or creates a default one\n    //    Also triggers rehydration a client\n    <RendererProvider renderer={renderer || createDOMRenderer()}>\n      <SSRProvider>\n        <FluentProvider theme={webLightTheme}>\n          <Component {...pageProps} />\n        </FluentProvider>\n      </SSRProvider>\n    </RendererProvider>\n  );\n}\n\nexport default MyApp;\n```\n\n----------------------------------------\n\nTITLE: Implementing Teaching Popover Carousel in React with FluentUI v9\nDESCRIPTION: Sample code for a multi-page Teaching Popover Carousel implementation with navigation controls, showing how to structure multiple cards within a carousel component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-teaching-popover/library/docs/Spec.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<TeachingPopover>\n  <TeachingPopoverTrigger>\n    <Button>TeachingPopover trigger</Button>\n  </TeachingPopoverTrigger>\n  <TeachingPopoverSurface>\n    <TeachingPopoverHeader>Tips</TeachingPopoverHeader>\n    <TeachingPopoverCarousel defaultValue=\"test-0\">\n      <TeachingPopoverCarouselCard value=\"test-0\">\n        <TeachingPopoverBody media={<Image alt=\"test image\" fit=\"cover\" src={swapImage} />}>\n          <TeachingPopoverTitle>Teaching Bubble Title</TeachingPopoverTitle>\n          <div>This is page: 1</div>\n        </TeachingPopoverBody>\n      </TeachingPopoverCarouselCard>\n\n      <TeachingPopoverCarouselCard value=\"test-1\">\n        <TeachingPopoverBody media={<Image alt=\"test image\" fit=\"cover\" src={swapImage} />}>\n          <TeachingPopoverTitle>Teaching Bubble Title</TeachingPopoverTitle>\n          <div>This is page: 2</div>\n        </TeachingPopoverBody>\n      </TeachingPopoverCarouselCard>\n\n      <TeachingPopoverCarouselCard value=\"test-3\">\n        <TeachingPopoverBody media={<Image alt=\"test image\" fit=\"cover\" src={swapImage} />}>\n          <TeachingPopoverTitle>Teaching Bubble Title</TeachingPopoverTitle>\n          <div>This is page: 3</div>\n        </TeachingPopoverBody>\n      </TeachingPopoverCarouselCard>\n\n      <TeachingPopoverCarouselFooter next=\"Next\" previous=\"Previous\" initialStepText=\"Close\" finalStepText=\"Finish\">\n        <TeachingPopoverCarouselNav>{() => <TeachingPopoverCarouselNavButton />}</TeachingPopoverCarouselNav>\n      </TeachingPopoverCarouselFooter>\n    </TeachingPopoverCarousel>\n  </TeachingPopoverSurface>\n</TeachingPopover>\n```\n\n----------------------------------------\n\nTITLE: Implementing Grid-based List with Multiple Actions and Selection in HTML\nDESCRIPTION: This code snippet shows the HTML structure for a list with multiple actions and selection support using Grid, Row, and Gridcell roles. This approach allows for better handling of selection states.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-list/library/docs/ListA11y.md#2025-04-20_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div role=\"grid\">\n  <div role=\"row\" aria-selected=\"false\">\n    <div role=\"gridcell\">Item content</div>\n    <div role=\"gridcell\"><button>Action 1</button></div>\n    <div role=\"gridcell\"><button>Action 2</button></div>\n  </div>\n  <!-- More rows -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Migrating Arrow Key Navigation in FluentUI Grid Component\nDESCRIPTION: Shows how to migrate a Grid component with custom accessibility behavior for arrow key navigation from v0 to v9 using react-tabster.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/migrate-custom-accessibility.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Grid, gridBehavior } from '@fluentui/react-northstar';\nconst Component = () => (\n  <Grid accessibility={gridBehavior} role=\"menu\">\n    <Button role=\"menuitem\" content=\"First\" />\n    ...\n  </Grid>\n);\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Grid } from '@fluentui/react-components';\nimport { useTabsterAttributes } from '@fluentui/react-tabster';\n\nconst arrowKeyNavigationAttributes = useTabsterAttributes({\n  mover: {\n    direction: 3, // grid\n  },\n});\n\nconst Component = () => (\n  <Grid {...arrowKeyNavigationAttributes} role=\"menu\">\n    <Button role=\"menuitem\">First</Button>\n    ...\n  </Grid>\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Tree and TreeItem Components in TypeScript\nDESCRIPTION: This snippet defines the Tree and TreeItem components along with their associated props and state types. It includes various utility functions for rendering and managing tree structures.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tree/library/etc/react-tree.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const Tree: ForwardRefComponent<TreeProps>;\n\n// @public (undocumented)\nexport type TreeContextValue = {\n    contextType?: 'root';\n    level: number;\n    treeType: 'nested' | 'flat';\n    selectionMode: 'none' | SelectionMode_2;\n    appearance: 'subtle' | 'subtle-alpha' | 'transparent';\n    size: 'small' | 'medium';\n    openItems: ImmutableSet<TreeItemValue>;\n    checkedItems: ImmutableMap<TreeItemValue, 'mixed' | boolean>;\n    requestTreeResponse(request: TreeItemRequest): void;\n    forceUpdateRovingTabIndex?(): void;\n    navigationMode?: 'tree' | 'treegrid';\n};\n\n// @public\nexport const TreeItem: ForwardRefComponent<TreeItemProps>;\n\n// @public (undocumented)\nexport type TreeItemContextValue = {\n    isActionsVisible: boolean;\n    isAsideVisible: boolean;\n    selectionRef: React_2.Ref<HTMLInputElement>;\n    actionsRef: React_2.Ref<HTMLDivElement>;\n    expandIconRef: React_2.Ref<HTMLDivElement>;\n    layoutRef: React_2.Ref<HTMLDivElement>;\n    subtreeRef: React_2.Ref<HTMLDivElement>;\n    treeItemRef?: React_2.RefObject<HTMLDivElement>;\n    itemType: TreeItemType;\n    value: TreeItemValue;\n    open: boolean;\n    checked: TreeSelectionValue;\n};\n\n// @public\nexport const renderTree_unstable: (state: TreeState, contextValues: TreeContextValues) => JSX.Element;\n\n// @public\nexport const renderTreeItem_unstable: (state: TreeItemState, contextValues: TreeItemContextValues) => JSX.Element;\n```\n\n----------------------------------------\n\nTITLE: TextArea Component Class Definition in TypeScript\nDESCRIPTION: Defines the TextArea component class extending BaseTextArea with properties for appearance, size and block display.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_56\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class TextArea extends BaseTextArea {\n    appearance: TextAreaAppearance;\n    block: boolean;\n    // @internal (undocumented)\n    connectedCallback(): void;\n    // @internal (undocumented)\n    disconnectedCallback(): void;\n    // @internal (undocumented)\n    handleChange(_: any, propertyName: string): void;\n    // (undocumented)\n    protected labelSlottedNodesChanged(): void;\n    size?: TextAreaSize;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript: Switch Props Type\nDESCRIPTION: Defines the props interface for the Switch component, extending ComponentProps and including properties like checked, defaultChecked, labelPosition, and onChange. It omits certain inherited properties to refine the component's API.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-switch/library/etc/react-switch.api.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport type SwitchProps = Omit<ComponentProps<Partial<SwitchSlots>, 'input'>, 'checked' | 'defaultChecked' | 'onChange'> & {\n    checked?: boolean;\n    defaultChecked?: boolean;\n    labelPosition?: 'above' | 'after' | 'before';\n    onChange?: (ev: React_2.ChangeEvent<HTMLInputElement>, data: SwitchOnChangeData) => void;\n};\"\n```\n\n----------------------------------------\n\nTITLE: TypeScript API Declarations for FluentUI Message Bar\nDESCRIPTION: Complete TypeScript type definitions and component declarations for the FluentUI Message Bar system. Includes component props, state definitions, context providers, and utility functions for rendering and styling message bars.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-message-bar/library/etc/react-message-bar.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"react\" />\n\nimport type { ButtonContextValue } from '@fluentui/react-button';\nimport type { ComponentProps } from '@fluentui/react-utilities';\nimport type { ComponentState } from '@fluentui/react-utilities';\nimport type { ForwardRefComponent } from '@fluentui/react-utilities';\nimport * as React_2 from 'react';\nimport type { Slot } from '@fluentui/react-utilities';\nimport type { SlotClassNames } from '@fluentui/react-utilities';\n\n// @public\nexport const MessageBar: ForwardRefComponent<MessageBarProps>;\n\n// @public\nexport const MessageBarActions: ForwardRefComponent<MessageBarActionsProps>;\n\n// @public (undocumented)\nexport const messageBarActionsClassNames: SlotClassNames<MessageBarActionsSlots>;\n\n// @public (undocumented)\nexport type MessageBarActionsContextValues = {\n    button: ButtonContextValue;\n};\n\n// @public\nexport type MessageBarActionsProps = ComponentProps<MessageBarActionsSlots>;\n\n// @public (undocumented)\nexport type MessageBarActionsSlots = {\n    root: Slot<'div'>;\n    containerAction?: Slot<'div'>;\n};\n\n// @public\nexport type MessageBarActionsState = ComponentState<MessageBarActionsSlots> & Pick<Required<MessageBarContextValue>, 'layout'> & {\n    hasActions: boolean;\n};\n\n// @public\nexport const MessageBarBody: ForwardRefComponent<MessageBarBodyProps>;\n\n// @public (undocumented)\nexport const messageBarBodyClassNames: SlotClassNames<MessageBarBodySlots>;\n\n// @public\nexport type MessageBarBodyProps = ComponentProps<MessageBarBodySlots>;\n\n// @public (undocumented)\nexport type MessageBarBodySlots = {\n    root: Slot<'div'>;\n};\n\n// @public\nexport type MessageBarBodyState = ComponentState<MessageBarBodySlots>;\n\n// @public (undocumented)\nexport const messageBarClassNames: SlotClassNames<MessageBarSlots>;\n\n// @public (undocumented)\nexport const messageBarContextDefaultValue: MessageBarContextValue;\n\n// @public (undocumented)\nexport const MessageBarContextProvider: React_2.Provider<MessageBarContextValue | undefined>;\n\n// @public (undocumented)\nexport type MessageBarContextValue = {\n    layout: 'multiline' | 'singleline' | 'auto';\n    actionsRef: React_2.MutableRefObject<HTMLDivElement | null>;\n    bodyRef: React_2.MutableRefObject<HTMLDivElement | null>;\n    titleId: string;\n};\n\n// @public (undocumented)\nexport type MessageBarContextValues = {\n    messageBar: MessageBarContextValue;\n};\n\n// @public\nexport const MessageBarGroup: ForwardRefComponent<MessageBarGroupProps>;\n\n// @public (undocumented)\nexport const messageBarGroupClassNames: SlotClassNames<MessageBarGroupSlots>;\n\n// @public\nexport type MessageBarGroupProps = ComponentProps<MessageBarGroupSlots> & {\n    children: React_2.ReactElement[] | React_2.ReactElement;\n    animate?: 'exit-only' | 'both';\n};\n\n// @public (undocumented)\nexport type MessageBarGroupSlots = {\n    root: Slot<'div'>;\n};\n\n// @public\nexport type MessageBarGroupState = ComponentState<MessageBarGroupSlots> & Pick<MessageBarGroupProps, 'animate'> & {\n    enterStyles: string;\n    exitStyles: string;\n    children: React_2.ReactElement[];\n};\n\n// @public (undocumented)\nexport type MessageBarIntent = 'info' | 'success' | 'warning' | 'error';\n\n// @public\nexport type MessageBarProps = ComponentProps<MessageBarSlots> & Pick<Partial<MessageBarContextValue>, 'layout'> & {\n    intent?: MessageBarIntent;\n    politeness?: 'assertive' | 'polite';\n    shape?: 'square' | 'rounded';\n};\n\n// @public (undocumented)\nexport type MessageBarSlots = {\n    root: Slot<'div'>;\n    icon?: Slot<'div'>;\n    bottomReflowSpacer?: Slot<'div'>;\n};\n\n// @public\nexport type MessageBarState = ComponentState<MessageBarSlots> & Required<Pick<MessageBarProps, 'layout' | 'intent' | 'shape'>> & Pick<MessageBarContextValue, 'actionsRef' | 'bodyRef' | 'titleId'> & {\n    transitionClassName: string;\n};\n\n// @public\nexport const MessageBarTitle: ForwardRefComponent<MessageBarTitleProps>;\n\n// @public (undocumented)\nexport const messageBarTitleClassNames: SlotClassNames<MessageBarTitleSlots>;\n\n// @public\nexport type MessageBarTitleProps = ComponentProps<MessageBarTitleSlots>;\n\n// @public (undocumented)\nexport type MessageBarTitleSlots = {\n    root: Slot<'span'>;\n};\n\n// @public\nexport type MessageBarTitleState = ComponentState<MessageBarTitleSlots>;\n\n// @internal (undocumented)\nexport const messageBarTransitionContextDefaultValue: MessageBarTransitionContextValue;\n\n// @internal\nexport const MessageBarTransitionContextProvider: React_2.Provider<MessageBarTransitionContextValue | undefined>;\n\n// @public (undocumented)\nexport type MessageBarTransitionContextValue = {\n    className: string;\n    nodeRef: React_2.Ref<HTMLDivElement | null>;\n};\n\n// @public\nexport const renderMessageBar_unstable: (state: MessageBarState, contexts: MessageBarContextValues) => JSX.Element;\n\n// @public\nexport const renderMessageBarActions_unstable: (state: MessageBarActionsState, contexts: MessageBarActionsContextValues) => JSX.Element;\n\n// @public\nexport const renderMessageBarBody_unstable: (state: MessageBarBodyState, contextValues: MessageBarBodyContextValues) => JSX.Element;\n\n// @public\nexport const renderMessageBarGroup_unstable: (state: MessageBarGroupState) => JSX.Element;\n\n// @public\nexport const renderMessageBarTitle_unstable: (state: MessageBarTitleState) => JSX.Element;\n\n// @public\nexport const useMessageBar_unstable: (props: MessageBarProps, ref: React_2.Ref<HTMLDivElement>) => MessageBarState;\n\n// @public\nexport const useMessageBarActions_unstable: (props: MessageBarActionsProps, ref: React_2.Ref<HTMLDivElement>) => MessageBarActionsState;\n\n// @public (undocumented)\nexport function useMessageBarActionsContextValue_unstable(): MessageBarActionsContextValues;\n\n// @public\nexport const useMessageBarActionsStyles_unstable: (state: MessageBarActionsState) => MessageBarActionsState;\n\n// @public\nexport const useMessageBarBody_unstable: (props: MessageBarBodyProps, ref: React_2.Ref<HTMLDivElement>) => MessageBarBodyState;\n\n// @public\nexport const useMessageBarBodyStyles_unstable: (state: MessageBarBodyState) => MessageBarBodyState;\n\n// @public (undocumented)\nexport const useMessageBarContext: () => MessageBarContextValue;\n\n// @public (undocumented)\nexport function useMessageBarContextValue_unstable(state: MessageBarState): MessageBarContextValues;\n\n// @public\nexport const useMessageBarGroup_unstable: (props: MessageBarGroupProps, ref: React_2.Ref<HTMLDivElement>) => MessageBarGroupState;\n\n// @public\nexport const useMessageBarGroupStyles_unstable: (state: MessageBarGroupState) => MessageBarGroupState;\n\n// @public\nexport const useMessageBarStyles_unstable: (state: MessageBarState) => MessageBarState;\n\n// @public\nexport const useMessageBarTitle_unstable: (props: MessageBarTitleProps, ref: React_2.Ref<HTMLElement>) => MessageBarTitleState;\n\n// @public\nexport const useMessageBarTitleStyles_unstable: (state: MessageBarTitleState) => MessageBarTitleState;\n\n// @internal (undocumented)\nexport const useMessageBarTransitionContext: () => MessageBarTransitionContextValue;\n```\n\n----------------------------------------\n\nTITLE: Construct Bar Scale using d3ScaleBand\nDESCRIPTION: Constructs a band scale using d3ScaleBand to define the geometry of the bars.  It sets the domain based on x-axis labels, the range based on available width adjusted for margins, and the inner padding to 2/3 to achieve 2:1 spacing. The scale is then used to position and size the bars within the chart.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/docs/implementing-2-to-1-spacing.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst xBarScale = d3ScaleBand()\n    .domain(this._xAxisLabels)\n    .range([this.margins.left! + MIN_DOMAIN_MARGIN, containerWidth - this.margins.right! - MIN_DOMAIN_MARGIN])\n    .paddingInner(2 / 3);\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Menu in Fluent UI v9\nDESCRIPTION: Example of how to import and use the new Menu component structure in Fluent UI v9. It demonstrates the use of MenuTrigger, MenuPopover, MenuList, and MenuItem components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Menu.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Menu, MenuTrigger, MenuPopover, MenuList, MenuItem, Button } from '@fluentui/react-components';\n\nexport const Component = () => {\n  <Menu>\n    <MenuTrigger>\n      <Button>Open</Button>\n    </MenuTrigger>\n    <MenuPopover>\n      <MenuList>\n        <MenuItem>1</MenuItem>\n        <MenuItem>2</MenuItem>\n        <MenuItem>3</MenuItem>\n      </MenuList>\n    </MenuPopover>\n  </Menu>;\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Field Component with Child Render Function in JSX\nDESCRIPTION: This JSX snippet demonstrates how to render the Field component using a child render function. This approach allows for custom rendering of the control component, while still utilizing the passed props for accessibility and validation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-field/library/docs/Spec.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n<Field\n  label=\"This is the field label\"\n  orientation=\"horizontal\"\n  validationState=\"error\"\n  validationMessage=\"This is a validation message\"\n  hint=\"This is a hint message\"\n>\n  {fieldProps => (\n     {/* Render any JSX and spread the props in the appropriate place */}\n    <div>\n      <input {...fieldProps} />\n    </div>\n  )}\n</Field>\n```\n\n----------------------------------------\n\nTITLE: Custom Section Headings Expected DOM Output - HTML\nDESCRIPTION: This snippet represents the expected HTML output when using custom section headings within a MenuGroup, maintaining the proper structure for accessibility.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/library/docs/Spec.md#2025-04-20_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<button aria-haspopup=\"menu\" aria-expanded=\"true\" id=\"trigger\">Open menu</button>\n<div role=\"menu\" aria-labelledby=\"trigger\">\n  <div role=\"menuitem\" tabindex=\"0\">Option 1</div>\n  <div role=\"separator\" aria-hidden=\"true\"></div>\n  <div role=\"group\" aria-labelledby=\"sectionid\">\n    <div role=\"presentation\" aria-hidden=\"true\" id=\"sectionid\">children</div>\n    <div role=\"menuitem\" tabindex=\"-1\">Section Option 1</div>\n    <div role=\"menuitem\" tabindex=\"-1\">Section Option 2</div>\n    <div role=\"menuitem\" tabindex=\"-1\">Section Option 3</div>\n  </div>\n  <div role=\"separator\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Opening a Dialog with Button Click using React (v8)\nDESCRIPTION: Demonstrates how to open a dialog in v8 using a button. The button triggers the dialog visibility by changing the state through a provided function.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/docs/Spec.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<DefaultButton secondaryText=\"Opens the Sample Dialog\" onClick={toggleHideDialog} text=\"Open Dialog\" />\n\n<Dialog\n  hidden={hideDialog}\n  onDismiss={toggleHideDialog}\n  dialogContentProps={dialogContentProps}\n  modalProps={modalProps}\n>\n  <DialogFooter>\n    <PrimaryButton onClick={toggleHideDialog} text=\"Send\" />\n    <DefaultButton onClick={toggleHideDialog} text=\"Don't send\" />\n  </DialogFooter>\n</Dialog>\n```\n\n----------------------------------------\n\nTITLE: Theme Object and FluentProvider Usage\nDESCRIPTION: This snippet demonstrates how a theme object is structured and used with FluentProvider to inject CSS variables into the DOM. It showcases how components can then reference these CSS variables using makeStyles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/theme-tokens.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Theme object\nconst theme = {\n  global: {\n    color: {\n      black: '#000' // token value defined for global.color.black\n    }\n  }\n}\n\n// Application root - creates a div, injects --global-color-black: #000 to its styles\n<FluentProvider theme={theme}>\n  <ThemedComponent />\n</FluentProvider>\n\n// Fluent UI Themed Component\nconst useStyles = makeStyles([[null,\n  theme => ({\n    color: theme.global.color.black // ...but value is a css variable reference: 'var(--global-color-black)'\n  })\n]]\n\nconst ThemedComponent = () => {\n  const cls = useStyles({})\n  return <div className={cls}>ThemedComponent</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Griffel Webpack Loader for Build-time Style Optimization\nDESCRIPTION: Command to install the Griffel webpack loader as a development dependency for optimizing CSS-in-JS styles at build time.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/BuildTimeStyles.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @griffel/webpack-loader\n```\n\n----------------------------------------\n\nTITLE: Using React Context with FluentProvider for Appearance Control in Fluent V9\nDESCRIPTION: This example demonstrates using FluentProvider context to set a default appearance for input components. The context allows setting a global default while still enabling individual component overrides.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/convergence/apperance-migration.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App() {\n  return (\n    <FluentProvider appearance=\"filled-darker\">\n      <Input /> {/* has \"filled-darker\" */}\n      <Input appearance=\"underline\" /> {/* has \"underline\" */}\n    </FluentProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Combobox DOM Structure\nDESCRIPTION: Illustrates the DOM structure of an open Combobox, including the root, input, expandIcon, listbox, optiongroup, and option slots. It also shows how `aria-owns`, `aria-expanded`, and `aria-activedescendant` are used for accessibility.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/library/docs/Spec.md#2025-04-20_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<div aria-owns=\"listbox-id\">\n  <!-- root slot, combobox wrapper -->\n  <input\n    type=\"text\"\n    role=\"combobox\"\n    aria-expanded=\"true\"\n    aria-activedescendant=\"option1-id\"\n    placeholder=\"Select an Option\"\n    value=\"\"\n  /><!-- input slot (primary slot) -->\n  <span role=\"button\" aria-expanded=\"true\" aria-label=\"Open\">\n    <!-- expandIcon slot -->\n    <svg aria-hidden=\"true\"><!-- dropdown icon --></svg>\n  </span>\n</div>\n\n<!-- in a portal: -->\n<div role=\"listbox\" id=\"listbox-id\">\n  <!-- listbox root slot -->\n  <div role=\"group\" aria-labelledby=\"group1-label-id\">\n    <!-- optiongroup root slot -->\n    <span id=\"group1-label-id\" role=\"presentation\">Group 1</span\n    ><!-- optiongroup label slot -->\n    <div role=\"option\" aria-selected=\"false\" id=\"option1-id\">\n      <!-- option root slot -->\n      <span aria-hidden=\"true\">\n        <!-- option check slot -->\n        <svg><!-- check icon --></svg>\n      </span>\n      Option A\n    </div>\n    <div role=\"option\" aria-selected=\"false\" id=\"option2-id\">\n      <span aria-hidden=\"true\">\n        <svg><!-- check icon --></svg>\n      </span>\n      Option B\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Unstable Persona Render Function (TypeScript)\nDESCRIPTION: Defines the `renderPersona_unstable` function, which is responsible for rendering the Persona component based on its state. It accepts a `PersonaState` object and returns a JSX.Element representing the rendered component. This is marked as unstable, signifying it might change.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-persona/library/etc/react-persona.api.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const renderPersona_unstable: (state: PersonaState) => JSX.Element;\"\n```\n\n----------------------------------------\n\nTITLE: Registering fonts with fontFace\nDESCRIPTION: Illustrates how to register custom fonts using the `fontFace` function from `@fluentui/merge-styles`. This allows you to use custom fonts in your styles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/merge-styles/README.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fontFace } from '@fluentui/merge-styles';\n\nfontFace({\n  fontFamily: `\"Segoe UI\"`,\n  src: `url(\"//cdn.com/fontface.woff2) format(woff2)`,  fontWeight: 'normal',\n});\n```\n\n----------------------------------------\n\nTITLE: Testing a React Button component with React Testing Library\nDESCRIPTION: Shows how to test a Button component using React Testing Library, including rendering, simulating a click event, and checking if the onClick handler was called.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/testing-with-jest.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst onClick = jest.fn();\nconst { getByRole } = render(<Button onClick={onClick}>This is a button</Button>);\n\nuserEvent.click(getByRole('button'));\nexpect(onClick).toHaveBeenCalled();\n```\n\n----------------------------------------\n\nTITLE: Initializing FluentProvider as a ForwardRefComponent in TypeScript\nDESCRIPTION: The constant 'FluentProvider' is typed as a ForwardRefComponent with FluentProviderProps. This indicates a React component capable of receiving a ref forwarded to internal elements, often used in complex UI frameworks like Fluent UI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-provider/library/etc/react-provider.api.md#2025-04-20_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const FluentProvider: ForwardRefComponent<FluentProviderProps>;\n```\n\n----------------------------------------\n\nTITLE: Creating a Persona with PresenceBadge - React\nDESCRIPTION: This snippet illustrates how to use the Persona component to display a presence status using PresenceBadge, indicating the user's availability.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-persona/library/docs/Spec.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Persona presenceOnly name=\"Kevin Sturgis\" presence={{ status: 'offline', outOfOffice: true }} />\n```\n\n----------------------------------------\n\nTITLE: Defining Style-related Types and Interfaces in TypeScript\nDESCRIPTION: This snippet defines various types and interfaces related to styles, including IStyle, IStyleBase, IStyleBaseArray, IStyleFunction, and IStyleFunctionOrObject. These are used for type-safe style definitions and manipulations in the FluentUI system.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/merge-styles/etc/merge-styles.api.md#2025-04-20_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type IStyle = IStyleBase | IStyleBaseArray;\n\nexport type IStyleBase = IRawStyle | string | false | null | undefined;\n\nexport interface IStyleBaseArray extends Array<IStyle> {\n}\n\nexport type IStyleFunction<TStylesProps, TStyleSet extends IStyleSetBase> = (props: TStylesProps) => DeepPartialV2<TStyleSet>;\n\nexport type IStyleFunctionOrObject<TStylesProps, TStyleSet extends IStyleSetBase> = IStyleFunction<TStylesProps, TStyleSet> | DeepPartialV2<TStyleSet>;\n```\n\n----------------------------------------\n\nTITLE: Migrating from Function to Object-based makeStyles\nDESCRIPTION: Shows how to convert theme function-based makeStyles calls to the proposed object-based approach using imported tokens.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/convergence/make-styles-no-functions.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { makeStyles } from '@fluentui/react-make-styles';\n+import { tokens } from '@fluentui/react-theme';\n\nmakeStyles({\n-  root: theme => ({ color: theme.tokenB }),\n+  root: { color: tokens.tokenB },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Search Box Components from Fluent UI\nDESCRIPTION: This snippet imports the SearchBox component and its associated types, events, and class names from the '@fluentui/react-search' package. The SearchBox is utilized for input search functionality in UI applications.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/etc/react-components.api.md#2025-04-20_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SearchBox } from '@fluentui/react-search';\nimport { SearchBoxChangeEvent } from '@fluentui/react-search';\nimport { searchBoxClassNames } from '@fluentui/react-search';\nimport { SearchBoxProps } from '@fluentui/react-search';\nimport { SearchBoxSlots } from '@fluentui/react-search';\nimport { SearchBoxState } from '@fluentui/react-search';\n```\n\n----------------------------------------\n\nTITLE: Exporting Popover Components - JavaScript\nDESCRIPTION: This snippet exports various components related to popovers which are interactive elements used for contextual information or actions attached to another component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/etc/react-components.api.md#2025-04-20_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nexport { Popover }\n\nexport { PopoverContextValue }\n\nexport { PopoverProps }\n\nexport { PopoverProvider }\n\nexport { PopoverSize }\n\nexport { PopoverState }\n\nexport { PopoverSurface }\n\nexport { popoverSurfaceClassNames }\n\nexport { PopoverSurfaceProps }\n\nexport { PopoverSurfaceSlots }\n\nexport { PopoverSurfaceState }\n\nexport { PopoverTrigger }\n\nexport { PopoverTriggerChildProps }\n\nexport { PopoverTriggerProps }\n\nexport { PopoverTriggerState }\n```\n\n----------------------------------------\n\nTITLE: Defining Accordion Component Class in TypeScript\nDESCRIPTION: Class definition for the Accordion component that extends FASTElement, managing accordion items and their expand behavior. It implements internal methods to handle state changes and track accordion item elements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class Accordion extends FASTElement {\n    // @internal (undocumented)\n    protected accordionItems: Element[];\n    expandmode: AccordionExpandMode;\n    // (undocumented)\n    expandmodeChanged(prev: AccordionExpandMode, next: AccordionExpandMode): void;\n    // @internal\n    handleChange(source: any, propertyName: string): void;\n    // @internal (undocumented)\n    slottedAccordionItems: HTMLElement[];\n    // @internal (undocumented)\n    slottedAccordionItemsChanged(oldValue: HTMLElement[], newValue: HTMLElement[]): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multi Stacked Bar Chart Properties in TypeScript\nDESCRIPTION: This interface defines the properties required for configuring a multi-stacked bar chart in a React application. It accommodates various styling and functionality options such as gradient effects, callouts, and data handling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/etc/react-charting.api.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IMultiStackedBarChartProps {\n    barHeight?: number;\n    calloutProps?: Partial<ICalloutProps>;\n    className?: string;\n    culture?: string;\n    data?: IChartProps[];\n    enableGradient?: boolean;\n    focusZonePropsForLegendsInHoverCard?: IFocusZoneProps;\n    hideDenominator?: boolean[];\n    hideLabels?: boolean;\n    hideLegend?: boolean;\n    hideRatio?: boolean[];\n    hideTooltip?: boolean;\n    href?: string;\n    legendProps?: Partial<ILegendsProps>;\n    legendsOverflowProps?: Partial<IOverflowSetProps>;\n    legendsOverflowText?: string;\n    onRenderCalloutPerDataPoint?: IRenderFunction<IChartDataPoint>;\n    roundCorners?: boolean;\n    styles?: IStyleFunctionOrObject<IMultiStackedBarChartStyleProps, IMultiStackedBarChartStyles>;\n    theme?: ITheme;\n    variant?: MultiStackedBarChartVariant;\n    width?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel with Griffel Preset for TypeScript Support\nDESCRIPTION: Babel configuration that adds the Griffel preset with TypeScript support. This setup is recommended for library developers who don't bundle their code.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/BuildTimeStyles.stories.mdx#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\n    [\n      \"@griffel\",\n      {\n        \"babelOptions\": {\n          \"presets\": [\"@babel/preset-typescript\"],\n        },\n      },\n    ],\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Serializer for Merge-Styles (JavaScript)\nDESCRIPTION: This snippet demonstrates how to configure the Jest serializer in the jest.config.js file. It adds the @fluentui/jest-serializer-merge-styles to the snapshotSerializers array.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/jest-serializer-merge-styles/README.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  snapshotSerializers: [path.resolve(__dirname, 'jest-serializer-merge-styles')],\n};\n```\n\n----------------------------------------\n\nTITLE: Using useConst Hook in JSX\nDESCRIPTION: Example of how to use the useConst hook in a React component to create values that should never change.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-hooks/README.md#2025-04-20_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useConst } from '@fluentui/react-hooks';\n\nconst MyComponent = () => {\n  const value = useConst(() => {\n    /* some computation that must only run once or has side effects */\n  });\n  const valueThatMustNeverChange = useConst(/*...*/);\n  ...\n};\n```\n\n----------------------------------------\n\nTITLE: Creating DatePicker with Date and Time Text Field in Swift\nDESCRIPTION: Initializes a DatePicker that includes both date and time selection using the dateTime style. This configuration allows users to select both a date and a specific time.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/DatePickerPage/docs/mac/DatePickerUsage.md#2025-04-20_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\n// Default configuration with date and time text field\nDatePickerController(date: nil, calendar: nil, style: .dateTime)\n```\n\n----------------------------------------\n\nTITLE: Implementing useConst Hook in TypeScript\nDESCRIPTION: Definition of the useConst hook, which initializes and returns a constant value that never changes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-hooks/README.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useConst<T>(initialValue: T | (() => T)): T;\n```\n\n----------------------------------------\n\nTITLE: Defining Types for String Union Props in TypeScript\nDESCRIPTION: This code snippet shows an example of defining a prop in TypeScript using a string union for 'myProp', which accepts specific string values. The snippet illustrates how to structure props with TypeScript unions, ensuring type safety and clarity.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/prop-string-union-naming.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmyProp: 'a' | 'b';\n```\n\n----------------------------------------\n\nTITLE: Creating a new Fluent UI React app using Create React App\nDESCRIPTION: Commands to create a new React app with Fluent UI React template using Create React App. This process requires Node.js to be installed.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-react-app my-app --template @fluentui/cra-template\ncd my-app\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Defining useSetInterval Hook in Typescript\nDESCRIPTION: Defines a React hook, `useSetInterval`, that returns safe `setInterval` and `clearInterval` methods. Intervals set up using this hook will be automatically cleared when the component is unmounted, preventing memory leaks. The returned callbacks maintain the same identity across renders.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-hooks/README.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useSetInterval(): {\n  setInterval: (callback: () => void, duration: number) => number;\n  clearInterval: (id: number) => void;\n};\n```\n\n----------------------------------------\n\nTITLE: Theme Override for an Application Subtree\nDESCRIPTION: This snippet demonstrates how to override theme tokens for a specific part of the application using `FluentProvider`. This allows for localized styling changes without affecting other parts of the application.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/theme-tokens.md#2025-04-20_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst CustomScreen = () => {\n  // overrides only, FluentProvider will merge with a theme from context\n  const themeOverrides = {\n    global: {\n      borderRadius: {\n        medium: '6px',\n      },\n    },\n  };\n\n  return (\n    <FluentProvider theme={themeOverrides}>\n      <CustomScreenInner />\n    </FluentProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Verify Configuration Command - FluentUI Workspace Plugin\nDESCRIPTION: Shows how to use the verify option to check if tsconfig.base.all.json is synchronized with other base configurations, typically used in CI environments.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/tsconfig-base-all/README.md#2025-04-20_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:tsconfig-base-all --verify\n```\n\n----------------------------------------\n\nTITLE: Using Advanced Features of SearchBox in React\nDESCRIPTION: This snippet illustrates how to utilize advanced features of the SearchBox component, such as setting visual appearance, class names, custom input configuration, and additional content before and after the input. It includes props for managing input state and appearance variants.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-search/library/docs/Spec.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"<SearchBox\\n  appearance=\\\"underline\\\"\\n  className=\\\"rootClass\\\"\\n  input=\\{{ className: 'searchBoxClass' }}\\n  id=\\\"searchBox1\\\"\\n  value=\\\"something\\\"\\n  onChange={(ev, data) => console.log(data.value)}\\n  contentBefore={<SearchIcon />}\\n  contentAfter={<MicIcon />}\\n  dismiss={<ClearIcon />}\\n/>\"\n```\n\n----------------------------------------\n\nTITLE: Defining Theme Interface in TypeScript\nDESCRIPTION: Declares a Theme interface that extends IScheme, including optional properties for components styles, internal ID, name, and scheme definitions. Used for theme configuration in Fluent UI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/theme/etc/theme.api.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Theme extends IScheme {\n    components?: ComponentsStyles;\n    id?: string;\n    name?: string;\n    schemes?: {\n        [P in ISchemeNames]?: IScheme;\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Form Fields to Error Messages in HTML\nDESCRIPTION: Shows how to properly connect form fields to their corresponding error messages using the aria-describedby attribute. This ensures that error messages are narrated by screen readers when the field is focused.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Accessibility/ComponentLabelling.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\nThe \"aria-describedby\" applied on each input field and references the corresponding error message element.\n```\n\n----------------------------------------\n\nTITLE: Using aria-label with Tree Component\nDESCRIPTION: Example of implementing accessibility attributes in Tree component root for screen reader support.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tree/stories/src/Tree/TreeBestPractices.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**Use the `aria-label` attribute on the root of the `Tree` component to provide an accessible name for the tree:**\n```\n\n----------------------------------------\n\nTITLE: Configuring Fluent UI Parameters in Stories\nDESCRIPTION: Example showing how to configure Fluent UI parameters for different story variants including dark mode, high contrast, and RTL support.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-storybook-addon/README.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FluentParameters, parameters } from '@fluentui/react-storybook-addon';\nimport { Button } from '@fluentui/react-components';\n\nexport const Button = () => <Button>Hello World</Button>;\n\nexport const ButtonDarkMode = {\n  render: Button,\n  parameters: { fluentTheme: 'web-dark' } as FluentParameters, // Story renders in Dark mode.\n};\n\nexport const ButtonHighContrast = {\n  render: Button,\n  parameters: { fluentTheme: 'teams-high-contrast', mode: 'vr-test' } as FluentParameters, // Story renders in High Contrast mode without injected padding and background style.\n};\n\nexport const ButtonRTL = {\n  render: Button,\n  // Parameters identity function will have all TS type annotations built in for intellisense.\n  parameters: parameters({ fluentTheme: 'web-light', dir: 'rtl', mode: 'vr-test' }), // Story renders in RTL, Web light mode and without injected padding and background style.\n};\n```\n\n----------------------------------------\n\nTITLE: Installing FluentUI React Components\nDESCRIPTION: Command to install the main FluentUI React components package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-text/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @fluentui/react-components\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Button Variants in JSX\nDESCRIPTION: Demonstrates various basic usage examples of the Button component, including text-only, icon-only, icon with text, primary appearance, disabled state, and different sizes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-button/library/docs/SPEC.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Button>Text</Button>\n<Button icon={<SVGIcon />} />\n<Button icon={<SVGIcon />}>Text</Button>\n<Button icon={<SVGIcon />} iconPosition=\"after\">Text</Button>\n<Button appearance=\"primary\">Text</Button>\n<Button disabled>Text</Button>\n<Button size=\"small\">Text</Button>\n<Button size=\"large\">Text</Button>\n```\n\n----------------------------------------\n\nTITLE: Using PortalCompatContextProvider and usePortalCompat in React\nDESCRIPTION: This React code snippet demonstrates how to use `PortalCompatContextProvider` and `usePortalCompat` from `@fluentui/react-portal-compat-context`. The `usePortalCompat` hook registers a portal element, while `PortalCompatContextProvider` provides the registration function to its children.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-portal-compat-context/README.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { PortalCompatContextProvider, usePortalCompat } from '@fluentui/react-portal-compat-context';\n\nfunction Consumer() {\n  const registerEl = usePortalCompat();\n\n  React.useEffect(() => {\n    const portalEl = document.createElement('div');\n\n    return registerEl(portalEl);\n  }, [registerEl]);\n\n  return null;\n}\n\nfunction App() {\n  const registerEl = React.useCallback((portalEl: HTMLElement) => {\n    // do something...\n    console.log(portalEl);\n\n    return () => {\n      // do something for cleanups...\n    };\n  }, []);\n\n  return (\n    <PortalCompatContextProvider value={registerEl}>\n      <Consumer />\n    </PortalCompatContextProvider>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring server-side rendering for Fluent UI in React Router 7/Remix\nDESCRIPTION: Updates to the entry.server.tsx file to set up server-side rendering with Fluent UI, including style injection and provider wrapping.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/SSR/Remix.stories.mdx#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// 1. Import required Fluent UI SSR utilities\nimport { createDOMRenderer, RendererProvider, renderToStyleElements, SSRProvider } from '@fluentui/react-components';\n\n// 2. Define constants for style injection\nconst FLUENT_UI_INSERTION_POINT_TAG = `<meta name=\"fluentui-insertion-point\" content=\"fluentui-insertion-point\"/>`;\nconst FLUENT_UI_INSERTION_TAG_REGEX = new RegExp(FLUENT_UI_INSERTION_POINT_TAG.replaceAll(' ', '(\\\\s)*'));\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext,\n) {\n  // 3. Create Fluent UI renderer\n  const renderer = createDOMRenderer();\n\n  // ...\n\n  return new Promise((resolve, reject) => {\n    let shellRendered = false;\n    // 4. Track style extraction state\n    let isStyleExtracted = false;\n\n    const { pipe, abort } = renderToPipeableStream(\n      // 5. Wrap RemixServer with Fluent UI providers\n      <RendererProvider renderer={renderer}>\n        <SSRProvider>\n          <ServerRouter context={routerContext} url={request.url} abortDelay={ABORT_DELAY} />\n          {/* or <RemixServer context={remixContext} url={request.url} /> */}\n        </SSRProvider>\n      </RendererProvider>,\n      {\n        [callbackName]: () => {\n          shellRendered = true;\n          const body = new PassThrough({\n            // 6. Transform stream to inject Fluent UI styles\n            transform(chunk, _, callback) {\n              const str = chunk.toString();\n              const style = renderToStaticMarkup(<>{renderToStyleElements(renderer)}</>);\n\n              if (!isStyleExtracted && FLUENT_UI_INSERTION_TAG_REGEX.test(str)) {\n                chunk = str.replace(FLUENT_UI_INSERTION_TAG_REGEX, `${FLUENT_UI_INSERTION_POINT_TAG}${style}`);\n                isStyleExtracted = true;\n              }\n\n              callback(null, chunk);\n            },\n          });\n          // ...\n        }\n      }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Application with FluentProvider in React\nDESCRIPTION: This snippet demonstrates how to use the FluentProvider to apply a theme to a React application. It wraps the entire app with a FluentProvider and specifies the webLightTheme to ensure consistent styling. This is essential for components migrated from Fluent UI version 8.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Troubleshooting.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { FluentProvider, webLightTheme } from '@fluentui/react-components';\n\nimport App from './App';\n\nReactDOM.render(\n  <FluentProvider theme={webLightTheme}>\n    <App />\n  </FluentProvider>,\n  document.getElementById('root'),\n);\n```\n\n----------------------------------------\n\nTITLE: Basic useContextSelector Implementation in React JSX\nDESCRIPTION: Demonstrates the basic usage of useContextSelector() hook in a ListItem component for selective re-rendering based on context changes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/context-selector-tearing.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction ListItem(props) {\n  // 😎 Bail out if the selected value does not change\n  const isActive = useContextSelector(ListValueContext, activeValue => activeValue === props.value /* item value */);\n\n  return (\n    <div>\n      {props.value}, isActive: {isActive.toString()}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Button Component with React.forwardRef in React\nDESCRIPTION: Utilizes the useButton_unstable hook to create a Button component, applying necessary styling and returning the rendered button using a separate render function.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-utilities/src/compose/README.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst Button = React.forwardRef((props, ref) => {\n  const state = useButton_unstable(props, ref);\n\n  // Apply styling here. (e.g. add className to state.)\n\n  return renderButton_unstable(state);\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Theme and Tokens in React\nDESCRIPTION: Demonstrates how to import a theme and tokens from the Fluent UI React components package. This is the first step in using the theming system.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-theme/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { webLightTheme, tokens } from '@fluentui/react-components';\n```\n\n----------------------------------------\n\nTITLE: Defining API Types and Components for Fluent UI React Tooltip\nDESCRIPTION: This code snippet defines the main types, components, and utility functions for the @fluentui/react-tooltip package. It includes definitions for TooltipProps, TooltipState, rendering functions, and styling hooks.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tooltip/library/etc/react-tooltip.api.md#2025-04-20_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { ComponentProps } from '@fluentui/react-utilities';\nimport type { ComponentState } from '@fluentui/react-utilities';\nimport type { PortalProps } from '@fluentui/react-portal';\nimport type { PositioningShorthand } from '@fluentui/react-positioning';\nimport * as React_2 from 'react';\nimport type { Slot } from '@fluentui/react-utilities';\nimport type { SlotClassNames } from '@fluentui/react-utilities';\nimport type { TriggerProps } from '@fluentui/react-utilities';\n\n// @public\nexport type OnVisibleChangeData = {\n    visible: boolean;\n    documentKeyboardEvent?: KeyboardEvent;\n};\n\n// @public\nexport const renderTooltip_unstable: (state: TooltipState) => JSX.Element;\n\n// @public\nexport const Tooltip: React_2.FC<TooltipProps>;\n\n// @public (undocumented)\nexport const tooltipClassNames: SlotClassNames<TooltipSlots>;\n\n// @public\nexport type TooltipProps = ComponentProps<TooltipSlots> & TriggerProps<TooltipTriggerProps> & Pick<PortalProps, 'mountNode'> & {\n    appearance?: 'normal' | 'inverted';\n    hideDelay?: number;\n    onVisibleChange?: (event: React_2.PointerEvent<HTMLElement> | React_2.FocusEvent<HTMLElement> | undefined, data: OnVisibleChangeData) => void;\n    positioning?: PositioningShorthand;\n    relationship: 'label' | 'description' | 'inaccessible';\n    showDelay?: number;\n    visible?: boolean;\n    withArrow?: boolean;\n};\n\n// @public\nexport type TooltipSlots = {\n    content: NonNullable<Slot<'div'>>;\n};\n\n// @public\nexport type TooltipState = ComponentState<TooltipSlots> & Pick<TooltipProps, 'mountNode' | 'relationship'> & Required<Pick<TooltipProps, 'appearance' | 'hideDelay' | 'positioning' | 'showDelay' | 'visible' | 'withArrow'>> & {\n    children?: React_2.ReactElement | null;\n    shouldRenderTooltip?: boolean;\n    arrowRef?: React_2.Ref<HTMLDivElement>;\n    arrowClassName?: string;\n};\n\n// @public\nexport type TooltipTriggerProps = {\n    ref?: React_2.Ref<unknown>;\n} & Pick<React_2.HTMLAttributes<HTMLElement>, 'aria-describedby' | 'aria-label' | 'aria-labelledby' | 'onBlur' | 'onFocus' | 'onPointerEnter' | 'onPointerLeave' | 'aria-haspopup' | 'aria-expanded'>;\n\n// @public\nexport const useTooltip_unstable: (props: TooltipProps) => TooltipState;\n\n// @public\nexport const useTooltipStyles_unstable: (state: TooltipState) => TooltipState;\n```\n\n----------------------------------------\n\nTITLE: Consumer Usage of TagPicker Event Callbacks\nDESCRIPTION: Example of how to consume and implement TagPicker event callbacks in a React component, showing state management and event handling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/patterns/change-event-callbacks.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst [open, setOpen] = React.useState(false);\nconst handleOpenChange: TagPickerProps['onOpenChange'] = (e, data) => setOpen(data.open);\n\nconst [selectedOptions, setSelectedOptions] = React.useState<string[]>([]);\nconst onOptionSelect: TagPickerProps['onOptionSelect'] = (e, data) => {\n  if (data.value === 'no-options') {\n    return;\n  }\n  setSelectedOptions(data.selectedOptions);\n};\n\nreturn (\n  <TagPicker\n      onOptionSelect={onOptionSelect}\n      selectedOptions={selectedOptions}\n      onOpenChange={handleOpenChange}\n      open\n    >\n    {...}\n  </TagPicker>\n);\n```\n\n----------------------------------------\n\nTITLE: Using the useAccessibility Hook in React\nDESCRIPTION: This example demonstrates the usage of the `useAccessibility` hook to enhance a React component with accessibility features. It defines an `imageBehavior` object to specify accessibility attributes and key actions, and then uses `useAccessibility` to apply these behaviors to the component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/react-bindings/README.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst imageBehavior: Accessibility<{ disabled: boolean }> = props => ({\n  attributes: {\n    root: {\n      'aria-disabled': props.disabled,\n      tabIndex: -1,\n    },\n    img: {\n      role: 'presentation',\n    },\n  },\n  keyActions: {\n    root: {\n      click: {\n        keyCombinations: [{ keyCode: 13 /* equals Enter */ }],\n      },\n    },\n  },\n});\n\ntype ImageProps = {\n  disabled?: boolean;\n  onClick?: (e: React.MouseEvent<HTMLDivElement> | React.KeyboardEvent<HTMLDivElement>) => void;\n  src: string;\n};\n\nconst Image: React.FC<ImageProps> = props => {\n  const { disabled, onClick, src, ...rest } = props;\n  const getA11Props = useAccessibility(imageBehavior, {\n    mapPropsToBehavior: () => ({\n      disabled,\n    }),\n    actionHandlers: {\n      click: (e: React.KeyboardEvent<HTMLDivElement>) => {\n        if (onClick) onClick(e);\n      },\n    },\n  });\n\n  return (\n    <div {...getA11Props('root', { onClick, ...rest })}>\n      <img {...getA11Props('img', { src })} />\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Pseudo-Selectors and Media Queries with FluentUI in TSX\nDESCRIPTION: This snippet provides examples of using pseudo-selectors and media queries within `mergeStyles` to dynamically style components. The example demonstrates style changes based on hover state and screen width, showcasing the flexibility of runtime style definitions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/merge-styles/README.md#2025-04-20_snippet_3\n\nLANGUAGE: TSX\nCODE:\n```\nmergeStyles({\n  background: 'red',\n  '@media(max-width: 600px)': {\n    background: 'green',\n  },\n  '@supports(display: grid)': {\n    display: 'grid',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Description Tooltip for Link\nDESCRIPTION: Example of using Tooltip as a description for a link in the new Fluent UI implementation. This uses the 'description' relationship to provide additional context.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tooltip/library/docs/Spec.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Tooltip content=\"This is an example\" relationship=\"description\">\n  <a href=\"http://example.com\">A link</a>\n</Tooltip>\n```\n\n----------------------------------------\n\nTITLE: Defining Persona Interfaces in TypeScript for FluentUI\nDESCRIPTION: Defines the interfaces for Persona components in FluentUI. Includes IPersonaProps, IPersonaSharedProps, and related interfaces that control the appearance and behavior of persona elements like profile images and presence indicators.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_158\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IPersona {\n}\n\n// @public (undocumented)\nexport interface IPersonaProps extends IPersonaSharedProps {\n    className?: string;\n    componentRef?: IRefObject<IPersona>;\n    onRenderOptionalText?: IRenderFunction<IPersonaProps>;\n    onRenderPrimaryText?: IRenderFunction<IPersonaProps>;\n    onRenderSecondaryText?: IRenderFunction<IPersonaProps>;\n    onRenderTertiaryText?: IRenderFunction<IPersonaProps>;\n    styles?: IStyleFunctionOrObject<IPersonaStyleProps, IPersonaStyles>;\n}\n\n// @public (undocumented)\nexport interface IPersonaSharedProps extends React_2.HTMLAttributes<HTMLDivElement>, React_2.RefAttributes<HTMLDivElement> {\n    allowPhoneInitials?: boolean;\n    coinProps?: IPersonaCoinProps;\n    coinSize?: number;\n    hidePersonaDetails?: boolean;\n    imageAlt?: string;\n    imageInitials?: string;\n    imageShouldFadeIn?: boolean;\n    imageShouldStartVisible?: boolean;\n    imageUrl?: string;\n    initialsColor?: PersonaInitialsColor | string;\n    initialsTextColor?: string;\n    isOutOfOffice?: boolean;\n    onPhotoLoadingStateChange?: (newImageLoadState: ImageLoadState) => void;\n    // @deprecated\n    onRenderCoin?: IRenderFunction<IPersonaSharedProps>;\n    onRenderInitials?: IRenderFunction<IPersonaSharedProps>;\n    onRenderPersonaCoin?: IRenderFunction<IPersonaSharedProps>;\n    optionalText?: string;\n    presence?: PersonaPresence;\n    presenceColors?: {\n        available: string;\n        away: string;\n        busy: string;\n        dnd: string;\n        offline: string;\n        oof: string;\n        background: string;\n    };\n    presenceTitle?: string;\n    // @deprecated\n    primaryText?: string;\n    secondaryText?: string;\n    showInitialsUntilImageLoads?: boolean;\n    showOverflowTooltip?: boolean;\n    // (undocumented)\n    showSecondaryText?: boolean;\n    showUnknownPersonaCoin?: boolean;\n    size?: PersonaSize;\n    tertiaryText?: string;\n    text?: string;\n    theme?: ITheme;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Fluent UI Icons in React\nDESCRIPTION: Demonstrates how to import and use a specific icon from the @fluentui/react-icons package in a React application. This example shows the usage of the DismissSquareRegular icon component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Icons/IconsCatalog.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DismissSquareRegular } from '@fluentui/react-icons';\n\nfunction App() {\n  return <DismissSquareRegular />;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Style Set Concatenation Utilities in TypeScript\nDESCRIPTION: Provides type-safe overloaded functions for concatenating multiple style sets with flexible type inference and support for up to 6 style sets\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/merge-styles/etc/merge-styles.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport function concatStyleSets<TStyleSet>(styleSet: TStyleSet | Missing_3): IConcatenatedStyleSet<ObjectOnly<TStyleSet>>;\n```\n\n----------------------------------------\n\nTITLE: Button Component Structure with Style Hooks in TSX\nDESCRIPTION: Basic structure of a Fluent UI Button component showing the implementation of style hooks and rendering logic.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/AdvancedStylingTechniques.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Button: ForwardRefComponent<ButtonProps> = React.forwardRef((props, ref) => {\n  const state = useButton_unstable(props, ref);\n\n  useButtonStyles_unstable(state);\n  useCustomStyleHook_unstable('useButtonStyles_unstable')(state);\n\n  return renderButton_unstable(state);\n}) as ForwardRefComponent<ButtonProps>;\n```\n\n----------------------------------------\n\nTITLE: Defining IDropdownOption Interface in TypeScript\nDESCRIPTION: Defines the IDropdownOption interface extending ISelectableOption with an optional isSelected property. The isSelected property is marked as deprecated.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_115\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IDropdownOption<T = any> extends ISelectableOption<T> {\n    // @deprecated (undocumented)\n    isSelected?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Using React Popover components\nDESCRIPTION: This JSX snippet demonstrates how to structure a Popover component using Popover, PopoverTrigger, and PopoverSurface. The PopoverTrigger component typically wraps an element that will control the popover's visibility, and the PopoverSurface component contains the popover's content.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-popover/library/README.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Popover>\n  <PopoverTrigger>\n    <button>Controls popover</button>\n  </PopoverTrigger>\n\n  <PopoverSurface>\n    <div className={example}>\n      <h3>Popover content</h3>\n\n      <div>This is some popover content</div>\n    </div>\n  </PopoverSurface>\n</Popover>;\n```\n\n----------------------------------------\n\nTITLE: Option A1 Implementation Example\nDESCRIPTION: Shows the proposed Option A1 implementation with typed data objects and event handlers for Input and Checkbox components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/event-handlers-arguments.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\ninterface InputOnChangeData {\n  value: string;\n  // other metadata can be included on demand\n}\n\ninterface CheckboxOnChangeData {\n  // 👇 The name \"value\" doesn't always make sense and could possibly be confusing in some cases. E.g. for \"Checkbox\",\n  //    the \"onChange\" event happens when the \"checked\" prop changes, not the \"value\" prop\n  checked: string;\n}\n\nfunction App() {\n  return (\n    <>\n      <Input\n        onChange={(ev: React.ChangeEvent, data: InputOnChangeData) => {\n          const { value } = data;\n\n          // I can access the new value\n          console.log(`The new value is ${value}`);\n        }}\n      />\n      <Checkbox onChange={(ev: React.ChangeEvent, data: CheckboxOnChangeData) => console.log(data.checked)} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: React Component Factory for Web Animations API\nDESCRIPTION: This code snippet shows a factory pattern implementation for creating React components that handle animations using the Web Animations API. The `createMotionComponent` function takes a motion definition as input and returns a React component that applies the animation to its child element. The `React.forwardRef` is used to pass a ref to the child element.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/motion-definition-n-apis.md#2025-04-20_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction createMotionComponent(motion) {\n  return React.forwardRef((props, ref) => {\n    const elementRef = React.useRef();\n\n    React.useEffect(() => {\n      elementRef.current = elementRef.current.animate(motion.keyframes, {\n        duration: motion.duration,\n      });\n\n      return () => {\n        elementRef.current.cancel();\n      };\n      // `motion` does not need to be a dependency as it's defined outside the component\n    }, []);\n\n    return React.cloneElement(props.children, { ref: elementRef });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Define PositioningShorthandValue type\nDESCRIPTION: Defines a type called `PositioningShorthandValue` which is a union of string literals that represent common positioning shortcuts. These shortcuts specify the position and alignment of the element relative to its target.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-positioning/etc/react-positioning.api.md#2025-04-20_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type PositioningShorthandValue = 'above' | 'above-start' | 'above-end' | 'below' | 'below-start' | 'below-end' | 'before' | 'before-top' | 'before-bottom' | 'after' | 'after-top' | 'after-bottom';\n```\n\n----------------------------------------\n\nTITLE: Creating a Fade Presence Motion in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a fadePresence PresenceMotion object in TypeScript. It defines separate enter and exit motions, which can have distinct keyframes, durations, and easing functions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/motion-definition-n-apis.md#2025-04-20_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\nconst fadeEnter: AtomMotion = {\n  /* --- */\n};\nconst fadeExit: AtomMotion = {\n  /* --- */\n};\n\nconst fadePresence: PresenceMotion = {\n  enter: fadeEnter,\n  exit: fadeExit,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Scale Presence Component with Dynamic Parameters in TypeScript React\nDESCRIPTION: This code defines a Scale presence component using createPresenceComponent. It accepts a startFrom parameter to customize the initial scale value. The component defines enter and exit animations with keyframes, durations, and opacity changes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-motion/stories/src/CreatePresenceComponent/CreatePresenceComponentFunctionParams.stories.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst Scale = createPresenceComponent<{ startFrom?: number }>(({ startFrom = 0.5 }) => {\n  const keyframes = [\n    { opacity: 0, transform: `scale(${startFrom})` },\n    { opacity: 1, transform: 'scale(1)' },\n  ];\n\n  return {\n    enter: {\n      keyframes,\n      duration: motionTokens.durationUltraSlow,\n    },\n    exit: {\n      keyframes: [...keyframes].reverse(),\n      duration: motionTokens.durationSlow,\n    },\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: WindowProvider Component\nDESCRIPTION: Defines a React functional component called `WindowProvider` that provides the window object to the component tree. It accepts `WindowProviderProps` as props and renders its children within the context of the provided window.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-window-provider/etc/react-window-provider.api.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const WindowProvider: React_2.FunctionComponent<WindowProviderProps>;\n```\n\n----------------------------------------\n\nTITLE: Mounting React Portals with Custom Nodes\nDESCRIPTION: This snippet demonstrates how to mount React portals to specific DOM nodes using the 'mountNode' property, enabling flexible DOM insertion while retaining access to themes and context.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-portal/library/docs/Spec.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst customElement = document.createElement('div');\n\n<App> // using FluentProvider of ThemeProvider but not PortalProvider\n  <Portal /> // attached to document.body\n  <Portal mountNode={customElement} /> // mounted on custom element\n</App>\n```\n\n----------------------------------------\n\nTITLE: Defining useActiveDescendant hook\nDESCRIPTION: This snippet declares the `useActiveDescendant` hook, which is used to manage the active descendant of a component.  It takes `ActiveDescendantOptions` as input and returns a `UseActiveDescendantReturn` object, allowing components to manage focus and keyboard navigation within a list of elements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-aria/library/etc/react-aria.api.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n// @public (undocumented)\nexport function useActiveDescendant<TActiveParentElement extends HTMLElement, TListboxElement extends HTMLElement>(options: ActiveDescendantOptions): UseActiveDescendantReturn<TActiveParentElement, TListboxElement>;\n```\n```\n\n----------------------------------------\n\nTITLE: Drawer Component Implementation in TypeScript\nDESCRIPTION: Implementation of the Drawer component with customization options for position, size, and type. Provides slide-in panel functionality with modal and non-modal variants.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_31\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"Drawer\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport class Drawer extends FASTElement {\n    ariaDescribedby?: string;\n    ariaLabelledby?: string;\n    // (undocumented)\n    clickHandler(event: Event): boolean;\n    dialog: HTMLDialogElement;\n    emitBeforeToggle: () => void;\n    emitToggle: () => void;\n    hide(): void;\n    position: DrawerPosition;\n    show(): void;\n    // (undocumented)\n    size: DrawerSize;\n    type: DrawerType;\n}\n\n// Warning: (ae-missing-release-tag) \"DrawerBody\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport class DrawerBody extends FASTElement {\n}\n\n// @public (undocumented)\nexport const DrawerBodyDefinition: FASTElementDefinition<typeof DrawerBody>;\n\n// @public\nexport const DrawerBodyStyles: ElementStyles;\n\n// Warning: (ae-missing-release-tag) \"template\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport const DrawerBodyTemplate: ElementViewTemplate<DrawerBody>;\n\n// @public (undocumented)\nexport const DrawerDefinition: FASTElementDefinition<typeof Drawer>;\n\n// Warning: (ae-missing-release-tag) \"DrawerPosition\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport const DrawerPosition: {\n    readonly start: \"start\";\n    readonly end: \"end\";\n};\n\n// @public\nexport type DrawerPosition = ValuesOf<typeof DrawerPosition>;\n\n// Warning: (ae-missing-release-tag) \"DrawerSize\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport const DrawerSize: {\n    readonly small: \"small\";\n    readonly medium: \"medium\";\n    readonly large: \"large\";\n    readonly full: \"full\";\n};\n\n// @public\nexport type DrawerSize = ValuesOf<typeof DrawerSize>;\n\n// @public\nexport const DrawerStyles: ElementStyles;\n\n// Warning: (ae-missing-release-tag) \"template\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport const DrawerTemplate: ElementViewTemplate<Drawer>;\n\n// Warning: (ae-missing-release-tag) \"DrawerType\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport const DrawerType: {\n    readonly nonModal: \"non-modal\";\n    readonly modal: \"modal\";\n    readonly inline: \"inline\";\n};\n\n// @public\nexport type DrawerType = ValuesOf<typeof DrawerType>;\n```\n\n----------------------------------------\n\nTITLE: Updating Event Type Definitions in TypeScript\nDESCRIPTION: This TypeScript snippet defines event types for component props using unions of specific event types such as KeyboardEvent and MouseEvent. It also highlights issues that occur when attempting to extend an event type by adding the generic Event type, leading to type incompatibility errors. This showcases the challenges faced when expanding event types in a strongly-typed environment like TypeScript.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/event-handlers-event-type.md#2025-04-20_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type OpenPopoverEvents = KeyboardEvent | MouseEvent;\ntype Props = {\n  onOpenChange: (e: OpenPopoverEvents) => void;\n};\nconst onOpenChange = (e: MouseEvent | KeyboardEvent) => {};\nconst props: Props = { onOpenChange }; // 💣 This breaks when we add Event to OpenPopoverEvents. The error: '(e: MouseEvent | KeyboardEvent) => void' is not assignable to type '(e: OpenPopoverEvents) => void'.\n```\n\n----------------------------------------\n\nTITLE: Usage Examples of Different Image Shapes - React (JavaScript)\nDESCRIPTION: The provided examples illustrate how to render the Image component in different shapes: bordered, block, rounded, and circular, showcasing versatility in presentation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-image/library/docs/Spec.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<Image bordered src=\"...\" />\n<Image block src=\"...\" />\n<Image shape=\"rounded\" src=\"...\" />\n<Image shape=\"circular\" src=\"...\" />\n```\n\n----------------------------------------\n\nTITLE: Groupper Interface Definitions\nDESCRIPTION: This snippet provides definitions for the Groupper interface, which includes methods for managing focus groups in the application, allowing control over focus movement between elements. This is essential for developing intuitive and user-friendly navigation within complex UI structures.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tabster/etc/react-tabster.api.md#2025-04-20_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\ninterface Groupper extends TabsterPart<GroupperProps>, TabsterPartWithFindNextTabbable, TabsterPartWithAcceptElement {\n    // (undocumented)\n    dispose(): void;\n    // (undocumented)\n    readonly dummyManager: DummyInputManager | undefined;\n    // (undocumented)\n    getFirst(orContainer: boolean): HTMLElement | undefined;\n    // (undocumented)\n    readonly id: string;\n    // (undocumented)\n    isActive(noIfFirstIsFocused?: boolean): boolean | undefined;\n    // (undocumented)\n    makeTabbable(isUnlimited: boolean): void;\n    // (undocumented)\n    setFirst(element: HTMLElement | undefined): void;\n}\n\n// @public (undocumented)\ninterface GroupperAPI extends GroupperAPIInternal, Disposable {\n    // @internal\n    moveFocus(element: HTMLElement, action: GroupperMoveFocusAction): HTMLElement | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Controlled SpinButton Component in React\nDESCRIPTION: Demonstrates the implementation of a controlled SpinButton component using React useState hook. This setup requires managing the SpinButton's current value in the component's state and updating it through an event handler. Dependencies include React and its hooks.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-spinbutton/library/docs/Spec.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype SpinButtonChangeData = {\n  value?: number;\n  displayValue?: string;\n};\n\nconst [value, setValue] = useState<number>(2);\nconst onControlledExampleChange = (_event, data: SpinButtonChangeData) => {\n  setValue(data.value);\n};\n\n<SpinButton value={value} onChange={onControlledExampleChange} />;\n```\n\n----------------------------------------\n\nTITLE: Icon Initialization Function in TypeScript\nDESCRIPTION: This snippet exports a public function that initializes icons with an optional base URL and options for further configuration. This function enables developers to set up the icon system efficiently, ensuring that the required icons are accessible throughout the application.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/font-icons-mdl2/etc/font-icons-mdl2.api.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport function initializeIcons(baseUrl?: string, options?: IIconOptions): void;\n```\n\n----------------------------------------\n\nTITLE: Defining ButtonType Enum in TypeScript\nDESCRIPTION: Defines an enum for different types of buttons such as command, compound, default, hero, icon, normal, and primary.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport enum ButtonType {\n    // (undocumented)\n    command = 4,\n    // (undocumented)\n    compound = 3,\n    // (undocumented)\n    default = 6,\n    // (undocumented)\n    hero = 2,\n    // (undocumented)\n    icon = 5,\n    // (undocumented)\n    normal = 0,\n    // (undocumented)\n    primary = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for DialogTitleProps in TypeScript\nDESCRIPTION: Defines the types associated with the DialogTitle component which holds the dialog's title and action button for closing it when non-modal.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/docs/Spec.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype DialogTitleSlots = {\n  root: Slot<'div', 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'>;\n  action?: Slot<'div'>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Menu Popover State in TypeScript\nDESCRIPTION: Defines the state for MenuPopover components, combining ComponentState and portal properties. It includes an inline boolean for rendering options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/library/etc/react-menu.api.md#2025-04-20_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type MenuPopoverState = ComponentState<MenuPopoverSlots> & Pick<PortalProps, 'mountNode'> & {\n    inline: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Spinner Component with Various Props in JavaScript\nDESCRIPTION: These examples demonstrate different ways to use the Spinner component, including setting labels, appearance, and size.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-spinner/library/README.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<Spinner label=\"Loading...\" />\n<Spinner label=\"Loading...\" appearance=\"inverted\" />\n<Spinner label=\"Loading...\" size=\"large\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Popover Component States - TypeScript\nDESCRIPTION: This snippet defines the PopoverState type, which encapsulates the stateful properties and functions needed to manage the behavior and context of the Popover component. It consists of essential items like trigger and content references, handling events, and determining visibility state. Dependencies include React utilities for state management.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-popover/library/etc/react-popover.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport type PopoverState = Pick<PopoverProps, 'appearance' | 'mountNode' | 'onOpenChange' | 'openOnContext' | 'openOnHover' | 'trapFocus' | 'withArrow' | 'inertTrapFocus'> & Required<Pick<PopoverProps, 'inline' | 'open'>> & Pick<PopoverProps, 'children'> & {\n    arrowRef: React_2.MutableRefObject<HTMLDivElement | null>;\n    contentRef: React_2.MutableRefObject<HTMLElement | null>;\n    contextTarget: PositioningVirtualElement | undefined;\n    popoverSurface: React_2.ReactElement | undefined;\n    popoverTrigger: React_2.ReactElement | undefined;\n    setContextTarget: SetVirtualMouseTarget;\n    setOpen: (e: OpenPopoverEvents, open: boolean) => void;\n    size: NonNullable<PopoverProps['size']>;\n    toggleOpen: (e: OpenPopoverEvents) => void;\n    triggerRef: React_2.MutableRefObject<HTMLElement | null>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Vertical Bar Chart Data Point Interface in TypeScript\nDESCRIPTION: The IVerticalBarChartDataPoint interface defines the structure for individual data points in a vertical bar chart, including properties for color, accessibility data, and coordinates.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/etc/react-charting.api.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface IVerticalBarChartDataPoint {\n    callOutAccessibilityData?: IAccessibilityProps;\n    color?: string;\n    gradient?: [string, string];\n    legend?: string;\n    lineData?: ILineDataInVerticalBarChart;\n    onClick?: VoidFunction;\n    x: number | string | Date;\n    xAxisCalloutData?: string;\n    y: number;\n    yAxisCalloutData?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for React Combobox Stories in JavaScript\nDESCRIPTION: This snippet shows how to configure a Storybook module.exports to include stories from the react-combobox package. It specifies the story file patterns to include both MDX and TypeScript/TSX files.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-combobox/stories/src/**/*.stories.mdx', '../packages/react-components/react-combobox/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Implementation of useSyncExternalStore in ListItem\nDESCRIPTION: This snippet demonstrates how ListItem components can utilize useSyncExternalStore to manage state and updates, ensuring a consistent active state for ListItem components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/context-selector-tearing.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst isActive = useSyncExternalStore(store.subscribe, store => store.isActive(value));\nconst onClick = () => store.setActiveItem(value);\n```\n\n----------------------------------------\n\nTITLE: Applying custom color to Text in FluentUI v9\nDESCRIPTION: Example showing how to apply a custom color to the Text component using makeStyles in v9.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-text/library/docs/MIGRATION.md#2025-04-20_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeStyles, Text } from '@fluentui/react-components';\n\nconst useStyles = makeStyles({\n  root: {\n    color: '__ put your color there __',\n  },\n});\n\nconst MyComponent = () => {\n  const styles = useStyles();\n\n  return <Text className={styles.root}>{/* ... */}</Text>;\n};\n```\n\n----------------------------------------\n\nTITLE: BreadcrumbItem DOM Structure in HTML\nDESCRIPTION: HTML structure of the BreadcrumbItem component, showing different variations for link and button types.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-breadcrumb/library/docs/Spec.md#2025-04-20_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<li>\n  {children}\n</li>\n```\n\nLANGUAGE: html\nCODE:\n```\n<li>\n  <a href=\"#\">\n    {children}\n  </a>\n</li>\n```\n\nLANGUAGE: html\nCODE:\n```\n<li>\n  <button>\n    {children}\n  </button>\n</li>\n```\n\n----------------------------------------\n\nTITLE: Contributing Guide in Markdown\nDESCRIPTION: Complete markdown documentation explaining the process and considerations for contributing new components to Fluent UI React, including checks for existing components, variant possibilities, sharing guidelines, and IP considerations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/new-components.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Contributing a new component to Fluent UI React\n\nOur components are a collection of small, independent, general-purpose UI components intended to be reused throughout an application.\n\n## Questions to ask before starting to build a new component\n\n### Does the component already exist?\n\nBefore making the decision to design a new component, check to see if the pattern already exists within any current Microsoft design system including our Figma toolkit. Please feel free to open Github issues to clarify doubts.\n\nIf you are a Microsoft employee please check the internal version of the Figma toolkit or if you have more in depth questions regarding any Microsoft design system, please visit our internal Microsoft [Teams channel](https://teams.microsoft.com/l/channel/19%3ab743ef5589594c2e8a28b720003cb2ea%40thread.skype/Design?groupId=ffe264f2-14d0-48b5-9384-64f808b81294&tenantId=72f988bf-86f1-41af-91ab-2d7cd011db47).\n\n### Is the proposed component a variant of an existing component?\n\nIf the new component pattern you are proposing already exists, but varies slightly, then please consider creating a variant of the component. For example, if you were to create a new button that does one new thing for our existing button then we would suggest creating a variant off the original button, but containing the one additional feature. The **Button** component is a good example of this. It has multiple variants like the **ActionButton**, **PrimaryButton**, **CommandBarButton** each of which is a very small component in itself. They all use the **BaseButton** for the core implementation but apply specific variations.\n\n### Should it be a shared component?​\n\nIf it's a new component request, does it add value at a broad level or is it a product-specific customization?​ Product-specific customizations should be stored in local product repos.\n\nThere are also certain components which should only be used in first-party Microsoft products and therefore are not appropriate to include in a public component library. A commonly requested example is the Microsoft 365 suite header/nav bar (containing the app switcher, settings, etc).\n\n### Does this pattern contain Microsoft Intellectual Property?\n\nIf the new component contains Microsoft Intellectual Property, it should be considered Internal and therefore all discussions around the component should **only** happen internally or within our [Fluent Design Teams channel](https://teams.microsoft.com/l/channel/19%3ab743ef5589594c2e8a28b720003cb2ea%40thread.skype/Design?groupId=ffe264f2-14d0-48b5-9384-64f808b81294&tenantId=72f988bf-86f1-41af-91ab-2d7cd011db47). If the component does not contain Microsoft Intellectual Property then this component can be discussed directly on GitHub in our [issues section](https://github.com/microsoft/fluentui/issues).\n\n### Get started 🎉\n\nFollow the component [implementation guide](component-implementation-guide.md) for the technical path forward for creating a new component.\n```\n\n----------------------------------------\n\nTITLE: Defining useRefEffect Hook in Typescript\nDESCRIPTION: Defines a React hook, `useRefEffect`, that creates a ref and executes a callback function whenever the ref's value changes to a non-null value. The callback can optionally return a cleanup function that will be called before the value changes or when the ref is unmounted.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-hooks/README.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useRefEffect<T>(callback: (value: T) => (() => void) | void, initial: T | null = null): RefCallback<T>;\n\ntype RefCallback<T> = ((value: T | null) => void) & React.RefObject<T>;\n```\n\n----------------------------------------\n\nTITLE: TypeScript API Definitions for FluentUI React Label Component\nDESCRIPTION: Defines the complete API surface for the Label component including props interface, state type, rendering functions and style hooks. Includes type definitions for component slots, class names, and core functionality.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-label/library/etc/react-label.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ComponentProps } from '@fluentui/react-utilities';\nimport type { ComponentState } from '@fluentui/react-utilities';\nimport type { ForwardRefComponent } from '@fluentui/react-utilities';\nimport * as React_2 from 'react';\nimport type { Slot } from '@fluentui/react-utilities';\nimport type { SlotClassNames } from '@fluentui/react-utilities';\n\n// @public\nexport const Label: ForwardRefComponent<LabelProps>;\n\n// @public (undocumented)\nexport const labelClassNames: SlotClassNames<LabelSlots>;\n\n// @public\nexport type LabelProps = Omit<ComponentProps<LabelSlots>, 'required'> & {\n  disabled?: boolean;\n  required?: boolean | Slot<'span'>;\n  size?: 'small' | 'medium' | 'large';\n  weight?: 'regular' | 'semibold';\n};\n\n// @public (undocumented)\nexport type LabelSlots = {\n  root: Slot<'label'>;\n  required?: Slot<'span'>;\n};\n\n// @public\nexport type LabelState = ComponentState<LabelSlots> & Required<Pick<LabelProps, 'disabled' | 'size' | 'weight'>>;\n\n// @public\nexport const renderLabel_unstable: (state: LabelState) => JSX.Element;\n\n// @public\nexport const useLabel_unstable: (props: LabelProps, ref: React_2.Ref<HTMLElement>) => LabelState;\n\n// @public\nexport const useLabelStyles_unstable: (state: LabelState) => LabelState;\n```\n\n----------------------------------------\n\nTITLE: Defining ZIndexTokens Interface in TypeScript\nDESCRIPTION: Type definition for z-index token values used in FluentUI. Specifies optional z-index values for different UI layers like background, content, overlay, and popups.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/tokens/etc/tokens.api.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ZIndexTokens = {\n    zIndexBackground?: string;\n    zIndexContent?: string;\n    zIndexOverlay?: string;\n    zIndexPopup?: string;\n    zIndexMessages?: string;\n    zIndexFloating?: string;\n    zIndexPriority?: string;\n    zIndexDebug?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Child Window Rendering in FluentUI React\nDESCRIPTION: Demonstrates how to set up rendering for child windows and iframes by configuring makeStyles() renderer and providing correct document context through RendererProvider and FluentProvider.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/AdvancedConfiguration.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createDOMRenderer, FluentProvider, RendererProvider } from '@fluentui/react-components';\nimport * as React from 'react';\n\nfunction MyComponent(props) {\n  const { children, targetDocument } = props;\n  const renderer = React.useMemo(() => createDOMRenderer(targetDocument), [targetDocument]);\n\n  return (\n    <RendererProvider renderer={renderer} targetDocument={targetDocument}>\n      <FluentProvider targetDocument={targetDocument}>{children}</FluentProvider>\n    </RendererProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Growth Animation Component in TypeScript with FluentUI\nDESCRIPTION: Creates a motion component that implements an infinite growth animation based on the element's scroll height. The animation transitions through opacity and maxHeight changes using the element's actual dimensions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-motion/stories/src/CreateMotionComponent/CreateMotionComponentFunctions.stories.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst Grow = createMotionComponent(({ element }) => ({\n  duration: 300,\n  keyframes: [\n    { opacity: 0, maxHeight: `${element.scrollHeight / 2}px` },\n    { opacity: 1, maxHeight: `${element.scrollHeight}px` },\n    { opacity: 0, maxHeight: `${element.scrollHeight / 2}px` },\n  ],\n  iterations: Infinity,\n}));\n```\n\n----------------------------------------\n\nTITLE: Defining Styles for Checkbox Slot using makeStyles in FluentUI TypeScript\nDESCRIPTION: This snippet demonstrates the use of the makeStyles utility to create a style rule that changes the Checkbox 'indicator' slot's background color when hovered over the 'root'. It requires the FluentUI token system for color variables.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/static-classes-on-slots.md#2025-04-20_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst useStyles = makeStyles({\n  root: {\n    ':hover': {\n      '& .fui-Checkbox__indicator': {\n        backgroundColor: tokens.colorCompoundBrandBackgroundHover,\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing useOnClickOutside Hook in TypeScript\nDESCRIPTION: An internal hook that executes a callback when a click occurs outside specified element references.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-utilities/etc/react-utilities.api.md#2025-04-20_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @internal\nexport const useOnClickOutside: (options: UseOnClickOrScrollOutsideOptions) => void;\n```\n\n----------------------------------------\n\nTITLE: Using PortalCompatProvider for Component Styling\nDESCRIPTION: This example shows how to incorporate PortalCompatProvider within FluentProvider to enable compatibility for v8 components using React Portals inside a v9 application. It resolves styling issues when v8 components like Callout and Panel do not apply styles correctly in v9.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Troubleshooting.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FluentProvider } from '@fluentui/react-components';\nimport { PortalCompatProvider } from '@fluentui/react-portal-compat';\n\nfunction App() {\n  return (\n    <FluentProvider>\n      <PortalCompatProvider>{/* your components */}</PortalCompatProvider>\n    </FluentProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definitions for FluentUI React Menu Components\nDESCRIPTION: This code defines the TypeScript interfaces, types, and component exports for the @fluentui/react-menu package. It includes imports from related packages like react-utilities, react-positioning, and react-context-selector, and defines the public API for the menu component system including context providers, events, and component props.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/library/etc/react-menu.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"react\" />\n\nimport { ARIAButtonElement } from '@fluentui/react-aria';\nimport { ARIAButtonResultProps } from '@fluentui/react-aria';\nimport { ARIAButtonType } from '@fluentui/react-aria';\nimport type { ComponentProps } from '@fluentui/react-utilities';\nimport type { ComponentState } from '@fluentui/react-utilities';\nimport type { ContextSelector } from '@fluentui/react-context-selector';\nimport type { ForwardRefComponent } from '@fluentui/react-utilities';\nimport type { PortalProps } from '@fluentui/react-portal';\nimport type { PositioningShorthand } from '@fluentui/react-positioning';\nimport { PositioningVirtualElement } from '@fluentui/react-positioning';\nimport * as React_2 from 'react';\nimport { SetVirtualMouseTarget } from '@fluentui/react-positioning';\nimport type { Slot } from '@fluentui/react-utilities';\nimport { SlotClassNames } from '@fluentui/react-utilities';\nimport type { TriggerProps } from '@fluentui/react-utilities';\nimport type { UseOnClickOrScrollOutsideOptions } from '@fluentui/react-utilities';\n\n// @public\nexport const dispatchMenuEnterEvent: (el: HTMLElement, nativeEvent: MouseEvent) => void;\n\n// @public\nexport const Menu: React_2.FC<MenuProps>;\n\n// @public\nexport const MENU_ENTER_EVENT = \"fuimenuenter\";\n\n// @public (undocumented)\nexport type MenuCheckedValueChangeData = {\n    checkedItems: string[];\n    name: string;\n};\n\n// @public (undocumented)\nexport type MenuCheckedValueChangeEvent = React_2.MouseEvent | React_2.KeyboardEvent;\n\n// @public\nexport type MenuContextValue = Pick<MenuState, 'openOnHover' | 'openOnContext' | 'triggerRef' | 'menuPopoverRef' | 'setOpen' | 'isSubmenu' | 'mountNode' | 'triggerId' | 'hasIcons' | 'hasCheckmarks' | 'persistOnItemClick' | 'inline' | 'checkedValues' | 'onCheckedValueChange'> & {\n    open: boolean;\n    triggerId: string;\n    defaultCheckedValues?: Record<string, string[]>;\n};\n\n// @public (undocumented)\nexport type MenuContextValues = {\n    menu: MenuContextValue;\n};\n\n// @public\nexport const MenuDivider: ForwardRefComponent<MenuDividerProps>;\n\n// @public (undocumented)\nexport const menuDividerClassNames: SlotClassNames<MenuDividerSlots>;\n\n// @public (undocumented)\nexport type MenuDividerProps = ComponentProps<MenuDividerSlots>;\n\n// @public (undocumented)\nexport type MenuDividerSlots = {\n    root: Slot<'div'>;\n};\n\n// @public (undocumented)\nexport type MenuDividerState = ComponentState<MenuDividerSlots>;\n\n// @public\nexport const MenuGroup: ForwardRefComponent<MenuGroupProps>;\n\n// @public (undocumented)\nexport const menuGroupClassNames: SlotClassNames<MenuGroupSlots>;\n\n// @public (undocumented)\nexport const MenuGroupContextProvider: React_2.Provider<MenuGroupContextValue>;\n\n// @public\nexport type MenuGroupContextValue = {\n    headerId: string;\n};\n\n// @public (undocumented)\nexport type MenuGroupContextValues = {\n    menuGroup: MenuGroupContextValue;\n};\n\n// @public\nexport const MenuGroupHeader: ForwardRefComponent<MenuGroupHeaderProps>;\n\n// @public (undocumented)\nexport const menuGroupHeaderClassNames: SlotClassNames<MenuGroupHeaderSlots>;\n\n// @public (undocumented)\nexport type MenuGroupHeaderProps = ComponentProps<MenuGroupHeaderSlots>;\n\n// @public (undocumented)\nexport type MenuGroupHeaderSlots = {\n    root: Slot<'div'>;\n};\n\n// @public (undocumented)\nexport type MenuGroupHeaderState = ComponentState<MenuGroupHeaderSlots>;\n\n// @public (undocumented)\nexport type MenuGroupProps = ComponentProps<MenuGroupSlots>;\n\n// @public (undocumented)\nexport type MenuGroupSlots = {\n    root: Slot<'div'>;\n};\n\n// @public (undocumented)\nexport type MenuGroupState = ComponentState<MenuGroupSlots> & {\n    headerId: string;\n};\n\n// @public\nexport const MenuItem: ForwardRefComponent<MenuItemProps>;\n\n// @public\nexport const MenuItemCheckbox: ForwardRefComponent<MenuItemCheckboxProps>;\n\n// @public (undocumented)\nexport const menuItemCheckboxClassNames: SlotClassNames<Omit<MenuItemSlots, 'submenuIndicator'>>;\n\n// @public (undocumented)\nexport type MenuItemCheckboxProps = MenuItemProps & MenuItemSelectableProps;\n\n// @public (undocumented)\nexport type MenuItemCheckboxState = MenuItemState & MenuItemSelectableState;\n\n// @public (undocumented)\nexport const menuItemClassNames: SlotClassNames<MenuItemSlots>;\n\n// @public\nexport const MenuItemLink: ForwardRefComponent<MenuItemLinkProps>;\n\n// @public (undocumented)\nexport const menuItemLinkClassNames: SlotClassNames<MenuItemLinkSlots>;\n\n// @public\nexport type MenuItemLinkProps = ComponentProps<MenuItemLinkSlots> & Pick<MenuItemProps, 'disabled'> & {\n    href: string;\n};\n\n// @public (undocumented)\nexport type MenuItemLinkSlots = {\n    root: Slot<'a'>;\n} & Pick<MenuItemSlots, 'icon' | 'content' | 'secondaryContent' | 'checkmark'>;\n\n// @public\nexport type MenuItemLinkState = ComponentState<MenuItemLinkSlots>;\n\n// @public (undocumented)\nexport type MenuItemProps = Omit<ComponentProps<Partial<MenuItemSlots>>, 'content'> & Pick<Partial<MenuItemSlots>, 'content'> & {\n    hasSubmenu?: boolean;\n    persistOnClick?: boolean;\n    disabled?: boolean;\n    disabledFocusable?: boolean;\n};\n\n// @public\nexport const MenuItemRadio: ForwardRefComponent<MenuItemRadioProps>;\n\n// @public (undocumented)\nexport const menuItemRadioClassNames: SlotClassNames<Omit<MenuItemSlots, 'submenuIndicator'>>;\n\n// @public (undocumented)\nexport type MenuItemRadioProps = MenuItemProps & MenuItemSelectableProps;\n\n// @public (undocumented)\nexport type MenuItemRadioState = MenuItemState & MenuItemSelectableState;\n\n// @public\nexport type MenuItemSelectableProps = {\n    name: string;\n    value: string;\n};\n\n// @public\nexport type MenuItemSelectableState = MenuItemSelectableProps & {\n    checked: boolean;\n};\n\n// @public (undocumented)\nexport type MenuItemSlots = {\n    root: Slot<'div'>;\n    icon?: Slot<'span'>;\n    checkmark?: Slot<'span'>;\n    submenuIndicator?: Slot<'span'>;\n    content?: Slot<'span'>;\n    secondaryContent?: Slot<'span'>;\n    subText?: Slot<'span'>;\n};\n\n// @public (undocumented)\nexport type MenuItemState = ComponentState<MenuItemSlots> & Required<Pick<MenuItemProps, 'disabled' | 'hasSubmenu' | 'persistOnClick'>>;\n\n// @public (undocumented)\nexport const MenuItemSwitch: ForwardRefComponent<MenuItemSwitchProps>;\n\n// @public (undocumented)\nexport const menuItemSwitchClassNames: SlotClassNames<MenuItemSwitchSlots>;\n\n// @public\nexport type MenuItemSwitchProps = ComponentProps<MenuItemSwitchSlots> & Pick<MenuItemCheckboxProps, 'disabled' | 'persistOnClick' | 'name' | 'value'>;\n\n// @public (undocumented)\nexport type MenuItemSwitchSlots = Pick<MenuItemSlots, 'root' | 'content' | 'secondaryContent' | 'icon' | 'subText'> & {\n    switchIndicator?: Slot<'span'>;\n};\n\n// @public\nexport type MenuItemSwitchState = ComponentState<MenuItemSwitchSlots> & MenuItemSelectableState & Required<Pick<MenuItemSwitchProps, 'disabled'>>;\n\n// @public\nexport const MenuList: ForwardRefComponent<MenuListProps>;\n\n// @public (undocumented)\nexport const menuListClassNames: SlotClassNames<MenuListSlots>;\n\n// @public\nexport type MenuListContextValue = Pick<MenuListProps, 'checkedValues' | 'hasIcons' | 'hasCheckmarks'> & {\n    setFocusByFirstCharacter?: (e: React_2.KeyboardEvent<HTMLElement>, itemEl: HTMLElement) => void;\n    toggleCheckbox?: SelectableHandler;\n    selectRadio?: SelectableHandler;\n    onCheckedValueChange?: (e: MenuCheckedValueChangeEvent, data: MenuCheckedValueChangeData) => void;\n};\n\n// @public (undocumented)\nexport type MenuListContextValues = {\n    menuList: MenuListContextValue;\n};\n\n// @public (undocumented)\nexport type MenuListProps = ComponentProps<MenuListSlots> & {\n    checkedValues?: Record<string, string[]>;\n    defaultCheckedValues?: Record<string, string[]>;\n    hasCheckmarks?: boolean;\n    hasIcons?: boolean;\n    onCheckedValueChange?: (e: MenuCheckedValueChangeEvent, data: MenuCheckedValueChangeData) => void;\n};\n\n// @public (undocumented)\nexport const MenuListProvider: React_2.Provider<MenuListContextValue> & React_2.FC<React_2.ProviderProps<MenuListContextValue>>;\n\n// @public (undocumented)\nexport type MenuListSlots = {\n    root: Slot<'div'>;\n};\n\n// @public (undocumented)\nexport type MenuListState = ComponentState<MenuListSlots> & Required<Pick<MenuListProps, 'checkedValues' | 'hasCheckmarks' | 'hasIcons'>> & Pick<MenuListProps, 'defaultCheckedValues' | 'onCheckedValueChange'> & {\n    selectRadio: SelectableHandler;\n    setFocusByFirstCharacter: NonNullable<MenuListContextValue['setFocusByFirstCharacter']>;\n    toggleCheckbox: SelectableHandler;\n    hasMenuContext?: boolean;\n};\n\n// @public\nexport type MenuOpenChangeData = {\n    bubble?: boolean;\n    keyboard?: boolean;\n    open: boolean;\n} & ({\n    type: 'menuTriggerContextMenu';\n    event: React_2.MouseEvent<HTMLElement>;\n} | {\n    type: 'menuTriggerClick';\n    event: React_2.MouseEvent<HTMLElement>;\n} | {\n    type: 'menuTriggerMouseEnter';\n    event: React_2.MouseEvent<HTMLElement>;\n} | {\n    type: 'menuTriggerMouseLeave';\n    event: React_2.MouseEvent<HTMLElement>;\n} | {\n    type: 'menuTriggerMouseMove';\n    event: React_2.MouseEvent<HTMLElement>;\n} | {\n    type: 'menuTriggerKeyDown';\n    event: React_2.KeyboardEvent<HTMLElement>;\n} | {\n    type: 'menuItemClick';\n    event: React_2.MouseEvent<HTMLElement>;\n} | {\n    type: 'menuPopoverMouseEnter';\n    event: React_2.MouseEvent<HTMLElement>;\n} | {\n    type: 'menuPopoverKeyDown';\n    event: React_2.KeyboardEvent<HTMLElement>;\n} | {\n    type: 'clickOutside';\n    event: MouseEvent | TouchEvent;\n} | {\n    type: 'scrollOutside';\n    event: MouseEvent | TouchEvent;\n} | {\n    type: 'menuMouseEnter';\n    event: MouseEvent | TouchEvent;\n});\n\n// @public\nexport type MenuOpenEvent = MenuOpenChangeData['event'];\n\n// @public @deprecated (undocumented)\nexport type MenuOpenEvents = MenuOpenEvent;\n\n// @public\nexport const MenuPopover: ForwardRefComponent<MenuPopoverProps>;\n\n// @public (undocumented)\n```\n\n----------------------------------------\n\nTITLE: Creating Different Button Styles in FluentUI Swift\nDESCRIPTION: Demonstrates the three available button styles in FluentUI: primaryFilled (default), primaryOutline, and borderless. Each button is initialized with a text title.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/ButtonPage/docs/mac/ButtonUsage.md#2025-04-20_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n// There are 3 styles to choose from, the default being primary filled\nlet primaryFilledButton = Button(title: \"FluentUI Button\", style: .primaryFilled),\nlet primaryOutlineButton = Button(title: \"FluentUI Button\", style: .primaryOutline),\nlet borderlessButton = Button(title: \"FluentUI Button\", style: .borderless)\n```\n\n----------------------------------------\n\nTITLE: Using Context Selectors in React for Optimized Rendering\nDESCRIPTION: Demonstrates the difference in rendering behavior of components when using context selectors versus plain context usage, improving efficiency by limiting unnecessary re-renders.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-utilities/src/compose/README.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// ❌ Will produce a re-renders always when a context value changes for *every* item\nconst open = React.useContext(ListContext).activeId === props.id;\n// ✅ Will produce a re-render only when a result of selector changes for this item\nconst open = useContextSelector(ListContext, context => context.activeId === props.id);\n```\n\n----------------------------------------\n\nTITLE: Hash-Based Class Names Generation\nDESCRIPTION: Describes the method to generate deterministic class names using a hash function based on CSS properties and their values, ensuring consistent styling during server-side rendering without hydration issues.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/makeStyles.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Button.tsx\nconst useButtonStyles = makeStyles({\n  root: { cursor: 'pointer' },\n  primary: tokens => ({ backgroundColor: tokens.colors.primary.background }),\n  disabled: { backgroundColor: 'gray' },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing DrawerBody Structure in HTML\nDESCRIPTION: This code snippet demonstrates the basic usage of the DrawerBody component within a fluent-drawer. It showcases how to define slots for the title, close button, main content, and footer.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/drawer-body/README.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<fluent-drawer>\n  <fluent-drawer-body>\n    <div slot=\"title\">Drawer Title</div>\n    <button slot=\"close\">Close</button>\n    <div>Content goes here...</div>\n    <div slot=\"footer\">Footer content</div>\n  </fluent-drawer-body>\n</fluent-drawer>\n```\n\n----------------------------------------\n\nTITLE: BaseButton Component Definition in TypeScript\nDESCRIPTION: Defines the BaseButton component that serves as the foundation for button controls in FluentUI. Implements the IButton interface with support for focus management, menu interactions, and rendering customization.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport class BaseButton extends React_2.Component<IBaseButtonProps, IBaseButtonState> implements IButton {\n    constructor(props: IBaseButtonProps);\n    // (undocumented)\n    componentDidMount(): void;\n    // (undocumented)\n    componentDidUpdate(prevProps: IBaseButtonProps, prevState: IBaseButtonState): void;\n    // (undocumented)\n    componentWillUnmount(): void;\n    // (undocumented)\n    context: IFocusRectsContext;\n    // (undocumented)\n    static contextType: React_2.Context<IFocusRectsContext | undefined>;\n    // (undocumented)\n    static defaultProps: Partial<IBaseButtonProps>;\n    // (undocumented)\n    dismissMenu(): void;\n    // (undocumented)\n    focus(): void;\n    // (undocumented)\n    openMenu(shouldFocusOnContainer?: boolean, shouldFocusOnMount?: boolean): void;\n    // (undocumented)\n    render(): JSX.Element;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Semantic Colors from DataVizPalette in FluentUI Charts\nDESCRIPTION: Illustrates how to use semantic colors from DataVizPalette, which represent specific statuses like success, error, warning, and info. These colors maintain consistent meaning across all contexts.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/docs/colors.md#2025-04-20_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { DataVizPalette, IChartProps, ILineChartPoints, LineChart } from '@fluentui/react-charting';\n\nconst dataSeries: ILineChartPoints[] = [\n  {\n    legend: 'Line 1',\n    data: [\n      { x: 20, y: 50 },\n      { x: 40, y: 80 },\n    ],\n    color: DataVizPalette.info, // .success, .warning, .error, .disabled, .highSuccess, .highError\n  },\n];\nconst chartData: IChartProps = {\n  chartTitle: 'Line chart',\n  lineChartData: dataSeries,\n};\n\nconst App = () => {\n  return <LineChart data={chartData} />;\n};\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Combobox with Persona Layout\nDESCRIPTION: This code demonstrates how to use the Combobox with a Persona layout for each option. The `text` attribute provides text for screen readers. This uses the `Persona` component from Fluent UI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/library/docs/Spec.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n<label id=\"people\">Send to:</label>\n<Combobox aria-labelledby=\"people\">\n  <Option text=\"Katri Athokas\">\n    <Persona\n      avatar={{ color: 'colorful' }}\n      name=\"Katri Athokas\"\n      presence={{\n        status: 'available',\n      }}\n      secondaryText=\"Available\"\n    />\n  </Option>\n  <Option text=\"Elvia Atkins\">\n    <Persona\n      avatar={{ color: 'colorful' }}\n      name=\"Elvia Atkins\"\n      presence={{\n        status: 'busy',\n      }}\n      secondaryText=\"Busy\"\n    />\n  </Option>\n</Combobox>\n```\n\n----------------------------------------\n\nTITLE: TypeScript API Declarations for FluentUI Migration\nDESCRIPTION: Comprehensive type definitions and component declarations for migrating between FluentUI v8 and v9. Includes shim components, color definitions, theme utilities, and type interfaces.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-migration-v8-v9/library/etc/react-migration-v8-v9.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"react\" />\n\nimport { BrandVariants } from '@fluentui/react-components';\nimport type { ButtonProps } from '@fluentui/react-components';\nimport type { IBaseButtonProps } from '@fluentui/react';\nimport type { IButtonProps } from '@fluentui/react';\nimport { ICheckboxProps } from '@fluentui/react';\nimport type { IContextualMenuItem } from '@fluentui/react';\nimport type { IContextualMenuProps } from '@fluentui/react';\nimport type { IPalette } from '@fluentui/react';\nimport type { IStackItemProps } from '@fluentui/react';\nimport type { IStackProps } from '@fluentui/react';\nimport type { MenuProps } from '@fluentui/react-components';\nimport * as React_2 from 'react';\nimport { Theme } from '@fluentui/react-components';\nimport { Theme as Theme_2 } from '@fluentui/react';\n\n// @public\nconst ActionButtonShim: React_2.ForwardRefExoticComponent<IButtonProps & React_2.RefAttributes<HTMLButtonElement>>;\nexport { ActionButtonShim }\nexport { ActionButtonShim as CommandButtonShim }\n\n// @public (undocumented)\nexport type AlphaColors = 5 | 10 | 20 | 30 | 40 | 50 | 60 | 70 | 80 | 90;\n\n// @public (undocumented)\nexport const black = \"#000000\";\n\n// @public (undocumented)\nexport const blackAlpha: Record<AlphaColors, string>;\n\n// @public (undocumented)\nexport const brandWeb: BrandVariants;\n\n// @public (undocumented)\nexport const ButtonShim: React_2.ForwardRefExoticComponent<IBaseButtonProps & React_2.RefAttributes<HTMLButtonElement>>;\n\n// @public (undocumented)\nexport const CheckboxShim: React_2.ForwardRefExoticComponent<Pick<ICheckboxProps, \"label\" | \"title\" | \"className\" | \"key\" | \"disabled\" | \"name\" | \"defaultChecked\" | \"id\" | \"onChange\" | \"componentRef\" | \"styles\" | \"theme\" | \"checked\" | \"ariaLabel\" | \"required\" | \"ariaDescribedBy\" | \"ariaLabelledBy\" | \"ariaPositionInSet\" | \"ariaSetSize\" | \"boxSide\" | \"checkmarkIconProps\" | \"defaultIndeterminate\" | \"indeterminate\" | \"inputProps\" | \"onRenderLabel\"> & React_2.RefAttributes<HTMLInputElement>>;\n\n// @public\nexport type ColorVariants = {\n    shade50: string;\n    shade40: string;\n    shade30: string;\n    shade20: string;\n    shade10: string;\n    primary: string;\n    tint10: string;\n    tint20: string;\n    tint30: string;\n    tint40: string;\n    tint50: string;\n    tint60: string;\n};\n\n// @public\nexport const CompoundButtonShim: React_2.ForwardRefExoticComponent<IButtonProps & React_2.RefAttributes<HTMLButtonElement>>;\n\n// @public\nexport const createBrandVariants: (palette: IPalette, interpolation?: Interpolation) => BrandVariants;\n\n// @public\nexport const createV8Theme: (brandColors: BrandVariants, themeV9: Theme, isDarkTheme?: boolean, themeV8?: Theme_2) => Theme_2;\n\n// @public\nexport const createV9Theme: (themeV8: Theme_2, baseThemeV9?: Theme) => Theme;\n\n// @public\nexport const DefaultButtonShim: React_2.ForwardRefExoticComponent<IButtonProps & React_2.RefAttributes<HTMLButtonElement>>;\n\n// @public\nexport type GlobalSharedColors = {\n    darkRed: ColorVariants;\n    burgundy: ColorVariants;\n    cranberry: ColorVariants;\n    red: ColorVariants;\n    darkOrange: ColorVariants;\n    bronze: ColorVariants;\n    pumpkin: ColorVariants;\n    orange: ColorVariants;\n    peach: ColorVariants;\n    marigold: ColorVariants;\n    yellow: ColorVariants;\n    gold: ColorVariants;\n    brass: ColorVariants;\n    brown: ColorVariants;\n    darkBrown: ColorVariants;\n    lime: ColorVariants;\n    forest: ColorVariants;\n    seafoam: ColorVariants;\n    lightGreen: ColorVariants;\n    green: ColorVariants;\n    darkGreen: ColorVariants;\n    lightTeal: ColorVariants;\n    teal: ColorVariants;\n    darkTeal: ColorVariants;\n    cyan: ColorVariants;\n    steel: ColorVariants;\n    lightBlue: ColorVariants;\n    blue: ColorVariants;\n    royalBlue: ColorVariants;\n    darkBlue: ColorVariants;\n    cornflower: ColorVariants;\n    navy: ColorVariants;\n    lavender: ColorVariants;\n    purple: ColorVariants;\n    darkPurple: ColorVariants;\n    orchid: ColorVariants;\n    grape: ColorVariants;\n    berry: ColorVariants;\n    lilac: ColorVariants;\n    pink: ColorVariants;\n    hotPink: ColorVariants;\n    magenta: ColorVariants;\n    plum: ColorVariants;\n    beige: ColorVariants;\n    mink: ColorVariants;\n    silver: ColorVariants;\n    platinum: ColorVariants;\n    anchor: ColorVariants;\n    charcoal: ColorVariants;\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Nested Popups in Fluent UI v9\nDESCRIPTION: Demonstrates how to handle nested popups when migrating to v9, specifically preventing the Escape key from bubbling up to the outer popup. This is necessary when migrating inner popups first.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Popup.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<PopoverSurface\n  onKeyDown={e => {\n    if (e.key === 'Escape') {\n      e.stopPropagation();\n    }\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Radio and RadioGroup Type Definitions\nDESCRIPTION: This snippet includes TypeScript type definitions for the Radio and RadioGroup components, specifying their props and state management structures. It allows for more tailored and accurate type-checking within TypeScript projects using Fluent UI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-radio/library/etc/react-radio.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport type RadioGroupOnChangeData = {\n    value: string;\n};\n\n// @public (undocumented)\nexport type RadioGroupProps = Omit<ComponentProps<Partial<RadioGroupSlots>>, 'onChange'> & {\n    name?: string;\n    value?: string;\n    defaultValue?: string;\n    onChange?: (ev: React_2.FormEvent<HTMLDivElement>, data: RadioGroupOnChangeData) => void;\n    layout?: 'vertical' | 'horizontal' | 'horizontal-stacked';\n    disabled?: boolean;\n    required?: boolean;\n};\n\n// @public\nexport type RadioProps = Omit<ComponentProps<Partial<RadioSlots>, 'input'>, 'onChange' | 'size'> & {\n    value?: string;\n    labelPosition?: 'after' | 'below';\n    disabled?: boolean;\n    onChange?: (ev: React_2.ChangeEvent<HTMLInputElement>, data: RadioOnChangeData) => void;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Motion Component with createMotionComponent() in FluentUI\nDESCRIPTION: The createMotionComponent() is a factory function that generates a custom motion component. It utilizes the Web Animations API to power the animations. This function is part of the FluentUI library and allows for the creation of reusable, animated UI components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-motion/stories/src/CreateMotionComponent/CreateMotionComponentDescription.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ncreateMotionComponent()\n```\n\n----------------------------------------\n\nTITLE: Using CheckboxShim for v8 to v9 Migration\nDESCRIPTION: Demonstrates the use of CheckboxShim from @fluentui/react-migration-v8-v9 package, which allows using v8 props while rendering a v9 Checkbox during migration.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Checkbox.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { CheckboxShim as Checkbox } from '@fluentui/react-migration-v8-v9';\n\nconst CheckboxShimBasicExample = () => {\n  return (\n    <>\n      <Checkbox checked label=\"Checked\" />\n      <Checkbox disabled label=\"Disabled\" />\n      <Checkbox indeterminate={true} label=\"Indeterminate\" />\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Tag with different appearance\nDESCRIPTION: This snippet showcases how to modify the appearance of a `<Tag>` component. By setting the `appearance` prop to 'outlined', the tag is rendered with an outlined style.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tags/library/README.md#2025-04-20_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Tag appearance='outlined'>Content</Tag>\n```\n\n----------------------------------------\n\nTITLE: Menu Items with Icons Expected DOM Output - HTML\nDESCRIPTION: This snippet shows the expected HTML output for the menu items that include icons, ensuring that structure and roles are maintained for accessibility.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/library/docs/Spec.md#2025-04-20_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<button aria-haspopup=\"menu\" aria-expanded=\"true\" id=\"trigger\">Open menu</button>\n<div role=\"menu\" aria-labelledby=\"trigger\">\n  <div role=\"menuitem\" tabindex=\"0\">\n    <span role=\"presentation\"><svg>FileIcon</svg></span>\n    Option 1\n  </div>\n  <div role=\"menuitem\" tabindex=\"0\">\n    <span role=\"presentation\"><svg>BellIcon</svg></span>\n    Option 2\n  </div>\n  <div role=\"menuitem\" tabindex=\"0\">\n    <span role=\"presentation\"><svg>LinkIcon</svg></span>\n    Option 3\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using useTheme Hook\nDESCRIPTION: This snippet shows how to access the current theme using the useTheme hook and apply it in a functional component for styling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/src/utilities/ThemeProvider/README.md#2025-04-20_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\nimport { useTheme } from '@fluentui/react';\n\nconst Content = () => {\n  const theme = useTheme();\n  ...\n};\n\nexport const App = () => (\n  <ThemeProvider>\n    <Content />\n  </ThemeProvider>\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Brand Theme\nDESCRIPTION: Shows how to create a custom theme using the createWebLightTheme function and a custom brand color ramp. The BrandVariants object defines different shades of the brand color from lightest to darkest.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-theme/library/README.md#2025-04-20_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createWebLightTheme } from '@fluentui/react-components';\n\nconst customBrandRamp: BrandVariants = {\n  10: `#2b2b40`,\n  // ...\n  160: `#e8ebfa`,\n};\n\nconst customTheme = createWebLightTheme(customBrandRamp);\n```\n\n----------------------------------------\n\nTITLE: Using Textarea Component with Different Props in React\nDESCRIPTION: This example demonstrates two ways to use the Textarea component: one with a placeholder and another with a default value. These examples showcase basic usage of the component's props.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-textarea/library/README.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<Textarea placeholder=\"Enter text here...\" />\n<Textarea defaultValue=\"Lorem ipsum dolor\" />\n```\n\n----------------------------------------\n\nTITLE: Avatar Circular Shape with Fluent UI Image Component\nDESCRIPTION: Highlights the change from the avatar property to using shape=\"circular\" to maintain avatar style in the Fluent UI v9 Image component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-image/library/docs/MIGRATION.md#2025-04-20_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Image src=\"example.jpg\" shape=\"circular\" />\n```\n\n----------------------------------------\n\nTITLE: Safe Component Creation with react-test-renderer\nDESCRIPTION: Utility function to create and safely unmount React components during testing using react-test-renderer. Ensures proper cleanup after test assertions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/test-utilities/README.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nsafeCreate(<Foo />, foo => {\n  // assert things about foo\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Menu Implementation - TSX\nDESCRIPTION: This snippet showcases a basic implementation of a menu using React, demonstrating the structure of the Menu, MenuTrigger, and MenuList components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/library/docs/Spec.md#2025-04-20_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nconst menu = (\n  <Menu>\n    <MenuTrigger><button>Opem menu</button></MenuTrigger>\n    <MenuList>\n      <MenuItem>Option 1</MenuItem>\n      <MenuItem>Option 2</MenuItem>\n      <MenuItem>Option 3</MenuItem>\n    </MenuList>\n  <Menu>\n)\n```\n\n----------------------------------------\n\nTITLE: Table without Semantic Elements in React/TypeScript\nDESCRIPTION: Demonstrates two approaches to rendering a table without native semantic HTML elements using FluentUI's Table components with custom rendering options\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-table/library/docs/Spec.md#2025-04-20_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<Table noNativeElements>\\n  <TableHeader>\\n    <TableRow>\\n      <TableHeaderCell>Header</TableHeaderCell>\\n    </TableRow>\\n  </TableHeader>\\n</Table>\\n\\n// OR\\n\\n<Table as=\"div\">\\n  <TableHeader as=\"div\">\\n    <TableRow as=\"div\">\\n      <TableHeaderCell as=\"div\">Header</TableHeaderCell>\\n    </TableRow>\\n  </TableHeader>\\n</Table>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure of InfoButton and Popover\nDESCRIPTION: Presents the HTML DOM structure for an InfoButton and its associated Popover. This illustrates how Fluent UI renders the button and positions the Popover in the document body, including a link for further information. This HTML markup depends on CSS classes from Fluent UI for styling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-infolabel/library/docs/Spec.md#2025-04-20_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<button type=\"button\" class=\"fui-InfoButton\">\n  <!-- icon -->\n</button>\n\n<!-- on document.body -->\n<div role=\"tooltip\" class=\"fui-PopoverSurface fui-InfoButton__info\">\n  Popover above-start lorem ipsum dolor sit amet consectetur.\n  <a href=\"https://react.fluentui.dev\">Learn more</a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Microsoft FluentUI Button Props Analysis\nDESCRIPTION: Detailed review of button properties, their types, and recommended actions for refactoring and deprecation\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Button.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IButtonProps {\n  primaryActionButtonProps?: IButtonProps;\n  primaryDisabled?: boolean;\n  renderPersistedMenuHiddenOnMount?: boolean;\n  rootProps?: React.ButtonHTMLAttributes<HTMLButtonElement> | React.AnchorHTMLAttributes<HTMLAnchorElement>;\n  secondaryText?: string;\n  split?: boolean;\n  splitButtonAriaLabel?: string;\n  splitButtonMenuProps?: IButtonProps;\n  styles?: IButtonStyles;\n  theme?: ITheme;\n  text?: string;\n  toggle?: boolean;\n  toggled?: boolean;\n  uniqueId?: string | number;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ButtonProps {\n  accessibility?: Accessibility;\n  circular?: boolean;\n  disabled?: boolean;\n  fluid?: boolean;\n  icon?: ShorthandValue<IconProps>;\n  iconOnly?: boolean;\n  iconPosition?: 'before' | 'after';\n  loader?: ShorthandValue<LoaderProps>;\n  loading?: boolean;\n  onClick?: ComponentEventHandler<ButtonProps>;\n  onFocus?: ComponentEventHandler<ButtonProps>;\n  primary?: boolean;\n  secondary?: boolean;\n  size?: SizeValue;\n  text?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering SpinButton with Fluent UI in React\nDESCRIPTION: This code snippet showcases how to use the SpinButton component from the Fluent UI library within a React component. It sets up a SpinButton with properties such as 'defaultValue', 'label', 'min', 'max', and 'step', along with ARIA labels for accessibility. This component is wrapped within a div of a specified width. Dependencies include React and Fluent UI libraries.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-monaco-editor/src/transpiler/examples/relativeImport.txt#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\nimport { SpinButton } from '@fluentui/react/lib/SpinButton';\nimport '../../fake.scss';\n\nexport class SpinButtonBasicExample extends React.Component<any, any> {\n  public render(): JSX.Element {\n    return (\n      <div style={{ width: '400px' }}>\n        <SpinButton\n          defaultValue=\"0\"\n          label={'Basic SpinButton:'}\n          min={0}\n          max={100}\n          step={1}\n          iconProps={{ iconName: 'IncreaseIndentLegacy' }}\n          incrementButtonAriaLabel={'Increase value by 1'}\n          decrementButtonAriaLabel={'Decrease value by 1'}\n        />\n      </div>\n    );\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Menu Properties in TypeScript\nDESCRIPTION: Defines properties for a menu component, including children elements, event handlers, and display configurations. It uses multiple type picks for functionality enhancement.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/library/etc/react-menu.api.md#2025-04-20_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type MenuProps = ComponentProps<MenuSlots> & Pick<PortalProps, 'mountNode'> & Pick<MenuListProps, 'checkedValues' | 'defaultCheckedValues' | 'hasCheckmarks' | 'hasIcons' | 'onCheckedValueChange'> & {\n    children: [JSX.Element, JSX.Element] | JSX.Element;\n    hoverDelay?: number;\n    inline?: boolean;\n    onOpenChange?: (e: MenuOpenEvent, data: MenuOpenChangeData) => void;\n    open?: boolean;\n    defaultOpen?: boolean;\n    openOnContext?: boolean;\n    openOnHover?: boolean;\n    persistOnItemClick?: boolean;\n    positioning?: PositioningShorthand;\n    closeOnScroll?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Styles with makeStyles in React\nDESCRIPTION: Demonstrates how to create styles using makeStyles and apply them to a React component using the generated hook.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/StylingComponents.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { makeStyles } from '@fluentui/react-components';\n\nconst useStyles = makeStyles({\n  root: { color: 'red' },\n});\n\nfunction Component() {\n  const classes = useStyles();\n\n  return <div className={classes.root} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Stateless Functional Component in React with Props\nDESCRIPTION: This code demonstrates a stateless functional component in React, defining the `MyComponentProps` interface for type safety. The component receives props and renders a div element, passing all props to it using the spread operator. This is a basic example of a presentational component that simply displays data based on the provided props.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/add-a-feature.md#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface MyComponentProps {}\n\nconst MyComponent: React.FunctionalComponent<MyComponentProps> = props => {\n  return <div {...props} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Focus Indicator for Links\nDESCRIPTION: Shows how to use createCustomFocusIndicatorStyle to create a double underline focus indicator for links.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Accessibility/FocusIndicator.stories.mdx#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeStyles, createCustomFocusIndicatorStyle } from '@fluentui/react-components';\n\nconst useStyles = makeStyles({\n  focusIndicator: createCustomFocusIndicatorStyle({\n    borderBottomColor: 'transparent',\n    textDecorationColor: tokens.colorStrokeFocus2,\n    textDecorationLine: 'underline',\n    textDecorationStyle: 'double',\n  }),\n});\n\nfunction Link() {\n  const styles = useStyles();\n  return <a className={styles.focusIndicator} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TablistSize Constants in TypeScript\nDESCRIPTION: Constants defining possible size values for the Tablist component, allowing for small, medium, or large sizing options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_65\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport const TablistSize: {\n    readonly small: \"small\";\n    readonly medium: \"medium\";\n    readonly large: \"large\";\n};\n\n// @public\nexport type TablistSize = ValuesOf<typeof TablistSize>;\n```\n\n----------------------------------------\n\nTITLE: Defining IDropdownStyles Interface in TypeScript\nDESCRIPTION: Defines the IDropdownStyles interface with style properties for various parts of a dropdown component, including the root, items, carets, and sub-components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_118\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface IDropdownStyles {\n    callout: IStyle;\n    caretDown: IStyle;\n    caretDownWrapper: IStyle;\n    dropdown: IStyle;\n    dropdownDivider: IStyle;\n    dropdownDividerHidden: IStyle;\n    dropdownItem: IStyle;\n    dropdownItemDisabled: IStyle;\n    dropdownItemHeader: IStyle;\n    dropdownItemHeaderHidden: IStyle;\n    dropdownItemHidden: IStyle;\n    dropdownItems: IStyle;\n    dropdownItemSelected: IStyle;\n    dropdownItemSelectedAndDisabled: IStyle;\n    dropdownItemsWrapper: IStyle;\n    dropdownOptionText: IStyle;\n    errorMessage: IStyle;\n    label: IStyle;\n    // @deprecated\n    panel: IStyle;\n    root: IStyle;\n    subComponentStyles: IDropdownSubComponentStyles;\n    title: IStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Cell Render Function in TypeScript\nDESCRIPTION: Defines a type for a cell render function used in table columns, allowing developers to customize how cell content is rendered for specific items in the data grid.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-table/library/etc/react-table.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type CellRenderFunction<TItem = unknown> = (column: TableColumnDefinition<TItem>, dataGridContextValue: DataGridContextValue) => React_2.ReactNode;\n```\n\n----------------------------------------\n\nTITLE: AnchorButton Component Definition in TypeScript\nDESCRIPTION: Defines the AnchorButton class that extends BaseAnchor with customization options. It includes properties for appearance, shape, size, and icon-only display configuration.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-different-release-tags) This symbol has another declaration with a different release tag\n// Warning: (ae-internal-mixed-release-tag) Mixed release tags are not allowed for \"AnchorButton\" because one of its declarations is marked as @internal\n//\n// @public\nexport class AnchorButton extends BaseAnchor {\n    appearance?: AnchorButtonAppearance | undefined;\n    appearanceChanged(prev: AnchorButtonAppearance | undefined, next: AnchorButtonAppearance | undefined): void;\n    iconOnly: boolean;\n    iconOnlyChanged(prev: boolean, next: boolean): void;\n    shape?: AnchorButtonShape | undefined;\n    shapeChanged(prev: AnchorButtonShape | undefined, next: AnchorButtonShape | undefined): void;\n    size?: AnchorButtonSize;\n    sizeChanged(prev: AnchorButtonSize | undefined, next: AnchorButtonSize | undefined): void;\n}\n\n// @internal\nexport interface AnchorButton extends StartEnd {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Vertical Bar Chart Style Properties Interface in TypeScript\nDESCRIPTION: The IVerticalBarChartStyleProps interface defines styling properties specific to the vertical bar chart, ensuring that the appearance aligns with the overall application's theme.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/etc/react-charting.api.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface IVerticalBarChartStyleProps extends ICartesianChartStyleProps {\n    legendColor?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Client-Side Portal Implementation (Naive)\nDESCRIPTION: This snippet presents a naive client-side implementation of a portal that attempts to create a new `div` element and append it to the document during the initial render. This approach will fail in SSR environments because the `document` object is not available on the server, leading to an error.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/ssr-context.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// Naive client implementation -> throws\nconst tooltipEl = document.createElement('div');\ndocument.appendChild(tooltipEl);\nReact.createPortal(tooltip, tooltipEl);\n```\n\n----------------------------------------\n\nTITLE: Creating Flex Layout Styles with Fluent UI in React\nDESCRIPTION: This snippet demonstrates how to create styles for a Flexbox media object layout using Fluent UI's makeStyles. It configures a parent flex container with row direction and a child text container with column direction. This setup is intended for combining media and text elements in a structured layout. No additional dependencies are required other than @fluentui/react-components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/recipes/src/recipes/media-object/MediaObject.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst useStyles = makeStyles({\n  parent: {\n    display: 'flex',\n    flexDirection: 'row',\n  },\n  textContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling RTL auto-flipping with @noflip\nDESCRIPTION: Demonstrates how to prevent automatic RTL flipping of CSS properties using the `@noflip` directive. This is useful for properties that should not be flipped in RTL layouts.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/merge-styles/README.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nmergeStyles({\n  left: '42px @noflip',\n});\n```\n\n----------------------------------------\n\nTITLE: Importing React Breadcrumb Components from FluentUI\nDESCRIPTION: This snippet demonstrates how to import various Breadcrumb-related components from the FluentUI React components package. It includes the main Breadcrumb component, individual BreadcrumbItem and BreadcrumbButton components, dividers, and types.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-breadcrumb/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbButton,\n  BreadcrumbDivider,\n  BreadcrumbProps\n} from \"@fluentui/react-components';\n```\n\n----------------------------------------\n\nTITLE: Creating Default ComponentStyleHooks in TypeScript\nDESCRIPTION: Defines a default implementation of ComponentStyleHooks with a noop function for the custom button styles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/custom-styling.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport const defaultComponentStyleHooks: ComponentStyleHooks = {\n  useCustomButtonStyles_unstable: () => {},\n};\n```\n\n----------------------------------------\n\nTITLE: Prime React Button DOM Structure in HTML\nDESCRIPTION: Example DOM structure for a Prime React button component showing how icons and text are rendered, with icons positioned via the iconPos prop.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Button.md#2025-04-20_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<button class=\"p-button p-component p-button-text-icon-left\">\n  <span class=\"pi pi-check p-c p-button-icon-left\">::before</span>\n  <span class=\"p-button-text p-c\">Click</span>\n</button>\n```\n\n----------------------------------------\n\nTITLE: Defining Input Types in TypeScript\nDESCRIPTION: This snippet demonstrates the use of 'InputCommons' to define shared attributes between 'InputProps' and 'InputState', utilizing TypeScript's 'Required' utility type to ensure certain properties are mandatory in the state object. It highlights the existing pattern in Fluent UI before proposed changes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/remove-commons.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type InputCommons = {\n  // These are optional in props (made required in state)\n  size?: 'small' | 'medium' | 'large';\n  appearance?: 'outline' | 'underline' | 'filledDarker' | 'filledLighter';\n};\n\nexport type InputProps = InputCommons &\n  ComponentProps<InputSlots> & {\n    // maybe some other props here\n  };\n\nexport type InputState =\n  // useInput provides defaults for things in InputCommons when creating the state object\n  Required<InputCommons> &\n    ComponentState<InputSlots> & {\n      // maybe some other state here\n    };\n```\n\n----------------------------------------\n\nTITLE: Shorthand vs Longhand Style Examples\nDESCRIPTION: Comparison between shorthand and longhand CSS property usage in makeStyles()\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/no-css-shorthands-in-make-styles.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nmakeStyles({\n  shorthands: {\n    padding: '10px 15px 5px',\n    border: '1px solid red',\n  },\n  longhands: {\n    paddingTop: '10px',\n    paddingRight: '15px',\n    paddingBottom: '5px',\n    paddingLeft: '15px',\n    borderTopWidth: '1px',\n    borderTopStyle: 'solid',\n    borderTopColor: 'red',\n    // ...\n    // 9 more properties for other side i.e. \"borderLeft*\", \"borderBottom*\", \"borderRight*\"\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Structure for Custom Dialog Element in FluentUI\nDESCRIPTION: This snippet shows the expected HTML output when opting out of the native <dialog> element in FluentUI, using a custom div element instead.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/docs/Spec.md#2025-04-20_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<!-- expected DOM output  -->\n<button aria-haspopup=\"true\" class=\"fui-button\">Open Dialog</button>\n<!-- ... portal ... -->\n<div aria-hidden=\"true\" class=\"fui-dialog-backdrop\"></div>\n<div aria-modal=\"true\" role=\"dialog\" class=\"fui-dialog-content\">This is as basic as it gets</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering Font Resources with JSX\nDESCRIPTION: JSX markup for displaying a list of font resources for iOS, Segoe UI/MDL2, and Android platforms with download links, structured in a flexible list layout.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Overviews/ResourcesPage/docs/default/ResourcesDesignResources.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ul className=\"md-list--flex\">\n  <li className=\"mdut--half\">[iOS font](https://developer.apple.com/fonts/)</li>\n  <li className=\"mdut--half\">[Download Segoe UI and MDL2 external font](https://aka.ms/WebFluentFonts)</li>\n  <li className=\"mdut--half\">[Android font](https://fonts.google.com/specimen/Roboto)</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Implementing useEventCallback Hook in TypeScript\nDESCRIPTION: An internal hook that creates a stable callback reference that doesn't change on re-renders but always uses the latest callback function implementation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-utilities/etc/react-utilities.api.md#2025-04-20_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @internal\nexport const useEventCallback: <Args extends unknown[], Return>(fn: (...args: Args) => Return) => (...args: Args) => Return;\n```\n\n----------------------------------------\n\nTITLE: Initializing Avatar with Active State - JSX\nDESCRIPTION: Creates an Avatar with dynamic active state indication using ring-shadow appearance.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-avatar/library/docs/SPEC.md#2025-04-20_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Avatar name=\"Daisy Phillips\" active={isUserActive ? 'active' : 'inactive'} activeAppearance=\"ring-shadow\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Style Hooks in FluentProvider\nDESCRIPTION: This snippet shows how to create and use custom style hooks within the FluentProvider context. It allows customization of existing components in the Fluent UI React framework by merging custom styles with existing ones.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/KeepingDesignConsistent.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { makeStyles, mergeClasses, FluentProvider } from '@fluentui/react-components';\nimport type { FluentProviderCustomStyleHooks, ButtonState } from '@fluentui/react-components';\n\nconst useMyButtonStyles = makeStyles({\n  root: {\n    //...\n  },\n});\n\nconst myCustomStyles: FluentProviderCustomStyleHooks = {\n  useButtonStyles_unstable: state => {\n    const myButtonStyles = useMyButtonStyles();\n    const buttonState = state as ButtonState;\n    buttonState.root.className = mergeClasses(buttonState.root.className, myButtonStyles.root);\n  },\n};\n\nfunction App() {\n  return <FluentProvider customStyleHooks_unstable={myCustomStyles}></FluentProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Slider Class in TypeScript for Fluent UI\nDESCRIPTION: Defines the Slider class which extends FASTElement to implement a slider control with form association, validation, and various interaction modes. It handles keyboard and pointer events, supports different orientations, and manages value calculation and positioning.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_45\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class Slider extends FASTElement implements SliderConfiguration {\n    constructor();\n    // @internal\n    calculateNewValue(rawValue: number): number;\n    checkValidity(): boolean;\n    // @internal (undocumented)\n    connectedCallback(): void;\n    decrement(): void;\n    // @internal (undocumented)\n    direction: Direction;\n    // (undocumented)\n    directionChanged(): void;\n    disabled: boolean;\n    // (undocumented)\n    protected disabledChanged(): void;\n    // @internal (undocumented)\n    disconnectedCallback(): void;\n    // @internal\n    elementInternals: ElementInternals;\n    static formAssociated: boolean;\n    // @internal\n    formDisabledCallback(disabled: boolean): void;\n    // @internal\n    formResetCallback(): void;\n    // (undocumented)\n    handleChange(_: any, propertyName: string): void;\n    // (undocumented)\n    handleKeydown(event: KeyboardEvent): boolean;\n    // (undocumented)\n    handlePointerDown: (event: PointerEvent | null) => boolean;\n    handleThumbPointerDown: (event: PointerEvent | null) => boolean;\n    increment(): void;\n    initialValue: string;\n    // @internal\n    protected initialValueChanged(_: string, next: string): void;\n    // @internal (undocumented)\n    isDragging: boolean;\n    get labels(): ReadonlyArray<Node>;\n    max: string;\n    // (undocumented)\n    protected maxChanged(): void;\n    min: string;\n    // (undocumented)\n    protected minChanged(): void;\n    mode: SliderMode;\n    orientation?: Orientation;\n    // (undocumented)\n    protected orientationChanged(prev: Orientation | undefined, next: Orientation | undefined): void;\n    // @internal (undocumented)\n    position: string;\n    reportValidity(): boolean;\n    setCustomValidity(message: string): void;\n    // @internal\n    setFormValue(value: File | string | FormData | null, state?: File | string | FormData | null): void;\n    // @internal\n    setValidity(flags?: Partial<ValidityState>, message?: string, anchor?: HTMLElement): void;\n    size?: SliderSize;\n    step: string;\n    // (undocumented)\n    protected stepChanged(): void;\n    // @internal (undocumented)\n    stepMultiplier: number;\n    // @internal (undocumented)\n    thumb: HTMLDivElement;\n    // @internal (undocumented)\n    track: HTMLDivElement;\n    // @internal (undocumented)\n    trackHeight: number;\n    // @internal (undocumented)\n    trackLeft: number;\n    // @internal (undocumented)\n    trackMinHeight: number;\n    // @internal (undocumented)\n    trackMinWidth: number;\n    // @internal (undocumented)\n    trackWidth: number;\n    get validationMessage(): string;\n    get validity(): ValidityState;\n    get value(): string;\n    set value(value: string);\n    get valueAsNumber(): number;\n    set valueAsNumber(next: number);\n    valueTextFormatter: (value: string) => string;\n    // (undocumented)\n    protected valueTextFormatterChanged(): void;\n    get willValidate(): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Using makeResetStyles with Griffel\nDESCRIPTION: Demonstrates how to generate a single monolithic class with makeResetStyles to avoid CSS rules explosion.  The API generates a single class that contains all defined styles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/styles-handbook.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeResetStyles } from '@griffel/react';\n\nconst useBaseClassname = makeResetStyles({\n  padding: '4px',\n  margin: '4px',\n});\n\nfunction Component(props) {\n  const baseClassname = useBaseClassname();\n\n  return <button className={baseClassname} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Syncing Branch with Master Using Git\nDESCRIPTION: Illustrates the recommended approach for keeping a development branch up-to-date by rebasing onto the master branch instead of merging. Emphasizes resolving any conflicts and explains the necessity of force-pushing due to history changes caused by rebase.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/dev-workflow.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout master // Switches to master\ngit pull upstream master // Syncs your local master with the latest version of master at the origin\ngit rebase -i master // Tacks your commits onto the end of master. Force is necessary since rebase changes history.\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit push // syncs your forks definition of master with the upstream repo\ngit checkout your-fancy-branch // Switches back to your branch\n```\n\n----------------------------------------\n\nTITLE: Defining Checkbox Component in TypeScript\nDESCRIPTION: Class definition for FluentUI Checkbox component extending BaseCheckbox with indeterminate state, shape and size properties. Includes methods for handling state changes and aria attributes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Checkbox extends BaseCheckbox {\n    constructor();\n    indeterminate?: boolean;\n    protected indeterminateChanged(prev: boolean | undefined, next: boolean | undefined): void;\n    protected setAriaChecked(value?: boolean): void;\n    shape?: CheckboxShape;\n    protected shapeChanged(prev: CheckboxShape | undefined, next: CheckboxShape | undefined): void;\n    size?: CheckboxSize;\n    protected sizeChanged(prev: CheckboxSize | undefined, next: CheckboxSize | undefined): void;\n    toggleChecked(force?: boolean): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Divider Component in JSX\nDESCRIPTION: Demonstrates various ways to use the Divider component, including basic usage, with content, alignment, appearance, inset, and vertical orientation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-divider/library/README.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Divider />\n<Divider>This is a divider</Divider>\n<Divider alignContent=\"center\">This is a divider</Divider>\n<Divider appearance=\"subtle\">This is a divider</Divider>\n<Divider inset>This is a divider</Divider>\n<Divider vertical>This is a divider</Divider>\n```\n\n----------------------------------------\n\nTITLE: Defining TagPickerInput Properties in TypeScript\nDESCRIPTION: This type definition in TypeScript specifies the properties for the TagPickerInput component, serving both as a trigger behavior and providing text field functionality. It accepts Combobox property extensions like clearable and appearance states, contributing to a flexible and interactive picker experience where users can easily open or close popovers and input text.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/Spec.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport type TagPickerInputSlots = {\n  root: Slot<'input'>;\n};\n\n/**\n * TagPickerInput Props\n */\nexport type TagPickerInputProps = Omit<\n  ComponentProps<Partial<TagPickerInputSlots>>,\n  'children' | 'size' | 'defaultValue'\n> &\n  Pick<ComboboxProps, 'clearable' | 'appearance'> & {\n    disabled?: boolean;\n    value?: string;\n  };\n```\n\n----------------------------------------\n\nTITLE: Implementing BaseDropdown Class in TypeScript\nDESCRIPTION: Defines the BaseDropdown class which extends FASTElement. It implements core dropdown functionality including option management, form association, and keyboard navigation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class BaseDropdown extends FASTElement {\n    constructor();\n    get activeDescendant(): string | undefined;\n    // @internal\n    activeIndex: number;\n    // @internal\n    activeIndexChanged(prev: number | undefined, next: number | undefined): void;\n    ariaLabelledBy: string;\n    changeHandler(e: Event): boolean | void;\n    clickHandler(e: PointerEvent): boolean | void;\n    // @internal\n    control: HTMLInputElement;\n    // @internal\n    controlChanged(prev: HTMLInputElement | undefined, next: HTMLInputElement | undefined): void;\n    // @internal\n    controlSlot: HTMLSlotElement;\n    disabled?: boolean;\n    disabledChanged(prev: boolean | undefined, next: boolean | undefined): void;\n    get displayValue(): string;\n    // @internal\n    elementInternals: ElementInternals;\n    get enabledOptions(): DropdownOption[];\n    // @internal\n    filterOptions(value: string, collection?: DropdownOption[]): DropdownOption[];\n    // @internal\n    focus(options?: FocusOptions): void;\n    // @internal\n    focusoutHandler(e: FocusEvent): boolean | void;\n    static formAssociated: boolean;\n    // @internal\n    formResetCallback(): void;\n    // @override\n    id: string;\n    // @internal\n    indicator: HTMLDivElement;\n    // @internal\n    indicatorSlot?: HTMLSlotElement;\n    initialValue?: string;\n    inputHandler(e: InputEvent): boolean | void;\n    protected insertControl(): void;\n    keydownHandler(e: KeyboardEvent): boolean | void;\n    // @internal\n    listbox: Listbox;\n    // @internal\n    listboxChanged(prev: Listbox | undefined, next: Listbox | undefined): void;\n    // @internal\n    listboxSlot: HTMLSlotElement;\n    // @internal\n    mousedownHandler(e: MouseEvent): boolean | void;\n    multiple?: boolean;\n    // @internal\n    protected multipleChanged(prev: boolean | undefined, next: boolean | undefined): void;\n    name: string;\n    nameChanged(prev: string, next: string): void;\n    open: boolean;\n    // @internal\n    openChanged(prev: boolean | undefined, next: boolean | undefined): void;\n    get options(): DropdownOption[];\n    placeholder: string;\n    required: boolean;\n    // @internal\n    get selectedIndex(): number;\n    get selectedOptions(): DropdownOption[];\n    selectOption(index?: number): void;\n    // @internal\n    setValidity(flags?: Partial<ValidityState>, message?: string, anchor?: HTMLElement): void;\n    type: DropdownType;\n    // @internal\n    typeChanged(prev: DropdownType | undefined, next: DropdownType | undefined): void;\n    // @internal\n    protected updateFreeformOption(value?: string): void;\n    // @internal\n    get validationMessage(): string;\n    get value(): string | null;\n    set value(next: string | null);\n    valueAttribute: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useId Hook in TypeScript\nDESCRIPTION: Definition of the useId hook, which generates a unique ID with an optional prefix.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-hooks/README.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useId(prefix?: string): string;\n```\n\n----------------------------------------\n\nTITLE: Avoiding Component Type in Accessibility Names\nDESCRIPTION: Shows how to properly label a button without including the component type in the accessibility name. This prevents duplication of information that is already provided by the screen reader based on the HTML element or ARIA role.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Accessibility/ComponentLabelling.stories.mdx#2025-04-20_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<code>aria-label=\"Mute microphone\"</code>\n```\n\n----------------------------------------\n\nTITLE: Exporting Neutral Card Background Color Tokens in JavaScript\nDESCRIPTION: This snippet defines and exports color tokens for neutral card backgrounds in the Fluent UI design system. It includes variables for different states such as disabled, hover, pressed, and selected.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\n// @public\nexport const colorNeutralCardBackground = \"var(--colorNeutralCardBackground)\";\n\n// @public\nexport const colorNeutralCardBackgroundDisabled = \"var(--colorNeutralCardBackgroundDisabled)\";\n\n// @public\nexport const colorNeutralCardBackgroundHover = \"var(--colorNeutralCardBackgroundHover)\";\n\n// @public\nexport const colorNeutralCardBackgroundPressed = \"var(--colorNeutralCardBackgroundPressed)\";\n\n// @public\nexport const colorNeutralCardBackgroundSelected = \"var(--colorNeutralCardBackgroundSelected)\";\n```\n\n----------------------------------------\n\nTITLE: Tag Definitions and Utility Hooks in TypeScript\nDESCRIPTION: This snippet provides definitions for the various tag-related types such as `Tag`, `TagGroup`, and the associated props and context values. Furthermore, it outlines utility hooks like `useTag`, `useTagGroup`, and other state management hooks necessary for tracking the behavior and properties of tags in the application.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tags/library/etc/react-tags.api.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const Tag: ForwardRefComponent<TagProps>;\n\n// @public (undocumented)\nexport type TagAppearance = 'filled' | 'outline' | 'brand';\n\n// @public (undocumented)\nexport const tagClassNames: SlotClassNames<TagSlots>;\n\n// @public (undocumented)\nexport type TagDismissData<Value = TagValue> = {\n    value: Value;\n};\n\n// @public (undocumented)\nexport type TagDismissEvent = React_2.MouseEvent | React_2.KeyboardEvent;\n\n// @public (undocumented)\nexport type TagDismissHandler<Value = TagValue> = (e: TagDismissEvent, data: TagDismissData<Value>) => void;\n\n// @public\nexport const TagGroup: ForwardRefComponent<TagGroupProps>;\n\n// @public (undocumented)\nexport const tagGroupClassNames: SlotClassNames<TagGroupSlots>;\n\n// @public (undocumented)\nexport type TagGroupContextValues = {\n    tagGroup: TagGroupContextValue;\n};\n\n// @public\nexport type TagGroupProps<Value = TagValue> = ComponentProps<TagGroupSlots> & {\n    onDismiss?: TagDismissHandler<Value>;\n    defaultSelectedValues?: Value[];\n    disabled?: boolean;\n    size?: TagSize;\n    appearance?: TagAppearance;\n    dismissible?: boolean;\n    onTagSelect?: EventHandler<TagSelectData<Value>>;\n    selectedValues?: Value[];\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Link as Button Element in TSX\nDESCRIPTION: Example of Link component structure when rendering as a button element with role=\"link\".\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-link/library/docs/SPEC.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<button class=\"root\" role=\"link\">\n  {children}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Using useSetTimeout Hook in a React Component\nDESCRIPTION: Demonstrates how to use the `useSetTimeout` hook to set up a timeout in a React component. It uses the `setTimeout` method provided by the hook to execute a callback after 500 milliseconds and shows how to clear the timeout manually using `clearTimeout`.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-hooks/README.md#2025-04-20_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSetTimeout } from '@fluentui/react-hooks';\n\nconst MyComponent = () => {\n  const { setTimeout, clearTimeout } = useSetTimeout();\n\n  // Set a timeout\n  const id = setTimeout(() => console.log('test'), 500);\n\n  // If needed, clear an timeout manually.\n  clearTimeout(id);\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Tabs Components - JavaScript\nDESCRIPTION: This snippet demonstrates how to import the TabList and Tab components from the Fluent UI React library.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tabs/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Tablist, Tab } from '@fluentui/react-components';\n```\n\n----------------------------------------\n\nTITLE: Defining LineChart Component and Props in TypeScript\nDESCRIPTION: Exports a FunctionComponent for LineChart and defines its props interface. The props extend CartesianChartProps and include options for customizing the line chart's appearance, data, and behavior.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charts/library/etc/react-charts.api.md#2025-04-20_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const LineChart: React_2.FunctionComponent<LineChartProps>;\n\nexport interface LineChartProps extends CartesianChartProps {\n    allowMultipleShapesForPoints?: boolean;\n    colorFillBars?: ColorFillBarsProps[];\n    culture?: string;\n    data: ChartProps;\n    enablePerfOptimization?: boolean;\n    eventAnnotationProps?: EventsAnnotationProps;\n    getCalloutDescriptionMessage?: (calloutDataProps: CustomizedCalloutData) => string | undefined;\n    onRenderCalloutPerDataPoint?: RenderFunction<CustomizedCalloutData>;\n    onRenderCalloutPerStack?: RenderFunction<CustomizedCalloutData>;\n    optimizeLargeData?: boolean;\n    styles?: LineChartStyles;\n}\n```\n\n----------------------------------------\n\nTITLE: Equivalent Custom Option Rendering with RadioGroup in Fluent UI v9\nDESCRIPTION: Shows how to achieve the same custom option rendering in Fluent UI v9 using RadioGroup and Radio components. It uses makeStyles for styling and demonstrates how to customize individual Radio components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/RadioGroup.stories.mdx#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { makeStyles, shorthands, Label, Radio, RadioGroup } from '@fluentui/react-components';\nimport { useId } from '@fluentui/react-utilities';\nimport { AnimalCat24Regular } from '@fluentui/react-icons';\n\nconst useIconOptionStyles = makeStyles({\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n    ...shorthands.gap('5px'),\n  },\n});\n\nconst useLabelStyles = makeStyles({\n  root: {\n    display: 'flex',\n    ...shorthands.gap('5px'),\n  },\n});\n\nconst useGreenBorderOptionStyles = makeStyles({\n  root: {\n    ...shorthands.border('1px', 'solid', 'green'),\n  },\n});\n\nconst RadioGroupCustomOptionExample = () => {\n  const labelId = useId('label');\n  const iconOptionStyles = useIconOptionStyles();\n  const labelStyles = useLabelStyles();\n  const greenBorderOptionStyles = useGreenBorderOptionStyles();\n\n  return (\n    <>\n      <Label id={labelId} required>\n        Pick One\n      </Label>\n      <RadioGroup aria-labelledby={labelId} defaultValue=\"B\">\n        <div className={iconOptionStyles.root}>\n          <Radio\n            value=\"A\"\n            label={{\n              className: labelStyles.root,\n              children: (\n                <>\n                  A <AnimalCat24Regular />\n                </>\n              ),\n            }}\n          />\n        </div>\n        <Radio value=\"B\" label=\"Option B\" className={greenBorderOptionStyles.root} />\n        <Radio value=\"C\" label=\"Option C\" disabled />\n        <Radio value=\"D\" label=\"Option D\" />\n      </RadioGroup>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining TeachingPopoverFooterState Type in TypeScript\nDESCRIPTION: Defines the state type for TeachingPopoverFooter, combining ComponentState with specific properties from PopoverContextValue and an optional footerLayout property.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-teaching-popover/library/etc/react-teaching-popover.api.md#2025-04-20_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type TeachingPopoverFooterState = ComponentState<TeachingPopoverFooterSlots> & Pick<PopoverContextValue, 'appearance'> & {\n    footerLayout?: 'horizontal' | 'vertical';\n};\n```\n\n----------------------------------------\n\nTITLE: Dialog Context Values Definition\nDESCRIPTION: Defines the structure of the combined context values for the Dialog component, including both the main dialog context and the dialog surface context.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/etc/react-dialog.api.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport type DialogContextValues = {\n    dialog: DialogContextValue;\n    dialogSurface: DialogSurfaceContextValue;\n};\"\n```\n\n----------------------------------------\n\nTITLE: Focus Management Utility Hooks\nDESCRIPTION: Collection of React hooks for managing focus states, finding focusable elements, and handling keyboard navigation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tabster/etc/react-tabster.api.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nexport const useFocusFinders: () => {\n    findAllFocusable: (container: HTMLElement, acceptCondition?: ((el: HTMLElement) => boolean) | undefined) => HTMLElement[];\n    findFirstFocusable: (container: HTMLElement) => HTMLElement | null | undefined;\n    findLastFocusable: (container: HTMLElement) => HTMLElement | null | undefined;\n    findNextFocusable: (currentElement: HTMLElement, options?: Pick<Partial<Types.FindNextProps>, 'container'>) => HTMLElement | null | undefined;\n    findPrevFocusable: (currentElement: HTMLElement, options?: Pick<Partial<Types.FindNextProps>, 'container'>) => HTMLElement | null | undefined;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining DialogBase React Component in TypeScript\nDESCRIPTION: Defines the DialogBase class extending React.Component. It includes default props and a render method for creating dialog components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_29\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class DialogBase extends React_2.Component<IDialogProps, {}> {\n    constructor(props: IDialogProps);\n    // (undocumented)\n    static defaultProps: IDialogProps;\n    // (undocumented)\n    render(): JSX.Element;\n}\n```\n\n----------------------------------------\n\nTITLE: Using CSS Colors in FluentUI Charts\nDESCRIPTION: Demonstrates how to apply custom CSS colors (named colors, hex codes, RGB, HSL) to data series in a LineChart component. The developer is responsible for maintaining appropriate contrast ratios.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/docs/colors.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { IChartProps, ILineChartPoints, LineChart } from '@fluentui/react-charting';\n\nconst dataSeries: ILineChartPoints[] = [\n  {\n    legend: 'Line 1',\n    data: [\n      { x: 20, y: 50 },\n      { x: 40, y: 80 },\n    ],\n    color: 'red', // #ff0000, rgb(255, 0, 0), hsl(0, 100%, 50%), etc.\n  },\n];\nconst chartData: IChartProps = {\n  chartTitle: 'Line chart',\n  lineChartData: dataSeries,\n};\n\nconst App = () => {\n  return <LineChart data={chartData} />;\n};\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Checkbox with BaseCheckbox Composition - TSX\nDESCRIPTION: Demonstrates how to create a custom checkbox implementation using BaseCheckbox composition with react-texture. Shows how to specify custom tokens, styles, and slots while maintaining performance.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Checkbox.md#2025-04-20_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst FooCheckbox = BaseCheckbox.compose({\n  tokens: {},\n  styles: {},\n  slots: {}\n});\n\nrender() {\n  <FooCheckbox defaultChecked={true} onChange={console.log(\"checkbox clicked!\")}>\n    This renders as a checkbox\n  </FooCheckbox >\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Portal with MountNode className in Fluent UI (TSX)\nDESCRIPTION: This snippet demonstrates how to use the `Portal` component from `@fluentui/react-components` to render portal content within a specified DOM node. The `mountNode` prop is used to pass a configuration object that includes a `className` to be applied to the mount node. This allows styling the container where the portal content is rendered.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-portal/stories/src/toMountNodeProps/toMountNodePropsDescription.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Portal } from '@fluentui/react-components';\n\nconst MyComponent = () => (\n  <Portal\n    mountNode={{\n      className: 'my-mount-node',\n    }}\n  >\n    <div>Portal content</div>\n  </Portal>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Function for Button Component Using getSlots in React\nDESCRIPTION: Implements the render function for the button component which utilizes the getSlots helper to manage dynamic slot rendering based on state parameters.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-utilities/src/compose/README.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst renderButton_unstable = state => {\n  const { slots, slotProps } = getSlots(state, ['icon']);\n\n  return (\n    <slots.root {...slotProps.root}>\n      <slots.icon {...slotProps.icon} />\n      {state.children}\n    </slots.root>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: useProgressBar Hook Declaration\nDESCRIPTION: Declares the useProgressBar_unstable hook, which takes ProgressBarProps and a ref as input and returns a ProgressBarState. This hook is likely responsible for managing the state of the ProgressBar component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-progress/library/etc/react-progress.api.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n// @public\nexport const useProgressBar_unstable: (props: ProgressBarProps, ref: React_2.Ref<HTMLElement>) => ProgressBarState;\n```\n```\n\n----------------------------------------\n\nTITLE: Proposed makeProviderStyles Implementation\nDESCRIPTION: Creates a new API method for safely overriding provider styles using Griffel core functionality\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/provider-style-overrides.md#2025-04-20_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { makeStyles, GriffelStyle } from '@griffel/core';\n\nconst makeProviderStyles = (providerStyles: GriffelStyle) => {\n  return makeStyles({\n    providerStyles,\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Persona State Definition (TypeScript)\nDESCRIPTION: Defines the `PersonaState` type, representing the internal state of the `Persona` component. It includes properties derived from `PersonaProps` as well as internal state like `numTextLines`. It is used within the component's logic and styling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-persona/library/etc/react-persona.api.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport type PersonaState = ComponentState<PersonaSlots> &\n  Required<Pick<PersonaProps, 'presenceOnly' | 'size' | 'textAlignment' | 'textPosition'>> & {\n    numTextLines: number;\n  };\"\n```\n\n----------------------------------------\n\nTITLE: Defining useGridStyles Hook for FluentUI in TypeScript\nDESCRIPTION: Exports a hook that provides CSS class names for grid layouts with different row and column configurations. This utility simplifies the creation of grid-based layouts in FluentUI components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-migration-v0-v9/library/etc/react-migration-v0-v9.api.md#2025-04-20_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport const useGridStyles: () => Record<\"grid\" | \"onlyRows\" | \"rows1\" | \"rows2\" | \"rows3\" | \"columns1\" | \"columns2\" | \"columns3\" | \"columnsDefault\", string>;\n```\n\n----------------------------------------\n\nTITLE: Nested FluentProvider Portal Rendering\nDESCRIPTION: Shows how Portal components are rendered within a FluentProvider with virtual parent spans\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-portal/library/README.md#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<FluentProvider>\n  <Portal id=\"portal-1\" />\n  <Portal id=\"portal-2\" />\n</FluentProvider>\n```\n\n----------------------------------------\n\nTITLE: Persona Slots Definition (TypeScript)\nDESCRIPTION: Defines the `PersonaSlots` type which specifies the available slots for the Persona component.  Slots allow customization by overriding default elements.  It uses the `Slot` type from `@fluentui/react-utilities` to specify the type of element that can be used in each slot.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-persona/library/etc/react-persona.api.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport type PersonaSlots = {\n  root: NonNullable<Slot<'div'>>;\n  avatar?: Slot<typeof Avatar>;\n  presence?: Slot<typeof PresenceBadge>;\n  primaryText?: Slot<'span'>;\n  secondaryText?: Slot<'span'>;\n  tertiaryText?: Slot<'span'>;\n  quaternaryText?: Slot<'span'>;\n};\"\n```\n\n----------------------------------------\n\nTITLE: VerticalBarChart React Component Definition\nDESCRIPTION: TypeScript interface for Vertical Bar Chart properties, supporting extensive configuration options for bar rendering, colors, and interaction\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charts/library/etc/react-charts.api.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface VerticalBarChartProps extends CartesianChartProps {\n  barWidth?: number | 'default' | 'auto';\n  chartTitle?: string;\n  colors?: string[];\n  culture?: string;\n  data?: VerticalBarChartDataPoint[];\n  enableGradient?: boolean;\n  hideLabels?: boolean;\n  mode?: 'default' | 'plotly';\n  styles?: VerticalBarChartStyles;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Spinner Rendering in JavaScript\nDESCRIPTION: These examples show how to customize the Spinner component to render without the animated circle or hide it using inline styles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-spinner/library/README.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<Spinner spinner={null} appearance=\"primary\" label=\"Primary Spinner\" />\n<Spinner spinner={{style:{visibility: 'hidden'}}} appearance=\"inverted\" label=\"Inverted Spinner\" />\n```\n\n----------------------------------------\n\nTITLE: Defining TransformAggregation Interface for Data Aggregation\nDESCRIPTION: Defines a TypeScript interface for data aggregation operations within transformations. Supports various statistical functions like count, sum, average, and more.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/chart-utilities/etc/chart-utilities.api.md#2025-04-20_snippet_40\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface TransformAggregation {\n    // (undocumented)\n    enabled?: boolean | undefined;\n    // (undocumented)\n    func?: 'count' | 'sum' | 'avg' | 'median' | 'mode' | 'rms' | 'stddev' | 'min' | 'max' | 'first' | 'last' | undefined;\n    // (undocumented)\n    funcmode?: 'sample' | 'population' | undefined;\n    // (undocumented)\n    target: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Unmount Using Animation Events in React\nDESCRIPTION: This snippet demonstrates how to handle component unmounting using Web Animations API events in a React component. It triggers an animation when the 'visible' prop becomes false and unmounts the component when the animation finishes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/motion-definition-n-apis.md#2025-04-20_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyComponent(props) {\n  const { visible, motion } = props;\n\n  const [mounted, setMounted] = useState(visible);\n  const elementRef = React.useRef();\n\n  // Triggers an animation when `visible` prop becomes `false` and unmounts the component on finish\n  React.useEffect(() => {\n    if (!visible) {\n      const animation = elementRef.current.animate(motion.keyframes, {\n        duration: motion.duration,\n      });\n\n      animation.onfinish = () => {\n        setMounted(false);\n      };\n    }\n  }, [visible, motion]);\n\n  return mounted ? props.current : null;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Custom Button Component with Trigger in TypeScript\nDESCRIPTION: The TypeScript code illustrates the use of a `Trigger` component with a custom `Button` component. It highlights a situation where `useARIAButtonProps` might add unnecessary properties due to the custom nature of the button component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/triggers-and-multiple-layers-of-button-handling.md#2025-04-20_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n<Trigger>\n  <Button>Trigger something</Button>\n</Trigger>\n```\n\n----------------------------------------\n\nTITLE: Composing Grid Layout Media Object in React\nDESCRIPTION: This snippet implements a media object using a Grid layout, providing a minimal DOM structure for media and text display. It modifies grid styles to ensure media spans appropriate rows and the component efficiently arranges media to the left and text to the right. Dependencies include @fluentui/react-components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/recipes/src/recipes/media-object/MediaObject.stories.mdx#2025-04-20_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text, makeStyles } from '@fluentui/react-components';\n\n// Our makeStyles call from above\n\nconst MediaObject: React.FC<{ text?: string }> = ({ children, text }) => {\n  const styles = useStyles();\n\n  return (\n    <div className={styles.parent}>\n      <div className={styles.media}>{children}</div>\n      <Text className={styles.text}>{text}</Text>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Button Styles Implementation in TS\nDESCRIPTION: Implementation of custom button styles using makeStyles utility with specific styling rules.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/AdvancedStylingTechniques.stories.mdx#2025-04-20_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { makeStyles, type ButtonState } from '@fluentui/react-components';\n\nconst useStyles = makeStyles({\n  root: {\n    border: '2px solid green',\n    backgroundColor: 'pink',\n    borderRadius: '64px',\n  },\n  icon: {\n    color: 'blue',\n    backgroundColor: 'white',\n  },\n});\n\nexport const useFancyButtonStyles = (state: unknown) => {\n  const buttonState = state as ButtonState;\n  const styles = useStyles();\n  buttonState.root.className = mergeClasses(buttonState.root.className, styles.root);\n\n  if (buttonState.icon) {\n    buttonState.icon.className = mergeClasses(buttonState.icon.className, styles.icon);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Slots with Render Props - React JSX\nDESCRIPTION: This example depicts how a children function can be used to customize the rendering of a slot, allowing for modifications to props and additional markup to be included in the rendered button.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Slots.md#2025-04-20_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Button\n  icon={{\n    // 💡 \"Component\" is an original element type for slot, for example, it can be a \"span\"\n    //    \"props\" are defaults that are provided to a slot by a host component, for example, may contain \"onClick\"\n    //    handler\n    children: (Component, props) => (\n      <div id=\"icon-wrapper\">\n        {/* 💡 \"props\" can be modified here to override component's behavior */}\n        <Component {...props} id=\"icon-slot\">\n          <FooIcon />\n        </Component>\n      </div>\n    ),\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Merging Classes with mergeClasses in React\nDESCRIPTION: Shows how to properly merge classes from multiple useStyles calls using the mergeClasses function, which handles deduplication of atomic classes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/StylingComponents.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { makeStyles, mergeClasses } from '@fluentui/react-components';\n\nconst useStyles = makeStyles({\n  blueBold: {\n    color: 'blue',\n    fontWeight: 'bold',\n  },\n  red: {\n    color: 'red',\n  },\n});\n\nfunction Component() {\n  const classes = useStyles();\n\n  const first = mergeClasses(classes.blueBold, classes.red); // { color: 'red', fontWeight: 'bold' }\n  const second = mergeClasses(classes.red, classes.blueBold); // { color: 'blue', fontWeight: 'bold' }\n}\n```\n\n----------------------------------------\n\nTITLE: Overflow Hook Definitions\nDESCRIPTION: React hooks for managing overflow behavior, including tracking item and group visibility\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-overflow/library/etc/react-priority-overflow.api.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport function useIsOverflowGroupVisible(id: string): OverflowGroupState;\n\nexport function useIsOverflowItemVisible(id: string): boolean;\n\nexport function useOverflowItem<TElement extends HTMLElement>(\n  id: string,\n  priority?: number,\n  groupId?: string,\n): React_2.RefObject<TElement>;\n\nexport function useOverflowMenu<TElement extends HTMLElement>(\n  id?: string,\n): {\n  ref: React_2.RefObject<TElement>;\n  overflowCount: number;\n  isOverflowing: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Facepile in Fluent UI v8\nDESCRIPTION: This code snippet demonstrates the basic usage of Facepile component in Fluent UI v8. It imports necessary components, sets up a number of faces to display, and renders the Facepile with inline and overflow personas.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/AvatarGroup.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { facepilePersonas } from '@fluentui/example-data';\nimport { Facepile, IFacepilePersona } from '@fluentui/react/lib/Facepile';\nimport { PersonaSize } from '@fluentui/react/lib/Persona';\n\nconst AvatarGroupV8BasicExample = () => {\n  // Number of faces to display inline\n  const numberOfFaces = 3;\n  const personas: IFacepilePersona[] = React.useMemo(() => facepilePersonas.slice(0, numberOfFaces), [numberOfFaces]);\n  const overflowPersonas = React.useMemo(() => facepilePersonas.slice(numberOfFaces), [numberOfFaces]);\n\n  return <Facepile personaSize={PersonaSize.size32} personas={personas} overflowPersonas={overflowPersonas} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Internal Label Structure\nDESCRIPTION: Shows the internal implementation structure using slots pattern.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-label/library/docs/Spec.md#2025-04-20_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<slots.root {...slotProps.root}>\n  {state.children}\n  <slots.required {...slotProps.required} />\n</slots.root>\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyboard Navigation Attribute in React\nDESCRIPTION: Demonstrates how to use useKeyboardNavAttribute hook to add keyboard navigation awareness to elements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Accessibility/FocusIndicator.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Root() {\n  const ref = useKeyboardNavAttribute();\n  return <div ref={ref}>{children}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Stack Component in JSX\nDESCRIPTION: This snippet shows how to render a basic Stack component using JSX and a styles object.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Flex/Flex.Stack.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={styles.root}>{children}</div>\n```\n\nLANGUAGE: js\nCODE:\n```\nmakeStyles({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    flexWrap: 'nowrap',\n    width: 'auto',\n    height: 'auto',\n    boxSizing: 'border-box',\n    '> *': {\n      textOverflow: 'ellipsis',\n    },\n    '> :not(:first-child)': {\n      marginTop: '0px',\n    },\n    '> *:not(.ms-StackItem)': {\n      flexShrink: 1,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Equivalent Usage of Spinner in Fluent UI v9\nDESCRIPTION: This snippet shows the equivalent implementation of the Spinner component in Fluent UI v9. It imports the Spinner from '@fluentui/react-components' and renders it similarly to the v0 Loader.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Spinner.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { Spinner } from '@fluentui/react-components';\n\nconst SpinnerV9BasicExample = () => <Spinner />;\n\nexport default SpinnerV9BasicExample;\n```\n\n----------------------------------------\n\nTITLE: Event Annotations Configuration in Line Chart\nDESCRIPTION: Configuring event annotations for highlighting specific events on a line chart using the `eventAnnotationProps` prop. Each event includes a date, message, and optional callout details.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charts/stories/src/LineChart/LineChartBestPractices.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\neventAnnotationProps: {\n  date: Date,\n  event message: string,\n  onRenderCard: CalloutCallback\n}\n```\n\n----------------------------------------\n\nTITLE: Handling State with useAnimationState Hook in Fluent UI React\nDESCRIPTION: This TypeScript snippet demonstrates how to handle state transitions using the useAnimationState hook in combination with the useState hook. It dynamically applies CSS classes based on the animation state ('entering' or 'exiting'). The dependencies include React for state management and Fluent UI's animation classes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/motion-definition-n-apis.md#2025-04-20_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst [visible, setVisible] = useState(false);\nconst [animationState] = useAnimationState(visible);\n\nconst className = mergeClasses(\n  animationState === 'entering' && classes.entering,\n  animationState === 'exiting' && classes.exiting,\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Portal Component in React\nDESCRIPTION: Creates a portal that renders content outside the current DOM hierarchy, enabling flexible overlay and styling propagation\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-portal/stories/src/Portal/PortalDescription.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nReactDOM.createPortal()\n```\n\n----------------------------------------\n\nTITLE: Applying classes directly to elements in FluentUI with Griffel\nDESCRIPTION: Shows the recommended approach of applying classes directly to elements instead of using nested selectors. This pattern improves code maintainability and produces more reusable CSS rules.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/styles-handbook.md#2025-04-20_snippet_32\n\nLANGUAGE: jsx\nCODE:\n```\nimport { makeStyles, mergeClasses, shorthands } from '@griffel/react';\nimport { tokens } from '@fluentui/react-theme';\n\nconst useClasses = makeStyles({\n  slotA: {\n    backgroundColor: tokens.colorNeutralBackground1,\n    // ❌ Don't do\n    // You can apply classes directly to that \"div\"\n    '> div': {\n      color: tokens.colorNeutralForeground1,\n    },\n  },\n\n  // ✅ Do\n  slotA: {\n    backgroundColor: tokens.colorNeutralBackground1,\n  },\n  slotB: {\n    color: tokens.colorNeutralForeground1,\n  },\n});\n\nfunction App(props) {\n  const classes = useClasses();\n\n  return (\n    <div className={classes.slotA}>\n      {/* 💡 Classes can be passed directly to this element */}\n      <div className={classes.slotB} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Dialog Open Change Data Definition\nDESCRIPTION: Defines the structure of the data passed to the onOpenChange event handler. This provides information about the event that triggered the open/close change, such as escape key press, backdrop click or trigger click.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/etc/react-dialog.api.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport type DialogOpenChangeData = {\n    type: 'escapeKeyDown';\n    open: boolean;\n    event: React_2.KeyboardEvent<DialogSurfaceElement>;\n} | {\n    type: 'backdropClick';\n    open: boolean;\n    event: React_2.MouseEvent<DialogSurfaceElement>;\n} | {\n    type: 'triggerClick';\n    open: boolean;\n    event: React_2.MouseEvent<DialogSurfaceElement>;\n};\"\n```\n\n----------------------------------------\n\nTITLE: Implementing CardPreview - FluentUI v9\nDESCRIPTION: Updated implementation using the new CardPreview component in FluentUI v9. Shows how to display images and logos using the new component structure.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Card/CardPreview.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { Card, CardHeader, CardPreview } from '@fluentui/react-card/unstable';\n\nexport const Component = () => {\n  return (\n    <Card size=\"small\" orientation=\"horizontal\">\n      <CardPreview logo={<img src=\"word_logo.svg\" alt=\"Microsoft Word logo\" />}>\n        <img src=\"doc_template.png\" alt=\"Preview of a Word document \" />\n      </CardPreview>\n    </Card>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining IModalProps Interface in TypeScript\nDESCRIPTION: This interface extends React attributes and defines props for a Modal component, including accessibility options, layering, and styling properties.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_153\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface IModalProps extends React_2.RefAttributes<HTMLDivElement>, IAccessiblePopupProps {\n    allowTouchBodyScroll?: boolean;\n    // (undocumented)\n    children?: React_2.ReactNode;\n    className?: string;\n    componentRef?: IRefObject<IModal>;\n    containerClassName?: string;\n    dragOptions?: IDragOptions;\n    // @deprecated\n    enableAriaHiddenSiblings?: boolean;\n    focusTrapZoneProps?: IFocusTrapZoneProps;\n    isAlert?: boolean;\n    isBlocking?: boolean;\n    isDarkOverlay?: boolean;\n    isModeless?: boolean;\n    isOpen?: boolean;\n    layerProps?: ILayerProps;\n    onDismiss?: (ev?: React_2.MouseEvent<HTMLButtonElement | HTMLElement>) => any;\n    onDismissed?: () => any;\n    // @deprecated\n    onLayerDidMount?: () => void;\n    overlay?: IOverlayProps;\n    popupProps?: IPopupProps;\n    responsiveMode?: ResponsiveMode;\n    scrollableContentClassName?: string;\n    styles?: IStyleFunctionOrObject<IModalStyleProps, IModalStyles>;\n    subtitleAriaId?: string;\n    theme?: ITheme;\n    titleAriaId?: string;\n    topOffsetFixed?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fluent UI ESLint Plugin in ESLint\nDESCRIPTION: Basic configuration for integrating the Fluent UI ESLint plugin into an ESLint setup. Includes adding the plugin and extending recommended configurations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/eslint-plugin-react-components/README.md#2025-04-20_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\\n  plugins: ['@fluentui/react-components'],\\n  extends: ['plugin:@fluentui/react-components/recommended'],\\n};\n```\n\n----------------------------------------\n\nTITLE: Tag Group Management Hooks in TypeScript\nDESCRIPTION: This snippet includes hooks designed to manage the state of tag groups, including the utilization of props for handling tag selections, dismiss actions, and the overall management of group behaviors within a list of tags. The functions also target integration with Fluent UI's design framework.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tags/library/etc/react-tags.api.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const useTagGroup_unstable: (props: TagGroupProps, ref: React_2.Ref<HTMLDivElement>) => TagGroupState;\n\n// @public (undocumented)\nexport function useTagGroupContextValues_unstable(state: TagGroupState): TagGroupContextValues;\n\n// @public\nexport const useTagGroupStyles_unstable: (state: TagGroupState) => TagGroupState;\n\n// @public\nexport const useTagStyles_unstable: (state: TagState) => TagState;\n```\n\n----------------------------------------\n\nTITLE: Using Context Selector - TypeScript\nDESCRIPTION: Examines the use of context selector pattern to avoid memoization within render functions, proposes a design maintaining the current API but notes potential performance variations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/context-values.md#2025-04-20_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction renderBaz(state) {\n  const { open, inline } = state;\n\n  return (\n    <SampleContext.Provider value={{ inline, open }}>\n      <div />\n    </SampleContext.Provider>\n  );\n}\n\nfunction useBazItem() {\n  // ✅ only if \"open\"/\"inline\" will change a rerender will be triggered\n  const open = useContextSelector(SampleContext, value => value.open);\n  const inline = useContextSelector(SampleContext, value => value.inline);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Conformance Tests with Griffel in React\nDESCRIPTION: This code snippet demonstrates how to import and use conformance tests provided by '@fluentui/react-conformance' along with tests specific to '@fluentui/react-conformance-griffel'. The isConformant function checks the conformity of a specified component, incorporating additional tests from griffelTests. Dependencies include '@fluentui/react-conformance' which is mandatory for running these tests.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-conformance-griffel/README.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isConformant } from '@fluentui/react-conformance';\nimport griffelTests from '@fluentui/react-conformance-griffel';\n\nisConformant({\n  Component,\n  extraTests: griffelTests,\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Fluent UI React Drawer\nDESCRIPTION: Demonstrates the basic usage of the new Drawer component in Fluent UI React, showing how to control its open state.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-drawer/library/docs/Spec.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Drawer open={open} onOpenChange={(_, { open }) => setOpen(open)}>\n  <p>Content goes here.</p>\n</Drawer>\n```\n\n----------------------------------------\n\nTITLE: Suggestions Component Interfaces for Suggestions Control in TypeScript\nDESCRIPTION: Interfaces for the main Suggestions component and its control surfaces, defining methods for navigation, selection, and rendering of suggestion lists.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_186\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface ISuggestions<T> {\n    executeSelectedAction: () => void;\n    focusAboveSuggestions: () => void;\n    focusBelowSuggestions: () => void;\n    focusSearchForMoreButton: () => void;\n    hasSuggestedAction: () => boolean;\n    hasSuggestedActionSelected: () => boolean;\n    tryHandleKeyDown: (keyCode: number, currentSuggestionIndex: number) => boolean;\n}\n\n// @public (undocumented)\nexport interface ISuggestionsControlProps<T> extends React_2.ClassAttributes<any>, ISuggestionsCoreProps<T> {\n    className?: string;\n    completeSuggestion: () => void;\n    footerItemsProps?: ISuggestionsHeaderFooterProps[];\n    headerItemsProps?: ISuggestionsHeaderFooterProps[];\n    shouldSelectFirstItem?: () => boolean;\n    suggestionsFooterContainerAriaLabel?: string;\n    suggestionsHeaderContainerAriaLabel?: string;\n}\n\n// @public (undocumented)\nexport interface ISuggestionsControlState<T> {\n    // (undocumented)\n    selectedFooterIndex: number;\n    // (undocumented)\n    selectedHeaderIndex: number;\n    // (undocumented)\n    suggestions: ISuggestionModel<T>[];\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Parent-Passed Classes in React Components\nDESCRIPTION: Demonstrates how to properly apply classes passed from a parent component, ensuring they take precedence over component-defined classes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/StylingComponents.stories.mdx#2025-04-20_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { mergeClasses } from '@fluentui/react-components';\n\nfunction Component(props) {\n  const classes = useStyles();\n\n  return <div className={mergeClasses(classes.root, props.className /* these definitions have higher precedence */)} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Primary Action on ListItem in JSX\nDESCRIPTION: Use the onAction callback to register the primary action for a list item. This handles both click and Enter key events, providing consistent behavior across interaction methods.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-list/stories/src/List/ListBestPractices.md#2025-04-20_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ListItem onAction={handlePrimaryAction}>\n```\n\n----------------------------------------\n\nTITLE: Creating Field with Manual Hookup in JSX\nDESCRIPTION: This example demonstrates a manual approach to create fields without automatic attribute management, showing how to connect relational attributes for custom controls explicitly within a Field component using Field, FieldLabel, and FieldMessage components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/field-custom-components.md#2025-04-20_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst id = useId('my-input');\n\n<Field orientation=\"horizontal\">\n  <FieldLabel htmlFor={id} required>\n    Example Field\n  </FieldLabel>\n  <MyInput id={id} defaultValue=\"...\" required aria-invalid aria-describedby={`${id}-message ${id}-hint`} />\n  <FieldMessage id={`${id}-message`} state=\"error\">\n    Input is invalid\n  </FieldMessage>\n  <FieldMessage id={`${id}-hint`}>Here's some hint text</FieldMessage>\n</Field>;\n```\n\n----------------------------------------\n\nTITLE: Basic InteractionTag Usage\nDESCRIPTION: This snippet demonstrates the basic usage of the `<InteractionTag>` component. It includes an `<InteractionTagPrimary>` component to hold the tag's content, enabling interaction features.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tags/library/README.md#2025-04-20_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<InteractionTag>\n  <InteractionTagPrimary>Content</InteractionTagPrimary>\n</InteractionTag>\n```\n\n----------------------------------------\n\nTITLE: Defining ThemeGenerator Static Class\nDESCRIPTION: Static utility class for generating theme code and configurations in different formats including JSON, SASS and PowerShell.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_270\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class ThemeGenerator {\n    static getThemeAsCode(slotRules: IThemeRules): any;\n    static getThemeAsCodeWithCreateTheme(slotRules: IThemeRules): any;\n    static getThemeAsJson(slotRules: IThemeRules): any;\n    static getThemeAsSass(slotRules: IThemeRules): any;\n    static getThemeForPowerShell(slotRules: IThemeRules): any;\n    static insureSlots(slotRules: IThemeRules, isInverted: boolean): void;\n    static setSlot(rule: IThemeSlotRule, color: string | IColor, isInverted?: boolean, isCustomization?: boolean, overwriteCustomColor?: boolean): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Checkbox Variables and Enums\nDESCRIPTION: Defines enumeration types for checkbox label position, shape, and size to provide configuration options for the component\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/checkbox/README.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst CheckboxLabelPosition = { before: \"before\", after: \"after\" }\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst CheckboxShape = { square: \"square\", circular: \"circular\" }\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst CheckboxSize = { medium: \"medium\", large: \"large\" }\n```\n\n----------------------------------------\n\nTITLE: API Definition for @fluentui/react-text Package in TypeScript\nDESCRIPTION: Complete API report for the @fluentui/react-text package generated by API Extractor. It defines text components, presets, styling utilities, and type definitions used to render and style text in a FluentUI application.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-text/library/etc/react-text.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ComponentProps } from '@fluentui/react-utilities';\nimport type { ComponentState } from '@fluentui/react-utilities';\nimport type { ForwardRefComponent } from '@fluentui/react-utilities';\nimport * as React_2 from 'react';\nimport type { Slot } from '@fluentui/react-utilities';\nimport { SlotClassNames } from '@fluentui/react-utilities';\n\n// @public\nexport const Body1: React_2.FunctionComponent<TextPresetProps>;\n\n// @public (undocumented)\nexport const body1ClassNames: SlotClassNames<TextSlots>;\n\n// @public\nexport const Body1Strong: React_2.FunctionComponent<TextPresetProps>;\n\n// @public (undocumented)\nexport const body1StrongClassNames: SlotClassNames<TextSlots>;\n\n// @public\nexport const Body1Stronger: React_2.FunctionComponent<TextPresetProps>;\n\n// @public (undocumented)\nexport const body1StrongerClassNames: SlotClassNames<TextSlots>;\n\n// @public\nexport const Body2: React_2.FunctionComponent<TextPresetProps>;\n\n// @public (undocumented)\nexport const body2ClassNames: SlotClassNames<TextSlots>;\n\n// @public\nexport const Caption1: React_2.FunctionComponent<TextPresetProps>;\n\n// @public (undocumented)\nexport const caption1ClassNames: SlotClassNames<TextSlots>;\n\n// @public\nexport const Caption1Strong: React_2.FunctionComponent<TextPresetProps>;\n\n// @public (undocumented)\nexport const caption1StrongClassNames: SlotClassNames<TextSlots>;\n\n// @public\nexport const Caption1Stronger: React_2.FunctionComponent<TextPresetProps>;\n\n// @public (undocumented)\nexport const caption1StrongerClassNames: SlotClassNames<TextSlots>;\n\n// @public\nexport const Caption2: React_2.FunctionComponent<TextPresetProps>;\n\n// @public (undocumented)\nexport const caption2ClassNames: SlotClassNames<TextSlots>;\n\n// @public\nexport const Caption2Strong: React_2.FunctionComponent<TextPresetProps>;\n\n// @public (undocumented)\nexport const caption2StrongClassNames: SlotClassNames<TextSlots>;\n\n// @public\nexport const Display: React_2.FunctionComponent<TextPresetProps>;\n\n// @public (undocumented)\nexport const displayClassNames: SlotClassNames<TextSlots>;\n\n// @public\nexport const LargeTitle: React_2.FunctionComponent<TextPresetProps>;\n\n// @public (undocumented)\nexport const largeTitleClassNames: SlotClassNames<TextSlots>;\n\n// @public\nexport const renderText_unstable: (state: TextState) => JSX.Element;\n\n// @public\nexport const Subtitle1: React_2.FunctionComponent<TextPresetProps>;\n\n// @public (undocumented)\nexport const subtitle1ClassNames: SlotClassNames<TextSlots>;\n\n// @public\nexport const Subtitle2: React_2.FunctionComponent<TextPresetProps>;\n\n// @public (undocumented)\nexport const subtitle2ClassNames: SlotClassNames<TextSlots>;\n\n// @public\nexport const Subtitle2Stronger: React_2.FunctionComponent<TextPresetProps>;\n\n// @public (undocumented)\nexport const subtitle2StrongerClassNames: SlotClassNames<TextSlots>;\n\n// @public\nconst Text_2: ForwardRefComponent<TextProps>;\nexport { Text_2 as Text }\n\n// @public (undocumented)\nexport const textClassNames: SlotClassNames<TextSlots>;\n\n// @public\nexport type TextPresetProps = Omit<TextProps, 'font' | 'size' | 'weight'>;\n\n// @public\nexport type TextProps = ComponentProps<TextSlots> & {\n    align?: 'start' | 'center' | 'end' | 'justify';\n    block?: boolean;\n    font?: 'base' | 'monospace' | 'numeric';\n    italic?: boolean;\n    size?: 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900 | 1000;\n    strikethrough?: boolean;\n    truncate?: boolean;\n    underline?: boolean;\n    weight?: 'regular' | 'medium' | 'semibold' | 'bold';\n    wrap?: boolean;\n};\n\n// @public\nexport type TextSlots = {\n    root: Slot<'span', 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'p' | 'pre' | 'strong' | 'b' | 'em' | 'i'>;\n};\n\n// @public\nexport type TextState = ComponentState<TextSlots> & Required<Pick<TextProps, 'align' | 'block' | 'font' | 'italic' | 'size' | 'strikethrough' | 'truncate' | 'underline' | 'weight' | 'wrap'>>;\n\n// @public\nexport const Title1: React_2.FunctionComponent<TextPresetProps>;\n\n// @public (undocumented)\nexport const title1ClassNames: SlotClassNames<TextSlots>;\n\n// @public\nexport const Title2: React_2.FunctionComponent<TextPresetProps>;\n\n// @public (undocumented)\nexport const title2ClassNames: SlotClassNames<TextSlots>;\n\n// @public\nexport const Title3: React_2.FunctionComponent<TextPresetProps>;\n\n// @public (undocumented)\nexport const title3ClassNames: SlotClassNames<TextSlots>;\n\n// @public\nexport const useText_unstable: (props: TextProps, ref: React_2.Ref<HTMLElement>) => TextState;\n\n// @public\nexport const useTextStyles_unstable: (state: TextState) => TextState;\n\n// (No @packageDocumentation comment for this package)\n```\n\n----------------------------------------\n\nTITLE: Importing Card Components in JavaScript\nDESCRIPTION: Basic import statement for Fluent UI React Card components including Card, CardPreview, CardHeader, and CardFooter.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-card/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Card, CardPreview, CardHeader, CardFooter } from \"@fluentui/react-components';\"\n```\n\n----------------------------------------\n\nTITLE: Using SwatchPicker Component in a React App\nDESCRIPTION: This snippet defines a function component 'App' that utilizes the 'SwatchPicker' component to allow color selection. It manages selected color value using React state and updates the background color based on user's selection. Dependencies include React and Fluent UI React components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-swatch-picker/library/README.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SwatchPicker, ColorSwatch, SwatchPickerOnSelectEventHandler } from '@fluentui/react-components';\n\nexport const App = () => {\n  const [selectedValue, setSelectedValue] = React.useState('00B053');\n  const [selectedColor, setSelectedColor] = React.useState('#00B053');\n  const handleSelect: SwatchPickerOnSelectEventHandler = (_, data) => {\n    setSelectedValue(data.selectedValue);\n    setSelectedColor(data.selectedColor);\n  };\n\n  return (\n    <>\n      <SwatchPicker aria-label=\"SwatchPicker default\" selectedValue={selectedValue} onSelectionChange={handleSelect}>\n        <ColorSwatch color=\"#FF1921\" value=\"FF1921\" aria-label=\"red\" />\n        <ColorSwatch color=\"#FFC12E\" value=\"FFC12E\" aria-label=\"orange\" />\n        <ColorSwatch color=\"#FEFF37\" value=\"FEFF37\" aria-label=\"yellow\" />\n        <ColorSwatch disabled color=\"#90D057\" value=\"90D057\" aria-label=\"light green\" />\n        <ColorSwatch color=\"#00B053\" value=\"00B053\" aria-label=\"green\" />\n        <ColorSwatch color=\"#00AFED\" value=\"00AFED\" aria-label=\"light blue\" />\n        <ColorSwatch color=\"#006EBD\" value=\"006EBD\" aria-label=\"blue\" />\n        <ColorSwatch color=\"#011F5E\" value=\"011F5E\" aria-label=\"dark blue\" />\n        <ColorSwatch color=\"#712F9E\" value=\"712F9E\" aria-label=\"purple\" />\n      </SwatchPicker>\n\n      <div\n        style={{\n          backgroundColor: selectedColor,\n        }}\n      />\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Customized Separators with FluentUI React Native\nDESCRIPTION: A complete example showing how to implement and customize Separator components in a React Native application. The code demonstrates creating colored separators, integrating them with buttons and text, and applying proper styling through StyleSheet. Shows both vertical and horizontal separator usage with custom styling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/SeparatorPage/docs/cross/SeparatorUsage.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\nimport { Button, Separator, Text } from '@fluentui/react-native';\nimport { View, StyleSheet } from 'react-native';\n\nconst BlueSeparator = Separator.customize({ tokens: { color: 'blue' } });\nconst RedSeparator = Separator.customize({ tokens: { color: 'red' } });\n\nconst App = () => {\n  return (\n    <View style={styles.stackStyle} gap={5}>\n      <View gap={4} style={styles.separatorStackStyle}>\n        <Button content=\"Button4\" />\n        <BlueSeparator vertical />\n        <Button content=\"Button5\" />\n        <RedSeparator vertical />\n        <Button content=\"Button6\" />\n        <Separator />\n      </View>\n      <Text>This is a text element</Text>\n      <Separator />\n      <Button content=\"This button has longer text\" />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  stackStyle: {\n    borderWidth: 1,\n    borderColor: '#bdbdbd',\n    paddingVertical: 8,\n    paddingHorizontal: 12,\n    margin: 8\n  },\n  separatorStackStyle: {\n    height: 200,\n    flexDirection: 'row',\n    justifyContent: 'space-evenly'\n  }\n});\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring Motion API in Fluent UI Components\nDESCRIPTION: Demonstrates how to use @fluentui/react-motion for animation control in Fluent UI components like Dialog, Drawer, and Toast. Components with motion slots allow customization of animation behavior.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-motion/stories/src/Motion/MotionDescription.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Example of motion configuration (conceptual)\ncomponent.motionSlot = {\n  // Customize animation settings\n  duration: 300,\n  type: 'fade'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Page with Fluent UI in Next.js\nDESCRIPTION: This TypeScript snippet demonstrates a simple Next.js page component utilizing Fluent UI. It imports a Button component from Fluent UI and returns it wrapped in a React component, illustrating usage of Fluent UI components in a Next.js environment.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/SSR/NextJSAppDir.stories.mdx#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { Button } from '@fluentui/react-components';\n\nexport default function Home() {\n  return <Button>Hello everyone</Button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Render Props with Shorthand Collections\nDESCRIPTION: Shows how render props can be used with components accepting collections, enabling complex slot customization\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/docs/src/pages/ShorthandProps.mdx#2025-04-20_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Menu\n  items={[\n    {\n      key: 'first',\n      content: 'First',\n      tooltip: 'First item',\n      children: (Component, props) => {\n        const { tooltip, ...rest } = props;\n        return <Tooltip content={tooltip} trigger={<Component {...props} />} />;\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: TagPickerOptionGroup Class Names\nDESCRIPTION: Defines the class names for the TagPickerOptionGroup component's slots, used for styling the component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport const tagPickerOptionGroupClassNames: SlotClassNames<TagPickerOptionGroupSlots>;\"\n```\n\n----------------------------------------\n\nTITLE: Basic Accordion Implementation Example\nDESCRIPTION: Example showing basic usage of Accordion component with two panels and their corresponding DOM structure.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-accordion/library/docs/Spec.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst accordion = (\n  <Accordion>\n    <AccordionItem>\n      <AccordionHeader>\n        First Panel\n      </AccordionHeader>\n      <AccordionPanel>\n        This is the content of the first Panel\n      </AccordionPanel>\n    </AccordionItem>\n    <AccordionItem>\n      <AccordionHeader>\n        Second Panel\n      </AccordionHeader>\n      <AccordionPanel>\n        This is the content of the second Panel\n      </AccordionPanel>\n    </AccordionItem>\n  <Accordion>\n)\n```\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <div role=\"heading\">\n    <div role=\"button\" aria-expanded=\"false\" aria-controls=\"sect1\" id=\"accordion1\">\n      <svg>Chevron Icon</svg>\n      First Panel\n    </div>\n  </div>\n  <div id=\"sect1\" role=\"region\" aria-labelledby=\"accordion1\">This is the content of the first Panel</div>\n  <div role=\"heading\">\n    <div role=\"button\" aria-expanded=\"false\" aria-controls=\"sect2\" id=\"accordion2\">\n      <svg>Chevron Icon</svg>\n      Second Panel\n    </div>\n  </div>\n  <div id=\"sect2\" role=\"region\" aria-labelledby=\"accordion2\">This is the content of the second Panel</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining FlatTree and FlatTreeItem Components in TypeScript\nDESCRIPTION: This snippet defines the FlatTree and FlatTreeItem components, which are variations of the Tree and TreeItem components designed for flat tree structures. It includes props, state types, and rendering functions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tree/library/etc/react-tree.api.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const FlatTree: ForwardRefComponent<FlatTreeProps>;\n\n// @public (undocumented)\nexport type FlatTreeProps = ComponentProps<TreeSlots> & {\n    navigationMode?: 'tree' | 'treegrid';\n    appearance?: 'subtle' | 'subtle-alpha' | 'transparent';\n    size?: 'small' | 'medium';\n    openItems?: Iterable<TreeItemValue>;\n    onOpenChange?(event: TreeOpenChangeEvent, data: TreeOpenChangeData): void;\n    onNavigation?(event: TreeNavigationEvent_unstable, data: TreeNavigationData_unstable): void;\n    selectionMode?: SelectionMode_2;\n    checkedItems?: Iterable<TreeItemValue | [TreeItemValue, TreeSelectionValue]>;\n    onCheckedChange?(event: TreeCheckedChangeEvent, data: TreeCheckedChangeData): void;\n};\n\n// @public\nexport const FlatTreeItem: ForwardRefComponent<FlatTreeItemProps>;\n\n// @public\nexport type FlatTreeItemProps = TreeItemProps & {\n    value: TreeItemValue;\n    'aria-level': number;\n    'aria-setsize': number;\n    'aria-posinset': number;\n};\n\n// @public (undocumented)\nexport const renderFlatTree_unstable: (state: FlatTreeState, contextValues: FlatTreeContextValues) => JSX.Element;\n```\n\n----------------------------------------\n\nTITLE: Using Context within React Portals\nDESCRIPTION: Illustrates the ability of React Portals to interact with context providers and consumers, allowing for seamless integration of context-aware components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-portal/library/docs/Spec.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<ContextProvider>\n  <Portal>\n    <ContextConsumer /> // should be able to access context\n  </Portal>\n</ContextProvider>\n```\n\n----------------------------------------\n\nTITLE: Define Alignment type\nDESCRIPTION: Defines a type called `Alignment` which is a union of string literals representing different alignment options: 'top', 'bottom', 'start', 'end', and 'center'. This type is likely used to specify the alignment of a positioned element relative to its target.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-positioning/etc/react-positioning.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type Alignment = 'top' | 'bottom' | 'start' | 'end' | 'center';\n```\n\n----------------------------------------\n\nTITLE: Inserting CSS Variables into Document Head\nDESCRIPTION: This snippet shows how to insert CSS variables into the `<head>` of the document as a CSS rule for a class unique to each `ThemeProvider`. The classname is passed down to children via context, allowing Portals to access theme values. Requires `themeToCssVars` function to convert theme to CSS vars.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/theme-css-variable-insertion.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n\"const cssVars = themeToCssVars(theme);\nconst cssRule = {...};\n// result: .theme-provider { --css-var: '#fff' }\nstyleEl.sheet.insertRule(cssRule);\n\n<head>\n  <style id=\\\"theme-provider-1\\\" />\n  <style id=\\\"theme-provider-2\\\" />\n  <style id=\\\"theme-provider-3\\\" />\n</head>\"\n```\n\n----------------------------------------\n\nTITLE: Comparing Date Parts - TypeScript\nDESCRIPTION: This function provides a way to compare the date parts of two Date objects, returning a numeric comparison result. It is useful for sorting or ordering dates.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/date-time-utilities/etc/date-time-utilities.api.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport function compareDatePart(date1: Date, date2: Date): number;\n```\n\n----------------------------------------\n\nTITLE: Defining ARIA Attributes for Open Dropdown in Markdown\nDESCRIPTION: This snippet defines the ARIA attributes for an open dropdown with a selected option. It specifies the roles and states for the combobox and selected option.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/stories/src/Dropdown/DropdownAccessibility.stories.mdx#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Name           | Role     | States and properties  |\n| -------------- | -------- | ---------------------- |\n| (2) Best fruit | combobox | `aria-expanded=\"true\"` |\n| (3) Banana     | option   | `aria-selected=\"true\"` |\n```\n\n----------------------------------------\n\nTITLE: ProgressBar Props Definition\nDESCRIPTION: Defines the ProgressBarProps type, which extends ComponentProps and includes properties for shape, value, max, thickness, and color. It omits the 'size' property from ComponentProps and makes 'shape', 'value', 'max', 'thickness', and 'color' optional.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-progress/library/etc/react-progress.api.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n// @public\nexport type ProgressBarProps = Omit<ComponentProps<ProgressBarSlots>, 'size'> & {\n  shape?: 'rounded' | 'square';\n  value?: number;\n  max?: number;\n  thickness?: 'medium' | 'large';\n  color?: 'brand' | 'success' | 'warning' | 'error';\n};\n```\n```\n\n----------------------------------------\n\nTITLE: TypeScript: Switch Slots Type\nDESCRIPTION: Defines the slots interface for the Switch component, specifying the customizable parts (root, indicator, input, label) using the Slot type from @fluentui/react-utilities. The root, indicator, and input slots are non-nullable, while the label slot is optional.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-switch/library/etc/react-switch.api.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport type SwitchSlots = {\n    root: NonNullable<Slot<'div'>>;\n    indicator: NonNullable<Slot<'div'>>;\n    input: NonNullable<Slot<'input'>>;\n    label?: Slot<typeof Label>;\n};\"\n```\n\n----------------------------------------\n\nTITLE: Context Management for RadioGroup with Hooks\nDESCRIPTION: This snippet provides context management functionalities for the RadioGroup component, enabling components within the group to access shared state values, ensuring they react dynamically to user interaction.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-radio/library/etc/react-radio.api.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const useRadioGroupContextValue_unstable: () => RadioGroupContextValue;\n\n// @public (undocumented)\nexport const useRadioGroupContextValues: (state: RadioGroupState) => RadioGroupContextValues;\n```\n\n----------------------------------------\n\nTITLE: Standalone Menu Expected DOM Output - HTML\nDESCRIPTION: This snippet shows the expected HTML output for the standalone menu implementation, demonstrating the role and structure of menu items.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/library/docs/Spec.md#2025-04-20_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<div role=\"menu\">\n  <div role=\"menuitem\" tabindex=\"0\">Option 1</div>\n  <div role=\"menuitem\" tabindex=\"-1\">Option 2</div>\n  <div role=\"menuitem\" tabindex=\"-1\">Option 3</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Style Evaluation Example with Imported Values\nDESCRIPTION: Example showing how build-time style evaluation works with imported values and helper functions. This demonstrates why additional configurations may be needed for TypeScript and other language features.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/BuildTimeStyles.stories.mdx#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// constants.ts\nexport const PADDING_TOKEN = '1px';\n\n// common.ts\nexport const commonStyles = () => ({\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n});\n\n// styles.ts\nimport { makeStyles } from '@fluentui/react-components';\nimport { PADDING_TOKEN } from './constants';\nimport { commonStyles } from './common';\n\nconst useStyles = makeStyles({\n  root: { paddingLeft: PADDING_TOKEN, ...commonStyles() },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing MessageBar in Northstar (v0)\nDESCRIPTION: Example of how to use the Alert component in Northstar (v0) to create a message bar with warning icon, content, dismissal action, and multiple action buttons.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-message-bar/library/docs/Spec.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Alert\n  warning\n  icon={<ExclamationTriangleIcon />}\n  content=\"This is an alert with a warning icon\"\n  dismissAction={{ 'aria-label': 'close' }}\n  actions={[\n    {\n      content: 'Privacy policy',\n      key: 'privacy',\n      primary: true,\n    },\n    'Settings',\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Label with Input Example in React\nDESCRIPTION: Complete example showing how to use the Label component with an input field, including required and strong styling properties, and proper accessibility with htmlFor/id association.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-label/library/README.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { Label } from '@fluentui/react-components';\nimport { useId } from '@fluentui/react-utilities';\n\nexport const labelExample = () => {\n  const inputId = useId('firstNameLabel-');\n\n  return (\n    <>\n      <Label htmlfor={inputId} required strong>\n        First Name\n      </Label>\n      <input id={inputId} />\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Current Render Issue in JavaScript\nDESCRIPTION: This snippet shows how the current rendering approach can lead to unexpected behavior with children props.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/slot-children-render-function.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction renderComponent(state) {\n  const { slots, slotProps } = getSlots(state);\n\n  return <slots.root {...slotProps.root}>Foo</slots.root>;\n}\n\nconst template = renderComponent({ root: { children: 'Baz' } });\n\ntemplate.props.children === 'Baz'; // false\ntemplate.props.children === 'Foo'; // true\n\n// 💥 \"Foo\" wins over input passed by a user\n```\n\n----------------------------------------\n\nTITLE: Exporting Class Names for FluentUI Checkbox in TypeScript\nDESCRIPTION: This TypeScript snippet exports static classNames for each slot of a Checkbox component using an object, replacing the old {component}ClassName export methodology. It relies on the custom 'ClassNames' helper type.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/static-classes-on-slots.md#2025-04-20_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const checkboxClassNames: ClassNames<CheckboxSlots> = {\n  root: 'fui-Checkbox',\n  label: 'fui-Checkbox__label',\n  input: 'fui-Checkbox__input',\n  indicator: 'fui-Checkbox__indicator',\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing ProgressBar Component with Thickness\nDESCRIPTION: This snippet demonstrates how to initialize the ProgressBar component from the Fluent UI library with a specified thickness. It imports the ProgressBar and utilizes it within a functional component known as App.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-progress/library/docs/Spec.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ProgressBar } from '@fluentui/react-progress';\n\nfunction App() {\n  return <ProgressBar thickness=\"large\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Property Mapping Table for Slider Component in Fluent UI Versions\nDESCRIPTION: This table maps properties of the Slider component across Fluent UI versions 8, 0, and 9. It shows how different props have changed or been removed in the latest version.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-slider/library/docs/MIGRATION.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| v8 `Slider`         | v0 `Slider`      | v9 `Slider`      |\n| ------------------- | ---------------- | ---------------- |\n|                     | `accessibility`  |                  |\n| `ariaLabel`         | `aria-label`     | `aria-label`     |\n| `ariaValueText`     | `aria-valuetext` | `aria-valuetext` |\n| `buttonProps`       |                  |                  |\n| `componentRef`      | `inputRef`       | `ref`            |\n| `defaultLowerValue` |                  |                  |\n| `inline`            |                  |                  |\n| `input`             |                  | `input`          |\n| `label`             | `label`          |                  |\n| `lowerValue`        |                  |                  |\n| `onChanged`         |                  | `onChange`       |\n| `origin`            |                  |                  |\n| `originFromZero`    |                  |                  |\n| `ranged`            |                  |                  |\n| `showValue`         |                  |                  |\n| `snapToStep`        |                  | `step`           |\n| `styles`            |                  | `className`      |\n| `theme`             |                  |                  |\n| `valueFormat`       |                  |                  |\n```\n\n----------------------------------------\n\nTITLE: Updated RadioGroup in Fluent Web Components V3\nDESCRIPTION: The HTML snippet demonstrates the new setup for the 'fluent-radio-group' in Fluent Web Components version 3, using 'fluent-field' for label positioning and orientation. It shows flexible, slot-based markup for customizing radio button groups.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/_docs/developer/migration.stories.mdx#2025-04-20_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<fluent-field>\n  <label slot=\"label\" for=\"radio-group\">Favorite Fruit</label>\n  <fluent-radio-group\n    slot=\"input\"\n    id=\"radio-group\"\n    aria-labelledby=\"radio-group--label\"\n    orientation=\"vertical\"\n    name=\"favorite-fruit\"\n  >\n    <fluent-field label-position=\"after\">\n      <label slot=\"label\" for=\"radio-group--apple\">Apple</label>\n      <fluent-radio slot=\"input\" id=\"radio-group--apple\" name=\"favorite-fruit\" value=\"apple\"></fluent-radio>\n    </fluent-field>\n\n    <fluent-field label-position=\"after\">\n      <label slot=\"label\" for=\"radio-group--banana\">Banana</label>\n      <fluent-radio slot=\"input\" id=\"radio-group--banana\" name=\"favorite-fruit\" value=\"banana\"></fluent-radio>\n    </fluent-field>\n  </fluent-radio-group>\n</fluent-field>\n```\n\n----------------------------------------\n\nTITLE: Defining TextInput Hook Types for Shared Input/TextArea Implementation in TypeScript\nDESCRIPTION: A TypeScript type definition that could be used to share props and behavior between Input and TextArea components. It creates a generic type that handles both HTMLInputElement and HTMLTextAreaElement with appropriate attribute types.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-input/library/docs/Spec-variants.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TextInputSlots<\n  TInput extends HTMLInputElement | HTMLTextAreaElement,\n  TInputAttributes = TInput extends HTMLInputElement\n    ? React.InputHTMLAttributes<TInput>\n    : React.TextAreaHTMLAttributes<TInput>,\n> = {\n  root: ComponentSlotProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n  input: ComponentSlotProps<TInputAttributes, TInput>;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing useDrawer_unstable Hook in Fluent UI (TSX)\nDESCRIPTION: This code snippet defines a custom hook 'useDrawer_unstable' for creating a Drawer component. It utilizes the 'useMotion' hook to handle animations and returns an object with root component properties and motion controls.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/component-transitions-on-mount-or-unmount.md#2025-04-20_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport const useDrawer_unstable = ({ open }: InlineDrawerProps, ref: React.Ref<HTMLDivElement>): InlineDrawerState => {\n  // Call useMotion with given motion values\n  const motion = useMotion(open);\n\n  return {\n    components: {\n      root: 'div',\n    },\n\n    root: slot.always(\n      getNativeElementProps('div', {\n        ref: useMergedRefs(ref, motion.ref),\n        ...props,\n      }),\n      { elementType: 'div' },\n    ),\n\n    motion,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Card DOM Structure\nDESCRIPTION: The fundamental HTML structure for the Card component showing the basic wrapper with role attribute.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-card/library/docs/Spec.md#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div role=\"group\">\n  {children}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Tooltip with ARIA Attributes in HTML\nDESCRIPTION: This HTML snippet demonstrates how to create a button that shows a tooltip with `aria-describedby`. This ensures that screen readers can associate the tooltip description with the button for better accessibility. The tooltip is always rendered in the DOM, allowing for consistent identification even when it's not visible.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tooltip/library/docs/Spec.md#2025-04-20_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <!-- App root -->\n  <div>\n    <button aria-describedby=\"tooltip-2\" onPointerEnter=\"{...}\" onPointerLeave=\"{...}\" onFocus=\"{...}\" onBlur=\"{...}\">\n      The Button\n    </button>\n  </div>\n\n  <!-- Portal for Tooltip -->\n  <div>\n    <div role=\"tooltip\" id=\"tooltip-2\" class=\"{tooltip}\">\n      <div class=\"{arrow}\"></div>\n      Example description of the button\n    </div>\n  </div>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Defining Accordion Component Props Interface\nDESCRIPTION: TypeScript interface definition for the main Accordion component props, including navigation, multiple panel support, and various customization options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-accordion/library/docs/Spec.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type AccordionProps = ComponentProps &\n  React.HTMLAttributes<HTMLElement> & {\n    navigation?: 'linear' | 'circular';\n    multiple?: boolean;\n    collapsible?: boolean;\n    openItems?: AccordionItemValue | AccordionItemValue[];\n    defaultOpenItems?: AccordionItemValue | AccordionItemValue[];\n    size?: 'small' | 'medium' | 'large' | 'extra-large';\n    button?: ShorthandProps<React.HTMLAttributes<HTMLElement>>;\n    expandIcon?: ShorthandProps<AccordionHeaderExpandIconProps>;\n    expandIconPosition?: 'start' | 'end';\n    icon?: ShorthandProps<AccordionHeaderIconProps>;\n    inline?: boolean;\n    onToggle?(event: AccordionToggleEvent, data: AccordionToggleData): void;\n  };\n```\n\n----------------------------------------\n\nTITLE: Enhancing Badge Accessibility with Hidden Text in JSX\nDESCRIPTION: Shows two methods to improve badge accessibility: adding visually hidden text for context, and using aria-label on the parent element to provide a complete description.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/stories/src/Badge/BadgeBestPractices.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<button>\n  Inbox\n  <Badge>6<span class=\"visuallyHidden\"> unread messages</span></Badge>\n</button>\n\n<button aria-label=\"Inbox, 6 unread messages\">\n  Inbox\n  <Badge>6</Badge>\n</button>\n```\n\n----------------------------------------\n\nTITLE: Cartesian Chart Props Interface\nDESCRIPTION: Defines the properties for the CartesianChart component. Includes props for callouts, class names, component refs, date formatting, legend customization, height and width, margins, reflowing, axis labels, styling, SVG properties, tick formatting, time locale, and axis titles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charts/library/etc/react-charts.api.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport interface CartesianChartProps {\n    calloutProps?: Partial<ChartPopoverProps>;\n    calloutPropsPerDataPoint?: (dataPointCalloutProps: any) => ChartPopoverProps;\n    className?: string;\n    componentRef?: React_2.RefObject<Chart>;\n    customDateTimeFormatter?: (dateTime: Date) => string;\n    dateLocalizeOptions?: Intl.DateTimeFormatOptions;\n    enabledLegendsWrapLines?: boolean;\n    height?: number;\n    hideLegend?: boolean;\n    hideTickOverlap?: boolean;\n    hideTooltip?: boolean;\n    href?: string;\n    // (undocumented)\n    legendProps?: Partial<LegendsProps>;\n    // (undocumented)\n    legendsOverflowText?: any;\n    margins?: Margins;\n    noOfCharsToTruncate?: number;\n    parentRef?: HTMLElement | null;\n    reflowProps?: {\n        mode: 'none' | 'min-width';\n    };\n    rotateXAxisLables?: boolean;\n    roundedTicks?: boolean;\n    secondaryYAxistitle?: string;\n    secondaryYScaleOptions?: {\n        yMinValue?: number;\n        yMaxValue?: number;\n    };\n    showXAxisLablesTooltip?: boolean;\n    strokeWidth?: number;\n    styles?: CartesianChartStyles;\n    svgProps?: React_2.SVGProps<SVGSVGElement>;\n    tickFormat?: string;\n    tickPadding?: number;\n    tickValues?: number[] | Date[] | string[] | undefined;\n    timeFormatLocale?: TimeLocaleDefinition;\n    useUTC?: string | boolean;\n    width?: number;\n    wrapXAxisLables?: boolean;\n    xAxisTickCount?: number;\n    xAxisTickPadding?: number;\n    xAxistickSize?: number;\n    xAxisTitle?: string;\n    xMaxValue?: number;\n    yAxisTickCount?: number;\n    yAxisTickFormat?: any;\n    yAxisTitle?: string;\n    yMaxValue?: number;\n    yMinValue?: number;\n}\"\n```\n\n----------------------------------------\n\nTITLE: Tag Picker List Render Function\nDESCRIPTION: This is the render function for the TagPickerList component. It takes the state and renders the list of options for the TagPicker.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const renderTagPickerList_unstable: (state: TagPickerListState) => JSX.Element;\"\n```\n\n----------------------------------------\n\nTITLE: Using Fluent UI Theme SASS Variables in SCSS\nDESCRIPTION: This example shows how to import and use the SASS variables from @fluentui/react-theme-sass package in your SCSS files, accessing the design tokens for styling components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-theme-sass/README.md#2025-04-20_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@import '@fluentui/react-theme-sass';\n\n.brandedElement {\n  color: $colorBrandForeground1;\n  background: $colorBrandBackground;\n  border-radius: $borderRadiusLarge;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Popup Component Using React with Fluent UI's usePopper Hook\nDESCRIPTION: This snippet showcases a React functional component named PopupExample, which uses the usePopper hook to manage the positioning of a popup. The component toggles the visibility of the popup based on button clicks, utilizing React state for managing its open/closed status.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-positioning/README.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { usePopper } from '@fluentui/react-positioning';\n\nfunction PopupExample: React.FC = ({ children }) => {\n  const {targetRef, containerRef} = usePopper();\n  const [open, setOpen] = React.useState(false);\n\n  const onClick = () => setOpen(s => !s);\n  return (\n    <> \n      <button ref={targetRef} onClick={onClick}> Toggle popup </button>\n      { open && <div ref={containerRef}>{children}</div> }\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Depths from Fluent UI Theme\nDESCRIPTION: Demonstrates using the Depths constant from the Fluent UI theme package for elevation effects.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Styles/ElevationPage/docs/web/ElevationImplementation.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Depths } from '@fluentui/theme';\n\n<div style={{ boxShadow: Depths.depth8 }} />;\n```\n\n----------------------------------------\n\nTITLE: Implementing useBoolean Hook in TypeScript\nDESCRIPTION: Definition of the useBoolean hook, which manages a boolean state and provides callbacks for setting it to true, false, or toggling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-hooks/README.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useBoolean(initialState: boolean): [boolean, IUseBooleanCallbacks];\n\ninterface IUseBooleanCallbacks {\n  setTrue: () => void;\n  setFalse: () => void;\n  toggle: () => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IFocusZone Interface in TypeScript\nDESCRIPTION: Defines the IFocusZone interface, detailing methods to control focus management in a FocusZone. Methods include various focus operations like focusing specific elements or the last element within the zone, and setting focus alignment. This interface provides a contract for implementing custom focus logic.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-focus/etc/react-focus.api.md#2025-04-20_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\\nexport interface IFocusZone {\\n    focus(forceIntoFirstElement?: boolean, bypassHiddenElements?: boolean): boolean;\\n    focusElement(childElement?: HTMLElement, forceAlignment?: boolean): boolean;\\n    focusLast(): boolean;\\n    setFocusAlignment(point: Point): void;\\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing FluentUI React Component with Stack\nDESCRIPTION: Creates a React functional component that renders a Stack with a FooLabel child component. Demonstrates importing and using FluentUI components in a React application.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-monaco-editor/src/transpiler/examples/customPackagesFluent.txt#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\nimport { Stack } from '@fluentui/react';\nimport { FooLabel } from 'foo';\n\nexport const FooExample = () => {\n  return (\n    <Stack>\n      <FooLabel>I'm a FooLabel</FooLabel>\n    </Stack>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: MenuList Composure in Fluent React v9\nDESCRIPTION: This HTML snippet demonstrates the composition of a MenuList component in Fluent React v9. It shows how to structure menu items within the MenuList container.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/menu-list/README.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<MenuList>\n  <menuitem>Item 1</menuitem>\n  <menuitem>Item 2</menuitem>\n  <menuitem>Item 3</menuitem>\n</MenuList>\n```\n\n----------------------------------------\n\nTITLE: Rendering AvatarGroup Component in HTML\nDESCRIPTION: This snippet showcases how the AvatarGroup component translates into HTML elements, including the necessary classes and roles for accessibility. It highlights the structure of the rendered AvatarGroup, AvatarGroupItem, and other related components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-avatar/library/docs/SPEC-AvatarGroup.md#2025-04-20_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"fui-AvatarGroup\" role=\"group\">\n  <div class=\"fui-AvatarGroupItem\">\n    <Avatar />\n  </div>\n  <div class=\"fui-AvatarGroupItem\">\n    <Avatar />\n  </div>\n  <button>+1</button>\n</div>\n\n// on document.body\n<div class=\"fui-AvatarGroupPopover\" role=\"dialog\" aria-label=\"Overflow\">\n  <ul>\n    <li class=\"fui-AvatarGroupItem\">\n      <Avatar />\n      <label />\n    </li>\n    <li class=\"fui-AvatarGroupItem\">\n      <Avatar />\n      <label />\n    </li>\n  </ul>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Fixing Tree component roving tabindexes in React\nDESCRIPTION: This patch addresses an issue where the roving tabindexes in the Tree component were not correctly refreshed when the current element was unmounted. This ensures proper keyboard navigation and accessibility within the Tree component. This was fixed by a pull request.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tree/library/CHANGELOG.md#2025-04-20_snippet_6\n\nLANGUAGE: none\nCODE:\n```\n\"fix(Tree): Roving tabindexes should be refreshed if current element is unmounted ([PR #31918](https://github.com/microsoft/fluentui/pull/31918) by lingfangao@hotmail.com)\"\n```\n\n----------------------------------------\n\nTITLE: Implementing useIsomorphicLayoutEffect Hook in TypeScript\nDESCRIPTION: A public utility that uses React's useLayoutEffect when in browser environments and falls back to useEffect during server-side rendering.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-utilities/etc/react-utilities.api.md#2025-04-20_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport const useIsomorphicLayoutEffect: typeof React_2.useEffect;\n```\n\n----------------------------------------\n\nTITLE: Defining ISerializedStylesheet Interface in TypeScript\nDESCRIPTION: This snippet defines an interface for serialized stylesheets, including properties for class name arguments, counters, key-to-class name mappings, preserved rules, and general rules. It's used for serialization and deserialization of stylesheet data.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/merge-styles/etc/merge-styles.api.md#2025-04-20_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface ISerializedStylesheet {\n    // (undocumented)\n    classNameToArgs: Stylesheet['_classNameToArgs'];\n    // (undocumented)\n    counter: Stylesheet['_counter'];\n    // (undocumented)\n    keyToClassName: Stylesheet['_keyToClassName'];\n    // (undocumented)\n    preservedRules: Stylesheet['_preservedRules'];\n    // (undocumented)\n    rules: Stylesheet['_rules'];\n}\n```\n\n----------------------------------------\n\nTITLE: Combobox Base State Definition\nDESCRIPTION: This snippet defines the base state for the Combobox component.  It includes required properties for appearance, open state, clearable, inline popup, and size, as well as optional properties for mount node, placeholder, value, multiselect, active option, focus visibility, ignore next blur, active option setter, focus visibility setter, has focus, has focus setter, open state setter, value setter, option click handler, disabled state, freeform state, and active descendant change handler.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/library/etc/react-combobox.api.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport type ComboboxBaseState = Required<Pick<ComboboxBaseProps, 'appearance' | 'open' | 'clearable' | 'inlinePopup' | 'size'>> & Pick<ComboboxBaseProps, 'mountNode' | 'placeholder' | 'value' | 'multiselect'> & OptionCollectionState & SelectionState & {\n    activeOption?: OptionValue;\n    focusVisible: boolean;\n    ignoreNextBlur: React_2.MutableRefObject<boolean>;\n    setActiveOption: React_2.Dispatch<React_2.SetStateAction<OptionValue | undefined>>;\n    setFocusVisible(focusVisible: boolean): void;\n    hasFocus: boolean;\n    setHasFocus(hasFocus: boolean): void;\n    setOpen(event: ComboboxBaseOpenEvents, newState: boolean): void;\n    setValue(newValue: string | undefined): void;\n    onOptionClick: (e: React_2.MouseEvent<HTMLElement>) => void;\n    disabled: boolean;\n    freeform: boolean;\n    onActiveDescendantChange: (event: ActiveDescendantChangeEvent) => void;\n};\"\n```\n\n----------------------------------------\n\nTITLE: Defining IDropdownProps Interface in TypeScript\nDESCRIPTION: Defines the IDropdownProps interface with various properties for configuring a dropdown component, including event handlers, rendering functions, and style options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_116\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IDropdownProps extends ISelectableDroppableTextProps<IDropdown, HTMLDivElement>, React_2.RefAttributes<HTMLDivElement> {\n    defaultSelectedKeys?: string[] | number[];\n    dropdownWidth?: number | 'auto';\n    // @deprecated (undocumented)\n    isDisabled?: boolean;\n    multiSelectDelimiter?: string;\n    notifyOnReselect?: boolean;\n    onChange?: (event: React_2.FormEvent<HTMLDivElement>, option?: IDropdownOption, index?: number) => void;\n    // @deprecated (undocumented)\n    onChanged?: (option: IDropdownOption, index?: number) => void;\n    onRenderCaretDown?: IRenderFunction<IDropdownProps>;\n    onRenderLabel?: IRenderFunction<IDropdownProps>;\n    // @deprecated\n    onRenderPlaceHolder?: IRenderFunction<IDropdownProps>;\n    onRenderPlaceholder?: IRenderFunction<IDropdownProps>;\n    onRenderTitle?: IRenderFunction<IDropdownOption[]>;\n    options: IDropdownOption[];\n    // @deprecated\n    placeHolder?: string;\n    responsiveMode?: ResponsiveMode;\n    selectedKeys?: string[] | number[] | null;\n    styles?: IStyleFunctionOrObject<IDropdownStyleProps, IDropdownStyles>;\n    theme?: ITheme;\n}\n```\n\n----------------------------------------\n\nTITLE: TeachingPopover Render Functions in TypeScript\nDESCRIPTION: Render functions for TeachingPopover components that transform component states into JSX elements. These functions are used internally by the TeachingPopover component family.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-teaching-popover/library/etc/react-teaching-popover.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const renderTeachingPopover_unstable: (state: PopoverState) => JSX.Element;\n\n// @public\nexport const renderTeachingPopoverBody_unstable: (state: TeachingPopoverBodyState) => JSX.Element;\n\n// @public\nexport const renderTeachingPopoverCarousel_unstable: (state: TeachingPopoverCarouselState, contextValues: TeachingPopoverCarouselContextValues) => JSX.Element;\n\n// @public\nexport const renderTeachingPopoverCarouselCard_unstable: (state: TeachingPopoverCarouselCardState) => JSX.Element;\n\n// @public\nexport const renderTeachingPopoverCarouselFooter_unstable: (state: TeachingPopoverCarouselFooterState) => JSX.Element;\n\n// @public\nexport const renderTeachingPopoverCarouselFooterButton_unstable: (state: TeachingPopoverCarouselFooterButtonState) => JSX.Element;\n\n// @public\nexport const renderTeachingPopoverCarouselNav_unstable: (state: TeachingPopoverCarouselNavState) => JSX.Element;\n\n// @public\nexport const renderTeachingPopoverCarouselNavButton_unstable: (state: TeachingPopoverCarouselNavButtonState) => JSX.Element;\n\n// @public\nexport const renderTeachingPopoverCarouselPageCount_unstable: (state: TeachingPopoverCarouselPageCountState) => JSX.Element;\n\n// @public\nexport const renderTeachingPopoverFooter_unstable: (state: TeachingPopoverFooterState) => JSX.Element;\n\n// @public\nexport const renderTeachingPopoverHeader_unstable: (state: TeachingPopoverHeaderState) => JSX.Element;\n\n// @public\nexport const renderTeachingPopoverSurface_unstable: (state: TeachingPopoverSurfaceState) => JSX.Element;\n\n// @public\nexport const renderTeachingPopoverTitle_unstable: (state: TeachingPopoverTitleState) => JSX.Element;\n\n// @public\nexport const renderTeachingPopoverTrigger_unstable: (state: TeachingPopoverTriggerState) => ReactElement<any, string | JSXElementConstructor<any>> | null;\n\n```\n\n----------------------------------------\n\nTITLE: FieldSlots Definition\nDESCRIPTION: This snippet defines the FieldSlots type. It describes the available slots for the Field component, including root, label, validationMessage, validationMessageIcon, and hint.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-field/library/etc/react-field.api.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport type FieldSlots = {\\n    root: NonNullable<Slot<'div'>>;\\n    label?: Slot<typeof Label>;\\n    validationMessage?: Slot<'div'>;\\n    validationMessageIcon?: Slot<'span'>;\\n    hint?: Slot<'div'>;\\n};\"\n```\n\n----------------------------------------\n\nTITLE: DOM Output Comparison for Basic Menu in Fluent UI\nDESCRIPTION: Compares the DOM output for a basic menu in Fluent UI v7 and v0, highlighting the use of ul and li elements along with content wrapper elements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/library/docs/Spec.md#2025-04-20_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- v7 basic menu  -->\n<ul role=\"menu\">\n  <li role=\"presentation\">\n    <button role=\"menuitem\" tabindex=\"0\">\n      <div class=\"linkContent\">\n        <span class=\"itemText\">Editorials</span>\n      </div>\n    </button>\n  </li>\n  <li role=\"presentation\">\n    <button role=\"menuitem\" tabindex=\"-1\">\n      <div class=\"linkContent\">\n        <span class=\"itemText\">Reviews</span>\n      </div>\n    </button>\n  </li>\n</ul>\n\n<!-- v0 basic menu  -->\n<ul role=\"menu\">\n  <li role=\"presentation\">\n    <a role=\"menuitem\" tabindex=\"0\">\n      <span class=\"menu__itemcontent\">Editorials</span>\n    </a>\n  </li>\n  <li role=\"presentation\">\n    <a role=\"menuitem\" tabindex=\"-1\">\n      <span class=\"menu__itemcontent\">Reviews</span>\n    </a>\n  </li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Configuring CSP settings for merge-styles\nDESCRIPTION: Shows how to configure Content Security Policy (CSP) settings for `merge-styles` by setting the `nonce` value.  This allows style injection to work in environments with strict CSP requirements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/merge-styles/README.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nStylesheet.getInstance().setConfig({\n  cspSettings: { nonce: 'your nonce here' },\n});\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.114.0\nDESCRIPTION: Upgrading the @fluentui/react to version 8.114.0, this change addresses issues that impact component functionality.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluent2-theme/CHANGELOG.md#2025-04-20_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.114.0 ([PR #30158](https://github.com/microsoft/fluentui/pull/30158) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Migrating from Variables to makeStyles in Fluent UI\nDESCRIPTION: Shows the transformation from using the variables property by applying make-styles for consistent style application in v9 Fluent UI components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-image/library/docs/MIGRATION.md#2025-04-20_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Image } from '@fluentui/react-image';\nimport { makeStyles } from '@griffel/react';\n\nconst useStyles = makeStyles(theme => ({\n  width100: {\n     width: '100px'\n  },\n})\n\nconst MyComponent = () => {\n    const styles = useStyles()\n\n    return <Image src=\"example.jpg\" className={styles.width100} />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing BaseRatingDisplay Class in TypeScript\nDESCRIPTION: Defines the BaseRatingDisplay class which extends FASTElement. It provides core functionality for rating display components, including icon generation and value calculation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class BaseRatingDisplay extends FASTElement {\n    constructor();\n    count?: number;\n    // @internal\n    elementInternals: ElementInternals;\n    // @internal\n    get formattedCount(): string;\n    // @internal\n    generateIcons(): string;\n    protected getMaxIcons(): number;\n    protected getSelectedValue(): number;\n    iconViewBox?: string;\n    max?: number;\n    // @internal (undocumented)\n    slottedIcon: HTMLElement[];\n    // @internal (undocumented)\n    slottedIconChanged(): void;\n    value?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript: useSwitchStyles Hook\nDESCRIPTION: Defines a hook function to apply styles to the Switch component based on its state. It takes the SwitchState as input and returns an updated SwitchState, likely including style-related properties.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-switch/library/etc/react-switch.api.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const useSwitchStyles_unstable: (state: SwitchState) => SwitchState;\"\n```\n\n----------------------------------------\n\nTITLE: Implementing useIsSSR Hook in TypeScript\nDESCRIPTION: A public hook that returns a boolean indicating whether the component is rendering in a server-side rendering context.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-utilities/etc/react-utilities.api.md#2025-04-20_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport function useIsSSR(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Registering keyframes with keyframes and mergeStyleSets\nDESCRIPTION: Shows how to register animation keyframes using the `keyframes` function from `@fluentui/merge-styles` and then apply them using `mergeStyleSets`.  This enables the use of custom animations in your styles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/merge-styles/README.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { keyframes, mergeStyleSets } from '@fluentui/merge-styles';\n\nlet fadeIn = keyframes({\n  from: {\n    opacity: 0,\n  },\n  to: {\n    opacity: 1,\n  },\n});\n\nexport const getClassNames = () => {\n  return mergeStyleSets({\n    root: {\n      animationName: fadeIn,\n    },\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing File Rename Announcement with FluentUI Announced Component in TSX\nDESCRIPTION: This snippet demonstrates how to use the Announced component to notify screen reader users when a file has been successfully renamed. The component requires an ID for identification and a message property that will be read aloud by screen readers.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-examples/src/react/Announced/docs/QuickActions/Overview.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\npublic render(): JSX.Element {\n  return (\n    <Announced\n      id={announcedId}\n      message='File renamed'\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Equivalent Input Usage in Fluent UI v9\nDESCRIPTION: Example of equivalent Input usage in Fluent UI v9, showing how to achieve similar functionality as the v8 TextField example.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Input.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { makeStyles, Text, Label, Input } from '@fluentui/react-components';\nimport { useId } from '@fluentui/react-utilities';\n\nconst useStackStyles = makeStyles({\n  root: {\n    maxWidth: '300px',\n    display: 'flex',\n    flexDirection: 'column',\n\n    '> * + *': {\n      marginTop: '20px',\n    },\n\n    '> div': {\n      display: 'flex',\n      flexDirection: 'column',\n    },\n  },\n});\n\nconst InputV9BasicExample = () => {\n  const stackStyles = useStackStyles();\n  const standardId = useId('standard');\n  const disabledId = useId('disabled');\n  const readonlyId = useId('readonly');\n  const requiredId = useId('required');\n  const errorId = useId('error');\n  const errorMessageId = useId('error-message');\n\n  return (\n    <div className={stackStyles.root}>\n      <div>\n        <Label htmlFor={standardId}>Standard</Label>\n        <Input id={standardId} />\n      </div>\n\n      <div>\n        <Label htmlFor={disabledId}>Disabled</Label>\n        <Input id={disabledId} disabled defaultValue=\"I am disabled\" />\n      </div>\n\n      <div>\n        <Label htmlFor={readonlyId}>Read Only</Label>\n        <Input id={readonlyId} readOnly defaultValue=\"I am read only\" />\n      </div>\n\n      <div>\n        <Label htmlFor={requiredId} required>\n          Required\n        </Label>\n        <Input id={requiredId} required defaultValue=\"I am required\" />\n      </div>\n\n      <div>\n        <Input\n          aria-label=\"Required without visible label\"\n          required\n          defaultValue=\"I am required without a visible label\"\n        />\n      </div>\n\n      <div>\n        <Label htmlFor={errorId}>With Error Message</Label>\n        <Input id={errorId} aria-describedby={errorMessageId} />\n        <Text id={errorMessageId}>Error message</Text>\n      </div>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Normalizing mountNode Props with toMountNodeProps in Fluent UI (TSX)\nDESCRIPTION: This snippet demonstrates how to use the `toMountNodeProps` function from `@fluentui/react-components` to normalize the `mountNode` prop.  The function ensures consistent handling of the `mountNode` prop across different components. The function takes either a DOM element or an object with properties for the mount node and returns a normalized object.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-portal/stories/src/toMountNodeProps/toMountNodePropsDescription.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { toMountNodeProps } from '@fluentui/react-components';\n\ntoMountNodeProps(element); // { element: element }\ntoMountNodeProps({ className: 'my-mount-node' }); // { className: 'my-mount-node' }\n\n```\n\n----------------------------------------\n\nTITLE: Drawer Slot Type Definitions\nDESCRIPTION: Defines various slot configurations for different drawer components, specifying the base HTML elements and potential alternate slot types\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-drawer/library/etc/react-drawer.api.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type DrawerHeaderTitleSlots = {\n    root: Slot<'div'>;\n    heading?: Slot<'h2', 'h1' | 'h3' | 'h4' | 'h5' | 'h6' | 'div'>;\n    action?: Slot<'div'>;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing useForceUpdate Hook in TypeScript\nDESCRIPTION: Definition of the useForceUpdate hook, which returns a function to force update a function component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-hooks/README.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useForceUpdate(): () => void;\n```\n\n----------------------------------------\n\nTITLE: Accordion Definition and Configuration Constants\nDESCRIPTION: Defines accordion-related constants including the FASTElementDefinition for Accordion, expand modes, and types. These are used to configure accordion behavior such as single or multi-section expansion.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport const accordionDefinition: FASTElementDefinition<typeof Accordion>;\n\n// @public\nexport const AccordionExpandMode: {\n    readonly single: \"single\";\n    readonly multi: \"multi\";\n};\n\n// Warning: (ae-forgotten-export) The symbol \"ValuesOf\" needs to be exported by the entry point index.d.ts\n//\n// @public\nexport type AccordionExpandMode = ValuesOf<typeof AccordionExpandMode>;\n```\n\n----------------------------------------\n\nTITLE: Handling Layered Component Z-Indexing with PortalMountNodeProvider\nDESCRIPTION: This code snippet addresses issues with z-index conflicts when using layered components from both v8 and v9. The PortalMountNodeProvider is used to specify a mount node, ensuring correct layering by overriding default DOM layering behavior. It requires obtaining a reference to the v8 layer host.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Troubleshooting.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FluentProvider, PortalMountNodeProvider } from '@fluentui/react-components';\n\nfunction App() {\n  // Get a reference to the v8 layer host\n  const mountNode = document.getElementById('fluent-default-layer-host');\n\n  return (\n    <FluentProvider>\n      <PortalMountNodeProvider mountNode={mountNode}>{/* your components */}</PortalMountNodeProvider>\n    </FluentProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Animation Presence Component in TypeScript\nDESCRIPTION: Shows how to create a presence component with multiple animations using different durations and easing functions. The component implements a fast fade animation combined with a slower scale transformation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-motion/stories/src/CreatePresenceComponent/CreatePresenceComponentArrays.stories.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst FastFadeSlowScale = createPresenceComponent({\n  enter: [\n    {\n      keyframes: [{ opacity: 0 }, { opacity: 1 }],\n      duration: 200,\n      easing: 'easeIn',\n    },\n    {\n      keyframes: [{ transform: 'scale(0)' }, { transform: 'scale(1)' }],\n      duration: 500 /* 💡 note the different duration */,\n      easing: 'cubic-bezier(0.42, 0, 0.58, 1)' /* 💡 note the different easing */,\n    },\n  ],\n  exit: {\n    /* ... */\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Theme-Specific Styles\nDESCRIPTION: Defines styles that incorporate theme tokens so that components adapt their appearance when themes change. This approach allows for a unified style mechanism across different themes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/makeStyles.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst useStyles = makeStyles({\n  root: { display: 'flex' },\n  rootPrimary: theme => ({ color: theme.colorNeutralForeground3 }),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Data Grid Component Properties in TypeScript\nDESCRIPTION: Defines the properties for the DataGrid component, including options for item and column handling, sorting, selection, and column resizing, enabling comprehensive control over the table behavior.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-table/library/etc/react-table.api.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport type DataGridProps = TableProps & Pick<DataGridContextValue, 'items' | 'columns' | 'getRowId'> & Pick<Partial<DataGridContextValue>, 'focusMode' | 'subtleSelection' | 'selectionAppearance' | 'resizableColumns'> & Pick<UseTableSortOptions, 'sortState' | 'defaultSortState'> & Pick<SelectionHookParams, 'defaultSelectedItems' | 'selectedItems'> & {\n    onSortChange?: (e: React_2.MouseEvent, sortState: SortState) => void;\n    onSelectionChange?: (e: React_2.MouseEvent | React_2.KeyboardEvent, data: OnSelectionChangeData) => void;\n    selectionMode?: SelectionMode_2;\n    columnSizingOptions?: TableColumnSizingOptions;\n    onColumnResize?: (e: KeyboardEvent | TouchEvent | MouseEvent | undefined, data: {\n        columnId: TableColumnId;\n        width: number;\n    }) => void;\n    containerWidthOffset?: number;\n    resizableColumnsOptions?: {\n        autoFitColumns?: boolean;\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Label in Fabric/v8\nDESCRIPTION: Shows the basic usage of Label component in FluentUI v8 with the required prop.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-label/library/docs/Spec.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Label required>I am a required label</Label>\n```\n\n----------------------------------------\n\nTITLE: DOM Snapshot Testing with Jest\nDESCRIPTION: This snippet describes the DOM Snapshot testing layer, which enforces DOM structure consistency to prevent breaking changes for users relying on specific rendered structures. It uses Jest's `expect(component).toMatchInlineSnapshot(...)` which is preferred over `.toMatchSnapshot` for its explicit nature. Large snapshots should be avoided in favor of more granular assertion tests.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/testing.md#2025-04-20_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n\"DOM Snapshot\"\n\n```\n\nLANGUAGE: none\nCODE:\n```\nStricly DOM structure consistency enforcing. This will guarantee we do not introduce breaking changes for users who expect a certain structure to be rendered by our components.\n\n```\n\nLANGUAGE: none\nCODE:\n```\nThey are achieved with Jest's `expect(component).toMatchInlineSnapshot(...)`. This is preferred over `.toMatchSnapshot` as it is immediately explicit what is expected from the test.\nIf the snapshot ends up being massive then we should look into more granular assertion tests as big snapshots are difficult to manage for reviewers.\n```\n\n----------------------------------------\n\nTITLE: Setting Horizontal Orientation in React Collapse Component (TSX)\nDESCRIPTION: This snippet demonstrates how to configure a `Collapse` component to collapse horizontally instead of vertically. By setting the `orientation` property to \"horizontal\", the component will animate its width instead of its height when collapsing or expanding. The ellipsis indicates other properties can be included in the component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-motion-components-preview/stories/src/Collapse/CollapseHorizontal.stories.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Collapse orientation=\"horizontal\" ...>\n```\n\n----------------------------------------\n\nTITLE: Defining CustomStyleHooksContext in TypeScript\nDESCRIPTION: Exports a React Context for custom style hooks. This context allows components to access custom styling functions for various UI elements, enabling consistent theming and styling across the application.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-shared-contexts/library/etc/react-shared-contexts.api.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport const CustomStyleHooksContext_unstable: React_2.Context<Partial<{\n    useAccordionHeaderStyles_unstable: CustomStyleHook;\n    useAccordionItemStyles_unstable: CustomStyleHook;\n    useAccordionPanelStyles_unstable: CustomStyleHook;\n    useAccordionStyles_unstable: CustomStyleHook;\n    // ... (many more style hooks listed)\n    useToggleButtonStyles_unstable: CustomStyleHook;\n    useToolbarButtonStyles_unstable: CustomStyleHook;\n}>>;\n```\n\n----------------------------------------\n\nTITLE: Defining Field Control Props Type in TypeScript\nDESCRIPTION: This snippet defines the FieldControlProps type, which includes attributes that can be assigned to field controls to manage their state and accessibility. This type ensures that controls within a Field component can be properly identified by assistive technologies.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-field/library/docs/Spec.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * The props added to the control inside the Field.\n */\nexport type FieldControlProps = Pick<\n  React.HTMLAttributes<HTMLElement>,\n  'id' | 'aria-labelledby' | 'aria-describedby' | 'aria-invalid' | 'aria-required'\n>;\n```\n\n----------------------------------------\n\nTITLE: Defining MenuItem Class in TypeScript\nDESCRIPTION: This snippet defines the MenuItem class, which extends FASTElement. It includes properties and methods for managing the item's state, handling events, and managing submenus.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_38\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MenuItem extends FASTElement {\n    checked: boolean;\n    protected checkedChanged(prev: boolean, next: boolean): void;\n    connectedCallback(): void;\n    disabled: boolean;\n    disabledChanged(prev: boolean | undefined, next: boolean | undefined): void;\n    elementInternals: ElementInternals;\n    handleMenuItemClick: (e: MouseEvent) => boolean;\n    handleMenuItemKeyDown: (e: KeyboardEvent) => boolean;\n    handleMouseOut: (e: MouseEvent) => boolean;\n    handleMouseOver: (e: MouseEvent) => boolean;\n    hidden: boolean;\n    role: MenuItemRole;\n    roleChanged(prev: MenuItemRole | undefined, next: MenuItemRole | undefined): void;\n    setSubmenuPosition: () => void;\n    slottedSubmenu: HTMLElement[];\n    protected slottedSubmenuChanged(prev: HTMLElement[] | undefined, next: HTMLElement[]): void;\n    submenu: HTMLElement | undefined;\n    toggleHandler: (e: Event) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Z-Index Defaults in TypeScript\nDESCRIPTION: This code snippet defines the default z-index values for each layer specified in the `ZIndexTokens` type. It provides initial values that reflect a hierarchical elevation system. This ensures that components using these tokens have a consistent z-index behavior by default.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/z-index-handling.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"// packages/tokens/src/global/zIndexes.ts\\n\\nimport type { ZIndexTokens } from '../types';\\n\\n/**\\n * ZIndex global defaults\\n */\\nexport const zIndexes: ZIndexTokens = {\\n  zIndexBackground: '0', // Elevation 0\\n  zIndexContent: '1', // Elevation 2\\n  zIndexOverlay: '1000', // Elevation 4\\n  zIndexPopup: '2000', // Elevation 8\\n  zIndexMessages: '3000', // Elevation 16\\n  zIndexFloating: '4000', // Elevation 28\\n  zIndexPriority: '5000', // Elevation 64\\n  zIndexDebug: '6000', // Used for debugging\\n};\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Tooltip with TooltipHost in Fluent UI v8\nDESCRIPTION: Example of how to use TooltipHost to wrap a button and provide tooltip functionality in Fluent UI v8. This approach creates a wrapper div around the target element.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tooltip/library/docs/Spec.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<TooltipHost\n  content=\"This is the tooltip content\"\n  // This id is used on the tooltip itself, not the host\n  // (so an element with this id only exists when the tooltip is shown)\n  id={tooltipId}\n  calloutProps={calloutProps}\n  styles={hostStyles}\n>\n  <DefaultButton aria-describedby={tooltipId}>Hover over me</DefaultButton>\n</TooltipHost>\n```\n\n----------------------------------------\n\nTITLE: Implementing an App Card Layout in JSX\nDESCRIPTION: Sample code for creating an app card with a header containing app logo, name, developer information, and descriptive text content.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-card/library/docs/Spec.md#2025-04-20_snippet_8\n\nLANGUAGE: JSX\nCODE:\n```\n<Card>\n  <CardHeader image={<img src=\"app_logo.png\" />} header=\"App Name\" description=\"Developer\" />\n  <span>\n    Donut chocolate bar oat cake. Dragée tiramisu lollipop bear claw. Marshmallow pastry jujubes toffee sugar plum.\n  </span>\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Button with Icon Before Children in TSX\nDESCRIPTION: Illustrates the structure of a Button component with an icon before children, rendered as a custom element (div in this example) instead of a native button.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-button/library/docs/SPEC.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<div class=\"root\" href={href}>\n  <span class=\"icon\" />\n  {children}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Custom Rendering in FluentUI v7 Menu Component\nDESCRIPTION: Demonstrates custom rendering callbacks for menu lists, submenus and menu items in FluentUI v7. Shows how to use onRenderMenuList, onRenderSubMenu, and item-specific render props.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/library/docs/Spec.md#2025-04-20_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// v7 custom rendering\nconst menuProps = {\n  onRenderMenuList: (props: IContextualMenuListProps, defaultRenderer) => {},\n  onRenderSubMenu: (props: IContextualMenuProps, defaultRenderer) => {},\n  items: [\n    {\n      onRender: (\n        item: any,\n        dismissMenu: (ev?: any, dismissAll?: boolean) => void\n      ) => React.ReactNode\n    }\n    {onRenderContent: (props: IContextualMenuItemProps, defaultRenderer) => {}},\n    {onRenderIcon: (props: IContextualMenuItemProps, defaultRenderer) => {}},\n  ]\n}\n\n<ContextualMenu menuProps={menuProps}>\n```\n\n----------------------------------------\n\nTITLE: Rendering AvatarGroup with Public API\nDESCRIPTION: This snippet illustrates how to use the AvatarGroup component from the public API, specifying layout and size parameters while rendering multiple AvatarGroupItem components. The AvatarGroupPopover is included to handle overflow items effectively.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-avatar/library/docs/SPEC-AvatarGroup.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<AvatarGroup layout=\"spread\" size={32}>\n  <AvatarGroupItem name=\"Katri Athokas\" />\n  <AvatarGroupItem name=\"Elvia Atkins\" />\n  <AvatarGroupItem name=\"Cameron Evans\" />\n  <AvatarGroupItem name=\"Wanda Howard\" />\n  <AvatarGroupPopover>\n    <AvatarGroupItem name=\"Mona Kane\" />\n    <AvatarGroupItem name=\"Kristin Patterson\" />\n    <AvatarGroupItem name=\"Elliot Woodward\" />\n    <AvatarGroupItem name=\"Charlotte Waltson\" />\n  </AvatarGroupPopover>\n</AvatarGroup>\n```\n\n----------------------------------------\n\nTITLE: Defining MenuList Class in TypeScript\nDESCRIPTION: This snippet defines the MenuList class, which extends FASTElement. It includes methods for handling focus, keyboard events, and managing menu items.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_39\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MenuList extends FASTElement {\n    constructor();\n    connectedCallback(): void;\n    disconnectedCallback(): void;\n    elementInternals: ElementInternals;\n    focus(): void;\n    handleChange(source: any, propertyName: string): void;\n    handleFocusOut: (e: FocusEvent) => void;\n    handleMenuKeyDown(e: KeyboardEvent): void | boolean;\n    protected isMenuItemElement: (el: Element) => el is HTMLElement;\n    readonly isNestedMenu: () => boolean;\n    items: HTMLElement[];\n    protected itemsChanged(oldValue: HTMLElement[], newValue: HTMLElement[]): void;\n    protected menuItems: Element[] | undefined;\n    protected setItems(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Fluent UI in React Router 7/Remix\nDESCRIPTION: Updates to the vite.config.ts file to add necessary plugins and configurations for Fluent UI compatibility.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/SSR/Remix.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Import Vite plugins\nimport { cjsInterop } from 'vite-plugin-cjs-interop';\nimport griffel from '@griffel/vite-plugin';\n\nexport default defineConfig(({ command }) => ({\n  plugins: [\n    reactRouter(), // or remix(),\n    tsconfigPaths(),\n\n    // Add CJS interop plugin for Fluent UI packages until they are ESM compatible\n    cjsInterop({\n      dependencies: ['@fluentui/react-components'],\n    }),\n    // Add Griffel plugin for production optimization\n    command === 'build' && griffel(),\n  ],\n  // Required for Fluent UI icons in SSR\n  ssr: {\n    noExternal: ['@fluentui/react-icons'],\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Combobox DOM Structure with Inline Popup\nDESCRIPTION: This HTML snippet illustrates the DOM structure of a FluentUI Combobox component after it has been opened. It shows the root slot, button slot (primary slot), expandIcon slot, listbox root slot, optiongroup root slot, optiongroup label slot, and option root slot. The primary difference between the DOM of Dropdown and Combobox is in the render of the primary slot and expandIcon slot. If inlinePopup is set to true, the listbox will render immediately after the button slot, within the root slot.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/library/docs/Spec.md#2025-04-20_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<div aria-owns=\"listbox-id\">\n  <!-- root slot, combobox wrapper -->\n  <button role=\"combobox\" type=\"button\" aria-expanded=\"true\" aria-activedescendant=\"option1-id\">\n    <!-- button slot (primary slot) -->\n    Select an option\n    <span>\n      <!-- expandIcon slot -->\n      <svg aria-hidden=\"true\"><!-- dropdown icon --></svg>\n    </span>\n  </button>\n</div>\n\n<!-- in a portal: -->\n<div role=\"listbox\" id=\"listbox-id\">\n  <!-- listbox root slot -->\n  <div role=\"group\" aria-labelledby=\"group1-label-id\">\n    <!-- optiongroup root slot -->\n    <span id=\"group1-label-id\" role=\"presentation\">Group 1</span\n    ><!-- optiongroup label slot -->\n    <div role=\"option\" aria-selected=\"false\" id=\"option1-id\">\n      <!-- option root slot -->\n      <span aria-hidden=\"true\">\n        <!-- option check slot -->\n        <svg><!-- check icon --></svg>\n      </span>\n      Option A\n    </div>\n    <div role=\"option\" aria-selected=\"false\" id=\"option2-id\">\n      <span aria-hidden=\"true\">\n        <svg><!-- check icon --></svg>\n      </span>\n      Option B\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Annotating TypeScript Interface for API Documentation\nDESCRIPTION: Demonstrates how to add a docCategory annotation to a TypeScript interface for inclusion in the API documentation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/api-docs/README.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Comment about the props\n * {@docCategory Foo}\n */\ninterface FooProps {}\n```\n\n----------------------------------------\n\nTITLE: Using Scale Component to Manage Visibility - React - TypeScript\nDESCRIPTION: This snippet illustrates how to use the Scale component from the '@fluentui/react-motion-components-preview' package to dynamically manage the visibility of content. The component scales in/out based on the 'visible' prop passed to it. Dependencies include the Fluent UI motion components library.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-motion-components-preview/stories/src/Scale/ScaleDescription.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Scale } from '@fluentui/react-motion-components-preview';\n\nfunction Component({ visible }) {\n  return (\n    <Scale visible={visible}>\n      <div style={{ background: 'lightblue' }}>Content</div>\n    </Scale>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting DataGrid Hooks in TypeScript\nDESCRIPTION: Defines a series of hooks for DataGrid components including cells, rows, headers, and styling utilities. These hooks handle state management and styling for various DataGrid elements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-table/library/etc/react-table.api.md#2025-04-20_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const useDataGridHeaderCell_unstable: (props: DataGridHeaderCellProps, ref: React_2.Ref<HTMLElement>) => DataGridHeaderCellState;\n\n// @public\nexport const useDataGridHeaderCellStyles_unstable: (state: DataGridHeaderCellState) => DataGridHeaderCellState;\n\n// @public\nexport const useDataGridHeaderStyles_unstable: (state: DataGridHeaderState) => DataGridHeaderState;\n\n// @public\nexport const useDataGridRow_unstable: (props: DataGridRowProps, ref: React_2.Ref<HTMLElement>) => DataGridRowState;\n\n// @public\nexport const useDataGridRowStyles_unstable: (state: DataGridRowState) => DataGridRowState;\n\n// @public\nexport const useDataGridSelectionCell_unstable: (props: DataGridSelectionCellProps, ref: React_2.Ref<HTMLElement>) => DataGridSelectionCellState;\n\n// @public\nexport const useDataGridSelectionCellStyles_unstable: (state: DataGridSelectionCellState) => DataGridSelectionCellState;\n\n// @public\nexport const useDataGridStyles_unstable: (state: DataGridState) => DataGridState;\n```\n\n----------------------------------------\n\nTITLE: Rendering a Conditional Callout in Fluent UI v8\nDESCRIPTION: Demonstrates the conditional rendering of a `Callout` component in Fluent UI v8, utilizing the `onDismiss` prop to manage closure on specific events such as click outside or escape key press.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-popover/library/docs/Spec.md#2025-04-20_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n{isCalloutVisible && (\n  <Callout\n    target={`#${targetId}`}\n    onDismiss={toggleIsCalloutVisible}\n  >\n    {children}\n  </Callout>\n}\n\n```\n\n----------------------------------------\n\nTITLE: Simple Breadcrumb Implementation with FluentUI\nDESCRIPTION: This example demonstrates a basic implementation of the Breadcrumb component with three items. It shows how to structure the component with items and dividers, and how to mark the current/active item using the current prop.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-breadcrumb/library/README.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Breadcrumb, BreadcrumbItem, BreadcrumbDivider } from '@fluentui/react-breadcrumb';\n\nexport const App = () => (\n  <Breadcrumb aria-label=\"breadcrumb\">\n    <BreadcrumbItem>Item 1</BreadcrumbItem>\n    <BreadcrumbDivider />\n    <BreadcrumbItem>Item 2</BreadcrumbItem>\n    <BreadcrumbDivider />\n    <BreadcrumbItem current={true}>Item 3</BreadcrumbItem>\n  </Breadcrumb>\n);\n```\n\n----------------------------------------\n\nTITLE: Defining NavBase Component in React/TypeScript\nDESCRIPTION: Implementation of NavBase class, a navigation component that extends React.Component and implements the INav interface. Provides navigation functionality with focus management and selected item tracking.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_233\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class NavBase extends React_2.Component<INavProps, INavState> implements INav {\n    constructor(props: INavProps);\n    // (undocumented)\n    static contextType: React_2.Context<WindowProviderProps>;\n    // (undocumented)\n    static defaultProps: INavProps;\n    focus(forceIntoFirstElement?: boolean): boolean;\n    // (undocumented)\n    render(): JSX.Element | null;\n    // (undocumented)\n    get selectedKey(): string | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript GroupedListBase Component Class Definition\nDESCRIPTION: React component class implementing grouped list functionality with selection modes, header visibility controls and scrolling capabilities.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_43\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class GroupedListBase extends React_2.Component<IGroupedListProps, IGroupedListState> implements IGroupedList {\n    constructor(props: IGroupedListProps);\n    componentDidMount(): void;\n    static defaultProps: {\n        selectionMode: SelectionMode_2;\n        isHeaderVisible: boolean;\n        groupProps: {};\n        compact: boolean;\n    };\n    forceUpdate(): void;\n    static getDerivedStateFromProps(nextProps: IGroupedListProps, previousState: IGroupedListState): IGroupedListState;\n    getStartItemIndexInView(): number;\n    render(): JSX.Element;\n    scrollToIndex(index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode): void;\n    toggleCollapseAll(allCollapsed: boolean): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Options in v9 Combobox/Dropdown as Children\nDESCRIPTION: Examples showing the v9 approach to defining options as children of the Combobox or Dropdown control instead of through a configuration prop.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/library/docs/Spec.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Combobox>\n  <Option>Option A</Option>\n  <Option>Option B</Option>\n</Combobox>\n\n<Dropdown>\n  <Option>Option A</Option>\n  <Option>Option B</Option>\n</Dropdown>\n```\n\n----------------------------------------\n\nTITLE: Slider Component Definition in TypeScript\nDESCRIPTION: Implements a form-associated slider component with support for horizontal/vertical orientation, min/max values, step sizes, and accessibility features. Includes event handling for pointer and keyboard interactions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_50\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class Slider extends FASTElement implements SliderConfiguration {\n    constructor();\n    calculateNewValue(rawValue: number): number;\n    checkValidity(): boolean;\n    connectedCallback(): void;\n    decrement(): void;\n    direction: Direction;\n    disabled: boolean;\n    protected disabledChanged(): void;\n    disconnectedCallback(): void;\n    elementInternals: ElementInternals;\n    static formAssociated: boolean;\n    formDisabledCallback(disabled: boolean): void;\n    formResetCallback(): void;\n    handleChange(_: any, propertyName: string): void;\n    handlePointerDown: (event: PointerEvent | null) => void;\n    handleThumbPointerDown: (event: PointerEvent | null) => void;\n    increment(): void;\n    // ... additional properties and methods omitted for brevity\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IMessageBarProps Interface in TypeScript\nDESCRIPTION: This interface extends React HTML attributes and defines props for a MessageBar component, including actions, dismiss functionality, and styling options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_152\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface IMessageBarProps extends React_2.HTMLAttributes<HTMLElement>, React_2.RefAttributes<HTMLDivElement> {\n    actions?: JSX.Element;\n    // @deprecated\n    ariaLabel?: string;\n    className?: string;\n    componentRef?: IRefObject<IMessageBar>;\n    delayedRender?: boolean;\n    dismissButtonAriaLabel?: string;\n    dismissIconProps?: IIconProps;\n    expandButtonProps?: IButtonProps;\n    isMultiline?: boolean;\n    messageBarIconProps?: IIconProps;\n    messageBarType?: MessageBarType;\n    onDismiss?: (ev?: React_2.MouseEvent<HTMLElement | BaseButton | Button>) => any;\n    onExpandButtonToggled?: (expandSingleLine: boolean) => void;\n    // @deprecated\n    overflowButtonAriaLabel?: string;\n    role?: 'alert' | 'status' | 'none';\n    showExpandButton?: boolean;\n    styles?: IStyleFunctionOrObject<IMessageBarStyleProps, IMessageBarStyles>;\n    theme?: ITheme;\n    truncated?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessible Markup for Non-Trapping Focus Popover\nDESCRIPTION: This snippet illustrates the accessible markup for a popover that does not trap focus. It includes a trigger button with aria-expanded attribute and relevant roles to enhance accessibility.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-popover/library/docs/Spec.md#2025-04-20_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n// Popover that does not trap focus\n<button aria-expanded=\"false\">Trigger</button>\n<div role=\"group\">\n  No focus trap\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Toolbar Component in FluentUI v9\nDESCRIPTION: Updated implementation of the Toolbar component using FluentUI v9, showing the new component-based approach with individual ToolbarButton and ToolbarToggleButton components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Toolbar.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Toolbar, ToolbarToggleButton, ToolbarDivider, ToolbarButton } from '@fluentui/react-components';\n\nexport const Component = () => {\n  <Toolbar>\n    <ToolbarToggleButton name=\"text\" value=\"bold\" icon={<TextBoldRegular />} />\n    <ToolbarToggleButton name=\"text\" value=\"italic\" icon={<TextItalicRegular />} />\n    <ToolbarToggleButton name=\"text\" value=\"underline\" icon={<TextUnderlineRegular />} />\n    <ToolbarDivider />\n    <ToolbarButton icon={<FontIncreaseRegular />} />\n    <ToolbarButton icon={<TextFontRegular />} />\n    <ToolbarDivider />\n    <ToolbarButton icon={<AlignLeftRegular />} />\n    <ToolbarButton icon={<AlignCenterHorizontalRegular />} />\n    <ToolbarDivider />\n    <Menu>\n      <MenuTrigger>\n        <ToolbarButton aria-label=\"More\" icon={<MoreHorizontalFilled />} />\n      </MenuTrigger>\n\n      <MenuPopover>\n        <MenuList>\n          <MenuItem>New </MenuItem>\n          <MenuItem>New Window</MenuItem>\n          <MenuItem disabled>Open File</MenuItem>\n          <MenuItem>Open Folder</MenuItem>\n        </MenuList>\n      </MenuPopover>\n    </Menu>\n  </Toolbar>;\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript: Defining Component Props and State\nDESCRIPTION: This code defines the TypeScript interfaces for the component's props (`SampleProps`) and state (`SampleState`). `SampleProps` extends `ComponentProps` and `React.HTMLAttributes<HTMLElement>`. `SampleState` extends `SampleProps` and includes internal state variables, such as the ref and other custom state properties. Shorthand properties are also defined.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/converged-implementation-patterns.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\nimport { ComponentProps, ShorthandProps, ObjectShorthandProps } from '@fluentui/react-utilities';\n\n// For a component all HTML attributes should be allowed to maximize consistencty with DOM\nexport interface SampleProps extends ComponentProps, React.HTMLAttributes<HTMLElement> {\n  /** Icon slot as a shorthand */\n  icon?: ShorthandProps;\n}\n\n// Component state extends props and also adds other internal state used in the lifecycle of the component\n// For example for a popup component tracking an `open` state as boolean\nexport interface SampleState extends SampleProps {\n  ref: React.MutableRefObject<HTMLElement>;\n\n  // once a slot is process in state it can only be an object\n  icon: ObjectShorthandProps;\n\n  open: boolean;\n\n  otherState: object;\n\n  otherState: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Using SpinButton Component in JSX\nDESCRIPTION: These examples showcase basic usage of the SpinButton component in JSX. The first example initializes a SpinButton with a default value of 5. The second example binds the SpinButton value to a variable and sets a change handler function for the component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-spinbutton/library/README.md#2025-04-20_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<SpinButton defaultValue={5}/>\n<SpinButton value={value} onChange={onSpinButtonChange}/>\n```\n\n----------------------------------------\n\nTITLE: useId Hook with SSRContext\nDESCRIPTION: This snippet demonstrates how the `useId` hook utilizes the `SSRContext` to generate unique IDs in an SSR-safe manner. It uses `React.useContext` to access the current SSR context, and `React.useMemo` to increment the ID and memoize the result.  The `defaultSSRContext` ensures the mechanism works without `SSRProvider` for client-only apps.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/ssr-context.md#2025-04-20_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// behaves just like a global `let id = 0`\nconst defaultSSRContext = { current: 0 };\nSSRContext = React.createContext(defaultSSRContext);\n\nconst useId = () => {\n  const context = React.useContext(SSRContext);\n  return React.useMemo(() => ++context.current, [context]);\n};\n```\n\n----------------------------------------\n\nTITLE: Listbox State Definition\nDESCRIPTION: This snippet defines the state for the Listbox component. It includes properties for active option, focus visibility, active option setter, standalone state, option selection, an active descendant controller, and an active descendant change handler.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/library/etc/react-combobox.api.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport type ListboxState = ComponentState<ListboxSlots> & OptionCollectionState & Pick<SelectionProps, 'multiselect'> & SelectionState & {\n    activeOption?: OptionValue;\n    focusVisible: boolean;\n    setActiveOption(option?: OptionValue): void;\n    standalone: boolean;\n    selectOption(event: SelectionEvents, option: OptionValue): void;\n    activeDescendantController: ActiveDescendantImperativeRef;\n    onActiveDescendantChange?: (event: ActiveDescendantChangeEvent) => void;\n};\"\n```\n\n----------------------------------------\n\nTITLE: Defining ToolbarCheckbox Props Interface in TypeScript\nDESCRIPTION: TypeScript interface for the ToolbarCheckbox component based on Checkbox component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-toolbar/library/docs/Spec.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype ToolbarCheckboxProps = ComponentProps<Partial<CheckboxSlots>>;\n```\n\n----------------------------------------\n\nTITLE: Displaying Avatar with Active State\nDESCRIPTION: These snippets show how to indicate an active state on the Avatar component using the `active` and `activeAppearance` properties.  The `activeAppearance` is set to `ring-shadow` to provide a visual cue when the avatar is in an active state.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-avatar/library/README.md#2025-04-20_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Avatar name=\"Daisy Phillips\" active={true} activeAppearance=\"ring-shadow\" />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Avatar name=\"Robin Counts\" active={false} activeAppearance=\"ring-shadow\" />\n```\n\n----------------------------------------\n\nTITLE: Defining OverflowManager Interface in TypeScript\nDESCRIPTION: This snippet outlines the OverflowManager interface, detailing methods for managing overflow items, including adding/removing items and dividers, observing container changes, and updating the overflow state.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/priority-overflow/etc/priority-overflow.api.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport interface OverflowManager {\n    addDivider: (divider: OverflowDividerEntry) => void;\n    addItem: (items: OverflowItemEntry) => void;\n    addOverflowMenu: (element: HTMLElement) => void;\n    disconnect: () => void;\n    forceUpdate: () => void;\n    observe: (container: HTMLElement, options: ObserveOptions) => void;\n    removeDivider: (groupId: string) => void;\n    removeItem: (itemId: string) => void;\n    removeOverflowMenu: () => void;\n    update: () => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Breaking Changes in Table Component Navigation and Interactions\nDESCRIPTION: Multiple breaking changes affecting table header navigation, callbacks, and column definitions in the Fluent UI React Table component\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-table/library/CHANGELOG.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Breaking change: `sortable` prop no longer enables TableHeader navigation\n// Breaking change: Headless table callbacks now require event\n// Breaking change: ColumnDefinition type is stricter, requires createColumn\n```\n\n----------------------------------------\n\nTITLE: Changing Element Types with as Prop in React TSX\nDESCRIPTION: Illustrates how to change the rendered element type of a slot using the 'as' prop. The example changes an AccordionHeader from a div to an h1, and its button slot from a button to an anchor.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Slots/Slots.stories.mdx#2025-04-20_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// here we render the AccordionHeader as h1, by default it is a div\n// and internally AccordionHeader has a button slot that is a button by default,\n// but in this case we are changing it to an anchor\n<AccordionHeader as=\"h1\" button={{ as: 'a' }}>\n  Accordion Header as h1\n</AccordionHeader>\n```\n\n----------------------------------------\n\nTITLE: Rendering DrawerHeader Component in HTML\nDESCRIPTION: This snippet defines the structure for a DrawerHeader component in HTML, including a title and action buttons, ensuring proper accessibility features are in place.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-drawer/library/docs/Spec.md#2025-04-20_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<header class=\"fui-DrawerHeader\" tabindex=\"-1\" aria-labelledby=\"the-title-element-id\">\n  <!-- The title content is free, but ideally this should be a heading element -->\n  <div class=\"fui-DrawerHeader__title\" id=\"the-title-element-id\">Title goes here</div>\n\n  <div class=\"fui-DrawerHeader__actions\">\n    <button type=\"button\" aria-label=\"Close drawer panel\">\n      <!-- Close button content -->\n    </button>\n  <div>\n</header>\n```\n\n----------------------------------------\n\nTITLE: Defining Radio Class in TypeScript\nDESCRIPTION: This snippet defines the Radio class, which extends BaseCheckbox. It includes methods for handling disabled and required state changes, as well as setting form values and validity.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_42\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class Radio extends BaseCheckbox {\n    constructor();\n    connectedCallback(): void;\n    protected disabledChanged(prev: boolean | undefined, next: boolean | undefined): void;\n    protected requiredChanged(): void;\n    setFormValue(): void;\n    setValidity(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Slots with getSlots Method in TypeScript\nDESCRIPTION: Demonstrates the `getSlots` function which helps convert `ObjectShorthandProps` into renderable components within React. It ensures slots are only rendered if properly defined, preventing errors when default properties are involved.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/slot-null-rendering.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getSlots(state, slotNames) {\n  // ...\n  if (typeof slot === 'string' && children === undefined) {\n    slot = nullRender;\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Avatar with Image - JSX\nDESCRIPTION: Creates an Avatar with a custom size of 72 pixels displaying a user's image.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-avatar/library/docs/SPEC.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Avatar size={72} name=\"Mona Kane\" image={{ src: './MonaKane.jpg' }} />\n```\n\n----------------------------------------\n\nTITLE: Defining Color-Related Interface in TypeScript\nDESCRIPTION: Defines the IRGB interface for representing colors with red, green, blue, and optional alpha components. Also includes the isDark helper function to determine if a color is dark.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_174\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface IRGB {\n    a?: number;\n    b: number;\n    g: number;\n    r: number;\n}\n\n// @public (undocumented)\nexport function isDark(color: IColor): boolean;\n```\n\n----------------------------------------\n\nTITLE: Implementing ColorPicker in Fabric v8\nDESCRIPTION: Example of using the ColorPicker component from FluentUI Fabric v8. It demonstrates setting up a ColorPicker with state management, custom styling, and configurable options for alpha type and preview visibility.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-color-picker/library/docs/Spec.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport {\n  ColorPicker,\n  ChoiceGroup,\n  IChoiceGroupOption,\n  getColorFromString,\n  IColor,\n  IColorPickerStyles,\n  IColorPickerProps,\n} from '@fluentui/react';\n\nconst white = getColorFromString('#ffffff')!;\n\nconst ColorPickerBasicExample: React.FunctionComponent = () => {\n  const [color, setColor] = React.useState(white);\n  const [showPreview, setShowPreview] = React.useState(true);\n  const [alphaType, setAlphaType] = React.useState<IColorPickerProps['alphaType']>('alpha');\n\n  const updateColor = React.useCallback((ev: any, colorObj: IColor) => setColor(colorObj), []);\n\n  return (\n    <>\n      <ColorPicker\n        color={color}\n        onChange={updateColor}\n        alphaType={alphaType}\n        showPreview={showPreview}\n        styles={colorPickerStyles}\n        strings={{\n          hueAriaLabel: 'Hue',\n        }}\n      />\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ICommandBarItemProps Interface\nDESCRIPTION: Defines the `ICommandBarItemProps` interface, which extends `IContextualMenuItem` and specifies the properties for an item within a CommandBar. It includes properties for button styles, cache key, command bar button, icon only, rendered in overflow and tooltip host.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_74\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ICommandBarItemProps extends IContextualMenuItem {\n    buttonStyles?: IButtonStyles;\n    cacheKey?: string;\n    commandBarButtonAs?: IComponentAs<ICommandBarItemProps>;\n    iconOnly?: boolean;\n    renderedInOverflow?: boolean;\n    tooltipHostProps?: ITooltipHostProps;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Weeks to a Date - TypeScript\nDESCRIPTION: This function adds a defined number of weeks to a specified date, returning a new Date object that reflects the addition. It is useful for week-based calculations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/date-time-utilities/etc/date-time-utilities.api.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport function addWeeks(date: Date, weeks: number): Date;\n```\n\n----------------------------------------\n\nTITLE: Rendering Button with Icon Before Children in TSX\nDESCRIPTION: Shows the structure of a Button component with an icon positioned before the children content, rendered as a native button element.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-button/library/docs/SPEC.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<button class=\"root\" href={href}>\n  <span class=\"icon\" />\n  {children}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Color Palette Variable Exports in TypeScript\nDESCRIPTION: Exports TypeScript constants that reference CSS custom properties for FluentUI's color system. Includes variables for backgrounds, borders, and foregrounds across different color families like neutral, anchor, beige, berry, blue etc.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const colorNeutralStrokeSubtle = \"var(--colorNeutralStrokeSubtle)\";\n\n// @public\nexport const colorPaletteAnchorBackground2 = \"var(--colorPaletteAnchorBackground2)\";\n\n// @public\nexport const colorPaletteAnchorBorderActive = \"var(--colorPaletteAnchorBorderActive)\";\n\n// @public \nexport const colorPaletteAnchorForeground2 = \"var(--colorPaletteAnchorForeground2)\";\n\n// Additional color palette exports...\n```\n\n----------------------------------------\n\nTITLE: TeachingPopover Component Definitions in TypeScript\nDESCRIPTION: React component definitions for the TeachingPopover family, including the main TeachingPopover component, TeachingPopoverBody, TeachingPopoverCarousel, and related subcomponents.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-teaching-popover/library/etc/react-teaching-popover.api.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const TeachingPopover: React_2.FC<TeachingPopoverProps>;\n\n// @public\nexport const TeachingPopoverBody: ForwardRefComponent<TeachingPopoverBodyProps>;\n\n// @public (undocumented)\nexport const teachingPopoverBodyClassNames: SlotClassNames<TeachingPopoverBodySlots>;\n\n// @public\nexport const TeachingPopoverCarousel: ForwardRefComponent<TeachingPopoverCarouselProps>;\n\n// @public\nexport const TeachingPopoverCarouselCard: ForwardRefComponent<TeachingPopoverCarouselCardProps>;\n\n// @public (undocumented)\nexport const teachingPopoverCarouselCardClassNames: SlotClassNames<TeachingPopoverCarouselCardSlots>;\n\n// @public (undocumented)\nexport const teachingPopoverCarouselClassNames: SlotClassNames<TeachingPopoverCarouselSlots>;\n\n// @public\nexport const TeachingPopoverCarouselFooter: ForwardRefComponent<TeachingPopoverCarouselFooterProps>;\n\n// @public\nexport const TeachingPopoverCarouselFooterButton: ForwardRefComponent<TeachingPopoverCarouselFooterButtonProps>;\n\n// @public (undocumented)\nexport const teachingPopoverCarouselFooterButtonClassNames: SlotClassNames<TeachingPopoverCarouselFooterButtonSlots>;\n\n// @public (undocumented)\nexport const teachingPopoverCarouselFooterClassNames: SlotClassNames<TeachingPopoverCarouselFooterSlots>;\n\n// @public\nexport const TeachingPopoverCarouselNav: ForwardRefComponent<TeachingPopoverCarouselNavProps>;\n\n// @public\nexport const TeachingPopoverCarouselNavButton: ForwardRefComponent<TeachingPopoverCarouselNavButtonProps>;\n\n// @public (undocumented)\nexport const teachingPopoverCarouselNavButtonClassNames: SlotClassNames<TeachingPopoverCarouselNavButtonSlots>;\n\n// @public (undocumented)\nexport const teachingPopoverCarouselNavClassNames: SlotClassNames<TeachingPopoverCarouselNavSlots>;\n\n// @public\nexport const TeachingPopoverCarouselPageCount: ForwardRefComponent<TeachingPopoverCarouselPageCountProps>;\n\n// @public (undocumented)\nexport const teachingPopoverCarouselPageCountClassNames: SlotClassNames<TeachingPopoverCarouselPageCountSlots>;\n\n// @public\nexport const TeachingPopoverFooter: ForwardRefComponent<TeachingPopoverFooterProps>;\n\n// @public (undocumented)\nexport const teachingPopoverFooterClassNames: SlotClassNames<TeachingPopoverFooterSlots>;\n\n```\n\n----------------------------------------\n\nTITLE: Table with nested navigation\nDESCRIPTION: This code snippet shows how to create a Table component with nested navigation using the v0 version of Fluent UI. It uses the `accessibility` prop to enable keyboard navigation within the table cells. The `gridNestedBehavior` variable (not defined in the snippet) likely contains the configuration for nested navigation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-table/library/docs/Spec.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Table header={header} rows={rowsPlain} aria-label=\"Nested navigation\" accessibility={gridNestedBehavior} />\n```\n\n----------------------------------------\n\nTITLE: Custom Data Association in Menu Items\nDESCRIPTION: Shows how to associate custom data with menu items using the data property\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/library/docs/Spec.md#2025-04-20_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst menuProps = {\n  items: [{\n    ...\n    data: { foo: \"bar\" }\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript API Definitions for FluentUI SpinButton Component\nDESCRIPTION: Contains type definitions and component exports for a SpinButton component including props interface, state types, event handlers, and utility functions. Defines the component's structure, styling, and behavior patterns.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-spinbutton/library/etc/react-spinbutton.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"react\" />\n\nimport type { ComponentProps } from '@fluentui/react-utilities';\nimport type { ComponentState } from '@fluentui/react-utilities';\nimport type { ForwardRefComponent } from '@fluentui/react-utilities';\nimport * as React_2 from 'react';\nimport type { Slot } from '@fluentui/react-utilities';\nimport { SlotClassNames } from '@fluentui/react-utilities';\n\n// @public\nexport const renderSpinButton_unstable: (state: SpinButtonState) => JSX.Element;\n\n// @public\nexport const SpinButton: ForwardRefComponent<SpinButtonProps>;\n\n// @public (undocumented)\nexport type SpinButtonBounds = 'none' | 'min' | 'max' | 'both';\n\n// @public (undocumented)\nexport type SpinButtonChangeEvent = React_2.MouseEvent<HTMLButtonElement> | React_2.ChangeEvent<HTMLElement> | React_2.FocusEvent<HTMLInputElement> | React_2.KeyboardEvent<HTMLInputElement>;\n\n// @public (undocumented)\nexport const spinButtonClassNames: SlotClassNames<SpinButtonSlots>;\n\n// @public (undocumented)\nexport type SpinButtonOnChangeData = {\n    value?: number | null;\n    displayValue?: string;\n};\n\n// @public\nexport type SpinButtonProps = Omit<ComponentProps<Partial<SpinButtonSlots>, 'input'>, 'defaultValue' | 'onChange' | 'size' | 'value'> & {\n    appearance?: 'outline' | 'underline' | 'filled-darker' | 'filled-lighter';\n    defaultValue?: number | null;\n    displayValue?: string;\n    max?: number;\n    min?: number;\n    onChange?: (event: SpinButtonChangeEvent, data: SpinButtonOnChangeData) => void;\n    precision?: number;\n    size?: 'small' | 'medium';\n    step?: number;\n    stepPage?: number;\n    value?: number | null;\n};\n\n// @public (undocumented)\nexport type SpinButtonSlots = {\n    root: NonNullable<Slot<'span'>>;\n    input: NonNullable<Slot<'input'>>;\n    incrementButton: NonNullable<Slot<'button'>>;\n    decrementButton: NonNullable<Slot<'button'>>;\n};\n\n// @public (undocumented)\nexport type SpinButtonSpinState = 'rest' | 'up' | 'down';\n\n// @public\nexport type SpinButtonState = ComponentState<SpinButtonSlots> & Required<Pick<SpinButtonProps, 'appearance' | 'size'>> & {\n    spinState: SpinButtonSpinState;\n    atBound: SpinButtonBounds;\n};\n\n// @public\nexport const useSpinButton_unstable: (props: SpinButtonProps, ref: React_2.Ref<HTMLInputElement>) => SpinButtonState;\n\n// @public\nexport const useSpinButtonStyles_unstable: (state: SpinButtonState) => SpinButtonState;\n```\n\n----------------------------------------\n\nTITLE: Defining Color Tokens in TypeScript\nDESCRIPTION: This snippet defines the ColorTokens type that specifies various textual color states used throughout the application. These tokens help in maintaining color consistency across components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/tokens/etc/tokens.api.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport type ColorTokens = {\n    colorNeutralForeground1: string;\n    colorNeutralForeground1Hover: string;\n    colorNeutralForeground1Pressed: string;\n    colorNeutralForeground1Selected: string;\n    colorNeutralForeground2: string;\n    colorNeutralForeground2Hover: string;\n    colorNeutralForeground2Pressed: string;\n    colorNeutralForeground2Selected: string;\n    colorNeutralForeground2BrandHover: string;\n    colorNeutralForeground2BrandPressed: string;\n    colorNeutralForeground2BrandSelected: string;\n    colorNeutralForeground3: string;\n    colorNeutralForeground3Hover: string;\n    colorNeutralForeground3Pressed: string;\n    colorNeutralForeground3Selected: string;\n    colorNeutralForeground3BrandHover: string;\n    colorNeutralForeground3BrandPressed: string;\n    colorNeutralForeground3BrandSelected: string;\n    colorNeutralForeground4: string;\n    colorNeutralForegroundDisabled: string;\n    colorNeutralForegroundInvertedDisabled: string;\n    colorBrandForegroundLink: string;\n    colorBrandForegroundLinkHover: string;\n    colorBrandForegroundLinkPressed: string;\n    colorBrandForegroundLinkSelected: string;\n    colorNeutralForeground2Link: string;\n    colorNeutralForeground2LinkHover: string;\n    colorNeutralForeground2LinkPressed: string;\n    colorNeutralForeground2LinkSelected: string;\n    colorCompoundBrandForeground1: string;\n    colorCompoundBrandForeground1Hover: string;\n    colorCompoundBrandForeground1Pressed: string;\n    colorBrandForeground1: string;\n    colorBrandForeground2: string;\n    colorBrandForeground2Hover: string;\n    colorBrandForeground2Pressed: string;\n    colorNeutralForeground1Static: string;\n    colorNeutralForegroundInverted: string;\n    colorNeutralForegroundInvertedHover: string;\n    colorNeutralForegroundInvertedPressed: string;\n    colorNeutralForegroundInvertedSelected: string;\n    colorNeutralForegroundInverted2: string;\n    colorNeutralForegroundOnBrand: string;\n    colorNeutralForegroundStaticInverted: string;\n    colorNeutralForegroundInvertedLink: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Updating CheckBox Render Props to Slots in v9\nDESCRIPTION: This snippet demonstrates how to migrate from using the onRenderLabel() callback in v8 to utilizing the label slot in v9.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/HandlingBreakingChanges.stories.mdx#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n\"\"\"\nconst onRenderBoldLabel = (props: ITextFieldProps) => <b>{props.label}</b>\n\n<CheckBox label=\\\"Customer Name\\\" onRenderLabel={onRenderBoldLabel} />\n\"\"\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\n\"\"\"\nconst StrongLabel = (props: LabelProps) =>  <Label weight=\\\"semibold\\\">{props.children}</Label>\n\n<Checkbox label={<StrongLabel>Customer Name</StrongLabel>} />\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Checkbox DOM Structure\nDESCRIPTION: Final DOM structure rendered by the Checkbox component showing HTML elements and class names.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-checkbox/library/docs/Spec.md#2025-04-20_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"fui-Checkbox\">\n  <input type=\"checkbox\" id=\"checkbox-1\" class=\"fui-Checkbox__input\" />\n  <span aria-hidden=\"true\" class=\"fui-Checkbox__indicator\">\n    <CheckmarkRegular />\n  </span>\n  <label for=\"checkbox-1\" className=\"fui-Checkbox__label\">Example Checkbox</label>\n</span>\n```\n\n----------------------------------------\n\nTITLE: Defining FluentUI Icon Name Enum\nDESCRIPTION: An enumeration of string-based icon names covering a wide range of UI elements, logos, shapes, and status indicators in the FluentUI library\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/font-icons-mdl2/etc/font-icons-mdl2.api.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    Separator = \"Separator\",\n    Server = \"Server\",\n    ServerEnviroment = \"ServerEnviroment\",\n    // ... multiple icon names\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Drawer and DrawerBody Classes in TypeScript\nDESCRIPTION: Defines the Drawer and DrawerBody classes extending FASTElement, along with related types and styles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_34\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"Drawer\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport class Drawer extends FASTElement {\n    ariaDescribedby?: string;\n    ariaLabelledby?: string;\n    // (undocumented)\n    clickHandler(event: Event): boolean;\n    dialog: HTMLDialogElement;\n    emitBeforeToggle: () => void;\n    emitToggle: () => void;\n    hide(): void;\n    position: DrawerPosition;\n    show(): void;\n    // (undocumented)\n    size: DrawerSize;\n    type: DrawerType;\n}\n\n// Warning: (ae-missing-release-tag) \"DrawerBody\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport class DrawerBody extends FASTElement {\n}\n\n// @public (undocumented)\nexport const DrawerBodyDefinition: FASTElementDefinition<typeof DrawerBody>;\n\n// @public\nexport const DrawerBodyStyles: ElementStyles;\n\n// Warning: (ae-missing-release-tag) \"template\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport const DrawerBodyTemplate: ElementViewTemplate<DrawerBody>;\n\n// @public (undocumented)\nexport const DrawerDefinition: FASTElementDefinition<typeof Drawer>;\n\n// Warning: (ae-missing-release-tag) \"DrawerPosition\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport const DrawerPosition: {\n```\n\n----------------------------------------\n\nTITLE: Defining ProgressIndicator Component in TypeScript\nDESCRIPTION: Exports the ProgressIndicator component and ProgressIndicatorBase class with default props.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_242\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const ProgressIndicator: React_2.FunctionComponent<IProgressIndicatorProps>;\n\n// @public\nexport class ProgressIndicatorBase extends React_2.Component<IProgressIndicatorProps, {}> {\n    constructor(props: IProgressIndicatorProps);\n    // (undocumented)\n    static defaultProps: {\n        label: string;\n        description: string;\n        width: number;\n    };\n    // (undocumented)\n    render(): JSX.Element;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Presence Component Factory in JavaScript for FluentUI\nDESCRIPTION: The `createPresenceComponent()` function is a factory that produces React components for presence animations. It takes a presence definition as input and returns a component that can animate any element based on its visibility state.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-motion/stories/src/CreatePresenceComponent/CreatePresenceComponentDescription.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ncreatePresenceComponent()\n```\n\n----------------------------------------\n\nTITLE: Implementing CardFooter with actions in Fluent UI v9 (JSX)\nDESCRIPTION: This code snippet shows how to migrate the DocumentCardActions to CardFooter in Fluent UI v9. It uses the Card and CardFooter components, along with custom styling and icons. The 'views' prop is replaced with a custom action element.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Card/CardFooter.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { Button, shorthands, makeStyles } from '@fluentui/react-components';\nimport { Pin20Regular, Share20Regular, ServiceBell20Regular, Eye20Regular } from '@fluentui/react-icons';\nimport { Card, CardFooter } from '@fluentui/react-card/unstable';\n\nconst useStyles = makeStyles({\n  card: {\n    width: '300px',\n  },\n\n  actions: {\n    ...shorthands.gap('4px'),\n    ...shorthands.padding('4px'),\n    display: 'flex',\n    alignItems: 'center',\n  },\n});\n\nexport const Default = () => {\n  const styles = useStyles();\n\n  return (\n    <Card size=\"small\" className={styles.card}>\n      <CardFooter\n        action={\n          <div className={styles.actions}>\n            <Eye20Regular /> 432\n          </div>\n        }\n      >\n        <Button appearance=\"transparent\" icon={<Share20Regular />} aria-label=\"Share\" />\n        <Button appearance=\"transparent\" icon={<Pin20Regular />} aria-label=\"Pin\" />\n        <Button appearance=\"transparent\" icon={<ServiceBell20Regular />} aria-label=\"Notifications\" />\n      </CardFooter>\n    </Card>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Fluent UI and SWC Plugin with Yarn or NPM\nDESCRIPTION: This snippet provides shell commands to install Fluent UI components and the SWC plugin necessary for integrating Fluent UI with Next.js. Dependencies include @fluentui/react-components and fluentui-next-appdir-directive, which are required for rendering UI components and handling server-side rendering in Next.js.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/SSR/NextJSAppDir.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Using Yarn\nyarn add @fluentui/react-components fluentui-next-appdir-directive\n\n# Using NPM\nnpm install @fluentui/react-components fluentui-next-appdir-directive\n```\n\n----------------------------------------\n\nTITLE: Importing FluentUI React Component Hooks\nDESCRIPTION: This code represents a comprehensive collection of import statements for hooks from the FluentUI React component library. These hooks are used to implement functionality for various UI components like buttons, tables, tooltips, and more in React applications.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/etc/react-components.api.md#2025-04-20_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useSpinButtonStyles_unstable } from '@fluentui/react-spinbutton';\nimport { useSpinner_unstable } from '@fluentui/react-spinner';\nimport { useSpinnerStyles_unstable } from '@fluentui/react-spinner';\nimport { useSplitButton_unstable } from '@fluentui/react-button';\nimport { useSplitButtonStyles_unstable } from '@fluentui/react-button';\nimport { useSubtreeContext_unstable } from '@fluentui/react-tree';\nimport { useSwatchPicker_unstable } from '@fluentui/react-swatch-picker';\nimport { useSwatchPickerContextValue_unstable } from '@fluentui/react-swatch-picker';\nimport { useSwatchPickerContextValues } from '@fluentui/react-swatch-picker';\nimport { useSwatchPickerRow_unstable } from '@fluentui/react-swatch-picker';\nimport { useSwatchPickerRowStyles_unstable } from '@fluentui/react-swatch-picker';\nimport { useSwatchPickerStyles_unstable } from '@fluentui/react-swatch-picker';\nimport { useSwitch_unstable } from '@fluentui/react-switch';\nimport { useSwitchStyles_unstable } from '@fluentui/react-switch';\nimport { useTab_unstable } from '@fluentui/react-tabs';\nimport { useTable_unstable } from '@fluentui/react-table';\nimport { useTableBody_unstable } from '@fluentui/react-table';\nimport { useTableBodyStyles_unstable } from '@fluentui/react-table';\nimport { useTableCell_unstable } from '@fluentui/react-table';\nimport { useTableCellActions_unstable } from '@fluentui/react-table';\nimport { useTableCellActionsStyles_unstable } from '@fluentui/react-table';\nimport { useTableCellLayout_unstable } from '@fluentui/react-table';\nimport { useTableCellLayoutStyles_unstable } from '@fluentui/react-table';\nimport { useTableCellStyles_unstable } from '@fluentui/react-table';\nimport { useTableColumnSizing_unstable } from '@fluentui/react-table';\nimport { useTableCompositeNavigation } from '@fluentui/react-table';\nimport { useTableContext } from '@fluentui/react-table';\nimport { useTableFeatures } from '@fluentui/react-table';\nimport { UseTableFeaturesOptions } from '@fluentui/react-table';\nimport { useTableHeader_unstable } from '@fluentui/react-table';\nimport { useTableHeaderCell_unstable } from '@fluentui/react-table';\nimport { useTableHeaderCellStyles_unstable } from '@fluentui/react-table';\nimport { useTableHeaderStyles_unstable } from '@fluentui/react-table';\nimport { useTableResizeHandle_unstable } from '@fluentui/react-table';\nimport { useTableResizeHandleStyles_unstable } from '@fluentui/react-table';\nimport { useTableRow_unstable } from '@fluentui/react-table';\nimport { useTableRowIdContext } from '@fluentui/react-table';\nimport { useTableRowStyles_unstable } from '@fluentui/react-table';\nimport { useTableSelection } from '@fluentui/react-table';\nimport { useTableSelectionCell_unstable } from '@fluentui/react-table';\nimport { useTableSelectionCellStyles_unstable } from '@fluentui/react-table';\nimport { useTableSort } from '@fluentui/react-table';\nimport { useTableStyles_unstable } from '@fluentui/react-table';\nimport { useTabList_unstable } from '@fluentui/react-tabs';\nimport { useTabListContext_unstable } from '@fluentui/react-tabs';\nimport { useTabListContextValues_unstable } from '@fluentui/react-tabs';\nimport { useTabListStyles_unstable } from '@fluentui/react-tabs';\nimport { useTabStyles_unstable } from '@fluentui/react-tabs';\nimport { useTag_unstable } from '@fluentui/react-tags';\nimport { useTagAvatarContextValues_unstable } from '@fluentui/react-tags';\nimport { useTagGroup_unstable } from '@fluentui/react-tags';\nimport { useTagGroupContextValues_unstable } from '@fluentui/react-tags';\nimport { useTagGroupStyles_unstable } from '@fluentui/react-tags';\nimport { useTagPicker_unstable } from '@fluentui/react-tag-picker';\nimport { useTagPickerButton_unstable } from '@fluentui/react-tag-picker';\nimport { useTagPickerButtonStyles_unstable } from '@fluentui/react-tag-picker';\nimport { useTagPickerContext_unstable } from '@fluentui/react-tag-picker';\nimport { useTagPickerControl_unstable } from '@fluentui/react-tag-picker';\nimport { useTagPickerControlStyles_unstable } from '@fluentui/react-tag-picker';\nimport { useTagPickerFilter } from '@fluentui/react-tag-picker';\nimport { useTagPickerGroup_unstable } from '@fluentui/react-tag-picker';\nimport { useTagPickerGroupStyles_unstable } from '@fluentui/react-tag-picker';\nimport { useTagPickerInput_unstable } from '@fluentui/react-tag-picker';\nimport { useTagPickerInputStyles_unstable } from '@fluentui/react-tag-picker';\nimport { useTagPickerList_unstable } from '@fluentui/react-tag-picker';\nimport { useTagPickerListStyles_unstable } from '@fluentui/react-tag-picker';\nimport { useTagPickerOption_unstable } from '@fluentui/react-tag-picker';\nimport { useTagPickerOptionGroup } from '@fluentui/react-tag-picker';\nimport { useTagPickerOptionGroupStyles } from '@fluentui/react-tag-picker';\nimport { useTagPickerOptionStyles_unstable } from '@fluentui/react-tag-picker';\nimport { useTagStyles_unstable } from '@fluentui/react-tags';\nimport { useTeachingPopover_unstable } from '@fluentui/react-teaching-popover';\nimport { useTeachingPopoverBody_unstable } from '@fluentui/react-teaching-popover';\nimport { useTeachingPopoverBodyStyles_unstable } from '@fluentui/react-teaching-popover';\nimport { useTeachingPopoverCarousel_unstable } from '@fluentui/react-teaching-popover';\nimport { useTeachingPopoverCarouselCard_unstable } from '@fluentui/react-teaching-popover';\nimport { useTeachingPopoverCarouselCardStyles_unstable } from '@fluentui/react-teaching-popover';\nimport { useTeachingPopoverCarouselContextValues_unstable } from '@fluentui/react-teaching-popover';\nimport { useTeachingPopoverCarouselFooter_unstable } from '@fluentui/react-teaching-popover';\nimport { useTeachingPopoverCarouselFooterStyles_unstable } from '@fluentui/react-teaching-popover';\nimport { useTeachingPopoverCarouselNav_unstable } from '@fluentui/react-teaching-popover';\nimport { useTeachingPopoverCarouselNavButton_unstable } from '@fluentui/react-teaching-popover';\nimport { useTeachingPopoverCarouselNavButtonStyles_unstable } from '@fluentui/react-teaching-popover';\nimport { useTeachingPopoverCarouselNavStyles_unstable } from '@fluentui/react-teaching-popover';\nimport { useTeachingPopoverCarouselPageCount_unstable } from '@fluentui/react-teaching-popover';\nimport { useTeachingPopoverCarouselPageCountStyles_unstable } from '@fluentui/react-teaching-popover';\nimport { useTeachingPopoverCarouselStyles_unstable } from '@fluentui/react-teaching-popover';\nimport { useTeachingPopoverFooter_unstable } from '@fluentui/react-teaching-popover';\nimport { useTeachingPopoverHeader_unstable } from '@fluentui/react-teaching-popover';\nimport { useTeachingPopoverHeaderStyles_unstable } from '@fluentui/react-teaching-popover';\nimport { useTeachingPopoverSurface_unstable } from '@fluentui/react-teaching-popover';\nimport { useTeachingPopoverSurfaceStyles_unstable } from '@fluentui/react-teaching-popover';\nimport { useTeachingPopoverTitle_unstable } from '@fluentui/react-teaching-popover';\nimport { useTeachingPopoverTitleStyles_unstable } from '@fluentui/react-teaching-popover';\nimport { useTeachingPopoverTrigger_unstable } from '@fluentui/react-teaching-popover';\nimport { useText_unstable } from '@fluentui/react-text';\nimport { useTextarea_unstable } from '@fluentui/react-textarea';\nimport { useTextareaStyles_unstable } from '@fluentui/react-textarea';\nimport { useTextStyles_unstable } from '@fluentui/react-text';\nimport { useThemeClassName_unstable as useThemeClassName } from '@fluentui/react-shared-contexts';\nimport { useTimeout } from '@fluentui/react-utilities';\nimport { useToast_unstable } from '@fluentui/react-toast';\nimport { useToastBody_unstable } from '@fluentui/react-toast';\nimport { useToastBodyStyles_unstable } from '@fluentui/react-toast';\nimport { useToastController } from '@fluentui/react-toast';\nimport { useToaster_unstable } from '@fluentui/react-toast';\nimport { useToasterStyles_unstable } from '@fluentui/react-toast';\nimport { useToastFooter_unstable } from '@fluentui/react-toast';\nimport { useToastFooterStyles_unstable } from '@fluentui/react-toast';\nimport { useToastStyles_unstable } from '@fluentui/react-toast';\nimport { useToastTitle_unstable } from '@fluentui/react-toast';\nimport { useToastTitleStyles_unstable } from '@fluentui/react-toast';\nimport { useToastTrigger_unstable } from '@fluentui/react-toast';\nimport { useToggleButton_unstable } from '@fluentui/react-button';\nimport { useToggleButtonStyles_unstable } from '@fluentui/react-button';\nimport { useToggleState } from '@fluentui/react-button';\nimport { useToolbar_unstable } from '@fluentui/react-toolbar';\nimport { useToolbarButton_unstable } from '@fluentui/react-toolbar';\nimport { useToolbarButtonStyles_unstable } from '@fluentui/react-toolbar';\nimport { useToolbarDivider_unstable } from '@fluentui/react-toolbar';\nimport { useToolbarDividerStyles_unstable } from '@fluentui/react-toolbar';\nimport { useToolbarGroup_unstable } from '@fluentui/react-toolbar';\nimport { useToolbarGroupStyles_unstable } from '@fluentui/react-toolbar';\nimport { useToolbarRadioButton_unstable } from '@fluentui/react-toolbar';\nimport { useToolbarRadioButtonStyles_unstable } from '@fluentui/react-toolbar';\nimport { useToolbarStyles_unstable } from '@fluentui/react-toolbar';\nimport { useToolbarToggleButton_unstable } from '@fluentui/react-toolbar';\nimport { useToolbarToggleButtonStyles_unstable } from '@fluentui/react-toolbar';\nimport { useTooltip_unstable } from '@fluentui/react-tooltip';\nimport { useTooltipStyles_unstable } from '@fluentui/react-tooltip';\nimport { useTooltipVisibility_unstable as useTooltipVisibility } from '@fluentui/react-shared-contexts';\nimport { useTree_unstable } from '@fluentui/react-tree';\nimport { useTreeContext_unstable } from '@fluentui/react-tree';\nimport { useTreeContextValues_unstable } from '@fluentui/react-tree';\nimport { useTreeItem_unstable } from '@fluentui/react-tree';\nimport { useTreeItemContext_unstable } from '@fluentui/react-tree';\n```\n\n----------------------------------------\n\nTITLE: Using mergeClasses with Griffel\nDESCRIPTION: Illustrates how to combine multiple Griffel styles on the same element using mergeClasses. This API ensures proper class merging and deduplication for predictable styling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/styles-handbook.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeStyles, shorthands } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  root: {\n    /* styles */\n  },\n  foo: {\n    /* styles */\n  },\n  bar: {\n    /* styles */\n  },\n});\n\nfunction Component(props) {\n  const classes = useClasses();\n  const className = mergeClasses(\n    classes.root,\n    props.foo && classes.foo /* styles specific for \"foo\" */,\n    props.bar && classes.bar /* styles specific for \"bar\" */,\n  );\n\n  return <div className={className} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Fluent UI React in an existing project\nDESCRIPTION: Command to install Fluent UI React as a dependency in an existing project using npm.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/README.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @fluentui/react\n```\n\n----------------------------------------\n\nTITLE: Using FluentUI Input Component with Custom Props in TSX\nDESCRIPTION: Shows an example of how to use the FluentUI Input component with custom props, including styling and content slots.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-input/library/docs/Spec.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Input\n  className=\"rootClass\"\n  style={{ background: 'red' }}\n  input={{ className: 'inputClass', style: { background: 'blue' } }}\n  id=\"input1\"\n  value=\"something\"\n  onChange={(ev, data) => console.log(data.value)}\n  contentBefore={<SearchIcon />}\n  contentAfter={<ClearIcon />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Menu with MenuButton in React\nDESCRIPTION: This example demonstrates how to create a menu using the MenuButton component along with Menu, MenuTrigger, MenuPopover, and MenuItem components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-button/library/README.md#2025-04-20_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Menu>\n  <MenuTrigger>\n    <MenuButton>Example</MenuButton>\n  </MenuTrigger>\n\n  <MenuPopover>\n    <MenuList>\n      <MenuItem>Item a</MenuItem>\n      <MenuItem>Item b</MenuItem>\n    </MenuList>\n  </MenuPopover>\n</Menu>\n```\n\n----------------------------------------\n\nTITLE: Performance Testing with Flamegrill\nDESCRIPTION: This snippet describes Performance testing, focusing on rendering performance and preventing degradation, which is currently covered by the [flamegrill](https://github.com/microsoft/Flamegrill) utility.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/testing.md#2025-04-20_snippet_3\n\nLANGUAGE: none\nCODE:\n```\n\"Performance\"\n\n```\n\nLANGUAGE: none\nCODE:\n```\nFocus on the rendering performance and avoiding its degradation. They are currently covered by the [flamegrill](https://github.com/microsoft/Flamegrill) utility.\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry v9.0.22\nDESCRIPTION: Version 9.0.22 changelog showing multiple dependency version bumps\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-breadcrumb/library/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.0.22](https://github.com/microsoft/fluentui/tree/@fluentui/react-breadcrumb_v9.0.22)\n\nTue, 23 Apr 2024 08:17:49 GMT\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-breadcrumb_v9.0.21..@fluentui/react-breadcrumb_v9.0.22)\n\n### Patches\n\n- Bump @fluentui/react-aria to v9.10.5 ([PR #31113](https://github.com/microsoft/fluentui/pull/31113) by beachball)\n- Bump @fluentui/react-button to v9.3.76 ([PR #31113](https://github.com/microsoft/fluentui/pull/31113) by beachball)\n- Bump @fluentui/react-link to v9.2.18 ([PR #31113](https://github.com/microsoft/fluentui/pull/31113) by beachball)\n- Bump @fluentui/react-shared-contexts to v9.17.0 ([PR #31113](https://github.com/microsoft/fluentui/pull/31113) by beachball)\n- Bump @fluentui/react-tabster to v9.20.1 ([PR #31113](https://github.com/microsoft/fluentui/pull/31113) by beachball)\n- Bump @fluentui/react-utilities to v9.18.7 ([PR #31113](https://github.com/microsoft/fluentui/pull/31113) by beachball)\n- Bump @fluentui/react-jsx-runtime to v9.0.36 ([PR #31113](https://github.com/microsoft/fluentui/pull/31113) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Implementing useOverrides_unstable Hook in TypeScript\nDESCRIPTION: TypeScript function implementation for the useOverrides_unstable hook that returns the overrides context value.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-shared-contexts/library/etc/react-shared-contexts.api.md#2025-04-20_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Warning: (ae-incompatible-release-tags) The symbol \"useOverrides\" is marked as @public, but its signature references \"OverridesContextValue_unstable\" which is marked as @internal\n//\n// @public (undocumented)\nexport function useOverrides_unstable(): OverridesContextValue_unstable;\n```\n\n----------------------------------------\n\nTITLE: Initializing SpinButton with Label in React\nDESCRIPTION: Demonstrates the recommended pattern for creating a SpinButton with an associated Label component, ensuring proper accessibility and screen reader compatibility\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-spinbutton/stories/src/SpinButton/SpinButtonAccessibility.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<Label htmlFor=\"example-spinbutton\">A SpinButton</Label>\n<SpinButton id=\"example-spinbutton\" defaultValue={10} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Breadcrumb in FluentUI v9\nDESCRIPTION: Sample code for creating a Breadcrumb component using the proposed FluentUI v9 API. It demonstrates the use of BreadcrumbItem and BreadcrumbButton components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-breadcrumb/library/docs/Spec.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst BreadcrumbV9Example = props => (\n  <Breadcrumb aria-label=\"breadcrumb\">\n    <BreadcrumbItem>\n      <BreadcrumbButton href=\"#\">\n        Home\n      </BreadcrumbButton>\n    </BreadcrumbItem>\n    <BreadcrumbItem>\n      <BreadcrumbButton href=\"#\">\n        Gallery\n      </BreadcrumbButton>\n    </BreadcrumbItem>\n    <BreadcrumbItem current={true}>\n      <BreadcrumbButton href=\"#\">\n        About\n      </BreadcrumbButton>\n    </BreadcrumbItem>\n  </Breadcrumb>\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: Dropdown Public Structure\nDESCRIPTION: This example shows the publicly accessible structure of the Dropdown component, using OptionGroup and Option components to create a grouped list.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/library/docs/Spec.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n<Dropdown placeholder=\"Select an option\">\n  <OptionGroup label=\"Group 1\">\n    <Option key=\"A\">Option A</Option>\n    <Option key=\"B\">Option B</Option>\n  </OptionGroup>\n  <OptionGroup label=\"Group 2\">\n    <Option key=\"C\">Option C</Option>\n    <Option key=\"D\">Option D</Option>\n  </OptionGroup>\n</Dropdown>\n```\n\n----------------------------------------\n\nTITLE: Defining IContextualMenuItem Interface\nDESCRIPTION: Defines the `IContextualMenuItem` interface, representing a single item within a ContextualMenu.  It specifies properties for aria attributes, checking, className, component refs, data, disabled state, event handlers (onClick, onMouseDown, onRender), rendering, shortcuts, split buttons, submenus, and text.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_82\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IContextualMenuItem {\n    [propertyName: string]: any;\n    ariaDescribedBy?: string;\n    ariaDescription?: string;\n    ariaLabel?: string;\n    canCheck?: boolean;\n    checked?: boolean;\n    className?: string;\n    componentRef?: IRefObject<IContextualMenuRenderItem>;\n    contextualMenuItemAs?: IComponentAs<IContextualMenuItemProps>;\n    // Warning: (ae-forgotten-export) The symbol \"IContextualMenuItemWrapperProps\" needs to be exported by the entry point index.d.ts\n    contextualMenuItemWrapperAs?: IComponentAs<IContextualMenuItemWrapperProps>;\n    customOnRenderListLength?: number;\n    data?: any;\n    disabled?: boolean;\n    // @deprecated\n    getItemClassNames?: (theme: ITheme, disabled: boolean, expanded: boolean, checked: boolean, isAnchorLink: boolean, knownIcon: boolean, itemClassName?: string, dividerClassName?: string, iconClassName?: string, subMenuClassName?: string, primaryDisabled?: boolean) => IMenuItemClassNames;\n    getSplitButtonVerticalDividerClassNames?: (theme: ITheme) => IVerticalDividerClassNames;\n    href?: string;\n    iconProps?: IIconProps;\n    // @deprecated (undocumented)\n    inactive?: boolean;\n    itemProps?: Partial<IContextualMenuItemProps>;\n    // @deprecated (undocumented)\n    items?: IContextualMenuItem[];\n    // (undocumented)\n    itemType?: ContextualMenuItemType;\n    key: string;\n    keytipProps?: IKeytipProps;\n    // @deprecated\n    name?: string;\n    onClick?: (ev?: React_2.MouseEvent<HTMLElement> | React_2.KeyboardEvent<HTMLElement>, item?: IContextualMenuItem) => boolean | void;\n    onMouseDown?: (item: IContextualMenuItem, event: React_2.MouseEvent<HTMLElement>) => void;\n    onRender?: (item: any, dismissMenu: (ev?: any, dismissAll?: boolean) => void) => React_2.ReactNode;\n    onRenderContent?: (props: IContextualMenuItemProps, defaultRenders: IContextualMenuItemRenderFunctions) => React_2.ReactNode;\n    onRenderIcon?: IRenderFunction<IContextualMenuItemProps>;\n    preferMenuTargetAsEventTarget?: boolean;\n    primaryDisabled?: boolean;\n    rel?: string;\n    role?: string;\n    secondaryText?: string;\n    sectionProps?: IContextualMenuSection;\n    // @deprecated (undocumented)\n    shortCut?: string;\n    split?: boolean;\n    // @deprecated\n    style?: React_2.CSSProperties;\n    submenuIconProps?: IIconProps;\n    subMenuProps?: IContextualMenuProps;\n    target?: string;\n    text?: string;\n    title?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TagPicker Component with Fluent UI in React\nDESCRIPTION: This snippet demonstrates how to import and use TagPicker components from the Fluent UI React library in a React application. It includes example data for tag options and sets up a tag picker interface where users can select tags from a list. The component maintains internal state for selected options and handles user interactions via an \\'onOptionSelect\\' callback. The necessary components, such as TagPickerList, TagPickerOption, and TagPickerControl, are utilized to build the UI. React and Fluent UI React components must be installed as dependencies.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport {\n  TagPicker,\n  TagPickerList,\n  TagPickerInput,\n  TagPickerControl,\n  TagPickerProps,\n  TagPickerOption,\n  TagPickerGroup,\n} from '@fluentui/react-tag-picker';\nimport { Tag, Avatar } from '@fluentui/react-components';\n\nconst options = [\n  'John Doe',\n  'Jane Doe',\n  'Max Mustermann',\n  'Erika Mustermann',\n  'Pierre Dupont',\n  'Amelie Dupont',\n  'Mario Rossi',\n  'Maria Rossi',\n];\n\nexport const Example = () => {\n  const [selectedOptions, setSelectedOptions] = React.useState<string[]>([]);\n  const onOptionSelect: TagPickerProps['onOptionSelect'] = (e, data) => {\n    setSelectedOptions(data.selectedOptions);\n  };\n\n  return (\n    <div style={{ maxWidth: 400 }}>\n      <TagPicker onOptionSelect={onOptionSelect} selectedOptions={selectedOptions}>\n        <TagPickerControl>\n          <TagPickerGroup>\n            {selectedOptions.map(option => (\n              <Tag key={option} shape=\"rounded\" media={<Avatar name={option} color=\"colorful\" />} value={option}>\n                {option}\n              </Tag>\n            ))}\n          </TagPickerGroup>\n          <TagPickerInput />\n        </TagPickerControl>\n        <TagPickerList>\n          {options\n            .filter(option => !selectedOptions.includes(option))\n            .map(option => (\n              <TagPickerOption\n                secondaryContent=\"Microsoft FTE\"\n                media={<Avatar name={option} color=\"colorful\" />}\n                value={option}\n                key={option}\n              >\n                {option}\n              </TagPickerOption>\n            ))}\n        </TagPickerList>\n      </TagPicker>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Full Card Component with Preview and Actions\nDESCRIPTION: Complete example demonstrating how to create a card with a header containing user information, preview section with document template, and footer with action buttons. Uses various Fluent UI components including icons, buttons, and typography elements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-card/library/README.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Share16Regular, ArrowReply16Regular } from '@fluentui/react-icons';\nimport { Button, Body1, Caption1 } from '@fluentui/react-components';\nimport { Card, CardHeader, CardPreview, CardFooter } from '@fluentui/react-components';\n\nconst App = () => (\n  <>\n    <Card>\n      <CardHeader\n        image={\n          <img\n            src=\"https://raw.githubusercontent.com/microsoft/fluentui/master/packages/react-components/react-card/assets/avatar_elvia.svg\"\n            alt=\"Face of a person\"\n          />\n        }\n        header={\n          <Body1>\n            <b>Elvia Atkins</b> mentioned you\n          </Body1>\n        }\n        description={<Caption1>5h ago · About us - Overview</Caption1>}\n      />\n      <CardPreview\n        logo={\n          <img\n            src=\"https://raw.githubusercontent.com/microsoft/fluentui/master/packages/react-components/react-card/assets/docx.png\"\n            alt=\"Microsoft Word logo\"\n          />\n        }\n      >\n        <img\n          src=\"https://raw.githubusercontent.com/microsoft/fluentui/master/packages/react-components/react-card/assets/doc_template.png\"\n          alt=\"Preview of a Word document\"\n        />\n      </CardPreview>\n      <CardFooter>\n        <Button icon={<ArrowReply16Regular />}>Reply</Button>\n        <Button icon={<Share16Regular />}>Share</Button>\n      </CardFooter>\n    </Card>\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: DialogTitle State Definition\nDESCRIPTION: Defines the state for the DialogTitle component, using ComponentState from '@fluentui/react-utilities'.  It incorporates the slots available in DialogTitleSlots.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/etc/react-dialog.api.md#2025-04-20_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport type DialogTitleState = ComponentState<DialogTitleSlots>;\"\n```\n\n----------------------------------------\n\nTITLE: Basic Read-Only RatingDisplay Component in React\nDESCRIPTION: Shows how to render a read-only RatingDisplay component with default settings using FluentUI React components\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-rating/library/docs/Spec.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { RatingDisplay } from '@fluentui/react-components';\n\nfunction App() {\n  return <RatingDisplay />;\n}\n```\n\n----------------------------------------\n\nTITLE: FluentUI Menu Accessibility DOM Structure\nDESCRIPTION: HTML code showing the expected DOM output and ARIA attributes for accessible menu implementation. The example demonstrates proper role attributes, tabindex values, and aria attributes for menus with submenus.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/library/docs/Spec.md#2025-04-20_snippet_26\n\nLANGUAGE: html\nCODE:\n```\n<div role=\"menu\" aria-labelledby=\"trigger\">\n  <div role=\"menuitem\" tabindex=\"0\">Option 1</div>\n  <div role=\"menuitem\" tabindex=\"-1\" aria-haspopup=\"menu\" aria-expanded=\"false\" id=\"submenu-trigger\">Open submenu</div>\n</div>\n\n<!-- expected DOM output  -->\n<div role=\"menu\">\n  <div role=\"menuitem\" tabindex=\"0\">Option 1</div>\n  <div role=\"group\">\n    <div role=\"menuitem\" tabindex=\"-1\">content slot</div>\n    <div role=\"menuitem\" tabindex=\"-1\" aria-haspopup=\"menu\" aria-expanded=\"false\" id=\"submenu-trgger\">\n      <svg>indicator icon</svg>\n    </div>\n  </div>\n</div>\n\n<div role=\"menu\" aria-labelledby=\"submenu-trigger\">\n  <div role=\"menuitem\" tabindex=\"-1\">Option 1</div>\n  <div role=\"menuitem\" tabindex=\"-1\">Option 2</div>\n  <div role=\"menuitem\" tabindex=\"-1\">Option 3</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Handling Unhandled Props in Fluent UI Components\nDESCRIPTION: Fluent UI components pass all unhandled props to the component specified in the 'as' attribute. This means that any standard HTML props or custom props added will be passed through to the rendered output. This pattern is crucial for compatibility with other libraries and accommodating additional functionalities such as event handlers on standard HTML elements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/docs/src/pages/Composition.mdx#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  {/* `type` is an unhandled prop on `Button` and is passed through ⬇️*/}\n  {/* Will output: <button class=\"ui-button\" type=\"submit\" /> */}\n  <Button type=\"submit\" />\n  {/* `onLoad` and `onError` will be passed to `img` */}\n  {/* Will output: <img class=\"ui-image\" src=\"//via.placeholder.com/300\" /> */}\n  <Image src=\"//via.placeholder.com/300\" onLoad={() => alert('Loaded')} onError={() => alert('Error')} />\n</>\n```\n\n----------------------------------------\n\nTITLE: Rendering Contextual Menu Items from Array in v9\nDESCRIPTION: This snippet shows how to map an array of menu item data to MenuItem children in the v9 version of Fluent UI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/HandlingBreakingChanges.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\"\"\"\n<Menu>\n  <MenuTrigger>\n    <Button>Options</Button>\n  </MenuTrigger>\n\n  <MenuPopover>\n    <MenuList>\n      {menuProps.map(menuItem => (\n        <MenuItem>{menuItem.text}</MenuItem>\n      ))}\n    </MenuList>\n  </MenuPopover>\n</Menu>\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack with getLoadSiteConfig for Fluent UI Documentation Site\nDESCRIPTION: Demonstrates how to import and use the getLoadSiteConfig utility in a webpack configuration file. This creates webpack configurations to generate index.html and loadSite.js files which handle site bootstrapping and version switching.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/public-docsite-setup/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst getLoadSiteConfig = require('@fluentui/public-docsite-setup/scripts/getLoadSiteConfig');\n\nmodule.exports = [\n  getLoadSiteConfig({\n    libraryPath: 'path/to/@fluentui/react', // or 'office-ui-fabric-react' if appropriate\n    outDir: path.join(__dirname, 'dist'), // full path to output directory\n    isProduction: isProductionArg, // whether to do a minified build (filename is the same regardless)\n  }),\n  ...yourOtherConfigs,\n];\n```\n\n----------------------------------------\n\nTITLE: TagPickerGroup Component Definition\nDESCRIPTION: Defines the TagPickerGroup React component as a ForwardRefComponent, indicating that it's a component that accepts a ref and forwards it to a child element.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const TagPickerGroup: ForwardRefComponent<TagPickerGroupProps>;\"\n```\n\n----------------------------------------\n\nTITLE: Defining ComboBox onChange Callback in FluentUI TypeScript\nDESCRIPTION: This code snippet defines the onChange callback for the ComboBox component in FluentUI. It demonstrates the issue of an expanding callback signature to accommodate new optional parameters without breaking changes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/event-handlers-arguments.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nonChange?: (event: React.FormEvent<IComboBox>, option?: IComboBoxOption, index?: number, value?: string) => void;\n```\n\n----------------------------------------\n\nTITLE: Complete Example of react-context-selector Implementation\nDESCRIPTION: Full example demonstrating the usage of context selector to optimize component re-rendering. The example shows creating a context, using selector functions to extract specific values, and implementing a counter application with selective updates.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-context-selector/README.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { createContext, useContextSelector, ContextSelector } from '@fluentui/react-context-selector';\n\ninterface CounterContextValue {\n  count1: number;\n  count2: number;\n  incrementCount1: () => void;\n  incrementCount2: () => void;\n}\n\n// 💡 The same syntax as native React context API\n//    https://reactjs.org/docs/context.html#reactcreatecontext\nconst CounterContext = createContext<CounterContextValue>({} as CounterContextValue);\n\nconst CounterProvider = CounterContext.Provider;\n\n// not necessary but can be a good layer to mock for unit testing\nconst useCounterContext = <T,>(selector: ContextSelector<CounterContextValue, T>) =>\n  useContextSelector(CounterContext, selector);\n\nconst Counter1 = () => {\n  // 💡 Context updates will be propagated only when result of a selector function will change\n  //    \"Object.is()\" is used for internal comparisons\n  const count1 = useCounterContext(context => context.count1);\n  const increment = useCounterContext(context => context.incrementCount1);\n\n  return <button onClick={increment}>Counter 1: {count1}</button>;\n};\n\nconst Counter2 = () => {\n  const count2 = useCounterContext(context => context.count2);\n  const increment = useCounterContext(context => context.incrementCount2);\n\n  return <button onClick={increment}>Counter 2: {count2}</button>;\n};\n\nexport default function App() {\n  const [state, setState] = React.useState({ count1: 0, count2: 0 });\n\n  const incrementCount1 = React.useCallback(() => setState(s => ({ ...s, count1: s.count1 + 1 })), [setState]);\n  const incrementCount2 = React.useCallback(() => setState(s => ({ ...s, count2: s.count2 + 1 })), [setState]);\n\n  return (\n    <div className=\"App\">\n      <CounterProvider\n        value={{\n          count1: state.count1,\n          count2: state.count2,\n          incrementCount1,\n          incrementCount2,\n        }}\n      >\n        <Counter1 />\n        <Counter2 />\n      </CounterProvider>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Card Component and Subcomponents in TypeScript\nDESCRIPTION: This snippet defines the Card component along with its subcomponents: CardItem and CardSection. They are functional components based on React and utilize Fluent UI's component structure. The Card component serves as a container for the card interface, while CardItem and CardSection are used for individual sections within the card layout.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-cards/etc/react-cards.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IBaseProps } from '@fluentui/react/lib/Utilities';\nimport { IComponent } from '@fluentui/foundation-legacy';\nimport { IComponentStyles } from '@fluentui/foundation-legacy';\nimport { ISlotProp } from '@fluentui/foundation-legacy';\nimport { IStackItemProps } from '@fluentui/react/lib/Stack';\nimport { IStackItemSlots } from '@fluentui/react/lib/Stack';\nimport { IStackItemTokens } from '@fluentui/react/lib/Stack';\nimport { IStackProps } from '@fluentui/react/lib/Stack';\nimport { IStackSlot } from '@fluentui/react/lib/Stack';\nimport { IStackSlots } from '@fluentui/react/lib/Stack';\nimport { IStackTokens } from '@fluentui/react/lib/Stack';\nimport { IStyleableComponentProps } from '@fluentui/foundation-legacy';\nimport * as React_2 from 'react';\n\n// @public @deprecated (undocumented)\nexport const Card: React_2.FunctionComponent<ICardProps> & {\n    Item: React_2.FunctionComponent<ICardItemProps>;\n    Section: React_2.FunctionComponent<ICardSectionProps>;\n};\n\n// @public @deprecated (undocumented)\nexport const CardItem: React_2.FunctionComponent<ICardItemProps>;\n\n// @public @deprecated (undocumented)\nexport const CardSection: React_2.FunctionComponent<ICardSectionProps>;\n```\n\n----------------------------------------\n\nTITLE: Structuring Divider Component in HTML\nDESCRIPTION: Illustrates the HTML structure of the Divider component, including pseudo-elements for handling divider lines and content placement.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-divider/library/docs/Spec.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <!-- ::before to handle the divider line independent of the divider having content or not -->\n  <div>Content</div>\n  <!-- ::after to handle the divider line that goes after the content if it has been provided. -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Vertical Bar Chart Component in TypeScript\nDESCRIPTION: The VerticalBarChart constant exports a functional component intended for rendering vertical bar charts, equipped with properties to manage data inputs and styling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/etc/react-charting.api.md#2025-04-20_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const VerticalBarChart: React_2.FunctionComponent<IVerticalBarChartProps>;\n```\n\n----------------------------------------\n\nTITLE: Defining List Component Interfaces in TypeScript\nDESCRIPTION: Interface definitions for the virtualized List component in FluentUI, which efficiently renders large datasets by only rendering visible items. These interfaces define the component props, state, and rendering patterns.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_146\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IList {\n    forceUpdate: () => void;\n    getStartItemIndexInView: () => number;\n    getTotalListHeight?: () => number;\n    scrollToIndex: (index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode) => void;\n}\n\n// @public\nexport interface IListOnRenderRootProps<T> {\n    divProps: React_2.HTMLAttributes<HTMLDivElement>;\n    pages: IPage<T>[];\n    rootRef: React_2.Ref<HTMLDivElement>;\n    surfaceElement: JSX.Element | null;\n}\n\n// @public\nexport interface IListOnRenderSurfaceProps<T> {\n    divProps: React_2.HTMLAttributes<HTMLDivElement>;\n    pageElements: JSX.Element[];\n    pages: IPage<T>[];\n    surfaceRef: React_2.Ref<HTMLDivElement>;\n}\n\n// @public (undocumented)\nexport interface IListProps<T = any> extends React_2.HTMLAttributes<List<T> | HTMLDivElement> {\n    className?: string;\n    componentRef?: IRefObject<IList>;\n    getItemCountForPage?: (itemIndex?: number, visibleRect?: IRectangle) => number;\n    getKey?: (item: T, index?: number) => string;\n    getPageHeight?: (itemIndex?: number, visibleRect?: IRectangle, itemCount?: number, items?: T[]) => number;\n    getPageSpecification?: (itemIndex?: number, visibleRect?: IRectangle, items?: T[]) => IPageSpecification;\n    getPageStyle?: (page: IPage<T>) => any;\n    ignoreScrollingState?: boolean;\n    items?: T[];\n    onPageAdded?: (page: IPage<T>) => void;\n    onPageRemoved?: (page: IPage<T>) => void;\n    onPagesUpdated?: (pages: IPage<T>[]) => void;\n    onRenderCell?: (item?: T, index?: number, isScrolling?: boolean) => React_2.ReactNode;\n    onRenderCellConditional?: (item?: T, index?: number, isScrolling?: boolean) => React_2.ReactNode | null;\n    onRenderPage?: IRenderFunction<IPageProps<T>>;\n    onRenderRoot?: IRenderFunction<IListOnRenderRootProps<T>>;\n    onRenderSurface?: IRenderFunction<IListOnRenderSurfaceProps<T>>;\n    onShouldVirtualize?: (props: IListProps<T>) => boolean;\n    renderCount?: number;\n    renderEarly?: boolean;\n    renderedWindowsAhead?: number;\n    renderedWindowsBehind?: number;\n    role?: string;\n    startIndex?: number;\n    usePageCache?: boolean;\n    version?: any;\n}\n\n// @public (undocumented)\nexport interface IListState<T = any> {\n    // (undocumented)\n    getDerivedStateFromProps(nextProps: IListProps<T>, previousState: IListState<T>): IListState<T>;\n    // (undocumented)\n    hasMounted: boolean;\n    // (undocumented)\n    isScrolling?: boolean;\n    measureVersion?: number;\n    // (undocumented)\n    pages?: IPage<T>[];\n    // (undocumented)\n    pagesVersion?: {};\n}\n```\n\n----------------------------------------\n\nTITLE: Using useBoolean Hook in JSX\nDESCRIPTION: Example of how to use the useBoolean hook in a React component to manage dialog visibility.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-hooks/README.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useBoolean } from '@fluentui/react-hooks';\n\nconst MyComponent = () => {\n  const [value, { setTrue: showDialog, setFalse: hideDialog, toggle: toggleDialogVisible }] = useBoolean(false);\n  // ... code that shows a dialog when a button is clicked ...\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing BaseTextArea Class in TypeScript\nDESCRIPTION: Defines the BaseTextArea class which extends FASTElement. It implements core functionality for textarea components, including form association, validation, and autoresize capabilities.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class BaseTextArea extends FASTElement {\n    constructor();\n    autocomplete?: TextAreaAutocomplete;\n    autoResize: boolean;\n    // (undocumented)\n    protected autoResizeChanged(): void;\n    // @internal (undocumented)\n    autoSizerEl?: HTMLDivElement;\n    checkValidity(): boolean;\n    // @internal (undocumented)\n    connectedCallback(): void;\n    // @internal\n    controlEl: HTMLTextAreaElement;\n    // @internal\n    defaultSlottedNodes: Node[];\n    // (undocumented)\n    protected defaultSlottedNodesChanged(): void;\n    get defaultValue(): string;\n    set defaultValue(next: string);\n    dirName?: string;\n    disabled: boolean;\n    // (undocumented)\n    protected disabledChanged(): void;\n    // @internal (undocumented)\n    disconnectedCallback(): void;\n    displayShadow: boolean;\n    // @internal\n    elementInternals: ElementInternals;\n    get form(): HTMLFormElement | null;\n    static readonly formAssociated = true;\n    // @internal (undocumented)\n    formDisabledCallback(disabled: boolean): void;\n    // @internal\n    formResetCallback(): void;\n    // @internal (undocumented)\n    handleControlChange(): void;\n    // @internal (undocumented)\n    handleControlInput(): void;\n    // @internal (undocumented)\n    handleControlSelect(): void;\n    initialForm?: string;\n    // @internal\n    labelEl: HTMLLabelElement;\n    get labels(): NodeList;\n    // @internal\n    labelSlottedNodes: Label[];\n    // (undocumented)\n    protected labelSlottedNodesChanged(): void;\n    maxLength?: number;\n    minLength?: number;\n    name: string;\n    placeholder?: string;\n    readOnly: boolean;\n    // (undocumented)\n    protected readOnlyChanged(): void;\n    reportValidity(): boolean;\n    required: boolean;\n    // (undocumented)\n    protected requiredChanged(): void;\n    resize: TextAreaResize;\n    // (undocumented)\n    protected resizeChanged(prev: TextAreaResize | undefined, next: TextAreaResize | undefined): void;\n    select(): void;\n    setCustomValidity(message: string | null): void;\n    // @internal\n    setFormValue(value: File | string | FormData | null, state?: File | string | FormData | null): void;\n    // @internal\n    setValidity(flags?: Partial<ValidityState>, message?: string, anchor?: HTMLElement): void;\n    spellcheck: boolean;\n    get textLength(): number;\n    get type(): 'textarea';\n    get validationMessage(): string;\n    get validity(): ValidityState;\n    get value(): string;\n    set value(next: string);\n    get willValidate(): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining INavProps Interface in TypeScript\nDESCRIPTION: This interface defines props for a Nav component, including groups of navigation links, rendering functions, and styling options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_154\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface INavProps {\n    ariaLabel?: string;\n    className?: string;\n    componentRef?: IRefObject<INav>;\n    // @deprecated\n    expandButtonAriaLabel?: string;\n    focusZoneProps?: IFocusZoneProps;\n    groups: INavLinkGroup[] | null;\n    initialSelectedKey?: string;\n    isOnTop?: boolean;\n    linkAs?: IComponentAs<INavButtonProps>;\n    onLinkClick?: (ev?: React_2.MouseEvent<HTMLElement>, item?: INavLink) => void;\n    onLinkExpandClick?: (ev?: React_2.MouseEvent<HTMLElement>, item?: INavLink) => void;\n    onRenderGroupHeader?: IRenderFunction<IRenderGroupHeaderProps>;\n    onRenderLink?: IRenderFunction<INavLink>;\n    role?: string;\n    // @deprecated\n    selectedAriaLabel?: string;\n    selectedKey?: string;\n    styles?: IStyleFunctionOrObject<INavStyleProps, INavStyles>;\n    theme?: ITheme;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting right-to-left (RTL) direction in Fluent UI React\nDESCRIPTION: TypeScript/JavaScript code snippet demonstrating how to programmatically set right-to-left (RTL) direction for Fluent UI React components using the setRTL API.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/README.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setRTL } from '@fluentui/react/lib/Utilities';\n\nsetRTL(true);\n```\n\n----------------------------------------\n\nTITLE: Using Link Component in React JSX\nDESCRIPTION: Demonstrates various ways to use the Link component, including basic usage, with href, appearance styles, disabled state, target attribute, and as a button.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-link/library/README.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Link>This is a link</Link>\n<Link href=\"https://www.bing.com\">This is a link</Link>\n<Link href=\"https://www.bing.com\" appearance=\"subtle\">This is a link</Link>\n<Link href=\"https://www.bing.com\" disabled>This is a link</Link>\n<Link href=\"https://www.bing.com\" target=\"_blank\">This is a link</Link>\n<Link as=\"button\" appearance=\"subtle\">This is a link</Link>\n```\n\n----------------------------------------\n\nTITLE: Using nested selectors with pseudo classes in Griffel CSS-in-JS\nDESCRIPTION: Demonstrates the proper use of nested selectors when combined with pseudo classes, such as showing a filled icon on hover. This approach allows for conditional styling based on user interaction.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/styles-handbook.md#2025-04-20_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeResetStyles, mergeClasses, shorthands } from '@griffel/react';\nimport { tokens } from '@fluentui/react-theme';\n\nconst useBaseClassName = makeResetStyles({\n  base: {\n    // ✅ Do\n    // Shows filled icon on hover\n    ':hover': {\n      [`& .${iconFilledClassName}`]: {\n        display: 'inline',\n      },\n      [`& .${iconRegularClassName}`]: {\n        display: 'none',\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Fluent UI React Image Component\nDESCRIPTION: Shows examples of using the Image component in JSX. Examples demonstrate various props such as 'alt', 'bordered', 'fit', 'shadow', and 'shape' for styling and rendering images.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-image/library/README.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Image src=\"example_image.png\" />\n<Image src=\"example_image.png\" alt=\"Example image\" />;\n<Image src=\"example_image.png\" bordered />;\n<Image src=\"example_image.png\" fit=\"contain\" />;\n<Image src=\"example_image.png\" shadow />;\n<Image src=\"example_image.png\" shape=\"circular\" />;\n```\n\n----------------------------------------\n\nTITLE: CSS Selector example for bottom-up parsing\nDESCRIPTION: Demonstrates a CSS selector that would be parsed from right to left by the browser engine. The browser first checks for li, then ul, and finally .menu.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/styles-handbook.md#2025-04-20_snippet_17\n\nLANGUAGE: css\nCODE:\n```\n.menu ul li {\n  color: #00f;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Tooltip as a Label in JSX\nDESCRIPTION: Example of using Tooltip as a label for a button with an icon. This demonstrates the JSX structure for a label tooltip.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tooltip/library/docs/Spec.md#2025-04-20_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<Tooltip content=\"Example\" relationship=\"label\">\n  <button>\n    <svg>...</svg>\n  </button>\n</Tooltip>\n```\n\n----------------------------------------\n\nTITLE: Defining Avatar Component and Related Types in TypeScript\nDESCRIPTION: Class definition for the Avatar component that extends BaseAvatar, with properties for appearance, color, shape, and size. Includes lifecycle methods and helper methods for generating colors and initials.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class Avatar extends BaseAvatar {\n    active?: AvatarActive | undefined;\n    appearance?: AvatarAppearance | undefined;\n    color?: AvatarColor | undefined;\n    colorId?: AvatarNamedColor | undefined;\n    static colors: (\"anchor\" | \"dark-red\" | \"cranberry\" | \"red\" | \"pumpkin\" | \"peach\" | \"marigold\" | \"gold\" | \"brass\" | \"brown\" | \"forest\" | \"seafoam\" | \"dark-green\" | \"light-teal\" | \"teal\" | \"steel\" | \"blue\" | \"royal-blue\" | \"cornflower\" | \"navy\" | \"lavender\" | \"purple\" | \"grape\" | \"lilac\" | \"pink\" | \"magenta\" | \"plum\" | \"beige\" | \"mink\" | \"platinum\")[];\n    // (undocumented)\n    connectedCallback(): void;\n    // (undocumented)\n    disconnectedCallback(): void;\n    // @internal\n    generateColor(): void;\n    // @internal\n    generateInitials(): string | void;\n    // @internal\n    handleChange(source: any, propertyName: string): void;\n    shape?: AvatarShape | undefined;\n    size?: AvatarSize | undefined;\n}\n\n// Warning: (ae-missing-release-tag) \"AvatarActive\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n// Warning: (ae-missing-release-tag) \"AvatarActive\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport const AvatarActive: {\n    readonly active: \"active\";\n    readonly inactive: \"inactive\";\n};\n\n// @public\nexport type AvatarActive = ValuesOf<typeof AvatarActive>;\n\n// Warning: (ae-missing-release-tag) \"AvatarAppearance\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n// Warning: (ae-missing-release-tag) \"AvatarAppearance\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport const AvatarAppearance: {\n    readonly ring: \"ring\";\n    readonly shadow: \"shadow\";\n    readonly ringShadow: \"ring-shadow\";\n};\n\n// @public\nexport type AvatarAppearance = ValuesOf<typeof AvatarAppearance>;\n\n// Warning: (ae-missing-release-tag) \"AvatarColor\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n// Warning: (ae-missing-release-tag) \"AvatarColor\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport const AvatarColor: {\n    readonly darkRed: \"dark-red\";\n    readonly cranberry: \"cranberry\";\n    readonly red: \"red\";\n    readonly pumpkin: \"pumpkin\";\n    readonly peach: \"peach\";\n    readonly marigold: \"marigold\";\n    readonly gold: \"gold\";\n    readonly brass: \"brass\";\n    readonly brown: \"brown\";\n    readonly forest: \"forest\";\n    readonly seafoam: \"seafoam\";\n    readonly darkGreen: \"dark-green\";\n    readonly lightTeal: \"light-teal\";\n    readonly teal: \"teal\";\n    readonly steel: \"steel\";\n    readonly blue: \"blue\";\n    readonly royalBlue: \"royal-blue\";\n    readonly cornflower: \"cornflower\";\n    readonly navy: \"navy\";\n    readonly lavender: \"lavender\";\n    readonly purple: \"purple\";\n    readonly grape: \"grape\";\n    readonly lilac: \"lilac\";\n    readonly pink: \"pink\";\n    readonly magenta: \"magenta\";\n    readonly plum: \"plum\";\n    readonly beige: \"beige\";\n    readonly mink: \"mink\";\n    readonly platinum: \"platinum\";\n    readonly anchor: \"anchor\";\n    readonly neutral: \"neutral\";\n    readonly brand: \"brand\";\n    readonly colorful: \"colorful\";\n};\n\n// @public\nexport type AvatarColor = ValuesOf<typeof AvatarColor>;\n\n// @public\nexport const AvatarDefinition: FASTElementDefinition<typeof Avatar>;\n\n// Warning: (ae-missing-release-tag) \"AvatarNamedColor\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\n```\n\n----------------------------------------\n\nTITLE: Internal Datepicker React Component Structure\nDESCRIPTION: Proposed internal component composition for the Datepicker, breaking down the complex UI into modular subcomponents representing different functional sections\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Datepicker.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst Datepicker = () => (\n  <>\n    <InputBlock />\n    <Calendar />\n  </>\n);\n\nconst InputBlock = () => (\n  <>\n    <Input />\n    <Button>\n      <CalendarIcon />\n    </Button>\n  </>\n);\n\nconst Calendar = () => (\n  <>\n    <CalendarControl />\n    <CalendarHeader />\n    <CalendarBody />\n    <CalendarFooter />\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: React Carousel Component Type Definitions\nDESCRIPTION: TypeScript type definitions and component exports for the FluentUI React Carousel package. Includes interfaces for the main Carousel component and its subcomponents, along with their props, states, and utility types.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-carousel/library/etc/react-carousel.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"react\" />\n\nimport { ARIAButtonElement } from '@fluentui/react-aria';\nimport { ARIAButtonSlotProps } from '@fluentui/react-aria';\nimport { ButtonProps } from '@fluentui/react-button';\nimport { ButtonSlots } from '@fluentui/react-button';\nimport { ButtonState } from '@fluentui/react-button';\nimport type { ComponentProps } from '@fluentui/react-utilities';\nimport type { ComponentState } from '@fluentui/react-utilities';\nimport { ContextSelector } from '@fluentui/react-context-selector';\nimport type { EventData } from '@fluentui/react-utilities';\nimport type { EventHandler } from '@fluentui/react-utilities';\nimport { FC } from 'react';\nimport type { ForwardRefComponent } from '@fluentui/react-utilities';\nimport { Provider } from 'react';\nimport { ProviderProps } from 'react';\nimport * as React_2 from 'react';\nimport type { Slot } from '@fluentui/react-utilities';\nimport type { SlotClassNames } from '@fluentui/react-utilities';\nimport { ToggleButtonProps } from '@fluentui/react-button';\nimport { ToggleButtonState } from '@fluentui/react-button';\nimport { TooltipProps } from '@fluentui/react-tooltip';\n```\n\n----------------------------------------\n\nTITLE: Defining TreeItem Provider in TypeScript\nDESCRIPTION: Exports a React Provider component for TreeItemContextValue that can be used to provide tree item context to child components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tree/library/etc/react-tree.api.md#2025-04-20_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const TreeItemProvider: React_2.Provider<TreeItemContextValue | undefined> & React_2.FC<React_2.ProviderProps<TreeItemContextValue | undefined>>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Timestamp Text in High Contrast Theme\nDESCRIPTION: This snippet shows how to create a Text component with timestamp styling for the high contrast theme using makeStyles from FluentUI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-text/library/docs/MIGRATION.md#2025-04-20_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeStyles, Text } from '@fluentui/react-components';\n\nconst useStyles = makeStyles({\n  root: {\n    color: 'rgb(255, 255, 255)',\n  },\n});\n\nconst MyComponent = () => {\n  const styles = useStyles();\n\n  return <Text className={styles.root}>{/* ... */}</Text>;\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript Color Manipulation Functions\nDESCRIPTION: Utility functions for converting between different color formats including HSL, HSV, RGB and hex.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_45\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function hsl2hsv(h: number, s: number, l: number): IHSV;\nexport function hsl2rgb(h: number, s: number, l: number): IRGB;\nexport function hsv2hex(h: number, s: number, v: number): string;\nexport function hsv2hsl(h: number, s: number, v: number): IHSL;\nexport function hsv2rgb(h: number, s: number, v: number): IRGB;\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for @fluentui/react-charting API Report\nDESCRIPTION: This is an automatically generated API report file using API Extractor that documents the public interfaces of the @fluentui/react-charting package. It includes imports, component definitions, enums, and interfaces for various chart components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/etc/react-charting.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CurveFactory } from 'd3-shape';\nimport { FocusZoneDirection } from '@fluentui/react-focus';\nimport { ICalloutContentStyleProps } from '@fluentui/react/lib/Callout';\nimport { ICalloutContentStyles } from '@fluentui/react/lib/Callout';\nimport { ICalloutProps } from '@fluentui/react/lib/Callout';\nimport { IFocusZoneProps } from '@fluentui/react-focus';\nimport { IHoverCardStyleProps } from '@fluentui/react/lib/HoverCard';\nimport { IHoverCardStyles } from '@fluentui/react/lib/HoverCard';\nimport { IOverflowSetProps } from '@fluentui/react/lib/OverflowSet';\nimport { IRefObject } from '@fluentui/react/lib/Utilities';\nimport { IRenderFunction } from '@fluentui/react/lib/Utilities';\nimport { IStyle } from '@fluentui/react/lib/Styling';\nimport { IStyle as IStyle_2 } from '@fluentui/react';\nimport { IStyleFunctionOrObject } from '@fluentui/react/lib/Utilities';\nimport { IStyleFunctionOrObject as IStyleFunctionOrObject_2 } from '@fluentui/react';\nimport { ITheme } from '@fluentui/react/lib/Styling';\nimport { ITheme as ITheme_2 } from '@fluentui/react';\nimport * as React_2 from 'react';\nimport { SankeyLink } from 'd3-sankey';\nimport { SankeyNode } from 'd3-sankey';\nimport { ScaleBand } from 'd3-scale';\nimport { ScaleLinear } from 'd3-scale';\nimport { TimeLocaleDefinition } from 'd3-time-format';\n\n// @public\nexport const AreaChart: React_2.FunctionComponent<IAreaChartProps>;\n\n// @public\nexport const CartesianChart: React_2.FunctionComponent<IModifiedCartesianChartProps>;\n\n// @public\nexport type ChartDataMode = 'default' | 'fraction' | 'percentage';\n\n// @public (undocumented)\nexport const ChartHoverCard: React_2.FunctionComponent<IChartHoverCardProps>;\n\n// @public (undocumented)\nexport const DataVizGradientPalette: {\n    gradient1: string;\n    gradient2: string;\n    gradient3: string;\n    gradient4: string;\n    gradient5: string;\n    gradient6: string;\n    gradient7: string;\n    gradient8: string;\n    gradient9: string;\n    gradient10: string;\n    gradient1Ext: string;\n    gradient2Ext: string;\n    gradient3Ext: string;\n    gradient4Ext: string;\n    gradient5Ext: string;\n    gradient6Ext: string;\n    gradient7Ext: string;\n    gradient8Ext: string;\n    gradient9Ext: string;\n    gradient10Ext: string;\n    success: string;\n    highSuccess: string;\n    warning: string;\n    error: string;\n    highError: string;\n    disabled: string;\n};\n\n// @public (undocumented)\nexport const DataVizPalette: {\n    color1: string;\n    color2: string;\n    color3: string;\n    color4: string;\n    color5: string;\n    color6: string;\n    color7: string;\n    color8: string;\n    color9: string;\n    color10: string;\n    color11: string;\n    color12: string;\n    color13: string;\n    color14: string;\n    color15: string;\n    color16: string;\n    color17: string;\n    color18: string;\n    color19: string;\n    color20: string;\n    color21: string;\n    color22: string;\n    color23: string;\n    color24: string;\n    color25: string;\n    color26: string;\n    color27: string;\n    color28: string;\n    color29: string;\n    color30: string;\n    color31: string;\n    color32: string;\n    color33: string;\n    color34: string;\n    color35: string;\n    color36: string;\n    color37: string;\n    color38: string;\n    color39: string;\n    color40: string;\n    info: string;\n    disabled: string;\n    highError: string;\n    error: string;\n    warning: string;\n    success: string;\n    highSuccess: string;\n};\n\n// @public\nexport const DeclarativeChart: React_2.FunctionComponent<DeclarativeChartProps>;\n\n// @public\nexport interface DeclarativeChartProps extends React_2.RefAttributes<HTMLDivElement> {\n    chartSchema: Schema;\n    componentRef?: IRefObject<IDeclarativeChart>;\n    onSchemaChange?: (eventData: Schema) => void;\n}\n\n// @public\nexport const DonutChart: React_2.FunctionComponent<IDonutChartProps>;\n\n// @public\nexport const GaugeChart: React_2.FunctionComponent<IGaugeChartProps>;\n\n// @public (undocumented)\nexport enum GaugeChartVariant {\n    // (undocumented)\n    MultipleSegments = \"multiple-segments\",\n    // (undocumented)\n    SingleSegment = \"single-segment\"\n}\n\n// @public (undocumented)\nexport enum GaugeValueFormat {\n    // (undocumented)\n    Fraction = \"fraction\",\n    // (undocumented)\n    Percentage = \"percentage\"\n}\n\n// @public (undocumented)\nexport const getChartHoverCardStyles: (props: IChartHoverCardStyleProps) => IChartHoverCardStyles;\n\n// @public (undocumented)\nexport const getColorFromToken: (token: string, isDarkTheme?: boolean) => string;\n\n// @public (undocumented)\nexport const getGradientFromToken: (token: string, isDarkTheme?: boolean) => [string, string];\n\n// @public (undocumented)\nexport const getNextColor: (index: number, offset?: number, isDarkTheme?: boolean) => string;\n\n// @public (undocumented)\nexport const getNextGradient: (index: number, offset?: number, isDarkTheme?: boolean) => [string, string];\n\n// @public\nexport const GroupedVerticalBarChart: React_2.FunctionComponent<IGroupedVerticalBarChartProps>;\n\n// @public\nexport const HeatMapChart: React_2.FunctionComponent<IHeatMapChartProps>;\n\n// @public\nexport const HorizontalBarChart: React_2.FunctionComponent<IHorizontalBarChartProps>;\n\n// @public (undocumented)\nexport enum HorizontalBarChartVariant {\n    // (undocumented)\n    AbsoluteScale = \"absolute-scale\",\n    // (undocumented)\n    PartToWhole = \"part-to-whole\"\n}\n\n// @public\nexport const HorizontalBarChartWithAxis: React_2.FunctionComponent<IHorizontalBarChartWithAxisProps>;\n\n// @public (undocumented)\nexport interface IAccessibilityProps {\n    ariaDescribedBy?: string;\n    ariaLabel?: string;\n    ariaLabelledBy?: string;\n}\n\n// @public\nexport interface IAreaChartProps extends ICartesianChartProps {\n    culture?: string;\n    data: IChartProps;\n    enableGradient?: boolean;\n    enablePerfOptimization?: boolean;\n    mode?: 'tozeroy' | 'tonexty';\n    onRenderCalloutPerDataPoint?: IRenderFunction<ICustomizedCalloutData>;\n    onRenderCalloutPerStack?: IRenderFunction<ICustomizedCalloutData>;\n    // (undocumented)\n    optimizeLargeData?: boolean;\n    // @deprecated\n    showYAxisGridLines?: boolean;\n    styles?: IStyleFunctionOrObject<ICartesianChartStyleProps, ICartesianChartStyles>;\n}\n\n// @public\nexport interface IAreaChartStyleProps extends ICartesianChartStyleProps {\n}\n\n// @public\nexport interface IAreaChartStyles extends ICartesianChartStyles {\n}\n\n// @public (undocumented)\nexport interface IBasestate {\n    // (undocumented)\n    activeLegend?: string;\n    // (undocumented)\n    color?: string;\n    // (undocumented)\n    containerHeight?: number;\n    // (undocumented)\n    containerWidth?: number;\n    // (undocumented)\n    dataForHoverCard?: number;\n    // (undocumented)\n    _height?: number;\n    // (undocumented)\n    hoveredLineColor?: string;\n    // (undocumented)\n    hoverXValue?: string | number | null;\n    // (undocumented)\n    hoverYValue?: string | number | null;\n    // (undocumented)\n    isCalloutVisible: boolean;\n    // (undocumented)\n    isLegendHovered?: boolean;\n    // (undocumented)\n    isLegendSelected?: boolean;\n    // (undocumented)\n    lineColor?: string;\n    // (undocumented)\n    refSelected?: any;\n    // (undocumented)\n    selectedLegend?: string;\n    // (undocumented)\n    _width?: number;\n    // (undocumented)\n    xCalloutValue?: string;\n    // (undocumented)\n    yCalloutValue?: string;\n    // (undocumented)\n    YValueHover?: {\n        legend?: string;\n        y?: number;\n        color?: string;\n    }[];\n}\n\n// @public\nexport interface ICartesianChartProps {\n    calloutProps?: Partial<ICalloutProps>;\n    // @deprecated\n    chartLabel?: string;\n    className?: string;\n    componentRef?: IRefObject<IChart>;\n    customDateTimeFormatter?: (dateTime: Date) => string;\n    dateLocalizeOptions?: Intl.DateTimeFormatOptions;\n    enabledLegendsWrapLines?: boolean;\n    enableReflow?: boolean;\n    focusZonePropsForLegendsInHoverCard?: IFocusZoneProps;\n    height?: number;\n    hideLegend?: boolean;\n    hideTickOverlap?: boolean;\n    hideTooltip?: boolean;\n    href?: string;\n    // (undocumented)\n    legendProps?: Partial<ILegendsProps>;\n    legendsOverflowProps?: Partial<IOverflowSetProps>;\n    // (undocumented)\n    legendsOverflowText?: any;\n    margins?: IMargins;\n    noOfCharsToTruncate?: number;\n    parentRef?: HTMLElement | null;\n    rotateXAxisLables?: boolean;\n    roundedTicks?: boolean;\n    secondaryYAxistitle?: string;\n    secondaryYScaleOptions?: {\n        yMinValue?: number;\n        yMaxValue?: number;\n    };\n    showXAxisLablesTooltip?: boolean;\n    strokeWidth?: number;\n    styles?: IStyleFunctionOrObject<ICartesianChartStyleProps, ICartesianChartStyles>;\n    supportNegativeData?: boolean;\n    svgProps?: React_2.SVGProps<SVGSVGElement>;\n    theme?: ITheme;\n    tickFormat?: string;\n    tickPadding?: number;\n    tickValues?: number[] | Date[] | string[];\n    timeFormatLocale?: TimeLocaleDefinition;\n    useUTC?: boolean;\n    width?: number;\n    wrapXAxisLables?: boolean;\n    xAxisTickCount?: number;\n    xAxisTickPadding?: number;\n    xAxistickSize?: number;\n    xAxisTitle?: string;\n    xMaxValue?: number;\n    yAxisTickCount?: number;\n    yAxisTickFormat?: any;\n    yAxisTitle?: string;\n    yMaxValue?: number;\n    yMinValue?: number;\n}\n\n// @public\nexport interface ICartesianChartStyleProps {\n    className?: string;\n    color?: string;\n    enableReflow?: boolean;\n    height?: number;\n    href?: string;\n    isRtl?: boolean;\n    lineColor?: string;\n    shouldHighlight?: boolean;\n    theme: ITheme;\n    toDrawShape?: boolean;\n    width?: number;\n}\n\n// @public\nexport interface ICartesianChartStyles {\n    axisTitle?: IStyle;\n    calloutBlockContainer?: IStyle;\n    calloutContentRoot?: IStyle;\n    calloutContentX?: IStyle;\n    calloutContentY?: IStyle;\n    calloutDateTimeContainer?: IStyle;\n    calloutInfoContainer?: IStyle;\n    calloutlegendText?: IStyle;\n    chartTitle?: IStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: Define Offset type\nDESCRIPTION: Defines a type called `Offset` which can be an `OffsetFunction`, `OffsetObject`, or `OffsetShorthand`. This type is used to specify the offset of a positioned element from its target.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-positioning/etc/react-positioning.api.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type Offset = OffsetFunction | OffsetObject | OffsetShorthand;\n```\n\n----------------------------------------\n\nTITLE: Defining data structure for DataGrid items in TypeScript\nDESCRIPTION: This snippet defines the types for the cells used in the DataGrid as well as the overall item structure. It specifies File, Author, Last Updated, and Last Update types along with an Item type that encapsulates all these details.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-table/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype FileCell = {\n  label: string;\n  icon: JSX.Element;\n};\n\ntype LastUpdatedCell = {\n  label: string;\n  timestamp: number;\n};\n\ntype LastUpdateCell = {\n  label: string;\n  icon: JSX.Element;\n};\n\ntype AuthorCell = {\n  label: string;\n  status: PresenceBadgeStatus;\n};\n\ntype Item = {\n  file: FileCell;\n  author: AuthorCell;\n  lastUpdated: LastUpdatedCell;\n  lastUpdate: LastUpdateCell;\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Skeleton Component Usage in React\nDESCRIPTION: Demonstrates how to import and use the Skeleton and SkeletonItem components from @fluentui/react-skeleton. It shows creating a skeleton with a circular and rectangular item.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-skeleton/library/docs/Spec.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Skeleton, SkeletonItem } from '@fluentui/react-skeleton';\n\nfunction App() {\n  return (\n    <Skeleton>\n      <SkeletonItem shape=\"circle\" size={24} />\n      <SkeletonItem shape=\"rectangle\" size={16} />\n    </Skeleton>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: UseEffect Logic in List Rendering\nDESCRIPTION: This snippet illustrates how the List component uses useLayoutEffect to ensure ListItem components are provided the correct active state values after an update.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/context-selector-tearing.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nuseIsomorphicLayoutEffect(() => {\n  valueRef.current = props.value; // `props.value` equals to `2`\n  // ...\n  listeners.forEach(listener => {\n    listener([versionRef.current, props.value]);\n  });\n}, [props.value]);\n```\n\n----------------------------------------\n\nTITLE: TagPickerControl Slots Type\nDESCRIPTION: Defines the slots available for the TagPickerControl component, allowing customization of its structure, including the root element and secondary action.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport type TagPickerControlSlots = {\n    root: Slot<ExtractSlotProps<Slot<'div'> & {\n        style?: TagPickerControlCSSProperties;\n    }>>;\n    secondaryAction: Slot<'span'>;\n} & Pick<ComboboxSlots, 'expandIcon'>;\"\n```\n\n----------------------------------------\n\nTITLE: Portal Component with SSR Awareness\nDESCRIPTION: This snippet outlines how a `Portal` component can be made aware of SSR state by consuming context and forcing a re-render after the first server render. It uses `React.useState` and `React.useLayoutEffect` to conditionally render the portal content, ensuring it's only rendered after hydration on the client-side when not in SSR.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/ssr-context.md#2025-04-20_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defaultContext, useSSRContext } from 'context';\n\n// if the ssrContext is the default value -> we are not in SSR\n// no probem with first render\nconst [shouldRender, setShouldRender] = \n  React.useState(ssrContextValue === defaultSSRContextValue );\n\n// This if statement technically breaks the rules of hooks, but is safe because the condition never changes after\n    // mounting.\nif (!isSSR()) {\n    // Force second render after app is hydrated\n    React.useLayoutEffect(() => {\n      if (!shouldRender) {\n        setShouldRender(true);\n      }\n    }, [])\n```\n\n----------------------------------------\n\nTITLE: Recomposing Button Component with Custom Styles in React\nDESCRIPTION: Shows how to recompose a Button component with custom styles, replacing the default Fluent UI Button.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/custom-styling.md#2025-04-20_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { renderButton_unstable, useButton_unstable } from '@fluentui/react-components';\nimport type { ButtonProps, ForwardRefComponent } from '@fluentui/react-components';\nimport { useCustomButtonStyles } from '../styling/button';\n\nexport const Button: ForwardRefComponent<ButtonProps> = React.forwardRef((props, ref) => {\n  const state = useButton_unstable(props, ref);\n  useCustomButtonStyles(state);\n  return renderButton_unstable(state);\n}) as ForwardRefComponent<ButtonProps>;\n\nButton.displayName = 'Button';\n```\n\n----------------------------------------\n\nTITLE: Defining MessageBarType Enumeration in TypeScript\nDESCRIPTION: Enumeration for MessageBar types in FluentUI, defining different severity levels for messages including info, error, warning, blocked, severeWarning, and success.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_235\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport enum MessageBarType {\n    blocked = 2,\n    error = 1,\n    info = 0,\n    severeWarning = 3,\n    success = 4,\n    warning = 5\n}\n```\n\n----------------------------------------\n\nTITLE: SpinButton Props Table in Markdown\nDESCRIPTION: Markdown table documenting the SpinButton component props including their descriptions, covering accessibility labels, button customization, value controls, and event handlers.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-spinbutton/library/docs/Spec.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Prop                     | Description                                                                                                                                                                                                                                                                                                                                                                                                                                    |\n| ------------------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| decrementButtonAriaLabel | Accessible label text for the decrement button (for screen reader users).                                                                                                                                                                                                                                                                                                                                                                                      |\n| decrementButtonIcon      | Custom props for the decrement button.                                                                                                                                                                                                                                                                                                                                                                                                                         |\n| defaultValue             | Initial value of the control (assumed to be valid). Updates to this prop will not be respected. Use this if you intend for the SpinButton to be an uncontrolled component which maintains its own value. For a controlled component, use value instead. (Mutually exclusive with value.)                                                                                                                                                                       |\n| disabled                 | Whether or not the control is disabled.                                                                                                                                                                                                                                                                                                                                                                                                                        |\n| downArrowButtonStyles    | Custom styles for the down arrow button. Note: The buttons are in a checked state when arrow keys are used to increment/decrement the SpinButton. Use rootChecked instead of rootPressed for styling when that is the case.                                                                                                                                                                                                                                    |\n| iconButtonProps          | Additional props for the up and down arrow buttons.                                                                                                                                                                                                                                                                                                                                                                                                            |\n| iconProps                | Props for an icon to display alongside the control's label.                                                                                                                                                                                                                                                                                                                                                                                                    |\n| incrementButtonAriaLabel | Accessible label text for the increment button (for screen reader users).                                                                                                                                                                                                                                                                                                                                                                                      |\n| incrementButtonIcon      | Custom props for the increment button.                                                                                                                                                                                                                                                                                                                                                                                                                         |\n| inputProps               | Additional props for the input field.                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| keytipProps              | Keytip for the control.                                                                                                                                                                                                                                                                                                                                                                                                                                        |\n| label                    | Descriptive label for the control.                                                                                                                                                                                                                                                                                                                                                                                                                             |\n| labelPosition            | Where to position the control's label.                                                                                                                                                                                                                                                                                                                                                                                                                         |\n| max                      | Max value of the control. If not provided, the control has no maximum value.                                                                                                                                                                                                                                                                                                                                                                                   |\n| min                      | Min value of the control. If not provided, the control has no minimum value.                                                                                                                                                                                                                                                                                                                                                                                   |\n| onBlur                   | Callback for when the control loses focus.                                                                                                                                                                                                                                                                                                                                                                                                                     |\n| onChange                 | Callback for when the committed/validated value changes. This is called _after_ onIncrement, onDecrement, or onValidate, on the following events: - User presses the up/down buttons (on single press or every spin) - User presses the up/down arrow keys (on single press or every spin) - User _commits_ edits to the input text by focusing away (blurring) or pressing enter. Note that this is NOT called for every key press while the user is editing. |\n| onDecrement              | Callback for when the decrement button or down arrow key is pressed.                                                                                                                                                                                                                                                                                                                                                                                           |\n```\n\n----------------------------------------\n\nTITLE: Warning Function for Deprecated Props in TypeScript\nDESCRIPTION: Utility function to warn about deprecated props usage in components. It takes component name, props object, and a deprecation map to check against.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/utilities/etc/utilities.api.md#2025-04-20_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function warnDeprecations<P extends {}>(componentName: string, props: P, deprecationMap: ISettingsMap<P>): void;\n```\n\n----------------------------------------\n\nTITLE: Basic Tag Usage\nDESCRIPTION: This snippet demonstrates the basic usage of the `<Tag>` component. It displays a simple tag with the text \"Content\".\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tags/library/README.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Tag>Content</Tag>\n```\n\n----------------------------------------\n\nTITLE: Customizing Option Rendering in v9 Combobox/Dropdown\nDESCRIPTION: Example showing how to customize option rendering in v9 Combobox/Dropdown components by providing JSX content as children of the Option component and using the text prop.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/library/docs/Spec.md#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Combobox>\n  <Option key=\"A\" text=\"Option A\">\n    Option A <CalendarIcon />\n  </Option>\n  <Option key=\"B\" text=\"Option B\" style={{ color: 'red' }}>\n    Option <i>B</i>\n  </Option>\n</Combobox>\n```\n\n----------------------------------------\n\nTITLE: Get Icon Class Name Function\nDESCRIPTION: Defines a function, `getIconClassName`, that returns the CSS class name associated with a given icon name. Used for styling icons within the Fluent UI framework.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/style-utilities/etc/style-utilities.api.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n\"export function getIconClassName(name: string): string;\"\n```\n\n----------------------------------------\n\nTITLE: Defining ICommandBarProps Interface\nDESCRIPTION: Defines the `ICommandBarProps` interface, which extends `React_2.HTMLAttributes<HTMLDivElement>` and specifies the properties for the CommandBar component. It includes properties for aria labels, button components, class names, component refs, items, data handling, overflow items, resizing, styling, and theming.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_75\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ICommandBarProps extends React_2.HTMLAttributes<HTMLDivElement> {\n    ariaLabel?: string;\n    buttonAs?: IComponentAs<IButtonProps>;\n    className?: string;\n    componentRef?: IRefObject<ICommandBar>;\n    dataDidRender?: (renderedData: any) => void;\n    farItems?: ICommandBarItemProps[];\n    farItemsGroupAriaLabel?: string;\n    items: ICommandBarItemProps[];\n    onDataGrown?: (movedItem: ICommandBarItemProps) => void;\n    onDataReduced?: (movedItem: ICommandBarItemProps) => void;\n    onGrowData?: (data: ICommandBarData) => ICommandBarData | undefined;\n    onReduceData?: (data: ICommandBarData) => ICommandBarData | undefined;\n    overflowButtonAs?: IComponentAs<IButtonProps>;\n    overflowButtonProps?: IButtonProps;\n    overflowItems?: ICommandBarItemProps[];\n    primaryGroupAriaLabel?: string;\n    resizeGroupAs?: IComponentAs<IResizeGroupProps>;\n    shiftOnReduce?: boolean;\n    styles?: IStyleFunctionOrObject<ICommandBarStyleProps, ICommandBarStyles>;\n    theme?: ITheme;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Functions for Interaction Tags in TypeScript\nDESCRIPTION: This snippet includes the rendering functions for the `InteractionTag`, `InteractionTagPrimary`, and `InteractionTagSecondary` components. These functions are responsible for creating the corresponding JSX elements based on the component states and provided context values, thus defining their visual structure in the UI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tags/library/etc/react-tags.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const renderInteractionTag_unstable: (state: InteractionTagState, contextValues: InteractionTagContextValues) => JSX.Element;\n\n// @public\nexport const renderInteractionTagPrimary_unstable: (state: InteractionTagPrimaryState, contextValues: InteractionTagPrimaryContextValues) => JSX.Element;\n\n// @public\nexport const renderInteractionTagSecondary_unstable: (state: InteractionTagSecondaryState) => JSX.Element;\n\n// @public\nexport const renderTag_unstable: (state: TagState, contextValues: TagContextValues) => JSX.Element;\n\n// @public\nexport const renderTagGroup_unstable: (state: TagGroupState, contextValue: TagGroupContextValues) => JSX.Element;\n```\n\n----------------------------------------\n\nTITLE: ChoiceGroup usage in Fabric (v7/v8)\nDESCRIPTION: Demonstrates how to use the ChoiceGroup component in Fabric to create a radio button group. The `options` prop defines the radio button options, and `selectedKey` specifies the default selection.  This example uses keys to identify selected values.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-radio/library/docs/Spec.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<ChoiceGroup\n  defaultSelectedKey=\"B\"\n  options={[\n    { key: 'A', text: 'Option A' },\n    { key: 'B', text: 'Option B' },\n    { key: 'C', text: 'Option C', disabled: true },\n    { key: 'D', text: 'Option D' },\n  ]}\n  label=\"Pick one\"\n  required={true}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Pill Component Props in TypeScript\nDESCRIPTION: This TypeScript snippet defines the properties for Pill and PillGroup components. The interfaces indicate accessible behaviors, sizing options, appearance control, and event handlers for user interactions like dismissal and selection changes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Pills.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PillGroupProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<PillGroupBehaviorProps>;\n}\n\nexport interface PillProps extends UIComponentProps, ContentComponentProps<ShorthandValue<BoxProps>> {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<PillBehaviorProps>;\n\n  /**\n   * A Pill can be sized.\n   */\n  size?: Extract<SizeValue, 'smaller' | 'small' | 'medium'>;\n\n  /**\n   * A Pill can be rectangular\n   */\n  rectangular?: boolean;\n\n  /**\n   * A Pill can be filled, inverted or outline\n   */\n  appearance?: 'filled' | 'inverted' | 'outline';\n\n  /**\n   * A Pill can be disbled\n   */\n  disabled?: boolean;\n\n  /**\n   * A Pill can be actionable\n   */\n  actionable?: boolean;\n\n  /**\n   * A PillAction shorthand for the action slot.\n   */\n  action?: ShorthandValue<PillActionProps>;\n\n  /**\n   * A PillAction shorthand for the action slot.\n   */\n  icon?: ShorthandValue<PillIconProps>;\n\n  /**\n   * A PillImage shorthand for the image slot.\n   */\n  image?: ShorthandValue<PillImageProps>;\n\n  /**\n   * Called after user will dismiss the Pill.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onDismiss?: ComponentEventHandler<PillProps>;\n\n  /**\n   * A Pill can be selectable\n   */\n  selectable?: boolean;\n\n  /**\n   * A Pill state for selection\n   */\n  selected?: boolean;\n\n  /**\n   * A Pill can be selected by default\n   */\n  defaultSelected?: boolean;\n\n  /**\n   * A Pill can have custom selected indicator\n   */\n  selectedIndicator?: ShorthandValue<PillIconProps>;\n\n  /**\n   * Called after user change selected state\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onSelectionChange?: ComponentEventHandler<PillProps>;\n}\n```\n\n----------------------------------------\n\nTITLE: DialogTrigger Child Props Definition\nDESCRIPTION: Defines the props passed to the children of DialogTrigger. It extends ARIAButtonResultProps and adds an optional aria-haspopup attribute set to 'dialog'. ARIAButtonResultProps comes from '@fluentui/react-aria'.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/etc/react-dialog.api.md#2025-04-20_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport type DialogTriggerChildProps<Type extends ARIAButtonType = ARIAButtonType, Props = {}> = ARIAButtonResultProps<Type, Props & {\n    'aria-haspopup'?: 'dialog';\n}>;\"\n```\n\n----------------------------------------\n\nTITLE: Vertical Tab Content Arrangement in Fluent UI React\nDESCRIPTION: This snippet shows how to use the verticalTabContent prop to arrange tab content vertically for a TabList in Fluent UI. It demonstrates the arrangement with and without the vertical prop applied.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tabs/library/docs/Spec.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<TabList verticalTabContent>\n  <Tab value=\"tab1\">One</Tab>\n  <Tab value=\"tab2\">Two</Tab>\n  <Tab value=\"tab3\">Three</Tab>\n</TabList>\n\n<TabList vertical verticalTabContent>\n  <Tab value=\"tab1\">One</Tab>\n  <Tab value=\"tab2\">Two</Tab>\n  <Tab value=\"tab3\">Three</Tab>\n</TabList>\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Component with High Contrast Theme in FluentUI\nDESCRIPTION: This snippet demonstrates how to create a Text component with high contrast theme styling using makeStyles from FluentUI. It sets the text color to red.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-text/library/docs/MIGRATION.md#2025-04-20_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeStyles, Text } from '@fluentui/react-components';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n     color: 'rgb(255, 0, 0)'\n  },\n})\n\nconst MyComponent = () => {\n    const styles = useStyles()\n\n    return <Text className={styles.root}>{...}</Text>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TreeItemSlots Type in TypeScript\nDESCRIPTION: Defines the slots available for the TreeItem component, including a root slot with style properties specifically for tree items.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tree/library/etc/react-tree.api.md#2025-04-20_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type TreeItemSlots = {\n    root: Slot<ExtractSlotProps<Slot<'div'> & {\n        style?: TreeItemCSSProperties;\n    }>>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining IFacepileProps Interface in TypeScript\nDESCRIPTION: This snippet defines the IFacepileProps interface, which extends React.ClassAttributes<FacepileBase>. It includes various properties for configuring a Facepile component, such as button props, styling options, and persona rendering functions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_139\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface IFacepileProps extends React_2.ClassAttributes<FacepileBase> {\n    addButtonProps?: IButtonProps;\n    ariaDescription?: string;\n    ariaLabel?: string;\n    // @deprecated\n    chevronButtonProps?: IButtonProps;\n    className?: string;\n    componentRef?: IRefObject<IFacepile>;\n    getPersonaProps?: (persona: IFacepilePersona) => IPersonaSharedProps;\n    maxDisplayablePersonas?: number;\n    onRenderPersona?: IRenderFunction<IFacepilePersona>;\n    onRenderPersonaCoin?: IRenderFunction<IFacepilePersona>;\n    onRenderPersonaWrapper?: IRenderFunction<IFacepilePersona>;\n    overflowButtonProps?: IButtonProps;\n    overflowButtonType?: OverflowButtonType;\n    overflowPersonas?: IFacepilePersona[];\n    personas: IFacepilePersona[];\n    personaSize?: PersonaSize;\n    showAddButton?: boolean;\n    showTooltip?: boolean;\n    styles?: IStyleFunctionOrObject<IFacepileStyleProps, IFacepileStyles>;\n    theme?: ITheme;\n}\n```\n\n----------------------------------------\n\nTITLE: Matrix Conversion Utility in TypeScript\nDESCRIPTION: Function to convert a flat array into a matrix (2D array) with a specified number of columns. Useful for creating grid-like structures from linear data.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/utilities/etc/utilities.api.md#2025-04-20_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function toMatrix<T>(items: T[], columnCount: number): T[][];\n```\n\n----------------------------------------\n\nTITLE: Implementing Carousel in Fluent UI v9\nDESCRIPTION: The Fluent UI v9 implementation uses a composable approach with separate components for Carousel, CarouselSlider, CarouselCard, CarouselNavContainer, CarouselNav, and CarouselNavButton. This provides more flexibility for customization.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-carousel/library/docs/Migration.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n  <Carousel>\n    <CarouselSlider>\n      {Cards.map((_cardProps, index) => (\n        <CarouselCard>\n          Card {index + 1}\n        </BannerCard>\n      ))}\n    </CarouselSlider>\n    <CarouselNavContainer>\n      <CarouselNav>{index => <CarouselNavButton/>}</CarouselNav>\n    </CarouselNavContainer>\n  </Carousel>\n```\n\n----------------------------------------\n\nTITLE: CardFooter Implementation - After Migration\nDESCRIPTION: Example showing the new implementation of CardFooter using @fluentui/react-components package, with updated prop usage.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Card/CardFooter.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CardFooter } from '@fluentui/react-components';\n\nconst Component = () => <CardFooter Footer=\"Lorem ipsum\" />;\n```\n\n----------------------------------------\n\nTITLE: Basic TeachingPopover Implementation in React JSX\nDESCRIPTION: Example implementation of a basic TeachingPopover component with a trigger button, header, body with image, title, text content, and footer with primary and secondary actions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-teaching-popover/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<TeachingPopover>\n  <TeachingPopoverTrigger>\n    <Button>TeachingPopover trigger</Button>\n  </TeachingPopoverTrigger>\n  <TeachingPopoverSurface>\n    <TeachingPopoverHeader>Tips</TeachingPopoverHeader>\n    <TeachingPopoverBody media={<Image alt=\"test image\" fit=\"cover\" src={swapImage} />}>\n      <TeachingPopoverTitle>Teaching Bubble Title</TeachingPopoverTitle>\n      <div>This is a teaching popover body</div>\n    </TeachingPopoverBody>\n    <TeachingPopoverFooter primary=\"Learn more\" secondary=\"Got it\" />\n  </TeachingPopoverSurface>\n</TeachingPopover>\n```\n\n----------------------------------------\n\nTITLE: Area Chart Component Definition\nDESCRIPTION: Defines the AreaChart React component, which is used to render area charts. It extends CartesianChart and includes props for customization like culture, data, gradient enabling, performance optimization, rendering callouts, and styling. It uses React's FunctionComponent type for definition.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charts/library/etc/react-charts.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport const AreaChart: React_2.FunctionComponent<AreaChartProps>;\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Fluent React in shadow DOM using FluentProvider\nDESCRIPTION: Demonstrates how to render Fluent React components inside shadow DOM using FluentProvider in the light DOM. This approach uses the root.div from @fluentui-contrib/react-shadow to create the shadow root.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/WebComponentsInterop/UsingFluentReactWithWebComponents.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { root } from '@fluentui-contrib/react-shadow';\nimport { FluentProvider, webLightTheme, Button } from '@fluentui/react-components';\n\n<FluentProvider theme={webLightTheme}>\n  {/* This is the shadow root */}\n  <root.div>\n    <Button>Fluent React Button in shadow DOM</Button>\n  </root.div>\n</FluentProvider>;\n```\n\n----------------------------------------\n\nTITLE: Multiple Panels Opened Accordion Example\nDESCRIPTION: Example demonstrating Accordion with multiple panels opened simultaneously using the multiple prop.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-accordion/library/docs/Spec.md#2025-04-20_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst accordion = (\n  <Accordion open={[0, 1]} multiple>\n    <AccordionItem>\n      <AccordionHeader>\n        First Panel\n      </AccordionHeader>\n      <AccordionPanel>\n        This is the content of the first Panel\n      </AccordionPanel>\n    </AccordionItem>\n    <AccordionItem>\n      <AccordionHeader>\n        Second Panel\n      </AccordionHeader>\n      <AccordionPanel>\n        This is the content of the second Panel\n      </AccordionPanel>\n    </AccordionItem>\n  <Accordion>\n)\n```\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <div role=\"heading\">\n    <div role=\"button\" aria-expanded=\"true\" aria-controls=\"sect1\" id=\"accordion1\">\n      <svg>Chevron Icon</svg>\n      First Panel\n    </div>\n  </div>\n  <div id=\"sect1\" role=\"region\" aria-labelledby=\"accordion1\">This is the content of the first Panel</div>\n  <div role=\"heading\">\n    <div role=\"button\" aria-expanded=\"true\" aria-controls=\"sect2\" id=\"accordion2\">\n      <svg>Chevron Icon</svg>\n      Second Panel\n    </div>\n  </div>\n  <div id=\"sect2\" role=\"region\" aria-labelledby=\"accordion2\">This is the content of the second Panel</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering a CompoundButton in React\nDESCRIPTION: This snippet shows how to use the CompoundButton component with an icon and secondary content.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-button/library/README.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<CompoundButton icon={<CalendarMonth />} secondaryContent=\"Secondary content\" {...props}>\n  Example\n</CompoundButton>\n```\n\n----------------------------------------\n\nTITLE: Defining ITheme Interface in TypeScript for FluentUI\nDESCRIPTION: Public interface that extends the base Theme type in FluentUI. This interface allows components to reference theme properties in a consistent way.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/theme/etc/theme.api.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface ITheme extends Theme {\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a MessageBar Component with Actions in FluentUI React\nDESCRIPTION: This snippet demonstrates how to create a MessageBar component with a title, message body, and action buttons. It includes a dismiss button as a container action and additional action buttons within the MessageBarActions component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-message-bar/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MessageBar, MessageBarTitle, MessageBarBody, Button } from '@fluentui/react-components';\nimport { DismissRegular } from '@fluentui/react-icons';\n\nfunction Example() {\n  return (\n    <MessageBar>\n      <MessageBarBody>\n        <MessageBarTitle>Descriptive title</MessageBarTite>\n        This is a message bar\n\n        <MessageBarActions containerAction={<Button arial-label=\"dismiss\" icon={<DismissReguladr />} />}>\n          <Button>Action</Button>\n          <Button>Action</Button>\n        </MessageBarActions>\n      </MessageBarBody>\n    </MessageBar>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: DocumentCardPreview with Overflow Count - FluentUI v8\nDESCRIPTION: Example showing how to implement DocumentCardPreview with overflow document count functionality in FluentUI v8. Uses getOverflowDocumentCountText and maxDisplayCount props.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Card/CardPreview.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DocumentCard, DocumentCardPreview } from '@fluentui/react/lib/DocumentCard';\nimport { TestImages } from '@fluentui/example-data';\n\nconst previewImages = [\n  {\n    name: 'Revenue stream proposal fiscal year 2016 version02.pptx',\n    iconSrc: TestImages.iconPpt,\n    width: 144,\n  },\n  {\n    name: 'New Contoso Collaboration for Conference Presentation Draft',\n    iconSrc: TestImages.iconPpt,\n    width: 144,\n  },\n  {\n    name: 'Spec Sheet for design',\n    iconSrc: TestImages.iconPpt,\n    width: 144,\n  },\n];\n\nconst Component = () => (\n  <DocumentCard>\n    <DocumentCardPreview\n      getOverflowDocumentCountText={(count: number) => `+${count} more`}\n      maxDisplayCount={2}\n      previewImages={previewImages}\n    />\n  </DocumentCard>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Icons in Tabs with Fluent UI React\nDESCRIPTION: This code snippet demonstrates how to include icons in the Tab components using Fluent UI in React. It shows both a tab with icon and an icon-only tab.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tabs/library/docs/Spec.md#2025-04-20_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<TabList>\n  <Tab icon={<CheckboxComposite />} value=\"allowed\">\n    Allowed\n  </Tab>\n  <Tab icon={<BlockedSite />} value=\"blocked\">\n    Blocked\n  </Tab>\n</TabList>\n\n<TabList>\n  <Tab icon={<CheckboxComposite />} value=\"allowed\" />\n  <Tab icon={<BlockedSite />} value=\"blocked\" />\n</TabList>\n```\n\n----------------------------------------\n\nTITLE: Exporting Render Functions - JavaScript\nDESCRIPTION: This snippet exports various render functions that provide the implementation details for rendering multiple components of the Fluent UI library, ensuring efficient building of UI structures.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/etc/react-components.api.md#2025-04-20_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nexport { renderAccordion_unstable }\n\nexport { renderAccordionHeader_unstable }\n\nexport { renderAccordionItem_unstable }\n\nexport { renderAccordionPanel_unstable }\n\nexport { renderAlphaSlider_unstable }\n\nexport { renderAriaLiveAnnouncer_unstable }\n\nexport { renderAvatar_unstable }\n\nexport { renderAvatarGroup_unstable }\n\nexport { renderAvatarGroupItem_unstable }\n\nexport { renderAvatarGroupPopover_unstable }\n\nexport { renderBadge_unstable }\n\nexport { renderBreadcrumb_unstable }\n\nexport { renderBreadcrumbButton_unstable }\n\nexport { renderBreadcrumbDivider_unstable }\n\nexport { renderBreadcrumbItem_unstable }\n\nexport { renderButton_unstable }\n\nexport { renderCard_unstable }\n\nexport { renderCardFooter_unstable }\n\nexport { renderCardHeader_unstable }\n\nexport { renderCardPreview_unstable }\n\nexport { renderCarousel_unstable }\n\nexport { renderCarouselAutoplayButton_unstable }\n\nexport { renderCarouselButton_unstable }\n\nexport { renderCarouselCard_unstable }\n\nexport { renderCarouselNav_unstable }\n\nexport { renderCarouselNavButton_unstable }\n\nexport { renderCarouselNavContainer_unstable }\n\nexport { renderCarouselNavImageButton_unstable }\n\nexport { renderCarouselSlider_unstable }\n\nexport { renderCarouselViewport_unstable }\n\nexport { renderCheckbox_unstable }\n\nexport { renderColorArea_unstable }\n\nexport { renderColorPicker_unstable }\n\nexport { renderColorSlider_unstable }\n\nexport { renderColorSwatch_unstable }\n\nexport { renderCombobox_unstable }\n\nexport { renderCompoundButton_unstable }\n\nexport { renderDataGrid_unstable }\n\nexport { renderDataGridBody_unstable }\n\nexport { renderDataGridCell_unstable }\n\nexport { renderDataGridHeader_unstable }\n\nexport { renderDataGridHeaderCell_unstable }\n\nexport { renderDataGridRow_unstable }\n\nexport { renderDataGridSelectionCell_unstable }\n\nexport { renderDialog_unstable }\n\nexport { renderDialogActions_unstable }\n\nexport { renderDialogBody_unstable }\n\nexport { renderDialogContent_unstable }\n\nexport { renderDialogSurface_unstable }\n\nexport { renderDialogTitle_unstable }\n\nexport { renderDialogTrigger_unstable }\n\nexport { renderDivider_unstable }\n\nexport { renderDrawer_unstable }\n\nexport { renderDrawerBody_unstable }\n\nexport { renderDrawerFooter_unstable }\n\nexport { renderDrawerHeader_unstable }\n\nexport { renderDrawerHeaderNavigation_unstable }\n\nexport { renderDrawerHeaderTitle_unstable }\n\nexport { renderDropdown_unstable }\n\nexport { renderEmptySwatch_unstable }\n\nexport { RendererProvider }\n\nexport { renderField_unstable }\n\nexport { renderFlatTree_unstable }\n\nexport { renderFluentProvider_unstable }\n\nexport { renderImage_unstable }\n\nexport { renderImageSwatch_unstable }\n\nexport { renderInfoLabel_unstable }\n\nexport { renderInlineDrawer_unstable }\n\nexport { renderInput_unstable }\n\nexport { renderInteractionTag_unstable }\n\nexport { renderInteractionTagPrimary_unstable }\n\nexport { renderInteractionTagSecondary_unstable }\n\nexport { renderLabel_unstable }\n\nexport { renderLink_unstable }\n\nexport { renderList_unstable }\n\nexport { renderListbox_unstable }\n\nexport { renderListItem_unstable }\n\nexport { renderMenu_unstable }\n\nexport { renderMenuButton_unstable }\n\nexport { renderMenuDivider_unstable }\n\nexport { renderMenuGroup_unstable }\n\nexport { renderMenuGroupHeader_unstable }\n\nexport { renderMenuItem_unstable }\n\nexport { renderMenuItemCheckbox_unstable }\n\nexport { renderMenuItemLink_unstable }\n\nexport { renderMenuItemRadio_unstable }\n\nexport { renderMenuItemSwitch_unstable }\n\nexport { renderMenuList_unstable }\n\nexport { renderMenuPopover_unstable }\n\nexport { renderMenuSplitGroup_unstable }\n\nexport { renderMenuTrigger_unstable }\n\nexport { renderMessageBar_unstable }\n\nexport { renderMessageBarActions_unstable }\n\nexport { renderMessageBarBody_unstable }\n\nexport { renderMessageBarGroup_unstable }\n\nexport { renderMessageBarTitle_unstable }\n\nexport { renderOption_unstable }\n\nexport { renderOptionGroup_unstable }\n\nexport { renderOverlayDrawer_unstable }\n\nexport { renderPersona_unstable }\n\nexport { renderPopover_unstable }\n\nexport { renderPopoverSurface_unstable }\n\nexport { renderPopoverTrigger_unstable }\n\nexport { renderPortal_unstable }\n\nexport { renderProgressBar_unstable }\n\nexport { renderRadio_unstable }\n\nexport { renderRadioGroup_unstable }\n\nexport { renderRating_unstable }\n\nexport { renderRatingDisplay_unstable }\n\nexport { renderRatingItem_unstable }\n\nexport { renderSearchBox_unstable }\n\nexport { renderSelect_unstable }\n\nexport { renderSkeleton_unstable }\n\nexport { renderSkeletonItem_unstable }\n\nexport { renderSlider_unstable }\n\nexport { renderSpinButton_unstable }\n\nexport { renderSpinner_unstable }\n\nexport { renderSplitButton_unstable }\n\nexport { renderSwatchPicker_unstable }\n\nexport { renderSwatchPickerGrid }\n\nexport { renderSwatchPickerRow_unstable }\n\nexport { renderSwitch_unstable }\n\nexport { renderTab_unstable }\n\nexport { renderTable_unstable }\n\nexport { renderTableBody_unstable }\n\nexport { renderTableCell_unstable }\n\nexport { renderTableCellActions_unstable }\n\nexport { renderTableCellLayout_unstable }\n\nexport { renderTableHeader_unstable }\n\nexport { renderTableHeaderCell_unstable }\n\nexport { renderTableResizeHandle_unstable }\n\nexport { renderTableRow_unstable }\n\nexport { renderTableSelectionCell_unstable }\n\nexport { renderTabList_unstable }\n\nexport { renderTag_unstable }\n\nexport { renderTagGroup_unstable }\n\nexport { renderTagPicker_unstable }\n\nexport { renderTagPickerButton_unstable }\n\nexport { renderTagPickerControl_unstable }\n\nexport { renderTagPickerGroup_unstable }\n\nexport { renderTagPickerInput_unstable }\n\nexport { renderTagPickerList_unstable }\n\nexport { renderTagPickerOption_unstable }\n\nexport { renderTagPickerOptionGroup }\n\nexport { renderTeachingPopover_unstable }\n```\n\n----------------------------------------\n\nTITLE: Using Design Tokens in Styles\nDESCRIPTION: Demonstrates how to use the imported design tokens in component styles with the makeStyles API. This ensures components use the correct theme colors.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-theme/library/README.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst useStyles = makeStyles({\n  root: {\n    color: tokens.colorNeutralForeground1,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Image Component with maximizeFrame and imageFit Options - React (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the Image component from Fluent UI with properties to maximize the frame and control the image fit, specifically utilizing the ImageFit enum for layout.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-image/library/docs/Spec.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Image, ImageFit } from '@fluentui/react/lib/Image';\n\n<Image maximizeFrame imageFit={ImageFit.contain} src=\"...\" alt=\"Example of the image component in v8\" />;\n```\n\n----------------------------------------\n\nTITLE: Defining Legend and LegendsProps Interfaces in TypeScript\nDESCRIPTION: Defines interfaces for Legend and LegendsProps, which are used to configure and render chart legends. Includes options for customizing legend appearance, behavior, and event handling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charts/library/etc/react-charts.api.md#2025-04-20_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface Legend {\n    action?: VoidFunction;\n    color: string;\n    hoverAction?: VoidFunction;\n    isLineLegendInBarChart?: boolean;\n    nativeButtonProps?: React_2.ButtonHTMLAttributes<HTMLButtonElement>;\n    onMouseOutAction?: (isLegendFocused?: boolean) => void;\n    opacity?: number;\n    shape?: LegendShape;\n    stripePattern?: boolean;\n    title: string;\n}\n\nexport interface LegendsProps {\n    allowFocusOnLegends?: boolean;\n    canSelectMultipleLegends?: boolean;\n    centerLegends?: boolean;\n    className?: string;\n    defaultSelectedLegend?: string;\n    defaultSelectedLegends?: string[];\n    enabledWrapLines?: boolean;\n    legends: Legend[];\n    onChange?: (selectedLegends: string[], event: React_2.MouseEvent<HTMLButtonElement>, currentLegend?: Legend) => void;\n    overflowStyles?: React_2.CSSProperties;\n    overflowText?: string;\n    selectedLegend?: string;\n    selectedLegends?: string[];\n    shape?: LegendShape;\n    styles?: LegendsStyles;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Cypress Component Test Setup in TypeScript\nDESCRIPTION: Example showing basic structure of a Cypress component test file, demonstrating component mounting and basic interactions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/e2e-testing-with-cypress.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\nimport { mount } from '@cypress/react';\nimport { Sample } from './Sample';\n\ndescribe('Sample', () => {\n  it('opens the menu', () => {\n    // Assume Sample contains a button \"Open menu\" which opens a menu\n    mount(<Sample />);\n    // Wait for the component to render (.contains() will retry until a matching element is found)\n    // and click the button\n    cy.contains('Open menu').click();\n    // Verify that the menu opened (will retry until it succeeds or times out)\n    cy.contains('Good option').should('exist');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Slot Type Definition in TypeScript\nDESCRIPTION: Shows the TypeScript type definition for slots in the Fluent UI React utilities. This defines the structure of the Slot type which allows components to specify what elements or components a slot can render.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Slots/Slots.stories.mdx#2025-04-20_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\ntype Slot<Type, AlternateAs>\n```\n\n----------------------------------------\n\nTITLE: Running Cypress Component Configuration Generator\nDESCRIPTION: This command runs the Cypress component configuration generator with default options.  It adds cypress component testing setup to the project.  Assumes the project name will be prompted for.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/cypress-component-configuration/README.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n\"yarn nx g @fluentui/workspace-plugin:cypress-component-configuration\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating AvatarView Usage in Kotlin for FluentUI Android\nDESCRIPTION: This code snippet represents a demo activity for the AvatarView component. It showcases how to use and implement the AvatarView in an Android application using the FluentUI library. The demo activity can be used for testing and understanding the various features and customization options of the AvatarView.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/AvatarPage/docs/android/AvatarImplementation.md#2025-04-20_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Demo activity code can be found at:\nhttps://github.com/microsoft/fluentui-android/blob/master/FluentUI.Demo/src/main/java/com/microsoft/fluentuidemo/demos/AvatarViewActivity.kt\n```\n\n----------------------------------------\n\nTITLE: ProgressBar Component Definition\nDESCRIPTION: Implementation of ProgressBar component extending BaseProgressBar with shape and thickness properties.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_47\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass ProgressBar_2 extends BaseProgressBar {\n    shape?: ProgressBarShape;\n    shapeChanged(prev: ProgressBarShape | undefined, next: ProgressBarShape | undefined): void;\n    thickness?: ProgressBarThickness;\n    thicknessChanged(prev: ProgressBarThickness | undefined, next: ProgressBarThickness | undefined): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Disabled Select with Preselected Option in React TSX\nDESCRIPTION: Implementation of a disabled Select component with the second option (Green) preselected using the selected attribute.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-select/library/docs/Spec.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<label htmlFor=\"selectID\">Choose a color</label>\n<Select id=\"selectID\" disabled>\n  <option>Red</option>\n  <option selected>Green</option>\n  <option>Blue</option>\n</Select>\n```\n\n----------------------------------------\n\nTITLE: Image Component Definition\nDESCRIPTION: Defines the Image component as a ForwardRefComponent, which allows it to accept a ref. It's exported as Image_2 and then re-exported as Image. This provides a way to pass a ref to the underlying HTML img element.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-image/library/etc/react-image.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nconst Image_2: ForwardRefComponent<ImageProps>;\nexport { Image_2 as Image }\n```\n\n----------------------------------------\n\nTITLE: Defining ComboBox Interfaces with TypeScript\nDESCRIPTION: The ComboBox interfaces define the structure and functionality for combo box components in Fluent UI, including methods for dismissing the combo box menu and focusing input with customizable behavior for selecting options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_64\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IComboBox {\n    dismissMenu: () => void;\n    focus(shouldOpenOnFocus?: boolean, useFocusAsync?: boolean): void;\n    readonly selectedOptions: IComboBoxOption[];\n}\n\nexport interface IComboBoxClassNames {\n    // (undocumented)\n    callout: string;\n    // (undocumented)\n    container: string;\n    // (undocumented)\n    divider: string;\n    // (undocumented)\n    errorMessage: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Structure for AccordionHeader with Modified Element Types\nDESCRIPTION: Shows the resulting HTML structure when changing element types using the 'as' prop. Demonstrates how the AccordionHeader becomes an h1 element with an anchor button when modified with the 'as' prop.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Slots/Slots.stories.mdx#2025-04-20_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<h1 class=\"fui-AccordionHeader\">\n  <a class=\"fui-AccordionHeader__button\"> Accordion Header as h1 </a>\n</h1>\n```\n\n----------------------------------------\n\nTITLE: Using CSS shorthands with makeStyles\nDESCRIPTION: Demonstrates the use of shorthand functions provided by Griffel to define CSS properties, as makeStyles does not directly support CSS shorthands.  These functions expands shorthands into longhand properties.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/styles-handbook.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeStyles, shorthands } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  root: {\n    // ❌ This is not supported, TypeScript compiler will throw, styles will not be inserted to DOM\n    padding: '2px 4px 8px 16px',\n    // ✅ Use shorthand functions to avoid writting CSS longhands\n    ...shorthands.padding('2px', '4px', '8px', '16px'),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Stacked Bar Chart Component in TypeScript\nDESCRIPTION: The StackedBarChart constant exports a functional component for rendering stacked bar charts, with properties enabling extensive customization for data representation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/etc/react-charting.api.md#2025-04-20_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const StackedBarChart: React_2.FunctionComponent<IStackedBarChartProps>;\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Popover Polyfill in JavaScript\nDESCRIPTION: This snippet demonstrates how to check for popover support in the browser and lazily import the polyfill only when necessary. It should be placed after the theme setup in the main.js file.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/_docs/developer/polyfilling.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n(async () => {\n  if (!('popover' in HTMLElement.prototype)) {\n    await import('@oddbird/popover-polyfill');\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: V8 Fabric Checkbox Implementation\nDESCRIPTION: Controlled Checkbox implementation example from v8/Fabric showing indeterminate state handling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-checkbox/library/docs/Spec.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Checkbox\n  label=\"Indeterminate checkbox (controlled)\"\n  indeterminate={isIndeterminate}\n  checked={isChecked}\n  onChange={onChange}\n/>\n```\n\n----------------------------------------\n\nTITLE: Version Compare URL\nDESCRIPTION: GitHub URL for comparing changes between versions 9.0.3 and 9.0.4\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-input/library/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\nhttps://github.com/microsoft/fluentui/compare/@fluentui/react-input_v9.0.3..@fluentui/react-input_v9.0.4\n```\n\n----------------------------------------\n\nTITLE: Implementing Donut Chart with Fluent UI v9 Theme\nDESCRIPTION: Demonstrates how to create a Donut Chart component that works with Fluent UI v9 theming. Uses v8ThemeShim to bridge between v8 and v9 themes while maintaining brand invariance. Includes chart data configuration and theme context handling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Charts.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createV8Theme } from '@fluentui/react-migration-v8-v9';\nimport { ThemeProvider } from '@fluentui/react';\nimport { ThemeContext_unstable as V9ThemeContext } from '@fluentui/react-shared-contexts';\nimport React from 'react';\nimport { Theme, BrandVariants, webLightTheme } from '@fluentui/react-components';\nimport { DonutChart, IChartProps } from '@fluentui/react-charting';\nimport * as d3Color from 'd3-color';\n\nconst brandInvariant: BrandVariants = {\n  10: '',\n  20: '',\n  30: '',\n  40: '',\n  50: '',\n  60: '',\n  70: '',\n  80: '',\n  90: '',\n  100: '',\n  110: '',\n  120: '',\n  130: '',\n  140: '',\n  150: '',\n  160: '',\n};\n\nconst data: IChartProps = {\n  chartTitle: 'Donut chart fluent v9 example',\n  chartData: [\n    { legend: 'first', data: 40, color: '#0099BC' },\n    { legend: 'second', data: 20, color: '#77004D' },\n    { legend: 'third', data: 30, color: '#4f67ed' },\n    { legend: 'fourth', data: 10, color: '#ae8c00' },\n  ],\n};\n\nexport function ChartWrapperDocsite() {\n  let parentV9Theme = React.useContext(V9ThemeContext) as Theme;\n  let v9Theme: Theme = parentV9Theme ? parentV9Theme : webLightTheme;\n  let backgroundColor = d3Color.hsl(v9Theme.colorNeutralBackground1);\n  let foregroundColor = d3Color.hsl(v9Theme.colorNeutralForeground1);\n  const myV8Theme = createV8Theme(brandInvariant, v9Theme, backgroundColor.l < foregroundColor.l);\n  return (\n    <ThemeProvider theme={myV8Theme}>\n      <DonutChart\n        data={data}\n        innerRadius={35}\n        legendProps={{\n          allowFocusOnLegends: true,\n        }}\n        hideLabels={false}\n        showLabelsInPercent={true}\n        valueInsideDonut={'100'}\n      />\n    </ThemeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Stacked Bar Chart - FluentUI TypeScript Interface\nDESCRIPTION: Interface definition showing the key properties and customization options available for FluentUI stacked bar charts. Includes data structure, display options, and callback handlers for interactive features.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-examples/src/react-charting/StackedBarChart/docs/StackedBarChartBestPractices.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IStackedBarChartProps {\n  data: IChartDataPoint[];\n  targetData?: number;\n  benchmarkData?: number;\n  ignoreFixStyle?: boolean;\n  hideNumberDisplay?: boolean;\n  chartDataAccessibilityData?: object;\n  onRenderCalloutPerDataPoint?: (props: any) => JSX.Element;\n  enabledLegendsWrapLines?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring useTeachingPopover_unstable Hook in TypeScript\nDESCRIPTION: Declares a hook function for TeachingPopover that takes TeachingPopoverProps and returns TeachingPopoverState.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-teaching-popover/library/etc/react-teaching-popover.api.md#2025-04-20_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const useTeachingPopover_unstable: (props: TeachingPopoverProps) => TeachingPopoverState;\n```\n\n----------------------------------------\n\nTITLE: Examples of Using Switch Components in JSX\nDESCRIPTION: This snippet provides multiple examples of the Switch component's usage in a React component. The examples cover different states such as default checked, required, checked with onChange handler, disabled, and with a label. These examples illustrate the versatility of the Switch component in user interfaces.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-switch/library/README.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Switch />\n<Switch defaultChecked required />\n<Switch checked onChange={onChange} />\n<Switch disabled />\n<Switch label=\"Enable dark mode\" labelPosition=\"after\" />\n```\n\n----------------------------------------\n\nTITLE: TagPickerList State Type\nDESCRIPTION: Defines the state type for the TagPickerList component, including properties from ComponentState and TagPickerContextValue, as well as the 'open' state.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport type TagPickerListState = ComponentState<TagPickerListSlots> & Pick<TagPickerContextValue, 'open'>;\"\n```\n\n----------------------------------------\n\nTITLE: Using useButton Hook in TypeScript\nDESCRIPTION: Defines the useButton function that takes ButtonProps and returns ButtonState, creating slots for root and icon. Ensures the root slot always renders and the icon slot is optional.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Slots/Slots.stories.mdx#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst useButton_unstable = (props: ButtonProps, ref: React.Ref<HTMLButtonElement | HTMLAnchorElement>): ButtonState => {\n  return {\n    root: slot.always({ ...props, ref }, { elementType: 'button' }),\n    icon: slot.optional(props.icon, { elementType: 'span' }),\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Using getKey() Function to Handle Keyboard Events in JavaScript\nDESCRIPTION: Example of using the getKey() function from the keyboard-key utility to handle keyboard events, specifically checking for the Escape key.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/keyboard-key/README.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener('keydown', event => {\n  const key = keyboardKey.getKey(event);\n\n  switch (key) {\n    case 'Escape':\n      // handle escape key\n      break;\n    default:\n      break;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining DocumentCard Component Interfaces in TypeScript\nDESCRIPTION: TypeScript interface definitions for DocumentCard component and its related subcomponents in FluentUI. Includes props, style props, and styles interfaces that define the component API surface.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_91\n\nLANGUAGE: TypeScript\nCODE:\n```\n// (undocumented)\nexport interface IDocumentCard {\n    focus: () => void;\n}\n\n// @public (undocumented)\nexport interface IDocumentCardActions {\n}\n\n// Warning: (ae-forgotten-export) The symbol \"DocumentCardActionsBase\" needs to be exported by the entry point index.d.ts\n//\n// @public (undocumented)\nexport interface IDocumentCardActionsProps extends React_2.ClassAttributes<DocumentCardActionsBase> {\n    actions: IButtonProps[];\n    className?: string;\n    componentRef?: IRefObject<IDocumentCardActions>;\n    styles?: IStyleFunctionOrObject<IDocumentCardActionsStyleProps, IDocumentCardActionsStyles>;\n    theme?: ITheme;\n    views?: Number;\n}\n```\n\n----------------------------------------\n\nTITLE: Tag Picker Button Render Function\nDESCRIPTION: This is the render function for the TagPickerButton component. It takes the state and renders the JSX element representing the button.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const renderTagPickerButton_unstable: (state: TagPickerButtonState) => JSX.Element;\"\n```\n\n----------------------------------------\n\nTITLE: Installing Popover Polyfill with Yarn\nDESCRIPTION: This snippet shows how to install the popover polyfill using Yarn, which is necessary for older browser support for HTML popover attributes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/_docs/developer/polyfilling.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install @oddbird/popover-polyfill\n```\n\n----------------------------------------\n\nTITLE: Persona Props Definition (TypeScript)\nDESCRIPTION: Defines the `PersonaProps` interface which extends `ComponentProps<PersonaSlots>` and adds specific props for the Persona component such as `name`, `presenceOnly`, `size`, `textPosition`, and `textAlignment`. These props control the appearance and behavior of the Persona component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-persona/library/etc/react-persona.api.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport type PersonaProps = ComponentProps<PersonaSlots> & {\n  name?: string;\n  presenceOnly?: boolean;\n  size?: 'extra-small' | 'small' | 'medium' | 'large' | 'extra-large' | 'huge';\n  textPosition?: 'after' | 'before' | 'below';\n  textAlignment?: 'center' | 'start';\n};\"\n```\n\n----------------------------------------\n\nTITLE: Basic Interactive Rating Component in React\nDESCRIPTION: Demonstrates how to render a basic interactive Rating component with default settings using FluentUI React components\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-rating/library/docs/Spec.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Rating } from '@fluentui/react-components';\n\nfunction App() {\n  return <Rating />;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tooltip Types in TypeScript\nDESCRIPTION: TypeScript definitions for the Tooltip component, including props, slots, and related types. This provides type safety and autocompletion for developers using the component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tooltip/library/docs/Spec.md#2025-04-20_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\n/**\n * Slot properties for Tooltip\n */\nexport type TooltipSlots = {\n  /**\n   * The text or JSX content of the tooltip.\n   */\n  content: NonNullable<Slot<'div'>>;\n};\n\n/**\n * Properties for Tooltip\n */\nexport type TooltipProps = ComponentProps<TooltipSlots> & {\n  /**\n   * (Required) Specifies whether this tooltip is acting as the description or label of its trigger element.\n   *\n   * * `label` - The tooltip sets the trigger's aria-label or aria-labelledby attribute. This is useful for buttons\n   *    displaying only an icon, for example.\n   * * `description` - The tooltip sets the trigger's aria-description or aria-describedby attribute.\n   * * `inaccessible` - No aria attributes are set on the trigger. This makes the tooltip's content inaccessible to\n   *   screen readers, and should only be used if the tooltip's text is available by some other means.\n   */\n  relationship: 'label' | 'description' | 'inaccessible';\n\n  /**\n   * The tooltip can have a single JSX child, or a render function that accepts TooltipTriggerProps.\n   *\n   * If no child is provided, the tooltip's target must be set with the `positioning` prop, and its\n   * visibility must be controlled with the `visible` prop.\n   */\n  children?:\n    | (React.ReactElement & { ref?: React.Ref<unknown> })\n    | ((props: TooltipTriggerProps) => React.ReactElement | null)\n    | null;\n\n  /**\n   * The tooltip's visual appearance.\n   * * `normal` - Uses the theme's background and text colors.\n   * * `inverted` - Higher contrast variant that uses the theme's inverted colors.\n   *\n   * @defaultvalue normal\n   */\n  appearance?: 'normal' | 'inverted';\n\n  /**\n   * Render an arrow pointing to the target element\n   *\n   * @defaultvalue false\n   */\n  withArrow?: boolean;\n\n  /**\n   * Configure the positioning of the tooltip\n   *\n   * @defaultvalue above\n   */\n  positioning?: PositioningShorthand;\n\n  /**\n   * Control the tooltip's visibility programatically.\n   *\n   * This can be used in conjunction with onVisibleChange to modify the tooltip's show and hide behavior.\n   *\n   * If not provided, the visibility will be controlled by the tooltip itself, based on hover and focus events on the\n   * trigger (child) element.\n   */\n  visible?: boolean;\n\n  /**\n   * Notification when the visibility of the tooltip is changing\n   */\n  onVisibleChange?: (\n    event: React.PointerEvent<HTMLElement> | React.FocusEvent<HTMLElement> | undefined,\n    data: OnVisibleChangeData,\n  ) => void;\n\n  /**\n   * Delay before the tooltip is shown, in milliseconds.\n   *\n   * @defaultvalue 250\n   */\n  showDelay?: number;\n\n  /**\n   * Delay before the tooltip is hidden, in milliseconds.\n   *\n   * @defaultvalue 250\n   */\n  hideDelay?: number;\n};\n\n/**\n * The properties that are added to the trigger of the Tooltip\n */\nexport type TooltipTriggerProps = {\n  ref?: React.Ref<never>;\n} & Pick<\n  React.HTMLAttributes<HTMLElement>,\n  'onPointerEnter' | 'onPointerLeave' | 'onFocus' | 'onBlur' | 'aria-describedby' | 'aria-labelledby' | 'aria-label'\n>;\n\n/**\n * Data for the Tooltip's onVisibleChange event.\n */\nexport type OnVisibleChangeData = {\n  visible: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Style Hook Usage Example in TS\nDESCRIPTION: Example of how style hooks are applied in a component, showing both default and custom style implementations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/AdvancedStylingTechniques.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nuseButtonStyles_unstable(state);\nuseCustomStyleHook_unstable('useButtonStyles_unstable')(state);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom CodeMod - TypeScript\nDESCRIPTION: This TypeScript example shows how to create a custom codemod by wrapping utility functions. It demonstrates the structure and parameters needed for the codemod function.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/codemods/documentation/howTo.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst func = function (file: SourceFile) {\n  // your codemod utilities here!\n};\n```\n\n----------------------------------------\n\nTITLE: Defining useItemLayoutStyles Hook for FluentUI in TypeScript\nDESCRIPTION: Exports a hook that provides CSS class names for item layout components, including styles for header, root, media content, and different positions. This utility enables consistent item layouts across FluentUI components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-migration-v0-v9/library/etc/react-migration-v0-v9.api.md#2025-04-20_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport const useItemLayoutStyles: () => Record<\"header\" | \"root\" | \"contentMedia\" | \"contentWrapper\" | \"headerMedia\" | \"startMedia\" | \"endMedia\", string>;\n```\n\n----------------------------------------\n\nTITLE: Making an Accessible Button with ARIA attributes\nDESCRIPTION: This example shows how to make an icon-only button accessible by adding an 'aria-label' attribute, which conveys the button's purpose to assistive technologies.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/CONTRIBUTING.md#2025-04-20_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<button icon=\"star\" iconOnly aria-label=\"Favorites\" primary />\n```\n\n----------------------------------------\n\nTITLE: Nesting ThemeProviders\nDESCRIPTION: This snippet illustrates how to nest multiple ThemeProviders to provide different themes to different parts of the application. It shows the application of multiple themes hierarchically.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/src/utilities/ThemeProvider/README.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { ThemeProvider, PartialTheme } from '@fluentui/react';\n\nconst appTheme: PartialTheme = {\n  palette: {\n    themePrimary: 'red'\n    ...\n  }\n};\n\nconst headerTheme: PartialTheme = {\n  palette: {\n    themePrimary: 'orange'\n    ...\n  }\n};\n\nexport const App = () => (\n  <ThemeProvider theme={appTheme}>\n    <ThemeProvider theme={headerTheme}>\n      <MyHeader />\n    </ThemeProvider>\n\n    App content ...\n  </ThemeProvider>\n);\n```\n```\n\n----------------------------------------\n\nTITLE: DialogContent Component Definition\nDESCRIPTION: Defines the DialogContent component as a forward-ref component accepting DialogContentProps. It is used to wrap the body and actions of the dialog. It relies on ForwardRefComponent from '@fluentui/react-utilities'.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/etc/react-dialog.api.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const DialogContent: ForwardRefComponent<DialogContentProps>;\"\n```\n\n----------------------------------------\n\nTITLE: SwatchPicker DOM Structure (grid layout)\nDESCRIPTION: This snippet shows the basic DOM structure for the SwatchPicker component when using a grid layout. It utilizes a div element with role \"grid\" and aria-label to indicate its purpose as a color grid.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-swatch-picker/library/docs/Spec.md#2025-04-20_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<div role=\"grid\" aria-label=\"Color grid\" class=\"fui-SwatchPicker\">\n  <!-- Content rendered here -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining ITeachingBubbleProps Interface in TypeScript\nDESCRIPTION: Specifies the ITeachingBubbleProps interface extending React.RefAttributes and IAccessiblePopupProps with various properties for teaching bubbles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_209\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface ITeachingBubbleProps extends React_2.RefAttributes<HTMLDivElement>, IAccessiblePopupProps {\n    ariaDescribedBy?: string;\n    ariaLabelledBy?: string;\n    calloutProps?: ICalloutProps;\n    // (undocumented)\n    children?: React_2.ReactNode;\n    componentRef?: IRefObject<ITeachingBubble>;\n    focusTrapZoneProps?: IFocusTrapZoneProps;\n    footerContent?: string | JSX.Element;\n    hasCloseButton?: boolean;\n    // @deprecated (undocumented)\n    hasCloseIcon?: boolean;\n    hasCondensedHeadline?: boolean;\n    hasSmallHeadline?: boolean;\n    headline?: string;\n    illustrationImage?: IImageProps;\n    isWide?: boolean;\n    onDismiss?: (ev?: any) => void;\n    primaryButtonProps?: IButtonProps;\n    secondaryButtonProps?: IButtonProps;\n    styles?: IStyleFunctionOrObject<ITeachingBubbleStyleProps, ITeachingBubbleStyles>;\n    target?: Target;\n    // @deprecated\n    targetElement?: HTMLElement;\n    theme?: ITheme;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding custom callout support to charts in React Charting\nDESCRIPTION: Added support for custom callouts in HorizontalBarChart, StackedBarChart, DonutChart, AreaChart and LineChart.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/CHANGELOG.md#2025-04-20_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Example usage:\n<BarChart customCallout={...} />\n```\n\n----------------------------------------\n\nTITLE: Defining KeyCodes Object in TypeScript\nDESCRIPTION: Defines a constant object containing key code mappings for various keyboard keys, useful for keyboard event handling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/utilities/etc/utilities.api.md#2025-04-20_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const KeyCodes: {\n    backspace: 8;\n    tab: 9;\n    enter: 13;\n    shift: 16;\n    ctrl: 17;\n    alt: 18;\n    pauseBreak: 19;\n    capslock: 20;\n    escape: 27;\n    space: 32;\n    pageUp: 33;\n    pageDown: 34;\n    end: 35;\n    home: 36;\n    left: 37;\n    up: 38;\n    right: 39;\n    down: 40;\n    insert: 45;\n    del: 46;\n    zero: 48;\n    one: 49;\n    two: 50;\n    three: 51;\n    four: 52;\n    five: 53;\n    six: 54;\n    seven: 55;\n    eight: 56;\n    nine: 57;\n    colon: 58;\n    a: 65;\n    b: 66;\n    c: 67;\n    d: 68;\n    e: 69;\n    f: 70;\n    g: 71;\n    h: 72;\n    i: 73;\n    j: 74;\n    k: 75;\n    l: 76;\n    m: 77;\n    n: 78;\n    o: 79;\n    p: 80;\n    q: 81;\n    r: 82;\n    s: 83;\n    t: 84;\n    u: 85;\n    v: 86;\n    w: 87;\n    x: 88;\n    y: 89;\n    z: 90;\n    leftWindow: 91;\n    rightWindow: 92;\n    select: 93;\n    zero_numpad: 96;\n    one_numpad: 97;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RTL-aware styles with makeStyles in JavaScript\nDESCRIPTION: Creates styles using makeStyles that automatically handle RTL flipping. When paddingLeft is defined, Griffel automatically generates the RTL equivalent with paddingRight.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/styles-handbook.md#2025-04-20_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeStyles } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  root: {\n    paddingLeft: '10px',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining VerticalSpacingTokens Interface in TypeScript\nDESCRIPTION: Type definition for vertical spacing token values used in FluentUI. Defines a set of standardized vertical spacing measurements from none to XXXL.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/tokens/etc/tokens.api.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport type VerticalSpacingTokens = {\n    spacingVerticalNone: string;\n    spacingVerticalXXS: string;\n    spacingVerticalXS: string;\n    spacingVerticalSNudge: string;\n    spacingVerticalS: string;\n    spacingVerticalMNudge: string;\n    spacingVerticalM: string;\n    spacingVerticalL: string;\n    spacingVerticalXL: string;\n    spacingVerticalXXL: string;\n    spacingVerticalXXXL: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Text Component Interfaces in TypeScript for FluentUI\nDESCRIPTION: Defines the interface structure for the Text component in FluentUI, including props, slots, styles, and tokens. These interfaces allow for customization of the Text component's appearance and behavior.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_221\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface ITextProps extends ISlottableProps<ITextSlots>, IStyleableComponentProps<ITextProps, ITextTokens, ITextStyles>, React_2.HTMLAttributes<HTMLElement> {\n    as?: React_2.ElementType<React_2.HTMLAttributes<HTMLElement>>;\n    block?: boolean;\n    nowrap?: boolean;\n    variant?: keyof IFontStyles;\n}\n\n// @public (undocumented)\nexport type ITextSlot = ISlotProp<ITextProps, string>;\n\n// @public (undocumented)\nexport interface ITextSlots {\n    // (undocumented)\n    root?: IHTMLSlot;\n}\n\n// @public (undocumented)\nexport type ITextStyles = IComponentStyles<ITextSlots>;\n\n// @public (undocumented)\nexport type ITextStylesReturnType = ReturnType<Extract<ITextComponent['styles'], Function>>;\n\n// @public (undocumented)\nexport type ITextTokenReturnType = ReturnType<Extract<ITextComponent['tokens'], Function>>;\n\n// @public (undocumented)\nexport interface ITextTokens {\n}\n```\n\n----------------------------------------\n\nTITLE: useUnhandledProps Hook Reference in React\nDESCRIPTION: This provides the reference usage for the `useUnhandledProps` hook, highlighting the input parameters. It specifies the handled props array and the props object to extract the unhandled props.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/react-bindings/README.md#2025-04-20_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nconst unhandledProps = useUnhandledProps(handledProps, props);\n```\n\n----------------------------------------\n\nTITLE: createVirtualElementFromClick function\nDESCRIPTION: Defines a public function `createVirtualElementFromClick` that accepts a `MouseEvent` and returns a `PositioningVirtualElement` object.  This function generates a virtual element based on the mouse event's location, useful for positioning elements relative to the click location.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-positioning/etc/react-positioning.api.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport function createVirtualElementFromClick(nativeEvent: MouseEvent): PositioningVirtualElement;\n```\n\n----------------------------------------\n\nTITLE: Using the useAutoControlled Hook in React\nDESCRIPTION: This example showcases how to use the `useAutoControlled` hook to manage component state, supporting both controlled and uncontrolled modes. It defines an `Input` component that utilizes `useAutoControlled` to handle the input's value, allowing it to be either controlled by a parent component or managed internally.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/react-bindings/README.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\ntype InputProps = {\n  defaultValue?: string;\n  value?: string;\n  onChange?: (value: string) => void;\n};\n\nconst Input: React.FC<InputProps> = props => {\n  const [value, setValue] = useAutoControlled({\n    defaultValue: props.defaultValue,\n    value: props.value,\n  });\n\n  return (\n    <input\n      onChange={e => {\n        setValue(e.target.value);\n        if (props.onChange) props.onChange(e.target.value);\n      }}\n      value={value}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Color Palette Variables in TypeScript\nDESCRIPTION: This snippet defines and exports color palette variables using CSS custom properties. These variables are used for various UI elements such as backgrounds, borders, and foregrounds for different color schemes and states.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const colorPaletteRedForegroundInverted = \"var(--colorPaletteRedForegroundInverted)\";\n\n// @public\nexport const colorPaletteRoyalBlueBackground2 = \"var(--colorPaletteRoyalBlueBackground2)\";\n\n// @public\nexport const colorPaletteRoyalBlueBorderActive = \"var(--colorPaletteRoyalBlueBorderActive)\";\n\n// @public\nexport const colorPaletteRoyalBlueForeground2 = \"var(--colorPaletteRoyalBlueForeground2)\";\n```\n\n----------------------------------------\n\nTITLE: Implementing useMergedRefs Hook in TypeScript\nDESCRIPTION: Definition of the useMergedRefs hook, which merges multiple refs into a single ref callback.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-hooks/README.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useMergedRefs<T>(...refs: React.Ref<T>[]): (instance: T) => void;\n```\n\n----------------------------------------\n\nTITLE: Fix React 18 type compatibility in React Window Provider\nDESCRIPTION: This patch addresses a type compatibility issue with React 18 by explicitly adding children to the window provider component. This ensures that the component functions correctly within a React 18 environment.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-window-provider/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nfix: add explicit children to window provider to ensure react 18 type compat ([PR #27117](https://github.com/microsoft/fluentui/pull/27117) by mgodbolt@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: TagPicker Props Type\nDESCRIPTION: Defines the props interface for the TagPicker component. It includes properties from ComponentProps and ComboboxProps, a noPopover option, and event handlers for open state changes and option selection.  It also includes a children property that requires either a single JSX.Element or a tuple of a JSX.Element and an optional JSX.Element. The inline prop is also included.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport type TagPickerProps = ComponentProps<TagPickerSlots> & Pick<ComboboxProps, 'positioning' | 'disabled' | 'defaultOpen' | 'selectedOptions' | 'defaultSelectedOptions' | 'open'> & Pick<Partial<TagPickerContextValue>, 'size' | 'appearance'> & {\n    noPopover?: boolean;\n    onOpenChange?: EventHandler<TagPickerOnOpenChangeData>;\n    onOptionSelect?: EventHandler<TagPickerOnOptionSelectData>;\n    children: [JSX.Element, JSX.Element | undefined | false] | JSX.Element;\n    inline?: boolean;\n};\"\n```\n\n----------------------------------------\n\nTITLE: Migrating Size Prop for Avatar in Fluent UI\nDESCRIPTION: Shows how to migrate the size prop from string values to numeric values in the new Avatar component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Avatar.stories.mdx#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Avatar } from '@fluentui/react-northstar';\nconst Component = () => <Avatar size=\"small\" />;\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Avatar } from '@fluentui/react-components';\nconst Component = () => <Avatar size={28} />;\n```\n\n----------------------------------------\n\nTITLE: Implementing the DataGrid component with sorting and selection\nDESCRIPTION: This snippet defines and exports the DataGrid component which uses the Table component from Fluent UI. It establishes row selection, sorting, and keyboard navigation functionalities using hooks.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-table/library/README.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const DataGrid = () => {\n  const {\n    getRows,\n    selection: { allRowsSelected, someRowsSelected, toggleAllRows, toggleRow, isRowSelected },\n    sort: { getSortDirection, toggleColumnSort, sort },\n  } = useTableFeatures(\n    {\n      columns,\n      items,\n    },\n    [\n      useTableSelection({\n        selectionMode: 'multiselect',\n        defaultSelectedItems: new Set([0, 1]),\n      }),\n      useTableSort({ defaultSortState: { sortColumn: 'file', sortDirection: 'ascending' } }),\n    ],\n  );\n\n  const rows = sort(\n    getRows(row => {\n      const selected = isRowSelected(row.rowId);\n      return {\n        ...row,\n        onClick: (e: React.MouseEvent) => toggleRow(e, row.rowId),\n        onKeyDown: (e: React.KeyboardEvent) => {\n          if (e.key === ' ') {\n            e.preventDefault();\n            toggleRow(e, row.rowId);\n          }\n        },\n        selected,\n        appearance: selected ? ('brand' as const) : ('none' as const),\n      };\n    }),\n  );\n\n  const headerSortProps = (columnId: TableColumnId) => ({\n    onClick: (e: React.MouseEvent) => {\n      toggleColumnSort(e, columnId);\n    },\n    sortDirection: getSortDirection(columnId),\n  });\n\n  const keyboardNavAttr = useArrowNavigationGroup({ axis: 'grid' });\n\n  return (\n    <Table {...keyboardNavAttr} role=\"grid\" sortable aria-label=\"DataGrid implementation with Table primitives\">\n      <TableHeader>\n        <TableRow>\n          <TableSelectionCell\n            checked={allRowsSelected ? true : someRowsSelected ? 'mixed' : false}\n            aria-checked={allRowsSelected ? true : someRowsSelected ? 'mixed' : false}\n            role=\"checkbox\"\n            onClick={toggleAllRows}\n            checkboxIndicator={{ 'aria-label': 'Select all rows ' }}\n          />\n          <TableHeaderCell {...headerSortProps('file')}>File</TableHeaderCell>\n          <TableHeaderCell {...headerSortProps('author')}>Author</TableHeaderCell>\n          <TableHeaderCell {...headerSortProps('lastUpdated')}>Last updated</TableHeaderCell>\n          <TableHeaderCell {...headerSortProps('lastUpdate')}>Last update</TableHeaderCell>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        {rows.map(({ item, selected, onClick, onKeyDown, appearance }) => (\n          <TableRow\n            key={item.file.label}\n            onClick={onClick}\n            onKeyDown={onKeyDown}\n            aria-selected={selected}\n            appearance={appearance}\n          >\n            <TableSelectionCell\n              role=\"gridcell\"\n              aria-selected={selected}\n              checked={selected}\n              checkboxIndicator={{ 'aria-label': 'Select row' }}\n            />\n            <TableCell tabIndex={0} role=\"gridcell\" aria-selected={selected}>\n              <TableCellLayout media={item.file.icon}>{item.file.label}</TableCellLayout>\n            </TableCell>\n            <TableCell tabIndex={0} role=\"gridcell\">\n              <TableCellLayout\n                media={\n                  <Avatar\n                    aria-label={item.author.label}\n                    name={item.author.label}\n                    badge={{ status: item.author.status }}\n                  />\n                }\n              >\n                {item.author.label}\n              </TableCellLayout>\n            </TableCell>\n            <TableCell tabIndex={0} role=\"gridcell\">\n              {item.lastUpdated.label}\n            </TableCell>\n            <TableCell tabIndex={0} role=\"gridcell\">\n              <TableCellLayout media={item.lastUpdate.icon}>{item.lastUpdate.label}</TableCellLayout>\n            </TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Message Bar Components - JavaScript\nDESCRIPTION: This snippet exports the core components related to the Message Bar feature of Fluent UI, including various props and states. These components provide functionality for displaying messages to users in an interactive manner.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/etc/react-components.api.md#2025-04-20_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nexport { messageBarGroupClassNames }\n\nexport { MessageBarGroupProps }\n\nexport { MessageBarGroupSlots }\n\nexport { MessageBarGroupState }\n\nexport { MessageBarIntent }\n\nexport { MessageBarProps }\n\nexport { MessageBarSlots }\n\nexport { MessageBarState }\n\nexport { MessageBarTitle }\n\nexport { messageBarTitleClassNames }\n\nexport { MessageBarTitleProps }\n\nexport { MessageBarTitleSlots }\n\nexport { MessageBarTitleState }\n\nexport { MessageBarTransitionContextValue }\n```\n\n----------------------------------------\n\nTITLE: Correct Access to Local Variables in Cypress\nDESCRIPTION: Illustrates the correct handling of asynchronous Cypress command execution with local variables using `cy.then()` or `cy.should()`. Demonstrates the use of hooks like `useEffect` within a component to appropriately update the DOM.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/e2e-testing-with-cypress.md#2025-04-20_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nit('focuses a button incorrectly', () => {\n  let focusButton = () => undefined;\n\n  const TestCase = () => {\n    // In the actual instance where this happened, the code needed to call a component's custom\n    // imperative API. (If the goal is really just to focus a button, there are better ways to do it.)\n    const buttonRef = React.useRef();\n    React.useEffect(() => {\n      focusButton = () => buttonRef.current?.focus();\n    }, []);\n\n    return <button ref={buttonRef}>hello</button>;\n  };\n\n  mount(<TestCase />);\n\n  // ❌ this will NOT be set to the correct value yet, because the component hasn't rendered!\n  focusButton();\n  // ❌ fails\n  cy.focused().should('have.text', 'hello');\n\n  cy.contains('hello').then(() => {\n    // ✅ button has rendered\n    focusButton();\n  });\n  // ✅ succeeds\n  cy.focused().should('have.text', 'hello');\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Tree Open Change Data Structure in TypeScript\nDESCRIPTION: Defines the data structure for tree open/close events, including open state, open items set, value, target element, and various event types with their corresponding event objects.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tree/library/etc/react-tree.api.md#2025-04-20_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type TreeOpenChangeData = {\n    open: boolean;\n    openItems: Set<TreeItemValue>;\n    value: TreeItemValue;\n    target: HTMLElement;\n} & ({\n    event: React_2.MouseEvent<HTMLElement>;\n    type: 'ExpandIconClick';\n} | {\n    event: React_2.MouseEvent<HTMLElement>;\n    type: 'Click';\n}\n/**\n* @deprecated\n* Use `type: 'Click'` instead of Enter,\n* an enter press will trigger a click event, which will trigger an open change,\n* so there is no need to have a separate type for it.\n*/\n| {\n    event: React_2.KeyboardEvent<HTMLElement>;\n    type: typeof Enter;\n} | {\n    event: React_2.KeyboardEvent<HTMLElement>;\n    type: typeof ArrowRight;\n} | {\n    event: React_2.KeyboardEvent<HTMLElement>;\n    type: typeof ArrowLeft;\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Field Component\nDESCRIPTION: This HTML snippet represents the structure of the Field component rendered in a browser. It outlines how labels, child components, validation messages, and hints are organized, which helps in managing accessibility through appropriate ARIA attributes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-field/library/docs/Spec.md#2025-04-20_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"fui-Field\">\n  <label className=\"fui-Field__label fui-Label\">This is the field label</label>\n  <!-- child field component goes here -->\n  <span className=\"fui-Field__validationMessage\">\n    <span className=\"fui-Field__validationMessageIcon\"><svg>...</svg></span>\n    This is a validation message\n  </span>\n  <span className=\"fui-Field__hint\">This is a hint message</span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Carousel Style Hooks\nDESCRIPTION: TypeScript declarations for style management hooks that handle styling for various carousel components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-carousel/library/etc/react-carousel.api.md#2025-04-20_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const useCarouselStyles_unstable: (state: CarouselState) => CarouselState;\nexport const useCarouselNavStyles_unstable: (state: CarouselNavState) => CarouselNavState;\nexport const useCarouselNavButtonStyles_unstable: (state: CarouselNavButtonState) => CarouselNavButtonState;\nexport const useCarouselNavContainerStyles_unstable: (state: CarouselNavContainerState) => CarouselNavContainerState;\nexport const useCarouselNavImageButtonStyles_unstable: (state: CarouselNavImageButtonState) => CarouselNavImageButtonState;\nexport const useCarouselSliderStyles_unstable: (state: CarouselSliderState) => CarouselSliderState;\nexport const useCarouselViewportStyles_unstable: (state: CarouselViewportState) => CarouselViewportState;\n```\n\n----------------------------------------\n\nTITLE: Updating makeStyles Usage in TypeScript\nDESCRIPTION: This snippet demonstrates how to update makeStyles usage to directly use the tokens object instead of theme functions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/docs/MIGRATION-NOTES.md#2025-04-20_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-import { makeStyles } from '@fluentui/react-components';\n+import { makeStyles, tokens } from '@fluentui/react-components';\n\nconst useStyles = makeStyles({\n-  root: theme => ({ color: theme.tokenB }),\n+  root: { color: tokens.tokenB },\n});\n```\n\n----------------------------------------\n\nTITLE: Semantic Elements Implementation\nDESCRIPTION: Example showing how to use semantic elements with typography components using the 'as' prop.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-text/library/README.md#2025-04-20_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <Subtitle1 as=\"h1\">Subtitle1</Subtitle1>\n  <Subtitle2 as=\"h2\">Subtitle2</Subtitle2>\n  <Text as=\"p\">This is simple example</Text>\n</div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <h1>Subtitle1</h1>\n  <h2>Subtitle2</h2>\n  <p>This is simple example</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Banning Context Export (Correct)\nDESCRIPTION: This code snippet demonstrates the correct way to export context-related functionalities in Fluent UI. Instead of exporting the context object directly, it exports a Provider and a hook for accessing the context, encapsulating the internal implementation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/eslint-plugin/README.md#2025-04-20_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// src/context.ts\nimport * as React from 'react';\nconst MyContext = React.createContext();\nexport const MyContextProvider = MyContext.Provider;\nexport const useMyContext = () => React.useContext(MyContext);\n\n// src/index.ts\nexport { MyContextProvider, useMyContext } from './context';\n```\n\n----------------------------------------\n\nTITLE: Version and Changelog Entry\nDESCRIPTION: Version numbers, dates and comparison links for tracking changes between releases\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-datepicker-compat/library/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n[0.2.5](https://github.com/microsoft/fluentui/tree/@fluentui/react-datepicker-compat_v0.2.5)\n\nFri, 04 Aug 2023 08:52:58 GMT\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-datepicker-compat_v0.2.4..@fluentui/react-datepicker-compat_v0.2.5)\n```\n\n----------------------------------------\n\nTITLE: Creating Cubic Bezier Curve for Animation Easing in TypeScript\nDESCRIPTION: This function generates a cubic bezier curve string for use in CSS animations. It takes four parameters representing control points and returns a formatted string.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-migration-v0-v9/stories/src/Flex/Description.md#2025-04-20_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst createCubicBezierAnimate = (x1: number, y1: number, x2: number, y2: number): string => {\n  return `cubic-bezier(${x1}, ${y1}, ${x2}, ${y2})`;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining DatePicker and Related Types\nDESCRIPTION: The snippet specifies the DatePicker component and its associated types, such as DatePickerProps and DatePickerErrorType, providing structure and validation to input data. This setup defines configuration options, event callbacks, and their constraints for the DatePicker.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-datepicker-compat/library/etc/react-datepicker-compat.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const DatePicker: ForwardRefComponent<DatePickerProps>;\n\nexport const datePickerClassNames: SlotClassNames<DatePickerSlots>;\n\nexport type DatePickerErrorType = 'invalid-input' | 'out-of-bounds' | 'required-input';\n\nexport type DatePickerProps = Omit<ComponentProps<Partial<DatePickerSlots>>, 'defaultValue' | 'value'> & Pick<PortalProps, 'mountNode'> & {\n    onSelectDate?: (date: Date | null | undefined) => void;\n    required?: boolean;\n    disabled?: boolean;\n    underlined?: boolean;\n    isMonthPickerVisible?: boolean;\n    showMonthPickerAsOverlay?: boolean;\n    allowTextInput?: boolean;\n    disableAutoFocus?: boolean;\n    openOnClick?: boolean;\n    defaultOpen?: boolean;\n    open?: boolean;\n    onOpenChange?: (open: boolean) => void;\n    onValidationResult?: (data: DatePickerValidationResultData) => void;\n    inlinePopup?: boolean;\n    positioning?: PositioningProps;\n    placeholder?: string;\n    today?: Date;\n    value?: Date | null;\n    formatDate?: (date?: Date) => string;\n    parseDateFromString?: (dateStr: string) => Date | null;\n    firstDayOfWeek?: DayOfWeek;\n    strings?: CalendarStrings;\n    highlightCurrentMonth?: boolean;\n    highlightSelectedMonth?: boolean;\n    showWeekNumbers?: boolean;\n    firstWeekOfYear?: FirstWeekOfYear;\n    showGoToToday?: boolean;\n    borderless?: boolean;\n    dateTimeFormatter?: DateFormatting;\n    minDate?: Date;\n    maxDate?: Date;\n    initialPickerDate?: Date;\n    allFocusable?: boolean;\n    showCloseButton?: boolean;\n};\n\nexport type DatePickerValidationResultData = {\n    error?: DatePickerErrorType;\n};\n```\n\n----------------------------------------\n\nTITLE: Avoid Async Test Functions in Cypress\nDESCRIPTION: Cypress does not support the `async`/`await` syntax due to an assertion failure bug, which can lead to tests mistakenly passing. This snippet shows synchronous test definitions to ensure proper failure detection.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/e2e-testing-with-cypress.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// ❌  assertion failures in this async function will not fail the test!\nit('does stuff', async () => {});\n// ✅  correct\nit('does stuff', () => {});\n```\n\n----------------------------------------\n\nTITLE: Defining AriaLiveAnnouncer component\nDESCRIPTION: This snippet declares the `AriaLiveAnnouncer` component as a functional React component. It accepts `AriaLiveAnnouncerProps` as props, providing the ability to announce live updates for accessibility purposes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-aria/library/etc/react-aria.api.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n// @public\nexport const AriaLiveAnnouncer: React_2.FC<AriaLiveAnnouncerProps>;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Option Groups in v9 Combobox/Dropdown\nDESCRIPTION: Example showing how to organize options into groups using the OptionGroup component in v9 Combobox/Dropdown components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/library/docs/Spec.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Combobox>\n  <OptionGroup label=\"Group 1\">\n    <Option>Option A</Option>\n    <Option>Option B</Option>\n  </OptionGroup>\n  <OptionGroup label=\"Group 2\">\n    <Option>Option C</Option>\n    <Option>Option D</Option>\n  </OptionGroup>\n</Combobox>\n```\n\n----------------------------------------\n\nTITLE: Defining RadioGroup Class Structure in FluentUI\nDESCRIPTION: Details the class structure and properties of the RadioGroup component, including fields like 'disabled', 'name', 'value', 'orientation', and 'stacked', which control the component behavior.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/radio-group/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Class: `RadioGroup`\n\n<br />\n\n### **Component Name**\n\n<br />\n\n`fluent-radio-group`\n\n<br />\n\n### **Fields**\n\n| Name          | Privacy | Type                     | Default      | Description                                                                                                                                                                                                                                                                                                         |\n| ------------- | ------- | ------------------------ | ------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `disabled`    | public  | `boolean`                | `false`      | Disables the radio group and child radios.                                                                                                                                                                                                                                                                          |\n| `name`        | public  | `string`                 |              | The name of the radio group. Setting this value will set the name value for all child radio elements.                                                                                                                                                                                                               |\n| `value`       | public  | `string`                 |              | The value of the checked radio.                                                                                                                                                                                                                                                                                     |\n| `orientation` | public  | `horizontal \\| vertical` | `horizontal` | Determines whether radios in a radio group are rendered in a horizontal row or a vertical column. The default value is horizontal, which will render radios in a horizontal row with labels appearing inline. Setting orientation to vertical will render radios in a vertical column with labels appearing inline. |\n| `stacked`     | public  | `boolean`                | `false`      | Determines whether the labels for radios appear inline or stacked when orientation is set to horizontal. The default value is false, which will display the labels inline. If stacked is set to true, the labels will appear under each radio in a horizontal row.                                                  |\n| default slot  | public  | `HTMLElement[]`          |              | The default slot expecting Radio items.                                                                                                                                                                                                                                                                             |\n```\n\n----------------------------------------\n\nTITLE: Creating Presence Component with Reduced Motion Support - TypeScript\nDESCRIPTION: This snippet defines a presence component using TypeScript, which includes keyframes and durations for both regular and reduced motion animations. The reduced motion version eliminates scale animations, making it more accessible for users who prefer less animated content.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-motion/stories/src/CreatePresenceComponent/CreatePresenceComponentReducedMotion.stories.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst Motion = createPresenceComponent({\n  enter: {\n    keyframes: [\n      { opacity: 0, transform: 'scale(0)' },\n      { opacity: 1, transform: 'scale(1)' },\n    ],\n    duration: 300,\n\n    /* 💡reduced motion will not have scale animation */\n    reducedMotion: {\n      keyframes: [{ opacity: 0 }, { opacity: 1 }],\n      duration: 1000,\n    },\n  },\n  exit: {\n    /* ... */\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: React Hook: Applying Component Styles\nDESCRIPTION: The `useSampleStyles` hook applies styles to the component and its slots. It uses `makeStyles` and `mergeClasses` from `@fluentui/react-make-styles` to define and merge styles. The hook accepts the component's state as input and modifies the `className` properties of the state object to include the generated class names. It separates styling concerns from the rendering logic.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/converged-implementation-patterns.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { makeStyles, mergeClasses } from '@fluentui/react-make-styles';\nimport { SampleState } from './Sample.types';\n\n/**\n * Styles for the root slot\n */\nexport const useRootStyles = makeStyles<SampleState>([\n  [\n    null,\n    theme => ({\n      backgroundColor: theme['select']['from']['theme']['docs'],\n      paddingRight: '12px',\n    }),\n  ],\n]);\n\n/**\n * Styles for the icon slot, uses state selectors from SampleState\n */\nexport const useIconStyles = makeStyles<SampleState>([\n  [\n    // Conditionally apply styles\n    someState => someState == 1,\n    () => ({\n      width: '20px',\n      height: '20px',\n      marginRight: '9px',\n    }),\n  ],\n]);\n\n/**\n * Applies style classnames to slots\n */\nexport const useSampleStyles = (state: SampleState) => {\n  const rootClassName = useRootStyles(state);\n  const iconClassName = useIconStyles(state);\n\n  // mergeClasses is a util that deduplicates classnames\n  state.className = mergeClasses(rootClassName, state.className);\n\n  if (state.icon) {\n    state.icon.className = mergeClasses(iconClassName, state.icon.className);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Trigger Component with ARIA Attributes in TypeScript\nDESCRIPTION: The code demonstrates the implementation of a `Trigger` component using ARIA attributes to ensure button-like behavior for a `div` element. The TypeScript snippet shows how to wrap a `div` element in a `Trigger` to apply ARIA button props using `useARIAButtonProps`. It requires Fluent UI dependencies.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/triggers-and-multiple-layers-of-button-handling.md#2025-04-20_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n<Trigger>\n  <div>Trigger something</div>\n</Trigger>\n```\n\n----------------------------------------\n\nTITLE: Example Migration Command - Shell\nDESCRIPTION: This is a simple command example that demonstrates how to generate the package migration scripts for version 8 of Fluent UI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/migrate-v8-pkg/README.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:migrate-v8-pkg\n```\n\n----------------------------------------\n\nTITLE: Defining Field Context Value Type in TypeScript\nDESCRIPTION: This snippet defines the FieldContextValue type, which holds properties related to form fields including control IDs and validation states. The properties are used for accessibility and managing field states.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-field/library/docs/Spec.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FieldContextValue = Readonly<\n  Pick<FieldState, 'generatedControlId' | 'orientation' | 'required' | 'size' | 'validationState'> & {\n    /** The label's for prop. Undefined if there is no label. */\n    labelFor?: string;\n    /** The label's id prop. Undefined if there is no label. */\n    labelId?: string;\n    /** The validationMessage's id prop. Undefined if there is no validationMessage. */\n    validationMessageId?: string;\n    /** The hint's id prop. Undefined if there is no hint. */\n    hintId?: string;\n  }\n>;\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting Fluent UI Theme Components in TypeScript\nDESCRIPTION: This code snippet imports various theme-related components, types, and functions from the @fluentui/tokens package and re-exports them. It includes color palettes, theme creation functions, typography styles, and various design tokens.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-theme/library/etc/react-theme.api.md#2025-04-20_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { BorderRadiusTokens } from '@fluentui/tokens';\nimport { Brands } from '@fluentui/tokens';\nimport { BrandVariants } from '@fluentui/tokens';\nimport { ColorPaletteAnchor } from '@fluentui/tokens';\n// ... (many more imports)\nimport { webLightTheme } from '@fluentui/tokens';\n\nexport { BorderRadiusTokens }\nexport { Brands }\nexport { BrandVariants }\nexport { ColorPaletteAnchor }\n// ... (many more exports)\nexport { webLightTheme }\n```\n\n----------------------------------------\n\nTITLE: Nested Portal Components\nDESCRIPTION: Demonstrates nested Portal rendering with virtual parent spans for hierarchical DOM management\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-portal/library/README.md#2025-04-20_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<FluentProvider>\n  <Portal id=\"portal-1\">\n    <Portal id=\"portal-2\" />\n  </Portal>\n</FluentProvider>\n```\n\n----------------------------------------\n\nTITLE: Defining the Spin Button Component in TypeScript\nDESCRIPTION: This snippet defines a class-based React component that renders a Spin Button from Fluent UI. It manages basic functionality such as value increments and decrements, and configuration options for the SpinButton component. The component is wrapped in a div with a specified width for layout purposes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-monaco-editor/src/transpiler/examples/classTranspiled.txt#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport * as React from 'react';\nimport { SpinButton } from '@fluentui/react/lib/SpinButton';\nvar SpinButtonBasicExample = /** @class */ (function (_super) {\n    __extends(SpinButtonBasicExample, _super);\n    function SpinButtonBasicExample() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SpinButtonBasicExample.prototype.render = function () {\n        return (React.createElement(\"div\", { style: { width: '400px' } },\n            React.createElement(SpinButton, { defaultValue: \"0\", label: 'Basic SpinButton:', min: 0, max: 100, step: 1, iconProps: { iconName: 'IncreaseIndentLegacy' }, incrementButtonAriaLabel: 'Increase value by 1', decrementButtonAriaLabel: 'Decrease value by 1' })));\n    };\n    return SpinButtonBasicExample;\n}(React.Component));\nexport { SpinButtonBasicExample };\n```\n\n----------------------------------------\n\nTITLE: Adding Days to a Date - TypeScript\nDESCRIPTION: This function allows you to add a specified number of days to a given date, returning the updated Date object. It requires a Date object and the number of days to add as parameters.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/date-time-utilities/etc/date-time-utilities.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport function addDays(date: Date, days: number): Date;\n```\n\n----------------------------------------\n\nTITLE: TimePicker Component Type Definitions in TypeScript\nDESCRIPTION: Comprehensive type definitions for the TimePicker component including imports, props, state types, and utility functions. The code defines the component's API surface, including formatting options, event handlers, and component customization options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-timepicker-compat/library/etc/react-timepicker-compat.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ComboboxProps } from '@fluentui/react-combobox';\nimport type { ComboboxSlots } from '@fluentui/react-combobox';\nimport type { ComboboxState } from '@fluentui/react-combobox';\nimport type { ComponentProps } from '@fluentui/react-utilities';\nimport type { ForwardRefComponent } from '@fluentui/react-utilities';\nimport * as React_2 from 'react';\nimport type { SelectionEvents } from '@fluentui/react-combobox';\nimport type { SlotClassNames } from '@fluentui/react-utilities';\n\n// @public\nexport function formatDateToTimeString(date: Date, { hourCycle, showSeconds }?: TimeFormatOptions): string;\n\n// @public\nexport const TimePicker: ForwardRefComponent<TimePickerProps>;\n\n// @public (undocumented)\nexport const timePickerClassNames: SlotClassNames<TimePickerSlots>;\n\n// @public\nexport type TimePickerErrorType = 'invalid-input' | 'out-of-bounds' | 'required-input';\n\n// @public\nexport type TimePickerProps = Omit<ComponentProps<Partial<ComboboxSlots>, 'input'>, 'children' | 'size'> & Pick<ComboboxProps, 'appearance' | 'clearable' | 'defaultOpen' | 'defaultValue' | 'inlinePopup' | 'onOpenChange' | 'open' | 'placeholder' | 'positioning' | 'size' | 'value' | 'mountNode' | 'freeform'> & TimeFormatOptions & {\n    startHour?: Hour;\n    endHour?: Hour;\n    increment?: number;\n    dateAnchor?: Date;\n    selectedTime?: Date | null;\n    defaultSelectedTime?: Date;\n    onTimeChange?: (event: TimeSelectionEvents, data: TimeSelectionData) => void;\n    formatDateToTimeString?: (date: Date) => string;\n    parseTimeStringToDate?: (time: string | undefined) => TimeStringValidationResult;\n};\n\n// @public (undocumented)\nexport type TimePickerSlots = ComboboxSlots;\n\n// @public\nexport type TimePickerState = ComboboxState & Required<Pick<TimePickerProps, 'freeform' | 'parseTimeStringToDate'>> & {\n    submittedText: string | undefined;\n};\n\n// @public (undocumented)\nexport type TimeSelectionData = {\n    selectedTime: Date | null;\n    selectedTimeText: string | undefined;\n    errorType: TimePickerErrorType | undefined;\n};\n\n// @public (undocumented)\nexport type TimeSelectionEvents = SelectionEvents | React_2.FocusEvent<HTMLElement>;\n\n// @public\nexport const useTimePicker_unstable: (props: TimePickerProps, ref: React_2.Ref<HTMLInputElement>) => TimePickerState;\n\n// @public\nexport const useTimePickerStyles_unstable: (state: TimePickerState) => TimePickerState;\n```\n\n----------------------------------------\n\nTITLE: TagPickerList Props Type\nDESCRIPTION: Defines the props interface for the TagPickerList component, based on ComponentProps and TagPickerListSlots.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport type TagPickerListProps = ComponentProps<TagPickerListSlots>;\"\n```\n\n----------------------------------------\n\nTITLE: FieldContextProvider Definition\nDESCRIPTION: This snippet defines the FieldContextProvider using React.Provider. It provides a context for FieldState properties like required, size, orientation, validationState and generatedControlId for components down the tree.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-field/library/etc/react-field.api.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport const FieldContextProvider: React_2.Provider<Readonly<Pick<FieldState, \\\"required\\\" | \\\"size\\\" | \\\"orientation\\\" | \\\"validationState\\\" | \\\"generatedControlId\\\">& {\\n    labelFor?: string | undefined;\\n    labelId?: string | undefined;\\n    validationMessageId?: string | undefined;\\n    hintId?: string | undefined;\\n}> | undefined>;\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Progress Bar Components - JavaScript\nDESCRIPTION: This snippet exports the progress bar components utilized for indicating the progress of an ongoing process, beneficial in providing feedback to users while tasks are being completed.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/etc/react-components.api.md#2025-04-20_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nexport { ProgressBar }\n\nexport { progressBarClassNames }\n\nexport { ProgressBarProps }\n\nexport { ProgressBarSlots }\n\nexport { ProgressBarState }\n```\n\n----------------------------------------\n\nTITLE: Move all converged packages using move-packages\nDESCRIPTION: This command moves all converged packages to a specified destination folder (`testFolder`). The `--allConverged` flag indicates that all converged packages should be moved, and the `--destination` flag specifies the target directory.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/move-packages/README.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:move-packages --allConverged --destination=\"testFolder\"\n```\n\n----------------------------------------\n\nTITLE: Tree Item Selection Implementation\nDESCRIPTION: Instructions for implementing proper ARIA attributes for tree item selection states.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tree/stories/src/Tree/TreeBestPractices.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n**Use `aria-selected=true` once a treeitem is selected in custom behaviors**\n```\n\n----------------------------------------\n\nTITLE: Combobox Props Definition\nDESCRIPTION: This snippet defines the properties for the Combobox component, extending ComponentProps with ComboboxBaseProps. It includes properties for freeform input and children.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/library/etc/react-combobox.api.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport type ComboboxProps = Omit<ComponentProps<Partial<ComboboxSlots>, 'input'>, 'children' | 'size'> & ComboboxBaseProps & {\n    freeform?: boolean;\n    children?: React_2.ReactNode;\n};\"\n```\n\n----------------------------------------\n\nTITLE: Fix for Combobox State Styling in FluentUI React\nDESCRIPTION: Code snippet showing a fix to use the correct tokens for hover, active, and focus states in combobox components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/library/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- fix: use correct tokens for hover, active and focus states ([PR #33927](https://github.com/microsoft/fluentui/pull/33927) by vgenaev@gmail.com)\n```\n\n----------------------------------------\n\nTITLE: Defining TeachingPopoverHeaderSlots Type in TypeScript\nDESCRIPTION: Defines the slots for TeachingPopoverHeader, including root, optional dismissButton, and optional icon.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-teaching-popover/library/etc/react-teaching-popover.api.md#2025-04-20_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type TeachingPopoverHeaderSlots = {\n    root: Slot<'div', 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'>;\n    dismissButton?: Slot<'button'>;\n    icon?: Slot<'div'>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining CounterBadge Component in TypeScript\nDESCRIPTION: This snippet defines the CounterBadge component, which extends FASTElement. It includes properties for appearance, color, count, and other visual attributes. It also defines constants for appearance and color options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_26\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport class CounterBadge extends FASTElement {\n    appearance?: CounterBadgeAppearance;\n    color?: CounterBadgeColor;\n    count: number;\n    // (undocumented)\n    protected countChanged(): void;\n    dot: boolean;\n    // @internal\n    elementInternals: ElementInternals;\n    overflowCount: number;\n    // (undocumented)\n    protected overflowCountChanged(): void;\n    // @internal\n    setCount(): string | void;\n    shape?: CounterBadgeShape;\n    showZero: boolean;\n    size?: CounterBadgeSize;\n}\n\n// @internal\nexport interface CounterBadge extends StartEnd {\n}\n\n// @public\nexport const CounterBadgeAppearance: {\n    readonly filled: \"filled\";\n    readonly ghost: \"ghost\";\n};\n\n// @public\nexport type CounterBadgeAppearance = ValuesOf<typeof CounterBadgeAppearance>;\n\n// @public\nexport const CounterBadgeColor: {\n    readonly brand: \"brand\";\n    readonly danger: \"danger\";\n    readonly important: \"important\";\n    readonly informative: \"informative\";\n    readonly severe: \"severe\";\n    readonly subtle: \"subtle\";\n    readonly success: \"success\";\n    readonly warning: \"warning\";\n};\n```\n\n----------------------------------------\n\nTITLE: DialogSurface Props Definition\nDESCRIPTION: Defines the props for the DialogSurface component.  It includes ComponentProps and PortalProps, which allows specifying a mountNode for the dialog. PortalProps comes from '@fluentui/react-portal'.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/etc/react-dialog.api.md#2025-04-20_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport type DialogSurfaceProps = ComponentProps<Partial<DialogSurfaceSlots>> & Pick<PortalProps, 'mountNode'>;\"\n```\n\n----------------------------------------\n\nTITLE: Preparing Component for Stable Release\nDESCRIPTION: Command to generate files needed for the stable phase of a FluentUI component, transitioning it from preview to stable status.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/release-cycle.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:prepare-initial-release --project @fluentui/react-one-preview --phase=stable\n```\n\n----------------------------------------\n\nTITLE: TextArea DOM Rendering Structure\nDESCRIPTION: HTML representation of the rendered TextArea component showing the DOM structure with appropriate class names for styling and the textarea element within a wrapper div.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-textarea/library/docs/Spec.md#2025-04-20_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"fui-TextArea\">\n  <textarea id=\"textarea-1\" className=\"fui-TextArea__textarea\">This is a TextArea</textarea>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Duration Design Tokens in TypeScript\nDESCRIPTION: Defines CSS variable references for animation durations used throughout the FluentUI component system, ranging from ultra-fast to ultra-slow.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_40\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const durationFast = \"var(--durationFast)\";\nexport const durationFaster = \"var(--durationFaster)\";\nexport const durationGentle = \"var(--durationGentle)\";\nexport const durationNormal = \"var(--durationNormal)\";\nexport const durationSlow = \"var(--durationSlow)\";\nexport const durationSlower = \"var(--durationSlower)\";\nexport const durationUltraFast = \"var(--durationUltraFast)\";\nexport const durationUltraSlow = \"var(--durationUltraSlow)\";\n```\n\n----------------------------------------\n\nTITLE: DialogContent Slots Class Names Definition\nDESCRIPTION: Defines the class names for the slots within the DialogContent component. SlotClassNames is a type from '@fluentui/react-utilities'. It is used for styling purposes within the Fluent UI React framework.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/etc/react-dialog.api.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport const dialogContentClassNames: SlotClassNames<DialogContentSlots>;\"\n```\n\n----------------------------------------\n\nTITLE: DialogBody State Definition\nDESCRIPTION: Defines the state for the DialogBody component, using ComponentState from '@fluentui/react-utilities'.  It incorporates the slots available in DialogBodySlots.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/etc/react-dialog.api.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport type DialogBodyState = ComponentState<DialogBodySlots>;\"\n```\n\n----------------------------------------\n\nTITLE: Equivalent RadioGroup Usage in Fluent UI v9\nDESCRIPTION: Shows the equivalent implementation of the RadioGroup component in Fluent UI v9. It demonstrates how to create a RadioGroup with two Radio components as children, including a required label and accessibility attributes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/RadioGroup.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { Label, Radio, RadioGroup } from '@fluentui/react-components';\nimport { useId } from '@fluentui/react-utilities';\n\nconst RadioGroupV9BasicExample = () => {\n  const labelId = useId('label-');\n\n  return (\n    <>\n      <Label id={labelId} required>\n        Pick a Pizza\n      </Label>\n      <RadioGroup aria-labelledby={labelId} defaultValue=\"capricciosa\">\n        <Radio value=\"capricciosa\" label=\"Capricciosa\" />\n        <Radio value=\"prosciutto\" label=\"Prosciutto\" disabled />\n      </RadioGroup>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ComboBox Component in Fluent UI\nDESCRIPTION: Demonstrates the basic structure and usage of a ComboBox component that provides dropdown selection and text input capabilities\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-examples/src/react/ComboBox/docs/ComboBoxOverview.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nA combo box (`ComboBox`) combines a text field and a dropdown giving people a way to select an option from a list or enter their own choice.\n```\n\n----------------------------------------\n\nTITLE: Button Grid Interfaces\nDESCRIPTION: The `IButtonGrid` and its related interfaces specify the layout and behavior of button grids within Fluent UI. `IButtonGridCellProps` details properties for individual cells, while `IButtonGridProps` handles the overall grid attributes. These interfaces enable the creation and customization of complex button grid layouts.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_53\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface IButtonGrid {}\n\nexport interface IButtonGridCellProps<T> {\n    cellDisabledStyle?: string[];\n    cellIsSelectedStyle?: string[];\n    className?: string;\n    disabled?: boolean;\n    getClassNames?: (theme: ITheme, className: string, variantClassName: string, iconClassName: string | undefined, menuIconClassName: string | undefined, disabled: boolean, checked: boolean, expanded: boolean, isSplit: boolean | undefined) => IButtonClassNames;\n    id: string;\n    index?: number;\n    item: T;\n    label?: string;\n    onClick?: (item: T, event?: React_2.MouseEvent<HTMLButtonElement>) => void;\n    onFocus?: (item: T, event?: React_2.FocusEvent<HTMLButtonElement>) => void;\n    onHover?: (item?: T, event?: React_2.MouseEvent<HTMLButtonElement>) => void;\n    onKeyDown?: (ev: React_2.KeyboardEvent<HTMLButtonElement>) => void;\n    onMouseEnter?: (ev: React_2.MouseEvent<HTMLButtonElement>) => boolean;\n    onMouseLeave?: (ev: React_2.MouseEvent<HTMLButtonElement>) => void;\n    onMouseMove?: (ev: React_2.MouseEvent<HTMLButtonElement>) => boolean;\n    onRenderItem: (item: T) => JSX.Element;\n    onWheel?: (ev: React_2.MouseEvent<HTMLButtonElement>) => void;\n    role?: string;\n    selected?: boolean;\n}\n\nexport interface IButtonGridProps extends React_2.TableHTMLAttributes<HTMLTableElement>, React_2.RefAttributes<HTMLElement> {\n    ariaPosInSet?: number;\n    ariaSetSize?: number;\n    columnCount: number;\n    componentRef?: IRefObject<IButtonGrid>;\n    containerClassName?: string;\n    doNotContainWithinFocusZone?: boolean;\n    isSemanticRadio?: boolean;\n    items: any[];\n    onBlur?: () => void;\n    onRenderItem: (item: any, index: number) => JSX.Element;\n    positionInSet?: number;\n    setSize?: number;\n    shouldFocusCircularNavigate?: boolean;\n    styles?: IStyleFunctionOrObject<IButtonGridStyleProps, IButtonGridStyles>;\n    theme?: ITheme;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Supported Input Props (TypeScript)\nDESCRIPTION: This TypeScript type definition creates a type called `SupportedIntrinsicInputProps`. It iterates through a type called `HtmlInputProps` and checks if each key `K` exists as a key in the `JSX.IntrinsicElements['input']` interface. If so, it uses the corresponding type from the intrinsic element; otherwise, it defaults to `any`.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-search/library/docs/MIGRATION.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"type SupportedIntrinsicInputProps = {\n  [K in HtmlInputProps]?: K extends keyof JSX.IntrinsicElements['input'] ? JSX.IntrinsicElements['input'][K] : any;\n};\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Button and MenuButton Styles in TypeScript\nDESCRIPTION: Exports shared styles for Button and MenuButton components, allowing for consistent styling between related components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_58\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nconst styles: ElementStyles;\nexport { styles as ButtonStyles }\nexport { styles as MenuButtonStyles }\n```\n\n----------------------------------------\n\nTITLE: Using getCode() Function to Handle Keyboard Events in JavaScript\nDESCRIPTION: Example of using the getCode() function from the keyboard-key utility to handle keyboard events, comparing the result with predefined key codes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/keyboard-key/README.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener('keydown', event => {\n  const code = getCode(event);\n\n  switch (code) {\n    case keyboardKey.Escape: // 27\n      // handle escape key\n      break;\n    default:\n      break;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Color Design Tokens in TypeScript\nDESCRIPTION: Exports CSS variable references for various color tokens used in the Fluent UI design system, including brand colors, neutral backgrounds, and compound colors.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport const colorBackgroundOverlay = \"var(--colorBackgroundOverlay)\";\n\n// @public\nexport const colorBrandBackground = \"var(--colorBrandBackground)\";\n\n// @public\nexport const colorBrandBackground2 = \"var(--colorBrandBackground2)\";\n\n// @public\nexport const colorBrandBackground2Hover = \"var(--colorBrandBackground2Hover)\";\n\n// @public\nexport const colorBrandBackground2Pressed = \"var(--colorBrandBackground2Pressed)\";\n\n// @public\nexport const colorBrandBackground3Static = \"var(--colorBrandBackground3Static)\";\n\n// @public\nexport const colorBrandBackground4Static = \"var(--colorBrandBackground4Static)\";\n\n// @public\nexport const colorBrandBackgroundHover = \"var(--colorBrandBackgroundHover)\";\n\n// @public\nexport const colorBrandBackgroundInverted = \"var(--colorBrandBackgroundInverted)\";\n\n// @public\nexport const colorBrandBackgroundInvertedHover = \"var(--colorBrandBackgroundInvertedHover)\";\n\n// @public\nexport const colorBrandBackgroundInvertedPressed = \"var(--colorBrandBackgroundInvertedPressed)\";\n\n// @public\nexport const colorBrandBackgroundInvertedSelected = \"var(--colorBrandBackgroundInvertedSelected)\";\n\n// @public\nexport const colorBrandBackgroundPressed = \"var(--colorBrandBackgroundPressed)\";\n\n// @public\nexport const colorBrandBackgroundSelected = \"var(--colorBrandBackgroundSelected)\";\n\n// @public\nexport const colorBrandBackgroundStatic = \"var(--colorBrandBackgroundStatic)\";\n\n// @public\nexport const colorBrandForeground1 = \"var(--colorBrandForeground1)\";\n\n// @public\nexport const colorBrandForeground2 = \"var(--colorBrandForeground2)\";\n\n// @public\nexport const colorBrandForeground2Hover = \"var(--colorBrandForeground2Hover)\";\n\n// @public\nexport const colorBrandForeground2Pressed = \"var(--colorBrandForeground2Pressed)\";\n\n// @public\nexport const colorBrandForegroundInverted = \"var(--colorBrandForegroundInverted)\";\n\n// @public\nexport const colorBrandForegroundInvertedHover = \"var(--colorBrandForegroundInvertedHover)\";\n\n// @public\nexport const colorBrandForegroundInvertedPressed = \"var(--colorBrandForegroundInvertedPressed)\";\n\n// @public\nexport const colorBrandForegroundLink = \"var(--colorBrandForegroundLink)\";\n\n// @public\nexport const colorBrandForegroundLinkHover = \"var(--colorBrandForegroundLinkHover)\";\n\n// @public\nexport const colorBrandForegroundLinkPressed = \"var(--colorBrandForegroundLinkPressed)\";\n\n// @public\nexport const colorBrandForegroundLinkSelected = \"var(--colorBrandForegroundLinkSelected)\";\n\n// @public\nexport const colorBrandForegroundOnLight = \"var(--colorBrandForegroundOnLight)\";\n\n// @public\nexport const colorBrandForegroundOnLightHover = \"var(--colorBrandForegroundOnLightHover)\";\n\n// @public\nexport const colorBrandForegroundOnLightPressed = \"var(--colorBrandForegroundOnLightPressed)\";\n\n// @public\nexport const colorBrandForegroundOnLightSelected = \"var(--colorBrandForegroundOnLightSelected)\";\n\n// @public\nexport const colorBrandShadowAmbient = \"var(--colorBrandShadowAmbient)\";\n\n// @public\nexport const colorBrandShadowKey = \"var(--colorBrandShadowKey)\";\n\n// @public\nexport const colorBrandStroke1 = \"var(--colorBrandStroke1)\";\n\n// @public\nexport const colorBrandStroke2 = \"var(--colorBrandStroke2)\";\n\n// @public\nexport const colorBrandStroke2Contrast = \"var(--colorBrandStroke2Contrast)\";\n\n// @public\nexport const colorBrandStroke2Hover = \"var(--colorBrandStroke2Hover)\";\n\n// @public\nexport const colorBrandStroke2Pressed = \"var(--colorBrandStroke2Pressed)\";\n\n// @public\nexport const colorCompoundBrandBackground = \"var(--colorCompoundBrandBackground)\";\n\n// @public\nexport const colorCompoundBrandBackgroundHover = \"var(--colorCompoundBrandBackgroundHover)\";\n\n// @public\nexport const colorCompoundBrandBackgroundPressed = \"var(--colorCompoundBrandBackgroundPressed)\";\n\n// @public\nexport const colorCompoundBrandForeground1 = \"var(--colorCompoundBrandForeground1)\";\n\n// @public\nexport const colorCompoundBrandForeground1Hover = \"var(--colorCompoundBrandForeground1Hover)\";\n\n// @public\nexport const colorCompoundBrandForeground1Pressed = \"var(--colorCompoundBrandForeground1Pressed)\";\n\n// @public\nexport const colorCompoundBrandStroke = \"var(--colorCompoundBrandStroke)\";\n\n// @public\nexport const colorCompoundBrandStrokeHover = \"var(--colorCompoundBrandStrokeHover)\";\n\n// @public\nexport const colorCompoundBrandStrokePressed = \"var(--colorCompoundBrandStrokePressed)\";\n\n// @public\nexport const colorNeutralBackground1 = \"var(--colorNeutralBackground1)\";\n\n// @public\nexport const colorNeutralBackground1Hover = \"var(--colorNeutralBackground1Hover)\";\n\n// @public\nexport const colorNeutralBackground1Pressed = \"var(--colorNeutralBackground1Pressed)\";\n\n// @public\nexport const colorNeutralBackground1Selected = \"var(--colorNeutralBackground1Selected)\";\n\n// @public\nexport const colorNeutralBackground2 = \"var(--colorNeutralBackground2)\";\n\n// @public\nexport const colorNeutralBackground2Hover = \"var(--colorNeutralBackground2Hover)\";\n\n// @public\nexport const colorNeutralBackground2Pressed = \"var(--colorNeutralBackground2Pressed)\";\n\n// @public\nexport const colorNeutralBackground2Selected = \"var(--colorNeutralBackground2Selected)\";\n\n// @public\nexport const colorNeutralBackground3 = \"var(--colorNeutralBackground3)\";\n\n// @public\nexport const colorNeutralBackground3Hover = \"var(--colorNeutralBackground3Hover)\";\n\n// @public\nexport const colorNeutralBackground3Pressed = \"var(--colorNeutralBackground3Pressed)\";\n\n// @public\nexport const colorNeutralBackground3Selected = \"var(--colorNeutralBackground3Selected)\";\n\n// @public\nexport const colorNeutralBackground4 = \"var(--colorNeutralBackground4)\";\n\n// @public\nexport const colorNeutralBackground4Hover = \"var(--colorNeutralBackground4Hover)\";\n\n// @public\nexport const colorNeutralBackground4Pressed = \"var(--colorNeutralBackground4Pressed)\";\n\n// @public\nexport const colorNeutralBackground4Selected = \"var(--colorNeutralBackground4Selected)\";\n\n// @public\nexport const colorNeutralBackground5 = \"var(--colorNeutralBackground5)\";\n\n// @public\nexport const colorNeutralBackground5Hover = \"var(--colorNeutralBackground5Hover)\";\n\n// @public\nexport const colorNeutralBackground5Pressed = \"var(--colorNeutralBackground5Pressed)\";\n\n// @public\nexport const colorNeutralBackground5Selected = \"var(--colorNeutralBackground5Selected)\";\n\n// @public\nexport const colorNeutralBackground6 = \"var(--colorNeutralBackground6)\";\n\n// @public\nexport const colorNeutralBackgroundAlpha = \"var(--colorNeutralBackgroundAlpha)\";\n\n// @public\nexport const colorNeutralBackgroundAlpha2 = \"var(--colorNeutralBackgroundAlpha2)\";\n```\n\n----------------------------------------\n\nTITLE: Defining InteractionTag Component and Types in TypeScript\nDESCRIPTION: This snippet defines the `InteractionTag` component and its associated prop types, including various state and slot types necessary for implementing interaction tags within a React application. Dependencies on the Fluent UI utilities and React are essential for the complete functionality.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tags/library/etc/react-tags.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"react\" />\n\nimport { AvatarShape } from '@fluentui/react-avatar';\nimport { AvatarSize } from '@fluentui/react-avatar';\nimport { ComponentProps } from '@fluentui/react-utilities';\nimport { ComponentState } from '@fluentui/react-utilities';\nimport type { EventData } from '@fluentui/react-utilities';\nimport type { EventHandler } from '@fluentui/react-utilities';\nimport type { ForwardRefComponent } from '@fluentui/react-utilities';\nimport * as React_2 from 'react';\nimport { Slot } from '@fluentui/react-utilities';\nimport type { SlotClassNames } from '@fluentui/react-utilities';\n\n// @public\nexport const InteractionTag: ForwardRefComponent<InteractionTagProps>;\n\n// @public (undocumented)\nexport const interactionTagClassNames: SlotClassNames<InteractionTagSlots>;\n\n// @public\nexport const InteractionTagPrimary: ForwardRefComponent<InteractionTagPrimaryProps>;\n\n// @public (undocumented)\nexport const interactionTagPrimaryClassNames: SlotClassNames<InteractionTagPrimarySlots>;\n\n// @public (undocumented)\nexport type InteractionTagPrimaryContextValues = TagAvatarContextValues;\n\n// @public\nexport type InteractionTagPrimaryProps = ComponentProps<Partial<InteractionTagPrimarySlots>> & {\n    hasSecondaryAction?: boolean;\n};\n\n// @public (undocumented)\nexport type InteractionTagPrimarySlots = {\n    root: NonNullable<Slot<'button'>>;\n    media?: Slot<'span'>;\n    icon?: Slot<'span'>;\n    primaryText: Slot<'span'>;\n    secondaryText?: Slot<'span'>;\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport type InteractionTagPrimaryState = ComponentState<InteractionTagPrimarySlots> & Required<Pick<InteractionTagContextValue, 'appearance' | 'disabled' | 'selected' | 'shape' | 'size'> & Pick<InteractionTagPrimaryProps, 'hasSecondaryAction'>> & UseTagAvatarContextValuesOptions;\n\n// @public\nexport type InteractionTagProps<Value = TagValue> = ComponentProps<Partial<InteractionTagSlots>> & {\n    appearance?: TagAppearance;\n    disabled?: boolean;\n    selected?: boolean;\n    shape?: TagShape;\n    size?: TagSize;\n    value?: Value;\n};\n\n// @public\nexport const InteractionTagSecondary: ForwardRefComponent<InteractionTagSecondaryProps>;\n\n// @public (undocumented)\nexport const interactionTagSecondaryClassNames: SlotClassNames<InteractionTagSecondarySlots>;\n\n// @public\nexport type InteractionTagSecondaryProps = ComponentProps<InteractionTagSecondarySlots>;\n\n// @public (undocumented)\nexport type InteractionTagSecondarySlots = {\n    root: NonNullable<Slot<'button'>>;\n};\n\n// @public\nexport type InteractionTagSecondaryState = ComponentState<InteractionTagSecondarySlots> & Required<Pick<InteractionTagContextValue, 'appearance' | 'disabled' | 'selected' | 'shape' | 'size'>>;\n```\n\n----------------------------------------\n\nTITLE: Set Icon Options Function\nDESCRIPTION: Defines a function, `setIconOptions`, that allows setting global options for icons. It takes a partial `IIconOptions` object to update the current icon options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/style-utilities/etc/style-utilities.api.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n\"export function setIconOptions(options: Partial<IIconOptions>): void;\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SWC Plugin in Next.js\nDESCRIPTION: This JavaScript snippet configures the Next.js setup to utilize an SWC plugin, fluentui-next-appdir-directive. It updates the Next.js configuration file to include paths for @griffel and @fluentui, ensuring the plugin is applied during the build process.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/SSR/NextJSAppDir.stories.mdx#2025-04-20_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  experimental: {\n    swcPlugins: [['fluentui-next-appdir-directive', { paths: ['@griffel', '@fluentui'] }]],\n  },\n};\n\nmodule.exports = nextConfig;\n```\n\n----------------------------------------\n\nTITLE: Defining IDragDropEvents Interface in TypeScript\nDESCRIPTION: Defines the IDragDropEvents interface with various optional methods for handling drag and drop events such as canDrag, canDrop, onDragStart, onDragEnd, etc.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_108\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface IDragDropEvents {\n    canDrag?: (item?: any) => boolean;\n    canDragGroups?: boolean;\n    canDrop?: (dropContext?: IDragDropContext, dragContext?: IDragDropContext) => boolean;\n    onDragEnd?: (item?: any, event?: DragEvent) => void;\n    onDragEnter?: (item?: any, event?: DragEvent) => string;\n    onDragLeave?: (item?: any, event?: DragEvent) => void;\n    onDragOver?: (item?: any, event?: DragEvent) => void;\n    onDragStart?: (item?: any, itemIndex?: number, selectedItems?: any[], event?: MouseEvent) => void;\n    onDrop?: (item?: any, event?: DragEvent) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Flex with nested Flex\nDESCRIPTION: This example showcases the initial approach of nesting Flex components to create a navigation menu layout.  It demonstrates a common way to structure the menu with logo and navigation links.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/docs/src/examples/components/Flex/Recipes.mdx#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"<Flex space=\\\"between\\\">\\n    <Button content=\\\"Logo\\\" icon={<SkypeLogoIcon />} />\\n    <Flex gap=\\\"gap.small\\\">\\n      <Button content=\\\"Page 1\\\" />\\n      <Button content=\\\"Page 2\\\" />\\n      <Button content=\\\"Page 3\\\" />\\n    </Flex>\\n  </Flex>\"\n```\n\n----------------------------------------\n\nTITLE: Implementing resolveShorthand Function in TypeScript for FluentUI\nDESCRIPTION: This snippet provides a basic implementation of the resolveShorthand function used to resolve shorthand props in FluentUI components. It handles different types of shorthand values and merges them with default props.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/simplify-prop-merging.md#2025-04-20_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nfunction resolveShorthand<T extends Record<string, any>>(\n  value: ShorthandProps<T>,\n  defaultProps?: T,\n): ObjectShorthandProps<T> {\n  let resolvedShorthand: ObjectShorthandProps<T> = {} as T;\n\n  if (typeof value === 'string' || typeof value === 'number' || React.isValidElement(value)) {\n    resolvedShorthand = { children: value } as ObjectShorthandProps<T>;\n  }\n\n  if (typeof value === 'object') {\n    resolvedShorthand = value as ObjectShorthandProps<T>;\n  }\n\n  return { ...(defaultProps as ObjectShorthandProps<T>), ...resolvedShorthand };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Scale Animation with Fluent UI in React\nDESCRIPTION: This snippet demonstrates how to create a custom scale presence animation variant in React using Fluent UI's motion tokens and the `createScalePresence` function from `@fluentui/react-motion-components-preview`. It configures enter and exit durations and easing curves for the scale animation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-motion-components-preview/stories/src/Scale/ScaleCustomization.stories.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { motionTokens, createPresenceComponentVariant } from '@fluentui/react-components';\nimport { createScalePresence } from '@fluentui/react-motion-components-preview';\n\nconst CustomScaleVariant = createPresenceComponent(\n  createScalePresence({\n    enterDuration: motionTokens.durationSlow,\n    enterEasing: motionTokens.curveEasyEaseMax,\n    exitDuration: motionTokens.durationNormal,\n    exitEasing: motionTokens.curveEasyEaseMax,\n  }),\n);\n\nconst CustomScale = ({ visible }) => (\n  <CustomScaleVariant animateOpacity={false} unmountOnExit visible={visible}>\n    {/* Content */}\n  </CustomScaleVariant>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Type for FocusZoneTabbableElements\nDESCRIPTION: The FocusZoneTabbableElements type is a TypeScript union derived from the FocusZoneTabbableElements constant. It represents possible values for configuring tabbable elements within a FocusZone, combining them into a type-safe enumeration for use in focus configurations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-focus/etc/react-focus.api.md#2025-04-20_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\\nexport type FocusZoneTabbableElements = (typeof FocusZoneTabbableElements)[keyof typeof FocusZoneTabbableElements];\n```\n\n----------------------------------------\n\nTITLE: Basic Segment Component Migration Example\nDESCRIPTION: Example showing the basic migration of a Segment component with Button content from v0 to v9.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Segment.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Segment, Button } from '@fluentui/react-northstar';\nconst Component = () => <Segment content={<Button content=\"Segment content button\" />} />;\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from \"@fluentui/react-components\";\nimport { Segment } from \"@fluentui/react-migration-v0-v9\";\n\nexport const Component = () => {\n  <Segment>\n    <Button>Segment content button</Button>\n  </Segment>;\n```\n\n----------------------------------------\n\nTITLE: Example Usage of makeProviderStyles\nDESCRIPTION: Demonstrates how to use the proposed makeProviderStyles API to override FluentProvider styles\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/provider-style-overrides.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeProviderStyles } from '@fluentui/react-components';\n\nconst providerStyles = makeProviderStyles({\n  marginLeft: '1px',\n});\n\nconst App = () => {\n  return <FluentProvider styles={providerStyles}>{children}</FluentProvider>;\n};\n```\n\n----------------------------------------\n\nTITLE: Inheriting Parent CSS Variables in ThemeProvider\nDESCRIPTION: This snippet demonstrates comparing the current `Theme` with the parent `Theme` and only adding the CSS variables that are different.  Each subsequent `ThemeProvider` layer needs to use the CSS class rule of all its parents. Requires `themeToCssVars` to convert theme to css vars, and `diff` function to compare two themes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/theme-css-variable-insertion.md#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n\"const cssVars = themeToCssVars(theme);\nconst parentCssVars = themeToCssVars(parentTheme);\nconst diff = diff(cssVars, parentCssVars)\nconst cssRule = {...};\n// result: .theme-provider { --css-var: '#fff' }\nstyleEl.sheet.insertRule(cssRule);\n\n<head>\n  <style id=\\\"theme-provider-1\\\" />\n  <style id=\\\"theme-provider-2\\\" />\n  <style id=\\\"theme-provider-3\\\" />\n</head>\n\n\n<div class=\\\"theme-provider-1\\\">\n    <div class=\\\"theme-provider-1 theme-provider-2\\\">\n        <div class=\\\"theme-provider-1 theme-provider-2 theme-provider-3\\\">\n        </div>\n    </div>\n</div>\"\n```\n\n----------------------------------------\n\nTITLE: Accordion Component Definition in TypeScript\nDESCRIPTION: Defines the Accordion component class that extends FASTElement with properties for configuring expandable accordion sections. It manages accordion items, handles changes, and provides expand mode functionality.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class Accordion extends FASTElement {\n    // @internal (undocumented)\n    protected accordionItems: Element[];\n    expandmode: AccordionExpandMode;\n    // (undocumented)\n    expandmodeChanged(prev: AccordionExpandMode, next: AccordionExpandMode): void;\n    // @internal\n    handleChange(source: any, propertyName: string): void;\n    // @internal (undocumented)\n    slottedAccordionItems: HTMLElement[];\n    // @internal (undocumented)\n    slottedAccordionItemsChanged(oldValue: HTMLElement[], newValue: HTMLElement[]): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Conversion Utilities\nDESCRIPTION: Functions for converting between color formats. Includes rgb2hex to convert RGB values to hexadecimal string format and rgb2hsv to convert RGB values to HSV color model.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_246\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport function rgb2hex(r: number, g: number, b: number): string;\n\n// @public\nexport function rgb2hsv(r: number, g: number, b: number): IHSV;\n\n// @public\nexport const RGBA_REGEX: RegExp;\n```\n\n----------------------------------------\n\nTITLE: Implementing Context Menu with Card Component\nDESCRIPTION: Example showing how to implement a context menu with the Card component using @fluentui/react-menu.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-card/library/docs/Spec.md#2025-04-20_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Menu openOnContext>\n  <MenuTrigger>\n    <Card />\n  </MenuTrigger>\n\n  <MenuPopover>\n    <MenuList>\n      <MenuItem>Share</MenuItem>\n      <MenuItem>Dismiss</MenuItem>\n    </MenuList>\n  </MenuPopover>\n</Menu>\n```\n\n----------------------------------------\n\nTITLE: Importing Checkbox Component from Fluent UI React\nDESCRIPTION: Example of how to import the Checkbox component from the Fluent UI React components package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-checkbox/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { Checkbox } from '@fluentui/react-components';\n```\n\n----------------------------------------\n\nTITLE: Typography Wrapper Example\nDESCRIPTION: Comparison between using Text component with manual styling versus using the Display typography wrapper.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-text/library/README.md#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text, Display } from '@fluentui/react-text';\n\nconst Example = () => (\n  <>\n    <Text size={1000} weight=\"semibold\">\n      This text is styled like a Display variant.\n    </Text>\n    <Display>This text is also styled like a Display variant.</Display>\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: Defining ARIA Attributes for Selecting an Option in Markdown\nDESCRIPTION: This snippet defines the ARIA attributes for selecting an option in a dropdown. It specifies the role and state for an unselected option.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/stories/src/Dropdown/DropdownAccessibility.stories.mdx#2025-04-20_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| Name       | Role   | States and properties   |\n| ---------- | ------ | ----------------------- |\n| (1) Banana | option | `aria-selected=\"false\"` |\n```\n\n----------------------------------------\n\nTITLE: Combobox with Multiple Selection\nDESCRIPTION: This code snippet showcases how to enable multiple selection in the Combobox component using the `multiselect` prop. It allows users to select multiple options from the list.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/library/docs/Spec.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n<label id=\"pets\">Best pet</label>\n<Combobox aria-labelledby=\"pets\" multiselect={true}>\n  <Option key=\"cat\">Cat</Option>\n  <Option key=\"dog\">Dog</Option>\n  <Option key=\"ferret\">Ferret</Option>\n  <Option key=\"fish\">Fish</Option>\n</Combobox>\n```\n\n----------------------------------------\n\nTITLE: BaseExtendedPicker Component Definition in TypeScript\nDESCRIPTION: Defines the generic BaseExtendedPicker component with support for various item types and picker configurations. Provides functionality for selection management, input handling, and integration with floating pickers.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport class BaseExtendedPicker<T extends {}, P extends IBaseExtendedPickerProps<T>> extends React_2.Component<P, IBaseExtendedPickerState<T>> implements IBaseExtendedPicker<T> {\n    constructor(basePickerProps: P);\n    // (undocumented)\n    protected canAddItems(): boolean;\n    // (undocumented)\n    clearInput(): void;\n    // (undocumented)\n    componentDidMount(): void;\n    // (undocumented)\n    floatingPicker: React_2.RefObject<BaseFloatingPicker<T, IBaseFloatingPickerProps<T>>>;\n    // (undocumented)\n    protected get floatingPickerProps(): IBaseFloatingPickerProps<T>;\n    // (undocumented)\n    focus(): void;\n    // (undocumented)\n    get highlightedItems(): T[];\n    // (undocumented)\n    protected input: React_2.RefObject<Autofill>;\n    // (undocumented)\n    get inputElement(): HTMLInputElement | null;\n    // (undocumented)\n    get items(): any;\n    // (undocumented)\n    protected onBackspace: (ev: React_2.KeyboardEvent<HTMLElement>) => void;\n    // (undocumented)\n    protected onCopy: (ev: React_2.ClipboardEvent<HTMLElement>) => void;\n    // (undocumented)\n    protected onInputChange: (value: string, composing?: boolean) => void;\n    // (undocumented)\n    protected onInputClick: (ev: React_2.MouseEvent<HTMLInputElement | Autofill>) => void;\n    // (undocumented)\n    protected onInputFocus: (ev: React_2.FocusEvent<HTMLInputElement | Autofill>) => void;\n    // (undocumented)\n    protected onPaste: (ev: React_2.ClipboardEvent<Autofill | HTMLInputElement>) => void;\n    // (undocumented)\n    protected _onSelectedItemsChanged: () => void;\n    // (undocumented)\n    protected onSelectionChange: () => void;\n    // (undocumented)\n    protected _onSuggestionSelected: (item: T) => void;\n    // (undocumented)\n    render(): JSX.Element;\n    // (undocumented)\n    protected renderFloatingPicker(): JSX.Element;\n    // (undocumented)\n    protected renderSelectedItemsList(): JSX.Element;\n    // (undocumented)\n    protected root: React_2.RefObject<HTMLDivElement>;\n    // (undocumented)\n    selectedItemsList: React_2.RefObject<BaseSelectedItemsList<T, IBaseSelectedItemsListProps<T>>>;\n    // (undocumented)\n    protected get selectedItemsListProps(): IBaseSelectedItemsListProps<T>;\n    // (undocumented)\n    protected selection: Selection_2;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Badge Components - JSX\nDESCRIPTION: This snippet provides examples of how to use the Badge, CounterBadge, and PresenceBadge components in JSX. Each example showcases different properties such as appearance, size, and status, allowing for customizable visual representations of information.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/README.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Badge>999+</Badge>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Badge appearance=\"filled\">999+</Badge>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Badge shape=\"rounded\" />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Badge size=\"medium\" icon={<PasteIcon />} />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<CounterBadge count={5} appearance=\"ghost\" />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<CounterBadge count={0} dot />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<CounterBadge count={5} size=\"extra-large\" />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<PresenceBadge status=\"available\" />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<PresenceBadge status=\"away\" />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<PresenceBadge outOfOffice status=\"do-not-disturb\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Slots and Props (Before)\nDESCRIPTION: This snippet shows the initial type definitions for Slots, Props, and State before the proposed changes. It demonstrates how 'root' is implicitly handled through React.HTMLAttributes rather than being a dedicated slot.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/root-as-slot.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Slots = {\n  slot: ObjectShorthandProps<SlotProps>;\n};\nexport interface Props extends ComponentProps<Slots> & React.HTMLAttributes<HTMLElement> {/* ... */}\nexport interface State extends ComponentState<Slots> {/* ... */}\n\n// use*State hook\nfunction useState({ slot, ...props }: Props): State {\n  // ...\n  return {\n    ...props,\n    slot: resolveShorthand(slot),\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Keyboard Navigation for Dropdown Options in Markdown\nDESCRIPTION: This snippet defines the keyboard interactions for navigating between options in a dropdown. It specifies the keys and their corresponding actions for moving focus between options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/stories/src/Dropdown/DropdownAccessibility.stories.mdx#2025-04-20_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Key                     | Result                                                 |\n| ----------------------- | ------------------------------------------------------ |\n| <kbd>Up</kbd> arrow     | Moves focus to the previous option, if one exists      |\n| <kbd>Down</kbd> arrow   | Moves focus to the next option, if one exists          |\n| <kbd>Home</kbd>         | Moves focus to the first option                        |\n| <kbd>End</kbd>          | Moves focus to the last option                         |\n| <kbd>PageUp</kbd>       | Moves focus up 10 options, or to the first option      |\n| <kbd>PageDown</kbd>     | Moves focus down 10 options, or to the last option     |\n| Any printable character | Moves focus to the next option matching that character |\n```\n\n----------------------------------------\n\nTITLE: Setting Button Style Classes\nDESCRIPTION: This code segment defines the `IButtonClassNames` interface which specifies optional class names for different parts of a button component such as `icon`, `label`, and `textContainer`. This interface is crucial for assigning custom styles to button components, allowing for flexible and adaptable UI designs within Fluent UI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_52\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface IButtonClassNames {\n    description?: string;\n    flexContainer?: string;\n    icon?: string;\n    label?: string;\n    menuIcon?: string;\n    root?: string;\n    screenReaderText?: string;\n    textContainer?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Providers Component for Fluent UI in React\nDESCRIPTION: This TypeScript snippet defines a Providers component that sets up necessary providers for Fluent UI. It utilizes FluentProvider and SSRProvider to handle server-side rendering and theming with teamsDarkTheme. Dependencies include React and various Fluent UI components, and it takes a children parameter for rendering React nodes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/SSR/NextJSAppDir.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport * as React from 'react';\nimport {\n  FluentProvider,\n  teamsDarkTheme,\n  SSRProvider,\n  RendererProvider,\n  createDOMRenderer,\n  renderToStyleElements,\n} from '@fluentui/react-components';\nimport { useServerInsertedHTML } from 'next/navigation';\n\nexport function Providers({ children }: { children: React.ReactNode }) {\n  const [renderer] = React.useState(() => createDOMRenderer());\n  const didRenderRef = React.useRef(false);\n\n  useServerInsertedHTML(() => {\n    if (didRenderRef.current) {\n      return;\n    }\n    didRenderRef.current = true;\n    return <>{renderToStyleElements(renderer)}</>;\n  });\n\n  return (\n    <RendererProvider renderer={renderer}>\n      <SSRProvider>\n        <FluentProvider theme={teamsDarkTheme}>{children}</FluentProvider>\n      </SSRProvider>\n    </RendererProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Link Components in React Native\nDESCRIPTION: Example showing how to implement both URL-based and event-based Link components using Fluent UI React Native. The code demonstrates two types of links - one that navigates to a URL and another that triggers an alert function.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/LinkPage/docs/windows/LinkUsage.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\nimport { Alert } from 'react-native';\nimport { Link } from '@fluentui/react-native';\nimport { Stack } from '@fluentui-react-native/stack';\nimport { stackStyle } from '../Common/styles';\n\nexport const LinkTest: React.FunctionComponent<{}> = () => {\n  const doPress = (): void => {\n    Alert.alert('Alert.', 'You have been alerted.');\n  };\n\n  return (\n    <Stack style={stackStyle}>\n      <Link url=\"https://www.bing.com/\" content=\"Click to find yourself.\" />\n      <Link onPress={doPress} content=\"Click to alert yourself.\" />\n    </Stack>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Picker Callout Inline Rendering\nDESCRIPTION: Demonstrates how to render picker dropdowns inline to improve accessibility for touch-based screen readers by preventing layer rendering\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-examples/src/react/Pickers/docs/PickersBestPractices.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\npickerCalloutProps={{ doNotLayer: true }}\n```\n\n----------------------------------------\n\nTITLE: Using structured styles for component variations\nDESCRIPTION: Demonstrates how to use structured styles for component size variants, grouping styles by condition to simplify the implementation and make the code more maintainable.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/styles-handbook.md#2025-04-20_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeStyles, makeResetStyles, mergeClasses, shorthands } from '@griffel/react';\n\nconst useBaseClassName = makeResetStyles({\n  display: 'flex',\n  fontSize: '16px',\n});\nconst useClasses = makeStyles({\n  small: { fontSize: '12px' },\n  medium: {\n    /* defined in base styles */\n  },\n  large: { fontSize: '20px' },\n});\n\nfunction Component(props) {\n  const baseClassName = useBaseClassName();\n  const classes = useClasses();\n\n  const className = mergeClasses(baseClassName, classes[props.size]);\n\n  /* --- */\n}\n```\n\n----------------------------------------\n\nTITLE: Dropdown Component Implementation in TypeScript\nDESCRIPTION: Implementation of the Dropdown and DropdownOption components with form association support. Includes appearance customization, selection handling, and accessibility features.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_32\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport class Dropdown extends BaseDropdown {\n    appearance: DropdownAppearance;\n    size?: DropdownSize;\n}\n\n// @public\nexport const DropdownAppearance: {\n    filledDarker: string;\n    filledLighter: string;\n    outline: string;\n    transparent: string;\n};\n\n// @public (undocumented)\nexport type DropdownAppearance = ValuesOf<typeof DropdownAppearance>;\n\n// @public\nexport const dropdownButtonTemplate: ViewTemplate<BaseDropdown, any>;\n\n// @public\nexport const DropdownDefinition: FASTElementDefinition<typeof Dropdown>;\n\n// @public\nexport const dropdownInputTemplate: ViewTemplate<BaseDropdown, any>;\n\n// Warning: (ae-forgotten-export) The symbol \"Start\" needs to be exported by the entry point index.d.ts\n//\n// @public\nexport class DropdownOption extends FASTElement implements Start {\n    constructor();\n    active: boolean;\n    // @internal\n    protected activeChanged(prev: boolean, next: boolean): void;\n    // (undocumented)\n    connectedCallback(): void;\n    // @internal\n    currentSelected?: boolean;\n    // @internal\n    currentSelectedChanged(prev: boolean | undefined, next: boolean | undefined): void;\n    defaultSelected?: boolean;\n    // @internal\n    protected defaultSelectedChanged(prev: boolean | undefined, next: boolean | undefined): void;\n    // @internal\n    descriptionSlot: Node[];\n    // @internal\n    descriptionSlotChanged(prev: Node[] | undefined, next: Node[] | undefined): void;\n    disabled?: boolean;\n    disabledAttribute?: boolean;\n    // @internal\n    protected disabledAttributeChanged(prev: boolean | undefined, next: boolean | undefined): void;\n    // @internal\n    protected disabledChanged(prev: boolean | undefined, next: boolean | undefined): void;\n    // @internal\n    elementInternals: ElementInternals;\n    get form(): HTMLFormElement | null;\n    static formAssociated: boolean;\n    formAttribute?: string;\n    freeform?: boolean;\n    // @internal\n    freeformOutputs?: HTMLOutputElement[];\n    // @override\n    id: string;\n    initialValue: string;\n    // @internal\n    protected initialValueChanged(prev: string, next: string): void;\n    get labels(): ReadonlyArray<HTMLLabelElement>;\n    multiple: boolean;\n    multipleChanged(prev: boolean, next: boolean): void;\n    name: string;\n    get selected(): boolean;\n    set selected(next: boolean);\n    // @internal\n    setFormValue(value: File | string | FormData | null, state?: File | string | FormData | null): void;\n    // @internal\n    start: HTMLSlotElement;\n    get text(): string;\n    textAttribute?: string;\n    toggleSelected(force?: boolean): void;\n    get value(): string;\n    set value(value: string);\n}\n\n// @public\nexport const DropdownOptionDefinition: FASTElementDefinition<typeof DropdownOption>;\n\n// @public\nexport type DropdownOptionOptions = StartOptions<DropdownOption> & {\n    checkedIndicator?: StaticallyComposableHTML<DropdownOption>;\n};\n\n// @public\nexport type DropdownOptions = {\n    indicator?: StaticallyComposableHTML<BaseDropdown>;\n};\n\n// @public\nexport const DropdownOptionStyles: ElementStyles;\n```\n\n----------------------------------------\n\nTITLE: Sortable Table in React/TypeScript\nDESCRIPTION: Implementation of a sortable table with a header cell that has a specified sort direction, enabling interactive sorting functionality\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-table/library/docs/Spec.md#2025-04-20_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<Table sortable>\\n  <TableHeader>\\n    <TableRow>\\n      <TableHeaderCell sortDirection=\"ascending\">Header</TableHeaderCell>\\n    </TableRow>\\n  </TableHeader>\\n</Table>\n```\n\n----------------------------------------\n\nTITLE: Defining TooltipContext in TypeScript\nDESCRIPTION: TypeScript definition for the TooltipContext, which is used to manage tooltip visibility across the application. This context ensures that only one tooltip is visible at a time.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tooltip/library/docs/Spec.md#2025-04-20_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\n/**\n * The context provided by TooltipProvider\n */\nexport type TooltipContextType = {\n  /**\n   * When a tooltip is shown, it sets itself as the visibleTooltip.\n   * The next tooltip to become visible can use it to hide the previous tooltip immediately.\n   */\n  visibleTooltip?: {\n    hide: () => void;\n  };\n};\n\n/**\n * Context shared by all of the tooltips in the app\n */\nexport const TooltipContext = React.createContext<TooltipContextType>({});\n```\n\n----------------------------------------\n\nTITLE: Implementing TextInput Component in TypeScript\nDESCRIPTION: Defines the TextInput component class that extends BaseTextInput, including appearance and control size properties with their change handlers. Also includes interface extension with StartEnd.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_78\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Warning: (ae-different-release-tags) This symbol has another declaration with a different release tag\n// Warning: (ae-internal-mixed-release-tag) Mixed release tags are not allowed for \"TextInput\" because one of its declarations is marked as @internal\n//\n// @public\nexport class TextInput extends BaseTextInput {\n    appearance?: TextInputAppearance;\n    appearanceChanged(prev: TextInputAppearance | undefined, next: TextInputAppearance | undefined): void;\n    controlSize?: TextInputControlSize;\n    controlSizeChanged(prev: TextInputControlSize | undefined, next: TextInputControlSize | undefined): void;\n}\n\n// @internal (undocumented)\nexport interface TextInput extends StartEnd {\n}\n```\n\n----------------------------------------\n\nTITLE: Inline Popover Structure in React\nDESCRIPTION: This snippet outlines the structure for an inline popover, showcasing how to use inline property with the Popover component. The expected markup is provided to clarify the popover's rendering behavior.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-popover/library/docs/Spec.md#2025-04-20_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<div id=\"container\">\n  <Popover inline>\n    <PopoverTrigger>\n      <button>Trigger</button>\n    </PopoverTrigger>\n\n    <PopoverSurface>\n      {children}\n    </PopoverSurface>\n  </Popover>\n<div>\n```\n\n----------------------------------------\n\nTITLE: ProgressBar Slots Definition\nDESCRIPTION: Defines the ProgressBarSlots type, which specifies the slots available for customization in the ProgressBar component. It includes a 'root' slot (required) and an optional 'bar' slot, both of which are divs.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-progress/library/etc/react-progress.api.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n// @public (undocumented)\nexport type ProgressBarSlots = {\n  root: NonNullable<Slot<'div'>>;\n  bar?: NonNullable<Slot<'div'>>;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Dialog and DialogBody Classes in TypeScript\nDESCRIPTION: Defines the Dialog and DialogBody classes extending FASTElement, along with related types and styles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_32\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport class Dialog extends FASTElement {\n    ariaDescribedby?: string;\n    ariaLabelledby?: string;\n    clickHandler(event: Event): boolean;\n    dialog: HTMLDialogElement;\n    emitBeforeToggle: () => void;\n    emitToggle: () => void;\n    hide(): void;\n    show(): void;\n    type: DialogType;\n}\n\n// @public\nexport class DialogBody extends FASTElement {\n    noTitleAction: boolean;\n}\n\n// @public\nexport const DialogBodyDefinition: FASTElementDefinition<typeof DialogBody>;\n\n// @public\nexport const DialogBodyStyles: ElementStyles;\n\n// @public\nexport const DialogBodyTemplate: ElementViewTemplate;\n\n// @public\nexport const DialogDefinition: FASTElementDefinition<typeof Dialog>;\n\n// @public\nexport const DialogStyles: ElementStyles;\n\n// @public\nexport const DialogTemplate: ElementViewTemplate<Dialog>;\n\n// Warning: (ae-missing-release-tag) \"DialogType\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport const DialogType: {\n    readonly modal: \"modal\";\n    readonly nonModal: \"non-modal\";\n    readonly alert: \"alert\";\n};\n\n// @public (undocumented)\nexport type DialogType = ValuesOf<typeof DialogType>;\n```\n\n----------------------------------------\n\nTITLE: FluentUI Utilities API Exports\nDESCRIPTION: A comprehensive list of all exported functions, constants, classes, and types from the @fluentui/utilities package. Includes utilities for DOM manipulation, component composition, async operations, and styling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/utilities/etc/utilities.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport function addDirectionalKeyCode(which: number): void;\n\n// @public\nexport function addElementAtIndex<T>(array: T[], index: number, itemToAdd: T): T[];\n\n// @public (undocumented)\nexport type AdoptedStylesheetExHook = (stylesheetKey: string, shadowCtx: MergeStylesShadowRootContextValue | undefined, rootMergeStyles: Map<string, ExtendedCSSStyleSheet>, win: Window | undefined) => boolean;\n\n// @public (undocumented)\nexport type AdoptedStylesheetHook = (stylesheetKey: string) => boolean;\n\n// @public\nexport const allowOverscrollOnElement: (element: HTMLElement | null, events: EventGroup) => void;\n\n// @public\nexport const allowScrollOnElement: (element: HTMLElement | null, events: EventGroup) => void;\n\n// @public\nexport const anchorProperties: Record<string, number>;\n\n// @public\nexport function appendFunction(parent: any, ...functions: any[]): () => void;\n\n// @public\nexport function arraysEqual<T>(array1: T[], array2: T[]): boolean;\n\n// @public\nexport function asAsync<TProps extends {}>(options: IAsAsyncOptions<TProps>): React_2.ForwardRefExoticComponent<React_2.PropsWithoutRef<TProps & {\n    asyncPlaceholder?: React_2.ElementType<any> | undefined;\n}> & React_2.RefAttributes<React_2.ElementType<TProps>>>;\n\n// @public\nexport function assertNever(x: never): never;\n\n// @public\nexport function assign(this: any, target: any, ...args: any[]): any;\n\n// @public\nexport class Async {\n    constructor(parent?: object, onError?: (e: any) => void);\n    // (undocumented)\n    cancelAnimationFrame(id: number, targetElement?: Element | null): void;\n    clearImmediate(id: number, targetElement?: Element | null): void;\n    clearInterval(id: number): void;\n    clearTimeout(id: number): void;\n    debounce<T extends (...args: any[]) => any>(func: T, wait?: number, options?: {\n        leading?: boolean;\n        maxWait?: number;\n        trailing?: boolean;\n    }): ICancelable<T> & T;\n    dispose(): void;\n    // (undocumented)\n    protected _logError(e: any): void;\n    // (undocumented)\n    requestAnimationFrame(callback: () => void, targetElement?: Element | null): number;\n    setImmediate(callback: () => void, targetElement?: Element | null): number;\n    setInterval(callback: () => void, duration: number): number;\n    setTimeout(callback: () => void, duration: number): number;\n    throttle<T extends (...args: any[]) => any>(func: T, wait?: number, options?: {\n        leading?: boolean;\n        trailing?: boolean;\n    }): T;\n}\n\n// @public\nexport const audioProperties: Record<string, number>;\n\n// @public\nexport class AutoScroll {\n    constructor(element: HTMLElement, win?: Window);\n    // (undocumented)\n    dispose(): void;\n}\n\n// @public @deprecated\nexport class BaseComponent<TProps extends IBaseProps = {}, TState extends {} = {}> extends React_2.Component<TProps, TState> {\n    constructor(props: TProps, context?: any);\n    protected get _async(): Async;\n    get className(): string;\n    componentDidMount(): void;\n    componentDidUpdate(prevProps: TProps, prevState: TState): void;\n    componentWillUnmount(): void;\n    protected get _disposables(): IDisposable[];\n    protected get _events(): EventGroup;\n    // @deprecated (undocumented)\n    static onError: (errorMessage?: string, ex?: any) => void;\n    // @deprecated\n    protected _resolveRef(refName: string): (ref: React_2.ReactNode) => React_2.ReactNode;\n    protected _skipComponentRefResolution: boolean;\n    protected _updateComponentRef(currentProps: IBaseProps, newProps?: IBaseProps): void;\n    protected _warnConditionallyRequiredProps(requiredProps: string[], conditionalPropName: string, condition: boolean): void;\n    protected _warnDeprecations(deprecationMap: ISettingsMap<TProps>): void;\n    protected _warnMutuallyExclusive(mutuallyExclusiveMap: ISettingsMap<TProps>): void;\n}\n\n// @public\nexport const baseElementEvents: Record<string, number>;\n\n// @public\nexport const baseElementProperties: Record<string, number>;\n\n// @public\nexport const buttonProperties: Record<string, number>;\n\n// @public\nexport function calculatePrecision(value: number | string): number;\n\n// @public\nexport function canUseDOM(): boolean;\n\n// @public\nexport function classNamesFunction<TStyleProps extends {}, TStyleSet extends IStyleSetBase>(options?: IClassNamesFunctionOptions): (getStyles: IStyleFunctionOrObject<TStyleProps, TStyleSet> | undefined, styleProps?: TStyleProps) => IProcessedStyleSet<TStyleSet>;\n\n// @public (undocumented)\nexport const colGroupProperties: Record<string, number>;\n\n// @public (undocumented)\nexport const colProperties: Record<string, number>;\n\n// @public\nexport function composeComponentAs<TProps extends {}>(outer: IComponentAs<TProps>, inner: IComponentAs<TProps>): IComponentAs<TProps>;\n\n// @public\nexport function composeRenderFunction<TProps>(outer: IRenderFunction<TProps>, inner: IRenderFunction<TProps>): IRenderFunction<TProps>;\n\n// @public\nexport function createArray<T>(size: number, getItem: (index: number) => T): T[];\n\n// @public\nexport function createMemoizer<F extends (input: any) => any>(getValue: F): F;\n\n// @public\nexport const createMergedRef: <TType, TValue = null>(value?: TValue | undefined) => (...newRefs: (React_2.Ref<TType | TValue | null> | undefined)[]) => (newValue: TType | TValue | null) => void;\n\n// Warning: (ae-incompatible-release-tags) The symbol \"css\" is marked as @public, but its signature references \"ICssInput\" which is marked as @internal\n//\n// @public\nexport function css(...args: ICssInput[]): string;\n\n// @public (undocumented)\nexport function customizable(scope: string, fields: string[], concatStyles?: boolean): <P>(ComposedComponent: React_2.ComponentType<P>) => any;\n\n// @public (undocumented)\nexport class Customizations {\n    static applyBatchedUpdates(code: () => void, suppressUpdate?: boolean): void;\n    static applyScopedSettings(scopeName: string, settings: ISettings): void;\n    static applySettings(settings: ISettings): void;\n    // (undocumented)\n    static getSettings(properties: string[], scopeName?: string, localSettings?: ICustomizations): any;\n    // (undocumented)\n    static observe(onChange: () => void): void;\n    // (undocumented)\n    static reset(): void;\n    // (undocumented)\n    static unobserve(onChange: () => void): void;\n}\n\n// @public @deprecated\nexport class Customizer extends React_2.Component<ICustomizerProps> {\n    // (undocumented)\n    componentDidMount(): void;\n    // (undocumented)\n    componentWillUnmount(): void;\n    // (undocumented)\n    render(): React_2.ReactElement<{}>;\n}\n\n// @public (undocumented)\nexport const CustomizerContext: React_2.Context<ICustomizerContext>;\n\n// @public\nexport const DATA_IS_SCROLLABLE_ATTRIBUTE = \"data-is-scrollable\";\n\nexport { DATA_PORTAL_ATTRIBUTE }\n\n// Warning: (ae-incompatible-release-tags) The symbol \"DelayedRender\" is marked as @public, but its signature references \"IDelayedRenderState\" which is marked as @internal\n//\n// @public\nexport class DelayedRender extends React_2.Component<IDelayedRenderProps, IDelayedRenderState> {\n    constructor(props: IDelayedRenderProps);\n    // (undocumented)\n    componentDidMount(): void;\n    // (undocumented)\n    componentWillUnmount(): void;\n    // (undocumented)\n    static defaultProps: {\n        delay: number;\n    };\n    // (undocumented)\n    render(): React_2.ReactElement<{}> | null;\n}\n\n// @public\nexport function disableBodyScroll(): void;\n\n// @public\nexport const divProperties: Record<string, number>;\n\n// @public\nexport function doesElementContainFocus(element: HTMLElement): boolean;\n\nexport { elementContains }\n\nexport { elementContainsAttribute }\n\n// @public\nexport function enableBodyScroll(): void;\n\n// @public\nexport class EventGroup {\n    constructor(parent: any);\n    declare(event: string | string[]): void;\n    // (undocumented)\n    dispose(): void;\n    static isDeclared(target: any, eventName: string): boolean;\n    // (undocumented)\n    static isObserved(target: any, eventName: string): boolean;\n    // (undocumented)\n    off(target?: any, eventName?: string, callback?: (args?: any) => void, options?: boolean | AddEventListenerOptions): void;\n    on(target: any, eventName: string, callback: (args?: any) => void, options?: boolean | AddEventListenerOptions): void;\n    onAll(target: any, events: {\n        [key: string]: (args?: any) => void;\n    }, useCapture?: boolean): void;\n    static raise(target: any, eventName: string, eventArgs?: any, bubbleEvent?: boolean, doc?: Document): boolean | undefined;\n    raise(eventName: string, eventArgs?: any, bubbleEvent?: boolean): boolean | undefined;\n```\n\n----------------------------------------\n\nTITLE: Implementing Select Component with Custom Class in React TSX\nDESCRIPTION: Public implementation example showing how to use the Select component with a custom class and an ID that connects to a label.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-select/library/docs/Spec.md#2025-04-20_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<label htmlFor=\"selectID\">Choose a color</label>\n<Select id=\"selectID\" className=\"my-select-class\">\n  <option>Red</option>\n  <option>Green</option>\n  <option>Blue</option>\n</Select>\n```\n\n----------------------------------------\n\nTITLE: Avatar Component Definition in TypeScript\nDESCRIPTION: Defines the Avatar component class that extends BaseAvatar with appearance, color, and shape customization. It includes methods for generating colors and initials based on user information.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class Avatar extends BaseAvatar {\n    appearance?: AvatarAppearance | undefined;\n    color?: AvatarColor | undefined;\n    colorId?: AvatarNamedColor | undefined;\n    static colors: (\"anchor\" | \"beige\" | \"blue\" | \"brass\" | \"brown\" | \"cornflower\" | \"cranberry\" | \"dark-green\" | \"dark-red\" | \"forest\" | \"gold\" | \"grape\" | \"lavender\" | \"light-teal\" | \"lilac\" | \"magenta\" | \"marigold\" | \"mink\" | \"navy\" | \"peach\" | \"pink\" | \"platinum\" | \"plum\" | \"pumpkin\" | \"purple\" | \"red\" | \"royal-blue\" | \"seafoam\" | \"steel\" | \"teal\")[];\n    // (undocumented)\n    connectedCallback(): void;\n    // (undocumented)\n    disconnectedCallback(): void;\n    // @internal\n    generateColor(): void;\n    // @internal\n    generateInitials(): string | void;\n    // @internal\n    handleChange(source: any, propertyName: string): void;\n    shape?: AvatarShape | undefined;\n    size?: AvatarSize | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Motion Definition Factory Accepting Element Argument\nDESCRIPTION: This example shows an alternative approach where the motion definition is a factory function that accepts the animated element as an argument. This allows accessing the computed styles of the element and using CSS variables indirectly to define motion properties like duration and easing.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/motion-definition-n-apis.md#2025-04-20_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nconst motion: AtomMotionFn = element => {\n  const computedStyle = getComputedStyle(element);\n\n  return {\n    duration: Number(computedStyle.getPropertyValue('--durationUltraSlow').replace('ms', '')),\n    easing: computedStyle.getPropertyValue('--curveAccelerateMax'),\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: TagPickerControl Component Definition\nDESCRIPTION: Defines the TagPickerControl React component as a ForwardRefComponent, indicating that it's a component that accepts a ref and forwards it to a child element.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const TagPickerControl: ForwardRefComponent<TagPickerControlProps>;\"\n```\n\n----------------------------------------\n\nTITLE: Virtual Parent Complex Rendering Example\nDESCRIPTION: Demonstrates nested Portal components and potential issues with out-of-order DOM elements and click event handling\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-portal/library/README.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst outerButtonRef = React.useRef();\nconst innerButtonRef = React.useRef();\n\n<Portal>\n  <div>\n    <button ref={outerButtonRef}> Outer button </button>\n    <Portal>\n      <div>\n        <button ref={innerButtonRef}> Inner button </button>\n      </div>\n    </Portal>\n  </div>\n</Portal>\n```\n\n----------------------------------------\n\nTITLE: Generating Animation Object for Fluent UI Components in TypeScript\nDESCRIPTION: This function creates an animation object with specified duration and delay. It uses the createCubicBezierAnimate function to generate the easing curve.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-migration-v0-v9/stories/src/Flex/Description.md#2025-04-20_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst createAnimation = (animationDuration: number, animationDelay: number = 0): AnimationStyles => ({\n  animationDuration: animationDuration + 'ms',\n  animationDelay: animationDelay + 'ms',\n  animationIterationCount: 1,\n  animationName: undefined,\n  animationTimingFunction: createCubicBezierAnimate(0.1, 0.9, 0.2, 1),\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering DatePicker Component - React\nDESCRIPTION: This snippet shows a minimal implementation of the DatePicker component in a React application. It initializes the DatePicker to be displayed within the component tree.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-datepicker-compat/library/README.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<DatePicker />\n```\n\n----------------------------------------\n\nTITLE: Version Patches and Dependency Bumps\nDESCRIPTION: Markdown formatted version history showing patch updates and dependency version bumps across multiple releases of the React Toast component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-toast/library/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patches\n\n- Bump @fluentui/react-aria to v9.13.4 ([PR #32313](https://github.com/microsoft/fluentui/pull/32313) by beachball)\n- Bump @fluentui/react-portal to v9.4.33 ([PR #32313](https://github.com/microsoft/fluentui/pull/32313) by beachball)\n- Bump @fluentui/react-tabster to v9.22.5 ([PR #32313](https://github.com/microsoft/fluentui/pull/32313) by beachball)\n```\n\n----------------------------------------\n\nTITLE: useSearchBox Hook Definition (TypeScript)\nDESCRIPTION: Defines the useSearchBox_unstable hook, which takes SearchBoxProps and a React Ref to an HTMLInputElement as input and returns a SearchBoxState.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-search/library/etc/react-search.api.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const useSearchBox_unstable: (props: SearchBoxProps, ref: React_2.Ref<HTMLInputElement>) => SearchBoxState;\n```\n\n----------------------------------------\n\nTITLE: useSearchBoxStyles Hook Definition (TypeScript)\nDESCRIPTION: Defines the useSearchBoxStyles_unstable hook, which takes a SearchBoxState as input and returns a SearchBoxState. It is used for applying styles to the SearchBox component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-search/library/etc/react-search.api.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const useSearchBoxStyles_unstable: (state: SearchBoxState) => SearchBoxState;\n```\n\n----------------------------------------\n\nTITLE: Defining Multi Stacked Bar Chart Component in TypeScript\nDESCRIPTION: The MultiStackedBarChart constant exports a functional component designed to display multi-stacked bar charts, utilizing props for data management and visual configurations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/etc/react-charting.api.md#2025-04-20_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const MultiStackedBarChart: React_2.FunctionComponent<IMultiStackedBarChartProps>;\n```\n\n----------------------------------------\n\nTITLE: Defining Carousel Navigation Hooks\nDESCRIPTION: TypeScript declarations for hooks that manage carousel navigation components including buttons, containers, and image buttons.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-carousel/library/etc/react-carousel.api.md#2025-04-20_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const useCarouselNav_unstable: (props: CarouselNavProps, ref: React_2.Ref<HTMLDivElement>) => CarouselNavState;\nexport const useCarouselNavButton_unstable: (props: CarouselNavButtonProps, ref: React_2.Ref<ARIAButtonElement>) => CarouselNavButtonState;\nexport const useCarouselNavContainer_unstable: (props: CarouselNavContainerProps, ref: React_2.Ref<HTMLDivElement>) => CarouselNavContainerState;\nexport const useCarouselNavImageButton_unstable: (props: CarouselNavImageButtonProps, ref: React_2.Ref<ARIAButtonElement>) => CarouselNavImageButtonState;\n```\n\n----------------------------------------\n\nTITLE: Style Interfaces for CalendarMonth and CalendarPicker\nDESCRIPTION: Interfaces defining styles for CalendarMonth and the shared CalendarPicker styles that are used by multiple calendar components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-calendar-compat/library/etc/react-calendar-compat.api.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport interface CalendarMonthStyleProps extends CalendarPickerStyleProps {\n}\n\n// @internal (undocumented)\nexport interface CalendarMonthStyles extends CalendarPickerStyles {\n}\n\n// @internal (undocumented)\nexport const calendarPickerClassNames: SlotClassNames<CalendarPickerStyles>;\n\n// @internal (undocumented)\nexport interface CalendarPickerStyleProps {\n    animateBackwards?: boolean;\n    animationDirection?: AnimationDirection;\n    className?: string;\n    hasHeaderClickCallback?: boolean;\n    highlightCurrent?: boolean;\n    highlightSelected?: boolean;\n}\n\n// @internal (undocumented)\nexport interface CalendarPickerStyles {\n    // (undocumented)\n    buttonRow: string;\n    // (undocumented)\n    current: string;\n    // (undocumented)\n    currentItemButton: string;\n    // (undocumented)\n    disabled: string;\n    // (undocumented)\n    gridContainer: string;\n    // (undocumented)\n    headerContainer: string;\n    // (undocumented)\n    itemButton: string;\n    // (undocumented)\n    navigationButton: string;\n    // (undocumented)\n    navigationButtonsContainer: string;\n    root: string;\n    // (undocumented)\n    selected: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Pivot Component in TypeScript\nDESCRIPTION: Exports the Pivot component, PivotBase, and PivotItem class. Also includes definitions for PivotLinkFormat and PivotLinkSize.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_241\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const Pivot: React_2.FunctionComponent<IPivotProps>;\n\n// @public (undocumented)\nexport const PivotBase: React_2.FunctionComponent<IPivotProps>;\n\n// @public (undocumented)\nexport class PivotItem extends React_2.Component<IPivotItemProps, {}> {\n    constructor(props: IPivotItemProps);\n    // (undocumented)\n    render(): JSX.Element;\n}\n\n// @public @deprecated (undocumented)\nexport const enum PivotLinkFormat {\n    links = \"links\",\n    tabs = \"tabs\"\n}\n\n// @public\nexport type PivotLinkFormatType = 'links' | 'tabs';\n\n// @public @deprecated (undocumented)\nexport const enum PivotLinkSize {\n    large = \"large\",\n    normal = \"normal\"\n}\n\n// @public\nexport type PivotLinkSizeType = 'normal' | 'large';\n```\n\n----------------------------------------\n\nTITLE: Running Behavior Tests in Fluent UI (TypeScript)\nDESCRIPTION: Example output of passing behavior tests after renaming test files containing 'behavior-test' string. This helps identify which tests are running and passing.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/test-a-feature.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n PASS  test/specs/behaviors/behavior-test.tsx\n  buttonBehavior.ts\n    √ Adds role='button' if element type is other than 'button'. (11ms)\n    √ Adds attribute 'aria-disabled=true' based on the property 'disabled'. (8ms)\n    √ Adds attribute 'aria-disabled=true' based on the property 'disabled'. This can be overriden by providing 'aria-disabled' property directly to the component.\n  buttonGroupBehavior.ts\n    √ Adds role 'presentation' to 'root' component's part (2ms)\n    √ Wraps component in FocusZone allowing arrow key navigation through the children of the component.\n  dialogBehavior.ts\n    √ Adds attribute 'aria-disabled=true' to 'trigger' component's part based on the property 'disabled'.\n    √ Adds attribute 'aria-modal=true' to 'popup' component's part.\n    √ Adds attribute 'role=dialog' to 'popup' component's part.\n    √ Traps focus inside component\n  gridBehavior.ts\n    √ Wraps component in FocusZone allowing circular arrow key navigation through the children of the component.\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for React Teaching Popover Stories\nDESCRIPTION: This snippet shows how to configure the Storybook module exports to include the React Teaching Popover stories. It specifies the globs pattern to match both MDX and TypeScript/TSX story files from the component's stories directory.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-teaching-popover/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-teaching-popover/stories/src/**/*.stories.mdx', '../packages/react-components/react-teaching-popover/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProgressBar Class in TypeScript\nDESCRIPTION: This snippet defines the ProgressBar class, which extends BaseProgressBar. It includes properties for shape and thickness.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_41\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass ProgressBar_2 extends BaseProgressBar {\n    shape?: ProgressBarShape;\n    thickness?: ProgressBarThickness;\n}\nexport { ProgressBar_2 as ProgressBar }\n```\n\n----------------------------------------\n\nTITLE: Using ProgressField Component with Label and Validation\nDESCRIPTION: The snippet shows how to use the ProgressField component, which adds label, validation state, and hint text to a ProgressBar. It imports React and the necessary types from Fluent UI, defining a default export that showcases the component's usage.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-progress/library/docs/Spec.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport type { ProgressFieldProps } from '@fluentui/react-field';\nimport { ProgressField } from '@fluentui/react-field';\n\nexport const Default = (props: ProgressFieldProps) => (\n  <ProgressField\n    label=\"Example Progress field\"\n    value={0.75}\n    validationState=\"success\"\n    validationMessage=\"This is a success message\"\n    hint=\"This is a hint message\"\n    {...props}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Controlled Tablist Implementation in HTML\nDESCRIPTION: This snippet shows how to control the selected tab using the `activeid` attribute and assigning unique IDs to each tab. This allows the developer to manage the selected tab via application state. The `activeid` prop corresponds to the id of the tab that should be active.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/tablist/readme.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<fluent-tablist activeid=\"tab-one\">\n  <fluent-tab id=\"tab-one\">One / Left</fluent-tab>\n  <fluent-tab id=\"tab-two\">Two / Middle</fluent-tab>\n  <fluent-tab id=\"tab-three\">Three / Right</fluent-tab>\n</fluent-tablist>\n```\n\n----------------------------------------\n\nTITLE: Defining IBaseFloatingPickerProps Interface in TypeScript\nDESCRIPTION: Specifies the props interface for the BaseFloatingPicker component, including options for suggestion handling, rendering, and customization.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_47\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface IBaseFloatingPickerProps<T> extends React_2.ClassAttributes<any> {\n    calloutWidth?: number;\n    className?: string;\n    componentRef?: IRefObject<IBaseFloatingPicker>;\n    createGenericItem?: (input: string, isValid: boolean) => ISuggestionModel<T>;\n    getTextFromItem?: (item: T, currentValue?: string) => string;\n    inputElement?: HTMLInputElement | null;\n    onChange?: (item: T) => void;\n    onInputChanged?: (filter: string) => void;\n    onRemoveSuggestion?: (item: T) => void;\n    onRenderSuggestionsItem?: (props: T, itemProps: ISuggestionItemProps<T>) => JSX.Element;\n    onResolveSuggestions: (filter: string, selectedItems?: T[]) => T[] | PromiseLike<T[]> | null;\n    onSuggestionsHidden?: () => void;\n    onSuggestionsShown?: () => void;\n    onValidateInput?: (input: string) => boolean;\n    onZeroQuerySuggestion?: (selectedItems?: T[]) => T[] | PromiseLike<T[]> | null;\n    pickerCalloutProps?: ICalloutProps;\n    pickerSuggestionsProps?: IBaseFloatingPickerSuggestionProps;\n    resolveDelay?: number;\n    searchingText?: ((props: { input: string; }) => string) | string;\n    selectedItems?: T[];\n    showForceResolve?: () => boolean;\n    suggestionItems?: T[];\n    suggestionsStore: SuggestionsStore<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SplitButton Class Names Interface in TypeScript\nDESCRIPTION: Interface definition for SplitButton component class names, allowing customization of different parts of the SplitButton through CSS class names.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_176\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface ISplitButtonClassNames {\n    // (undocumented)\n    divider?: string;\n    // (undocumented)\n    flexContainer?: string;\n    // (undocumented)\n    icon?: string;\n    // (undocumented)\n    root?: string;\n    // (undocumented)\n    splitButtonContainer?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Using useHasParentContext Hook with Context Selector\nDESCRIPTION: Example demonstrating the usage of useHasParentContext helper hook to check if a component is wrapped by a context selector provider. This is useful for conditional rendering based on context availability.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-context-selector/README.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst Foo = () => {\n  // An easy way to test if a context provider is wrapped around this component\n  // since it's more complicated to compare with a default context value\n  const isWrappedWithContext = useHasParentContext(CounterContext);\n\n  if (isWrappedWithContext) {\n    return <div>I am inside context selector provider</div>;\n  } else {\n    return <div>I can only use default context value</div>;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing DocumentCard Component in Fabric v8\nDESCRIPTION: Example showing how to implement a DocumentCard in Fabric v8 with preview, title and activity sections.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-card/library/docs/Spec.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<DocumentCard\n  aria-label=\"Default Document Card with large file name. Created by Annie Lindqvist a few minutes ago.\"\n  onClickHref=\"http://bing.com\"\n>\n  <DocumentCardPreview {...previewProps} />\n  <DocumentCardTitle title=\"Filename\" />\n  <DocumentCardActivity activity=\"Created a few minutes ago\" people={DocumentCardActivityPeople} />\n</DocumentCard>\n```\n\n----------------------------------------\n\nTITLE: Defining ExpandingCardBase React Component in TypeScript\nDESCRIPTION: Defines the ExpandingCardBase class extending React.Component. It includes lifecycle methods, default props, and rendering logic for expanding cards.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_31\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class ExpandingCardBase extends React_2.Component<IExpandingCardProps, IExpandingCardState> {\n    constructor(props: IExpandingCardProps);\n    // (undocumented)\n    componentDidMount(): void;\n    // (undocumented)\n    componentWillUnmount(): void;\n    // (undocumented)\n    static defaultProps: {\n        compactCardHeight: number;\n        expandedCardHeight: number;\n        directionalHintFixed: boolean;\n    };\n    // (undocumented)\n    render(): JSX.Element;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Portal Compatibility Context and Hook\nDESCRIPTION: Implements a React context and hook for managing portal element registration and compatibility across different Fluent UI versions\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/portal-compat.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\n\nexport const PortalCompatContext = React.createContext(\n  () => {},\n  () => {},\n);\n\nexport function usePortalCompat() {\n  return React.useContext(PortalCompatContext);\n}\n\nfunction Portal() {\n  const portalElement = document.createElement('div');\n  const [registerPortalEl, unregisterPortalEl] = usePortalCompat();\n\n  React.useEffect(() => {\n    registerPortalEl(portalElement);\n\n    return () => {\n      unregisterPortalEl(portalElement);\n    };\n  }, [portalElement, registerPortalEl, unregisterPortalEl]);\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize Domain Margin\nDESCRIPTION: Initializes the domain margin with the minimum domain margin value. This variable is updated later depending on the available space. `_domainMargin` is used to track the space.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/docs/implementing-2-to-1-spacing.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nthis._domainMargin = MIN_DOMAIN_MARGIN;\n```\n\n----------------------------------------\n\nTITLE: Implementing atMention='me' styling in default theme using FluentUI v9\nDESCRIPTION: Example showing how to achieve the same visual result as atMention='me' property in the default theme using makeStyles in v9.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-text/library/docs/MIGRATION.md#2025-04-20_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeStyles, Text } from '@fluentui/react-components';\n\nconst useStyles = makeStyles({\n  root: {\n    color: 'rgb(204, 74, 49)',\n    fontWeight: 700,\n  },\n});\n\nconst MyComponent = () => {\n  const styles = useStyles();\n\n  return <Text className={styles.root}>{/* ... */}</Text>;\n};\n```\n\n----------------------------------------\n\nTITLE: Composing Fluent UI BaseLink Component in TypeScript\nDESCRIPTION: This snippet demonstrates how to compose a custom FooLink component using the BaseLink from Fluent UI. It shows the inclusion of tokens, styles, and slots for customizing and extending the base component. The FooLink component is used in a render function to link to Bing. Required dependencies include react-texture for composition and potentially other Fluent UI and React dependencies.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Link.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst FooLink = BaseLink.compose({\n  tokens: {},\n  styles: {},\n  slots: {}\n});\n\nrender () {\n  <FooLink href=\"https://www.bing.com\">\n    Go to bing!\n  </FooLink>\n}\n```\n\n----------------------------------------\n\nTITLE: ImageProps Type Definition\nDESCRIPTION: Defines the ImageProps type, which specifies the props that can be passed to the Image component. It includes ComponentProps from @fluentui/react-utilities for general component props, as well as specific props for controlling the image's appearance, such as block, bordered, fit, shadow, and shape.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-image/library/etc/react-image.api.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type ImageProps = ComponentProps<ImageSlots> & {\n    block?: boolean;\n    bordered?: boolean;\n    fit?: 'none' | 'center' | 'contain' | 'cover' | 'default';\n    shadow?: boolean;\n    shape?: 'square' | 'circular' | 'rounded';\n};\n```\n\n----------------------------------------\n\nTITLE: TagPicker State Type\nDESCRIPTION: Defines the state type for the TagPicker component. It includes properties from ComponentState, ComboboxState, and TagPickerContextValue. It also includes properties for the trigger, popover, and inline elements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport type TagPickerState = ComponentState<TagPickerSlots> & Pick<ComboboxState, 'open' | 'activeDescendantController' | 'mountNode' | 'onOptionClick' | 'registerOption' | 'selectedOptions' | 'selectOption' | 'value' | 'setValue' | 'setOpen' | 'setHasFocus' | 'appearance' | 'clearSelection' | 'getOptionById' | 'getOptionsMatchingValue' | 'disabled'> & Pick<TagPickerContextValue, 'triggerRef' | 'secondaryActionRef' | 'popoverId' | 'popoverRef' | 'targetRef' | 'tagPickerGroupRef' | 'size' | 'noPopover'> & {\n    trigger: React_2.ReactNode;\n    popover?: React_2.ReactNode;\n    inline: boolean;\n};\"\n```\n\n----------------------------------------\n\nTITLE: Defining with Responsive Container Function in TypeScript\nDESCRIPTION: The withResponsiveContainer function is a higher-order component designed to enhance charts with responsive capabilities, tailored for wrapping existing components effectively.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/etc/react-charting.api.md#2025-04-20_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport function withResponsiveContainer<TProps extends Omit<IResponsiveContainerProps, 'children'>>(WrappedComponent: React_2.ComponentType<TProps>): React_2.FC<TProps>;\n```\n\n----------------------------------------\n\nTITLE: Using DefaultEffects for Elevation in Fluent UI\nDESCRIPTION: Shows how to apply elevation effects using the DefaultEffects constant from Fluent UI React.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Styles/ElevationPage/docs/web/ElevationImplementation.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DefaultEffects } from '@fluentui/react';\n\n<div style={{ boxShadow: DefaultEffects.elevation8 }} />;\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Badge in React\nDESCRIPTION: This snippet demonstrates how to create a simple Badge component in React, printing custom text inside it. The Badge can encapsulate additional visual descriptors for UI elements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/docs/Spec.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Badge>\n    My Custom Badge\n  </Badge>\n  <Badge\n    style={{ position: 'absolute', top: -4, right: -4 }}\n  />\n```\n\n----------------------------------------\n\nTITLE: Basic Fluent UI React Component Implementation in TypeScript\nDESCRIPTION: Example showing how to import and use Fluent UI React components within a React application. The example wraps the application in a Fabric component which is required for RTL, keyboard focus and other features.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-resources/src/docs/GettingStartedOverview.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Fabric, DefaultButton } from '@fluentui/react';\n\nconst MyPage = () => (\n  <Fabric>\n    <DefaultButton>I am a button.</DefaultButton>\n  </Fabric>\n);\n\nReactDOM.render(<MyPage />, document.body.firstChild);\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react to v8.42.1\nDESCRIPTION: This patch updates the @fluentui/react package to v8.42.1 to guarantee improvements and fixes. Detailed in Pull Request #20605.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/ts-minbar-test-react/CHANGELOG.md#2025-04-20_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.42.1 ([PR #20605](https://github.com/microsoft/fluentui/pull/20605) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Implementing NavDivider Hook\nDESCRIPTION: Custom hook implementation for NavDivider that sets default appearance to 'strong'\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/patterns/basic-recomposition.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\nimport type { NavDividerProps, NavDividerState } from './NavDivider.types';\nimport { useDivider_unstable } from '@fluentui/react-divider';\n\n/**\n * Create the state required to render NavDivider.\n *\n * The returned state can be modified with hooks such as useNavDividerStyles_unstable,\n * before being passed to renderNavDivider_unstable.\n *\n * @param props - props from this instance of NavDivider\n * @param ref - reference to root HTMLDivElement of NavDivider\n */\nexport const useNavDivider_unstable = (props: NavDividerProps, ref: React.Ref<HTMLElement>): NavDividerState => {\n  return useDivider_unstable({ appearance: 'strong', ...props }, ref);\n};\n```\n\n----------------------------------------\n\nTITLE: Linking Fluent UI React Package in Custom App\nDESCRIPTION: Command to link the registered @fluentui/react package in the custom React application.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/using-local-unpublished-version-of-the-lib-with-a-local-React-app.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cd app\n$ yarn link @fluentui/react\n```\n\n----------------------------------------\n\nTITLE: Combobox Component Definition\nDESCRIPTION: This snippet defines the Combobox component as a ForwardRefComponent, allowing it to be passed a ref. It serves as the main entry point for using the Combobox functionality within a React application. ComboboxProps specify the props accepted by the component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/library/etc/react-combobox.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const Combobox: ForwardRefComponent<ComboboxProps>;\"\n```\n\n----------------------------------------\n\nTITLE: ColorSwatch DOM Structure (row layout)\nDESCRIPTION: This snippet shows the DOM structure for a ColorSwatch component when used in a row layout. It uses a button element with the \"radio\" role and CSS variables for styling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-swatch-picker/library/docs/Spec.md#2025-04-20_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<button\n  aria-label=\"Pink\"\n  role=\"radio\"\n  aria-checked=\"true\"\n  style=\"--fui-SwatchPicker--color: #ff0099\"\n  class=\"fui-ColorSwatch\">\n</button>\n```\n\n----------------------------------------\n\nTITLE: List Component Usage in v9 (Composition-based)\nDESCRIPTION: Example of using the List component in Fluent UI React v9, which follows a composition-based approach where ListItem components are rendered as children.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-list/library/docs/MIGRATION.md#2025-04-20_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst items = [{ name: 'John' }, { name: 'Alice' }];\n\nconst MyList = () => {\n  return (\n    <List>\n      {items.map(item => {\n        <ListItem key={item}>{item}</ListItem>;\n      })}\n    </List>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Single Panel Opened Accordion Example\nDESCRIPTION: Example showing Accordion implementation with a single panel opened by default.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-accordion/library/docs/Spec.md#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst accordion = (\n  <Accordion open={0}>\n    <AccordionItem>\n      <AccordionHeader>\n        First Panel\n      </AccordionHeader>\n      <AccordionPanel>\n        This is the content of the first Panel\n      </AccordionPanel>\n    </AccordionItem>\n    <AccordionItem>\n      <AccordionHeader>\n        Second Panel\n      </AccordionHeader>\n      <AccordionPanel>\n        This is the content of the second Panel\n      </AccordionPanel>\n    </AccordionItem>\n  <Accordion>\n)\n```\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <div role=\"heading\">\n    <div role=\"button\" aria-expanded=\"true\" aria-controls=\"sect1\" id=\"accordion1\">\n      <svg>Chevron Icon</svg>\n      First Panel\n    </div>\n  </div>\n  <div id=\"sect1\" role=\"region\" aria-labelledby=\"accordion1\">This is the content of the first Panel</div>\n  <div role=\"heading\">\n    <div role=\"button\" aria-expanded=\"false\" aria-controls=\"sect2\" id=\"accordion2\">\n      <svg>Chevron Icon</svg>\n      Second Panel\n    </div>\n  </div>\n  <div id=\"sect2\" role=\"region\" aria-labelledby=\"accordion2\">This is the content of the second Panel</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing TextArea Component Class in TypeScript\nDESCRIPTION: Defines the TextArea component class that extends BaseTextArea with properties for appearance, block display, and size. Includes lifecycle methods and change handlers with internal implementation details.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_74\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"TextArea\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport class TextArea extends BaseTextArea {\n    appearance: TextAreaAppearance;\n    // (undocumented)\n    protected appearanceChanged(prev: TextAreaAppearance | undefined, next: TextAreaAppearance | undefined): void;\n    block: boolean;\n    // (undocumented)\n    protected blockChanged(): void;\n    // @internal (undocumented)\n    connectedCallback(): void;\n    // @internal (undocumented)\n    disconnectedCallback(): void;\n    // @internal (undocumented)\n    handleChange(_: any, propertyName: string): void;\n    // (undocumented)\n    protected labelSlottedNodesChanged(): void;\n    size?: TextAreaSize;\n    // (undocumented)\n    protected sizeChanged(prev: TextAreaSize | undefined, next: TextAreaSize | undefined): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Using the useStateManager Hook in React\nDESCRIPTION: This example demonstrates the usage of the `useStateManager` hook to manage complex component state using a state manager factory. It defines types for the input props, state, and actions, and then creates a state manager that handles the `change` action, applying changes to the component's value.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/react-bindings/README.md#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\ntype InputProps = {\n  defaultValue?: string;\n  value?: string;\n  onChange?: (value: string) => void;\n};\ntype InputState = { value: string };\ntype InputActions = { change: (value: string) => void };\n\nconst createInputManager: ManagerFactory<InputState, InputActions> = config =>\n  createManager<InputState, InputActions>({\n    ...config,\n    actions: {\n      change: (value: string) => () => ({ value }),\n    },\n    state: { value: '', ...config.state },\n  });\n\nconst Input: React.FC<InputProps> = props => {\n  const { state, actions } = useStateManager(createInputManager, {\n    mapPropsToInitialState: () => ({ value: props.defaultValue }),\n    mapPropsToState: () => ({ value: props.value }),\n  });\n\n  return (\n    <input\n      onChange={e => {\n        actions.change(e.target.value);\n        if (props.onChange) props.onChange(e.target.value);\n      }}\n      value={state.value}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining TreeItemState Type in TypeScript\nDESCRIPTION: Defines the state structure for TreeItem components, extending the ComponentState with TreeItemContextValue and additional properties for level and item type.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tree/library/etc/react-tree.api.md#2025-04-20_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type TreeItemState = ComponentState<TreeItemSlots> & TreeItemContextValue & {\n    level: number;\n    itemType: TreeItemType;\n};\n```\n\n----------------------------------------\n\nTITLE: Conditional Styling with mergeStyleSets\nDESCRIPTION: Shows how to use an array of style objects and conditional logic to apply different styles based on a state (e.g., `isToggled`).  This example uses `mergeStyleSets` to generate class names based on the `isToggled` state.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/merge-styles/README.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport const getClassNames = (isToggled: boolean): IComponentClassNames => {\n  return mergeStyleSets({\n    root: [\n      {\n        background: 'red',\n      },\n      isToggled && {\n        background: 'green',\n      },\n    ],\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: DOM Element Rendering of Image Component - React (TypeScript)\nDESCRIPTION: This example shows how the Image component is ultimately rendered into the DOM, demonstrating the transformation from React component to HTML.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-image/library/docs/Spec.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<img src=\"...\" class=\"...\">\n```\n\n----------------------------------------\n\nTITLE: Running a CodeMod - TypeScript\nDESCRIPTION: This TypeScript code snippet illustrates how to invoke a codemod and handle the resulting output log messages for successful and failed executions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/codemods/documentation/howTo.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nrunMods(codemodArray, project.getSourceFiles(), result => {\n  result.result.resolve(\n    v => {\n      console.log(`Upgraded file ${result.file.getBaseName()} with mod ${result.mod.name}`, v.logs);\n    },\n    e => {\n      console.warn(`Mod ${result.mod.name} did not run on file ${result.file.getBaseName()} for: `, e.reason);\n    },\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Defining PresenceBadge Component and Props in TypeScript\nDESCRIPTION: This code snippet sets up the PresenceBadge component, detailing its properties including status and outOfOffice options, which allow for contextual display based on user presence. It also constructs the corresponding PresenceBadgeState type.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/etc/react-badge.api.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\\nexport const PresenceBadge: ForwardRefComponent<PresenceBadgeProps>;\\n\\n// @public (undocumented)\\nexport const presenceBadgeClassNames: SlotClassNames<BadgeSlots>;\\n\\n// @public (undocumented)\\nexport type PresenceBadgeProps = Omit<ComponentProps<Pick<BadgeSlots, 'root' | 'icon'>>, 'color'> & Pick<BadgeProps, 'size'> & {\\n    status?: PresenceBadgeStatus;\\n    outOfOffice?: boolean;\\n};\\n\\n// @public (undocumented)\\nexport type PresenceBadgeState = ComponentState<BadgeSlots> & BadgeState & Required<Pick<PresenceBadgeProps, 'status' | 'outOfOffice'>>;\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Structure of a Badge\nDESCRIPTION: This snippet represents the DOM structure of a Badge component, illustrating how a badge is typically rendered as a span element with a class name.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/docs/Spec.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"ui-badge\"> ... </span>\n```\n\n----------------------------------------\n\nTITLE: Defining ITextFieldProps Interface in TypeScript\nDESCRIPTION: Specifies the ITextFieldProps interface extending React.AllHTMLAttributes with various properties for text field components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_215\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface ITextFieldProps extends React_2.AllHTMLAttributes<HTMLInputElement | HTMLTextAreaElement> {\n    ariaLabel?: string;\n    autoAdjustHeight?: boolean;\n    autoComplete?: string;\n    borderless?: boolean;\n    canRevealPassword?: boolean;\n    className?: string;\n    componentRef?: IRefObject<ITextField>;\n    defaultValue?: string;\n    deferredValidationTime?: number;\n    description?: string;\n    disabled?: boolean;\n    // @deprecated\n    elementRef?: React_2.Ref<HTMLDivElement>;\n    errorMessage?: string | JSX.Element;\n    iconProps?: IIconProps;\n    inputClassName?: string;\n    invalid?: boolean;\n    label?: string;\n    multiline?: boolean;\n    onChange?: (event: React_2.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => void;\n    onGetErrorMessage?: (value: string) => string | JSX.Element | PromiseLike<string | JSX.Element> | undefined;\n    onNotifyValidationResult?: (errorMessage: string | JSX.Element, value: string | undefined) => void;\n    onRenderDescription?: IRenderFunction<ITextFieldProps>;\n    onRenderInput?: IRenderFunction<React_2.InputHTMLAttributes<HTMLInputElement> & React_2.RefAttributes<HTMLInputElement>>;\n    onRenderLabel?: IRenderFunction<ITextFieldProps>;\n    onRenderPrefix?: IRenderFunction<ITextFieldProps>;\n    onRenderSuffix?: IRenderFunction<ITextFieldProps>;\n    prefix?: string;\n    readOnly?: boolean;\n    resizable?: boolean;\n    revealPasswordAriaLabel?: string;\n    scrollContainerRef?: React_2.RefObject<HTMLElement>;\n    styles?: IStyleFunctionOrObject<ITextFieldStyleProps, ITextFieldStyles>;\n    suffix?: string;\n    theme?: ITheme;\n    underlined?: boolean;\n    validateOnFocusIn?: boolean;\n    validateOnFocusOut?: boolean;\n    validateOnLoad?: boolean;\n    value?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: FluentUI CircularProgress Style Names\nDESCRIPTION: Available style names for CircularProgress widget including size variations (XSmall, Small, Medium, Large) and primary theme variants\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/SpinnerPage/docs/android/SpinnerImplementation.md#2025-04-20_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\nWidget.FluentUI.CircularProgress.XSmall\nWidget.FluentUI.CircularProgress.Small\nWidget.FluentUI.CircularProgress.Medium\nWidget.FluentUI.CircularProgress.Large\nWidget.FluentUI.CircularProgress.XSmall.Primary\nWidget.FluentUI.CircularProgress.Small.Primary\nWidget.FluentUI.CircularProgress.Medium.Primary\nWidget.FluentUI.CircularProgress.Large.Primary\n```\n\n----------------------------------------\n\nTITLE: Configuring Story Parameters for Export\nDESCRIPTION: Example of configuring a story's parameters for export functionality, including provider selection, bundler choice, and dependency management.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-storybook-addon-export-to-sandbox/README.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const MyStory = () => <MyComponent />;\nMyStory.parameters = {\n  exportToSandbox: {\n    provider: 'codesandbox-cloud', // or 'codesandbox-browser' or 'stackblitz-cloud'\n    bundler: 'cra', // or 'vite'\n    requiredDependencies: {\n      react: 'latest',\n      'react-dom': 'latest',\n    },\n    optionalDependencies: {\n      '@fluentui/react-components': 'latest',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic TextField Usage in Fluent UI v8\nDESCRIPTION: Example of basic TextField usage in Fluent UI v8, demonstrating various input states and properties.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Input.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { TextField } from '@fluentui/react/lib/TextField';}\nimport { Stack, IStackProps, IStackStyles } from '@fluentui/react/lib/Stack';\n\nconst columnProps: Partial<IStackProps> = {\n  tokens: { childrenGap: 15 },\n  styles: { root: { width: 300 } },\n};\n\nconst TextFieldV8BasicExample = () => {\n  return <Stack {...columnProps}>\n    <TextField label=\"Standard\" />\n    <TextField label=\"Disabled\" disabled defaultValue=\"I am disabled\" />\n    <TextField label=\"Read-only\" readOnly defaultValue=\"I am read-only\" />\n    <TextField label=\"Required \" required />\n    <TextField ariaLabel=\"Required without visible label\" required />\n    <TextField label=\"With error message\" errorMessage=\"Error message\" />\n  </Stack>\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Grid Layout with Responsive Columns in Fluent UI\nDESCRIPTION: Demonstrates the basic structure of an ms-Grid with a single row containing two columns. The columns use responsive classes to adjust their widths across small (ms-sm), medium (ms-md), and large (ms-lg) screen sizes, with column widths adding up to 12 at each breakpoint.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Styles/LayoutPage/docs/web/LayoutGridImplementation.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"ms-Grid\" dir=\"ltr\">\n  <div class=\"ms-Grid-row\">\n    <div class=\"ms-Grid-col ms-sm6 ms-md4 ms-lg2\">A</div>\n    <div class=\"ms-Grid-col ms-sm6 ms-md8 ms-lg10\">B</div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: TagPickerControl Props Type\nDESCRIPTION: Defines the props interface for the TagPickerControl component, extending ComponentProps and allowing partial overrides of TagPickerControlSlots.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport type TagPickerControlProps = ComponentProps<Partial<TagPickerControlSlots>>;\"\n```\n\n----------------------------------------\n\nTITLE: Theme Override for the Whole Application\nDESCRIPTION: This code shows how to override theme tokens for the entire application using `mergeThemes`. Changes made this way will affect all instances of Fluent UI components that use the modified tokens.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/theme-tokens.md#2025-04-20_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst tweakedTheme = mergeThemes(teamsLightTheme, {\n  global: {\n    borderRadius: {\n      medium: '6px', // change medium border radius to 6px for the whole application\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Test Plan Table in Markdown\nDESCRIPTION: Structured markdown table containing detailed test cases and validation criteria for the Stacked Bar Chart component, including test steps, validation requirements, and testing tools used (Enzyme, RTL, E2E).\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/docs/TestPlans/StackedBarChart/ComponentTests.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|                                **Test steps**                                 |                                              **Validation**                                               | **Tool used** |\n| :---------------------------------------------------------------------------: | :-------------------------------------------------------------------------------------------------------: | :-----------: |\n|                          Test 1: [Snapshot testing]                           |                                                                                                           |               |\n|                     - With only data prop, non-empty data                     |                                    Renders stacked bar chart correctly                                    |    Enzyme     |\n```\n\n----------------------------------------\n\nTITLE: Pre-RFC Input Component Structure in TSX\nDESCRIPTION: Example showing the nested structure of an Input component before implementing the RFC proposal.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/native-element-props.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<slots.root>\n  <slots.bookendBefore />\n  <slots.inputWrapper {/* visually styled as the input */}>\n    <slots.insideStart />\n    <slots.input /> {/* actual input element */}\n    <slots.insideEnd />\n  </slots.inputWrapper>\n  <slots.bookendAfter />\n</slots.root>\n```\n\n----------------------------------------\n\nTITLE: Defining Overflow React Components - TypeScript\nDESCRIPTION: This represents the definition of several forward-reference React components like Overflow, OverflowDivider, and OverflowItem. These components accept various props related to overflow options and change handlers, enabling control over list item overflow in a UI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-overflow/library/etc/react-overflow.api.md#2025-04-20_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const Overflow: React_2.ForwardRefExoticComponent<Partial<Pick<ObserveOptions, \"padding\" | \"overflowDirection\" | \"overflowAxis\" | \"minimumVisible\">> & {\n    children: React_2.ReactElement;\n    onOverflowChange?: ((ev: null, data: OverflowState) => void) | undefined;\n} & React_2.RefAttributes<unknown>>;\n\nexport const OverflowDivider: React_2.ForwardRefExoticComponent<OverflowDividerProps & React_2.RefAttributes<unknown>>;\n\nexport const OverflowItem: React_2.ForwardRefExoticComponent<OverflowItemProps & React_2.RefAttributes<unknown>>;\n```\n\n----------------------------------------\n\nTITLE: TagPickerContextValue Interface\nDESCRIPTION: Defines the interface for the TagPicker context value, which provides shared state and methods to the TagPicker's child components. It includes properties related to the combobox, popover, and tag picker specific features.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport interface TagPickerContextValue extends Pick<ComboboxBaseState, 'open' | 'clearSelection' | 'getOptionById' | 'selectedOptions' | 'selectOption' | 'setHasFocus' | 'setOpen' | 'setValue' | 'value' | 'appearance' | 'disabled'> {\n    // (undocumented)\n    noPopover?: boolean;\n    // (undocumented)\n    popoverId: string;\n    // (undocumented)\n    popoverRef: React_2.RefObject<HTMLDivElement>;\n    // (undocumented)\n    secondaryActionRef: React_2.RefObject<HTMLSpanElement>;\n    // (undocumented)\n    size: TagPickerSize;\n    // (undocumented)\n    tagPickerGroupRef: React_2.RefObject<HTMLDivElement>;\n    // (undocumented)\n    targetRef: React_2.RefObject<HTMLDivElement>;\n    // (undocumented)\n    triggerRef: React_2.RefObject<HTMLInputElement | HTMLButtonElement>;\n}\"\n```\n\n----------------------------------------\n\nTITLE: Avoiding State Information in Accessibility Names\nDESCRIPTION: Illustrates how to correctly label a tab without including state information in the accessibility name. This approach relies on proper ARIA state attributes to convey the component's state to screen readers.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Accessibility/ComponentLabelling.stories.mdx#2025-04-20_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nno aria-label attribute is needed for the \"Files\" tab\n```\n\n----------------------------------------\n\nTITLE: Recomposed Link DOM Structure Suggestion\nDESCRIPTION: Recommends a recomposed structure for Links not using 'a' tag, ensuring role compatibility by adding role as needed. Example shows button usage with role 'link.'\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Link.md#2025-04-20_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<button class=\\\"root\\\" href=\\\"{href}\\\" role=\\\"link\\\">{children}</button>\n```\n\n----------------------------------------\n\nTITLE: Exporting Headless Flat Tree Hook in TypeScript\nDESCRIPTION: Exports a hook for creating headless flat tree structures with configurable options and return values.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tree/library/etc/react-tree.api.md#2025-04-20_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function useHeadlessFlatTree_unstable<Props extends HeadlessTreeItemProps>(props: Props[], options?: HeadlessFlatTreeOptions): HeadlessFlatTreeReturn<Props>;\n```\n\n----------------------------------------\n\nTITLE: Using Pre-defined Motion Components\nDESCRIPTION: This snippet illustrates the usage of a pre-defined motion component, `Collapse`, to animate a `div` element.  This simplifies the integration of common animations into components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/motion-definition-n-apis.md#2025-04-20_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Collapse } from '@fluentui/react-motions-preview';\n\nfunction MyComponent() {\n  return (\n    <Collapse>\n      <div>Hello world!</div>\n    </Collapse>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DropdownOption Class with Form Association in TypeScript\nDESCRIPTION: Defines the DropdownOption class which implements the Start interface with form association enabled. This class handles form-related functionality, selection states, and accessibility features for dropdown options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_36\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class DropdownOption extends FASTElement implements Start {\n    constructor();\n    active: boolean;\n    // @internal\n    protected activeChanged(prev: boolean, next: boolean): void;\n    // (undocumented)\n    connectedCallback(): void;\n    // @internal\n    currentSelected?: boolean;\n    // @internal\n    currentSelectedChanged(prev: boolean | undefined, next: boolean | undefined): void;\n    defaultSelected?: boolean;\n    // @internal\n    protected defaultSelectedChanged(prev: boolean | undefined, next: boolean | undefined): void;\n    // @internal\n    descriptionSlot: Node[];\n    // @internal\n    descriptionSlotChanged(prev: Node[] | undefined, next: Node[] | undefined): void;\n    disabled?: boolean;\n    disabledAttribute?: boolean;\n    // @internal\n    protected disabledAttributeChanged(prev: boolean | undefined, next: boolean | undefined): void;\n    // @internal\n    protected disabledChanged(prev: boolean | undefined, next: boolean | undefined): void;\n    // @internal\n    elementInternals: ElementInternals;\n    get form(): HTMLFormElement | null;\n    static formAssociated: boolean;\n    formAttribute?: string;\n    freeform?: boolean;\n    // @internal\n    freeformOutputs?: HTMLOutputElement[];\n    // @override\n    id: string;\n    initialValue: string;\n    // @internal\n    protected initialValueChanged(prev: string, next: string): void;\n    get labels(): ReadonlyArray<HTMLLabelElement>;\n    multiple: boolean;\n    multipleChanged(prev: boolean, next: boolean): void;\n    name: string;\n    get selected(): boolean;\n    set selected(next: boolean);\n    // @internal\n    setFormValue(value: File | string | FormData | null, state?: File | string | FormData | null): void;\n    // @internal\n    start: HTMLSlotElement;\n    get text(): string;\n    textAttribute?: string;\n    toggleSelected(force?: boolean): void;\n    get value(): string;\n    set value(value: string);\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Neutral Foreground Color Tokens in JavaScript\nDESCRIPTION: This snippet defines and exports color tokens for neutral foregrounds in the Fluent UI design system. It includes variables for different levels of foreground and various states like hover, pressed, and selected.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\n// @public\nexport const colorNeutralForeground1 = \"var(--colorNeutralForeground1)\";\n\n// @public\nexport const colorNeutralForeground1Hover = \"var(--colorNeutralForeground1Hover)\";\n\n// @public\nexport const colorNeutralForeground1Pressed = \"var(--colorNeutralForeground1Pressed)\";\n\n// @public\nexport const colorNeutralForeground1Selected = \"var(--colorNeutralForeground1Selected)\";\n\n// @public\nexport const colorNeutralForeground1Static = \"var(--colorNeutralForeground1Static)\";\n\n// @public\nexport const colorNeutralForeground2 = \"var(--colorNeutralForeground2)\";\n\n// @public\nexport const colorNeutralForeground2BrandHover = \"var(--colorNeutralForeground2BrandHover)\";\n\n// @public\nexport const colorNeutralForeground2BrandPressed = \"var(--colorNeutralForeground2BrandPressed)\";\n\n// @public\nexport const colorNeutralForeground2BrandSelected = \"var(--colorNeutralForeground2BrandSelected)\";\n\n// @public\nexport const colorNeutralForeground2Hover = \"var(--colorNeutralForeground2Hover)\";\n\n// @public\nexport const colorNeutralForeground2Link = \"var(--colorNeutralForeground2Link)\";\n\n// @public\nexport const colorNeutralForeground2LinkHover = \"var(--colorNeutralForeground2LinkHover)\";\n\n// @public\nexport const colorNeutralForeground2LinkPressed = \"var(--colorNeutralForeground2LinkPressed)\";\n\n// @public\nexport const colorNeutralForeground2LinkSelected = \"var(--colorNeutralForeground2LinkSelected)\";\n\n// @public\nexport const colorNeutralForeground2Pressed = \"var(--colorNeutralForeground2Pressed)\";\n\n// @public\nexport const colorNeutralForeground2Selected = \"var(--colorNeutralForeground2Selected)\";\n\n// @public\nexport const colorNeutralForeground3 = \"var(--colorNeutralForeground3)\";\n\n// @public\nexport const colorNeutralForeground3BrandHover = \"var(--colorNeutralForeground3BrandHover)\";\n\n// @public\nexport const colorNeutralForeground3BrandPressed = \"var(--colorNeutralForeground3BrandPressed)\";\n\n// @public\nexport const colorNeutralForeground3BrandSelected = \"var(--colorNeutralForeground3BrandSelected)\";\n\n// @public\nexport const colorNeutralForeground3Hover = \"var(--colorNeutralForeground3Hover)\";\n\n// @public\nexport const colorNeutralForeground3Pressed = \"var(--colorNeutralForeground3Pressed)\";\n\n// @public\nexport const colorNeutralForeground3Selected = \"var(--colorNeutralForeground3Selected)\";\n\n// @public\nexport const colorNeutralForeground4 = \"var(--colorNeutralForeground4)\";\n\n// @public\nexport const colorNeutralForegroundDisabled = \"var(--colorNeutralForegroundDisabled)\";\n\n// @public\nexport const colorNeutralForegroundInverted = \"var(--colorNeutralForegroundInverted)\";\n\n// @public\nexport const colorNeutralForegroundInverted2 = \"var(--colorNeutralForegroundInverted2)\";\n\n// @public\nexport const colorNeutralForegroundInvertedDisabled = \"var(--colorNeutralForegroundInvertedDisabled)\";\n\n// @public\nexport const colorNeutralForegroundInvertedHover = \"var(--colorNeutralForegroundInvertedHover)\";\n\n// @public\nexport const colorNeutralForegroundInvertedLink = \"var(--colorNeutralForegroundInvertedLink)\";\n\n// @public\nexport const colorNeutralForegroundInvertedLinkHover = \"var(--colorNeutralForegroundInvertedLinkHover)\";\n\n// @public\nexport const colorNeutralForegroundInvertedLinkPressed = \"var(--colorNeutralForegroundInvertedLinkPressed)\";\n\n// @public\nexport const colorNeutralForegroundInvertedLinkSelected = \"var(--colorNeutralForegroundInvertedLinkSelected)\";\n\n// @public\nexport const colorNeutralForegroundInvertedPressed = \"var(--colorNeutralForegroundInvertedPressed)\";\n\n// @public\nexport const colorNeutralForegroundInvertedSelected = \"var(--colorNeutralForegroundInvertedSelected)\";\n\n// @public\nexport const colorNeutralForegroundOnBrand = \"var(--colorNeutralForegroundOnBrand)\";\n\n// @public\nexport const colorNeutralForegroundStaticInverted = \"var(--colorNeutralForegroundStaticInverted)\";\n```\n\n----------------------------------------\n\nTITLE: Structuring FluentUI Input Component in TSX\nDESCRIPTION: Demonstrates the basic structure of the FluentUI Input component, showing how slots and props are organized.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-input/library/docs/Spec.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// Out of top-level native props, only `className` and `style` go here\n<slots.root {...slotProps.root}>\n  <slots.contentBefore {...slotProps.contentBefore} />\n  {/* Primary slot. Top-level native props except `className` and `style` go here. */}\n  <slots.input {...slotProps.input} />\n  <slots.contentAfter {...slotProps.contentAfter} />\n</slots.root>\n```\n\n----------------------------------------\n\nTITLE: Using useMount Hook in TypeScript React\nDESCRIPTION: Example of how to use the useMount hook in a React component to execute a callback after the component has mounted.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-hooks/README.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMount } from '@fluentui/react-hooks';\n\nconst MyComponent = () => {\n  useMount(() => {\n    console.log('Example');\n   })\n\n  return <div />;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining MotionAnimations Namespace in TypeScript for FluentUI\nDESCRIPTION: Namespace containing predefined CSS animation values for common motion patterns like fade and slide animations. These constants provide consistent animation behaviors across FluentUI components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/theme/etc/theme.api.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport namespace MotionAnimations {\n    const // (undocumented)\n    fadeIn: string;\n    const // (undocumented)\n    fadeOut: string;\n    const // (undocumented)\n    scaleDownIn: string;\n    const // (undocumented)\n    scaleDownOut: string;\n    const // (undocumented)\n    slideLeftOut: string;\n    const // (undocumented)\n    slideRightOut: string;\n    const // (undocumented)\n    slideLeftIn: string;\n    const // (undocumented)\n    slideRightIn: string;\n    const // (undocumented)\n    slideUpOut: string;\n    const // (undocumented)\n    slideDownOut: string;\n    const // (undocumented)\n    slideUpIn: string;\n    const // (undocumented)\n    slideDownIn: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components from Fluent UI React Date-Time in JavaScript\nDESCRIPTION: The code snippet demonstrates how to import the Calendar and DatePicker components from the '@fluentui/react-date-time' package, which is part of the Fluent UI React library for creating date and time-based UI elements. This import is a prerequisite for using these components in a project. No additional dependencies are specified, but it requires the '@fluentui/react-date-time' package to be installed in the project.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-date-time/README.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Calendar, DatePicker } from '@fluentui/react-date-time';\n```\n\n----------------------------------------\n\nTITLE: TagPickerList Component Definition\nDESCRIPTION: Defines the TagPickerList React component as a ForwardRefComponent, indicating that it's a component that accepts a ref and forwards it to a child element.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const TagPickerList: ForwardRefComponent<TagPickerListProps>;\"\n```\n\n----------------------------------------\n\nTITLE: Move a specific package using move-packages\nDESCRIPTION: This command moves a specific package, identified by its full name (`@fluentui/react-menu`), to a specified destination folder (`testFolder/react-menu`). The `--name` and `--destination` flags are used to provide the package name and destination path, respectively.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/move-packages/README.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:move-packages --name='@fluentui/react-menu' --destination=\"testFolder/react-menu\"\n```\n\n----------------------------------------\n\nTITLE: Hybrid Approach with makeStyles and makeResetStyles\nDESCRIPTION: Illustrates a hybrid approach using makeResetStyles for base styles and makeStyles for overrides. It showcases how to define base styles with makeResetStyles and conditionally apply additional styles using makeStyles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/styles-handbook.md#2025-04-20_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { makeStyles, makeResetStyles, mergeClasses, shorthands } from '@griffel/react';\n\nconst useBaseClassname = makeResetStyles({\n  ':hover': {\n    padding: '4px',\n    /* other styles */\n  },\n  '::before': {\n    display: 'block',\n    content: \"' '\",\n  },\n  '@media (forced-colors: active)': {\n    padding: '4px',\n    /* other styles */\n  },\n});\n// ⬇️⬇️⬇️\n// produces 1 class\n\nconst useClasses = makeStyles({\n  circular: {\n    ...shorthands.borderRadius('10px'),\n  },\n  primary: {\n    color: 'pink',\n  },\n});\n// ⬇️⬇️⬇️\n// produces 4/1 classes to be conditionally applied\n\nfunction Component(props) {\n  const baseClassName = useBaseClassname();\n  const classes = useClasses();\n\n  const className = mergeClasses(baseClassName, props.circular && classes.circular, props.primary && classes.primary);\n\n  return <div className={className} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Text Input and Textarea Labeling in Fluent Web Components\nDESCRIPTION: The code snippet shows how to correctly use labels in 'fluent-text-input' and 'fluent-textarea' components. It highlights differences in slot usage due to ShadowDOM constraints.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/_docs/developer/migration.stories.mdx#2025-04-20_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<fluent-text-input>\n  <fluent-label>Label goes here</fluent-label>\n</fluent-text-input>\n\n<fluent-textarea>\n  <fluent-label slot=\"label\">Label goes here</fluent-label>\n</fluent-textarea>\n```\n\n----------------------------------------\n\nTITLE: Using useSetInterval Hook in a React Component\nDESCRIPTION: Demonstrates how to use the `useSetInterval` hook to set up an interval in a React component. It uses the `setInterval` method provided by the hook to execute a callback every 500 milliseconds and shows how to clear the interval manually using `clearInterval`.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-hooks/README.md#2025-04-20_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSetInterval } from '@fluentui/react-hooks';\n\nconst MyComponent = () => {\n  const { setInterval, clearInterval } = useSetInterval();\n\n  // Set an interval\n  const id = setInterval(() => console.log('test'), 500);\n\n  // If needed, clear an interval manually.\n  clearInterval(id);\n};\n```\n\n----------------------------------------\n\nTITLE: Internal React Implementation of Breadcrumb Component\nDESCRIPTION: Internal representation of Breadcrumb component with roles and structural components for accessibility\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Breadcrumb.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst Breadcrumb = () => (\n  <nav role=\"navigation\" class=\"breadcrumb-ui\" aria-label=\"...\">\n    <div role=\"list\">{children}</div>\n  </nav>\n);\n\nconst BreadcrumbItem = () => <div role=\"listitem\">{children}</div>;\n\nconst BreadcrumbDivider = () => <span aria-hidden=\"true\">{children}</span>;\n```\n\n----------------------------------------\n\nTITLE: Defining Interfaces for Column Operations in TypeScript\nDESCRIPTION: This snippet focuses on interfaces designed for column operations within data tables using Fluent UI. Components like IColumn, IColumnResizeDetails, and IColumnReorderOptions offer a detailed look at how developers can customize behavior for column resizing, reordering, and defining metadata.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_63\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IColumn {\n    ariaLabel?: string;\n    calculatedWidth?: number;\n    className?: string;\n    columnActionsMode?: ColumnActionsMode;\n    currentWidth?: number;\n    data?: any;\n    fieldName?: string;\n    filterAriaLabel?: string;\n    flexGrow?: number;\n    getValueKey?: (item?: any, index?: number, column?: IColumn) => string;\n    groupAriaLabel?: string;\n    headerClassName?: string;\n    iconClassName?: string;\n    iconName?: string;\n    // @deprecated\n    isCollapsable?: boolean;\n    isCollapsible?: boolean;\n    isFiltered?: boolean;\n    isGrouped?: boolean;\n    isIconOnly?: boolean;\n    isMenuOpen?: boolean;\n    isMultiline?: boolean;\n    isPadded?: boolean;\n    isResizable?: boolean;\n    isRowHeader?: boolean;\n    isSorted?: boolean;\n    isSortedDescending?: boolean;\n    key: string;\n    maxWidth?: number;\n    minWidth: number;\n    name: string;\n    onColumnClick?: (ev: React_2.MouseEvent<HTMLElement>, column: IColumn) => void;\n    onColumnContextMenu?: (column?: IColumn, ev?: React_2.MouseEvent<HTMLElement>) => void;\n    onColumnKeyDown?: (ev: React_2.KeyboardEvent, column: IColumn) => void;\n    onColumnResize?: (width?: number) => void;\n    onRender?: (item?: any, index?: number, column?: IColumn) => any;\n    onRenderDivider?: IRenderFunction<IDetailsColumnProps>;\n    // (undocumented)\n    onRenderField?: IRenderFunction<IDetailsColumnFieldProps>;\n    onRenderFilterIcon?: IRenderFunction<IDetailsColumnFilterIconProps>;\n    onRenderHeader?: IRenderFunction<IDetailsColumnProps>;\n    showSortIconWhenUnsorted?: boolean;\n    sortableAriaLabel?: string;\n    sortAscendingAriaLabel?: string;\n    sortDescendingAriaLabel?: string;\n    styles?: IStyleFunctionOrObject<IDetailsColumnStyleProps, IDetailsColumnStyles>;\n    targetWidthProportion?: number;\n}\n\nexport interface IColumnResizeDetails {\n    // (undocumented)\n    columnIndex: number;\n    // (undocumented)\n    columnMinWidth: number;\n    // (undocumented)\n    originX?: number;\n}\n\nexport interface IColumnReorderOptions {\n    frozenColumnCountFromEnd?: number;\n    frozenColumnCountFromStart?: number;\n    // @deprecated\n    handleColumnReorder?: (draggedIndex: number, targetIndex: number) => void;\n    onColumnDragStart?: (dragStarted: boolean) => void;\n    onColumnDrop?: (dragDropDetails: IColumnDragDropDetails) => void;\n    onDragEnd?: (columnDropLocationDetails: ColumnDragEndLocation) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: ImageSlots Type Definition\nDESCRIPTION: Defines the ImageSlots type, which specifies the slots available for customizing the Image component. In this case, it only includes the 'root' slot, which is an 'img' element. Slots provide a way to override or extend the rendering of specific parts of the component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-image/library/etc/react-image.api.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type ImageSlots = {\n    root: Slot<'img'>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Keytip Interfaces in TypeScript for FluentUI\nDESCRIPTION: Defines interfaces and components for Keytip functionality, including the Keytip component, KeytipData, and related event constants. Keytips provide keyboard shortcut indicators in the UI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_226\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IUniqueKeytip {\n    // (undocumented)\n    keytip: IKeytipProps;\n    // (undocumented)\n    uniqueID: string;\n}\n\n// @public (undocumented)\nexport enum KeyboardSpinDirection {\n    // (undocumented)\n    down = -1,\n    // (undocumented)\n    notSpinning = 0,\n    // (undocumented)\n    up = 1\n}\n\nexport { KeyCodes }\n\nexport { keyframes }\n\n// @public\nexport class Keytip extends React_2.Component<IKeytipProps, {}> {\n    // (undocumented)\n    render(): JSX.Element;\n}\n\n// @public\nexport const KeytipData: React_2.FunctionComponent<IKeytipDataProps & IRenderComponent<{}>>;\n\n// @public (undocumented)\nexport type KeytipDataOptions = IKeytipDataProps;\n\n// @public (undocumented)\nexport namespace KeytipEvents {\n    const // (undocumented)\n    KEYTIP_ADDED = \"keytipAdded\";\n    const // (undocumented)\n    KEYTIP_REMOVED = \"keytipRemoved\";\n    const // (undocumented)\n    KEYTIP_UPDATED = \"keytipUpdated\";\n    const // (undocumented)\n    PERSISTED_KEYTIP_ADDED = \"persistedKeytipAdded\";\n    const // (undocumented)\n    PERSISTED_KEYTIP_REMOVED = \"persistedKeytipRemoved\";\n    const // (undocumented)\n```\n\n----------------------------------------\n\nTITLE: Submenus Expected DOM Output - HTML\nDESCRIPTION: This snippet shows the expected HTML output for the menu structure that includes a submenu, ensuring attributes and roles are managed correctly.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/library/docs/Spec.md#2025-04-20_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<button aria-haspopup=\"menu\" aria-expanded=\"true\" id=\"trigger\">Open menu</button>\n<div role=\"menu\" aria-labelledby=\"trigger\">\n  <div role=\"menuitem\" tabindex=\"0\">Option 1</div>\n  <div role=\"menuitem\" tabindex=\"-1\" aria-haspopup=\"menu\" aria-expanded=\"false\" id=\"submenu-trigger\">Open submenu</div>\n</div>\n\n<!-- expected DOM output for submenu  -->\n<div role=\"menu\" aria-labelledby=\"submenu-trigger\">\n  <div role=\"menuitem\" tabindex=\"-1\">Option 1</div>\n  <div role=\"menuitem\" tabindex=\"-1\">Option 2</div>\n  <div role=\"menuitem\" tabindex=\"-1\">Option 3</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing Avatar Component in Fluent UI\nDESCRIPTION: Demonstrates the change in import statement for the Avatar component between old and new versions of Fluent UI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Avatar.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Avatar } from '@fluentui/react-northstar';\nconst Component = () => <Avatar />;\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Avatar } from '@fluentui/react-components';\nconst Component = () => <Avatar />;\n```\n\n----------------------------------------\n\nTITLE: FieldProps Definition\nDESCRIPTION: This snippet defines the FieldProps type for the Field component. It includes properties for orientation, validationState, required, and size, and overrides the 'children' property to allow either a ReactNode or a function that receives FieldControlProps.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-field/library/etc/react-field.api.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport type FieldProps = Omit<ComponentProps<FieldSlots>, 'children'> & {\\n    children?: React_2.ReactNode | ((props: FieldControlProps) => React_2.ReactNode);\\n    orientation?: 'vertical' | 'horizontal';\\n    validationState?: 'error' | 'warning' | 'success' | 'none';\\n    required?: boolean;\\n    size?: 'small' | 'medium' | 'large';\\n};\"\n```\n\n----------------------------------------\n\nTITLE: Defining mergeThemes Function in TypeScript for FluentUI\nDESCRIPTION: Function that merges a base theme with a partial theme to create a new theme object. This allows for theme customization without having to specify all theme properties.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/theme/etc/theme.api.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport function mergeThemes(theme: Theme, partialTheme?: PartialTheme): Theme;\n```\n\n----------------------------------------\n\nTITLE: DialogSurface State Definition\nDESCRIPTION: Defines the state for the DialogSurface component, combining ComponentState with context values and props related to the dialog's open state and transition status.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/etc/react-dialog.api.md#2025-04-20_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport type DialogSurfaceState = ComponentState<DialogSurfaceSlots> & Pick<DialogContextValue, 'isNestedDialog'> & Pick<PortalProps, 'mountNode'> & {\n    open?: boolean;\n    transitionStatus?: 'entering' | 'entered' | 'idle' | 'exiting' | 'exited' | 'unmounted';\n};\"\n```\n\n----------------------------------------\n\nTITLE: Defining IExpandingCardProps Interface in TypeScript\nDESCRIPTION: Defines the IExpandingCardProps interface extending IBaseCardProps with properties specific to an expanding card component, including heights and rendering functions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_128\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface IExpandingCardProps extends IBaseCardProps<IExpandingCard, IExpandingCardStyles, IExpandingCardStyleProps> {\n    compactCardHeight?: number;\n    expandedCardHeight?: number;\n    mode?: ExpandingCardMode;\n    onRenderCompactCard?: IRenderFunction<any>;\n    onRenderExpandedCard?: IRenderFunction<any>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Label with Slot\nDESCRIPTION: This HTML snippet demonstrates how to use a default slot to insert content into the label component. The component also includes a span element that conditionally displays an asterisk based on the 'required' attribute. No additional dependencies are required beyond standard HTML5. The slot allows for dynamic content insertion, while the span element reacts to changes in the label's state.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/label/README.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<slot></slot> <span part=\"asterisk\" class=\"asterisk\" ?hidden=\"${x => !x.required}\">*</span>\n```\n\n----------------------------------------\n\nTITLE: Ban Instanceof HTMLElement (Correct)\nDESCRIPTION: This code snippet shows the correct usage of `isHTMLElement` helper to check the instance of an element. It imports `isHTMLElement` from `@fluentui/react-components` and uses it with optional constructor name.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/eslint-plugin/README.md#2025-04-20_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { isHTMLElement } from '@fluentui/react-components';\n\nisHTMLElement(event.target);\n\nisHTMLElement(event.target, { constructorName: 'HTMLInputElement' });\n```\n\n----------------------------------------\n\nTITLE: Defining InfoLabel TypeScript Types and Interfaces\nDESCRIPTION: Defines component types, props, slots, and state for the InfoLabel component in Fluent UI, including references to other UI components like Label and InfoButton\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-infolabel/library/etc/react-infolabel.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type InfoLabelProps = ComponentProps<Partial<InfoLabelSlots>, 'label'> & {\n  info?: InfoButtonProps['info'];\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport type InfoLabelSlots = {\n  root: NonNullable<Slot<'span'>>;\n  label: NonNullable<Slot<typeof Label>>;\n  infoButton: Slot<typeof InfoButton>;\n};\n```\n\n----------------------------------------\n\nTITLE: Define Minimum Domain Margin\nDESCRIPTION: Defines a constant representing the minimum margin (8px) to be applied before the first and after the last bar in the chart. This ensures visual separation from the edges of the chart area.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/docs/implementing-2-to-1-spacing.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst MIN_DOMAIN_MARGIN = 8;\n```\n\n----------------------------------------\n\nTITLE: Advanced InfoButton Example with Embedded Link\nDESCRIPTION: This example extends the basic InfoButton by embedding a hyperlink within the Popover content. It demonstrates the use of JSX fragments to include complex content structures, including links within the Popover. The example presupposes the presence of Fluent UI components and styles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-infolabel/library/docs/Spec.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<InfoButton\n  info={\n    <>\n      Popover above-start lorem ipsum dolor sit amet consectetur.\n      <Link href=\"https://react.fluentui.dev\">Learn more</Link>\n    </>\n  }\n/>\n```\n\n----------------------------------------\n\nTITLE: Shard React Button DOM Structure in HTML\nDESCRIPTION: Example DOM structure for a Shard React button component showing a simple implementation similar to React Bootstrap with no built-in icon support.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Button.md#2025-04-20_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<button class=\"btn btn-secondary\">Secondary</button>\n```\n\n----------------------------------------\n\nTITLE: BaseFloatingPeoplePicker Component Definition in TypeScript\nDESCRIPTION: Defines the BaseFloatingPeoplePicker component that extends BaseFloatingPicker with IPersonaProps and IPeopleFloatingPickerProps. Provides a floating picker specifically for person selection.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport class BaseFloatingPeoplePicker extends BaseFloatingPicker<IPersonaProps, IPeopleFloatingPickerProps> {\n}\n```\n\n----------------------------------------\n\nTITLE: SpinButton Basic Usage v8\nDESCRIPTION: Demonstrates basic usage of the SpinButton component in Fluent UI v8.  It initializes a SpinButton with a default value, an onChange handler, and styles. It uses ISpinButtonStyles interface and styles are applied using the styles prop.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/SpinButton.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\nimport { SpinButton, ISpinButtonStyles } from '@fluentui/react/lib/SpinButton';\n\nconst styles: Partial<ISpinButtonStyles> = {\n  spinButtonWrapper: { width: 300 },\n};\n\nconst SpinButtonV8BasicExample: React.FunctionComponent = () => {\n  const [value, setValue] = React.useState('5');\n\n  const onChange = React.useCallback((event: React.SyntheticEvent<HTMLElement>, newValue?: string) => {\n    console.log('onChange');\n    if (newValue !== undefined) {\n      setValue(newValue);\n    }\n  }, []);\n\n  return (\n    <SpinButton\n      label=\"Basic SpinButton Usage\"\n      value={value}\n      onChange={onChange}\n      incrementButtonAriaLabel=\"Increment\"\n      decrementButtonAriaLabel=\"Decrement\"\n      styles={styles}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Base Component Class Definitions in TypeScript\nDESCRIPTION: Base class definitions for FluentUI components including BaseButton, BaseCheckbox, and BaseAccordionItem with their properties and methods.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport class BaseButton extends FASTElement {\n    constructor();\n    autofocus: boolean;\n    clickHandler(e: Event): boolean | void;\n    connectedCallback(): void;\n    defaultSlottedContent: HTMLElement[];\n    disabled?: boolean;\n    disabledFocusable: boolean;\n    elementInternals: ElementInternals;\n    get form(): HTMLFormElement | null;\n    formAction?: string;\n    static readonly formAssociated = true;\n    formAttribute?: string;\n    formDisabledCallback(disabled: boolean): void;\n    formEnctype?: string;\n    formMethod?: string;\n    formNoValidate?: boolean;\n    formTarget?: ButtonFormTarget;\n    keypressHandler(e: KeyboardEvent): boolean | void;\n    get labels(): ReadonlyArray<Node>;\n    name?: string;\n    protected press(): void;\n    resetForm(): void;\n    tabIndex: number;\n    type: ButtonType;\n    typeChanged(previous: ButtonType, next: ButtonType): void;\n    value?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Button with Slots Components - React JSX\nDESCRIPTION: This example illustrates how slots can be implemented to render various components, showing how each slot outputs a specific element while maintaining the necessary structure for the Button component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Slots.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// ⚠️ not a real JSX/DOM markup\n<>\n  {/* renders a <button /> element */}\n  <slots.root>\n    {/* renders a <Loader /> element */}\n    <slots.loader />\n    {/* renders a <span /> element */}\n    <slots.icon />\n  </slots.root>\n</>\n```\n\n----------------------------------------\n\nTITLE: Defining IDragDropOptions Interface in TypeScript\nDESCRIPTION: Defines the IDragDropOptions interface with various properties and methods for configuring drag and drop behavior, including event handlers and context.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_111\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface IDragDropOptions {\n    canDrag?: (item?: any) => boolean;\n    canDrop?: (dropContext?: IDragDropContext, dragContext?: IDragDropContext) => boolean;\n    context: IDragDropContext;\n    eventMap?: {\n        eventName: string;\n        callback: (context: IDragDropContext, event?: any) => void;\n    }[];\n    key?: string;\n    onDragEnd?: (item?: any, event?: DragEvent) => void;\n    onDragOver?: (item?: any, event?: DragEvent) => void;\n    onDragStart?: (item?: any, itemIndex?: number, selectedItems?: any[], event?: MouseEvent) => void;\n    onDrop?: (item?: any, event?: DragEvent) => void;\n    selectionIndex: number;\n    updateDropState: (isDropping: boolean, event: DragEvent) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Public and DOM Structure for Tabs in Fluent UI\nDESCRIPTION: This snippet shows the public React component structure for a TabList and its corresponding DOM output. It is essential for understanding how the component renders in the browser.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tabs/library/docs/Spec.md#2025-04-20_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<TabList>\n  <Tab>One</Tab>\n  <Tab>Two</Tab>\n  <Tab>Three</Tab>\n</TabList>\n```\n\n----------------------------------------\n\nTITLE: Recommended Link Button DOM Structure in HTML\nDESCRIPTION: Recommended DOM structure for buttons rendered as links based on analysis of common patterns across UI libraries, maintaining consistent structure with regular buttons.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Button.md#2025-04-20_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<a class=\"root\" role=\"button\" type=\"link\">\n  <i class=\"startIcon\"></i>\n  {children}\n  <i class=\"endIcon\"></i>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Defining Skeleton Component API in TypeScript\nDESCRIPTION: This code snippet defines the API for the Skeleton component, including props, state, rendering functions, and styling hooks. It also includes context-related types and utilities.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-skeleton/library/etc/react-skeleton.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ComponentProps } from '@fluentui/react-utilities';\nimport type { ComponentState } from '@fluentui/react-utilities';\nimport type { ForwardRefComponent } from '@fluentui/react-utilities';\nimport * as React_2 from 'react';\nimport type { Slot } from '@fluentui/react-utilities';\nimport type { SlotClassNames } from '@fluentui/react-utilities';\n\n// @public\nexport const renderSkeleton_unstable: (state: SkeletonState, contextValues: SkeletonContextValues) => JSX.Element;\n\n// @public\nexport const Skeleton: ForwardRefComponent<SkeletonProps>;\n\n// @public (undocumented)\nexport const skeletonClassNames: SlotClassNames<SkeletonSlots>;\n\n// @public (undocumented)\nexport const SkeletonContextProvider: React_2.Provider<SkeletonContextValue | undefined>;\n\n// @public (undocumented)\nexport interface SkeletonContextValue {\n  // (undocumented)\n  animation?: 'wave' | 'pulse';\n  // (undocumented)\n  appearance?: 'opaque' | 'translucent';\n}\n\n// @public\nexport type SkeletonProps = Omit<ComponentProps<Partial<SkeletonSlots>>, 'width'> & {\n  animation?: 'wave' | 'pulse';\n  appearance?: 'opaque' | 'translucent';\n  width?: number | string;\n};\n\n// @public (undocumented)\nexport type SkeletonSlots = {\n  root: NonNullable<Slot<'div'>>;\n};\n\n// @public\nexport type SkeletonState = ComponentState<SkeletonSlots> & Required<Pick<SkeletonProps, 'animation' | 'appearance'>>;\n\n// @public\nexport const useSkeleton_unstable: (props: SkeletonProps, ref: React_2.Ref<HTMLElement>) => SkeletonState;\n\n// @public (undocumented)\nexport const useSkeletonContext: () => SkeletonContextValue;\n\n// @public\nexport const useSkeletonStyles_unstable: (state: SkeletonState) => SkeletonState;\n```\n\n----------------------------------------\n\nTITLE: Recommended Slider DOM Structure\nDESCRIPTION: Basic DOM structure for implementing a slider component with rail, mark, track, thumb and hidden input elements. Includes proper ARIA attributes for accessibility.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Slider.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"root\">\n  <div class=\"rail\"></div>\n\n  <div class=\"mark\">\n    <label class=\"markLabel\"></label>\n  </div>\n\n  <div class=\"track\"></div>\n\n  <div class=\"thumb\" tabindex=\"0\" role=\"slider\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"10\"></div>\n  <input name=\"{name}\" type=\"hidden\" value=\"0\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Nested Stack Components\nDESCRIPTION: Illustrates how Stack components can be nested to create complex layouts with multiple levels of alignment and spacing.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-examples/src/react/Stack/docs/StackOverview.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack>\n  <Stack horizontal>\n    <Stack.Item>Nested Horizontal Item</Stack.Item>\n  </Stack>\n  <Stack.Item>Main Stack Item</Stack.Item>\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Rendering Tooltip with Custom JSX Content\nDESCRIPTION: Example of using Tooltip with custom JSX content instead of plain text. This demonstrates the flexibility of the content prop.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tooltip/library/docs/Spec.md#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Tooltip content={<b>The content can be JSX</b>} relationship=\"label\">\n  <Button />\n</Tooltip>\n```\n\n----------------------------------------\n\nTITLE: Implementing BaseField Class in TypeScript\nDESCRIPTION: Defines the BaseField class which extends FASTElement. It provides core functionality for form field components, including input handling and validation state management.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class BaseField extends FASTElement {\n    constructor();\n    // @internal\n    changeHandler(e: Event): boolean | void;\n    // @internal\n    clickHandler(e: MouseEvent): boolean | void;\n    // @internal\n    elementInternals: ElementInternals;\n    // @internal\n    focusinHandler(e: FocusEvent): boolean | void;\n    // @internal\n    focusoutHandler(e: FocusEvent): boolean | void;\n    input: SlottableInput;\n    inputChanged(prev: SlottableInput | undefined, next: SlottableInput | undefined): void;\n    // @internal\n    invalidHandler(e: Event): boolean | void;\n    // @internal\n    labelSlot: Node[];\n    protected labelSlotChanged(prev: Node[], next: Node[]): void;\n    // @internal\n    messageSlot: Element[];\n    // @internal\n    messageSlotChanged(prev: Element[], next: Element[]): void;\n    // @internal\n    setStates(): void;\n    // (undocumented)\n    setValidationStates(): void;\n    // @internal\n    slottedInputs: SlottableInput[];\n    // @internal\n    slottedInputsChanged(prev: SlottableInput[] | undefined, next: SlottableInput[] | undefined): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Label Component Interfaces in TypeScript\nDESCRIPTION: Interface definitions for the Label component in FluentUI, including props, styles, and component contract. These interfaces allow for customization of label appearance and behavior.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_143\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface ILabel {\n}\n\n// @public (undocumented)\nexport interface ILabelProps extends React_2.LabelHTMLAttributes<HTMLLabelElement> {\n    as?: IComponentAs<React_2.AllHTMLAttributes<HTMLElement>>;\n    componentRef?: IRefObject<ILabel>;\n    disabled?: boolean;\n    required?: boolean;\n    styles?: IStyleFunctionOrObject<ILabelStyleProps, ILabelStyles>;\n    theme?: ITheme;\n}\n\n// @public (undocumented)\nexport interface ILabelStyleProps {\n    // (undocumented)\n    className?: string;\n    // (undocumented)\n    disabled?: boolean;\n    // (undocumented)\n    required?: boolean;\n    // (undocumented)\n    theme: ITheme;\n}\n\n// @public (undocumented)\nexport interface ILabelStyles {\n    root: IStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: Property Mapping Table for Button Components Across Fluent UI Versions\nDESCRIPTION: This table provides a comprehensive mapping of Button component properties across Fluent UI versions 8, 0, and 9, showing renamed, removed, and new properties.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-button/library/docs/MIGRATION.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| v8 `Button`                        | v0 `Button`         | v9 `Button`            |\n| ---------------------------------- | ------------------- | ---------------------- |\n|                                    | `accessibility`     |                        |\n| `allowDisabledFocus`               | `disabledFocusable` | `disabledFocusable`    |\n| `ariaDescription`                  | `aria-description`  | `aria-description`     |\n| `ariaHidden`                       | `aria-hidden`       | `aria-hidden`          |\n| `ariaLabel`                        | `aria-label`        | `aria-label`           |\n| `buttonType`                       |                     |                        |\n| `checked`                          |                     |                        |\n| `children`                         | `children`          | `children`             |\n|                                    | `circular`          | `shape=circular`       |\n| `className`                        | `className`         | `className`            |\n| `componentRef`                     |                     |                        |\n| `data`                             |                     |                        |\n| `defaultRender`                    |                     |                        |\n| `description`                      |                     |                        |\n| `disabled`                         | `disabled`          | `disabled`             |\n| `elementRef`                       |                     | `ref`                  |\n|                                    | `fluid`             |                        |\n| `getClassNames`                    |                     |                        |\n| `getSplitButtonClassNames`         |                     |                        |\n| `href`                             |                     | `href`                 |\n|                                    | `icon`              | `icon`                 |\n|                                    | `iconOnly`          |                        |\n|                                    | `iconPosition`      | `iconPosition`         |\n| `iconProps`                        |                     |                        |\n|                                    | `inverted`          |                        |\n| `keytipProps`                      |                     |                        |\n|                                    | `loader`            |                        |\n|                                    | `loading`           |                        |\n| `menuAs`                           |                     |                        |\n| `menuIconProps`                    |                     |                        |\n| `menuProps`                        |                     |                        |\n| `menuTriggerKeyCode`               |                     |                        |\n| `onAfterMenuDismiss`               |                     |                        |\n| `onClick`                          | `onClick`           | `onClick`              |\n| `onFocus`                          | `onFocus`           | `onFocus`              |\n| `onMenuClick`                      |                     |                        |\n| `onRenderAriaDescription`          |                     |                        |\n| `onRenderChildren`                 |                     |                        |\n| `onRenderDescription`              |                     |                        |\n| `onRenderIcon`                     |                     |                        |\n| `onRenderMenu`                     |                     |                        |\n| `onRenderMenuIcon`                 |                     |                        |\n| `onRenderText`                     |                     |                        |\n| `persistMenu`                      |                     |                        |\n| `primary`                          | `primary`           | `appearance='primary'` |\n| `primaryActionButtonProps`         |                     |                        |\n| `primaryDisabled`                  |                     |                        |\n| `renderPersistedMenuHiddenOnMount` |                     |                        |\n| `rootProps`                        |                     |                        |\n|                                    | `secondary`         |                        |\n| `secondaryText`                    |                     |                        |\n|                                    | `size`              | `size`                 |\n| `split`                            |                     |                        |\n| `splitButtonAriaLabel`             |                     |                        |\n| `splitButtonMenuProps`             |                     |                        |\n| `styles`                           |                     |                        |\n| `text`                             | `content`           |                        |\n|                                    | `text`              | `transparent`          |\n| `theme`                            |                     |                        |\n| `toggle`                           |                     |                        |\n| `toggled`                          |                     |                        |\n| `uniqueId`                         |                     |                        |\n```\n\n----------------------------------------\n\nTITLE: renderField_unstable Definition\nDESCRIPTION: This snippet defines the renderField_unstable function.  It renders the Field component based on the provided FieldState and FieldContextValues.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-field/library/etc/react-field.api.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const renderField_unstable: (state: FieldState, contextValues: FieldContextValues) => JSX.Element;\"\n```\n\n----------------------------------------\n\nTITLE: Adding Positioning Option shiftToCoverTarget\nDESCRIPTION: Introduces a new positioning option that allows a positioned element to shift and cover the target when insufficient space is available\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-positioning/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nshiftToCoverTarget: boolean\n```\n\n----------------------------------------\n\nTITLE: Implementing Badge Class in TypeScript\nDESCRIPTION: Defines the Badge component class extending FASTElement with appearance, color, shape and size properties.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Badge extends FASTElement {\n    appearance: BadgeAppearance;\n    color: BadgeColor;\n    shape?: BadgeShape;\n    size?: BadgeSize;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Spinner Slots in TypeScript\nDESCRIPTION: Defines the slots for the Spinner component, including root, spinner, and label slots. Uses TypeScript's NonNullable utility to ensure the root slot is always rendered.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Slots/Slots.stories.mdx#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ntype SpinnerSlots = {\n  root: NonNullable<Slot<'div'>>;\n  spinner?: Slot<'span'>;\n  label?: Slot<typeof Label>;\n};\n```\n\n----------------------------------------\n\nTITLE: Interfaces for Card and Item Properties in TypeScript\nDESCRIPTION: This snippet contains the definitions for interfaces related to the Card, CardItem, and CardSection components. These interfaces define props, tokens, and styles, providing a structured way to type-check the component's properties in TypeScript. The interfaces also include some deprecated properties intended for future removal.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-cards/etc/react-cards.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @public @deprecated (undocumented)\nexport interface ICard {\n}\n\n// @public @deprecated (undocumented)\nexport type ICardComponent = IComponent<ICardProps, ICardTokens, ICardStyles>;\n\n// @public @deprecated (undocumented)\nexport interface ICardItem {\n}\n\n// @public @deprecated (undocumented)\nexport type ICardItemComponent = IComponent<ICardItemProps, ICardItemTokens, ICardItemStyles, ICardItemViewProps>;\n\n// @public @deprecated (undocumented)\nexport interface ICardProps extends ICardSlots, IStyleableComponentProps<ICardProps, ICardTokens, ICardStyles>, IBaseProps<ICard>, React_2.AllHTMLAttributes<HTMLElement> {\n    // @deprecated\n    horizontal?: boolean;\n    // @deprecated\n    onClick?: (ev?: React_2.MouseEvent<HTMLElement>) => void;\n    // @deprecated\n    onKeyDown?: (ev?: React_2.KeyboardEvent<HTMLElement>) => void;\n}\n\n// @public @deprecated (undocumented)\nexport interface ICardItemProps extends ICardItemSlots, Pick<IStackItemProps, 'grow' | 'shrink' | 'disableShrink' | 'align' | 'verticalFill' | 'order'>, IStyleableComponentProps<ICardItemProps, ICardItemTokens, ICardItemStyles>, IBaseProps<ICardItem> {\n    // @deprecated\n    fill?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Link Components in JSX\nDESCRIPTION: Examples of rendering Link components with various props such as href, disabled, and target.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-link/library/docs/SPEC.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Link>This is a link</Link>\n<Link href=\"https://www.bing.com\">This is a link</Link>\n<Link href=\"https://www.bing.com\" disabled>This is a link</Link>\n<Link href=\"https://www.bing.com\" target=\"_blank\">This is a link</Link>\n```\n\n----------------------------------------\n\nTITLE: DialogContent State Definition\nDESCRIPTION: Defines the state for the DialogContent component, using ComponentState from '@fluentui/react-utilities'.  It incorporates the slots available in DialogContentSlots.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/etc/react-dialog.api.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport type DialogContentState = ComponentState<DialogContentSlots>;\"\n```\n\n----------------------------------------\n\nTITLE: Implementing MessageBar in Fabric (v8)\nDESCRIPTION: Example of how to use the MessageBar component in Fabric (v8) to create a warning message bar with content, a link, dismissal button, and an action button.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-message-bar/library/docs/Spec.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<MessageBar\n  messageBarType={MessageBarType.warning}\n  isMultiline={false}\n  dismissButtonAriaLabel=\"Close\"\n  actions={\n    <div>\n      <MessageBarButton>Action</MessageBarButton>\n    </div>\n  }\n>\n  Warning MessageBar content.\n  <Link href=\"www.bing.com\" target=\"_blank\" underline>\n    Visit our website.\n  </Link>\n</MessageBar>\n```\n\n----------------------------------------\n\nTITLE: Defining createElement and Exporting Fragment in @fluentui/react-jsx-runtime TypeScript Module\nDESCRIPTION: This code snippet defines a custom createElement function that mimics React's createElement and re-exports Fragment from the React library. The createElement function accepts an element type, props, and children to create a React element.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-jsx-runtime/etc/react-jsx-runtime.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Fragment } from 'react';\nimport * as React_2 from 'react';\n\n// @public (undocumented)\nexport function createElement<P extends {}>(type: React_2.ElementType<P>, props?: P | null, ...children: React_2.ReactNode[]): React_2.ReactElement<P>;\n\nexport { Fragment }\n\n// (No @packageDocumentation comment for this package)\n```\n\n----------------------------------------\n\nTITLE: Version Tracking in Markdown\nDESCRIPTION: A markdown document tracking version releases and changes for the FluentUI API documentation package. The document details version numbers, release dates, dependency updates and associated pull requests.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/api-docs/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [8.0.19](https://github.com/microsoft/fluentui/tree/@fluentui/api-docs_v8.0.19)\n\nWed, 31 Mar 2021 00:53:43 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/api-docs_v8.0.18..@fluentui/api-docs_v8.0.19)\n\n### Patches\n\n- Bump @fluentui/eslint-plugin to v1.1.0 ([PR #17568](https://github.com/microsoft/fluentui/pull/17568) by elcraig@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Defining Menu Split Group Properties in TypeScript\nDESCRIPTION: Defines prop types for MenuSplitGroup components using ComponentProps, providing a standard interface for slot management.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/library/etc/react-menu.api.md#2025-04-20_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type MenuSplitGroupProps = ComponentProps<MenuSplitGroupSlots>;\n```\n\n----------------------------------------\n\nTITLE: useImageStyles_unstable Hook Definition\nDESCRIPTION: Defines the useImageStyles_unstable hook, responsible for applying styles to the Image component based on the provided ImageState. It takes the ImageState as input and returns the same ImageState, presumably after modifying it with styling information.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-image/library/etc/react-image.api.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport const useImageStyles_unstable: (state: ImageState) => ImageState;\n```\n\n----------------------------------------\n\nTITLE: Defining Component Configuration Interfaces for Fluent UI\nDESCRIPTION: Provides configuration interfaces for Slider and Radio components in Fluent UI. These interfaces define the configurable properties and options for customizing these components, including disabled state, orientation, and styling options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_48\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface SliderConfiguration {\n    // (undocumented)\n    direction?: Direction;\n    // (undocumented)\n    disabled?: boolean;\n    // (undocumented)\n    max?: string;\n    // (undocumented)\n    min?: string;\n    // (undocumented)\n    orientation?: SliderOrientation;\n}\n\nexport type RadioOptions = {\n    checkedIndicator?: StaticallyComposableHTML<Radio>;\n};\n\nexport type SliderOptions = {\n    thumb?: StaticallyComposableHTML<Slider>;\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering the Internal Structure of a Persona Component - React\nDESCRIPTION: This snippet illustrates the internal component structure for rendering a Persona, highlighting how different slots are utilized for layout.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-persona/library/docs/Spec.md#2025-04-20_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst coin = presenceOnly\n  ? slots.presence && <slots.presence {...slotProps.presence} />\n  : slots.avatar && <slots.avatar {...slotProps.avatar} />;\n\nreturn (\n  <slots.root {...slotProps.root}>\n    {(textPosition === 'after' || textPosition === 'below') && coin}\n    {slots.primaryText && <slots.primaryText {...slotProps.primaryText} />}\n    {slots.secondaryText && <slots.secondaryText {...slotProps.secondaryText} />}\n    {slots.tertiaryText && <slots.tertiaryText {...slotProps.tertiaryText} />}\n    {slots.quaternaryText && <slots.quaternaryText {...slotProps.quaternaryText} />}\n    {textPosition === 'before' && coin}\n  </slots.root>\n);\n```\n\n----------------------------------------\n\nTITLE: Defining CounterBadge Class and Related Types in TypeScript\nDESCRIPTION: Defines the CounterBadge class extending FASTElement, along with related enums and types for appearance, color, shape, and size.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_30\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport class CounterBadge extends FASTElement {\n    appearance?: CounterBadgeAppearance;\n    appearanceChanged(prev: CounterBadgeAppearance | undefined, next: CounterBadgeAppearance | undefined): void;\n    color?: CounterBadgeColor;\n    colorChanged(prev: CounterBadgeColor | undefined, next: CounterBadgeColor | undefined): void;\n    count: number;\n    // (undocumented)\n    protected countChanged(): void;\n    dot: boolean;\n    dotChanged(prev: boolean | undefined, next: boolean | undefined): void;\n    // @internal\n    elementInternals: ElementInternals;\n    overflowCount: number;\n    // (undocumented)\n    protected overflowCountChanged(): void;\n    // @internal\n    setCount(): string | void;\n    shape?: CounterBadgeShape;\n    shapeChanged(prev: CounterBadgeShape | undefined, next: CounterBadgeShape | undefined): void;\n    showZero: boolean;\n    size?: CounterBadgeSize;\n    sizeChanged(prev: CounterBadgeSize | undefined, next: CounterBadgeSize | undefined): void;\n}\n\n// @internal\nexport interface CounterBadge extends StartEnd {\n}\n\n// @public\nexport const CounterBadgeAppearance: {\n    readonly filled: \"filled\";\n    readonly ghost: \"ghost\";\n};\n\n// @public\nexport type CounterBadgeAppearance = ValuesOf<typeof CounterBadgeAppearance>;\n\n// @public\nexport const CounterBadgeColor: {\n    readonly brand: \"brand\";\n    readonly danger: \"danger\";\n    readonly important: \"important\";\n    readonly informative: \"informative\";\n    readonly severe: \"severe\";\n    readonly subtle: \"subtle\";\n    readonly success: \"success\";\n    readonly warning: \"warning\";\n};\n\n// @public\nexport type CounterBadgeColor = ValuesOf<typeof CounterBadgeColor>;\n\n// @public (undocumented)\nexport const CounterBadgeDefinition: FASTElementDefinition<typeof CounterBadge>;\n\n// @public\nexport const CounterBadgeShape: {\n    readonly circular: \"circular\";\n    readonly rounded: \"rounded\";\n};\n\n// @public\nexport type CounterBadgeShape = ValuesOf<typeof CounterBadgeShape>;\n\n// @public\nexport const CounterBadgeSize: {\n    readonly tiny: \"tiny\";\n    readonly extraSmall: \"extra-small\";\n    readonly small: \"small\";\n    readonly medium: \"medium\";\n    readonly large: \"large\";\n    readonly extraLarge: \"extra-large\";\n};\n\n// @public\nexport type CounterBadgeSize = ValuesOf<typeof CounterBadgeSize>;\n\n// @public\nexport const CounterBadgeStyles: ElementStyles;\n\n// @public\nexport const CounterBadgeTemplate: ElementViewTemplate<CounterBadge>;\n```\n\n----------------------------------------\n\nTITLE: Defining TextInput Configuration in TypeScript\nDESCRIPTION: Defines constants and types for TextInput appearance, control size, and input types. Includes the element definition, styles, and template for the TextInput component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_79\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"TextInputAppearance\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport const TextInputAppearance: {\n    readonly outline: \"outline\";\n    readonly underline: \"underline\";\n    readonly filledLighter: \"filled-lighter\";\n    readonly filledDarker: \"filled-darker\";\n};\n\n// @public (undocumented)\nexport type TextInputAppearance = ValuesOf<typeof TextInputAppearance>;\n\n// Warning: (ae-missing-release-tag) \"TextInputControlSize\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport const TextInputControlSize: {\n    readonly small: \"small\";\n    readonly medium: \"medium\";\n    readonly large: \"large\";\n};\n\n// @public (undocumented)\nexport type TextInputControlSize = ValuesOf<typeof TextInputControlSize>;\n\n// @public\nexport const TextInputDefinition: FASTElementDefinition<typeof TextInput>;\n\n// @public\nexport type TextInputOptions = StartEndOptions<TextInput>;\n\n// @public\nexport const TextInputStyles: ElementStyles;\n\n// Warning: (ae-internal-missing-underscore) The name \"TextInputTemplate\" should be prefixed with an underscore because the declaration is marked as @internal\n//\n// @internal (undocumented)\nexport const TextInputTemplate: ElementViewTemplate<TextInput>;\n\n// Warning: (ae-missing-release-tag) \"TextInputType\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport const TextInputType: {\n    readonly email: \"email\";\n    readonly password: \"password\";\n    readonly tel: \"tel\";\n    readonly text: \"text\";\n    readonly url: \"url\";\n};\n\n// @public (undocumented)\nexport type TextInputType = ValuesOf<typeof TextInputType>;\n```\n\n----------------------------------------\n\nTITLE: Type Utility Functions for Data Validation\nDESCRIPTION: A collection of type checking utility functions to validate arrays, dates, numbers, and other data types used in visualization and data processing.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/chart-utilities/etc/chart-utilities.api.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const isArrayOfType: (plotCoordinates: Datum[] | Datum[][] | TypedArray | undefined, typeCheck: (datum: any, ...args: any[]) => boolean, ...args: any[]) => boolean;\n\nexport function isArrayOrTypedArray(a: any): boolean;\n\nexport const isDate: (value: any) => boolean;\n\nexport const isDateArray: (data: Datum[] | Datum[][] | TypedArray | undefined) => boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining BackgroundAppearanceContextValue and Provider in TypeScript\nDESCRIPTION: Defines an internal type for background appearance context and exports its provider. This context is used to manage the appearance of backgrounds in the UI, with possible values of 'inverted' or undefined.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-shared-contexts/library/etc/react-shared-contexts.api.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport type BackgroundAppearanceContextValue = 'inverted' | undefined;\n\n// @internal (undocumented)\nexport const BackgroundAppearanceProvider: React_2.Provider<BackgroundAppearanceContextValue>;\n```\n\n----------------------------------------\n\nTITLE: Defining createContext and createContextSelector Functions in TypeScript\nDESCRIPTION: This snippet defines two public functions for creating React contexts with additional metadata. Both functions take default value, name, package name, and package version as parameters.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/global-context/etc/global-context.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React_2 from 'react';\n\n// @public\nexport const createContext: <T>(defaultValue: T, name: string, packageName: string, packageVersion: string) => React_2.Context<T>;\n\n// @public\nexport const createContextSelector: <T>(defaultValue: T, name: string, packageName: string, packageVersion: string) => React_2.Context<T>;\n```\n\n----------------------------------------\n\nTITLE: Defining Border Radius Design Tokens in TypeScript\nDESCRIPTION: Exports CSS variable references for different border radius sizes used in the Fluent UI design system.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const borderRadiusLarge = \"var(--borderRadiusLarge)\";\n\n// @public\nexport const borderRadiusMedium = \"var(--borderRadiusMedium)\";\n\n// @public\nexport const borderRadiusNone = \"var(--borderRadiusNone)\";\n\n// @public\nexport const borderRadiusSmall = \"var(--borderRadiusSmall)\";\n\n// @public\nexport const borderRadiusXLarge = \"var(--borderRadiusXLarge)\";\n```\n\n----------------------------------------\n\nTITLE: Menu Sections Implementation - TSX\nDESCRIPTION: This snippet demonstrates a menu structure that includes section dividers and grouped items within sections, enhancing the organization of menu items.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/library/docs/Spec.md#2025-04-20_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nconst menu = (\n  <Menu>\n    <MenuTrigger><button>Opem menu</button></MenuTrigger>\n    <MenuList>\n      <MenuItem>Option 1</MenuItem>\n      <MenuDivider />\n      <MenuGroup title=\"Section title\">\n        <MenuItem>Section Option 1</MenuItem>\n        <MenuItem>Section Option 2</MenuItem>\n        <MenuItem>Section Option 3</MenuItem>\n      </MenuGroup>\n    </MenuList>\n  <Menu>\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Default Horizontal Tabs in Fluent UI React\nDESCRIPTION: This snippet demonstrates how to create a default horizontal TabList with three tabs using Fluent UI in React. The TabList arranges its children horizontally by default, where each Tab represents a selectable item.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tabs/library/docs/Spec.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<TabList>\n  <Tab value=\"tab1\">One</Tab>\n  <Tab value=\"tab2\">Two</Tab>\n  <Tab value=\"tab3\">Three</Tab>\n</TabList>\n```\n\n----------------------------------------\n\nTITLE: Tag Picker Input Render Function\nDESCRIPTION: This is the render function for the TagPickerInput component. It takes the state and renders the input element within the TagPicker.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const renderTagPickerInput_unstable: (state: TagPickerInputState) => JSX.Element;\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Table Context and Header Utilities in TypeScript\nDESCRIPTION: Provides utilities for determining context within table headers and managing table context. These hooks help components understand their position within the table structure.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-table/library/etc/react-table.api.md#2025-04-20_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport const useIsInTableHeader: () => boolean;\n\n// @public (undocumented)\nexport const useTableContext: () => TableContextValue;\n\n// @public (undocumented)\nexport const useTableRowIdContext: () => TableRowId;\n```\n\n----------------------------------------\n\nTITLE: SuggestionItemType Enumeration in FluentUI\nDESCRIPTION: Defines the types of items that can appear in a suggestions list. Distinguishes between headers, actual suggestions, and footers for proper rendering and behavior.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_267\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport enum SuggestionItemType {\n    // (undocumented)\n    footer = 2,\n    // (undocumented)\n    header = 0,\n    // (undocumented)\n    suggestion = 1\n}\n```\n\n----------------------------------------\n\nTITLE: DialogActions Slots Class Names Definition\nDESCRIPTION: Defines the class names for the slots within the DialogActions component. SlotClassNames is a type from '@fluentui/react-utilities'. It is used for styling purposes within the Fluent UI React framework.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/etc/react-dialog.api.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport const dialogActionsClassNames: SlotClassNames<DialogActionsSlots>;\"\n```\n\n----------------------------------------\n\nTITLE: Defining DetailsHeaderBase React Component in TypeScript\nDESCRIPTION: Defines the DetailsHeaderBase class extending React.Component. It implements the IDetailsHeader interface and includes lifecycle methods and render function.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_26\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class DetailsHeaderBase extends React_2.Component<IDetailsHeaderBaseProps, IDetailsHeaderState> implements IDetailsHeader {\n    constructor(props: IDetailsHeaderBaseProps);\n    // (undocumented)\n    componentDidMount(): void;\n    // (undocumented)\n    componentDidUpdate(prevProps: IDetailsHeaderBaseProps): void;\n    // (undocumented)\n    componentWillUnmount(): void;\n    // (undocumented)\n    static defaultProps: {\n        selectAllVisibility: SelectAllVisibility;\n        collapseAllVisibility: CollapseAllVisibility;\n        useFastIcons: boolean;\n    };\n    focus(): boolean;\n    // (undocumented)\n    render(): JSX.Element;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DocumentCard Details Component Interfaces\nDESCRIPTION: TypeScript interface definitions for DocumentCardDetails component, its props, style props, and styles. This component is used to display details within a DocumentCard.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_96\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IDocumentCardDetails {\n}\n\n// Warning: (ae-forgotten-export) The symbol \"DocumentCardDetailsBase\" needs to be exported by the entry point index.d.ts\n//\n// @public (undocumented)\nexport interface IDocumentCardDetailsProps extends IReactProps<DocumentCardDetailsBase> {\n    className?: string;\n    componentRef?: IRefObject<IDocumentCardDetails>;\n    styles?: IStyleFunctionOrObject<IDocumentCardDetailsStyleProps, IDocumentCardDetailsStyles>;\n    theme?: ITheme;\n}\n\n// @public (undocumented)\nexport interface IDocumentCardDetailsStyleProps {\n    className?: string;\n    theme: ITheme;\n}\n\n// @public (undocumented)\nexport interface IDocumentCardDetailsStyles {\n    // (undocumented)\n    root: IStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Overlay Drawer in HTML\nDESCRIPTION: This snippet shows how to render an overlay drawer using HTML. The div is configured to act as a modal with appropriate ARIA attributes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-drawer/library/docs/Spec.md#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"fui-OverlayDrawer\" tabindex=\"-1\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"the-title-element-id\">\n  <!-- Content rendered here -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Persona Component Definition (TypeScript)\nDESCRIPTION: Defines the `Persona` component as a `ForwardRefComponent` with `PersonaProps`. This allows the component to be passed a ref and to have its props defined by the `PersonaProps` interface. It is the main exported component from the package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-persona/library/etc/react-persona.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const Persona: ForwardRefComponent<PersonaProps>;\"\n```\n\n----------------------------------------\n\nTITLE: Defining IComboBoxStyles Interface\nDESCRIPTION: Defines the `IComboBoxStyles` interface, extending `IShadowDomStyle`. It includes properties for styling various parts of the ComboBox component, such as the callout, container, divider, error message, header, input, label, options container, root, and screen reader text, as well as different states of the component (disabled, focused, hovered, etc.).\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_71\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IComboBoxStyles extends IShadowDomStyle {\n    callout: IStyle;\n    container: IStyle;\n    divider: IStyle;\n    errorMessage: IStyle;\n    header: IStyle;\n    input: IStyle;\n    inputDisabled: IStyle;\n    label: IStyle;\n    labelDisabled: IStyle;\n    optionsContainer: IStyle;\n    optionsContainerWrapper: IStyle;\n    root: IStyle;\n    rootDisabled: IStyle;\n    rootDisallowFreeForm: IStyle;\n    rootError: IStyle;\n    rootFocused: IStyle;\n    rootHovered: IStyle;\n    rootPressed: IStyle;\n    screenReaderText: IStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: DialogContent Props Definition\nDESCRIPTION: Defines the props for the DialogContent component, using ComponentProps from '@fluentui/react-utilities'. It represents the properties that can be passed to the DialogContent component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/etc/react-dialog.api.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport type DialogContentProps = ComponentProps<DialogContentSlots>;\"\n```\n\n----------------------------------------\n\nTITLE: DetailsList Component Interface Definitions\nDESCRIPTION: TypeScript interfaces defining the core properties and configurations for the DetailsList component and its subcomponents including columns, headers, footers and rows. Includes styling props, event handlers, and rendering configurations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_85\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IDetailsColumnRenderTooltipProps extends ITooltipHostProps {\n    column?: IColumn;\n}\n\nexport type IDetailsColumnStyleProps = Required<Pick<IDetailsColumnProps, 'theme' | 'cellStyleProps'>> & {\n    headerClassName?: string;\n    isActionable?: boolean;\n    isEmpty?: boolean;\n    isIconVisible?: boolean;\n    isPadded?: boolean;\n    isIconOnly?: boolean;\n    iconClassName?: string;\n    transitionDurationDrag?: number;\n    transitionDurationDrop?: number;\n};\n\nexport interface IDetailsColumnStyles {\n    accessibleLabel: IStyle;\n    borderAfterDropping: IStyle;\n    borderWhileDragging: IStyle;\n    cellName: IStyle;\n    cellTitle: IStyle;\n    cellTooltip: IStyle;\n    filterChevron: IStyle;\n    gripperBarVerticalStyle: IStyle;\n    iconClassName: IStyle;\n    nearIcon: IStyle;\n    noBorderAfterDropping: IStyle;\n    noBorderWhileDragging: IStyle;\n    root: IStyle;\n    sortIcon: IStyle;\n}\n\nexport interface IDetailsFooterBaseProps extends IDetailsItemProps {\n}\n\nexport interface IDetailsFooterProps extends IDetailsFooterBaseProps {\n    columns: IColumn[];\n    selection: ISelection;\n    selectionMode: SelectionMode_2;\n}\n\nexport interface IDetailsListProps extends IBaseProps<IDetailsList>, IWithViewportProps {\n    ariaLabel?: string;\n    ariaLabelForGrid?: string;\n    ariaLabelForListHeader?: string;\n    ariaLabelForSelectAllCheckbox?: string;\n    ariaLabelForSelectionColumn?: string;\n    cellStyleProps?: ICellStyleProps;\n    checkboxCellClassName?: string;\n    checkboxVisibility?: CheckboxVisibility;\n    checkButtonAriaLabel?: string;\n    checkButtonGroupAriaLabel?: string;\n    className?: string;\n    columnReorderOptions?: IColumnReorderOptions;\n    columns?: IColumn[];\n    compact?: boolean;\n    componentRef?: IRefObject<IDetailsList>;\n    constrainMode?: ConstrainMode;\n    // ... additional props omitted for brevity\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Avatar Color Constants in TypeScript\nDESCRIPTION: Defines a type-safe object containing named color constants for Avatar components. Includes a comprehensive set of color names mapped to their string values.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const AvatarNamedColor: {\n    readonly darkRed: \"dark-red\";\n    readonly cranberry: \"cranberry\";\n    readonly red: \"red\";\n    readonly pumpkin: \"pumpkin\";\n    readonly peach: \"peach\";\n    readonly marigold: \"marigold\";\n    readonly gold: \"gold\";\n    readonly brass: \"brass\";\n    readonly brown: \"brown\";\n    readonly forest: \"forest\";\n    readonly seafoam: \"seafoam\";\n    readonly darkGreen: \"dark-green\";\n    readonly lightTeal: \"light-teal\";\n    readonly teal: \"teal\";\n    readonly steel: \"steel\";\n    readonly blue: \"blue\";\n    readonly royalBlue: \"royal-blue\";\n    readonly cornflower: \"cornflower\";\n    readonly navy: \"navy\";\n    readonly lavender: \"lavender\";\n    readonly purple: \"purple\";\n    readonly grape: \"grape\";\n    readonly lilac: \"lilac\";\n    readonly pink: \"pink\";\n    readonly magenta: \"magenta\";\n    readonly plum: \"plum\";\n    readonly beige: \"beige\";\n    readonly mink: \"mink\";\n    readonly platinum: \"platinum\";\n    readonly anchor: \"anchor\";\n};\n```\n\n----------------------------------------\n\nTITLE: Creating SubtreeContext in React\nDESCRIPTION: This feature introduces a new SubtreeContext. This context likely provides specific information or functionality relevant to subtrees within the Tree component, enabling more granular control and improved context awareness.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tree/library/CHANGELOG.md#2025-04-20_snippet_12\n\nLANGUAGE: React\nCODE:\n```\nfeat: creates SubtreeContext ([PR #29194](https://github.com/microsoft/fluentui/pull/29194) by bernardo.sunderhus@gmail.com)\n```\n\n----------------------------------------\n\nTITLE: Exporting Table Styling Hooks in TypeScript\nDESCRIPTION: Provides styling hooks for table components. These hooks apply styling to their respective table elements based on their current state.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-table/library/etc/react-table.api.md#2025-04-20_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport const useTableBodyStyles_unstable: (state: TableBodyState) => TableBodyState;\n\n// @public\nexport const useTableCellActionsStyles_unstable: (state: TableCellActionsState) => TableCellActionsState;\n\n// @public\nexport const useTableCellLayoutStyles_unstable: (state: TableCellLayoutState) => TableCellLayoutState;\n\n// @public\nexport const useTableCellStyles_unstable: (state: TableCellState) => TableCellState;\n\n// @public\nexport const useTableHeaderCellStyles_unstable: (state: TableHeaderCellState) => TableHeaderCellState;\n\n// @public\nexport const useTableHeaderStyles_unstable: (state: TableHeaderState) => TableHeaderState;\n\n// @public\nexport const useTableResizeHandleStyles_unstable: (state: TableResizeHandleState) => TableResizeHandleState;\n\n// @public\nexport const useTableRowStyles_unstable: (state: TableRowState) => TableRowState;\n\n// @public\nexport const useTableSelectionCellStyles_unstable: (state: TableSelectionCellState) => TableSelectionCellState;\n\n// @public\nexport const useTableStyles_unstable: (state: TableState) => TableState;\n```\n\n----------------------------------------\n\nTITLE: Rendering and Hook Functions for Radio Components\nDESCRIPTION: This snippet defines render functions and hooks for the Radio and RadioGroup components, simplifying their usage in React components by providing a structured method of rendering and state management integration.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-radio/library/etc/react-radio.api.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const renderRadio_unstable: (state: RadioState) => JSX.Element;\n\n// @public\nexport const renderRadioGroup_unstable: (state: RadioGroupState, contextValues: RadioGroupContextValues) => JSX.Element;\n\n// @public\nexport const useRadio_unstable: (props: RadioProps, ref: React_2.Ref<HTMLInputElement>) => RadioState;\n\n// @public\nexport const useRadioGroup_unstable: (props: RadioGroupProps, ref: React_2.Ref<HTMLDivElement>) => RadioGroupState;\n```\n\n----------------------------------------\n\nTITLE: TagPickerOnOptionSelectData Type\nDESCRIPTION: Defines the type for the data emitted when an option is selected in the TagPicker. It includes the selected value and array of selected options, as well as event data for either a click or keydown event.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport type TagPickerOnOptionSelectData = {\n    value: string;\n    selectedOptions: string[];\n} & (EventData<'click', React_2.MouseEvent<HTMLDivElement>> | EventData<'keydown', React_2.KeyboardEvent<HTMLDivElement>>);\"\n```\n\n----------------------------------------\n\nTITLE: Layout Interface for Complex Visualizations\nDESCRIPTION: Extensive interface defining comprehensive layout configurations for complex charts and graphs, including axes, annotations, color settings, and interactive features.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/chart-utilities/etc/chart-utilities.api.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Layout {\n    xaxis: Partial<LayoutAxis>;\n    yaxis: Partial<LayoutAxis>;\n    annotations: Array<Partial<Annotations>>;\n    autosize: boolean;\n    dragmode: 'zoom' | 'pan' | 'select' | ... ;\n    legend: Partial<Legend>;\n    title: string | Partial<{...}>;\n}\n```\n\n----------------------------------------\n\nTITLE: InteractionTag with different appearance\nDESCRIPTION: This snippet demonstrates how to change the appearance of an `<InteractionTag>`. Setting the `appearance` prop to \"outlined\" applies an outlined style.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tags/library/README.md#2025-04-20_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<InteractionTag appearance=\"outlined\">\n  <InteractionTagPrimary>Content</InteractionTagPrimary>\n</InteractionTag>\n```\n\n----------------------------------------\n\nTITLE: Implementing Timestamp Text in Default Theme\nDESCRIPTION: This snippet shows how to create a Text component with timestamp styling for the default theme using makeStyles from FluentUI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-text/library/docs/MIGRATION.md#2025-04-20_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeStyles, Text } from '@fluentui/react-components';\n\nconst useStyles = makeStyles({\n  root: {\n    color: 'rgb(72, 70, 68)',\n  },\n});\n\nconst MyComponent = () => {\n  const styles = useStyles();\n\n  return <Text className={styles.root}>{/* ... */}</Text>;\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Layering in Dropdown Callout Props (JSX)\nDESCRIPTION: This code snippet demonstrates how to disable the default layering behavior of the Dropdown popup, rendering the options list inline.  This is recommended for improved accessibility, especially for touch-based screen readers, unless the Dropdown is within an overflow container.  Setting `doNotLayer` to `true` prevents clipping issues caused by containers with `overflow: hidden` or `overflow: scroll`.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-examples/src/react/Dropdown/docs/DropdownBestPractices.md#2025-04-20_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n\"calloutProps={{ doNotLayer: true }}\"\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies from @microsoft/fast-element and @microsoft/fast-web-utilities\nDESCRIPTION: Import statements that define the dependencies from the Fast Element library and Fast Web Utilities needed for component implementation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CaptureType } from '@microsoft/fast-element';\nimport { CSSDirective } from '@microsoft/fast-element';\nimport { Direction } from '@microsoft/fast-web-utilities';\nimport { ElementStyles } from '@microsoft/fast-element';\nimport { ElementViewTemplate } from '@microsoft/fast-element';\nimport { FASTElement } from '@microsoft/fast-element';\nimport { FASTElementDefinition } from '@microsoft/fast-element';\nimport type { HostBehavior } from '@microsoft/fast-element';\nimport type { HostController } from '@microsoft/fast-element';\nimport { HTMLDirective } from '@microsoft/fast-element';\nimport { Orientation } from '@microsoft/fast-web-utilities';\nimport { SyntheticViewTemplate } from '@microsoft/fast-element';\nimport { ViewTemplate } from '@microsoft/fast-element';\n```\n\n----------------------------------------\n\nTITLE: Defining MessageBar Class in TypeScript\nDESCRIPTION: This snippet defines the MessageBar class, which extends FASTElement. It includes properties for intent, layout, and shape, as well as a method to dismiss the message bar.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_40\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MessageBar extends FASTElement {\n    constructor();\n    dismissMessageBar: () => void;\n    elementInternals: ElementInternals;\n    intent?: MessageBarIntent;\n    layout?: MessageBarLayout;\n    shape?: MessageBarShape;\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Selection State in Fluent UI Menu\nDESCRIPTION: Illustrates how to manage selection state in Fluent UI v0 Menu and Toolbar components, including active index control and checkbox/radio selection states.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/library/docs/Spec.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// v0 autocontrolled active index with default\n<Menu defaultActiveIndex={0}>\n  <Menu.Item index={0}>\n    <Menu.ItemContent>Editorials</Menu.ItemContent>\n  </Menu.Item>\n</Menu>\n\n// v0 autocontrolled active index controlled\n<Menu activeIndex={0}>\n  <Menu.Item index={0}>\n    <Menu.ItemContent>Editorials</Menu.ItemContent>\n  </Menu.Item>\n</Menu>\n\n// shorthand variation\nconst items = [\n  {\n    key: 'editorials',\n    content: 'Editorials',\n  },\n]\n<Menu defaultActiveIndex={0} items={items} />\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// Toolbar with one item that opens a selectable menu\nconst toolbarItems = [\n  {\n    icon: <MoreIcon />,\n    title: 'More',\n    menu: [\n      {\n        active: true,\n        content: 'Bold',\n        kind: 'toggle',\n        // kind: 'radio', // for radio\n        onClick: handleToggleClick,\n      },\n      {\n        active: false,\n        content: 'Italic',\n        kind: 'toggle',\n        // kind: 'radio', // for radio\n      },\n    ],\n    menuOpen,\n    onMenuOpenChange: (e, { menuOpen }) => setMenuOpen(menuOpen),\n  },\n]\n\n<Toolbar items={toolbarItems}>\n```\n\nLANGUAGE: tsx\nCODE:\n```\nconst menuProps = {\n  shouldFocusOnMount: true,\n  items: [\n    {\n      text: 'New',\n      canCheck: true,\n      isChecked: true,\n      onClick: onToggleSelect,\n    },\n    {\n      text: 'Share',\n      canCheck: true,\n      isChecked: false,\n      onClick: onToggleSelect,\n    },\n  ],\n};\n\n// shorthand usage in a menu button\n<DefaultButton menuProps={menuProps} />;\n```\n\n----------------------------------------\n\nTITLE: Defining Divider Component and Related Types in TypeScript\nDESCRIPTION: This snippet defines the Divider component, its props, state, and slot types. It also includes utility functions for rendering and styling the Divider.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-divider/library/etc/react-divider.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ComponentProps } from '@fluentui/react-utilities';\nimport type { ComponentState } from '@fluentui/react-utilities';\nimport type { ForwardRefComponent } from '@fluentui/react-utilities';\nimport * as React_2 from 'react';\nimport type { Slot } from '@fluentui/react-utilities';\nimport type { SlotClassNames } from '@fluentui/react-utilities';\n\n// @public\nexport const Divider: ForwardRefComponent<DividerProps>;\n\n// @public (undocumented)\nexport const dividerClassNames: SlotClassNames<DividerSlots>;\n\n// @public (undocumented)\nexport type DividerProps = ComponentProps<Partial<DividerSlots>> & {\n  alignContent?: 'start' | 'center' | 'end';\n  appearance?: 'brand' | 'default' | 'strong' | 'subtle';\n  inset?: boolean;\n  vertical?: boolean;\n};\n\n// @public (undocumented)\nexport type DividerSlots = {\n  root: NonNullable<Slot<'div'>>;\n  wrapper: NonNullable<Slot<'div'>>;\n};\n\n// @public (undocumented)\nexport type DividerState = ComponentState<DividerSlots> &\n  Required<Pick<DividerProps, 'alignContent' | 'appearance' | 'inset' | 'vertical'>>;\n\n// @public\nexport const renderDivider_unstable: (state: DividerState) => JSX.Element;\n\n// @public\nexport const useDivider_unstable: (props: DividerProps, ref: React_2.Ref<HTMLElement>) => DividerState;\n\n// @public (undocumented)\nexport const useDividerStyles_unstable: (state: DividerState) => DividerState;\n```\n\n----------------------------------------\n\nTITLE: FluentUI Component Import Declarations\nDESCRIPTION: Comprehensive set of TypeScript import statements for FluentUI React components and their associated types, props, states, and utilities. Includes imports from multiple packages like react-dialog, react-drawer, react, react-combobox, and react-utilities.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/etc/react-components.api.md#2025-04-20_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { DataGridState } from '@fluentui/react-table';\nimport { Dialog } from '@fluentui/react-dialog';\nimport { DialogActions } from '@fluentui/react-dialog';\nimport { dialogActionsClassNames } from '@fluentui/react-dialog';\nimport { DialogActionsPosition } from '@fluentui/react-dialog';\nimport { DialogActionsProps } from '@fluentui/react-dialog';\nimport { DialogActionsSlots } from '@fluentui/react-dialog';\nimport { DialogActionsState } from '@fluentui/react-dialog';\nimport { DialogBody } from '@fluentui/react-dialog';\nimport { dialogBodyClassNames } from '@fluentui/react-dialog';\nimport { DialogBodyProps } from '@fluentui/react-dialog';\nimport { DialogBodySlots } from '@fluentui/react-dialog';\nimport { DialogBodyState } from '@fluentui/react-dialog';\nimport { DialogContent } from '@fluentui/react-dialog';\nimport { dialogContentClassNames } from '@fluentui/react-dialog';\nimport { DialogContentProps } from '@fluentui/react-dialog';\nimport { DialogContentSlots } from '@fluentui/react-dialog';\nimport { DialogContentState } from '@fluentui/react-dialog';\nimport { DialogContextValue } from '@fluentui/react-dialog';\nimport { DialogModalType } from '@fluentui/react-dialog';\nimport { DialogOpenChangeData } from '@fluentui/react-dialog';\nimport { DialogOpenChangeEvent } from '@fluentui/react-dialog';\nimport { DialogProps } from '@fluentui/react-dialog';\nimport { DialogProvider } from '@fluentui/react-dialog';\nimport { DialogSlots } from '@fluentui/react-dialog';\nimport { DialogState } from '@fluentui/react-dialog';\nimport { DialogSurface } from '@fluentui/react-dialog';\nimport { dialogSurfaceClassNames } from '@fluentui/react-dialog';\nimport { DialogSurfaceContextValue } from '@fluentui/react-dialog';\nimport { DialogSurfaceContextValues } from '@fluentui/react-dialog';\nimport { DialogSurfaceProps } from '@fluentui/react-dialog';\nimport { DialogSurfaceSlots } from '@fluentui/react-dialog';\nimport { DialogSurfaceState } from '@fluentui/react-dialog';\nimport { DialogTitle } from '@fluentui/react-dialog';\nimport { dialogTitleClassNames } from '@fluentui/react-dialog';\nimport { DialogTitleProps } from '@fluentui/react-dialog';\nimport { DialogTitleSlots } from '@fluentui/react-dialog';\nimport { DialogTitleState } from '@fluentui/react-dialog';\nimport { DialogTrigger } from '@fluentui/react-dialog';\nimport { DialogTriggerAction } from '@fluentui/react-dialog';\nimport { DialogTriggerChildProps } from '@fluentui/react-dialog';\nimport { DialogTriggerProps } from '@fluentui/react-dialog';\nimport { DialogTriggerState } from '@fluentui/react-dialog';\n```\n\n----------------------------------------\n\nTITLE: Get High Contrast No Adjust Style Function\nDESCRIPTION: Defines a function, `getHighContrastNoAdjustStyle`, which returns an `IRawStyle` object. Likely used to prevent unwanted style adjustments in high contrast mode.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/style-utilities/etc/style-utilities.api.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n\"export function getHighContrastNoAdjustStyle(): IRawStyle;\"\n```\n\n----------------------------------------\n\nTITLE: Migrating Content Prop in Flex Component\nDESCRIPTION: Demonstrates how to migrate the content prop to JSX children syntax\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Flex.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Flex } from '@fluentui/react-northstar';\nconst Component = () => <Flex content=\"hi\" />;\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Flex } from '@fluentui/react-migration-v0-v9';\nconst Component = () => <Flex>hi</Flex>;\n```\n\n----------------------------------------\n\nTITLE: FluentUI Migration API Type Definitions and Imports\nDESCRIPTION: TypeScript type definitions and imports for FluentUI React components migration between v0 and v9. Includes component props, utilities, and styling types.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-migration-v0-v9/library/etc/react-migration-v0-v9.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"react\" />\n\nimport { ButtonProps } from '@fluentui/react-components';\nimport { ComponentProps } from '@fluentui/react-components';\nimport type { ComponentProps as ComponentProps_2 } from '@fluentui/react-utilities';\nimport type { ComponentState } from '@fluentui/react-utilities';\nimport type { ForwardRefComponent } from '@fluentui/react-utilities';\nimport { GriffelStyle } from '@fluentui/react-components';\nimport { ObjectOf } from '@fluentui/react-northstar';\nimport type { ObjectShorthandValue } from '@fluentui/react-northstar';\nimport * as React_2 from 'react';\nimport { SelectionHookParams } from '@fluentui/react-utilities';\nimport { SelectionItemId } from '@fluentui/react-utilities';\nimport type { SelectionMode as SelectionMode_2 } from '@fluentui/react-utilities';\nimport { Slot } from '@fluentui/react-components';\nimport { Slot as Slot_2 } from '@fluentui/react-utilities';\nimport type { SlotClassNames } from '@fluentui/react-utilities';\nimport { SlotRenderFunction } from '@fluentui/react-utilities';\n```\n\n----------------------------------------\n\nTITLE: Implementing useEventCallback Hook in TypeScript\nDESCRIPTION: Definition of the useEventCallback hook, which returns a function reference that always calls the latest implementation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-hooks/README.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useEventCallback<Args extends unknown[], Return>(fn: (...args: Args) => Return): (...args: Args) => Return;\n```\n\n----------------------------------------\n\nTITLE: Defining Z-Index Constants in Fluent UI v8\nDESCRIPTION: Defines static z-index values for various UI components in Fluent UI React v8, which can cause rendering conflicts with other versions\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/portal-compat.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport namespace ZIndexes {\n  export const Nav: number = 1;\n  export const ScrollablePane: number = 1;\n  export const FocusStyle: number = 1;\n  export const Coachmark: number = 1000;\n  export const Layer: number = 1000000;\n  export const KeytipLayer: number = 1000001;\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Rule Configuration for Fluent UI ESLint Plugin\nDESCRIPTION: Example configuration to manually set a Fluent UI ESLint rule. Demonstrates how to configure specific rules individually if the recommended setup is not used.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/eslint-plugin-react-components/README.md#2025-04-20_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\\n  plugins: ['@fluentui/react-components'],\\n  rules: {\\n    '@fluentui/react-components/prefer-fluentui-v9': 'warn',\\n  },\\n};\n```\n\n----------------------------------------\n\nTITLE: Using Automatic Colors from Default Palette in FluentUI Charts\nDESCRIPTION: Shows how to omit the color prop in chart data series to automatically use colors from FluentUI's default color palette. Colors will be assigned sequentially to each data series.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/docs/colors.md#2025-04-20_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { IChartProps, ILineChartPoints, LineChart } from '@fluentui/react-charting';\n\nconst dataSeries: ILineChartPoints[] = [\n  {\n    legend: 'Line 1',\n    data: [\n      { x: 20, y: 50 },\n      { x: 40, y: 80 },\n    ],\n    // Notice the absent color prop here.\n  },\n];\nconst chartData: IChartProps = {\n  chartTitle: 'Line chart',\n  lineChartData: dataSeries,\n};\n\nconst App = () => {\n  return <LineChart data={chartData} />;\n};\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Importing Fluent UI React Image Component\nDESCRIPTION: Demonstrates how to import the Image component from Fluent UI React for use in your application. This component ensures consistent styling and behavior based on the Fluent UI Design System.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-image/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { Image } from '@fluentui/react-components';\n```\n\n----------------------------------------\n\nTITLE: Type Definitions and Component Exports for FluentUI Color Picker in TypeScript\nDESCRIPTION: This code snippet contains the complete API surface for the @fluentui/react-color-picker package, including component exports, type definitions, props interfaces, and utility functions. It defines color picker components and their associated types for use in React applications.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-color-picker/library/etc/react-color-picker.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ComponentProps } from '@fluentui/react-utilities';\nimport type { ComponentState } from '@fluentui/react-utilities';\nimport type { EventData } from '@fluentui/react-utilities';\nimport type { EventHandler } from '@fluentui/react-utilities';\nimport type { ForwardRefComponent } from '@fluentui/react-utilities';\nimport * as React_2 from 'react';\nimport type { Slot } from '@fluentui/react-utilities';\nimport type { SlotClassNames } from '@fluentui/react-utilities';\n\n// @public\nexport const AlphaSlider: ForwardRefComponent<AlphaSliderProps>;\n\n// @public (undocumented)\nexport const alphaSliderClassNames: SlotClassNames<AlphaSliderSlots>;\n\n// @public\nexport type AlphaSliderProps = Omit<ColorSliderProps, 'channel'> & {\n    transparency?: boolean;\n};\n\n// @public (undocumented)\nexport type AlphaSliderSlots = ColorSliderSlots;\n\n// @public\nexport type AlphaSliderState = ComponentState<AlphaSliderSlots> & Pick<AlphaSliderProps, 'vertical'> & Omit<ColorSliderState, keyof ColorSliderSlots | 'components'>;\n\n// @public\nexport const ColorArea: ForwardRefComponent<ColorAreaProps>;\n\n// @public (undocumented)\nexport const colorAreaClassNames: SlotClassNames<ColorAreaSlots>;\n\n// @public\nexport type ColorAreaProps = Omit<ComponentProps<Partial<ColorAreaSlots>>, 'color' | 'onChange'> & Pick<ColorPickerProps, 'shape'> & {\n    color?: HsvColor;\n    defaultColor?: HsvColor;\n    onChange?: EventHandler<ColorAreaOnColorChangeData>;\n};\n\n// @public (undocumented)\nexport type ColorAreaSlots = {\n    root: NonNullable<Slot<'div'>>;\n    thumb?: NonNullable<Slot<'div'>>;\n    inputX?: NonNullable<Slot<'input'>>;\n    inputY?: NonNullable<Slot<'input'>>;\n};\n\n// @public\nexport type ColorAreaState = ComponentState<Required<ColorAreaSlots>> & Pick<ColorAreaProps, 'color' | 'shape'>;\n\n// @public\nexport const ColorPicker: ForwardRefComponent<ColorPickerProps>;\n\n// @public (undocumented)\nexport const colorPickerClassNames: SlotClassNames<ColorPickerSlots>;\n\n// @public\nexport type ColorPickerProps = Omit<ComponentProps<Partial<ColorPickerSlots>>, 'color'> & {\n    color?: HsvColor;\n    onColorChange?: EventHandler<ColorPickerOnChangeData>;\n    shape?: 'rounded' | 'square';\n};\n\n// @public (undocumented)\nexport type ColorPickerSlots = {\n    root: Slot<'div'>;\n};\n\n// @public\nexport type ColorPickerState = ComponentState<ColorPickerSlots> & ColorPickerContextValue;\n\n// @public\nexport const ColorSlider: ForwardRefComponent<ColorSliderProps>;\n\n// @public (undocumented)\nexport const colorSliderClassNames: SlotClassNames<ColorSliderSlots>;\n\n// @public\nexport type ColorSliderProps = Omit<ComponentProps<Partial<ColorSliderSlots>, 'input'>, 'defaultValue' | 'onChange' | 'value' | 'color'> & Pick<ColorPickerProps, 'shape'> & {\n    channel?: ColorChannel;\n    onChange?: EventHandler<SliderOnChangeData>;\n    vertical?: boolean;\n    color?: HsvColor;\n    defaultColor?: HsvColor;\n};\n\n// @public (undocumented)\nexport type ColorSliderSlots = {\n    root: NonNullable<Slot<'div'>>;\n    rail: NonNullable<Slot<'div'>>;\n    thumb: NonNullable<Slot<'div'>>;\n    input: NonNullable<Slot<'input'>>;\n};\n\n// @public\nexport type ColorSliderState = ComponentState<ColorSliderSlots> & Pick<ColorSliderProps, 'vertical' | 'shape' | 'channel'>;\n\n// @public\nexport const renderAlphaSlider_unstable: (state: AlphaSliderState) => JSX.Element;\n\n// @public\nexport const renderColorArea_unstable: (state: ColorAreaState) => JSX.Element;\n\n// @public\nexport const renderColorPicker_unstable: (state: ColorPickerState, contextValues: ColorPickerContextValues) => JSX.Element;\n\n// @public\nexport const renderColorSlider_unstable: (state: ColorSliderState) => JSX.Element;\n\n// @public\nexport const useAlphaSlider_unstable: (props: AlphaSliderProps, ref: React_2.Ref<HTMLInputElement>) => AlphaSliderState;\n\n// @public\nexport const useAlphaSliderStyles_unstable: (state: AlphaSliderState) => AlphaSliderState;\n\n// @public\nexport const useColorArea_unstable: (props: ColorAreaProps, ref: React_2.Ref<HTMLDivElement>) => ColorAreaState;\n\n// @public\nexport const useColorAreaStyles_unstable: (state: ColorAreaState) => ColorAreaState;\n\n// @public\nexport const useColorPicker_unstable: (props: ColorPickerProps, ref: React_2.Ref<HTMLDivElement>) => ColorPickerState;\n\n// @public\nexport const useColorPickerStyles_unstable: (state: ColorPickerState) => ColorPickerState;\n\n// @public\nexport const useColorSlider_unstable: (props: ColorSliderProps, ref: React_2.Ref<HTMLInputElement>) => ColorSliderState;\n\n// @public\nexport const useColorSliderStyles_unstable: (state: ColorSliderState) => ColorSliderState;\n```\n\n----------------------------------------\n\nTITLE: Defining TreeItemLayout and TreeItemPersonaLayout Components in TypeScript\nDESCRIPTION: This snippet defines the TreeItemLayout and TreeItemPersonaLayout components, which are used for customizing the layout of tree items. It includes props, state types, and rendering functions for these layout components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tree/library/etc/react-tree.api.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const TreeItemLayout: ForwardRefComponent<TreeItemLayoutProps>;\n\n// @public\nexport type TreeItemLayoutProps = ComponentProps<Partial<TreeItemLayoutSlots>>;\n\n// @public (undocumented)\nexport type TreeItemLayoutSlots = {\n    root: Slot<'div'>;\n    main: NonNullable<Slot<'div'>>;\n    iconBefore?: Slot<'div'>;\n    iconAfter?: Slot<'div'>;\n    expandIcon?: Slot<'div'>;\n    aside?: Slot<'div'>;\n    actions?: Slot<TreeItemLayoutActionSlotProps>;\n    selector?: Slot<typeof Checkbox> | Slot<typeof Radio>;\n};\n\n// @public\nexport const renderTreeItemLayout_unstable: (state: TreeItemLayoutState) => JSX.Element;\n\n// @public\nexport const TreeItemPersonaLayout: ForwardRefComponent<TreeItemPersonaLayoutProps>;\n\n// @public\nexport type TreeItemPersonaLayoutProps = ComponentProps<Partial<TreeItemPersonaLayoutSlots>>;\n\n// @public (undocumented)\nexport type TreeItemPersonaLayoutSlots = Pick<TreeItemLayoutSlots, 'actions' | 'aside' | 'expandIcon' | 'selector'> & {\n    root: NonNullable<Slot<'div'>>;\n    media: NonNullable<Slot<'div'>>;\n    main: NonNullable<Slot<'div'>>;\n    description?: Slot<'div'>;\n};\n\n// @public\nexport const renderTreeItemPersonaLayout_unstable: (state: TreeItemPersonaLayoutState, contextValues: TreeItemPersonaLayoutContextValues) => JSX.Element;\n```\n\n----------------------------------------\n\nTITLE: Basic Spinner Usage in Fluent UI v9\nDESCRIPTION: Shows the equivalent implementation of a Spinner component in Fluent UI v9. It imports the Spinner from the '@fluentui/react-components' package and renders it similarly to v8, but with updated import path.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Spinner.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { Spinner } from '@fluentui/react-components';\n\nconst SpinnerV9BasicExample = () => <Spinner />;\n\nexport default SpinnerV9BasicExample;\n```\n\n----------------------------------------\n\nTITLE: Link Element as Button without `href` in Fabric UI\nDESCRIPTION: Defines a button tag used as a Link when no href is provided within Fabric UI. Requires button type and linked Fabric UI styles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Link.md#2025-04-20_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<button type=\\\"button\\\" class=\\\"ms-Link root-163\\\">the link is rendered as a button</button>\n```\n\n----------------------------------------\n\nTITLE: Iterating and Committing Changes with Git\nDESCRIPTION: Outlines the process of tracking and committing changes using Git commands. The sequence includes checking the status, adding changes, making commits, and pushing the changes to the remote repository. Highlights the slight lag during commit due to linting processes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/dev-workflow.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit status // Shows all changed files\ngit add . // Stages the changed files\ngit commit -m \"Your brief message.\" // Makes the commits. You may notice a slight lag during committing as our linters work away.\ngit push --force// Pushes your changes to your forked branch.\n```\n\n----------------------------------------\n\nTITLE: Migrating Tooltip from v8 to v9 in Fluent UI\nDESCRIPTION: This snippet outlines the changes required when migrating the Tooltip component from Fluent UI v8 to v9. It includes prop mappings, replacements for deprecated features, and new positioning options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tooltip/library/docs/MIGRATION.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `Tooltip`\n  - `calloutProps`\n    - `isBeakVisible` => `withArrow`\n    - `beakWidth` => Not supported.\n    - `gapSpace` => Not supported.\n    - `doNotLayer` => Not supported. Tooltips are always layered by rendering in a Portal.\n    - `setInitialFocus` => Not supported. Tooltips can't be focused, by design.\n  - `componentRef` => Not supported. Tooltips can be controlled declaratively with props like `visible`, instead of using an imperative API like `componentRef`.\n  - `delay` => `showDelay`\n  - `directionalHint` => `positioning`\n    - `topLeftEdge` => `positioning=\"above-start\"`\n    - `topCenter` => `positioning=\"above\"`\n    - `topRightEdge` => `positioning=\"above-end\"`\n    - `topAutoEdge` => Not supported\n    - `bottomLeftEdge` => `positioning=\"below-start\"`\n    - `bottomCenter` => `positioning=\"below\"`\n    - `bottomRightEdge` => `positioning=\"below-end\"`\n    - `bottomAutoEdge` => Not supported\n    - `leftTopEdge` => `positioning=\"before-top\"`\n    - `leftCenter` => `positioning=\"before\"`\n    - `leftBottomEdge` => `positioning=\"before-bottom\"`\n    - `rightTopEdge` => `positioning=\"after-top\"`\n    - `rightCenter` => `positioning=\"after\"`\n    - `rightBottomEdge` => `positioning=\"after-bottom\"`\n  - `directionalHintForRTL` => Automatic based on whether the element is in an RTL context according to `FluentProvider`.\n  - `maxWidth` => Supported only through CSS styling of the `content` slot.\n  - `onRenderContent` => Set the `content` slot to a custom render function.\n- `TooltipHost` => The tooltip itself is the \"host\".\n  - `closeDelay` => `hideDelay`\n  - `hostClassName` => Not needed because there is no element rendered inline by Tooltip\n  - `onTooltipToggle` => `onVisibleChange`\n  - `overflowMode` => Not supported. If this behavior is needed, the tooltip's visibility can be controlled using the `visible` prop and `onVisibleChange` event.\n```\n\n----------------------------------------\n\nTITLE: Combobox Context Value Definition\nDESCRIPTION: This snippet defines the context value for the Combobox component, providing access to state and functions related to active option, appearance, focus visibility, open state, option registration, active option setter, open state setter, size, selected options, and option selection.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/library/etc/react-combobox.api.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport type ComboboxContextValue = Pick<ComboboxState, 'activeOption' | 'appearance' | 'focusVisible' | 'open' | 'registerOption' | 'setActiveOption' | 'setOpen' | 'size'> & {\n    selectedOptions: ComboboxState['selectedOptions'];\n    selectOption: ComboboxState['selectOption'];\n};\"\n```\n\n----------------------------------------\n\nTITLE: Implementing useFirstMount Hook in TypeScript\nDESCRIPTION: An internal hook that returns a boolean flag indicating whether the component is on its first render/mount.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-utilities/etc/react-utilities.api.md#2025-04-20_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @internal\nexport function useFirstMount(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Finding Available Date - TypeScript\nDESCRIPTION: This constant indicates a function that finds an available date based on the given options, returning the corresponding Date object or undefined if none is found. It's particularly useful in scheduling applications.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/date-time-utilities/etc/date-time-utilities.api.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const findAvailableDate: (options: IAvailableDateOptions) => Date | undefined;\n```\n\n----------------------------------------\n\nTITLE: Rendering Link as Anchor Element in TSX\nDESCRIPTION: Example of Link component structure when rendering as an anchor (<a>) element with href prop.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-link/library/docs/SPEC.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<a class=\"root\" href={href}>\n  {children}\n</a>\n```\n\n----------------------------------------\n\nTITLE: Setting Order for Stack.Item using CSS\nDESCRIPTION: This snippet demonstrates how to set the order property for a Stack.Item component using CSS.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Flex/Flex.StackItem.stories.mdx#2025-04-20_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n.flex-item {\n    order: 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tabs in a Component - TypeScript\nDESCRIPTION: This TypeScript snippet illustrates the implementation of a TabList with several Tab components. It includes state management for the selected tab and an event handler for tab selection.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tabs/library/README.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SelectTabData, SelectTabEvent, TabList, Tab } from '@fluentui/react-components';\nimport { CalendarMonthRegular } from '@fluentui/react-icons';\n\nexport const TabExample = () => {\n  const [selectedValue, setSelectedValue] = React.useState<TabValue>('conditions');\n\n  const onTabSelect = (event: SelectTabEvent, data: SelectTabData) => {\n    console.log(`The ${data.value} tab was selected`);\n    setSelectedValue(data.value);\n  };\n\n  return (\n    <TabList selectedValue={selectedValue} onTabSelect={onTabSelect}>\n      <Tab value=\"tab1\">First Tab</Tab>\n      <Tab value=\"tab2\" icon={<CalendarMonthRegular />}>Second Tab</Tab>\n      <Tab value=\"tab3\">Third Tab</Tab>\n      <Tab value=\"tab4\">Fourth Tab</Tab>\n    </TabList>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Hook for Focus Rectangles in TypeScript\nDESCRIPTION: React hook to manage focus rectangles for accessibility. It takes an optional ref to the root element where focus management should be applied.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/utilities/etc/utilities.api.md#2025-04-20_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function useFocusRects(rootRef?: React_2.RefObject<HTMLElement>): void;\n```\n\n----------------------------------------\n\nTITLE: Configuring isConformant for Components with React Portals\nDESCRIPTION: Demonstrates how to configure isConformant tests for components that use React Portals. By providing a custom getTargetElement function, the tests can correctly find and inspect DOM elements rendered in portals outside the component's immediate container.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-conformance/README.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// Assume that `Foo` is a component that renders a Portal.\n// It takes a prop called `idForPortal` that renders the\n// provided id in the Portal, allowing it to be looked up\n// via `getPortalElement()`.\n\nconst getPortalElement = (result, attr) => {\n  return result.baseElement.querySelector(\"#portal-id\");\n};\n\ndescribe('Foo', () => {\n  isConformant({\n    Component: Foo,\n    displayName: 'Foo'\n    requiredProps: { idForPortal: \"portal-id\" },\n    getTargetElement: getPortalElement\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying FocusZone Behavior in React\nDESCRIPTION: This change modifies the FocusZone component to allow arrow keys to move within textareas, providing similar functionality to text inputs. It enhances the user experience by allowing more natural navigation within textareas inside a FocusZone.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-focus/CHANGELOG.md#2025-04-20_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Northstar Checkbox Basic Implementation\nDESCRIPTION: Example showing basic usage of Checkbox component in v0/Northstar version with string and JSX label variants.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-checkbox/library/docs/Spec.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// string\n<Checkbox label=\"Make my profile visible\" />\n\n// jsx\n<Checkbox\n  label={\n    <span>\n      Long labels will wrap and the indicator <br /> should remain top-aligned.\n    </span>\n  }\n/>\n```\n\n----------------------------------------\n\nTITLE: Calendar Day Properties Interface\nDESCRIPTION: Defines comprehensive properties for calendar day component, including date formatting, navigation, and interaction configurations\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ICalendarDayProps extends IBaseProps<ICalendarDay>, ICalendarDayGridProps {\n    allFocusable?: boolean;\n    className?: string;\n    componentRef?: IRefObject<ICalendarDay>;\n    dateTimeFormatter: IDateFormatting;\n    maxDate?: Date;\n    minDate?: Date;\n    navigatedDate: Date;\n    navigationIcons: ICalendarNavigationIcons;\n    onDismiss?: () => void;\n    onHeaderSelect?: () => void;\n    onNavigateDate: (date: Date, focusOnNavigatedDay: boolean) => void;\n    restrictedDates?: Date[];\n    showCloseButton?: boolean;\n    showSixWeeksByDefault?: boolean;\n    showWeekNumbers?: boolean;\n    strings: ICalendarStrings;\n    styles?: IStyleFunctionOrObject<ICalendarDayStyleProps, ICalendarDayStyles>;\n    theme?: ITheme;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Button-related Types and Constants in TypeScript\nDESCRIPTION: Exports various constants and types related to Button components, including appearance, shape, size, and form target options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport const ButtonAppearance: {\n    readonly primary: \"primary\";\n    readonly outline: \"outline\";\n    readonly subtle: \"subtle\";\n    readonly transparent: \"transparent\";\n};\n\n// @public\nexport type ButtonAppearance = ValuesOf<typeof ButtonAppearance>;\n\n// @public\nexport const ButtonDefinition: FASTElementDefinition<typeof Button>;\n\n// @public\nexport const ButtonFormTarget: {\n    readonly blank: \"_blank\";\n    readonly self: \"_self\";\n    readonly parent: \"_parent\";\n    readonly top: \"_top\";\n};\n\n// @public\nexport type ButtonFormTarget = ValuesOf<typeof ButtonFormTarget>;\n\n// @public\ntype ButtonOptions = StartEndOptions<Button>;\nexport { ButtonOptions }\nexport { ButtonOptions as MenuButtonOptions }\nexport { ButtonOptions as ToggleButtonOptions }\n\n// @public\nexport const ButtonShape: {\n    readonly circular: \"circular\";\n    readonly rounded: \"rounded\";\n    readonly square: \"square\";\n};\n\n// @public\nexport type ButtonShape = ValuesOf<typeof ButtonShape>;\n\n// @public\nexport const ButtonSize: {\n    readonly small: \"small\";\n    readonly medium: \"medium\";\n    readonly large: \"large\";\n};\n\n// @public\nexport type ButtonSize = ValuesOf<typeof ButtonSize>;\n\n// @public\nexport const ButtonTemplate: ElementViewTemplate<Button>;\n\n// @public\nexport const ButtonType: {\n    readonly submit: \"submit\";\n    readonly reset: \"reset\";\n    readonly button: \"button\";\n};\n\n// @public\nexport type ButtonType = ValuesOf<typeof ButtonType>;\n```\n\n----------------------------------------\n\nTITLE: Rendering Label Tooltip for Icon-only Button\nDESCRIPTION: Example of using Tooltip as a label for an icon-only button in the new Fluent UI implementation. This uses the 'label' relationship to provide accessibility.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tooltip/library/docs/Spec.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Tooltip content=\"Copy\" relationship=\"label\">\n  <Button icon={<CopyRegular />} />\n</Tooltip>\n```\n\n----------------------------------------\n\nTITLE: Register Icon Alias Function\nDESCRIPTION: Defines a function, `registerIconAlias`, that registers an alias for an icon name, mapping it to another icon name. This is helpful for providing alternative names for icons.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/style-utilities/etc/style-utilities.api.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n\"export function registerIconAlias(iconName: string, mappedToName: string): void;\"\n```\n\n----------------------------------------\n\nTITLE: SwatchPickerRow DOM Structure\nDESCRIPTION: This snippet shows the DOM structure for a single row within the SwatchPicker. It uses a div element with role \"row\" to represent a row of swatches.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-swatch-picker/library/docs/Spec.md#2025-04-20_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<div role=\"row\">\n  <!-- Content rendered here -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining BasePicker with Generic Types\nDESCRIPTION: BasePicker class offers essential methods to manage picker item interactions, maintain component lifecycle, and handle user inputs within Fluent UI applications. Utilizes generic types for flexibility across different picker implementations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class BasePicker<T extends {}, P extends IBasePickerProps<T>> extends React_2.Component<P, IBasePickerState<T>> implements IBasePicker<T> {\n    constructor(basePickerProps: P);\n    protected addItem: (item: T) => void;\n    ...\n    protected updateValue(updatedValue: string): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Tooltip from v0 to v9 in Fluent UI\nDESCRIPTION: This snippet details the changes needed when migrating the Tooltip component from Fluent UI v0 to v9. It covers changes in prop names, component structure, and positioning options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tooltip/library/docs/MIGRATION.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- `Tooltip`\n  - children => `content`\n  - `trigger` => children\n  - `defaultOpen` => Not supported. The tooltip's visibility can be controlled using the `visible` prop and `onVisibleChange` event.\n  - `mountNode` => Not supported\n  - `open` => `visible`\n  - `onOpenChange` => `onVisibleChange`\n  - `pointing` => `withArrow`\n  - `mouseEnterDelay` => `showDelay`\n  - `mouseLeaveDelay` => `hideDelay`\n  - `subtle={true}` = `appearance=\"normal\"` (default)\n  - `subtle={false}` => `appearance=\"inverted\"`\n  - Positioning props are now attributes of the `positioning` prop:\n    - `flipBoundary` => `positioning.flipBoundary`\n    - `offset` => `positioning.offset`\n    - `overflowBoundary` => `positioning.overflowBoundary`\n    - `popperRef` => `positioning.popperRef`\n    - `position` => `positioning.position`\n    - `align` => `positioning.align`\n    - `positionFixed` => `positioning.positionFixed`\n    - `target` => `positioning.target`\n```\n\n----------------------------------------\n\nTITLE: Updating Positioning Boundaries Configuration\nDESCRIPTION: Adds support for configuring positioning boundaries using a PositioningRect, providing more flexible positioning options\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-positioning/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nboundary: PositioningRect\n```\n\n----------------------------------------\n\nTITLE: Merging style sets with custom prefixes (mergeStyleSets)\nDESCRIPTION: Demonstrates how `mergeStyleSets` automatically prefixes class names with the area name and provides an example of the resulting class name map.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/merge-styles/README.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nmergeStyleSets({ a: { ... }, b: { ... } })\n```\n\n----------------------------------------\n\nTITLE: ProgressBar Class Names Declaration\nDESCRIPTION: Declares the progressBarClassNames constant as a SlotClassNames object. This is likely used for styling the ProgressBar component based on the defined slots.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-progress/library/etc/react-progress.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n// @public (undocumented)\nexport const progressBarClassNames: SlotClassNames<ProgressBarSlots>;\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Equivalent Label in Fluent UI v9\nDESCRIPTION: This snippet shows how to implement the same Label functionality in Fluent UI v9. It imports Label from '@fluentui/react-components' and uses the useId hook from '@fluentui/react-utilities'.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Label.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { Label } from '@fluentui/react-components';\nimport { useId } from '@fluentui/react-utilities';\n\nconst LabelV9BasicExample = () => {\n  const inputId = useId('anInput');\n\n  return (\n    <>\n      <Label htmlFor={inputId}>A Label for an input</Label>\n      <input id={inputId} type=\"text\" />\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Combobox Class Names Definition\nDESCRIPTION: This snippet defines the slot class names for the Combobox component, allowing for custom styling of different parts of the component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/library/etc/react-combobox.api.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport const comboboxClassNames: SlotClassNames<ComboboxSlots>;\"\n```\n\n----------------------------------------\n\nTITLE: Defining FluentProvider Context Values in TypeScript\nDESCRIPTION: The type 'FluentProviderContextValues' combines specific state properties for provider management, such as custom styling hooks and theme-related information. It uses context to manage text direction and icon direction, ensuring cohesive UI behavior.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-provider/library/etc/react-provider.api.md#2025-04-20_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type FluentProviderContextValues = Pick<FluentProviderState, 'customStyleHooks_unstable' | 'theme' | 'overrides_unstable'> & { provider: ProviderContextValue_unstable; themeClassName: ThemeClassNameContextValue_unstable; textDirection: 'ltr' | 'rtl'; iconDirection: IconDirectionContextValue; tooltip: TooltipVisibilityContextValue_unstable; };\n```\n\n----------------------------------------\n\nTITLE: DialogTrigger Props Definition\nDESCRIPTION: Defines the props for the DialogTrigger component. It extends TriggerProps from '@fluentui/react-utilities' and adds action and disableButtonEnhancement properties.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/etc/react-dialog.api.md#2025-04-20_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport type DialogTriggerProps = TriggerProps<DialogTriggerChildProps> & {\n    action?: DialogTriggerAction;\n    disableButtonEnhancement?: boolean;\n};\"\n```\n\n----------------------------------------\n\nTITLE: mergeArrowOffset function\nDESCRIPTION: Defines an internal function `mergeArrowOffset` that accepts `userOffset` of type `Offset | undefined | null` and `arrowHeight` of type number, and returns an `Offset` object. This function merges the user-defined offset with the arrow height to correctly position the element with an arrow.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-positioning/etc/react-positioning.api.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal\nexport function mergeArrowOffset(userOffset: Offset | undefined | null, arrowHeight: number): Offset;\n```\n\n----------------------------------------\n\nTITLE: Suggestions Core and Header/Footer Component Interfaces in TypeScript\nDESCRIPTION: Interfaces for the core props of the Suggestions component and related header/footer items, defining rendering and interaction behaviors.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_187\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface ISuggestionsCoreProps<T> extends React_2.ClassAttributes<any> {\n    componentRef?: IRefObject<{}>;\n    onRenderSuggestion?: (props: T, suggestionItemProps: ISuggestionItemProps<T>) => JSX.Element;\n    onSuggestionClick: (ev?: React_2.MouseEvent<HTMLElement>, item?: any, index?: number) => void;\n    onSuggestionRemove?: (ev?: React_2.MouseEvent<HTMLElement>, item?: IPersonaProps, index?: number) => void;\n    resultsMaximumNumber?: number;\n    shouldLoopSelection: boolean;\n    showRemoveButtons?: boolean;\n    suggestions: ISuggestionModel<T>[];\n    suggestionsAvailableAlertText?: string;\n    suggestionsContainerAriaLabel?: string;\n    suggestionsItemClassName?: string;\n}\n\n// @public (undocumented)\nexport interface ISuggestionsHeaderFooterItemProps {\n    // (undocumented)\n    className: string | undefined;\n    // (undocumented)\n    componentRef?: IRefObject<{}>;\n    // (undocumented)\n    id: string;\n    // (undocumented)\n    isSelected: boolean;\n    // (undocumented)\n    onExecute?: () => void;\n    // (undocumented)\n    renderItem: () => JSX.Element;\n}\n\n// @public (undocumented)\nexport interface ISuggestionsHeaderFooterProps {\n    // (undocumented)\n    ariaLabel?: string;\n    // (undocumented)\n    className?: string;\n    // (undocumented)\n    onExecute?: () => void;\n    // (undocumented)\n    renderItem: () => JSX.Element;\n    // (undocumented)\n    shouldShow: () => boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IDropdownSubComponentStyles Interface in TypeScript\nDESCRIPTION: Defines the IDropdownSubComponentStyles interface with style properties for sub-components of a dropdown, including label, multi-select item, and panel.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_119\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IDropdownSubComponentStyles {\n    label: IStyleFunctionOrObject<ILabelStyleProps, ILabelStyles>;\n    multiSelectItem: IStyleFunctionOrObject<ICheckboxStyleProps, ICheckboxStyles>;\n    panel: IStyleFunctionOrObject<IPanelStyleProps, IPanelStyles>;\n}\n```\n\n----------------------------------------\n\nTITLE: Submenus Implementation - TSX\nDESCRIPTION: This snippet demonstrates how to create a submenu within a main menu structure using React, allowing for nested menu items.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/library/docs/Spec.md#2025-04-20_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nconst menu = (\n  <Menu>\n    <MenuTrigger><button>Opem menu</button></MenuTrigger>\n    <MenuList>\n      <MenuItem>Option 1</MenuItem>\n      <Menu>\n        <MenuTrigger>\n          <MenuItem>Open submenu</MenuItem>\n        </MenuTrigger>\n        <MenuList>\n          <MenuItem>Option 1</MenuItem>\n          <MenuItem>Option 2</MenuItem>\n          <MenuItem>Option 3</MenuItem>\n        </MenuList>\n      </Menu>\n    </MenuList>\n  <Menu>\n)\n```\n\n----------------------------------------\n\nTITLE: Horizontal Stack Layout with Spacing\nDESCRIPTION: This snippet shows how to create a horizontal Stack layout with spacing between items.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Flex/Flex.Stack.stories.mdx#2025-04-20_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nmakeStyles({\n  root: {\n    display: 'flex',\n    flexDirection: 'row',\n    '> :not(:last-child)': {\n      marginRight: '10px',\n    }\n  },\n})\n```\n\nLANGUAGE: css\nCODE:\n```\n.flex {\n  display: flex;\n  flex-direction: row;\n}\n.flex > :not(:last-child) {\n  margin-right: 10px;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering DrawerBody Component in HTML\nDESCRIPTION: This snippet demonstrates how to structure the DrawerBody component in HTML, allowing for scrollable content to be rendered inside the drawer.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-drawer/library/docs/Spec.md#2025-04-20_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"fui-DrawerBody\">\n  <!-- Content rendered here -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic Menu Expected DOM Output - HTML\nDESCRIPTION: This snippet represents the expected HTML output of the basic Menu implementation defined in the TSX snippet, ensuring correct accessibility attributes are used.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/library/docs/Spec.md#2025-04-20_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<button aria-haspopup=\"menu\" aria-expanded=\"true\" id=\"trigger\">Open menu</button>\n<div role=\"menu\" aria-labelledby=\"trigger\">\n  <div role=\"menuitem\" tabindex=\"0\">Option 1</div>\n  <div role=\"menuitem\" tabindex=\"-1\">Option 2</div>\n  <div role=\"menuitem\" tabindex=\"-1\">Option 3</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Custom Styling for Charts with Color Tokens\nDESCRIPTION: Shows how to implement custom styling for a Vertical Stacked Bar Chart using Fluent UI color tokens and font styles. Demonstrates customization of axis text, chart labels, and other visual elements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Charts.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst customStyles: IVerticalStackedBarChartProps['styles'] = () => {\n  return {\n    xAxis: {\n      selectors: {\n        text: { fill: tokens.colorPaletteGreenForeground1, fontSize: tokens.fontSizeBase200 },\n      },\n    },\n    yAxis: {\n      selectors: {\n        text: { fill: tokens.colorPaletteRedForeground2, fontSize: tokens.fontSizeBase300 },\n      },\n    },\n    chartLabel: {\n      color: DefaultPalette.blueMid,\n      ...DefaultFontStyles.large,\n    },\n    xAxisText: {\n      ...textStyle,\n    },\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Component with Dark Theme in FluentUI\nDESCRIPTION: This snippet demonstrates how to create a Text component with dark theme styling using makeStyles from FluentUI. It applies a different shade of red for the text color and bold font weight.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-text/library/docs/MIGRATION.md#2025-04-20_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeStyles, Text } from '@fluentui/react-components';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n     color: 'rgb(231, 53, 80)',\n     fontWeight: 700\n  },\n})\n\nconst MyComponent = () => {\n    const styles = useStyles()\n\n    return <Text className={styles.root}>{...}</Text>\n}\n```\n\n----------------------------------------\n\nTITLE: Radio and RadioGroup Component Definitions\nDESCRIPTION: Complete implementation of Radio and RadioGroup components with form association and validation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_48\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class Radio extends BaseCheckbox {\n    constructor();\n    connectedCallback(): void;\n    protected disabledChanged(prev: boolean | undefined, next: boolean | undefined): void;\n    protected requiredChanged(): void;\n    setFormValue(): void;\n    setValidity(): void;\n    toggleChecked(force?: boolean): void;\n}\n\nexport class RadioGroup extends FASTElement {\n    constructor();\n    changeHandler(e: Event): boolean | void;\n    protected checkedIndex: number;\n    protected checkedIndexChanged(prev: number | undefined, next: number): void;\n    checkRadio(index?: number, shouldEmit?: boolean): void;\n    checkValidity(): boolean;\n    static formAssociated: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ARIA Attributes for Multiselect Dropdown Options in Markdown\nDESCRIPTION: This snippet defines the ARIA attributes for options in a multiselect dropdown. It specifies the roles and states for both selected and unselected options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/stories/src/Dropdown/DropdownAccessibility.stories.mdx#2025-04-20_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n| Name        | Role   | States and properties   |\n| ----------- | ------ | ----------------------- |\n| (1a) Banana | option | `aria-selected=\"false\"` |\n| (1b) Banana | option | `aria-selected=\"true\"`  |\n```\n\n----------------------------------------\n\nTITLE: Implementing Tooltip Component in TypeScript\nDESCRIPTION: Defines the Tooltip component as a FAST element with properties for anchor, delay, and positioning. Includes event handlers for focus, blur, and mouse events to control tooltip visibility.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_83\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport class Tooltip extends FASTElement {\n    constructor();\n    anchor: string;\n    // @internal\n    protected anchorPositioningStyleElement: HTMLStyleElement | null;\n    blurAnchorHandler: () => void;\n    // (undocumented)\n    connectedCallback(): void;\n    delay?: number;\n    // (undocumented)\n    disconnectedCallback(): void;\n    elementInternals: ElementInternals;\n    focusAnchorHandler: () => void;\n    // @internal\n    hideTooltip(delay?: number): void;\n    id: string;\n    mouseenterAnchorHandler: () => void;\n    mouseleaveAnchorHandler: () => void;\n    positioning?: TooltipPositioningOption;\n    // @internal\n    positioningChanged(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: useFieldStyles_unstable Definition\nDESCRIPTION: This snippet defines the useFieldStyles_unstable hook. It takes FieldState and returns FieldState.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-field/library/etc/react-field.api.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const useFieldStyles_unstable: (state: FieldState) => FieldState;\"\n```\n\n----------------------------------------\n\nTITLE: Defining IDropdown Interface in TypeScript\nDESCRIPTION: Defines the IDropdown interface with methods for dismissing the menu, focusing, and accessing selected options. This interface is marked as @public but undocumented.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_114\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IDropdown {\n    dismissMenu: () => void;\n    // (undocumented)\n    focus: (shouldOpenOnFocus?: boolean) => void;\n    readonly selectedOptions: IDropdownOption[];\n}\n```\n\n----------------------------------------\n\nTITLE: Component Mapping between Fluent React 9 and Fluent Web Components 3\nDESCRIPTION: Provides a mapping between Fluent UI React 9 and Fluent Web Components 3 implementations of RadioGroup, showing the component and slot equivalents.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/radio-group/README.md#2025-04-20_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n**Component and Slot Mapping**\n\n| Fluent UI React 9 | Fluent Web Components 3 |\n| ----------------- | ----------------------- |\n| `<RadioGroup>`    | `<fluent-radio-group>`  |\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for DialogSurface and Slots in TypeScript\nDESCRIPTION: Describes the type definition for DialogSurface component used in a Dialog, including the backdrop slot, emphasizing its visual properties.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/docs/Spec.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype DialogSurfaceSlots = {\n  backdrop?: Slot<'div'>;\n  root: NonNullable<Slot<'dialog', 'div'>>;\n};\n```\n\n----------------------------------------\n\nTITLE: Style Interfaces for Calendar Component\nDESCRIPTION: Interfaces defining style props and styles for the main Calendar component, including flags for visibility and layout options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-calendar-compat/library/etc/react-calendar-compat.api.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport interface CalendarStyleProps {\n    className?: string;\n    isDayPickerVisible?: boolean;\n    isMonthPickerVisible?: boolean;\n    monthPickerOnly?: boolean;\n    overlaidWithButton?: boolean;\n    // @deprecated (undocumented)\n    overlayedWithButton?: boolean;\n    showGoToToday?: boolean;\n    showMonthPickerAsOverlay?: boolean;\n    showWeekNumbers?: boolean;\n}\n\n// @internal (undocumented)\nexport interface CalendarStyles {\n    // (undocumented)\n    divider: string;\n    // (undocumented)\n    goTodayButton: string;\n    // (undocumented)\n    liveRegion: string;\n    // (undocumented)\n    monthPickerWrapper: string;\n    root: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ToolbarDivider Props Interface in TypeScript\nDESCRIPTION: TypeScript interface for the ToolbarDivider component based on Divider component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-toolbar/library/docs/Spec.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype ToolbarDividerProps = ComponentProps<Partial<DividerSlots>>;\n```\n\n----------------------------------------\n\nTITLE: Defining IDragDropEvent Interface in TypeScript\nDESCRIPTION: Defines the IDragDropEvent interface with an optional isHandled property. This interface is marked as @public but undocumented.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_107\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IDragDropEvent {\n    isHandled?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Default Tablist Implementation in HTML\nDESCRIPTION: This snippet demonstrates the default horizontal arrangement of a Tablist component. The developer sets the `activeid` attribute. The component handles the logic for showing and hiding content based on tab clicks. The order of tabs must match the order of tab panels for correct indexing.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/tablist/readme.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<fluent-tablist>\n  <fluent-tab>One / Left</fluent-tab>\n  <fluent-tab>Two / Middle</fluent-tab>\n  <fluent-tab>Three / Right</fluent-tab>\n</fluent-tablist>\n```\n\n----------------------------------------\n\nTITLE: Adding Package to Dependencies in just.config.ts\nDESCRIPTION: Shows how to update the dependencies array in apps/pr-deploy-site/just.config.ts to include a new package that should be included in the PR deployment site.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/pr-deploy-site/README.md#2025-04-20_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n```diff\nconst dependencies = [\n '@fluentui/react-button',\n+ '@fluentui/react-clippy'\n];\n```\n```\n\n----------------------------------------\n\nTITLE: Updating and Rendering Lists in React with Fluent UI\nDESCRIPTION: This snippet demonstrates how to update and render a list in a React component using Fluent UI. It showcases altering the 'items' array in the component state to trigger a re-render. Dependencies include React and Fluent UI. Key inputs include the list items managed in the state, with the output being the re-rendered list reflecting updates.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-examples/src/react/List/docs/ListBestPractices.md#2025-04-20_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\npublic appendItems(): void {\n  const { items } = this.state;\n\n  this.setState({\n    items: [...items, ...[{ name: 'Foo' }, { name: 'Bar' }]]\n  })\n}\n\npublic render(): JSX.Element {\n  const { items } = this.state;\n\n  return <List items={items} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Combobox with Non-Option Children\nDESCRIPTION: This code snippet shows how to include non-Option children (like a divider) inside a Combobox, and the importance of adding `role=\"presentation\"` to maintain accessibility.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/library/docs/Spec.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n<Combobox>\n  <Option key=\"A\">Option A</Option>\n  <span role=\"none\" className=\"my-fancy-divider\" />\n  <Option key=\"B\">Option B</Option>\n</Combobox>\n```\n\n----------------------------------------\n\nTITLE: DialogActions State Definition\nDESCRIPTION: Defines the state for the DialogActions component, using ComponentState from '@fluentui/react-utilities'.  It incorporates the slots and the position and fluid props.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/etc/react-dialog.api.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport type DialogActionsState = ComponentState<DialogActionsSlots> & Pick<Required<DialogActionsProps>, 'position' | 'fluid'>;\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with Fluent UI React Table Stories\nDESCRIPTION: This JavaScript snippet defines the configuration for including specific Storybook stories associated with the Fluent UI React Table. It uses glob patterns to identify the story files, including those with the '.mdx', '.ts', and '.tsx' extensions located in designated directories. The configuration is pivotal for proper loading of the stories in a Storybook environment.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-table/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-table/stories/src/**/*.stories.mdx', '../packages/react-components/react-table/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Updating List Items in React with Immutable Patterns\nDESCRIPTION: This TypeScript snippet demonstrates a react component method to update list items immutably to ensure proper re-rendering. It uses ES6 spread syntax to avoid mutating the original array directly, aligning with best practices for React state management. The method updates the component state with a new array, prompting the list to re-render.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-examples/src/react/GroupedList/docs/GroupedListBestPractices.md#2025-04-20_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\npublic appendItems(): void {\n  const { items } = this.state;\n\n  this.setState({\n    items: [...items, ...['Foo', 'Bar']]\n  })\n}\n\npublic render(): JSX.Element {\n  const { items } = this.state;\n\n  return <GroupedList items={items} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Keytips Usage with Buttons in Fluent UI v8\nDESCRIPTION: Demonstrates how to use Keytips with Buttons in Fluent UI v8. In this version, some components have keytipProps as part of their props API.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Keytips.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport const KeytipsBasicExampleV8 = () => {\n  return (\n    <Button\n      keytipProps={{\n        keySequences: ['aa'],\n        onExecute: () => console.log('Button'),\n        content: 'AA',\n      }}\n      text=\"Button\"\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Animation in a Component\nDESCRIPTION: Shows how to implement a custom animation feature for opening and closing a drawer using motion states.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/component-transitions-on-mount-or-unmount.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\nimport { makeStyles, mergeClasses, Drawer, Button } from '@fluentui/react-components';\nimport { useMotion } from '@fluentui/react-motion-preview';\n\nconst useStyles = makeStyles({\n  drawer: {\n    opacity: 0,\n    transitionDuration: '3s',\n    transitionProperty: 'opacity',\n  },\n\n  drawerVisible: {\n    opacity: 1,\n  },\n});\n\nexport const CustomAnimation = () => {\n  const styles = useStyles();\n\n  const [open, setOpen] = React.useState(false);\n  const motion = useMotion<HTMLDivElement>(open);\n\n  const onClick = () => setOpen(!open);\n\n  return (\n    <div className={styles.root}>\n      <Button appearance=\"primary\" onClick={onClick}>\n        Toggle\n      </Button>\n      <Drawer open={motion} className={mergeClasses(styles.drawer, motion.active && styles.drawerVisible)} />;\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering DrawerHeader with Navigation in HTML\nDESCRIPTION: This snippet describes how to create a DrawerHeader that includes navigation controls along with the title, facilitating user interaction and accessibility.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-drawer/library/docs/Spec.md#2025-04-20_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<header tabindex=\"-1\" aria-labelledby=\"the-title-element-id\">\n  <nav class=\"fui-DrawerHeader__navigation\">\n    <button type=\"button\" aria-label=\"Return back to content\">\n      <!-- Back button content -->\n    </button>\n\n    <button type=\"button\" aria-label=\"Refresh content\">\n      <!-- Refresh button content -->\n    </button>\n\n    <button type=\"button\" aria-label=\"Open settings\">\n      <!-- Settings button content -->\n    </button>\n\n    <button type=\"button\" aria-label=\"Close drawer panel\">\n      <!-- Close button content -->\n    </button>\n  </nav>\n\n  <!-- The title content is free, but ideally this should be a heading element -->\n  <div class=\"fui-DrawerHeader__title\" id=\"the-title-element-id\">Title goes here</div>\n</header>\n```\n\n----------------------------------------\n\nTITLE: HTML DOM Structure for Breadcrumb Component\nDESCRIPTION: Recommended HTML structure for rendering a Breadcrumb component with semantic roles and accessibility attributes\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Breadcrumb.md#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<nav id=\"breadcrumb\" class=\"breadcrumb-ui\" aria-label=\"Breadcrumb\">\n  <div role=\"list\">\n    <div role=\"listitem\" class=\"breadcrumb-ui__item\"></div>\n    <span aria-hidden=\"true\" class=\"breadcrumb-ui__divider\"></span>\n    <div role=\"listitem\" class=\"breadcrumb-ui__item\"></div>\n  </div>\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Example YAML CI Pipeline Configuration\nDESCRIPTION: YAML configuration showing type-check preparation steps in CI pipeline\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/shared/build-system/08-type-checking-perf-improvements.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- script: node ./scripts/executors/src/type-check-ci-hack.js --base $(targetBranch)\n    displayName: type-check perf preparation\n- script: yarn buildci $(sinceArg)\n```\n\n----------------------------------------\n\nTITLE: Dropdown State Definition\nDESCRIPTION: This snippet defines the state for the Dropdown component. It extends ComboboxBaseState, omitting the 'freeform' property, and adds properties for placeholder visibility, showing the clear button, and an active descendant controller.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/library/etc/react-combobox.api.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport type DropdownState = ComponentState<DropdownSlots> & Omit<ComboboxBaseState, 'freeform'> & {\n    placeholderVisible: boolean;\n    showClearButton?: boolean;\n    activeDescendantController: ActiveDescendantImperativeRef;\n};\"\n```\n\n----------------------------------------\n\nTITLE: Managing Nav Drawer in Fluent UI\nDESCRIPTION: Describes the NavDrawer component alongside its body, header, and footer, ensuring proper encapsulation of navigation items with interaction and layout capabilities. Integrates with Fluent UI's drawer and slot structures.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-nav-preview/library/etc/react-nav-preview.api.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const NavDrawer: ForwardRefComponent<NavDrawerProps>;\n\n// @public\nexport const NavDrawerBody: ForwardRefComponent<NavDrawerBodyProps>;\n\n// @public (undocumented)\nexport const navDrawerBodyClassNames: SlotClassNames<NavDrawerBodySlots>;\n\n// @public\nexport type NavDrawerBodyProps = DrawerBodyProps;\n\n// @public\nexport const NavSubItemGroup: ForwardRefComponent<NavSubItemGroupProps>;\n\n// @public (undocumented)\nexport const navSubItemGroupClassNames: SlotClassNames<NavSubItemGroupSlots>;\n```\n\n----------------------------------------\n\nTITLE: Unstable Persona Hook (TypeScript)\nDESCRIPTION: Defines the `usePersona_unstable` hook, which is responsible for managing the state of the Persona component. It takes `PersonaProps` and a ref as input and returns a `PersonaState` object. This hook is marked as unstable, meaning its API may change.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-persona/library/etc/react-persona.api.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const usePersona_unstable: (props: PersonaProps, ref: React_2.Ref<HTMLElement>) => PersonaState;\"\n```\n\n----------------------------------------\n\nTITLE: Date Range Type Enumeration - TypeScript\nDESCRIPTION: This enumeration defines various types of date ranges such as Day, Week, Month, and WorkWeek, facilitating the management of date ranges.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/date-time-utilities/etc/date-time-utilities.api.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport enum DateRangeType {\n    // (undocumented)\n    Day = 0,\n    // (undocumented)\n    Month = 2,\n    // (undocumented)\n    Week = 1,\n    // (undocumented)\n    WorkWeek = 3\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Stylesheet and ShadowDomStylesheet Classes in TypeScript\nDESCRIPTION: This snippet defines the Stylesheet and ShadowDomStylesheet classes, which are used to manage stylesheets in regular and shadow DOM contexts respectively. These classes provide methods for inserting rules, caching class names, and managing stylesheet instances.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/merge-styles/etc/merge-styles.api.md#2025-04-20_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class Stylesheet {\n    constructor(config?: IStyleSheetConfig, serializedStylesheet?: ISerializedStylesheet);\n    argsFromClassName(className: string): IStyle[] | undefined;\n    cacheClassName(className: string, key: string, args: IStyle[], rules: string[]): void;\n    classNameFromKey(key: string): string | undefined;\n    getClassName(displayName?: string): string;\n    getClassNameCache(): {\n        [key: string]: string;\n    };\n    static getInstance(shadowConfig?: ShadowConfig): Stylesheet;\n    getRules(includePreservedRules?: boolean): string;\n    insertedRulesFromClassName(className: string): string[] | undefined;\n    insertRule(rule: string, preserve?: boolean, stylesheetKey?: string): void;\n    onInsertRule(callback: Function | InsertRuleCallback): Function;\n    onReset(callback: Function): Function;\n    reset(): void;\n    resetKeys(): void;\n    serialize(): string;\n    setConfig(config?: IStyleSheetConfig): void;\n}\n\nexport class ShadowDomStylesheet extends Stylesheet {\n    constructor(config?: IStyleSheetConfig, serializedStylesheet?: ISerializedStylesheet);\n    getAdoptedSheets(): Map<string, ExtendedCSSStyleSheet>;\n    static getInstance(shadowConfig?: ShadowConfig): ShadowDomStylesheet;\n    insertRule(rule: string, preserve?: boolean): void;\n    onAddSheet(callback: AddSheetCallback): Function;\n}\n```\n\n----------------------------------------\n\nTITLE: Combobox Public Structure\nDESCRIPTION: This example shows the publicly accessible structure of the Combobox component, using OptionGroup and Option components to create a grouped list.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/library/docs/Spec.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n<Combobox placeholder=\"Select an option\">\n  <OptionGroup label=\"Group 1\">\n    <Option key=\"A\">Option A</Option>\n    <Option key=\"B\">Option B</Option>\n  </OptionGroup>\n  <OptionGroup label=\"Group 2\">\n    <Option key=\"C\">Option C</Option>\n    <Option key=\"D\">Option D</Option>\n  </OptionGroup>\n</Combobox>\n```\n\n----------------------------------------\n\nTITLE: List Component Public Structure\nDESCRIPTION: Shows the basic public structure of the List component with ListItem children. This represents how developers would typically use the component in their code.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-list/library/docs/Spec.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<List>\n  <ListItem />\n  <ListItem />\n  <ListItem />\n</List>\n```\n\n----------------------------------------\n\nTITLE: Breadcrumb DOM Structure in HTML\nDESCRIPTION: HTML structure of the Breadcrumb component, showing the semantic markup using nav and ol elements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-breadcrumb/library/docs/Spec.md#2025-04-20_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<nav aria-label=\"breadcrumb\">\n  <ol>\n  {children}\n  </ol>\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Verifying CodeMod Results with Jest - TypeScript\nDESCRIPTION: This TypeScript code uses Jest to verify that the changes made by the codemod are correct, running assertions to check for expected conditions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/codemods/documentation/howTo.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// inside the 'it' body of a test\nexpect(somePredicate).toBeTruthy(); // Test fails if SOMEPREDICATE is false\nexpect(somePredicate).toBeFalsy(); // Test fails if SOMEPREDICATE is true.\n```\n\n----------------------------------------\n\nTITLE: Defining DonutChart Interfaces in TypeScript\nDESCRIPTION: Defines interfaces for DonutChart component props, styles, and data structures. Includes options for customization such as enabling gradients, rounding corners, and showing labels in percent.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/etc/react-charting.api.md#2025-04-20_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface IDonutChartProps extends ICartesianChartProps {\n    calloutProps?: Partial<ICalloutProps>;\n    componentRef?: IRefObject<IChart>;\n    culture?: string;\n    data?: IChartProps;\n    enableGradient?: boolean;\n    hideLabels?: boolean;\n    innerRadius?: number;\n    onRenderCalloutPerDataPoint?: IRenderFunction<IChartDataPoint>;\n    roundCorners?: boolean;\n    showLabelsInPercent?: boolean;\n    styles?: IStyleFunctionOrObject<IDonutChartStyleProps, IDonutChartStyles>;\n    valueInsideDonut?: string | number;\n}\n\nexport interface IDonutChartStyleProps extends ICartesianChartStyleProps {\n}\n\nexport interface IDonutChartStyles {\n    chart?: IStyle;\n    legendContainer: IStyle;\n    root?: IStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Predefined Motions as Components\nDESCRIPTION: This code shows how to use predefined motions, both as objects and as components, created with the `createMotionComponent` factory. The `FadeEnterSlow` component is created from the `fade` motion object and used to animate a `div` element.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/motion-definition-n-apis.md#2025-04-20_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type AtomMotion, createMotionComponent, motionTokens } from '@fluentui/react-motions-preview';\n\n// 💡Consumers will have the option to use either predefined motions as objects or as components.\n//   They won't need to define custom motions unless they specifically want to.\nconst fade: AtomMotion = {\n  keyframes: [{ opacity: 0 }, { opacity: 1 }],\n  duration: motionTokens.durationUltraFast,\n};\n\nconst FadeEnterSlow = createMotionComponent(fade);\n\nfunction MyComponent() {\n  return (\n    <FadeEnterSlow iterations={Infinity}>\n      <div>Hello world!</div>\n    </FadeEnterSlow>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting SpinButton Display in React\nDESCRIPTION: Illustrates how to format the display value of a SpinButton component. It uses custom formatter and parser functions to transform the internal value into a display string and vice versa. The component maintains both formatted and numeric values, updating them accordingly.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-spinbutton/library/docs/Spec.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype SpinButtonChangeData = {\n  value: number;\n};\n\ntype FormatterFn = (value: number) => string;\ntype ParserFn = (formattedValue: string) => number;\n\n// Takes a number in and returns a formatted string\n// Ex: 12 becomes \\\"12 pt\\\"\nconst fontFormatter: FormatterFn = value => {\n  return `${value} pt`;\n};\n\n// Takes a formatted string in and returns a number\n// Ex: \\\"12 pt\\\" becomes 12\nconst fontParser: ParserFn = formattedValue => {\n  return parseFloat(formattedValue);\n};\n\nconst [value, setValue] = useState<number>(3);\nconst [displayValue, setDisplayValue] = useState<string>(formatter(3));)\n\nconst onControlledExampleChange = (_event, data: SpinButtonChangeData) => {\n  if (data.value !== undefined) {\n    setValue(data.value);\n    setDisplayValue(fontFormatter(data.value));\n  } else if (data.displayValue !== undefined) {\n    const nextValue = fontParser(data.displayValue);\n    setValue(nextValue);\n    setDisplayValue(fontFormatter(nextValue));\n  }\n};\n\n<SpinButton\n  value={value}\n  displayValue={displayValue}\n  onChange={onControlledExampleChange}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining KeytipLayerBase Class in TypeScript\nDESCRIPTION: Implementation of the KeytipLayerBase class that extends React Component. This class manages keyboard shortcuts (keytips) in the UI, with methods for processing input, showing keytips, and managing keytip sequences.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_229\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class KeytipLayerBase extends React_2.Component<IKeytipLayerProps, IKeytipLayerState> {\n    constructor(props: IKeytipLayerProps, context: any);\n    // (undocumented)\n    componentDidMount(): void;\n    // (undocumented)\n    componentWillUnmount(): void;\n    // (undocumented)\n    static contextType: React_2.Context<WindowProviderProps>;\n    // (undocumented)\n    static defaultProps: IKeytipLayerProps;\n    // (undocumented)\n    getCurrentSequence(): string;\n    // Warning: (ae-forgotten-export) The symbol \"KeytipTree\" needs to be exported by the entry point index.d.ts\n    //\n    // (undocumented)\n    getKeytipTree(): KeytipTree;\n    processInput(key: string, ev?: React_2.KeyboardEvent<HTMLElement>): void;\n    processTransitionInput(transitionKey: IKeytipTransitionKey, ev?: React_2.KeyboardEvent<HTMLElement>): void;\n    // (undocumented)\n    render(): JSX.Element;\n    showKeytips(ids: string[]): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Component Extension Utility - TypeScript\nDESCRIPTION: Function for extending a React component with additional methods.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/utilities/etc/utilities.api.md#2025-04-20_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function extendComponent<T extends React_2.Component>(parent: T, methods: {\n    [key in keyof T]?: T[key];\n}): void;\n```\n\n----------------------------------------\n\nTITLE: Scope keydown event listener to FocusZone in react-focus\nDESCRIPTION: This patch modifies the keydown event listener in the FocusZone component to be scoped to the FocusZone itself instead of the window.  This change prevents potential conflicts with other event listeners and improves the overall behavior of the FocusZone.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-focus/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nfix: Scope keydown event listener so that it is added to the FocusZone itself instead of the window. ([PR #24175](https://github.com/microsoft/fluentui/pull/24175) by makotom@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: HTML Structure of ProgressBar Component\nDESCRIPTION: This snippet illustrates the structural HTML representation of the ProgressBar component. It shows how the component is composed of a root div and a child div that represents the animated progress bar.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-progress/library/docs/Spec.md#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"fui-ProgressBar\">\n  <!-- Bar for Progress -->\n  <div class=\"fui-ProgressBar__bar\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Typography with SCSS in Fluent UI\nDESCRIPTION: Shows how to use SCSS variables and mixins from office-ui-fabric-core or @fluentui/react to apply typography styles. Demonstrates both variable and mixin approaches.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Styles/TypographyPage/docs/web/TypographyImplementation.md#2025-04-20_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n// Import all mixins and variables.\n// (These are also available from '@fluentui/react/dist/sass/References'.)\n@import 'office-ui-fabric-core/dist/sass/References';\n\n.myClass1 {\n  font-size: $ms-font-size-42; // Using variables\n}\n\n.myClass2 {\n  @include ms-fontSize-42; // Using mixins\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TagPickerControl Properties in TypeScript\nDESCRIPTION: This TypeScript definition outlines the TagPickerControl component's properties, handling visual aspects and UI interactions such as secondary actions and expand icons. Secondary actions can be button-like elements for additional interactivity, while expand icons indicate component expandability. This helps consistently manage layout and functionality within the TagPicker UI component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/Spec.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type TagPickerControlSlots = {\n  root: Slot<'div'>;\n  /**\n   * A secondary action should be a button-like element to be rendered right after\n   * the trigger responsible for opening/closing the tag picker popover.\n   */\n  secondaryAction: Slot<'span'>;\n  /**\n   * An expandIcon could be any non focusable element (preferably an icon)\n   * to be rendered by the end of the control, it is used by default to\n   * indicate that this component is expandable\n   */\n  expandIcon: Slot<'span'>;\n};\nexport type TagPickerControlProps = ComponentProps<Partial<TagPickerControlSlots>>;\n```\n\n----------------------------------------\n\nTITLE: Defining TreeChart Data Structure Interface\nDESCRIPTION: Defines the data structure for TreeChart nodes. Each node contains a main text, subtext, border color, and an array of child nodes. This structure is used to build the hierarchical tree visualization.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/src/components/TreeChart/TreeChart.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nDataStructure: ITreeChartDataPoint {\n    name: main text,\n    subname: sub text,\n    fill: border color,\n    children: Array of child nodes\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Grid Columns and Rows Migration\nDESCRIPTION: Shows migration of simple grid columns and rows configuration\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Grid.stories.mdx#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// in COMPONENT_NAME.tsx\nimport { Grid } from '@fluentui/react-northstar';\n\nexport const Component = () => <Grid columns=\"2\" rows=\"2\" />;\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// in COMPONENT_NAME.tsx\nimport { Grid } from '@fluentui/react-migration-v0-v9';\n\nexport const Component = () => <Grid columns={2} rows={2} />;\n```\n\n----------------------------------------\n\nTITLE: Defining Legends Component in TypeScript\nDESCRIPTION: The Legends constant exports a functional component that renders legends for charts, accepting props to customize its appearance and functionality.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/etc/react-charting.api.md#2025-04-20_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const Legends: React_2.FunctionComponent<ILegendsProps>;\n```\n\n----------------------------------------\n\nTITLE: Disabling Motion by Passing null to motion Prop in React\nDESCRIPTION: This example shows how to disable motion in a component by passing null to the motion prop. This approach provides a simple way to remove motion from a component when needed.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/motion-definition-n-apis.md#2025-04-20_snippet_36\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App() {\n  const classes = useClasses();\n  const [visible, setVisible] = useState(false);\n\n  return (\n    <>\n      <Drawer open={visible} motion={null} />\n      {/* other components */}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Icons in Fluent UI React (TypeScript)\nDESCRIPTION: This snippet demonstrates how to initialize icons from the @fluentui/font-icons-mdl2 package. It shows two methods: using the default SharePoint CDN and specifying a custom CDN.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/font-icons-mdl2/README.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { initializeIcons } from '@fluentui/font-icons-mdl2';\n\n// Register icons and pull the fonts from the default SharePoint cdn.\ninitializeIcons();\n\n// ...or, register icons and pull the fonts from your own cdn:\ninitializeIcons('https://my.cdn.com/path/to/icons/');\n```\n\n----------------------------------------\n\nTITLE: Defining Font Face Utility in TypeScript\nDESCRIPTION: Allows dynamic definition of custom font faces with comprehensive font styling options including font display, feature settings, and unicode range\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/merge-styles/etc/merge-styles.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport function fontFace(font: IFontFace): void;\n```\n\n----------------------------------------\n\nTITLE: Tag Picker Control Render Function\nDESCRIPTION: This is the render function for the TagPickerControl component. It takes the state and renders the JSX element that controls the TagPicker.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const renderTagPickerControl_unstable: (state: TagPickerControlState) => JSX.Element;\"\n```\n\n----------------------------------------\n\nTITLE: FluentUI React Combobox Changelog Entry Beta.13\nDESCRIPTION: Version 9.0.0-beta.13 changelog entry showing dependency updates, bug fixes and features like adding red border for aria-invalid state.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/library/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.0.0-beta.13](https://github.com/microsoft/fluentui/tree/@fluentui/react-combobox_v9.0.0-beta.13)\n\nThu, 20 Oct 2022 08:39:30 GMT\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-combobox_v9.0.0-beta.12..@fluentui/react-combobox_v9.0.0-beta.13)\n\n### Changes\n\n- chore: Update Griffel to latest version ([PR #25212](https://github.com/microsoft/fluentui/pull/25212) by olfedias@microsoft.com)\n- chore: Bump peer deps to support React 18 ([PR #24972](https://github.com/microsoft/fluentui/pull/24972) by mgodbolt@microsoft.com)\n- feat: Add red border when aria-invalid is set ([PR #25252](https://github.com/microsoft/fluentui/pull/25252) by behowell@microsoft.com)\n- Bump @fluentui/react-context-selector to v9.0.5 ([PR #25265](https://github.com/microsoft/fluentui/pull/25265) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Tag with Icon\nDESCRIPTION: This snippet shows how to include an icon within a `<Tag>` component.  The `icon` prop accepts an SVGIcon component to display an icon alongside the tag's content.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tags/library/README.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Tag icon={<SVGIcon />}>Content</Tag>\n```\n\n----------------------------------------\n\nTITLE: Defining Annotations Interface in TypeScript\nDESCRIPTION: This code snippet defines the Annotations interface, which extends the Label interface and includes properties for arrow styling, positioning, and text display in chart annotations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/chart-utilities/etc/chart-utilities.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Annotations extends Label {\n    align: 'left' | 'center' | 'right';\n    arrowcolor: string;\n    arrowhead: number;\n    arrowside: 'end' | 'start';\n    arrowsize: number;\n    arrowwidth: number;\n    ax: number;\n    axref: 'pixel' | XAxisName;\n    ay: number;\n    ayref: 'pixel' | YAxisName;\n    borderpad: number;\n    borderwidth: number;\n    captureevents: boolean;\n    clicktoshow: false | 'onoff' | 'onout';\n    height: number;\n    hoverlabel: Partial<HoverLabel>;\n    hovertext: string;\n    opacity: number;\n    showarrow: boolean;\n    standoff: number;\n    startarrowhead: number;\n    startarrowsize: number;\n    startstandoff: number;\n    text: string;\n    textangle: string;\n    valign: 'top' | 'middle' | 'bottom';\n    visible: boolean;\n    width: number;\n    x: number | string;\n    xanchor: 'auto' | 'left' | 'center' | 'right';\n    xclick: any;\n    xref: 'paper' | XAxisName;\n    xshift: number;\n    y: number | string;\n    yanchor: 'auto' | 'top' | 'middle' | 'bottom';\n    yclick: any;\n    yref: 'paper' | YAxisName;\n    yshift: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering v9 Slider Examples in Storybook\nDESCRIPTION: This snippet demonstrates how to render the v9 Slider examples within a Storybook story. It passes the raw code to the `source` parameter for documentation and wraps the examples in a div to provide flexbox styling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Slider/Slider.stories.mdx#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n\"<Canvas>\\n  <Story parameters={{ docs: { source: { code: v9Demo } } }} name=\\\"v9 Example\\\">\\n    <div style={{ display: 'flex', flexDirection: 'column' }}>\\n      <V9BasicExample />\\n      <V9SnappingExample />\\n      <V9ControlledExample />\\n      <V9FormattedValueExample />\\n    </div>\\n  </Story>\\n</Canvas>\"\n```\n\n----------------------------------------\n\nTITLE: Public and Internal Structure of Image Component - React (TypeScript)\nDESCRIPTION: The provided snippets illustrate the public API structure of the Image component as well as its internal rendering mechanism using JSX and props.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-image/library/docs/Spec.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<Image src=\"..\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\n<slots.root {...slotProps.root} />\n```\n\n----------------------------------------\n\nTITLE: Combobox Slots Definition\nDESCRIPTION: This snippet defines the slots for the Combobox component, allowing for customization of different parts of the component.  It includes slots for the root element, expand icon, clear icon, input element, and listbox.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/library/etc/react-combobox.api.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport type ComboboxSlots = {\n    root: NonNullable<Slot<'div'>>;\n    expandIcon?: Slot<'span'>;\n    clearIcon?: Slot<'span'>;\n    input: NonNullable<Slot<'input'>>;\n    listbox?: Slot<typeof Listbox>;\n};\"\n```\n\n----------------------------------------\n\nTITLE: Link Element with `href` in Material-UI\nDESCRIPTION: Describes a Link styled with Material-UI classes, requiring their CSS framework and a filled href to function as intended.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Link.md#2025-04-20_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<a class=\\\"MuiTypography-root MuiLink-root MuiLink-underlineHover jss243 MuiTypography-colorPrimary\\\" href=\\\"#\\\"> Link </a>\n```\n\n----------------------------------------\n\nTITLE: Defining IDropdownStyleProps Type in TypeScript\nDESCRIPTION: Defines the IDropdownStyleProps type as a subset of IDropdownProps with additional style-related properties for theming and visual states.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_117\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport type IDropdownStyleProps = Pick<IDropdownProps, 'theme' | 'className' | 'disabled' | 'required'> & {\n    hasError: boolean;\n    hasLabel: boolean;\n    isOpen: boolean;\n    isRenderingPlaceholder: boolean;\n    panelClassName?: string;\n    calloutClassName?: string;\n    calloutRenderEdge?: RectangleEdge;\n};\n```\n\n----------------------------------------\n\nTITLE: Style Interfaces for CalendarDayGrid\nDESCRIPTION: Interfaces defining style props and styles for the CalendarDayGrid component, including class names for various day states and grid elements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-calendar-compat/library/etc/react-calendar-compat.api.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport interface CalendarDayGridStyleProps {\n    animateBackwards?: boolean;\n    animationDirection?: AnimationDirection;\n    className?: string;\n    dateRangeType?: DateRangeType;\n    lightenDaysOutsideNavigatedMonth?: boolean;\n    showWeekNumbers?: boolean;\n}\n\n// @internal (undocumented)\nexport interface CalendarDayGridStyles {\n    dayButton?: string;\n    dayCell?: string;\n    dayIsToday?: string;\n    dayMarker?: string;\n    dayOutsideBounds?: string;\n    dayOutsideNavigatedMonth?: string;\n    daySelected?: string;\n    daySingleSelected?: string;\n    dayTodayMarker?: string;\n    firstTransitionWeek?: string;\n    lastTransitionWeek?: string;\n    table?: string;\n    weekDayLabelCell?: string;\n    weekNumberCell?: string;\n    weekRow?: string;\n    wrapper?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Card Component in Northstar v0\nDESCRIPTION: Example demonstrating the implementation of a Card component in Northstar v0 with header and body sections, including avatar and text elements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-card/library/docs/Spec.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Card>\n  <CardHeader>\n    <Flex gap=\"gap.small\">\n      <Avatar\n        image=\"https://fabricweb.azureedge.net/fabric-website/assets/images/avatar/RobertTolbert.jpg\"\n        label=\"Forward Division Analyst\"\n        name=\"Lura Hermiston\"\n        status=\"unknown\"\n      />\n      <Flex column>\n        <Text content=\"Lura Hermiston\" weight=\"bold\" />\n        <Text content=\"Forward Division Analyst\" size=\"small\" />\n      </Flex>\n    </Flex>\n  </CardHeader>\n  <CardBody>Sit quaerat dolorem quos sit et dolorem asperiores.</CardBody>\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Implementing Node Shape Addition Method in StandardTree Class\nDESCRIPTION: Method signature for adding node shapes to the SVG canvas. It takes parameters for node content, positioning, styling, and the SVG context to render rectangles with text and subtext at specified coordinates.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/src/components/TreeChart/TreeChart.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\naddNodeShapetoSVG(\n    name: string,\n    subname: string,\n    xCoordinate: number,\n    yCoordinate: number,\n    fillColor: string,\n    rectangleWidth: number,\n    rectangleHeight: number,\n    svg: Selection<SVGGElement | null, unknown, null, undefined>,\n    tabIndex: number,\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining OverflowDirection Type in TypeScript\nDESCRIPTION: This snippet defines the OverflowDirection type, indicating whether the overflow occurs at the start or end of the container. This is essential for controlling how overflow scenarios are handled visually.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/priority-overflow/etc/priority-overflow.api.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type OverflowDirection = 'start' | 'end';\n```\n\n----------------------------------------\n\nTITLE: Accessibility Properties Interface\nDESCRIPTION: Defines the structure for accessibility-related properties that can be applied to chart components.  It includes attributes for describing and labeling elements for screen readers and other assistive technologies. This improves the chart's usability for users with disabilities.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charts/library/etc/react-charts.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport interface AccessibilityProps {\n    ariaDescribedBy?: string;\n    ariaLabel?: string;\n    ariaLabelledBy?: string;\n}\"\n```\n\n----------------------------------------\n\nTITLE: Stateful Component with Class in React\nDESCRIPTION: This snippet illustrates how to create a stateful component in React using a class extending `AutoControlledComponent`. `AutoControlledComponent` is imported from the `../../utils` directory which helps manage component state. The component extends AutoControlledComponent to handle state management.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/add-a-feature.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AutoControlledComponent as Component } from '../../utils';\n\nclass Dropdown extends AutoControlledComponent {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: DialogActions Slots Definition\nDESCRIPTION: Defines the slots available within the DialogActions component. It uses Slot from '@fluentui/react-utilities'.  It indicates that the DialogActions component has a 'root' slot, which is a div element.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/etc/react-dialog.api.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport type DialogActionsSlots = {\n    root: Slot<'div'>;\n};\"\n```\n\n----------------------------------------\n\nTITLE: Migrating Header Style Variables to FluentUI v9 Styling Approach\nDESCRIPTION: Demonstrates how to migrate from using variables prop for styling in Header component to using makeStyles hook in FluentUI v9.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Header.stories.mdx#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// in COMPONENT_NAME.tsx\nimport { Header } from '@fluentui/react-northstar';\n\nexport const Component = () => <Header variables={{ isMainHeader: true }} />;\n\n// in header-styles.ts\nexport const headerStyles1 = {\n  root: ({ variables: { isMainHeader, colorSchemeDefault } }) => ({\n    ...(isMainHeader && {\n      color: colorSchemeDefault.foreground,\n    }),\n  }),\n};\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// in COMPONENT_NAME.tsx\nimport { Text } from '@fluentui/react-components';\nimport { useStyles } from './COMPONENT_NAME.styles.ts';\n\nexport const Component = () => {\n  const classes = useStyles();\n  return <Text as=\"h1\" className={classes.mainHeader}></Text>;\n};\n\n// in COMPONENT_NAME.styles.ts\nimport { makeStyles, tokens } from '@fluentui/react-components';\n\nexport const useStyles = makeStyles({\n  mainHeader: {\n    color: tokens.colorNeutralForeground1,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining FocusZoneTabbableElements Constant in TypeScript\nDESCRIPTION: Declares the FocusZoneTabbableElements constant object, outlining tabbable focus elements within a FocusZone. It categorizes elements into none, all, and inputOnly, indicating which elements within the zone can be focused upon using the tab key.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-focus/etc/react-focus.api.md#2025-04-20_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\\nexport const FocusZoneTabbableElements: {\\n    none: 0;\\n    all: 1;\\n    inputOnly: 2;\\n};\n```\n\n----------------------------------------\n\nTITLE: Unstable Persona Styles Hook (TypeScript)\nDESCRIPTION: Defines the `usePersonaStyles_unstable` hook, which is responsible for applying styles to the Persona component. It takes a `PersonaState` object as input and returns a `PersonaState` object, presumably with styles applied. This hook is marked as unstable, meaning its API may change.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-persona/library/etc/react-persona.api.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const usePersonaStyles_unstable: (state: PersonaState) => PersonaState;\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Neutral Shadow Color Tokens in JavaScript\nDESCRIPTION: This snippet defines and exports color tokens for neutral shadows in the Fluent UI design system. It includes variables for ambient and key shadows with different intensities.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\n// @public\nexport const colorNeutralShadowAmbient = \"var(--colorNeutralShadowAmbient)\";\n\n// @public\nexport const colorNeutralShadowAmbientDarker = \"var(--colorNeutralShadowAmbientDarker)\";\n\n// @public\nexport const colorNeutralShadowAmbientLighter = \"var(--colorNeutralShadowAmbientLighter)\";\n\n// @public\nexport const colorNeutralShadowKey = \"var(--colorNeutralShadowKey)\";\n\n// @public\nexport const colorNeutralShadowKeyDarker = \"var(--colorNeutralShadowKeyDarker)\";\n\n// @public\nexport const colorNeutralShadowKeyLighter = \"var(--colorNeutralShadowKeyLighter)\";\n```\n\n----------------------------------------\n\nTITLE: Using Field Component with FluentUI in JSX\nDESCRIPTION: This code snippet demonstrates using the proposed Field component to wrap different controls, including FluentUI components, intrinsic elements, and custom components. It highlights how the Field passes necessary props like id, aria attributes, and validation states to children components using technologies like cloneElement.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/field-custom-components.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <Field label=\"FluentUI Input\" validationState=\"error\">\n    <Input defaultValue=\"...\" />\n  </Field>\n\n  <Field label=\"Intrinsic input\" validationState=\"error\">\n    <input defaultValue=\"...\" />\n  </Field>\n\n  <Field label=\"Custom component\" validationState=\"error\">\n    <MyInput defaultValue=\"...\" />\n  </Field>\n\n  <Field label=\"Render props\" validationState=\"error\">\n    {props => (\n      <div>\n        <MyInput defaultValue=\"...\" {...props} />\n      </div>\n    )}\n  </Field>\n</>\n```\n\n----------------------------------------\n\nTITLE: Package Dependencies Example with Exact Version\nDESCRIPTION: Example showing a FluentUI component package using exact version for lodash dependency, demonstrating potential version conflict scenarios.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/dependency-versions.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"@fluentui/react-COMPONENT\",\n  \"dependencies\": {\n    \"lodash\": \"4.17.20\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Defining Toolbar Components in TypeScript\nDESCRIPTION: This code snippet defines the main Toolbar component and its subcomponents, including their props and states. It also defines utility functions for rendering and styling these components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-toolbar/library/etc/react-toolbar.api.md#2025-04-20_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/// <reference types=\"react\" />\n\nimport { ButtonProps } from '@fluentui/react-button';\nimport { ButtonSlots } from '@fluentui/react-button';\nimport { ButtonState } from '@fluentui/react-button';\nimport type { ComponentProps } from '@fluentui/react-utilities';\nimport type { ComponentState } from '@fluentui/react-utilities';\nimport { DividerSlots } from '@fluentui/react-divider';\nimport { DividerState } from '@fluentui/react-divider';\nimport type { ForwardRefComponent } from '@fluentui/react-utilities';\nimport * as React_2 from 'react';\nimport type { Slot } from '@fluentui/react-utilities';\nimport { SlotClassNames } from '@fluentui/react-utilities';\nimport { ToggleButtonProps } from '@fluentui/react-button';\nimport { ToggleButtonState } from '@fluentui/react-button';\n\n// @public\nexport const renderToolbar_unstable: (state: ToolbarState, contextValues: ToolbarContextValues) => JSX.Element;\n\n// @public\nexport const renderToolbarGroup_unstable: (state: ToolbarGroupState) => JSX.Element;\n\n// @public\nexport const Toolbar: ForwardRefComponent<ToolbarProps>;\n\n// @public\nexport const ToolbarButton: ForwardRefComponent<ToolbarButtonProps>;\n\n// @public\nexport type ToolbarButtonProps = ComponentProps<ButtonSlots> & Partial<Pick<ButtonProps, 'disabled' | 'disabledFocusable'>> & {\n    appearance?: 'primary' | 'subtle' | 'transparent';\n} & {\n    vertical?: boolean;\n};\n\n// @public\nexport type ToolbarButtonState = ComponentState<Partial<ButtonSlots>> & ButtonState & Required<Pick<ToolbarButtonProps, 'vertical'>>;\n\n// @public (undocumented)\nexport const toolbarClassNames: SlotClassNames<ToolbarSlots>;\n\n// @public (undocumented)\nexport type ToolbarContextValue = Pick<ToolbarState, 'size' | 'vertical' | 'checkedValues'> & {\n    handleToggleButton?: ToggableHandler;\n    handleRadio?: ToggableHandler;\n};\n\n// @public (undocumented)\nexport type ToolbarContextValues = {\n    toolbar: ToolbarContextValue;\n};\n\n// @public\nexport const ToolbarDivider: ForwardRefComponent<ToolbarDividerProps>;\n\n// @public\nexport type ToolbarDividerProps = ComponentProps<Partial<DividerSlots>> & {\n    vertical?: boolean;\n};\n\n// @public\nexport type ToolbarDividerState = ComponentState<Partial<DividerSlots>> & DividerState;\n\n// @public\nexport const ToolbarGroup: ForwardRefComponent<ToolbarGroupProps>;\n\n// @public (undocumented)\nexport const toolbarGroupClassNames: SlotClassNames<ToolbarGroupSlots>;\n\n// @public\nexport type ToolbarGroupProps = ComponentProps<ToolbarGroupSlots>;\n\n// @public\nexport type ToolbarGroupState = ComponentState<ToolbarGroupSlots>;\n\n// @public\nexport type ToolbarProps = ComponentProps<ToolbarSlots> & {\n    size?: 'small' | 'medium' | 'large';\n    vertical?: boolean;\n    checkedValues?: Record<string, string[]>;\n    defaultCheckedValues?: Record<string, string[]>;\n    onCheckedValueChange?: (e: ToolbarCheckedValueChangeEvent, data: ToolbarCheckedValueChangeData) => void;\n};\n\n// @public\nexport const ToolbarRadioButton: ForwardRefComponent<ToolbarRadioButtonProps>;\n\n// @public\nexport type ToolbarRadioButtonProps = ComponentProps<ButtonSlots> & Partial<Pick<ToggleButtonProps, 'disabled' | 'disabledFocusable' | 'size'>> & {\n    appearance?: 'primary' | 'subtle' | 'transparent';\n    name: string;\n    value: string;\n};\n\n// @public\nexport type ToolbarRadioButtonState = ComponentState<Partial<ButtonSlots>> & ToggleButtonState & Required<Pick<ToggleButtonProps, 'checked'>> & Pick<ToolbarRadioButtonProps, 'name' | 'value'>;\n\n// @public\nexport const ToolbarRadioGroup: ForwardRefComponent<ToolbarRadioGroupProps>;\n\n// @public\nexport type ToolbarRadioGroupProps = ComponentProps<ToolbarRadioGroupSlots>;\n\n// @public\nexport type ToolbarRadioGroupState = ComponentState<ToolbarRadioGroupSlots>;\n\n// @public (undocumented)\nexport type ToolbarSlots = {\n    root: Slot<'div'>;\n};\n\n// @public\nexport type ToolbarState = ComponentState<ToolbarSlots> & Required<Pick<ToolbarProps, 'size' | 'checkedValues' | 'vertical'>> & Pick<ToolbarProps, 'defaultCheckedValues' | 'onCheckedValueChange'> & {\n    handleToggleButton: ToggableHandler;\n    handleRadio: ToggableHandler;\n};\n\n// @public\nexport const ToolbarToggleButton: ForwardRefComponent<ToolbarToggleButtonProps>;\n\n// @public\nexport type ToolbarToggleButtonProps = ComponentProps<ButtonSlots> & Partial<Pick<ToggleButtonProps, 'disabled' | 'disabledFocusable' | 'size'>> & {\n    appearance?: 'primary' | 'subtle' | 'transparent';\n    name: string;\n    value: string;\n};\n\n// @public\nexport type ToolbarToggleButtonState = ComponentState<Partial<ButtonSlots>> & ToggleButtonState & Required<Pick<ToggleButtonProps, 'checked'>> & Pick<ToolbarToggleButtonProps, 'name' | 'value'>;\n\n// @public\nexport const useToolbar_unstable: (props: ToolbarProps, ref: React_2.Ref<HTMLElement>) => ToolbarState;\n\n// @public\nexport const useToolbarButton_unstable: (props: ToolbarButtonProps, ref: React_2.Ref<HTMLButtonElement | HTMLAnchorElement>) => ToolbarButtonState;\n\n// @public\nexport const useToolbarButtonStyles_unstable: (state: ToolbarButtonState) => void;\n\n// @public\nexport const useToolbarDivider_unstable: (props: ToolbarDividerProps, ref: React_2.Ref<HTMLElement>) => ToolbarDividerState;\n\n// @public\nexport const useToolbarDividerStyles_unstable: (state: ToolbarDividerState) => ToolbarDividerState;\n\n// @public\nexport const useToolbarGroup_unstable: (props: ToolbarGroupProps, ref: React_2.Ref<HTMLDivElement>) => ToolbarGroupState;\n\n// @public\nexport const useToolbarGroupStyles_unstable: (state: ToolbarGroupState) => ToolbarGroupState;\n\n// @public\nexport const useToolbarRadioButton_unstable: (props: ToolbarRadioButtonProps, ref: React_2.Ref<HTMLButtonElement | HTMLAnchorElement>) => ToolbarRadioButtonState;\n\n// @public\nexport const useToolbarRadioButtonStyles_unstable: (state: ToolbarRadioButtonState) => ToolbarRadioButtonState;\n\n// @public\nexport const useToolbarStyles_unstable: (state: ToolbarState) => ToolbarState;\n\n// @public\nexport const useToolbarToggleButton_unstable: (props: ToolbarToggleButtonProps, ref: React_2.Ref<HTMLButtonElement | HTMLAnchorElement>) => ToolbarToggleButtonState;\n\n// @public\nexport const useToolbarToggleButtonStyles_unstable: (state: ToolbarToggleButtonState) => ToolbarToggleButtonState;\n```\n\n----------------------------------------\n\nTITLE: Implementing MessageBar in FluentUI v9\nDESCRIPTION: Example of how to use the new MessageBar component in FluentUI v9, showcasing the MessageBarBody, MessageBarTitle, MessageBarActions, and Button components to create a fully featured message bar.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-message-bar/library/docs/Spec.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<MessageBar>\n  <MessageBarBody>\n    <MessageBarTitle>Descriptive title</MessageBarTitle>\n    Message providing information to the user with actionable insights. <Link>Link</Link>\n  </MessageBarBody>\n  <MessageBarActions\n    containerAction={<Button aria-label=\"dismiss\" appearance=\"transparent\" icon={<DismissRegular />} />}\n  >\n    <Button>Action</Button>\n    <Button>Action</Button>\n  </MessageBarActions>\n</MessageBar>\n```\n\n----------------------------------------\n\nTITLE: Defining TimePicker Component Interfaces in TypeScript for FluentUI\nDESCRIPTION: Defines interfaces for the TimePicker component including props, validation data, strings, and time range configurations. These interfaces support time selection functionality with validation and customization options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_223\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface ITimePickerProps extends Omit<IComboBoxProps, 'options' | 'selectedKey' | 'defaultSelectedKey' | 'multiSelect' | 'text' | 'defaultValue' | 'onChange'> {\n    allowFreeform?: boolean;\n    dateAnchor?: Date;\n    defaultValue?: Date;\n    increments?: number;\n    label?: string;\n    onChange?: (event: React_2.FormEvent<IComboBox>, time: Date) => void;\n    onFormatDate?: (date: Date) => string;\n    onValidateUserInput?: (userInput: string) => string;\n    onValidationResult?: (event: React_2.FormEvent<IComboBox>, data: TimePickerValidationResultData) => void;\n    showSeconds?: boolean;\n    strings?: ITimePickerStrings;\n    timeRange?: ITimeRange;\n    useHour12?: boolean;\n    value?: Date;\n}\n\n// @public\nexport interface ITimePickerStrings {\n    invalidInputErrorMessage: string;\n    timeOutOfBoundsErrorMessage?: string;\n}\n\n// @public\nexport interface ITimeRange {\n    end: number;\n    start: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Bump Package to Beta Version\nDESCRIPTION: Example showing how to bump a specific package from alpha to beta version using prerelease type.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/version-bump/README.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:version-bump --name=example --bumpType prerelease --prereleaseTag beta\n```\n\n----------------------------------------\n\nTITLE: Setting Storybook Meta Title for Theme Migration Documentation\nDESCRIPTION: This code sets the title for the Storybook documentation page, specifying the path and title for the Theme Migration guide in the Fluent UI v8 to v9 migration concepts.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Theme.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta title=\"Concepts/Migration/from v8/Components/Theme Migration\" />\n```\n\n----------------------------------------\n\nTITLE: Version 9.5.19 Changelog Entry\nDESCRIPTION: Changelog entry noting patches and dependency updates for react-shared-contexts, react-tabster and react-portal packages.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.5.19](https://github.com/microsoft/fluentui/tree/@fluentui/react-dialog_v9.5.19)\n\nTue, 01 Aug 2023 10:17:21 GMT\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-dialog_v9.5.18..@fluentui/react-dialog_v9.5.19)\n```\n\n----------------------------------------\n\nTITLE: TagPickerGroup Slots Type\nDESCRIPTION: Defines the slots available for the TagPickerGroup component using TagGroupSlots.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport type TagPickerGroupSlots = TagGroupSlots;\"\n```\n\n----------------------------------------\n\nTITLE: Direct SVG Icon Usage in React Components\nDESCRIPTION: Demonstrates how to directly import and use SVG icons as React components from the @fluentui/react-icons-mdl2 package. This approach allows for selective importing of only needed icons to optimize bundle size.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Styles/FabricIconsPage/docs/web/FabricIconsSvgUsage.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { ChevronDownIcon } from '@fluentui/react-icons-mdl2';\n\nReactDOM.render(<ChevronDownIcon />, document.body.firstChild);\n```\n\n----------------------------------------\n\nTITLE: Handling Key Down Events with Legacy KeyCode - TypeScript\nDESCRIPTION: This snippet shows the usage of the legacy keyCode support available in the '@fluentui/keyboard-keys' package in a React keydown event handler. While it allows compatibility with older implementations, it's not encouraged for new developments. The snippet checks against 'Enter' and another character key by using keyCodes. Dependencies include React and the @fluentui/keyboard-keys package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/keyboard-keys/README.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { keyCodes } from '@fluentui/keyboard-keys';\n\nconst onKeyDown = (e: React.KeyboardEvent) => {\n  if (e.keyCode === keyCodes.Enter) {\n    // ...\n  }\n\n  if (e.key === keyCodes.a) {\n    // ...\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining TypedArray Type for Numeric Data\nDESCRIPTION: Defines a TypeScript type that represents various JavaScript typed arrays for numeric data. Includes int and float arrays of different sizes for efficient data storage.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/chart-utilities/etc/chart-utilities.api.md#2025-04-20_snippet_42\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type TypedArray = Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array;\n```\n\n----------------------------------------\n\nTITLE: Defining Virtualizer Render Functions\nDESCRIPTION: This snippet defines render functions for the Virtualizer, VirtualizerScrollView, and VirtualizerScrollViewDynamic components. These functions take their respective state objects and return JSX elements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-virtualizer/library/etc/react-virtualizer.api.md#2025-04-20_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport const renderVirtualizer_unstable: (state: VirtualizerState) => JSX.Element;\n\n// @public (undocumented)\nexport const renderVirtualizerScrollView_unstable: (state: VirtualizerScrollViewState) => JSX.Element;\n\n// @public (undocumented)\nexport const renderVirtualizerScrollViewDynamic_unstable: (state: VirtualizerScrollViewDynamicState) => JSX.Element;\n```\n\n----------------------------------------\n\nTITLE: Defining SearchBox Component Interfaces in TypeScript\nDESCRIPTION: Defines the interfaces for the SearchBox component, including ISearchBox, ISearchBoxProps, and associated style interfaces. The SearchBox component provides a search input with clear button and optional icon.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_170\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface ISearchBox {\n    blur(): void;\n    focus(): void;\n    hasFocus(): boolean;\n}\n\n// @public (undocumented)\nexport interface ISearchBoxProps extends React_2.InputHTMLAttributes<HTMLInputElement>, React_2.RefAttributes<HTMLDivElement> {\n    ariaLabel?: string;\n    className?: string;\n    clearButtonProps?: IButtonProps;\n    componentRef?: React_2.Ref<ISearchBox>;\n    defaultValue?: string;\n    disableAnimation?: boolean;\n    iconProps?: Pick<IIconProps, Exclude<keyof IIconProps, 'className'>>;\n    // @deprecated (undocumented)\n    labelText?: string;\n    onChange?: (event?: React_2.ChangeEvent<HTMLInputElement>, newValue?: string) => void;\n    // @deprecated (undocumented)\n    onChanged?: (newValue: any) => void;\n    onClear?: (ev?: any) => void;\n    onEscape?: (ev?: any) => void;\n    onSearch?: (newValue: any) => void;\n    placeholder?: string;\n    role?: string;\n    showIcon?: boolean;\n    styles?: IStyleFunctionOrObject<ISearchBoxStyleProps, ISearchBoxStyles>;\n    theme?: ITheme;\n    underlined?: boolean;\n    value?: string;\n}\n\n// @public (undocumented)\nexport interface ISearchBoxStyleProps {\n    // (undocumented)\n    className?: string;\n    // (undocumented)\n    disableAnimation?: boolean;\n    // (undocumented)\n    disabled?: boolean;\n    // (undocumented)\n    hasFocus?: boolean;\n    // (undocumented)\n    hasInput?: boolean;\n    // (undocumented)\n    showIcon?: boolean;\n    // (undocumented)\n    theme: ITheme;\n    // (undocumented)\n    underlined?: boolean;\n}\n\n// @public (undocumented)\nexport interface ISearchBoxStyles {\n    // (undocumented)\n    clearButton?: IStyle;\n    // (undocumented)\n    field?: IStyle;\n    // (undocumented)\n    icon?: IStyle;\n    // (undocumented)\n    iconContainer?: IStyle;\n    // (undocumented)\n    root?: IStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: Using system colors for forced colors mode\nDESCRIPTION: Shows how to use system colors within media queries for forced colors mode, which is an acceptable exception to the rule against using direct color values.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/styles-handbook.md#2025-04-20_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeStyles } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  button: {\n    '@media (forced-colors: active)': {\n      color: 'ButtonText',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Testing wrapTextInsideDonut() Component with E2E Tests - JavaScript\nDESCRIPTION: The wrapTextInsideDonut() function should be tested through End-to-End (E2E) tests since the component is rendered in a browser context. This testing method ensures that the component behaves as expected in a real-world scenario.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/docs/TestingStrategy.md#2025-04-20_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Customizing Select Appearance and Size in React TSX\nDESCRIPTION: Example showing how to customize the Select component with appearance and size props, using filledDarker appearance and small size.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-select/library/docs/Spec.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<label htmlFor=\"selectID\">Choose a color</label>\n<Select id=\"selectID\" appearance=\"filledDarker\" size=\"small\">\n  <option>Red</option>\n  <option>Green</option>\n  <option>Blue</option>\n</Select>\n```\n\n----------------------------------------\n\nTITLE: Defining Tree Navigation Data Structure in TypeScript\nDESCRIPTION: Defines the data structure for tree navigation events, including target element, value, parent value, and various event types with their corresponding event objects.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tree/library/etc/react-tree.api.md#2025-04-20_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type TreeNavigationData_unstable = {\n    target: HTMLElement;\n    value: TreeItemValue;\n    parentValue: TreeItemValue | undefined;\n} & ({\n    event: React_2.MouseEvent<HTMLElement>;\n    type: 'Click';\n} | {\n    event: React_2.KeyboardEvent<HTMLElement>;\n    type: 'TypeAhead';\n} | {\n    event: React_2.KeyboardEvent<HTMLElement>;\n    type: typeof ArrowRight;\n} | {\n    event: React_2.KeyboardEvent<HTMLElement>;\n    type: typeof ArrowLeft;\n} | {\n    event: React_2.KeyboardEvent<HTMLElement>;\n    type: typeof ArrowUp;\n} | {\n    event: React_2.KeyboardEvent<HTMLElement>;\n    type: typeof ArrowDown;\n} | {\n    event: React_2.KeyboardEvent<HTMLElement>;\n    type: typeof Home;\n} | {\n    event: React_2.KeyboardEvent<HTMLElement>;\n    type: typeof End;\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Validation Message in Fluent UI React Field in JSX\nDESCRIPTION: This example demonstrates how to use the Field component with a validation message to indicate form input errors in JSX. The 'validationMessage' parameter is used to specify the error message.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-field/library/README.md#2025-04-20_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<Field label=\"Re-enter password\" validationMessage=\"Passwords do not match.\">\n  <Input type=\"password\" />\n</Field>\n```\n\n----------------------------------------\n\nTITLE: Equivalent Basic Keytips Usage in Fluent UI v9\nDESCRIPTION: Shows how to use Keytips with Buttons in Fluent UI v9. In this version, components do not have keytipProps, and keytips must be attached using the useKeytipRef hook.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Keytips.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport const KeytipsBasicExampleV9 = () => {\n  const normalButton = useKeytipRef({\n    keySequences: ['aa'],\n    onExecute: () => console.log('Button'),\n    content: 'AA',\n  });\n\n  return <Button ref={normalButton}>Button</Button>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ColorBar Interface in TypeScript\nDESCRIPTION: This code snippet defines the ColorBar interface, which includes properties for styling and configuring color bars in charts. It covers aspects like dimensions, ticks, labels, and title formatting.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/chart-utilities/etc/chart-utilities.api.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ColorBar {\n    bgcolor: Color;\n    bordercolor: Color;\n    borderwidth: Color;\n    dtick: DTickValue;\n    exponentformat: 'none' | 'e' | 'E' | 'power' | 'SI' | 'B';\n    len: number;\n    lenmode: 'fraction' | 'pixels';\n    minexponent: number;\n    nticks: number;\n    outlinecolor: Color;\n    outlinewidth: number;\n    separatethousands: boolean;\n    showexponent: 'all' | 'first' | 'last' | 'none';\n    showticklabels: boolean;\n    showtickprefix: 'all' | 'first' | 'last' | 'none';\n    showticksuffix: 'all' | 'first' | 'last' | 'none';\n    thickness: number;\n    thicknessmode: 'fraction' | 'pixels';\n    tick0: number | string;\n    tickangle: 'auto' | number;\n    tickcolor: Color;\n    tickfont: Font;\n    tickformat: string;\n    tickformatstops: Array<Partial<TickFormatStop>>;\n    ticklen: number;\n    tickmode: 'auto' | 'linear' | 'array';\n    tickprefix: string;\n    ticks: 'outside' | 'inside' | '';\n    ticksuffix: string;\n    ticktext: Datum[] | Datum[][] | Datum[][][] | TypedArray;\n    ticktextsrc: any;\n    tickvals: Datum[] | Datum[][] | Datum[][][] | TypedArray;\n    tickvalssrc: any;\n    tickwidth: number;\n    title: string;\n    titlefont: Font;\n    titleside: 'right' | 'top' | 'bottom';\n    x: number;\n    xanchor: 'left' | 'center' | 'right';\n    xpad: number;\n    y: number;\n    yanchor: 'top' | 'middle' | 'bottom';\n    ypad: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BoxProps Interface (TypeScript)\nDESCRIPTION: This TypeScript interface defines the properties for a `Box` component. It includes properties from `UIComponentProps`, `ContentComponentProps`, and `ChildrenComponentProps`, as well as an optional `accessibility` property that conforms to the `Accessibility` type, parameterized with `never`.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-search/library/docs/MIGRATION.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"interface BoxProps extends UIComponentProps<BoxProps>, ContentComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<never>;\n}\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Persona Components - JavaScript\nDESCRIPTION: This snippet exports components related to the Persona feature that helps in rendering user profiles or displaying user information in the Fluent UI applications.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/etc/react-components.api.md#2025-04-20_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nexport { Persona }\n\nexport { personaClassNames }\n\nexport { PersonaProps }\n\nexport { PersonaSlots }\n\nexport { PersonaState }\n```\n\n----------------------------------------\n\nTITLE: Implementing Public Label Structure\nDESCRIPTION: Shows the basic public API usage of the Label component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-label/library/docs/Spec.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Label required>I'm a Label</Label>\n```\n\n----------------------------------------\n\nTITLE: Defining Collapse Animation using createPresenceComponent in TypeScript\nDESCRIPTION: This code defines a collapse animation using the createPresenceComponent function. The animation dynamically calculates the maxHeight based on the animated element's scrollHeight, providing a smooth collapse/expand effect. It uses keyframes to define the animation steps for both enter and exit states.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-motion/stories/src/CreatePresenceComponent/CreatePresenceComponentFunctions.stories.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst Collapse = createPresenceComponent(({ element }) => {\n  const duration = 500;\n  const keyframes = [\n    { opacity: 0, maxHeight: '0px', overflow: 'hidden' },\n    { opacity: 1, maxHeight: `${element.scrollHeight}px`, overflow: 'hidden' },\n  ];\n\n  return {\n    enter: { duration, keyframes },\n    exit: { duration, keyframes: [...keyframes].reverse() },\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Page-Related Interfaces in TypeScript for FluentUI\nDESCRIPTION: Defines interfaces for page-related components in FluentUI, specifically dealing with virtualized lists. These interfaces help manage data chunks, item rendering, and page specifications.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_162\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IPageProps<T = any> extends React_2.HTMLAttributes<HTMLDivElement>, React_2.ClassAttributes<HTMLDivElement> {\n    page: IPage<T>;\n    role?: string;\n}\n\n// @public (undocumented)\nexport interface IPageSpecification {\n    data?: any;\n    height?: number;\n    itemCount?: number;\n    key?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic ColorPicker Implementation - FluentUI v9\nDESCRIPTION: Equivalent implementation of ColorPicker component in FluentUI v9 showing the new composition-based approach with separate ColorArea, AlphaSlider, and ColorSlider components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/ColorPicker.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  ColorPicker,\n  ColorArea,\n  ColorSliderProps,\n  AlphaSlider,\n  ColorSlider,\n  ColorPickerOnSelectEventHandler,\n} from '@fluentui/react-color-picker-preview';\n\nexport const Default = () => {\n  const [selectedColor, setSelectedColor] = React.useState({ h: 109, s: 1, v: 0.9, a: 1 });\n  const handleChange: ColorPickerProps['onChange'] = (_, data) => setSelectedColor(data.selectedColorHex);\n\n  return (\n    <>\n      <ColorPicker color={selectedColor} onChange={handleChange}>\n        <ColorArea />\n        <AlphaSlider />\n        <ColorSlider />\n      </ColorPicker>\n      <div style={{ backgroundColor: tinycolor(color).toRgbString() }} />\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Skeleton Component\nDESCRIPTION: Shows the basic HTML structure for the Skeleton component, including the container and a SkeletonItem. This structure represents the DOM output of the rendered component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-skeleton/library/docs/Spec.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Container for Skeleton -->\n\n<div class=\"fui-Skeleton\">\n  <!-- Container for SkeletonElement -->\n\n  <div class=\"fui-SkeletonItem\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Menu Class in TypeScript\nDESCRIPTION: This snippet defines the Menu class, which extends FASTElement. It includes methods for opening, closing, and toggling the menu, as well as handling keyboard events and managing focus.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_37\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class Menu extends FASTElement {\n    closeMenu: (event?: Event) => void;\n    closeOnScroll?: boolean;\n    closeOnScrollChanged(oldValue: boolean, newValue: boolean): void;\n    connectedCallback(): void;\n    disconnectedCallback(): void;\n    focusMenuList(): void;\n    focusTrigger(): void;\n    menuKeydownHandler(e: KeyboardEvent): boolean | void;\n    openMenu: (e?: Event) => void;\n    openOnContext?: boolean;\n    openOnContextChanged(oldValue: boolean, newValue: boolean): void;\n    openOnHover?: boolean;\n    openOnHoverChanged(oldValue: boolean, newValue: boolean): void;\n    persistOnItemClick?: boolean;\n    persistOnItemClickChanged(oldValue: boolean, newValue: boolean): void;\n    primaryAction: HTMLSlotElement;\n    setComponent(): void;\n    slottedMenuList: MenuList[];\n    slottedTriggers: HTMLElement[];\n    split?: boolean;\n    toggleHandler: (e: Event) => void;\n    toggleMenu: () => void;\n    triggerKeydownHandler: (e: KeyboardEvent) => boolean | void;\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Object Values to Slots in a Button Component - React JSX\nDESCRIPTION: This snippet demonstrates how to pass a JavaScript object as props to an icon slot in a Button component, enabling customized attributes such as class names and IDs.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Slots.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Button icon={{ children: <FooIcon />, className: 'an-awesome-slot', id: '#button-icon' }} />\n```\n\n----------------------------------------\n\nTITLE: Setting Z-Index Values with FluentProvider in React\nDESCRIPTION: This snippet demonstrates how partners can set z-index values at the application level using the FluentProvider component. It defines a zIndex object with various layers and their corresponding z-index values.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/z-index-handling.md#2025-04-20_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// partner side\nimport { FluentProvider } from '@fluentui/react-components';\n\nconst App = () => {\n  const zIndex = {\n    background: 0,\n    content: 1,\n    overlay: 1000,\n    popup: 2000,\n    messages: 3000,\n    floating: 4000,\n    priority: 5000,\n    debug: 6000,\n  };\n\n  return (\n    <FluentProvider zIndex={zIndex}>\n      <Component1 />\n      <Component2 />\n    </FluentProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing React Virtualizer Components and Types\nDESCRIPTION: This snippet shows the import statements for various components, types, and utilities from the @fluentui/react-virtualizer package. It includes imports for core React types and utilities.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-virtualizer/library/etc/react-virtualizer.api.md#2025-04-20_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { ComponentProps } from '@fluentui/react-utilities';\nimport type { ComponentState } from '@fluentui/react-utilities';\nimport * as React_2 from 'react';\nimport type { Slot } from '@fluentui/react-utilities';\nimport type { SlotClassNames } from '@fluentui/react-utilities';\n```\n\n----------------------------------------\n\nTITLE: Defining FocusZone Class in React TypeScript\nDESCRIPTION: The FocusZone class extends the React.Component, implementing focus management through various methods like focus, focusElement, and focusLast. Dependencies include React and Fluent UI utilities. This class handles lifecycle methods like componentDidMount and componentWillUnmount and provides focus control through static properties and context. Inputs include focus alignment and tabbable element configurations, enabling bidirectional and circular navigation within focusable zones.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-focus/etc/react-focus.api.md#2025-04-20_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { IRefObject } from '@fluentui/utilities';\\nimport { MergeStylesShadowRootContextValue } from '@fluentui/utilities';\\nimport type { Point } from '@fluentui/utilities';\\nimport * as React_2 from 'react';\\n\\n// @public (undocumented)\\nexport class FocusZone extends React_2.Component<IFocusZoneProps> implements IFocusZone {\\n    constructor(props: IFocusZoneProps);\\n    // (undocumented)\\n    get activeElement(): HTMLElement | null;\\n    // (undocumented)\\n    componentDidMount(): void;\\n    // (undocumented)\\n    componentDidUpdate(): void;\\n    // (undocumented)\\n    componentWillUnmount(): void;\\n    // (undocumented)\\n    static contextType: React_2.Context<MergeStylesShadowRootContextValue | undefined>;\\n    // (undocumented)\\n    get defaultFocusElement(): HTMLElement | null;\\n    // (undocumented)\\n    static defaultProps: IFocusZoneProps;\\n    focus(forceIntoFirstElement?: boolean, bypassHiddenElements?: boolean): boolean;\\n    focusElement(element: HTMLElement, forceAlignment?: boolean): boolean;\\n    focusLast(): boolean;\\n    static getOuterZones(): number;\\n    // (undocumented)\\n    render(): React_2.ReactNode;\\n    setFocusAlignment(point: Point): void;\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Range Control Interfaces in TypeScript\nDESCRIPTION: TypeScript interfaces for range controls in Plotly.js charts, including RangeBreak, RangeSelector, RangeSelectorButton, and RangeSlider. These interfaces define the structures for components that allow users to specify and manipulate chart ranges.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/chart-utilities/etc/chart-utilities.api.md#2025-04-20_snippet_34\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface RangeBreak {\n    // (undocumented)\n    bounds: any[];\n    // (undocumented)\n    dvalue: number;\n    // (undocumented)\n    enabled: boolean;\n    // (undocumented)\n    name: string;\n    // (undocumented)\n    pattern: 'day of week' | 'hour' | '';\n    // (undocumented)\n    templateitemname: string;\n    // (undocumented)\n    values: any[];\n}\n\n// @public (undocumented)\nexport interface RangeSelector extends Label {\n    // (undocumented)\n    activecolor: string;\n    // (undocumented)\n    borderwidth: number;\n    // (undocumented)\n    buttons: Array<Partial<RangeSelectorButton>>;\n    // (undocumented)\n    visible: boolean;\n    // (undocumented)\n    x: number;\n    // (undocumented)\n    xanchor: 'auto' | 'left' | 'center' | 'right';\n    // (undocumented)\n    y: number;\n    // (undocumented)\n    yanchor: 'auto' | 'top' | 'middle' | 'bottom';\n}\n\n// @public (undocumented)\nexport interface RangeSelectorButton {\n    // (undocumented)\n    count: number;\n    // (undocumented)\n    label: string;\n    // (undocumented)\n    step: 'second' | 'minute' | 'hour' | 'day' | 'month' | 'year' | 'all';\n    // (undocumented)\n    stepmode: 'backward' | 'todate';\n}\n\n// @public (undocumented)\nexport interface RangeSlider {\n    // (undocumented)\n    bgcolor: string;\n    // (undocumented)\n    bordercolor: string;\n    // (undocumented)\n    borderwidth: number;\n    // (undocumented)\n    range: [Datum, Datum];\n    // (undocumented)\n    thickness: number;\n    // (undocumented)\n    visible: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Register Icons Function\nDESCRIPTION: Defines a function, `registerIcons`, that registers a set of icons defined in an `IIconSubset`. It takes the icon subset and optional icon options to configure the registration process.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/style-utilities/etc/style-utilities.api.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n\"export function registerIcons(iconSubset: IIconSubset, options?: Partial<IIconOptions>): void;\"\n```\n\n----------------------------------------\n\nTITLE: Defining Carousel Core Hooks\nDESCRIPTION: TypeScript declarations for primary Carousel hooks that handle main component state management and context handling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-carousel/library/etc/react-carousel.api.md#2025-04-20_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function useCarousel_unstable(props: CarouselProps, ref: React_2.Ref<HTMLDivElement>): CarouselState;\nexport const useCarouselContext_unstable: <T>(selector: ContextSelector<CarouselContextValue, T>) => T;\n```\n\n----------------------------------------\n\nTITLE: Defining ComponentStyleHooks Type in TypeScript\nDESCRIPTION: Defines a type for component style hooks, which includes a method for custom button styles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/custom-styling.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ComponentStyleHooks = {\n  useCustomButtonStyles_unstable: (state: unknown) => void;\n};\n```\n\n----------------------------------------\n\nTITLE: Fix transpilation memory leaks\nDESCRIPTION: This patch updates the swc core dependency to address and mitigate transpilation memory leaks. This improves the stability and performance of the build process when working with the @fluentui/react-slider package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-slider/library/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n\"fix: bump swc core to mitigate transpilation memory leaks ([PR #29253](https://github.com/microsoft/fluentui/pull/29253) by martinhochel@microsoft.com)\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Focusable Button with State Management in Fluent UI React Native\nDESCRIPTION: This example demonstrates how to create a button that can be focused programmatically using componentRef and IFocusable interface. It uses React state to track the focus state and includes a second button that toggles the focus of the first button when clicked.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/ButtonPage/docs/cross/ButtonUsage.md#2025-04-20_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as React from 'react';\nimport { Button, IFocusable } from '@fluentui/react-native';\nimport { View } from 'react-native';\n\nconst App = () => {\n  const [state, setState] = React.useState({\n    focused: false\n  });\n  const buttonRef = React.useRef<IFocusable>(null);\n\n  const onFocus = React.useCallback(() => {\n    setState({ focused: !state.focused });\n    if (buttonRef.current && !state.focused) {\n      buttonRef.current.focus();\n    }\n  }, [state, setState]);\n\n  return (\n    <View>\n      <Button\n        content={state.focused ? \"Focused\" : \"Not Focused\"}\n        componentRef={buttonRef}\n      />\n      <Button content=\"Click to focus\" onClick={onFocus} />\n    </View>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining Z-Index Variables in TypeScript\nDESCRIPTION: Exports constants for z-index values used in styling components. These variables help maintain consistent layering across the UI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_62\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const zIndexBackground = \"var(--zIndexBackground)\";\nexport const zIndexContent = \"var(--zIndexContent)\";\nexport const zIndexDebug = \"var(--zIndexDebug)\";\nexport const zIndexFloating = \"var(--zIndexFloating)\";\nexport const zIndexMessages = \"var(--zIndexMessages)\";\nexport const zIndexOverlay = \"var(--zIndexOverlay)\";\nexport const zIndexPopup = \"var(--zIndexPopup)\";\nexport const zIndexPriority = \"var(--zIndexPriority)\";\n```\n\n----------------------------------------\n\nTITLE: SearchBoxChangeEvent Type Definition (TypeScript)\nDESCRIPTION: Defines the SearchBoxChangeEvent type as either a React ChangeEvent for an HTMLInputElement or a React MouseEvent for an HTMLSpanElement. This type is exported publicly.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-search/library/etc/react-search.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type SearchBoxChangeEvent = React_2.ChangeEvent<HTMLInputElement> | React_2.MouseEvent<HTMLSpanElement>;\n```\n\n----------------------------------------\n\nTITLE: ColorSlider DOM Structure\nDESCRIPTION: The HTML DOM structure for the ColorSlider component, showing an input element for the slider, a rail for visual representation, and a thumb element for selection.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-color-picker/library/docs/Spec.md#2025-04-20_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"fui-ColorSlider\" role=\"group\">\n  <input id=\"slider\" type=\"range\" value=\"100\" aria-label=\"red\" max=\"360\">\n  <div class=\"fui-ColorSlider__rail\" ></div>\n  <div class=\"fui-ColorSlider__thumb\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining NeutralColors Namespace in TypeScript for FluentUI\nDESCRIPTION: Namespace containing neutral color constants for the FluentUI design system. It provides a full range of grayscale colors from black to white with various shades in between, consistently named from gray10 to gray220.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/theme/etc/theme.api.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport namespace NeutralColors {\n    const // (undocumented)\n    black = \"#000000\";\n    const // (undocumented)\n    gray220 = \"#11100f\";\n    const // (undocumented)\n    gray210 = \"#161514\";\n    const // (undocumented)\n    gray200 = \"#1b1a19\";\n    const // (undocumented)\n    gray190 = \"#201f1e\";\n    const // (undocumented)\n    gray180 = \"#252423\";\n    const // (undocumented)\n    gray170 = \"#292827\";\n    const // (undocumented)\n    gray160 = \"#323130\";\n    const // (undocumented)\n    gray150 = \"#3b3a39\";\n    const // (undocumented)\n    gray140 = \"#484644\";\n    const // (undocumented)\n    gray130 = \"#605e5c\";\n    const // (undocumented)\n    gray120 = \"#797775\";\n    const // (undocumented)\n    gray110 = \"#8a8886\";\n    const // (undocumented)\n    gray100 = \"#979593\";\n    const // (undocumented)\n    gray90 = \"#a19f9d\";\n    const // (undocumented)\n    gray80 = \"#b3b0ad\";\n    const // (undocumented)\n    gray70 = \"#bebbb8\";\n    const // (undocumented)\n    gray60 = \"#c8c6c4\";\n    const // (undocumented)\n    gray50 = \"#d2d0ce\";\n    const // (undocumented)\n    gray40 = \"#e1dfdd\";\n    const // (undocumented)\n    gray30 = \"#edebe9\";\n    const // (undocumented)\n    gray20 = \"#f3f2f1\";\n    const // (undocumented)\n    gray10 = \"#faf9f8\";\n    const // (undocumented)\n    white = \"#ffffff\";\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Default Theme in FluentProvider\nDESCRIPTION: Example of how to extend the default theme with custom tokens using the simplified FluentProvider types.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/convergence/make-styles-no-functions.md#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FluentProvider } from '@fluentui/react-provider';\nimport { mergeThemes, teamsLightTheme, Theme } from '@fluentui/react-theme';\n\ntype CustomTokens = {\n  tokenA: string;\n};\ntype CustomTheme = CustomTokens & Theme;\n\nconst extendedTheme: CustomTheme = mergeThemes(teamsLightTheme, { tokenA: 'red' });\n\nfunction App() {\n  return <FluentProvider theme={extendedTheme} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Input Component Type Definition in TypeScript\nDESCRIPTION: TypeScript type definition for the Input component props, showing the custom props including appearance variants, sizing options, and event handlers.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-input/library/docs/Spec.md#2025-04-20_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// Simplified version of the props (including only summaries of custom props)\ntype SimplifiedInputProps = {\n  /** Toggle inline display instead of block */\n  inline?: boolean;\n\n  /** Controls the colors and borders of the field (default `outline`) */\n  appearance?: 'outline' | 'underline' | 'filledDarker' | 'filledLighter';\n\n  /** Size of the input (default `medium`) */\n  size?: 'small' | 'medium' | 'large';\n\n  /** Default value (uncontrolled) */\n  defaultValue?: string;\n\n  /** Controlled value */\n  value?: string;\n\n  /** Called when the user changes the value */\n  onChange?: (ev: React.FormEvent<HTMLInputElement>, data: { value: string }) => void;\n\n  /** Allowed values for the native `type` prop */\n  type?: 'text' | '...'; // this is an enumeration of all text-like values\n};\n```\n\n----------------------------------------\n\nTITLE: App Component with Custom Style Provider in TSX\nDESCRIPTION: Example of implementing custom styles using FluentProvider and CustomStyleHooksProvider in a React application.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/AdvancedStylingTechniques.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, FluentProvider, webLightTheme, CustomStyleHooksProvider_unstable } from '@fluentui/react-components';\nimport { AlertRegular } from '@fluentui/react-icons';\nimport { FANCY_CUSTOM_STYLE_HOOKS } from './FancyAppCustomStyleHooksValue.ts';\n\nexport function App() {\n  return (\n    <FluentProvider theme={webLightTheme}>\n      <Button>I am a Vanilla Fluent Button</Button>\n      <CustomStyleHooksProvider_unstable value={FANCY_CUSTOM_STYLE_HOOKS}>\n        <Button icon={<AlertRegular />}>I am a *Fancy* Button</Button>\n      </CustomStyleHooksProvider_unstable>\n    </FluentProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Axis Name Types\nDESCRIPTION: Defines TypeScript types for X and Y axis naming conventions. These types ensure consistent axis naming in chart configurations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/chart-utilities/etc/chart-utilities.api.md#2025-04-20_snippet_44\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type XAxisName = `x${xYAxisNames}`;\n\nexport type YAxisName = `y${xYAxisNames}`;\n```\n\n----------------------------------------\n\nTITLE: Simulating Atomic CSS Build Output\nDESCRIPTION: Illustrates a proposed output of processing the base style object, demonstrating how generator outputs atomic CSS with associated classes for each property, including right-to-left (RTL) variations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/makeStyles.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// ⚠️ This is proposed and simplified example output for the purpose of the spec, not the real build output ⚠️\nconst buildOutput = {\n  color: { classname: 'abcd', css: '.abcd{color:red}' },\n  marginTop: { classname: 'efgh', css: '.efgh{margin-top:0}' }, // expand CSS shorthands\n  marginRight: { classname: 'ijkl', css: '.ijkl{margin-right:10px}', rtlCss: '.rijkl{margin-left:10px}' }, // expand, RTL\n  // ...\n  ':hover+background': { classname: 'mnop', css: '.mnop:hover{background:green}' },\n};\n```\n\n----------------------------------------\n\nTITLE: Sample Popover Implementation in Fluent UI\nDESCRIPTION: A sample code snippet demonstrating a `Popover` component with trigger and content sections, delineating how to structure popover functionality with embedded sections within `PopoverSurface`.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-popover/library/docs/Spec.md#2025-04-20_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n<Popover>\n  <PopoverTrigger>\n    <button>Opens popover</button>\n  </PopoverTrigger>\n\n  <PopoverSurface>\n    <h1>Popover</h2>\n    <div>Some section</div>\n    <div>Some section</div>\n  </PopoverSurface>\n</Popover>\n\n```\n\n----------------------------------------\n\nTITLE: Defining Divider Component Props Interface\nDESCRIPTION: TypeScript interface definition for IDividerAsProps, which extends IIconProps to include an optional IBreadcrumbItem property for rendering dividers.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_105\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IDividerAsProps extends IIconProps {\n    item?: IBreadcrumbItem;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Styles from Context in a Component\nDESCRIPTION: This code illustrates how a component can utilize a custom style hook from a React Context. If a custom style is defined within the context, it is applied to the component’s state; otherwise, the default state is returned, ensuring a fallback mechanism.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/custom-styling.md#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst customStyles = useContextSelector(ComponentCustomStylesContext, context => context?.useCustomStyles);\n\n//...component styling here\n\nreturn customStyles ? customStyles(state) : state;\n```\n\n----------------------------------------\n\nTITLE: Describing Padding Interface in TypeScript\nDESCRIPTION: The Padding interface offers adjustable padding values for chart elements, with specific attributes for bottom, left, right, and top. It also includes an 'editType' property indicating how padding adjustments can be applied.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/chart-utilities/etc/chart-utilities.api.md#2025-04-20_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface Padding {\n    b: number;\n    // (undocumented)\n    editType: 'arraydraw';\n    l: number;\n    r: number;\n    t: number;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript HoverCardBase Component Class Definition\nDESCRIPTION: React component implementing hover card functionality with configurable delays, hotkeys and card types.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_44\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class HoverCardBase extends React_2.Component<IHoverCardProps, IHoverCardState> implements IHoverCard {\n    constructor(props: IHoverCardProps);\n    componentDidMount(): void;\n    componentDidUpdate(prevProps: IHoverCardProps, prevState: IHoverCardState): void;\n    componentWillUnmount(): void;\n    static defaultProps: {\n        cardOpenDelay: number;\n        cardDismissDelay: number;\n        expandedCardOpenDelay: number;\n        instantOpenOnClick: boolean;\n        setInitialFocus: boolean;\n        openHotKey: number;\n        type: HoverCardType;\n    };\n    dismiss: (withTimeOut?: boolean) => void;\n    render(): JSX.Element;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Breadcrumb with Custom Divider in FluentUI Northstar (v0)\nDESCRIPTION: Example of implementing a Breadcrumb component using FluentUI Northstar v0. It shows how to create breadcrumb items with custom divider icons.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-breadcrumb/library/docs/Spec.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Breadcrumb } from '@fluentui/react-northstar';\nimport { ChevronEndMediumIcon } from '@fluentui/react-icons-northstar';\n\nconst BreadcrumbExampleIconDivider = props => (\n  <Breadcrumb aria-label=\"breadcrumb\">\n    <Breadcrumb.Item>\n      <Breadcrumb.Link href=\"\">Home</Breadcrumb.Link>\n    </Breadcrumb.Item>\n    <Breadcrumb.Divider>\n      <ChevronEndMediumIcon />\n    </Breadcrumb.Divider>\n    <Breadcrumb.Item>\n      <Breadcrumb.Link href=\"\">Store</Breadcrumb.Link>\n    </Breadcrumb.Item>\n    <Breadcrumb.Divider>\n      <ChevronEndMediumIcon />\n    </Breadcrumb.Divider>\n    <Breadcrumb.Item aria-current=\"page\">T-shirt</Breadcrumb.Item>\n  </Breadcrumb>\n);\n```\n\n----------------------------------------\n\nTITLE: No Context Default Value (Correct)\nDESCRIPTION: This code snippet demonstrates the correct way to create a React context without a default value. The context is initialized with `undefined`, as required by the `no-context-default-value` rule.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/eslint-plugin/README.md#2025-04-20_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as React from 'react';\nconst context = React.createContext(undefined);\n```\n\n----------------------------------------\n\nTITLE: Overriding Z-Index Tokens in a Theme\nDESCRIPTION: This code snippet illustrates how to override the default z-index values by providing a custom theme to the `FluentProvider`. This allows partners to adjust the z-index hierarchy to match their specific needs, providing flexibility and control over the visual appearance of their applications.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/z-index-handling.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n\"// Fluent/partner code\\nimport { FluentProvider, Theme, webLightTheme } from '@fluentui/react-components';\\n\\nconst customTheme: Theme = {\\n  ...webLightTheme,\\n  // 👇 customized values\\n  zIndexOverlay: 100000,\\n};\\n\\nfunction App() {\\n  return <FluentProvider theme={customTheme} />;\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Creating Performance Tests in Fluent UI (TypeScript)\nDESCRIPTION: Example of how to create a performance test file in Fluent UI. It uses Storybook CSF convention and includes metadata for iterations. This snippet shows how to create tests for a Button component with different states.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/test-a-feature.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// If this file is named ButtonBasic.perf.tsx, it will be picked up as kind of 'ButtonBasic' with story names of 'Blank' and 'WithText'.\nexport default {\n  iterations: 5000,\n};\n\nexport const Blank = () => <Button />;\nexport const WithText = () => <Button content=\"Click here\" />;\n```\n\n----------------------------------------\n\nTITLE: Defining OverflowDividerEntry Interface in TypeScript\nDESCRIPTION: This snippet defines the OverflowDividerEntry interface, which includes a reference to a DOM element and an associated group ID. This structure is crucial for managing dividers within the overflow manager.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/priority-overflow/etc/priority-overflow.api.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface OverflowDividerEntry {\n    element: HTMLElement;\n    // (undocumented)\n    groupId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating List Items in TypeScript\nDESCRIPTION: This function generates a list of items based on the specified count and optional starting index. It simplifies the process of creating example items for display or testing purposes. Parameters include count (total number of items to create) and startIndex (optional index to start from). Returns an array of IExampleItem objects.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/example-data/etc/example-data.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport function createListItems(count: number, startIndex?: number): IExampleItem[];\n```\n\n----------------------------------------\n\nTITLE: Updating Contextual Menu Button from v8 to v9\nDESCRIPTION: This snippet illustrates how to migrate the contextual menu button that used menuProps in v8 to the new v9 structure using TSX/JSX children.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/HandlingBreakingChanges.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"\"\"\nconst menuProps: IContextualMenuProps = {\n  items: [\n    {\n      key: 'new',\n      text: 'New Item',\n    },\n    {\n      key: 'open',\n      text: 'Open Item',\n    },\n    //...\n  ],\n};\n\n<DefaultButton menuProps={menuProps}>Options</DefaultButton>;\n\"\"\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\n\"\"\"\n<Menu>\n  <MenuTrigger>\n    <Button>Options</Button>\n  </MenuTrigger>\n\n  <MenuPopover>\n    <MenuList>\n      <MenuItem>New Item</MenuItem>\n      <MenuItem>Open Item</MenuItem>\n      <MenuItem>...</MenuItem>\n    </MenuList>\n  </MenuPopover>\n</Menu>\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining SpinnerSize and SpinnerType Enumerations\nDESCRIPTION: Enumerations for spinner component sizes and types. SpinnerSize includes xSmall through large values, while SpinnerType is deprecated and includes only normal and large.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_262\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport enum SpinnerSize {\n    large = 3,\n    medium = 2,\n    small = 1,\n    xSmall = 0\n}\n\n// @public @deprecated (undocumented)\nexport enum SpinnerType {\n    // @deprecated (undocumented)\n    large = 1,\n    // @deprecated (undocumented)\n    normal = 0\n}\n```\n\n----------------------------------------\n\nTITLE: Bumping React Button Version in Fluent UI\nDESCRIPTION: This snippet indicates the version bump for the @fluentui/react-button package to v9.4.0. Regular updates like this are crucial for maintaining modern UI components and interface responsiveness.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tree/library/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n- Bump @fluentui/react-button to v9.4.0 ([PR #33876](https://github.com/microsoft/fluentui/pull/33876) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Input Component Slot Props Example in TSX\nDESCRIPTION: Example of using slot props to pass values to an Input component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/native-element-props.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Input input={{ id: 'foo', value: 'stuff' }} />\n```\n\n----------------------------------------\n\nTITLE: Custom Locale Date Format Example\nDESCRIPTION: Example showing how to use d3-time-format locale definition for custom date axis formatting. Referenced but not directly shown in the documentation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-examples/src/react-charting/LineChart/docs/LineChartBestPractices.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dateTime\": \"%x, %X\",\n  \"date\": \"%-m/%-d/%Y\",\n  \"time\": \"%-I:%M:%S %p\",\n  \"periods\": [\"AM\", \"PM\"],\n  \"days\": [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n  \"shortDays\": [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n  \"months\": [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n  \"shortMonths\": [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Load Theme Function\nDESCRIPTION: Defines a function, `loadTheme`, that accepts a partial theme (`IPartialTheme`) and an optional boolean `depComments`. It merges the provided partial theme with the existing theme and returns the resulting `ITheme` object.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/style-utilities/etc/style-utilities.api.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n\"export function loadTheme(theme: IPartialTheme, depComments?: boolean): ITheme;\"\n```\n\n----------------------------------------\n\nTITLE: Starting the React 18 Test App for Fluent UI v9\nDESCRIPTION: This command starts a simple CRA-style app for testing Fluent UI components in a React 18 environment.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/react-18-tests-v9/README.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# yarn start\n```\n\n----------------------------------------\n\nTITLE: Implementing New Event Handlers with Generic Event Types\nDESCRIPTION: An implementation snippet demonstrating how to apply the EventData and EventHandler types for both existing and new components. This snippet shows deprecating old event handler signatures and introducing new ones (suffixed with '2') that utilize the proposed typing strategy, enhancing flexibility and accommodating future event types in a type-safe manner.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/event-handlers-event-type.md#2025-04-20_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as React from 'react';\n\n// ======= For an existing component =======\n{\n  type OpenPopoverEvents = KeyboardEvent | MouseEvent; // existing event type\n\n  type MyComponentElement = HTMLElement;\n\n  type OnOpenChangeData = (\n    | EventData<'click', React.MouseEvent<MyComponentElement>>\n    | EventData<'keydown', React.KeyboardEvent<MyComponentElement>>\n    | EventData<'scroll', Event>\n  ) & {\n    open: boolean;\n  };\n\n  type PopoverProps = {\n    /**\n     * @deprecated Use onOpenChange2 instead.\n     */\n    onOpenChange?: (e: OpenPopoverEvents, data: OnOpenChangeData) => void;\n\n    onOpenChange2?: EventHandler<OnOpenChangeData>;\n  };\n}\n\n// ======= For a new component =======\n{\n  type MyComponentElement = HTMLElement;\n\n  type OnSomeEventData = EventData<'click', React.MouseEvent<MyComponentElement>> & {\n    open: boolean;\n  };\n  // If one day we need to add more events, we can just add them to the union:\n  // type OnSomeEventData = (\n  //     | EventData<'click', React.MouseEvent<MyComponentElement>>\n  //     | EventData<'focus', React.FocusEvent<MyComponentElement>>\n  //   ) & {\n  //     open: boolean;\n  //   };\n\n  type SomeProps = {\n    onSomeEvent?: EventHandler<OnSomeEventData>;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Icon Accordion in FluentUI\nDESCRIPTION: Example of Accordion implementation with custom expand icons positioned at the end of each header. Shows how to create accordion items with custom icons and their corresponding panel content.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-accordion/library/docs/Spec.md#2025-04-20_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst accordion = (\n  <Accordion expandIconPositon=\"end\">\n    <AccordionItem>\n      <AccordionHeader expandIcon={<CustomIcon/>}>\n        First Panel\n      </AccordionHeader>\n      <AccordionPanel>\n        This is the content of the first Panel\n      </AccordionPanel>\n    </AccordionItem>\n    <AccordionItem>\n      <AccordionHeader expandIcon={<AnotherCustomIcon/>}>\n        Second Panel\n      </AccordionHeader>\n      <AccordionPanel>\n        This is the content of the second Panel\n      </AccordionPanel>\n    </AccordionItem>\n  <Accordion>\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing useScrollbarWidth in TypeScript\nDESCRIPTION: A public hook that calculates the width of the browser's scrollbar based on provided options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-utilities/etc/react-utilities.api.md#2025-04-20_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport function useScrollbarWidth(options: UseScrollbarWidthOptions): number | undefined;\n```\n\n----------------------------------------\n\nTITLE: Minor Update: Tree Type Context Enhancement\nDESCRIPTION: Adds treeType to tree context, providing more configuration options and type information for tree components\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tree/library/CHANGELOG.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nfeat: adds treeType to tree context\n```\n\n----------------------------------------\n\nTITLE: Implementing TagPicker Filter Hook in TypeScript\nDESCRIPTION: Function that handles filtering options in the TagPicker component. Takes configuration including filter function, no options element, render function, query, and options array.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_58\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function useTagPickerFilter({ filter: filterOverride, noOptionsElement, renderOption, query, options, }: UseTagPickerFilterConfig): JSX.Element[];\n```\n\n----------------------------------------\n\nTITLE: Solution to Widening Types Problem\nDESCRIPTION: This snippet presents a solution to the widening types issue by using `getNativeElementProps` to filter out any properties that are not valid for the native element. This ensures that only supported properties are passed to the `root` element, preventing unexpected behavior.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/root-as-slot.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// use*State hook\nreturn {\n  // This filters out stateSpecificProperty ✅\n  root: getNativeElementProps(state.components.root, props),\n};\n```\n\n----------------------------------------\n\nTITLE: createArrowStyles function\nDESCRIPTION: Defines an internal function `createArrowStyles` that accepts a `CreateArrowStylesOptions` object and returns a `GriffelStyle` object. This function generates the necessary CSS styles for the arrow of a positioned element.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-positioning/etc/react-positioning.api.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal\nexport function createArrowStyles(options: CreateArrowStylesOptions): GriffelStyle;\n```\n\n----------------------------------------\n\nTITLE: Field State Definition\nDESCRIPTION: This TypeScript code defines the `FieldState` type, which represents the internal state of the Field component. It includes properties for the field's orientation, required status, size, validation state, children, and a generated control ID. This state is used to manage the Field's behavior and rendering.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-field/library/docs/Spec.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FieldState = ComponentState<Required<FieldSlots>> &\n  Required<Pick<FieldProps, 'orientation' | 'required' | 'size' | 'validationState'>> &\n  Pick<FieldProps, 'children'> & {\n    /**\n     * The ID generated for the control inside the field, and the default value of label.htmlFor prop.\n     */\n    generatedControlId: string;\n  };\n\n```\n\n----------------------------------------\n\nTITLE: Declaring Series Validation Function\nDESCRIPTION: Exports a function that validates 2D data series to ensure they conform to the expected format for plotting. Returns a boolean indicating validity.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/chart-utilities/etc/chart-utilities.api.md#2025-04-20_snippet_43\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const validate2Dseries: (series: Partial<PlotData>) => boolean;\n```\n\n----------------------------------------\n\nTITLE: Using Compose Function for Easy Component Recomposition in React\nDESCRIPTION: Demonstrates a proposed compose function to simplify the process of recomposing components with custom styles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/custom-styling.md#2025-04-20_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { compose } from '@fluentui/react-components';\nimport type { ButtonProps } from '@fluentui/react-components';\nimport { useCustomButtonStyles } from '../styling/button';\n\n// This is a rough idea of what a compose method might look like.\nexport const Button = compose<ButtonProps>('Button', useButton_unstable, useCustomButtonStyles, renderButton_unstable);\n```\n\n----------------------------------------\n\nTITLE: Base Component Class Definitions in TypeScript\nDESCRIPTION: Defines several base classes for FluentUI components including BaseField, BaseProgressBar, BaseRatingDisplay, BaseSpinner, BaseTablist, BaseTextArea and BaseTextInput. These classes extend FASTElement and implement form controls with validation, accessibility and state management.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport class BaseField extends FASTElement {\n    constructor();\n    // @internal\n    changeHandler(e: Event): boolean | void;\n    // @internal\n    clickHandler(e: MouseEvent): boolean | void;\n    // @internal\n    elementInternals: ElementInternals;\n    // @internal\n    focusinHandler(e: FocusEvent): boolean | void;\n    // @internal\n    focusoutHandler(e: FocusEvent): boolean | void;\n    input: SlottableInput;\n    inputChanged(prev: SlottableInput | undefined, next: SlottableInput | undefined): void;\n    // @internal\n    invalidHandler(e: Event): boolean | void;\n    // @internal\n    labelSlot: Node[];\n    protected labelSlotChanged(prev: Node[], next: Node[]): void;\n    // @internal\n    messageSlot: Element[];\n    // @internal\n    messageSlotChanged(prev: Element[], next: Element[]): void;\n    // @internal\n    setStates(): void;\n    // (undocumented)\n    setValidationStates(): void;\n    // @internal\n    slottedInputs: SlottableInput[];\n    // @internal\n    slottedInputsChanged(prev: SlottableInput[] | undefined, next: SlottableInput[] | undefined): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Display Name and Class Name Definition\nDESCRIPTION: This example demonstrates how to define the `displayName` and `className` static properties for a component. These properties are utilized for documentation generation, test case generation, and in other utility functions within the Fluent UI ecosystem. The `displayName` provides a human-readable name for the component, while `className` is typically used for styling and identifying the component in CSS.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/add-a-feature.md#2025-04-20_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n  static displayName = 'Accordion'\n  static className = 'ui-accordion'\n```\n\n----------------------------------------\n\nTITLE: Defining FluentUI Icon Enum Constants in TypeScript\nDESCRIPTION: This code snippet contains a portion of a TypeScript enum definition that maps icon names to string values in FluentUI. Each enum member represents an available icon in the library, with the string value matching the name of the icon.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/font-icons-mdl2/etc/font-icons-mdl2.api.md#2025-04-20_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nDocumentManagement = \"DocumentManagement\",\n// (undocumented)\nDocumentReply = \"DocumentReply\",\n// (undocumented)\nDocumentSearch = \"DocumentSearch\",\n// (undocumented)\nDocumentSet = \"DocumentSet\",\n// (undocumented)\nDOM = \"DOM\",\n// (undocumented)\nDonutChart = \"DonutChart\",\n// (undocumented)\nDoor = \"Door\",\n// (undocumented)\nDoubleBookmark = \"DoubleBookmark\",\n// (undocumented)\nDoubleChevronDown = \"DoubleChevronDown\",\n// (undocumented)\nDoubleChevronDown12 = \"DoubleChevronDown12\",\n// (undocumented)\nDoubleChevronDown8 = \"DoubleChevronDown8\",\n// (undocumented)\nDoubleChevronLeft = \"DoubleChevronLeft\",\n// (undocumented)\nDoubleChevronLeft12 = \"DoubleChevronLeft12\",\n// (undocumented)\nDoubleChevronLeft8 = \"DoubleChevronLeft8\",\n// (undocumented)\nDoubleChevronLeftMed = \"DoubleChevronLeftMed\",\n// (undocumented)\nDoubleChevronLeftMedMirrored = \"DoubleChevronLeftMedMirrored\",\n// (undocumented)\nDoubleChevronRight = \"DoubleChevronRight\",\n// (undocumented)\nDoubleChevronRight12 = \"DoubleChevronRight12\",\n// (undocumented)\nDoubleChevronRight8 = \"DoubleChevronRight8\",\n// (undocumented)\nDoubleChevronUp = \"DoubleChevronUp\",\n// (undocumented)\nDoubleChevronUp12 = \"DoubleChevronUp12\",\n// (undocumented)\nDoubleChevronUp8 = \"DoubleChevronUp8\",\n// (undocumented)\nDoubleColumn = \"DoubleColumn\",\n// (undocumented)\nDoubleColumnEdit = \"DoubleColumnEdit\",\n// (undocumented)\nDoubleDownArrow = \"DoubleDownArrow\",\n// (undocumented)\nDown = \"Down\",\n// (undocumented)\nDownload = \"Download\",\n// (undocumented)\nDownloadDocument = \"DownloadDocument\",\n// (undocumented)\nDragObject = \"DragObject\",\n// (undocumented)\nDrillDown = \"DrillDown\",\n// (undocumented)\nDrillDownSolid = \"DrillDownSolid\",\n// (undocumented)\nDrillExpand = \"DrillExpand\",\n// (undocumented)\nDrillShow = \"DrillShow\",\n// (undocumented)\nDrillThrough = \"DrillThrough\",\n// (undocumented)\nDRM = \"DRM\",\n// (undocumented)\nDrop = \"Drop\",\n// (undocumented)\nDropdown = \"Dropdown\",\n// (undocumented)\nDropShapeSolid = \"DropShapeSolid\",\n// (undocumented)\nDuplicateRow = \"DuplicateRow\",\n// (undocumented)\nDuststorm = \"Duststorm\",\n// (undocumented)\nDynamics365Logo = \"Dynamics365Logo\",\n// (undocumented)\nDynamicSMBLogo = \"DynamicSMBLogo\",\n// (undocumented)\nEaseOfAccess = \"EaseOfAccess\",\n// (undocumented)\nEatDrink = \"EatDrink\",\n// (undocumented)\nEdgeLogo = \"EdgeLogo\",\n// (undocumented)\nEdit = \"Edit\",\n// (undocumented)\nEditContact = \"EditContact\",\n// (undocumented)\nEditCreate = \"EditCreate\",\n// (undocumented)\nEditMail = \"EditMail\",\n// (undocumented)\nEditMirrored = \"EditMirrored\",\n// (undocumented)\nEditNote = \"EditNote\",\n// (undocumented)\nEditPhoto = \"EditPhoto\",\n// (undocumented)\nEditSolid12 = \"EditSolid12\",\n// (undocumented)\nEditSolidMirrored12 = \"EditSolidMirrored12\",\n// (undocumented)\nEditStyle = \"EditStyle\",\n// (undocumented)\nEducation = \"Education\",\n// (undocumented)\nEllipse = \"Ellipse\",\n// (undocumented)\nEmbed = \"Embed\",\n// (undocumented)\nEMI = \"EMI\",\n// (undocumented)\nEmoji = \"Emoji\",\n// (undocumented)\nEmoji2 = \"Emoji2\",\n// (undocumented)\nEmojiDisappointed = \"EmojiDisappointed\",\n// (undocumented)\nEmojiNeutral = \"EmojiNeutral\",\n// (undocumented)\nEmojiTabSymbols = \"EmojiTabSymbols\",\n// (undocumented)\nEmptyRecycleBin = \"EmptyRecycleBin\",\n// (undocumented)\nEncryption = \"Encryption\",\n// (undocumented)\nEngineeringGroup = \"EngineeringGroup\",\n// (undocumented)\nEntitlementPolicy = \"EntitlementPolicy\",\n// (undocumented)\nEntitlementRedemption = \"EntitlementRedemption\",\n// (undocumented)\nEntryDecline = \"EntryDecline\",\n// (undocumented)\nEntryView = \"EntryView\",\n// (undocumented)\nEqualizer = \"Equalizer\",\n// (undocumented)\nEraseTool = \"EraseTool\",\n// (undocumented)\nError = \"Error\",\n// (undocumented)\nErrorBadge = \"ErrorBadge\",\n// (undocumented)\nEvent = \"Event\",\n// (undocumented)\nEvent12 = \"Event12\",\n// (undocumented)\nEventAccepted = \"EventAccepted\",\n// (undocumented)\nEventDate = \"EventDate\",\n// (undocumented)\nEventDateMissed12 = \"EventDateMissed12\",\n// (undocumented)\nEventDeclined = \"EventDeclined\",\n// (undocumented)\nEventInfo = \"EventInfo\",\n// (undocumented)\nEventTentative = \"EventTentative\",\n// (undocumented)\nEventTentativeMirrored = \"EventTentativeMirrored\",\n// (undocumented)\nEventToDoLogo = \"EventToDoLogo\",\n// (undocumented)\nExcelDocument = \"ExcelDocument\",\n// (undocumented)\nExcelLogo = \"ExcelLogo\",\n// (undocumented)\nExcelLogo16 = \"ExcelLogo16\",\n// (undocumented)\nExcelLogoFill = \"ExcelLogoFill\",\n// (undocumented)\nExcelLogoFill16 = \"ExcelLogoFill16\",\n// (undocumented)\nExcelLogoInverse = \"ExcelLogoInverse\",\n// (undocumented)\nExcelLogoInverse16 = \"ExcelLogoInverse16\",\n// (undocumented)\nExchangeLogo = \"ExchangeLogo\",\n// (undocumented)\nExchangeLogoFill = \"ExchangeLogoFill\",\n// (undocumented)\nExchangeLogoInverse = \"ExchangeLogoInverse\",\n// (undocumented)\nExerciseTracker = \"ExerciseTracker\",\n// (undocumented)\nExpandMenu = \"ExpandMenu\",\n// (undocumented)\nExploreContent = \"ExploreContent\",\n// (undocumented)\nExploreContentSingle = \"ExploreContentSingle\",\n// (undocumented)\nExploreData = \"ExploreData\",\n// (undocumented)\nExport = \"Export\",\n// (undocumented)\nExportMirrored = \"ExportMirrored\",\n// (undocumented)\nExternalBuild = \"ExternalBuild\",\n// (undocumented)\nExternalTFVC = \"ExternalTFVC\",\n// (undocumented)\nExternalXAML = \"ExternalXAML\",\n// (undocumented)\nEyedropper = \"Eyedropper\",\n// (undocumented)\nEyeShadow = \"EyeShadow\",\n// (undocumented)\nF12DevTools = \"F12DevTools\",\n// (undocumented)\nFabricAssetLibrary = \"FabricAssetLibrary\",\n// (undocumented)\nFabricDataConnectionLibrary = \"FabricDataConnectionLibrary\",\n// (undocumented)\nFabricDocLibrary = \"FabricDocLibrary\",\n// (undocumented)\nFabricFolder = \"FabricFolder\",\n// (undocumented)\nFabricFolderConfirm = \"FabricFolderConfirm\",\n// (undocumented)\nFabricFolderFill = \"FabricFolderFill\",\n// (undocumented)\nFabricFolderSearch = \"FabricFolderSearch\",\n// (undocumented)\nFabricFormLibrary = \"FabricFormLibrary\",\n// (undocumented)\nFabricFormLibraryMirrored = \"FabricFormLibraryMirrored\",\n// (undocumented)\nFabricMovetoFolder = \"FabricMovetoFolder\",\n// (undocumented)\nFabricNetworkFolder = \"FabricNetworkFolder\",\n// (undocumented)\nFabricNewFolder = \"FabricNewFolder\",\n// (undocumented)\nFabricOpenFolderHorizontal = \"FabricOpenFolderHorizontal\",\n// (undocumented)\nFabricPictureLibrary = \"FabricPictureLibrary\",\n// (undocumented)\nFabricPublicFolder = \"FabricPublicFolder\",\n// (undocumented)\nFabricReportLibrary = \"FabricReportLibrary\",\n// (undocumented)\nFabricReportLibraryMirrored = \"FabricReportLibraryMirrored\",\n// (undocumented)\nFabricSyncFolder = \"FabricSyncFolder\",\n// (undocumented)\nFabricTextHighlight = \"FabricTextHighlight\",\n// (undocumented)\nFabricTextHighlightComposite = \"FabricTextHighlightComposite\",\n// (undocumented)\nFabricUnsyncFolder = \"FabricUnsyncFolder\",\n// (undocumented)\nFabricUserFolder = \"FabricUserFolder\",\n// (undocumented)\nFamily = \"Family\",\n// (undocumented)\nFangBody = \"FangBody\",\n// (undocumented)\nFastForward = \"FastForward\",\n// (undocumented)\nFastMode = \"FastMode\",\n// (undocumented)\nFavicon = \"Favicon\",\n// (undocumented)\nFavoriteList = \"FavoriteList\",\n// (undocumented)\nFavoriteStar = \"FavoriteStar\",\n// (undocumented)\nFavoriteStarFill = \"FavoriteStarFill\",\n// (undocumented)\nFax = \"Fax\",\n// (undocumented)\nFeedback = \"Feedback\",\n// (undocumented)\nFeedbackRequestMirroredSolid = \"FeedbackRequestMirroredSolid\",\n// (undocumented)\nFeedbackRequestSolid = \"FeedbackRequestSolid\",\n// (undocumented)\nFeedbackResponseSolid = \"FeedbackResponseSolid\",\n// (undocumented)\nFerry = \"Ferry\",\n// (undocumented)\nFerrySolid = \"FerrySolid\",\n// (undocumented)\nFieldChanged = \"FieldChanged\",\n// (undocumented)\nFieldEmpty = \"FieldEmpty\",\n// (undocumented)\nFieldFilled = \"FieldFilled\",\n// (undocumented)\nFieldNotChanged = \"FieldNotChanged\",\n// (undocumented)\nFieldReadOnly = \"FieldReadOnly\",\n// (undocumented)\nFieldRequired = \"FieldRequired\",\n// (undocumented)\nFileASPX = \"FileASPX\",\n// (undocumented)\nFileBug = \"FileBug\",\n// (undocumented)\nFileCode = \"FileCode\",\n// (undocumented)\nFileComment = \"FileComment\",\n// (undocumented)\nFileCSS = \"FileCSS\",\n// (undocumented)\nFileHTML = \"FileHTML\",\n// (undocumented)\nFileImage = \"FileImage\",\n// (undocumented)\nFileJAVA = \"FileJAVA\",\n// (undocumented)\nFileLess = \"FileLess\",\n// (undocumented)\nFilePDB = \"FilePDB\",\n// (undocumented)\nFileRequest = \"FileRequest\",\n// (undocumented)\nFileSass = \"FileSass\",\n// (undocumented)\nFileSQL = \"FileSQL\",\n// (undocumented)\nFileSymlink = \"FileSymlink\",\n// (undocumented)\nFileTemplate = \"FileTemplate\",\n// (undocumented)\nFileTypeSolution = \"FileTypeSolution\",\n// (undocumented)\nFileYML = \"FileYML\",\n// (undocumented)\nFilter = \"Filter\",\n// (undocumented)\nFilters = \"Filters\",\n// (undocumented)\nFilterSettings = \"FilterSettings\",\n```\n\n----------------------------------------\n\nTITLE: BaseFloatingPicker Component Definition in TypeScript\nDESCRIPTION: Defines the generic BaseFloatingPicker component that provides suggestion functionality in a floating context. Handles suggestion loading, selection, and display management.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport class BaseFloatingPicker<T extends {}, P extends IBaseFloatingPickerProps<T>> extends React_2.Component<P, IBaseFloatingPickerState> implements IBaseFloatingPicker {\n    constructor(basePickerProps: P);\n    // (undocumented)\n    completeSuggestion: () => void;\n    // (undocumented)\n    componentDidMount(): void;\n    // (undocumented)\n    componentDidUpdate(): void;\n    // (undocumented)\n    componentWillUnmount(): void;\n    // (undocumented)\n    protected currentPromise: PromiseLike<T[]>;\n    // (undocumented)\n    get currentSelectedSuggestionIndex(): number;\n    // (undocumented)\n    forceResolveSuggestion(): void;\n    // (undocumented)\n    hidePicker: () => void;\n    // (undocumented)\n    get inputText(): string;\n    // (undocumented)\n    protected isComponentMounted: boolean;\n    // (undocumented)\n    get isSuggestionsShown(): boolean;\n    // (undocumented)\n}\n```\n\n----------------------------------------\n\nTITLE: Option Props Definition\nDESCRIPTION: This snippet defines the props for the Option component. It includes properties for disabled state, value, text, and children.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/library/etc/react-combobox.api.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport type OptionProps = ComponentProps<Partial<OptionSlots>> & {\n    disabled?: boolean;\n    value?: string;\n} & ({\n    text?: string;\n    children: string;\n} | {\n    text: string;\n    children?: React_2.ReactNode;\n});\"\n```\n\n----------------------------------------\n\nTITLE: resolveShorthand Helper Function in React\nDESCRIPTION: A utility function that ensures shorthand props are converted into a usable object format for further prop management, allowing for more flexible component customization.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-utilities/src/compose/README.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst icon = resolveShorthandProps(<span />); // ➡ { chidlren: <span /> }\nconst button = resolveShorthandProps('Hello world!'); // ➡ { children: 'Hello world!' }\nconst image = resolveShorthandProps({ src: './image.jpg' }); // ➡ { src: './image.jpg' }\n```\n\n----------------------------------------\n\nTITLE: Rendering a Panel in Fabric (v8)\nDESCRIPTION: Example of how to use the Panel component in Fluent UI v8, which is similar to the new Drawer component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-drawer/library/docs/Spec.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Panel headerText=\"Sample panel\" isOpen={isOpen} onDismiss={dismissPanel} closeButtonAriaLabel=\"Close\">\n  <p>Content goes here.</p>\n</Panel>\n```\n\n----------------------------------------\n\nTITLE: Using IconButton Component in Fluent UI React\nDESCRIPTION: This snippet shows how to use the IconButton component with icon properties in a Fluent UI React application. It demonstrates configuring the icon, title, and aria-label for accessibility.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Styles/FabricIconsPage/docs/web/FabricIconsUsage.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { IconButton } from '@fluentui/react/lib/Button';\n\nconst MyIconButton = () => <IconButton iconProps={{ iconName: 'Add' }} title=\"Add\" ariaLabel=\"Add\" />;\n\nReactDOM.render(<MyIconButton />, document.body.firstChild);\n```\n\n----------------------------------------\n\nTITLE: TypeScript: Render function for Switch component\nDESCRIPTION: Defines a render function for the Switch component using JSX.Element. This function likely takes the component's state as input and returns the rendered React element.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-switch/library/etc/react-switch.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const renderSwitch_unstable: (state: SwitchState) => JSX.Element;\"\n```\n\n----------------------------------------\n\nTITLE: FluentUI DateTime Changelog Entry\nDESCRIPTION: Most recent changelog entry showing package version 7.8.101 with helper function extraction changes\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-date-time/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Minor changes\n\n- Extract helper functions from date-time/Calendar ([PR #13640](https://github.com/microsoft/fluentui/pull/13640) by pompomon@gmail.com)\n\n## [7.8.101](https://github.com/microsoft/fluentui/tree/@uifabric/date-time_v7.8.101)\n```\n\n----------------------------------------\n\nTITLE: Defining FontIcon Component in React\nDESCRIPTION: Declares the FontIcon component which renders an icon from a font. The component accepts IFontIconProps to customize its appearance and behavior.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_36\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport const FontIcon: React_2.FunctionComponent<IFontIconProps>;\n```\n\n----------------------------------------\n\nTITLE: Avatar Component Structure - JSX\nDESCRIPTION: Demonstrates the basic JSX structure of the Avatar component with all possible slots.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-avatar/library/docs/SPEC.md#2025-04-20_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<slots.root {...slotProps.root}>\n  {slots.initials && <slots.initials {...slotProps.initials} />}\n  {slots.icon && <slots.icon {...slotProps.icon} />}\n  {slots.image && <slots.image {...slotProps.image} />}\n  {slots.badge && <slots.badge {...slotProps.badge} />}\n</slots.root>\n```\n\n----------------------------------------\n\nTITLE: Defining IContextualMenuClassNames Interface\nDESCRIPTION: Defines the `IContextualMenuClassNames` interface which specifies the class names used for styling a ContextualMenu component.  It includes properties for the container, header, list, root, subcomponent styles and title.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_81\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IContextualMenuClassNames {\n    // (undocumented)\n    container?: string;\n    // (undocumented)\n    header?: string;\n    // (undocumented)\n    list?: string;\n    // (undocumented)\n    root?: string;\n    // (undocumented)\n    subComponentStyles?: IContextualMenuSubComponentStyles;\n    // (undocumented)\n    title?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ToolbarItemGroup Props Interface in TypeScript\nDESCRIPTION: TypeScript interface for ToolbarItemGroup component that manages grouped toolbar items.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-toolbar/library/docs/Spec.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype ToolbarItemGroupProps = {\n  onChange?: (itemName: string, value: boolean) => void;\n  value?: boolean;\n  disabled?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Text Component Usage in FluentUI (Markdown)\nDESCRIPTION: This snippet outlines best practices for using the Text component in FluentUI. It recommends using Text for displaying stylized or read-only text, and utilizing the 'as' prop to provide semantic meaning to the text element.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-text/stories/src/Text/TextBestPractices.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Best practices\n\n### Do\n\n- Use Text whenever you need to display stylized text\n- Use Text to display read-only text\n- Use the `as` prop to give the text a semantic meaning. By default, the Text component will result in a `span` element.\n```\n\n----------------------------------------\n\nTITLE: Checkbox Implementation with Wrapper Slot in TSX\nDESCRIPTION: Internal structure of the Checkbox component using a wrapper slot as the root DOM element and the input as the root slot.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/native-element-props.md#2025-04-20_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<slots.wrapper>\n  <slots.root {...slotProps.root} /> {/* input element */}\n  <slots.label {...slotProps.label} />\n</slots.wrapper>\n```\n\n----------------------------------------\n\nTITLE: useStateManager Hook Reference in React\nDESCRIPTION: This provides the reference usage for the `useStateManager` hook, highlighting the input parameters. It specifies the `managerFactory` which implements the state manager API and options object that allows to map the component props to initial state or regular state for the controlled mode.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/react-bindings/README.md#2025-04-20_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst { state, actions } = useStateManager(createInputManager)\nconst { state, actions } = useStateManager(\n  managerFactory: ManagerFactory<State, Actions>,\n  options: UseStateManagerOptions<Props>,\n)\n```\n\n----------------------------------------\n\nTITLE: Bumping FluentUI Example Data Version\nDESCRIPTION: This snippet shows how to bump the version of the @fluentui/example-data package. The commit hash provides a direct link to the change within the repository. This action is part of maintaining the dependencies for the project.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-docsite-components/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n\"- Bump @fluentui/example-data to v8.4.13 ([commit](https://github.com/microsoft/fluentui/commit/70d0762fd12eb211f7c1dbe31a23b2fbb73a67c4) by beachball)\"\n```\n\n----------------------------------------\n\nTITLE: DOM Structure for CardFooter Component in HTML\nDESCRIPTION: Defines the simple HTML structure for the CardFooter component, which is a container for child elements with proper positioning within the card.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-card/library/docs/Spec.md#2025-04-20_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<div>{children}</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Breadcrumb FunctionComponent\nDESCRIPTION: The Breadcrumb component provides navigation breadcrumbs as a functional component in the Fluent UI framework, requiring properties defined in IBreadcrumbProps.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const Breadcrumb: React_2.FunctionComponent<IBreadcrumbProps>;\n```\n\n----------------------------------------\n\nTITLE: FluentUI Component Export Declarations\nDESCRIPTION: Collection of export statements for FluentUI components, hooks, utilities and their associated types, props, and states. Includes exports for components like TeachingPopover, Toast, Toolbar, Tree and their subcomponents.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/etc/react-components.api.md#2025-04-20_snippet_35\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport { teachingPopoverCarouselPageCountClassNames }\nexport { TeachingPopoverCarouselPageCountProps }\nexport { TeachingPopoverCarouselPageCountRenderFunction }\n// ... additional exports\n```\n\n----------------------------------------\n\nTITLE: Adding New Static Asset Type Definition\nDESCRIPTION: Example demonstrating how to add support for new static asset file types by declaring a module with the appropriate extension.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/typings/static-assets/README.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Adding .avif image type support\n// ↓↓↓\ndeclare module '*.avif' {\n  const src: string;\n  export default src;\n}\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.70.0\nDESCRIPTION: This entry details the version bump of '@fluentui/react' to 8.70.0, a nugget of stability for the community of developers using this library.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/theming-designer/CHANGELOG.md#2025-04-20_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.70.0 ([PR #23207](https://github.com/microsoft/fluentui/pull/23207) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Defining TabsOrientation Constants in TypeScript\nDESCRIPTION: Constants defining possible orientation values for the Tabs component, allowing for horizontal or vertical tab layouts.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_69\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport const TabsOrientation: {\n    readonly horizontal: \"horizontal\";\n    readonly vertical: \"vertical\";\n};\n\n// @public\nexport type TabsOrientation = ValuesOf<typeof TabsOrientation>;\n```\n\n----------------------------------------\n\nTITLE: Implementing useIsomorphicLayoutEffect Hook in TypeScript\nDESCRIPTION: Definition of the useIsomorphicLayoutEffect hook, which calls useEffect on the server and useLayoutEffect on the client.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-hooks/README.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useIsomorphicLayoutEffect(effect, deps?): void;\n```\n\n----------------------------------------\n\nTITLE: Implementing Tabs with v8 Pivot and PivotItem in React TSX\nDESCRIPTION: This snippet demonstrates how to create tabs using the v8 Pivot and PivotItem components. It shows the structure where tab names are declared in the headerText property and content is nested within PivotItems.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Tabs.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Pivot>\n  <PivotItem headerText=\"First Tab\">\n    <Label>Content 1</Label>\n  </PivotItem>\n  <PivotItem headerText=\"Second Tab\">\n    <Label>Content 2</Label>\n  </PivotItem>\n  <PivotItem headerText=\"Third Tab\">\n    <Label>Content 3</Label>\n  </PivotItem>\n</Pivot>\n```\n\n----------------------------------------\n\nTITLE: Text Component Class Definition in TypeScript\nDESCRIPTION: Defines the Text component class extending FASTElement with properties for text styling including alignment, font, size and decorative options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_55\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Text_2 extends FASTElement {\n    align?: TextAlign;\n    block: boolean;\n    // @internal\n    elementInternals: ElementInternals;\n    font?: TextFont;\n    italic: boolean;\n    nowrap: boolean;\n    size?: TextSize;\n    strikethrough: boolean;\n    truncate: boolean;\n    underline: boolean;\n    weight?: TextWeight;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Internal Structure of AvatarGroup Components\nDESCRIPTION: This code snippet provides insight into the internal structure of the AvatarGroup component along with its provider and slots. It demonstrates how the AvatarGroup, AvatarGroupPopover, and AvatarGroupItem components are set up within the context of React's component hierarchy.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-avatar/library/docs/SPEC-AvatarGroup.md#2025-04-20_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// AvatarGroup\n<AvatarGroupProvider value={contextValues.avatarGroup}>\n  <slots.root {...slotProps.root} />\n</AvatarGroupProvider>\n\n// AvatarGroupPopover\n<slots.root {...(slotProps.root as PopoverProps)}>\n  <PopoverTrigger>\n    <slots.tooltip {...(slotProps.tooltip as TooltipProps)}>\n      <slots.triggerButton {...slotProps.triggerButton} />\n    </slots.tooltip>\n  </PopoverTrigger>\n  <slots.popoverSurface {...slotProps.popoverSurface}>\n    <AvatarGroupProvider value={contextValues.avatarGroup}>\n      <slots.content {...slotProps.content} />\n    </AvatarGroupProvider>\n  </slots.popoverSurface>\n</slots.root>\n\n// AvatarGroupItem\n<slots.root {...slotProps.root}>\n  <slots.avatar {...slotProps.avatar} />\n  {state.isOverflowItem && <slots.overflowLabel {...slotProps.overflowLabel} />}\n</slots.root>\n```\n\n----------------------------------------\n\nTITLE: Basic Text Component Rendering with `as` Prop\nDESCRIPTION: Demonstrates rendering Text component with different HTML tags using the `as` prop\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/as-prop.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<>\n  {/* renders <span /> */}\n  <Text />\n  {/* renders <p /> */}\n  <Text as=\"p\" />\n</>\n```\n\n----------------------------------------\n\nTITLE: Comparing Changes Between Versions in Markdown\nDESCRIPTION: Markdown syntax used to link to the diff between two versions of the package on GitHub. This allows easily viewing what changed between releases.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-checkbox/library/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-checkbox_v9.0.10..@fluentui/react-checkbox_v9.0.11)\n```\n\n----------------------------------------\n\nTITLE: TagPickerOption Slots Type\nDESCRIPTION: Defines the slots available for the TagPickerOption component. It includes a root slot based on OptionSlots and optional media and secondaryContent slots.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport type TagPickerOptionSlots = Pick<OptionSlots, 'root'> & {\n    media?: Slot<'div'>;\n    secondaryContent?: Slot<'span'>;\n};\"\n```\n\n----------------------------------------\n\nTITLE: Describing PlotCoordinate Interface in TypeScript\nDESCRIPTION: The PlotCoordinate interface provides a structure for defining specific plot points with properties for point number and x, y coordinates, pivotal in plot data manipulation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/chart-utilities/etc/chart-utilities.api.md#2025-04-20_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface PlotCoordinate {\n    // (undocumented)\n    pointNumber: number;\n    // (undocumented)\n    x: number;\n    // (undocumented)\n    y: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Rating Display Component Definition in TypeScript\nDESCRIPTION: Defines a RatingDisplay class that extends BaseRatingDisplay with properties for color, size and compact display modes. Includes type definitions for display colors and sizes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_49\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class RatingDisplay extends BaseRatingDisplay {\n    color?: RatingDisplayColor;\n    colorChanged(prev: RatingDisplayColor | undefined, next: RatingDisplayColor | undefined): void;\n    compact: boolean;\n    protected getMaxIcons(): number;\n    protected getSelectedValue(): number;\n    size?: RatingDisplaySize;\n    sizeChanged(prev: RatingDisplaySize | undefined, next: RatingDisplaySize | undefined): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining KeytipLayer Interfaces in TypeScript\nDESCRIPTION: Interface definitions for Keytip components in FluentUI, including styles, props, and transition structures. These interfaces define the contract for rendering keytip UI elements that appear when users press Alt keys.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_142\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface IKeytipLayerStyles {\n    // (undocumented)\n    innerContent: IStyle;\n}\n\n// @public (undocumented)\nexport interface IKeytipProps {\n    calloutProps?: ICalloutProps;\n    content: string;\n    disabled?: boolean;\n    hasDynamicChildren?: boolean;\n    hasMenu?: boolean;\n    hasOverflowSubMenu?: boolean;\n    keySequences: string[];\n    offset?: Point;\n    onExecute?: (executeTarget: HTMLElement | null, target: HTMLElement | null) => void;\n    onReturn?: (executeTarget: HTMLElement | null, target: HTMLElement | null) => void;\n    overflowSetSequence?: string[];\n    styles?: IStyleFunctionOrObject<IKeytipStyleProps, IKeytipStyles>;\n    theme?: ITheme;\n    visible?: boolean;\n}\n\n// @public\nexport interface IKeytipStyleProps {\n    disabled?: boolean;\n    theme: ITheme;\n    visible?: boolean;\n}\n\n// @public (undocumented)\nexport interface IKeytipStyles {\n    container: IStyle;\n    root: IStyle;\n}\n\n// @public (undocumented)\nexport interface IKeytipTransitionKey {\n    // (undocumented)\n    key: string;\n    // (undocumented)\n    modifierKeys?: KeytipTransitionModifier[];\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Tooltip with Custom Target Element\nDESCRIPTION: Example of using Tooltip with a custom target element different from the trigger. This demonstrates the flexibility in positioning the tooltip.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tooltip/library/docs/Spec.md#2025-04-20_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<Tooltip\n  content=\"It can target an element other than its trigger\"\n  relationship=\"description\"\n  positioning={{ target: targetElement }}\n>\n  <button>\n    Custom target: <div ref={setTargetElement} />\n  </button>\n</Tooltip>\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Raw Import in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to configure Webpack to use the proposed 'import-raw' output for unprocessed styles in Fluent UI components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/shared/build-system/stop-styles-transforms.md#2025-04-20_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// webpack.config.js\n\nmodule.exports = {\n  resolve: {\n    conditionNames: ['import-raw', '...'],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Icon Subset Interface\nDESCRIPTION: Interface defining the structure for registering icon subsets, supporting custom icons and optional image props merging\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-icons-compat/library/etc/react-icons-compat.api.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IconSubset {\n  icons: {\n    [key: string]: string | JSX.Element;\n  };\n  mergeImageProps?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Expanded CSS Rules in Jest Snapshot with Serializer (JSX)\nDESCRIPTION: This snippet shows how the same component appears in a Jest snapshot when using the @fluentui/jest-serializer-merge-styles, with the generated class name expanded into its corresponding CSS rules.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/jest-serializer-merge-styles/README.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div\n  className=\n      ms-Foo\n      {\n        background-color: #f4f4f4;\n        box-sizing: border-box;\n        color: #333333;\n        cursor: pointer;\n      }\n      &:hover {\n        background-color: #f8f8f8;\n      }\n>\n  Hello world\n</div>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Domain N Range Values for Chart Data in TypeScript\nDESCRIPTION: This function calculates the domain and range values for a specific chart type, based on the input data points and chart configuration. It provides important metrics required for rendering charts correctly, especially when handling various types of data formats.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/etc/react-charting.api.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ngetDomainNRangeValues: (points: ILineChartPoints[] | IVerticalBarChartDataPoint[] | IVerticalStackedBarDataPoint[] | IHorizontalBarChartWithAxisDataPoint[] | IGroupedVerticalBarChartData[] | IHeatMapChartDataPoint[], margins: IMargins, width: number, chartType: ChartTypes, isRTL: boolean, xAxisType: XAxisTypes, barWidth: number, tickValues: Date[] | number[] | string[] | undefined, shiftX: number) => IDomainNRange;\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Environment Variable Usage Example\nDESCRIPTION: Demonstrates type-safe usage of process.env.NODE_ENV with TypeScript type checking and error detection.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/typings/environment/README.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @ExpectType string\nexport function log(...messages: Array<string>) {\n  if (process.env.NODE_ENV === 'development') {\n    console.log(...messages);\n  }\n\n  // $ExpectError - 'prod' is not defined, did you mean to 'production' ?\n  if (process.env.NODE_ENV === 'prod') {\n    // do something\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SlottableInput Interface in TypeScript\nDESCRIPTION: Defines a TypeScript interface for input elements that can be slotted into components. Includes properties for element internals and common form input attributes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nexport type SlottableInput = HTMLElement & ElementInternals & {\n    elementInternals?: ElementInternals;\n    required: boolean;\n    disabled: boolean;\n    readOnly: boolean;\n    checked?: boolean;\n    value?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple Languages in HTML for Fluent UI\nDESCRIPTION: This example demonstrates how to set different languages for different sections of an HTML page. The root element is set to Thai, while a specific section is set to Vietnamese. This allows Fluent UI to apply the correct font and character set for each language within the same page.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Styles/LocalizationPage/docs/web/LocalizationFonts.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<html lang=\"th-TH\">\n  ...\n  <section lang=\"vi-VN\">...</section>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining IElementPositionInfo Interface in TypeScript\nDESCRIPTION: Defines the IElementPositionInfo interface extending IElementPosition with an additional targetRectangle property. This interface is marked as @public but undocumented.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_125\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IElementPositionInfo extends IElementPosition {\n    // (undocumented)\n    targetRectangle: Rectangle;\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Icons in Fluent UI React with IconProvider\nDESCRIPTION: This example demonstrates how to use the IconProvider component to override an existing icon (FilterIcon) with a custom SVG implementation. The code shows importing the necessary components, creating a custom icon component, defining the override configuration, and implementing the override using the IconProvider.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-icon-provider/README.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { IconProvider } from '@fluentui/react-icon-provider';\nimport { IIconSubset } from '@fluentui/style-utilities';\nimport { FilterIcon } from '@fluentui/react-icons-mdl2';\n\nconst FakeIcon = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 2048 2048\" width=\"2048\" height=\"2048\">\n    <path d=\"M1472 0q40 0 75 15t61 41 41 61 15 75v1664q0 40-15 75t-41 61-61 41-75 15H448q-40 0-75-15t-61-41-41-61-15-75V192q0-40 15-75t41-61 61-41 75-15h1024zm64 1856V192q0-26-19-45t-45-19H448q-26 0-45 19t-19 45v1664q0 26 19 45t45 19h1024q26 0 45-19t19-45zM512 1024V256h896v768H512zm128-640v512h640V384H640zM512 1792v-640h896v640H512zm128-512v384h640v-384H640z\" />\n  </svg>\n);\nconst override: IIconSubset = {\n  icons: {\n    FilterIcon: <FakeIcon />,\n  },\n};\n\nconst OverriddenFilterIcon = () => (\n  <IconProvider icons={override}>\n    <FilterIcon />\n  </IconProvider>\n);\n\nReactDOM.render(<OverriddenFilterIcon />, document.body.firstChild);\n```\n\n----------------------------------------\n\nTITLE: Declaring TeachingPopoverHeader Component in TypeScript\nDESCRIPTION: Declares the TeachingPopoverHeader component as a ForwardRefComponent with TeachingPopoverHeaderProps.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-teaching-popover/library/etc/react-teaching-popover.api.md#2025-04-20_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const TeachingPopoverHeader: ForwardRefComponent<TeachingPopoverHeaderProps>;\n```\n\n----------------------------------------\n\nTITLE: Migrating Header Content Prop to JSX Children in React\nDESCRIPTION: Shows how to migrate from using the content prop in Header component to using JSX children with the Text component in FluentUI v9.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Header.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Header } from '@fluentui/react-northstar';\nconst Component = () => <Header content=\"Header content\" />;\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from '@fluentui/react-components';\nconst Component = () => <Text as=\"h1\">Header content</Text>;\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Documentation Components\nDESCRIPTION: Basic imports for Storybook documentation page setup, including Meta component for page configuration and custom utility component for accessibility scenarios.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Accessibility/AccessibleComponents.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs';\nimport { ScenariosListLink } from '../../AccessibilityScenarios/utils';\n```\n\n----------------------------------------\n\nTITLE: Theme Override for a Single Component Instance with ThemeProvider\nDESCRIPTION: This code illustrates how to override theme tokens for a single component instance using `ThemeProvider`. This approach is considered an antipattern due to the performance overhead of creating a new React context.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/theme-tokens.md#2025-04-20_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst radiusOverrides = {\n  global: {\n    borderRadius: {\n      medium: '6px',\n    },\n  },\n};\n\n<ThemeProvider theme={{ radiusOverrides }}>\n  <Button>I have custom border radius</Button>\n</ThemeProvider>;\n```\n\n----------------------------------------\n\nTITLE: Define AutoSize type\nDESCRIPTION: Defines a type called `AutoSize` which is a union of string literals and a boolean, representing different auto-sizing options: 'height', 'height-always', 'width', 'width-always', 'always', and boolean. This type likely controls how the positioned element automatically adjusts its size.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-positioning/etc/react-positioning.api.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type AutoSize = 'height' | 'height-always' | 'width' | 'width-always' | 'always' | boolean;\n```\n\n----------------------------------------\n\nTITLE: Using Icon Component in Fluent UI React (TypeScript)\nDESCRIPTION: This snippet shows how to use the Icon component from Fluent UI React to render an icon. It imports the Icon component and uses it with the iconName prop to display a specific icon.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/font-icons-mdl2/README.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Icon } from '@fluentui/react/lib/Icon';\n\n<Icon iconName=\"Snow\" />;\n```\n\n----------------------------------------\n\nTITLE: Dialog Props Definition\nDESCRIPTION: Defines the props for the Dialog component, combining ComponentProps with specific properties for controlling the dialog's behavior and appearance, such as modalType, open, defaultOpen, onOpenChange, children, and inertTrapFocus. DialogSlots are partial.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/etc/react-dialog.api.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport type DialogProps = ComponentProps<Partial<DialogSlots>> & {\n    modalType?: DialogModalType;\n    open?: boolean;\n    defaultOpen?: boolean;\n    onOpenChange?: DialogOpenChangeEventHandler;\n    children: [JSX.Element, JSX.Element] | JSX.Element;\n    inertTrapFocus?: boolean;\n};\"\n```\n\n----------------------------------------\n\nTITLE: Defining Icon Style Utility Functions for FluentUI in TypeScript\nDESCRIPTION: Exports functions for generating Griffel styles for different icon versions (v0, v9) including custom sizes and states. These utilities provide consistent icon styling across FluentUI components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-migration-v0-v9/library/etc/react-migration-v0-v9.api.md#2025-04-20_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport const v0Icon: () => GriffelStyle;\n\n// @public (undocumented)\nexport const v9CustomSizeIcon: () => GriffelStyle;\n\n// @public (undocumented)\nexport const v9DisabledCursor: () => GriffelStyle;\n\n// @public (undocumented)\nexport const v9HoverClasses: () => GriffelStyle;\n\n// @public (undocumented)\nexport const v9Icon: () => GriffelStyle;\n```\n\n----------------------------------------\n\nTITLE: Implementing Tabs Component Class in TypeScript\nDESCRIPTION: TypeScript class definition for the Tabs component that extends BaseTabs and implements StartEnd interface, providing the container for tabs and panels.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_67\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Warning: (ae-forgotten-export) The symbol \"BaseTabs\" needs to be exported by the entry point index.d.ts\n// Warning: (ae-missing-release-tag) \"Tabs\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n// Warning: (ae-missing-release-tag) \"Tabs\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport class Tabs extends BaseTabs {\n    // (undocumented)\n    activeidChanged(oldValue: string, newValue: string): void;\n    appearance?: TabsAppearance;\n    disabled?: boolean;\n    size?: TabsSize;\n    // (undocumented)\n    tabsChanged(): void;\n}\n\n// @public (undocumented)\nexport interface Tabs extends StartEnd {\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Popup Component Positioning from FluentUI v0 to v9\nDESCRIPTION: This example shows how to migrate the 'position' and 'align' props from FluentUI v0 to the new 'positioning' prop in v9 using shorthand syntax.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/migrate-positioning.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Popup position=\"below\" align=\"end\" />\n```\n\n----------------------------------------\n\nTITLE: Applying Z-Index Styles with useZIndexStyle Hook in React\nDESCRIPTION: This snippet introduces an alternative approach using a useZIndexStyle hook. This hook directly applies the z-index style to the referenced element, simplifying the process of setting z-index values in components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/z-index-handling.md#2025-04-20_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useZIndexStyle } from '@fluentui/react-components';\n\n// component side\nexport const useComponent_unstable = (props: ComponentProps, ref: React.Ref<HTMLElement>): ComponentState => {\n  useZIndexStyle('overlay', ref);\n\n  return {\n    components: {\n      root: 'div',\n    },\n\n    root: slot.always(\n      {\n        ref,\n        ...props,\n      },\n      {\n        elementType: 'div',\n      },\n    ),\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring ScrollView TabIndex for Keyboard Accessibility\nDESCRIPTION: When implementing a ScrollView container without focusable children, set tabIndex to 0 to enable keyboard scrolling. This property should be omitted when the ScrollView contains focusable elements to maintain proper tab order.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-virtualizer/stories/src/VirtualizerScrollViewDynamic/VirtualizerScrollViewDynamicAccessibility.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntabIndex: 0\n```\n\n----------------------------------------\n\nTITLE: Main Calendar Props Interface\nDESCRIPTION: Definition of the props interface for the main Calendar component, including options for customization, behavior, and sub-component configuration.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-calendar-compat/library/etc/react-calendar-compat.api.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface CalendarProps extends React_2.RefAttributes<HTMLDivElement> {\n    allFocusable?: boolean;\n    calendarDayProps?: Partial<CalendarDayProps>;\n    calendarMonthProps?: Partial<CalendarMonthProps>;\n    className?: string;\n    componentRef?: React_2.RefObject<ICalendar>;\n    dateRangeType?: DateRangeType;\n    dateTimeFormatter?: DateFormatting;\n    firstDayOfWeek?: DayOfWeek;\n    firstWeekOfYear?: FirstWeekOfYear;\n    highlightCurrentMonth?: boolean;\n    highlightSelectedMonth?: boolean;\n    id?: string;\n    isDayPickerVisible?: boolean;\n    isMonthPickerVisible?: boolean;\n    maxDate?: Date;\n    minDate?: Date;\n    onDismiss?: () => void;\n    onSelectDate?: (date: Date, selectedDateRangeArray?: Date[]) => void;\n    restrictedDates?: Date[];\n    showCloseButton?: boolean;\n    showGoToToday?: boolean;\n    showMonthPickerAsOverlay?: boolean;\n    showSixWeeksByDefault?: boolean;\n    showWeekNumbers?: boolean;\n    strings?: CalendarStrings;\n    today?: Date;\n    value?: Date;\n    workWeekDays?: DayOfWeek[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Selectable and Picker Component Interfaces in TypeScript\nDESCRIPTION: Defines interfaces for selectable options and picker components, including ISelectableOption, ISelectableDroppableTextProps, ISelectedItemProps, and related people picker interfaces.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_172\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface ISelectableDroppableTextProps<TComponent, TListenerElement> extends React_2.HTMLAttributes<TListenerElement> {\n    ariaLabel?: string;\n    calloutProps?: ICalloutProps;\n    className?: string;\n    componentRef?: IRefObject<TComponent>;\n    defaultSelectedKey?: string | number | string[] | number[] | null;\n    disabled?: boolean;\n    errorMessage?: string;\n    id?: string;\n    label?: string;\n    multiSelect?: boolean;\n    onDismiss?: () => void;\n    onRenderContainer?: IRenderFunction<ISelectableDroppableTextProps<TComponent, TListenerElement>>;\n    onRenderItem?: IRenderFunction<ISelectableOption>;\n    onRenderList?: IRenderFunction<ISelectableDroppableTextProps<TComponent, TListenerElement>>;\n    onRenderOption?: IRenderFunction<ISelectableOption>;\n    openOnKeyboardFocus?: boolean;\n    options?: any;\n    panelProps?: IPanelProps;\n    placeholder?: string;\n    required?: boolean;\n    selectedKey?: string | number | string[] | number[] | null;\n}\n\n// @public (undocumented)\nexport interface ISelectableOption<T = any> {\n    ariaLabel?: string;\n    data?: T;\n    disabled?: boolean;\n    hidden?: boolean;\n    id?: string;\n    index?: number;\n    itemType?: SelectableOptionMenuItemType;\n    key: string | number;\n    selected?: boolean;\n    text: string;\n    title?: string;\n}\n\n// @public (undocumented)\nexport interface ISelectedItemProps<T> extends IPickerItemProps<T> {\n    // (undocumented)\n    onCopyItem: (item: T) => void;\n}\n\n// @public (undocumented)\nexport interface ISelectedPeopleItemProps extends ISelectedItemProps<IExtendedPersonaProps> {\n    // (undocumented)\n    onExpandItem?: () => void;\n    // (undocumented)\n    renderPersonaCoin?: IRenderFunction<IPersonaProps>;\n    // (undocumented)\n    renderPrimaryText?: IRenderFunction<IPersonaProps>;\n}\n\n// @public (undocumented)\nexport interface ISelectedPeopleProps extends IBaseSelectedItemsListProps<IExtendedPersonaProps> {\n    // (undocumented)\n    copyMenuItemText?: string;\n    // (undocumented)\n    editMenuItemText?: string;\n    // (undocumented)\n    floatingPickerProps?: IBaseFloatingPickerProps<IPersonaProps>;\n    // (undocumented)\n    getEditingItemText?: (item: IExtendedPersonaProps) => string;\n    // (undocumented)\n    onExpandGroup?: (item: IExtendedPersonaProps) => void;\n    // (undocumented)\n    onRenderFloatingPicker?: React_2.ComponentType<IBaseFloatingPickerProps<IPersonaProps>>;\n    // (undocumented)\n    removeMenuItemText?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme-Based Elevation in Fluent UI React\nDESCRIPTION: Demonstrates how to use elevation effects through the Fluent UI theme system. This approach is recommended as it ensures consistency with the theme context.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Styles/ElevationPage/docs/web/ElevationImplementation.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getTheme } from '@fluentui/react';\n\nconst theme = getTheme();\n\n<div style={{ boxShadow: theme.effects.elevation8 }}>\n```\n\n----------------------------------------\n\nTITLE: Ban Imports Example\nDESCRIPTION: This example demonstrates how to configure the `ban-imports` rule to prevent importing from specific paths or modules. It shows how to ban entire paths or only specific names within a path using `path`, `pathRegex`, and `names` options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/eslint-plugin/README.md#2025-04-20_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"@fluentui/ban-imports\": [\n  \"error\",\n  { \"path\": \"lodash\" },\n  { \"path\": \"foo\", \"names\": [\"bar\", { \"regex\": \"^baz\" }] },\n  { \"pathRegex\": \"^\\.\", message: \"no relative imports\" },\n  { \"pathRegex\": \"^\\.\\./(foo|bar)$\", \"names\": [\"baz\"] }\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Warning Callback in TypeScript\nDESCRIPTION: Function to set a custom warning callback. It takes an optional function parameter that receives a warning message string.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/utilities/etc/utilities.api.md#2025-04-20_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function setWarningCallback(warningCallback?: (message: string) => void): void;\n```\n\n----------------------------------------\n\nTITLE: Configuring Position and Offset in Fluent UI Components\nDESCRIPTION: Discusses how to set position and offset attributes in Fluent UI v8 and v0 for Callouts and Popups, including examples of numeric offset values and functional offsets based on Popper properties.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-popover/library/docs/Spec.md#2025-04-20_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n<Callout\n  // single number value\n  gap={100}\n/>\n\n<Popup\n  offset={[-100, 100]}\n/>\n\n// offset can also be a function of raw Popper properties\nconst offsetFunction = ({\n  popper: PopperJs.Rect;\n  reference: PopperJs.Rect;\n  placement: PopperJs.Placement;\n}) => ([popper.width, -popper.height])\n\n```\n\n----------------------------------------\n\nTITLE: Defining Collapse Motion Component - TypeScript\nDESCRIPTION: This snippet defines the Collapse motion component and its variants in TypeScript. It includes necessary imports, component definitions, and type exports for handling animated collapses in UI components. Dependencies include types and components from the '@fluentui/react-motion' package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-motion-components-preview/library/etc/react-motion-components-preview.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { MotionParam } from '@fluentui/react-motion';\nimport { PresenceComponent } from '@fluentui/react-motion';\nimport type { PresenceMotion } from '@fluentui/react-motion';\nimport type { PresenceMotionFn } from '@fluentui/react-motion';\n\n// @public\nexport const Collapse: PresenceComponent<CollapseRuntimeParams>;\n\n// @public (undocumented)\nexport const CollapseDelayed: PresenceComponent<CollapseRuntimeParams>;\n\n// @public (undocumented)\nexport const CollapseRelaxed: PresenceComponent<CollapseRuntimeParams>;\n\n// @public (undocumented)\nexport type CollapseRuntimeParams = {\n    animateOpacity?: boolean;\n    orientation?: CollapseOrientation;\n};\n\n// @public (undocumented)\nexport const CollapseSnappy: PresenceComponent<CollapseRuntimeParams>;\n\n// @public\nexport const createCollapseDelayedPresence: PresenceMotionFnCreator<CollapseDelayedVariantParams, CollapseRuntimeParams>;\n\n// @public\nexport const createCollapsePresence: PresenceMotionFnCreator<CollapseVariantParams, CollapseRuntimeParams>;\n\n// @public\nexport const createFadePresence: PresenceMotionCreator<FadeVariantParams>;\n\n// @public\nexport const createScalePresence: PresenceMotionFnCreator<ScaleVariantParams_unstable, ScaleRuntimeParams_unstable>;\n\n// @public\nexport const Fade: PresenceComponent<    {}>;\n\n// @public (undocumented)\nexport const FadeRelaxed: PresenceComponent<    {}>;\n\n// @public (undocumented)\nexport const FadeSnappy: PresenceComponent<    {}>;\n\n// @public\nexport const Scale: PresenceComponent<ScaleRuntimeParams_unstable>;\n\n// @public (undocumented)\nexport const ScaleRelaxed: PresenceComponent<ScaleRuntimeParams_unstable>;\n\n// @public (undocumented)\nexport const ScaleSnappy: PresenceComponent<ScaleRuntimeParams_unstable>;\n```\n\n----------------------------------------\n\nTITLE: Option Component Definition\nDESCRIPTION: This snippet defines the Option component as a ForwardRefComponent, used to render individual options within a Listbox.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/library/etc/react-combobox.api.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nconst Option_2: ForwardRefComponent<OptionProps>;\nexport { Option_2 as Option }\"\n```\n\n----------------------------------------\n\nTITLE: Migrating Multiple Positioning Props in FluentUI v9\nDESCRIPTION: This snippet demonstrates how to migrate multiple positioning props from v0 to v9 by using an object with the 'positioning' prop.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/migrate-positioning.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Popup position=\"below\" align=\"end\" autoSize={\"height\"} />\n```\n\n----------------------------------------\n\nTITLE: Comparing Two Dates - TypeScript\nDESCRIPTION: This function checks whether two Date objects are equal, returning a boolean value. It simplifies date comparisons in applications.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/date-time-utilities/etc/date-time-utilities.api.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport function compareDates(date1: Date, date2: Date): boolean;\n```\n\n----------------------------------------\n\nTITLE: Get Input Focus Style Function\nDESCRIPTION: Defines a function, `getInputFocusStyle`, that returns an `IRawStyle` object used for styling the focus state of input elements. It takes the border color, border radius and other border properties.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/style-utilities/etc/style-utilities.api.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n\"export const getInputFocusStyle: (borderColor: string, borderRadius: string | number, borderType?: 'border' | 'borderBottom', borderPosition?: number) => IRawStyle;\"\n```\n\n----------------------------------------\n\nTITLE: Global Token Example\nDESCRIPTION: This snippet illustrates the structure of a global token within a theme object. Global tokens represent constant values that remain consistent across different themes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/theme-tokens.md#2025-04-20_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst theme = {\n  global: {\n    color: {\n      black: '#000', // global.color.black will always be #000\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Nested Custom Style Hooks Example in TSX\nDESCRIPTION: Demonstration of nested CustomStyleHooksProvider usage and potential merging issues.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/AdvancedStylingTechniques.stories.mdx#2025-04-20_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport function App() {\n  return (\n    <FluentProvider theme={webLightTheme}>\n      <CustomStyleHooksProvider_unstable\n        value={{\n          useButtonStyles_unstable: useSmartButtonStyles,\n          useImageStyles_unstable: useSmartImageStyles,\n        }}\n      >\n        <CustomStyleHooksProvider_unstable\n          value={{\n            useButtonStyles_unstable: useFancyButtonStyles,\n          }}\n        >\n          {/* application code ... */}\n        </CustomStyleHooksProvider_unstable>\n      </CustomStyleHooksProvider_unstable>\n    </FluentProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ToolbarButton Props Interface in TypeScript\nDESCRIPTION: TypeScript interface for ToolbarButton component that extends Button props with specific appearance options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-toolbar/library/docs/Spec.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype type ToolbarButtonProps = ComponentProps<ButtonSlots> &\n  Partial<Pick<ButtonProps, 'disabled' | 'disabledFocusable'>> & {\n\n  /**\n   * A button can have its content and borders styled for greater emphasis or to be subtle.\n   * - 'primary': Emphasizes the button as a primary action.\n   * - 'subtle': Minimizes emphasis to blend into the background until hovered or focused.\n   */\n  appearance?: 'primary' | 'subtle';\n;\n```\n\n----------------------------------------\n\nTITLE: Stack Component Type and Interface Definitions in TypeScript\nDESCRIPTION: Collection of type definitions and interfaces for the Stack component, including slots, styles, tokens, and related type utilities.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_182\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type IStackSlot = ISlotProp<IStackProps>;\n\n// @public (undocumented)\nexport interface IStackSlots {\n    inner?: IHTMLSlot;\n    root?: IHTMLSlot;\n}\n\n// @public (undocumented)\nexport type IStackStyles = IComponentStyles<IStackSlots>;\n\n// @public (undocumented)\nexport type IStackStylesReturnType = ReturnType<Extract<IStackComponent['styles'], Function>>;\n\n// @public (undocumented)\nexport type IStackTokenReturnType = ReturnType<Extract<IStackComponent['tokens'], Function>>;\n\n// @public (undocumented)\nexport interface IStackTokens {\n    childrenGap?: number | string;\n    maxHeight?: number | string;\n    maxWidth?: number | string;\n    padding?: number | string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Type-safe Styles for Custom Buttons\nDESCRIPTION: This code snippet demonstrates a type-safe implementation of custom styling for buttons utilizing Griffel. It combines multiple class names conditionally based on the button size while ensuring type compatibilities.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/custom-styling.md#2025-04-20_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nexport const useFancyButtonStyles = (state: unknown) => {\n  const styles = useStyles();\n\n  const buttonState = state as ButtonState;\n\n  buttonState.root.className = mergeClasses(\n    buttonState.root.className,\n    styles.root,\n    buttonState.size === 'small' && styles.small,\n    buttonState.size === 'medium' && styles.medium,\n    buttonState.size === 'large' && styles.large,\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Toolbar Props Interface in TypeScript\nDESCRIPTION: TypeScript interface defining the core props for the Toolbar component, including size configuration options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-toolbar/library/docs/Spec.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ToolbarProps = {\n  /**\n   * Defines toolbar size\n   * @default medium\n   */\n  size?: 'small' | 'medium';\n};\n```\n\n----------------------------------------\n\nTITLE: Using size tokens with Text component in FluentUI v9\nDESCRIPTION: Example demonstrating how to use the new size token system with the Text component in FluentUI v9.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-text/library/docs/MIGRATION.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Text size={300}>Text</Text>\n```\n\n----------------------------------------\n\nTITLE: Importing Static Assets Example\nDESCRIPTION: Example showing how to import an image file as a string in TypeScript with type checking.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/typings/static-assets/README.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @ExpectType string\nimport myImgSrc from './hello-world.png`\n\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-jsx-runtime version\nDESCRIPTION: This patch updates the version of the `@fluentui/react-jsx-runtime` dependency. Bumping this package ensures that the `@fluentui/react-badge` component uses the latest features and bug fixes available in the JSX runtime.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nBump @fluentui/react-jsx-runtime to v9.0.49 ([PR #33550](https://github.com/microsoft/fluentui/pull/33550) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Using Event Handlers in Fluent UI Components - TypeScript\nDESCRIPTION: This snippet describes the use of an event handler for a Datepicker component, specifying its type using optional properties and ensuring it aligns with component expectations. It utilizes lodash's utility to invoke props safely.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/CONTRIBUTING.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nonChange?: (e: React.SOME_EVENT<EL_TYPE>, data: DatepickerProps & { value: IDay }) => void;\n```\n\n----------------------------------------\n\nTITLE: CalendarDayProps Interface Definition\nDESCRIPTION: Props interface for the CalendarDay component, extending CalendarDayGridProps with additional properties for header interaction and navigation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-calendar-compat/library/etc/react-calendar-compat.api.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-incompatible-release-tags) The symbol \"CalendarDayProps\" is marked as @public, but its signature references \"CalendarDayGridProps\" which is marked as @internal\n//\n// @public (undocumented)\nexport interface CalendarDayProps extends CalendarDayGridProps {\n    allFocusable?: boolean;\n    className?: string;\n    componentRef?: React_2.RefObject<ICalendarDay>;\n    dateTimeFormatter: DateFormatting;\n    maxDate?: Date;\n    minDate?: Date;\n    navigatedDate: Date;\n    navigationIcons: CalendarNavigationIcons;\n    onDismiss?: () => void;\n    onHeaderSelect?: () => void;\n    onNavigateDate: (date: Date, focusOnNavigatedDay: boolean) => void;\n    restrictedDates?: Date[];\n    showCloseButton?: boolean;\n    showSixWeeksByDefault?: boolean;\n    showWeekNumbers?: boolean;\n    strings: CalendarStrings;\n}\n```\n\n----------------------------------------\n\nTITLE: Field Component for Form Controls\nDESCRIPTION: This code snippet demonstrates the use of the 'fluent-field' component in Fluent Web Components to manage label positioning and error handling for form elements like checkboxes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/_docs/developer/migration.stories.mdx#2025-04-20_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<fluent-field label-position=\"after\">\n  <fluent-checkbox slot=\"input\"></fluent-checkbox>\n  <label slot=\"label\" for=\"checkbox\">Label goes here</label>\n</fluent-field>\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.113.0\nDESCRIPTION: This change bumps the @fluentui/react package to version 8.113.0, focusing on performance improvements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluent2-theme/CHANGELOG.md#2025-04-20_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.113.0 ([PR #29766](https://github.com/microsoft/fluentui/pull/29766) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Describing PieDomain for Pie Charts in TypeScript\nDESCRIPTION: The PieDomain interface specifies the layout domain for pie charts, including properties like column, row, and X, Y coordinates, which determine the chart's layout in a grid.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/chart-utilities/etc/chart-utilities.api.md#2025-04-20_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface PieDomain {\n    // (undocumented)\n    column: number;\n    // (undocumented)\n    row: number;\n    // (undocumented)\n    x: number[];\n    // (undocumented)\n    y: number[];\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Tooltip in Fluent UI v0/Northstar\nDESCRIPTION: Example of how to use Tooltip component in Fluent UI v0/Northstar. This approach uses a trigger property to render the tooltip's target component without creating a wrapper div.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tooltip/library/docs/Spec.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Tooltip content=\"Example tooltip\" trigger={<Button content=\"A button\" />} />\n```\n\n----------------------------------------\n\nTITLE: Importing Skeleton Components from FluentUI React\nDESCRIPTION: Shows how to import the Skeleton and SkeletonItem components from the FluentUI React components package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-skeleton/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Skeleton, SkeletonItem } from '@fluentui/react-components';\n```\n\n----------------------------------------\n\nTITLE: Vertical Tab Implementation - Fluent UI Web Component - HTML\nDESCRIPTION: This example shows how to configure the tabs to be arranged vertically by setting the `orientation` attribute to 'vertical'. This alters the layout while maintaining the same tab functionalities.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/tabs/tabs.spec.md#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<fluent-tab-list orientation=\"vertical\">\n  <fluent-tab>One / Left</fluent-tab>\n  <fluent-tab>Two / Middle</fluent-tab>\n  <fluent-tab>Three / Right</fluent-tab>\n</fluent-tab-list>\n```\n\n----------------------------------------\n\nTITLE: Describing PieData Interface in TypeScript\nDESCRIPTION: The PieData interface describes the structure of data used in pie charts, extending some properties from PlotData and adding specifics like custom data, hover information, and domain settings.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/chart-utilities/etc/chart-utilities.api.md#2025-04-20_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface PieData extends Pick<PlotData, 'name' | 'visible' | 'showlegend' | 'legendgroup' | 'opacity' | 'ids' | 'labels' | 'hovertext' | 'automargin' | 'textinfo' | 'direction' | 'hole' | 'rotation'> {\n    // (undocumented)\n    customdata: Datum[];\n    // (undocumented)\n    dlabel: number;\n    // (undocumented)\n    domain: Partial<PieDomain>;\n    // (undocumented)\n    hoverinfo: PieHoverInfo;\n    // (undocumented)\n    hoverlabel: Partial<PieHoverLabel>;\n    // (undocumented)\n    hovertemplate: string | string[];\n    // (undocumented)\n    insidetextfont: PieFont;\n    // (undocumented)\n    insidetextorientation: PieInsideTextOrientation;\n    // (undocumented)\n    label0: number;\n    // (undocumented)\n    marker: Partial<PieMarker>;\n    // (undocumented)\n    meta: number | string;\n    // (undocumented)\n    outsidetextfont: PieFont;\n    // (undocumented)\n    pull: number | number[];\n    // (undocumented)\n    scalegroup: string;\n    // (undocumented)\n    sort: boolean;\n    // (undocumented)\n    text: Datum | Datum[];\n    // (undocumented)\n    textfont: PieFont;\n    // (undocumented)\n    textposition: PieTextPosition | PieTextPosition[];\n    // (undocumented)\n    texttemplate: string | string[];\n    // (undocumented)\n    title: Partial<PieDataTitle>;\n    // (undocumented)\n    type: 'pie';\n    // (undocumented)\n    uirevision: number | string;\n    // (undocumented)\n    values: Array<number | string>;\n}\n```\n\n----------------------------------------\n\nTITLE: TagPickerOption Class Names\nDESCRIPTION: Defines the class names for the TagPickerOption component's slots, used for styling the component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport const tagPickerOptionClassNames: SlotClassNames<TagPickerOptionSlots>;\"\n```\n\n----------------------------------------\n\nTITLE: Fabric Checkbox Example DOM Structure in HTML\nDESCRIPTION: This HTML snippet showcases the DOM structure of a Fabric Checkbox. It includes input and label elements with specific classes for styling and accessibility. The structure uses nested divs and spans to create the checkbox appearance.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Checkbox.md#2025-04-20_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"ms-Checkbox-checkbox\">\n  <input\n    type=\"checkbox\"\n    class=\"input-226\"\n    id=\"checkbox-268\"\n    aria-label=\"Unchecked checkbox (uncontrolled)\"\n    aria-checked=\"false\"\n  />\n  <label class=\"ms-Checkbox-label label-227\" for=\"checkbox-268\">\n    <div class=\"ms-Checkbox-checkbox checkbox-228\">\n      <i data-icon-name=\"CheckMark\" aria-hidden=\"true\" class=\"ms-Checkbox-checkmark checkmark-231\"> </i>\n    </div>\n    <span aria-hidden=\"true\" class=\"ms-Checkbox-text text-230\">Unchecked checkbox (uncontrolled)</span>\n  </label>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Centered Card After Migration\nDESCRIPTION: Example showing how to create a centered Card after migration using custom styles since the 'centered' prop is removed.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Card/Card.stories.mdx#2025-04-20_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { makeStyles } from '@fluentui/react-components';\nimport { Card } from '@fluentui/react-components';\n\nconst useStyles = makeStyles({\n  centeredCard: {\n    justifyItems: 'center',\n  },\n});\n\nexport const CenteredCard = () => {\n  const styles = useStyles();\n\n  return (\n    <Card className={styles.centeredCard}>\n      <p>Lorem ipsum dolor sit amet.</p>\n    </Card>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Migrated Card Component Using makeStyles\nDESCRIPTION: Updated example using the makeStyles API from @fluentui/react-components to apply custom styling to the Card component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Card/Card.stories.mdx#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// in COMPONENT_NAME.tsx\nimport { Card } from '@fluentui/react-components';\nimport { useStyles } from './COMPONENT_NAME.styles.ts';\n\nexport const Component = () => {\n  const classes = useStyles();\n\n  return <Card className={classes.actionCard}></Card>;\n};\n\n// in COMPONENT_NAME.styles.ts\nimport { makeStyles, tokens } from '@fluentui/react-components';\n\nexport const useStyles = makeStyles({\n  actionCard: {\n    color: colors.colorNeutralForeground1,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting TreeItem and Tree Style Hooks in TypeScript\nDESCRIPTION: Exports hooks for applying styles to tree items and trees.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tree/library/etc/react-tree.api.md#2025-04-20_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const useTreeItemStyles_unstable: (state: TreeItemState) => TreeItemState;\n\nexport const useTreeStyles_unstable: (state: TreeState) => TreeState;\n```\n\n----------------------------------------\n\nTITLE: Defining Sankey Chart Component in TypeScript\nDESCRIPTION: The SankeyChart constant exports a functional component for rendering Sankey charts, suitable for visualizing flow and relationships within data sets.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/etc/react-charting.api.md#2025-04-20_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const SankeyChart: React_2.FunctionComponent<ISankeyChartProps>;\n```\n\n----------------------------------------\n\nTITLE: Defining DocumentCard Preview Component Interfaces\nDESCRIPTION: TypeScript interface definitions for DocumentCardPreview component, its props, and image configuration. This component handles showing previews of document content within a DocumentCard.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_100\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IDocumentCardPreview {\n}\n\n// @public (undocumented)\nexport interface IDocumentCardPreviewImage {\n    // @deprecated\n    accentColor?: string;\n    componentRef?: IRefObject<{}>;\n    // @deprecated (undocumented)\n    errorImageSrc?: string;\n    height?: number;\n    iconSrc?: string;\n    imageFit?: ImageFit;\n    linkProps?: ILinkProps;\n    name?: string;\n    previewIconContainerClass?: string;\n    previewIconProps?: IIconProps;\n    previewImageSrc?: string;\n    // @deprecated\n    url?: string;\n    width?: number;\n}\n\n// @public (undocumented)\nexport interface IDocumentCardPreviewProps extends IBaseProps<{}> {\n    className?: string;\n    componentRef?: IRefObject<IDocumentCardPreview>;\n    getOverflowDocumentCountText?: (overflowCount: number) => string;\n    maxDisplayCount?: number;\n    previewImages: IDocumentCardPreviewImage[];\n    styles?: IStyleFunctionOrObject<IDocumentCardPreviewStyleProps, IDocumentCardPreviewStyles>;\n    theme?: ITheme;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Y-Axis Scale Function in TypeScript\nDESCRIPTION: This function creates a string-based Y-axis scale for chart rendering in a React application. It takes parameters defining the axis characteristics and data points, making it suitable for various chart types. The function returns a ScaleBand type reflecting the Y-axis configuration.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/etc/react-charting.api.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ncreateStringYAxis: (yAxisParams: IYAxisParams, dataPoints: string[], isRtl: boolean, barWidth: number | undefined) => ScaleBand<string>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook stories for @fluentui/react-menu\nDESCRIPTION: This code snippet shows how to configure the stories property in the Storybook module exports to include the @fluentui/react-menu-stories. It specifies the file paths for both MDX and TypeScript/TSX story files.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-menu/stories/src/**/*.stories.mdx', '../packages/react-components/react-menu/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Image Prop for Avatar in Fluent UI\nDESCRIPTION: Illustrates the change in structure for the image prop when migrating the Avatar component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Avatar.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Avatar } from '@fluentui/react-northstar';\nconst Component = () => (\n  <Avatar image=\"https://fabricweb.azureedge.net/fabric-website/assets/images/avatar/RobertTolbert.jpg\" />\n);\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Avatar } from '@fluentui/react-components';\nconst Component = () => (\n  <Avatar\n    image={{\n      alt: 'profile image',\n      src: 'https://fabricweb.azureedge.net/fabric-website/assets/images/avatar/RobertTolbert.jpg',\n    }}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Defining ThemeContextValue_unstable Type in TypeScript\nDESCRIPTION: TypeScript type definition for the theme context value which can be a full theme, partial theme, or undefined.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-shared-contexts/library/etc/react-shared-contexts.api.md#2025-04-20_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport type ThemeContextValue_unstable = Theme | Partial<Theme> | undefined;\n```\n\n----------------------------------------\n\nTITLE: Rendering Component with Merge-Styles Class Names in Jest Snapshot (JSX)\nDESCRIPTION: This snippet demonstrates how a component using @fluentui/merge-styles typically appears in a Jest snapshot test, with a generated class name.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/jest-serializer-merge-styles/README.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className='ms-Foo css-2432'>\n  Hello world\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Focus Outline Style - TypeScript\nDESCRIPTION: This function creates a style for focus outlines, enabling outlines based on the provided options. It leverages Griffel's styling system to ensure consistent focus indication across UI components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tabster/etc/react-tabster.api.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const createFocusOutlineStyle: ({ enableOutline, selector, customizeSelector, style, }?: CreateFocusOutlineStyleOptions) => GriffelStyle;\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.73.0\nDESCRIPTION: This patch highlights the update of '@fluentui/react' to version 8.73.0, ensuring that the library keeps up with the latest improvements and fixes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/theming-designer/CHANGELOG.md#2025-04-20_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.73.0 ([PR #23468](https://github.com/microsoft/fluentui/pull/23468) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Defining NavDivider Types in TypeScript\nDESCRIPTION: Type definitions for NavDivider component that inherits from base DividerProps and DividerState\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/patterns/basic-recomposition.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { DividerProps, DividerState } from '@fluentui/react-divider';\n\n/**\n * NavDivider Props\n */\nexport type NavDividerProps = DividerProps;\n\n/**\n * State used in rendering NavDivider\n */\nexport type NavDividerState = DividerState;\n```\n\n----------------------------------------\n\nTITLE: Calendar Component and ClassNames Declaration\nDESCRIPTION: Declaration of the main Calendar component and its associated class names using the SlotClassNames utility. These are marked as @internal API.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-calendar-compat/library/etc/react-calendar-compat.api.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport const Calendar: React_2.FunctionComponent<CalendarProps>;\n\n// @internal (undocumented)\nexport const calendarClassNames: SlotClassNames<CalendarStyles>;\n```\n\n----------------------------------------\n\nTITLE: useFieldContext_unstable Definition\nDESCRIPTION: This snippet defines the useFieldContext_unstable hook. It returns the FieldContextValue from the FieldContextProvider.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-field/library/etc/react-field.api.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport const useFieldContext_unstable: () => Readonly<Pick<FieldState, \\\"required\\\" | \\\"size\\\" | \\\"orientation\\\" | \\\"validationState\\\" | \\\"generatedControlId\\\">& {\\n    labelFor?: string | undefined;\\n    labelId?: string | undefined;\\n    validationMessageId?: string | undefined;\\n    hintId?: string | undefined;\\n}> | undefined;\"\n```\n\n----------------------------------------\n\nTITLE: Implementing React Rating Interface in TypeScript\nDESCRIPTION: The code snippet declares various TypeScript types and exports for the React rating component, including component properties, states, slots, and context values. Notable exports are the Rating and RatingDisplay components and associated types like RatingProps and RatingState, which define the expected inputs such as color, size, and event handlers and describe the component's rendering logic and state management.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-rating/library/etc/react-rating.api.md#2025-04-20_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\n/// <reference types=\"react\" />\n\nimport type { ComponentProps } from '@fluentui/react-utilities';\nimport type { ComponentState } from '@fluentui/react-utilities';\nimport type { EventData } from '@fluentui/react-utilities';\nimport type { EventHandler } from '@fluentui/react-utilities';\nimport type { ForwardRefComponent } from '@fluentui/react-utilities';\nimport * as React_2 from 'react';\nimport type { Slot } from '@fluentui/react-utilities';\nimport type { SlotClassNames } from '@fluentui/react-utilities';\n\n// @public\nexport const Rating: ForwardRefComponent<RatingProps>;\n\n// @public (undocumented)\nexport const ratingClassNames: SlotClassNames<RatingSlots>;\n\n// @public (undocumented)\nexport type RatingContextValues = {\n    ratingItem: RatingItemContextValue;\n};\n\n// @public\nexport const RatingDisplay: ForwardRefComponent<RatingDisplayProps>;\n\n// @public (undocumented)\nexport const ratingDisplayClassNames: SlotClassNames<RatingDisplaySlots>;\n\n// @public (undocumented)\nexport type RatingDisplayContextValues = {\n    ratingItem: RatingItemContextValue;\n};\n\n// @public\nexport type RatingDisplayProps = ComponentProps<RatingDisplaySlots> & {\n    color?: 'brand' | 'marigold' | 'neutral';\n    compact?: boolean;\n    count?: number;\n    icon?: React_2.ElementType;\n    max?: number;\n    size?: 'small' | 'medium' | 'large' | 'extra-large';\n    value?: number;\n};\n\n// @public (undocumented)\nexport type RatingDisplaySlots = {\n    root: NonNullable<Slot<'div'>>;\n    valueText?: Slot<'span'>;\n    countText?: Slot<'span'>;\n};\n\n// @public\nexport type RatingDisplayState = ComponentState<RatingDisplaySlots> & Required<Pick<RatingDisplayProps, 'color' | 'compact' | 'icon' | 'max' | 'size'>> & Pick<RatingDisplayProps, 'value'>;\n\n// @public\nexport const RatingItem: ForwardRefComponent<RatingItemProps>;\n\n// @public (undocumented)\nexport const ratingItemClassNames: SlotClassNames<RatingItemSlots>;\n\n// @public\nexport type RatingItemProps = ComponentProps<Partial<RatingItemSlots>> & {\n    value?: number;\n};\n\n// @public (undocumented)\nexport const RatingItemProvider: React_2.Provider<RatingItemContextValue | undefined>;\n\n// @public (undocumented)\nexport type RatingItemSlots = {\n    root: NonNullable<Slot<'span'>>;\n    selectedIcon?: NonNullable<Slot<'div'>>;\n    unselectedIcon?: NonNullable<Slot<'div'>>;\n    halfValueInput?: NonNullable<Slot<'input'>>;\n    fullValueInput?: NonNullable<Slot<'input'>>;\n};\n\n// @public\nexport type RatingItemState = ComponentState<RatingItemSlots> & Required<Pick<RatingItemProps, 'value'>> & Pick<RatingState, 'color' | 'step' | 'size'> & {\n    iconFillWidth: number;\n    appearance: 'outline' | 'filled';\n};\n\n// @public\nexport type RatingOnChangeEventData = EventData<'change', React_2.FormEvent<HTMLDivElement>> & {\n    value: number;\n};\n\n// @public\nexport type RatingProps = Omit<ComponentProps<Partial<RatingSlots>>, 'onChange'> & {\n    color?: 'brand' | 'marigold' | 'neutral';\n    defaultValue?: number;\n    iconFilled?: React_2.ElementType;\n    iconOutline?: React_2.ElementType;\n    itemLabel?: (rating: number) => string;\n    max?: number;\n    name?: string;\n    onChange?: EventHandler<RatingOnChangeEventData>;\n    step?: 0.5 | 1;\n    size?: 'small' | 'medium' | 'large' | 'extra-large';\n    value?: number;\n};\n\n// @public (undocumented)\nexport type RatingSlots = {\n    root: NonNullable<Slot<'div'>>;\n};\n\n// @public\nexport type RatingState = ComponentState<RatingSlots> & Required<Pick<RatingProps, 'color' | 'iconFilled' | 'iconOutline' | 'name' | 'step' | 'size' | 'value'>> & Pick<RatingProps, 'itemLabel'> & {\n    hoveredValue?: number | undefined;\n};\n\n// @public\nexport const renderRating_unstable: (state: RatingState, contextValues: RatingContextValues) => JSX.Element;\n\n// @public\nexport const renderRatingDisplay_unstable: (state: RatingDisplayState, contextValues: RatingDisplayContextValues) => JSX.Element;\n\n// @public\nexport const renderRatingItem_unstable: (state: RatingItemState) => JSX.Element;\n\n// @public\nexport const useRating_unstable: (props: RatingProps, ref: React_2.Ref<HTMLDivElement>) => RatingState;\n\n// @public (undocumented)\nexport const useRatingContextValues: (ratingState: RatingState) => RatingContextValues;\n\n// @public\nexport const useRatingDisplay_unstable: (props: RatingDisplayProps, ref: React_2.Ref<HTMLDivElement>) => RatingDisplayState;\n\n// @public (undocumented)\nexport const useRatingDisplayContextValues: (state: RatingDisplayState) => RatingDisplayContextValues;\n\n// @public\nexport const useRatingDisplayStyles_unstable: (state: RatingDisplayState) => RatingDisplayState;\n\n// @public\nexport const useRatingItem_unstable: (props: RatingItemProps, ref: React_2.Ref<HTMLSpanElement>) => RatingItemState;\n\n// @public\nexport const useRatingItemContextValue_unstable: () => RatingItemContextValue;\n\n// @public\nexport const useRatingItemStyles_unstable: (state: RatingItemState) => RatingItemState;\n\n// @public\nexport const useRatingStyles_unstable: (state: RatingState) => RatingState;\n\n// (No @packageDocumentation comment for this package)\n\n\n```\n\n----------------------------------------\n\nTITLE: Conditional Visibility with onLoad/onError Events in Fluent UI\nDESCRIPTION: This example demonstrates migrating the shouldStartVisible property using global events onLoad and onError to conditionally display the image within v9 of the Fluent UI framework.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-image/library/docs/MIGRATION.md#2025-04-20_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { makeStyles } from '@griffel/react';\nimport { Image } from '@fluentui/react-image';\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'none',\n  },\n});\n\nexport default function App() {\n  const [isLoaded, setLoaded] = useState(null);\n\n  const styles = useStyles();\n\n  return (\n    <Image\n      src=\"https://via.placeholder.com/300x300\"\n      alt=\"Example image\"\n      onLoad={() => setLoaded(true)}\n      onError={() => setLoaded(false)}\n      className={isLoaded === false ? styles.root : ''}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Internal Structure of InfoButton with Popover\nDESCRIPTION: This internal function snippet shows how the InfoButton component is structured, particularly focusing on how the Popover and its triggers are defined. It uses the 'slots' pattern for component composition and requires the presence of Fluent UI's Popover and slotProps components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-infolabel/library/docs/Spec.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nreturn (\n  <slots.popover {...(slotProps.popover as PopoverProps)}>\n    <PopoverTrigger>\n      <slots.root {...slotProps.root} />\n    </PopoverTrigger>\n    <slots.info {...slotProps.info} />\n  </slots.popover>\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Section Headings in Menus - TSX\nDESCRIPTION: This snippet shows how to use custom section headings within a MenuGroup to ensure a correct narration experience while remaining accessible.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/library/docs/Spec.md#2025-04-20_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nconst menu = (\n  <Menu>\n    <MenuTrigger><button>Opem menu</button></MenuTrigger>\n    <MenuList>\n      <MenuItem>Option 1</MenuItem>\n      <MenuDivider />\n      <MenuGroup>\n        <MenuGroupHeader>{children}</MenuGroupHeader>\n        <MenuItem>Section Option 1</MenuItem>\n        <MenuItem>Section Option 2</MenuItem>\n        <MenuItem>Section Option 3</MenuItem>\n      </MenuGroup>\n    </MenuList>\n  <Menu>\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme Toggle for Bottom Navigation Display in React\nDESCRIPTION: A React component that displays the Bottom Navigation control with a theme toggle between light and dark modes. It uses the DisplayToggle component to switch between theme variants and shows corresponding images.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/BottomNavigationPage/docs/android/BottomNavigationOverview.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<DisplayToggle onText=\"Dark\" offText=\"Light\" label=\"Theme Switcher\">\n### Bottom Navigation\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/android/updated/img_bottomnavigation_01_light.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/android/updated/img_bottomnavigation_01_dark.png?text=DarkMode\" />\n</DisplayToggle>\n```\n\n----------------------------------------\n\nTITLE: Defining Accordion-related Types and Constants in TypeScript\nDESCRIPTION: Definitions for Accordion component constants, types, and templates including expand modes, element definition, styles, and view templates.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport const accordionDefinition: FASTElementDefinition<typeof Accordion>;\n\n// @public\nexport const AccordionExpandMode: {\n    readonly single: \"single\";\n    readonly multi: \"multi\";\n};\n\n// Warning: (ae-forgotten-export) The symbol \"ValuesOf\" needs to be exported by the entry point index.d.ts\n//\n// @public\nexport type AccordionExpandMode = ValuesOf<typeof AccordionExpandMode>;\n\n// Warning: (ae-missing-release-tag) \"styles\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport const accordionStyles: ElementStyles;\n\n// Warning: (ae-missing-release-tag) \"template\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport const accordionTemplate: ElementViewTemplate<Accordion>;\n```\n\n----------------------------------------\n\nTITLE: TagPickerOption Props Type\nDESCRIPTION: Defines the props interface for the TagPickerOption component, including properties from ComponentProps, a value property, and either a text property with required children or a children property.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport type TagPickerOptionProps = ComponentProps<TagPickerOptionSlots> & {\n    value: string;\n} & ({\n    text?: string;\n    children: string;\n} | {\n    text: string;\n    children?: React_2.ReactNode;\n});\"\n```\n\n----------------------------------------\n\nTITLE: Defining A11y Testing Module in Markdown\nDESCRIPTION: This snippet defines the @fluentui/a11y-testing module in a markdown format. It outlines the purpose of the module, which is to provide tests for accessibility conformance and typings for custom definitions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/a11y-testing/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @fluentui/a11y-testing\n\nTests for testing a11y conformance of components and hooks, together with typings for creating custom definitions.\n```\n\n----------------------------------------\n\nTITLE: Updated ComponentState Type in TypeScript\nDESCRIPTION: This snippet shows the updated ComponentState type, which now maps slots to SlotComponent types instead of resolved shorthands.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/slot-children-render-function.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntype ComponentState<Slots extends SlotPropsRecord> = {\n  [Key in keyof Slots]: SlotComponent<ExtractSlotProps<Slots[Key]>>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining IDragOptions Interface in TypeScript\nDESCRIPTION: Defines the IDragOptions interface with properties for configuring drag behavior, including text, selectors, and menu items. This interface is marked as @public but undocumented.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_113\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IDragOptions {\n    closeMenuItemText: string;\n    dragHandleSelector?: string;\n    keepInBounds?: boolean;\n    keyboardMoveIconProps?: IIconProps;\n    menu: React_2.FunctionComponent<IContextualMenuProps>;\n    moveMenuItemText: string;\n}\n```\n\n----------------------------------------\n\nTITLE: No Restricted Imports (Incorrect)\nDESCRIPTION: This code snippet demonstrates the incorrect way of importing from restricted packages. It imports from `@fluentui/react-theme` and `@griffel/react` which are forbidden. This example showcases imports that the `no-restricted-imports` rule aims to prevent.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/eslint-plugin/README.md#2025-04-20_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as React from 'react';\nimport { webDarkTheme } from '@fluentui/react-theme';\nimport { makeStyles } from '@griffel/react';\n```\n\n----------------------------------------\n\nTITLE: DataGrid Feature Implementations\nDESCRIPTION: New features for DataGrid including child render function for rows, focus mode, and column definition improvements\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-table/library/CHANGELOG.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Implement child render function for DataGrid rows\n// Implement `focusMode` prop for DataGrid\n// Apply role=\"grid\" correctly\n// Use createColumn to define column definitions\n```\n\n----------------------------------------\n\nTITLE: Defining IDetailsRowBaseProps Interface in TypeScript\nDESCRIPTION: This snippet defines the IDetailsRowBaseProps interface, which represents the base properties for a DetailsList row. It includes various callbacks, styling options, and row-specific properties.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_89\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface IDetailsRowBaseProps extends Pick<IDetailsListProps, 'onRenderItemColumn' | 'getCellValueKey' | 'onRenderField'>, IBaseProps<IDetailsRow>, IDetailsItemProps {\n    cellsByColumn?: {\n        [columnKey: string]: React_2.ReactNode;\n    };\n    checkboxCellClassName?: string;\n    checkButtonAriaLabel?: string;\n    className?: string;\n    collapseAllVisibility?: CollapseAllVisibility;\n    compact?: boolean;\n    componentRef?: IRefObject<IDetailsRow>;\n    disabled?: boolean;\n    dragDropEvents?: IDragDropEvents;\n    dragDropHelper?: IDragDropHelper;\n    enableUpdateAnimations?: boolean;\n    eventsToRegister?: {\n        eventName: string;\n        callback: (item?: any, index?: number, event?: any) => void;\n    }[];\n    flatIndexOffset?: number;\n    focusZoneProps?: IFocusZoneProps;\n    getRowAriaDescribedBy?: (item: any) => string;\n    getRowAriaDescription?: (item: any) => string;\n    getRowAriaLabel?: (item: any) => string;\n    group?: IGroup;\n    id?: string;\n    isGridRow?: boolean;\n    item: any;\n    itemIndex: number;\n    onDidMount?: (row?: DetailsRowBase) => void;\n    onRenderCheck?: (props: IDetailsRowCheckProps) => JSX.Element;\n    onRenderDetailsCheckbox?: IRenderFunction<IDetailsCheckboxProps>;\n    onWillUnmount?: (row?: DetailsRowBase) => void;\n    role?: string;\n    rowFieldsAs?: IComponentAs<IDetailsRowFieldsProps>;\n    styles?: IStyleFunctionOrObject<IDetailsRowStyleProps, IDetailsRowStyles>;\n    theme?: ITheme;\n    useFastIcons?: boolean;\n    useReducedRowRenderer?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tooltip Component in TypeScript\nDESCRIPTION: Exports a Tooltip class that extends FASTElement. It includes properties and methods for handling tooltip behavior, positioning, and visibility.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_59\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class Tooltip extends FASTElement {\n    constructor();\n    anchor: string;\n    // @internal\n    protected anchorPositioningStyleElement: HTMLStyleElement | null;\n    blurAnchorHandler: () => void;\n    // (undocumented)\n    connectedCallback(): void;\n    delay?: number;\n    // (undocumented)\n    disconnectedCallback(): void;\n    elementInternals: ElementInternals;\n    focusAnchorHandler: () => void;\n    // @internal\n    hideTooltip(delay?: number): void;\n    id: string;\n    mouseenterAnchorHandler: () => void;\n    mouseleaveAnchorHandler: () => void;\n    positioning?: TooltipPositioningOption;\n    // @internal\n    positioningChanged(): void;\n    // @internal\n    showTooltip(delay?: number): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Motion Constants and Tokens in TypeScript\nDESCRIPTION: This snippet defines constants for motion curves and durations, as well as a motionTokens object that combines these values. These are used to standardize motion behaviors across the component library.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-motion/library/etc/react-motion.api.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport const curves: {\n    readonly curveAccelerateMax: \"cubic-bezier(0.9,0.1,1,0.2)\";\n    readonly curveAccelerateMid: \"cubic-bezier(1,0,1,1)\";\n    readonly curveAccelerateMin: \"cubic-bezier(0.8,0,0.78,1)\";\n    readonly curveDecelerateMax: \"cubic-bezier(0.1,0.9,0.2,1)\";\n    readonly curveDecelerateMid: \"cubic-bezier(0,0,0,1)\";\n    readonly curveDecelerateMin: \"cubic-bezier(0.33,0,0.1,1)\";\n    readonly curveEasyEaseMax: \"cubic-bezier(0.8,0,0.2,1)\";\n    readonly curveEasyEase: \"cubic-bezier(0.33,0,0.67,1)\";\n    readonly curveLinear: \"cubic-bezier(0,0,1,1)\";\n};\n\n// @public (undocumented)\nexport const durations: {\n    readonly durationUltraFast: 50;\n    readonly durationFaster: 100;\n    readonly durationFast: 150;\n    readonly durationNormal: 200;\n    readonly durationGentle: 250;\n    readonly durationSlow: 300;\n    readonly durationSlower: 400;\n    readonly durationUltraSlow: 500;\n};\n\n// @public (undocumented)\nexport const motionTokens: {\n    curveAccelerateMax: \"cubic-bezier(0.9,0.1,1,0.2)\";\n    curveAccelerateMid: \"cubic-bezier(1,0,1,1)\";\n    curveAccelerateMin: \"cubic-bezier(0.8,0,0.78,1)\";\n    curveDecelerateMax: \"cubic-bezier(0.1,0.9,0.2,1)\";\n    curveDecelerateMid: \"cubic-bezier(0,0,0,1)\";\n    curveDecelerateMin: \"cubic-bezier(0.33,0,0.1,1)\";\n    curveEasyEaseMax: \"cubic-bezier(0.8,0,0.2,1)\";\n    curveEasyEase: \"cubic-bezier(0.33,0,0.67,1)\";\n    curveLinear: \"cubic-bezier(0,0,1,1)\";\n    durationUltraFast: 50;\n    durationFaster: 100;\n    durationFast: 150;\n    durationNormal: 200;\n    durationGentle: 250;\n    durationSlow: 300;\n    durationSlower: 400;\n    durationUltraSlow: 500;\n};\n```\n\n----------------------------------------\n\nTITLE: Alternative Composition Example with DialogSurfaceWithoutMotion (Not Recommended)\nDESCRIPTION: Example showing an alternative composition approach using a hypothetical DialogSurfaceWithoutMotion component, which still has drawbacks in state control.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/motion-definition-n-apis.md#2025-04-20_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\n// ⚠️ This is not proposed API, it's just an example\n\nimport { Dialog, DialogSurfaceWithoutMotion } from '@fluentui/react-components';\nimport { createPresenceComponent } from '@fluentui/react-motions-preview';\n\nconst FadeSlow = createPresenceComponent(/* --- */);\n\nfunction MyComponent() {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <Dialog open={open}>\n      {/* 1️⃣ `FadeSlow` is a state controller, state can't be controlled by Dialog */}\n      <FadeSlow visible={visible}>\n        {/* 2️⃣ Original motion is still in place */}\n        <DialogSurfaceWithoutMotion>\n          <div>Hello world!</div>\n        </DialogSurfaceWithoutMotion>\n      </FadeSlow>\n    </Dialog>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: InteractionTag with secondary action\nDESCRIPTION: This snippet demonstrates how to add a secondary action to an `<InteractionTag>`. This enables additional interactions or options related to the tag.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tags/library/README.md#2025-04-20_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<InteractionTag>\n  <InteractionTagPrimary hasSecondaryAction>Content</InteractionTagPrimary>\n  <InteractionTagSecondary />\n</InteractionTag>\n```\n\n----------------------------------------\n\nTITLE: Migrating Text Component with Custom Color in FluentUI\nDESCRIPTION: This snippet demonstrates how to migrate a Text component with custom color styling from Northstar to Fluent UI v9 using makeStyles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-text/library/docs/MIGRATION.md#2025-04-20_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeStyles, Text } from '@fluentui/react-components';\n\nconst useStyles = makeStyles({\n  red: {\n    color: 'red',\n  },\n});\n\nconst MyComponent = () => {\n  const styles = useStyles();\n\n  return <Text className={styles.root}>{/* ... */}</Text>;\n};\n```\n\n----------------------------------------\n\nTITLE: Context Pattern Implementation Example\nDESCRIPTION: Demonstrates the recommended pattern for implementing contexts with proper typing and default value handling\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/global-contex-registration.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ninterface FooContextValue {\n  foo: string;\n  bar: string;\n}\n\nconst FooContext = React.createContext<Partial<FooContextValue>>({});\n\nexport const FooContextProvider = FooContext.Provider;\nexport const useFooContext: FooContextValue = () => {\n  const ctx = React.useContext(FooContext);\n\n  if (Object.keys(ctx).length) {\n    return ctx;\n  }\n\n  const fooContextDefaultValue: FooContextValue = {\n    foo: 'xxx',\n    bar: 'yyy',\n  };\n  return fooContextDefaultValue;\n};\n```\n\n----------------------------------------\n\nTITLE: Describing PopoverTrigger Properties\nDESCRIPTION: Defines the properties for `PopoverTriggerProps`, which applies HTML event callbacks for controlling popover visibility and behavior, ensuring only a single child element is passed in for triggering purposes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-popover/library/docs/Spec.md#2025-04-20_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type PopoverTriggerProps = {\n  /**\n   * Should only be a single child\n   */\n  children?: React.ReactElement;\n};\n\n```\n\n----------------------------------------\n\nTITLE: Get Focus Style Function\nDESCRIPTION: Defines a function, `getFocusStyle`, that returns an `IRawStyle` object for focus styling. It leverages the theme and optional configurations like inset, position, high contrast styles, border color, outline color, and focus-only states to generate the style.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/style-utilities/etc/style-utilities.api.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n\"export function getFocusStyle(theme: ITheme, options?: IGetFocusStylesOptions): IRawStyle;\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\n\"export function getFocusStyle(theme: ITheme, inset?: number, position?: 'relative' | 'absolute', highContrastStyle?: IRawStyle | undefined, borderColor?: string, outlineColor?: string, isFocusedOnly?: boolean, borderRadius?: string | number | undefined): IRawStyle;\"\n```\n\n----------------------------------------\n\nTITLE: Keyboard Key Constants in TypeScript\nDESCRIPTION: Exports constants representing keyboard keys and their numeric codes, including letters, numbers, special characters and modifiers.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/keyboard-keys/etc/keyboard-keys.api.md#2025-04-20_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const MicrophoneVolumeDown = \"MicrophoneVolumeDown\";\nexport const MicrophoneVolumeMute = \"MicrophoneVolumeMute\";\nexport const MicrophoneVolumeUp = \"MicrophoneVolumeUp\";\nconst MinusSign = 189;\nconst MultiplicationSign = 56;\nconst N = 78;\nconst n = 78;\n```\n\n----------------------------------------\n\nTITLE: Creating a Range of Numbers in TypeScript\nDESCRIPTION: This function generates an array of numbers within a specified range defined by the start and end parameters. It's useful for data segmentation and pagination within UIs.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/example-data/etc/example-data.api.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal\nexport const range: (start: number, end: number) => number[];\n```\n\n----------------------------------------\n\nTITLE: TagPickerControl State Type\nDESCRIPTION: Defines the state type for the TagPickerControl component, including properties from ComponentState and TagPickerContextValue, as well as an invalid property.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport type TagPickerControlState = ComponentState<TagPickerControlSlots & TagPickerControlInternalSlots> & Pick<TagPickerContextValue, 'size' | 'appearance' | 'disabled'> & {\n    invalid: boolean;\n};\"\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Link with URL in Swift\nDESCRIPTION: Demonstrates the default configuration of a Link control that opens a URL in a web browser when clicked. Creates a Link instance with a title and URL.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/LinkPage/docs/mac/LinkUsage.md#2025-04-20_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n// Given a title and URL, `Link` will by default open the URL in a web browser.\nlet link = Link(title: \"Link\", url: NSURL(string: \"https://github.com/microsoft/fluentui-apple\")!)\n```\n\n----------------------------------------\n\nTITLE: Implementing atMention styling in high contrast theme using FluentUI v9\nDESCRIPTION: Example showing how to achieve the same visual result as atMention property in the high contrast theme using makeStyles in v9.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-text/library/docs/MIGRATION.md#2025-04-20_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeStyles, Text } from '@fluentui/react-components';\n\nconst useStyles = makeStyles({\n  root: {\n    color: 'rgb(255, 255, 1)',\n  },\n});\n\nconst MyComponent = () => {\n  const styles = useStyles();\n\n  return <Text className={styles.root}>{/* ... */}</Text>;\n};\n```\n\n----------------------------------------\n\nTITLE: useFieldContextValues_unstable Definition\nDESCRIPTION: This snippet defines the useFieldContextValues_unstable hook. It accepts a FieldState and returns the associated FieldContextValues.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-field/library/etc/react-field.api.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const useFieldContextValues_unstable: (state: FieldState) => FieldContextValues;\"\n```\n\n----------------------------------------\n\nTITLE: Defining IMenuItemStyles Interface in TypeScript\nDESCRIPTION: This interface extends IButtonStyles and defines additional style properties for menu items, including styles for anchor links, checkmark icons, and sub-menu icons.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_151\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface IMenuItemStyles extends IButtonStyles {\n    anchorLink?: IStyle;\n    checkmarkIcon?: IStyle;\n    divider?: IStyle;\n    iconColor?: IStyle;\n    item?: IStyle;\n    linkContent?: IStyle;\n    subMenuIcon?: IStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: Combobox State Definition\nDESCRIPTION: This snippet defines the state for the Combobox component, extending ComponentState with ComboboxBaseState. It includes properties for showing the clear icon and an active descendant controller.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/library/etc/react-combobox.api.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport type ComboboxState = ComponentState<ComboboxSlots> & ComboboxBaseState & {\n    showClearIcon?: boolean;\n    activeDescendantController: ActiveDescendantImperativeRef;\n};\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Converged Label Component Examples\nDESCRIPTION: Shows various usage patterns of the new converged Label component including disabled and required variants.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-label/library/docs/Spec.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Label>Label</Label>\n\n<Label disabled>Label</Label>\n\n<Label required>Label</Label>\n\n<Label required=\"**\">\n  Label\n</Label>\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML DOM Structure for Slider\nDESCRIPTION: Actual HTML representation of the Slider component with CSS classes for different elements\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-slider/library/docs/Spec.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"fui-Slider\">\n  <input className=\"fui-Slider__input\" type=\"range\" value=\"50\" min=\"10\" max=\"100\" />\n  <div className=\"fui-Slider__rail\" />\n  <div className=\"fui-Slider__thumb\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Badge Components in Swift and Objective-C\nDESCRIPTION: Declaration of two main badge components with their Swift and Objective-C class names. BadgeView represents individual badge objects while BadgeField is an input field that converts text entries into badge objects with deletion and drag & drop capabilities.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/ChipPage/docs/ios/ChipImplementation.md#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nBadgeView in Swift, MSFBadgeView in Objective-C\nBadgeField in Swift, MSFBadgeField in Objective-C\n```\n\n----------------------------------------\n\nTITLE: TagPickerList Slots Type\nDESCRIPTION: Defines the slots available for the TagPickerList component. It includes a root slot of type Listbox.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport type TagPickerListSlots = {\n    root: Slot<typeof Listbox>;\n};\"\n```\n\n----------------------------------------\n\nTITLE: Importing Fluent UI Navigation Components\nDESCRIPTION: This snippet imports various component props, slots, and states from Fluent UI libraries, including buttons, dividers, and drawers. It ensures that necessary types and components are available for building structured navigation interfaces.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-nav-preview/library/etc/react-nav-preview.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\n/// <reference types=\"react\" />\n\nimport { ARIAButtonSlotProps } from '@fluentui/react-aria';\nimport { ButtonProps } from '@fluentui/react-button';\nimport { ButtonSlots } from '@fluentui/react-button';\nimport { ButtonState } from '@fluentui/react-button';\nimport { ComponentProps } from '@fluentui/react-utilities';\nimport type { ComponentState } from '@fluentui/react-utilities';\nimport type { DividerProps } from '@fluentui/react-divider';\nimport { DividerSlots } from '@fluentui/react-divider';\nimport type { DrawerBodyProps } from '@fluentui/react-drawer';\nimport import type and type { Slot } from '@fluentui/react-utilities';\nimport { SlotClassNames } from '@fluentui/react-utilities';\nimport { ToggleButtonProps } from '@fluentui/react-button';\nimport type { TooltipProps } from '@fluentui/react-tooltip';\n```\n\n----------------------------------------\n\nTITLE: Rendering the DOM Structure of a Persona Component - HTML\nDESCRIPTION: This HTML snippet represents the DOM structure generated for the Persona component, showcasing how content is laid out.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-persona/library/docs/Spec.md#2025-04-20_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"fui-Persona\">\n  <div {/* Avatar, PresenceBadge, or Avatar with PresenceBadge */} />\n  <span class=\"fui-Persona__primaryText\">{/* name */}</span>\n  <span class=\"fui-Persona__secondaryText\">Secondary Text</span>\n  <span class=\"fui-Persona__tertiaryText\">Tertiary Text</span>\n  <span class=\"fui-Persona__quaternaryText\">Quaternary Text</span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Button Story with Icon in Separate File - TypeScript\nDESCRIPTION: This snippet creates a button story with an icon in a separate file, ensuring that the corresponding export configuration is well-defined to integrate with the main button stories.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/authoring-stories.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// @filename ButtonWithIcon.stories.tsx\nexport const ButtonWithIcon = () => <Button icon={<CalendarIcon />}>Text</Button>;\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.74.0\nDESCRIPTION: This snippet records updating '@fluentui/react' to version 8.74.0, continuing the effort of keeping the project up to date with the latest enhancements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/theming-designer/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.74.0 ([PR #23493](https://github.com/microsoft/fluentui/pull/23493) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Migrating Style Overrides in Fluent UI - After\nDESCRIPTION: Example of how to apply style overrides in Fluent UI v9 using the makeStyles hook and applying classes directly to components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Menu.stories.mdx#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// in COMPONENT_NAME.tsx\nimport { useStyles } from './COMPONENT_NAME.styles.ts';\nimport { Menu, MenuTrigger, MenuPopover, MenuList, MenuItem, Button } from '@fluentui/react-components';\n\nexport const Component = () => {\n  const classes = useStyles();\n  return (\n    <Menu className={classes.breakoutRoomsAssignmentMenuButton}>\n      <MenuTrigger>\n        <Button>Open</Button>\n      </MenuTrigger>\n      <MenuPopover>\n        <MenuList>\n          <MenuItem>1</MenuItem>\n        </MenuList>\n      </MenuPopover>\n    </Menu>\n  );\n};\n\n// in COMPONENT_NAME.styles.ts\nimport { makeStyles } from '@fluentui/react-components';\n\nexport const useStyles = makeStyles({\n  breakoutRoomsAssignmentMenuButton: {\n    width: '100%',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: DialogSurface Component Definition\nDESCRIPTION: Defines the DialogSurface component as a forward-ref component accepting DialogSurfaceProps.  It is responsible for rendering the visual container for the dialog. It relies on ForwardRefComponent from '@fluentui/react-utilities'.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/etc/react-dialog.api.md#2025-04-20_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const DialogSurface: ForwardRefComponent<DialogSurfaceProps>;\"\n```\n\n----------------------------------------\n\nTITLE: Concatenating Style Sets with FluentUI in TSX\nDESCRIPTION: This example shows how to use the `concatStyleSetsWithProps` function to merge style sets with props in FluentUI. This approach evaluates styles before merging, important for dynamic styling based on component props. Dependencies include TypeScript interfaces for props and styles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/merge-styles/README.md#2025-04-20_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nconst result = concatStyleSetsWithProps<IFooProps, IFooStyles>(\n  { foo: 'bar' },\n  (props: IFooProps) => ({ root: { background: props.foo } }),\n  (props: IFooProps) => ({ root: { color: props.foo } }),\n);\n```\n\n----------------------------------------\n\nTITLE: Example of Inconsistent Event Handler Signatures\nDESCRIPTION: Demonstrates the current problem with inconsistent event handler signatures across different components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/event-handlers-arguments.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// ❌ Each component in this example has completely different signature for event handlers\n<>\n  <Checkbox onChange={(ev: React.FormEvent, newChecked: boolean) => {}} />\n  <Input onChange={(ev: React.FormEvent, data: { value: string }) => {}} />\n</>\n```\n\n----------------------------------------\n\nTITLE: Defining TabsterCore Interface in TypeScript\nDESCRIPTION: Defines the TabsterCore interface which extends multiple other interfaces and includes properties from TabsterCoreProps.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tabster/etc/react-tabster.api.md#2025-04-20_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\ninterface TabsterCore extends Pick<TabsterCoreProps, 'controlTab' | 'rootDummyInputs'>, Disposable, TabsterCoreInternal, Omit<Tabster, 'core'> {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Pie Chart Component in TypeScript\nDESCRIPTION: The PieChart constant exports a React functional component for rendering pie charts, utilizing props to manage data and styling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/etc/react-charting.api.md#2025-04-20_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const PieChart: React_2.FunctionComponent<IPieChartProps>;\n```\n\n----------------------------------------\n\nTITLE: Redefined Checkbox Types with Simplified Props\nDESCRIPTION: This demonstrates the new pattern for defining 'CheckboxProps' and 'CheckboxState', adhering to the proposed changes by removing 'CheckboxCommons' and making property requirements clear within 'CheckboxProps'.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/remove-commons.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CheckboxProps = ComponentProps<CheckboxSlots> & {\n  size?: 'medium' | 'large';\n  // maybe some other props here\n};\n\nexport type CheckboxState = Required<Pick<CheckboxProps, 'size'>> &\n  ComponentState<CheckboxSlots> & {\n    // maybe some other state here\n  };\n```\n\n----------------------------------------\n\nTITLE: Atomic CSS Example\nDESCRIPTION: Demonstrates the difference between monolithic CSS classes and Atomic CSS classes. Atomic CSS applies individual property-value pairs as single CSS rules, enabling reusability across elements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/styles-handbook.md#2025-04-20_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Monolithic classes */\n/* Can be applied only to a specific button */\n.button {\n  display: flex;\n  align-items: center;\n}\n\n/* Atomic CSS */\n/* Can be applied to any element that needs these rules */\n.display-flex {\n  display: flex;\n}\n.align-items-center {\n  align-items: center;\n}\n```\n\n----------------------------------------\n\nTITLE: Icon Options Configuration\nDESCRIPTION: Interface for configuring global icon management settings, including warning behavior for missing icons\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-icons-compat/library/etc/react-icons-compat.api.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IconOptions {\n  disableWarnings: boolean;\n  warnOnMissingIcons?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Proposing CSS Class Prefixing Solution in HTML\nDESCRIPTION: This HTML snippet demonstrates the proposed solution of prefixing CSS classes with a unique identifier to prevent style collisions between different bundles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/shared/build-system/stop-styles-transforms.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- PROPOSAL -->\n\n<!-- main bundle -->\n<style>\n  .main-order0 {\n    padding: 10px;\n  }\n  .main-order1 {\n    padding-left: 5px;\n  }\n</style>\n\n<!-- CDN bundle -->\n<style>\n  .order0 {\n    padding: 10px;\n  }\n</style>\n\n<!-- HTML -->\n\n<!--\n  ✅ Now the \"div\" below will have \"padding-left: 5px\" as CSS rules don't clash anymore.\n  -->\n\n<div class=\"main-order0 main-order1\"></div>\n```\n\n----------------------------------------\n\nTITLE: Removing Partial from TableProps in FluentUI React Table\nDESCRIPTION: This bugfix removes the `Partial` type from the `TableProps` usage in the FluentUI React Table component. This ensures that all required properties are correctly enforced, preventing potential runtime errors.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-table/library/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: none\nCODE:\n```\n\"bugfix: removes Partial from TableProps usage ([PR #32159](https://github.com/microsoft/fluentui/pull/32159) by bernardo.sunderhus@gmail.com)\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Utilities and Components from Fluent UI\nDESCRIPTION: This snippet illustrates the export of utility functions and components from @fluentui/react-portal. It requires React and @fluentui/react-utilities as dependencies. The snippet exports a component named 'Portal' and several type definitions and functions related to portal manipulation, such as 'PortalProps' and 'renderPortal_unstable'.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-portal/library/etc/react-portal.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { elementContains } from '@fluentui/react-utilities';\nimport * as React_2 from 'react';\nimport { setVirtualParent } from '@fluentui/react-utilities';\n\nexport { elementContains }\n\n// @public\nexport const Portal: React_2.FC<PortalProps>;\n\n// @public (undocumented)\nexport type PortalProps = {\n    children?: React_2.ReactNode;\n    mountNode?: HTMLElement | null | {\n        element?: HTMLElement | null;\n        className?: string;\n    };\n};\n\n// @public (undocumented)\nexport type PortalState = Pick<PortalProps, 'children'> & {\n    mountNode: HTMLElement | null | undefined;\n    virtualParentRootRef: React_2.MutableRefObject<HTMLSpanElement | null>;\n};\n\n// @public\nexport const renderPortal_unstable: (state: PortalState) => React_2.ReactElement;\n\nexport { setVirtualParent }\n\n// @public\nexport function toMountNodeProps(mountNode: PortalProps['mountNode']): {\n    element?: HTMLElement | null;\n    className?: string;\n};\n\n// @public\nexport const usePortal_unstable: (props: PortalProps) => PortalState;\n\n```\n\n----------------------------------------\n\nTITLE: Defining ActiveDescendantChangeEvent type\nDESCRIPTION: This snippet defines the type `ActiveDescendantChangeEvent` as a custom event. It uses the `CustomEvent` interface with a generic type `ActiveDescendantChangeEventDetail` to specify the structure of the event's detail property.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-aria/library/etc/react-aria.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n// @public (undocumented)\nexport type ActiveDescendantChangeEvent = CustomEvent<ActiveDescendantChangeEventDetail>;\n```\n```\n\n----------------------------------------\n\nTITLE: Exporting TagPicker Context Hook in TypeScript\nDESCRIPTION: Exports a typed context selector hook for TagPicker that allows components to access the TagPicker context value.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_55\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const useTagPickerContext_unstable: <T>(selector: ContextSelector<TagPickerContextValue, T>) => T;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for @fluentui/react-breadcrumb Stories in JavaScript\nDESCRIPTION: This code snippet shows how to configure the Storybook module exports to include stories from the @fluentui/react-breadcrumb package. It specifies the file paths for both MDX and TypeScript/TSX story files.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-breadcrumb/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-breadcrumb/stories/src/**/*.stories.mdx', '../packages/react-components/react-breadcrumb/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: DialogActions Props Definition\nDESCRIPTION: Defines the props for the DialogActions component. It includes ComponentProps from '@fluentui/react-utilities', position (start or end) and fluid properties. These control the appearance and layout of the action buttons within the dialog.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/etc/react-dialog.api.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport type DialogActionsProps = ComponentProps<DialogActionsSlots> & {\n    position?: DialogActionsPosition;\n    fluid?: boolean;\n};\"\n```\n\n----------------------------------------\n\nTITLE: Defining Textbox Component in TypeScript\nDESCRIPTION: The Textbox constant exports a functional component for displaying text boxes within charts, designed to enhance interactivity and display options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/etc/react-charting.api.md#2025-04-20_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport const Textbox: React_2.FunctionComponent<ITextboxProps>;\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Meta Component\nDESCRIPTION: Import statement for Storybook documentation meta component and meta configuration for button migration documentation\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Button.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs';\n\n<Meta title=\"Concepts/Migration/from v8/Components/Button Migration\" />\n```\n\n----------------------------------------\n\nTITLE: FieldState Definition\nDESCRIPTION: This snippet defines the FieldState type. It represents the state of the Field component and includes properties like orientation, required, size, validationState, children, and generatedControlId.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-field/library/etc/react-field.api.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport type FieldState = ComponentState<Required<FieldSlots>> & Required<Pick<FieldProps, 'orientation' | 'required' | 'size' | 'validationState'>> & Pick<FieldProps, 'children'> & {\\n    generatedControlId: string;\\n};\"\n```\n\n----------------------------------------\n\nTITLE: Importing Slider Component - Before and After Migration\nDESCRIPTION: Shows the change in import statement and basic usage when migrating from @fluentui/react-northstar to @fluentui/react-components\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Slider.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Slider } from '@fluentui/react-northstar';\nconst Component = () => <Slider />;\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Slider } from '@fluentui/react-components';\nconst Component = () => <Slider />;\n```\n\n----------------------------------------\n\nTITLE: Resulting DOM Structure for Select Component in HTML\nDESCRIPTION: The HTML DOM structure that results from rendering the Select component, showing how it wraps the native select element with a span and adds an icon.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-select/library/docs/Spec.md#2025-04-20_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<label for=\"selectID\">Choose a color</label>\n<span class=\"my-select-class\">\n  <select id=\"selectID\">\n    <option>Red</option>\n    <option>Green</option>\n    <option>Blue</option>\n  </select>\n  <svg><!-- icon --></svg>\n</span>\n```\n\n----------------------------------------\n\nTITLE: Creating a Config-Based CodeMod - JSON\nDESCRIPTION: This JSON template is used to create a codemod configuration in the upgrades.json file. The structure includes details like the name of the codemod and options for renaming props.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/codemods/documentation/howTo.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": // Classify this collection of codemods\n  \"upgrades\": [\n    {\n      \"name\": // What upgrade are you running?\n      \"type\": // The type of mod you want to generate. This type affects what mod options are available\n      \"version\": // Mod version, as a string\n      \"options\": {\n        \"from\": {\n          \"importName\": // Name of component housing prop\n          \"toRename\": // Prop name to change\n        },\n        \"to\": {\n          \"replacementName\": // New prop name\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Heading Accordion in FluentUI\nDESCRIPTION: Example of Accordion implementation with custom heading levels using the 'as' prop to specify semantic HTML elements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-accordion/library/docs/Spec.md#2025-04-20_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst accordion = (\n  <Accordion>\n    <AccordionItem>\n      <AccordionHeader as=\"h1\">\n        First Panel\n      </AccordionHeader>\n      <AccordionPanel>\n        This is the content of the first Panel\n      </AccordionPanel>\n    </AccordionItem>\n    <AccordionItem>\n      <AccordionHeader as=\"h1\">\n        Second Panel\n      </AccordionHeader>\n      <AccordionPanel>\n        This is the content of the second Panel\n      </AccordionPanel>\n    </AccordionItem>\n  <Accordion>\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Tree Provider Component in TypeScript\nDESCRIPTION: Exports a React Provider component for TreeContextValue or SubtreeContextValue with a displayName property.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tree/library/etc/react-tree.api.md#2025-04-20_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const TreeProvider: {\n    (props: React_2.ProviderProps<TreeContextValue | SubtreeContextValue>): JSX.Element;\n    displayName: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Drawer Context Value Type Definition\nDESCRIPTION: Defines the context value structure for managing drawer scroll state and providing scroll state update mechanisms\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-drawer/library/etc/react-drawer.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type DrawerContextValue = {\n    scrollState: DrawerScrollState;\n    setScrollState: (scrollState: DrawerScrollState) => void;\n};\n```\n\n----------------------------------------\n\nTITLE: SpinButton Prop Types in TypeScript\nDESCRIPTION: This code snippet demonstrates the prop types for the 'SpinButton' component in TypeScript, showcasing both 'camelCase' and 'spinal-case' naming conventions used for props. This example highlights the inconsistency in the naming, which the proposal aims to address.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/prop-string-union-naming.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// camelCase\nappearance: 'outline' | 'underline' | 'filledDarker' | 'filledLighter';\n// spinal-case\ninputType: 'all' | 'spinners-only';\n```\n\n----------------------------------------\n\nTITLE: Declare as Separately From Component\nDESCRIPTION: This example shows how the `as` prop should be used as a prop of the component being rendered, not to define the component to be rendered.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/simplify-prop-merging.md#2025-04-20_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nconst state = {\n  fooSlot: { type: \"submit\" },\n  barSlot: { as: \"button\" },\n  components: {\n    fooSlot: \"button\",\n    barSlot: Loader, // JSX element\n  },\n};\n\n// let's use our `Component`\n<Component fooSlot={{ as: 'div' }} barSlot={{as: \"div\"}} />\n\n// result\n<Component>\n  <div type=\"submit\">button</div>\n  <Loader as=\"div\" />\n</Component>\n```\n\n----------------------------------------\n\nTITLE: Implementing AnnounceProvider and Consumer in React Application\nDESCRIPTION: Shows how to set up the AnnounceProvider component to provide the announce function implementation, and how to use it with a consumer component that uses the useAnnounce hook.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-shared-contexts/stories/src/UseAnnouce/UseAnnounceDescription.md#2025-04-20_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nimport { AnnounceProvider, useAnnounce } from '@fluentui/react-components';\n\nfunction AnnounceConsumer() {\n  const { announce } = useAnnounce();\n\n  // ...\n  // component that triggers announcement\n}\n\nfunction Announcer(props) {\n  const announce = message => {\n    // ...\n    // implementation of announcement\n  };\n  const contextValue = React.useMemo(() => ({ announce }), [announce]);\n\n  return <AnnounceProvider value={contextValue}>{props.children}</AnnounceProvider>;\n}\n\nfunction App() {\n  return (\n    <AnnounceProvider>\n      <AnnounceConsumer />\n    </AnnounceProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Table Cell with Media\nDESCRIPTION: Demonstrates how to include media (e.g., an icon) within a TableCell using the TableCellLayout component. The `media` prop of TableCellLayout is used to render a media item, alongside the cell's content. `FileIcon` is assumed to be a react component that renders an icon.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-table/library/docs/Spec.md#2025-04-20_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<TableRow>\n  <TableCell>\n    <TableCellLayout media={<FileIcon />}>Cell</TableCellLayout>\n  </TableCell>\n<TableRow>\n```\n\n----------------------------------------\n\nTITLE: Announced Component Definition in TypeScript\nDESCRIPTION: Defines the Announced functional component with IAnnouncedProps. This component is used for screen reader announcements in accessibility scenarios.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport const Announced: React_2.FunctionComponent<IAnnouncedProps>;\n```\n\n----------------------------------------\n\nTITLE: Defining Persona Styling Interfaces in TypeScript for FluentUI\nDESCRIPTION: Defines the style interfaces for Persona components in FluentUI, including IPersonaStyleProps for style input parameters and IPersonaStyles for the actual style definitions targeting different parts of the component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_159\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IPersonaStyleProps {\n    className?: string;\n    coinSize?: number;\n    presence?: PersonaPresence;\n    // (undocumented)\n    showSecondaryText?: boolean;\n    size?: PersonaSize;\n    theme: ITheme;\n}\n\n// @public (undocumented)\nexport interface IPersonaStyles {\n    // (undocumented)\n    details: IStyle;\n    // (undocumented)\n    optionalText: IStyle;\n    // (undocumented)\n    primaryText: IStyle;\n    // (undocumented)\n    root: IStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: Days of the Week Enumeration - TypeScript\nDESCRIPTION: This enumeration represents the days of the week, providing a structured way to reference weekdays when performing date manipulations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/date-time-utilities/etc/date-time-utilities.api.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport enum DayOfWeek {\n    // (undocumented)\n    Friday = 5,\n    // (undocumented)\n    Monday = 1,\n    // (undocumented)\n    Saturday = 6,\n    // (undocumented)\n    Sunday = 0,\n    // (undocumented)\n    Thursday = 4,\n    // (undocumented)\n    Tuesday = 2,\n    // (undocumented)\n    Wednesday = 3\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Validation Flags in TypeScript\nDESCRIPTION: This snippet defines a constant object ValidationFlags with various validation states for form inputs. It includes flags for different types of validation errors and a valid state.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_87\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const ValidationFlags: {\n    readonly badInput: \"bad-input\";\n    readonly customError: \"custom-error\";\n    readonly patternMismatch: \"pattern-mismatch\";\n    readonly rangeOverflow: \"range-overflow\";\n    readonly rangeUnderflow: \"range-underflow\";\n    readonly stepMismatch: \"step-mismatch\";\n    readonly tooLong: \"too-long\";\n    readonly tooShort: \"too-short\";\n    readonly typeMismatch: \"type-mismatch\";\n    readonly valueMissing: \"value-missing\";\n    readonly valid: \"valid\";\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing MessageBar Template Structure in HTML\nDESCRIPTION: HTML template structure for the MessageBar component showing the slot organization. The template includes slots for the icon, main content, actions, and dismiss button, allowing for flexible content placement within the component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/message-bar/README.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<slot name=\"icon\"></slot>\n<div class=\"content\">\n  <slot></slot>\n</div>\n<div class=\"actions\">\n  <slot name=\"actions\"></slot>\n</div>\n<slot name=\"dismiss\"></slot>\n```\n\n----------------------------------------\n\nTITLE: Exporting Menu Popover Class Names in TypeScript\nDESCRIPTION: Exports a constant representing class names for menu popover slots, facilitating consistent styling across menu components. No additional dependencies are specified.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/library/etc/react-menu.api.md#2025-04-20_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const menuPopoverClassNames: SlotClassNames<MenuPopoverSlots>;\n```\n\n----------------------------------------\n\nTITLE: Bumping @griffel/react version\nDESCRIPTION: This patch bumps the `@griffel/react` dependency.  This update ensures compatibility with the latest features and fixes from `@griffel/react`.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-spinbutton/library/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: none\nCODE:\n```\nchore: bump @griffel/react ([PR #31258](https://github.com/microsoft/fluentui/pull/31258) by olfedias@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Creating Select Component with Grouped Options in React TSX\nDESCRIPTION: Implementation of Select with optgroup elements to organize options into logical groups. This example categorizes animals by their habitat.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-select/library/docs/Spec.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<label htmlFor=\"selectID\">Choose an animal</label>\n<Select id=\"selectID\">\n  <optgroup label=\"Land\">\n    <option>Cat</option>\n    <option>Dog</option>\n    <option>Horse</option>\n  </optgroup>\n  <optgroup label=\"Water\">\n    <option>Dolphin</option>\n    <option>Seal</option>\n    <option>Shark</option>\n  </optgroup>\n</Select>\n```\n\n----------------------------------------\n\nTITLE: Feature Enhancement: FlatTree Navigation Support\nDESCRIPTION: Introduces new navigation capabilities for FlatTree without requiring useHeadlessFlatTree hook, expanding component flexibility and usability\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tree/library/CHANGELOG.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nfeat: FlatTree supports navigation without useHeadlessFlatTree\n```\n\n----------------------------------------\n\nTITLE: Preparing a Package for Preview Phase Release\nDESCRIPTION: Command to prepare a package for initial release in the preview phase using the FluentUI workspace generator.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/new-release-process-v9-packages.md#2025-04-20_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:prepare-initial-release --project react-one-preview --phase=preview\n```\n\n----------------------------------------\n\nTITLE: Implementing HTML Structure in FluentUI\nDESCRIPTION: Presents a basic HTML span element for use within FluentUI's Text component. It automatically sets the text direction.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Text.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<span dir=\"auto\">Foo bar baz</span>\n```\n\n----------------------------------------\n\nTITLE: Applying Flexbox with Static HTML\nDESCRIPTION: This basic HTML structure is designed to work with a parallel CSS definition that applies flexbox properties. It highlights simplicity in structure that works alongside complex styling logic managed through external CSS or JS-based styling solutions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Flex/Flex.Stack.stories.mdx#2025-04-20_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"flex\">\\n  <div class=\"inner\">\\n    ...\\n  </div>\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering Checkbox with Explicit Slot Props in TSX\nDESCRIPTION: Alternative way to render the Checkbox component by explicitly passing props to the input slot, achieving the same HTML output as the top-level props approach.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/native-element-props.md#2025-04-20_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<Checkbox input={{ name: 'foo', checked: true, ref: ref }} root={{ id: 'bar' }}>\n  sample\n</Checkbox>\n```\n\n----------------------------------------\n\nTITLE: Setting Storybook Meta Title in JSX\nDESCRIPTION: This JSX snippet sets the title for the Storybook documentation page. It specifies the location and title of the page in the Storybook navigation hierarchy.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/migrate-styles.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta title=\"Concepts/Migration/from v0/Custom Style Overrides\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for FluentUI React Input Stories\nDESCRIPTION: This code snippet shows how to configure a Storybook module to include stories from the react-input package by specifying glob patterns for both MDX and TypeScript/TSX story files.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-input/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-input/stories/src/**/*.stories.mdx', '../packages/react-components/react-input/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Using JavaScript-Based Tokens for Motion Duration\nDESCRIPTION: This code demonstrates the use of JavaScript-based tokens for specifying motion duration.  Instead of hardcoding values, tokens like `motionTokens.durationSlow` are used to provide a consistent and themeable way to define animation properties.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/motion-definition-n-apis.md#2025-04-20_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst fadeEnterSlow: AtomMotion = {\n  keyframes: [{ opacity: 0 }, { opacity: 1 }],\n\n  duration: motionTokens.durationSlow,\n};\n```\n\n----------------------------------------\n\nTITLE: Unsafe DOM Attribute Spread Example\nDESCRIPTION: This example demonstrates the lack of type safety when spreading attributes to native HTML elements. It shows how an incorrect `as` prop can be passed without a TypeScript error, leading to potentially unexpected rendering.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/simplify-prop-merging.md#2025-04-20_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// ComponentState\nconst state = {\n  buttonSlot: { as: 'button', type: 'submit' },\n};\n\nfunction App() {\n  // 🚨 No TS Error\n  return <Component buttonSlot={{ as: 'div' }} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Inline Drawer in HTML\nDESCRIPTION: This snippet illustrates the structure of an inline drawer in HTML. It includes ARIA attributes for accessibility and provides a configuration for rendering content.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-drawer/library/docs/Spec.md#2025-04-20_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"fui-InlineDrawer\" tabindex=\"-1\" aria-labelledby=\"the-title-element-id\">\n  <!-- Content rendered here -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: SpinButton Component Properties\nDESCRIPTION: Core attributes that define the SpinButton component's functionality, including minimum and maximum values, step size, and current value.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-spinbutton/library/docs/Spec.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. **min**: the minimum valid value for the control\n2. **max**: the maximum valid value for the control\n3. **step**: the step size or amount the value is changed by one increment or decrement\n4. **value**: the current value for the control\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Structure for Button with Icon Slot\nDESCRIPTION: Illustrates the HTML structure that results from using the icon slot in a Button component. Shows how the provided JSX content becomes a child of the icon slot element in the rendered output.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Slots/Slots.stories.mdx#2025-04-20_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- button root element -->\n<button class=\"fui-Button\">\n  <!-- icon slot -->\n  <span class=\"fui-Button__icon\">\n    <!-- icon slot children -->\n    <img src=\"site-icon.png\" alt=\"branded site icon\" />\n  </span>\n</button>\n```\n\n----------------------------------------\n\nTITLE: Image Class Names Definition\nDESCRIPTION: Declares the imageClassNames constant as SlotClassNames for ImageSlots.  This is used to manage the CSS class names applied to the different slots of the Image component, allowing for customization of the component's styling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-image/library/etc/react-image.api.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport const imageClassNames: SlotClassNames<ImageSlots>;\n```\n\n----------------------------------------\n\nTITLE: Defining FlexItem Styles in Fluent UI v9 (TypeScript)\nDESCRIPTION: Example of how to define styles for a flex item in Fluent UI v9 using makeStyles and flexItem mixins. It creates a style for a flex item that grows and pushes in a column direction.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/FlexItem.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// in COMPONENT_NAME.styles.ts\nimport { makeStyles, flexItem } from '@fluentui/react-components';\n\nexport const useStyles = makeStyles({\n  flexItemPushColumn: {\n    ...flexItem.grow(true),\n    ...flexItem.pushColumn(),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Option A Implementation Example\nDESCRIPTION: Shows the proposed Option A implementation with full props access in the data object.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/event-handlers-arguments.md#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\ninterface InputOnChangeData {\n  value: string;\n  props: InputProps;\n}\n\ninterface CheckboxOnChangeData {\n  // 👇 The name \"value\" doesn't always make sense and could possibly be confusing in some cases. E.g. for \"Checkbox\",\n  //    the \"onChange\" event happens when the \"checked\" prop changes, not the \"value\" prop\n  checked: string;\n  props: CheckboxProps;\n}\n\nfunction App() {\n  return (\n    <>\n      <Input\n        onChange={(ev: React.ChangeEvent, data: InputOnChangeData) => {\n          const { props, value } = data;\n\n          // I can access the new value\n          console.log(`The new value is ${value}`);\n\n          // I can still access the props of the parent component\n          console.log(`The input (#${props.id}) user's passed in props are ${JSON.stringify(props)}`);\n\n          // I can even access additional metadata specific to the change if needed\n          const { id } = props;\n\n          // 😈 I can even access `props.value`\n          const valueFromProps = props.value;\n        }}\n      />\n      <Checkbox onChange={(ev: React.ChangeEvent, data: CheckboxOnChangeData) => console.log(data.checked)} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Trigger Component with Button in TypeScript\nDESCRIPTION: The code snippet demonstrates how to use a `Trigger` component with a `button` element. It shows that no additional attributes are necessary, as the button element already provides the required ARIA properties by default.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/triggers-and-multiple-layers-of-button-handling.md#2025-04-20_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n<Trigger>\n  <button>Trigger something</button>\n</Trigger>\n```\n\n----------------------------------------\n\nTITLE: Defining TabsterPart Interface in TypeScript\nDESCRIPTION: Defines a generic TabsterPart interface with methods for getting and setting properties, as well as accessing the associated element.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tabster/etc/react-tabster.api.md#2025-04-20_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\ninterface TabsterPart<P> {\n    // (undocumented)\n    getElement(): HTMLElement | undefined;\n    // (undocumented)\n    getProps(): P;\n    // (undocumented)\n    readonly id: string;\n    // (undocumented)\n    setProps(props: P): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Providing a Menu Context in React TypeScript\nDESCRIPTION: Exports a provider component for menu context, intended to supply menu context values to descendant components. It depends on React type and MenuContextValue.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/library/etc/react-menu.api.md#2025-04-20_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const MenuProvider: React_2.Provider<MenuContextValue> & React_2.FC<React_2.ProviderProps<MenuContextValue>>;\n```\n\n----------------------------------------\n\nTITLE: Property Assignment Utility - TypeScript\nDESCRIPTION: Function for filtered property assignment based on a predicate function.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/utilities/etc/utilities.api.md#2025-04-20_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function filteredAssign(isAllowed: (propName: string) => boolean, target: any, ...args: any[]): any;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories for React Radio\nDESCRIPTION: Defines story file globs for including Fluent UI React Radio component stories in Storybook configuration\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-radio/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-radio/stories/src/**/*.stories.mdx', '../packages/react-components/react-radio/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Initial Date for DatePicker in Swift\nDESCRIPTION: Demonstrates how to initialize a DatePicker with a specific date rather than the current date. This example creates a date set to January 1, 2019 using DateComponents.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/DatePickerPage/docs/mac/DatePickerUsage.md#2025-04-20_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\n// Custom initial date\nlet date = Calendar.current.date(from: DateComponents(year: 2019, month: 1, day: 1))\nDatePickerController(date: date, calendar: nil, style: .date)\n```\n\n----------------------------------------\n\nTITLE: Implementing DocumentCardActions with views in Fluent UI v8 (TSX)\nDESCRIPTION: This code snippet demonstrates how to use DocumentCardActions with a 'views' prop in Fluent UI v8. It includes an array of action objects and renders them within a DocumentCard component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Card/CardFooter.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DocumentCard, DocumentCardActions } from '@fluentui/react/lib/DocumentCard';\n\nconst documentCardActions = [\n  {\n    iconProps: { iconName: 'Share' },\n    ariaLabel: 'share action',\n  },\n  {\n    iconProps: { iconName: 'Pin' },\n    ariaLabel: 'pin action',\n  },\n  {\n    iconProps: { iconName: 'Ringer' },\n    ariaLabel: 'notifications action',\n  },\n];\n\nexport const DocumentCardCompleteExample: React.FunctionComponent = () => (\n  <DocumentCard>\n    <DocumentCardActions actions={documentCardActions} views={432} />\n  </DocumentCard>\n);\n```\n\n----------------------------------------\n\nTITLE: CSS Variable Expansion Example\nDESCRIPTION: Demonstrates the challenges with CSS variable expansion in shorthand properties\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/no-css-shorthands-in-make-styles.md#2025-04-20_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// Input\nconst input = { padding: 'var(--foo)' };\n// Output\nconst output = {\n  /* is it safe to expand it at all? */\n  paddingTop: 'var(--foo)',\n  paddingRight: 'var(--foo)',\n  paddingBottom: 'var(--foo)',\n  paddingLeft: 'var(--foo)',\n};\n```\n\n----------------------------------------\n\nTITLE: Defining DocumentCard Context Interface\nDESCRIPTION: TypeScript interface definition for DocumentCardContext. This interface provides context for DocumentCard components for accessibility and interaction purposes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_95\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IDocumentCardContext {\n    // (undocumented)\n    role?: string;\n    // (undocumented)\n    tabIndex?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Resulting HTML for Trigger Component with Div\nDESCRIPTION: This HTML snippet shows the result of using the `Trigger` component with a `div` as a child. The div is enhanced with ARIA attributes to behave as a button. This setup ensures accessibility compliance for interactive elements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/triggers-and-multiple-layers-of-button-handling.md#2025-04-20_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div onclick=\"fn\" onkeydown=\"fn\" onkeyup=\"fn\" role=\"button\" tabindex=\"0\">Trigger something</div>\n```\n\n----------------------------------------\n\nTITLE: Safe Component Mounting with Enzyme\nDESCRIPTION: Utility function to mount and safely unmount React components during testing using Enzyme. Provides a clean way to perform component assertions with automatic teardown.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/test-utilities/README.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nsafeMount(<Foo />, foo => {\n  // assert things about foo\n});\n```\n\n----------------------------------------\n\nTITLE: Visualize Dependency Graph with Mermaid\nDESCRIPTION: Flowchart representing the dependency graph for public documentation and legacy demo app for @fluentui/react. The graph is specified in Mermaid syntax and is used to visually represent the relationships between different parts of the documentation system. No specific dependencies to run Mermaid graphs other than a compatible rendering tool or platform.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-examples/README.md#2025-04-20_snippet_0\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n\nsubgraph \"@fluentui/react-examples\"\nRED[\"{ComponentName}.doc.tsx\"] --> RESF[\"{ComponentName}.{ExampleName}.Example.tsx\"];\nend\n\nPB(\"@fluentui/public-docsite\") --> RED\nPBR(\"@fluentui/public-docsite-resources\") --> RED\n```\n\n----------------------------------------\n\nTITLE: Optimizing Icon Usage\nDESCRIPTION: This optimization increases performance by adjusting how the largest icons are called within the project. It focuses on improving load times and responsiveness.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\noptimize largest icons used by calling @yuanboxue-amber ([#16590](https://github.com/microsoft/fluentui/pull/16590))\n```\n\n----------------------------------------\n\nTITLE: Defining IExtendedPeoplePickerProps Interface in TypeScript\nDESCRIPTION: Defines the IExtendedPeoplePickerProps interface extending IBaseExtendedPickerProps with IPersonaProps. This interface is marked as @public but undocumented.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_132\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IExtendedPeoplePickerProps extends IBaseExtendedPickerProps<IPersonaProps> {\n}\n```\n\n----------------------------------------\n\nTITLE: TagPickerGroup State Type\nDESCRIPTION: Defines the state type for the TagPickerGroup component, including properties from TagGroupState and a hasSelectedOptions property.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport type TagPickerGroupState = TagGroupState & {\n    hasSelectedOptions: boolean;\n};\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories for TimePicker Compat\nDESCRIPTION: Configuration snippet showing how to include TimePicker Compat stories in Storybook's module exports. Specifies the file paths and patterns for both MDX and TypeScript/TSX story files.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-timepicker-compat/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-timepicker-compat/stories/src/**/*.stories.mdx', '../packages/react-components/react-timepicker-compat/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TagPickerButton Properties in TypeScript\nDESCRIPTION: The TagPickerButton type definition delineates properties for a button trigger, differentiated from TagPickerInput by its exclusion of a text input role. As a purely trigger-based interaction point, it manages open/close states of popovers via button space toggling, supporting functionalities specific to dropdown size or appearance attributes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/Spec.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport type TagPickerButtonSlots = {\n  root: Slot<'button'>;\n};\n\n/**\n * PickerButton Props\n */\nexport type TagPickerButtonProps = ComponentProps<TagPickerButtonSlots> &\n  Pick<DropdownProps, 'size' | 'appearance'> & {\n    disabled?: boolean;\n  };\n```\n\n----------------------------------------\n\nTITLE: Updating Focus Indicator Styles in TypeScript\nDESCRIPTION: This example shows how to update focus indicator style functions to support the new token-based approach.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/docs/MIGRATION-NOTES.md#2025-04-20_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n-import { createCustomFocusIndicatorStyle, createFocusOutlineStyle, makeStyles } from '@fluentui/react-components';\n+import { createCustomFocusIndicatorStyle, createFocusOutlineStyle, makeStyles, tokens } from '@fluentui/react-components';\n\nconst useStyles = makeStyles({\n-  focusOutline1: createFocusOutlineStyle(theme, { selector: 'focus-within', style: { outlineOffset: '8px' } }),\n+  focusOutline1: createFocusOutlineStyle({ selector: 'focus-within', style: { outlineOffset: '8px' } }),\n\n-  focusOutline2: createFocusOutlineStyle(theme => ({ backgroundColor: theme.colorNeutralBackground1 })),\n+  focusOutline2: createFocusOutlineStyle({ backgroundColor: tokens.colorNeutralBackground1 }),\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom JSX Runtime with React 16 (Classic Runtime)\nDESCRIPTION: Example of using the Fluent UI React JSX runtime with React 16 to render a component with slots. This approach uses the classic JSX runtime with a custom createElement factory import to support slot creation and demonstrates how to use assertSlots.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-jsx-runtime/README.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n/** @jsx createElement */\n\n// in order to apply our custom `createElement` factory to jsx transforms, to support slot creation, we need to import it physically\nimport { createElement } from '@fluentui/react-jsx-runtime';\n\nimport { assertSlots } from '@fluentui/react-utilities';\n\nconst renderButton_unstable = (state: ButtonState) => {\n  const { iconOnly, iconPosition } = state;\n\n  assertSlots<ButtonSlots>(state);\n\n  return (\n    <state.root>\n      {iconPosition !== 'after' && state.icon && <state.icon />}\n      {!iconOnly && state.root.children}\n      {iconPosition === 'after' && state.icon && <state.icon />}\n    </state.root>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: getSlots Method\nDESCRIPTION: This function iterates through a list of provided `slots` and returns an object containing both the slots themselves and their associated props. It extracts the slot and props using the `getSlot` function within a loop.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/root-as-slot.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getSlots<R extends ObjectShorthandPropsRecord>(\n  state: ComponentState<R>,\n  slotNames: (keyof R)[] = [],\n): {\n  slots: Slots<R>;\n  slotProps: SlotProps<R>;\n} {\n  const slots = {} as Slots<R>;\n  const slotProps = {} as SlotProps<R>;\n\n  for (const slotName of slotNames) {\n    const [slot, props] = getSlot(state, slotName);\n    slots[slotName] = slot;\n    slotProps[slotName] = props;\n  }\n  return { slots, slotProps: slotProps };\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Option Group Components - JavaScript\nDESCRIPTION: This snippet exports components related to option groups, allowing developers to create grouped selectable options in UI forms. It includes necessary props and state management components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/etc/react-components.api.md#2025-04-20_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nexport { Option_2 as Option }\n\nexport { optionClassNames }\n\nexport { OptionGroup }\n\nexport { optionGroupClassNames }\n\nexport { OptionGroupProps }\n\nexport { OptionGroupSlots }\n\nexport { OptionGroupState }\n\nexport { OptionOnSelectData }\n\nexport { OptionProps }\n\nexport { OptionSlots }\n\nexport { OptionState }\n```\n\n----------------------------------------\n\nTITLE: Exporting TreeItem Hooks in TypeScript\nDESCRIPTION: Exports hooks for tree item state management, context access, and context values.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tree/library/etc/react-tree.api.md#2025-04-20_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function useTreeItem_unstable(props: TreeItemProps, ref: React_2.Ref<HTMLDivElement>): TreeItemState;\n\nexport const useTreeItemContext_unstable: <T>(selector: ContextSelector<TreeItemContextValue, T>) => T;\n\nexport function useTreeItemContextValues_unstable(state: TreeItemState): TreeItemContextValues;\n```\n\n----------------------------------------\n\nTITLE: TagPicker Hook\nDESCRIPTION: Defines the hook for using the TagPicker component. It takes TagPickerProps as input and returns TagPickerState.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const useTagPicker_unstable: (props: TagPickerProps) => TagPickerState;\"\n```\n\n----------------------------------------\n\nTITLE: Defining ArgTypes for Storybook Stories\nDESCRIPTION: This snippet sets up argTypes for a Storybook story using TypeScript to define control properties such as defaultValue and control type. The purpose is to manually configure and customize controls when automatic generation from TS metadata is inadequate. It also demonstrates hiding controls if they don't make sense for the story. Dependencies include Storybook, TypeScript, and Fluent UI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/authoring-stories.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nAccordionExample.argTypes = {\n  inline: {\n    defaultValue: false,\n    control: 'boolean',\n  },\n  navigable: {\n    defaultValue: false,\n    control: 'boolean',\n  },\n  circular: {\n    defaultValue: false,\n    control: 'boolean',\n  },\n  multiple: {\n    defaultValue: false,\n    control: 'boolean',\n  },\n  // ... other definitions of controls\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst StoryName = (props: {defaultOpen?:boolean}) => { /* ... */ }\n// HIDE actionable Control\nStoryName.argTypes = {\n  defaultOpen: {\n    control: false,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining DocumentCard Preview Style Interfaces\nDESCRIPTION: TypeScript interface definitions for DocumentCardPreview style props and styles. These interfaces enable styling customization of the DocumentCardPreview component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_101\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IDocumentCardPreviewStyleProps {\n    className?: string;\n    isFileList?: boolean;\n    theme: ITheme;\n}\n\n// @public (undocumented)\nexport interface IDocumentCardPreviewStyles {\n    // (undocumented)\n    fileList: IStyle;\n    // (undocumented)\n    fileListIcon: IStyle;\n    // (undocumented)\n    fileListLink: IStyle;\n    // (undocumented)\n    fileListOverflowText: IStyle;\n    // (undocumented)\n    icon: IStyle;\n    // (undocumented)\n    previewIcon: IStyle;\n    // (undocumented)\n    root: IStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: FieldContextValues Definition\nDESCRIPTION: This snippet defines the FieldContextValues type. It groups the FieldContextValue under the \"field\" key for use within the component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-field/library/etc/react-field.api.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport type FieldContextValues = {\\n    field: FieldContextValue;\\n};\"\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Property Interfaces in TypeScript\nDESCRIPTION: This snippet defines TypeScript interfaces for various CSS properties, including WebKit-specific properties and standard CSS properties. It provides type safety for CSS values in a TypeScript environment.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/merge-styles/etc/merge-styles.api.md#2025-04-20_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nWebkitFontSmoothing?: 'none' | 'antialiased' | 'grayscale' | 'subpixel-antialiased' | string;\nWebkitOverflowScrolling?: 'auto' | 'touch' | string;\nWebkitTapHighlightColor?: string;\nWebkitTextSizeAdjust?: 'none' | 'auto' | ICSSPercentageRule | ICSSRule | string;\nwhiteSpace?: ICSSRule | string;\nwidows?: ICSSRule | number | string;\nwidth?: ICSSRule | ICSSPixelUnitRule;\nwordBreak?: ICSSRule | string;\nwordSpacing?: ICSSRule | string;\nwordWrap?: ICSSRule | string;\nwrapFlow?: ICSSRule | string;\nwrapMargin?: ICSSRule | string;\nwritingMode?: ICSSRule | string;\nzIndex?: ICSSRule | 'auto' | number | string;\nzoom?: ICSSRule | 'auto' | number | ICSSPercentageRule;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating @alpha Access Modifier in TypeScript\nDESCRIPTION: Illustrates the use of @alpha modifier for APIs in early development stages, which are only exposed through the /unstable API surface.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/shared/build-system/package-public-api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @filename package-a/src/unstable/index.ts\n\n/**\n *\n * @alpha\n */\nexport function doSomething(): void {}\n\nexport function hello(): void {}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// @filename package-a/dist/unstable.d.ts\nexport function doSomething(): void;\nexport declare function hello(): void;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// @filename package-a/src/index.ts\n\n// 🚨🚨🚨 NOTE THAT THIS IS PROBABLY A MISTAKE BUT TOOLING WILL COVER YOU\n/**\n *\n * @alpha\n */\nexport function doSomething(): void {}\n/**\n *\n * @public\n */\nexport function hello(): void {}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// @filename package-a/dist/index.d.ts\nexport declare function hello(): void;\n```\n\n----------------------------------------\n\nTITLE: Implementing TreeItem Class in TypeScript\nDESCRIPTION: This snippet defines the TreeItem class, which extends FASTElement. It includes properties for appearance, expansion, selection, and methods for handling focus and toggling states. The class is designed for use in tree-like structures.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_85\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class TreeItem extends FASTElement {\n    appearance: 'subtle' | 'subtle-alpha' | 'transparent';\n    // @internal\n    get calculatedClassName(): string;\n    // (undocumented)\n    childTreeItems: TreeItem[];\n    disabled: boolean;\n    expanded: boolean;\n    // (undocumented)\n    protected expandedChanged(): void;\n    // @internal\n    handleBlur: (e: FocusEvent) => void;\n    // @internal\n    handleFocus: (e: FocusEvent) => void;\n    // @internal\n    get isNestedItem(): boolean;\n    // @internal\n    get isRootItem(): any;\n    selected: boolean;\n    // (undocumented)\n    protected selectedChanged(): void;\n    size: 'medium' | 'small';\n    toggleExpansion(): void;\n    toggleSelection(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Accordion Styles and Templates\nDESCRIPTION: Defines the styles and templates for both Accordion and AccordionItem components. These control the visual appearance and structure of the components in the UI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"styles\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport const accordionItemStyles: ElementStyles;\n\n// @public\nexport const accordionItemTemplate: ElementViewTemplate<AccordionItem>;\n\n// Warning: (ae-missing-release-tag) \"styles\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport const accordionStyles: ElementStyles;\n\n// Warning: (ae-missing-release-tag) \"template\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport const accordionTemplate: ElementViewTemplate<Accordion>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Alert Dialog in FluentUI with React\nDESCRIPTION: This snippet demonstrates how to create an alert dialog using FluentUI components in React. It includes a trigger button, dialog surface, title, body, and action buttons.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/docs/Spec.md#2025-04-20_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nconst dialog = <Dialog type=\"alert\">\n  <DialogTrigger>\n    <Button>Open Dialog</Button>\n  <DialogTrigger>\n  <DialogSurface>\n    <DialogTitle>\n        This is an alert\n    </DialogTitle>\n    <DialogBody>\n      This is going to be inside the dialog\n    </DialogBody>\n    <DialogActions>\n      <DialogTrigger type=\"close\">\n        <Button>Close</Button>\n      </DialogTrigger>\n      <Button>Action</Button>\n    </DialogActions>\n  </DialogSurface>\n</Dialog>\n```\n\n----------------------------------------\n\nTITLE: Dialog Context Value Definition\nDESCRIPTION: Defines the structure of the context value provided by the DialogProvider. It contains information about the dialog's state, behavior, and references, including open state, inert trap focus, title ID, nested dialog status, dialog ref, modal type, and a requestOpenChange function. It also includes partial return type of useModalAttributes from '@fluentui/react-tabster'.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/etc/react-dialog.api.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport type DialogContextValue = {\n    open: boolean;\n    inertTrapFocus: boolean;\n    dialogTitleId?: string;\n    isNestedDialog: boolean;\n    dialogRef: React_2.Ref<DialogSurfaceElement>;\n    modalType: DialogModalType;\n    requestOpenChange: (data: DialogOpenChangeData) => void;\n} & Partial<ReturnType<typeof useModalAttributes>>;\"\n```\n\n----------------------------------------\n\nTITLE: Defining Tree Open Change Event Type in TypeScript\nDESCRIPTION: Defines the event type for tree open/close events, extracting the event type from the TreeOpenChangeData type.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tree/library/etc/react-tree.api.md#2025-04-20_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type TreeOpenChangeEvent = TreeOpenChangeData['event'];\n```\n\n----------------------------------------\n\nTITLE: Implementing Tablist Component Class in TypeScript\nDESCRIPTION: TypeScript class definition for the Tablist component that extends BaseTablist with methods for handling active tab changes, appearance, and size.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_62\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport class Tablist extends BaseTablist {\n    activeidChanged(oldValue: string, newValue: string): void;\n    appearance?: TablistAppearance;\n    // @internal (undocumented)\n    protected appearanceChanged(prev: TablistAppearance, next: TablistAppearance): void;\n    size?: TablistSize;\n    // @internal (undocumented)\n    protected sizeChanged(prev: TablistSize, next: TablistSize): void;\n    tabsChanged(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Select Component Slot Types in TypeScript\nDESCRIPTION: TypeScript type definition for the Select component slots, including root, select, and icon elements with their respective intrinsic props.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-select/library/docs/Spec.md#2025-04-20_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nexport type SelectSlots = {\n  /** Root of the component, renders as a `<span>`. */\n  root: IntrinsicSlotProps<'span'>;\n  /** The actual `<select>` element */\n  select: IntrinsicSlotProps<'select'>;\n  /** the icon, typically a down arrow */\n  icon: IntrinsicSlotProps<'span'>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining OverflowEventPayload Interface in TypeScript\nDESCRIPTION: This snippet specifies the OverflowEventPayload interface, which is used to convey data about both visible and invisible items as well as the visibility state of item groups. This is essential for managing overflow behavior.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/priority-overflow/etc/priority-overflow.api.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface OverflowEventPayload {\n    // (undocumented)\n    groupVisibility: Record<string, OverflowGroupState>;\n    // (undocumented)\n    invisibleItems: OverflowItemEntry[];\n    // (undocumented)\n    visibleItems: OverflowItemEntry[];\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting TagPicker Control Hook in TypeScript\nDESCRIPTION: Exports a hook for managing the TagPicker control component state. Takes props and a ref to the div element.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_56\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const useTagPickerControl_unstable: (props: TagPickerControlProps, ref: React_2.Ref<HTMLDivElement>) => TagPickerControlState;\n```\n\n----------------------------------------\n\nTITLE: Handling Bounds and Overflow in Fluent UI v0 Popup\nDESCRIPTION: Illustrates the properties available for managing bounds and overflow in the v0 Popup component, including `flipBoundary` and `overflowBoundary`, and how to render the popup in a specific DOM node.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-popover/library/docs/Spec.md#2025-04-20_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n<Popup\n...\n  flipBoundary={htmlElement}\n  overflowBoundary={htmlElement}\n  mountNode={htmlElement}\n/>\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Button with Slots in TSX\nDESCRIPTION: Renders the Button component using its state, ensuring that the expected slots are rendered correctly. It uses JSX to render the button and conditionally checks the icon position.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Slots/Slots.stories.mdx#2025-04-20_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n/** @jsxRuntime automatic */\n/** @jsxImportSource @fluentui/react-jsx-runtime */\n\nimport { assertSlots } from '@fluentui/react-utilities';\n\nconst renderButton_unstable = (state: ButtonState) => {\n  const { iconOnly, iconPosition } = state;\n\n  assertSlots<ButtonSlots>(state);\n\n  return (\n    <state.root>\n      {iconPosition !== 'after' && state.icon && <state.icon />}\n      {!iconOnly && state.root.children}\n      {iconPosition === 'after' && state.icon && <state.icon />}\n    </state.root>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Text Component Configuration in TypeScript\nDESCRIPTION: Exports the element definition, font options, sizes, styles, template, and weight options for the Text component. Includes constants and type definitions for text styling properties.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_77\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport const TextDefinition: FASTElementDefinition<typeof Text_2>;\n\n// @public\nexport const TextFont: {\n    readonly base: \"base\";\n    readonly numeric: \"numeric\";\n    readonly monospace: \"monospace\";\n};\n\n// @public\nexport type TextFont = ValuesOf<typeof TextFont>;\n\n// @public\nexport const TextSize: {\n    readonly _100: \"100\";\n    readonly _200: \"200\";\n    readonly _300: \"300\";\n    readonly _400: \"400\";\n    readonly _500: \"500\";\n    readonly _600: \"600\";\n    readonly _700: \"700\";\n    readonly _800: \"800\";\n    readonly _900: \"900\";\n    readonly _1000: \"1000\";\n};\n\n// @public\nexport type TextSize = ValuesOf<typeof TextSize>;\n\n// @public\nexport const TextStyles: ElementStyles;\n\n// Warning: (ae-internal-missing-underscore) The name \"TextTemplate\" should be prefixed with an underscore because the declaration is marked as @internal\n//\n// @internal (undocumented)\nexport const TextTemplate: ElementViewTemplate<Text_2>;\n\n// @public\nexport const TextWeight: {\n    readonly medium: \"medium\";\n    readonly regular: \"regular\";\n    readonly semibold: \"semibold\";\n    readonly bold: \"bold\";\n};\n\n// @public\nexport type TextWeight = ValuesOf<typeof TextWeight>;\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Suggestions Component Props Interface in TypeScript\nDESCRIPTION: Detailed interface for the Suggestions component props, including rendering options, callbacks, loading states, and accessibility properties for various suggestion states.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_189\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface ISuggestionsProps<T> extends IReactProps<any> {\n    className?: string;\n    componentRef?: IRefObject<ISuggestions<T>>;\n    createGenericItem?: () => void;\n    forceResolveText?: string;\n    isExtendedLoading?: boolean;\n    isLoading?: boolean;\n    isMostRecentlyUsedVisible?: boolean;\n    isResultsFooterVisible?: boolean;\n    isSearching?: boolean;\n    loadingText?: string;\n    moreSuggestionsAvailable?: boolean;\n    mostRecentlyUsedHeaderText?: string;\n    noResultsFoundText?: string;\n    onGetMoreResults?: () => void;\n    onRenderNoResultFound?: IRenderFunction<void>;\n    onRenderSuggestion: (props: T, suggestionItemProps: ISuggestionItemProps<T>) => JSX.Element;\n    onSuggestionClick: (ev?: React_2.MouseEvent<HTMLElement>, item?: any, index?: number) => void;\n    onSuggestionRemove?: (ev?: React_2.MouseEvent<HTMLElement>, item?: T | IPersonaProps, index?: number) => void;\n    refocusSuggestions?: (keyCode: KeyCodes) => void;\n    removeButtonIconProps?: IIconProps;\n    removeSuggestionAriaLabel?: string;\n    resultsFooter?: (props: ISuggestionsProps<T>) => JSX.Element;\n    resultsFooterFull?: (props: ISuggestionsProps<T>) => JSX.Element;\n    resultsMaximumNumber?: number;\n    // @deprecated\n    searchErrorText?: string;\n    searchForMoreIcon?: IIconProps;\n    searchForMoreText?: string;\n    searchingText?: string;\n    showForceResolve?: () => boolean;\n    showRemoveButtons?: boolean;\n    styles?: IStyleFunctionOrObject<any, any>;\n    suggestions: ISuggestionModel<T>[];\n    suggestionsAvailableAlertText?: string;\n    suggestionsClassName?: string;\n    suggestionsContainerAriaLabel?: string;\n    suggestionsHeaderText?: string;\n    suggestionsItemClassName?: string;\n    suggestionsListId?: string;\n    theme?: ITheme;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing refs to inactive elements in react-focus\nDESCRIPTION: This change removes references to `_activeElement` and `_defaultFocusElement` within the FocusZone component if they are no longer contained in `_root`. This helps prevent memory leaks and ensures that the component is only tracking active elements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-focus/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: none\nCODE:\n```\nFocusZone: Remove refs to _activeElement and _defaultFocusElement if they are no longer contained in _root ([PR #23445](https://github.com/microsoft/fluentui/pull/23445) by jspurlin@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Icon by Name\nDESCRIPTION: Function to retrieve an icon record by its name, returning undefined if the icon is not found\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-icons-compat/library/etc/react-icons-compat.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getIcon(name?: string): IconRecord | undefined;\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for MessageBar in FluentUI v9\nDESCRIPTION: The HTML structure generated for the MessageBar component in FluentUI v9, showing the nested elements and their roles, classes, and attributes for accessibility and styling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-message-bar/library/docs/Spec.md#2025-04-20_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div role=\"group\" aria-labelledby=\"fui-5\" class=\"fui-MessageBar\">\n  <div class=\"fui-MessageBar__icon\"></div>\n  <div class=\"fui-MessageBarBody\">\n    <span id=\"fui-5\" class=\"fui-MessageBarTitle\">Descriptive title</span>Message providing information to the user with\n    actionable insights.\n    <a>Link</a>\n  </div>\n  <div class=\"fui-MessageBarActions\">\n    <button>Action</button>\n    <button>Action</button>\n  </div>\n  <div class=\"fui-MessageBarActions__containerAction\" aria-label=\"Close\">X</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Status Color Variables in TypeScript\nDESCRIPTION: Exports CSS variable references for status-specific colors (danger, success, warning) with background, border and foreground variants for different states like hover and pressed.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_26\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const colorStatusDangerBackground1 = \"var(--colorStatusDangerBackground1)\";\nexport const colorStatusDangerBackground2 = \"var(--colorStatusDangerBackground2)\";\nexport const colorStatusDangerBackground3 = \"var(--colorStatusDangerBackground3)\";\n// ... additional status color definitions\n```\n\n----------------------------------------\n\nTITLE: Exporting and Importing FluentUI Components\nDESCRIPTION: This code snippet involves a series of export statements and imports for multiple components and utilities from the FluentUI React library. It provides access to the core components such as alerts, drawers, and virtualizers, which are principal UI building blocks, and advanced utilities for additional functionality like tree management and useful hooks. This snippet highlights the modular architecture that enables easy inclusion of selective components from the FluentUI suite.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/etc/react-components.unstable.api.md#2025-04-20_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useTreeStyles_unstable } from '@fluentui/react-tree';\nimport { useVirtualizer_unstable } from '@fluentui/react-virtualizer';\nimport { useVirtualizerContext_unstable } from '@fluentui/react-virtualizer';\nimport { useVirtualizerScrollView_unstable } from '@fluentui/react-virtualizer';\nimport { useVirtualizerScrollViewDynamic_unstable } from '@fluentui/react-virtualizer';\nimport { useVirtualizerScrollViewDynamicStyles_unstable } from '@fluentui/react-virtualizer';\nimport { useVirtualizerScrollViewStyles_unstable } from '@fluentui/react-virtualizer';\nimport { useVirtualizerStyles_unstable } from '@fluentui/react-virtualizer';\nimport { Virtualizer } from '@fluentui/react-virtualizer';\nimport { VirtualizerChildRenderFunction } from '@fluentui/react-virtualizer';\nimport { virtualizerClassNames } from '@fluentui/react-virtualizer';\nimport { VirtualizerContextProps } from '@fluentui/react-virtualizer';\nimport { VirtualizerContextProvider } from '@fluentui/react-virtualizer';\nimport { VirtualizerMeasureDynamicProps } from '@fluentui/react-virtualizer';\nimport { VirtualizerMeasureProps } from '@fluentui/react-virtualizer';\nimport { VirtualizerProps } from '@fluentui/react-virtualizer';\nimport { VirtualizerScrollView } from '@fluentui/react-virtualizer';\nimport { virtualizerScrollViewClassNames } from '@fluentui/react-virtualizer';\nimport { VirtualizerScrollViewDynamic } from '@fluentui/react-virtualizer';\nimport { virtualizerScrollViewDynamicClassNames } from '@fluentui/react-virtualizer';\nimport { VirtualizerScrollViewDynamicProps } from '@fluentui/react-virtualizer';\nimport { VirtualizerScrollViewDynamicSlots } from '@fluentui/react-virtualizer';\nimport { VirtualizerScrollViewDynamicState } from '@fluentui/react-virtualizer';\nimport { VirtualizerScrollViewProps } from '@fluentui/react-virtualizer';\nimport { VirtualizerScrollViewSlots } from '@fluentui/react-virtualizer';\nimport { VirtualizerScrollViewState } from '@fluentui/react-virtualizer';\nimport { VirtualizerSlots } from '@fluentui/react-virtualizer';\nimport { VirtualizerState } from '@fluentui/react-virtualizer';\n\nexport { Alert }\n\nexport { alertClassNames }\n\nexport { AlertProps }\n\nexport { AlertSlots }\n\nexport { AlertState }\n\nexport { Drawer }\n\nexport { DrawerBody }\n\nexport { drawerBodyClassNames }\n\nexport { DrawerBodySlots }\n\nexport { DrawerBodyState }\n\nexport { DrawerFooter }\n\nexport { drawerFooterClassNames }\n\nexport { DrawerFooterSlots }\n\nexport { DrawerFooterState }\n\nexport { DrawerHeader }\n\nexport { drawerHeaderClassNames }\n\nexport { DrawerHeaderNavigation }\n\nexport { drawerHeaderNavigationClassNames }\n\nexport { DrawerHeaderNavigationProps }\n\nexport { DrawerHeaderNavigationSlots }\n\nexport { DrawerHeaderNavigationState }\n\nexport { DrawerHeaderSlots }\n\nexport { DrawerHeaderState }\n\nexport { DrawerHeaderTitle }\n\nexport { drawerHeaderTitleClassNames }\n\nexport { DrawerHeaderTitleSlots }\n\nexport { DrawerHeaderTitleState }\n\nexport { DrawerProps }\n\nexport { DrawerSlots }\n\nexport { DrawerState }\n\nexport { flattenTree_unstable }\n\nexport { FlatTree }\n\nexport { flatTreeClassNames }\n\nexport { FlatTreeProps }\n\nexport { FlatTreeSlots }\n\nexport { FlatTreeState }\n\nexport { HeadlessFlatTree }\n\nexport { HeadlessFlatTreeItem }\n\nexport { HeadlessFlatTreeItemProps }\n\nexport { HeadlessFlatTreeOptions }\n\nexport { InfoButton }\n\nexport { infoButtonClassNames }\n\nexport { InfoButtonProps }\n\nexport { InfoButtonSlots }\n\nexport { InfoButtonState }\n\nexport { InfoLabel }\n\nexport { infoLabelClassNames }\n\nexport { InfoLabelProps }\n\nexport { InfoLabelSlots }\n\nexport { InfoLabelState }\n\nexport { InlineDrawer as DrawerInline }\nexport { InlineDrawer }\n\nexport { inlineDrawerClassNames as DrawerInlineClassNames }\nexport { inlineDrawerClassNames }\n\nexport { InlineDrawerProps as DrawerInlineProps }\nexport { InlineDrawerProps }\n\nexport { InlineDrawerSlots as DrawerInlineSlots }\nexport { InlineDrawerSlots }\n\nexport { InlineDrawerState as DrawerInlineState }\nexport { InlineDrawerState }\n\nexport { OverlayDrawer as DrawerOverlay }\nexport { OverlayDrawer }\n\nexport { overlayDrawerClassNames as DrawerOverlayClassNames }\nexport { overlayDrawerClassNames }\n\nexport { OverlayDrawerProps as DrawerOverlayProps }\nexport { OverlayDrawerProps }\n\nexport { OverlayDrawerSlots as DrawerOverlaySlots }\nexport { OverlayDrawerSlots }\n\nexport { OverlayDrawerState as DrawerOverlayState }\nexport { OverlayDrawerState }\n\nexport { renderAlert_unstable }\n\nexport { renderDrawer_unstable }\n\nexport { renderDrawerBody_unstable }\n\nexport { renderDrawerFooter_unstable }\n\nexport { renderDrawerHeader_unstable }\n\nexport { renderDrawerHeaderNavigation_unstable }\n\nexport { renderDrawerHeaderTitle_unstable }\n\nexport { renderFlatTree_unstable }\n\nexport { renderInfoButton_unstable }\n\nexport { renderInfoLabel_unstable }\n\nexport { renderInlineDrawer_unstable as renderDrawerInline_unstable }\nexport { renderInlineDrawer_unstable }\n\nexport { renderOverlayDrawer_unstable as renderDrawerOverlay_unstable }\nexport { renderOverlayDrawer_unstable }\n\nexport { renderTree_unstable }\n\nexport { renderTreeItem_unstable }\n\nexport { renderTreeItemLayout_unstable }\n\nexport { renderTreeItemPersonaLayout_unstable }\n\nexport { renderVirtualizer_unstable }\n\nexport { renderVirtualizerScrollView_unstable }\n\nexport { renderVirtualizerScrollViewDynamic_unstable }\n\nexport { ResizeCallbackWithRef }\n\nexport { ScrollToInterface }\n\nexport { scrollToItemDynamic }\n\nexport { ScrollToItemDynamicParams }\n\nexport { scrollToItemStatic }\n\nexport { ScrollToItemStaticParams }\n\nexport { Tree }\n\nexport { treeClassNames }\n\nexport { TreeContextValue }\n\nexport { TreeItem }\n\nexport { treeItemClassNames }\n\nexport { TreeItemLayout }\n\nexport { treeItemLayoutClassNames }\n\nexport { TreeItemLayoutProps }\n\nexport { TreeItemLayoutSlots }\n\nexport { TreeItemLayoutState }\n\nexport { treeItemLevelToken }\n\nexport { TreeItemPersonaLayout }\n\nexport { treeItemPersonaLayoutClassNames }\n\nexport { TreeItemPersonaLayoutProps }\n\nexport { TreeItemPersonaLayoutSlots }\n\nexport { TreeItemPersonaLayoutState }\n\nexport { TreeItemProps }\n\nexport { TreeItemProvider }\n\nexport { TreeItemSlots }\n\nexport { TreeItemState }\n\nexport { TreeNavigationData_unstable }\n\nexport { TreeNavigationEvent_unstable }\n\nexport { TreeOpenChangeData }\n\nexport { TreeOpenChangeEvent }\n\nexport { TreeProps }\n\nexport { TreeProvider }\n\nexport { TreeSlots }\n\nexport { TreeState }\n\nexport { useAlert_unstable }\n\nexport { useAlertStyles_unstable }\n\nexport { useDrawer_unstable }\n\nexport { useDrawerBody_unstable }\n\nexport { useDrawerBodyStyles_unstable }\n\nexport { useDrawerFooter_unstable }\n\nexport { useDrawerFooterStyles_unstable }\n\nexport { useDrawerHeader_unstable }\n\nexport { useDrawerHeaderNavigation_unstable }\n\nexport { useDrawerHeaderNavigationStyles_unstable }\n\nexport { useDrawerHeaderStyles_unstable }\n\nexport { useDrawerHeaderTitle_unstable }\n\nexport { useDrawerHeaderTitleStyles_unstable }\n\nexport { useDynamicVirtualizerMeasure }\n\nexport { useFlatTree_unstable }\n\nexport { useFlatTreeContextValues_unstable }\n\nexport { useFlatTreeStyles_unstable }\n\nexport { useHeadlessFlatTree_unstable }\n\nexport { useInfoButton_unstable }\n\nexport { useInfoButtonStyles_unstable }\n\nexport { useInfoLabel_unstable }\n\nexport { useInfoLabelStyles_unstable }\n\nexport { useInlineDrawer_unstable as useDrawerInline_unstable }\nexport { useInlineDrawer_unstable }\n\nexport { useInlineDrawerStyles_unstable as useDrawerInlineStyles_unstable }\nexport { useInlineDrawerStyles_unstable }\n\nexport { useIntersectionObserver }\n\nexport { useOverlayDrawer_unstable as useDrawerOverlay_unstable }\nexport { useOverlayDrawer_unstable }\n\nexport { useOverlayDrawerStyles_unstable as useDrawerOverlayStyles_unstable }\nexport { useOverlayDrawerStyles_unstable }\n\nexport { useResizeObserverRef_unstable }\n\nexport { useStaticVirtualizerMeasure }\n\nexport { useTree_unstable }\n\nexport { useTreeContext_unstable }\n\nexport { useTreeContextValues_unstable }\n\nexport { useTreeItem_unstable }\n\nexport { useTreeItemContext_unstable }\n\nexport { useTreeItemContextValues_unstable }\n\nexport { useTreeItemLayout_unstable }\n\nexport { useTreeItemLayoutStyles_unstable }\n\nexport { useTreeItemPersonaLayout_unstable }\n\nexport { useTreeItemPersonaLayoutStyles_unstable }\n\nexport { useTreeItemStyles_unstable }\n\nexport { useTreeStyles_unstable }\n\nexport { useVirtualizer_unstable }\n\nexport { useVirtualizerContext_unstable }\n\nexport { useVirtualizerScrollView_unstable }\n\nexport { useVirtualizerScrollViewDynamic_unstable }\n\nexport { useVirtualizerScrollViewDynamicStyles_unstable }\n\nexport { useVirtualizerScrollViewStyles_unstable }\n\nexport { useVirtualizerStyles_unstable }\n\nexport { Virtualizer }\n\nexport { VirtualizerChildRenderFunction }\n\nexport { virtualizerClassNames }\n\nexport { VirtualizerContextProps }\n\nexport { VirtualizerContextProvider }\n\nexport { VirtualizerMeasureDynamicProps }\n\nexport { VirtualizerMeasureProps }\n\nexport { VirtualizerProps }\n\nexport { VirtualizerScrollView }\n\nexport { virtualizerScrollViewClassNames }\n\nexport { VirtualizerScrollViewDynamic }\n\nexport { virtualizerScrollViewDynamicClassNames }\n\nexport { VirtualizerScrollViewDynamicProps }\n\nexport { VirtualizerScrollViewDynamicSlots }\n\nexport { VirtualizerScrollViewDynamicState }\n\nexport { VirtualizerScrollViewProps }\n\nexport { VirtualizerScrollViewSlots }\n\nexport { VirtualizerScrollViewState }\n\nexport { VirtualizerSlots }\n\nexport { VirtualizerState }\n\n// (No @packageDocumentation comment for this package)\n```\n\n----------------------------------------\n\nTITLE: React 18 ID Prefix Configuration\nDESCRIPTION: Demonstrates how to configure identifier prefixing in React 18 using createRoot API to prevent ID collisions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/AdvancedConfiguration.stories.mdx#2025-04-20_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { createRoot } from 'react-dom';\n\nconst root = createRoot(document.getElementById('root'), {\n  identifierPrefix: 'APP1-',\n});\n\nroot.render(<App />);\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme Creation Function in TypeScript\nDESCRIPTION: Creates a theme configuration with optional partial theme overrides and dependency comment generation\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/theme/etc/theme.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport function createTheme(theme?: PartialTheme, depComments?: boolean): Theme;\n```\n\n----------------------------------------\n\nTITLE: X-Axis Label Rendering Tests\nDESCRIPTION: Test cases for x-axis label handling, including label truncation and rotation functionality\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/docs/TestPlans/VerticalBarChart/ComponentTests.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- Truncate x-axis labels\n- Rotate x-axis labels\n```\n\n----------------------------------------\n\nTITLE: Accessibility Handling in Drawer Components\nDESCRIPTION: Implementation details for managing focus and semantic attributes in FluentUI drawer components, with specific considerations for different drawer types\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-drawer/stories/src/Drawer/DrawerBestPractices.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nuseRestoreFocusTarget()\nuseRestoreFocusSource()\n```\n\n----------------------------------------\n\nTITLE: Using FontSizes in Fluent UI React Components\nDESCRIPTION: Demonstrates how to import and use FontSizes from @fluentui/theme to set font sizes in React components using JavaScript variables.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Styles/TypographyPage/docs/web/TypographyImplementation.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FontSizes } from '@fluentui/theme';\n\n<div style={{ fontSize: FontSizes.size42 }} />;\n```\n\n----------------------------------------\n\nTITLE: Importing ItemLayout in V9 Style\nDESCRIPTION: Example of how to import and use the ItemLayout component in the V9 migration package of FluentUI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/ItemLayout.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ItemLayout } from '@fluentui/react-migration-v0-v9';\nconst Component = () => <ItemLayout />;\n```\n\n----------------------------------------\n\nTITLE: Implementing useThemeClassName_unstable Hook in TypeScript\nDESCRIPTION: TypeScript function implementation for the useThemeClassName_unstable hook that returns the theme class name context value.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-shared-contexts/library/etc/react-shared-contexts.api.md#2025-04-20_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport function useThemeClassName_unstable(): ThemeClassNameContextValue_unstable;\n```\n\n----------------------------------------\n\nTITLE: SSRProvider Usage with FluentProvider\nDESCRIPTION: This snippet shows the proposed usage of the `SSRProvider` component within a `FluentProvider`. The `SSRProvider` component wraps the application to make React children aware they are being used in an SSR context. This allows for proper handling of autogenerated IDs and portal rendering during server-side rendering.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/ssr-context.md#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<FluentProvider>\n  <SSRProvider>\n    <App />\n  </SSRProvider>\n</FluentProvider\n```\n\n----------------------------------------\n\nTITLE: Defining Empty Menu Slots in TypeScript\nDESCRIPTION: Defines an empty object type for MenuSlots, allowing future extension or customization of menu components without restrictions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/library/etc/react-menu.api.md#2025-04-20_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type MenuSlots = {};\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Storybook Stories\nDESCRIPTION: TypeScript configuration for Storybook stories. It extends the main config, enables JavaScript checking, and includes source files while excluding test files.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/shared/build-system/02-solution-style-ts-configs.md#2025-04-20_snippet_3\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"\",\n    \"checkJs\": true\n  },\n  \"exclude\": [\"../**/*.spec.ts\", \"../**/*.spec.js\", \"../**/*.spec.tsx\", \"../**/*.spec.jsx\"],\n  \"include\": [\n    \"../src/**/*\",\n    // this is only to type check SB config files\n    \"./*.js\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing List with Multiple Actions (No Selection) in HTML\nDESCRIPTION: This code snippet demonstrates the HTML structure for a list with multiple actions but no selection. It uses the List and ListItem roles for better accessibility support.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-list/library/docs/ListA11y.md#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<ul role=\"list\">\n  <li role=\"listitem\">\n    <span>Item content</span>\n    <button>Action 1</button>\n    <button>Action 2</button>\n  </li>\n  <!-- More list items -->\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Theme Override using makeStyles\nDESCRIPTION: This snippet demonstrates how to override styles for a component using makeStyles and ax (presumably a class name utility). It shows how to create a custom component with specific style overrides.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/theme-tokens.md#2025-04-20_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst useRadiusOverrides = makeStyles([[null, { borderRadius: '6px' }]]);\n\nconst CustomButton = ({ className, ...rest }) => {\n  const overrides = useRadiusOverrides({});\n  const classes = ax(overrides, className);\n\n  return <Button className={classes} {...rest} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Define PositioningImperativeRef type\nDESCRIPTION: Defines a type called `PositioningImperativeRef` which is an object containing two functions: `updatePosition` and `setTarget`. `updatePosition` likely updates the position of the positioned element, while `setTarget` sets the target element.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-positioning/etc/react-positioning.api.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type PositioningImperativeRef = {\n    updatePosition: () => void;\n    setTarget: (target: TargetElement | null) => void;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining IBaseExtendedPickerProps Interface in TypeScript\nDESCRIPTION: Defines the props interface for the BaseExtendedPicker component, including options for rendering, event handling, and customization.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_46\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface IBaseExtendedPickerProps<T> {\n    className?: string;\n    componentRef?: IRefObject<IBaseExtendedPicker<T>>;\n    currentRenderedQueryString?: string;\n    defaultSelectedItems?: T[];\n    disabled?: boolean;\n    floatingPickerProps: IBaseFloatingPickerProps<T>;\n    focusZoneProps?: IFocusZoneProps;\n    headerComponent?: JSX.Element;\n    inputProps?: IInputProps;\n    itemLimit?: number;\n    onBlur?: React_2.FocusEventHandler<HTMLInputElement | Autofill>;\n    onChange?: (items?: T[]) => void;\n    onFocus?: React_2.FocusEventHandler<HTMLInputElement | Autofill>;\n    onItemAdded?: (addedItem: T) => void;\n    onItemSelected?: (selectedItem?: T) => T | PromiseLike<T>;\n    onItemsRemoved?: (removedItems: T[]) => void;\n    onPaste?: (pastedText: string) => T[];\n    onRenderFloatingPicker: React_2.ComponentType<IBaseFloatingPickerProps<T>>;\n    onRenderSelectedItems: React_2.ComponentType<IBaseSelectedItemsListProps<T>>;\n    selectedItems?: T[];\n    selectedItemsListProps: IBaseSelectedItemsListProps<T>;\n    suggestionItems?: T[];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories for React Spinner\nDESCRIPTION: This snippet configures Storybook to include stories for the react-spinner component by defining the glob patterns for locating story files. It specifies the paths for both MDX and TypeScript/TSX story files as part of the Storybook setup.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-spinner/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-spinner/stories/src/**/*.stories.mdx', '../packages/react-components/react-spinner/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Northstar to Fluent UI (v9) Breadcrumb Property Mapping Table\nDESCRIPTION: Markdown table showing the mapping of properties from Northstar Breadcrumb to Fluent UI (v9) Breadcrumb. It highlights common props and those specific to the Breadcrumb component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-breadcrumb/library/docs/MIGRATION.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Northstar `Breadcrumb` | v9 `Breadcrumb` |\n| ---------------------- | --------------- |\n| `accessibility`        |                 |\n| `as`                   |                 |\n| `className`            |                 |\n| `content`              |                 |\n| `design`               |                 |\n|                        |                 |\n| `size`                 | `size`          |\n| `styles`               |                 |\n| `variables`            |                 |\n```\n\n----------------------------------------\n\nTITLE: Defining Styles for Stack.Item using make-styles\nDESCRIPTION: This snippet shows how to define styles for the Stack.Item component using the make-styles approach in FluentUI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Flex/Flex.StackItem.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nmakeStyles({\n  root: {...}, // Flex container\n  item: {\n    height: 'auto',\n    width: 'auto',\n    flexShrink: 1,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining IFacepilePersona Interface in TypeScript\nDESCRIPTION: Defines the IFacepilePersona interface extending React button attributes with additional properties for facepile persona functionality.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_138\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IFacepilePersona extends React_2.ButtonHTMLAttributes<HTMLButtonElement | HTMLDivElement> {\n    allowPhoneInitials?: boolean;\n    data?: any;\n    imageInitials?: string;\n    imageUrl?: string;\n    initialsColor?: PersonaInitialsColor;\n    keytipProps?: IKeytipProps;\n    onClick?: (ev?: React_2.MouseEvent<HTMLElement>, persona?: IFacepilePersona) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional ARIA Prop Application in useARIAButtonProps\nDESCRIPTION: The snippet shows a logical check within `useARIAButtonProps` to avoid adding ARIA props if a component is already marked as an `ARIAButtonComponent`. This optimization ensures no redundant properties are applied.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/triggers-and-multiple-layers-of-button-handling.md#2025-04-20_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n// if its a marked component, than do nothing, just return original props\nif (isARIAButtonComponent(element)) {\n  return props;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SVG Path Structure for Branch Connections in TreeChart\nDESCRIPTION: Specifies the SVG path structure used to create branch connections between parent and child nodes in the tree diagram. The path is constructed using the x and y coordinates of the child and parent nodes along with rectangle dimensions and gaps.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/src/components/TreeChart/TreeChart.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nM${child.x + rectWidth / 2}, ${child.y - gap} H${parent.x + rectWidth / 2} V${ parent.y + rectHeight + gap / 2}\n```\n\n----------------------------------------\n\nTITLE: Applying Theme-based Styling to Fluent UI Components (TSX)\nDESCRIPTION: This example shows how to use the Fluent UI theme to style components. It demonstrates applying background colors, hover effects, and conditional display based on component state.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Styles/ThemeSlotsPage/docs/web/ThemeSlotsImplementation.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getTheme } from '@fluentui/react';\n\nconst theme = getTheme();\nconst styles = {\n  root: [\n    {\n      background: theme.palette.themePrimary,\n      display: 'none',\n      selectors: {\n        ':hover': {\n          background: theme.palette.themeSecondary,\n        },\n        '&.isExpanded': {\n            display: 'block'\n        },\n        '&:hover .childElement': {\n            color: 'white'\n        }\n      }\n    }\n  ]\n};\n\n// In render()\nreturn <Component styles={styles} ... />;\n```\n\n----------------------------------------\n\nTITLE: Basic Label Implementation - FluentUI v9\nDESCRIPTION: Equivalent example showing basic usage of Label component in FluentUI v9 using children prop instead of content prop.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Label.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { Label } from '@fluentui/react-components';\n\nconst LabelV9BasicExample = () => {\n  return <Label>You have 23 emails</Label>;\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Avatar Component with Conditional Slots in TypeScript\nDESCRIPTION: This TypeScript snippet is part of a strategy to replace 'nullRender' components with conditional rendering within the 'renderAvatar_unstable' function. The change facilitates rendering of only the available slots in the React tree, especially for slots that might be null. It provides the implementation of the 'getSlots' function to handle optional slots appropriately. Dependencies include knowledge of TypeScript, React, and the Fluent UI framework.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/remove-null-render.md#2025-04-20_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const renderAvatar_unstable = (state: AvatarState) => {\n  const { slots, slotProps } = getSlots<AvatarSlots>(state);\n\n  return (\n    <slots.root {...slotProps.root}>\n      <slots.initials {...slotProps.initials} />\n      <slots.icon {...slotProps.icon} />\n      <slots.image {...slotProps.image} />\n      <slots.badge {...slotProps.badge} />\n    </slots.root>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining DocumentCard Style and Title Interfaces\nDESCRIPTION: TypeScript interface definitions for DocumentCard styles and the DocumentCardTitle component. These interfaces control the appearance of the main DocumentCard component and its title component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_104\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IDocumentCardStyleProps {\n    actionable?: boolean;\n    className?: string;\n    compact?: boolean;\n    theme: ITheme;\n}\n\n// @public (undocumented)\nexport interface IDocumentCardStyles {\n    // (undocumented)\n    root: IStyle;\n}\n\n// @public (undocumented)\nexport interface IDocumentCardTitle {\n}\n\n// Warning: (ae-forgotten-export) The symbol \"DocumentCardTitleBase\" needs to be exported by the entry point index.d.ts\n//\n// @public (undocumented)\nexport interface IDocumentCardTitleProps extends React_2.ClassAttributes<DocumentCardTitleBase> {\n    className?: string;\n    componentRef?: IRefObject<IDocumentCardTitle>;\n    shouldTruncate?: boolean;\n    showAsSecondaryTitle?: boolean;\n    styles?: IStyleFunctionOrObject<IDocumentCardTitleStyleProps, IDocumentCardTitleStyles>;\n    theme?: ITheme;\n    title: string;\n}\n\n// @public (undocumented)\nexport interface IDocumentCardTitleStyleProps {\n    className?: string;\n    showAsSecondaryTitle?: boolean;\n    theme: ITheme;\n}\n\n// @public (undocumented)\nexport interface IDocumentCardTitleStyles {\n    // (undocumented)\n    root: IStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: Avatar Configuration Constants and Types\nDESCRIPTION: Defines constants and types for Avatar customization, including active states, appearance options, and a comprehensive set of color values for visual styling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"AvatarActive\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n// Warning: (ae-missing-release-tag) \"AvatarActive\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport const AvatarActive: {\n    readonly active: \"active\";\n    readonly inactive: \"inactive\";\n};\n\n// @public\nexport type AvatarActive = ValuesOf<typeof AvatarActive>;\n\n// Warning: (ae-missing-release-tag) \"AvatarAppearance\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n// Warning: (ae-missing-release-tag) \"AvatarAppearance\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport const AvatarAppearance: {\n    readonly ring: \"ring\";\n    readonly shadow: \"shadow\";\n    readonly ringShadow: \"ring-shadow\";\n};\n\n// @public\nexport type AvatarAppearance = ValuesOf<typeof AvatarAppearance>;\n\n// Warning: (ae-missing-release-tag) \"AvatarColor\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n// Warning: (ae-missing-release-tag) \"AvatarColor\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport const AvatarColor: {\n    readonly darkRed: \"dark-red\";\n    readonly cranberry: \"cranberry\";\n    readonly red: \"red\";\n    readonly pumpkin: \"pumpkin\";\n    readonly peach: \"peach\";\n    readonly marigold: \"marigold\";\n    readonly gold: \"gold\";\n    readonly brass: \"brass\";\n    readonly brown: \"brown\";\n    readonly forest: \"forest\";\n    readonly seafoam: \"seafoam\";\n    readonly darkGreen: \"dark-green\";\n    readonly lightTeal: \"light-teal\";\n    readonly teal: \"teal\";\n    readonly steel: \"steel\";\n    readonly blue: \"blue\";\n    readonly royalBlue: \"royal-blue\";\n    readonly cornflower: \"cornflower\";\n    readonly navy: \"navy\";\n    readonly lavender: \"lavender\";\n    readonly purple: \"purple\";\n    readonly grape: \"grape\";\n    readonly lilac: \"lilac\";\n    readonly pink: \"pink\";\n    readonly magenta: \"magenta\";\n    readonly plum: \"plum\";\n    readonly beige: \"beige\";\n};\n```\n\n----------------------------------------\n\nTITLE: Checkbox Labeling in v9\nDESCRIPTION: Special case for Checkbox component, recommending direct labeling instead of Field wrapper except for error messages or form layout\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-field/library/docs/Migration.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Field validationMessage=\"Please agree to the terms and conditions\">\n  <Checkbox label=\"I agree\" />\n</Field>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Task Card Layout in JSX\nDESCRIPTION: Sample code for creating a task card with a header and footer, displaying task information and usage statistics.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-card/library/docs/Spec.md#2025-04-20_snippet_9\n\nLANGUAGE: JSX\nCODE:\n```\n<Card>\n  <CardHeader header=\"Alert in Teams when a new document is uploaded in channel\" description=\"By Microsoft\" />\n  <CardFooter>\n    <span>Automated</span>\n    <span>3290 uses</span>\n  </CardFooter>\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Defining TreeItem Component in TypeScript\nDESCRIPTION: Exports a TreeItem class that extends BaseTreeItem. It includes properties for appearance and size, as well as methods for updating and handling child tree items.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_60\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class TreeItem extends BaseTreeItem {\n    appearance: TreeItemAppearance;\n    // @internal\n    childTreeItemsChanged(): void;\n    size: TreeItemSize;\n    updateSizeAndAppearance(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: SwatchPicker Example with Color and Image Swatches\nDESCRIPTION: This code snippet showcases the integration of a SwatchPicker component using a mix of ColorSwatch and ImageSwatch elements to provide color and image selection options. It uses the SwatchPicker's API to implement accessibility features via the aria-label attributes. The snippet requires the necessary Fluent UI components and optionally some icons for representing swatches. It accepts a predefined set of colors and images as inputs and outputs a picker interface for user selection.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-swatch-picker/library/docs/Spec.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SwatchPicker aria-label=\"Font color\">\n  <ColorSwatch color=\"#FF1921\" value=\"FF1921\" aria-label=\"Red\" />\n  <ColorSwatch color=\"#FFC12E\" value=\"FFC12E\" aria-label=\"Orange\" />\n  <ColorSwatch color=\"FEFF37\" value=\"FEFF37\" aria-label=\"Yellow\" />\n  <ColorSwatch color=\"00B053\" value=\"00B053\" aria-label=\"Green\" />\n  <ColorSwatch color=\"00AFED\" value=\"00AFED\" aria-label=\"Light Blue\" />\n  <ColorSwatch color=\"006EBD\" value=\"006EBD\" aria-label=\"Blue\" />\n  <ColorSwatch color=\"712F9E\" value=\"712F9E\" aria-label=\"Purple\" icon={<SomeIcon />} />\n  <ImageSwatch src=\"./path/image1.png\" value=\"space-craft-img\" disabled aria-label=\"Space craft\" />\n  <ImageSwatch src=\"./path/image2.png\" value=\"planets-img\" aria-label=\"Planets\" />\n</SwatchPicker>\n```\n\n----------------------------------------\n\nTITLE: Unregistering Icons Function Definition in FluentUI\nDESCRIPTION: Function signature for unregistering icons from FluentUI's icon registry. It accepts an array of icon names to be removed from the system.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/style-utilities/etc/style-utilities.api.md#2025-04-20_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function unregisterIcons(iconNames: string[]): void;\n```\n\n----------------------------------------\n\nTITLE: Responsive Display Tests\nDESCRIPTION: Test scenarios for chart component behavior under different screen resolutions and theme changes\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/docs/TestPlans/VerticalBarChart/ComponentTests.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- Increase the screen resolution (zoom in)\n- Decrease the screen resolution (zoom out)\n- Theme changed to Dark Theme\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Context Duplication Issue in React\nDESCRIPTION: Example showing how context duplication can lead to issues when different versions of the same context are used\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/global-contex-registration.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<ContextV1.1.Provider>\n\n</ContextV1.1.Provider>\n\nReact.useContext(ContextV1.2);\n```\n\n----------------------------------------\n\nTITLE: Exporting Multiple Button Stories from a Single File - TypeScript\nDESCRIPTION: This snippet illustrates how to re-export stories from multiple `.stories.tsx` files into a central Button story file while maintaining a default export for configuration. It promotes organization and readability.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/authoring-stories.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// @filename Button.stories.tsx\nimport { Button } from './Button'; // the component\nimport { Meta } from '@storybook/react';\n\n// 💡 `Default` re-export needs to be always first !\nexport * from 'ButtonDefault.stories';\nexport * from 'ButtonWithIcon.stories';\n\nexport default {\n  title: 'Components/Button',\n  component: Button,\n} as Meta;\n```\n\n----------------------------------------\n\nTITLE: Basic Grid Component Import Migration\nDESCRIPTION: Shows the change in import statement and basic component usage when migrating from v0 to v9\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Grid.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Grid } from '@fluentui/react-northstar';\nconst Component = () => <Grid />;\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Grid } from '@fluentui/react-migration-v0-v9';\nconst Component = () => <Grid />;\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for DialogProps in TypeScript\nDESCRIPTION: Defines the TypeScript types for the Dialog component's props, including modal types and event callbacks, which are essential for its functionality.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/docs/Spec.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype DialogProps = ComponentProps<DialogSlots> & {\n  modalType?: 'modal' | 'non-modal' | 'alert';\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?(event: MouseEvent | KeyboardEvent, data: DialogOpenChangeData): void;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Migrated FlexItem Style Overrides in Fluent UI v9 (TypeScript)\nDESCRIPTION: Example of how to define styles for a migrated flex item with style overrides in Fluent UI v9. It uses makeStyles and flexItem.grow to create a style that includes both flex properties and custom styles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/FlexItem.stories.mdx#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// in COMPONENT_NAME.styles.ts\nimport { flexItem, makeStyles } from '@fluentui/react-components';\n\nexport const useStyles = makeStyles({\n  root: {\n    ...flexItem.grow(true),\n    color: 'red',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Dropdown Props Definition\nDESCRIPTION: This snippet defines the props for the Dropdown component, extending ComponentProps and ComboboxBaseProps. It inherits properties and behaviors from ComboboxBaseProps.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/library/etc/react-combobox.api.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport type DropdownProps = ComponentProps<Partial<DropdownSlots>, 'button'> & ComboboxBaseProps;\"\n```\n\n----------------------------------------\n\nTITLE: Rendering a Checkbox Component with Label in Fluent UI React\nDESCRIPTION: This snippet illustrates rendering a Checkbox component in Fluent UI React with a standard label and a JSX label. It particularly shows how the Checkbox can include JSX for more complex labels. Requires knowledge of JSX and Fluent UI component conventions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-switch/library/docs/Spec.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Checkbox label=\"Make my profile visible\" />\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<Checkbox\n  label={\n    <span>\n      Long labels will wrap and the indicator <br /> should remain top-aligned.\n    </span>\n  }\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Imports and References\nDESCRIPTION: This snippet imports and references necessary types and components used by the DatePicker component from the Fluent UI library. It establishes dependencies for props, calendar strings, utilities, and positioning features crucial for the component's operation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-datepicker-compat/library/etc/react-datepicker-compat.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"react\" />\n\nimport type { CalendarProps } from '@fluentui/react-calendar-compat';\nimport { CalendarStrings } from '@fluentui/react-calendar-compat';\nimport type { ComponentProps } from '@fluentui/react-utilities';\nimport type { ComponentState } from '@fluentui/react-utilities';\nimport type { DateFormatting } from '@fluentui/react-calendar-compat';\nimport { DayOfWeek } from '@fluentui/react-calendar-compat';\nimport { FirstWeekOfYear } from '@fluentui/react-calendar-compat';\nimport type { ForwardRefComponent } from '@fluentui/react-utilities';\nimport { Input } from '@fluentui/react-input';\nimport type { PortalProps } from '@fluentui/react-portal';\nimport type { PositioningProps } from '@fluentui/react-positioning';\nimport * as React_2 from 'react';\nimport type { Slot } from '@fluentui/react-utilities';\nimport type { SlotClassNames } from '@fluentui/react-utilities';\n```\n\n----------------------------------------\n\nTITLE: Defining Z-Index Constants in TypeScript\nDESCRIPTION: This snippet defines several constants for z-index values used in CSS. These constants provide a consistent way to manage layering of UI elements across the application.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_88\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const zIndexBackground = \"var(--zIndexBackground)\";\nexport const zIndexContent = \"var(--zIndexContent)\";\nexport const zIndexDebug = \"var(--zIndexDebug)\";\nexport const zIndexFloating = \"var(--zIndexFloating)\";\nexport const zIndexMessages = \"var(--zIndexMessages)\";\nexport const zIndexOverlay = \"var(--zIndexOverlay)\";\nexport const zIndexPopup = \"var(--zIndexPopup)\";\nexport const zIndexPriority = \"var(--zIndexPriority)\";\n```\n\n----------------------------------------\n\nTITLE: Migrating FormInput from v0 to v9\nDESCRIPTION: Shows the transformation of v0 FormInput with integrated properties to v9 Field and Input components with separated configuration\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-field/library/docs/Migration.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<FormInput label=\"First name\" name=\"firstName\" errorMessage=\"Error message\" required />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Field label=\"First name\" validationMessage=\"Error message\" required>\n  <Input name=\"firstName\" />\n</Field>\n```\n\n----------------------------------------\n\nTITLE: Creating ARIAButtonComponent in TypeScript\nDESCRIPTION: The code snippet demonstrates how to mark a `Button` as an `ARIAButtonComponent` which informs `useARIAButtonProps` not to add redundant ARIA props. It requires Fluent UI as a dependency.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/triggers-and-multiple-layers-of-button-handling.md#2025-04-20_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * Buttons give people a way to trigger an action.\n */\nexport const Button: ForwardRefComponent<ButtonProps> & ARIAButtonComponent = React.forwardRef((props, ref) => {\n  const state = useButton_unstable(props, ref);\n\n  useButtonStyles_unstable(state);\n\n  return renderButton_unstable(state);\n});\n\nButton.displayName = 'Button';\nButton.isARIAButtonComponent = true; // this will ensure that `useARIAButtonProps` doesn't repeat itself\n```\n\n----------------------------------------\n\nTITLE: Generating Initial Preview Release for Fluent UI Component using Yarn\nDESCRIPTION: This command initializes the preview release phase of a component in Fluent UI, preparing it for review by designers and feedback from partners. Replace `MYCOMPONENT` with the appropriate package name.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/component-implementation-guide.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn nx generate prepare-initial-release --project @fluentui/react-MYCOMPONENT-preview --phase=preview\n```\n\n----------------------------------------\n\nTITLE: Styling a FluentUI Application with SCSS\nDESCRIPTION: SCSS styling for a FluentUI application, including base HTML elements, high-contrast mode considerations, and custom component styling. Uses FluentUI mixins for typography, colors, and responsive design patterns.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-docsite-components/src/demo/demo.md#2025-04-20_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\nhtml,\nbody {\n  -webkit-font-smoothing: antialiased;\n  -webkit-tap-highlight-color: transparent;\n  background: $ms-color-gray10; // Match header/footer color for browsers with momentum scroll\n  background: linear-gradient(\n    to right,\n    $ms-color-white 0%,\n    $ms-color-white 50%,\n    $ms-color-gray10 50%,\n    $ms-color-gray10 100%\n  );\n  height: 100%;\n  margin: 0;\n  padding: 0;\n  width: 100%;\n\n  @include high-contrast {\n    // The gradient doesn't behave well in high contrast, so get rid of it.\n    background: transparent;\n  }\n}\n\n// Border box everywhere\nhtml {\n  box-sizing: border-box;\n}\n*,\n*:before,\n*:after {\n  box-sizing: inherit;\n}\n\n// Buttons\nbutton {\n  background: transparent;\n  border: none;\n}\n\n// Example card headers\n.ExampleCard-title {\n  @include ms-fontSize-20;\n  @include ms-fontWeight-semibold;\n  @include ms-fontColor-gray130;\n}\n```\n\n----------------------------------------\n\nTITLE: ImageState Type Definition\nDESCRIPTION: Defines the ImageState type, which represents the internal state of the Image component. It includes ComponentState from @fluentui/react-utilities for general component state, as well as the required props (block, bordered, fit, shadow, shape) from ImageProps.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-image/library/etc/react-image.api.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type ImageState = ComponentState<ImageSlots> & Required<Pick<ImageProps, 'block' | 'bordered' | 'fit' | 'shadow' | 'shape'>>;\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Stage Animation Component in TypeScript\nDESCRIPTION: Demonstrates creating a motion component with two distinct animation stages - a quick fade-in and a slower scaling transformation. Each animation stage can have unique duration and easing functions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-motion/stories/src/CreateMotionComponent/CreateMotionComponentArrays.stories.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst FadeFastGrowSlow = createMotionComponent([\n  {\n    keyframes: [{ opacity: 0 }, { opacity: 1 }],\n    duration: 200,\n    easing: 'easeIn',\n  },\n  {\n    keyframes: [{ transform: 'scale(0)' }, { transform: 'scale(1)' }],\n    duration: 500 /* 💡 note the different duration */,\n    easing: 'cubic-bezier(0.42, 0, 0.58, 1)' /* 💡 note the different easing */,\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Public Usage of FluentUI Breadcrumb Component in React\nDESCRIPTION: Example of how developers will use the Breadcrumb component with nested items and dividers in a React application\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Breadcrumb.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Breadcrumb>\n  <Breadcrumb.Item />\n  <Breadcrumb.Divider />\n  <Breadcrumb.Item />\n</Breadcrumb>\n```\n\n----------------------------------------\n\nTITLE: Tree Actions Slot Implementation\nDESCRIPTION: Guidance for implementing accessible action slots within tree items, including keyboard navigation and ARIA attributes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tree/stories/src/Tree/TreeBestPractices.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n⚠️ `actions` slot do not adhere to keyboard navigation standards! Use `aria-description` or `aria-describedby` on tree items to indicate this interaction, you should explain your user how to interact with `actions` slot.\n```\n\n----------------------------------------\n\nTITLE: Example Item Interface in TypeScript\nDESCRIPTION: This interface defines the properties of an example item, ensuring that each item contains necessary attributes for display and interaction within the UI components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/example-data/etc/example-data.api.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport interface IExampleItem {\n    // (undocumented)\n    color: string;\n    // (undocumented)\n    description: string;\n    // (undocumented)\n    height: number;\n    // (undocumented)\n    key: string;\n    // (undocumented)\n    location: string;\n    // (undocumented)\n    name: string;\n    // (undocumented)\n    shape: string;\n    // (undocumented)\n    thumbnail: string;\n    // (undocumented)\n    width: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories for React Dialog\nDESCRIPTION: This snippet exports a configuration object for Storybook, specifying the locations of story files for the React Dialog component using glob patterns. It allows Storybook to automatically load the stories from the designated source directories.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  stories: ['../packages/react-components/react-dialog/stories/src/**/*.stories.mdx', '../packages/react-components/react-dialog/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: CalendarMonth Component and Props\nDESCRIPTION: Declaration of the CalendarMonth component and its props interface for rendering the month view in the calendar.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-calendar-compat/library/etc/react-calendar-compat.api.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport const CalendarMonth: React_2.FunctionComponent<CalendarMonthProps>;\n\n// @public (undocumented)\nexport interface CalendarMonthProps {\n    allFocusable?: boolean;\n    animationDirection?: AnimationDirection;\n    className?: string;\n    componentRef?: React_2.RefObject<ICalendarMonth>;\n    dateTimeFormatter?: DateFormatting;\n    highlightCurrentMonth?: boolean;\n    highlightSelectedMonth?: boolean;\n    maxDate?: Date;\n    minDate?: Date;\n    navigatedDate: Date;\n    navigationIcons: CalendarNavigationIcons;\n    onHeaderSelect?: () => void;\n    onNavigateDate: (date: Date, focusOnNavigatedDay: boolean) => void;\n    onSelectDate?: (date: Date, selectedDateRangeArray?: Date[]) => void;\n    selectedDate: Date;\n    strings: CalendarStrings;\n    today?: Date;\n    yearPickerHidden?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Provider Performance Props in FluentUI\nDESCRIPTION: Example of using the performance prop on the Provider component to opt out of styles caching when no inline overrides are defined. This change was introduced as a breaking change in v0.45.0.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/CHANGELOG.md#2025-04-20_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Provider performance={{ enableStylesCaching: false }}>\n  {/* Provider content */}\n</Provider>\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Component with Success Color in Dark Theme\nDESCRIPTION: This snippet demonstrates how to create a Text component with success color styling for the dark theme using makeStyles from FluentUI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-text/library/docs/MIGRATION.md#2025-04-20_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeStyles, Text } from '@fluentui/react-components';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n     color: 'rgb(146, 195, 83)'\n  },\n})\n\nconst MyComponent = () => {\n    const styles = useStyles()\n\n    return <Text className={styles.root}>{...}</Text>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Triage Bot via JSON\nDESCRIPTION: This JSON file defines the configuration for the triage bot, specifying keywords that trigger specific labels and assignees. It is a prerequisite for the GitHub Actions script, allowing the bot to automatically categorize issues based on the specified criteria.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/scripts/triage-bot/README.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../scripts/triage-bot/triage-bot.schema.json\",\n  \"params\": [\n    {\n      \"keyword\": \"(@fluentui/react-northstar)\",\n      \"labels\": [\"Fluent UI react-northstar (v0)\"],\n      \"assignees\": [\"team-1\"]\n    },\n    { \"keyword\": \"(@fluentui/react)\", \"labels\": [\"Fluent UI react (v8)\"], \"assignees\": [\"team-2\"] },\n    {\n      \"keyword\": \"(@fluentui/react-components)\",\n      \"labels\": [\"Fluent UI react-components (v9)\"],\n      \"assignees\": [\"team-3\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Panel Style Props and Styles in TypeScript for FluentUI\nDESCRIPTION: Defines the styling interfaces for the Panel component in FluentUI, including IPanelStyleProps for style input props and IPanelStyles for the actual style definitions that target specific parts of the component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_157\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IPanelStyleProps {\n    className?: string;\n    focusTrapZoneClassName?: string;\n    hasCloseButton?: boolean;\n    hasCustomNavigation?: boolean;\n    headerClassName?: string;\n    isAnimating?: boolean;\n    isFooterAtBottom?: boolean;\n    isFooterSticky?: boolean;\n    isHiddenOnDismiss?: boolean;\n    isOnRightSide?: boolean;\n    isOpen?: boolean;\n    theme: ITheme;\n    type?: PanelType;\n}\n\n// @public (undocumented)\nexport interface IPanelStyles {\n    // @deprecated\n    closeButton?: IStyle;\n    commands: IStyle;\n    content: IStyle;\n    contentInner: IStyle;\n    footer: IStyle;\n    footerInner: IStyle;\n    header: IStyle;\n    headerText: IStyle;\n    hiddenPanel: IStyle;\n    main: IStyle;\n    navigation: IStyle;\n    overlay: IStyle;\n    root: IStyle;\n    scrollableContent: IStyle;\n    subComponentStyles: IPanelSubComponentStyles;\n}\n\n// @public (undocumented)\nexport interface IPanelSubComponentStyles {\n    closeButton: Partial<IButtonStyles>;\n}\n```\n\n----------------------------------------\n\nTITLE: Icon Name Enumeration Values in TypeScript\nDESCRIPTION: A section of enum values representing icon names for Fluent UI. These string literals are used as identifiers for various icons in the UI library. Each icon is marked as undocumented in the source code.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/font-icons-mdl2/etc/font-icons-mdl2.api.md#2025-04-20_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n    ProgressRingDots = \"ProgressRingDots\",\n    // (undocumented)\n    ProHockey = \"ProHockey\",\n    // (undocumented)\n    ProjectCollection = \"ProjectCollection\",\n    // (undocumented)\n    ProjectDocument = \"ProjectDocument\",\n    // (undocumented)\n    ProjectLogo16 = \"ProjectLogo16\",\n    // (undocumented)\n    ProjectLogo32 = \"ProjectLogo32\",\n    // (undocumented)\n    ProjectLogoFill16 = \"ProjectLogoFill16\",\n    // (undocumented)\n    ProjectLogoFill32 = \"ProjectLogoFill32\",\n    // (undocumented)\n    ProjectLogoInverse = \"ProjectLogoInverse\",\n    // (undocumented)\n    PromotedDatabase = \"PromotedDatabase\",\n    // (undocumented)\n    ProtectedDocument = \"ProtectedDocument\",\n    // (undocumented)\n    ProtectionCenterLogo32 = \"ProtectionCenterLogo32\",\n    // (undocumented)\n    ProtectRestrict = \"ProtectRestrict\",\n    // (undocumented)\n    PublicCalendar = \"PublicCalendar\",\n    // (undocumented)\n    PublicContactCard = \"PublicContactCard\",\n    // (undocumented)\n    PublicContactCardMirrored = \"PublicContactCardMirrored\",\n    // (undocumented)\n    PublicEmail = \"PublicEmail\",\n    // (undocumented)\n    PublicFolder = \"PublicFolder\",\n    // (undocumented)\n    PublishContent = \"PublishContent\",\n    // (undocumented)\n    PublishCourse = \"PublishCourse\",\n    // (undocumented)\n    PublisherLogo = \"PublisherLogo\",\n    // (undocumented)\n    PublisherLogo16 = \"PublisherLogo16\",\n    // (undocumented)\n    PublisherLogoFill = \"PublisherLogoFill\",\n    // (undocumented)\n    PublisherLogoFill16 = \"PublisherLogoFill16\",\n    // (undocumented)\n    PublisherLogoInverse16 = \"PublisherLogoInverse16\",\n    // (undocumented)\n    Puzzle = \"Puzzle\",\n    // (undocumented)\n    PY = \"PY\",\n    // (undocumented)\n    PythonLanguage = \"PythonLanguage\",\n    // (undocumented)\n    QandA = \"QandA\",\n    // (undocumented)\n    QandAMirror = \"QandAMirror\",\n    // (undocumented)\n    QRCode = \"QRCode\",\n    // (undocumented)\n    QuadColumn = \"QuadColumn\",\n    // (undocumented)\n    Quantity = \"Quantity\",\n    // (undocumented)\n    QuarterCircle = \"QuarterCircle\",\n    // (undocumented)\n    QueryList = \"QueryList\",\n    // (undocumented)\n    Questionnaire = \"Questionnaire\",\n    // (undocumented)\n    QuestionnaireMirrored = \"QuestionnaireMirrored\",\n    // (undocumented)\n    QuickNote = \"QuickNote\",\n    // (undocumented)\n    QuickNoteSolid = \"QuickNoteSolid\",\n    // (undocumented)\n    R = \"R\",\n    // (undocumented)\n    RadioBtnOff = \"RadioBtnOff\",\n    // (undocumented)\n    RadioBtnOn = \"RadioBtnOn\",\n    // (undocumented)\n    RadioBullet = \"RadioBullet\",\n    // (undocumented)\n    Rain = \"Rain\",\n    // (undocumented)\n    RainShowersDay = \"RainShowersDay\",\n    // (undocumented)\n    RainShowersNight = \"RainShowersNight\",\n    // (undocumented)\n    RainSnow = \"RainSnow\",\n    // (undocumented)\n    RawSource = \"RawSource\",\n    // (undocumented)\n    Read = \"Read\",\n    // (undocumented)\n    ReadingMode = \"ReadingMode\",\n    // (undocumented)\n    ReadingModeSolid = \"ReadingModeSolid\",\n    // (undocumented)\n    ReadOutLoud = \"ReadOutLoud\",\n    // (undocumented)\n    RealEstate = \"RealEstate\",\n    // (undocumented)\n    ReceiptCheck = \"ReceiptCheck\",\n    // (undocumented)\n    ReceiptForward = \"ReceiptForward\",\n    // (undocumented)\n    ReceiptReply = \"ReceiptReply\",\n    // (undocumented)\n    ReceiptTentative = \"ReceiptTentative\",\n    // (undocumented)\n    ReceiptTentativeMirrored = \"ReceiptTentativeMirrored\",\n    // (undocumented)\n    ReceiptUndelivered = \"ReceiptUndelivered\",\n    // (undocumented)\n    Recent = \"Recent\",\n    // (undocumented)\n    Record2 = \"Record2\",\n    // (undocumented)\n    RecruitmentManagement = \"RecruitmentManagement\",\n    // (undocumented)\n    RectangleShape = \"RectangleShape\",\n    // (undocumented)\n    RectangleShapeSolid = \"RectangleShapeSolid\",\n    // (undocumented)\n    RectangularClipping = \"RectangularClipping\",\n    // (undocumented)\n    RecurringEvent = \"RecurringEvent\",\n    // (undocumented)\n    RecurringTask = \"RecurringTask\",\n    // (undocumented)\n    RecycleBin = \"RecycleBin\",\n    // (undocumented)\n    Redeploy = \"Redeploy\",\n    // (undocumented)\n    RedEye = \"RedEye\",\n    // (undocumented)\n    Redo = \"Redo\",\n    // (undocumented)\n    Refresh = \"Refresh\",\n    // (undocumented)\n    Relationship = \"Relationship\",\n    // (undocumented)\n    ReleaseDefinition = \"ReleaseDefinition\",\n    // (undocumented)\n    ReleaseGate = \"ReleaseGate\",\n    // (undocumented)\n    ReleaseGateCheck = \"ReleaseGateCheck\",\n    // (undocumented)\n    ReleaseGateError = \"ReleaseGateError\",\n    // (undocumented)\n    ReminderGroup = \"ReminderGroup\",\n    // (undocumented)\n    ReminderPerson = \"ReminderPerson\",\n    // (undocumented)\n    ReminderTime = \"ReminderTime\",\n    // (undocumented)\n    Remote = \"Remote\",\n    // (undocumented)\n    Remove = \"Remove\",\n    // (undocumented)\n    RemoveEvent = \"RemoveEvent\",\n    // (undocumented)\n    RemoveFilter = \"RemoveFilter\",\n    // (undocumented)\n    RemoveFromShoppingList = \"RemoveFromShoppingList\",\n    // (undocumented)\n    RemoveFromTrash = \"RemoveFromTrash\",\n    // (undocumented)\n    RemoveLink = \"RemoveLink\",\n    // (undocumented)\n    RemoveLinkChain = \"RemoveLinkChain\",\n    // (undocumented)\n    RemoveLinkX = \"RemoveLinkX\",\n    // (undocumented)\n    RemoveOccurrence = \"RemoveOccurrence\",\n    // (undocumented)\n    Rename = \"Rename\",\n    // (undocumented)\n    RenewalCurrent = \"RenewalCurrent\",\n    // (undocumented)\n    RenewalFuture = \"RenewalFuture\",\n    // (undocumented)\n    ReopenPages = \"ReopenPages\",\n    // (undocumented)\n    Repair = \"Repair\",\n    // (undocumented)\n    RepeatAll = \"RepeatAll\",\n    // (undocumented)\n    RepeatOne = \"RepeatOne\",\n    // (undocumented)\n    Reply = \"Reply\",\n    // (undocumented)\n    ReplyAll = \"ReplyAll\",\n    // (undocumented)\n    ReplyAllAlt = \"ReplyAllAlt\",\n    // (undocumented)\n    ReplyAllMirrored = \"ReplyAllMirrored\",\n    // (undocumented)\n    ReplyAlt = \"ReplyAlt\",\n    // (undocumented)\n    ReplyMirrored = \"ReplyMirrored\",\n    // (undocumented)\n    Repo = \"Repo\",\n    // (undocumented)\n    ReportAdd = \"ReportAdd\",\n    // (undocumented)\n    ReportDocument = \"ReportDocument\",\n    // (undocumented)\n    ReportHacked = \"ReportHacked\",\n    // (undocumented)\n    ReportLibrary = \"ReportLibrary\",\n    // (undocumented)\n    ReportLibraryMirrored = \"ReportLibraryMirrored\",\n    // (undocumented)\n    ReportLock = \"ReportLock\",\n    // (undocumented)\n    ReportWarning = \"ReportWarning\",\n    // (undocumented)\n    RepoSolid = \"RepoSolid\",\n    // (undocumented)\n    Rerun = \"Rerun\",\n    // (undocumented)\n    ReservationOrders = \"ReservationOrders\",\n    // (undocumented)\n    ResponsesMenu = \"ResponsesMenu\",\n    // (undocumented)\n    ReturnKey = \"ReturnKey\",\n    // (undocumented)\n    ReturnToSession = \"ReturnToSession\",\n    // (undocumented)\n    ReviewRequestMirroredSolid = \"ReviewRequestMirroredSolid\",\n    // (undocumented)\n    ReviewRequestSolid = \"ReviewRequestSolid\",\n    // (undocumented)\n    ReviewResponseSolid = \"ReviewResponseSolid\",\n    // (undocumented)\n    ReviewSolid = \"ReviewSolid\",\n    // (undocumented)\n    RevToggleKey = \"RevToggleKey\",\n    // (undocumented)\n    Rewind = \"Rewind\",\n    // (undocumented)\n    Ribbon = \"Ribbon\",\n    // (undocumented)\n    RibbonSolid = \"RibbonSolid\",\n    // (undocumented)\n    RightDoubleQuote = \"RightDoubleQuote\",\n    // (undocumented)\n    RightTriangle = \"RightTriangle\",\n    // (undocumented)\n    Ringer = \"Ringer\",\n    // (undocumented)\n    RingerOff = \"RingerOff\",\n    // (undocumented)\n    RingerRemove = \"RingerRemove\",\n    // (undocumented)\n    RingerSolid = \"RingerSolid\",\n    // (undocumented)\n    Robot = \"Robot\",\n    // (undocumented)\n    Rocket = \"Rocket\",\n    // (undocumented)\n    Room = \"Room\",\n    // (undocumented)\n    Rotate = \"Rotate\",\n    // (undocumented)\n    Rotate90Clockwise = \"Rotate90Clockwise\",\n    // (undocumented)\n    Rotate90CounterClockwise = \"Rotate90CounterClockwise\",\n    // (undocumented)\n    RowsChild = \"RowsChild\",\n    // (undocumented)\n    RowsGroup = \"RowsGroup\",\n    // (undocumented)\n    Rugby = \"Rugby\",\n    // (undocumented)\n    Running = \"Running\",\n    // (undocumented)\n    Sad = \"Sad\",\n    // (undocumented)\n    SadSolid = \"SadSolid\",\n    // (undocumented)\n    Save = \"Save\",\n    // (undocumented)\n    SaveAll = \"SaveAll\",\n    // (undocumented)\n    SaveAndClose = \"SaveAndClose\",\n    // (undocumented)\n    SaveAs = \"SaveAs\",\n    // (undocumented)\n    SaveTemplate = \"SaveTemplate\",\n    // (undocumented)\n    SaveToMobile = \"SaveToMobile\",\n    // (undocumented)\n    Savings = \"Savings\",\n    // (undocumented)\n    ScaleUp = \"ScaleUp\",\n    // (undocumented)\n    ScaleVolume = \"ScaleVolume\",\n    // (undocumented)\n    ScatterChart = \"ScatterChart\",\n    // (undocumented)\n    ScheduleEventAction = \"ScheduleEventAction\",\n    // (undocumented)\n    SchoolDataSyncLogo = \"SchoolDataSyncLogo\",\n    // (undocumented)\n    ScopeTemplate = \"ScopeTemplate\",\n    // (undocumented)\n    ScreenCast = \"ScreenCast\",\n    // (undocumented)\n    Script = \"Script\",\n    // (undocumented)\n    ScrollUpDown = \"ScrollUpDown\",\n    // (undocumented)\n    Search = \"Search\",\n    // (undocumented)\n    SearchAndApps = \"SearchAndApps\",\n    // (undocumented)\n    SearchBookmark = \"SearchBookmark\",\n    // (undocumented)\n    SearchCalendar = \"SearchCalendar\",\n    // (undocumented)\n    SearchData = \"SearchData\",\n    // (undocumented)\n    SearchIssue = \"SearchIssue\",\n    // (undocumented)\n    SearchIssueMirrored = \"SearchIssueMirrored\",\n    // (undocumented)\n    SearchNearby = \"SearchNearby\",\n    // (undocumented)\n    SecondaryNav = \"SecondaryNav\",\n    // (undocumented)\n    Section = \"Section\",\n    // (undocumented)\n    Sections = \"Sections\",\n    // (undocumented)\n    SecurityGroup = \"SecurityGroup\",\n    // (undocumented)\n    SeeDo = \"SeeDo\",\n    // (undocumented)\n    SelectAll = \"SelectAll\",\n    // (undocumented)\n    Sell = \"Sell\",\n    // (undocumented)\n    SemiboldWeight = \"SemiboldWeight\",\n    // (undocumented)\n    Send = \"Send\",\n    // (undocumented)\n    SendMirrored = \"SendMirrored\",\n```\n\n----------------------------------------\n\nTITLE: Application overrides in Theme object\nDESCRIPTION: This example demonstrates how application-owned style overrides are integrated into the Theme object in the v0 approach.  It illustrates the indirection and lack of tree-shaking associated with this method, where overrides are defined far from their usage. The example includes overrides for a Button component based on a boolean variable `isMuteButton`.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/makeStyles.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// App\n<Provider theme={mergeThemes(theme.light, lightOverrides)}>\n  <App />\n</Provider>\n\n// Component usage - I need to go to a completely different file to find out what styles the variable overrides.\n<Button variables={{isMuteButton: true}} />\n\n// Theme overrides\nconst lightOverrides = {\n  componentStyles: {\n    Button: {\n      root: ({variables}) => ({\n        // hundreds of overrides\n        ...(variables.isMuteButton && {\n          minWidth: '64px',\n        }),\n        // another hundreds of overrides\n      })\n    }\n    // all other components\n  }\n}\n\nconst darkOverrides = {\n  // can have separate overrides for isMuteButton variable.\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining ScrollToMode Constants\nDESCRIPTION: Constants for specifying scroll behavior when programmatically scrolling to an element. Options include auto, top, bottom, and center positioning.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_249\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport const ScrollToMode: {\n    auto: 0;\n    top: 1;\n    bottom: 2;\n    center: 3;\n};\n\n// @public (undocumented)\nexport type ScrollToMode = (typeof ScrollToMode)[keyof typeof ScrollToMode];\n```\n\n----------------------------------------\n\nTITLE: Disabling Slot Rendering\nDESCRIPTION: Demonstrates how to prevent rendering of a specific component slot by passing falsy values\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/docs/src/pages/ShorthandProps.mdx#2025-04-20_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Dropdown toggleIndicator={null} />\n```\n\n----------------------------------------\n\nTITLE: Using createPresenceComponent in React\nDESCRIPTION: This snippet shows how to use createPresenceComponent to create a Fade component in React. It demonstrates the usage of the created component with the 'visible' prop to control the animation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/motion-definition-n-apis.md#2025-04-20_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createPresenceComponent, type PresenceMotion } from '@fluentui/react-motions-preview';\n\nconst fadePresence: PresenceMotion = {\n  /* --- */\n};\nconst Fade = createPresenceComponent(fadePresence);\n\nfunction MyComponent() {\n  const [visible, setVisible] = useState(false);\n\n  return (\n    <Fade visible={visible}>\n      <div>Hello world!</div>\n    </Fade>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Radio usage without RadioGroup\nDESCRIPTION: Illustrates how to use `Radio` components without a `RadioGroup`. In this case, it is the user's responsibility to ensure that all radios share the same `name` attribute to function as a group.  The `defaultChecked` prop allows setting an initial selection.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-radio/library/docs/Spec.md#2025-04-20_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <Radio name=\"number\" value=\"one\" label=\"Option One\" defaultChecked />\n  <Radio name=\"number\" value=\"two\" label=\"Option Two\" />\n  <Radio name=\"number\" value=\"three\" label=\"Option Three\" />\n</>\n```\n\n----------------------------------------\n\nTITLE: Applying Editor Support to Single ExampleCard in React\nDESCRIPTION: Demonstrate how to apply custom editor supported packages to a single ExampleCard component with code loading\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-docsite-components/README.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { editorSupportedPackages } from '<file path>';\nimport { MyExample } from './MyExample.Example';\nconst MyExampleCode = require('!raw-loader!./MyExample.Example.tsx');\n\n<ExampleCard title=\"My example\" code={MyExampleCode} editorSupportedPackages={editorSupportedPackages}>\n  <MyExample />\n</ExampleCard>;\n```\n\n----------------------------------------\n\nTITLE: Group Interface in TypeScript\nDESCRIPTION: This interface outlines the structure of a group type, which includes properties for managing nested groups, counts, and display levels. It is crucial for structuring hierarchical datasets properly.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/example-data/etc/example-data.api.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal\nexport interface IExampleGroup {\n    // (undocumented)\n    children?: IExampleGroup[];\n    // (undocumented)\n    count: number;\n    // (undocumented)\n    isCollapsed?: boolean;\n    // (undocumented)\n    key: string;\n    // (undocumented)\n    level?: number;\n    // (undocumented)\n    name: string;\n    // (undocumented)\n    startIndex: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up a theme for Fluent UI Web Components\nDESCRIPTION: Code to initialize a theme for Fluent UI Web Components using the setTheme utility with the webLightTheme token set.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/_docs/developer/quick-start.stories.mdx#2025-04-20_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { setTheme } from '@fluentui/web-components';\nimport { webLightTheme } from '@fluentui/tokens';\n\nsetTheme(webLightTheme);\n```\n\n----------------------------------------\n\nTITLE: Bad Practice: Default Export Misplacement in Story - TypeScript\nDESCRIPTION: This snippet highlights a bad practice where a default export is incorrectly placed in a file that is not the main `.stories.tsx` file. It serves as a caution against violating the proposal's structure.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/authoring-stories.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// @filename  ButtonDefault.stories.tsx\nexport const ButtonDefault = (props: ButtonProps) => <Button {...props}>Button</Button>;\nButtonDefault.storyName = 'Default';\n\n// don’t do this\nexport default {\n  title: 'Components/Button',\n  component: Button,\n} as Meta;\n```\n\n----------------------------------------\n\nTITLE: Defining IStyleSet and Related Interfaces in TypeScript\nDESCRIPTION: This snippet defines the IStyleSet interface and related types, which are used to represent sets of styles in the FluentUI system. It includes support for sub-component styles and shadow configuration.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/merge-styles/etc/merge-styles.api.md#2025-04-20_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type IStyleSet<TStyleSet extends IStyleSetBase = {\n    [key: string]: any;\n}> = {\n    [P in keyof Omit_2<TStyleSet, 'subComponentStyles'>]: IStyle;\n} & {\n    subComponentStyles?: {\n        [P in keyof TStyleSet['subComponentStyles']]: IStyleFunctionOrObject<any, any>;\n    };\n} & IShadowConfig;\n\nexport interface IStyleSetBase {\n    // (undocumented)\n    [key: string]: any;\n    // (undocumented)\n    subComponentStyles?: any;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CounterBadge Type and Constants in TypeScript\nDESCRIPTION: Type definition for CounterBadge color, shape, and size, along with associated constants. These define customization options for the CounterBadge component in FluentUI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type CounterBadgeColor = ValuesOf<typeof CounterBadgeColor>;\n\n// @public (undocumented)\nexport const CounterBadgeDefinition: FASTElementDefinition<typeof CounterBadge>;\n\n// @public\nexport const CounterBadgeShape: {\n    readonly circular: \"circular\";\n    readonly rounded: \"rounded\";\n};\n\n// @public\nexport type CounterBadgeShape = ValuesOf<typeof CounterBadgeShape>;\n\n// @public\nexport const CounterBadgeSize: {\n    readonly tiny: \"tiny\";\n    readonly extraSmall: \"extra-small\";\n    readonly small: \"small\";\n    readonly medium: \"medium\";\n    readonly large: \"large\";\n    readonly extraLarge: \"extra-large\";\n};\n\n// @public\nexport type CounterBadgeSize = ValuesOf<typeof CounterBadgeSize>;\n\n// @public\nexport const CounterBadgeStyles: ElementStyles;\n\n// @public\nexport const CounterBadgeTemplate: ElementViewTemplate<CounterBadge>;\n```\n\n----------------------------------------\n\nTITLE: Defining Color Constants in TypeScript for Fluent UI\nDESCRIPTION: Defines a set of color constants using hexadecimal values for the Fluent UI design system. Includes variations of orange, yellow, green, cyan, blue, magenta, and gray colors with different intensity levels.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/theme/etc/theme.api.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst orangeYellow10 = \"#c19c00\";\nconst yellowGreen10 = \"#8cbd18\";\nconst green20 = \"#0b6a0b\";\nconst green10 = \"#498205\";\nconst greenCyan10 = \"#00ad56\";\nconst cyan40 = \"#005e50\";\nconst cyan30 = \"#005b70\";\nconst cyan20 = \"#038387\";\nconst cyan10 = \"#00b7c3\";\nconst cyanBlue20 = \"#004e8c\";\nconst cyanBlue10 = \"#0078d4\";\nconst blue10 = \"#4f6bed\";\nconst blueMagenta40 = \"#373277\";\nconst blueMagenta30 = \"#5c2e91\";\nconst blueMagenta20 = \"#8764b8\";\nconst blueMagenta10 = \"#8378de\";\nconst magenta20 = \"#881798\";\nconst magenta10 = \"#c239b3\";\nconst magentaPink20 = \"#9b0062\";\nconst magentaPink10 = \"#e3008c\";\nconst gray40 = \"#393939\";\nconst gray30 = \"#7a7574\";\nconst gray20 = \"#69797e\";\nconst gray10 = \"#a0aeb2\";\n```\n\n----------------------------------------\n\nTITLE: Performance Measurement Class - TypeScript\nDESCRIPTION: Class for measuring and tracking performance metrics in Fluent UI applications.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/utilities/etc/utilities.api.md#2025-04-20_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class FabricPerformance {\n    static measure(name: string, func: () => void): void;\n    static reset(): void;\n    static setPeriodicReset(): void;\n    static summary: IPerfSummary;\n}\n```\n\n----------------------------------------\n\nTITLE: Inline Styles with CSS Variables in React\nDESCRIPTION: This code snippet demonstrates the current approach of using inline styles to apply CSS variables. It highlights the limitation that CSS variables applied this way are not accessible to React Portals, leading to styling issues when rendering elements outside of the DOM hierarchy.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/theme-css-variable-insertion.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n\"<div style={{...cssVars}}>\n    // happy can inherit CSS variables\n</div>\n\n// React.createPortal()\n// no theme values here ⚠\n<div id=\\\"tooltip\\\" />\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Fluent UI Dropdown Component in React\nDESCRIPTION: This example shows how to implement a Fluent UI Dropdown component. It includes options for selecting a fruit and an onChange handler to manage the selected value.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Styles/FileTypeIconsPage/docs/web/FileTypeIconsResolutions.md#2025-04-20_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<Dropdown\\n  placeholder=\"Select a fruit\"\\n  options={[\\n    { text: 'Apple', key: 'apple' },\\n    { text: 'Banana', key: 'banana' },\\n    { text: 'Orange', key: 'orange' }\\n  ]}\\n  onChange={(e, option) => setSelectedFruit(option.key)}\\n/>\n```\n\n----------------------------------------\n\nTITLE: Define PositioningShorthand type\nDESCRIPTION: Defines a type called `PositioningShorthand` which can be either `PositioningProps` or `PositioningShorthandValue`. It provides a simplified way to specify positioning options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-positioning/etc/react-positioning.api.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type PositioningShorthand = PositioningProps | PositioningShorthandValue;\n```\n\n----------------------------------------\n\nTITLE: Defining DocumentCard Logo Component Interfaces\nDESCRIPTION: TypeScript interface definitions for DocumentCardLogo component, its props, style props, and styles. This component displays a logo within a DocumentCard.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_99\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IDocumentCardLogo {\n}\n\n// Warning: (ae-forgotten-export) The symbol \"DocumentCardLogoBase\" needs to be exported by the entry point index.d.ts\n//\n// @public (undocumented)\nexport interface IDocumentCardLogoProps extends React_2.ClassAttributes<DocumentCardLogoBase> {\n    className?: string;\n    componentRef?: IRefObject<IDocumentCardLogo>;\n    logoIcon: string;\n    logoName?: string;\n    styles?: IStyleFunctionOrObject<IDocumentCardLogoStyleProps, IDocumentCardLogoStyles>;\n    theme?: ITheme;\n}\n\n// @public (undocumented)\nexport interface IDocumentCardLogoStyleProps {\n    className?: string;\n    theme: ITheme;\n}\n\n// @public (undocumented)\nexport interface IDocumentCardLogoStyles {\n    // (undocumented)\n    root: IStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: Including Stories for React Badge in Storybook - JavaScript\nDESCRIPTION: This snippet exports a configuration object for Storybook, specifying the glob patterns to locate story files related to the React Badge component in Fluent UI. The paths indicate where Storybook should look for Markdown and TypeScript files containing the visual stories.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-badge/stories/src/**/*.stories.mdx', '../packages/react-components/react-badge/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Flex Component - Before and After Migration\nDESCRIPTION: Shows the change in import statement when migrating from react-northstar to react-migration-v0-v9\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Flex.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Flex } from '@fluentui/react-northstar';\nconst Component = () => <Flex />;\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Flex } from '@fluentui/react-migration-v0-v9';\nconst Component = () => <Flex />;\n```\n\n----------------------------------------\n\nTITLE: Creating Avatar with Initials in Swift using FluentUI\nDESCRIPTION: This code snippet demonstrates how to create an AvatarView without an image, using only the contact's name and email. The avatar will display the contact's initials.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/AvatarPage/docs/mac/AvatarUsage.md#2025-04-20_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nAvatarView(avatarSize: size, contactName: \"Amanda Brady\", contactEmail: \"Amanda.Brady@example.com\", contactImage: nil)\n```\n\n----------------------------------------\n\nTITLE: Aligning Stack.Item using make-styles\nDESCRIPTION: This snippet shows how to align a Stack.Item component using the make-styles approach.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Flex/Flex.StackItem.stories.mdx#2025-04-20_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nmakeStyles({\n  root: {\n    alignSelf: 'center'\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Accessibility Attributes for Breadcrumb\nDESCRIPTION: This fix ensures that the wrapping div of all items in the Breadcrumb component obtains the accessibility attributes from its container slot, improving screen reader usability.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/CHANGELOG.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nFix `Breadcrumb` to have the `div` wrapping all items obtain a11y attributes from `container` slot @yuanboxue-amber ([#15303](https://github.com/microsoft/fluentui/pull/15303))\n```\n\n----------------------------------------\n\nTITLE: Northstar to Fluent UI (v9) BreadcrumbItem Property Mapping Table\nDESCRIPTION: Markdown table showing the mapping of properties from Northstar BreadcrumbItem to Fluent UI (v9) BreadcrumbButton. It highlights the changes in prop names and their corresponding new names in v9.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-breadcrumb/library/docs/MIGRATION.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Northstar `BreadcrumbItem` | v9 `BreadcrumbButton` |\n| -------------------------- | --------------------- |\n| `active`                   | `current`             |\n| `disabled`                 | `disabled`            |\n```\n\n----------------------------------------\n\nTITLE: CSS Styles for Stack.Item\nDESCRIPTION: This snippet demonstrates the CSS styles for the Stack.Item component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Flex/Flex.StackItem.stories.mdx#2025-04-20_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.flex-item {\n  height: auto;\n  width: auto;\n  flex-shrink: 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DatePicker with Default Configuration in Swift\nDESCRIPTION: Creates a DatePicker with default settings using a date-only text field. When no date or calendar is specified, the component uses the current date and system calendar.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/DatePickerPage/docs/mac/DatePickerUsage.md#2025-04-20_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n// Default configuration with date-only text field\nDatePickerController(date: nil, calendar: nil, style: .date)\n```\n\n----------------------------------------\n\nTITLE: Plugin Discovery Command for Nx\nDESCRIPTION: Command to list and explore all functionalities of the @fluentui/workspace-plugin in an Nx monorepo environment\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn nx list @fluentui\\/workspace-plugin\n```\n\n----------------------------------------\n\nTITLE: Running Token Pipeline in Shell\nDESCRIPTION: Command to run the token pipeline after updating colors in the token pipeline. This command generates the color tokens based on the updated token pipeline.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-theme/library/README.md#2025-04-20_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nyarn token-pipeline\n```\n\n----------------------------------------\n\nTITLE: Migrating Menu and Trigger Props in Fluent UI - Before\nDESCRIPTION: Example of how menu and trigger props were used in Fluent UI v0 with the MenuButton component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Menu.stories.mdx#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MenuButton, Button } from '@fluentui/react-northstar';\nconst Component = () => <MenuButton trigger={<Button content=\"Open\" />} menu={['1. menu item', '2. menu item']} />;\n```\n\n----------------------------------------\n\nTITLE: Exporting Menu Split Group Class Names in TypeScript\nDESCRIPTION: Exports class names for MenuSplitGroup slots, which helps in applying styles consistently throughout the menu split group components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/library/etc/react-menu.api.md#2025-04-20_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const menuSplitGroupClassNames: SlotClassNames<MenuSplitGroupSlots>;\n```\n\n----------------------------------------\n\nTITLE: Composing Custom Button with CSS Custom Properties in React\nDESCRIPTION: Shows how to compose a custom Button component using CSS custom properties and existing Fluent UI hooks.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/custom-styling.md#2025-04-20_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\n// making changes in composition\nconst useCustomButtonStyle = makeResetStyles({\n  [ButtonTokens.background]: 'red',\n  [ButtonTokens.color]: 'white',\n  [ButtonTokens.border]: 'green',\n  ':hover': {\n    [ButtonTokens.background]: 'green',\n    [ButtonTokens.color]: 'pink',\n    [ButtonTokens.border]: 'blue',\n  },\n  ':active': {\n    [ButtonTokens.background]: 'orange',\n    [ButtonTokens.color]: 'black',\n    [ButtonTokens.border]: 'purple',\n  },\n});\n\nexport const CustomButton: ForwardRefComponent<ButtonProps> = React.forwardRef((props, ref) => {\n  const state = useButton_unstable(props, ref);\n  const rootStyle = useCustomButtonStyle();\n  state.root.className = rootStyle;\n  useButtonStyles_unstable(state);\n\n  return renderButton_unstable(state);\n  // Casting is required due to lack of distributive union to support unions on @types/react\n}) as ForwardRefComponent<ButtonProps>;\n```\n\n----------------------------------------\n\nTITLE: Displaying Theme-Toggled Images for FluentUI iOS Components\nDESCRIPTION: This code snippet demonstrates how to display theme-toggled images for FluentUI iOS components using a DisplayToggle component. It includes examples for small chips, medium chips, and badge fields in both light and dark modes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/ChipPage/docs/ios/ChipOverview.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<DisplayToggle onText=\"Dark\" offText=\"Light\" label=\"Theme Switcher\">\n### Small Chip\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_badges_03_small_light.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_badges_03_small_dark.png?text=DarkMode\" />\n\n### Medium Chip\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_badges_01_medium_light.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_badges_01_medium_dark.png?text=DarkMode\" />\n\n### Badge Field\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_badges_02_example_light.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_badges_02_example_light-1.png?text=DarkMode\" />\n\n</DisplayToggle>\n```\n\n----------------------------------------\n\nTITLE: Defining useTarget Hook in Typescript\nDESCRIPTION: Defines a React hook, `useTarget`, that queries the document for an element based on a CSS query string or returns a provided element/event/point. It also attempts to determine the Window object for the target.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-hooks/README.md#2025-04-20_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\ntype Target = Element | string | MouseEvent | Point | null | React.RefObject<Element>;\n\nfunction useTarget<TElement extends HTMLElement = HTMLElement>(\n  target: Target | undefined,\n  hostElement?: React.RefObject<TElement | null>,\n): Readonly<[React.RefObject<Element | MouseEvent | Point | null>, React.RefObject<Window | undefined>]>;\n```\n\n----------------------------------------\n\nTITLE: Defining usePrevious Hook in Typescript\nDESCRIPTION: Defines a React hook, `usePrevious`, that tracks the value of a given variable from the previous render of the component.  It effectively stores and returns the previous value, or undefined if it's the initial render.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-hooks/README.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nfunction usePrevious<T>(value: T): T | undefined;\n```\n\n----------------------------------------\n\nTITLE: TypeScript: ForwardRefComponent for Switch\nDESCRIPTION: Declares the Switch component as a ForwardRefComponent, enabling it to accept and forward refs. It uses the SwitchProps type to define the component's accepted properties.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-switch/library/etc/react-switch.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const Switch: ForwardRefComponent<SwitchProps>;\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up FluentUI React Application with create-react-app-uifabric\nDESCRIPTION: Shell commands for cloning and initializing a FluentUI React application using the create-react-app-uifabric template. Includes instructions for both npm and yarn package managers.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-docsite-components/src/demo/demo.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/microsoft/create-react-app-uifabric.git my-app\ncd my-app\n\n# with npm (default)\nnpm install\nnpm start\n\n# with yarn (optional)\nyarn\nyarn start\n```\n\n----------------------------------------\n\nTITLE: useField_unstable Definition\nDESCRIPTION: This snippet defines the useField_unstable hook.  It takes FieldProps and a React ref as input and returns the FieldState.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-field/library/etc/react-field.api.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const useField_unstable: (props: FieldProps, ref: React_2.Ref<HTMLDivElement>) => FieldState;\"\n```\n\n----------------------------------------\n\nTITLE: Migrating Basic Text Component Usage in React TSX\nDESCRIPTION: Demonstrates the change in import statement and basic usage of the Text component between v0 and v9. The 'content' prop is replaced with children in v9.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Text.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from '@fluentui/react-northstar';\nconst Component = () => <Text content=\"Test\" />;\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StyledText } from '@fluentui/react-migration-v0-v9';\nconst Component = () => <StyledText>Test</StyledText>;\n```\n\n----------------------------------------\n\nTITLE: Listing Native Props for Fluent UI SearchBox\nDESCRIPTION: A markdown list of native props that maintain standard behavior in both Fluent UI v8 and v9 SearchBox components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-search/library/docs/MIGRATION.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nNative props following standard behavior in both libraries + `v9`:\n\n- `disabled?: boolean`\n- `readOnly?: boolean`\n- `autoComplete?: string`\n- and most other native props not specified\n```\n\n----------------------------------------\n\nTITLE: Importing Badge Components - React\nDESCRIPTION: This snippet demonstrates how to import the Badge, CounterBadge, and PresenceBadge components from the Fluent UI library for usage in a React application. It is essential to have the '@fluentui/react-components' package installed as a dependency.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Badge, CounterBadge, PresenceBadge } from '@fluentui/react-components';\n```\n\n----------------------------------------\n\nTITLE: Setting Responsive Mode Function\nDESCRIPTION: Utility function to manually set the current responsive mode, overriding the automatically detected mode based on screen size.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_257\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport function setResponsiveMode(responsiveMode: ResponsiveMode | undefined): void;\n```\n\n----------------------------------------\n\nTITLE: Defining DocumentCard Location Component Interfaces\nDESCRIPTION: TypeScript interface definitions for DocumentCardLocation component, its props, style props, and styles. This component displays location information in a DocumentCard.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_98\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IDocumentCardLocation {\n}\n\n// Warning: (ae-forgotten-export) The symbol \"DocumentCardLocationBase\" needs to be exported by the entry point index.d.ts\n//\n// @public (undocumented)\nexport interface IDocumentCardLocationProps extends React_2.ClassAttributes<DocumentCardLocationBase> {\n    ariaLabel?: string;\n    className?: string;\n    componentRef?: IRefObject<IDocumentCardLocation>;\n    location: string;\n    locationHref?: string;\n    onClick?: (ev?: React_2.MouseEvent<HTMLElement>) => void;\n    styles?: IStyleFunctionOrObject<IDocumentCardLocationStyleProps, IDocumentCardLocationStyles>;\n    theme?: ITheme;\n}\n\n// @public (undocumented)\nexport interface IDocumentCardLocationStyleProps {\n    className?: string;\n    theme: ITheme;\n}\n\n// @public (undocumented)\nexport interface IDocumentCardLocationStyles {\n    // (undocumented)\n    root: IStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Avatar Usage\nDESCRIPTION: Shows how to migrate from using the Image component with avatar prop to using the dedicated Avatar component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Image.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Image } from '@fluentui/react-northstar';\nconst Component = () => <Image alt=\"someone's avatar\" src=\"avatar_url\" avatar />;\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Avatar } from '@fluentui/react-components';\nconst Component = () => <Avatar image={{ alt: \"someone's avatar\", src: 'avatar_url' }} />;\n```\n\n----------------------------------------\n\nTITLE: MessageBar Component Implementation\nDESCRIPTION: Class definition for MessageBar component with intent, layout, and shape configurations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_46\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MessageBar extends FASTElement {\n    constructor();\n    dismissMessageBar: () => void;\n    elementInternals: ElementInternals;\n    intent?: MessageBarIntent;\n    intentChanged(prev: MessageBarIntent | undefined, next: MessageBarIntent | undefined): void;\n    layout?: MessageBarLayout;\n    layoutChanged(prev: MessageBarLayout | undefined, next: MessageBarLayout | undefined): void;\n    shape?: MessageBarShape;\n    shapeChanged(prev: MessageBarShape | undefined, next: MessageBarShape | undefined): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SearchBox Component in React\nDESCRIPTION: Instructions to import the SearchBox component from the '@fluentui/react-search' package. Ensures proper access to the SearchBox for use in a React application. The SearchBox is a part of Fluent UI and must be installed as a dependency before import.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-search/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { SearchBox } from '@fluentui/react-search';\n```\n\n----------------------------------------\n\nTITLE: SuggestionsStoreOptions Type Definition in FluentUI\nDESCRIPTION: Defines configuration options for the SuggestionsStore class. Currently includes an optional function to get ARIA labels for suggestion items to improve accessibility.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_268\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport type SuggestionsStoreOptions<T> = {\n    getAriaLabel?: (item: T) => string;\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Screen Reader Label on ListItem in JSX\nDESCRIPTION: Use the aria-label property on ListItem to provide a custom label for screen readers, enhancing accessibility for visually impaired users.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-list/stories/src/List/ListBestPractices.md#2025-04-20_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<ListItem aria-label=\"Custom screen reader description\">\n```\n\n----------------------------------------\n\nTITLE: Typography Wrapper Components in FluentUI\nDESCRIPTION: Examples of using typography wrapper components like Display, LargeTitle, Title, Subtitle, and Caption for semantic and standardized text styling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-text/library/docs/Spec.md#2025-04-20_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Display bold>This text is huge.</Display>\n<LargeTitle>This is a large title.</LargeTitle>\n<Title as=\"h1\">Title</Title>\n<Subtitle as=\"h2\">Sub title</Subtitle>\n<Caption>Captioned</Caption>\n```\n\n----------------------------------------\n\nTITLE: Center Align Chart if Space Available\nDESCRIPTION: Checks if the total available width is greater than or equal to the required width for rendering the bars. If it is, the chart is center-aligned by adding half of the extra space to the domain margin.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/docs/implementing-2-to-1-spacing.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nif (totalWidth >= reqWidth) {\n    this._domainMargin += (totalWidth - reqWidth) / 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TabPanel Component Class in TypeScript\nDESCRIPTION: TypeScript class definition for the TabPanel component that extends FASTElement, providing the content area for a tabbed interface.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_66\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"TabPanel\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport class TabPanel extends FASTElement {\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ColorPicker Components in React\nDESCRIPTION: Shows how to import the necessary ColorPicker components from the @fluentui/react-components package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-color-picker/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ColorPicker, ColorSwatch, type ColorPickerOnSelectEventHandler } from '@fluentui/react-components';\n```\n\n----------------------------------------\n\nTITLE: Keyboard Numpad Code Constants in TypeScript\nDESCRIPTION: TypeScript enumeration defining keyboard codes for numpad keys and special characters.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/utilities/etc/utilities.api.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n    two_numpad: 98;\n    three_numpad: 99;\n    four_numpad: 100;\n    five_numpad: 101;\n    six_numpad: 102;\n    seven_numpad: 103;\n    eight_numpad: 104;\n    nine_numpad: 105;\n    multiply: 106;\n    add: 107;\n    subtract: 109;\n    decimalPoint: 110;\n    divide: 111;\n    f1: 112;\n    f2: 113;\n    f3: 114;\n    f4: 115;\n    f5: 116;\n    f6: 117;\n    f7: 118;\n    f8: 119;\n    f9: 120;\n    f10: 121;\n    f11: 122;\n    f12: 123;\n    numlock: 144;\n    scrollLock: 145;\n    semicolon: 186;\n    equalSign: 187;\n    comma: 188;\n    dash: 189;\n    period: 190;\n    forwardSlash: 191;\n    graveAccent: 192;\n    openBracket: 219;\n    backSlash: 220;\n    closeBracket: 221;\n    singleQuote: 222;\n```\n\n----------------------------------------\n\nTITLE: Card with Size Prop Before Migration\nDESCRIPTION: Example of using the 'size' prop on a Card before migration.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Card/Card.stories.mdx#2025-04-20_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Card } from '@fluentui/react-northstar';\n\nconst Component = () => <Card size=\"large\">Lorem ipsum, dolor sit amet consectetur adipisicing elit.</Card>;\n```\n\n----------------------------------------\n\nTITLE: Defining OnUpdateOverflow Type in TypeScript\nDESCRIPTION: This snippet describes the OnUpdateOverflow type, a function that accepts a payload containing overflow event data, especially relevant when items transition between overflow states.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/priority-overflow/etc/priority-overflow.api.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport type OnUpdateOverflow = (data: OverflowEventPayload) => void;\n```\n\n----------------------------------------\n\nTITLE: Defining Vertical Bar Chart Properties Interface in TypeScript\nDESCRIPTION: The IVerticalBarChartProps interface encapsulates the properties for configuring a vertical bar chart, allowing customization of dimensions, styles, data, and rendering options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/etc/react-charting.api.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface IVerticalBarChartProps extends ICartesianChartProps {\n    barWidth?: number | 'default' | 'auto';\n    chartTitle?: string;\n    colors?: string[];\n    culture?: string;\n    data?: IVerticalBarChartDataPoint[];\n    enableGradient?: boolean;\n    hideLabels?: boolean;\n    lineLegendColor?: string;\n    lineLegendText?: string;\n    lineOptions?: ILineChartLineOptions;\n    maxBarWidth?: number;\n    mode?: 'default' | 'plotly' | 'histogram';\n    onRenderCalloutPerDataPoint?: IRenderFunction<IVerticalBarChartDataPoint>;\n    roundCorners?: boolean;\n    styles?: IStyleFunctionOrObject<IVerticalBarChartStyleProps, IVerticalBarChartStyles>;\n    useSingleColor?: boolean;\n    xAxisInnerPadding?: number;\n    xAxisOuterPadding?: number;\n    xAxisPadding?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Fluent UI Hooks and Styles - JavaScript\nDESCRIPTION: Imports several unstable hooks and styles from '@fluentui/react-tree' and '@fluentui/react-tabster', as well as theme tokens from '@fluentui/react-theme'. These imports indicate dependencies on Fluent UI packages for handling tree item contexts and layouts, focus management, and theme variations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/etc/react-components.api.md#2025-04-20_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useTreeItemContextValues_unstable } from '@fluentui/react-tree';\nimport { useTreeItemLayout_unstable } from '@fluentui/react-tree';\nimport { useTreeItemLayoutStyles_unstable } from '@fluentui/react-tree';\nimport { useTreeItemPersonaLayout_unstable } from '@fluentui/react-tree';\nimport { useTreeItemPersonaLayoutStyles_unstable } from '@fluentui/react-tree';\nimport { useTreeItemStyles_unstable } from '@fluentui/react-tree';\nimport { useTreeStyles_unstable } from '@fluentui/react-tree';\nimport { useUncontrolledFocus } from '@fluentui/react-tabster';\nimport { VerticalSpacingTokens } from '@fluentui/react-theme';\nimport { webDarkTheme } from '@fluentui/react-theme';\nimport { webLightTheme } from '@fluentui/react-theme';\n\n```\n\n----------------------------------------\n\nTITLE: Installing Fluent UI Web Components with pnpm\nDESCRIPTION: Command to install Fluent UI Web Components as a dependency using pnpm package manager.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/_docs/developer/quick-start.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @fluentui/web-components\n```\n\n----------------------------------------\n\nTITLE: Invoking generatePageJsonFiles API in JavaScript\nDESCRIPTION: Shows how to use the generatePageJsonFiles API from @fluentui/api-docs to generate page JSON files for API documentation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/api-docs/README.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { generatePageJsonFiles } = require('@fluentui/api-docs');\nconst config = {}; // your config here\ngeneratePageJsonFiles(config);\n```\n\n----------------------------------------\n\nTITLE: Link Element in FastDNA\nDESCRIPTION: Demonstrates a hypertext intended as an anchor tag in FastDNA design principles. Class styling requires FastDNA CSS integration and a valid href attribute.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Link.md#2025-04-20_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<a href=\\\"https://www.bing.com\\\" class=\\\"c012\\\">Hypertext</a>\n```\n\n----------------------------------------\n\nTITLE: Construct Scale for Groups\nDESCRIPTION: Constructs a band scale (xScale0) to define the geometry of the groups.  The domain is the array of x-axis labels, and the range is the available width, adjusted for margins. The inner padding of this scale is calculated to account for the number of bars in a group and the bar gap rate, therefore ensuring consistent spacing between groups.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/docs/implementing-2-to-1-spacing.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst xScale0 = d3ScaleBand()\n    .domain(this._xAxisLabels)\n    .range([this.margins.left! + this._domainMargin, containerWidth! - this.margins.right! - this._domainMargin])\n    .paddingInner(2 / (2 + this._keys.length + (this._keys.length - 1) * BAR_GAP_RATE));\n```\n\n----------------------------------------\n\nTITLE: FluentUI Visual Regression Tests Changelog Entry\nDESCRIPTION: Markdown changelog entry documenting version 9.0.0-rc.0 updates and dependency version bumps for FluentUI React components visual regression tests.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/vr-tests-react-components/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.0.0-rc.0](https://github.com/microsoft/fluentui/tree/@fluentui/vr-tests-react-components_v9.0.0-rc.0)\n\nTue, 28 Jun 2022 17:39:54 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/vr-tests-react-components_v9.0.0-rc.0..@fluentui/vr-tests-react-components_v9.0.0-rc.0)\n\n### Patches\n\n- Bump @fluentui/react-accordion to v9.0.1 ([PR #23754](https://github.com/microsoft/fluentui/pull/23754) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Basic Image Component Migration Example\nDESCRIPTION: Shows the basic import and usage changes required when migrating the Image component from react-northstar to react-components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Image.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Image } from '@fluentui/react-northstar';\nconst Component = () => <Image />;\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Image } from '@fluentui/react-components';\nconst Component = () => <Image />;\n```\n\n----------------------------------------\n\nTITLE: Bumping FluentUI React Monaco Editor Version with PR\nDESCRIPTION: This snippet shows how to bump the version of the @fluentui/react-monaco-editor package. The pull request number provides a direct link to the change within the repository. This action is part of maintaining the dependencies for the project.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-docsite-components/CHANGELOG.md#2025-04-20_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n\"- Bump @fluentui/react-monaco-editor to v1.7.140 ([PR #29603](https://github.com/microsoft/fluentui/pull/29603) by beachball)\"\n```\n\n----------------------------------------\n\nTITLE: Creating Jest webpack configuration for testing React components\nDESCRIPTION: Generates a specialized webpack configuration for Jest tests in React component libraries. Includes mock configurations for browser APIs and specific loaders for test files.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-teaching-popover/stories/src/TeachingPopover/TeachingPopoverDescription.md#2025-04-20_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function createJestConfig(options = {}) {\n  options.outDir = 'dist';\n\n  let webpackConfig = createWebpackConfig(options);\n\n  webpackConfig = {\n    ...webpackConfig,\n    mode: 'development',\n    output: {\n      ...webpackConfig.output,\n      libraryTarget: 'commonjs2',\n      // Don't use hashes in jest tests\n      filename: '[name].js',\n      path: resolveCwd(options.outDir),\n    },\n\n    externals: {\n      ...webpackConfig.externals,\n      'react/addons': true,\n      'react/lib/ExecutionEnvironment': true,\n      'react/lib/ReactContext': true,\n    },\n\n    plugins: [], // Don't use any of the plugins we've defined\n\n    resolve: {\n      ...webpackConfig.resolve,\n      extensions: ['.js', '.jsx', '.json', '.ts', '.tsx'],\n      alias: {\n        ...webpackConfig.resolve.alias,\n        '@fluentui/react/next': resolveCwd('lib'),\n      },\n      fallback: {\n        ...webpackConfig.resolve.fallback,\n        path: require.resolve('path-browserify'),\n        crypto: require.resolve('crypto-browserify'),\n        stream: require.resolve('stream-browserify'),\n        'crypto-browserify': require.resolve('crypto-browserify'),\n      },\n    },\n\n    optimization: {\n      ...webpackConfig.optimization,\n      nodeEnv: false,\n    },\n\n    module: {\n      ...webpackConfig.module,\n      rules: [\n        {\n          test: /\\.(jpg|svg|scss|png|gif)$/,\n          use: 'file-loader',\n        },\n        {\n          test: /\\.css$/,\n          exclude: /\\.module\\.css$/,\n          use: [\n            {\n              loader: 'style-loader',\n            },\n            {\n              loader: 'css-loader',\n              options: {\n                importLoaders: 1,\n              },\n            },\n          ],\n        },\n        {\n          test: /\\.module\\.css$/,\n          use: [\n            {\n              loader: 'style-loader',\n            },\n            {\n              loader: 'css-loader',\n              options: {\n                importLoaders: 1,\n                modules: {\n                  localIdentName: '[name]_[local]_[hash:base64:5]',\n                  auto: true,\n                },\n              },\n            },\n          ],\n        },\n      ],\n    },\n  };\n\n  let lazyConsoleLog = () => {};\n  if (options.logger) {\n    lazyConsoleLog = options.logger.log || lazyConsoleLog;\n  }\n\n  // If there is a webpack config factory function return the result of it\n  if (options.webpackConfigPath) {\n    let pathToConfig = path.resolve(process.cwd(), options.webpackConfigPath);\n    if (fs.existsSync(pathToConfig)) {\n      lazyConsoleLog(\"Using webpack config path from '\" + options.webpackConfigPath + \"'.\");\n      // eslint-disable-next-line @typescript-eslint/no-var-requires -- Already handled.\n      const customConfig = require(pathToConfig);\n\n      if (typeof customConfig === 'function') {\n        lazyConsoleLog(\"Found custom webpack config factory, executing 'customConfig(webpackConfig)'\");\n        return customConfig(webpackConfig);\n      }\n\n      return customConfig;\n    }\n  }\n\n  return webpackConfig;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Unmount Behavior for Child Components in Fluent UI\nDESCRIPTION: This snippet explains how to set the `unmountOnExit` property to control component mounting behavior. Setting this property to true will unmount the child component after the animation has completed, which can help in scenarios where reducing the component's footprint is desired.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-motion/stories/src/CreatePresenceComponent/CreatePresenceComponentUnmountOnExit.stories.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nSet `unmountOnExit` if you'd prefer to unmount the component after it finishes the animation.\n```\n\n----------------------------------------\n\nTITLE: Proposed Package Layout Structure\nDESCRIPTION: Shows the proposed package organization where Field components are exported from their base component packages.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/field-package-layout.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- `@fluentui/react-field` exports:\n  - Field utilities (`useField_unstable`, etc.)\n- `@fluentui/react-input` exports:\n  - `Input`\n  - `InputField`\n```\n\n----------------------------------------\n\nTITLE: Defining IEventRecord Interface in TypeScript\nDESCRIPTION: Defines an internal interface for event records, including callback functions, event name, and target information.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/utilities/etc/utilities.api.md#2025-04-20_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface IEventRecord {\n    callback: (args?: any) => void;\n    elementCallback?: (...args: any[]) => void;\n    eventName: string;\n    objectCallback?: (args?: any) => void;\n    options?: boolean | AddEventListenerOptions;\n    parent: any;\n    target: any;\n}\n```\n\n----------------------------------------\n\nTITLE: JSX to React Element Conversion in JavaScript\nDESCRIPTION: This JavaScript snippet shows the conversion of JSX syntax to React.createElement calls, highlighting how JSX elements are translated internally to manage children props.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/slot-children-render-function.md#2025-04-20_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nfunction render() {\n  return <slots.button {...slotProps.button}>{slotProps.root.children}</slots.button>;\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction render() {\n  return React.createElement(slots.button, slotProps.button, slotProps.root.children);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LocalizedFontFamilies Namespace in TypeScript for FluentUI\nDESCRIPTION: Namespace that provides predefined font family definitions for various locales and languages. These constants ensure proper font rendering across different language scripts and regions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/theme/etc/theme.api.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport namespace LocalizedFontFamilies {\n    const // (undocumented)\n    Arabic = \"'Segoe UI Web (Arabic)'\";\n    const // (undocumented)\n    ChineseSimplified = \"'Microsoft Yahei UI', Verdana, Simsun\";\n    const // (undocumented)\n    ChineseTraditional = \"'Microsoft Jhenghei UI', Pmingliu\";\n    const // (undocumented)\n    Cyrillic = \"'Segoe UI Web (Cyrillic)'\";\n    const // (undocumented)\n    EastEuropean = \"'Segoe UI Web (East European)'\";\n    const // (undocumented)\n    Greek = \"'Segoe UI Web (Greek)'\";\n    const // (undocumented)\n    Hebrew = \"'Segoe UI Web (Hebrew)'\";\n    const // (undocumented)\n    Hindi = \"'Nirmala UI'\";\n    const // (undocumented)\n    Japanese = \"'Yu Gothic UI', 'Meiryo UI', Meiryo, 'MS Pgothic', Osaka\";\n    const // (undocumented)\n    Korean = \"'Malgun Gothic', Gulim\";\n    const // (undocumented)\n    Selawik = \"'Selawik Web'\";\n    const // (undocumented)\n    Thai = \"'Leelawadee UI Web', 'Kmer UI'\";\n    const // (undocumented)\n    Vietnamese = \"'Segoe UI Web (Vietnamese)'\";\n    const // (undocumented)\n    WestEuropean = \"'Segoe UI Web (West European)'\";\n    const // (undocumented)\n    Armenian = \"'Segoe UI Web (Armenian)'\";\n    const // (undocumented)\n    Georgian = \"'Segoe UI Web (Georgian)'\";\n}\n```\n\n----------------------------------------\n\nTITLE: Render Combobox Unstable Definition\nDESCRIPTION: This snippet defines the unstable render function for the Combobox component, taking the state and context values as arguments and returning a JSX element.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/library/etc/react-combobox.api.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const renderCombobox_unstable: (state: ComboboxState, contextValues: ComboboxContextValues) => JSX.Element;\"\n```\n\n----------------------------------------\n\nTITLE: Remove On Theme Change Callback Function\nDESCRIPTION: Defines a function, `removeOnThemeChangeCallback`, which removes a previously registered theme change callback function. This stops the callback from being executed on subsequent theme changes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/style-utilities/etc/style-utilities.api.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n\"export function removeOnThemeChangeCallback(callback: (theme: ITheme) => void): void;\"\n```\n\n----------------------------------------\n\nTITLE: Defining Color Scale Domain and Range for Heatmap in JavaScript\nDESCRIPTION: This snippet demonstrates how to define the color scale for a heatmap chart using domain and range arrays. The domain represents values in the chart columns, while the range specifies colors in hex format. The chart creates a mapping between domain values and range colors.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-examples/src/react-charting/HeatMapChart/docs/HeatMapChartBestPractices.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst domainValuesForColorScale = [0, 500, 900];\nconst rangeValuesForColorScale = ['#00FF00', '#0000FF', '#FF0000'];\n```\n\n----------------------------------------\n\nTITLE: Stardust Button Token Interface\nDESCRIPTION: Type definitions for Stardust Button component design tokens, including styling properties for different states and variants like circular and size-specific tokens.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Button.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nbackgroundColor: string\nbackgroundColorActive: string\nbackgroundColorDisabled: string\nbackgroundColorFocus: string\nbackgroundColorHover: string\nborderColor: string\nborderColorDisabled: string\nborderColorHover: string\nborderRadius: string\nboxShadow: string\ncircularBackgroundColor: string\ncircularBackgroundColorActive: string\ncircularBackgroundColorFocus: string\ncircularBackgroundColorHover: string\ncircularBorderColor: string\ncircularBorderColorFocus: string\ncircularBorderColorHover: string\ncircularBorderRadius: string\ncircularColor: string\ncircularColorActive: string\ncolor: string\ncolorDisabled: string\ncolorFocus: string\ncolorHover: string\ncontentFontSize: string\ncontentFontWeight: Property.FontWeight\ncontentLineHeight: string\nheight: string\nloaderBorderSize: string\nloaderSize: string\nloaderSvgAnimationHeight: string\nloaderSvgHeight: string\nloadingMinWidth: string\nmaxWidth: string\nminWidth: string\npadding: string\nsizeSmallContentFontSize: string\nsizeSmallContentLineHeight: string\nsizeSmallHeight: string\nsizeSmallLoaderBorderSize: string\nsizeSmallLoaderSvgAnimationHeight: string\nsizeSmallLoaderSvgHeight: string\nsizeSmallMinWidth: string\nsizeSmallPadding: string\ntextColor: string\ntextColorDisabled: string\ntextColorHover: string\ntextPrimaryColor: string\ntextPrimaryColorHover: string\n```\n\n----------------------------------------\n\nTITLE: Markdown Tables - Input Component Appearance Specifications\nDESCRIPTION: Tables defining styling specifications for different input appearances, including colors, borders, and focus states\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-input/library/docs/Spec-styling.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Style                | Application          | outline                 | underline             | filledDarker       | filledLighter      |\n| -------------------- | -------------------- | ----------------------- | --------------------- | ------------------ | ------------------ |\n| shadow               | root                 | none                    | \"                     | shadow2            | \"                  |\n| background           | root, input          | neutralBackground1      | transparentBackground | neutralBackground3 | neutralBackground1 |\n| border               | root                 | neutralStroke1          | none                  | transparentStroke  | \"                  |\n| border hover         | root `:hover`        | ^Hover                  | n/a                   | ^Interactive       | \"                  |\n| border pressed       | root `:active`       | ^^Pressed               | n/a                   | ^                  | \"                  |\n| border focused       | root `:focus-within` | n/a (neutralStroke1)    | n/a                   | ^                  | \"                  |\n```\n\n----------------------------------------\n\nTITLE: Flex with Flex.Item push\nDESCRIPTION: This example demonstrates an optimized approach to create the same navigation menu layout by using Flex.Item with the push prop to move elements to the right side. This reduces unnecessary DOM nesting.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/docs/src/examples/components/Flex/Recipes.mdx#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n\"<Flex gap=\\\"gap.small\\\">\\n    <Button content=\\\"Logo\\\" icon={<SkypeLogoIcon />} />\\n    <Flex.Item push>\\n      <Button content=\\\"Page 1\\\" />\\n    </Flex.Item>\\n    <Button content=\\\"Page 2\\\" />\\n    <Button content=\\\"Page 3\\\" />\\n  </Flex>\"\n```\n\n----------------------------------------\n\nTITLE: Adding Months to a Date - TypeScript\nDESCRIPTION: This function enables you to add a specific number of months to a given date and returns the new Date object. It is essential for operations requiring month adjustments.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/date-time-utilities/etc/date-time-utilities.api.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport function addMonths(date: Date, months: number): Date;\n```\n\n----------------------------------------\n\nTITLE: Merged Styles Selector Example\nDESCRIPTION: Example of comma-delimited selectors support added in version 6.13.0 for merge-styles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/merge-styles/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n.class1, .class2 { color: red; }\n```\n\n----------------------------------------\n\nTITLE: Equivalent Checkbox Usage in Fluent UI v9\nDESCRIPTION: Shows the equivalent usage of the Checkbox component in Fluent UI v9, highlighting the changes in API, particularly for the indeterminate state.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Checkbox.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { Checkbox } from '@fluentui/react-components';\n\nconst CheckboxV9BasicExample = () => {\n  return (\n    <>\n      <Checkbox checked label=\"Checked\" />\n      <Checkbox disabled label=\"Disabled\" />\n      <Checkbox checked=\"mixed\" label=\"Mixed\" />\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Consuming window and document objects\nDESCRIPTION: This snippet demonstrates how to consume the window and document objects using the `useWindow` and `useDocument` hooks provided by the @fluentui/react-window-provider package. It retrieves the correct instances of `window` and `document` for the current rendering context.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-window-provider/README.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst Foo = () => {\n  const win = useWindow();\n  const doc = useDocument();\n\n  return </>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Meta Title for Storybook\nDESCRIPTION: This Meta JSX component sets the title for the Storybook documentation. The title organizes the story under 'Concepts/Developer/V2 → V3 Migration Guide'.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/_docs/developer/migration.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<Meta title=\"Concepts/Developer/V2 → V3 Migration Guide\" />\n```\n\n----------------------------------------\n\nTITLE: Combobox with Grouped Options\nDESCRIPTION: This code snippet demonstrates how to group options within a Combobox using the OptionGroup component in FluentUI React. It creates semantic and visual groupings with optional group labels.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/library/docs/Spec.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n<label id=\"pets\">Best pet</label>\n<Combobox aria-labelledby=\"pets\">\n  <OptionGroup label=\"Land\">\n    <Option key=\"cat\">Cat</Option>\n    <Option key=\"dog\">Dog</Option>\n    <Option key=\"ferret\">Ferret</Option>\n  </OptionGroup>\n  <OptionGroup label=\"Water\">\n    <Option key=\"fish\">Fish</Option>\n    <Option key=\"turtle\">Turtle</Option>\n  </OptionGroup>\n</Combobox>\n```\n\n----------------------------------------\n\nTITLE: Implementing an Image Card Layout in JSX\nDESCRIPTION: Sample code for creating a card with an image preview, informational content in multiple sections, and an interactive footer with a share button.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-card/library/docs/Spec.md#2025-04-20_snippet_10\n\nLANGUAGE: JSX\nCODE:\n```\n<Card>\n  <CardPreview src=\"monkey.png\" alt=\"image of monkey\" />\n  <div>\n    <span>Length</span>\n    <span>4.6-39.6 IN</span>\n    <span>11.7-100.6 cm</span>\n  </div>\n  <div>\n    <span>Diet</span>\n    <span>Omnivore</span>\n    <span>nuts, fruits, eggs</span>\n  </div>\n  <CardFooter>\n    <Button>Share</Button>\n  </CardFooter>\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Defining Vertical Stacked Bar Chart Properties Interface in TypeScript\nDESCRIPTION: The IVerticalStackedBarChartProps interface represents the properties for a vertical stacked bar chart component, allowing customizations for stacking, display, and interactions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/etc/react-charting.api.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface IVerticalStackedBarChartProps extends ICartesianChartProps {\n    allowHoverOnLegend?: boolean;\n    barCornerRadius?: number;\n    barGapMax?: number;\n    barMinimumHeight?: number;\n    barWidth?: number | 'default' | 'auto';\n    calloutProps?: Partial<ICalloutProps>;\n    chartTitle?: string;\n    // @deprecated\n    colors?: string[];\n    culture?: string;\n    data: IVerticalStackedChartProps[];\n    enableGradient?: boolean;\n    hideLabels?: boolean;\n    isCalloutForStack?: boolean;\n    lineOptions?: ILineChartLineOptions;\n    maxBarWidth?: number;\n    mode?: 'default' | 'plotly';\n    onBarClick?: (event: React_2.MouseEvent<SVGElement>, data: IVerticalStackedChartProps | IVSChartDataPoint) => void;\n    onRenderCalloutPerDataPoint?: IRenderFunction<IVSChartDataPoint>;\n    onRenderCalloutPerStack?: IRenderFunction<IVerticalStackedChartProps>;\n    roundCorners?: boolean;\n    styles?: IStyleFunctionOrObject<IVerticalStackedBarChartStyleProps, IVerticalStackedBarChartStyles>;\n    xAxisInnerPadding?: number;\n    xAxisOuterPadding?: number;\n    xAxisPadding?: number;\n    yMinValue?: undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Building Production App with npm\nDESCRIPTION: This command builds the application for production, creating an optimized bundle in the build folder. It ensures that React is bundled in production mode and minified for performance. It requires a production environment set up through the Create React App framework.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/cra-template/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Setting Sizes for TabList in Fluent UI React\nDESCRIPTION: This snippet demonstrates how to apply different sizes to a TabList, affecting the padding and spacing of the tab elements. It shows both small and medium size configurations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tabs/library/docs/Spec.md#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<TabList size=\"small\">\n  {/* ... */}\n</TabList>\n\n<TabList size=\"medium\">\n  {/* ... */}\n</TabList>\n```\n\n----------------------------------------\n\nTITLE: Defining Theme and Token Type Interfaces in TypeScript for FluentUI\nDESCRIPTION: Type definitions for the FluentUI theming system. This includes various token categories such as colors, typography, spacing, and animation that compose the complete theme interface. The file also includes functions for theme creation and predefined themes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/tokens/etc/tokens.api.md#2025-04-20_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport const createDarkTheme: (brand: BrandVariants) => Theme;\n\n// @public (undocumented)\nexport const createHighContrastTheme: () => Theme;\n\n// @public (undocumented)\nexport const createLightTheme: (brand: BrandVariants) => Theme;\n\n// @public (undocumented)\nexport const createTeamsDarkTheme: (brand: BrandVariants) => Theme;\n\n// @public (undocumented)\nexport type CurveTokens = {\n    curveAccelerateMax: string;\n    curveAccelerateMid: string;\n    curveAccelerateMin: string;\n    curveDecelerateMax: string;\n    curveDecelerateMid: string;\n    curveDecelerateMin: string;\n    curveEasyEaseMax: string;\n    curveEasyEase: string;\n    curveLinear: string;\n};\n\n// @public (undocumented)\nexport type DurationTokens = {\n    durationUltraFast: string;\n    durationFaster: string;\n    durationFast: string;\n    durationNormal: string;\n    durationGentle: string;\n    durationSlow: string;\n    durationSlower: string;\n    durationUltraSlow: string;\n};\n\n// @public (undocumented)\nexport type FontFamilyTokens = {\n    fontFamilyBase: string;\n    fontFamilyMonospace: string;\n    fontFamilyNumeric: string;\n};\n\n// @public (undocumented)\nexport type FontSizeTokens = {\n    fontSizeBase100: string;\n    fontSizeBase200: string;\n    fontSizeBase300: string;\n    fontSizeBase400: string;\n    fontSizeBase500: string;\n    fontSizeBase600: string;\n    fontSizeHero700: string;\n    fontSizeHero800: string;\n    fontSizeHero900: string;\n    fontSizeHero1000: string;\n};\n\n// @public (undocumented)\nexport type FontWeightTokens = {\n    fontWeightRegular: number;\n    fontWeightMedium: number;\n    fontWeightSemibold: number;\n    fontWeightBold: number;\n};\n\n// @public (undocumented)\nexport type HorizontalSpacingTokens = {\n    spacingHorizontalNone: string;\n    spacingHorizontalXXS: string;\n    spacingHorizontalXS: string;\n    spacingHorizontalSNudge: string;\n    spacingHorizontalS: string;\n    spacingHorizontalMNudge: string;\n    spacingHorizontalM: string;\n    spacingHorizontalL: string;\n    spacingHorizontalXL: string;\n    spacingHorizontalXXL: string;\n    spacingHorizontalXXXL: string;\n};\n\n// @public (undocumented)\nexport type LineHeightTokens = {\n    lineHeightBase100: string;\n    lineHeightBase200: string;\n    lineHeightBase300: string;\n    lineHeightBase400: string;\n    lineHeightBase500: string;\n    lineHeightBase600: string;\n    lineHeightHero700: string;\n    lineHeightHero800: string;\n    lineHeightHero900: string;\n    lineHeightHero1000: string;\n};\n\n// @public (undocumented)\nexport type PartialTheme = Partial<Theme>;\n\n// @public (undocumented)\nexport type ShadowBrandTokens = {\n    shadow2Brand: string;\n    shadow4Brand: string;\n    shadow8Brand: string;\n    shadow16Brand: string;\n    shadow28Brand: string;\n    shadow64Brand: string;\n};\n\n// @public\nexport type ShadowTokens = {\n    shadow2: string;\n    shadow4: string;\n    shadow8: string;\n    shadow16: string;\n    shadow28: string;\n    shadow64: string;\n};\n\n// @public (undocumented)\nexport type SpacingTokens = {\n    none: string;\n    xxs: string;\n    xs: string;\n    sNudge: string;\n    s: string;\n    mNudge: string;\n    m: string;\n    l: string;\n    xl: string;\n    xxl: string;\n    xxxl: string;\n};\n\n// @public (undocumented)\nexport type StrokeWidthTokens = {\n    strokeWidthThin: string;\n    strokeWidthThick: string;\n    strokeWidthThicker: string;\n    strokeWidthThickest: string;\n};\n\n// @public (undocumented)\nexport const teamsDarkTheme: Theme;\n\n// @public (undocumented)\nexport const teamsHighContrastTheme: Theme;\n\n// @public (undocumented)\nexport const teamsLightTheme: Theme;\n\n// @public (undocumented)\nexport type Theme = FontSizeTokens & LineHeightTokens & BorderRadiusTokens & StrokeWidthTokens & HorizontalSpacingTokens & VerticalSpacingTokens & DurationTokens & CurveTokens & ShadowTokens & ShadowBrandTokens & FontFamilyTokens & FontWeightTokens & ColorPaletteTokens & ColorStatusTokens & ColorTokens & ZIndexTokens;\n\n// @public\nexport function themeToTokensObject<TTheme extends Theme>(theme: TTheme): Record<keyof TTheme, string>;\n\n// @public (undocumented)\nexport const tokens: Record<keyof Theme, string>;\n\n// @public (undocumented)\nexport type TypographyStyle = {\n    fontFamily: string;\n    fontSize: string;\n    fontWeight: string;\n    lineHeight: string;\n};\n\n// @public (undocumented)\nexport type TypographyStyles = {\n    body1: TypographyStyle;\n    body1Strong: TypographyStyle;\n    body1Stronger: TypographyStyle;\n    body2: TypographyStyle;\n    caption1: TypographyStyle;\n    caption1Strong: TypographyStyle;\n    caption1Stronger: TypographyStyle;\n    caption2: TypographyStyle;\n    caption2Strong: TypographyStyle;\n    subtitle1: TypographyStyle;\n    subtitle2: TypographyStyle;\n    subtitle2Stronger: TypographyStyle;\n    title1: TypographyStyle;\n    title2: TypographyStyle;\n    title3: TypographyStyle;\n    largeTitle: TypographyStyle;\n};\n```\n\n----------------------------------------\n\nTITLE: Version 9.0.0-alpha.64 Changelog Entry\nDESCRIPTION: Changelog entry showing button jump effect fix, theme token updates, and children prop handling changes\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-button/library/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.0.0-alpha.64](https://github.com/microsoft/fluentui/tree/@fluentui/react-button_v9.0.0-alpha.64)\n\nFri, 23 Jul 2021 07:38:19 GMT\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-button_v9.0.0-alpha.63..@fluentui/react-button_v9.0.0-alpha.64)\n\n### Changes\n\n- Fix button jump effect on border disparities ([PR #19035](https://github.com/microsoft/fluentui/pull/19035) by bsunderhus@microsoft.com)\n- Update theme tokens ([PR #19041](https://github.com/microsoft/fluentui/pull/19041) by miroslav.stastny@microsoft.com)\n- Button: Handling children correctly and not as a slot. ([PR #19085](https://github.com/microsoft/fluentui/pull/19085) by Humberto.Morimoto@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Version History Entry - 9.12.2\nDESCRIPTION: Version update containing dependency version bumps and peer dependency fixes\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-positioning/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.12.2]\\nTue, 16 Jan 2024 13:14:22 GMT\\n\\n### Patches\\n- chore: bumps @floating-ui/devtools version to latest\\n- fix: correct version of @types/react-dom peer dep that matches for 16.x\n```\n\n----------------------------------------\n\nTITLE: Equivalent Input Implementation in Fluent UI v9\nDESCRIPTION: The equivalent implementation of a basic Input with label in Fluent UI v9. In v9, the Input and Label are separate components that need to be manually associated using htmlFor/id attributes, and styled with makeStyles for layout.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Input.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { makeStyles, Label, Input } from '@fluentui/react-components';\nimport { useId } from '@fluentui/react-utilities';\n\nconst useLayoutStyles = makeStyles({\n  root: {\n    maxWidth: '300px',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n});\n\nconst InputV9BasicExample = () => {\n  const layoutStyles = useLayoutStyles();\n  const inputId = useId('input');\n  return (\n    <div className={layoutStyles.root}>\n      <Label htmlFor={inputId}>Search</Label>\n      <Input id={inputId} />\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining TextFieldBase Component in TypeScript\nDESCRIPTION: TypeScript class definition for the base TextField component that implements ITextField interface. Contains lifecycle methods and text manipulation functions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_269\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class TextFieldBase extends React_2.Component<ITextFieldProps, ITextFieldState, ITextFieldSnapshot> implements ITextField {\n    constructor(props: ITextFieldProps);\n    blur(): void;\n    // (undocumented)\n    componentDidMount(): void;\n    // (undocumented)\n    componentDidUpdate(prevProps: ITextFieldProps, prevState: ITextFieldState, snapshot: ITextFieldSnapshot): void;\n    // (undocumented)\n    componentWillUnmount(): void;\n    // (undocumented)\n    static defaultProps: ITextFieldProps;\n    focus(): void;\n    // (undocumented)\n    getSnapshotBeforeUpdate(prevProps: ITextFieldProps, prevState: ITextFieldState): ITextFieldSnapshot | null;\n    // (undocumented)\n    render(): JSX.Element;\n    select(): void;\n    get selectionEnd(): number | null;\n    get selectionStart(): number | null;\n    setSelectionEnd(value: number): void;\n    setSelectionRange(start: number, end: number): void;\n    setSelectionStart(value: number): void;\n    get value(): string | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Positioning Shorthand Usage Examples\nDESCRIPTION: Examples demonstrating various ways to use the new positioning shorthand syntax.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/exposing-popper-options.md#2025-04-20_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// Shorthand for `position` and `align` options\n<PositionedComponent positioning=\"above-start\">\n<PositionedComponent positioning={{position: 'above', align: 'start'}}>\n\n<PositionedComponent positioning=\"above\">\n<PositionedComponent positioning={{position: 'above'}}>\n\n// Also allows more complex configuration\n<PositionedComponent positioning={{position: 'above', align: 'start', autoSize: true}}>\n```\n\n----------------------------------------\n\nTITLE: Migrating Image Style Variables\nDESCRIPTION: Demonstrates how to migrate custom style variables from the old variables prop pattern to the new makeStyles approach using className.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Image.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// in COMPONENT_NAME.tsx\nimport { Image } from '@fluentui/react-northstar';\n\nexport const Component = () => <Image variables={{ isCustomImage: true }} />;\n\n// in image-styles.ts\nexport const imageStyles1 = {\n  root: ({ variables: { isCustomImage } }) => ({\n    ...(isCustomImage && {\n      opacity: 0.75,\n    }),\n  }),\n};\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// in COMPONENT_NAME.tsx\nimport { Image } from '@fluentui/react-components';\nimport { useStyles } from './COMPONENT_NAME.styles.ts';\n\nexport const Component = () => {\n  const classes = useStyles();\n  return <Image className={classes.customImage} />;\n};\n\n// in COMPONENT_NAME.styles.ts\nimport { makeStyles } from '@fluentui/react-components';\n\nexport const useStyles = makeStyles({\n  customImage: {\n    opacity: 0.75,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Menu Item Slot Configuration\nDESCRIPTION: Demonstrates the various slot options available for customizing menu item content and indicators\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/menu-item/README.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<fluent-menu-item>\n  <div slot=\"before\">Icon</div>\n  Default Content\n  <div slot=\"after\">Additional Info</div>\n  <div slot=\"submenu\">Nested Menu</div>\n</fluent-menu-item>\n```\n\n----------------------------------------\n\nTITLE: People Personas in TypeScript\nDESCRIPTION: This constant represents an array of persona objects that can be used throughout the application to display user information in various UI elements. It adheres to the structure of extended persona props.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/example-data/etc/example-data.api.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal\nexport const people: (IExampleExtendedPersonaProps & {\n    key: string | number;\n})[];\n```\n\n----------------------------------------\n\nTITLE: Test Plan Documentation in Markdown\nDESCRIPTION: Markdown formatted test plan that covers snapshot testing, props testing, render validation, mouse events, and sub-component testing for a Vertical Stacked Bar Chart component\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/docs/TestPlans/VerticalStackedBarChart/ComponentTests.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**Vertical Stacked Bar Chart – Component test plan**\n\n**Sub-components: Bar, Line, Legends, Callout, Labels**\n\n1. **Bar: Bar data, Bar color (single/multiple), bar label**\n1. **Line: show/hide line, highlight data points on line and show callout**\n1. **Legends: show/hide legends, highlight the corresponding bar/line on legend hover**\n1. **Callout: Default/custom callout**\n1. **Labels: x-Axis labels default/rotated**\n```\n\n----------------------------------------\n\nTITLE: Stardust Checkbox Example DOM Structure in HTML\nDESCRIPTION: This HTML snippet illustrates the DOM structure of a Stardust Checkbox. The structure heavily relies on nested divs and spans with complex class names for styling and behavior. It also includes an SVG element for the checkmark icon.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Checkbox.md#2025-04-20_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div\n  class=\"ui-checkbox dd ol om gz de nb on cd oo op cb oq ha hb hc hd he hf hg hh hi hj hk hl hm hn ho hp or os ot ou hu hv hw hx ov ow ox oy ic id ie if ig ih ii ij ik il im oz pa pb pc ir is it iu pd pe pf pg lu ph pi pj pk\"\n  aria-checked=\"false\"\n  role=\"checkbox\"\n  tabindex=\"0\"\n>\n  <span\n    class=\"ui-icon ck cb ca jm pl pm pn po pp pq pr ba bb bc bd do dp jy jz ps pt pu pv pw px gu jo gw py pz qa qb ui-checkbox__indicator\"\n    role=\"img\"\n    aria-hidden=\"true\"\n  >\n    <svg role=\"presentation\" focusable=\"false\" viewBox=\"8 8 16 16\" class=\"cz ql qm da cw\">\n      <g>\n        <path\n          class=\"ui-icon__outline cy\"\n          d=\"M14.3 21.3c-.1 0-.3 0-.4-.1l-4.8-4.8c-.2-.2-.2-.5 0-.7s.5-.2.7 0l4.4 4.4 7.9-7.9c.2-.2.5-.2.7 0s.2.5 0 .7l-8.3 8.3s-.1.1-.2.1z\"\n        ></path>\n        <path\n          class=\"ui-icon__filled\"\n          d=\"M23.5 11.875a.968.968 0 0 1-.289.711l-8.25 8.25c-.192.193-.43.289-.711.289s-.519-.096-.711-.289l-4.75-4.75a.965.965 0 0 1-.289-.711c0-.125.027-.25.082-.375s.129-.234.223-.328a.953.953 0 0 1 .695-.297c.135 0 .266.025.391.074.125.05.231.121.32.215l4.039 4.047 7.539-7.547a.886.886 0 0 1 .32-.215c.125-.049.255-.074.391-.074a1.004 1.004 0 0 1 .922.625.97.97 0 0 1 .078.375z\"\n        ></path>\n      </g>\n    </svg>\n  </span>\n  <span class=\"ui-text cz qk ui-checkbox__label\" dir=\"auto\">Make my profile visible</span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: TagPickerInput State Type\nDESCRIPTION: Defines the state type for the TagPickerInput component. It includes properties from ComponentState and TagPickerContextValue, as well as disabled property.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport type TagPickerInputState = ComponentState<TagPickerInputSlots> & Pick<TagPickerContextValue, 'size' | 'disabled'>;\"\n```\n\n----------------------------------------\n\nTITLE: Defining SkeletonItem Component API in TypeScript\nDESCRIPTION: This code snippet defines the API for the SkeletonItem component, including props, state, rendering functions, and styling hooks. It includes specific properties for customizing the appearance of individual skeleton items.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-skeleton/library/etc/react-skeleton.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const renderSkeletonItem_unstable: (state: SkeletonItemState) => JSX.Element;\n\n// @public (undocumented)\nexport const SkeletonItem: ForwardRefComponent<SkeletonItemProps>;\n\n// @public (undocumented)\nexport const skeletonItemClassNames: SlotClassNames<SkeletonItemSlots>;\n\n// @public\nexport type SkeletonItemProps = ComponentProps<SkeletonItemSlots> & {\n  animation?: 'wave' | 'pulse';\n  appearance?: 'opaque' | 'translucent';\n  size?: SkeletonItemSize;\n  shape?: 'circle' | 'square' | 'rectangle';\n};\n\n// @public (undocumented)\nexport type SkeletonItemSlots = {\n  root: Slot<'div'>;\n};\n\n// @public\nexport type SkeletonItemState = ComponentState<SkeletonItemSlots> &\n  Required<Pick<SkeletonItemProps, 'animation' | 'appearance' | 'size' | 'shape'>>;\n\n// @public\nexport const useSkeletonItem_unstable: (props: SkeletonItemProps, ref: React_2.Ref<HTMLElement>) => SkeletonItemState;\n\n// @public\nexport const useSkeletonItemStyles_unstable: (state: SkeletonItemState) => SkeletonItemState;\n```\n\n----------------------------------------\n\nTITLE: Calculate Required Width for Bars\nDESCRIPTION: Calculates the total width required to render all bars with the specified bar width and 2:1 spacing. This value is later compared with the total available width to determine whether to center-align the chart or adjust the bar width.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/docs/implementing-2-to-1-spacing.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst reqWidth = this._xAxisLabels.length * barWidth + (this._xAxisLabels.length - 1) * barWidth * 2;\n```\n\n----------------------------------------\n\nTITLE: Migrating Button Loading State in React\nDESCRIPTION: Demonstrates how to migrate a Button with loading state from @fluentui/react-northstar to @fluentui/react-components. The new approach uses a Loader component inside the Button.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Button.stories.mdx#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from '@fluentui/react-northstar';\nconst Component = () => <Button loading content=\"Loading\" />;\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from '@fluentui/react-components';\nimport { Loader } from '@fluentui/react-northstar';\nconst Component = () => (\n  <Button>\n    <Loader size=\"smallest\" />\n    Loading\n  </Button>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing useFluent_unstable Hook in TypeScript\nDESCRIPTION: TypeScript function implementation for the useFluent_unstable hook that returns the provider context value.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-shared-contexts/library/etc/react-shared-contexts.api.md#2025-04-20_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport function useFluent_unstable(): ProviderContextValue_unstable;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories for React Tag Picker\nDESCRIPTION: This configuration snippet exports a module that specifies the globs for loading story files related to the react-tag-picker component in Storybook. It targets stories written in MDX and TypeScript, enabling documentation and visualization of the component's various states and usages.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-tag-picker/stories/src/**/*.stories.mdx', '../packages/react-components/react-tag-picker/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SNode Type in TypeScript\nDESCRIPTION: The SNode type denotes a node within the Sankey diagram, allowing for custom extensions while maintaining core properties through generics.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/etc/react-charting.api.md#2025-04-20_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type SNode = SankeyNode<ISNodeExtra, ISLinkExtra>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Label Component in TypeScript\nDESCRIPTION: Defines the Label component class extending FASTElement with properties for disabled state, size, and weight settings. Includes type definitions and change handlers.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Label extends FASTElement {\n    disabled: boolean;\n    disabledChanged(prev: boolean | undefined, next: boolean | undefined): void;\n    // @internal\n    elementInternals: ElementInternals;\n    required: boolean;\n    size?: LabelSize;\n    sizeChanged(prev: LabelSize | undefined, next: LabelSize | undefined): void;\n    weight?: LabelWeight;\n    weightChanged(prev: LabelWeight | undefined, next: LabelWeight | undefined): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ES Target for Beta and RC Components in TypeScript\nDESCRIPTION: Updates the ECMAScript target to ES2019 for beta and release candidate components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-theme/library/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Updated in PR #20405\n// Target: ES2019\n```\n\n----------------------------------------\n\nTITLE: Sticky Component Interfaces in TypeScript\nDESCRIPTION: Interfaces for the Sticky component, defining props and state for creating elements that can stick to the top or bottom of a container while scrolling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_183\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface IStickyProps extends IReactProps<Sticky> {\n    componentRef?: IRefObject<IStickyProps>;\n    isScrollSynced?: boolean;\n    stickyBackgroundColor?: string;\n    stickyClassName?: string;\n    stickyPosition?: StickyPositionType;\n}\n\n// @public (undocumented)\nexport interface IStickyState {\n    // (undocumented)\n    distanceFromTop?: number;\n    // (undocumented)\n    isStickyBottom: boolean;\n    // (undocumented)\n    isStickyTop: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DisplayToggle Component for Theme Switching in FluentUI React\nDESCRIPTION: This code demonstrates the use of the DisplayToggle component to switch between dark and light themes when displaying list cell examples. It contains image references showing different list cell layouts with theme variants.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/ListCellsPage/docs/android/ListCellsOverview.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<DisplayToggle onText=\"Dark\" offText=\"Light\" label=\"Theme Switcher\">\n### One line\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/android/updated/img_list_01_oneline_light.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/android/updated/img_list_01_oneline_dark.png?text=DarkMode\" />\n\n### Two line\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/android/updated/img_list_02_twoline_light.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/android/updated/img_list_02_twoline_dark.png?text=DarkMode\" />\n\n### Three line\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/android/updated/img_list_03_threeline_light.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/android/updated/img_list_03_threeline_dark.png?text=DarkMode\" />\n\n</DisplayToggle>\n```\n\n----------------------------------------\n\nTITLE: Reverting Incorrect NPM Versions in FluentUI React Table\nDESCRIPTION: This fix reverts incorrectly set NPM versions in all packages, including @fluentui/react-table. This resolves an issue where incorrect versions were published, ensuring that the correct dependencies and functionalities are used.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-table/library/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: none\nCODE:\n```\n\"fix: revert incorectly set npm versions in all packages ([PR #31937](https://github.com/microsoft/fluentui/pull/31937) by martinhochel@microsoft.com)\"\n```\n\n----------------------------------------\n\nTITLE: Bumping FluentUI Theme Version\nDESCRIPTION: This snippet shows how to bump the version of the @fluentui/theme package. The commit hash provides a direct link to the change within the repository. This action is part of maintaining the dependencies for the project.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-docsite-components/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n\"- Bump @fluentui/theme to v2.6.37 ([commit](https://github.com/microsoft/fluentui/commit/70d0762fd12eb211f7c1dbe31a23b2fbb73a67c4) by beachball)\"\n```\n\n----------------------------------------\n\nTITLE: AccordionItem Component Type Definition for Size Options in Markdown\nDESCRIPTION: Type definition for the Accordion Item size options, defining the available size variants as small, medium, large, and extra-large.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/accordion-item/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`AccordionItemSize`           | Expand modes for Accordion | `{ small: \"small\", medium: \"medium\", large: \"large\", extraLarge: \"extra-large\" }`\n```\n\n----------------------------------------\n\nTITLE: Importing Fluent UI React Field Component in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the Field component from @fluentui/react-components. It serves as a prerequisite step to use the Field component in your project.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-field/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Field } from '@fluentui/react-components';\n```\n\n----------------------------------------\n\nTITLE: Adding Gap Between Stack Items\nDESCRIPTION: This snippet demonstrates how to add spacing between Stack items using margins.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Flex/Flex.Stack.stories.mdx#2025-04-20_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nmakeStyles({\n  root: {\n    '> *': {\n      margin: '10px',\n    }\n  },\n})\n```\n\nLANGUAGE: css\nCODE:\n```\n.flex > * {\n  margin: 10px;\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting FluentUI Color Palette Variables in TypeScript\nDESCRIPTION: This code exports constant references to CSS custom properties that define the FluentUI color palette. Each export provides access to a specific color variant (like red, green, navy) in different contexts (background, border, foreground) and intensity levels.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const colorPaletteCornflowerForeground2 = \"var(--colorPaletteCornflowerForeground2)\";\n\n// @public\nexport const colorPaletteCranberryBackground2 = \"var(--colorPaletteCranberryBackground2)\";\n\n// @public\nexport const colorPaletteCranberryBorderActive = \"var(--colorPaletteCranberryBorderActive)\";\n\n// @public\nexport const colorPaletteCranberryForeground2 = \"var(--colorPaletteCranberryForeground2)\";\n\n// @public\nexport const colorPaletteDarkGreenBackground2 = \"var(--colorPaletteDarkGreenBackground2)\";\n\n// @public\nexport const colorPaletteDarkGreenBorderActive = \"var(--colorPaletteDarkGreenBorderActive)\";\n\n// @public\nexport const colorPaletteDarkGreenForeground2 = \"var(--colorPaletteDarkGreenForeground2)\";\n\n// @public\nexport const colorPaletteDarkOrangeBackground1 = \"var(--colorPaletteDarkOrangeBackground1)\";\n\n// @public\nexport const colorPaletteDarkOrangeBackground2 = \"var(--colorPaletteDarkOrangeBackground2)\";\n\n// @public\nexport const colorPaletteDarkOrangeBackground3 = \"var(--colorPaletteDarkOrangeBackground3)\";\n\n// @public\nexport const colorPaletteDarkOrangeBorder1 = \"var(--colorPaletteDarkOrangeBorder1)\";\n\n// @public\nexport const colorPaletteDarkOrangeBorder2 = \"var(--colorPaletteDarkOrangeBorder2)\";\n\n// @public\nexport const colorPaletteDarkOrangeBorderActive = \"var(--colorPaletteDarkOrangeBorderActive)\";\n\n// @public\nexport const colorPaletteDarkOrangeForeground1 = \"var(--colorPaletteDarkOrangeForeground1)\";\n\n// @public\nexport const colorPaletteDarkOrangeForeground2 = \"var(--colorPaletteDarkOrangeForeground2)\";\n\n// @public\nexport const colorPaletteDarkOrangeForeground3 = \"var(--colorPaletteDarkOrangeForeground3)\";\n\n// @public\nexport const colorPaletteDarkRedBackground2 = \"var(--colorPaletteDarkRedBackground2)\";\n\n// @public\nexport const colorPaletteDarkRedBorderActive = \"var(--colorPaletteDarkRedBorderActive)\";\n\n// @public\nexport const colorPaletteDarkRedForeground2 = \"var(--colorPaletteDarkRedForeground2)\";\n\n// @public\nexport const colorPaletteForestBackground2 = \"var(--colorPaletteForestBackground2)\";\n\n// @public\nexport const colorPaletteForestBorderActive = \"var(--colorPaletteForestBorderActive)\";\n\n// @public\nexport const colorPaletteForestForeground2 = \"var(--colorPaletteForestForeground2)\";\n\n// @public\nexport const colorPaletteGoldBackground2 = \"var(--colorPaletteGoldBackground2)\";\n\n// @public\nexport const colorPaletteGoldBorderActive = \"var(--colorPaletteGoldBorderActive)\";\n\n// @public\nexport const colorPaletteGoldForeground2 = \"var(--colorPaletteGoldForeground2)\";\n\n// @public\nexport const colorPaletteGrapeBackground2 = \"var(--colorPaletteGrapeBackground2)\";\n\n// @public\nexport const colorPaletteGrapeBorderActive = \"var(--colorPaletteGrapeBorderActive)\";\n\n// @public\nexport const colorPaletteGrapeForeground2 = \"var(--colorPaletteGrapeForeground2)\";\n\n// @public\nexport const colorPaletteGreenBackground1 = \"var(--colorPaletteGreenBackground1)\";\n\n// @public\nexport const colorPaletteGreenBackground2 = \"var(--colorPaletteGreenBackground2)\";\n\n// @public\nexport const colorPaletteGreenBackground3 = \"var(--colorPaletteGreenBackground3)\";\n\n// @public\nexport const colorPaletteGreenBorder1 = \"var(--colorPaletteGreenBorder1)\";\n\n// @public\nexport const colorPaletteGreenBorder2 = \"var(--colorPaletteGreenBorder2)\";\n\n// @public\nexport const colorPaletteGreenBorderActive = \"var(--colorPaletteGreenBorderActive)\";\n\n// @public\nexport const colorPaletteGreenForeground1 = \"var(--colorPaletteGreenForeground1)\";\n\n// @public\nexport const colorPaletteGreenForeground2 = \"var(--colorPaletteGreenForeground2)\";\n\n// @public\nexport const colorPaletteGreenForeground3 = \"var(--colorPaletteGreenForeground3)\";\n\n// @public\nexport const colorPaletteGreenForegroundInverted = \"var(--colorPaletteGreenForegroundInverted)\";\n\n// @public\nexport const colorPaletteLavenderBackground2 = \"var(--colorPaletteLavenderBackground2)\";\n\n// @public\nexport const colorPaletteLavenderBorderActive = \"var(--colorPaletteLavenderBorderActive)\";\n\n// @public\nexport const colorPaletteLavenderForeground2 = \"var(--colorPaletteLavenderForeground2)\";\n\n// @public\nexport const colorPaletteLightGreenBackground1 = \"var(--colorPaletteLightGreenBackground1)\";\n\n// @public\nexport const colorPaletteLightGreenBackground2 = \"var(--colorPaletteLightGreenBackground2)\";\n\n// @public\nexport const colorPaletteLightGreenBackground3 = \"var(--colorPaletteLightGreenBackground3)\";\n\n// @public\nexport const colorPaletteLightGreenBorder1 = \"var(--colorPaletteLightGreenBorder1)\";\n\n// @public\nexport const colorPaletteLightGreenBorder2 = \"var(--colorPaletteLightGreenBorder2)\";\n\n// @public\nexport const colorPaletteLightGreenBorderActive = \"var(--colorPaletteLightGreenBorderActive)\";\n\n// @public\nexport const colorPaletteLightGreenForeground1 = \"var(--colorPaletteLightGreenForeground1)\";\n\n// @public\nexport const colorPaletteLightGreenForeground2 = \"var(--colorPaletteLightGreenForeground2)\";\n\n// @public\nexport const colorPaletteLightGreenForeground3 = \"var(--colorPaletteLightGreenForeground3)\";\n\n// @public\nexport const colorPaletteLightTealBackground2 = \"var(--colorPaletteLightTealBackground2)\";\n\n// @public\nexport const colorPaletteLightTealBorderActive = \"var(--colorPaletteLightTealBorderActive)\";\n\n// @public\nexport const colorPaletteLightTealForeground2 = \"var(--colorPaletteLightTealForeground2)\";\n\n// @public\nexport const colorPaletteLilacBackground2 = \"var(--colorPaletteLilacBackground2)\";\n\n// @public\nexport const colorPaletteLilacBorderActive = \"var(--colorPaletteLilacBorderActive)\";\n\n// @public\nexport const colorPaletteLilacForeground2 = \"var(--colorPaletteLilacForeground2)\";\n\n// @public\nexport const colorPaletteMagentaBackground2 = \"var(--colorPaletteMagentaBackground2)\";\n\n// @public\nexport const colorPaletteMagentaBorderActive = \"var(--colorPaletteMagentaBorderActive)\";\n\n// @public\nexport const colorPaletteMagentaForeground2 = \"var(--colorPaletteMagentaForeground2)\";\n\n// @public\nexport const colorPaletteMarigoldBackground1 = \"var(--colorPaletteMarigoldBackground1)\";\n\n// @public\nexport const colorPaletteMarigoldBackground2 = \"var(--colorPaletteMarigoldBackground2)\";\n\n// @public\nexport const colorPaletteMarigoldBackground3 = \"var(--colorPaletteMarigoldBackground3)\";\n\n// @public\nexport const colorPaletteMarigoldBorder1 = \"var(--colorPaletteMarigoldBorder1)\";\n\n// @public\nexport const colorPaletteMarigoldBorder2 = \"var(--colorPaletteMarigoldBorder2)\";\n\n// @public\nexport const colorPaletteMarigoldBorderActive = \"var(--colorPaletteMarigoldBorderActive)\";\n\n// @public\nexport const colorPaletteMarigoldForeground1 = \"var(--colorPaletteMarigoldForeground1)\";\n\n// @public\nexport const colorPaletteMarigoldForeground2 = \"var(--colorPaletteMarigoldForeground2)\";\n\n// @public\nexport const colorPaletteMarigoldForeground3 = \"var(--colorPaletteMarigoldForeground3)\";\n\n// @public\nexport const colorPaletteMinkBackground2 = \"var(--colorPaletteMinkBackground2)\";\n\n// @public\nexport const colorPaletteMinkBorderActive = \"var(--colorPaletteMinkBorderActive)\";\n\n// @public\nexport const colorPaletteMinkForeground2 = \"var(--colorPaletteMinkForeground2)\";\n\n// @public\nexport const colorPaletteNavyBackground2 = \"var(--colorPaletteNavyBackground2)\";\n\n// @public\nexport const colorPaletteNavyBorderActive = \"var(--colorPaletteNavyBorderActive)\";\n\n// @public\nexport const colorPaletteNavyForeground2 = \"var(--colorPaletteNavyForeground2)\";\n\n// @public\nexport const colorPalettePeachBackground2 = \"var(--colorPalettePeachBackground2)\";\n\n// @public\nexport const colorPalettePeachBorderActive = \"var(--colorPalettePeachBorderActive)\";\n\n// @public\nexport const colorPalettePeachForeground2 = \"var(--colorPalettePeachForeground2)\";\n\n// @public\nexport const colorPalettePinkBackground2 = \"var(--colorPalettePinkBackground2)\";\n\n// @public\nexport const colorPalettePinkBorderActive = \"var(--colorPalettePinkBorderActive)\";\n\n// @public\nexport const colorPalettePinkForeground2 = \"var(--colorPalettePinkForeground2)\";\n\n// @public\nexport const colorPalettePlatinumBackground2 = \"var(--colorPalettePlatinumBackground2)\";\n\n// @public\nexport const colorPalettePlatinumBorderActive = \"var(--colorPalettePlatinumBorderActive)\";\n\n// @public\nexport const colorPalettePlatinumForeground2 = \"var(--colorPalettePlatinumForeground2)\";\n\n// @public\nexport const colorPalettePlumBackground2 = \"var(--colorPalettePlumBackground2)\";\n\n// @public\nexport const colorPalettePlumBorderActive = \"var(--colorPalettePlumBorderActive)\";\n\n// @public\nexport const colorPalettePlumForeground2 = \"var(--colorPalettePlumForeground2)\";\n\n// @public\nexport const colorPalettePumpkinBackground2 = \"var(--colorPalettePumpkinBackground2)\";\n\n// @public\nexport const colorPalettePumpkinBorderActive = \"var(--colorPalettePumpkinBorderActive)\";\n\n// @public\nexport const colorPalettePumpkinForeground2 = \"var(--colorPalettePumpkinForeground2)\";\n\n// @public\nexport const colorPalettePurpleBackground2 = \"var(--colorPalettePurpleBackground2)\";\n\n// @public\nexport const colorPalettePurpleBorderActive = \"var(--colorPalettePurpleBorderActive)\";\n\n// @public\nexport const colorPalettePurpleForeground2 = \"var(--colorPalettePurpleForeground2)\";\n\n// @public\nexport const colorPaletteRedBackground1 = \"var(--colorPaletteRedBackground1)\";\n\n// @public\nexport const colorPaletteRedBackground2 = \"var(--colorPaletteRedBackground2)\";\n\n// @public\nexport const colorPaletteRedBackground3 = \"var(--colorPaletteRedBackground3)\";\n\n// @public\nexport const colorPaletteRedBorder1 = \"var(--colorPaletteRedBorder1)\";\n\n// @public\nexport const colorPaletteRedBorder2 = \"var(--colorPaletteRedBorder2)\";\n\n// @public\nexport const colorPaletteRedBorderActive = \"var(--colorPaletteRedBorderActive)\";\n\n// @public\nexport const colorPaletteRedForeground1 = \"var(--colorPaletteRedForeground1)\";\n\n// @public\nexport const colorPaletteRedForeground2 = \"var(--colorPaletteRedForeground2)\";\n\n// @public\nexport const colorPaletteRedForeground3 = \"var(--colorPaletteRedForeground3)\";\n\n// @public\n```\n\n----------------------------------------\n\nTITLE: Declaring Custom Style Hooks for Fluent UI Components\nDESCRIPTION: This snippet declares multiple custom style hooks for a variety of Fluent UI components, allowing developers to easily customize styles across different components including Accordions, Badges, Buttons, and more. Each style hook is marked as unstable, indicating it may undergo changes in the future. The primary dependency for using these hooks is the Fluent UI library itself.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-shared-contexts/library/etc/react-shared-contexts.api.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nuseTreeItemLayoutStyles_unstable: CustomStyleHook;\n    useTreeItemPersonaLayoutStyles_unstable: CustomStyleHook;\n    useTreeItemStyles_unstable: CustomStyleHook;\n    useTreeStyles_unstable: CustomStyleHook;\n    useVirtualizerScrollViewDynamicStyles_unstable: CustomStyleHook;\n    useVirtualizerScrollViewStyles_unstable: CustomStyleHook;\n    useVirtualizerStyles_unstable: CustomStyleHook;\n    \n// @internal (undocumented)\nexport const CustomStyleHooksProvider_unstable: React_2.Provider<Partial<{\n    useAccordionHeaderStyles_unstable: CustomStyleHook;\n    useAccordionItemStyles_unstable: CustomStyleHook;\n    useAccordionPanelStyles_unstable: CustomStyleHook;\n    useAccordionStyles_unstable: CustomStyleHook;\n    useAlphaSliderStyles_unstable: CustomStyleHook;\n    useAvatarGroupItemStyles_unstable: CustomStyleHook;\n    useAvatarGroupPopoverStyles_unstable: CustomStyleHook;\n    useAvatarGroupStyles_unstable: CustomStyleHook;\n    useAvatarStyles_unstable: CustomStyleHook;\n    useBadgeStyles_unstable: CustomStyleHook;\n    useBreadcrumbButtonStyles_unstable: CustomStyleHook;\n    useBreadcrumbDividerStyles_unstable: CustomStyleHook;\n    useBreadcrumbItemStyles_unstable: CustomStyleHook;\n    useBreadcrumbStyles_unstable: CustomStyleHook;\n    useButtonStyles_unstable: CustomStyleHook;\n    useCardFooterStyles_unstable: CustomStyleHook;\n    useCardHeaderStyles_unstable: CustomStyleHook;\n    useCardPreviewStyles_unstable: CustomStyleHook;\n    useCardStyles_unstable: CustomStyleHook;\n    useCarouselAutoplayButtonStyles_unstable: CustomStyleHook;\n    useCarouselButtonStyles_unstable: CustomStyleHook;\n    useCarouselCardStyles_unstable: CustomStyleHook;\n    useCarouselNavButtonStyles_unstable: CustomStyleHook;\n    useCarouselNavContainerStyles_unstable: CustomStyleHook;\n    useCarouselNavImageButtonStyles_unstable: CustomStyleHook;\n    useCarouselNavStyles_unstable: CustomStyleHook;\n    useCarouselSliderStyles_unstable: CustomStyleHook;\n    useCarouselStyles_unstable: CustomStyleHook;\n    useCarouselViewportStyles_unstable: CustomStyleHook;\n    useCheckboxStyles_unstable: CustomStyleHook;\n    useComboboxStyles_unstable: CustomStyleHook;\n    useCompoundButtonStyles_unstable: CustomStyleHook;\n    useColorAreaStyles_unstable: CustomStyleHook;\n    useColorPickerStyles_unstable: CustomStyleHook;\n    useColorSliderStyles_unstable: CustomStyleHook;\n    useColorSwatchStyles_unstable: CustomStyleHook;\n    useCounterBadgeStyles_unstable: CustomStyleHook;\n    useDataGridBodyStyles_unstable: CustomStyleHook;\n    useDataGridCellStyles_unstable: CustomStyleHook;\n    useDataGridHeaderCellStyles_unstable: CustomStyleHook;\n    useDataGridHeaderStyles_unstable: CustomStyleHook;\n    useDataGridRowStyles_unstable: CustomStyleHook;\n    useDataGridSelectionCellStyles_unstable: CustomStyleHook;\n    useDataGridStyles_unstable: CustomStyleHook;\n    useDialogActionsStyles_unstable: CustomStyleHook;\n    useDialogBodyStyles_unstable: CustomStyleHook;\n    useDialogContentStyles_unstable: CustomStyleHook;\n    useDialogSurfaceStyles_unstable: CustomStyleHook;\n    useDialogTitleStyles_unstable: CustomStyleHook;\n    useDividerStyles_unstable: CustomStyleHook;\n    useDrawerBodyStyles_unstable: CustomStyleHook;\n    useDrawerFooterStyles_unstable: CustomStyleHook;\n    useDrawerHeaderNavigationStyles_unstable: CustomStyleHook;\n    useDrawerHeaderStyles_unstable: CustomStyleHook;\n    useDrawerHeaderTitleStyles_unstable: CustomStyleHook;\n    useDrawerInlineStyles_unstable: CustomStyleHook;\n    useDrawerOverlayStyles_unstable: CustomStyleHook;\n    useDrawerStyles_unstable: CustomStyleHook;\n    useDropdownStyles_unstable: CustomStyleHook;\n    useEmptySwatchStyles_unstable: CustomStyleHook;\n    useFieldStyles_unstable: CustomStyleHook;\n    useFlatTreeStyles_unstable: CustomStyleHook;\n    useImageStyles_unstable: CustomStyleHook;\n    useImageSwatchStyles_unstable: CustomStyleHook;\n    useInfoButtonStyles_unstable: CustomStyleHook;\n    useInfoLabelStyles_unstable: CustomStyleHook;\n    useInlineDrawerStyles_unstable: CustomStyleHook;\n    useInputStyles_unstable: CustomStyleHook;\n    useInteractionTagPrimaryStyles_unstable: CustomStyleHook;\n    useInteractionTagSecondaryStyles_unstable: CustomStyleHook;\n    useInteractionTagStyles_unstable: CustomStyleHook;\n    useLabelStyles_unstable: CustomStyleHook;\n    useLinkStyles_unstable: CustomStyleHook;\n    useListItemButtonStyles_unstable: CustomStyleHook;\n    useListItemStyles_unstable: CustomStyleHook;\n    useListStyles_unstable: CustomStyleHook;\n    useListboxStyles_unstable: CustomStyleHook;\n    useMenuButtonStyles_unstable: CustomStyleHook;\n    useMenuDividerStyles_unstable: CustomStyleHook;\n    useMenuGroupHeaderStyles_unstable: CustomStyleHook;\n    useMenuGroupStyles_unstable: CustomStyleHook;\n    useMenuItemCheckboxStyles_unstable: CustomStyleHook;\n    useMenuItemLinkStyles_unstable: CustomStyleHook;\n    useMenuItemRadioStyles_unstable: CustomStyleHook;\n    useMenuItemStyles_unstable: CustomStyleHook;\n    useMenuItemSwitchStyles_unstable: CustomStyleHook;\n    useMenuListStyles_unstable: CustomStyleHook;\n    useMenuPopoverStyles_unstable: CustomStyleHook;\n    useMenuSplitGroupStyles_unstable: CustomStyleHook;\n    useMessageBarActionsStyles_unstable: CustomStyleHook;\n    useMessageBarBodyStyles_unstable: CustomStyleHook;\n    useMessageBarGroupStyles_unstable: CustomStyleHook;\n    useMessageBarStyles_unstable: CustomStyleHook;\n    useMessageBarTitleStyles_unstable: CustomStyleHook;\n    useOptionGroupStyles_unstable: CustomStyleHook;\n    useOptionStyles_unstable: CustomStyleHook;\n    useOverlayDrawerStyles_unstable: CustomStyleHook;\n    usePersonaStyles_unstable: CustomStyleHook;\n    usePopoverSurfaceStyles_unstable: CustomStyleHook;\n    usePresenceBadgeStyles_unstable: CustomStyleHook;\n    useProgressBarStyles_unstable: CustomStyleHook;\n    useRadioGroupStyles_unstable: CustomStyleHook;\n    useRadioStyles_unstable: CustomStyleHook;\n    useRatingDisplayStyles_unstable: CustomStyleHook;\n    useRatingItemStyles_unstable: CustomStyleHook;\n    useRatingStyles_unstable: CustomStyleHook;\n    useSearchBoxStyles_unstable: CustomStyleHook;\n    useSelectStyles_unstable: CustomStyleHook;\n    useSkeletonItemStyles_unstable: CustomStyleHook;\n    useSkeletonStyles_unstable: CustomStyleHook;\n    useSliderStyles_unstable: CustomStyleHook;\n    useSpinButtonStyles_unstable: CustomStyleHook;\n    useSpinnerStyles_unstable: CustomStyleHook;\n    useSplitButtonStyles_unstable: CustomStyleHook;\n    useSwatchPickerRowStyles_unstable: CustomStyleHook;\n    useSwatchPickerStyles_unstable: CustomStyleHook;\n    useSwitchStyles_unstable: CustomStyleHook;\n    useTabListStyles_unstable: CustomStyleHook;\n    useTabStyles_unstable: CustomStyleHook;\n    useTeachingPopoverBodyStyles_unstable: CustomStyleHook;\n    useTeachingPopoverCarouselCardStyles_unstable: CustomStyleHook;\n    useTeachingPopoverCarouselFooterButtonStyles_unstable: CustomStyleHook;\n    useTeachingPopoverCarouselFooterStyles_unstable: CustomStyleHook;\n    useTeachingPopoverCarouselNavButtonStyles_unstable: CustomStyleHook;\n    useTeachingPopoverCarouselNavStyles_unstable: CustomStyleHook;\n    useTeachingPopoverCarouselPageCountStyles_unstable: CustomStyleHook;\n    useTeachingPopoverCarouselStyles_unstable: CustomStyleHook;\n    useTeachingPopoverFooterStyles_unstable: CustomStyleHook;\n    useTeachingPopoverHeaderStyles_unstable: CustomStyleHook;\n    useTeachingPopoverActionsStyles_unstable: CustomStyleHook;\n    useTeachingPopoverButtonStyles_unstable: CustomStyleHook;\n    useTeachingPopoverStyles_unstable: CustomStyleHook;\n    useTeachingPopoverPageCountStyles_unstable: CustomStyleHook;\n    useTeachingPopoverSurfaceStyles_unstable: CustomStyleHook;\n    useTeachingPopoverTitleStyles_unstable: CustomStyleHook;\n    useTagGroupStyles_unstable: CustomStyleHook;\n    useTagPickerButtonStyles_unstable: CustomStyleHook;\n    useTagPickerControlStyles_unstable: CustomStyleHook;\n    useTagPickerGroupStyles_unstable: CustomStyleHook;\n    useTagPickerInputStyles_unstable: CustomStyleHook;\n    useTagPickerListStyles_unstable: CustomStyleHook;\n    useTagPickerOptionGroupStyles_unstable: CustomStyleHook;\n    useTagPickerOptionStyles_unstable: CustomStyleHook;\n    useTagStyles_unstable: CustomStyleHook;\n    useTableBodyStyles_unstable: CustomStyleHook;\n    useTableCellActionsStyles_unstable: CustomStyleHook;\n    useTableCellLayoutStyles_unstable: CustomStyleHook;\n    useTableCellStyles_unstable: CustomStyleHook;\n    useTableHeaderCellStyles_unstable: CustomStyleHook;\n    useTableHeaderStyles_unstable: CustomStyleHook;\n    useTableResizeHandleStyles_unstable: CustomStyleHook;\n    useTableRowStyles_unstable: CustomStyleHook;\n    useTableSelectionCellStyles_unstable: CustomStyleHook;\n    useTableStyles_unstable: CustomStyleHook;\n    useTextareaStyles_unstable: CustomStyleHook;\n    useTextStyles_unstable: CustomStyleHook;\n    useTimePickerCompatStyles_unstable: CustomStyleHook;\n    useToastBodyStyles_unstable: CustomStyleHook;\n    useToastContainerStyles_unstable: CustomStyleHook;\n    useToasterStyles_unstable: CustomStyleHook;\n    useToastFooterStyles_unstable: CustomStyleHook;\n    useToastStyles_unstable: CustomStyleHook;\n    useToastTitleStyles_unstable: CustomStyleHook;\n    useToggleButtonStyles_unstable: CustomStyleHook;\n    useToolbarButtonStyles_unstable: CustomStyleHook;\n    useToolbarDividerStyles_unstable: CustomStyleHook;\n    useToolbarGroupStyles_unstable: CustomStyleHook;\n    useToolbarRadioButtonStyles_unstable: CustomStyleHook;\n    useToolbarToggleButtonStyles_unstable: CustomStyleHook;\n    useToolbarStyles_unstable: CustomStyleHook;\n    useTooltipStyles_unstable: CustomStyleHook;\n    useTreeItemLayoutStyles_unstable: CustomStyleHook;\n    useTreeItemPersonaLayoutStyles_unstable: CustomStyleHook;\n    useTreeItemStyles_unstable: CustomStyleHook;\n    useTreeStyles_unstable: CustomStyleHook;\n    useVirtualizerScrollViewDynamicStyles_unstable: CustomStyleHook;\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme Toggle for FluentUI Typography Examples in Markdown\nDESCRIPTION: Code for a DisplayToggle component that switches between light and dark mode examples of typography styles. The toggle displays different images based on the selected theme.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/TextPage/docs/android/TextOverview.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<DisplayToggle onText=\"Dark\" offText=\"Light\" label=\"Theme Switcher\">\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/android/updated/img_text_01_light.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/android/updated/img_text_01_dark.png?text=DarkMode\" />\n\n</DisplayToggle>\n```\n\n----------------------------------------\n\nTITLE: Styling Fluent Text Input with Inline Display\nDESCRIPTION: This CSS snippet sets the display of the fluent-text-input to inline-flex for aligning items at the center. This customization is recommended to achieve the inline variation of the default block display in Fluent UI components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/text-input/README.md#2025-04-20_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nfluent-text-input {\n  display: inline-flex;\n  align-items: center;\n}\n```\n\n----------------------------------------\n\nTITLE: searchBoxClassNames Definition (TypeScript)\nDESCRIPTION: Defines the searchBoxClassNames constant as a SlotClassNames object for SearchBoxSlots. This likely defines the CSS class names associated with the different slots of the SearchBox component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-search/library/etc/react-search.api.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport const searchBoxClassNames: SlotClassNames<SearchBoxSlots>;\n```\n\n----------------------------------------\n\nTITLE: Event Handling Static Method - TypeScript\nDESCRIPTION: Static method for stopping event propagation on DOM events.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/utilities/etc/utilities.api.md#2025-04-20_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic stopPropagation(event: any): void;\n```\n\n----------------------------------------\n\nTITLE: Importing Experimental Components in Fluent UI React\nDESCRIPTION: This snippet demonstrates how to import an experimental component from the Fluent UI React library, specifically from the '@fluentui/react-experiments' package. Dependency on the Fluent UI React library is required to utilize these components. The import statement allows developers to include and work with experimental components in their applications.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-experiments/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ComponentName } from '@fluentui/react-experiments/lib/ComponentName';\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Component with Success Color in Default Theme\nDESCRIPTION: This snippet shows how to create a Text component with success color styling for the default theme using makeStyles from FluentUI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-text/library/docs/MIGRATION.md#2025-04-20_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeStyles, Text } from '@fluentui/react-components';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n     color: 'rgb(35, 123, 75)'\n  },\n})\n\nconst MyComponent = () => {\n    const styles = useStyles()\n\n    return <Text className={styles.root}>{...}</Text>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Groups in TypeScript\nDESCRIPTION: This function creates an array of grouped items with specified parameters including count, depth, and starting index. It is useful for organizing data into manageable groups for further processing or display. It requires parameters such as groupCount (number of groups), groupDepth (depth level of groups), startIndex (starting index for item retrieval), and itemsPerGroup (number of items in each group). Returns an array of IExampleGroup objects.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/example-data/etc/example-data.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport function createGroups(groupCount: number, groupDepth: number, startIndex: number, itemsPerGroup: number, level?: number, key?: string, isCollapsed?: boolean): IExampleGroup[];\n```\n\n----------------------------------------\n\nTITLE: TypeScript: Switch OnChange Data Type\nDESCRIPTION: Defines the type for the data passed to the onChange event handler of the Switch component.  It includes the `checked` property, indicating whether the switch is currently checked.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-switch/library/etc/react-switch.api.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport type SwitchOnChangeData = {\n    checked: boolean;\n};\"\n```\n\n----------------------------------------\n\nTITLE: Button State Hook with Loader Slot\nDESCRIPTION: This example shows a `Button` component's state hook that uses `mergeProps` to define a `loader` slot with a default component. The `loader` slot is then rendered within the `Button`'s render function.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/simplify-prop-merging.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// `Button` state hook\nexport const useButton = () => {\n  const state = mergeProps({\n    // ...\n    // Loader component used as shorthand slot\n    loader: { as: Loader },\n  });\n};\n\n// `Button` render function\nexport function renderButton(state) {\n  const { slots, slotProps } = getSlots(state);\n  return (\n    <button>\n      {/* ... */}\n      {/* 👇 \"slots.loader\" will render Loader component */}\n      <slots.loader {...slotProps.loader} />\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Bumping React Checkbox Version in Fluent UI\nDESCRIPTION: The snippet documents the update of the @fluentui/react-checkbox component to version 9.3.0. This ensures that the checkbox component has the latest features and bug fixes as per the latest best practices.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tree/library/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n- Bump @fluentui/react-checkbox to v9.3.0 ([PR #33876](https://github.com/microsoft/fluentui/pull/33876) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Defining IconNames Enumeration in TypeScript\nDESCRIPTION: Declares an enumeration of icon name constants for the MDL2 icon font. This provides strongly-typed references to available icons. The enumeration is marked as deprecated.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/font-icons-mdl2/etc/font-icons-mdl2.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @public @deprecated (undocumented)\nexport const enum IconNames {\n    // (undocumented)\n    AADLogo = \"AADLogo\",\n    // (undocumented)\n    Accept = \"Accept\",\n    // (undocumented)\n    AccessibiltyChecker = \"AccessibiltyChecker\",\n    // (undocumented)\n    AccessLogo = \"AccessLogo\",\n    // (undocumented)\n    AccessLogoFill = \"AccessLogoFill\",\n    // (undocumented)\n    AccountActivity = \"AccountActivity\",\n    // (undocumented)\n    AccountBrowser = \"AccountBrowser\",\n    // (undocumented)\n    AccountManagement = \"AccountManagement\",\n    // (undocumented)\n    Accounts = \"Accounts\",\n    // (undocumented)\n    ActionCenter = \"ActionCenter\",\n    // (undocumented)\n    ActivateOrders = \"ActivateOrders\",\n    // (undocumented)\n    ActivityFeed = \"ActivityFeed\",\n    // (undocumented)\n    Add = \"Add\",\n    // (undocumented)\n    AddBookmark = \"AddBookmark\",\n    // (undocumented)\n    AddEvent = \"AddEvent\",\n    // (undocumented)\n    AddFavorite = \"AddFavorite\",\n    // (undocumented)\n    AddFavoriteFill = \"AddFavoriteFill\",\n    // (undocumented)\n    AddFriend = \"AddFriend\",\n    // (undocumented)\n    AddGroup = \"AddGroup\",\n    // (undocumented)\n    AddHome = \"AddHome\",\n    // (undocumented)\n    AddIn = \"AddIn\",\n    // (undocumented)\n    AddLink = \"AddLink\",\n    // (undocumented)\n    AddNotes = \"AddNotes\",\n    // (undocumented)\n    AddOnlineMeeting = \"AddOnlineMeeting\",\n    // (undocumented)\n    AddPhone = \"AddPhone\",\n    // (undocumented)\n    AddReaction = \"AddReaction\",\n    // (undocumented)\n    AddTo = \"AddTo\",\n    // (undocumented)\n    AddToShoppingList = \"AddToShoppingList\",\n    // (undocumented)\n    AddWork = \"AddWork\",\n    // (undocumented)\n    Admin = \"Admin\",\n    // (undocumented)\n    AdminALogo32 = \"AdminALogo32\",\n    // (undocumented)\n    AdminALogoFill32 = \"AdminALogoFill32\",\n    // (undocumented)\n    AdminALogoInverse32 = \"AdminALogoInverse32\",\n    // (undocumented)\n    AdminCLogoInverse32 = \"AdminCLogoInverse32\",\n    // (undocumented)\n    AdminDLogoInverse32 = \"AdminDLogoInverse32\",\n    // (undocumented)\n    AdminELogoInverse32 = \"AdminELogoInverse32\",\n    // (undocumented)\n    AdminLLogoInverse32 = \"AdminLLogoInverse32\",\n    // (undocumented)\n    AdminMLogoInverse32 = \"AdminMLogoInverse32\",\n    // (undocumented)\n    AdminOLogoInverse32 = \"AdminOLogoInverse32\",\n    // (undocumented)\n    AdminPLogoInverse32 = \"AdminPLogoInverse32\",\n    // (undocumented)\n    AdminSLogoInverse32 = \"AdminSLogoInverse32\",\n    // (undocumented)\n    AdminYLogoInverse32 = \"AdminYLogoInverse32\",\n    // (undocumented)\n    Airplane = \"Airplane\",\n    // (undocumented)\n    AirplaneSolid = \"AirplaneSolid\",\n    // (undocumented)\n    AirTickets = \"AirTickets\",\n    // (undocumented)\n    AlarmClock = \"AlarmClock\",\n    // (undocumented)\n    Album = \"Album\",\n    // (undocumented)\n    AlbumRemove = \"AlbumRemove\",\n    // (undocumented)\n    AlertSettings = \"AlertSettings\",\n    // (undocumented)\n    AlertSolid = \"AlertSolid\",\n    // (undocumented)\n    AlignCenter = \"AlignCenter\",\n    // (undocumented)\n    AlignHorizontalCenter = \"AlignHorizontalCenter\",\n    // (undocumented)\n    AlignHorizontalLeft = \"AlignHorizontalLeft\",\n    // (undocumented)\n    AlignHorizontalRight = \"AlignHorizontalRight\",\n    // (undocumented)\n    AlignJustify = \"AlignJustify\",\n    // (undocumented)\n    AlignLeft = \"AlignLeft\",\n    // (undocumented)\n    AlignRight = \"AlignRight\",\n    // (undocumented)\n    AlignVerticalBottom = \"AlignVerticalBottom\",\n    // (undocumented)\n    AlignVerticalCenter = \"AlignVerticalCenter\",\n    // (undocumented)\n    AlignVerticalTop = \"AlignVerticalTop\",\n    // (undocumented)\n    AllApps = \"AllApps\",\n    // (undocumented)\n    AllAppsMirrored = \"AllAppsMirrored\",\n    // (undocumented)\n    AllCurrency = \"AllCurrency\",\n    // (undocumented)\n    AnalyticsLogo = \"AnalyticsLogo\",\n    // (undocumented)\n    AnalyticsQuery = \"AnalyticsQuery\",\n    // (undocumented)\n    AnalyticsReport = \"AnalyticsReport\",\n    // (undocumented)\n    AnalyticsView = \"AnalyticsView\",\n    // (undocumented)\n    AnchorLock = \"AnchorLock\",\n    // (undocumented)\n    Annotation = \"Annotation\",\n    // (undocumented)\n    AppIconDefault = \"AppIconDefault\",\n    // (undocumented)\n    AppIconDefaultAdd = \"AppIconDefaultAdd\",\n    // (undocumented)\n    AppIconDefaultList = \"AppIconDefaultList\",\n    // (undocumented)\n    Archive = \"Archive\",\n    // (undocumented)\n    AreaChart = \"AreaChart\",\n    // (undocumented)\n    ArrangeBringForward = \"ArrangeBringForward\",\n    // (undocumented)\n    ArrangeBringToFront = \"ArrangeBringToFront\",\n    // (undocumented)\n    ArrangeByFrom = \"ArrangeByFrom\",\n    // (undocumented)\n    ArrangeSendBackward = \"ArrangeSendBackward\",\n    // (undocumented)\n    ArrangeSendToBack = \"ArrangeSendToBack\",\n    // (undocumented)\n    Arrivals = \"Arrivals\",\n    // (undocumented)\n    ArrowDownRight8 = \"ArrowDownRight8\",\n    // (undocumented)\n    ArrowDownRightMirrored8 = \"ArrowDownRightMirrored8\",\n    // (undocumented)\n    ArrowTallDownLeft = \"ArrowTallDownLeft\",\n    // (undocumented)\n    ArrowTallDownRight = \"ArrowTallDownRight\",\n    // (undocumented)\n    ArrowTallUpLeft = \"ArrowTallUpLeft\",\n    // (undocumented)\n    ArrowTallUpRight = \"ArrowTallUpRight\",\n    // (undocumented)\n    ArrowUpRight = \"ArrowUpRight\",\n    // (undocumented)\n    ArrowUpRight8 = \"ArrowUpRight8\",\n    // (undocumented)\n    ArrowUpRightMirrored8 = \"ArrowUpRightMirrored8\",\n    // (undocumented)\n    Articles = \"Articles\",\n    // (undocumented)\n    Ascending = \"Ascending\",\n    // (undocumented)\n    AspectRatio = \"AspectRatio\",\n    // (undocumented)\n    AssessmentGroup = \"AssessmentGroup\",\n    // (undocumented)\n    AssessmentGroupTemplate = \"AssessmentGroupTemplate\",\n    // (undocumented)\n    AssetLibrary = \"AssetLibrary\",\n    // (undocumented)\n    Assign = \"Assign\",\n    // (undocumented)\n    Asterisk = \"Asterisk\",\n    // (undocumented)\n    AsteriskSolid = \"AsteriskSolid\",\n    // (undocumented)\n    ATPLogo = \"ATPLogo\",\n    // (undocumented)\n    Attach = \"Attach\",\n    // (undocumented)\n    AustralianRules = \"AustralianRules\",\n    // (undocumented)\n    AuthenticatorApp = \"AuthenticatorApp\",\n    // (undocumented)\n    AutoEnhanceOff = \"AutoEnhanceOff\",\n    // (undocumented)\n    AutoEnhanceOn = \"AutoEnhanceOn\",\n    // (undocumented)\n    AutoFillTemplate = \"AutoFillTemplate\",\n    // (undocumented)\n    AutoHeight = \"AutoHeight\",\n    // (undocumented)\n    AutoRacing = \"AutoRacing\",\n    // (undocumented)\n    AwayStatus = \"AwayStatus\",\n    // (undocumented)\n    AzureAPIManagement = \"AzureAPIManagement\",\n    // (undocumented)\n    AzureKeyVault = \"AzureKeyVault\",\n    // (undocumented)\n    AzureLogo = \"AzureLogo\",\n    // (undocumented)\n    AzureServiceEndpoint = \"AzureServiceEndpoint\",\n    // (undocumented)\n    Back = \"Back\",\n    // (undocumented)\n    BackgroundColor = \"BackgroundColor\",\n    // (undocumented)\n    Backlog = \"Backlog\",\n    // (undocumented)\n    BacklogBoard = \"BacklogBoard\",\n    // (undocumented)\n    BacklogList = \"BacklogList\",\n    // (undocumented)\n    BackToWindow = \"BackToWindow\",\n    // (undocumented)\n    Badge = \"Badge\",\n    // (undocumented)\n    Balloons = \"Balloons\",\n    // (undocumented)\n    Bank = \"Bank\",\n    // (undocumented)\n    BankSolid = \"BankSolid\",\n    // (undocumented)\n    BarChart4 = \"BarChart4\",\n    // (undocumented)\n    BarChartHorizontal = \"BarChartHorizontal\",\n    // (undocumented)\n    BarChartVertical = \"BarChartVertical\",\n    // (undocumented)\n    BarChartVerticalEdit = \"BarChartVerticalEdit\",\n    // (undocumented)\n    BarChartVerticalFill = \"BarChartVerticalFill\",\n    // (undocumented)\n    BarChartVerticalFilter = \"BarChartVerticalFilter\",\n    // (undocumented)\n    BarChartVerticalFilterSolid = \"BarChartVerticalFilterSolid\",\n    // (undocumented)\n    Baseball = \"Baseball\",\n    // (undocumented)\n    BeerMug = \"BeerMug\",\n    // (undocumented)\n    BIDashboard = \"BIDashboard\",\n    // (undocumented)\n    BidiLtr = \"BidiLtr\",\n    // (undocumented)\n    BidiRtl = \"BidiRtl\",\n    // (undocumented)\n    BingLogo = \"BingLogo\",\n    // (undocumented)\n    BirthdayCake = \"BirthdayCake\",\n    // (undocumented)\n    BlockContact = \"BlockContact\",\n    // (undocumented)\n    Blocked = \"Blocked\",\n    // (undocumented)\n    Blocked12 = \"Blocked12\",\n    // (undocumented)\n    Blocked2 = \"Blocked2\",\n    // (undocumented)\n    Blocked2Solid = \"Blocked2Solid\",\n    // (undocumented)\n    BlockedSite = \"BlockedSite\",\n    // (undocumented)\n    BlockedSiteSolid12 = \"BlockedSiteSolid12\",\n    // (undocumented)\n    BlockedSolid = \"BlockedSolid\",\n    // (undocumented)\n    Blog = \"Blog\",\n    // (undocumented)\n    BlowingSnow = \"BlowingSnow\",\n    // (undocumented)\n    Blur = \"Blur\",\n    // (undocumented)\n    Boards = \"Boards\",\n    // (undocumented)\n    Bold = \"Bold\",\n    // (undocumented)\n    BookAnswers = \"BookAnswers\",\n    // (undocumented)\n    BookingsLogo = \"BookingsLogo\",\n    // (undocumented)\n    BookmarkReport = \"BookmarkReport\",\n    // (undocumented)\n    Bookmarks = \"Bookmarks\",\n    // (undocumented)\n    BookmarksMirrored = \"BookmarksMirrored\",\n    // (undocumented)\n    BorderDash = \"BorderDash\",\n    // (undocumented)\n    BorderDot = \"BorderDot\",\n    // (undocumented)\n    BoxAdditionSolid = \"BoxAdditionSolid\",\n    // (undocumented)\n    BoxCheckmarkSolid = \"BoxCheckmarkSolid\",\n    // (undocumented)\n    BoxMultiplySolid = \"BoxMultiplySolid\",\n    // (undocumented)\n    BoxPlaySolid = \"BoxPlaySolid\",\n    // (undocumented)\n    BoxSubtractSolid = \"BoxSubtractSolid\",\n    // (undocumented)\n    BranchCommit = \"BranchCommit\",\n    // (undocumented)\n    BranchCompare = \"BranchCompare\",\n    // (undocumented)\n    BranchFork = \"BranchFork\",\n    // (undocumented)\n    BranchFork2 = \"BranchFork2\",\n    // (undocumented)\n    BranchLocked = \"BranchLocked\",\n    // (undocumented)\n    BranchMerge = \"BranchMerge\",\n    // (undocumented)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ListItem for Item Navigation in JSX\nDESCRIPTION: Set navigationMode=\"items\" on ListItem when list items should be focusable. This ensures proper accessibility and keyboard navigation for individual list items.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-list/stories/src/List/ListBestPractices.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ListItem navigationMode=\"items\">\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-jsx-runtime version\nDESCRIPTION: This patch updates the version of the `@fluentui/react-jsx-runtime` dependency. Bumping this package ensures that the `@fluentui/react-badge` component uses the latest features and bug fixes available in the JSX runtime.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nBump @fluentui/react-jsx-runtime to v9.0.50 ([PR #33631](https://github.com/microsoft/fluentui/pull/33631) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Button with Icon After Children in TSX\nDESCRIPTION: Shows the structure of a Button component with an icon after children, rendered as a custom element (div in this example) instead of a native button.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-button/library/docs/SPEC.md#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<div class=\"root\" href={href}>\n  {children}\n  <span class=\"icon\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: ImageSwatch DOM Structure (row layout)\nDESCRIPTION: This snippet shows the DOM structure for an ImageSwatch component when used in a row layout.  It uses a button element with the \"radio\" role and CSS background-image property to display the image.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-swatch-picker/library/docs/Spec.md#2025-04-20_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<button\n  aria-label=\"Image name\"\n  role=\"radio\"\n  aria-checked=\"true\"\n  style=\"background-image: url({url})\"\n  class=\"fui-ImageSwatch\"\n>\n</button>\n```\n\n----------------------------------------\n\nTITLE: API Reference Import Declarations in TypeScript\nDESCRIPTION: Import declarations showing the dependencies for the @fluentui/react-teaching-popover package, including imports from React, @fluentui/react-aria, @fluentui/react-button, @fluentui/react-utilities, and @fluentui/react-popover.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-teaching-popover/library/etc/react-teaching-popover.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"react\" />\n\nimport { ARIAButtonSlotProps } from '@fluentui/react-aria';\nimport { Button } from '@fluentui/react-button';\nimport { ButtonProps } from '@fluentui/react-button';\nimport { ButtonState } from '@fluentui/react-button';\nimport { ComponentProps } from '@fluentui/react-utilities';\nimport { ComponentState } from '@fluentui/react-utilities';\nimport { EventData } from '@fluentui/react-utilities';\nimport { EventHandler } from '@fluentui/react-utilities';\nimport type { ForwardRefComponent } from '@fluentui/react-utilities';\nimport { JSXElementConstructor } from 'react';\nimport { PopoverContextValue } from '@fluentui/react-popover';\nimport type { PopoverProps } from '@fluentui/react-popover';\nimport { PopoverState } from '@fluentui/react-popover';\nimport { PopoverSurfaceSlots } from '@fluentui/react-popover';\nimport { PopoverSurfaceState } from '@fluentui/react-popover';\nimport { PopoverTriggerChildProps } from '@fluentui/react-popover';\nimport { PopoverTriggerProps } from '@fluentui/react-popover';\nimport { PopoverTriggerState } from '@fluentui/react-popover';\nimport * as React_2 from 'react';\nimport { ReactElement } from 'react';\nimport { Slot } from '@fluentui/react-utilities';\nimport type { SlotClassNames } from '@fluentui/react-utilities';\n\n```\n\n----------------------------------------\n\nTITLE: Dry Run Version Bump Command\nDESCRIPTION: Demonstrates how to preview version bump changes without actually writing them to disk.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/version-bump/README.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:version-bump --dry-run\n```\n\n----------------------------------------\n\nTITLE: Skeleton Component Internal Representation (React)\nDESCRIPTION: Illustrates the internal representation of the Skeleton, SkeletonLine, and SkeletonShape components in React. It shows basic functional components that render div and span elements, respectively.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Skeleton.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n\"const Skeleton = () => <div>{children}</div>;\\n\\nconst SkeletonLine = () => <span />;\\n\\nconst SkeletonShape = () => <span />;\"\n```\n\n----------------------------------------\n\nTITLE: SankeyChart String and Style Interfaces\nDESCRIPTION: TypeScript interfaces defining localization strings and styling options for Sankey Chart components\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charts/library/etc/react-charts.api.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SankeyChartStrings {\n  linkFrom?: string;\n}\n\nexport interface SankeyChartStyles {\n  chartWrapper?: string;\n  links?: string;\n  nodes?: string;\n  nodeTextContainer?: string;\n  root?: string;\n  toolTip?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Rating Component\nDESCRIPTION: Demonstrates the basic HTML structure and class names used for rendering a Rating component\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-rating/library/docs/Spec.md#2025-04-20_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- Container for Rating -->\n<div class=\"fui-Rating\">\n  <!-- Container for RatingItem -->\n  <span class=\"fui-RatingItem\">\n    <!-- Input slot -->\n    <input />\n    <!-- Icon slot -->\n    <div class=\"fui-RatingItem\">\n      <svg>...</svg>\n    </div>\n  </span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing ResizeGroup with Overflow Controls\nDESCRIPTION: Demonstrates how ResizeGroup can handle content that doesn't fit within a container by moving items to an overflow menu dynamically. The component uses initial data representing all controls and a reduction function to manage space constraints.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-examples/src/react/ResizeGroup/docs/ResizeGroupOverview.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Example ResizeGroup implementation with overflow controls\nconst ResizeGroupExample = () => {\n  const initialData = {\n    primaryControls: [...allControls],\n    overflowControls: []\n  };\n\n  const onReduceData = (data) => {\n    // Move a control from primary to overflow when space is limited\n    const movedControl = data.primaryControls.pop();\n    return {\n      ...data,\n      primaryControls: data.primaryControls,\n      overflowControls: [movedControl, ...data.overflowControls]\n    };\n  };\n\n  return (\n    <ResizeGroup\n      data={initialData}\n      onReduceData={onReduceData}\n      renderContent={(data) => (\n        <>\n          {data.primaryControls}\n          {data.overflowControls.length > 0 && <OverflowMenu items={data.overflowControls} />}\n        </>\n      )}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Slider from @fluentui/react-components\nDESCRIPTION: This code snippet demonstrates how to import the Slider component from the '@fluentui/react-components' package. This is the first step to using the Slider component in your React application. The component is then available for use within your JSX code.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-slider/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Slider } from '@fluentui/react-components';\n```\n\n----------------------------------------\n\nTITLE: Exporting Neutral Background Color Tokens in JavaScript\nDESCRIPTION: This snippet defines and exports color tokens for neutral backgrounds in the Fluent UI design system. It includes variables for disabled, inverted, and static backgrounds.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const colorNeutralBackgroundDisabled = \"var(--colorNeutralBackgroundDisabled)\";\n\n// @public\nexport const colorNeutralBackgroundInverted = \"var(--colorNeutralBackgroundInverted)\";\n\n// @public\nexport const colorNeutralBackgroundInvertedDisabled = \"var(--colorNeutralBackgroundInvertedDisabled)\";\n\n// @public\nexport const colorNeutralBackgroundStatic = \"var(--colorNeutralBackgroundStatic)\";\n```\n\n----------------------------------------\n\nTITLE: Version Update Entry for 9.1.20\nDESCRIPTION: Release notes entry showing version comparison and dependency updates via beachball tool\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-accordion/library/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.1.20](https://github.com/microsoft/fluentui/tree/@fluentui/react-accordion_v9.1.20)\n\nWed, 28 Jun 2023 11:12:22 GMT\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-accordion_v9.1.19..@fluentui/react-accordion_v9.1.20)\n```\n\n----------------------------------------\n\nTITLE: Implementing AvatarGroup with Names List in React\nDESCRIPTION: This code snippet defines the AvatarGroup component that accepts a list of names, partitions them into inline and overflow items, and renders their respective avatar representations. It utilizes the partitionAvatarGroupItems utility to manage the avatar arrangement based on the provided list.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-avatar/library/docs/SPEC-AvatarGroup.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst names = [\n  'Johnie McConnell',\n  'Allan Munger',\n  'Erik Nason',\n  'Kristin Patterson',\n  'Daisy Phillips',\n  'Carole Poland',\n  'Carlos Slattery',\n  'Robert Tolbert',\n  'Kevin Sturgis',\n  'Charlotte Waltson',\n  'Elliot Woodward',\n];\n\nconst AvatarGroup = () => {\n  const { inlineItems, overflowItems } = partitionAvatarGroupItems({ items: names });\n\n  return (\n    <AvatarGroup {...props}>\n      {inlineItems.map(name => (\n        <AvatarGroupItem name={name} key={name} />\n      ))}\n      <AvatarGroupPopover>\n        {overflowItems.map(name => (\n          <AvatarGroupItem name={name} key={name} />\n        ))}\n      </AvatarGroupPopover>\n    </AvatarGroup>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Default Button Story in Separate File - TypeScript\nDESCRIPTION: This snippet defines the default story for the Button component in a separate file, ensuring that it is properly configured for usage in the storybook.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/authoring-stories.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// @filename ButtonDefault.stories.tsx\nexport const ButtonDefault = (props: ButtonProps) => <Button {...props}>Button</Button>;\nButtonDefault.storyName = 'Default';\n```\n\n----------------------------------------\n\nTITLE: Handling Input Component Shorthands in React\nDESCRIPTION: Provides a solution for handling input elements in React, demonstrating a workaround for slots that must not have children (as in input elements). The code ensures continued rendering without children by modifying slot properties post-solution.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/slot-null-rendering.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport function Input(props) {\n  const state = {\n    components: {\n      input: 'input',\n    },\n    input: resolveShorthand(props.input, {\n      children: React.Fragment, // 🚨 getSlots requires children\n    }),\n  };\n  const { slots, slotProps } = getSlots(state, ['input']);\n  delete slotProps.input.children; // 🚨 input can't have children\n\n  return (\n    <slots.root {...slotProps.root}>\n      <slots.input {...slotProps.input} />\n    </slots.root>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: FluentUI Presence Component Lifecycle Methods\nDESCRIPTION: Lifecycle callback methods that are triggered during various stages of motion animations in components created using createPresenceComponent. These callbacks can be used for motion orchestration and handling side effects for both enter and exit animations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-motion/stories/src/CreatePresenceComponent/CreatePresenceComponentLifecycleCallbacks.stories.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  onMotionStart: () => void;  // Called when any motion starts\n  onMotionFinish: () => void; // Called when all motions complete\n  onMotionCancel: () => void; // Called when motion is cancelled\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Slot Type Implementation in TypeScript\nDESCRIPTION: Shows the detailed TypeScript implementation of the Slot type with WithSlotShorthandValue. This defines how slots handle different input types and transform them into renderable content.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Slots/Slots.stories.mdx#2025-04-20_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\ntype Slot<Type, AlternateAs> =\n      ...\n      WithSlotShorthandValue<\n          Type extends keyof JSX.IntrinsicElements\n            ? { as?: Type } & WithSlotRenderFunction<IntrisicElementProps<Type>>\n            : Type extends React.ComponentType<infer Props>\n            ? WithSlotRenderFunction<Props>\n            : Type\n        >\n      ...\n```\n\n----------------------------------------\n\nTITLE: Tab List Component Overview\nDESCRIPTION: Explains the core functionality of a tab list component in user interfaces, focusing on single selection and content management\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tabs/stories/src/Tabs/TabListDescription.md#2025-04-20_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Incorrect Usage Examples in Fluent UI Styling\nDESCRIPTION: Demonstrates anti-patterns and incorrect usages of styling in Fluent UI, including direct color usage and improper class merging.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/StylingComponents.stories.mdx#2025-04-20_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { makeStyles, mergeClasses } from '@fluentui/react-components';\n\nconst useStyles = makeStyles({\n  root: { color: 'red' }, // Do not use colors directly as those are not theme-able. Always use colors from a theme\n});\n\nfunction Component(props) {\n  const classes = useStyles();\n\n  const wrongClasses = classes.root + ' ' + props.className; // Never concatenate class strings, always use mergeClasses()\n  const wrongClasses2 = mergeClasses(props.className, classes.root); // Incorrect order of classes - as the latest wins, props.className should be last to override the component styles\n}\n```\n\n----------------------------------------\n\nTITLE: Scrollbar Color Adjustment\nDESCRIPTION: This fix improves the contrast ratio of scrollbar colors to make them visually accessible and compliant with best standards for user interfaces.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/CHANGELOG.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nFix scrollbar color to have higher contrast ratio @yuanboxue-amber ([#15209](https://github.com/microsoft/fluentui/pull/15209))\n```\n\n----------------------------------------\n\nTITLE: Setting a Theme for a Specific DOM Element\nDESCRIPTION: Shows how to apply a theme to a specific DOM element rather than the entire document. This approach allows for different themed sections within the same application.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/_docs/developer/theming.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setTheme } from '@fluentui/web-components';\nimport { webDarkTheme } from '@fluentui/tokens';\n\nconst el = document.getElementById('my-element');\n\nsetTheme(webDarkTheme, el);\n```\n\n----------------------------------------\n\nTITLE: Implementing Motion Tokens in FluentUI React Components\nDESCRIPTION: Demonstrates how to use motion tokens in both CSS-based and JavaScript-based animations using FluentUI React components. Shows usage of tokens for animation duration and motionTokens for creating motion components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-motion/stories/src/Tokens/index.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMotionComponent, makeStyles, motionTokens, tokens } from '@fluentui/react-components';\n\n// 💡 Use `tokens` for defining CSS based animations\nconst useClasses = makeStyles({\n  root: {\n    animationDuration: tokens.curveAccelerateMid,\n  },\n});\n\n// 💡 Use `motionTokens` for defining JS based animations\nconst Motion = createMotionComponent({\n  duration: motionTokens.curveAccelerateMid,\n});\n```\n\n----------------------------------------\n\nTITLE: Propagating State Value in Render Using React Hook in Fluent UI (TSX)\nDESCRIPTION: This code snippet demonstrates a Provider component that propagates a value in the render phase, allowing components rendered in the same cycle to consume the actual value. It uses useLayoutEffect for synchronization after render.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/context-selector-tearing.md#2025-04-20_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Provider() {\n  // ⬇️ `value` is passed in render, so components rendered\n  //     in the same cycle can consume actual value\n  store.value = props.value;\n\n  React.useLayoutEffect(() => {\n    store.value = value;\n    store.notify();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: DOM Structure for CardHeader Component in HTML\nDESCRIPTION: Defines the basic HTML structure for the CardHeader component which contains image, header, and description slots arranged in a specific layout.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-card/library/docs/Spec.md#2025-04-20_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<div>\n  <div>{image}</div>\n  <div>\n    {header}\n    {description}\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing TreeView Class in TypeScript\nDESCRIPTION: This snippet defines the TreeView class, which extends FASTElement. It includes properties for appearance and size, methods for handling events like click, focus, and keyboard interactions. The class is designed to manage a collection of TreeItem elements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_86\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class TreeView extends FASTElement {\n    appearance: 'subtle' | 'subtle-alpha' | 'transparent';\n    // (undocumented)\n    childTreeItems: TreeItem[];\n    // @internal\n    currentFocused: HTMLElement | null;\n    currentSelected: HTMLElement | null;\n    // @internal\n    handleBlur: (e: FocusEvent) => void;\n    // @internal\n    handleClick(e: Event): true | undefined;\n    // @internal\n    handleFocus: (e: FocusEvent) => void;\n    // @internal\n    handleKeyDown: (e: KeyboardEvent) => boolean | void;\n    // @internal\n    handleSelectedChange: (e: Event) => boolean | void;\n    size: 'medium' | 'small';\n}\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies for Fluent UI in React Router 7/Remix\nDESCRIPTION: Commands to create a new React Router 7 or Remix project and install necessary Fluent UI and Vite plugin dependencies.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/SSR/Remix.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-remix@latest fluentui-remix\n\n# or\nnpx create-react-router@latest fluentui-react-router\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Install Fluent UI core packages\nnpm i @fluentui/react-components @fluentui/react-icons\n\n# Install required Vite plugins\nnpm i vite-plugin-cjs-interop @griffel/vite-plugin -D\n```\n\n----------------------------------------\n\nTITLE: Defining SemanticColorSlots Enumeration\nDESCRIPTION: Enumeration for semantic color slot identifiers that correspond to theme-based color assignments for various UI elements and states.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_254\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport enum SemanticColorSlots {\n    // (undocumented)\n    bodyBackground = 0,\n    // (undocumented)\n    bodyText = 1,\n    // (undocumented)\n    disabledBackground = 2,\n    // (undocumented)\n    disabledText = 3\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Button Content Prop in React\nDESCRIPTION: Shows how to migrate the 'content' prop to JSX children when using the Button component from @fluentui/react-components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Button.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from '@fluentui/react-northstar';\nconst Component = () => <Button content=\"Button content\" />;\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from '@fluentui/react-components';\nconst Component = () => <Button>Button content</Button>;\n```\n\n----------------------------------------\n\nTITLE: Fixing Tree indentation in React\nDESCRIPTION: This patch addresses a bug in the Tree component where indentation was broken due to the component incorrectly consuming the root context instead of the subtree context. The fix ensures that indentation is rendered correctly within the Tree component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tree/library/CHANGELOG.md#2025-04-20_snippet_7\n\nLANGUAGE: React\nCODE:\n```\nbugfix: Tree indentation broken due to wrongly consuming root context instead of subtree context ([PR #29459](https://github.com/microsoft/fluentui/pull/29459) by bernardo.sunderhus@gmail.com)\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook and Font Components for Fluent UI Theme Documentation\nDESCRIPTION: This snippet imports necessary components from Storybook and custom font-related story components for documenting Fluent UI theme fonts.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-theme/stories/src/Theme/fonts/index.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Canvas } from '@storybook/addon-docs';\nimport { FontFamily, FontSize, FontWeight, LineHeight } from './ThemeFonts.stories';\n```\n\n----------------------------------------\n\nTITLE: Exporting TagPicker Group Styles Hook in TypeScript\nDESCRIPTION: Exports a hook for applying styles to the TagPicker group component based on its current state.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_60\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const useTagPickerGroupStyles_unstable: (state: TagPickerGroupState) => TagPickerGroupState;\n```\n\n----------------------------------------\n\nTITLE: Implementing Sticky Component Class\nDESCRIPTION: A component for creating sticky elements within a ScrollablePane. Used for implementing sticky headers or footers that remain visible during scrolling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_263\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport class Sticky extends React_2.Component<IStickyProps, IStickyState> {\n    constructor(props: IStickyProps);\n    // (undocumented)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Command - Shell\nDESCRIPTION: Basic command to run the RC caret converter using yarn and nx.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/rc-caret/README.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:rc-caret\n```\n\n----------------------------------------\n\nTITLE: Defining ICommandBarData Interface\nDESCRIPTION: Defines the `ICommandBarData` interface, which encapsulates the data used to render the CommandBar component. It includes properties for caching the data, and for storing the far, overflow, and primary items.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_73\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ICommandBarData {\n    cacheKey: string;\n    farItems: ICommandBarItemProps[] | undefined;\n    minimumOverflowItems: number;\n    overflowItems: ICommandBarItemProps[];\n    primaryItems: ICommandBarItemProps[];\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Popover components\nDESCRIPTION: This snippet shows how to import the Popover, PopoverTrigger, and PopoverSurface components from the '@fluentui/react-popover' library. These components are essential for creating and controlling popover elements in Fluent UI React applications.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-popover/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Popover, PopoverTrigger, PopoverSurface } from '@fluentui/react-popover';\n```\n\n----------------------------------------\n\nTITLE: Original Unprocessed TypeScript Styles in Fluent UI\nDESCRIPTION: This TypeScript snippet shows the original, unprocessed styles in a Fluent UI component using the makeStyles function from Griffel.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/shared/build-system/stop-styles-transforms.md#2025-04-20_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// packages/react-components/react-menu/src/components/MenuDivider/useMenuDividerStyles.styles.ts\n// 📝 output is simpfied\n\nconst useStyles = makeStyles({\n  root: {\n    ...shorthands.margin('4px', '-5px', '4px', '-5px'),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining registerDefaultFontFaces Function in TypeScript for FluentUI\nDESCRIPTION: Function that registers default font faces for FluentUI's theming system. It takes a baseUrl parameter to specify where font assets are located.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/theme/etc/theme.api.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport function registerDefaultFontFaces(baseUrl: string): void;\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.114.2\nDESCRIPTION: This change updates the @fluentui/react library to version 8.114.2, addressing issues reported in previous versions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluent2-theme/CHANGELOG.md#2025-04-20_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.114.2 ([PR #30063](https://github.com/microsoft/fluentui/pull/30063) by beachball)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/set-version to v8.2.14 ([PR #30063](https://github.com/microsoft/fluentui/pull/30063) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Vertically Aligning React SpinButton Component\nDESCRIPTION: This patch addresses the vertical alignment of the spinbutton component. It is intended to ensure that the component is properly aligned within its container, improving the overall visual appearance and layout.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-spinbutton/library/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: none\nCODE:\n```\nvertically align spinbutton component ([PR #31812](https://github.com/microsoft/fluentui/pull/31812) by kirpadv@gmail.com)\n```\n\n----------------------------------------\n\nTITLE: FluentUI React Experiments Version History Entry\nDESCRIPTION: Series of changelog entries documenting version updates to the FluentUI React Experiments package and its dependencies. Each entry includes version number, date, comparison link, and patch descriptions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-experiments/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [8.14.90](https://github.com/microsoft/fluentui/tree/@fluentui/react-experiments_v8.14.90)\n\nThu, 08 Jun 2023 07:35:14 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-experiments_v8.14.89..@fluentui/react-experiments_v8.14.90)\n\n### Patches\n\n- Bump @fluentui/react to v8.110.2 ([PR #27864](https://github.com/microsoft/fluentui/pull/27864) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Importing a component from @fluentui/react-focus\nDESCRIPTION: This code snippet demonstrates how to import a specific component (ComponentName) from the `@fluentui/react-focus` package in a JavaScript/React environment. This is the standard way to use the components provided by the package within your application.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-focus/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ComponentName } from '@fluentui/react-focus';\n```\n\n----------------------------------------\n\nTITLE: Define OffsetFunctionParam type\nDESCRIPTION: Defines a type called `OffsetFunctionParam` which contains parameters passed to the `OffsetFunction`. These parameters include the positioned rectangle, target rectangle, position, and alignment, providing the necessary context for calculating the offset.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-positioning/etc/react-positioning.api.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type OffsetFunctionParam = {\n    positionedRect: PositioningRect;\n    targetRect: PositioningRect;\n    position: Position;\n    alignment?: Alignment;\n};\n```\n\n----------------------------------------\n\nTITLE: React Provider Version Update\nDESCRIPTION: Version number specification in markdown format showing latest update to React Provider package\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-provider/library/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.0.0-rc.8](https://github.com/microsoft/fluentui/tree/@fluentui/react-provider_v9.0.0-rc.8)\n\nWed, 04 May 2022 13:26:48 GMT\n```\n\n----------------------------------------\n\nTITLE: Defining ISwatchColorPickerProps Interface in TypeScript\nDESCRIPTION: Specifies the ISwatchColorPickerProps interface with properties for the SwatchColorPicker component, including styling and behavior options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_196\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface ISwatchColorPickerProps extends React_2.RefAttributes<HTMLElement> {\n    ariaPosInSet?: number;\n    ariaSetSize?: number;\n    cellBorderWidth?: number;\n    cellHeight?: number;\n    cellMargin?: number;\n    cellShape?: 'circle' | 'square';\n    cellWidth?: number;\n    className?: string;\n    colorCells: IColorCellProps[];\n    columnCount: number;\n    defaultSelectedId?: string | undefined;\n    disabled?: boolean;\n    doNotContainWithinFocusZone?: boolean;\n    focusOnHover?: boolean;\n    getColorGridCellStyles?: IStyleFunctionOrObject<IColorPickerGridCellStyleProps, IColorPickerGridCellStyles>;\n    id?: string;\n    // @deprecated (undocumented)\n    isControlled?: boolean;\n    mouseLeaveParentSelector?: string | undefined;\n    onCellFocused?: (id?: string, color?: string, event?: React_2.FormEvent<HTMLButtonElement>) => void;\n    onCellHovered?: (id?: string, color?: string, event?: React_2.MouseEvent<HTMLButtonElement>) => void;\n    onChange?: (event: React_2.FormEvent<HTMLElement>, id: string | undefined, color: string | undefined) => void;\n    // @deprecated (undocumented)\n    onColorChanged?: (id?: string, color?: string) => void;\n    onRenderColorCell?: IRenderFunction<IColorCellProps>;\n    onRenderColorCellContent?: IRenderFunction<IColorCellProps>;\n    selectedId?: string;\n    shouldFocusCircularNavigate?: boolean;\n    styles?: IStyleFunctionOrObject<ISwatchColorPickerStyleProps, ISwatchColorPickerStyles>;\n    theme?: ITheme;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StartEndOptions Type in TypeScript\nDESCRIPTION: TypeScript type definition for StartEndOptions that combines StartOptions and EndOptions generic types, allowing components to be configured with start and end slots.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_54\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport type StartEndOptions<TSource = any, TParent = any> = StartOptions<TSource, TParent> & EndOptions<TSource, TParent>;\n```\n\n----------------------------------------\n\nTITLE: Pulling External Branches in Git\nDESCRIPTION: Explains the procedure to fetch and switch to another developer's branch using their fork repository in Git. It involves adding the remote repository, fetching the desired branch, and checking it out locally.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/dev-workflow.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add yourFriendsRepo https://github.com/yourFriendsUserName/fluentui.git // creates a remote of your friends fork on your local machine\ngit fetch yourFriendsRepo yourFriends/fancy/branch // grabs the branch you want to work on\ngit checkout feat/react-drawer/move-scroll-logic-to-context // switches to the branch\n```\n\n----------------------------------------\n\nTITLE: Applying Azure Theme with ThemeProvider in JSX\nDESCRIPTION: This snippet demonstrates how to apply an Azure theme using the ThemeProvider component from Fluent UI React. It shows the import statement for ThemeProvider and how to wrap a component with the selected theme.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/azure-themes/README.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeProvider } from '@fluentui/react';\nconst theme = AzureThemeDark; // or alternatively AzureThemeLight\n\n<ThemeProvider theme={theme}>\n  <div>{child component}</div>\n</ThemeProvider>\n```\n\n----------------------------------------\n\nTITLE: Defining IDragDropHelperParams Interface in TypeScript\nDESCRIPTION: Defines the IDragDropHelperParams interface with properties for minimum pixels for drag and selection. This interface is marked as @public but undocumented.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_110\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IDragDropHelperParams {\n    // (undocumented)\n    minimumPixelsForDrag?: number;\n    // (undocumented)\n    selection: ISelection;\n}\n```\n\n----------------------------------------\n\nTITLE: CalendarDayGridProps Interface Definition\nDESCRIPTION: Definition of the props interface for the CalendarDayGrid component, which includes properties for customization, navigation, selection, and styling of the day grid.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-calendar-compat/library/etc/react-calendar-compat.api.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport interface CalendarDayGridProps extends DayGridOptions {\n    allFocusable?: boolean;\n    animationDirection?: AnimationDirection;\n    className?: string;\n    componentRef?: React_2.RefObject<ICalendarDayGrid>;\n    customDayCellRef?: (element: HTMLElement, date: Date, classNames: CalendarDayGridStyles) => void;\n    dateRangeType: DateRangeType;\n    dateTimeFormatter: DateFormatting;\n    daysToSelectInDayView?: number;\n    firstDayOfWeek: DayOfWeek;\n    firstWeekOfYear: FirstWeekOfYear;\n    getMarkedDays?: (startingDate: Date, endingDate: Date) => Date[];\n    gridLabel?: string;\n    labelledBy?: string;\n    lightenDaysOutsideNavigatedMonth?: boolean;\n    maxDate?: Date;\n    minDate?: Date;\n    navigatedDate: Date;\n    onDismiss?: () => void;\n    onNavigateDate: (date: Date, focusOnNavigatedDay: boolean) => void;\n    onSelectDate?: (date: Date, selectedDateRangeArray?: Date[]) => void;\n    restrictedDates?: Date[];\n    selectedDate: Date;\n    showCloseButton?: boolean;\n    showWeekNumbers?: boolean;\n    strings: CalendarStrings;\n    today?: Date;\n    weeksToShow?: number;\n    workWeekDays?: DayOfWeek[];\n}\n```\n\n----------------------------------------\n\nTITLE: Font Icon Registration Type Definition - TypeScript\nDESCRIPTION: Type definitions for registering font icons in the theme system, supporting both direct objects and function returns.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Icon.md#2025-04-20_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\ntype ObjectOrFunc<TResult, TArg = {}> = ((arg: TArg) => TResult) | TResult;\n\ntype FontIconSpec = ObjectOrFunc<{\n  content: string;\n  fontFamily: string;\n}>;\n```\n\n----------------------------------------\n\nTITLE: Rendering Table Cell Layout with Avatar Context - TypeScript\nDESCRIPTION: This function renders TableCellLayout utilizing AvatarContextProvider to manage Avatar sizes based on the parent's context, optimizing component reuse across the Fluent UI framework.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/reusing-avatar-in-components.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst tableAvatarSizeMap = {\n  small: 24,\n  smaller: 20,\n};\n\nexport const renderTableCellLayout_unstable = state => {\n  const { slots, slotProps } = getSlots<TableCellLayoutSlots>(state);\n\n  return (\n    <slots.root {...slotProps.root}>\n      {/* Only affects the specific slot */}\n      <AvatarContextProvider value={tableAvatarSizeMap[state.size]}>\n        {slots.media && <slots.media {...slotProps.media} />}\n      </AvatarContextProvider>\n    </slots.root>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Spinner Usage in Fluent UI v8\nDESCRIPTION: Demonstrates the basic implementation of a Spinner component in Fluent UI v8. It imports the Spinner from the '@fluentui/react/lib/Spinner' package and renders it without any props.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Spinner.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Spinner } from '@fluentui/react/lib/Spinner';\nimport React from 'react';\n\nconst SpinnerV8BasicExample = () => <Spinner />;\n\nexport default SpinnerV8BasicExample;\n```\n\n----------------------------------------\n\nTITLE: Rendering Icons with Material-UI in HTML\nDESCRIPTION: Material-UI supports icons in both font and SVG formats. The font type uses a <span> element, while the SVG requires using a <svg>. Both types are designed for accessibility and allow specific role and aria attributes to support user navigation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Icon.md#2025-04-20_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"material-icons MuiIcon-root\" aria-hidden=\"true\">add_circle</span>\n```\n\nLANGUAGE: html\nCODE:\n```\n<svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\" role=\"presentation\">\n  <path d=\"M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z\"></path>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Primitive Value Shorthand Prop\nDESCRIPTION: Demonstrates how primitive values can be used as shorthand props, which are automatically mapped to default element properties\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/docs/src/pages/ShorthandProps.mdx#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <Loader label=\"Fetching data...\" />\n  <Loader label={{ content: 'Fetching data...' }} />\n</>\n```\n\n----------------------------------------\n\nTITLE: ImageSwatch DOM Structure (grid layout)\nDESCRIPTION: This snippet shows the DOM structure for an ImageSwatch component when used in a grid layout. It uses a button element with the \"gridcell\" role and CSS background-image property to display the image.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-swatch-picker/library/docs/Spec.md#2025-04-20_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n<button\n  aria-label=\"Image name\"\n  role=\"gridcell\"\n  aria-selected=\"true\"\n  style=\"background-image: url({url})\"\n  class=\"fui-ImageSwatch\"\n>\n</button>\n```\n\n----------------------------------------\n\nTITLE: Importing Textarea Component from Fluent UI React in JavaScript\nDESCRIPTION: This snippet shows how to import the Textarea component from the @fluentui/react-textarea package. This is the first step in using the component in a React application.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-textarea/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Textarea } from '@fluentui/react-textarea';\n```\n\n----------------------------------------\n\nTITLE: Stardust Slider Implementation\nDESCRIPTION: Stardust UI's slider implementation featuring an input-focused approach with wrapper div and explicit range input element. Includes rail, track and thumb elements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Slider.md#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"ui-slider\" aria-disabled=\"false\">\n  <div class=\"ui-slider__input-wrapper\">\n    <span class=\"ui-slider__rail\"></span>\n    <span class=\"ui-slider__track\" style=\"width: 50%;\"></span>\n    <input\n      aria-orientation=\"horizontal\"\n      aria-valuemin=\"0\"\n      aria-valuemax=\"100\"\n      aria-valuenow=\"50\"\n      aria-valuetext=\"50\"\n      min=\"0\"\n      max=\"100\"\n      step=\"1\"\n      type=\"range\"\n      class=\"ui-box ui-slider__input\"\n      value=\"50\"\n    />\n    <span class=\"ui-slider__thumb\" style=\"left: 50%;\"></span>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Import React and SpinButton\nDESCRIPTION: Imports the necessary modules from React and the Fluent UI React library. Specifically, it imports the React library itself and the SpinButton component from '@fluentui/react/lib/SpinButton'.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-monaco-editor/src/transpiler/examples/class.txt#2025-04-20_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as React from 'react';\nimport { SpinButton } from '@fluentui/react/lib/SpinButton';\n```\n\n----------------------------------------\n\nTITLE: Configuring Horizontal Bar Graph Properties in FluentUI\nDESCRIPTION: Configuration options for customizing horizontal bar graphs including bar chart data, hover callouts, chart data display modes, benchmark values, and label visibility. Contains interface properties for IChartDataPoint and various display options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-examples/src/react-charting/HorizontalBarChart/docs/HorizontalBarChartBestPractices.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IHorizontalBarChartProps {\n  barChartCustomData?: any;\n  onRenderCalloutPerHorizontalBar?: (props: any) => JSX.Element;\n  chartDataMode?: 'number' | 'fraction' | 'percentage';\n  hideLabels?: boolean;\n  // IChartDataPoint interface for benchmark\n  data: {\n    data?: number; // benchmark value\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Active Item IDs Tracking in Tree\nDESCRIPTION: This fix ensures that the Tree component correctly keeps track of the activeItemIds, improving state management and user experience.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/CHANGELOG.md#2025-04-20_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nFix `Tree` component to correctly keep track of the `activeItemIds` @assuncaocharles ([#14507](https://github.com/microsoft/fluentui/pull/14507))\n```\n\n----------------------------------------\n\nTITLE: Implementing Flex Layout Media Object in React\nDESCRIPTION: This snippet demonstrates implementing a media object using Flexbox in React with Fluent UI components. It uses styles from useStyles and wraps children with a media container and a text container, facilitating the display of media content alongside descriptive text. Key dependencies include @fluentui/react-components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/recipes/src/recipes/media-object/MediaObject.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text, makeStyles } from '@fluentui/react-components';\n\n// Our makeStyles call from above\n\nconst MediaObject: React.FC<{ text?: string }> = ({ children, text }) => {\n  const styles = useStyles();\n\n  return (\n    <div className={styles.parent}>\n      {children}\n      <div className={styles.textContainer}>\n        <Text>{text}</Text>\n      </div>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using ToggleButton in React with Different States\nDESCRIPTION: This example demonstrates various ways to use the ToggleButton component, including default state, controlled state, and initial checked state.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-button/library/README.md#2025-04-20_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<ToggleButton>Toggle volume</ToggleButton>\n<ToggleButton defaultChecked={true}>Toggle volume</ToggleButton>\n<ToggleButton checked={true}>Toggle volume</ToggleButton>\n<ToggleButton checked={false}>Toggle volume</ToggleButton>\n```\n\n----------------------------------------\n\nTITLE: Implementing atMention styling in default theme using FluentUI v9\nDESCRIPTION: Example showing how to achieve the same visual result as atMention property in the default theme using makeStyles in v9.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-text/library/docs/MIGRATION.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeStyles, Text } from '@fluentui/react-components';\n\nconst useStyles = makeStyles({\n  root: {\n    color: 'rgb(98, 100, 167)',\n  },\n});\n\nconst MyComponent = () => {\n  const styles = useStyles();\n\n  return <Text className={styles.root}>{/* ... */}</Text>;\n};\n```\n\n----------------------------------------\n\nTITLE: Adding ARIA Label to Badge Icon in JSX\nDESCRIPTION: Demonstrates how to add an aria-label to a custom icon within a Badge component for improved screen reader accessibility.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/stories/src/Badge/BadgeBestPractices.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Badge icon={<PasteIcon aria-label=\"paste\" />} />\n```\n\n----------------------------------------\n\nTITLE: Adding eslint React Compiler in FluentUI React Table\nDESCRIPTION: This change adds eslint React Compiler to the FluentUI React Table project. This enhances code quality and helps identify potential issues during development by utilizing the react-compiler eslint plugin.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-table/library/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: none\nCODE:\n```\n\"chore: add eslint react-compiler ([PR #31457](https://github.com/microsoft/fluentui/pull/31457) by seanmonahan@microsoft.com)\"\n```\n\n----------------------------------------\n\nTITLE: TypeScript: Switch Class Name (Deprecated)\nDESCRIPTION: Defines a deprecated string constant for the Switch component's class name.  This is likely used for styling, but is marked as deprecated.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-switch/library/etc/react-switch.api.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public @deprecated (undocumented)\nexport const switchClassName: string;\"\n```\n\n----------------------------------------\n\nTITLE: Z-Index Constants for FluentUI Components\nDESCRIPTION: A namespace containing standardized Z-index values for various FluentUI components. This ensures consistent layering of elements across the UI. Includes values for navigation, focus styling, layers, and other components with ScrollablePane being marked as deprecated.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/style-utilities/etc/style-utilities.api.md#2025-04-20_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport namespace ZIndexes {\n    const // (undocumented)\n    Nav: number;\n    const // @deprecated (undocumented)\n    ScrollablePane: number;\n    const // (undocumented)\n    FocusStyle: number;\n    const // (undocumented)\n    Coachmark: number;\n    const // (undocumented)\n    Layer: number;\n    const // (undocumented)\n    KeytipLayer: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Style Definitions with makeStyles (After)\nDESCRIPTION: Example of defining styles using makeStyles for use with the ItemLayout component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/ItemLayout.stories.mdx#2025-04-20_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n// in COMPONENT_NAME.styles.ts\nimport { makeStyles } from '@fluentui/react-components';\n\nexport const useStyles = makeStyles({\n  root: { display: 'flex' },\n  endMedia: { display: 'none' },\n});\n```\n\n----------------------------------------\n\nTITLE: RadioGroup usage in Northstar (v0)\nDESCRIPTION: Illustrates how to use the RadioGroup component in Northstar. The `items` prop defines the radio button options, and `checkedValue` (implicitly controlled through `onCheckedValueChange`) specifies the currently selected value.  This example uses values to identify selected items.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-radio/library/docs/Spec.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<RadioGroup\n  onCheckedValueChange={handleChange}\n  items={[\n    { key: '1', label: 'Make your choice', value: '1' },\n    { key: '2', label: 'Another option', value: '2' },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: No Context Default Value (Incorrect)\nDESCRIPTION: This code snippet demonstrates the incorrect way to create a React context with a default value.  Using default values can cause issues, thus it's restricted by the `no-context-default-value` rule.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/eslint-plugin/README.md#2025-04-20_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as React from 'react';\nconst context = React.createContext({ someValue: undefined });\n```\n\n----------------------------------------\n\nTITLE: Fabric Checkbox Props Definition\nDESCRIPTION: Comprehensive prop definitions for the Fabric Checkbox component, including accessibility, styling, and interaction properties\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Checkbox.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ICheckboxProps {\n  ariaDescribedBy?: string;\n  ariaLabel?: string;\n  checked?: boolean;\n  disabled?: boolean;\n  onChange?: (ev, checked) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Content Security Policy with Nonce\nDESCRIPTION: Shows how to add nonce attribute for Content Security Policies using styleElementAttributes in createDOMRenderer configuration.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/AdvancedConfiguration.stories.mdx#2025-04-20_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createDOMRenderer, FluentProvider, RendererProvider } from '@fluentui/react-components';\nimport * as React from 'react';\n\nfunction MyComponent(props) {\n  const { children } = props;\n  const renderer = React.useMemo(\n    () => createDOMRenderer(document, { styleElementAttributes: { nonce: 'random' } }),\n    [],\n  );\n\n  return (\n    <RendererProvider renderer={renderer}>\n      <FluentProvider>{children}</FluentProvider>\n    </RendererProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IDetailsListStyleProps Type in TypeScript\nDESCRIPTION: This snippet defines the IDetailsListStyleProps type, which represents the style properties for a DetailsList component. It includes theme, className, and layout-related properties.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_87\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type IDetailsListStyleProps = Required<Pick<IDetailsListProps, 'theme'>> & Pick<IDetailsListProps, 'className'> & {\n    isHorizontalConstrained?: boolean;\n    compact?: boolean;\n    isFixed?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Adding size prop to Button component\nDESCRIPTION: New feature that adds a size prop to the Button component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/CHANGELOG.md#2025-04-20_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nAdd `size` prop for `Button` component\n```\n\n----------------------------------------\n\nTITLE: Nested Folder Structure Changes\nDESCRIPTION: Diff showing proposed nested folder structure reorganization\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/shared/build-system/08-type-checking-perf-improvements.md#2025-04-20_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\nreact-components/\n  react-text/\n- |- .storybook/\n- |- src/\n- |- package.json\n- |- project.json\n  |- stories/\n+   |- .storybook\n+   |- src/\n+   |- package.json\n+   |- project.json\n+ |- library/\n+   |- src/\n+   |- package.json\n+   |- project.json\n```\n\n----------------------------------------\n\nTITLE: Remove Icon Margin Style Update\nDESCRIPTION: Patch update to remove margin from Icon in ToolbarButton when vertical prop is passed\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-toolbar/library/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nRemove margin from Icon in ToolbarButton when vertical prop is passed ([PR #28658](https://github.com/microsoft/fluentui/pull/28658) by chassunc@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Stack.Item\nDESCRIPTION: This snippet shows the HTML structure for a Stack.Item component using CSS classes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Flex/Flex.StackItem.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"flex\">\n  <div class=\"flex-item\">Item</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Updating .npmignore for vNext Packages in Fluent UI\nDESCRIPTION: This snippet shows the proposed .npmignore configuration to reduce package size and improve maintenance. It excludes unnecessary files and folders, resulting in a 52% reduction in files and 21% smaller packed package size.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/shared/build-system/03-packaging-for-npm.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n.storybook/\n.vscode/\nbundle-size/\nconfig/\ncoverage/\ne2e/\netc/\nnode_modules/\nsrc/\ndist/types\ntemp/\n__fixtures__\n__mocks__\n__tests__\n\n*.api.json\n*.log\n*.spec.*\n*.stories.*\n*.test.*\n*.yml\n\n# config files\n*config.*\n*rc.*\n.editorconfig\n.eslint*\n.git*\n.prettierignore\n```\n\n----------------------------------------\n\nTITLE: Overflow Component Type Definitions\nDESCRIPTION: TypeScript type definitions for Overflow and OverflowItem components with their props and configuration options\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-overflow/library/etc/react-priority-overflow.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type OverflowItemProps = {\n  id: string;\n  groupId?: string;\n  priority?: number;\n  children: React_2.ReactElement;\n};\n\nexport type OverflowProps = Partial<\n  Pick<ObserveOptions, 'overflowAxis' | 'overflowDirection' | 'padding' | 'minimumVisible'>\n> & {\n  children: React_2.ReactElement;\n};\n```\n\n----------------------------------------\n\nTITLE: Comparing Alpha Slider Properties in Fluent UI v8 and v9\nDESCRIPTION: This markdown table compares the properties of alpha slider components between Fluent UI versions 8 and 9. It highlights that there is no direct equivalent in v8 for the 'transparency' property in v9, which determines how the alpha channel is interpreted.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/ColorPicker.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| v8              | v9             | Notes                                                                        |\n| --------------- | -------------- | ---------------------------------------------------------------------------- |\n| `no equivalent` | `transparency` | The `transparency` property determines how the alpha channel is interpreted. |\n```\n\n----------------------------------------\n\nTITLE: Using Custom Icon in Fluent UI v0\nDESCRIPTION: Example showing how to use a custom icon created with createSvgIcon in v0, demonstrating both default and outline variants.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Icons.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// Default filled icon\n<MyIcon />\n\n// Outline Icon\n<MyIcon outline />\n```\n\n----------------------------------------\n\nTITLE: Exporting Tree Hooks in TypeScript\nDESCRIPTION: Exports hooks for tree state management, context access, and context values.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tree/library/etc/react-tree.api.md#2025-04-20_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const useTree_unstable: (props: TreeProps, ref: React_2.Ref<HTMLElement>) => TreeState;\n\nexport const useTreeContext_unstable: <T>(selector: ContextSelector<TreeContextValue, T>) => T;\n\nexport function useTreeContextValues_unstable(state: TreeState): TreeContextValues;\n```\n\n----------------------------------------\n\nTITLE: Function References in Donut Chart Implementation\nDESCRIPTION: List of functions used in the Donut Chart component with their testability status and reasoning. Includes both public and private methods, with special attention to DOM dependencies and component rendering requirements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/docs/TestPlans/Utilities/UnitTests.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Functions                     | Can it be unit tested | Reason                                                                                                                                                                 |\n| ----------------------------- | --------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| a. `convertToLocaleString()`  | Yes                   |                                                                                                                                                                                        |\n| b.`getAccessibleDataObject()` | Yes                   |                                                                                                                                                                                        |\n| c. `_valueInsideDonut()`      | No                    | private function which can only be tested by rendering the donut chart component.                                                                                                      |\n| d. `wrapTextInsideDonut()`    | No                    | cannot be unit tested as it requires the tspan length to be calculated using Browser Functions like getComputedTextLength().                                                           |\n| e. `_computeTotalValue()`     | No                    | depends on the data prop passed down from the DonutChart.base to Pie during component rendering. Also since this is a private function, it can only be tested via component rendering. |\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for Fluent UI React Virtualizer Stories in JavaScript\nDESCRIPTION: This code snippet shows how to configure the stories property in the Storybook configuration file to include Fluent UI React Virtualizer stories. It specifies the file paths for both MDX and TypeScript/TSX story files.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-virtualizer/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-virtualizer/stories/src/**/*.stories.mdx', '../packages/react-components/react-virtualizer/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Vertical Divider in FluentUI v9\nDESCRIPTION: Equivalent example showing how to create a vertical Divider with end-aligned content in FluentUI v9.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Divider.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Divider vertical alignContent=\"end\">\n  Content\n</Divider>\n```\n\n----------------------------------------\n\nTITLE: Exporting Fluent UI Components and Styles - JavaScript\nDESCRIPTION: Exports a wide array of components, context values, class names, props, slots, and states associated with various Fluent UI elements such as Accordion, Avatar, Badge, Button, Carousel, Checkbox, ColorPicker, and more. These exports offer a modular approach, making individual UI elements available for consumption.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/etc/react-components.api.md#2025-04-20_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport { __css }\n\nexport { __resetCSS }\n\nexport { __resetStyles }\n\nexport { __styles }\n\nexport { Accordion }\n\nexport { accordionClassNames }\n\nexport { AccordionContextValue }\n\nexport { AccordionContextValues }\n\nexport { AccordionHeader }\n\nexport { accordionHeaderClassNames }\n\nexport { AccordionHeaderContextValue }\n\nexport { AccordionHeaderContextValues }\n\nexport { AccordionHeaderExpandIconPosition }\n\nexport { AccordionHeaderProps }\n\nexport { AccordionHeaderSize }\n\nexport { AccordionHeaderSlots }\n\nexport { AccordionHeaderState }\n\nexport { AccordionIndex }\n\nexport { AccordionItem }\n\nexport { accordionItemClassNames }\n\nexport { AccordionItemContextValue }\n\nexport { AccordionItemContextValues }\n\nexport { AccordionItemProps }\n\nexport { AccordionItemProvider }\n\nexport { AccordionItemSlots }\n\nexport { AccordionItemState }\n\nexport { AccordionItemValue }\n\nexport { AccordionPanel }\n\nexport { accordionPanelClassNames }\n\nexport { AccordionPanelProps }\n\nexport { AccordionPanelSlots }\n\nexport { AccordionPanelState }\n\nexport { AccordionProps }\n\nexport { AccordionProvider }\n\nexport { AccordionSlots }\n\nexport { AccordionState }\n\nexport { AccordionToggleData }\n\nexport { AccordionToggleEvent }\n\nexport { AccordionToggleEventHandler }\n\nexport { AlphaSlider }\n\nexport { alphaSliderClassNames }\n\nexport { AlphaSliderProps }\n\nexport { AlphaSliderSlots }\n\nexport { AlphaSliderState }\n\nexport { AnnounceContextValue }\n\nexport { AnnounceProvider }\n\nexport { AriaLiveAnnouncer }\n\nexport { AriaLiveAnnouncerProps }\n\nexport { AriaLiveAnnouncerState }\n\nexport { arrowHeights }\n\nexport { assertSlots }\n\nexport { AtomMotion }\n\nexport { AtomMotionFn }\n\nexport { Avatar }\n\nexport { avatarClassNames }\n\nexport { AvatarGroup }\n\nexport { avatarGroupClassNames }\n\nexport { AvatarGroupContextValue }\n\nexport { AvatarGroupContextValues }\n\nexport { AvatarGroupItem }\n\nexport { avatarGroupItemClassNames }\n\nexport { AvatarGroupItemProps }\n\nexport { AvatarGroupItemSlots }\n\nexport { AvatarGroupItemState }\n\nexport { AvatarGroupPopover }\n\nexport { avatarGroupPopoverClassNames }\n\nexport { AvatarGroupPopoverProps }\n\nexport { AvatarGroupPopoverSlots }\n\nexport { AvatarGroupPopoverState }\n\nexport { AvatarGroupProps }\n\nexport { AvatarGroupProvider }\n\nexport { AvatarGroupSlots }\n\nexport { AvatarGroupState }\n\nexport { AvatarNamedColor }\n\nexport { AvatarProps }\n\nexport { AvatarSize }\n\nexport { AvatarSizes }\n\nexport { AvatarSlots }\n\nexport { AvatarState }\n\nexport { Badge }\n\nexport { badgeClassNames }\n\nexport { BadgeProps }\n\nexport { BadgeSlots }\n\nexport { BadgeState }\n\nexport { Body1 }\n\nexport { body1ClassNames }\n\nexport { Body1Strong }\n\nexport { body1StrongClassNames }\n\nexport { Body1Stronger }\n\nexport { body1StrongerClassNames }\n\nexport { Body2 }\n\nexport { body2ClassNames }\n\nexport { BorderRadiusTokens }\n\nexport { BrandVariants }\n\nexport { Breadcrumb }\n\nexport { BreadcrumbButton }\n\nexport { breadcrumbButtonClassNames }\n\nexport { BreadcrumbButtonProps }\n\nexport { BreadcrumbButtonSlots }\n\nexport { BreadcrumbButtonState }\n\nexport { breadcrumbClassNames }\n\nexport { BreadcrumbContextValues }\n\nexport { BreadcrumbDivider }\n\nexport { breadcrumbDividerClassNames }\n\nexport { BreadcrumbDividerProps }\n\nexport { BreadcrumbDividerSlots }\n\nexport { BreadcrumbDividerState }\n\nexport { BreadcrumbItem }\n\nexport { breadcrumbItemClassNames }\n\nexport { BreadcrumbItemProps }\n\nexport { BreadcrumbItemSlots }\n\nexport { BreadcrumbItemState }\n\nexport { BreadcrumbProps }\n\nexport { BreadcrumbProvider }\n\nexport { BreadcrumbSlots }\n\nexport { BreadcrumbState }\n\nexport { Button }\n\nexport { buttonClassNames }\n\nexport { ButtonProps }\n\nexport { ButtonSlots }\n\nexport { ButtonState }\n\nexport { Caption1 }\n\nexport { caption1ClassNames }\n\nexport { Caption1Strong }\n\nexport { caption1StrongClassNames }\n\nexport { Caption1Stronger }\n\nexport { caption1StrongerClassNames }\n\nexport { Caption2 }\n\nexport { caption2ClassNames }\n\nexport { Caption2Strong }\n\nexport { Card }\n\nexport { cardClassNames }\n\nexport { cardCSSVars }\n\nexport { CardFooter }\n\nexport { cardFooterClassNames }\n\nexport { CardFooterProps }\n\nexport { CardFooterSlots }\n\nexport { CardFooterState }\n\nexport { CardHeader }\n\nexport { cardHeaderClassNames }\n\nexport { cardHeaderCSSVars }\n\nexport { CardHeaderProps }\n\nexport { CardHeaderSlots }\n\nexport { CardHeaderState }\n\nexport { CardPreview }\n\nexport { cardPreviewClassNames }\n\nexport { CardPreviewProps }\n\nexport { CardPreviewSlots }\n\nexport { CardPreviewState }\n\nexport { CardProps }\n\nexport { CardSlots }\n\nexport { CardState }\n\nexport { Carousel }\n\nexport { CarouselAnnouncerFunction }\n\nexport { CarouselAutoplayButton }\n\nexport { carouselAutoplayButtonClassNames }\n\nexport { CarouselAutoplayButtonProps }\n\nexport { CarouselAutoplayButtonSlots }\n\nexport { CarouselAutoplayButtonState }\n\nexport { CarouselButton }\n\nexport { carouselButtonClassNames }\n\nexport { CarouselButtonProps }\n\nexport { CarouselButtonSlots }\n\nexport { CarouselButtonState }\n\nexport { CarouselCard }\n\nexport { carouselCardClassNames }\n\nexport { CarouselCardProps }\n\nexport { CarouselCardSlots }\n\nexport { CarouselCardState }\n\nexport { carouselClassNames }\n\nexport { carouselContextDefaultValue }\n\nexport { CarouselContextValue }\n\nexport { CarouselContextValues }\n\nexport { CarouselIndexChangeData }\n\nexport { CarouselNav }\n\nexport { CarouselNavButton }\n\nexport { carouselNavButtonClassNames }\n\nexport { CarouselNavButtonProps }\n\nexport { CarouselNavButtonSlots }\n\nexport { CarouselNavButtonState }\n\nexport { carouselNavClassNames }\n\nexport { CarouselNavContainer }\n\nexport { carouselNavContainerClassNames }\n\nexport { CarouselNavContainerProps }\n\nexport { CarouselNavContainerSlots }\n\nexport { CarouselNavContainerState }\n\nexport { CarouselNavImageButton }\n\nexport { carouselNavImageButtonClassNames }\n\nexport { CarouselNavImageButtonProps }\n\nexport { CarouselNavImageButtonSlots }\n\nexport { CarouselNavImageButtonState }\n\nexport { CarouselNavProps }\n\nexport { CarouselNavSlots }\n\nexport { CarouselNavState }\n\nexport { CarouselProps }\n\nexport { CarouselProvider }\n\nexport { CarouselSlider }\n\nexport { carouselSliderClassNames }\n\nexport { CarouselSliderProps }\n\nexport { CarouselSliderSlots }\n\nexport { CarouselSliderState }\n\nexport { CarouselSlots }\n\nexport { CarouselState }\n\nexport { CarouselViewport }\n\nexport { carouselViewportClassNames }\n\nexport { CarouselViewportProps }\n\nexport { CarouselViewportSlots }\n\nexport { CarouselViewportState }\n\nexport { CellRenderFunction }\n\nexport { Checkbox }\n\nexport { checkboxClassNames }\n\nexport { CheckboxOnChangeData }\n\nexport { CheckboxProps }\n\nexport { CheckboxSlots }\n\nexport { CheckboxState }\n\nexport { ColorArea }\n\nexport { colorAreaClassNames }\n\nexport { ColorAreaProps }\n\nexport { ColorSwatch }\n\nexport { colorSwatchClassNames }\n\nexport { ColorSwatchProps }\n\nexport { ColorSwatchSlots }\n\nexport { ColorSwatchState }\n\nexport { ColorTokens }\n\nexport { ColumnIdContextProvider }\n\nexport { Combobox }\n\nexport { comboboxClassNames }\n\nexport { ComboboxContextValue }\n\nexport { ComboboxContextValues }\n\nexport { ComboboxOpenChangeData }\n\nexport { ComboboxOpenEvents }\n\nexport { ComboboxProps }\n\nexport { ComboboxProvider }\n\nexport { ComboboxSlots }\n\nexport { ComboboxState }\n\nexport { ComponentProps }\n\nexport { ComponentState }\n\nexport { CompoundButton }\n\nexport { compoundButtonClassNames }\n\nexport { CompoundButtonProps }\n\nexport { CompoundButtonSlots }\n\nexport { CompoundButtonState }\n\nexport { CounterBadge }\n\nexport { counterBadgeClassNames }\n\nexport { CounterBadgeProps }\n\nexport { CounterBadgeState }\n\nexport { createCSSRuleFromTheme }\n\nexport { createCustomFocusIndicatorStyle }\n\nexport { CreateCustomFocusIndicatorStyleOptions }\n\nexport { createDarkTheme }\n\nexport { createDOMRenderer }\n\nexport { createFocusOutlineStyle }\n\nexport { CreateFocusOutlineStyleOptions }\n\nexport { createHighContrastTheme }\n\nexport { createLightTheme }\n\nexport { createMotionComponent }\n\nexport { createPresenceComponent }\n\nexport { createPresenceComponentVariant }\n\nexport { createTableColumn }\n\nexport { CreateTableColumnOptions }\n\nexport { createTeamsDarkTheme }\n\nexport { CurveTokens }\n\nexport { DATA_OVERFLOW_DIVIDER }\n\nexport { DATA_OVERFLOW_ITEM }\n\nexport { DATA_OVERFLOW_MENU }\n\nexport { DATA_OVERFLOWING }\n\nexport { DataGrid }\n\nexport { DataGridBody }\n\nexport { dataGridBodyClassNames }\n\nexport { DataGridBodyProps }\n\nexport { DataGridBodySlots }\n\nexport { DataGridBodyState }\n\nexport { DataGridCell }\n\nexport { dataGridCellClassNames }\n\nexport { DataGridCellFocusMode }\n\nexport { DataGridCellProps }\n\nexport { DataGridCellSlots }\n\nexport { DataGridCellState }\n\nexport { dataGridClassNames }\n\nexport { DataGridContextProvider }\n\nexport { DataGridContextValue }\n\nexport { DataGridContextValues }\n\nexport { DataGridFocusMode }\n\nexport { DataGridHeader }\n\nexport { DataGridHeaderCell }\n\nexport { dataGridHeaderCellClassNames }\n\nexport { DataGridHeaderCellProps }\n\n\n```\n\n----------------------------------------\n\nTITLE: Defining BasePeoplePicker with React\nDESCRIPTION: This class extends BasePicker to provide specific functionality for people picker components in Fluent UI. It leverages IPersonaProps and IPeoplePickerProps to type-check props and configurations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class BasePeoplePicker extends BasePicker<IPersonaProps, IPeoplePickerProps> {\n}\n```\n\n----------------------------------------\n\nTITLE: Version History Updates - FluentUI React Card\nDESCRIPTION: Markdown formatted changelog entries documenting version updates, patches and changes to the React Card component including dependency version bumps and bug fixes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-card/library/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.0.75](https://github.com/microsoft/fluentui/tree/@fluentui/react-card_v9.0.75)\n\nTue, 23 Apr 2024 08:17:49 GMT\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-card_v9.0.74..@fluentui/react-card_v9.0.75)\n\n### Patches\n\n- Bump @fluentui/react-tabster to v9.20.1 ([PR #31113](https://github.com/microsoft/fluentui/pull/31113) by beachball)\n- Bump @fluentui/react-utilities to v9.18.7 ([PR #31113](https://github.com/microsoft/fluentui/pull/31113) by beachball)\n- Bump @fluentui/react-jsx-runtime to v9.0.36 ([PR #31113](https://github.com/microsoft/fluentui/pull/31113) by beachball)\n```\n\n----------------------------------------\n\nTITLE: FluentUI Release Version History\nDESCRIPTION: Markdown formatted changelog documenting version bumps and updates across FluentUI components with PR references and author details. Includes both patches and feature changes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/vr-tests/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Changes\n\n- Bump @fluentui/react-button to v9.0.0-alpha.44 ([PR #18437](https://github.com/microsoft/fluentui/pull/18437) by martinhochel@microsoft.com)\n- Bump @fluentui/react-link to v9.0.0-alpha.44 ([PR #18437](https://github.com/microsoft/fluentui/pull/18437) by martinhochel@microsoft.com)\n- Bump @fluentui/babel-make-styles to v9.0.0-alpha.15 ([PR #18437](https://github.com/microsoft/fluentui/pull/18437) by martinhochel@microsoft.com)\n...\n```\n\n----------------------------------------\n\nTITLE: Versioned Package Updates - Markdown\nDESCRIPTION: Changelog entries showing version updates and dependency changes for the jest-serializer-merge-styles package, with links to pull requests and version comparisons.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/jest-serializer-merge-styles/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [8.0.26](https://github.com/microsoft/fluentui/tree/@fluentui/jest-serializer-merge-styles_v8.0.26)\n\nTue, 02 May 2023 00:58:19 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/jest-serializer-merge-styles_v8.0.25..@fluentui/jest-serializer-merge-styles_v8.0.26)\n\n### Patches\n\n- Bump @fluentui/merge-styles to v8.5.9 ([PR #27736](https://github.com/microsoft/fluentui/pull/27736) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Importing Common Styles in SCSS\nDESCRIPTION: This code snippet demonstrates how to import common style files from the @fluentui/common-styles package into a .scss file.  It includes importing both the common styles and focus border styles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/common-styles/README.md#2025-04-20_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@import '~@fluentui/common-styles/dist/sass/common';\n@import '~@fluentui/common-styles/dist/sass/focusBorder';\n// ... or any others as needed\n```\n\n----------------------------------------\n\nTITLE: Patch Description Entry\nDESCRIPTION: Details of accessibility fix for DatePicker's contentAfter slot\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-datepicker-compat/library/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- fix: Apply aria-disabled to DatePicker's contentAfter slot to avoid confusion when using screen readers. ([PR #30435](https://github.com/microsoft/fluentui/pull/30435) by estebanmu@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Persona Class Names Definition (TypeScript)\nDESCRIPTION: Defines the `personaClassNames` as a `SlotClassNames` type based on `PersonaSlots`. This provides a type-safe way to access and manage the class names associated with the different slots of the Persona component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-persona/library/etc/react-persona.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport const personaClassNames: SlotClassNames<PersonaSlots>;\"\n```\n\n----------------------------------------\n\nTITLE: Installing Fluent UI Storybook Export Addon\nDESCRIPTION: Command to install the @fluentui/react-storybook-addon-export-to-sandbox package using yarn package manager.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-storybook-addon-export-to-sandbox/README.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @fluentui/react-storybook-addon-export-to-sandbox\n```\n\n----------------------------------------\n\nTITLE: Defining IElementPosition Interface in TypeScript\nDESCRIPTION: Defines the IElementPosition interface with properties for element positioning including alignment edge, element rectangle, forced bounds, and target edge.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_124\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface IElementPosition {\n    // (undocumented)\n    alignmentEdge: RectangleEdge | undefined;\n    // (undocumented)\n    elementRectangle: Rectangle;\n    // (undocumented)\n    forcedInBounds?: boolean;\n    // (undocumented)\n    targetEdge: RectangleEdge;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining always() Utility Function in TypeScript\nDESCRIPTION: Defines a utility function 'always' that takes a value and options and returns a SlotComponentType. It is used for handling slot props in Fluent UI components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-utilities/etc/react-utilities.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction always<Props extends UnknownSlotProps>(value: Props | SlotShorthandValue | undefined, options: SlotOptions<Props>): SlotComponentType<Props>;\n```\n\n----------------------------------------\n\nTITLE: Defining ICommandBarStyleProps Interface\nDESCRIPTION: Defines the `ICommandBarStyleProps` interface, which specifies the properties passed to the style function for the CommandBar component. It includes properties for the class name and the theme.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_76\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ICommandBarStyleProps {\n    // (undocumented)\n    className?: string;\n    // (undocumented)\n    theme: ITheme;\n}\n```\n\n----------------------------------------\n\nTITLE: SpinButton Basic Usage v9\nDESCRIPTION: Demonstrates basic usage of the SpinButton component in Fluent UI v9. It utilizes the makeStyles hook for styling and includes a value prop for the numeric value and onChange event handler. It uses the useId hook for accessibility.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/SpinButton.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\nimport { makeStyles, Label, SpinButton } from '@fluentui/react-components';\nimport type { SpinButtonChangeEvent, SpinButtonOnChangeData } from '@fluentui/react-components';\nimport { useId } from '@fluentui/react-utilities';\n\nconst useLayoutStyles = makeStyles({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    maxWidth: '300px',\n\n    '> label': {\n      marginBottom: '5px',\n    },\n  },\n});\n\nconst getNumericPart = (value: string): number | undefined => {\n  const valueRegex = /^(\\d+(\\.\\d+)?).*/;\n  if (valueRegex.test(value)) {\n    const numericValue = Number(value.replace(valueRegex, '$1'));\n    return isNaN(numericValue) ? undefined : numericValue;\n  }\n  return undefined;\n};\n\nconst SpinButtonV9BasicExample = () => {\n  const spinButtonId = useId('spinbutton');\n  const layoutStyles = useLayoutStyles();\n\n  const [value, setValue] = React.useState(5);\n\n  const onChange = (e: SpinButtonChangeEvent, data: SpinButtonOnChangeData): void => {\n    console.log('onChange');\n    let newValue;\n    if (data.value !== undefined) {\n      // Value stepped with the buttons or hotkeys\n      newValue = data.value;\n    } else if (data.displayValue !== undefined) {\n      // Value changed by typing into text input\n      newValue = getNumericPart(data.displayValue);\n    }\n\n    if (newValue !== undefined) {\n      setValue(newValue);\n    }\n  };\n\n  return (\n    <div className={layoutStyles.root}>\n      <Label htmlFor={spinButtonId}>SpinButton with Increment/Decrement</Label>\n      <SpinButton id={spinButtonId} value={value} min={0} max={100} onChange={onChange} />\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Spinner Component in JavaScript\nDESCRIPTION: This snippet shows how to import the Spinner component from the @fluentui/react-components package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-spinner/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Spinner } from '@fluentui/react-components';\n```\n\n----------------------------------------\n\nTITLE: Chart Legend Interaction Tests\nDESCRIPTION: Test suite covering various legend interaction behaviors including hiding, hovering, and opacity changes for different chart elements\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/docs/TestPlans/VerticalBarChart/ComponentTests.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Hide legends\n- Hover mouse over bar legends\n- Hover mouse over line legends\n```\n\n----------------------------------------\n\nTITLE: Link Element in Carbon Design\nDESCRIPTION: Illustrates an anchor tag representing a Link in Carbon Design System. Requires integration with Carbon Design CSS classes. The component expects an href attribute and styles the link as a block element.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Link.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a href=\\\"#\\\" class=\\\"bx--link some-class\\\">Link</a>\n```\n\n----------------------------------------\n\nTITLE: TagPickerInput Class Names\nDESCRIPTION: Defines the class names for the TagPickerInput component's slots. These class names are used for styling the component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport const tagPickerInputClassNames: SlotClassNames<TagPickerInputSlots>;\"\n```\n\n----------------------------------------\n\nTITLE: Native Props Implementation Example in TypeScript\nDESCRIPTION: Example implementation of getting root and primary native element props.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/native-element-props.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst [rootProps, inputProps] = getRootAndPrimaryNativeElementProps(props, 'input');\nconst state = {\n  // ...\n  root: rootProps,\n  input: inputProps, // primary slot\n};\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react to v8.38.0\nDESCRIPTION: This patch updates the @fluentui/react package to version 8.38.0, implementing critical updates. Refer to Pull Request #20231 for additional details.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/ts-minbar-test-react/CHANGELOG.md#2025-04-20_snippet_25\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.38.0 ([PR #20231](https://github.com/microsoft/fluentui/pull/20231) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Exporting Motion Components - JavaScript\nDESCRIPTION: This snippet exports components related to motion effects and animations within Fluent UI, including context values and imperative references that can be used in conjunction with UI elements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/etc/react-components.api.md#2025-04-20_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nexport { MotionComponentProps }\n\nexport { MotionImperativeRef }\n\nexport { motionTokens }\n```\n\n----------------------------------------\n\nTITLE: Selection State Expected DOM Output - HTML\nDESCRIPTION: This snippet illustrates the expected HTML output for the menu with checkboxes and different selection groups, showing the checkbox states for accessibility.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/library/docs/Spec.md#2025-04-20_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n<button aria-haspopup=\"menu\" aria-expanded=\"true\" id=\"trigger\">Open menu</button>\n\n<!-- expected DOM output for basic checkbox  -->\n<div role=\"menu\" aria-labelledby=\"trigger\">\n  <div role=\"menuitemcheckbox\" tabindex=\"0\" aria-checked=\"true\">Option 1</div>\n  <div role=\"menuitemcheckbox\" tabindex=\"-1\" aria-checked=\"false\">Option 2</div>\n  <div role=\"menuitemcheckbox\" tabindex=\"-1\" aria-checked=\"false\">Option 3</div>\n</div>\n\n<!-- expected DOM output for different selection groups  -->\n<div role=\"menu\" aria-labelledby=\"trigger\">\n  <div role=\"group\" aria-label=\"Checkbox section\">\n    <div role=\"presentation\" aria-hidden=\"true\">Checkbox section</div>\n    <div role=\"menuitemcheckbox\" tabindex=\"0\" aria-checked=\"true\">Option 1</div>\n    <div role=\"menuitemcheckbox\" tabindex=\"-1\" aria-checked=\"false\">Option 2</div>\n    <div role=\"menuitemcheckbox\" tabindex=\"-1\" aria-checked=\"false\">Option 3</div>\n  </div>\n  <div role=\"separator\"></div>\n  <div role=\"group\" aria-label=\"Radio section\">\n    <div role=\"presentation\" aria-hidden=\"true\">Radio section</div>\n    <div role=\"menuitemradio\" tabindex=\"-1\" aria-checked=\"true\">Option 1</div>\n    <div role=\"menuitemradio\" tabindex=\"-1\" aria-checked=\"false\">Option 2</div>\n    <div role=\"menuitemradio\" tabindex=\"-1\" aria-checked=\"false\">Option 3</div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Version Comparison Link Markdown\nDESCRIPTION: Markdown link for comparing changes between versions\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-image/library/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-image_v9.0.0-alpha.74..@fluentui/react-image_v9.0.0-alpha.75)\n```\n\n----------------------------------------\n\nTITLE: Setting Up FluentProviderProps Type for Custom Style Hooks\nDESCRIPTION: This snippet illustrates the creation of FluentProviderProps type which includes an optional property for customStyleHooks_unstable. This allows the FluentProvider to incorporate custom styling hooks dynamically during its usage.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/custom-styling.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport type FluentProviderProps = Omit<ComponentProps<FluentProviderSlots>, 'dir'> & { //... customStyleHooks_unstable?: FluentProviderCustomStyleHooks; //... };\n```\n\n----------------------------------------\n\nTITLE: Defining PieInsideTextOrientation in TypeScript\nDESCRIPTION: The PieInsideTextOrientation type defines options for positioning inside text in pie charts, catering to different styling needs such as horizontal, radial, tangential, or automatic orientation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/chart-utilities/etc/chart-utilities.api.md#2025-04-20_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type PieInsideTextOrientation = 'horizontal' | 'radial' | 'tangential' | 'auto';\n```\n\n----------------------------------------\n\nTITLE: Overriding default prefix with displayName (mergeStyles)\nDESCRIPTION: Illustrates how to override the default class name prefix using the `displayName` property within a style object. This allows for more descriptive and maintainable class names.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/merge-styles/README.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  displayName: 'MyComponent',\n  background: 'red'\n}\n```\n\n----------------------------------------\n\nTITLE: Tag with different size\nDESCRIPTION: This snippet demonstrates how to adjust the size of a `<Tag>` component. Setting the `size` prop to \"small\" renders the tag with a smaller visual footprint.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tags/library/README.md#2025-04-20_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Tag size=\"small\">Content</Tag>\n```\n\n----------------------------------------\n\nTITLE: Alignment Type Definition in TypeScript\nDESCRIPTION: Defines the Alignment type for specifying alignment options in FluentUI layouts. Includes various alignment values like start, end, center, and spacing options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport type Alignment = 'start' | 'end' | 'center' | 'space-between' | 'space-around' | 'space-evenly' | 'baseline' | 'stretch';\n```\n\n----------------------------------------\n\nTITLE: Define BabelPluginOptions Type\nDESCRIPTION: Defines the `BabelPluginOptions` type, which represents the options that can be passed to the Babel plugin.  It's a record where keys are strings and values are `DependencyEntry`.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/babel-preset-storybook-full-source/etc/babel-preset-storybook-full-source.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type BabelPluginOptions = Record<string, DependencyEntry>;\n```\n\n----------------------------------------\n\nTITLE: Defining IconButton Class Component\nDESCRIPTION: Defines `IconButton` as a React class component, extending `React_2.Component<IButtonProps, {}>`. It renders a JSX element. The component uses `IButtonProps` for its properties.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_80\n\nLANGUAGE: typescript\nCODE:\n```\nexport class IconButton extends React_2.Component<IButtonProps, {}> {\n    // (undocumented)\n    render(): JSX.Element;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Public Slider Component in React\nDESCRIPTION: Basic implementation of a Slider component with default value, minimum, and maximum range settings\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-slider/library/docs/Spec.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Slider defaultValue={50} min={10} max={100} />\n```\n\n----------------------------------------\n\nTITLE: Standard HTML for Button Element\nDESCRIPTION: This HTML snippet represents a standard button element used in conjunction with the `Trigger` component. It highlights that no extra ARIA attributes need to be added, ensuring the use of native button functionality.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/triggers-and-multiple-layers-of-button-handling.md#2025-04-20_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<button>Trigger something</button>\n```\n\n----------------------------------------\n\nTITLE: Implementing useSelection Hook in TypeScript\nDESCRIPTION: A public hook that manages selection state, returning a set of selected items and methods to manipulate the selection.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-utilities/etc/react-utilities.api.md#2025-04-20_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport function useSelection(params: SelectionHookParams): readonly [Set<SelectionItemId>, SelectionMethods];\n```\n\n----------------------------------------\n\nTITLE: Exporting Table Component Hooks in TypeScript\nDESCRIPTION: Defines hooks for table components including table, body, header, rows, and cells. These hooks manage component state and references for the core table structure elements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-table/library/etc/react-table.api.md#2025-04-20_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport const useTable_unstable: (props: TableProps, ref: React_2.Ref<HTMLElement>) => TableState;\n\n// @public\nexport const useTableBody_unstable: (props: TableBodyProps, ref: React_2.Ref<HTMLElement>) => TableBodyState;\n\n// @public\nexport const useTableCell_unstable: (props: TableCellProps, ref: React_2.Ref<HTMLElement>) => TableCellState;\n\n// @public\nexport const useTableCellActions_unstable: (props: TableCellActionsProps, ref: React_2.Ref<HTMLElement>) => TableCellActionsState;\n\n// @public\nexport const useTableCellLayout_unstable: (props: TableCellLayoutProps, ref: React_2.Ref<HTMLElement>) => TableCellLayoutState;\n\n// @public\nexport const useTableHeader_unstable: (props: TableHeaderProps, ref: React_2.Ref<HTMLElement>) => TableHeaderState;\n\n// @public\nexport const useTableHeaderCell_unstable: (props: TableHeaderCellProps, ref: React_2.Ref<HTMLElement>) => TableHeaderCellState;\n\n// @public\nexport const useTableResizeHandle_unstable: (props: TableResizeHandleProps, ref: React_2.Ref<HTMLElement>) => TableResizeHandleState;\n\n// @public\nexport const useTableRow_unstable: (props: TableRowProps, ref: React_2.Ref<HTMLElement>) => TableRowState;\n\n// @public\nexport const useTableSelectionCell_unstable: (props: TableSelectionCellProps, ref: React_2.Ref<HTMLElement>) => TableSelectionCellState;\n```\n\n----------------------------------------\n\nTITLE: TagPickerButton Slots Type\nDESCRIPTION: Defines the slots available for the TagPickerButton component, allowing customization of the component's structure.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport type TagPickerButtonSlots = {\n    root: Slot<'button'>;\n};\"\n```\n\n----------------------------------------\n\nTITLE: Checkbox Props and Style Interfaces in TypeScript\nDESCRIPTION: Comprehensive interface defining properties and styling options for a Checkbox component with accessibility and interaction features\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ICheckboxProps extends React_2.RefAttributes<HTMLDivElement> {\n    ariaDescribedBy?: string;\n    checked?: boolean;\n    disabled?: boolean;\n    onChange?: (ev?: React_2.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => void;\n    // ... additional configuration properties\n}\n```\n\n----------------------------------------\n\nTITLE: Define PositioningVirtualElement type\nDESCRIPTION: Defines a type called `PositioningVirtualElement` which represents a virtual element that can be used for positioning. It contains a `getBoundingClientRect` method that returns a rectangle and an optional `contextElement` property.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-positioning/etc/react-positioning.api.md#2025-04-20_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type PositioningVirtualElement = {\n    getBoundingClientRect: () => {\n        x: number;\n        y: number;\n        top: number;\n        left: number;\n        bottom: number;\n        right: number;\n        width: number;\n        height: number;\n    };\n    contextElement?: Element;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ITagItemSuggestionStyleProps Type in TypeScript\nDESCRIPTION: Specifies the ITagItemSuggestionStyleProps type with required and optional properties for styling tag item suggestions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_205\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport type ITagItemSuggestionStyleProps = Required<Pick<ITagItemSuggestionProps, 'theme'>> & Pick<ITagItemSuggestionProps, 'className'> & {};\n```\n\n----------------------------------------\n\nTITLE: Creating CSS Rule from Theme in TypeScript\nDESCRIPTION: The function 'createCSSRuleFromTheme' generates a CSS rule based on a provided theme and selector. It requires a selector string and a PartialTheme object as inputs, and returns a string representing a CSS rule. This function is crucial for dynamic styling based on theme definitions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-provider/library/etc/react-provider.api.md#2025-04-20_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function createCSSRuleFromTheme(selector: string, theme: PartialTheme | undefined): string;\n```\n\n----------------------------------------\n\nTITLE: DOM Structure for CardPreview Component in HTML\nDESCRIPTION: Defines the HTML structure for the CardPreview component which contains the children content and an optional logo slot positioned over the preview.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-card/library/docs/Spec.md#2025-04-20_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<div>\n  {children}\n  <div>\n    {logo}\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Package Import Path Reference - FluentUI React Virtualizer\nDESCRIPTION: Shows the package name and folder structure for FluentUI React virtualizer components. This package contains experimental virtualizer components that are still under development.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-virtualizer/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@fluentui/react-virtualizer\n```\n\n----------------------------------------\n\nTITLE: Facepile Personas in TypeScript\nDESCRIPTION: This constant holds an array of facepile personas which can be used for displaying users in a compact manner with initials and images. It is useful for visual representations of user data. The array is typed as IExampleFacepilePersona[].\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/example-data/etc/example-data.api.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport const facepilePersonas: IExampleFacepilePersona[];\n```\n\n----------------------------------------\n\nTITLE: Building All Files in a Package with Yarn\nDESCRIPTION: This command builds all files present in the specified package under 'packages/fluentui', optimizing them for production use.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/CONTRIBUTING.md#2025-04-20_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nyarn build                 # build all files in package\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Teaching Popover in React with FluentUI v9\nDESCRIPTION: Sample code showing the structure of a single-page Teaching Popover component with header, body with media, title, and footer elements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-teaching-popover/library/docs/Spec.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<TeachingPopover>\n  <TeachingPopoverTrigger>\n    <Button>TeachingPopover trigger</Button>\n  </TeachingPopoverTrigger>\n  <TeachingPopoverSurface>\n    <TeachingPopoverHeader>Tips</TeachingPopoverHeader>\n    <TeachingPopoverBody media={<Image alt=\"test image\" fit=\"cover\" src={swapImage} />}>\n      <TeachingPopoverTitle>Teaching Bubble Title</TeachingPopoverTitle>\n      <div>This is a teaching popover body</div>\n    </TeachingPopoverBody>\n    <TeachingPopoverFooter primary=\"Learn more\" secondary=\"Got it\" />\n  </TeachingPopoverSurface>\n</TeachingPopover>\n```\n\n----------------------------------------\n\nTITLE: Defining Font Design Tokens in TypeScript\nDESCRIPTION: Defines CSS variable references for font family, size, and weight tokens used throughout the FluentUI component system to maintain consistent typography.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_41\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const fontFamilyBase = \"var(--fontFamilyBase)\";\nexport const fontFamilyMonospace = \"var(--fontFamilyMonospace)\";\nexport const fontFamilyNumeric = \"var(--fontFamilyNumeric)\";\n\nexport const fontSizeBase100 = \"var(--fontSizeBase100)\";\nexport const fontSizeBase200 = \"var(--fontSizeBase200)\";\nexport const fontSizeBase300 = \"var(--fontSizeBase300)\";\nexport const fontSizeBase400 = \"var(--fontSizeBase400)\";\nexport const fontSizeBase500 = \"var(--fontSizeBase500)\";\nexport const fontSizeBase600 = \"var(--fontSizeBase600)\";\nexport const fontSizeHero1000 = \"var(--fontSizeHero1000)\";\nexport const fontSizeHero700 = \"var(--fontSizeHero700)\";\nexport const fontSizeHero800 = \"var(--fontSizeHero800)\";\nexport const fontSizeHero900 = \"var(--fontSizeHero900)\";\n\nexport const fontWeightBold = \"var(--fontWeightBold)\";\nexport const fontWeightMedium = \"var(--fontWeightMedium)\";\nexport const fontWeightRegular = \"var(--fontWeightRegular)\";\nexport const fontWeightSemibold = \"var(--fontWeightSemibold)\";\n```\n\n----------------------------------------\n\nTITLE: Using Fluent UI Communication Colors in React\nDESCRIPTION: Demonstrates how to import and use CommunicationColors from the @fluentui/theme package in a React component. The example shows setting the color style of a div element using the primary communication color.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Styles/Colors/docs/web/ColorsImplementation.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CommunicationColors } from '@fluentui/theme';\n\n<div style={{ color: CommunicationColors.primary }} />;\n```\n\n----------------------------------------\n\nTITLE: Avoiding complicated selectors in Griffel makeStyles\nDESCRIPTION: Shows how complicated selectors in makeStyles lead to larger bundle sizes with ahead-of-time compilation. Simpler selectors produce more reusable and efficient CSS output.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/styles-handbook.md#2025-04-20_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nmakeStyles({\n  rootA: {\n    display: 'flex',\n  },\n  rootB: {\n    '> .some-classname': {\n      '> .other-classname': {\n        display: 'flex',\n        alignItems: 'center',\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining ITagItemStyles Interface in TypeScript\nDESCRIPTION: Specifies the ITagItemStyles interface for styling different parts of a tag item.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_203\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface ITagItemStyles {\n    close: IStyle;\n    root: IStyle;\n    text: IStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendered Toolbar DOM Structure in HTML\nDESCRIPTION: Example of the rendered HTML DOM structure for the Toolbar component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-toolbar/library/docs/Spec.md#2025-04-20_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div role=\"toolbar\">\n  <button />\n  <div />\n  <button />\n  <button />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining FluentUI Icon Name Constants in TypeScript\nDESCRIPTION: Enumeration of string constants representing icon names in FluentUI's icon system. Each constant maps to a specific icon asset and is marked as undocumented in the source.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/font-icons-mdl2/etc/font-icons-mdl2.api.md#2025-04-20_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nBranchPullRequest = \"BranchPullRequest\",\nBranchSearch = \"BranchSearch\",\nBranchShelveset = \"BranchShelveset\",\nBreadcrumb = \"Breadcrumb\",\nBreakfast = \"Breakfast\",\nBrightness = \"Brightness\",\nBroom = \"Broom\",\nBrowserScreenShot = \"BrowserScreenShot\",\nBrowserTab = \"BrowserTab\",\nBrowserTabScreenshot = \"BrowserTabScreenshot\",\nBrunch = \"Brunch\",\nBrush = \"Brush\",\nBucketColor = \"BucketColor\",\nBucketColorFill = \"BucketColorFill\",\nBufferTimeAfter = \"BufferTimeAfter\",\nBufferTimeBefore = \"BufferTimeBefore\",\nBufferTimeBoth = \"BufferTimeBoth\",\nBug = \"Bug\",\nBugSolid = \"BugSolid\",\nBuild = \"Build\",\nBuildDefinition = \"BuildDefinition\",\nBuildIssue = \"BuildIssue\",\nBuildQueue = \"BuildQueue\",\nBuildQueueNew = \"BuildQueueNew\",\nBulkUpload = \"BulkUpload\",\nBulletedList = \"BulletedList\",\nBulletedList2 = \"BulletedList2\",\nBulletedList2Mirrored = \"BulletedList2Mirrored\",\nBulletedListBullet = \"BulletedListBullet\",\nBulletedListBulletMirrored = \"BulletedListBulletMirrored\",\nBulletedListMirrored = \"BulletedListMirrored\",\nBulletedListText = \"BulletedListText\",\nBulletedListTextMirrored = \"BulletedListTextMirrored\",\nBulletedTreeList = \"BulletedTreeList\",\nBullseye = \"Bullseye\",\nBullseyeTarget = \"BullseyeTarget\",\nBullseyeTargetEdit = \"BullseyeTargetEdit\",\nBus = \"Bus\",\nBusinessCenterLogo = \"BusinessCenterLogo\",\nBusinessHoursSign = \"BusinessHoursSign\",\nBusSolid = \"BusSolid\",\nButtonControl = \"ButtonControl\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Production Builds\nDESCRIPTION: TypeScript configuration for production builds. It extends the main config, sets up compilation options for CommonJS modules targeting ES2015, and generates declaration files for implementation files only.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/shared/build-system/02-solution-style-ts-configs.md#2025-04-20_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    \"module\": \"commonjs\",\n    \"target\": \"ES2015\",\n    \"outDir\": \"./dist\",\n    // properly scoped globals and environment\n    \"types\": [],\n    // enable transpilation and declaration files generation only for implementation files\n    \"noEmit\": false,\n    \"declaration\": true\n  },\n  \"exclude\": [\"**/*.spec.ts\", \"**/*.test.ts\", \"**/*.stories.tsx\"],\n  \"include\": [\"**/*.ts\", \"**/*.tsx\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring isConformant Base Setup in TypeScript\nDESCRIPTION: Creates a wrapper function for the base isConformant method with default options. This common setup allows for consistent configuration across component tests, including automatically determining the component path from the test filename.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-conformance/README.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { isConformant as baseIsConformant } from '@fluentui/react-conformance';\nimport type { IsConformantOptions } from '@fluentui/react-conformance';\n\nexport function isConformant<TProps = {}>(\n  testInfo: Omit<IsConformantOptions<TProps>, 'componentPath'> & { componentPath?: string },\n) {\n  const defaultOptions: Partial<IsConformantOptions<TProps>> = {\n    componentPath: require.main?.filename.replace('.test', ''),\n    // 👆 Put any required test options here ( ex: componentPath, asPropHandlesRef, ... )\n  };\n\n  baseIsConformant(defaultOptions, testInfo);\n}\n```\n\n----------------------------------------\n\nTITLE: InteractionTag with Icon\nDESCRIPTION: This snippet demonstrates how to include an icon within an `<InteractionTag>` component. The icon is passed to the `<InteractionTagPrimary>` component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tags/library/README.md#2025-04-20_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<InteractionTag>\n  <InteractionTagPrimary icon={<SVGIcon />}>Content</InteractionTagPrimary>\n</InteractionTag>\n```\n\n----------------------------------------\n\nTITLE: Defining DialogContentBase React Component in TypeScript\nDESCRIPTION: Defines the DialogContentBase class extending React.Component. It includes default props and a render method for creating dialog content.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_30\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class DialogContentBase extends React_2.Component<IDialogContentProps, {}> {\n    constructor(props: IDialogContentProps);\n    // (undocumented)\n    static defaultProps: IDialogContentProps;\n    // (undocumented)\n    render(): JSX.Element;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic ColorPicker Implementation - FluentUI v8\nDESCRIPTION: Example showing basic usage of ColorPicker component in FluentUI v8 with color state management, preview toggle, and alpha type configuration.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/ColorPicker.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport {\n  ColorPicker,\n  ChoiceGroup,\n  IChoiceGroupOption,\n  getColorFromString,\n  IColor,\n  IColorPickerStyles,\n  IColorPickerProps,\n} from '@fluentui/react';\n\nconst white = getColorFromString('#ffffff')!;\n\nconst ColorPickerBasicExample: React.FunctionComponent = () => {\n  const [color, setColor] = React.useState(white);\n  const [showPreview, setShowPreview] = React.useState(true);\n  const [alphaType, setAlphaType] = React.useState<IColorPickerProps['alphaType']>('alpha');\n\n  const updateColor = React.useCallback((ev: any, colorObj: IColor) => setColor(colorObj), []);\n\n  return (\n    <>\n      <ColorPicker\n        color={color}\n        onChange={updateColor}\n        alphaType={alphaType}\n        showPreview={showPreview}\n        styles={colorPickerStyles}\n        strings={{\n          hueAriaLabel: 'Hue',\n        }}\n      />\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating @fluentui/global-context Usage in Markdown\nDESCRIPTION: This code snippet shows the package name and a brief description of its purpose. It highlights that the package creates a shim for React.createContext to register context objects globally, making them true singletons.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/global-context/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @fluentui/global-context\n\n**Global Context for [Fluent UI React](https://react.fluentui.dev)**\n\nThis package contains a shim for `React.createContext` API that will register the context object to the global\nscope (`window` for browsers, `global` for nodejs). This means that contexts will be real singletons.\n```\n\n----------------------------------------\n\nTITLE: Defining Tree Style Properties Interface in TypeScript\nDESCRIPTION: The ITreeStyleProps interface defines the styling properties for a tree chart, including class names and theme information for consistent visual representation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/etc/react-charting.api.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface ITreeStyleProps {\n    className?: string;\n    theme: ITheme;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories for React Search Components\nDESCRIPTION: This snippet configures the Storybook to include specific stories for the React Search component from the Fluent UI package. It specifies the glob patterns for the stories' file paths, ensuring that all relevant stories are loaded when the Storybook is built.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-search/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-search/stories/src/**/*.stories.mdx', '../packages/react-components/react-search/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Scroll and Measurement Utilities\nDESCRIPTION: This section includes utility functions for scrolling to specific items in both dynamic and static virtualized lists, as well as hooks for measuring list items and handling resizing.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-virtualizer/library/etc/react-virtualizer.api.md#2025-04-20_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport const scrollToItemDynamic: (params: ScrollToItemDynamicParams) => void;\n\n// @public (undocumented)\nexport const scrollToItemStatic: (params: ScrollToItemStaticParams) => void;\n\n// @public\nexport const useDynamicVirtualizerMeasure: <TElement extends HTMLElement>(virtualizerProps: VirtualizerMeasureDynamicProps) => {\n    virtualizerLength: number;\n    bufferItems: number;\n    bufferSize: number;\n    scrollRef: (instance: TElement | null) => void;\n    containerSizeRef: React_2.RefObject<number>;\n    updateScrollPosition: (scrollPosition: number) => void;\n};\n\n// @public\nexport function useMeasureList<TElement extends HTMLElement & IndexedResizeCallbackElement = HTMLElement & IndexedResizeCallbackElement>(currentIndex: number, refLength: number, totalLength: number, defaultItemSize: number): {\n    widthArray: React_2.MutableRefObject<any[]>;\n    heightArray: React_2.MutableRefObject<any[]>;\n    createIndexedRef: (index: number) => (el: TElement) => void;\n    refArray: React_2.MutableRefObject<(TElement | null | undefined)[]>;\n    sizeUpdateCount: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Fluent UI Project with Create React App Template\nDESCRIPTION: Commands to initialize a new Fluent UI project using the @fluentui/cra-template with either npm or yarn. The snippet shows how to create the project, navigate to the project directory, and start the development server.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Overviews/GetStartedPage/docs/web/GetStartedDevelopSimple.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Option 1: using npx/npm\nnpx create-react-app my-app --template @fluentui/cra-template\ncd my-app\nnpm start\n\n# Option 2: using yarn\nyarn create react-app my-app --template @fluentui/cra-template\ncd my-app\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react to v8.41.2\nDESCRIPTION: This patch updates @fluentui/react to version 8.41.2 to implement new features and fixes. More details may be found in Pull Request #20530.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/ts-minbar-test-react/CHANGELOG.md#2025-04-20_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.41.2 ([PR #20530](https://github.com/microsoft/fluentui/pull/20530) by beachball)\n```\n\n----------------------------------------\n\nTITLE: FluentUI React Label Version History Entry\nDESCRIPTION: Changelog entries showing version updates, patches, and dependency bumps for the FluentUI React Label component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-label/library/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.0.4]\n\nWed, 03 Aug 2022 16:03:50 GMT\n\n### Patches\n\n- chore: Bump Griffel dependencies\n- Bump @fluentui/react-conformance-griffel to v9.0.0-beta.12\n```\n\n----------------------------------------\n\nTITLE: Menu Sections Expected DOM Output - HTML\nDESCRIPTION: This snippet illustrates the expected HTML output of the menu structure that includes sections and dividers, highlighting correct roles and attributes for accessibility.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/library/docs/Spec.md#2025-04-20_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<button aria-haspopup=\"menu\" aria-expanded=\"true\" id=\"trigger\">Open menu</button>\n<div role=\"menu\" aria-labelledby=\"trigger\">\n  <div role=\"menuitem\" tabindex=\"0\">Option 1</div>\n  <div role=\"separator\" aria-hidden=\"true\"></div>\n  <div role=\"group\" aria-labelledby=\"sectionid\">\n    <div role=\"presentation\" aria-hidden=\"true\" id=\"sectionid\">Section title</div>\n    <div role=\"menuitem\" tabindex=\"-1\">Section Option 1</div>\n    <div role=\"menuitem\" tabindex=\"-1\">Section Option 2</div>\n    <div role=\"menuitem\" tabindex=\"-1\">Section Option 3</div>\n  </div>\n  <div role=\"separator\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering SharePoint Framework Design Resources with JSX\nDESCRIPTION: JSX markup for displaying SharePoint Framework design resources with links to SharePoint experience design documentation and a Figma toolkit, using a custom heading with a specific ID to prevent duplicate heading IDs.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Overviews/ResourcesPage/docs/default/ResourcesDesignResources.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<!-- headings get auto-generated IDs usually, and this page has two \"SharePoint Framework\" headings -->\n<h3 id=\"sharepoint-framework-design\">SharePoint Framework</h3>\n\nThese SharePoint design resources provide everything you need to design your web parts, including responsive page grids and columns.\n\n<ul className=\"md-list--flex\">\n  <li className=\"mdut--half\">[Designing SharePoint experiences](https://aka.ms/spdesign)</li>\n  <li className=\"mdut--half\">[SharePoint Toolkit (Figma)](https://aka.ms/SharePointToolkits/Web/Figma)</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Defining Tree Selection and Slots Types in TypeScript\nDESCRIPTION: Defines types for tree selection values and slots, including the root slot and optional collapse motion slot.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tree/library/etc/react-tree.api.md#2025-04-20_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type TreeSelectionValue = MultiSelectValue | SingleSelectValue;\n\nexport type TreeSlots = {\n    root: Slot<'div'>;\n    collapseMotion?: Slot<PresenceMotionSlotProps>;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Shimmer Loading State in React\nDESCRIPTION: Guidelines for using shimmer to handle UI transitions during data loading, with recommendations for managing loading states and providing user feedback\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-examples/src/react/Shimmer/docs/ShimmerDos.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst ShimmerExample = () => {\n  const [isDataLoaded, setIsDataLoaded] = useState(false);\n\n  useEffect(() => {\n    // Simulate data loading\n    fetchData().then(() => setIsDataLoaded(true));\n  }, []);\n\n  return (\n    <>\n      {!isDataLoaded ? (\n        <Shimmer \n          width=\"100%\" \n          customElementsGroup={[\n            { width: '100%', height: 50 },\n            { width: '75%', height: 30 }\n          ]} \n        />\n      ) : (\n        <RealContent />\n      )}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Types and Components from @fluentui/react-tree\nDESCRIPTION: This snippet shows the imports and type declarations for various components and utilities from the @fluentui/react-tree package. It includes types for props, state, and context values used in the tree components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tree/library/etc/react-tree.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"react\" />\n\nimport type { ArrowDown } from '@fluentui/keyboard-keys';\nimport type { ArrowLeft } from '@fluentui/keyboard-keys';\nimport type { ArrowRight } from '@fluentui/keyboard-keys';\nimport type { ArrowUp } from '@fluentui/keyboard-keys';\nimport type { AvatarContextValue } from '@fluentui/react-avatar';\nimport type { AvatarSize } from '@fluentui/react-avatar';\nimport { ButtonContextValue } from '@fluentui/react-button';\nimport { Checkbox } from '@fluentui/react-checkbox';\nimport { CheckboxProps } from '@fluentui/react-checkbox';\nimport type { ComponentProps } from '@fluentui/react-utilities';\nimport type { ComponentState } from '@fluentui/react-utilities';\nimport { ContextSelector } from '@fluentui/react-context-selector';\nimport type { DistributiveOmit } from '@fluentui/react-utilities';\nimport type { End } from '@fluentui/keyboard-keys';\nimport type { Enter } from '@fluentui/keyboard-keys';\nimport type { EventData } from '@fluentui/react-utilities';\nimport type { EventHandler } from '@fluentui/react-utilities';\nimport type { ExtractSlotProps } from '@fluentui/react-utilities';\nimport { ForwardRefComponent } from '@fluentui/react-utilities';\nimport type { Home } from '@fluentui/keyboard-keys';\nimport type { PresenceMotionSlotProps } from '@fluentui/react-motion';\nimport { Radio } from '@fluentui/react-radio';\nimport { RadioProps } from '@fluentui/react-radio';\nimport * as React_2 from 'react';\nimport type { SelectionMode as SelectionMode_2 } from '@fluentui/react-utilities';\nimport type { Slot } from '@fluentui/react-utilities';\nimport type { SlotClassNames } from '@fluentui/react-utilities';\n```\n\n----------------------------------------\n\nTITLE: Dialog Usage in Fluent Web Components V2\nDESCRIPTION: The HTML snippet illustrates how to define a dialog using Fluent Web Components version 2. It includes a title and contents within a 'fluent-dialog' element, without additional named slots.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/_docs/developer/migration.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- V2 -->\n<fluent-dialog>\n  <h1 slot=\"title\">Title goes here</h1>\n  <img src=\"full-width.jpg\" alt=\"\" />\n  Contents go here\n</fluent-dialog>\n```\n\n----------------------------------------\n\nTITLE: Adding filetype icon support in FluentUI\nDESCRIPTION: This commit adds support for displaying planner and todoitem filetype icons within the FluentUI library. This enhancement expands the range of supported file types and improves the user experience by providing visual cues for different file formats.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/style-utilities/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: N/A\nCODE:\n```\nAdding planner and todoitem filetype icon support. ([PR #30079](https://github.com/microsoft/fluentui/pull/30079) by caperez@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Defining DocumentCard Status Component Interfaces\nDESCRIPTION: TypeScript interface definitions for DocumentCardStatus component, its props, style props, and styles. This component displays status information within a DocumentCard.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_103\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IDocumentCardStatus {\n}\n\n// Warning: (ae-forgotten-export) The symbol \"DocumentCardStatusBase\" needs to be exported by the entry point index.d.ts\n//\n// @public (undocumented)\nexport interface IDocumentCardStatusProps extends IReactProps<DocumentCardStatusBase> {\n    className?: string;\n    componentRef?: IRefObject<IDocumentCardStatus>;\n    status: string;\n    statusIcon?: string;\n    styles?: IStyleFunctionOrObject<IDocumentCardStatusStyleProps, IDocumentCardStatusStyles>;\n    theme?: ITheme;\n}\n\n// @public (undocumented)\nexport interface IDocumentCardStatusStyleProps {\n    className?: string;\n    theme: ITheme;\n}\n\n// @public (undocumented)\nexport interface IDocumentCardStatusStyles {\n    // (undocumented)\n    root: IStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: Pick Type Definitions for Finding Focusable Elements\nDESCRIPTION: These type definitions utilize TypeScript's Pick utility type to create specialized types for finding focusable properties based on existing types. This approach captures necessary properties while keeping code concise and improves type safety across focus management functions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tabster/etc/react-tabster.api.md#2025-04-20_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\ntype FindAllProps = Pick<FindFocusableProps, 'container' | 'modalizerId' | 'currentElement' | 'isBackward' | 'includeProgrammaticallyFocusable' | 'useActiveModalizer' | 'acceptCondition' | 'ignoreAccessibility' | 'onElement'>;\n\n// @public (undocumented)\ntype FindDefaultProps = Pick<FindFocusableProps, 'container' | 'modalizerId' | 'includeProgrammaticallyFocusable' | 'useActiveModalizer' | 'ignoreAccessibility'>;\n\n// @public (undocumented)\ntype FindFirstProps = Pick<FindFocusableProps, 'container' | 'modalizerId' | 'includeProgrammaticallyFocusable' | 'useActiveModalizer' | 'ignoreAccessibility'>;\n\n// @public (undocumented)\ntype FindNextProps = Pick<FindFocusableProps, 'currentElement' | 'referenceElement' | 'container' | 'modalizerId' | 'includeProgrammaticallyFocusable' | 'useActiveModalizer' | 'ignoreAccessibility'>;\n```\n\n----------------------------------------\n\nTITLE: Implementing SplitButton in FluentUI v0\nDESCRIPTION: This code snippet shows how to implement a SplitButton component using the @fluentui/react-northstar package in the previous version. It demonstrates setting up the button content, menu items, and handling the main button click.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/SplitButton.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SplitButton } from '@fluentui/react-northstar';\nconst Component = ({ menuItems }) => (\n  <SplitButton\n    menu={menuItems}\n    button={{\n      content: 'Split button',\n    }}\n    onMainButtonClick={() => alert('button was clicked')}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Defining TooltipVisibilityContextValue_unstable Type in TypeScript\nDESCRIPTION: TypeScript type definition for the tooltip visibility context value which tracks and manages visible tooltips.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-shared-contexts/library/etc/react-shared-contexts.api.md#2025-04-20_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport type TooltipVisibilityContextValue_unstable = {\n    visibleTooltip?: {\n        hide: () => void;\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Layer Host Selector Function\nDESCRIPTION: Utility function to set the CSS selector used for identifying layer host elements, which impacts where layered components like modals and popups get rendered in the DOM.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_256\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport function setLayerHostSelector(selector?: string): void;\n```\n\n----------------------------------------\n\nTITLE: CSS Equivalent of Stack Component\nDESCRIPTION: This snippet demonstrates the CSS equivalent of the Stack component's default styling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Flex/Flex.Stack.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"flex\">\n  ...\n</div>\n```\n\nLANGUAGE: css\nCODE:\n```\n.flex {\n  display: flex;\n  flex-direction: column;\n  flex-wrap: nowrap;\n  width: auto;\n  height: auto;\n  box-sizing: border-box;\n}\n.flex > * {\n  text-overflow: ellipsis;\n}\n.flex > :not(:first-child) {\n  margin-top: 0px;\n}\n.flex > *:not(.ms-StackItem) {\n  flex-shrink: 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Video Component Props in Markdown\nDESCRIPTION: This snippet lists and describes the props available for the Video component. It includes the prop names, their purposes, and default values where applicable.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-migration-v0-v9/library/src/components/Video/Video.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `src`: The video source URL.\n- `autoPlay`: Whether the video should start playing when rendered. Default: `false`\n- `controls`: Whether to display the native video controls. Default: `true`\n- `loop`: Whether the video should automatically restart after it ends.\n- `muted`: Whether the video should be allowed to play audio. Default: `false`\n- `poster`: Image source URL for when the video isn't playing.\n```\n\n----------------------------------------\n\nTITLE: Initializing Collapse Component in React with FluentUI\nDESCRIPTION: Demonstrates basic usage of the Collapse component from FluentUI motion preview, controlling content visibility through a boolean prop\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-motion-components-preview/stories/src/Collapse/CollapseDescription.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Collapse } from '@fluentui/react-motion-components-preview';\n\nfunction Component({ visible }) {\n  return (\n    <Collapse visible={visible}>\n      <div>Content</div>\n    </Collapse>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories for React Aria\nDESCRIPTION: Specifies the glob patterns for including Storybook stories from the react-aria package, targeting MDX and TypeScript/TSX story files\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-aria/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-aria/stories/src/**/*.stories.mdx', '../packages/react-components/react-aria/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Stardust Text Component Customization\nDESCRIPTION: Examples of using the Text component in Stardust with more open API properties like weight, color, align, error, and disabled.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-text/library/docs/Spec.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Text weight=\"light\" content=\"This text is light.\" />\n\n<Text color=\"green\" content=\"Green text\" />\n\n<Text align=\"end\" content=\"Text aligned to end\" />\n\n<Text error content=\"There has been an error.\" />\n\n<Text disabled content=\"This feature has been disabled.\" />\n```\n\n----------------------------------------\n\nTITLE: Proposed Slot Method Usage in TypeScript\nDESCRIPTION: This snippet demonstrates how the proposed 'slot' method would be used to create slot components without premature merging.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/slot-children-render-function.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = {\n  root: slot(getNativeElementProps(as || 'div', { ref, ...props }), {\n    required: true,\n    componentType: 'div',\n  }),\n  icon: slot(icon, { componentType: 'div' }),\n  expandIcon: slot(expandIcon, {\n    required: true,\n    componentType: 'span',\n    defaultProps: {\n      children: <ChevronRightRegular style={{ transform: `rotate(${expandIconRotation}deg)` }} />,\n      'aria-hidden': true,\n    },\n  }),\n  button: slot(button, {\n    required: true,\n    componentType: 'button',\n    defaultProps: {\n      disabled,\n      disabledFocusable,\n      'aria-expanded': open,\n      type: 'button',\n    },\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Image Grid in Markdown\nDESCRIPTION: This code snippet shows how to create a grid of linked images in Markdown. It displays thumbnails for Fluent UI Insights episodes with links to their respective videos.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/README.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n|                                                                                                             EP01: Positioning                                                                                                             |                                                                                                           EP02: Styling                                                                                                           |                                                                                                           EP03: Griffel                                                                                                           |\n| :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: |\n| <a href=\"https://learn.microsoft.com/en-us/shows/fluent-ui-insights/fluent-ui-insights-positioning?utm_source=github\" target=\"_blank\"><img src=\"ghdocs/medias/fluentui-ep01-preview.gif\" alt=\"Watch EP01: Positioning\" width=\"240\" /></a> | <a href=\"https://learn.microsoft.com/en-us/shows/fluent-ui-insights/fluent-ui-insights-styling?utm_source=github\" target=\"_blank\"><img src=\"ghdocs/medias/fluentui-ep02-preview.gif\" alt=\"Watch EP02: Styling\" width=\"240\" /></a> | <a href=\"https://learn.microsoft.com/en-us/shows/fluent-ui-insights/fluent-ui-insights-griffel?utm_source=github\" target=\"_blank\"><img src=\"ghdocs/medias/fluentui-ep03-preview.gif\" alt=\"Watch EP03: Griffel\" width=\"240\" /></a> |\n\n|                                                                                                                          EP04: Foundational APIs                                                                                                                           |                                                                                                              EP05: Theming                                                                                                              |                                                                                                                  EP06: Accessible by default                                                                                                                  |\n| :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: |\n| <a href=\"https://learn.microsoft.com/en-us/shows/fluent-ui-insights/fluent-ui-insights-apis-in-v9-slots-jsx-children-triggers?utm_source=github\" target=\"_blank\"><img src=\"ghdocs/medias/fluentui-ep04-preview.gif\" alt=\"Watch EP04: Foundational APIs\" width=\"240\" /></a> | <a href=\"https://learn.microsoft.com/en-us/shows/fluent-ui-insights/fluent-ui-insights-theming-in-v9?utm_source=github\" target=\"_blank\"><img src=\"ghdocs/medias/fluentui-ep05-preview.gif\" alt=\"Watch EP05: Theming\" width=\"240\" /></a> | <a href=\"https://learn.microsoft.com/en-us/shows/fluent-ui-insights/fluent-ui-insights-accessible-by-default?utm_source=github\" target=\"_blank\"><img src=\"ghdocs/medias/fluentui-ep06-preview.gif\" alt=\"Watch EP06: Accessible by default\" width=\"240\" /></a> |\n```\n\n----------------------------------------\n\nTITLE: Using Image Component in Version 0 - React (JavaScript)\nDESCRIPTION: This snippet shows a usage of the Image component in version 0 with a block display property and a source image, highlighting basic implementation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-image/library/docs/Spec.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<Image block src=\"...\" alt=\"Example of the image component in v0\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing FloatingPeoplePicker in Fluent UI\nDESCRIPTION: A specialized picker component for selecting people or groups with advanced interaction capabilities, including search, selection, and persona management\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-examples/src/react/FloatingPeoplePicker/docs/FloatingPeoplePickerBestPractices.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Conceptual Example of FloatingPeoplePicker Usage\nconst PeoplePickerExample = () => {\n  const [selectedPeople, setSelectedPeople] = useState([]);\n\n  const handlePeopleSelection = (people) => {\n    setSelectedPeople(people);\n  };\n\n  return (\n    <FloatingPeoplePicker\n      onSelectionChanged={handlePeopleSelection}\n      selectedPeople={selectedPeople}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Fade Component with Fluent UI in TypeScript\nDESCRIPTION: This code snippet demonstrates the implementation of the Fade component from the Fluent UI library to handle content visibility transitions. It requires the @fluentui/react-motion-components-preview package. The Component function receives a 'visible' prop to determine if the content should be visible or not, rendering it with a fade effect accordingly. This setup can be used to dynamically show or hide content with smooth transitions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-motion-components-preview/stories/src/Fade/FadeDescription.md#2025-04-20_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Fade } from '@fluentui/react-motion-components-preview';\n\nfunction Component({ visible }) {\n  return (\n    <Fade visible={visible}>\n      <div style={{ background: 'lightblue' }}>Content</div>\n    </Fade>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Input to OutputChartType in TypeScript\nDESCRIPTION: This snippet exports a function 'mapFluentChart', which takes an 'input' of any type and returns an 'OutputChartType'. The function is designed to map or convert Fluent-specific inputs to a chart type recognized by the system.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/chart-utilities/etc/chart-utilities.api.md#2025-04-20_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const mapFluentChart: (input: any) => OutputChartType;\n```\n\n----------------------------------------\n\nTITLE: Performance Test Results Table Structure in HTML\nDESCRIPTION: HTML table structure used to display performance test results comparing master and PR builds for various FluentUI components. The table includes links to flamegraphs and performance metrics for different button components and UI elements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/perf-test/README.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n  <table>\n  <tr>\n    <th>Scenario</th>\n    <th>Master Ticks *</th>\n    <th>PR Ticks *</th>\n  </tr><tr>\n            <td>BaseButton</td>\n            <td><a href=\"http://fabricweb.z5.web.core.windows.net/pr-deploy-site/refs/pull/9516/merge/perf-test/BaseButton_master.html\">883</a></td>\n            <td><a href=\"http://fabricweb.z5.web.core.windows.net/pr-deploy-site/refs/pull/9516/merge/perf-test/BaseButton_pr.html\">895</a></td>\n           </tr>\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Height Styles to Textarea in FluentUI\nDESCRIPTION: Example of how to properly apply height-related styles to a Textarea component by targeting the textarea slot directly. This approach ensures proper resizing behavior of the component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-textarea/stories/src/Textarea/TextareaBestPractices.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Textarea textarea={{ className: yourClassName }} />\n```\n\n----------------------------------------\n\nTITLE: API Report TypeScript Definitions for @fluentui/react-list\nDESCRIPTION: This TypeScript code snippet defines the API for the @fluentui/react-list package. It includes type definitions for List and ListItem components, their props, states, styles, and rendering functions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-list/library/etc/react-list.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"react\" />\n\nimport { Checkbox } from '@fluentui/react-checkbox';\nimport type { ComponentProps } from '@fluentui/react-utilities';\nimport type { ComponentState } from '@fluentui/react-utilities';\nimport type { EventData } from '@fluentui/react-utilities';\nimport type { EventHandler } from '@fluentui/react-utilities';\nimport type { ForwardRefComponent } from '@fluentui/react-utilities';\nimport * as React_2 from 'react';\nimport { SelectionItemId } from '@fluentui/react-utilities';\nimport type { SelectionMode as SelectionMode_2 } from '@fluentui/react-utilities';\nimport type { Slot } from '@fluentui/react-utilities';\nimport type { SlotClassNames } from '@fluentui/react-utilities';\n\n// @public (undocumented)\nexport const List: ForwardRefComponent<ListProps>;\n\n// @public (undocumented)\nexport const listClassNames: SlotClassNames<ListSlots>;\n\n// @public (undocumented)\nexport const ListItem: ForwardRefComponent<ListItemProps>;\n\n// @public (undocumented)\nexport const listItemClassNames: SlotClassNames<ListItemSlots>;\n\n// @public\nexport type ListItemProps = ComponentProps<ListItemSlots> & {\n    value?: ListItemValue;\n    onAction?: EventHandler<ListItemActionEventData>;\n};\n\n// @public (undocumented)\nexport type ListItemSlots = {\n    root: NonNullable<Slot<'li', 'div'>>;\n    checkmark?: Slot<typeof Checkbox>;\n};\n\n// @public\nexport type ListItemState = ComponentState<ListItemSlots> & {\n    selectable: boolean;\n    navigable: boolean;\n};\n\n// @public\nexport type ListProps = ComponentProps<ListSlots> & {\n    navigationMode?: ListNavigationMode;\n    selectionMode?: SelectionMode_2;\n    selectedItems?: SelectionItemId[];\n    defaultSelectedItems?: SelectionItemId[];\n    onSelectionChange?: EventHandler<OnListSelectionChangeData>;\n};\n\n// @public (undocumented)\nexport type ListSlots = {\n    root: NonNullable<Slot<'ul', 'div' | 'ol'>>;\n};\n\n// @public\nexport type ListState = ComponentState<ListSlots> & ListContextValue;\n\n// @public\nexport const renderList_unstable: (state: ListState, contextValues: ListContextValues) => JSX.Element;\n\n// @public\nexport const renderListItem_unstable: (state: ListItemState) => JSX.Element;\n\n// @public\nexport const useList_unstable: (props: ListProps, ref: React_2.Ref<HTMLDivElement | HTMLUListElement | HTMLOListElement>) => ListState;\n\n// @public\nexport const useListItem_unstable: (props: ListItemProps, ref: React_2.Ref<HTMLLIElement | HTMLDivElement>) => ListItemState;\n\n// @public\nexport const useListItemStyles_unstable: (state: ListItemState) => ListItemState;\n\n// @public\nexport const useListStyles_unstable: (state: ListState) => ListState;\n```\n\n----------------------------------------\n\nTITLE: Defining AccordionItem Component Props\nDESCRIPTION: TypeScript interface for AccordionItem component props, defining the structure for individual accordion sections.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-accordion/library/docs/Spec.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type AccordionItemProps = ComponentProps &\n  React.HTMLAttributes<HTMLElement> & {\n    disabled?: boolean;\n    value: AccordionItemValue;\n  };\n```\n\n----------------------------------------\n\nTITLE: TagPickerContextValues Type\nDESCRIPTION: Defines the type for the combined context values used by the TagPicker component, including the picker-specific context, active descendant context, and listbox context.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport type TagPickerContextValues = {\n    picker: TagPickerContextValue;\n    activeDescendant: ActiveDescendantContextValue;\n    listbox: ListboxContextValue;\n};\"\n```\n\n----------------------------------------\n\nTITLE: Defining IEditingSelectedPeopleItemProps Interface in TypeScript\nDESCRIPTION: Defines the IEditingSelectedPeopleItemProps interface extending ISelectedPeopleItemProps with additional properties for editing functionality. This interface is marked as @public but undocumented.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_121\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IEditingSelectedPeopleItemProps extends ISelectedPeopleItemProps {\n    // (undocumented)\n    floatingPickerProps?: IBaseFloatingPickerProps<IPersonaProps>;\n    // (undocumented)\n    getEditingItemText?: (item: IExtendedPersonaProps) => string;\n    // (undocumented)\n    onEditingComplete: (oldItem: any, newItem: any) => void;\n    // (undocumented)\n    onRenderFloatingPicker?: React_2.ComponentType<IBaseFloatingPickerProps<IPersonaProps>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting TagPicker Option Styles Hook in TypeScript\nDESCRIPTION: Exports a hook for applying styles to the TagPicker option component based on its current state.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_68\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const useTagPickerOptionStyles_unstable: (state: TagPickerOptionState) => TagPickerOptionState;\n```\n\n----------------------------------------\n\nTITLE: Using Fluent UI React Field with Various Form Controls in JSX\nDESCRIPTION: This example illustrates how to use the Field component with different form controls like Input, Textarea, and RadioGroup within JSX. Key parameters include 'label' for specifying the field label.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-field/library/README.md#2025-04-20_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<>\n  <Field label=\"Name\">\n    <Input />\n  </Field>\n  <Field label=\"Description\">\n    <Textarea />\n  </Field>\n  <Field label=\"Size\">\n    <RadioGroup>\n      <Radio label=\"Small\" />\n      <Radio label=\"Medium\" />\n      <Radio label=\"Large\" />\n    </RadioGroup>\n  </Field>\n</>\n```\n\n----------------------------------------\n\nTITLE: Importing Slider Components from Fluent UI\nDESCRIPTION: This snippet includes imports related to the Slider component from the '@fluentui/react-slider' package, capturing slider properties, events, and styles for user input in a range.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/etc/react-components.api.md#2025-04-20_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Slider } from '@fluentui/react-slider';\nimport { sliderClassNames } from '@fluentui/react-slider';\nimport { sliderCSSVars } from '@fluentui/react-slider';\nimport { SliderOnChangeData } from '@fluentui/react-slider';\nimport { SliderProps } from '@fluentui/react-slider';\nimport { SliderSlots } from '@fluentui/react-slider';\nimport { SliderState } from '@fluentui/react-slider';\n```\n\n----------------------------------------\n\nTITLE: Adding Secondary Calendar to DatePicker in Swift\nDESCRIPTION: Demonstrates how to configure a DatePicker with a secondary calendar system. This example adds a Chinese calendar with Chinese locale while keeping the default primary calendar.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/DatePickerPage/docs/mac/DatePickerUsage.md#2025-04-20_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\n// Secondary Calendar\nvar calendar = Calendar.init(identifier: .chinese)\ncalendar.locale = Locale(identifier: \"zh\")\nlet controller = DatePickerController(date: nil, calendar: nil, style: .date)\ncontroller.secondaryCalendar = calendar\n```\n\n----------------------------------------\n\nTITLE: Empty makeStyles Removal\nDESCRIPTION: Fix to remove an empty makeStyles call that was unnecessary\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-toolbar/library/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nfix: Remove empty makeStyles call. ([PR #28566](https://github.com/microsoft/fluentui/pull/28566) by 138819425+benlemmon-ms@users.noreply.github.com)\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react-text to version v9.0.0-rc.6\nDESCRIPTION: This snippet shares the update of the @fluentui/react-text component to version v9.0.0-rc.6, solidifying the ongoing adjustments to maintain component quality.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/vr-tests-react-components/CHANGELOG.md#2025-04-20_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react-text to v9.0.0-rc.6 ([PR #21995](https://github.com/microsoft/fluentui/pull/21995) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Implementing Accordion Component with Semantic Elements in TSX\nDESCRIPTION: Shows two implementation patterns for Accordion component: default semantic implementation and customized div-based implementation with optional link inclusion.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/first-rule-of-aria.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Accordion>\n  <AccordionItem>\n    <AccordionHeader>Header</AccordionHeader>\n    <AccordionPanel>Content</AccordionPanel>\n  </AccordionItem>\n</Accordion>\n\n<Accordion>\n  <AccordionItem as=\"div\">\n    <AccordionHeader button={{as: \"div\", role: undefined, tabIndex: undefined}}>\n      Header <Link to=\"/somewhere\">Link</Link>\n    </AccordionHeader>\n    <AccordionPanel>Content</AccordionPanel>\n  </AccordionItem>\n</Accordion>\n```\n\n----------------------------------------\n\nTITLE: Conditional Import of CSS Anchor Positioning Polyfill\nDESCRIPTION: This snippet outlines how to conditionally import the CSS anchor positioning polyfill for older browsers, which must be included before loading Fluent UI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/_docs/developer/polyfilling.stories.mdx#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Client-side Import example with conditional polyfill import for older browsers.\n * This MUST be included before Fluent UI.\n */\nif (!CSS.supports('anchor-name: --foo')) {\n  const { default: applyPolyfill } = await import(\n    'https://unpkg.com/@oddbird/css-anchor-positioning/dist/css-anchor-positioning-fn.js'\n  );\n  window.CSS_ANCHOR_POLYFILL = applyPolyfill;\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting ThemeDesigner Component in TypeScript\nDESCRIPTION: This snippet defines a public React functional component called ThemeDesigner that accepts ThemeDesignerProps. The component is marked as undocumented in the API. This is generated from API Extractor and should not be manually edited.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/theme-designer/etc/theme-designer.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React_2 from 'react';\n\n// @public (undocumented)\nexport const ThemeDesigner: React_2.FC<ThemeDesignerProps>;\n\n// (No @packageDocumentation comment for this package)\n```\n\n----------------------------------------\n\nTITLE: Defining Spinner Component\nDESCRIPTION: Defines the Spinner component class extending BaseSpinner with appearance and size properties.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Spinner extends BaseSpinner {\n    appearance?: SpinnerAppearance;\n    size?: SpinnerSize;\n}\n```\n\n----------------------------------------\n\nTITLE: TagPickerSlots Type\nDESCRIPTION: Defines the slots available for the TagPicker component. Currently, it is an empty object.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport type TagPickerSlots = {};\"\n```\n\n----------------------------------------\n\nTITLE: Bumping swc/helpers version in FluentUI React Switch\nDESCRIPTION: This code snippet represents a patch that bumps the version of @swc/helpers. This likely involves updating the dependency in the package.json and ensuring that the code is compatible with the new version of @swc/helpers.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-switch/library/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: none\nCODE:\n```\n\"- bumps @swc/helpers version to 0.5.1 ([PR #28989](https://github.com/microsoft/fluentui/pull/28989) by bernardo.sunderhus@gmail.com)\"\n```\n\n----------------------------------------\n\nTITLE: CSS Modules Equivalent Implementation\nDESCRIPTION: Demonstrates how the proposed approach is similar to CSS Modules style definition and class merging\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/make-overrides.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport cx from 'classnames';\nimport * as classes from './Component.css'; // the same styles can be written in CSS\n\nfunction Component() {\n  return (\n    <div className={cx(classes.root, props.primary && classes.rootPrimary, props.className)}>\n      {props.icon && <div className={cx(classes.icon, props.primary && classes.iconPrimary, props.icon.className)} />}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Bumping package version in package.json\nDESCRIPTION: Example of updating the version number in package.json for a new release.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-shared-contexts/library/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n\"version\": \"9.3.1\"\n```\n\n----------------------------------------\n\nTITLE: Defining Menu Split Group Slots in TypeScript\nDESCRIPTION: Establishes the structure for MenuSplitGroup components using slots, specifically defining a root slot type for div elements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/library/etc/react-menu.api.md#2025-04-20_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type MenuSplitGroupSlots = {\n    root: Slot<'div'>;\n};\n```\n\n----------------------------------------\n\nTITLE: Import React\nDESCRIPTION: Imports the React library as React_2, which is used for defining React components and context.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-window-provider/etc/react-window-provider.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React_2 from 'react';\n```\n\n----------------------------------------\n\nTITLE: Setting up Webpack Configuration for Babel Preset\nDESCRIPTION: Webpack configuration for using babel-loader with the @fluentui/babel-preset-global-context preset. Targets specific node_modules packages to apply transforms to React createContext calls.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/babel-preset-global-context/README.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(ts|js|tsx|jsx)$/,\n        use: {\n          loader: 'babel-loader',\n          options: {\n            presets: [['@fluentui/babel-preset-global-context']],\n          },\n        },\n        // Targets all @fluentui scoped packages and replaces `createContext` calls with global context\n        // Can be setup for other packages\n        // /node_modules/<(<packageName>|<packageName>)\\/*>/\n        include: [/node_modules/@fluentui\\/*/],\n      },\n      {\n        test: /\\.(ts|tsx)$/i,\n        use: ['ts-loader'],\n        exclude: ['/node_modules/'],\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Changelog Entries Documentation\nDESCRIPTION: A series of markdown entries documenting version changes, patches, and dependency updates for the FluentUI React Label component, including versions 9.1.2 through 9.0.5.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-label/library/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patches\n\n- Bump @fluentui/react-shared-contexts to v9.3.1\n- Bump @fluentui/react-theme to v9.1.6\n\n## [9.1.2]\n\nMon, 13 Mar 2023 08:58:26 GMT\n[Compare changes]\n\n### Patches\n\n- Bump @fluentui/react-utilities to v9.7.0\n```\n\n----------------------------------------\n\nTITLE: Importing makeStyles from Fluent UI React Components\nDESCRIPTION: Shows how to import the makeStyles function from the Fluent UI React Components package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/StylingComponents.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { makeStyles } from '@fluentui/react-components';\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-jsx-runtime version\nDESCRIPTION: This patch updates the version of the `@fluentui/react-jsx-runtime` dependency. Bumping this package ensures that the `@fluentui/react-badge` component uses the latest features and bug fixes available in the JSX runtime.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nBump @fluentui/react-jsx-runtime to v9.0.47 ([PR #33372](https://github.com/microsoft/fluentui/pull/33372) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Accordion Component HTML Output Examples\nDESCRIPTION: Demonstrates the rendered HTML structure for accordion implementations, showing proper ARIA attributes and semantic heading structure in both default and customized versions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/first-rule-of-aria.md#2025-04-20_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- accordion header -->\n<h3 class=\"header-class\">\n  <button id=\"header-1\" aria-disabled=\"false\" class=\"header-button-class\" aria-controls=\"panel-1\">Header</button>\n</h3>\n<!-- accordion panel -->\n<div id=\"panel-1\" role=\"region\" aria-labelledby=\"header-1\" class=\"panel-class\">Content</div>\n\n<!-- accordion header -->\n<div role=\"heading\" class=\"header-class\">\n  <div id=\"header-1\" aria-disabled=\"false\" class=\"header-button-class\" aria-controls=\"panel-1\">\n    Header <a href=\"/somewhere\">Link</a>\n  </div>\n</div>\n<!-- accordion panel -->\n<div id=\"panel-1\" role=\"region\" aria-labelledby=\"header-1\" class=\"panel-class\">Content</div>\n```\n\n----------------------------------------\n\nTITLE: Atlaskit Button DOM Structure\nDESCRIPTION: HTML structure for Atlaskit button showing nested span elements for icon and text content. Uses CSS classes for styling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Button.md#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<button type=\"button\" class=\"css-shc4i4\">\n  <span class=\"css-j8fq0c\">\n    <span class=\"css-8xpfx5\">\n      <i>3d_rotation</i>\n    </span>\n    <span class=\"css-mu6jxl\">Default</span>\n  </span>\n</button>\n```\n\n----------------------------------------\n\nTITLE: Correcting Screen Reader Item Count for Toolbar\nDESCRIPTION: This fix ensures that the screen reader announces the correct number of items in a toolbar menu containing a radio group, improving accessibility. It requires no external libraries for implementation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nFix screen reader narrates incorrect items count for `toolbar` menu with radio group @yuanboxue-amber ([#15951](https://github.com/microsoft/fluentui/pull/15951))\n```\n\n----------------------------------------\n\nTITLE: Exporting Navigation and Interaction Components - JavaScript\nDESCRIPTION: This snippet exports various navigation and interaction components including buttons, interactions, and overlays designed for enhancing user engagement within the Fluent UI framework.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/etc/react-components.api.md#2025-04-20_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nexport { NavButtonRenderFunction }\n\nexport { OnOpenChangeData }\n\nexport { OnSelectionChangeCallback }\n\nexport { OnSelectionChangeData }\n\nexport { OnVisibleChangeData }\n\nexport { OpenPopoverEvents }\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Fade Presence Component in Fluent UI with TypeScript\nDESCRIPTION: This snippet demonstrates how to create a custom fade presence component using createPresenceComponent() in Fluent UI. It defines separate enter and exit animations with custom opacity transitions and durations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-motion/stories/src/CreatePresenceComponent/CreatePresenceComponentFactory.stories.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type AtomMotion, createPresenceComponent, type PresenceMotion } from '@fluentui/react-components';\n\nconst enterAtom: AtomMotion = {\n  // opacity will be animated from 0 to 1\n  keyframes: { opacity: [0, 1] },\n  // duration of the animation will be \"1000ms\"\n  duration: 1000,\n};\n\nconst exitAtom: AtomMotion = {\n  // opacity will be animated from 1 to 0\n  keyframes: { opacity: [1, 0] },\n  // duration of the animation will be \"500ms\"\n  duration: 500,\n};\n\nconst presense: PresenceMotion = {\n  enter: enterAtom,\n  exit: exitAtom,\n};\n\nconst Fade = createPresenceComponent(presense);\n```\n\n----------------------------------------\n\nTITLE: Defining IFocusZoneProps Interface in TypeScript\nDESCRIPTION: The IFocusZoneProps interface extends React HTML attributes, offering properties to configure a FocusZone component. Options include controlling directional focus, tabbable element handling, and custom focus behavior. Many properties are deprecated, and the interface outlines the full set of customization options for focus zones.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-focus/etc/react-focus.api.md#2025-04-20_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\\nexport interface IFocusZoneProps extends React_2.HTMLAttributes<HTMLElement> {\\n    allowFocusRoot?: boolean;\\n    // @deprecated\\n    allowTabKey?: boolean;\\n    // @deprecated\\n    ariaDescribedBy?: string;\\n    // @deprecated\\n    ariaLabelledBy?: string;\\n    as?: React_2.ElementType;\\n    checkForNoWrap?: boolean;\\n    className?: string;\\n    componentRef?: IRefObject<IFocusZone>;\\n    // @deprecated\\n    defaultActiveElement?: string;\\n    defaultTabbableElement?: string | ((root: HTMLElement) => HTMLElement);\\n    direction?: FocusZoneDirection;\\n    disabled?: boolean;\\n    // @deprecated\\n    doNotAllowFocusEventToPropagate?: boolean;\\n    // @deprecated\\n    elementRef?: React_2.Ref<HTMLElement>;\\n    // @deprecated\\n    elementType?: any;\\n    handleTabKey?: FocusZoneTabbableElements;\\n    isCircularNavigation?: boolean;\\n    // @deprecated\\n    isInnerZoneKeystroke?: (ev: React_2.KeyboardEvent<HTMLElement>) => boolean;\\n    onActiveElementChanged?: (element?: HTMLElement, ev?: React_2.FocusEvent<HTMLElement>) => void;\\n    // @deprecated\\n    onBeforeFocus?: (childElement?: HTMLElement) => boolean;\\n    onFocus?: (event: React_2.FocusEvent<HTMLElement>) => void;\\n    // @deprecated\\n    onFocusNotification?: () => void;\\n    pagingSupportDisabled?: boolean;\\n    preventDefaultWhenHandled?: boolean;\\n    preventFocusRestoration?: boolean;\\n    // @deprecated (undocumented)\\n    rootProps?: React_2.HTMLAttributes<HTMLDivElement>;\\n    shouldEnterInnerZone?: (ev: React_2.KeyboardEvent<HTMLElement>) => boolean;\\n    shouldFocusInnerElementWhenReceivedFocus?: boolean;\\n    shouldFocusOnMount?: boolean;\\n    shouldInputLoseFocusOnArrowKey?: (inputElement: HTMLInputElement | HTMLTextAreaElement) => boolean;\\n    shouldRaiseClicks?: boolean;\\n    shouldRaiseClicksOnEnter?: boolean;\\n    shouldRaiseClicksOnSpace?: boolean;\\n    shouldReceiveFocus?: (childElement?: HTMLElement) => boolean;\\n    shouldResetActiveElementWhenTabFromZone?: boolean;\\n    stopFocusPropagation?: boolean;\\n}\n```\n\n----------------------------------------\n\nTITLE: TagPickerGroup Class Names\nDESCRIPTION: Defines the class names for the TagPickerGroup component's slots, used for styling the component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport const tagPickerGroupClassNames: SlotClassNames<TagPickerGroupSlots>;\"\n```\n\n----------------------------------------\n\nTITLE: Combobox Provider Definition\nDESCRIPTION: This snippet defines the ComboboxProvider, which provides the Combobox context to its children. It's deprecated.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/library/etc/react-combobox.api.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public @deprecated (undocumented)\nexport const ComboboxProvider: Provider<ComboboxContextValue> & FC<ProviderProps<ComboboxContextValue>>;\"\n```\n\n----------------------------------------\n\nTITLE: FluentUI Package Version Updates - Latest\nDESCRIPTION: Version bumps for FluentUI packages including babel-make-styles, react-accordion, react-avatar, react-button and other components to alpha/beta versions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/vr-tests/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/babel-make-styles to v9.0.0-alpha.17\n- Bump @fluentui/react-accordion to v9.0.0-alpha.42\n- Bump @fluentui/react-avatar to v9.0.0-alpha.47\n- Bump @fluentui/react-button to v9.0.0-alpha.49\n- Bump @fluentui/react-divider to v9.0.0-alpha.36\n- Bump @fluentui/react-link to v9.0.0-alpha.47\n- Bump @fluentui/react-theme-provider to v9.0.0-alpha.44\n- Bump @fluentui/react-provider to v9.0.0-alpha.47\n- Bump @fluentui/react-tabs to v1.0.0-beta.116\n```\n\n----------------------------------------\n\nTITLE: Define SetVirtualMouseTarget type\nDESCRIPTION: Defines a type called `SetVirtualMouseTarget` which is a function that accepts a `React_2.MouseEvent | MouseEvent | undefined | null` and returns void. This type is used to update the virtual mouse target, likely for positioning elements relative to the mouse cursor.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-positioning/etc/react-positioning.api.md#2025-04-20_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type SetVirtualMouseTarget = (event: React_2.MouseEvent | MouseEvent | undefined | null) => void;\n```\n\n----------------------------------------\n\nTITLE: Adjust Bar Width if Space Insufficient\nDESCRIPTION: If the required width exceeds the total available width, the bar width is reduced to the maximum possible value that allows all bars to be rendered with 2:1 spacing. This ensures the chart fits within the available space.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/docs/implementing-2-to-1-spacing.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nelse {\n    const maxBandwidth = totalWidth / (this._xAxisLabels.length + (this._xAxisLabels.length - 1) * 2);\n    barWidth = maxBandwidth;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for FluentUI React Toolbar\nDESCRIPTION: Configuration code for including React Toolbar stories in Storybook settings. Specifies the story file paths and supported file extensions for both MDX and TypeScript/TSX files.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-toolbar/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-toolbar/stories/src/**/*.stories.mdx', '../packages/react-components/react-toolbar/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript: Switch State Type\nDESCRIPTION: Defines the state interface for the Switch component, extending ComponentState and requiring the labelPosition property from SwitchProps. This type represents the internal state of the Switch component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-switch/library/etc/react-switch.api.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport type SwitchState = ComponentState<SwitchSlots> & Required<Pick<SwitchProps, 'labelPosition'>> ;\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Persona and PersonaCoin Components in React Native\nDESCRIPTION: This snippet demonstrates how to use both PersonaCoin and Persona components from FluentUI React Native. It shows how to configure various properties like size, initials, presence status, image URL, and text displays. The example includes a PersonaCoin with online presence and a Persona with secondary text and busy status.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/PersonaPage/docs/cross/PersonaUsage.md#2025-04-20_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport * as React from 'react';\nimport { PersonaCoin, Persona } from '@fluentui/react-native';\nimport { View } from 'react-native';\n\nconst satyaPhotoUrl = 'https://www.microsoft.com/en-us/CMSImages/satya.jpg?version=0881eb71-4942-b627-d602-84c832b8a0b6&amp;CollectionId=1b46ce2d-c90d-421e-94f1-cfb6bc6ef6ec';\n\nconst App = () => {\n  return (\n    <View>\n      <PersonaCoin\n        size='size24'\n        initials=\"SN\"\n        imageDescription=\"Photo of Satya Nadella\"\n        presence='online'\n        imageUrl={satyaPhotoUrl}\n        coinColor='blue'\n      />\n      <Persona\n          text=\"John Vanderbloom\"\n          size=\"size48\"\n          secondaryText=\"Software Engineer\"\n          imageUrl={satyaPhotoUrl}\n          presence=\"busy\"\n      />\n    </View>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining TablistAppearance Constants in TypeScript\nDESCRIPTION: Constants defining possible appearance values for the Tablist component, allowing for subtle or transparent visual styling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_63\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport const TablistAppearance: {\n    readonly subtle: \"subtle\";\n    readonly transparent: \"transparent\";\n};\n\n// @public\nexport type TablistAppearance = ValuesOf<typeof TablistAppearance>;\n```\n\n----------------------------------------\n\nTITLE: Preserving v0 Label Font Styles in v9 Spinner\nDESCRIPTION: Example of using the provided v0SpinnerLabelStyle mixin to maintain the original v0 font styles for the spinner label in v9.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Loader.stories.mdx#2025-04-20_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Spinner, makeStyles } from '@fluentui/react-components';\nimport { spinner } from '@fluentui/react-components';\n\nconst useSpinnerStyles = makeStyles({\n  v0SpinnerLabelStyle: {\n    ...spinner.v0SpinnerLabelStyle(),\n  },\n});\n\nconst Component = () => {\n  const classes = useSpinnerStyles();\n  return <Spinner className={classes.v0SpinnerLabelStyle} label=\"Loading...\" />;\n};\n```\n\n----------------------------------------\n\nTITLE: Version Comparison Links in Markdown\nDESCRIPTION: Markdown formatting for version comparison links in the changelog, showing the package version and link to compare changes between versions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-docsite-components/CHANGELOG.md#2025-04-20_snippet_27\n\nLANGUAGE: markdown\nCODE:\n```\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-docsite-components_v8.3.17..@fluentui/react-docsite-components_v8.3.18)\n```\n\n----------------------------------------\n\nTITLE: Specifying Default Values in TypeScript API Documentation\nDESCRIPTION: Demonstrates how to indicate default values for API items using the @defaultvalue tag in TypeScript.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/api-docs/README.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @defaultvalue 'hello world'\n */\n```\n\n----------------------------------------\n\nTITLE: Start Storybook for React Packages\nDESCRIPTION: Command to start Storybook for a specific @fluentui/react package using yarn workspace. It sets up a development environment to preview components interactively. The user must specify the full package name.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-examples/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn workspace @fluentui/react start\n```\n\n----------------------------------------\n\nTITLE: Using TimePicker Component in JSX\nDESCRIPTION: This example shows how to use the TimePicker component in a React JSX file. It renders a basic TimePicker without any additional props.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-timepicker-compat/library/README.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<TimePicker />\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Module for @fluentui/react-slider-stories in JavaScript\nDESCRIPTION: This code snippet demonstrates how to configure the Storybook module.exports object to include stories from the @fluentui/react-slider-stories package. It specifies the file paths for both MDX and TypeScript/TSX story files.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-slider/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-slider/stories/src/**/*.stories.mdx', '../packages/react-components/react-slider/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Error Bar Definition for Data Plot\nDESCRIPTION: Declares a type for error bars within a plot. This could include both x and y axes error bar configurations, essential for defining plotting error margins in data visualization.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/chart-utilities/etc/chart-utilities.api.md#2025-04-20_snippet_30\n\nLANGUAGE: TypeScript\nCODE:\n```\nerror_x: ErrorBar;\nerror_y: ErrorBar;\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react to v8.47.0\nDESCRIPTION: This patch updates the @fluentui/react package to version 8.47.0 to incorporate the latest changes and fixes. This update was included as part of Pull Request #20161.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/ts-minbar-test-react/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.47.0 ([PR #20161](https://github.com/microsoft/fluentui/pull/20161) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Comparing Tabster Module Bundle Sizes\nDESCRIPTION: A table comparing the minified and gzipped sizes of different Tabster modules, highlighting the library's modularity and tree-shakeability\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/components/moving-from-focus-zone-to-tabster.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Module          | minified (kb) | gzipped(kb |\n| --------------- | ------------- | ---------- |\n| Core            | 45.3          | 12.2       |\n| Deloser         | 13.2          | 3.2        |\n| Modalizer       | 4.5           | 0.8        |\n| ObservedElement | 3.1           | 0.7        |\n| Outline         | 7.9           | 2          |\n| CrossOrigin     | 18.9          | 4.4        |\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 9.2.3\nDESCRIPTION: Changelog entry documenting React 18 support and dependency updates in version 9.2.3.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-aria/library/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.2.3](https://github.com/microsoft/fluentui/tree/@fluentui/react-aria_v9.2.3)\n\nThu, 20 Oct 2022 08:39:58 GMT\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-aria_v9.2.2..@fluentui/react-aria_v9.2.3)\n\n### Patches\n\n- chore: Bump peer deps to support React 18\n```\n\n----------------------------------------\n\nTITLE: Defining IExpandingCardStyleProps Interface in TypeScript\nDESCRIPTION: Defines the IExpandingCardStyleProps interface extending IBaseCardStyleProps with additional properties for card heights and rendering states. This interface is marked as @public but undocumented.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_130\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IExpandingCardStyleProps extends IBaseCardStyleProps {\n    compactCardHeight?: number;\n    expandedCardFirstFrameRendered?: boolean;\n    expandedCardHeight?: number;\n    needsScroll?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Recommended Regular Button DOM Structure in HTML\nDESCRIPTION: Recommended DOM structure for regular buttons based on analysis of common patterns across UI libraries, featuring startIcon and endIcon slots.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Button.md#2025-04-20_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<button class=\"root\" role=\"button\" type=\"button\">\n  <i class=\"startIcon\"></i>\n  {children}\n  <i class=\"endIcon\"></i>\n</button>\n```\n\n----------------------------------------\n\nTITLE: CardFooter Implementation - Before Migration\nDESCRIPTION: Example showing the old implementation of CardFooter using @fluentui/react-northstar package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Card/CardFooter.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CardFooter } from '@fluentui/react-northstar';\n\nconst Component = () => <CardFooter>Lorem ipsum</CardFooter>;\n```\n\n----------------------------------------\n\nTITLE: Exporting TagPicker Input Styles Hook in TypeScript\nDESCRIPTION: Exports a hook for applying styles to the TagPicker input component based on its current state.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_62\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const useTagPickerInputStyles_unstable: (state: TagPickerInputState) => TagPickerInputState;\n```\n\n----------------------------------------\n\nTITLE: Setting Server-Side Rendering in TypeScript\nDESCRIPTION: Function to enable or disable server-side rendering. Takes a boolean parameter to toggle the SSR state.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/utilities/etc/utilities.api.md#2025-04-20_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function setSSR(isEnabled: boolean): void;\n```\n\n----------------------------------------\n\nTITLE: Defining FluentUI Spinner Component Types and Exports\nDESCRIPTION: TypeScript declarations for the Spinner component including imports, component types, props interface, state management, and utility functions. Defines the core API surface for the Spinner component including size variations, appearance options, and slot configurations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-spinner/library/etc/react-spinner.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ComponentProps } from '@fluentui/react-utilities';\nimport type { ComponentState } from '@fluentui/react-utilities';\nimport type { ForwardRefComponent } from '@fluentui/react-utilities';\nimport { Label } from '@fluentui/react-label';\nimport * as React_2 from 'react';\nimport type { Slot } from '@fluentui/react-utilities';\nimport type { SlotClassNames } from '@fluentui/react-utilities';\n\n// @public\nexport const renderSpinner_unstable: (state: SpinnerState) => JSX.Element;\n\n// @public\nexport const Spinner: ForwardRefComponent<SpinnerProps>;\n\n// @public (undocumented)\nexport const spinnerClassNames: SlotClassNames<SpinnerSlots>;\n\n// @internal (undocumented)\nexport const SpinnerContextProvider: React_2.Provider<SpinnerContextValue | undefined>;\n\n// @internal (undocumented)\nexport type SpinnerContextValue = Pick<SpinnerProps, 'size'>;\n\n// @public\nexport type SpinnerProps = Omit<ComponentProps<SpinnerSlots>, 'size'> & {\n    appearance?: 'primary' | 'inverted';\n    delay?: number;\n    labelPosition?: 'above' | 'below' | 'before' | 'after';\n    size?: 'extra-tiny' | 'tiny' | 'extra-small' | 'small' | 'medium' | 'large' | 'extra-large' | 'huge';\n};\n\n// @public (undocumented)\nexport type SpinnerSlots = {\n    root: NonNullable<Slot<'div', 'span'>>;\n    spinner?: Slot<'span'>;\n    spinnerTail?: NonNullable<Slot<'span'>>;\n    label?: Slot<typeof Label>;\n};\n\n// @public\nexport type SpinnerState = ComponentState<SpinnerSlots> & Required<Pick<SpinnerProps, 'appearance' | 'delay' | 'labelPosition' | 'size'>> & {\n    shouldRenderSpinner: boolean;\n};\n\n// @public\nexport const useSpinner_unstable: (props: SpinnerProps, ref: React_2.Ref<HTMLElement>) => SpinnerState;\n\n// @internal (undocumented)\nexport const useSpinnerContext: () => SpinnerContextValue;\n\n// @public\nexport const useSpinnerStyles_unstable: (state: SpinnerState) => SpinnerState;\n\n```\n\n----------------------------------------\n\nTITLE: New Text Component Usage in FluentUI\nDESCRIPTION: Examples of using the new Text component with the proposed API allowing customization of weight, size, alignment, and text decorations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-text/library/docs/Spec.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Text weight=\"semibold\" size={1000}>This text is semibold and huge.</Text>\n\n<Text align=\"end\" italic>Text aligned to the end</Text>\n\n<Text strikethrough>This text has a strikethrough.</Text>\n```\n\n----------------------------------------\n\nTITLE: Rendering DrawerFooter Component in HTML\nDESCRIPTION: This snippet showcases the structure of the DrawerFooter component in HTML, containing buttons typically used for primary and secondary actions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-drawer/library/docs/Spec.md#2025-04-20_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<footer class=\"fui-DrawerFooter\">\n  <button type=\"button\">Primary</button>\n  <button type=\"button\">Secondary</button>\n</footer>\n```\n\n----------------------------------------\n\nTITLE: Using Motion Prop with Callbacks for Advanced Control\nDESCRIPTION: Example of using the longhand form of the motion prop to support motion callbacks such as onMotionFinish, allowing for greater control over motion behavior.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/motion-definition-n-apis.md#2025-04-20_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\n<DialogSurface\n  motion={{\n    element: FadeSlow,\n    onMotionFinish: () => console.log('Motion ended!'),\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Complete Story Example with Export Configuration\nDESCRIPTION: Full example demonstrating how to create a story with the Text component and configure it for export to StackBlitz using Vite bundler.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-storybook-addon-export-to-sandbox/README.md#2025-04-20_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Text } from '@fluentui/react-components';\n\nexport const Default = () => <Text>This is an example of the Text component's usage.</Text>;\n\nDefault.parameters = {\n  exportToSandbox: {\n    provider: 'stackblitz-cloud',\n    bundler: 'vite',\n    requiredDependencies: {\n      react: 'latest',\n      'react-dom': 'latest',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Layer Component Interfaces in TypeScript\nDESCRIPTION: Interface definitions for Layer components in FluentUI, which provide portals for rendering content outside the DOM hierarchy. Layer components are essential for overlays, dialogs, and other floating UI elements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_144\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface ILayer {\n}\n\n// @public\nexport interface ILayerHost {\n    hostId: string;\n    notifyLayersChanged(): void;\n    rootRef: React_2.MutableRefObject<HTMLDivElement | null>;\n}\n\n// @public (undocumented)\nexport interface ILayerHostProps extends React_2.HTMLAttributes<HTMLElement> {\n    componentRef?: IRefObject<ILayerHost>;\n    id?: string;\n}\n\n// @public (undocumented)\nexport interface ILayerProps extends React_2.HTMLAttributes<HTMLDivElement>, React_2.RefAttributes<HTMLDivElement> {\n    className?: string;\n    componentRef?: IRefObject<ILayer>;\n    eventBubblingEnabled?: boolean;\n    fabricProps?: IFabricProps;\n    hostId?: string;\n    insertFirst?: boolean;\n    onLayerDidMount?: () => void;\n    // @deprecated\n    onLayerMounted?: () => void;\n    onLayerWillUnmount?: () => void;\n    styles?: IStyleFunctionOrObject<ILayerStyleProps, ILayerStyles>;\n    theme?: ITheme;\n}\n\n// @public (undocumented)\nexport interface ILayerStyleProps {\n    className?: string;\n    isNotHost?: boolean;\n    theme: ITheme;\n}\n\n// @public (undocumented)\nexport interface ILayerStyles {\n    content?: IStyle;\n    root?: IStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useBackgroundAppearance Hook in TypeScript\nDESCRIPTION: TypeScript function implementation for the useBackgroundAppearance hook that returns the background appearance context value.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-shared-contexts/library/etc/react-shared-contexts.api.md#2025-04-20_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Warning: (ae-incompatible-release-tags) The symbol \"useBackgroundAppearance\" is marked as @public, but its signature references \"BackgroundAppearanceContextValue\" which is marked as @internal\n//\n// @public (undocumented)\nexport function useBackgroundAppearance(): BackgroundAppearanceContextValue;\n```\n\n----------------------------------------\n\nTITLE: Configuring Griffel Babel Preset for Third-Party Imports\nDESCRIPTION: Babel configuration for when Griffel is re-exported from a third-party package. The configuration specifies the custom module source and import name.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/BuildTimeStyles.stories.mdx#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\n    [\n      \"@griffel/babel\",\n      {\n        \"modules\": [{ \"moduleSource\": \"custom-package\", \"importName\": \"makeStyles\" }]\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Label in Northstar/v0\nDESCRIPTION: Demonstrates Label component usage in FluentUI Northstar (v0) with content prop.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-label/library/docs/Spec.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Label content=\"You have 23 emails\" />\n```\n\n----------------------------------------\n\nTITLE: Using Exported Tokens in Components\nDESCRIPTION: Example of how tokens can be accessed directly in components without using the useTheme() hook, simplifying integration with other CSS-in-JS frameworks.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/convergence/make-styles-no-functions.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { tokens } from '@fluentui/react-theme';\n\nfunction CustomComponent() {\n  return <div style={{ color: tokens.borderRadiusNone /* is \"var(--borderRadiusNone)\" */ }} />;\n}\n```\n\n----------------------------------------\n\nTITLE: IconNamesInput Type Definition in TypeScript\nDESCRIPTION: This snippet defines a type alias for the keys of the IconNames object, facilitating strong typing for the icon name inputs in TypeScript. This adds type safety by ensuring only valid icon names can be utilized.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/font-icons-mdl2/etc/font-icons-mdl2.api.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type IconNamesInput = keyof typeof IconNames;\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react-provider to version v9.0.0-rc.6\nDESCRIPTION: This snippet details the patch for the @fluentui/react-provider component to version v9.0.0-rc.6, ensuring that the provider functionality continues to meet standards in the Fluent UI library.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/vr-tests-react-components/CHANGELOG.md#2025-04-20_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react-provider to v9.0.0-rc.6 ([PR #21995](https://github.com/microsoft/fluentui/pull/21995) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Themes with Brand Ramp in TypeScript\nDESCRIPTION: Illustrates how to create custom light and dark themes using theme factory functions and a custom brand ramp in Fluent UI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Theming.stories.mdx#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BrandVariants, createLightTheme, createDarkTheme } from '@fluentui/react-components';\n\nconst customBrandRamp: BrandVariants = {\n  10: '#008',\n  //...\n  160: '#88F',\n};\n\nexport const customLightTheme = createLightTheme(customBrandRamp);\nexport const customDarkTheme = createDarkTheme(customBrandRamp);\n```\n\n----------------------------------------\n\nTITLE: Lifecycle Callbacks for createMotionComponent in React\nDESCRIPTION: Defines three lifecycle callbacks for React components created with createMotionComponent(). These callbacks are used to handle different stages of motion, including start, finish, and cancellation. They are useful for orchestrating motions or running side effects related to motion.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-motion/stories/src/CreateMotionComponent/CreateMotionComponentLifecycleCallbacks.stories.md#2025-04-20_snippet_0\n\nLANGUAGE: React\nCODE:\n```\ncreateMotionComponent() {\n  // ...\n  onMotionStart: () => {\n    // Called when any motion has started\n  },\n  onMotionFinish: () => {\n    // Called when all motions have finished\n  },\n  onMotionCancel: () => {\n    // Called when the motion is cancelled\n    // This is called instead of onMotionFinish\n    // Can happen when the motion component is unmounted before the full motion is finished\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Storybook Meta Title in JSX\nDESCRIPTION: This JSX code sets the title for the Storybook documentation page. It specifies the location of this page in the Storybook navigation hierarchy.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Accessibility/Truncation.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta title=\"Concepts/Developer/Accessibility/Truncation\" />\n```\n\n----------------------------------------\n\nTITLE: Direct Ref Forwarding in FluentUI v9 (TSX)\nDESCRIPTION: This snippet demonstrates the new approach in FluentUI v9, where the Ref component is no longer needed. Instead, useRef is used to create a ref, which is then directly passed to the Button component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Ref.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from '@fluentui/react-components';\nconst Component = () => {\n  const ref = React.useRef(null);\n\n  return <Button ref={ref}>some content</Button>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Spacing Constants\nDESCRIPTION: Exports CSS variable references for horizontal and vertical spacing values used throughout the UI system.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nexport const spacingHorizontalL = \"var(--spacingHorizontalL)\";\nexport const spacingHorizontalM = \"var(--spacingHorizontalM)\";\nexport const spacingHorizontalMNudge = \"var(--spacingHorizontalMNudge)\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Tab Component Class in TypeScript\nDESCRIPTION: TypeScript class definition for the Tab component that extends FASTElement and implements StartEnd interface, providing tab functionality for tabbed interfaces.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_61\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"Tab\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n// Warning: (ae-missing-release-tag) \"Tab\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport class Tab extends FASTElement {\n    // (undocumented)\n    connectedCallback(): void;\n    disabled: boolean;\n}\n\n// @public (undocumented)\nexport interface Tab extends StartEnd {\n}\n```\n\n----------------------------------------\n\nTITLE: Define CreateArrowStylesOptions type\nDESCRIPTION: Defines an internal type called `CreateArrowStylesOptions` which specifies the options for creating arrow styles. These options include arrowHeight, borderWidth, borderStyle, and borderColor, all related to styling the arrow element.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-positioning/etc/react-positioning.api.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal\nexport type CreateArrowStylesOptions = {\n    arrowHeight: number | undefined;\n    borderWidth?: GriffelStyle['borderBottomWidth'];\n    borderStyle?: GriffelStyle['borderBottomStyle'];\n    borderColor?: GriffelStyle['borderBottomColor'];\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Package Name for Fluent UI React Migration Components in Markdown\nDESCRIPTION: This code snippet defines the package name for Fluent UI React migration components from V0 to V9. It uses a Markdown heading to emphasize the package name.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-migration-v0-v9/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @fluentui/react-migration-v0-v9\n```\n\n----------------------------------------\n\nTITLE: Defining MenuItem Interface in TypeScript\nDESCRIPTION: Deprecated interface definition for MenuItem styles in FluentUI. This interface defined class names for various parts of menu items such as icons, dividers, and checkmarks.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_150\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public @deprecated (undocumented)\nexport interface IMenuItemClassNames {\n    // (undocumented)\n    checkmarkIcon?: string;\n    // (undocumented)\n    divider?: string;\n    // (undocumented)\n    icon?: string;\n    // (undocumented)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing v9 Slider Examples\nDESCRIPTION: This snippet imports the V9 Slider example components, that will be rendered in the Storybook story.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Slider/Slider.stories.mdx#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n\"import {\\n  V9BasicExample,\\n  V9SnappingExample,\\n  V9ControlledExample,\\n  V9FormattedValueExample,\\n} from './Sliderv9Examples.stories';\"\n```\n\n----------------------------------------\n\nTITLE: Defining Multi Stacked Bar Chart Variant Enum in TypeScript\nDESCRIPTION: The MultiStackedBarChartVariant enum defines the different modes in which multi-stacked bar charts can be rendered, enhancing configurability.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/etc/react-charting.api.md#2025-04-20_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport enum MultiStackedBarChartVariant {\n    // (undocumented)\n    AbsoluteScale = \"absolute-scale\",\n    // (undocumented)\n    PartToWhole = \"part-to-whole\"\n}\n```\n\n----------------------------------------\n\nTITLE: Unsafe DOM Attribute Spread Result\nDESCRIPTION: This HTML code demonstrates the result of the unsafe DOM attribute spread example. Note that `as:'div'` still renders but the other props are expected to be filtered out during runtime to avoid errors\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/simplify-prop-merging.md#2025-04-20_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!-- Thankfully {as:'div'} still works, but props must be filtered on every render -->\n<div></div>\n```\n\n----------------------------------------\n\nTITLE: Get Faded Overflow Style Function\nDESCRIPTION: Defines a function, `getFadedOverflowStyle`, that returns an `IRawStyle` object to create a faded overflow effect. It takes the theme and optional color, direction, width and height as parameters.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/style-utilities/etc/style-utilities.api.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n\"export function getFadedOverflowStyle(theme: ITheme, color?: keyof ISemanticColors | keyof IPalette, direction?: 'horizontal' | 'vertical', width?: string | number, height?: string | number): IRawStyle;\"\n```\n\n----------------------------------------\n\nTITLE: Styling Hooks for Radio Components\nDESCRIPTION: This snippet includes hooks for styling Radio and RadioGroup components, allowing for dynamic styling based on the component's state, facilitating a more responsive user interface within Fluent UI applications.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-radio/library/etc/react-radio.api.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const useRadioGroupStyles_unstable: (state: RadioGroupState) => RadioGroupState;\n\n// @public\nexport const useRadioStyles_unstable: (state: RadioState) => RadioState;\n```\n\n----------------------------------------\n\nTITLE: Consuming virtual parent utilities in React\nDESCRIPTION: This refactor consumes virtual parent utilities from the @fluentui/react-utilities package. This change likely aims to reduce code duplication and improve maintainability by reusing existing utility functions for managing virtual parent relationships within the Tree component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tree/library/CHANGELOG.md#2025-04-20_snippet_13\n\nLANGUAGE: React\nCODE:\n```\nrefactor: consume virtual parent utilities from @fluentui/react-utilities ([PR #29286](https://github.com/microsoft/fluentui/pull/29286) by lingfan.gao@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Generating Migration Command - Shell\nDESCRIPTION: This command generates package migration scripts for the Fluent UI workspace using yarn and nx. It allows for dry run options to preview changes without modifying files.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/migrate-v8-pkg/README.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:migrate-v8-pkg ...\n```\n\n----------------------------------------\n\nTITLE: Installing @fluentui/state package with Yarn\nDESCRIPTION: This command installs the `@fluentui/state` package as a dependency in your project using Yarn.  This allows use of the provided framework-agnostic state management utils.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/state/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @fluentui/state\n```\n\n----------------------------------------\n\nTITLE: Initializing Avatar with Status Badge - JSX\nDESCRIPTION: Displays an Avatar with a presence badge indicating busy status.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-avatar/library/docs/SPEC.md#2025-04-20_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Avatar name=\"Allan Munger\" badge={{ status: 'busy' }} />\n```\n\n----------------------------------------\n\nTITLE: Updating React Select Dependencies in package.json\nDESCRIPTION: Updates the version of @fluentui/react-icons dependency to 2.0.224 in the package.json file for the React Select component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-select/library/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n\"dependencies\": {\n  \"@fluentui/react-icons\": \"2.0.224\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Icon using createSvgIcon in Fluent UI v0\nDESCRIPTION: Example of creating a custom icon using the createSvgIcon function in Fluent UI v0, which supports both filled and outline variants.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Icons.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport const MyIcon = createSvgIcon({\n  svg: ({ classes }) => (\n    <svg role=\"presentation\" focusable=\"false\" viewBox=\"2 2 16 16\" className={classes.svg}>\n      <g className={classes.outlinePart}>\n        <path d=\"...\" />\n      </g>\n      <g className={classes.filledPart}>\n        <path d=\"...\" />\n      </g>\n    </svg>\n  ),\n  displayName: 'MyIcon',\n});\n```\n\n----------------------------------------\n\nTITLE: Defining DetailsListBase React Component in TypeScript\nDESCRIPTION: Defines the DetailsListBase class extending React.Component. It implements the IDetailsList interface and includes lifecycle methods, focus handling, and rendering logic.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class DetailsListBase extends React_2.Component<IDetailsListProps, IDetailsListState> implements IDetailsList {\n    constructor(props: IDetailsListProps);\n    // (undocumented)\n    componentDidUpdate(prevProps: IDetailsListProps, prevState: IDetailsListState): void;\n    // (undocumented)\n    componentWillUnmount(): void;\n    // (undocumented)\n    static contextType: React_2.Context<WindowProviderProps>;\n    // (undocumented)\n    static defaultProps: {\n        layoutMode: DetailsListLayoutMode;\n        selectionMode: SelectionMode_2;\n        constrainMode: ConstrainMode;\n        checkboxVisibility: CheckboxVisibility;\n        isHeaderVisible: boolean;\n        compact: boolean;\n        useFastIcons: boolean;\n    };\n    // (undocumented)\n    focusIndex(index: number, forceIntoFirstElement?: boolean, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode): void;\n    // (undocumented)\n    forceUpdate(): void;\n    // (undocumented)\n    static getDerivedStateFromProps(nextProps: IDetailsListProps, previousState: IDetailsListState): IDetailsListState;\n    // (undocumented)\n    getStartItemIndexInView(): number;\n    // (undocumented)\n    protected _onRenderRow: (props: IDetailsRowProps, defaultRender?: IRenderFunction<IDetailsRowProps>) => JSX.Element;\n    // (undocumented)\n    render(): JSX.Element;\n    // (undocumented)\n    scrollToIndex(index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode): void;\n    // (undocumented)\n    updateColumn(column: IColumn, options: {\n        width?: number;\n        newColumnIndex?: number;\n    }): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing export * statements\nDESCRIPTION: This change removes the use of wildcard exports (`export *`) within the module.  This is typically done to improve clarity and maintainability of the code by explicitly specifying which members are exported from a module.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nchore: remove usage of \"export *\" ([PR #33384](https://github.com/microsoft/fluentui/pull/33384) by olfedias@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Defining Checkbox Types in TypeScript\nDESCRIPTION: Illustrates a pattern where 'CheckboxCommons' defines necessary attributes for 'CheckboxState', with 'CheckboxProps' using 'Partial' to make them optional. This reflects another pattern before proposed API changes in Fluent UI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/remove-commons.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CheckboxCommons = {\n  // These are required in state (made optional in props)\n  size: 'medium' | 'large';\n};\n\nexport type CheckboxProps =\n  // Things in CheckboxCommons are optional in props\n  Partial<CheckboxCommons> &\n    ComponentProps<CheckboxSlots> & {\n      // maybe some other props here\n    };\n\nexport type CheckboxState =\n  // Commons are required in state\n  CheckboxCommons &\n    ComponentState<CheckboxSlots> & {\n      // maybe some other state here\n    };\n```\n\n----------------------------------------\n\nTITLE: FluentUI Component Import Declarations - TypeScript\nDESCRIPTION: A comprehensive set of import declarations for FluentUI React components, including type definitions, class names, context values, props interfaces, and utility functions. The imports cover core UI components like tags, labels, links, lists, menus, and message bars.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/etc/react-components.api.md#2025-04-20_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { InteractionTagPrimary } from '@fluentui/react-tags';\nimport { interactionTagPrimaryClassNames } from '@fluentui/react-tags';\nimport { InteractionTagPrimaryContextValues } from '@fluentui/react-tags';\nimport { InteractionTagPrimaryProps } from '@fluentui/react-tags';\nimport { InteractionTagPrimarySlots } from '@fluentui/react-tags';\nimport { InteractionTagPrimaryState } from '@fluentui/react-tags';\nimport { InteractionTagProps } from '@fluentui/react-tags';\nimport { InteractionTagSecondary } from '@fluentui/react-tags';\nimport { interactionTagSecondaryClassNames } from '@fluentui/react-tags';\nimport { InteractionTagSecondaryProps } from '@fluentui/react-tags';\nimport { InteractionTagSecondarySlots } from '@fluentui/react-tags';\nimport { InteractionTagSecondaryState } from '@fluentui/react-tags';\nimport { InteractionTagSlots } from '@fluentui/react-tags';\nimport { InteractionTagState } from '@fluentui/react-tags';\nimport { isHTMLElement } from '@fluentui/react-utilities';\nimport { isTruncatableBreadcrumbContent } from '@fluentui/react-breadcrumb';\nimport { Label } from '@fluentui/react-label';\nimport { labelClassNames } from '@fluentui/react-label';\nimport { LabelProps } from '@fluentui/react-label';\nimport { LabelSlots } from '@fluentui/react-label';\nimport { LabelState } from '@fluentui/react-label';\nimport { LargeTitle } from '@fluentui/react-text';\nimport { largeTitleClassNames } from '@fluentui/react-text';\nimport { LineHeightTokens } from '@fluentui/react-theme';\nimport { Link } from '@fluentui/react-link';\nimport { linkClassNames } from '@fluentui/react-link';\nimport { LinkProps } from '@fluentui/react-link';\nimport { LinkSlots } from '@fluentui/react-link';\nimport { LinkState } from '@fluentui/react-link';\nimport { List } from '@fluentui/react-list';\nimport { Listbox } from '@fluentui/react-combobox';\nimport { listboxClassNames } from '@fluentui/react-combobox';\nimport { ListboxContextValue } from '@fluentui/react-combobox';\nimport { ListboxContextValues } from '@fluentui/react-combobox';\nimport { ListboxProps } from '@fluentui/react-combobox';\nimport { ListboxProvider } from '@fluentui/react-combobox';\nimport { ListboxSlots } from '@fluentui/react-combobox';\nimport { ListboxState } from '@fluentui/react-combobox';\nimport { listClassNames } from '@fluentui/react-list';\nimport { ListItem } from '@fluentui/react-list';\nimport { listItemClassNames } from '@fluentui/react-list';\nimport { ListItemProps } from '@fluentui/react-list';\nimport { ListItemSlots } from '@fluentui/react-list';\nimport { ListItemState } from '@fluentui/react-list';\nimport { ListProps } from '@fluentui/react-list';\nimport { ListSlots } from '@fluentui/react-list';\nimport { ListState } from '@fluentui/react-list';\nimport { makeResetStyles } from '@griffel/react';\nimport { makeStaticStyles } from '@griffel/react';\nimport { makeStyles } from '@griffel/react';\nimport { Menu } from '@fluentui/react-menu';\nimport { MenuButton } from '@fluentui/react-button';\nimport { menuButtonClassNames } from '@fluentui/react-button';\nimport { MenuButtonProps } from '@fluentui/react-button';\nimport { MenuButtonSlots } from '@fluentui/react-button';\nimport { MenuButtonState } from '@fluentui/react-button';\nimport { MenuCheckedValueChangeData } from '@fluentui/react-menu';\nimport { MenuCheckedValueChangeEvent } from '@fluentui/react-menu';\nimport { MenuContextValue } from '@fluentui/react-menu';\nimport { MenuContextValues } from '@fluentui/react-menu';\nimport { MenuDivider } from '@fluentui/react-menu';\nimport { menuDividerClassNames } from '@fluentui/react-menu';\nimport { MenuDividerProps } from '@fluentui/react-menu';\nimport { MenuDividerSlots } from '@fluentui/react-menu';\nimport { MenuDividerState } from '@fluentui/react-menu';\nimport { MenuGroup } from '@fluentui/react-menu';\nimport { menuGroupClassNames } from '@fluentui/react-menu';\nimport { MenuGroupContextProvider } from '@fluentui/react-menu';\nimport { MenuGroupContextValue } from '@fluentui/react-menu';\nimport { MenuGroupContextValues } from '@fluentui/react-menu';\nimport { MenuGroupHeader } from '@fluentui/react-menu';\nimport { menuGroupHeaderClassNames } from '@fluentui/react-menu';\nimport { MenuGroupHeaderProps } from '@fluentui/react-menu';\nimport { MenuGroupHeaderSlots } from '@fluentui/react-menu';\nimport { MenuGroupHeaderState } from '@fluentui/react-menu';\nimport { MenuGroupProps } from '@fluentui/react-menu';\nimport { MenuGroupSlots } from '@fluentui/react-menu';\nimport { MenuGroupState } from '@fluentui/react-menu';\nimport { MenuItem } from '@fluentui/react-menu';\nimport { MenuItemCheckbox } from '@fluentui/react-menu';\nimport { menuItemCheckboxClassNames } from '@fluentui/react-menu';\nimport { MenuItemCheckboxProps } from '@fluentui/react-menu';\nimport { MenuItemCheckboxState } from '@fluentui/react-menu';\nimport { menuItemClassNames } from '@fluentui/react-menu';\nimport { MenuItemLink } from '@fluentui/react-menu';\nimport { menuItemLinkClassNames } from '@fluentui/react-menu';\nimport { MenuItemLinkProps } from '@fluentui/react-menu';\nimport { MenuItemLinkSlots } from '@fluentui/react-menu';\nimport { MenuItemLinkState } from '@fluentui/react-menu';\nimport { MenuItemProps } from '@fluentui/react-menu';\nimport { MenuItemRadio } from '@fluentui/react-menu';\nimport { menuItemRadioClassNames } from '@fluentui/react-menu';\nimport { MenuItemRadioProps } from '@fluentui/react-menu';\nimport { MenuItemRadioState } from '@fluentui/react-menu';\nimport { MenuItemSelectableProps } from '@fluentui/react-menu';\nimport { MenuItemSelectableState } from '@fluentui/react-menu';\nimport { MenuItemSlots } from '@fluentui/react-menu';\nimport { MenuItemState } from '@fluentui/react-menu';\nimport { MenuItemSwitch } from '@fluentui/react-menu';\nimport { menuItemSwitchClassNames } from '@fluentui/react-menu';\nimport { MenuList } from '@fluentui/react-menu';\nimport { menuListClassNames } from '@fluentui/react-menu';\nimport { MenuListContextValue } from '@fluentui/react-menu';\nimport { MenuListContextValues } from '@fluentui/react-menu';\nimport { MenuListProps } from '@fluentui/react-menu';\nimport { MenuListProvider } from '@fluentui/react-menu';\nimport { MenuListSlots } from '@fluentui/react-menu';\nimport { MenuListState } from '@fluentui/react-menu';\nimport { MenuOpenChangeData } from '@fluentui/react-menu';\nimport { MenuOpenEvent } from '@fluentui/react-menu';\nimport { MenuOpenEvents } from '@fluentui/react-menu';\nimport { MenuPopover } from '@fluentui/react-menu';\nimport { menuPopoverClassNames } from '@fluentui/react-menu';\nimport { MenuPopoverProps } from '@fluentui/react-menu';\nimport { MenuPopoverSlots } from '@fluentui/react-menu';\nimport { MenuPopoverState } from '@fluentui/react-menu';\nimport { MenuProps } from '@fluentui/react-menu';\nimport { MenuProvider } from '@fluentui/react-menu';\nimport { MenuSlots } from '@fluentui/react-menu';\nimport { MenuSplitGroup } from '@fluentui/react-menu';\nimport { menuSplitGroupClassNames } from '@fluentui/react-menu';\nimport { MenuSplitGroupProps } from '@fluentui/react-menu';\nimport { MenuSplitGroupSlots } from '@fluentui/react-menu';\nimport { MenuSplitGroupState } from '@fluentui/react-menu';\nimport { MenuState } from '@fluentui/react-menu';\nimport { MenuTrigger } from '@fluentui/react-menu';\nimport { MenuTriggerChildProps } from '@fluentui/react-menu';\nimport { MenuTriggerContextProvider } from '@fluentui/react-menu';\nimport { MenuTriggerProps } from '@fluentui/react-menu';\nimport { MenuTriggerState } from '@fluentui/react-menu';\nimport { mergeCallbacks } from '@fluentui/react-utilities';\nimport { mergeClasses } from '@griffel/react';\nimport { MessageBar } from '@fluentui/react-message-bar';\nimport { MessageBarActions } from '@fluentui/react-message-bar';\nimport { messageBarActionsClassNames } from '@fluentui/react-message-bar';\nimport { MessageBarActionsContextValues } from '@fluentui/react-message-bar';\nimport { MessageBarActionsProps } from '@fluentui/react-message-bar';\nimport { MessageBarActionsSlots } from '@fluentui/react-message-bar';\nimport { MessageBarActionsState } from '@fluentui/react-message-bar';\nimport { MessageBarBody } from '@fluentui/react-message-bar';\nimport { messageBarBodyClassNames } from '@fluentui/react-message-bar';\nimport { MessageBarBodyProps } from '@fluentui/react-message-bar';\nimport { MessageBarBodySlots } from '@fluentui/react-message-bar';\nimport { MessageBarBodyState } from '@fluentui/react-message-bar';\nimport { messageBarClassNames } from '@fluentui/react-message-bar';\nimport { MessageBarContextProvider } from '@fluentui/react-message-bar';\nimport { MessageBarContextValue } from '@fluentui/react-message-bar';\nimport { MessageBarContextValues } from '@fluentui/react-message-bar';\nimport { MessageBarGroup } from '@fluentui/react-message-bar';\nimport { messageBarGroupClassNames } from '@fluentui/react-message-bar';\nimport { MessageBarGroupProps } from '@fluentui/react-message-bar';\nimport { MessageBarGroupSlots } from '@fluentui/react-message-bar';\nimport { MessageBarGroupState } from '@fluentui/react-message-bar';\nimport { MessageBarIntent } from '@fluentui/react-message-bar';\nimport { MessageBarProps } from '@fluentui/react-message-bar';\nimport { MessageBarSlots } from '@fluentui/react-message-bar';\nimport { MessageBarState } from '@fluentui/react-message-bar';\nimport { MessageBarTitle } from '@fluentui/react-message-bar';\nimport { messageBarTitleClassNames } from '@fluentui/react-message-bar';\nimport { MessageBarTitleProps } from '@fluentui/react-message-bar';\nimport { MessageBarTitleSlots } from '@fluentui/react-message-bar';\nimport { MessageBarTitleState } from '@fluentui/react-message-bar';\nimport { MessageBarTransitionContextValue } from '@fluentui/react-message-bar';\nimport { MotionComponentProps } from '@fluentui/react-motion';\nimport { MotionImperativeRef } from '@fluentui/react-motion';\nimport { motionTokens } from '@fluentui/react-motion';\nimport { NavButtonRenderFunction } from '@fluentui/react-carousel';\n```\n\n----------------------------------------\n\nTITLE: Defining OverflowButtonType Enumeration in TypeScript\nDESCRIPTION: Enumeration defining types of overflow buttons for OverflowSet components, including none, descriptive, more, and downArrow options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_237\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport enum OverflowButtonType {\n    descriptive = 1,\n    downArrow = 3,\n    more = 2,\n    none = 0\n}\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-utilities version\nDESCRIPTION: This patch updates the version of the `@fluentui/react-utilities` dependency.  Bumping this package ensures that the `@fluentui/react-badge` component uses the latest utility functions and bug fixes available in the utilities package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nBump @fluentui/react-utilities to v9.18.12 ([PR #31998](https://github.com/microsoft/fluentui/pull/31998) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Styled Button Component in React\nDESCRIPTION: Creates a Button component that uses both default and custom styling hooks, demonstrating how to integrate custom styles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/custom-styling.md#2025-04-20_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Button: ForwardRefComponent<ButtonProps> = React.forwardRef((props, ref) => {\n  const state = useButton_unstable(props, ref);\n\n  useButtonStyles_unstable(state);\n\n  const componentStyles = useComponentStyles();\n  componentStyles.useCustomButtonStyles_unstable(state);\n\n  return renderButton_unstable(state);\n}) as ForwardRefComponent<ButtonProps>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories for react-overflow\nDESCRIPTION: This JavaScript snippet demonstrates how to configure Storybook to include stories from the @fluentui/react-overflow package. It specifies the paths to both MDX and TypeScript/TSX story files within the package's stories directory.  This configuration allows Storybook to discover and display the stories for the overflow component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-overflow/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  stories: ['../packages/react-components/react-overflow/stories/src/**/*.stories.mdx', '../packages/react-components/react-overflow/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Limit Bar Width\nDESCRIPTION: Ensures that the bar width does not exceed the maximum allowed value (24px) and defaults to 16px if no bar width is provided. This value allows users to configure their bar width up to a point. This is done using `Math.min` to compare the user's value and the maximum value.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/docs/implementing-2-to-1-spacing.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlet barWidth = Math.min(this.props.barWidth || 16, 24);\n```\n\n----------------------------------------\n\nTITLE: Defining TablistOrientation Constants in TypeScript\nDESCRIPTION: Constants defining possible orientation values for the Tablist component, allowing for horizontal or vertical tab layouts.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_64\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport const TablistOrientation: {\n    readonly horizontal: \"horizontal\"; /**\n    * The appearance of the component\n    * @public\n    */\n    readonly vertical: \"vertical\";\n};\n\n// @public\nexport type TablistOrientation = ValuesOf<typeof TablistOrientation>;\n```\n\n----------------------------------------\n\nTITLE: Configuring DatePicker without Text Field in Swift\nDESCRIPTION: Shows how to create a DatePicker without a text field input. This configuration displays only the calendar picker interface for date selection, removing the text input option.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/DatePickerPage/docs/mac/DatePickerUsage.md#2025-04-20_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\n// No text field\nlet controller = DatePickerController(date: nil, calendar: nil, style: .date)\ncontroller.hasTextField = false\n```\n\n----------------------------------------\n\nTITLE: Migrating Basic Header Component to Text Component in React\nDESCRIPTION: Shows how to replace the basic Header component from FluentUI v0 with the Text component in FluentUI v9, using the 'as' property to specify heading level.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Header.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Header } from '@fluentui/react-northstar';\nconst Component = () => <Header content=\"Here is Header 1\" />; // default `as` prop is `h1`\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from '@fluentui/react-components';\nconst Component = () => <Text as=\"h1\">Here is Header 1</Text>;\n```\n\n----------------------------------------\n\nTITLE: Installing @fluentui/react-bindings with NPM\nDESCRIPTION: This command installs the `@fluentui/react-bindings` package as a dependency in an NPM project. It uses the `npm install` command with the `--save` flag to add the package to the project's `package.json` file.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/react-bindings/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"npm install --save @fluentui/react-bindings\"\n```\n\n----------------------------------------\n\nTITLE: Setting Shrink for Stack.Item using make-styles\nDESCRIPTION: This snippet shows how to set the shrink property for a Stack.Item component using the make-styles approach.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Flex/Flex.StackItem.stories.mdx#2025-04-20_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nmakeStyles({\n  root: {\n    flexShrink: 1,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Building and Packing Codemods Package\nDESCRIPTION: This snippet illustrates the process of building the codemods and creating a tarball for testing. The npm pack command creates a packaged version, which can be moved and tested on different packages. Run these commands from the root of the codemods package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/codemods/README.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn build\nnpm pack\n```\n\n----------------------------------------\n\nTITLE: Animation Direction Enum Definition\nDESCRIPTION: Enum defining animation directions for calendar components, allowing for horizontal or vertical animations during date navigation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-calendar-compat/library/etc/react-calendar-compat.api.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport enum AnimationDirection {\n    Horizontal = 0,\n    Vertical = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Link Element in Base Web Design\nDESCRIPTION: Demonstrates an anchor tag Link with specific class attributes in Base Web Design. Requires Base Web CSS classes and correctly assigned href attributes. Inputs include href URL. Outputs an anchor tag styled accordingly.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Link.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a data-baseweb=\\\"link\\\" href=\\\"https://baseweb.design\\\" class=\\\"k5 ah eq bk er es bb bc tf tg th\\\"> Link to Base Web </a>\n```\n\n----------------------------------------\n\nTITLE: Defining IDragDropContext Interface in TypeScript\nDESCRIPTION: Defines the IDragDropContext interface with properties for drag and drop operations including data, index, and an optional isGroup flag.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_106\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface IDragDropContext {\n    data: any;\n    index: number;\n    isGroup?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Persona with Avatar and PresenceBadge - React\nDESCRIPTION: This code demonstrates how to create a Persona component that combines an Avatar with a PresenceBadge, showcasing multiple user attributes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-persona/library/docs/Spec.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Persona\n  name=\"Kevin Sturgis\"\n  secondaryText=\"Software Engineer\"\n  tertiaryText=\"Offline\"\n  presence={{ status: 'offline', outOfOffice: true }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Textarea Implementation in Fluent UI v9\nDESCRIPTION: Equivalent implementation of the Textarea component in Fluent UI v9, using the new API and hooks for ID generation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Textarea.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { Label, Textarea } from '@fluentui/react-components';\nimport { useId } from '@fluentui/react-utilities';\n\nconst TextareaV9BasicExample = () => {\n  const textareaId = useId('textarea');\n  return (\n    <>\n      <Label htmlFor={textareaId}>Enter review</Label>\n      <Textarea id={textareaId} placeholder=\"Type here...\" />\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining MotionDurations Namespace in TypeScript for FluentUI\nDESCRIPTION: Namespace containing standard animation duration values for consistent timing across FluentUI components. It provides four predefined duration options from 100ms to 400ms.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/theme/etc/theme.api.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport namespace MotionDurations {\n    const // (undocumented)\n    duration1 = \"100ms\";\n    const // (undocumented)\n    duration2 = \"200ms\";\n    const // (undocumented)\n    duration3 = \"300ms\";\n    const // (undocumented)\n    duration4 = \"400ms\";\n}\n```\n\n----------------------------------------\n\nTITLE: DOM Output for Menu Divider in Fluent UI\nDESCRIPTION: Shows the DOM output for a menu divider in both Fluent UI v7 and v0, demonstrating the differences in implementation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/library/docs/Spec.md#2025-04-20_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- v7 divider item  -->\n<li role=\"separator\" aria-hidden=\"true\"></li>\n\n<!-- v0 divider item  -->\n<li role=\"presentation\" class=\"menu__divider\"></li>\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme Values in React Portals\nDESCRIPTION: Shows how to apply theme CSS variables from a ThemeProvider to content rendered inside a React Portal, ensuring consistent styling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-portal/library/docs/Spec.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst useStyles = makeStyles({\n    portalContent: theme => {...}\n})\n\n\nconst styles = useStyles();\n\n<ThemeProvider>\n    <Portal>\n      <div className={styles.portalContent}>\n        Can use all theme CSS variables from the parent ThemeProvider\n      </div>\n    </Portal>\n</ThemeProvider>\n```\n\n----------------------------------------\n\nTITLE: Defining Tooltip Component Interfaces in TypeScript for FluentUI\nDESCRIPTION: Defines interfaces for Tooltip and TooltipHost components including props, state, and styles. These components provide contextual information in a popup when users hover over or focus on elements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_225\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface ITooltip {\n}\n\n// @public (undocumented)\nexport interface ITooltipHost {\n    dismiss: () => void;\n    show: () => void;\n}\n\n// @public\nexport interface ITooltipHostProps extends Omit<React_2.HTMLAttributes<HTMLDivElement | TooltipHostBase>, 'content'> {\n    calloutProps?: ICalloutProps;\n    className?: string;\n    closeDelay?: number;\n    componentRef?: IRefObject<ITooltipHost>;\n    content?: string | JSX.Element | JSX.Element[];\n    delay?: TooltipDelay;\n    directionalHint?: DirectionalHint;\n    directionalHintForRTL?: DirectionalHint;\n    hostClassName?: string;\n    id?: string;\n    onTooltipToggle?(isTooltipVisible: boolean): void;\n    overflowMode?: TooltipOverflowMode;\n    // @deprecated\n    setAriaDescribedBy?: boolean;\n    styles?: IStyleFunctionOrObject<ITooltipHostStyleProps, ITooltipHostStyles>;\n    theme?: ITheme;\n    tooltipProps?: ITooltipProps;\n}\n\n// @public (undocumented)\nexport interface ITooltipHostState {\n    // @deprecated (undocumented)\n    isAriaPlaceholderRendered: boolean;\n    // (undocumented)\n    isTooltipVisible: boolean;\n}\n\n// @public (undocumented)\nexport interface ITooltipHostStyleProps {\n    // (undocumented)\n    className?: string;\n    // (undocumented)\n    theme: ITheme;\n}\n\n// @public (undocumented)\nexport interface ITooltipHostStyles {\n    root: IStyle;\n}\n\n// @public (undocumented)\nexport interface ITooltipProps extends Omit<React_2.HTMLAttributes<HTMLDivElement | TooltipBase>, 'content'> {\n    calloutProps?: ICalloutProps;\n    componentRef?: IRefObject<ITooltip>;\n    content?: string | JSX.Element | JSX.Element[];\n    delay?: TooltipDelay;\n    directionalHint?: DirectionalHint;\n    directionalHintForRTL?: DirectionalHint;\n    maxWidth?: string | null;\n    onRenderContent?: IRenderFunction<ITooltipProps>;\n    styles?: IStyleFunctionOrObject<ITooltipStyleProps, ITooltipStyles>;\n    targetElement?: HTMLElement;\n    theme?: ITheme;\n}\n\n// @public (undocumented)\nexport interface ITooltipStyleProps {\n    beakWidth?: number;\n    // (undocumented)\n    className?: string;\n    // @deprecated\n    delay?: TooltipDelay;\n    gapSpace?: number;\n    maxWidth?: string;\n    // (undocumented)\n    theme: ITheme;\n}\n\n// @public (undocumented)\nexport interface ITooltipStyles {\n    content: IStyle;\n    root: IStyle;\n    subText: IStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Fit to Contain in Fluent UI Image Component\nDESCRIPTION: This snippet demonstrates the usage of the fit prop with the value of contain as a replacement for the imageFit property in the v9 Fluent UI Image component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-image/library/docs/MIGRATION.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Image src=\"example.jpg\" fit=\"contain\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for FluentUI React List Stories\nDESCRIPTION: Example configuration for including FluentUI react-list stories in Storybook. The configuration specifies the story file patterns to be included in the Storybook build.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-list/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-list/stories/src/**/*.stories.mdx', '../packages/react-components/react-list/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Rendered Push and Pull Example with Fluent UI Grid\nDESCRIPTION: A rendered example demonstrating how push and pull utilities affect the visual order of columns. The first column in code is pushed to the right while the second column is pulled to the left, reversing their visual positions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Styles/LayoutPage/docs/web/LayoutGridImplementation.md#2025-04-20_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"ms-Grid\">\n  <div class=\"ms-Grid-row\">\n    <div class=\"ms-Grid-col ms-sm4 ms-smPush8\">\n      <div class=\"LayoutPage-demoBlock\">First in code</div>\n    </div>\n    <div class=\"ms-Grid-col ms-sm8 ms-smPull4\">\n      <div class=\"LayoutPage-demoBlock\">Second in code</div>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Calculate Total Available Width\nDESCRIPTION: Calculates the total width available for rendering the bars by subtracting the left and right margins, along with the minimum domain margins, from the container width.  This result is later used to determine the scale and positioning of the bars.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/docs/implementing-2-to-1-spacing.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst totalWidth = containerWidth - (this.margins.left! + MIN_DOMAIN_MARGIN) - (this.margins.right! + MIN_DOMAIN_MARGIN);\n```\n\n----------------------------------------\n\nTITLE: Using CSS Gap for Stack Spacing\nDESCRIPTION: This snippet demonstrates using the CSS gap property for spacing in a Stack layout.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Flex/Flex.Stack.stories.mdx#2025-04-20_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nmakeStyles({\n  root: {\n    display: 'flex',\n    flexDirection: 'row',\n    gap: '10px',\n  },\n})\n```\n\nLANGUAGE: css\nCODE:\n```\n.flex {\n  display: flex;\n  flex-direction: row;\n  gap: 10px;\n}\n```\n\n----------------------------------------\n\nTITLE: Non-Semantic Table HTML Markup\nDESCRIPTION: Equivalent HTML representation of a table without semantic elements, using ARIA roles to provide accessibility information\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-table/library/docs/Spec.md#2025-04-20_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<div role=\"table\">\\n  <div role=\"rowgroup\">\\n    <div role=\"row\">\\n      <div role=\"columnheader\"><button>Header</button></div>\\n    </div>\\n  </div>\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Internal Theme Styling with FluentProvider in TypeScript\nDESCRIPTION: The 'useFluentProviderThemeStyleTag' function generates a style tag based on the theme and other options. It outputs an object containing style tag ID and CSS rule, essential for server-side rendering and dynamic styling in the Fluent UI framework.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-provider/library/etc/react-provider.api.md#2025-04-20_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const useFluentProviderThemeStyleTag: (options: Pick<FluentProviderState, 'theme' | 'targetDocument'> & { rendererAttributes: Record<string, string>; }) => { styleTagId: string; rule: string; };\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react-positioning to version v9.0.0-rc.6\nDESCRIPTION: This snippet outlines the update of the @fluentui/react-positioning component to version v9.0.0-rc.6, contributing to better positioning controls in the Fluent UI framework.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/vr-tests-react-components/CHANGELOG.md#2025-04-20_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react-positioning to v9.0.0-rc.6 ([PR #21995](https://github.com/microsoft/fluentui/pull/21995) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Exporting Menu Split Group Component in TypeScript\nDESCRIPTION: Exports a forward-reference component type for a MenuSplitGroup, facilitating the passing of ref objects through menu split groups.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/library/etc/react-menu.api.md#2025-04-20_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const MenuSplitGroup: ForwardRefComponent<MenuSplitGroupProps>;\n```\n\n----------------------------------------\n\nTITLE: Controlled Tab Implementation - Fluent UI Web Component - HTML\nDESCRIPTION: This snippet provides an implementation where tabs can be controlled by the developer, allowing the active tab to be set via the `activeid` attribute for more explicit control over user interactions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/tabs/tabs.spec.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<fluent-tab-list activeid=\"tab-one\">\n  <fluent-tab id=\"tab-one\">One / Left</fluent-tab>\n  <fluent-tab id=\"tab-two\">Two / Middle</fluent-tab>\n  <fluent-tab id=\"tab-three\">Three / Right</fluent-tab>\n\n  <fluent-tab-panel>Panel One</fluent-tab-panel>\n  <fluent-tab-panel>Panel Two</fluent-tab-panel>\n  <fluent-tab-panel>Panel Three</fluent-tab-panel>\n</fluent-tab-list>\n```\n\n----------------------------------------\n\nTITLE: Patches Changelog Entry\nDESCRIPTION: Changelog entry listing patch updates for dependencies and minor fixes\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-teaching-popover/library/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Patches\n\n- chore: Update react-icons to 2.0.235 ([PR #31011](https://github.com/microsoft/fluentui/pull/31011) by ololubek@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: TextArea Component Props TypeScript Definition\nDESCRIPTION: TypeScript interface defining the props for the TextArea component, including appearance variants, resize options, size variants, and event handlers. It also defines the data structure passed to the onChange callback.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-textarea/library/docs/Spec.md#2025-04-20_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n/**\n * Textarea Props\n */\nexport type TextareaProps = Omit<\n  ComponentProps<Partial<TextareaSlots>, 'textarea'>,\n  'defaultValue' | 'onChange' | 'size' | 'value'\n> & {\n  /**\n   * Styling the Textarea should use.\n   *\n   * @default outline\n   */\n  appearance?: 'outline' | 'filledDarker' | 'filledLighter';\n\n  /**\n   * The default value of the Textarea.\n   */\n  defaultValue?: string;\n\n  /**\n   * Callback for when the user changes the value.\n   */\n  onChange?: (ev: React.ChangeEvent<HTMLTextAreaElement>, data: TextareaOnChangeData) => void;\n\n  /**\n   * Which direction the Textarea is allowed to be resized.\n   *\n   * @default none\n   */\n  resize?: 'none' | 'horizontal' | 'vertical' | 'both';\n\n  /**\n   * Size of the Textarea.\n   *\n   * @default medium\n   */\n  size?: 'small' | 'medium' | 'large';\n\n  /**\n   * The value of the Textarea.\n   */\n  value?: string;\n};\n\n/**\n * Data passed to the `onChange` callback when the textarea's value changes.\n */\ntype TextAreaOnChangeData = {\n  value: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Building and Testing for Pull Requests\nDESCRIPTION: Describes the verification steps before creating a pull request, including building specific component packages and conducting necessary tests. Outlines how to handle potential build errors due to outdated packages and the need to update snapshot tests if DOM changes occur.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/dev-workflow.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn nx run react-components:build\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn nx run <project-name>:test -u\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using File Type Icons in React with Fluent UI\nDESCRIPTION: This snippet demonstrates how to initialize file type icons and use them in React components. It shows how to specify icons by file extension, item type, size, and image format using the getFileTypeIconProps function.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Styles/FileTypeIconsPage/docs/web/FileTypeIconsImplementation.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Done by the app.\nimport { initializeFileTypeIcons } from '@fluentui/react-file-type-icons';\ninitializeFileTypeIcons(/* optional base url */);\n\n// Done in components\nimport { Icon } from '@fluentui/react';\nimport { getFileTypeIconProps, FileIconType } from '@fluentui/react-file-type-icons';\n\n<Icon {...getFileTypeIconProps({ extension: 'docx', size: 96, imageFileType: 'png' }) } />\n<Icon {...getFileTypeIconProps({ type: FileIconType.folder, size: 20, imageFileType: 'svg' }) } />\n```\n\n----------------------------------------\n\nTITLE: Defining Theme Color Slots in FluentUI\nDESCRIPTION: Enumerates various neutral and theme color slots used in FluentUI's theming system. Each slot is assigned a numerical value and includes commented mapping to base color slots and shades.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_32\n\nLANGUAGE: TypeScript\nCODE:\n```\n// (undocumented)\nneutralLighterAlt = 9,// BaseSlots.primaryColor, Shade[Shade.Shade4]);\n// (undocumented)\nneutralPrimary = 19,// BaseSlots.primaryColor, Shade[Shade.Shade5]);\n// (undocumented)\nneutralPrimaryAlt = 18,// BaseSlots.primaryColor, Shade[Shade.Shade6]);\n// (undocumented)\nneutralQuaternary = 13,// BaseSlots.primaryColor, Shade[Shade.Shade7]);\n// (undocumented)\nneutralQuaternaryAlt = 12,// BaseSlots.primaryColor, Shade[Shade.Shade8]);\n// (undocumented)\nneutralSecondary = 17,// BaseSlots.backgroundColor, Shade[Shade.Shade1]);\n// (undocumented)\nneutralSecondaryAlt = 16,// BaseSlots.backgroundColor, Shade[Shade.Shade2]);\n// (undocumented)\nneutralTertiary = 15,// BaseSlots.backgroundColor, Shade[Shade.Shade3]);\n// (undocumented)\nneutralTertiaryAlt = 14,// BaseSlots.backgroundColor, Shade[Shade.Shade4]);\n// (undocumented)\nthemeDark = 7,// BaseSlots.backgroundColor, Shade[Shade.Shade5]);\n// (undocumented)\nthemeDarkAlt = 6,// BaseSlots.backgroundColor, Shade[Shade.Shade6]); // bg6 or fg2\n// (undocumented)\nthemeDarker = 8,// BaseSlots.foregroundColor, Shade[Shade.Shade3]);\n// (undocumented)\nthemeLight = 3,// BaseSlots.foregroundColor, Shade[Shade.Shade4]);\n// (undocumented)\nthemeLighter = 2,// BaseSlots.foregroundColor, Shade[Shade.Shade5]);\n// (undocumented)\nthemeLighterAlt = 1,// BaseSlots.foregroundColor, Shade[Shade.Shade6]);\n// (undocumented)\nthemePrimary = 0,// BaseSlots.foregroundColor, Shade[Shade.Unshaded]);\n// (undocumented)\nthemeSecondary = 5,// BaseSlots.foregroundColor, Shade[Shade.Shade7]);\n// (undocumented)\nthemeTertiary = 4,// BaseSlots.foregroundColor, Shade[Shade.Shade8]);\n// (undocumented)\nwhite = 22\n```\n\n----------------------------------------\n\nTITLE: Defining IEventRecordsByName Interface in TypeScript\nDESCRIPTION: Defines an internal interface for organizing event records by name, using an index signature with event names as keys.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/utilities/etc/utilities.api.md#2025-04-20_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface IEventRecordsByName {\n    [eventName: string]: IEventRecordList;\n}\n```\n\n----------------------------------------\n\nTITLE: FluentUI Hook and Style Exports in TypeScript\nDESCRIPTION: Export declarations for FluentUI React hooks and styles, including components like TagPicker, TeachingPopover, Toast, Toolbar, Tree, and their associated styling hooks. Many exports are marked as unstable indicating they are subject to change.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/etc/react-components.api.md#2025-04-20_snippet_37\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport { useTagPickerOptionGroupStyles }\n\nexport { useTagPickerOptionStyles_unstable }\n\nexport { useTagStyles_unstable }\n\nexport { useTeachingPopover_unstable }\n\nexport { useTeachingPopoverBody_unstable }\n\nexport { useTeachingPopoverBodyStyles_unstable }\n\nexport { useTeachingPopoverCarousel_unstable }\n\nexport { useTeachingPopoverCarouselCard_unstable }\n\nexport { useTeachingPopoverCarouselCardStyles_unstable }\n\nexport { useTeachingPopoverCarouselContextValues_unstable }\n\nexport { useTeachingPopoverCarouselFooter_unstable }\n\nexport { useTeachingPopoverCarouselFooterStyles_unstable }\n\nexport { useTeachingPopoverCarouselNav_unstable }\n\nexport { useTeachingPopoverCarouselNavButton_unstable }\n\nexport { useTeachingPopoverCarouselNavButtonStyles_unstable }\n\nexport { useTeachingPopoverCarouselNavStyles_unstable }\n\nexport { useTeachingPopoverCarouselPageCount_unstable }\n\nexport { useTeachingPopoverCarouselPageCountStyles_unstable }\n\nexport { useTeachingPopoverCarouselStyles_unstable }\n\nexport { useTeachingPopoverFooter_unstable }\n\nexport { useTeachingPopoverHeader_unstable }\n\nexport { useTeachingPopoverHeaderStyles_unstable }\n\nexport { useTeachingPopoverSurface_unstable }\n\nexport { useTeachingPopoverSurfaceStyles_unstable }\n\nexport { useTeachingPopoverTitle_unstable }\n\nexport { useTeachingPopoverTitleStyles_unstable }\n\nexport { useTeachingPopoverTrigger_unstable }\n\nexport { useText_unstable }\n\nexport { useTextarea_unstable }\n\nexport { useTextareaStyles_unstable }\n\nexport { useTextStyles_unstable }\n\nexport { useThemeClassName }\n\nexport { useTimeout }\n\nexport { useToast_unstable }\n\nexport { useToastBody_unstable }\n\nexport { useToastBodyStyles_unstable }\n\nexport { useToastController }\n\nexport { useToaster_unstable }\n\nexport { useToasterStyles_unstable }\n\nexport { useToastFooter_unstable }\n\nexport { useToastFooterStyles_unstable }\n\nexport { useToastStyles_unstable }\n\nexport { useToastTitle_unstable }\n\nexport { useToastTitleStyles_unstable }\n\nexport { useToastTrigger_unstable }\n\nexport { useToggleButton_unstable }\n\nexport { useToggleButtonStyles_unstable }\n\nexport { useToggleState }\n\nexport { useToolbar_unstable }\n\nexport { useToolbarButton_unstable }\n\nexport { useToolbarButtonStyles_unstable }\n\nexport { useToolbarDivider_unstable }\n\nexport { useToolbarDividerStyles_unstable }\n\nexport { useToolbarGroup_unstable }\n\nexport { useToolbarGroupStyles_unstable }\n\nexport { useToolbarRadioButton_unstable }\n\nexport { useToolbarRadioButtonStyles_unstable }\n\nexport { useToolbarStyles_unstable }\n\nexport { useToolbarToggleButton_unstable }\n\nexport { useToolbarToggleButtonStyles_unstable }\n\nexport { useTooltip_unstable }\n\nexport { useTooltipStyles_unstable }\n\nexport { useTooltipVisibility }\n\nexport { useTree_unstable }\n\nexport { useTreeContext_unstable }\n\nexport { useTreeContextValues_unstable }\n\nexport { useTreeItem_unstable }\n\nexport { useTreeItemContext_unstable }\n\nexport { useTreeItemContextValues_unstable }\n\nexport { useTreeItemLayout_unstable }\n\nexport { useTreeItemLayoutStyles_unstable }\n\nexport { useTreeItemPersonaLayout_unstable }\n\nexport { useTreeItemPersonaLayoutStyles_unstable }\n\nexport { useTreeItemStyles_unstable }\n\nexport { useTreeStyles_unstable }\n\nexport { useUncontrolledFocus }\n\nexport { VerticalSpacingTokens }\n\nexport { webDarkTheme }\n\nexport { webLightTheme }\n```\n\n----------------------------------------\n\nTITLE: Migrating Tooltip Content with Variables\nDESCRIPTION: Demonstrates how to migrate tooltip content with variables to use the makeStyles API in v9.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Tooltip.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: js\nCODE:\n```\ncontent = { content: 'hi', variables: { someVariable: true } };\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// in COMPONENT_NAME.tsx\nimport { Tooltip } from '@fluentui/react-northstar';\n\nexport const Component = props => (\n  <Tooltip\n    content={{\n      content: props.content,\n      variables: { isCustomTooltip: true },\n    }}\n    trigger={props.trigger}\n  />\n);\n\n// in tooltip-content-styles.ts\nexport const tooltipContentStyles = {\n  root: ({ variables: { isCustomTooltip } }) => ({\n    ...(isCustomTooltip && {\n      backgroundColor: colorSchemeBrand.background,\n    }),\n  }),\n};\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// in COMPONENT_NAME.tsx\nimport { Tooltip } from '@fluentui/react-components';\nimport { useStyles } from './COMPONENT_NAME.styles.ts';\n\nexport const Component = () => {\n  const classes = useStyles();\n  return (\n    <Tooltip\n      content={{\n        children: props.content,\n        className: classes.customTooltip,\n      }}\n    >\n      {props.trigger}\n    </Tooltip>\n  );\n};\n\n// in COMPONENT_NAME.styles.ts\nimport { makeStyles, tokens } from '@fluentui/react-components';\n\nexport const useStyles = makeStyles({\n  customTooltip: {\n    backgroundColor: tokens.colorBrandBackground,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for FluentUI React Shared Contexts Stories\nDESCRIPTION: This code snippet shows how to configure the Storybook module to include stories from the react-shared-contexts package. It specifies the file paths and patterns for the stories to be included.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-shared-contexts/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-shared-contexts/stories/src/**/*.stories.mdx', '../packages/react-components/react-shared-contexts/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: TagPickerList Class Names\nDESCRIPTION: Defines the class names for the TagPickerList component's slots, used for styling the component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport const tagPickerListClassNames: SlotClassNames<TagPickerListSlots>;\"\n```\n\n----------------------------------------\n\nTITLE: Display Theme Toggle with Button Variants in JSX\nDESCRIPTION: A theme toggle component that displays different button styles (primary filled, outlined, borderless) in both light and dark modes using FluentUI's macOS implementation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/ButtonPage/docs/mac/ButtonOverview.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<DisplayToggle onText=\"Dark\" offText=\"Light\" label=\"Theme Switcher\">\n### Primary filled\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/macos/Button/button_primaryfilled_light.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/macos/Button/button_primaryfilled_dark.png?text=DarkMode\" />\n\n### Primary outlined\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/macos/Button/button_primaryoutlined_light.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/macos/Button/button_primaryoutlined_dark.png?text=DarkMode\" />\n\n### Borderless\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/macos/Button/button_primaryborderless_light.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/macos/Button/button_primaryborderless_dark.png?text=DarkMode\" />\n\n</DisplayToggle>\n```\n\n----------------------------------------\n\nTITLE: Package Documentation Comment TypeScript\nDESCRIPTION: Empty TypeScript file indicator showing no package documentation comment exists for this package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-storybook-addon-export-to-sandbox/etc/react-storybook-addon-export-to-sandbox.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// (No @packageDocumentation comment for this package)\n```\n\n----------------------------------------\n\nTITLE: Changelog Version Entry 9.0.0\nDESCRIPTION: Changelog entry documenting the stable release of version 9.0.0 of @fluentui/react-charts.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charts/library/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.0.0]\n\nWed, 26 Mar 2025 15:52:37 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-charts-preview_v0.2.2..@fluentui/react-charts_v9.0.0)\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.94.1\nDESCRIPTION: This entry records the upgrade of the @fluentui/react package to version 8.94.1, pivotal for maintaining library updates.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/azure-themes/CHANGELOG.md#2025-04-20_snippet_26\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.94.1 ([PR #24372](https://github.com/microsoft/fluentui/pull/24372) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Import React\nDESCRIPTION: Imports the React library as React_2 to avoid naming conflicts.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-portal-compat/etc/react-portal-compat.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React_2 from 'react';\n```\n\n----------------------------------------\n\nTITLE: Defining ITextFieldStyleProps Type in TypeScript\nDESCRIPTION: Specifies the ITextFieldStyleProps type with required and optional properties for styling text fields.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_218\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport type ITextFieldStyleProps = Required<Pick<ITextFieldProps, 'theme'>> & Pick<ITextFieldProps, 'className' | 'disabled' | 'inputClassName' | 'required' | 'multiline' | 'borderless' | 'resizable' | 'underlined' | 'autoAdjustHeight'> & {\n    hasErrorMessage?: boolean;\n    hasIcon?: boolean;\n    hasLabel?: boolean;\n    focused?: boolean;\n    hasRevealButton?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Current v9 Component Props Usage\nDESCRIPTION: Examples of how positioning props are currently used in v9 components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/exposing-popper-options.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Tooltip position=\"bottom\" align=\"center\" />\n<Popover position=\"bottom\" align=\"center\" />\n<Menu position=\"bottom\" align=\"center\" />\n```\n\n----------------------------------------\n\nTITLE: Migrating Popup Component from Fluent UI v0 to v9 in TypeScript\nDESCRIPTION: Demonstrates how to migrate a basic Popup component from @fluentui/react-northstar to a Popover component in @fluentui/react-components. Shows changes in import statements, component structure, and default prop differences.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Popup.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Popup, Button } from '@fluentui/react-northstar';\nconst Component = () => <Popup trigger={<Button>trigger</Button>} content=\"content\" />;\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Popover, PopoverTrigger, PopoverSurface, Button } from '@fluentui/react-components';\nconst Component = () => (\n  // v0 Popup has default position/align above/start, while v9 has default above/center. Therefore adding `positioning` prop here\n  // v0 Popup no arrow by default, while v9 has. Therefore adding `noArrow` prop here\n  <Popover positioning={'above-start'} noArrow>\n    <PopoverTrigger>\n      <Button>trigger</Button>\n    </PopoverTrigger>\n    <PopoverSurface>content</PopoverSurface>\n  </Popover>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for React Rating Component Stories\nDESCRIPTION: Code snippet showing how to configure Storybook to include stories from the @fluentui/react-rating package by specifying the appropriate glob patterns in the Storybook configuration.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-rating/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-rating/stories/src/**/*.stories.mdx', '../packages/react-components/react-rating/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SwitchLabelPosition Constants in TypeScript\nDESCRIPTION: Constants defining possible label positions for the Switch component, allowing labels to be placed above, before, or after the switch element.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_60\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport const SwitchLabelPosition: {\n    readonly above: \"above\";\n    readonly after: \"after\";\n    readonly before: \"before\";\n};\n\n// @public\nexport type SwitchLabelPosition = ValuesOf<typeof SwitchLabelPosition>;\n```\n\n----------------------------------------\n\nTITLE: Importing Select and Selection Types\nDESCRIPTION: This snippet imports the Select component along with several types and utilities related to selection handling from the '@fluentui/react-select' and '@fluentui/react-menu' packages. It facilitates the creation and management of selection dropdowns in UI components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/etc/react-components.api.md#2025-04-20_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Select } from '@fluentui/react-select';\nimport { SelectableHandler } from '@fluentui/react-menu';\nimport { selectClassNames } from '@fluentui/react-select';\nimport { SelectionEvents } from '@fluentui/react-combobox';\nimport { SelectionHookParams } from '@fluentui/react-utilities';\nimport { SelectionItemId } from '@fluentui/react-utilities';\nimport { SelectionMethods } from '@fluentui/react-utilities';\nimport { SelectionMode as SelectionMode_2 } from '@fluentui/react-utilities';\nimport { SelectOnChangeData } from '@fluentui/react-select';\nimport { SelectProps } from '@fluentui/react-select';\nimport { SelectSlots } from '@fluentui/react-select';\nimport { SelectState } from '@fluentui/react-select';\n```\n\n----------------------------------------\n\nTITLE: Defining ShimmerElementsDefaultHeights Constants\nDESCRIPTION: Default height values in pixels for various types of shimmer elements used in loading state visualizations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_259\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport enum ShimmerElementsDefaultHeights {\n    circle = 24,\n    gap = 16,\n    line = 16\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Namespaced Styles with Conditional Logic in FluentUI\nDESCRIPTION: Demonstrates migration of namespaced styles with conditional logic using variables to v9 using makeStyles and mergeClasses.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Toolbar.stories.mdx#2025-04-20_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// Before:\n// in COMPONENT_NAME.tsx\nimport { Toolbar, useUIProviderContext } from '@fluentui/react-components';\n\nexport const Component = props => {\n  const { vars } = useUIProviderContext();\n  const { isLive } = props;\n  return <Toolbar items={['1']} variables={{ isLive: true }} />;\n};\n\n// in toolbar-styles.ts\nexport default {\n  root: ({ variables: { isLive } }) => ({\n    ...(isLive && {\n      height: '100%',\n      alignItems: 'center',\n      color: isLive ? colorSchemeSilver.foreground1 : 'inherit',\n    }),\n  }),\n};\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// After:\n// in COMPONENT_NAME.tsx\nimport { useStyles } from './COMPONENT_NAME.styles.ts';\nimport { Toolbar, Button, mergeClasses } from '@fluentui/react-components';\n\nexport const Component = props => {\n  const classes = useStyles();\n  const { isLive } = props;\n  return (\n    <Toolbar className={mergeClasses(classes.tabItemToolbar, isLive && classes.liveTabItemToolbar)}>\n      <ToolbarButton>Italic</ToolbarButton>\n    </Toolbar>\n  );\n};\n\n// in COMPONENT_NAME.styles.ts\nimport { makeStyles, shorthands, tokens } from '@fluentui/react-components';\n\nexport const useStyles = makeStyles({\n  tabItemToolbar: {\n    height: '100%',\n    display: 'inline-flex',\n    alignItems: 'center',\n    color: 'inherit',\n  },\n  liveTabItemToolbar: {\n    color: tokens.colorPaletteSilverForeground1,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing DisplayToggle with Theme Switching for Tooltips in FluentUI React\nDESCRIPTION: A React JSX component that displays tooltip examples with a theme switcher toggle between Dark and Light modes. It showcases both one-line and two-line tooltip implementations with corresponding images for each theme.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/TooltipPage/docs/ios/TooltipOverview.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<DisplayToggle onText=\"Dark\" offText=\"Light\" label=\"Theme Switcher\">\n### One line\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_tooltip_01_oneline_light.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_tooltip_01_oneline_dark.png?text=DarkMode\" />\n\n### Two line\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_tooltip_02_twoline_light.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_tooltip_02_twoline_dark.png?text=DarkMode\" />\n\n</DisplayToggle>\n```\n\n----------------------------------------\n\nTITLE: Installing Fluent UI React Portal Compatibility Package\nDESCRIPTION: This shell command installs the @fluentui/react-portal-compat package, which provides a compatibility layer for React Portals within Fluent UI components. It requires Yarn to be installed.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-portal-compat/README.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @fluentui/react-portal-compat\n```\n\n----------------------------------------\n\nTITLE: Migration Property Mapping from v8 Persona to v9 Avatar\nDESCRIPTION: Comprehensive mapping of properties between Fluent UI v8 Persona and v9 Avatar components, detailing prop name changes, type conversions, and feature support\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-avatar/library/docs/MIGRATION.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Property mapping example\nconst v8Persona = {\n  text: 'John Doe',\n  size: PersonaSize.size32,\n  imageUrl: 'path/to/image'\n};\n\nconst v9Avatar = {\n  name: 'John Doe',\n  size: 32,\n  image: { src: 'path/to/image' }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing markdownTitle Property in FluentUI Documentation\nDESCRIPTION: Shows how to reference a markdownTitle page property to position a Markdown section in the side navigation rail of the documentation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/PageTemplates/TemplatePage/docs/default/TemplateMarkdown.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`markdownTitle`\n```\n\n----------------------------------------\n\nTITLE: Defining SpinnerSize Type in TypeScript\nDESCRIPTION: TypeScript type definition for SpinnerSize that uses the ValuesOf utility type to extract values from the SpinnerSize constant.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_52\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport type SpinnerSize = ValuesOf<typeof SpinnerSize>;\n```\n\n----------------------------------------\n\nTITLE: Linting and Fixing Code Issues in an Individual Package\nDESCRIPTION: This command runs the linter and attempts to automatically fix any issues found in the code of the specified individual package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/CONTRIBUTING.md#2025-04-20_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nyarn lint:fix              # lint and attempt to fix\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-jsx-runtime version\nDESCRIPTION: This patch updates the version of the `@fluentui/react-jsx-runtime` dependency. Bumping this package ensures that the `@fluentui/react-badge` component uses the latest features and bug fixes available in the JSX runtime.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nBump @fluentui/react-jsx-runtime to v9.0.48 ([PR #33468](https://github.com/microsoft/fluentui/pull/33468) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Aligning Stack.Item using CSS\nDESCRIPTION: This snippet demonstrates how to align a Stack.Item component using CSS.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Flex/Flex.StackItem.stories.mdx#2025-04-20_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.flex-item {\n  align-self: center;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IStyleSheetConfig Interface in TypeScript\nDESCRIPTION: This snippet defines the IStyleSheetConfig interface, which is used to configure stylesheets in the FluentUI system. It includes options for caching, CSP settings, injection mode, and RTL support.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/merge-styles/etc/merge-styles.api.md#2025-04-20_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface IStyleSheetConfig {\n    classNameCache?: {\n        [key: string]: string;\n    };\n    cspSettings?: ICSPSettings;\n    defaultPrefix?: string;\n    injectionMode?: InjectionMode;\n    // (undocumented)\n    inShadow?: boolean;\n    namespace?: string;\n    // @deprecated\n    onInsertRule?: (rule: string) => void;\n    rtl?: boolean;\n    // (undocumented)\n    stylesheetKey?: string;\n    // (undocumented)\n    window?: Window;\n}\n```\n\n----------------------------------------\n\nTITLE: Version 0.2.36 Release Notes\nDESCRIPTION: Changelog entry documenting patches and dependency updates for version 0.2.36\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-timepicker-compat/library/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.2.36](https://github.com/microsoft/fluentui/tree/@fluentui/react-timepicker-compat_v0.2.36)\n\nTue, 15 Oct 2024 17:17:53 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-timepicker-compat_v0.2.35..@fluentui/react-timepicker-compat_v0.2.36)\n```\n\n----------------------------------------\n\nTITLE: useDocument Hook\nDESCRIPTION: Defines a React hook called `useDocument` that returns the Document object or undefined if the document is not available. This hook allows components to access the document object in a React-friendly way.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-window-provider/etc/react-window-provider.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const useDocument: () => Document | undefined;\n```\n\n----------------------------------------\n\nTITLE: Dialog State Definition\nDESCRIPTION: Defines the state for the Dialog component, combining ComponentState, DialogContextValue, and additional properties for content and trigger elements. It leverages React_2 from the react module.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/etc/react-dialog.api.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport type DialogState = ComponentState<InternalDialogSlots> & DialogContextValue & {\n    content: React_2.ReactNode;\n    trigger: React_2.ReactNode;\n};\"\n```\n\n----------------------------------------\n\nTITLE: Applying Z-Index Tokens in Styles\nDESCRIPTION: This code snippet demonstrates how to use the defined z-index tokens in component styles. By importing the `tokens` object and accessing the relevant z-index property, components can consistently apply the desired z-index. It promotes reusability and maintainability by centralizing z-index management.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/z-index-handling.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\"// Fluent/partner code\\n\\nimport { tokens } from '@fluentui/theme';\\n\\nconst styles = {\\n  root: {\\n    zIndex: tokens.zIndexOverlay /* var(--zIndexOverlay, 1000) */,\\n  },\\n};\"\n```\n\n----------------------------------------\n\nTITLE: FluentUI React Docsite Components Version History\nDESCRIPTION: Markdown formatted changelog entries showing version updates, dates, and associated pull requests with authors. Records patches and dependency version bumps.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-docsite-components/CHANGELOG.md#2025-04-20_snippet_29\n\nLANGUAGE: markdown\nCODE:\n```\n## [8.2.35](https://github.com/microsoft/fluentui/tree/@fluentui/react-docsite-components_v8.2.35)\n\nTue, 13 Jul 2021 07:35:36 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-docsite-components_v8.2.34..@fluentui/react-docsite-components_v8.2.35)\n\n### Patches\n\n- Bump @fluentui/react to v8.23.0 ([PR #18802](https://github.com/microsoft/fluentui/pull/18802) by tmichon@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Public Datepicker Usage TSX\nDESCRIPTION: Demonstrates the basic public interface for using the Datepicker component with no explicit configuration\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Datepicker.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Datepicker />\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Types and Interfaces for Motion Components\nDESCRIPTION: This snippet defines various TypeScript types and interfaces used in the @fluentui/react-motion package. It includes definitions for AtomMotion, MotionComponentProps, PresenceComponent, and other related types.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-motion/library/etc/react-motion.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React_2 from 'react';\nimport { SlotComponentType } from '@fluentui/react-utilities';\nimport { SlotRenderFunction } from '@fluentui/react-utilities';\n\n// @public (undocumented)\nexport type AtomMotion = AtomCore & {\n    reducedMotion?: Partial<AtomCore>;\n};\n\n// @public (undocumented)\nexport type AtomMotionFn<MotionParams extends Record<string, MotionParam> = {}> = (params: {\n    element: HTMLElement;\n} & MotionParams) => AtomMotion | AtomMotion[];\n\n// @public (undocumented)\nexport type MotionComponentProps = {\n    children: React_2.ReactElement;\n    imperativeRef?: React_2.Ref<MotionImperativeRef | undefined>;\n    onMotionFinish?: (ev: null) => void;\n    onMotionCancel?: (ev: null) => void;\n    onMotionStart?: (ev: null) => void;\n};\n\n// @public (undocumented)\nexport type PresenceComponent<MotionParams extends Record<string, MotionParam> = {}> = {\n    (props: PresenceComponentProps & MotionParams): React_2.ReactElement | null;\n    [MOTION_DEFINITION]: PresenceMotionFn<MotionParams>;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for FluentUI React Accordion\nDESCRIPTION: Configuration settings for including React Accordion stories in Storybook. Specifies the story file patterns to include both MDX and TypeScript/TSX story files from the react-accordion package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-accordion/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-accordion/stories/src/**/*.stories.mdx', '../packages/react-components/react-accordion/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Click Events with Nested React Portals\nDESCRIPTION: A guide on adding event listeners to handle 'click outside' events for nested React Portals, showcasing the challenges with DOM order and proposed solutions using virtual parents.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-portal/library/docs/Spec.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst outerButtonRef = React.useRef();\nconst innerButtonRef = React.useRef();\n\n\n<Portal>\n  <div>\n    <button ref={outerButtonRef}> Outer button </button>\n    <Portal>\n      <div>\n        <button ref={innerButtonRef}> Inner button </button>\n      </div>\n    </Portal>\n  </div>\n</Portal>\n\n// DOM output\n<div>\n  <button>Outer button</button>\n</div>\n\n<div>\n  <button>Inner button</button>\n</div>\n\n// Let's add an event listener to 'dismss' the outer portal when clicked outside\n// ⚠⚠⚠ This will always be called when clicking on the inner button\ndocument.addEventListener((event) => {\n  if (outerButtonRef.current.contains(event.target)) {\n    dismissOuterPortal();\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Rendered Grid Inheritance Example with Fluent UI\nDESCRIPTION: A rendered example showing how a column can take full width (ms-sm12) on small screens but become narrower (ms-lg4) on large screens, demonstrating the mobile-first approach of Fabric Core.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Styles/LayoutPage/docs/web/LayoutGridImplementation.md#2025-04-20_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"ms-Grid\">\n  <div class=\"ms-Grid-row\">\n    <div class=\"ms-Grid-col ms-sm12 ms-lg4\">\n      <div class=\"LayoutPage-demoBlock\">Example</div>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Vertical Fill for Stack.Item using make-styles\nDESCRIPTION: This snippet shows how to set the vertical fill property for a Stack.Item component using the make-styles approach.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Flex/Flex.StackItem.stories.mdx#2025-04-20_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nmakeStyles({\n  root: {\n    height: \"100%\",\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.98.8\nDESCRIPTION: This report covers the update to @fluentui/react version 8.98.8, part of routine enhancement efforts to improve the library’s stability and functionality.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/azure-themes/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.98.8 ([PR #25381](https://github.com/microsoft/fluentui/pull/25381) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Enhance FocusZone to bypass hidden elements in react-focus\nDESCRIPTION: This enhancement to the FocusZone component enables focus to bypass hidden elements. This allows focus to move directly to the next visible focusable element within the zone, improving accessibility and navigation for users.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-focus/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: none\nCODE:\n```\nFocusZone: enable focus to be able to bypass hidden elements ([PR #24406](https://github.com/microsoft/fluentui/pull/24406) by jspurlin@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Generating Initial Release for Fluent UI Package\nDESCRIPTION: Command to generate an initial release using Nx workspace plugin with different release phases\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/prepare-initial-release/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:prepare-initial-release\n```\n\n----------------------------------------\n\nTITLE: PortalCompatProvider Component\nDESCRIPTION: Defines the PortalCompatProvider component, a React functional component that accepts children as props. It's designed to provide compatibility for portals.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-portal-compat/etc/react-portal-compat.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport const PortalCompatProvider: React_2.FC<{ \n    children?: React_2.ReactNode;\n}>;\n```\n\n----------------------------------------\n\nTITLE: Implementing RadioGroup Class in TypeScript for Fluent UI\nDESCRIPTION: Defines the RadioGroup class which extends FASTElement to implement a group of radio buttons with keyboard navigation, form association, and various event handlers. It manages a collection of Radio elements, tracks the checked state, and provides form validation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_43\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class RadioGroup extends FASTElement {\n    constructor();\n    changeHandler(e: Event): boolean | void;\n    // @internal\n    protected checkedIndex: number;\n    // @internal\n    protected checkedIndexChanged(prev: number | undefined, next: number): void;\n    // @internal\n    checkRadio(index?: number, shouldEmit?: boolean): void;\n    checkValidity(): boolean;\n    // @internal\n    clickHandler(e: MouseEvent): boolean | void;\n    disabled: boolean;\n    // @internal\n    protected disabledChanged(prev?: boolean, next?: boolean): void;\n    // (undocumented)\n    disabledRadioHandler(e: CustomEvent): void;\n    // @internal\n    elementInternals: ElementInternals;\n    // @internal\n    get enabledRadios(): Radio[];\n    // @internal\n    focus(): void;\n    // @internal\n    focusinHandler(e: FocusEvent): boolean | void;\n    // @internal\n    focusoutHandler(e: FocusEvent): boolean | void;\n    static formAssociated: boolean;\n    // (undocumented)\n    formResetCallback(): void;\n    initialValue?: string;\n    initialValueChanged(prev: string | undefined, next: string | undefined): void;\n    // @internal\n    keydownHandler(e: KeyboardEvent): boolean | void;\n    name: string;\n    // @internal\n    protected nameChanged(prev: string | undefined, next: string | undefined): void;\n    orientation?: RadioGroupOrientation;\n    // @internal\n    orientationChanged(prev: RadioGroupOrientation | undefined, next: RadioGroupOrientation | undefined): void;\n    radios: Radio[];\n    radiosChanged(prev: Radio[] | undefined, next: Radio[] | undefined): void;\n    reportValidity(): boolean;\n    required: boolean;\n    // (undocumented)\n    requiredChanged(prev: boolean, next: boolean): void;\n    // @internal\n    setFormValue(value: File | string | FormData | null, state?: File | string | FormData | null): void;\n    // @internal\n    setValidity(flags?: Partial<ValidityState>, message?: string, anchor?: HTMLElement): void;\n    // @internal\n    slotchangeHandler(e: Event): void;\n    // @internal\n    get validationMessage(): string;\n    get validity(): ValidityState;\n    get value(): string | null;\n    set value(next: string | null);\n}\n```\n\n----------------------------------------\n\nTITLE: Version Updates and Dependency Changes - FluentUI React Tags\nDESCRIPTION: Changelog entries documenting version updates and dependency changes for the FluentUI React Tags component, including patches and version bumps across multiple FluentUI packages.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tags/library/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patches\n\n- Bump @fluentui/react-aria to v9.8.1 ([PR #29983](https://github.com/microsoft/fluentui/pull/29983) by beachball)\n- Bump @fluentui/react-avatar to v9.6.13 ([PR #29983](https://github.com/microsoft/fluentui/pull/29983) by beachball)\n- Bump @fluentui/react-jsx-runtime to v9.0.29 ([PR #29983](https://github.com/microsoft/fluentui/pull/29983) by beachball)\n- Bump @fluentui/react-tabster to v9.18.0 ([PR #29983](https://github.com/microsoft/fluentui/pull/29983) by beachball)\n- Bump @fluentui/react-utilities to v9.18.0 ([PR #29983](https://github.com/microsoft/fluentui/pull/29983) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Defining IFabricStyleProps Interface in TypeScript\nDESCRIPTION: Defines the IFabricStyleProps interface extending IFabricProps with a required theme property. This interface is marked as @public but undocumented.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_135\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IFabricStyleProps extends IFabricProps {\n    // (undocumented)\n    theme: ITheme;\n}\n```\n\n----------------------------------------\n\nTITLE: Rating Item Label Context Patch\nDESCRIPTION: Fixes a bug in passing the itemLabel prop to Rating state, ensuring RatingItem correctly consumes context-level properties\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-rating/library/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Fix: Pass missing Rating\\'s itemLabel prop to its state\nconst ratingState = useRatingState({\n  itemLabel: props.itemLabel\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a MarkdownLink Component with FluentUI in TypeScript\nDESCRIPTION: A React functional component that extends FluentUI's Link component with additional handling for anchor links. It processes internal page anchor links by prepending the current route to the href attribute.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-docsite-components/src/demo/demo.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { Link, ILinkProps } from '@fluentui/react/lib/Link';\nimport { removeAnchorLink } from '../../utilities/index2';\n\nexport const MarkdownLink: React.FunctionComponent<ILinkProps> = props => {\n  let href = props.href;\n  if (href && href[0] === '#' && href.indexOf('/') === -1) {\n    // This is an anchor link within this page. We need to prepend the current route.\n    href = removeAnchorLink(location.hash) + href;\n  }\n\n  return <Link {...props} href={href} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Key Sequence Identifier Function\nDESCRIPTION: Utility function to generate a unique identifier from an array of key sequences, likely used for keyboard shortcut or command identification.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_255\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport function sequencesToID(keySequences: string[]): string;\n```\n\n----------------------------------------\n\nTITLE: Workspace Generator Commands\nDESCRIPTION: Commands for listing and executing workspace generators in the FluentUI monorepo. Used for scaffolding new packages and components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/command-cheat-sheet.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn nx list @fluentui/workspace-plugin # prints all available workspace generators\nyarn nx g @fluentui/workspace-plugin:<generator-name> # run <generator-name> from workspace plugin\nyarn create-package # scaffolds a new package\nyarn create-component # scaffolds a new component\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme Switcher with DisplayToggle in FluentUI\nDESCRIPTION: This code snippet demonstrates how to use the DisplayToggle component to show different images based on theme selection. It implements a theme switcher with 'Dark' and 'Light' options displaying appropriate separator visuals for each theme.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/SeparatorPage/docs/ios/SeparatorOverview.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<DisplayToggle onText=\"Dark\" offText=\"Light\" label=\"Theme Switcher\">\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_separators_01_light.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_separators_01_dark.png?text=DarkMode\" />\n\n</DisplayToggle>\n```\n\n----------------------------------------\n\nTITLE: Version History Documentation in Markdown\nDESCRIPTION: Contains version history documentation with release dates, comparison links, and patch notes for the react-portal-compat package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-portal-compat/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patches\n\n- chore: trigger manual version bump after broken release ([PR #29303](https://github.com/microsoft/fluentui/pull/29303) by yuanboxue@microsoft.com)\n- Bump @fluentui/react-portal-compat-context to v9.0.9 ([PR #29303](https://github.com/microsoft/fluentui/pull/29303) by beachball)\n- Bump @fluentui/react-tabster to v9.13.1 ([PR #29303](https://github.com/microsoft/fluentui/pull/29303) by beachball)\n- Bump @fluentui/react-components to v9.32.3 ([PR #29303](https://github.com/microsoft/fluentui/pull/29303) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for FluentUI React Text Component Stories\nDESCRIPTION: Configuration snippet showing how to include FluentUI React text component stories in a Storybook setup by specifying the appropriate story glob patterns in the Storybook configuration file.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-text/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-text/stories/src/**/*.stories.mdx', '../packages/react-components/react-text/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Using children prop with Text component in FluentUI v9\nDESCRIPTION: Examples showing two equivalent ways to provide content to the Text component in v9: using the children prop explicitly or implicitly.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-text/library/docs/MIGRATION.md#2025-04-20_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<Text children=\"Hello World!\" />\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<Text>Hello World!</Text>\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-shared-contexts version\nDESCRIPTION: This patch updates the version of the `@fluentui/react-shared-contexts` dependency.  Bumping this package ensures that the `@fluentui/react-badge` component uses the latest features and bug fixes available in the shared contexts package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nBump @fluentui/react-shared-contexts to v9.21.2 ([PR #33468](https://github.com/microsoft/fluentui/pull/33468) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Package Version Links\nDESCRIPTION: Markdown links to different package versions in the GitHub repository\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/library/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[0.8.3](https://github.com/microsoft/fluentui/tree/@fluentui/react-menu_v0.8.3)\n[0.8.2](https://github.com/microsoft/fluentui/tree/@fluentui/react-menu_v0.8.2)\n[0.8.1](https://github.com/microsoft/fluentui/tree/@fluentui/react-menu_v0.8.1)\n[0.8.0](https://github.com/microsoft/fluentui/tree/@fluentui/react-menu_v0.8.0)\n```\n\n----------------------------------------\n\nTITLE: useProgressBarStyles Hook Declaration\nDESCRIPTION: Declares the useProgressBarStyles_unstable hook, which takes a ProgressBarState and returns a ProgressBarState. This hook is likely responsible for applying styles to the ProgressBar component based on its state.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-progress/library/etc/react-progress.api.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n// @public\nexport const useProgressBarStyles_unstable: (state: ProgressBarState) => ProgressBarState;\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing useScrollbarWidth Utility Hook\nDESCRIPTION: New utility hook to calculate and provide scrollbar width, useful for responsive design and cross-browser compatibility\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-utilities/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Feature: Implement scrollbar width detection hook\nfeat: implement `useScrollbarWidth` utility hook\n```\n\n----------------------------------------\n\nTITLE: Using makeStyles with Griffel React\nDESCRIPTION: Illustrates how to define style permutations using makeStyles in a React component. The makeStyles hook returns class names that can be applied to elements, enabling dynamic styling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/styles-handbook.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeStyles } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  button: { display: 'flex' },\n  icon: { paddingLeft: '5px' },\n});\n\nfunction Component(props) {\n  const classes = useClasses();\n\n  return <button className={classes.button} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Providing a custom window object\nDESCRIPTION: This snippet shows how to override the default window object by wrapping the application within the `WindowProvider` component. This is useful when rendering components within a different window context, such as an iframe. The `window` prop of `WindowProvider` is set to the desired window object.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-window-provider/README.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nReactDOM.render(\n  <WindowProvider window={childWindow}>\n    <...>\n  </WindowProvider>,\n  childWindowElement\n);\n```\n\n----------------------------------------\n\nTITLE: Importing DatePicker Component - React\nDESCRIPTION: This snippet demonstrates how to import the DatePicker component from the '@fluentui/react-datepicker-compat' package for use in a React application. It's essential for utilizing the DatePicker functionality within your components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-datepicker-compat/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DatePicker } from '@fluentui/react-datepicker-compat';\n```\n\n----------------------------------------\n\nTITLE: Internal Render Functionality for Badge\nDESCRIPTION: This snippet shows the internal rendering mechanism of the Badge component, indicating how child components are integrated within the Badge.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/docs/Spec.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ElementType>{children}</ElementType>\n```\n\n----------------------------------------\n\nTITLE: Basic Version Bump Command Usage\nDESCRIPTION: Shows the basic command syntax for running the version bump generator using yarn and nx.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/version-bump/README.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:version-bump ...\n```\n\n----------------------------------------\n\nTITLE: Exporting Fluent UI Components and Utilities\nDESCRIPTION: This snippet shows the export statements for various Fluent UI components, hooks, and utilities. It includes exports for rendering functions, class names, props types, state types, and related utilities for a wide range of UI elements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/etc/react-components.api.md#2025-04-20_snippet_34\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport { renderTeachingPopoverBody_unstable }\n\nexport { renderTeachingPopoverCarousel_unstable }\n\nexport { renderTeachingPopoverCarouselCard_unstable }\n\nexport { renderTeachingPopoverCarouselFooter_unstable }\n\nexport { renderTeachingPopoverCarouselNav_unstable }\n\nexport { renderTeachingPopoverCarouselNavButton_unstable }\n\nexport { renderTeachingPopoverCarouselPageCount_unstable }\n\nexport { renderTeachingPopoverFooter_unstable }\n\nexport { renderTeachingPopoverHeader_unstable }\n\nexport { renderTeachingPopoverSurface_unstable }\n\nexport { renderTeachingPopoverTitle_unstable }\n\nexport { renderTeachingPopoverTrigger_unstable }\n\nexport { renderText_unstable }\n\nexport { renderTextarea_unstable }\n\nexport { renderToast_unstable }\n\nexport { renderToastBody_unstable }\n\nexport { renderToaster_unstable }\n\nexport { renderToastFooter_unstable }\n\nexport { renderToastTitle_unstable }\n\nexport { renderToastTrigger_unstable }\n\nexport { renderToggleButton_unstable }\n\nexport { renderToolbar_unstable }\n\nexport { renderToolbarGroup_unstable }\n\nexport { renderTooltip_unstable }\n\nexport { renderToStyleElements }\n\nexport { renderTree_unstable }\n\nexport { renderTreeItem_unstable }\n\nexport { renderTreeItemLayout_unstable }\n\nexport { renderTreeItemPersonaLayout_unstable }\n\nexport { resetIdsForTests }\n\nexport { resolvePositioningShorthand }\n\nexport { resolveShorthand }\n\nexport { ResolveShorthandFunction }\n\nexport { ResolveShorthandOptions }\n\nexport { SearchBox }\n\nexport { SearchBoxChangeEvent }\n\nexport { searchBoxClassNames }\n\nexport { SearchBoxProps }\n\nexport { SearchBoxSlots }\n\nexport { SearchBoxState }\n\nexport { Select }\n\nexport { SelectableHandler }\n\nexport { selectClassNames }\n\nexport { SelectionEvents }\n\nexport { SelectionHookParams }\n\nexport { SelectionItemId }\n\nexport { SelectionMethods }\n\nexport { SelectionMode_2 as SelectionMode }\n\nexport { SelectOnChangeData }\n\nexport { SelectProps }\n\nexport { SelectSlots }\n\nexport { SelectState }\n\nexport { SelectTabData }\n\nexport { SelectTabEvent }\n\nexport { SelectTabEventHandler }\n\nexport { ShadowBrandTokens }\n\nexport { ShadowTokens }\n\nexport { shorthands }\n\nexport { Skeleton }\n\nexport { skeletonClassNames }\n\nexport { SkeletonContextProvider }\n\nexport { SkeletonContextValue }\n\nexport { SkeletonItem }\n\nexport { skeletonItemClassNames }\n\nexport { SkeletonItemProps }\n\nexport { SkeletonItemSlots }\n\nexport { SkeletonItemState }\n\nexport { SkeletonProps }\n\nexport { SkeletonSlots }\n\nexport { SkeletonState }\n\nexport { Slider }\n\nexport { sliderClassNames }\n\nexport { sliderCSSVars }\n\nexport { SliderOnChangeData }\n\nexport { SliderProps }\n\nexport { SliderSlots }\n\nexport { SliderState }\n\nexport { Slot }\n\nexport { slot }\n\nexport { SlotClassNames }\n\nexport { SlotComponentType }\n\nexport { SlotOptions }\n\nexport { SlotPropsRecord }\n\nexport { SlotRenderFunction }\n\nexport { SortDirection }\n\nexport { SpacingTokens }\n\nexport { SpinButton }\n\nexport { SpinButtonBounds }\n\nexport { SpinButtonChangeEvent }\n\nexport { spinButtonClassNames }\n\nexport { SpinButtonOnChangeData }\n\nexport { SpinButtonProps }\n\nexport { SpinButtonSlots }\n\nexport { SpinButtonSpinState }\n\nexport { SpinButtonState }\n\nexport { Spinner }\n\nexport { spinnerClassNames }\n\nexport { SpinnerProps }\n\nexport { SpinnerSlots }\n\nexport { SpinnerState }\n\nexport { SplitButton }\n\nexport { splitButtonClassNames }\n\nexport { SplitButtonProps }\n\nexport { SplitButtonSlots }\n\nexport { SplitButtonState }\n\nexport { SSRProvider }\n\nexport { StrokeWidthTokens }\n\nexport { Subtitle1 }\n\nexport { subtitle1ClassNames }\n\nexport { Subtitle2 }\n\nexport { subtitle2ClassNames }\n\nexport { Subtitle2Stronger }\n\nexport { subtitle2StrongerClassNames }\n\nexport { SubtreeContextValue }\n\nexport { swatchCSSVars }\n\nexport { SwatchPicker }\n\nexport { swatchPickerClassNames }\n\nexport { swatchPickerContextDefaultValue }\n\nexport { SwatchPickerContextValue }\n\nexport { SwatchPickerContextValues }\n\nexport { SwatchPickerGridProps }\n\nexport { SwatchPickerOnSelectEventHandler }\n\nexport { SwatchPickerOnSelectionChangeData }\n\nexport { SwatchPickerProps }\n\nexport { SwatchPickerProvider }\n\nexport { SwatchPickerRow }\n\nexport { swatchPickerRowClassNames }\n\nexport { SwatchPickerRowProps }\n\nexport { SwatchPickerRowSlots }\n\nexport { SwatchPickerRowState }\n\nexport { SwatchPickerSlots }\n\nexport { SwatchPickerState }\n\nexport { SwatchProps }\n\nexport { Switch }\n\nexport { switchClassNames }\n\nexport { SwitchOnChangeData }\n\nexport { SwitchProps }\n\nexport { SwitchSlots }\n\nexport { SwitchState }\n\nexport { Tab }\n\nexport { tabClassNames }\n\nexport { Table }\n\nexport { TableBody }\n\nexport { tableBodyClassName }\n\nexport { tableBodyClassNames }\n\nexport { TableBodyProps }\n\nexport { TableBodySlots }\n\nexport { TableBodyState }\n\nexport { TableCell }\n\nexport { TableCellActions }\n\nexport { tableCellActionsClassNames }\n\nexport { TableCellActionsProps }\n\nexport { TableCellActionsSlots }\n\nexport { TableCellActionsState }\n\nexport { tableCellClassName }\n\nexport { tableCellClassNames }\n\nexport { TableCellLayout }\n\nexport { tableCellLayoutClassNames }\n\nexport { TableCellLayoutProps }\n\nexport { TableCellLayoutSlots }\n\nexport { TableCellLayoutState }\n\nexport { TableCellProps }\n\nexport { TableCellSlots }\n\nexport { TableCellState }\n\nexport { tableClassName }\n\nexport { tableClassNames }\n\nexport { TableColumnDefinition }\n\nexport { TableColumnId }\n\nexport { TableColumnSizingOptions }\n\nexport { TableContextProvider }\n\nexport { TableContextValue }\n\nexport { TableContextValues }\n\nexport { TableFeaturePlugin }\n\nexport { TableFeaturesState }\n\nexport { TableHeader }\n\nexport { TableHeaderCell }\n\nexport { tableHeaderCellClassName }\n\nexport { tableHeaderCellClassNames }\n\nexport { TableHeaderCellProps }\n\nexport { TableHeaderCellSlots }\n\nexport { TableHeaderCellState }\n\nexport { tableHeaderClassName }\n\nexport { tableHeaderClassNames }\n\nexport { TableHeaderContextProvider }\n\nexport { TableHeaderProps }\n\nexport { TableHeaderSlots }\n\nexport { TableHeaderState }\n\nexport { TableProps }\n\nexport { TableResizeHandle }\n\nexport { tableResizeHandleClassNames }\n\nexport { TableRow }\n\nexport { tableRowClassName }\n\nexport { tableRowClassNames }\n\nexport { TableRowData }\n\nexport { TableRowId }\n\nexport { TableRowIdContextProvider }\n\nexport { TableRowProps }\n\nexport { TableRowSlots }\n\nexport { TableRowState }\n\nexport { TableSelectionCell }\n\nexport { tableSelectionCellClassNames }\n\nexport { TableSelectionCellProps }\n\nexport { TableSelectionCellSlots }\n\nexport { TableSelectionCellState }\n\nexport { TableSelectionState }\n\nexport { TableSlots }\n\nexport { TableSortState }\n\nexport { TableState }\n\nexport { TabList }\n\nexport { tabListClassNames }\n\nexport { TabListContextValue }\n\nexport { TabListContextValues }\n\nexport { TabListProps }\n\nexport { TabListProvider }\n\nexport { TabListSlots }\n\nexport { TabListState }\n\nexport { TabProps }\n\nexport { TabRegisterData }\n\nexport { TabSlots }\n\nexport { TabState }\n\nexport { TabValue }\n\nexport { Tag }\n\nexport { TagAppearance }\n\nexport { tagClassNames }\n\nexport { TagDismissData }\n\nexport { TagDismissEvent }\n\nexport { TagDismissHandler }\n\nexport { TagGroup }\n\nexport { tagGroupClassNames }\n\nexport { TagGroupProps }\n\nexport { TagGroupSlots }\n\nexport { TagGroupState }\n\nexport { TagPicker }\n\nexport { TagPickerButton }\n\nexport { tagPickerButtonClassNames }\n\nexport { TagPickerButtonProps }\n\nexport { TagPickerButtonSlots }\n\nexport { TagPickerButtonState }\n\nexport { TagPickerContextValue }\n\nexport { TagPickerContextValues }\n\nexport { TagPickerControl }\n\nexport { tagPickerControlClassNames }\n\nexport { TagPickerControlProps }\n\nexport { TagPickerControlSlots }\n\nexport { TagPickerControlState }\n\nexport { TagPickerGroup }\n\nexport { tagPickerGroupClassNames }\n\nexport { TagPickerGroupProps }\n\nexport { TagPickerGroupSlots }\n\nexport { TagPickerGroupState }\n\nexport { TagPickerInput }\n\nexport { tagPickerInputClassNames }\n\nexport { TagPickerInputProps }\n\nexport { TagPickerInputSlots }\n\nexport { TagPickerInputState }\n\nexport { TagPickerList }\n\nexport { tagPickerListClassNames }\n\nexport { TagPickerListProps }\n\nexport { TagPickerListSlots }\n\nexport { TagPickerListState }\n\nexport { TagPickerOnOpenChangeData }\n\nexport { TagPickerOnOptionSelectData }\n\nexport { TagPickerOption }\n\nexport { tagPickerOptionClassNames }\n\nexport { TagPickerOptionGroup }\n\nexport { tagPickerOptionGroupClassNames }\n\nexport { TagPickerOptionGroupProps }\n\nexport { TagPickerOptionGroupSlots }\n\nexport { TagPickerOptionGroupState }\n\nexport { TagPickerOptionProps }\n\nexport { TagPickerOptionSlots }\n\nexport { TagPickerOptionState }\n\nexport { TagPickerProps }\n\nexport { TagPickerSize }\n\nexport { TagPickerSlots }\n\nexport { TagPickerState }\n\nexport { TagProps }\n\nexport { TagShape }\n\nexport { TagSize }\n\nexport { TagSlots }\n\nexport { TagState }\n\nexport { TagValue }\n\nexport { TeachingPopover }\n\nexport { TeachingPopoverBody }\n\nexport { teachingPopoverBodyClassNames }\n\nexport { TeachingPopoverBodyProps }\n\nexport { TeachingPopoverBodySlots }\n\nexport { TeachingPopoverBodyState }\n\nexport { TeachingPopoverCarousel }\n\nexport { TeachingPopoverCarouselCard }\n\nexport { teachingPopoverCarouselCardClassNames }\n\nexport { TeachingPopoverCarouselCardProps }\n\nexport { TeachingPopoverCarouselCardSlots }\n\nexport { TeachingPopoverCarouselCardState }\n\nexport { teachingPopoverCarouselClassNames }\n\nexport { TeachingPopoverCarouselFooter }\n\nexport { teachingPopoverCarouselFooterClassNames }\n\nexport { TeachingPopoverCarouselFooterProps }\n\nexport { TeachingPopoverCarouselFooterSlots }\n\nexport { TeachingPopoverCarouselFooterState }\n\nexport { TeachingPopoverCarouselNav }\n\nexport { TeachingPopoverCarouselNavButton }\n\nexport { teachingPopoverCarouselNavButtonClassNames }\n\nexport { TeachingPopoverCarouselNavButtonProps }\n\nexport { TeachingPopoverCarouselNavButtonSlots }\n\nexport { TeachingPopoverCarouselNavButtonState }\n\nexport { teachingPopoverCarouselNavClassNames }\n\nexport { TeachingPopoverCarouselNavProps }\n\nexport { TeachingPopoverCarouselNavSlots }\n\nexport { TeachingPopoverCarouselNavState }\n\nexport { TeachingPopoverCarouselPageCount }\n```\n\n----------------------------------------\n\nTITLE: Defining Color-Related Interfaces in Fluent UI\nDESCRIPTION: These TypeScript interfaces define properties and types related to color and color selection components in Fluent UI. Interfaces such as IColorPicker, IColorCellProps, and IColorRectangleProps standardize how colors are handled and provide methods and properties for events like onClick and onChange.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_62\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IColor extends IRGB, IHSV {\n    hex: string;\n    str: string;\n    t?: number;\n}\n\nexport interface IColorCellProps {\n    color: string;\n    disabled?: boolean;\n    id: string;\n    index?: number;\n    label?: string;\n}\n\nexport interface IColorPicker {\n    color: IColor;\n}\n\nexport interface IColorPickerGridCellProps {\n    borderWidth?: number;\n    circle?: boolean;\n    color: string;\n    disabled?: boolean;\n    height?: number;\n    // @deprecated\n    id?: string;\n    idPrefix?: string;\n    index?: number;\n    isRadio?: boolean;\n    item: IColorCellProps;\n    label?: string;\n    onClick?: (item: IColorCellProps, event?: React_2.MouseEvent<HTMLButtonElement>) => void;\n    // (undocumented)\n    onFocus?: (item: IColorCellProps, event?: React_2.FormEvent<HTMLButtonElement>) => void;\n    // (undocumented)\n    onHover?: (item?: IColorCellProps, event?: React_2.MouseEvent<HTMLButtonElement>) => void;\n    // (undocumented)\n    onKeyDown?: (ev: React_2.KeyboardEvent<HTMLButtonElement>) => void;\n    onMouseEnter?: (ev: React_2.MouseEvent<HTMLButtonElement>) => boolean;\n    // (undocumented)\n    onMouseLeave?: (ev: React_2.MouseEvent<HTMLButtonElement>) => void;\n    onMouseMove?: (ev: React_2.MouseEvent<HTMLButtonElement>) => boolean;\n    onRenderColorCellContent?: IRenderFunction<IColorCellProps>;\n    // (undocumented)\n    onWheel?: (ev: React_2.MouseEvent<HTMLButtonElement>) => void;\n    selected: boolean;\n    styles?: IStyleFunctionOrObject<IColorPickerGridCellStyleProps, IColorPickerGridCellStyles>;\n    theme?: ITheme;\n    width?: number;\n}\n\nexport interface IColorPickerProps {\n    // @deprecated\n    alphaLabel?: string;\n    // @deprecated\n    alphaSliderHidden?: boolean;\n    alphaType?: 'alpha' | 'transparency' | 'none';\n    // @deprecated\n    blueLabel?: string;\n    className?: string;\n    color: IColor | string;\n    componentRef?: IRefObject<IColorPicker>;\n    // @deprecated\n    greenLabel?: string;\n    // @deprecated\n    hexLabel?: string;\n    onChange?: (ev: React_2.SyntheticEvent<HTMLElement>, color: IColor) => void;\n    // @deprecated\n    redLabel?: string;\n    showPreview?: boolean;\n    strings?: IColorPickerStrings;\n    styles?: IStyleFunctionOrObject<IColorPickerStyleProps, IColorPickerStyles>;\n    theme?: ITheme;\n    tooltipProps?: ITooltipHostProps;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Attributes and State Management for Web Components\nDESCRIPTION: Introduces new attribute and state management techniques for Fluent UI web components, including current-value attribute for text input and state swapping functions\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/CHANGELOG.md#2025-04-20_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Rendering Using JSX in Fluent UI\nDESCRIPTION: This JSX snippet demonstrates how to structure a component using nested divs with class names aiding in applying styles. This helps in rendering elements within a layout defined by external or internal styling methods.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Flex/Flex.Stack.stories.mdx#2025-04-20_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={styles.root}>\\n  <div className={styles.inner}>\\n    {children}\\n  </div>\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Style Scoping with FluentUI in React TSX\nDESCRIPTION: This code snippet demonstrates how to create a React component with scoped styles using FluentUI's merge-styles system. It utilizes custom hooks to handle multi-window scenarios and shadow DOM configurations. The component creates a unique stylesheet key and applies merged styles with consideration for different rendering contexts.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/merge-styles/README.md#2025-04-20_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useMergeStylesHooks } from '@fluentui/react';\nimport { mergeStyles } from '@fluentui/merge-styles';\nimport type { ShadowConfig } from '@fluentui/merge-styles';\n\n// This must be globally unique for the application\nconst MY_COMPONENT_STYLESHEET_KEY: string = 'my-unique-key';\n\nconst MyComponent = props => {\n  const { useWindow, useShadowConfig, useAdoptedStylesheet } = useMergeStylesHooks();\n\n  // Make sure multi-window scenarios work (e.g., pop outs)\n  const win: Window = useWindow();\n  const shadowConfig: ShadowConfig = useShadowConfig(MY_COMPONENT_STYLESHEET_KEY, win);\n\n  const styles = React.useMemo(() => {\n    // shadowConfig must be the first parameter when it is used\n    return mergeStyles(shadowConfig, myStyles);\n  }, [shadowConfig, myStyles]);\n\n  useAdoptedStylesheet(MY_COMPONENT_STYLESHEET_KEY);\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Upstream Remote for Fluent UI\nDESCRIPTION: Command to set up the upstream remote pointing to the main Microsoft Fluent UI repository.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/dev-env.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream https://github.com/microsoft/fluentui.git\n```\n\n----------------------------------------\n\nTITLE: Installing Fluent UI React Components for SSR\nDESCRIPTION: Commands to add the @fluentui/react-components dependency using either Yarn or NPM package managers.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/SSR/SSR.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Using Yarn\nyarn add @fluentui/react-components\n\n# Using NPM\nnpm install @fluentui/react-components\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for @fluentui/react-skeleton Stories in JavaScript\nDESCRIPTION: This code snippet shows how to configure the Storybook module exports to include story files from the @fluentui/react-skeleton package. It specifies the glob patterns for both MDX and TypeScript/TSX story files.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-skeleton/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-skeleton/stories/src/**/*.stories.mdx', '../packages/react-components/react-skeleton/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Basic FluentUI Performance Test Commands\nDESCRIPTION: Core commands for running performance tests, including full build and test-only options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/perf-test/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn just perf-test\nyarn just run-perf-test\n```\n\n----------------------------------------\n\nTITLE: Custom Icon Accordion DOM Structure\nDESCRIPTION: Shows the expected DOM output for a custom icon accordion implementation, demonstrating proper ARIA attributes and roles for accessibility.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-accordion/library/docs/Spec.md#2025-04-20_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <div role=\"heading\">\n    <div role=\"button\" aria-expanded=\"false\" aria-controls=\"sect1\" id=\"accordion1\">\n      First Panel\n      <svg>CustomIcon</svg>\n    </div>\n  </div>\n  <div id=\"sect1\" role=\"region\" aria-labelledby=\"accordion1\">This is the content of the first Panel</div>\n  <div role=\"heading\">\n    <div role=\"button\" aria-expanded=\"false\" aria-controls=\"sect2\" id=\"accordion2\">\n      Second Panel\n      <svg>AnotherCustomIcon</svg>\n    </div>\n  </div>\n  <div id=\"sect2\" role=\"region\" aria-labelledby=\"accordion2\">This is the content of the second Panel</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Overflow Constants\nDESCRIPTION: Constant data attributes for tracking overflow behavior in UI elements\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-overflow/library/etc/react-priority-overflow.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const DATA_OVERFLOW_ITEM = 'data-overflow-item';\nexport const DATA_OVERFLOW_MENU = 'data-overflow-menu';\nexport const DATA_OVERFLOWING = 'data-overflowing';\n```\n\n----------------------------------------\n\nTITLE: Proposed makeOverrides() Implementation with Simplified Style Definitions\nDESCRIPTION: Introduces a new approach to style definitions that eliminates matcher functions, reduces React hooks, and improves performance by moving matching logic to mergeClasses calls\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/make-overrides.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { mergeClasses, makeOverrides } from '@fluentui/react-make-styles';\n\nconst useStyles = makeStyles({\n  /* 👍 no matchers, no need to execute on each render */\n  root: { color: 'red' },\n  rootPrimary: { color: 'blue' },\n\n  /* 👍 styles for each slot are defined together (not a requirement) */\n  icon: { background: 'black' },\n  iconPrimary: { background: 'white' },\n});\n\nfunction Component() {\n  /* 👍 a single call of React hook */\n  const classes = useStyles();\n\n  return (\n    <div\n      className={mergeClasses(\n        classes.root /* The concept of matching is replaced with selective classname concat */,\n        props.primary && classes.rootPrimary,\n        props.className,\n      )}\n    >\n      {props.icon && (\n        <div className={mergeClasses(classes.icon, props.primary && classes.iconPrimary, props.icon.className)} />\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using String Refs in React with Fluent UI\nDESCRIPTION: The code snippet demonstrates how to implement string refs in a Fluent UI component. String refs are used to access DOM elements or class components directly. This snippet illustrates the usage context and syntax required for setting up a reference.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-examples/src/react/Layer/docs/LayerDonts.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"ref='root'\"\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-jsx-runtime version\nDESCRIPTION: This patch updates the version of the `@fluentui/react-jsx-runtime` dependency. Bumping this package ensures that the `@fluentui/react-badge` component uses the latest features and bug fixes available in the JSX runtime.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nBump @fluentui/react-jsx-runtime to v9.0.53 ([PR #34034](https://github.com/microsoft/fluentui/pull/34034) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Implementing SelectedPeopleList Component Class\nDESCRIPTION: A specialized component for displaying a list of selected people items. Extends BasePeopleSelectedItemsList with specific rendering behavior.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_252\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class SelectedPeopleList extends BasePeopleSelectedItemsList {\n    // (undocumented)\n    static defaultProps: any;\n    // (undocumented)\n    protected renderItems: () => JSX.Element[];\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Portal Rendering with FluentProvider\nDESCRIPTION: Demonstrates how to use the Portal component within a FluentProvider, which will render content to the document body by default\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-portal/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<FluentProvider>\n  <Portal>Content rendered by default to Fluent's document.body</Portal>\n</FluentProvider>\n```\n\n----------------------------------------\n\nTITLE: Updating Types Over Interfaces in React\nDESCRIPTION: This update involves transitioning from interfaces to types within the React Tooltip component. This shift aims to enhance type safety and flexibility within the codebase, aligning with modern TypeScript practices and enabling more expressive type definitions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tooltip/library/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: React\nCODE:\n```\n\"Updating to types over interfaces ([PR #19865](https://github.com/microsoft/fluentui/pull/19865) by gcox@microsoft.com)\"\n```\n\n----------------------------------------\n\nTITLE: Using Custom JSX Runtime with React 17+ (Automatic Runtime)\nDESCRIPTION: Example of using the Fluent UI React JSX runtime with React 17+ to render a component with slots. This approach uses the @jsxImportSource directive for automatic JSX runtime and demonstrates how to use assertSlots to validate slot components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-jsx-runtime/README.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n/** @jsxImportSource @fluentui/react-jsx-runtime */\n\nimport { assertSlots } from '@fluentui/react-utilities';\n\nconst renderButton_unstable = (state: ButtonState) => {\n  const { iconOnly, iconPosition } = state;\n\n  assertSlots<ButtonSlots>(state);\n\n  return (\n    <state.root>\n      {iconPosition !== 'after' && state.icon && <state.icon />}\n      {!iconOnly && state.root.children}\n      {iconPosition === 'after' && state.icon && <state.icon />}\n    </state.root>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: List Component DOM Structure\nDESCRIPTION: Shows the default DOM structure rendered by the List component with ListItem children. By default, it uses semantic ul/li elements which can be overridden depending on specific needs.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-list/library/docs/Spec.md#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li></li>\n  <li></li>\n  <li></li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Applying CSS Classes to Checkbox Root in TSX\nDESCRIPTION: Example of applying a CSS class to the Checkbox for layout purposes, demonstrating the potential need for top-level className to be applied to the root DOM element.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/native-element-props.md#2025-04-20_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<Checkbox name=\"foo\" checked className=\"foo\">\n  sample\n</Checkbox>\n```\n\n----------------------------------------\n\nTITLE: Slot Structure for Field Component in JSX\nDESCRIPTION: This JSX snippet shows the slot structure for the Field component. It defines the layout and organization of elements within the field, ensuring a clear and accessible presentation of field components, validation messages, and hints.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-field/library/docs/Spec.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n<slots.root>\n  <slots.label {...slotProps.label} />\n  {slotProps.root.children}\n  <slots.validationMessage {...slotProps.validationMessage}>\n    <slots.validationMessageIcon {...slotProps.validationMessageIcon} />\n    {slotProps.validationMessage.children}\n  </slots.validationMessage>\n  <slots.hint {...slotProps.hint} />\n</slots.root>\n```\n\n----------------------------------------\n\nTITLE: Using HTMLElement.focus() in JavaScript for Modal Dialogs\nDESCRIPTION: This snippet demonstrates the use of HTMLElement.focus() method to activate the focus trap created by the useModalAttributes hook. It's crucial for managing focus in modal dialogs.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Utilities/FocusManagement/useModalAttributes/useModalAttributesDescription.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nHTMLElement.focus()\n```\n\n----------------------------------------\n\nTITLE: Adding Gaps and Styling to Line Chart\nDESCRIPTION: Minor version update introducing new line chart visualization features including gaps, dotted lines, and borders\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/CHANGELOG.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Line chart enhancement for version 5.3.0\n// Adds support for gaps, dotted lines, and chart borders\n```\n\n----------------------------------------\n\nTITLE: Understanding Cypress cy.contains() Behavior\nDESCRIPTION: Explains the behavior of `cy.contains()` which might return unexpected elements due to substring matches. It is important to use precise selectors or additional parameters to avoid unintended matches. Here, the `cy.contains(selector, text)` is leveraged to specify a CSS selector before the text.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/e2e-testing-with-cypress.md#2025-04-20_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <label>a field <input type=\"text\" /></label>\n  <button>a</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main Configuration\nDESCRIPTION: JavaScript configuration for adding the Fluent UI addon to Storybook's main configuration file.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-storybook-addon/README.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  addons: ['@fluentui/react-storybook-addon'],\n};\n```\n\n----------------------------------------\n\nTITLE: Using State for Context Value - TypeScript\nDESCRIPTION: Defines the context value in the component's state to manage prop changes. The context is memoized to avoid unnecessary rerenders, relying on React useState and useMemo hooks.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/context-values.md#2025-04-20_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// ⚠ simplified example\n\nfunction useBazState(props) {\n  const { inline, size } = props;\n  const [open, setOpen] = React.useState();\n\n  const contextValue = React.useMemo(() => ({ inline, open }), [inline, open]);\n  const state = {\n    inline,\n    size,\n    open,\n    // 👇 \"contextValue\" is a part of component's state\n    contextValue,\n  };\n\n  return state;\n}\n\nfunction renderBaz(state) {\n  // 👇 \"value\" is memoized, consumer components will not rerender without need\n  return (\n    <SampleContext.Provider value={state.contextValue}>\n      <div />\n    </SampleContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Font Weight Component in Storybook Canvas\nDESCRIPTION: This JSX snippet renders the FontWeight component within a Storybook Canvas, hiding the source code.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-theme/stories/src/Theme/fonts/index.stories.mdx#2025-04-20_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas withSource=\"none\">\n  <FontWeight />\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Basic Input Implementation in Fluent UI Northstar (v0)\nDESCRIPTION: A simple example of a basic Input component with a label in Fluent UI Northstar (v0). This shows the simpler API where the label is a direct prop of the Input component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Input.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { Input, Text, Flex } from '@fluentui/react-northstar';\n\nconst InputV0BasicExample = () => {\n  return <Input label=\"Search\" />;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining RadioGroup Methods in FluentUI\nDESCRIPTION: Lists the protected methods available in the RadioGroup component, which handle changes to the name and value properties.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/radio-group/README.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### **Methods**\n\n| Name           | Privacy   | Description | Parameters | Return | Inherited From |\n| -------------- | --------- | ----------- | ---------- | ------ | -------------- |\n| `nameChanged`  | protected |             |            | `void` |                |\n| `valueChanged` | protected |             |            | `void` |                |\n```\n\n----------------------------------------\n\nTITLE: Original makeStyles() Implementation with Matchers\nDESCRIPTION: Demonstrates the current implementation of makeStyles() with matcher functions that are executed on each render, causing performance overhead\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/make-overrides.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { mergeClasses, makeStyles } from '@fluentui/react-make-styles';\n\nconst useRootStyles = makeStyles<TSelectors>([\n  [null, { color: 'red' }],\n  [s => s.primary /* <- a matcher function, will be executed on each render */, { color: 'blue' }],\n]);\n\nconst useIconStyles = makeStyles<TSelectors>([\n  /* styles for each slot are defined separately */\n  [null, { background: 'black' }],\n  [s => s.primary, { background: 'white' }],\n]);\n\nfunction Component() {\n  const rootClasses = useRootStyles();\n  const iconClasses = useIconStyles();\n\n  return (\n    <div className={mergeClasses(rootClasses, props.className)}>\n      {props.icon && <div className={mergeClasses(iconClasses, props.icon.className)} />}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.97.2\nDESCRIPTION: This update highlights the maintenance efforts for the @fluentui/react library with the transition to version 8.97.2.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/azure-themes/CHANGELOG.md#2025-04-20_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.97.2 ([PR #24947](https://github.com/microsoft/fluentui/pull/24947) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Defining Responsive Container Component in TypeScript\nDESCRIPTION: The ResponsiveContainer constant exports a functional component designed for responsive layouts, ensuring that charts adapt to varying screen sizes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/etc/react-charting.api.md#2025-04-20_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const ResponsiveContainer: React_2.FC<IResponsiveContainerProps>;\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Metadata and Package Information in JSX\nDESCRIPTION: Imports the Meta component from Storybook addon-docs and retrieves package version information from package.json. This code is used to set up the Storybook documentation page and display the current version of the Fluent UI Web Components package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/_docs/concepts/introduction.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs';\nimport pkg from '../../../package.json';\n\n<Meta title=\"Concepts/Introduction\" />\n\n<h2>\n  Fluent UI Web Components <span>v{pkg.version}</span>\n</h2>\n```\n\n----------------------------------------\n\nTITLE: Defining Scatter Plot and Scene Components in TypeScript\nDESCRIPTION: TypeScript interfaces for scatter plots and 3D scene elements in Plotly.js. Includes definitions for scatter data, line styles, markers, and scene axis configurations used in creating interactive data visualizations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/chart-utilities/etc/chart-utilities.api.md#2025-04-20_snippet_36\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport type ScatterData = PlotData;\n\n// @public (undocumented)\nexport interface ScatterLine {\n    // (undocumented)\n    color: Color;\n    // (undocumented)\n    dash: Dash;\n    // (undocumented)\n    shape: 'linear' | 'spline' | 'hv' | 'vh' | 'hvh' | 'vhv';\n    // (undocumented)\n    simplify: boolean;\n    // (undocumented)\n    smoothing: number;\n    // (undocumented)\n    width: number;\n}\n\n// @public (undocumented)\nexport type ScatterMarker = PlotMarker;\n\n// @public (undocumented)\nexport interface ScatterMarkerLine {\n    // (undocumented)\n    autocolorscale?: boolean | undefined;\n    // (undocumented)\n    cauto?: boolean | undefined;\n    // (undocumented)\n    cmax?: number | undefined;\n    // (undocumented)\n    cmid?: number | undefined;\n    // (undocumented)\n    cmin?: number | undefined;\n    // (undocumented)\n    color: Color;\n    // (undocumented)\n    coloraxis?: string | undefined;\n    // (undocumented)\n    colorscale?: ColorScale | undefined;\n    // (undocumented)\n    reversescale?: boolean | undefined;\n    // (undocumented)\n    width: number | number[];\n}\n\n// @public (undocumented)\nexport interface SceneAxis extends Axis {\n    // (undocumented)\n    backgroundcolor: Color;\n    // (undocumented)\n    showaxeslabels: boolean;\n    // (undocumented)\n    showbackground: boolean;\n    // (undocumented)\n    spikesides: boolean;\n}\n\n// @public (undocumented)\nexport interface SelectionRange {\n    // (undocumented)\n    x: number[];\n    // (undocumented)\n    y: number[];\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Attachment Component in FluentUI v0\nDESCRIPTION: Example showing how to implement an Attachment component in FluentUI v0 using slot props to define header, description, icon, and action properties.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-migration-v0-v9/stories/src/Attachment/AttachmentDescription.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Attachment\n  header=\"Document.docx\"\n  description=\"800 KB\"\n  icon={<WordColorIcon />}\n  action={{\n    icon: <CloseIcon />,\n    onClick: () => alert('Remove clicked'),\n  }}\n  progress={45}\n/>\n```\n\n----------------------------------------\n\nTITLE: Version History Entry Format\nDESCRIPTION: Standard format used for version history entries in the changelog, showing version number, date, comparison link and patches.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/ssr-tests/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.0.0](https://github.com/microsoft/fluentui/tree/ssr-tests_v1.0.0)\n\nMon, 02 Aug 2021 07:36:20 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/ssr-tests_v1.0.0..ssr-tests_v1.0.0)\n\n### Patches\n\n- Bump @fluentui/public-docsite-resources to v8.1.41 ([PR #19204](https://github.com/microsoft/fluentui/pull/19204) by lingfan.gao@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories for Fluent UI React Textarea\nDESCRIPTION: This code snippet shows how to specify the stories glob patterns in the Storybook configuration file to include Fluent UI React Textarea stories. It targets both MDX and TypeScript/TSX story files.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-textarea/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-textarea/stories/src/**/*.stories.mdx', '../packages/react-components/react-textarea/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.94.3\nDESCRIPTION: This report highlights the patching stage for @fluentui/react as the library updates to version 8.94.3.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/azure-themes/CHANGELOG.md#2025-04-20_snippet_24\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.94.3 ([PR #24701](https://github.com/microsoft/fluentui/pull/24701) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Fixing aria-valuenow React SpinButton\nDESCRIPTION: This patch removes the `aria-valuenow` attribute from the native input element within the React SpinButton component. This fix likely addresses an accessibility issue or a conflict with how screen readers interpret the value of the spin button.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-spinbutton/library/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nfix: remove aria-valuenow from native input element ([PR #32360](https://github.com/microsoft/fluentui/pull/32360) by sarah.higley@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Field Slots Definition\nDESCRIPTION: This TypeScript code defines the `FieldSlots` type, which specifies the customizable slots within the Field component.  Slots allow users to replace or customize specific parts of the Field's rendering, such as the root element, label, validation message, validation message icon, and hint text. Each slot is defined using the `Slot` utility type.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-field/library/docs/Spec.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FieldSlots = {\n  root: NonNullable<Slot<'div'>>;\n\n  /**\n   * The label associated with the field.\n   */\n  label?: Slot<typeof Label>;\n\n  /**\n   * A message about the validation state. By default, this is an error message, but it can be a success, warning, or\n   * custom message by setting `validationState`.\n   */\n  validationMessage?: Slot<'div'>;\n\n  /**\n   * The icon associated with the `validationMessage`. This will only be displayed if `validationMessage` is set.\n   *\n   * The default depends on `validationState`:\n   * * `error` - `<ErrorCircle12Filled />`\n   * * `warning` - `<Warning12Filled />`\n   * * `success` - `<CheckmarkCircle12Filled />`\n   * * `none` - `null`\n   */\n  validationMessageIcon?: Slot<'span'>;\n\n  /**\n   * Additional hint text below the field.\n   */\n  hint?: Slot<'div'>;\n};\n\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-utilities version\nDESCRIPTION: This patch updates the version of the `@fluentui/react-utilities` dependency.  Bumping this package ensures that the `@fluentui/react-badge` component uses the latest utility functions and bug fixes available in the utilities package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nBump @fluentui/react-utilities to v9.18.20 ([PR #33631](https://github.com/microsoft/fluentui/pull/33631) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Creating a State Manager with @fluentui/state in Typescript\nDESCRIPTION: This code snippet demonstrates how to create a state manager using `@fluentui/state`. It defines the state and actions for an input component, and then uses `createManager` to create a manager instance. The manager is initialized with an initial state value of 'Hello world!'.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/state/README.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createManager, ManagerFactory } from '@fluentui/state';\n\ntype InputState = { value: string };\ntype InputActions = { change: (value: string) => void };\n\nconst createInputManager: ManagerFactory<InputState, InputActions> = config =>\n  createManager<InputState, InputActions>({\n    ...config,\n    actions: {\n      change: (value: string) => () => ({ value }),\n    },\n    state: { value: '', ...config.state },\n  });\nconst manager = createInputManager({ state: { value: 'Hello world!' } });\n```\n\n----------------------------------------\n\nTITLE: Styled Component Creator in TypeScript\nDESCRIPTION: Function to create a styled component with custom styles and props. It supports both class and functional components and can be customized with various options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/utilities/etc/utilities.api.md#2025-04-20_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function styled<TComponentProps extends IPropsWithStyles<TStyleProps, TStyleSet>, TStyleProps, TStyleSet extends IStyleSetBase>(Component: React_2.ComponentClass<TComponentProps> | React_2.FunctionComponent<TComponentProps>, baseStyles: IStyleFunctionOrObject<TStyleProps, TStyleSet>, getProps?: (props: TComponentProps) => Partial<TComponentProps>, customizable?: ICustomizableProps, pure?: boolean): React_2.FunctionComponent<TComponentProps>;\n```\n\n----------------------------------------\n\nTITLE: Custom Heading Accordion DOM Structure\nDESCRIPTION: Shows the expected DOM output for a custom heading accordion implementation with semantic heading elements and proper ARIA attributes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-accordion/library/docs/Spec.md#2025-04-20_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <h1>\n    <div role=\"button\" aria-expanded=\"false\" aria-controls=\"sect1\" id=\"accordion1\">\n      <svg>Chevron Icon</svg>\n      First Panel\n    </div>\n  </h1>\n  <div id=\"sect1\" role=\"region\" aria-labelledby=\"accordion1\">This is the content of the first Panel</div>\n  <h1>\n    <div role=\"button\" aria-expanded=\"false\" aria-controls=\"sect2\" id=\"accordion2\">\n      <svg>Chevron Icon</svg>\n      Second Panel\n    </div>\n  </h1>\n  <div id=\"sect2\" role=\"region\" aria-labelledby=\"accordion2\">This is the content of the second Panel</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Partitioning Breadcrumb Items in JavaScript\nDESCRIPTION: JavaScript function for partitioning breadcrumb items into displayed and overflow items based on maximum display count and overflow index.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-breadcrumb/library/docs/Spec.md#2025-04-20_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst DEFAULT_OVERFLOW_INDEX = 1;\nexport type PartitionBreadcrumbItemsOptions<T> = {\n  items: readonly T[];\n  maxDisplayedItems?: number;\n  overflowIndex?: number;\n};\n\nexport type PartitionBreadcrumbItems<T> = {\n  startDisplayedItems: readonly T[];\n  overflowItems?: readonly T[];\n  endDisplayedItems?: readonly T[];\n};\n\n/**\n * Get the displayed items and overflow items based on the array of BreadcrumbItems.\n *\n * @param options - Configure the partition options\n *\n * @returns Three arrays split into displayed items and overflow items based on maxDisplayedItems.\n */\nexport const partitionBreadcrumbItems = <T>(\n  options: PartitionBreadcrumbItemsOptions<T>,\n): PartitionBreadcrumbItems<T> => {\n  // implementation\n  return {\n    startDisplayedItems,\n    overflowItems,\n    endDisplayedItems,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Updating jest.config.js for Preview Packages\nDESCRIPTION: Diff showing how to update the Jest configuration file when converting a package to use the preview naming convention.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/new-release-process-v9-packages.md#2025-04-20_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\nmodule.exports = {\n-  displayName: 'react-control',\n+  displayName: 'react-control-preview',\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Carousel Render Functions\nDESCRIPTION: TypeScript declarations for Carousel component render functions that handle different parts of the carousel UI like navigation container, buttons, slider and viewport.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-carousel/library/etc/react-carousel.api.md#2025-04-20_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const renderCarouselNavContainer_unstable: (state: CarouselNavContainerState) => JSX.Element;\nexport const renderCarouselNavImageButton_unstable: (state: CarouselNavImageButtonState) => JSX.Element;\nexport const renderCarouselSlider_unstable: (state: CarouselSliderState, contextValues: CarouselSliderContextValues) => JSX.Element;\nexport const renderCarouselViewport_unstable: (state: CarouselViewportState, contextValues: CarouselSliderContextValues) => JSX.Element;\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for @fluentui/web-components\nDESCRIPTION: This section lists all the import statements used by the @fluentui/web-components package, primarily importing from @microsoft/fast-element and @microsoft/fast-web-utilities.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CaptureType } from '@microsoft/fast-element';\nimport { CSSDirective } from '@microsoft/fast-element';\nimport { Direction } from '@microsoft/fast-web-utilities';\nimport { ElementStyles } from '@microsoft/fast-element';\nimport { ElementViewTemplate } from '@microsoft/fast-element';\nimport { FASTElement } from '@microsoft/fast-element';\nimport { FASTElementDefinition } from '@microsoft/fast-element';\nimport type { HostBehavior } from '@microsoft/fast-element';\nimport type { HostController } from '@microsoft/fast-element';\nimport { HTMLDirective } from '@microsoft/fast-element';\nimport { Orientation } from '@microsoft/fast-web-utilities';\nimport { SyntheticViewTemplate } from '@microsoft/fast-element';\nimport { ViewTemplate } from '@microsoft/fast-element';\n```\n\n----------------------------------------\n\nTITLE: Table Cell with Media (HTML)\nDESCRIPTION: Illustrates the HTML structure of a table cell containing media and text content, corresponding to the React example using TableCellLayout. The `FileIcon` component in the React example corresponds to a generic `span` element in the HTML output.  The specific icon displayed would depend on the implementation of `FileIcon`.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-table/library/docs/Spec.md#2025-04-20_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<tr>\n  <td><span>FileIcon</span> Cell</td>\n</tr>\n```\n\n----------------------------------------\n\nTITLE: Defining Focusable Props and API\nDESCRIPTION: This interface outlines the properties associated with focusable elements, including conditions and flags that control their behavior in the context of focus management. The FocusableAPI interface provides crucial methods for interacting with focusable elements within the application.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tabster/etc/react-tabster.api.md#2025-04-20_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\ninterface FocusableProps {\n    excludeFromMover?: boolean;\n    ignoreAriaDisabled?: boolean;\n    ignoreKeydown?: {\n        Tab?: boolean;\n        Escape?: boolean;\n        Enter?: boolean;\n        ArrowUp?: boolean;\n        ArrowDown?: boolean;\n        ArrowLeft?: boolean;\n        ArrowRight?: boolean;\n        PageUp?: boolean;\n        PageDown?: boolean;\n        Home?: boolean;\n        End?: boolean;\n    };\n    // (undocumented)\n    isDefault?: boolean;\n    // (undocumented)\n    isIgnored?: boolean;\n}\n\n// @public (undocumented)\ninterface FocusableAPI extends Disposable {\n    // (undocumented)\n    findAll(options: FindAllProps): HTMLElement[];\n    // (undocumented)\n    findDefault(options: FindDefaultProps, out?: FindFocusableOutputProps): HTMLElement | null;\n    // (undocumented)\n    findElement(options: FindFocusableProps, out?: FindFocusableOutputProps): HTMLElement | null | undefined;\n    // (undocumented)\n    findFirst(options: FindFirstProps, out?: FindFocusableOutputProps): HTMLElement | null | undefined;\n    // (undocumented)\n    findLast(options: FindFirstProps, out?: FindFocusableOutputProps): HTMLElement | null | undefined;\n    // (undocumented)\n    findNext(options: FindNextProps, out?: FindFocusableOutputProps): HTMLElement | null | undefined;\n    // (undocumented)\n    findPrev(options: FindNextProps, out?: FindFocusableOutputProps): HTMLElement | null | undefined;\n    // (undocumented)\n    getProps(element: HTMLElement): FocusableProps;\n    // (undocumented)\n    isAccessible(element: HTMLElement): boolean;\n    // (undocumented)\n    isFocusable(element: HTMLElement, includeProgrammaticallyFocusable?: boolean, noVisibleCheck?: boolean, noAccessibleCheck?: boolean): boolean;\n    // (undocumented)\n    isVisible(element: HTMLElement): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Border Radius Tokens in TypeScript\nDESCRIPTION: This snippet defines the BorderRadiusTokens type, which encapsulates various border radius values as strings. This type ensures that consistent border radius values are used throughout the application.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/tokens/etc/tokens.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type BorderRadiusTokens = {\n    borderRadiusNone: string;\n    borderRadiusSmall: string;\n    borderRadiusMedium: string;\n    borderRadiusLarge: string;\n    borderRadiusXLarge: string;\n    borderRadiusCircular: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Years to a Date - TypeScript\nDESCRIPTION: This function allows for the addition of a certain number of years to a specified date, producing a new Date object. This is crucial for year-over-year calculations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/date-time-utilities/etc/date-time-utilities.api.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport function addYears(date: Date, years: number): Date;\n```\n\n----------------------------------------\n\nTITLE: Version Tracking and Dependency Management\nDESCRIPTION: Tracks incremental version updates and package dependency bumps for @fluentui/react-field. Includes updates to related packages like react-context-selector, react-jsx-runtime, and react-label.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-field/library/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.2.5](https://github.com/microsoft/fluentui/tree/@fluentui/react-field_v9.2.5)\n```\n\n----------------------------------------\n\nTITLE: Defining IconBase Class Component\nDESCRIPTION: Defines `IconBase` as a React class component, extending `React_2.Component<IIconProps, IIconState>`. It renders a JSX element. The component receives `IIconProps` as props.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_79\n\nLANGUAGE: typescript\nCODE:\n```\nexport class IconBase extends React_2.Component<IIconProps, IIconState> {\n    constructor(props: IIconProps);\n    // (undocumented)\n    render(): JSX.Element;\n}\n```\n\n----------------------------------------\n\nTITLE: Version History Entry - FluentUI React Aria\nDESCRIPTION: Sample changelog entry showing version updates, dates, and dependency patches\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-aria/library/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.3.25](https://github.com/microsoft/fluentui/tree/@fluentui/react-aria_v9.3.25)\n\nWed, 28 Jun 2023 11:12:22 GMT\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-aria_v9.3.24..@fluentui/react-aria_v9.3.25)\n\n### Patches\n\n- Bump @fluentui/react-utilities to v9.10.0 ([PR #28320](https://github.com/microsoft/fluentui/pull/28320) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Installing @fluentui/state package with NPM\nDESCRIPTION: This command installs the `@fluentui/state` package as a dependency in your project using NPM. This will allow you to use the state management utilities provided by the package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/state/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @fluentui/state\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Focus Indicator Style - TypeScript\nDESCRIPTION: This function generates a custom focus indicator style based on the provided style options and a selector. It allows developers to customize how focus is visually indicated within the application, ensuring better visual accessibility.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tabster/etc/react-tabster.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport function createCustomFocusIndicatorStyle<TStyle extends GriffelStyle | GriffelResetStyle>(style: TStyle, { selector: selectorType, customizeSelector, }?: CreateCustomFocusIndicatorStyleOptions): TStyle extends GriffelStyle ? GriffelStyle : GriffelResetStyle;\n```\n\n----------------------------------------\n\nTITLE: Creating a Comparison Table in Markdown\nDESCRIPTION: This code snippet demonstrates how to create a comparison table in Markdown. The table compares three Fluent UI projects: React Components (v9), React (v8), and Web Components, providing details on their overview, usage, documentation, and other relevant information.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/README.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- prettier-ignore-start -->\n|   | React Components (v9) | React (v8) | Web Components |\n|---| ----- | --------------- | -------------- |\n| **Overview**    | New, future-proof and forward looking | Mature | Web Component implementation of Fluent UI. |\n| **Used By**     | Microsoft 365 | Office | Edge |\n| **Read Me**     | [README.md](/packages/react-components/react-components/README.md) | [README.md](/packages/react/README.md)| [README.md](/packages/web-components/README.md) |\n| **Changelog** | [CHANGELOG.md](/packages/react-components/react-components/CHANGELOG.md) | [CHANGELOG.md](/packages/react/CHANGELOG.md) | [CHANGELOG.md](/packages/web-components/CHANGELOG.md) |\n| **Repo**        | [packages/react-components](/packages/react-components/react-components) | [./packages/react](/packages/react) | [./packages/web-components](/packages/web-components) |\n| **Quick Start** | [Quick Start](https://react.fluentui.dev/?path=/docs/concepts-developer-quick-start--docs) | [Quick Start](https://developer.microsoft.com/en-us/fluentui#/get-started/web) | [See README.md](https://github.com/microsoft/fluentui/tree/master/packages/web-components/README.md) |\n| **Docs**        | [https://react.fluentui.dev/](https://react.fluentui.dev/) | [aka.ms/fluentui-react](https://aka.ms/fluentui-react) | [aka.ms/fluentui-web-components](https://aka.ms/fluentui-web-components) |\n| **NPM**         | `@fluentui/react-components` | `@fluentui/react`| `@fluentui/web-components` |\n| **Version**     | [![npm version](https://img.shields.io/npm/v/@fluentui/react-components?style=flat-square)](https://www.npmjs.com/package/@fluentui/react-components) | [![npm version](https://img.shields.io/npm/v/@fluentui/react?style=flat-square)](https://www.npmjs.com/package/@fluentui/react) | [![npm version](https://img.shields.io/npm/v/@fluentui/web-components/beta?style=flat-square)](https://www.npmjs.com/package/@fluentui/web-components/v/3.0.0-beta.15) |\n| **Issues**      | [![Fluent UI React Components GitHub Issues](https://img.shields.io/github/issues/microsoft/fluentui/Fluent%20UI%20react-components%20(v9)?label=issues&style=flat-square)](https://github.com/microsoft/fluentui/issues?q=is%3Aissue+is%3Aopen+label%3A%22Fluent+UI+react-components+%28v9%29%22) | [![Fluent UI React GitHub Issues](https://img.shields.io/github/issues/microsoft/fluentui/Fluent%20UI%20react%20(v8)?label=issues&style=flat-square)](https://github.com/microsoft/fluentui/issues?q=is%3Aissue+is%3Aopen+label%3A%22Fluent+UI+react+(v8)%22) | [![Fluent UI Web Components GitHub Issues](https://img.shields.io/github/issues/microsoft/fluentui/web-components?label=issues&style=flat-square)](https://github.com/microsoft/fluentui/issues?q=is%3Aissue+is%3Aopen+label%3A%22web-components%22) |\n<!-- prettier-ignore-end -->\n```\n\n----------------------------------------\n\nTITLE: Run Migration on Specific Package - Shell\nDESCRIPTION: This command initiates the migration for a specific package named '@fluentui/example'. It is useful for targeting particular package migrations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/migrate-converged-pkg/README.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:migrate-converged-pkg --name='@fluentui/example'\n```\n\n----------------------------------------\n\nTITLE: Updating AccordionTitle Component Props in FluentUI\nDESCRIPTION: Example of the changes made to the AccordionTitle component in v0.45.0, where the content prop was changed to be a Box shorthand and the content classname was renamed to contentWrapper.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/CHANGELOG.md#2025-04-20_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\n<AccordionTitle\n  content={{ as: 'span', children: 'Title content' }}\n  className={{\n    contentWrapper: 'custom-content-wrapper-class'\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing ResizeGroup with CacheKey Optimization\nDESCRIPTION: Shows how to use cacheKey to optimize performance by reducing unnecessary DOM measurements. The cacheKey helps skip redundant size calculations for data objects with similar structures.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-examples/src/react/ResizeGroup/docs/ResizeGroupOverview.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Example of using cacheKey for performance optimization\nconst ResizeGroupWithCaching = () => {\n  const initialData = {\n    items: [...controlItems],\n    cacheKey: controlItems.map(item => item.key).join('|')\n  };\n\n  const onReduceData = (data) => {\n    const reducedItems = data.items.slice(0, -1);\n    return {\n      items: reducedItems,\n      cacheKey: reducedItems.map(item => item.key).join('|')\n    };\n  };\n\n  return (\n    <ResizeGroup\n      data={initialData}\n      onReduceData={onReduceData}\n      renderContent={(data) => data.items}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for Fluent UI React Button Stories in JavaScript\nDESCRIPTION: This code snippet demonstrates how to configure the Storybook module to include stories for the @fluentui/react-button package. It specifies the file paths for both MDX and TypeScript/TSX story files.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-button/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-button/stories/src/**/*.stories.mdx', '../packages/react-components/react-button/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Building Visual Regression Utilities Using Nx\nDESCRIPTION: This snippet provides the command to build the visual-regression-utilities library using Nx. It is essential for preparing the library for usage or further development.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/visual-regression-utilities/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx build visual-regression-utilities\n```\n\n----------------------------------------\n\nTITLE: Migrating SplitButton styles from FluentUI Northstar to FluentUI v9 in TypeScript\nDESCRIPTION: This snippet demonstrates the migration of SplitButton styles from FluentUI Northstar to FluentUI v9. It shows how to replace the old styling approach with the new makeStyles hook and tokens from FluentUI v9.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/SplitButton.stories.mdx#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// in split-button-styles.ts\nexport const splitButtonStyles1 = {\n  root: ({ variables: { colorSchemeDefault, isActionButton } }) => ({\n    ...(isActionButton && {\n      color: colorSchemeDefault.foreground,\n    }),\n  }),\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// in COMPONENT_NAME.styles.ts\nimport { makeStyles, tokens } from '@fluentui/react-components';\n\nexport const useStyles = makeStyles({\n  actionButton: {\n    color: tokens.colorNeutralForeground1,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Referencing PeoplePickerView Control\nDESCRIPTION: Reference declarations for the PeoplePickerView control in FluentUI Android library, showing the control name and links to source and demo implementations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/PeoplePickerPage/docs/android/PeoplePickerImplementation.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPeoplePickerView\n```\n\n----------------------------------------\n\nTITLE: TagPickerButton Styles Hook\nDESCRIPTION: Defines the hook for using the TagPickerButton styles. It takes TagPickerButtonState as input and returns TagPickerButtonState.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const useTagPickerButtonStyles_unstable: (state: TagPickerButtonState) => TagPickerButtonState;\"\n```\n\n----------------------------------------\n\nTITLE: Defining Color Palette Types in TypeScript\nDESCRIPTION: This snippet defines several color palette types, each specifying the valid keys for different color categories. This helps ensure that the correct color values are applied in the UI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/tokens/etc/tokens.api.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type ColorPaletteAnchor = 'colorPaletteAnchorBackground2' | 'colorPaletteAnchorForeground2' | 'colorPaletteAnchorBorderActive';\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type ColorPaletteBeige = 'colorPaletteBeigeBackground2' | 'colorPaletteBeigeForeground2' | 'colorPaletteBeigeBorderActive';\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type ColorPaletteBerry = 'colorPaletteBerryBackground1' | 'colorPaletteBerryBackground2' | 'colorPaletteBerryBackground3' | 'colorPaletteBerryForeground1' | 'colorPaletteBerryForeground2' | 'colorPaletteBerryForeground3' | 'colorPaletteBerryBorderActive' | 'colorPaletteBerryBorder1' | 'colorPaletteBerryBorder2';\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-utilities version\nDESCRIPTION: This patch updates the version of the `@fluentui/react-utilities` dependency.  Bumping this package ensures that the `@fluentui/react-badge` component uses the latest utility functions and bug fixes available in the utilities package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBump @fluentui/react-utilities to v9.19.0 ([PR #34166](https://github.com/microsoft/fluentui/pull/34166) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Customizing date x-axis tick values in React Charting\nDESCRIPTION: Added support for customizing the tick values on date x-axes in charts.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/CHANGELOG.md#2025-04-20_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Example usage:\n<Chart xAxisTickValues={...} />\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Tooltip Content Structure\nDESCRIPTION: The structure of the heavier asynchronous part of the Tooltip that gets loaded only when needed. This includes the Portal, positioning logic, and any other expensive operations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/future/async-import-hidden-components.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Portal>\n  <slots.root {...slotProps.root}>\n    {state.pointing && <div ref={state.arrowRef} className={state.arrowClassName} />}\n    <slots.content {...slotProps.content} />\n  </slots.root>\n</Portal>\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react to v8.42.5\nDESCRIPTION: This patch updates the @fluentui/react library to version 8.42.5, which includes important improvements. Refer to Pull Request #20408 for additional information.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/ts-minbar-test-react/CHANGELOG.md#2025-04-20_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.42.5 ([PR #20408](https://github.com/microsoft/fluentui/pull/20408) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Implementing BaseProgressBar Class in TypeScript\nDESCRIPTION: Defines the BaseProgressBar class which extends FASTElement. It implements core functionality for progress bar components, including value calculation and validation state management.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class BaseProgressBar extends FASTElement {\n    constructor();\n    // @internal\n    elementInternals: ElementInternals;\n    // @internal\n    max?: number;\n    // @internal\n    protected maxChanged(prev: number | undefined, next: number | undefined): void;\n    // @internal\n    min?: number;\n    protected minChanged(prev: number | undefined, next: number | undefined): void;\n    // @internal\n    get percentComplete(): number;\n    validationState: ProgressBarValidationState | null;\n    validationStateChanged(prev: ProgressBarValidationState | undefined, next: ProgressBarValidationState | undefined): void;\n    // @internal\n    value?: number;\n    // @internal\n    protected valueChanged(prev: number | undefined, next: number | undefined): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useAnimationFrame Hook in TypeScript\nDESCRIPTION: An internal hook that provides functionality for scheduling animation frames. Returns a tuple with a function to request an animation frame and a function to cancel it.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-utilities/etc/react-utilities.api.md#2025-04-20_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @internal\nexport function useAnimationFrame(): readonly [(fn: () => void, delay?: number | undefined) => number, () => void];\n```\n\n----------------------------------------\n\nTITLE: Date Manipulation Utility Functions\nDESCRIPTION: A set of date manipulation utility functions for adding days, months, weeks, and years to a Date object. These functions are marked as @public API.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-calendar-compat/library/etc/react-calendar-compat.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport function addDays(date: Date, days: number): Date;\n\n// @public\nexport function addMonths(date: Date, months: number): Date;\n\n// @public\nexport function addWeeks(date: Date, weeks: number): Date;\n\n// @public\nexport function addYears(date: Date, years: number): Date;\n```\n\n----------------------------------------\n\nTITLE: CalendarDay Component Declaration\nDESCRIPTION: Declaration of the CalendarDay component and its class names, which is responsible for rendering the day view in the calendar.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-calendar-compat/library/etc/react-calendar-compat.api.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport const CalendarDay: React_2.FunctionComponent<CalendarDayProps>;\n\n// @internal (undocumented)\nexport const calendarDayClassNames: SlotClassNames<CalendarDayStyles>;\n```\n\n----------------------------------------\n\nTITLE: Navigating to a Test Case\nDESCRIPTION: This snippet demonstrates how to navigate to a specific test case within the E2E testing environment. It leverages the `e2e.gotoTestCase` function, which simplifies navigating to examples based on the provided scenario name. Using `__filename` is recommended for safe refactoring, automatically extracting the scenario name from the filename.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/e2e/README.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"e2e.gotoTestCase(__filename)\"\n```\n\n----------------------------------------\n\nTITLE: Define OffsetShorthand type\nDESCRIPTION: Defines a type called `OffsetShorthand` which is simply a number. This provides a shorthand way to specify a uniform offset.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-positioning/etc/react-positioning.api.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type OffsetShorthand = number;\n```\n\n----------------------------------------\n\nTITLE: Rendering DefaultButtonShim Component in Fluent UI (JavaScript)\nDESCRIPTION: The DefaultButtonShim component provides a seamless interface that accepts the same properties as a v8 DefaultButton and renders them in the format of a v9 Button, maintaining backward compatibility while leveraging the latest design updates.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-migration-v8-v9/stories/src/CommandButtonShim/Description.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst DefaultButtonShim = (props) => {\n    return <Button {...props} />;\n};\n```\n\n----------------------------------------\n\nTITLE: React Bootstrap Button DOM Structure in HTML\nDESCRIPTION: Example DOM structure for a React Bootstrap button component showing a simple implementation with styling classes but no built-in icon support.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Button.md#2025-04-20_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<button type=\"button\" class=\"btn btn-secondary\">Secondary</button>\n```\n\n----------------------------------------\n\nTITLE: Defining OpenCardMode Enumeration in TypeScript\nDESCRIPTION: Enumeration defining modes for opening cards in the UI, with options for hover activation or hotkey activation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_236\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport enum OpenCardMode {\n    hotKey = 1,\n    hover = 0\n}\n```\n\n----------------------------------------\n\nTITLE: Version History Entry Format - Markdown\nDESCRIPTION: Standard format used for version history entries showing version number, date, comparison links, and patch details\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/azure-themes/CHANGELOG.md#2025-04-20_snippet_28\n\nLANGUAGE: markdown\nCODE:\n```\n## [8.4.4](https://github.com/microsoft/fluentui/tree/@fluentui/azure-themes_v8.4.4)\n\nTue, 19 Jul 2022 07:41:07 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/azure-themes_v8.4.3..@fluentui/azure-themes_v8.4.4)\n\n### Patches\n\n- Bump @fluentui/react to v8.82.0 ([PR #23968](https://github.com/microsoft/fluentui/pull/23968) by beachball)\n```\n\n----------------------------------------\n\nTITLE: TagPickerOptionGroup State Type\nDESCRIPTION: Defines the state type for the TagPickerOptionGroup component using OptionGroupState.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport type TagPickerOptionGroupState = OptionGroupState;\"\n```\n\n----------------------------------------\n\nTITLE: DialogBody Component Definition\nDESCRIPTION: Defines the DialogBody component as a forward-ref component accepting DialogBodyProps. It is intended to render the main content area of the dialog. It relies on ForwardRefComponent from '@fluentui/react-utilities'.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/etc/react-dialog.api.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const DialogBody: ForwardRefComponent<DialogBodyProps>;\"\n```\n\n----------------------------------------\n\nTITLE: Donut Chart Props Interface\nDESCRIPTION: Comprehensive configuration interface for Donut Chart component with multiple optional properties for customization, styling, and interaction\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charts/library/etc/react-charts.api.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface DonutChartProps {\n    calloutProps?: ChartPopoverProps;\n    calloutPropsPerDataPoint?: (dataPointCalloutProps: ChartDataPoint) => ChartPopoverProps;\n    className?: string;\n    componentRef?: React_2.RefObject<Chart>;\n    culture?: string;\n    data?: ChartProps;\n    height?: number;\n    hideLabels?: boolean;\n    hideLegend?: boolean;\n    hideTooltip?: boolean;\n    href?: string;\n    innerRadius?: number;\n    showLabelsInPercent?: boolean;\n    styles?: DonutChartStyles;\n    valueInsideDonut?: string | number;\n    width?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Icons with Stardust in HTML\nDESCRIPTION: Stardust leverages SVG for icon rendering enclosed in <span> elements. Each example intricately shows the SVG content tailored for presentation roles, focusing on enhancing clarity and compatibility, as shown by the distinct class names and attribute bindings.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Icon.md#2025-04-20_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"ui-icon ck cb ca\" role=\"img\" aria-hidden=\"true\">\n  <svg class=\"em ct cu en cw\" viewBox=\"8 8 16 16\" role=\"presentation\" focusable=\"false\">\n    <g class=\"ui-icon__outline eo\">\n      <path\n        d=\"M23.6968,12.0403c-0.1836-0.0786-0.3975-0.04-0.542,0.0981l-2.5317,2.4165C20.2212,14.9382,20,15.4514,20,16  c0,0.5483,0.2212,1.0615,0.623,1.4448l2.5317,2.4167C23.2495,19.9521,23.374,20,23.5,20c0.0664,0,0.1333-0.0132,0.1968-0.0403  C23.8809,19.8809,24,19.7002,24,19.5v-7C24,12.2998,23.8809,12.1191,23.6968,12.0403z M23,18.3315l-1.6865-1.6099v-0.0002  C21.1113,16.5286,21,16.2725,21,16s0.1113-0.5286,0.3135-0.7217L23,13.6685V18.3315z\"\n      ></path>\n      <path\n        d=\"M17.5,11H9.8193c-0.7056,0-1.3232,0.5393-1.4692,1.2822C8.1177,13.4619,8,14.7129,8,16s0.1177,2.5381,0.3501,3.7173  C8.4961,20.4607,9.1138,21,9.8193,21H17.5c0.8271,0,1.5-0.6729,1.5-1.5v-7C19,11.6729,18.3271,11,17.5,11z M18,19.5  c0,0.2756-0.2241,0.5-0.5,0.5H9.8193c-0.2285,0-0.4341-0.2-0.4878-0.4756C9.1113,18.4082,9,17.2224,9,16  s0.1113-2.4082,0.3315-3.5249C9.3853,12.2,9.5908,12,9.8193,12H17.5c0.2759,0,0.5,0.2244,0.5,0.5V19.5z\"\n      ></path>\n    </g>\n    <g class=\"ui-icon__filled\">\n      <path\n        d=\"M23.6968,12.0403c-0.1841-0.0786-0.3975-0.04-0.542,0.0981l-2.5317,2.4165C20.2212,14.9382,20,15.4514,20,16  c0,0.5483,0.2212,1.0615,0.623,1.4448l2.5317,2.4167C23.2495,19.9521,23.374,20,23.5,20c0.0664,0,0.1333-0.0132,0.1968-0.0403  C23.8809,19.8809,24,19.7002,24,19.5v-7C24,12.2998,23.8809,12.1191,23.6968,12.0403z\"\n      ></path>\n      <path\n        d=\"M17.5,11H9.8193c-0.7056,0-1.3232,0.5393-1.4692,1.2822C8.1177,13.4619,8,14.7129,8,16s0.1177,2.5381,0.3501,3.7173  C8.4961,20.4607,9.1138,21,9.8193,21H17.5c0.8271,0,1.5-0.6729,1.5-1.5v-7C19,11.6729,18.3271,11,17.5,11z\"\n      ></path>\n    </g>\n  </svg>\n</span>\n```\n\n----------------------------------------\n\nTITLE: Stack Item Component Type and Interface Definitions in TypeScript\nDESCRIPTION: Collection of type definitions and interfaces for the StackItem component, including slots, styles, tokens, and related type utilities.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_180\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type IStackItemSlot = ISlotProp<IStackItemProps>;\n\n// @public (undocumented)\nexport interface IStackItemSlots {\n    // (undocumented)\n    root?: IHTMLSlot;\n}\n\n// @public (undocumented)\nexport type IStackItemStyles = IComponentStyles<IStackItemSlots>;\n\n// @public (undocumented)\nexport type IStackItemStylesReturnType = ReturnType<Extract<IStackItemComponent['styles'], Function>>;\n\n// @public (undocumented)\nexport type IStackItemTokenReturnType = ReturnType<Extract<IStackItemComponent['tokens'], Function>>;\n\n// @public (undocumented)\nexport interface IStackItemTokens {\n    margin?: number | string;\n    padding?: number | string;\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Motion Component Breaking with Custom Components\nDESCRIPTION: Example showing how the CSS-based motion approach can break when used with custom components that don't properly handle className props, highlighting a limitation of the approach.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/motion-definition-n-apis.md#2025-04-20_snippet_32\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createMotionComponent, fadeEnterSlow } from 'some-pkg';\n\nconst FadeEnterSlow = createMotionComponent(fadeEnterSlow);\n\nconst CustomComponent = React.forwardRef((props, ref) => {\n  // 💥 This breaks the animation\n  //    To fix it, we need to merge classes i.e. do `mergeClasses(props.className, \"my-classname\")`\n  return <div className=\"my-classname\" ref={ref} />;\n});\n\nfunction MyComponent() {\n  return (\n    <FadeEnterSlow>\n      <CustomComponent />\n    </FadeEnterSlow>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Meta Component from Storybook in JavaScript\nDESCRIPTION: This code snippet imports the Meta component from Storybook's addon-docs package, which is used to define metadata for the documentation page.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Theme.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs';\n```\n\n----------------------------------------\n\nTITLE: Version Comparison Links in Markdown\nDESCRIPTION: Markdown links showing version comparison URLs for the package releases.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-resources/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/public-docsite-resources_v8.1.41..@fluentui/public-docsite-resources_v8.1.41)\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for Fluent UI React Popover\nDESCRIPTION: This JavaScript snippet configures Storybook to include stories from the react-popover package of Fluent UI. It specifies the file pattern to identify relevant story files in TypeScript or MDX formats. This configuration is crucial for developers looking to visualize and test popover components within Storybook.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-popover/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  stories: ['../packages/react-components/react-popover/stories/src/**/*.stories.mdx', '../packages/react-components/react-popover/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: BaseExtendedPeoplePicker Component Definition in TypeScript\nDESCRIPTION: Defines the BaseExtendedPeoplePicker component that extends BaseExtendedPicker with IPersonaProps and IExtendedPeoplePickerProps. Used for selecting and managing people items.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport class BaseExtendedPeoplePicker extends BaseExtendedPicker<IPersonaProps, IExtendedPeoplePickerProps> {\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage of FluentProvider inside shadow DOM\nDESCRIPTION: Shows an incorrect way of using FluentProvider inside shadow DOM, which will not render correctly. This example is provided for educational purposes to highlight the importance of keeping FluentProvider in the light DOM.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/WebComponentsInterop/UsingFluentReactWithWebComponents.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// ❌ This will not render correctly, for example purposes only ❌\nimport { root } from '@fluentui-contrib/react-shadow';\nimport { FluentProvider, webLightTheme, Button } from '@fluentui/react-components';\n\n/* This is the shadow root */\n<root.div>\n  <FluentProvider theme={webLightTheme}>\n    <Button>Fluent React Button in shadow DOM</Button>\n  </FluentProvider>\n</root.div>;\n```\n\n----------------------------------------\n\nTITLE: Installing Fluent UI React Charts package using yarn\nDESCRIPTION: Command to install the Fluent UI React charts package using yarn package manager.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/chart-docsite/src/Introduction.mdx#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @fluentui/react-charts\n```\n\n----------------------------------------\n\nTITLE: TypeScript API Declaration for FluentUI Chart Web Components\nDESCRIPTION: A comprehensive API declaration for the @fluentui/chart-web-components package. It defines DonutChart and HorizontalBarChart classes with their properties, methods, and associated definitions. The file is auto-generated by API Extractor and not meant to be edited manually.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/chart-web-components/docs/chart-web-components.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ElementStyles } from '@microsoft/fast-element';\nimport { ElementViewTemplate } from '@microsoft/fast-element';\nimport { FASTElement } from '@microsoft/fast-element';\nimport { FASTElementDefinition } from '@microsoft/fast-element';\n\n// Warning: (ae-missing-release-tag) \"DonutChart\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport class DonutChart extends FASTElement {\n    constructor();\n    // (undocumented)\n    activeLegend: string;\n    // (undocumented)\n    protected activeLegendChanged(oldValue: string, newValue: string): void;\n    // (undocumented)\n    chartWrapper: HTMLDivElement;\n    // (undocumented)\n    connectedCallback(): void;\n    // Warning: (ae-forgotten-export) The symbol \"ChartProps_2\" needs to be exported by the entry point index.d.ts\n    //\n    // (undocumented)\n    data: ChartProps_2;\n    // (undocumented)\n    elementInternals: ElementInternals;\n    // (undocumented)\n    group: SVGGElement;\n    // (undocumented)\n    handleLegendClick(legendTitle: string): void;\n    // (undocumented)\n    handleLegendMouseoutAndBlur(): void;\n    // (undocumented)\n    handleLegendMouseoverAndFocus(legendTitle: string): void;\n    // (undocumented)\n    height: number;\n    // (undocumented)\n    hideLegends: boolean;\n    // (undocumented)\n    hideTooltip: boolean;\n    // (undocumented)\n    innerRadius: number;\n    // (undocumented)\n    isLegendSelected: boolean;\n    // (undocumented)\n    legendListLabel?: string;\n    // Warning: (ae-forgotten-export) The symbol \"Legend\" needs to be exported by the entry point index.d.ts\n    //\n    // (undocumented)\n    legends: Legend[];\n    // (undocumented)\n    tooltipProps: {\n        isVisible: boolean;\n        legend: string;\n        yValue: string;\n        color: string;\n        xPos: number;\n        yPos: number;\n    };\n    // (undocumented)\n    protected tooltipPropsChanged(oldValue: any, newValue: any): void;\n    // (undocumented)\n    valueInsideDonut?: string;\n    // (undocumented)\n    width: number;\n}\n\n// @public (undocumented)\nexport const DonutChartDefinition: FASTElementDefinition<typeof DonutChart>;\n\n// @public\nexport const DonutChartStyles: ElementStyles;\n\n// Warning: (ae-internal-missing-underscore) The name \"DonutChartTemplate\" should be prefixed with an underscore because the declaration is marked as @internal\n//\n// @internal (undocumented)\nexport const DonutChartTemplate: ElementViewTemplate<DonutChart>;\n\n// @public\nexport class HorizontalBarChart extends FASTElement {\n    constructor();\n    // (undocumented)\n    activeLegend: string;\n    // (undocumented)\n    protected activeLegendChanged: (oldValue: string, newValue: string) => void;\n    // (undocumented)\n    chartContainer: HTMLDivElement;\n    // (undocumented)\n    chartTitle?: string;\n    // (undocumented)\n    connectedCallback(): void;\n    // Warning: (ae-forgotten-export) The symbol \"ChartProps\" needs to be exported by the entry point index.d.ts\n    //\n    // (undocumented)\n    data: ChartProps[];\n    // (undocumented)\n    elementInternals: ElementInternals;\n    // (undocumented)\n    handleLegendClick: (legendTitle: string) => void;\n    // (undocumented)\n    handleLegendMouseoutAndBlur: () => void;\n    // (undocumented)\n    handleLegendMouseoverAndFocus: (legendTitle: string) => void;\n    // (undocumented)\n    hideLegends: boolean;\n    // (undocumented)\n    hideRatio: boolean;\n    // (undocumented)\n    hideTooltip: boolean;\n    // (undocumented)\n    isLegendSelected: boolean;\n    // (undocumented)\n    legendListLabel?: string;\n    // (undocumented)\n    tooltipProps: {\n        isVisible: boolean;\n        legend: string;\n        yValue: string;\n        color: string;\n        xPos: number;\n        yPos: number;\n    };\n    // Warning: (ae-forgotten-export) The symbol \"ChartDataPoint\" needs to be exported by the entry point index.d.ts\n    //\n    // (undocumented)\n    uniqueLegends: ChartDataPoint[];\n    // Warning: (ae-forgotten-export) The symbol \"Variant\" needs to be exported by the entry point index.d.ts\n    //\n    // (undocumented)\n    variant?: Variant;\n}\n\n// @public\nexport const HorizontalBarChartDefinition: FASTElementDefinition<typeof HorizontalBarChart>;\n\n// @public\nexport const HorizontalBarChartStyles: ElementStyles;\n\n// Warning: (ae-internal-missing-underscore) The name \"HorizontalBarChartTemplate\" should be prefixed with an underscore because the declaration is marked as @internal\n//\n// @internal (undocumented)\nexport const HorizontalBarChartTemplate: ElementViewTemplate<HorizontalBarChart>;\n```\n\n----------------------------------------\n\nTITLE: Defining Axis Interface in TypeScript\nDESCRIPTION: This code snippet defines the Axis interface, which includes properties for axis styling, labeling, and behavior in charts. It covers aspects like range, ticks, grid lines, and title formatting.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/chart-utilities/etc/chart-utilities.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Axis {\n    autorange: true | false | 'reversed' | 'min reversed' | 'max reversed' | 'min' | 'max';\n    autorangeoptions: Partial<AutoRangeOptions>;\n    autotypenumbers: 'convert types' | 'strict';\n    calendar: Calendar;\n    categoryarray: any[];\n    categoryorder: 'trace' | 'category ascending' | 'category descending' | 'array' | 'total ascending' | 'total descending' | 'min ascending' | 'min descending' | 'max ascending' | 'max descending' | 'sum ascending' | 'sum descending' | 'mean ascending' | 'mean descending' | 'median ascending' | 'median descending';\n    color: Color;\n    dividercolor: Color;\n    dividerwidth: number;\n    dtick: DTickValue;\n    exponentformat: 'none' | 'e' | 'E' | 'power' | 'SI' | 'B';\n    fixedrange: boolean;\n    gridcolor: Color;\n    gridwidth: number;\n    hoverformat: string;\n    labelalias: DTickValue;\n    linecolor: Color;\n    linewidth: number;\n    maxallowed: DTickValue;\n    minallowed: DTickValue;\n    minexponent: number;\n    mirror: true | 'ticks' | false | 'all' | 'allticks';\n    nticks: number;\n    range: any[];\n    rangemode: 'normal' | 'tozero' | 'nonnegative';\n    separatethousands: boolean;\n    showdividers: boolean;\n    showexponent: 'all' | 'first' | 'last' | 'none';\n    showgrid: boolean;\n    showline: boolean;\n    showspikes: boolean;\n    showticklabels: boolean;\n    showtickprefix: 'all' | 'first' | 'last' | 'none';\n    showticksuffix: 'all' | 'first' | 'last' | 'none';\n    spikecolor: Color;\n    spikedash: string;\n    spikemode: 'toaxis' | 'across' | 'marker' | 'toaxis+across' | 'toaxis+across+marker' | 'across+marker' | 'toaxis+marker';\n    spikesnap: 'data' | 'cursor' | 'hovered data';\n    spikethickness: number;\n    tick0: number | string;\n    tickangle: 'auto' | number;\n    tickcolor: Color;\n    tickfont: Partial<Font>;\n    tickformat: string;\n    tickformatstops: Array<Partial<TickFormatStop>>;\n    ticklen: number;\n    tickmode: 'auto' | 'linear' | 'array';\n    tickprefix: string;\n    ticks: 'outside' | 'inside' | '';\n    ticksuffix: string;\n    ticktext: string[];\n    tickvals: any[];\n    tickwidth: number;\n    title: string | Partial<DataTitle>;\n    titlefont: Partial<Font>;\n    type: AxisType;\n    visible: boolean;\n    zeroline: boolean;\n    zerolinecolor: Color;\n    zerolinewidth: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Package Installation Command Example\nDESCRIPTION: Example bash command showing the potential complexity of installing packages with peer dependencies.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/dependency-versions.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add @fluentui/react-COMPONENT DEPENDENCY1 DEPENDENCY2 ... DEPENDENCY999\n```\n\n----------------------------------------\n\nTITLE: Use Combobox Unstable Hook Definition\nDESCRIPTION: This snippet defines the unstable useCombobox hook, which returns the ComboboxState based on the provided props and ref.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/library/etc/react-combobox.api.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const useCombobox_unstable: (props: ComboboxProps, ref: React_2.Ref<HTMLInputElement>) => ComboboxState;\"\n```\n\n----------------------------------------\n\nTITLE: Defining Stardust Slider Design Tokens in TypeScript\nDESCRIPTION: Lists the design token properties used specifically in the Stardust implementation of the Slider component. These tokens control various visual aspects like colors, dimensions, and states of the slider elements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Slider.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nactiveThumbColor: string\nactiveThumbHeight: string\nactiveThumbWidth: string\ndisabledRailColor: string\ndisabledThumbColor: string\ndisabledTrackColor: string\nheight: string\nlength: string\nrailColor: string\nrailHeight: string\nthumbBorderPadding: string\nthumbColor: string\nthumbHeight: string\nthumbWidth: string\ntrackColor: string\n```\n\n----------------------------------------\n\nTITLE: Field Component Definition\nDESCRIPTION: This snippet defines the Field component as a ForwardRefComponent with FieldProps. It allows for flexible usage with various properties for customization.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-field/library/etc/react-field.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport const Field: ForwardRefComponent<FieldProps>;\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Focus Restoration with useRestoreFocusSource and useRestoreFocusTarget in React\nDESCRIPTION: This code snippet demonstrates the usage of useRestoreFocusSource and useRestoreFocusTarget hooks for managing focus in a dynamic React application. It simulates a feedback submission scenario where the focused element is removed from the DOM, and focus needs to be restored to a previously 'bookmarked' element.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Utilities/FocusManagement/useRestoreFocusSource/useRestoreFocusSourceDescription.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { useRestoreFocusSource, useRestoreFocusTarget } = someImport;\n\nfunction FeedbackComponent() {\n  const [showFeedback, setShowFeedback] = React.useState(false);\n  const restoreFocusSourceProps = useRestoreFocusSource();\n  const restoreFocusTargetProps = useRestoreFocusTarget();\n\n  return (\n    <div>\n      <button {...restoreFocusTargetProps} onClick={() => setShowFeedback(true)}>\n        Give feedback\n      </button>\n\n      {showFeedback && (\n        <div {...restoreFocusSourceProps}>\n          <textarea />\n          <button onClick={() => setShowFeedback(false)}>Submit feedback</button>\n        </div>\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Git Workflow Commands\nDESCRIPTION: Git commands for branch management, staging changes, committing, and synchronizing with upstream repository.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/command-cheat-sheet.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b user/jdoe/some-fancy-branch-name # creates a new branch\ngit status # shows changed files\ngit add . # stages all changed files\ngit commit -m \"your commit message\" # commits staged files\ngit pull upstream master # pulls latest master\ngit push upstream # pushes branch to main repo\n```\n\n----------------------------------------\n\nTITLE: Creating Target from Click Utility\nDESCRIPTION: A utility function to anchor a popper element to the current mouse position, enabling precise positioning based on click events\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-positioning/CHANGELOG.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ncreateTargetFromClick utility to anchor popper to mouse position\n```\n\n----------------------------------------\n\nTITLE: renderSearchBox Function Definition (TypeScript)\nDESCRIPTION: Defines the renderSearchBox_unstable function, which takes a SearchBoxState as input and returns a JSX Element. This likely renders the SearchBox component based on its state.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-search/library/etc/react-search.api.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport const renderSearchBox_unstable: (state: SearchBoxState) => JSX.Element;\n```\n\n----------------------------------------\n\nTITLE: Importing Skeleton Components from Fluent UI\nDESCRIPTION: This snippet imports various components, classes, context providers, and types associated with skeleton components from the '@fluentui/react-skeleton' package. These are used to provide a placeholder UI while loading data.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/etc/react-components.api.md#2025-04-20_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Skeleton } from '@fluentui/react-skeleton';\nimport { skeletonClassNames } from '@fluentui/react-skeleton';\nimport { SkeletonContextProvider } from '@fluentui/react-skeleton';\nimport { SkeletonContextValue } from '@fluentui/react-skeleton';\nimport { SkeletonItem } from '@fluentui/react-skeleton';\nimport { skeletonItemClassNames } from '@fluentui/react-skeleton';\nimport { SkeletonItemProps } from '@fluentui/react-skeleton';\nimport { SkeletonItemSlots } from '@fluentui/react-skeleton';\nimport { SkeletonItemState } from '@fluentui/react-skeleton';\nimport { SkeletonProps } from '@fluentui/react-skeleton';\nimport { SkeletonSlots } from '@fluentui/react-skeleton';\nimport { SkeletonState } from '@fluentui/react-skeleton';\n```\n\n----------------------------------------\n\nTITLE: Replacing npm scripts with NX inferred tasks in FluentUI React Avatar\nDESCRIPTION: This code snippet describes the replacement of npm-scripts and just-scrtips with nx inferred tasks. This is part of a larger effort to use nx for task management. The goal is to standardize task execution and improve build processes using nx.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-avatar/library/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n\"chore: replace npm-scripts and just-scrtips with nx inferred tasks ([PR #33074](https://github.com/microsoft/fluentui/pull/33074) by martinhochel@microsoft.com)\"\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-shared-contexts version\nDESCRIPTION: This patch updates the version of the `@fluentui/react-shared-contexts` dependency.  Bumping this package ensures that the `@fluentui/react-badge` component uses the latest features and bug fixes available in the shared contexts package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nBump @fluentui/react-shared-contexts to v9.21.1 ([PR #33372](https://github.com/microsoft/fluentui/pull/33372) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with React Checkbox Stories in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure a Storybook module to include stories from the react-checkbox package. It specifies the glob patterns needed to capture both MDX and TypeScript/TSX story files.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-checkbox/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-checkbox/stories/src/**/*.stories.mdx', '../packages/react-components/react-checkbox/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme Switcher with DisplayToggle in FluentUI\nDESCRIPTION: This code snippet demonstrates how to use the DisplayToggle component to show theme variants of a Separator component with light and dark mode images.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/SeparatorPage/docs/mac/SeparatorOverview.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<DisplayToggle onText=\"Dark\" offText=\"Light\" label=\"Theme switcher\">\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002-cdn-prod_20200701.001/fabric-website/images/controls/macos/Separator/separator_light.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002-cdn-prod_20200701.001/fabric-website/images/controls/macos/Separator/separator_dark.png?text=DarkMode\" />\n\n</DisplayToggle>\n```\n\n----------------------------------------\n\nTITLE: Defining PopoverSurfaceProps in TypeScript\nDESCRIPTION: This code snippet defines the PopoverSurfaceProps type for the PopoverSurface component in TypeScript. The children prop allows embedding of React nodes within the popover surface, establishing the component's structure.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-popover/library/docs/Spec.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport type PopoverSurfaceProps = {\n  children?: React.ReactNode;\n};\n```\n\n----------------------------------------\n\nTITLE: Preparing a Package for Stable Phase Release\nDESCRIPTION: Command to prepare a package for migration from preview to stable phase using the FluentUI workspace generator.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/new-release-process-v9-packages.md#2025-04-20_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:prepare-initial-release --project react-one-preview --phase=stable\n```\n\n----------------------------------------\n\nTITLE: Generating API Markdown File\nDESCRIPTION: This snippet shows how to generate the API markdown file for a specific package using the `yarn nx run` command. This command is executed as part of the package's build process.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/api-extractor.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n`yarn nx run <package-name>:build`\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Test Files\nDESCRIPTION: TypeScript configuration for test files. It extends the main config, sets up compilation for CommonJS modules, and includes types for Jest and Node environments.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/shared/build-system/02-solution-style-ts-configs.md#2025-04-20_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"./dist\",\n    \"module\": \"commonjs\",\n    // properly scoped globals and environment - note that extra 'jest'\n    \"types\": [\"jest\", \"node\"]\n  },\n  \"include\": [\"**/*.spec.ts\", \"**/*.spec.tsx\", \"**/*.spec.js\", \"**/*.spec.jsx\", \"**/*.d.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating React Icons Package\nDESCRIPTION: This patch updates the `react-icons` package. The update ensures the component uses the latest icons and any fixes from the new version.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-spinbutton/library/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: none\nCODE:\n```\nchore: Update react-icons package to ^2.0.245 ([PR #31802](https://github.com/microsoft/fluentui/pull/31802) by ololubek@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Defining ITextFieldState Interface in TypeScript\nDESCRIPTION: Defines the internal ITextFieldState interface for text field components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_217\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Warning: (ae-internal-missing-underscore) The name \"ITextFieldState\" should be prefixed with an underscore because the declaration is marked as @internal\n//\n// @internal (undocumented)\nexport interface ITextFieldState {\n    errorMessage: string | JSX.Element;\n    isFocused?: boolean;\n    isRevealingPassword?: boolean;\n    uncontrolledValue: string | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom CodeMod Object - TypeScript\nDESCRIPTION: This snippet provides a template for creating a custom codemod object in TypeScript. It includes error handling and logging for the codemod execution process.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/codemods/documentation/howTo.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n//some imports\n\nconst newCodeModName: CodeMod = {\n  run: (file: SourceFile) => {\n    try {\n      // Body of your codemod\n    } catch (e) {\n      return Err({ reason: /* display error e */ });\n    }\n    return Ok({ logs: [/* list of made changes */] });\n  },\n  version: /*some version string*/, \n  name: 'newCodeModName',\n  enabled: true,\n};\n\nexport default newCodeModName;\n```\n\n----------------------------------------\n\nTITLE: Replacing aria-selected with aria-checked\nDESCRIPTION: This change uses aria-checked instead of aria-selected for multi-select trees, aligning accessibility attributes with expected ARIA practices.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/CHANGELOG.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nUse `aria-checked` for multi-select tree instead of `aria-selected` @yuanboxue-amber ([#15142](https://github.com/microsoft/fluentui/pull/15142))\n```\n\n----------------------------------------\n\nTITLE: Importing Monaco Editor in JavaScript\nDESCRIPTION: This code snippet shows how to import the Monaco editor from the @fluentui/monaco-editor package for use in your project.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/monaco-editor/README.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as monaco from '@fluentui/monaco-editor';\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-utilities version\nDESCRIPTION: This patch updates the version of the `@fluentui/react-utilities` dependency.  Bumping this package ensures that the `@fluentui/react-badge` component uses the latest utility functions and bug fixes available in the utilities package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nBump @fluentui/react-utilities to v9.18.23 ([PR #34034](https://github.com/microsoft/fluentui/pull/34034) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Defining Vertical Stacked Chart Properties Interface in TypeScript\nDESCRIPTION: The IVerticalStackedChartProps interface represents properties for a vertical stacked chart, detailing chart data and additional line data for advanced visualization capabilities.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/etc/react-charting.api.md#2025-04-20_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface IVerticalStackedChartProps {\n    chartData: IVSChartDataPoint[];\n    lineData?: ILineDataInVerticalStackedBarChart[];\n    stackCallOutAccessibilityData?: IAccessibilityProps;\n    xAxisCalloutData?: string;\n    xAxisPoint: number | string | Date;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Spinner Component Usage in FluentUI v9\nDESCRIPTION: Example of importing and using the Spinner component from FluentUI v9 (react-components), which replaces the Loader component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Loader.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Spinner } from '@fluentui/react-components';\nconst Component = () => <Spinner />;\n```\n\n----------------------------------------\n\nTITLE: Custom Option Rendering with ChoiceGroup in Fluent UI v8\nDESCRIPTION: Demonstrates how to customize option rendering in ChoiceGroup using the onRenderField callback. It includes styling with mergeStyles and using icons.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/RadioGroup.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { ChoiceGroup, IChoiceGroupOption } from '@fluentui/react/lib/ChoiceGroup';\nimport { mergeStyles } from '@fluentui/react/lib/Styling';\nimport { CatIcon } from '@fluentui/react-icons-mdl2';\n\nconst ChoiceGroupCustomOptionExample = () => {\n  const optionRootClass = mergeStyles({ display: 'flex', alignItems: 'center', gap: '5px' });\n\n  const options: IChoiceGroupOption[] = [\n    {\n      key: 'A',\n      text: 'A label with an icon',\n      ariaLabel: 'A label with a cat icon',\n      onRenderField: (props, render) => {\n        z;\n        return (\n          <div className={optionRootClass}>\n            {render!(props)}\n            <CatIcon />\n          </div>\n        );\n      },\n    },\n    { key: 'B', text: 'Option B', styles: { root: { border: '1px solid green' } } },\n    { key: 'C', text: 'Option C', disabled: true },\n    { key: 'D', text: 'Option D' },\n  ];\n\n  return <ChoiceGroup defaultSelectedKey=\"B\" options={options} label=\"Pick one\" />;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Virtualizer Types and Interfaces\nDESCRIPTION: This section defines various types and interfaces used in the virtualizer components, including DynamicVirtualizerContextProps, IndexedResizeCallbackElement, and ScrollToInterface.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-virtualizer/library/etc/react-virtualizer.api.md#2025-04-20_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport type DynamicVirtualizerContextProps = Required<VirtualizerContextProps>;\n\n// @public (undocumented)\nexport interface IndexedResizeCallbackElement {\n    // (undocumented)\n    handleResize: () => void;\n}\n\n// @public (undocumented)\nexport type ScrollToInterface = {\n    scrollTo: (index: number, behavior?: ScrollBehavior, callback?: (index: number) => void) => void;\n    virtualizerLength: React_2.RefObject<number>;\n    currentIndex: React_2.RefObject<number> | undefined;\n};\n```\n\n----------------------------------------\n\nTITLE: AccordionItem Configuration Constants and Types\nDESCRIPTION: Defines constants and types for AccordionItem customization, including marker positions (start/end), size options (small to extra-large), and style/template definitions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport const accordionItemDefinition: FASTElementDefinition<typeof AccordionItem>;\n\n// Warning: (ae-missing-release-tag) \"AccordionItemMarkerPosition\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport const AccordionItemMarkerPosition: {\n    readonly start: \"start\";\n    readonly end: \"end\";\n};\n\n// @public\nexport type AccordionItemMarkerPosition = ValuesOf<typeof AccordionItemMarkerPosition>;\n\n// @public\nexport type AccordionItemOptions = StartEndOptions<AccordionItem> & {\n    expandedIcon?: StaticallyComposableHTML<AccordionItem>;\n    collapsedIcon?: StaticallyComposableHTML<AccordionItem>;\n};\n\n// Warning: (ae-missing-release-tag) \"AccordionItemSize\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport const AccordionItemSize: {\n    readonly small: \"small\";\n    readonly medium: \"medium\";\n    readonly large: \"large\";\n    readonly extraLarge: \"extra-large\";\n};\n\n// @public\nexport type AccordionItemSize = ValuesOf<typeof AccordionItemSize>;\n```\n\n----------------------------------------\n\nTITLE: Fabric (v8) to Fluent UI (v9) Breadcrumb Property Mapping Table\nDESCRIPTION: Markdown table showing the mapping of properties from Fabric (v8) Breadcrumb to Fluent UI (v9) Breadcrumb. It highlights new props and those no longer supported in v9.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-breadcrumb/library/docs/MIGRATION.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| v8 `Breadcrumb`     | v9 `Breadcrumb` |\n| ------------------- | --------------- |\n| `ariaLabel`         |                 |\n| `className`         |                 |\n| `componentRef`      |                 |\n| `dividerAs`         |                 |\n| `focusZoneProps`    |                 |\n| `maxDisplayedItems` |                 |\n|                     | `size`          |\n```\n\n----------------------------------------\n\nTITLE: Importing Fluent UI React Hooks\nDESCRIPTION: This code snippet demonstrates the import of various hooks from Fluent UI React packages. These hooks are used to manage component state, styles, and functionality across different UI components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/etc/react-components.api.md#2025-04-20_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useAvatar_unstable } from '@fluentui/react-avatar';\nimport { useAvatarGroup_unstable } from '@fluentui/react-avatar';\nimport { useAvatarGroupContext_unstable } from '@fluentui/react-avatar';\nimport { useAvatarGroupContextValues } from '@fluentui/react-avatar';\nimport { useAvatarGroupItem_unstable } from '@fluentui/react-avatar';\nimport { useAvatarGroupItemStyles_unstable } from '@fluentui/react-avatar';\nimport { useAvatarGroupPopover_unstable } from '@fluentui/react-avatar';\nimport { useAvatarGroupPopoverContextValues_unstable } from '@fluentui/react-avatar';\nimport { useAvatarGroupPopoverStyles_unstable } from '@fluentui/react-avatar';\nimport { useAvatarGroupStyles_unstable } from '@fluentui/react-avatar';\nimport { useAvatarStyles_unstable } from '@fluentui/react-avatar';\nimport { useBadge_unstable } from '@fluentui/react-badge';\nimport { useBadgeStyles_unstable } from '@fluentui/react-badge';\nimport { useBreadcrumb_unstable } from '@fluentui/react-breadcrumb';\nimport { useBreadcrumbButton_unstable } from '@fluentui/react-breadcrumb';\nimport { useBreadcrumbButtonStyles_unstable } from '@fluentui/react-breadcrumb';\nimport { useBreadcrumbContext_unstable } from '@fluentui/react-breadcrumb';\nimport { useBreadcrumbDivider_unstable } from '@fluentui/react-breadcrumb';\nimport { useBreadcrumbDividerStyles_unstable } from '@fluentui/react-breadcrumb';\nimport { useBreadcrumbItem_unstable } from '@fluentui/react-breadcrumb';\nimport { useBreadcrumbItemStyles_unstable } from '@fluentui/react-breadcrumb';\nimport { useBreadcrumbStyles_unstable } from '@fluentui/react-breadcrumb';\nimport { useButton_unstable } from '@fluentui/react-button';\nimport { useButtonStyles_unstable } from '@fluentui/react-button';\nimport { useCard_unstable } from '@fluentui/react-card';\nimport { useCardFooter_unstable } from '@fluentui/react-card';\nimport { useCardFooterStyles_unstable } from '@fluentui/react-card';\nimport { useCardHeader_unstable } from '@fluentui/react-card';\nimport { useCardHeaderStyles_unstable } from '@fluentui/react-card';\nimport { useCardPreview_unstable } from '@fluentui/react-card';\nimport { useCardPreviewStyles_unstable } from '@fluentui/react-card';\nimport { useCardStyles_unstable } from '@fluentui/react-card';\nimport { useCarousel_unstable } from '@fluentui/react-carousel';\nimport { useCarouselAutoplayButton_unstable } from '@fluentui/react-carousel';\nimport { useCarouselAutoplayButtonStyles_unstable } from '@fluentui/react-carousel';\nimport { useCarouselButton_unstable } from '@fluentui/react-carousel';\nimport { useCarouselButtonStyles_unstable } from '@fluentui/react-carousel';\nimport { useCarouselCard_unstable } from '@fluentui/react-carousel';\nimport { useCarouselCardStyles_unstable } from '@fluentui/react-carousel';\nimport { useCarouselContext_unstable } from '@fluentui/react-carousel';\nimport { useCarouselNav_unstable } from '@fluentui/react-carousel';\nimport { useCarouselNavButton_unstable } from '@fluentui/react-carousel';\nimport { useCarouselNavButtonStyles_unstable } from '@fluentui/react-carousel';\nimport { useCarouselNavContainer_unstable } from '@fluentui/react-carousel';\nimport { useCarouselNavContainerStyles_unstable } from '@fluentui/react-carousel';\nimport { useCarouselNavImageButton_unstable } from '@fluentui/react-carousel';\nimport { useCarouselNavImageButtonStyles_unstable } from '@fluentui/react-carousel';\nimport { useCarouselNavStyles_unstable } from '@fluentui/react-carousel';\nimport { useCarouselSlider_unstable } from '@fluentui/react-carousel';\nimport { useCarouselSliderStyles_unstable } from '@fluentui/react-carousel';\nimport { useCarouselStyles_unstable } from '@fluentui/react-carousel';\nimport { useCarouselViewport_unstable } from '@fluentui/react-carousel';\nimport { useCarouselViewportStyles_unstable } from '@fluentui/react-carousel';\nimport { useCheckbox_unstable } from '@fluentui/react-checkbox';\nimport { useCheckboxStyles_unstable } from '@fluentui/react-checkbox';\nimport { useCheckmarkStyles_unstable } from '@fluentui/react-menu';\nimport { useColorArea_unstable } from '@fluentui/react-color-picker';\nimport { useColorAreaStyles_unstable } from '@fluentui/react-color-picker';\nimport { useColorPicker_unstable } from '@fluentui/react-color-picker';\nimport { useColorPickerStyles_unstable } from '@fluentui/react-color-picker';\nimport { useColorSlider_unstable } from '@fluentui/react-color-picker';\nimport { useColorSliderStyles_unstable } from '@fluentui/react-color-picker';\nimport { useColorSwatch_unstable } from '@fluentui/react-swatch-picker';\nimport { useColorSwatchStyles_unstable } from '@fluentui/react-swatch-picker';\nimport { useColumnIdContext } from '@fluentui/react-table';\nimport { useCombobox_unstable } from '@fluentui/react-combobox';\nimport { useComboboxContextValues } from '@fluentui/react-combobox';\nimport { useComboboxFilter } from '@fluentui/react-combobox';\nimport { useComboboxStyles_unstable } from '@fluentui/react-combobox';\nimport { useCompoundButton_unstable } from '@fluentui/react-button';\nimport { useCompoundButtonStyles_unstable } from '@fluentui/react-button';\nimport { useCounterBadge_unstable } from '@fluentui/react-badge';\nimport { useCounterBadgeStyles_unstable } from '@fluentui/react-badge';\nimport { useDataGrid_unstable } from '@fluentui/react-table';\nimport { useDataGridBody_unstable } from '@fluentui/react-table';\nimport { useDataGridBodyStyles_unstable } from '@fluentui/react-table';\nimport { useDataGridCell_unstable } from '@fluentui/react-table';\nimport { useDataGridCellStyles_unstable } from '@fluentui/react-table';\nimport { useDataGridContext_unstable } from '@fluentui/react-table';\nimport { useDataGridContextValues_unstable } from '@fluentui/react-table';\nimport { useDataGridHeader_unstable } from '@fluentui/react-table';\nimport { useDataGridHeaderCell_unstable } from '@fluentui/react-table';\nimport { useDataGridHeaderCellStyles_unstable } from '@fluentui/react-table';\nimport { useDataGridHeaderStyles_unstable } from '@fluentui/react-table';\nimport { useDataGridRow_unstable } from '@fluentui/react-table';\nimport { useDataGridRowStyles_unstable } from '@fluentui/react-table';\nimport { useDataGridSelectionCell_unstable } from '@fluentui/react-table';\nimport { useDataGridSelectionCellStyles_unstable } from '@fluentui/react-table';\nimport { useDataGridStyles_unstable } from '@fluentui/react-table';\nimport { useDialog_unstable } from '@fluentui/react-dialog';\nimport { useDialogActions_unstable } from '@fluentui/react-dialog';\nimport { useDialogActionsStyles_unstable } from '@fluentui/react-dialog';\nimport { useDialogBody_unstable } from '@fluentui/react-dialog';\nimport { useDialogBodyStyles_unstable } from '@fluentui/react-dialog';\nimport { useDialogContent_unstable } from '@fluentui/react-dialog';\nimport { useDialogContentStyles_unstable } from '@fluentui/react-dialog';\nimport { useDialogContext_unstable } from '@fluentui/react-dialog';\nimport { useDialogSurface_unstable } from '@fluentui/react-dialog';\nimport { useDialogSurfaceContext_unstable } from '@fluentui/react-dialog';\nimport { useDialogSurfaceContextValues_unstable } from '@fluentui/react-dialog';\nimport { useDialogSurfaceStyles_unstable } from '@fluentui/react-dialog';\nimport { useDialogTitle_unstable } from '@fluentui/react-dialog';\nimport { useDialogTitleStyles_unstable } from '@fluentui/react-dialog';\nimport { useDialogTrigger_unstable } from '@fluentui/react-dialog';\nimport { useDivider_unstable } from '@fluentui/react-divider';\nimport { useDividerStyles_unstable } from '@fluentui/react-divider';\nimport { useDrawer_unstable } from '@fluentui/react-drawer';\nimport { useDrawerBody_unstable } from '@fluentui/react-drawer';\nimport { useDrawerBodyStyles_unstable } from '@fluentui/react-drawer';\nimport { useDrawerContext_unstable } from '@fluentui/react-drawer';\nimport { useDrawerContextValue } from '@fluentui/react-drawer';\nimport { useDrawerFooter_unstable } from '@fluentui/react-drawer';\nimport { useDrawerFooterStyles_unstable } from '@fluentui/react-drawer';\nimport { useDrawerHeader_unstable } from '@fluentui/react-drawer';\nimport { useDrawerHeaderNavigation_unstable } from '@fluentui/react-drawer';\nimport { useDrawerHeaderNavigationStyles_unstable } from '@fluentui/react-drawer';\nimport { useDrawerHeaderStyles_unstable } from '@fluentui/react-drawer';\nimport { useDrawerHeaderTitle_unstable } from '@fluentui/react-drawer';\nimport { useDrawerHeaderTitleStyles_unstable } from '@fluentui/react-drawer';\nimport { useDrawerStyles_unstable } from '@fluentui/react-drawer';\nimport { useDropdown_unstable } from '@fluentui/react-combobox';\nimport { useDropdownStyles_unstable } from '@fluentui/react-combobox';\nimport { useEmptySwatch_unstable } from '@fluentui/react-swatch-picker';\nimport { useEmptySwatchStyles_unstable } from '@fluentui/react-swatch-picker';\nimport { useEventCallback } from '@fluentui/react-utilities';\nimport { useField_unstable } from '@fluentui/react-field';\nimport { useFieldContext_unstable } from '@fluentui/react-field';\nimport { useFieldContextValues_unstable } from '@fluentui/react-field';\nimport { useFieldControlProps_unstable } from '@fluentui/react-field';\nimport { useFieldStyles_unstable } from '@fluentui/react-field';\nimport { useFlatTree_unstable } from '@fluentui/react-tree';\nimport { useFlatTreeContextValues_unstable } from '@fluentui/react-tree';\nimport { useFlatTreeStyles_unstable } from '@fluentui/react-tree';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\nimport { useFluentProvider_unstable } from '@fluentui/react-provider';\nimport { useFluentProviderContextValues_unstable } from '@fluentui/react-provider';\nimport { useFluentProviderStyles_unstable } from '@fluentui/react-provider';\nimport { useFluentProviderThemeStyleTag } from '@fluentui/react-provider';\nimport { useFocusableGroup } from '@fluentui/react-tabster';\nimport { UseFocusableGroupOptions } from '@fluentui/react-tabster';\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook to Include React Tooltip Stories\nDESCRIPTION: This code snippet demonstrates how to configure Storybook's `module.exports` object to include stories from the `@fluentui/react-tooltip` package. It defines the `stories` array with globs that match `.stories.mdx` and `index.stories.ts` or `index.stories.tsx` files within the specified directory. This allows Storybook to discover and display the React Tooltip component stories.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tooltip/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-tooltip/stories/src/**/*.stories.mdx', '../packages/react-components/react-tooltip/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: React Component Usage Example with String Union Prop\nDESCRIPTION: This snippet demonstrates how to use the 'SpinButton' component in JSX, indicating the 'inputType' prop with a value conforming to the proposed naming convention. The usage highlights the difference in appearance depending on the chosen naming standard.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/prop-string-union-naming.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<SpinButton\n  inputType='spinners-only'/>\n// vs\n<SpinButton\n  inputType=\"spinnersOnly\"/>\n```\n\n----------------------------------------\n\nTITLE: Describing PieFont Interface in TypeScript\nDESCRIPTION: The PieFont interface defines font properties for pie charts, including color, family, and size attributes, providing customization for chart text and labels.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/chart-utilities/etc/chart-utilities.api.md#2025-04-20_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface PieFont {\n    // (undocumented)\n    color: PieColor | PieColors;\n    // (undocumented)\n    family: string | string[];\n    // (undocumented)\n    size: number | number[];\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Interactive Items in Composite ListItem in JSX\nDESCRIPTION: When using navigationMode=\"composite\", wrap each interactive item within ListItem in its own element with role=\"gridcell\". This ensures proper accessibility structure for complex list items.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-list/stories/src/List/ListBestPractices.md#2025-04-20_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<ListItem navigationMode=\"composite\">\n  <div role=\"gridcell\">\n    {/* Interactive content */}\n  </div>\n</ListItem>\n```\n\n----------------------------------------\n\nTITLE: Advanced Usage of createPresenceComponent in React\nDESCRIPTION: This snippet demonstrates advanced usage of a component created with createPresenceComponent, including the 'appear', 'unmountOnExit', and 'onMotionFinish' props. It shows how to control animation behavior and handle motion completion events.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/motion-definition-n-apis.md#2025-04-20_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createPresenceComponent, type PresenceMotion } from '@fluentui/react-motions-preview';\n\nconst fadePresence: PresenceMotion = {\n  /* --- */\n};\nconst Fade = createPresenceComponent(fadePresence);\n\nfunction MyComponent() {\n  const [visible, setVisible] = useState(false);\n\n  return (\n    <Fade\n      appear\n      onMotionFinish={(ev, data) => console.log(`A motion was finished (direction: ${data.direction})`)\n      visible={visible}\n      unmountOnExit\n    >\n      <div>Hello world!</div>\n    </Fade>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-utilities version\nDESCRIPTION: This patch updates the version of the `@fluentui/react-utilities` dependency.  Bumping this package ensures that the `@fluentui/react-badge` component uses the latest utility functions and bug fixes available in the utilities package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nBump @fluentui/react-utilities to v9.18.18 ([PR #33372](https://github.com/microsoft/fluentui/pull/33372) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Exporting TagPicker Option Group Hook in TypeScript\nDESCRIPTION: Exports a hook for managing the TagPicker option group component state. Takes props and a ref to the div element.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_66\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const useTagPickerOptionGroup: (props: TagPickerOptionGroupProps, ref: React_2.Ref<HTMLDivElement>) => TagPickerOptionGroupState;\n```\n\n----------------------------------------\n\nTITLE: Proposed Folder Structure for Fluent UI v9 Packages\nDESCRIPTION: This code block illustrates the proposed folder and file organization for Fluent UI v9 packages. It includes directories for documentation, stories, source code, and testing, along with specific file naming conventions for components and utilities.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/shared/build-system/07-standard-package-structure-for-v9.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\n|- docs/\n  |- assets/\n  |- MIGRATION.md\n  |- SPEC.md\n|- stories/\n  |- assets/\n  |- {componentName}/ //story files\n|- src/\n  |- components/\n    |- {ComponentName}/ //implementation, unit and cypress test files\n      |- index.ts\n      |- {ComponentName}.tsx\n      |- {ComponentName}.types.ts\n      |- {ComponentName}.test.tsx\n      |- {ComponentName}.cy.tsx\n      |- render{ComponentName}.tsx\n      |- use{ComponentName}.tsx\n      |- use{ComponentName}Styles.ts\n  |- utils/ //shared implementation or utility files\n    |- index.ts\n    |- shared-component-types.types.ts\n    |- some-function-or-hook.ts\n  |- testing/\n    |- index.ts\n    |- isConformant.ts\n    |- some-testing-utility.ts\n    |- your-mock-test.mock.ts //mock testing files to be used in multiple tests within package\n  |- index.ts\n  |- {componentName}.ts\nCHANGELOG.json\nCHANGELOG.md\npackage.json\nREADME.md\n```\n```\n\n----------------------------------------\n\nTITLE: Defining TickFormatStop Interface in TypeScript\nDESCRIPTION: Defines a TypeScript interface for configuring tick formatting in charts or graphs. It includes properties for enabling/disabling the format, specifying tick ranges, and templating.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/chart-utilities/etc/chart-utilities.api.md#2025-04-20_snippet_38\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface TickFormatStop {\n    dtickrange: [DTickValue | null, DTickValue | null];\n    enabled: boolean;\n    name: string;\n    templateitemname: string;\n    value: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-docsite-components to v8.7.17\nDESCRIPTION: Here we record the upgrade of '@fluentui/react-docsite-components' to version 8.7.17, enhancing overall documentation quality.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/theming-designer/CHANGELOG.md#2025-04-20_snippet_29\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react-docsite-components to v8.7.17 ([PR #23069](https://github.com/microsoft/fluentui/pull/23069) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Package Version History Entry - 9.0.9\nDESCRIPTION: Version update entry for @fluentui/react-radio package with React 18 support and dependency updates\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-radio/library/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.0.9](https://github.com/microsoft/fluentui/tree/@fluentui/react-radio_v9.0.9)\n\nThu, 20 Oct 2022 08:39:43 GMT\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-radio_v9.0.8..@fluentui/react-radio_v9.0.9)\n```\n\n----------------------------------------\n\nTITLE: Example Beachball Changefile Structure in JSON\nDESCRIPTION: An example of a properly formatted beachball changefile showing the basic structure with type, comment, packageName, email, and dependentChangeType fields. This format is used to generate changelog entries and determine version bumps.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/convergence/changelog-guidelines.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"patch\",\n  \"comment\": \"[label]: This comment is the message used in the changelog entry\",\n  \"packageName\": \"@fluentui/babel-make-styles\",\n  \"email\": \"jane.doe@contoso.com\",\n  \"dependentChangeType\": \"patch\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Colors Component in Storybook Canvas using JSX\nDESCRIPTION: This JSX code renders the Colors component within a Storybook Canvas. The 'withSource=\"none\"' attribute is used to hide the source code in the Storybook UI, focusing on the visual representation of the colors.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-theme/stories/src/Theme/colors/index.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas withSource=\"none\">\n  <Colors />\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Checkbox Usage Example with Input as Primary Slot\nDESCRIPTION: Complex example of Checkbox component usage with various props and resulting DOM structure.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/native-element-props.md#2025-04-20_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Checkbox\n  id=\"myId\"\n  className=\"myClass\"\n  style={{ color: 'red' }}\n  root={{ id: 'rootId', className: 'rootClass' }}\n  input={{ id: 'inputId', className: 'inputClass' }}\n/>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"rootId\" class=\"rootClass\" style=\"color: red\">\n  <input id=\"inputId\" class=\"inputClass\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.94.0\nDESCRIPTION: Documenting the update process, this snippet details the transition to @fluentui/react version 8.94.0 as part of continuous library maintenance.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/azure-themes/CHANGELOG.md#2025-04-20_snippet_27\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.94.0 ([PR #24394](https://github.com/microsoft/fluentui/pull/24394) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Avatar Component Style Definition Example\nDESCRIPTION: Illustrates the proposed makeOverrides() approach with a complex component like Avatar, showing potential verbosity in class name definitions\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/make-overrides.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst useStyles = makeOverrides({\n  /* ... Complex apps/components can contain many definitions ... */\n\n  rootShape20: { width: '20px', height: '20px' },\n  rootShape24: { width: '24px', height: '24px' },\n  rootShape28: { width: '28px', height: '28px' },\n});\n\nexport const useAvatarStyles = (state: AvatarState): AvatarState => {\n  const classes = useStyles();\n\n  state.className = mergeClasses(\n    classes.root,\n\n    // 👎 Matchers have been moved to mergeClasses() calls, it looks a bit verbose\n    //    (in previous implementation matchers have been close to styles)\n    // 👎 It might be tricky find proper names to express definition names\n    //    (we can end with \"rootPrimaryCircularGhostEtc.\")\n\n    state.size === 20 && classes.rootShape20,\n    state.size === 24 && classes.rootShape24,\n    /* ... many selectors ... */\n    state.size === 128 && classes.rootShape128,\n  );\n\n  return state;\n};\n```\n\n----------------------------------------\n\nTITLE: Animation Curve Constants in FluentUI\nDESCRIPTION: Constants for animation timing curves used in FluentUI components. These variables provide CSS custom property references for consistent animation effects across the component library.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport const curveAccelerateMax = \"var(--curveAccelerateMax)\";\n\n// @public\nexport const curveAccelerateMid = \"var(--curveAccelerateMid)\";\n\n// @public\nexport const curveAccelerateMin = \"var(--curveAccelerateMin)\";\n\n// @public\nexport const curveDecelerateMax = \"var(--curveDecelerateMax)\";\n\n// @public\nexport const curveDecelerateMid = \"var(--curveDecelerateMid)\";\n\n// @public\nexport const curveDecelerateMin = \"var(--curveDecelerateMin)\";\n\n// @public\nexport const curveEasyEase = \"var(--curveEasyEase)\";\n\n// @public\nexport const curveEasyEaseMax = \"var(--curveEasyEaseMax)\";\n\n// @public\nexport const curveLinear = \"var(--curveLinear)\";\n```\n\n----------------------------------------\n\nTITLE: Version History Entry - FluentUI React Positioning\nDESCRIPTION: Markdown changelog entries documenting version updates, bug fixes and dependency changes for the React positioning component\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-positioning/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.9.17]\n\nWed, 04 Oct 2023 08:45:47 GMT\n\n### Patches\n\n- Bump @fluentui/react-utilities to v9.14.0\n```\n\n----------------------------------------\n\nTITLE: Tag Picker Group Render Function\nDESCRIPTION: This is the render function for the TagPickerGroup component. It takes the state and context values and returns a JSX element or null.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport function renderTagPickerGroup_unstable(state: TagPickerGroupState, contexts: TagGroupContextValues): JSX.Element | null;\"\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-jsx-runtime version\nDESCRIPTION: This patch updates the version of the `@fluentui/react-jsx-runtime` dependency. Bumping this package ensures that the `@fluentui/react-badge` component uses the latest features and bug fixes available in the JSX runtime.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nBump @fluentui/react-jsx-runtime to v9.0.52 ([PR #34032](https://github.com/microsoft/fluentui/pull/34032) by beachball)\n```\n\n----------------------------------------\n\nTITLE: API Declarations for @fluentui/react-input Package\nDESCRIPTION: This code defines the complete public API for the @fluentui/react-input package. It includes type definitions, component exports, and utility functions required to implement and use the Input component in a FluentUI React application.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-input/library/etc/react-input.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"react\" />\n\nimport type { ComponentProps } from '@fluentui/react-utilities';\nimport type { ComponentState } from '@fluentui/react-utilities';\nimport type { ForwardRefComponent } from '@fluentui/react-utilities';\nimport * as React_2 from 'react';\nimport type { Slot } from '@fluentui/react-utilities';\nimport type { SlotClassNames } from '@fluentui/react-utilities';\n\n// @public\nexport const Input: ForwardRefComponent<InputProps>;\n\n// @public (undocumented)\nexport const inputClassNames: SlotClassNames<InputSlots>;\n\n// @public\nexport type InputOnChangeData = {\n    value: string;\n};\n\n// @public (undocumented)\nexport type InputProps = Omit<ComponentProps<Partial<InputSlots>, 'input'>, 'children' | 'defaultValue' | 'onChange' | 'size' | 'type' | 'value'> & {\n    children?: never;\n    size?: 'small' | 'medium' | 'large';\n    appearance?: 'outline' | 'underline' | 'filled-darker' | 'filled-lighter' | 'filled-darker-shadow' | 'filled-lighter-shadow';\n    defaultValue?: string;\n    value?: string;\n    onChange?: (ev: React_2.ChangeEvent<HTMLInputElement>, data: InputOnChangeData) => void;\n    type?: 'text' | 'email' | 'password' | 'search' | 'tel' | 'url' | 'date' | 'datetime-local' | 'month' | 'number' | 'time' | 'week';\n};\n\n// @public (undocumented)\nexport type InputSlots = {\n    root: NonNullable<Slot<'span'>>;\n    input: NonNullable<Slot<'input'>>;\n    contentBefore?: Slot<'span'>;\n    contentAfter?: Slot<'span'>;\n};\n\n// @public\nexport type InputState = Required<Pick<InputProps, 'appearance' | 'size'>> & ComponentState<InputSlots>;\n\n// @public\nexport const renderInput_unstable: (state: InputState) => JSX.Element;\n\n// @public\nexport const useInput_unstable: (props: InputProps, ref: React_2.Ref<HTMLInputElement>) => InputState;\n\n// @public\nexport const useInputStyles_unstable: (state: InputState) => InputState;\n```\n\n----------------------------------------\n\nTITLE: DialogTitle Props Definition\nDESCRIPTION: Defines the props for the DialogTitle component, using ComponentProps from '@fluentui/react-utilities'. It represents the properties that can be passed to the DialogTitle component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/etc/react-dialog.api.md#2025-04-20_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport type DialogTitleProps = ComponentProps<DialogTitleSlots>;\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Table: Fluent UI Component Mapping from v8 to v9\nDESCRIPTION: A markdown table listing v8 components, their v9 equivalents, and notes on changes or alternatives. It covers a wide range of components including buttons, form elements, navigation items, and layout components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/ComponentMapping.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| **React v8 Component**   | **React v9 Component**                                                                                                                           | **Notes**                                                                    |\n| ------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------ | ---------------------------------------------------------------------------- |\n| `ActionButton`           | [`Button`](/docs/components-button-button--docs)                                                                                                 | Use `Button` with `iconPosition=\"before\"` for similar functionality.         |\n| `ActivityItem`           | Not available                                                                                                                                    | No direct equivalent in v9; custom implementation needed.                    |\n| `Announced`              | Not available                                                                                                                                    | No direct equivalent in v9.                                                  |\n| `Breadcrumb`             | [`Breadcrumb`](/docs/components-breadcrumb--docs)                                                                                                | No major changes; available in v9.                                           |\n| `Button`                 | [`Button`](/docs/components-button-button--docs)                                                                                                 | Unified button API; use `appearance` prop for variants like `PrimaryButton`. |\n| `Callout`                | [`Popover` ](/docs/components-popover--docs)                                                                                                     | Replaced by `Popover`, with enhanced accessibility and customization.        |\n| `Calendar`               | [`CalendarCompat`](/docs/compat-components-calendar--docs)                                                                                       | Use the compact variant in v9.                                               |\n| `CommandBar`             | [`Toolbar`](/docs/components-toolbar--docs)                                                                                                      | Similar functionality in v9.                                                 |\n| `CommandBarButton`       | [`Toolbar`](/docs/components-toolbar--docs)                                                                                                      | Similar functionality in v9.                                                 |\n| `CommandButton`          | [`MenuButton`](/docs/components-button-docs--docs)                                                                                               | Similar functionality in v9.                                                 |\n| `CompoundButton`         | [`CompoundButton`](/docs/components-button-compoundbutton--docs)                                                                                 | Similar functionality in v9.                                                 |\n| `Charts`                 | [`Migration Guide`](/docs/concepts-migration-from-v8-components-charts-migration--page)                                                          | No direct equivalent in v9.                                                  |\n| `Checkbox`               | [`Checkbox`](/docs/components-checkbox--docs)                                                                                                    | API remains mostly the same in v9.                                           |\n| `ChoiceGroup`            | [`RadioGroup`](/docs/components-radiogroup--docs)                                                                                                | Renamed to `RadioGroup` with similar functionality.                          |\n| `Coachmark`              | [`TeachingPopover`](/docs/components-teachingpopover--docs)                                                                                      | Use `TeachingPopover` in v9 for the same functionality.                      |\n| `ColorPicker`            | 🔁                                                                                                                                               | No major changes in v9.                                                      |\n| `ComboBox`               | [`Combobox`](/docs/components-combobox--docs)                                                                                                    | Renamed to `Combobox` with API improvements.                                 |\n| `CommandBar`             | [`Toolbar`](/docs/components-toolbar--docs)                                                                                                      | CommandBar replaced by `Toolbar` for managing actions.                       |\n| `ContextualMenu`         | [`Menu`](/docs/components-menu-menu--docs) with Button as the `MenuTrigger`                                                                      | Use `Menu` in v9 with `MenuTrigger`.                                         |\n| `DefaultButton (anchor)` | [`Button`](/docs/components-button-button--docs)                                                                                                 | Use `Button` in v9.                                                          |\n| `DefaultButton (menu)`   | [`MenuButton`](/docs/components-button-menubutton--docs)                                                                                         | Use `Button` in v9.                                                          |\n| `DatePicker`             | [`DatePickerCompat`](/docs/compat-components-datepicker--docs)                                                                                   | API remains similar with enhanced theming options.                           |\n| `DetailsList`            | [`DataGrid`](/docs/components-datagrid--docs)                                                                                                    | Experimental `DataGrid` in v9 could be a substitute.                         |\n| `Dialog`                 | [`Dialog`](/docs/components-dialog--docs)                                                                                                        | Refined API, using `open` and `onOpenChange` props.                          |\n| `DocumentCard`           | [`Card`](/docs/components-card-card--docs)                                                                                                       | Use `Card` in v9.                                                            |\n| `Dropdown`               | [`Dropdown`](/docs/components-dropdown--docs)                                                                                                    | API and performance enhancements.                                            |\n| `Fabric`                 | `FluentProvider`                                                                                                                                 | Use `FluentProvider` for managing themes and global context.                 |\n| `Facepile`               | [`AvatarGroup`](/docs/components-avatargroup--docs)                                                                                              | Replaced by `AvatarGroup` in v9.                                             |\n| `FocusTrapZone`          | [`Tabster`](https://tabster.io/)                                                                                                                 | Use `Tabster`.                                                               |\n| `FocusZone`              | [`Tabster`](https://tabster.io/)                                                                                                                 | Use `Tabster`.                                                               |\n| `GroupedList`            | [`Tree`](/docs/components-tree--docs)                                                                                                            | Use `Tree` in v9.                                                            |\n| `HoverCard`              | Not available                                                                                                                                    | No direct equivalent; could use `Popover` with custom behavior.              |\n| `Icon`                   | [`@fluentui/react-icons package`](/docs/icons-overview--docs)                                                                                    | v9 provides more customization options.                                      |\n| `IconButton`             | [`Button`](/docs/components-button-button--docs)                                                                                                 | v9 provides more customization options.                                      |\n```\n\n----------------------------------------\n\nTITLE: Exporting Neutral Stencil and Stroke Color Tokens in JavaScript\nDESCRIPTION: This snippet defines and exports color tokens for neutral stencils and strokes in the Fluent UI design system. It includes variables for different stencil and stroke types, including accessibility-focused options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\n// @public\nexport const colorNeutralStencil1 = \"var(--colorNeutralStencil1)\";\n\n// @public\nexport const colorNeutralStencil1Alpha = \"var(--colorNeutralStencil1Alpha)\";\n\n// @public\nexport const colorNeutralStencil2 = \"var(--colorNeutralStencil2)\";\n\n// @public\nexport const colorNeutralStencil2Alpha = \"var(--colorNeutralStencil2Alpha)\";\n\n// @public\nexport const colorNeutralStroke1 = \"var(--colorNeutralStroke1)\";\n\n// @public\nexport const colorNeutralStroke1Hover = \"var(--colorNeutralStroke1Hover)\";\n\n// @public\nexport const colorNeutralStroke1Pressed = \"var(--colorNeutralStroke1Pressed)\";\n\n// @public\nexport const colorNeutralStroke1Selected = \"var(--colorNeutralStroke1Selected)\";\n\n// @public\nexport const colorNeutralStroke2 = \"var(--colorNeutralStroke2)\";\n\n// @public\nexport const colorNeutralStroke3 = \"var(--colorNeutralStroke3)\";\n\n// @public\nexport const colorNeutralStrokeAccessible = \"var(--colorNeutralStrokeAccessible)\";\n\n// @public\nexport const colorNeutralStrokeAccessibleHover = \"var(--colorNeutralStrokeAccessibleHover)\";\n\n// @public\nexport const colorNeutralStrokeAccessiblePressed = \"var(--colorNeutralStrokeAccessiblePressed)\";\n\n// @public\nexport const colorNeutralStrokeAccessibleSelected = \"var(--colorNeutralStrokeAccessibleSelected)\";\n\n// @public\nexport const colorNeutralStrokeAlpha = \"var(--colorNeutralStrokeAlpha)\";\n\n// @public\nexport const colorNeutralStrokeAlpha2 = \"var(--colorNeutralStrokeAlpha2)\";\n\n// @public\nexport const colorNeutralStrokeDisabled = \"var(--colorNeutralStrokeDisabled)\";\n\n// @public\nexport const colorNeutralStrokeInvertedDisabled = \"var(--colorNeutralStrokeInvertedDisabled)\";\n\n// @public\nexport const colorNeutralStrokeOnBrand = \"var(--colorNeutralStrokeOnBrand)\";\n\n// @public\nexport const colorNeutralStrokeOnBrand2 = \"var(--colorNeutralStrokeOnBrand2)\";\n\n// @public\nexport const colorNeutralStrokeOnBrand2Hover = \"var(--colorNeutralStrokeOnBrand2Hover)\";\n\n// @public\nexport const colorNeutralStrokeOnBrand2Pressed = \"var(--colorNeutralStrokeOnBrand2Pressed)\";\n\n// @public\nexport const colorNeutralStrokeOnBrand2Selected = \"var(--colorNeutralStrokeOnBrand2Selected)\";\n\n// @public\nexport const colorNeutralStrokeSubtle = \"var(--colorNeutralStrokeSubtle)\";\n```\n\n----------------------------------------\n\nTITLE: Defining Component Constants and Types for FluentUI in TypeScript\nDESCRIPTION: This snippet defines various constant objects for component enums like DrawerPosition, DrawerSize, DrawerType, DropdownAppearance, and their corresponding types using ValuesOf utility type.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_39\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type DrawerPosition = ValuesOf<typeof DrawerPosition>;\n\nexport const DrawerSize: {\n    readonly small: \"small\";\n    readonly medium: \"medium\";\n    readonly large: \"large\";\n    readonly full: \"full\";\n};\n\nexport type DrawerSize = ValuesOf<typeof DrawerSize>;\n\nexport const DrawerType: {\n    readonly nonModal: \"non-modal\";\n    readonly modal: \"modal\";\n    readonly inline: \"inline\";\n};\n\nexport type DrawerType = ValuesOf<typeof DrawerType>;\n\nexport const DropdownAppearance: {\n    filledDarker: string;\n    filledLighter: string;\n    outline: string;\n    transparent: string;\n};\n\nexport type DropdownAppearance = ValuesOf<typeof DropdownAppearance>;\n\nexport const DropdownSize: {\n    readonly small: \"small\";\n    readonly medium: \"medium\";\n    readonly large: \"large\";\n};\n\nexport type DropdownSize = ValuesOf<typeof DropdownSize>;\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript API for Component Conformance Testing in @fluentui/react-conformance\nDESCRIPTION: This TypeScript declaration file defines the public API for the @fluentui/react-conformance package. It includes types and interfaces for component conformance testing, with the main isConformant function and configuration options for test customization.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-conformance/etc/react-conformance.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ComponentDoc } from 'react-docgen-typescript';\nimport * as React_2 from 'react';\nimport { render } from '@testing-library/react';\nimport * as ts from 'typescript';\n\n// @public (undocumented)\nexport type BaseConformanceTest<TProps = {}> = (testInfo: IsConformantOptions<TProps>) => void;\n\n// @public (undocumented)\nexport type ConformanceTest<TProps = {}> = (testInfo: IsConformantOptions<TProps>, componentInfo: ComponentDoc, tsProgram: ts.Program) => void;\n\n// @public (undocumented)\nexport function isConformant<TProps = {}>(...testInfo: Partial<IsConformantOptions<TProps>>[]): void;\n\n// @public (undocumented)\nexport interface IsConformantOptions<TProps = {}> {\n    Component: React_2.ComponentType<TProps>;\n    componentPath: string;\n    disabledTests?: string[];\n    disableTypeTests?: boolean;\n    displayName: string;\n    elementRefName?: string;\n    extraTests?: TestObject<TProps>;\n    getTargetElement?: (renderResult: ReturnType<typeof render>, attr: keyof React_2.AllHTMLAttributes<HTMLElement> | 'ref' | `data-${string}`) => HTMLElement;\n    isInternal?: boolean;\n    primarySlot?: keyof TProps | 'root';\n    renderOptions?: Parameters<typeof render>[1];\n    requiredProps?: Partial<TProps>;\n    testOptions?: TestOptions;\n    tsConfig?: Partial<{\n        configName: string;\n        configDir: string;\n    }>;\n    // @deprecated (undocumented)\n    tsconfigDir?: string;\n    useDefaultExport?: boolean;\n}\n\n// @public (undocumented)\nexport interface TestObject<TProps = {}> {\n    // (undocumented)\n    [key: string]: BaseConformanceTest<TProps> | ConformanceTest<TProps>;\n}\n\n// @public\nexport interface TestOptions {\n    // (undocumented)\n    'component-has-static-classname'?: {\n        prefix?: string;\n    };\n    // (undocumented)\n    'consistent-callback-args'?: {\n        legacyCallbacks?: string[];\n    };\n    // (undocumented)\n    'consistent-callback-names'?: {\n        ignoreProps?: string[];\n    };\n    // (undocumented)\n    'has-static-classnames'?: {\n        props: {\n            [key: string]: string | {};\n        };\n        expectedClassNames?: {\n            [key: string]: string;\n        };\n        getPortalElement?: (renderResult: ReturnType<typeof render>) => HTMLElement;\n    }[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Pattern Interface for Chart Styling in TypeScript\nDESCRIPTION: The Pattern interface provides attributes to define various stylistic patterns applied to chart elements, such as background and foreground colors, opacity, fill mode, and shapes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/chart-utilities/etc/chart-utilities.api.md#2025-04-20_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface Pattern {\n    bgcolor?: string;\n    fgcolor?: string;\n    fgopacity?: string;\n    fillmode?: 'replace' | 'overlay';\n    shape?: '' | '/' | '\\\\' | 'x' | '-' | '|' | '+' | '.';\n    size?: number;\n    solidity?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Bumping FluentUI React Monaco Editor Version with PR\nDESCRIPTION: This snippet shows how to bump the version of the @fluentui/react-monaco-editor package. The pull request number provides a direct link to the change within the repository. This action is part of maintaining the dependencies for the project.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-docsite-components/CHANGELOG.md#2025-04-20_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n\"- Bump @fluentui/react-monaco-editor to v1.7.137 ([PR #29539](https://github.com/microsoft/fluentui/pull/29539) by beachball)\"\n```\n\n----------------------------------------\n\nTITLE: Presence Badge Migration from v8 to v9\nDESCRIPTION: Shows how to convert Persona presence statuses to Avatar badge configurations, including status mapping and additional options\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-avatar/library/docs/MIGRATION.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Presence status conversion\n// v8 Persona\npresence: PersonaPresence.online\n\n// v9 Avatar\nbadge: { status: 'available' }\n\n// Out of office example\nbadge: { status: 'available', outOfOffice: true }\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-jsx-runtime version\nDESCRIPTION: This patch updates the version of the `@fluentui/react-jsx-runtime` dependency. Bumping this package ensures that the `@fluentui/react-badge` component uses the latest features and bug fixes available in the JSX runtime.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nBump @fluentui/react-jsx-runtime to v9.0.43 ([PR #32494](https://github.com/microsoft/fluentui/pull/32494) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Modifying resolveShorthand Function in TypeScript\nDESCRIPTION: This snippet shows modifications to the resolveShorthand function to include default props children and component type using Symbols.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/slot-children-render-function.md#2025-04-20_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\nconst defaultPropsChildrenSymbol = Symbol('fuiSlotDefaultPropsChildren')\nconst componentTypeSymbol = Symbol('fuiSlotComponentType')\n\nexport const resolveShorthand: ResolveShorthandFunction = (value, options) => {\n  //...\n\n  return defaultProps ? {\n    ...defaultProps,\n    ...resolvedShorthand,\n+   [defaultPropsChildrenSymbol]: defaultProps?.children\n+   [componentTypeSymbol]: options.componentType\n  } : resolvedShorthand;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Configuration JavaScript\nDESCRIPTION: Sets up the stories configuration for Storybook by specifying the paths to include story files for the Fluent UI react-progress component. No special dependencies are needed. The paths include .mdx and .tsx files for story descriptions. This is used for integrating components into Storybook for development and testing purposes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-progress/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-progress/stories/src/**/*.stories.mdx', '../packages/react-components/react-progress/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Theme-Switchable Separator Images in JSX\nDESCRIPTION: This code snippet demonstrates how to use the DisplayToggle component to show theme-specific images of a Separator. It includes light and dark mode images that can be toggled using a theme switcher.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/SeparatorPage/docs/android/SeparatorOverview.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<DisplayToggle onText=\"Dark\" offText=\"Light\" label=\"Theme Switcher\">\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/android/updated/img_separator_01_light.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/android/updated/img_separator_01_dark.png?text=DarkMode\" />\n\n</DisplayToggle>\n```\n\n----------------------------------------\n\nTITLE: Discarded Solution: Explicit Provider Wrapping\nDESCRIPTION: Alternative approach using TextDirectionProvider to handle style overrides manually\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/provider-style-overrides.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeStyles, RendererProvider, TextDirectionProvider } from '@fluentui/react-components';\n\nconst useProviderOverrides = makeStyles({\n  provider: {\n    marginLeft: '1px',\n  },\n});\n\nconst App = ({ dir }) => {\n  const styles = useProviderOverrides();\n  return (\n    <FluentProvider dir={dir} className={styles.provider}>\n      {children}\n    </FluentProvider>\n  );\n};\n\nconst AppWrapper = () => {\n  return (\n    <TextDirectionProvider dir=\"rtl\">\n      <App dir=\"rtl\" />\n    </TextDirectionProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Theme-Switchable Date/Time Picker Images in HTML\nDESCRIPTION: This HTML snippet demonstrates how to display theme-switchable images of a date/time picker using a custom DisplayToggle component. It includes image sources for both light and dark modes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/DatePickerPage/docs/ios/DateTimePickerOverview.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- prettier-ignore-start -->\n<DisplayToggle onText=\"Dark\" offText=\"Light\" label=\"Theme Switcher\">\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_date_timepicker_01_light.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_date_timepicker_01_dark.png?text=DarkMode\" />\n\n</DisplayToggle>\n<!-- prettier-ignore-end -->\n```\n\n----------------------------------------\n\nTITLE: Bumping FluentUI React Monaco Editor Version with PR\nDESCRIPTION: This snippet shows how to bump the version of the @fluentui/react-monaco-editor package. The pull request number provides a direct link to the change within the repository. This action is part of maintaining the dependencies for the project.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-docsite-components/CHANGELOG.md#2025-04-20_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n\"- Bump @fluentui/react-monaco-editor to v1.7.135 ([PR #29471](https://github.com/microsoft/fluentui/pull/29471) by beachball)\"\n```\n\n----------------------------------------\n\nTITLE: Defining FluentUI Icon String Constants\nDESCRIPTION: This code snippet defines a series of string constants, each representing a unique icon name within the FluentUI icon set. These constants can be used to reference icons within FluentUI components and applications.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/font-icons-mdl2/etc/font-icons-mdl2.api.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nClassNotebookLogoInverse32 = \"ClassNotebookLogoInverse32\",\n    // (undocumented)\n    ClassroomLogo = \"ClassroomLogo\",\n    // (undocumented)\n    Clear = \"Clear\",\n    // (undocumented)\n    ClearFilter = \"ClearFilter\",\n    // (undocumented)\n    ClearFormatting = \"ClearFormatting\",\n    // (undocumented)\n    ClearFormattingA = \"ClearFormattingA\",\n    // (undocumented)\n    ClearFormattingEraser = \"ClearFormattingEraser\",\n    // (undocumented)\n    ClearNight = \"ClearNight\",\n    // (undocumented)\n    ClearSelection = \"ClearSelection\",\n    // (undocumented)\n    ClearSelectionMirrored = \"ClearSelectionMirrored\",\n    // (undocumented)\n    ClipboardList = \"ClipboardList\",\n    // (undocumented)\n    ClipboardListMirrored = \"ClipboardListMirrored\",\n    // (undocumented)\n    ClipboardSolid = \"ClipboardSolid\",\n    // (undocumented)\n    Clock = \"Clock\",\n    // (undocumented)\n    CloneToDesktop = \"CloneToDesktop\",\n    // (undocumented)\n    ClosedCaption = \"ClosedCaption\",\n    // (undocumented)\n    ClosePane = \"ClosePane\",\n    // (undocumented)\n    ClosePaneMirrored = \"ClosePaneMirrored\",\n    // (undocumented)\n    Cloud = \"Cloud\",\n    // (undocumented)\n    CloudAdd = \"CloudAdd\",\n    // (undocumented)\n    CloudDownload = \"CloudDownload\",\n    // (undocumented)\n    CloudImportExport = \"CloudImportExport\",\n    // (undocumented)\n    CloudUpload = \"CloudUpload\",\n    // (undocumented)\n    CloudWeather = \"CloudWeather\",\n    // (undocumented)\n    Cloudy = \"Cloudy\",\n    // (undocumented)\n    Cocktails = \"Cocktails\",\n    // (undocumented)\n    Code = \"Code\",\n    // (undocumented)\n    CodeEdit = \"CodeEdit\",\n    // (undocumented)\n    Coffee = \"Coffee\",\n    // (undocumented)\n    CoffeeScript = \"CoffeeScript\",\n    // (undocumented)\n    CollapseContent = \"CollapseContent\",\n    // (undocumented)\n    CollapseContentSingle = \"CollapseContentSingle\",\n    // (undocumented)\n    CollapseMenu = \"CollapseMenu\",\n    // (undocumented)\n    CollegeFootball = \"CollegeFootball\",\n    // (undocumented)\n    CollegeHoops = \"CollegeHoops\",\n    // (undocumented)\n    Color = \"Color\",\n    // (undocumented)\n    ColorSolid = \"ColorSolid\",\n    // (undocumented)\n    ColumnLeftTwoThirds = \"ColumnLeftTwoThirds\",\n    // (undocumented)\n    ColumnLeftTwoThirdsEdit = \"ColumnLeftTwoThirdsEdit\",\n    // (undocumented)\n    ColumnOptions = \"ColumnOptions\",\n    // (undocumented)\n    ColumnRightTwoThirds = \"ColumnRightTwoThirds\",\n    // (undocumented)\n    ColumnRightTwoThirdsEdit = \"ColumnRightTwoThirdsEdit\",\n    // (undocumented)\n    ColumnVerticalSection = \"ColumnVerticalSection\",\n    // (undocumented)\n    ColumnVerticalSectionEdit = \"ColumnVerticalSectionEdit\",\n    // (undocumented)\n    Combine = \"Combine\",\n    // (undocumented)\n    Combobox = \"Combobox\",\n    // (undocumented)\n    CommandPrompt = \"CommandPrompt\",\n    // (undocumented)\n    Comment = \"Comment\",\n    // (undocumented)\n    CommentActive = \"CommentActive\",\n    // (undocumented)\n    CommentAdd = \"CommentAdd\",\n    // (undocumented)\n    CommentNext = \"CommentNext\",\n    // (undocumented)\n    CommentPrevious = \"CommentPrevious\",\n    // (undocumented)\n    CommentSolid = \"CommentSolid\",\n    // (undocumented)\n    CommentUrgent = \"CommentUrgent\",\n    // (undocumented)\n    Commitments = \"Commitments\",\n    // (undocumented)\n    Communications = \"Communications\",\n    // (undocumented)\n    CompanyDirectory = \"CompanyDirectory\",\n    // (undocumented)\n    CompanyDirectoryMirrored = \"CompanyDirectoryMirrored\",\n    // (undocumented)\n    Compare = \"Compare\",\n    // (undocumented)\n    CompassNW = \"CompassNW\",\n    // (undocumented)\n    Completed = \"Completed\",\n    // (undocumented)\n    CompletedSolid = \"CompletedSolid\",\n    // (undocumented)\n    ComplianceAudit = \"ComplianceAudit\",\n    // (undocumented)\n    ConfigurationSolid = \"ConfigurationSolid\",\n    // (undocumented)\n    ConnectContacts = \"ConnectContacts\",\n    // (undocumented)\n    ConnectVirtualMachine = \"ConnectVirtualMachine\",\n    // (undocumented)\n    ConstructionCone = \"ConstructionCone\",\n    // (undocumented)\n    ConstructionConeSolid = \"ConstructionConeSolid\",\n    // (undocumented)\n    Contact = \"Contact\",\n    // (undocumented)\n    ContactCard = \"ContactCard\",\n    // (undocumented)\n    ContactCardSettings = \"ContactCardSettings\",\n    // (undocumented)\n    ContactCardSettingsMirrored = \"ContactCardSettingsMirrored\",\n    // (undocumented)\n    ContactHeart = \"ContactHeart\",\n    // (undocumented)\n    ContactInfo = \"ContactInfo\",\n    // (undocumented)\n    ContactLink = \"ContactLink\",\n    // (undocumented)\n    ContactList = \"ContactList\",\n    // (undocumented)\n    ContextMenu = \"ContextMenu\",\n    // (undocumented)\n    Contrast = \"Contrast\",\n    // (undocumented)\n    Copy = \"Copy\",\n    // (undocumented)\n    Cotton = \"Cotton\",\n    // (undocumented)\n    Coupon = \"Coupon\",\n    // (undocumented)\n    CPlusPlus = \"CPlusPlus\",\n    // (undocumented)\n    CPlusPlusLanguage = \"CPlusPlusLanguage\",\n    // (undocumented)\n    CreateMailRule = \"CreateMailRule\",\n    // (undocumented)\n    Cricket = \"Cricket\",\n    // (undocumented)\n    CRMCustomerInsightsApp = \"CRMCustomerInsightsApp\",\n    // (undocumented)\n    CRMProcesses = \"CRMProcesses\",\n    // (undocumented)\n    CRMReport = \"CRMReport\",\n    // (undocumented)\n    CRMServices = \"CRMServices\",\n    // (undocumented)\n    Crop = \"Crop\",\n    // (undocumented)\n    Crown = \"Crown\",\n    // (undocumented)\n    CrownSolid = \"CrownSolid\",\n    // (undocumented)\n    CSharp = \"CSharp\",\n    // (undocumented)\n    CSharpLanguage = \"CSharpLanguage\",\n    // (undocumented)\n    CSS = \"CSS\",\n    // (undocumented)\n    CubeShape = \"CubeShape\",\n    // (undocumented)\n    CustomizeToolbar = \"CustomizeToolbar\",\n    // (undocumented)\n    CustomList = \"CustomList\",\n    // (undocumented)\n    CustomListMirrored = \"CustomListMirrored\",\n    // (undocumented)\n    Cut = \"Cut\",\n    // (undocumented)\n    Cycling = \"Cycling\",\n    // (undocumented)\n    D365TalentHRCore = \"D365TalentHRCore\",\n    // (undocumented)\n    D365TalentInsight = \"D365TalentInsight\",\n    // (undocumented)\n    D365TalentLearn = \"D365TalentLearn\",\n    // (undocumented)\n    DashboardAdd = \"DashboardAdd\",\n    // (undocumented)\n    Database = \"Database\",\n    // (undocumented)\n    DatabaseSync = \"DatabaseSync\",\n    // (undocumented)\n    DataConnectionLibrary = \"DataConnectionLibrary\",\n    // (undocumented)\n    Dataflows = \"Dataflows\",\n    // (undocumented)\n    DataflowsLink = \"DataflowsLink\",\n    // (undocumented)\n    DataManagementSettings = \"DataManagementSettings\",\n    // (undocumented)\n    DateTime = \"DateTime\",\n    // (undocumented)\n    DateTime2 = \"DateTime2\",\n    // (undocumented)\n    DateTimeMirrored = \"DateTimeMirrored\",\n    // (undocumented)\n    DeactivateOrders = \"DeactivateOrders\",\n    // (undocumented)\n    Decimals = \"Decimals\",\n    // (undocumented)\n    DecisionSolid = \"DecisionSolid\",\n    // (undocumented)\n    DeclineCall = \"DeclineCall\",\n    // (undocumented)\n    DecreaseIndentArrow = \"DecreaseIndentArrow\",\n    // (undocumented)\n    DecreaseIndentArrowMirrored = \"DecreaseIndentArrowMirrored\",\n    // (undocumented)\n    DecreaseIndentLegacy = \"DecreaseIndentLegacy\",\n    // (undocumented)\n    DecreaseIndentText = \"DecreaseIndentText\",\n    // (undocumented)\n    DecreaseIndentTextMirrored = \"DecreaseIndentTextMirrored\",\n    // (undocumented)\n    DefaultRatio = \"DefaultRatio\",\n    // (undocumented)\n    DefectSolid = \"DefectSolid\",\n    // (undocumented)\n    DefenderTVM = \"DefenderTVM\",\n    // (undocumented)\n    Delete = \"Delete\",\n    // (undocumented)\n    DeleteColumns = \"DeleteColumns\",\n    // (undocumented)\n    DeleteRows = \"DeleteRows\",\n    // (undocumented)\n    DeleteRowsMirrored = \"DeleteRowsMirrored\",\n    // (undocumented)\n    DeleteTable = \"DeleteTable\",\n    // (undocumented)\n    DeliveryTruck = \"DeliveryTruck\",\n    // (undocumented)\n    DelveAnalytics = \"DelveAnalytics\",\n    // (undocumented)\n    DelveAnalyticsLogo = \"DelveAnalyticsLogo\",\n    // (undocumented)\n    DelveLogo = \"DelveLogo\",\n    // (undocumented)\n    DelveLogoFill = \"DelveLogoFill\",\n    // (undocumented)\n    DelveLogoInverse = \"DelveLogoInverse\",\n    // (undocumented)\n    DependencyAdd = \"DependencyAdd\",\n    // (undocumented)\n    DependencyRemove = \"DependencyRemove\",\n    // (undocumented)\n    Deploy = \"Deploy\",\n    // (undocumented)\n    Descending = \"Descending\",\n    // (undocumented)\n    Design = \"Design\",\n    // (undocumented)\n    DesktopScreenshot = \"DesktopScreenshot\",\n    // (undocumented)\n    DeveloperTools = \"DeveloperTools\",\n    // (undocumented)\n    Devices2 = \"Devices2\",\n    // (undocumented)\n    Devices3 = \"Devices3\",\n    // (undocumented)\n    Devices4 = \"Devices4\",\n    // (undocumented)\n    Diagnostic = \"Diagnostic\",\n    // (undocumented)\n    DiagnosticDataBarTooltip = \"DiagnosticDataBarTooltip\",\n    // (undocumented)\n    Dialpad = \"Dialpad\",\n    // (undocumented)\n    Diamond = \"Diamond\",\n    // (undocumented)\n    DiamondSolid = \"DiamondSolid\",\n    // (undocumented)\n    Dictionary = \"Dictionary\",\n    // (undocumented)\n    DictionaryRemove = \"DictionaryRemove\",\n    // (undocumented)\n    DietPlanNotebook = \"DietPlanNotebook\",\n    // (undocumented)\n    DiffInline = \"DiffInline\",\n    // (undocumented)\n    DiffSideBySide = \"DiffSideBySide\",\n    // (undocumented)\n    DisableUpdates = \"DisableUpdates\",\n    // (undocumented)\n    DisconnectVirtualMachine = \"DisconnectVirtualMachine\",\n    // (undocumented)\n    Dislike = \"Dislike\",\n    // (undocumented)\n    DislikeSolid = \"DislikeSolid\",\n    // (undocumented)\n    DistributeDown = \"DistributeDown\",\n    // (undocumented)\n    DockLeft = \"DockLeft\",\n    // (undocumented)\n    DockLeftMirrored = \"DockLeftMirrored\",\n    // (undocumented)\n    DockRight = \"DockRight\",\n    // (undocumented)\n    DocLibrary = \"DocLibrary\",\n    // (undocumented)\n    DocsLogoInverse = \"DocsLogoInverse\",\n    // (undocumented)\n    Document = \"Document\",\n    // (undocumented)\n    DocumentApproval = \"DocumentApproval\",\n    // (undocumented)\n    Documentation = \"Documentation\",\n    // (undocumented)\n```\n\n----------------------------------------\n\nTITLE: Get Migration Stats - Shell\nDESCRIPTION: This command retrieves statistics on how many packages have been migrated without actually executing any migration.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/migrate-converged-pkg/README.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:migrate-converged-pkg --stats\n```\n\n----------------------------------------\n\nTITLE: Installing @fluentui/react-icons-northstar with NPM\nDESCRIPTION: This snippet shows how to install the @fluentui/react-icons-northstar package using NPM, which is a package manager for JavaScript.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/react-icons-northstar/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @fluentui/react-icons-northstar\n```\n\n----------------------------------------\n\nTITLE: Rendering Performance Test Results Table in HTML\nDESCRIPTION: This HTML snippet creates a table displaying performance test results for various UI components. It compares 'Master Ticks' and 'PR Ticks' for different scenarios, with links to detailed flamegraph results.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/perf-test-react-components/README.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <tr>\n    <th>Scenario</th>\n    <th>Master Ticks *</th>\n    <th>PR Ticks *</th>\n  </tr><tr>\n            <td>BaseButton</td>\n            <td><a href=\"http://fabricweb.z5.web.core.windows.net/pr-deploy-site/refs/pull/9516/merge/perf-test/BaseButton_master.html\">883</a></td>\n            <td><a href=\"http://fabricweb.z5.web.core.windows.net/pr-deploy-site/refs/pull/9516/merge/perf-test/BaseButton_pr.html\">895</a></td>\n           </tr>\n<tr>\n            <td>BaseButtonNew</td>\n            <td><a href=\"http://fabricweb.z5.web.core.windows.net/pr-deploy-site/refs/pull/9516/merge/perf-test/BaseButtonNew_master.html\">3734</a></td>\n            <td><a href=\"http://fabricweb.z5.web.core.windows.net/pr-deploy-site/refs/pull/9516/merge/perf-test/BaseButtonNew_pr.html\">2536</a></td>\n           </tr>\n<tr>\n            <td>DefaultButton</td>\n            <td><a href=\"http://fabricweb.z5.web.core.windows.net/pr-deploy-site/refs/pull/9516/merge/perf-test/DefaultButton_master.html\">1175</a></td>\n            <td><a href=\"http://fabricweb.z5.web.core.windows.net/pr-deploy-site/refs/pull/9516/merge/perf-test/DefaultButton_pr.html\">1175</a></td>\n           </tr>\n<tr>\n            <td>DefaultButtonNew</td>\n            <td><a href=\"http://fabricweb.z5.web.core.windows.net/pr-deploy-site/refs/pull/9516/merge/perf-test/DefaultButtonNew_master.html\">3241</a></td>\n            <td><a href=\"http://fabricweb.z5.web.core.windows.net/pr-deploy-site/refs/pull/9516/merge/perf-test/DefaultButtonNew_pr.html\">2039</a></td>\n           </tr>\n<tr>\n            <td>DetailsRow</td>\n            <td><a href=\"http://fabricweb.z5.web.core.windows.net/pr-deploy-site/refs/pull/9516/merge/perf-test/DetailsRow_master.html\">8409</a></td>\n            <td><a href=\"http://fabricweb.z5.web.core.windows.net/pr-deploy-site/refs/pull/9516/merge/perf-test/DetailsRow_pr.html\">8535</a></td>\n           </tr>\n<tr>\n            <td>DetailsRowNoStyles</td>\n            <td><a href=\"http://fabricweb.z5.web.core.windows.net/pr-deploy-site/refs/pull/9516/merge/perf-test/DetailsRowNoStyles_master.html\">6357</a></td>\n            <td><a href=\"http://fabricweb.z5.web.core.windows.net/pr-deploy-site/refs/pull/9516/merge/perf-test/DetailsRowNoStyles_pr.html\">6298</a></td>\n           </tr>\n<tr>\n            <td>DocumentCardTitle</td>\n            <td><a href=\"http://fabricweb.z5.web.core.windows.net/pr-deploy-site/refs/pull/9516/merge/perf-test/DocumentCardTitle_master.html\">44342</a></td>\n            <td><a href=\"http://fabricweb.z5.web.core.windows.net/pr-deploy-site/refs/pull/9516/merge/perf-test/DocumentCardTitle_pr.html\">44246</a></td>\n           </tr>\n<tr>\n            <td>MenuButton</td>\n            <td><a href=\"http://fabricweb.z5.web.core.windows.net/pr-deploy-site/refs/pull/9516/merge/perf-test/MenuButton_master.html\">2068</a></td>\n            <td><a href=\"http://fabricweb.z5.web.core.windows.net/pr-deploy-site/refs/pull/9516/merge/perf-test/MenuButton_pr.html\">2078</a></td>\n           </tr>\n<tr>\n            <td>MenuButtonNew</td>\n            <td><a href=\"http://fabricweb.z5.web.core.windows.net/pr-deploy-site/refs/pull/9516/merge/perf-test/MenuButtonNew_master.html\">6473</a></td>\n            <td><a href=\"http://fabricweb.z5.web.core.windows.net/pr-deploy-site/refs/pull/9516/merge/perf-test/MenuButtonNew_pr.html\">4910</a></td>\n           </tr>\n<tr>\n            <td>PrimaryButton</td>\n            <td><a href=\"http://fabricweb.z5.web.core.windows.net/pr-deploy-site/refs/pull/9516/merge/perf-test/PrimaryButton_master.html\">1391</a></td>\n            <td><a href=\"http://fabricweb.z5.web.core.windows.net/pr-deploy-site/refs/pull/9516/merge/perf-test/PrimaryButton_pr.html\">1361</a></td>\n           </tr>\n<tr>\n            <td>PrimaryButtonNew</td>\n            <td><a href=\"http://fabricweb.z5.web.core.windows.net/pr-deploy-site/refs/pull/9516/merge/perf-test/PrimaryButtonNew_master.html\">3658</a></td>\n            <td><a href=\"http://fabricweb.z5.web.core.windows.net/pr-deploy-site/refs/pull/9516/merge/perf-test/PrimaryButtonNew_pr.html\">2427</a></td>\n           </tr>\n<tr>\n            <td>SplitButton</td>\n            <td><a href=\"http://fabricweb.z5.web.core.windows.net/pr-deploy-site/refs/pull/9516/merge/perf-test/SplitButton_master.html\">3845</a></td>\n            <td><a href=\"http://fabricweb.z5.web.core.windows.net/pr-deploy-site/refs/pull/9516/merge/perf-test/SplitButton_pr.html\">3847</a></td>\n           </tr>\n<tr>\n            <td>SplitButtonNew</td>\n            <td><a href=\"http://fabricweb.z5.web.core.windows.net/pr-deploy-site/refs/pull/9516/merge/perf-test/SplitButtonNew_master.html\">14086</a></td>\n            <td><a href=\"http://fabricweb.z5.web.core.windows.net/pr-deploy-site/refs/pull/9516/merge/perf-test/SplitButtonNew_pr.html\">9225</a></td>\n           </tr>\n<tr>\n            <td>Toggle</td>\n            <td><a href=\"http://fabricweb.z5.web.core.windows.net/pr-deploy-site/refs/pull/9516/merge/perf-test/Toggle_master.html\">2037</a></td>\n            <td><a href=\"http://fabricweb.z5.web.core.windows.net/pr-deploy-site/refs/pull/9516/merge/perf-test/Toggle_pr.html\">2018</a></td>\n           </tr>\n<tr>\n            <td>ToggleNew</td>\n            <td><a href=\"http://fabricweb.z5.web.core.windows.net/pr-deploy-site/refs/pull/9516/merge/perf-test/ToggleNew_master.html\">2553</a></td>\n            <td><a href=\"http://fabricweb.z5.web.core.windows.net/pr-deploy-site/refs/pull/9516/merge/perf-test/ToggleNew_pr.html\">2485</a></td>\n           </tr>\n<tr>\n            <td>button</td>\n            <td><a href=\"http://fabricweb.z5.web.core.windows.net/pr-deploy-site/refs/pull/9516/merge/perf-test/button_master.html\">81</a></td>\n            <td><a href=\"http://fabricweb.z5.web.core.windows.net/pr-deploy-site/refs/pull/9516/merge/perf-test/button_pr.html\">70</a></td>\n           </tr></table>\n```\n\n----------------------------------------\n\nTITLE: Importing webpack plugins and dependencies for React component libraries\nDESCRIPTION: Sets up the necessary webpack plugins and dependencies for building FluentUI React component libraries, including plugins for HTML generation, bundle analysis, and other build utilities.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-teaching-popover/stories/src/TeachingPopover/TeachingPopoverDescription.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { resolveCwd, findGitRoot } = require('just-scripts-utils');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst TerserPlugin = require('terser-webpack-plugin');\nconst { BundleAnalyzerPlugin } = require('webpack-bundle-analyzer');\nconst { DuplicatesPlugin } = require('inspectpack/plugin');\nconst { retryAsync } = require('./retry');\nconst ForkTsCheckerWebpackPlugin = require('fork-ts-checker-webpack-plugin');\nconst _webpack = require('webpack');\nconst path = require('path');\nconst fs = require('fs');\n\nconst webpackVersion = _webpack.version;\n\nconst webpack = webpackVersion.startsWith('4') ? _webpack : webpackVersion.startsWith('5') ? _webpack.webpack : _webpack;\n```\n\n----------------------------------------\n\nTITLE: Defining FluentUI Icon Constants\nDESCRIPTION: This code snippet defines a series of constants, each representing an icon within the FluentUI framework. Each constant is assigned a string value corresponding to the icon's name. These constants are used to reference and utilize the icons throughout the FluentUI library.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/font-icons-mdl2/etc/font-icons-mdl2.api.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// (undocumented)\nKaizalaLogo = \"KaizalaLogo\",\n// (undocumented)\nKeyboardClassic = \"KeyboardClassic\",\n// (undocumented)\nKnowledgeArticle = \"KnowledgeArticle\",\n// (undocumented)\nLabel = \"Label\",\n// (undocumented)\nLadybugSolid = \"LadybugSolid\",\n// (undocumented)\nLamp = \"Lamp\",\n// (undocumented)\nLandscapeOrientation = \"LandscapeOrientation\",\n// (undocumented)\nLaptopSecure = \"LaptopSecure\",\n// (undocumented)\nLaptopSelected = \"LaptopSelected\",\n// (undocumented)\nLargeGrid = \"LargeGrid\",\n// (undocumented)\nLeave = \"Leave\",\n// (undocumented)\nLibrary = \"Library\",\n// (undocumented)\nLifesaver = \"Lifesaver\",\n// (undocumented)\nLifesaverLock = \"LifesaverLock\",\n// (undocumented)\nLight = \"Light\",\n// (undocumented)\nLightbulb = \"Lightbulb\",\n// (undocumented)\nLightningBolt = \"LightningBolt\",\n// (undocumented)\nLightWeight = \"LightWeight\",\n// (undocumented)\nLike = \"Like\",\n// (undocumented)\nLikeSolid = \"LikeSolid\",\n// (undocumented)\nLine = \"Line\",\n// (undocumented)\nLineChart = \"LineChart\",\n// (undocumented)\nLineSpacing = \"LineSpacing\",\n// (undocumented)\nLineStyle = \"LineStyle\",\n// (undocumented)\nLineThickness = \"LineThickness\",\n// (undocumented)\nLink = \"Link\",\n// (undocumented)\nLink12 = \"Link12\",\n// (undocumented)\nLinkedDatabase = \"LinkedDatabase\",\n// (undocumented)\nLinkedInLogo = \"LinkedInLogo\",\n// (undocumented)\nList = \"List\",\n// (undocumented)\nListMirrored = \"ListMirrored\",\n// (undocumented)\nLocaleLanguage = \"LocaleLanguage\",\n// (undocumented)\nLocation = \"Location\",\n// (undocumented)\nLocationCircle = \"LocationCircle\",\n// (undocumented)\nLocationDot = \"LocationDot\",\n// (undocumented)\nLocationFill = \"LocationFill\",\n// (undocumented)\nLocationOutline = \"LocationOutline\",\n// (undocumented)\nLock = \"Lock\",\n// (undocumented)\nLock12 = \"Lock12\",\n// (undocumented)\nLockSolid = \"LockSolid\",\n// (undocumented)\nLogRemove = \"LogRemove\",\n// (undocumented)\nLookupEntities = \"LookupEntities\",\n// (undocumented)\nLowerBrightness = \"LowerBrightness\",\n// (undocumented)\nLyncLogo = \"LyncLogo\",\n// (undocumented)\nM365InvoicingLogo = \"M365InvoicingLogo\",\n// (undocumented)\nMail = \"Mail\",\n// (undocumented)\nMailAlert = \"MailAlert\",\n// (undocumented)\nMailAttached = \"MailAttached\",\n// (undocumented)\nMailCheck = \"MailCheck\",\n// (undocumented)\nMailFill = \"MailFill\",\n// (undocumented)\nMailForward = \"MailForward\",\n// (undocumented)\nMailForwardMirrored = \"MailForwardMirrored\",\n// (undocumented)\nMailLowImportance = \"MailLowImportance\",\n// (undocumented)\nMailOptions = \"MailOptions\",\n// (undocumented)\nMailPause = \"MailPause\",\n// (undocumented)\nMailReminder = \"MailReminder\",\n// (undocumented)\nMailRepeat = \"MailRepeat\",\n// (undocumented)\nMailReply = \"MailReply\",\n// (undocumented)\nMailReplyAll = \"MailReplyAll\",\n// (undocumented)\nMailReplyAllMirrored = \"MailReplyAllMirrored\",\n// (undocumented)\nMailReplyMirrored = \"MailReplyMirrored\",\n// (undocumented)\nMailSchedule = \"MailSchedule\",\n// (undocumented)\nMailSolid = \"MailSolid\",\n// (undocumented)\nMailTentative = \"MailTentative\",\n// (undocumented)\nMailTentativeMirrored = \"MailTentativeMirrored\",\n// (undocumented)\nMailUndelivered = \"MailUndelivered\",\n// (undocumented)\nManagerSelfService = \"ManagerSelfService\",\n// (undocumented)\nManufacturing = \"Manufacturing\",\n// (undocumented)\nMapDirections = \"MapDirections\",\n// (undocumented)\nMapLayers = \"MapLayers\",\n// (undocumented)\nMapPin = \"MapPin\",\n// (undocumented)\nMapPinSolid = \"MapPinSolid\",\n// (undocumented)\nMarkAsProtected = \"MarkAsProtected\",\n// (undocumented)\nMarkDownLanguage = \"MarkDownLanguage\",\n// (undocumented)\nMarket = \"Market\",\n// (undocumented)\nMarketDown = \"MarketDown\",\n// (undocumented)\nMasterDatabase = \"MasterDatabase\",\n// (undocumented)\nMaximumValue = \"MaximumValue\",\n// (undocumented)\nMedal = \"Medal\",\n// (undocumented)\nMedalSolid = \"MedalSolid\",\n// (undocumented)\nMedia = \"Media\",\n// (undocumented)\nMediaAdd = \"MediaAdd\",\n// (undocumented)\nMedical = \"Medical\",\n// (undocumented)\nMegaphone = \"Megaphone\",\n// (undocumented)\nMegaphoneSolid = \"MegaphoneSolid\",\n// (undocumented)\nMemo = \"Memo\",\n// (undocumented)\nMerge = \"Merge\",\n// (undocumented)\nMergeDuplicate = \"MergeDuplicate\",\n// (undocumented)\nMessage = \"Message\",\n// (undocumented)\nMessageFill = \"MessageFill\",\n// (undocumented)\nMicOff = \"MicOff\",\n// (undocumented)\nMicOff2 = \"MicOff2\",\n// (undocumented)\nMicrophone = \"Microphone\",\n// (undocumented)\nMicrosoftFlowLogo = \"MicrosoftFlowLogo\",\n// (undocumented)\nMicrosoftStaffhubLogo = \"MicrosoftStaffhubLogo\",\n// (undocumented)\nMicrosoftTranslatorLogo = \"MicrosoftTranslatorLogo\",\n// (undocumented)\nMicrosoftTranslatorLogoBlue = \"MicrosoftTranslatorLogoBlue\",\n// (undocumented)\nMicrosoftTranslatorLogoGreen = \"MicrosoftTranslatorLogoGreen\",\n// (undocumented)\nMiniContract = \"MiniContract\",\n// (undocumented)\nMiniContractMirrored = \"MiniContractMirrored\",\n// (undocumented)\nMiniExpand = \"MiniExpand\",\n// (undocumented)\nMiniExpandMirrored = \"MiniExpandMirrored\",\n// (undocumented)\nMiniLink = \"MiniLink\",\n// (undocumented)\nMinimumValue = \"MinimumValue\",\n// (undocumented)\nMobileReport = \"MobileReport\",\n// (undocumented)\nMobileSelected = \"MobileSelected\",\n// (undocumented)\nModelingView = \"ModelingView\",\n// (undocumented)\nMoney = \"Money\",\n// (undocumented)\nMore = \"More\",\n// (undocumented)\nMoreSports = \"MoreSports\",\n// (undocumented)\nMoreVertical = \"MoreVertical\",\n// (undocumented)\nMountainClimbing = \"MountainClimbing\",\n// (undocumented)\nMove = \"Move\",\n// (undocumented)\nMovers = \"Movers\",\n// (undocumented)\nMoveToFolder = \"MoveToFolder\",\n// (undocumented)\nMSNLogo = \"MSNLogo\",\n// (undocumented)\nMSNVideos = \"MSNVideos\",\n// (undocumented)\nMSNVideosSolid = \"MSNVideosSolid\",\n// (undocumented)\nMultiSelect = \"MultiSelect\",\n// (undocumented)\nMultiSelectMirrored = \"MultiSelectMirrored\",\n// (undocumented)\nMusicInCollection = \"MusicInCollection\",\n// (undocumented)\nMusicInCollectionFill = \"MusicInCollectionFill\",\n// (undocumented)\nMusicNote = \"MusicNote\",\n// (undocumented)\nMuteChat = \"MuteChat\",\n// (undocumented)\nMyMoviesTV = \"MyMoviesTV\",\n// (undocumented)\nNav2DMapView = \"Nav2DMapView\",\n// (undocumented)\nNavigateBack = \"NavigateBack\",\n// (undocumented)\nNavigateBackMirrored = \"NavigateBackMirrored\",\n// (undocumented)\nNavigateExternalInline = \"NavigateExternalInline\",\n// (undocumented)\nNavigateForward = \"NavigateForward\",\n// (undocumented)\nNavigateForwardMirrored = \"NavigateForwardMirrored\",\n// (undocumented)\nNavigationFlipper = \"NavigationFlipper\",\n// (undocumented)\nNetworkTower = \"NetworkTower\",\n// (undocumented)\nNewAnalyticsQuery = \"NewAnalyticsQuery\",\n// (undocumented)\nNewFolder = \"NewFolder\",\n// (undocumented)\nNewMail = \"NewMail\",\n// (undocumented)\nNews = \"News\",\n// (undocumented)\nNewsSearch = \"NewsSearch\",\n// (undocumented)\nNewTeamProject = \"NewTeamProject\",\n// (undocumented)\nNext = \"Next\",\n// (undocumented)\nNormalWeight = \"NormalWeight\",\n// (undocumented)\nNoteForward = \"NoteForward\",\n// (undocumented)\nNotePinned = \"NotePinned\",\n// (undocumented)\nNoteReply = \"NoteReply\",\n// (undocumented)\nNotExecuted = \"NotExecuted\",\n// (undocumented)\nNotImpactedSolid = \"NotImpactedSolid\",\n// (undocumented)\nNugetLogo = \"NugetLogo\",\n// (undocumented)\nNumberedList = \"NumberedList\",\n// (undocumented)\nNumberedListNumber = \"NumberedListNumber\",\n// (undocumented)\nNumberedListNumberMirrored = \"NumberedListNumberMirrored\",\n// (undocumented)\nNumberedListText = \"NumberedListText\",\n// (undocumented)\nNumberedListTextMirrored = \"NumberedListTextMirrored\",\n// (undocumented)\nNumberField = \"NumberField\",\n// (undocumented)\nNumberSequence = \"NumberSequence\",\n// (undocumented)\nNumberSymbol = \"NumberSymbol\",\n// (undocumented)\nOctagon = \"Octagon\",\n// (undocumented)\nOEM = \"OEM\",\n// (undocumented)\nOfficeAddinsLogo = \"OfficeAddinsLogo\",\n// (undocumented)\nOfficeAssistantLogo = \"OfficeAssistantLogo\",\n// (undocumented)\nOfficeChat = \"OfficeChat\",\n// (undocumented)\nOfficeChatSolid = \"OfficeChatSolid\",\n// (undocumented)\nOfficeFormsLogo = \"OfficeFormsLogo\",\n// (undocumented)\nOfficeFormsLogo16 = \"OfficeFormsLogo16\",\n// (undocumented)\nOfficeFormsLogo24 = \"OfficeFormsLogo24\",\n// (undocumented)\nOfficeFormsLogoFill = \"OfficeFormsLogoFill\",\n// (undocumented)\nOfficeFormsLogoFill16 = \"OfficeFormsLogoFill16\",\n// (undocumented)\nOfficeFormsLogoFill24 = \"OfficeFormsLogoFill24\",\n// (undocumented)\nOfficeFormsLogoInverse = \"OfficeFormsLogoInverse\",\n// (undocumented)\nOfficeFormsLogoInverse16 = \"OfficeFormsLogoInverse16\",\n// (undocumented)\nOfficeFormsLogoInverse24 = \"OfficeFormsLogoInverse24\",\n// (undocumented)\nOfficeLogo = \"OfficeLogo\",\n// (undocumented)\nOfficeStoreLogo = \"OfficeStoreLogo\",\n// (undocumented)\nOfficeVideoLogo = \"OfficeVideoLogo\",\n// (undocumented)\nOfficeVideoLogoFill = \"OfficeVideoLogoFill\",\n```\n\n----------------------------------------\n\nTITLE: Defining ToggleButton Configuration in TypeScript\nDESCRIPTION: Defines constants and types for ToggleButton appearance, shape, and size options. Also exports the element definition, styles, and template for the ToggleButton component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_82\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport const ToggleButtonAppearance: {\n    readonly primary: \"primary\";\n    readonly outline: \"outline\";\n    readonly subtle: \"subtle\";\n    readonly transparent: \"transparent\";\n};\n\n// @public\nexport type ToggleButtonAppearance = ValuesOf<typeof ToggleButtonAppearance>;\n\n// @public (undocumented)\nexport const ToggleButtonDefinition: FASTElementDefinition<typeof ToggleButton>;\n\n// @public\nexport const ToggleButtonShape: {\n    readonly circular: \"circular\";\n    readonly rounded: \"rounded\";\n    readonly square: \"square\";\n};\n\n// @public\nexport type ToggleButtonShape = ValuesOf<typeof ToggleButtonShape>;\n\n// @public\nexport const ToggleButtonSize: {\n    readonly small: \"small\";\n    readonly medium: \"medium\";\n    readonly large: \"large\";\n};\n\n// @public\nexport type ToggleButtonSize = ValuesOf<typeof ToggleButtonSize>;\n\n// @public\nexport const ToggleButtonStyles: ElementStyles;\n\n// @public\nexport const ToggleButtonTemplate: ElementViewTemplate<ToggleButton>;\n```\n\n----------------------------------------\n\nTITLE: TagPickerButton Component Definition\nDESCRIPTION: Defines the TagPickerButton React component as a ForwardRefComponent, indicating that it's a component that accepts a ref and forwards it to a child element.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const TagPickerButton: ForwardRefComponent<TagPickerButtonProps>;\"\n```\n\n----------------------------------------\n\nTITLE: Basic Input Component Usage in React\nDESCRIPTION: Demonstrates two primary ways of using the Input component with default value and controlled input scenarios\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-input/library/README.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Input defaultValue=\"Hello, World!\" />\n<Input value={value} onChange={onInputChange} />\n```\n\n----------------------------------------\n\nTITLE: Importing FluentUI React Charting Components\nDESCRIPTION: Pattern for importing specific components from the FluentUI React Charting library, where ComponentName should be replaced with the actual chart component name.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/README.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ComponentName } from '@fluentui/react-charting/lib/ComponentName';\n```\n\n----------------------------------------\n\nTITLE: Markdown Tables - Input Component Size Specifications\nDESCRIPTION: Tables defining styling specifications for different input field sizes, including dimensions, padding, and icon sizes\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-input/library/docs/Spec-styling.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Style                         | Application                    | small               | medium           | large     |\n| ----------------------------- | ------------------------------ | ------------------- | ---------------- | --------- |\n| height                        | root `minHeight`               | 24px                | 32px             | 40px      |\n| left/right padding            | root                           | sNudge              | mNudge           | m         |\n| left/right padding in content | input                          | xxs                 | xxs              | sNudge    |\n| content size                  | root, input (doesn't inherit)  | caption1 (base.200) | body1 (base.300) | base.400  |\n| \"icon\" size                   | contentBefore/after `> svg`    | 16Regular           | 20Regular        | 24Regular |\n| spacing within root           | root `display: flex`, flex gap | xxs                 | xxs              | sNudge    |\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem in V0 Style\nDESCRIPTION: Example of how ListItem component was imported and used in the V0 version of FluentUI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/ItemLayout.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ListItem } from '@fluentui/react-northstar';\nconst Component = () => <ListItem />;\n```\n\n----------------------------------------\n\nTITLE: Basic Package Version and Change Information\nDESCRIPTION: Version history entries showing package updates and dependency version bumps for the FluentUI React migration package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-migration-v8-v9/library/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[9.7.9](https://github.com/microsoft/fluentui/tree/@fluentui/react-migration-v8-v9_v9.7.9)\n\nWed, 16 Apr 2025 19:42:18 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-migration-v8-v9_v9.7.8..@fluentui/react-migration-v8-v9_v9.7.9)\n\n### Patches\n\n- Bump @fluentui/react-components to v9.62.0\n```\n\n----------------------------------------\n\nTITLE: Running Fluent UI tests using Yarn and Nx\nDESCRIPTION: This command runs tests for a specific project in the Fluent UI monorepo using Yarn and Nx.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/testing-with-jest.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn nx run <project-name>:test\n```\n\n----------------------------------------\n\nTITLE: Generating HTML plugin configuration for React component demos\nDESCRIPTION: Creates configuration for HtmlWebpackPlugin to generate an HTML file for hosting React component demo pages. Includes customization for page title and favicon.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-teaching-popover/stories/src/TeachingPopover/TeachingPopoverDescription.md#2025-04-20_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction generateHTMLWebpackPlugin(options) {\n  if (options.disableHtmlWebpackPlugin) {\n    return undefined;\n  }\n\n  const htmlTitle = options.htmlTitle || 'React App';\n  let minify = {\n    ...(options.production && {\n      removeComments: true,\n      collapseWhitespace: true,\n      removeRedundantAttributes: true,\n      useShortDoctype: true,\n      removeEmptyAttributes: true,\n      removeStyleLinkTypeAttributes: true,\n      keepClosingSlash: true,\n      minifyJS: true,\n      minifyCSS: true,\n      minifyURLs: true,\n    }),\n  };\n\n  if (typeof options.minifyOptions !== 'undefined') {\n    minify = options.minifyOptions;\n  }\n\n  const faviconPath = options.faviconPath\n    ? path.resolve(__dirname, options.faviconPath)\n    : path.resolve(__dirname, '../public/favicon.ico');\n\n  return new HtmlWebpackPlugin({\n    inject: 'body',\n    ...(fs.existsSync(faviconPath) && { favicon: faviconPath }),\n    template: options.htmlTemplate || path.resolve(__dirname, '../public/index.html'),\n    title: htmlTitle,\n    minify: minify,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Styles - After Migration\nDESCRIPTION: Updated style implementation using makeStyles in FluentUI v9\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/TabList.stories.mdx#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// in COMPONENT_NAME.tsx\nimport { Tab, TabList } from '@fluentui/react-components';\nimport { useStyles } from './COMPONENT_NAME.styles.ts';\n\nexport const Component = ({ items }) => {\n  const classes = useStyles();\n  return (\n    <TabList className={classes.chatTabList} defaultSelectedValue={items[0].id}>\n      {items.map(({ id, content }) => (\n        <Tab key={id} value={id}>\n          {content}\n        </Tab>\n      ))}\n    </TabList>\n  );\n};\n\n// in COMPONENT_NAME.styles.ts\nimport { makeStyles } from '@fluentui/react-components';\n\nexport const useStyles = makeStyles({\n  chatTabList: {\n    width: '100%',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react to v8.42.2\nDESCRIPTION: This patch updates the @fluentui/react library to version 8.42.2, ensuring users benefit from the latest applications of the library. More information is in Pull Request #20635.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/ts-minbar-test-react/CHANGELOG.md#2025-04-20_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.42.2 ([PR #20635](https://github.com/microsoft/fluentui/pull/20635) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Initializing FluentUI React Spinner Component\nDESCRIPTION: Demonstrates basic usage of the Spinner component with size and label props in a React application\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-spinner/library/docs/Spec.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Spinner } from \"@fluentui/react-spinner\";\n\nfunction App() {\n    return (\n        <Spinner size=\"medium\" label=\"Loading\" />\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Button Styles with CSS Custom Properties in React\nDESCRIPTION: Demonstrates how to customize a Button component's styles using CSS custom properties and className.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/custom-styling.md#2025-04-20_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\n// Customizing button via className\nconst useCustomButtonStyle = makeResetStyles({\n  [ButtonTokens.background]: 'red',\n  [ButtonTokens.color]: 'white',\n  [ButtonTokens.border]: 'green',\n  ':hover': {\n    [ButtonTokens.background]: 'green',\n    [ButtonTokens.color]: 'pink',\n    [ButtonTokens.border]: 'blue',\n  },\n  ':active': {\n    [ButtonTokens.background]: 'orange',\n    [ButtonTokens.color]: 'black',\n    [ButtonTokens.border]: 'purple',\n  },\n});\n\nexport const CustomButton = props => {\n  const rootStyle = useCustomButtonStyle();\n  return <Button className={rootStyle}>Hello</Button>;\n};\n```\n\n----------------------------------------\n\nTITLE: Render Function Declaration\nDESCRIPTION: Declares the renderProgressBar_unstable function, which takes a ProgressBarState and returns a JSX.Element. This function is likely responsible for rendering the ProgressBar component based on its state.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-progress/library/etc/react-progress.api.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n// @public\nexport const renderProgressBar_unstable: (state: ProgressBarState) => JSX.Element;\n```\n```\n\n----------------------------------------\n\nTITLE: Reverting CSS style in React Badge\nDESCRIPTION: This patch reverts a CSS style change related to the `min-width` property for the Badge component in Fluent UI React. The change aims to correct an unintended consequence of setting `min-width` to `max-content`, likely to restore the intended layout behavior of the badge.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nfix: revert min-width: max-content for Badge ([PR #34215](https://github.com/microsoft/fluentui/pull/34215) by vgenaev@gmail.com)\n```\n\n----------------------------------------\n\nTITLE: Registering Fluent UI React Package with Yarn Link\nDESCRIPTION: Commands to register the local @fluentui/react package with yarn link for development purposes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/using-local-unpublished-version-of-the-lib-with-a-local-React-app.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd fluentui/packages/react\n$ yarn link\n```\n\n----------------------------------------\n\nTITLE: Writing Component Tests in TypeScript\nDESCRIPTION: Example structure for writing tests for the Button component. It shows how to organize tests by component props and include the isConformant test.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/test-a-feature.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isConformant } from '../../../specs/commonTests'\n\nimport Button from '../../../../src/components/Button'\n\ndescribe('Button', () => {\n  isConformant(Button)\n\n  describe('accessibility', () => {\n    ...\n  })\n\n  describe('type', () => {\n    ...\n  })\n\n  describe('circular', () => {\n    ...\n  })\n\n  describe('onClick', () => {\n    ...\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Tree State Interface in TypeScript\nDESCRIPTION: The ITreeState interface represents the internal state of a tree chart, managing layout dimensions and states required for rendering the tree visually.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/etc/react-charting.api.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface ITreeState {\n    _height: number;\n    _layoutWidth?: number;\n    _width: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Avoiding style rule duplication with makeResetStyles\nDESCRIPTION: Demonstrates the proper approach to structuring styles by using makeResetStyles for base styles and makeStyles for variations, avoiding duplication of properties across rules.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/styles-handbook.md#2025-04-20_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeStyles, makeResetStyles, mergeClasses, shorthands } from '@griffel/react';\nimport { tokens } from '@fluentui/react-theme';\n\nconst useBaseClassName = makeResetStyles({\n  display: 'flex',\n  color: tokens.colorNeutralForeground1,\n  padding: '10px',\n});\nconst useClasses = makeStyles({\n  // ❌ Don't do\n  //  \"display\" & \"padding\" with the same values are defined in base styles\n  primary: {\n    display: 'flex',\n    ...shorthands.padding('10px'),\n    backgroundColor: tokens.colorBrandBackground,\n    color: tokens.colorBrandForeground1,\n  },\n  // ✅ Do\n  primary: {\n    backgroundColor: tokens.colorBrandBackground,\n    color: tokens.colorBrandForeground1,\n  },\n});\n\nfunction App(props) {\n  const baseClassName = useBaseClassName();\n  const classes = useClasses();\n  const className = mergeClasses(baseClassName, props.primary && classes.primary);\n\n  /* --- */\n}\n```\n\n----------------------------------------\n\nTITLE: Visual Regression Testing with Screener\nDESCRIPTION: This snippet describes Visual Regression testing to prevent regressions in component styling. Covered currently with [Screener](https://screener.io/).\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/testing.md#2025-04-20_snippet_6\n\nLANGUAGE: none\nCODE:\n```\n\"Visual Regression\"\n\n```\n\nLANGUAGE: none\nCODE:\n```\nPrevent regressions in component styling. Covered currently with [Screener](https://screener.io/).\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react-tabs to version v9.0.0-beta.9\nDESCRIPTION: This snippet records the update for the @fluentui/react-tabs component to version v9.0.0-beta.9, ensuring tab functionality remains up to date and effective.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/vr-tests-react-components/CHANGELOG.md#2025-04-20_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react-tabs to v9.0.0-beta.9 ([PR #21995](https://github.com/microsoft/fluentui/pull/21995) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react to v8.47.1\nDESCRIPTION: This patch updates the @fluentui/react package to version 8.47.1. Regular updates help maintain the stability and performance of the library. Refer to Pull Request #20587 for more details.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/ts-minbar-test-react/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.47.1 ([PR #20587](https://github.com/microsoft/fluentui/pull/20587) by beachball)\n```\n\n----------------------------------------\n\nTITLE: MenuList Composure in Fluent Web Components v3\nDESCRIPTION: This HTML snippet demonstrates the composition of a MenuList component in Fluent Web Components v3. It shows how to structure menu items using fluent-menu-item within the fluent-menu-list container.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/menu-list/README.md#2025-04-20_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<fluent-menu-list>\n  <fluent-menu-item>Item 1</fluent-menu-item>\n  <fluent-menu-item>Item 2</fluent-menu-item>\n  <fluent-menu-item>Item 3</fluent-menu-item>\n</fluent-menu-list>\n```\n\n----------------------------------------\n\nTITLE: Link Element in Chakra UI\nDESCRIPTION: Displays an anchor tag with Chakra UI specific class for styling. The component needs CSS support from Chakra UI and an href attribute as input.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Link.md#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a href=\\\"https=//chakra-ui.com\\\" class=\\\"css-u5zpo1\\\">Chakra UI</a>\n```\n\n----------------------------------------\n\nTITLE: ARIAButtonShorthandProps Example\nDESCRIPTION: This snippet provides an example of how `ObjectShorthandProps` can be used in practice for defining `ARIAButtonShorthandProps`. It shows how to create a union type that allows a button to be rendered as different native elements (button, div, span, or anchor) using the `as` property.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/root-as-slot.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ARIAButtonShorthandProps =\n  | ObjectShorthandProps<JSX.IntrinsicElements['button'], HTMLButtonElement, /*as*/ 'button'>\n  | ObjectShorthandProps<JSX.IntrinsicElements['div'], HTMLDivElement, /*as*/ 'div'>\n  | ObjectShorthandProps<JSX.IntrinsicElements['span'], HTMLSpanElement, /*as*/ 'span'>\n  | ObjectShorthandProps<JSX.IntrinsicElements['a'], HTMLAnchorElement, /*as*/ 'a'>;\n```\n\n----------------------------------------\n\nTITLE: Option B Implementation Example\nDESCRIPTION: Shows the Northstar approach implementation where data contains merged props and new value.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/event-handlers-arguments.md#2025-04-20_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst onChange = (ev: React.FormEvent, data: InputProps) => {\n  const { value } = data;\n\n  // I can access the new value.\n  console.log(`The new value is ${value}`);\n\n  // I can still access the props of the parent component.\n  console.log(`The input (#${id}) user's passed in props are ${JSON.stringify(data)}`);\n\n  // I can access additional metadata specific to the change if needed, but it may overwrite\n  // original props values because of the lack of namepacing.\n  const { id } = props;\n};\n```\n\n----------------------------------------\n\nTITLE: Simplified DOM Structure from Button Icon Slot - HTML\nDESCRIPTION: This HTML comment illustrates how the Button component renders simplified DOM output when an icon slot receives an object that defines its properties, including additional attributes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Slots.md#2025-04-20_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- 💡 Simplified DOM output -->\n<button class=\"ms-Button\">\n  <!-- 👇 An additional class and id have been added to markup -->\n  <span class=\"ms-Button-icon an-awesome-slot\" id=\"#button-icon\">\n    <!-- 👇 An icon will be rendered inside a slot as it is passed as children -->\n    <span class=\"ms-Icon\"><svg /></span>\n  </span>\n</button>\n```\n\n----------------------------------------\n\nTITLE: TypeScript API Definitions for FluentUI React Card Component\nDESCRIPTION: Comprehensive TypeScript type definitions for the FluentUI React Card component and its subcomponents, including props interfaces, style utilities, and rendering functions. This is an automatically generated API report from API Extractor.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-card/library/etc/react-card.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ComponentProps } from '@fluentui/react-utilities';\nimport type { ComponentState } from '@fluentui/react-utilities';\nimport type { ForwardRefComponent } from '@fluentui/react-utilities';\nimport * as React_2 from 'react';\nimport type { Slot } from '@fluentui/react-utilities';\nimport type { SlotClassNames } from '@fluentui/react-utilities';\n\n// @public\nexport const Card: ForwardRefComponent<CardProps>;\n\n// @public\nexport const cardClassNames: SlotClassNames<CardSlots>;\n\n// @public\nexport interface CardContextValue {\n    // (undocumented)\n    selectableA11yProps: {\n        referenceId?: string;\n        setReferenceId: (referenceId: string) => void;\n        referenceLabel?: string;\n        setReferenceLabel: (referenceLabel: string) => void;\n    };\n}\n\n// @public\nexport const cardCSSVars: {\n    cardSizeVar: string;\n    cardBorderRadiusVar: string;\n};\n\n// @public\nexport const CardFooter: ForwardRefComponent<CardFooterProps>;\n\n// @public\nexport const cardFooterClassNames: SlotClassNames<CardFooterSlots>;\n\n// @public\nexport type CardFooterProps = ComponentProps<CardFooterSlots>;\n\n// @public\nexport type CardFooterSlots = {\n    root: Slot<'div'>;\n    action?: Slot<'div'>;\n};\n\n// @public\nexport type CardFooterState = ComponentState<CardFooterSlots>;\n\n// @public\nexport const CardHeader: ForwardRefComponent<CardHeaderProps>;\n\n// @public\nexport const cardHeaderClassNames: SlotClassNames<CardHeaderSlots>;\n\n// @public\nexport const cardHeaderCSSVars: {\n    cardHeaderGapVar: string;\n};\n\n// @public\nexport type CardHeaderProps = ComponentProps<Partial<CardHeaderSlots>>;\n\n// @public\nexport type CardHeaderSlots = {\n    root: Slot<'div'>;\n    image: Slot<'div', 'img'>;\n    header: Slot<'div'>;\n    description: Slot<'div'>;\n    action?: Slot<'div'>;\n};\n\n// @public\nexport type CardHeaderState = ComponentState<CardHeaderSlots>;\n\n// @public\nexport type CardOnSelectionChangeEvent = React_2.MouseEvent | React_2.KeyboardEvent | React_2.ChangeEvent;\n\n// @public\nexport const CardPreview: ForwardRefComponent<CardPreviewProps>;\n\n// @public\nexport const cardPreviewClassNames: SlotClassNames<CardPreviewSlots>;\n\n// @public\nexport type CardPreviewProps = ComponentProps<CardPreviewSlots>;\n\n// @public\nexport type CardPreviewSlots = {\n    root: Slot<'div'>;\n    logo?: Slot<'div', 'img'>;\n};\n\n// @public\nexport type CardPreviewState = ComponentState<CardPreviewSlots>;\n\n// @public\nexport type CardProps = ComponentProps<CardSlots> & {\n    appearance?: 'filled' | 'filled-alternative' | 'outline' | 'subtle';\n    focusMode?: 'off' | 'no-tab' | 'tab-exit' | 'tab-only';\n    orientation?: 'horizontal' | 'vertical';\n    size?: 'small' | 'medium' | 'large';\n    selected?: boolean;\n    defaultSelected?: boolean;\n    onSelectionChange?: (event: CardOnSelectionChangeEvent, data: CardOnSelectData) => void;\n};\n\n// @internal (undocumented)\nexport const CardProvider: React_2.Provider<CardContextValue | undefined>;\n\n// @public\nexport type CardSlots = {\n    root: Slot<'div'>;\n    floatingAction?: Slot<'div'>;\n    checkbox?: Slot<'input'>;\n};\n\n// @public\nexport type CardState = ComponentState<CardSlots> & CardContextValue & Required<Pick<CardProps, 'appearance' | 'orientation' | 'size'> & {\n    interactive: boolean;\n    selectable: boolean;\n    selected: boolean;\n    selectFocused: boolean;\n}>;\n\n// @public\nexport const renderCard_unstable: (state: CardState, cardContextValue: CardContextValue) => JSX.Element;\n\n// @public\nexport const renderCardFooter_unstable: (state: CardFooterState) => JSX.Element;\n\n// @public\nexport const renderCardHeader_unstable: (state: CardHeaderState) => JSX.Element;\n\n// @public\nexport const renderCardPreview_unstable: (state: CardPreviewState) => JSX.Element;\n\n// @public\nexport const useCard_unstable: (props: CardProps, ref: React_2.Ref<HTMLDivElement>) => CardState;\n\n// @internal (undocumented)\nexport const useCardContext_unstable: () => CardContextValue;\n\n// @public\nexport const useCardFooter_unstable: (props: CardFooterProps, ref: React_2.Ref<HTMLElement>) => CardFooterState;\n\n// @public\nexport const useCardFooterStyles_unstable: (state: CardFooterState) => CardFooterState;\n\n// @public\nexport const useCardHeader_unstable: (props: CardHeaderProps, ref: React_2.Ref<HTMLElement>) => CardHeaderState;\n\n// @public\nexport const useCardHeaderStyles_unstable: (state: CardHeaderState) => CardHeaderState;\n\n// @public\nexport const useCardPreview_unstable: (props: CardPreviewProps, ref: React_2.Ref<HTMLElement>) => CardPreviewState;\n\n// @public\nexport const useCardPreviewStyles_unstable: (state: CardPreviewState) => CardPreviewState;\n\n// @public\nexport const useCardStyles_unstable: (state: CardState) => CardState;\n\n// (No @packageDocumentation comment for this package)\n```\n\n----------------------------------------\n\nTITLE: Defining IComboBoxProps Interface\nDESCRIPTION: Defines the `IComboBoxProps` interface, which specifies the properties for the ComboBox component. It extends `ISelectableDroppableTextProps` and `React_2.RefAttributes<HTMLDivElement>` and includes properties for handling user input, events, rendering, and styling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_69\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IComboBoxProps extends ISelectableDroppableTextProps<IComboBox, IComboBox>, React_2.RefAttributes<HTMLDivElement> {\n    allowFreeform?: boolean;\n    allowFreeInput?: boolean;\n    allowParentArrowNavigation?: boolean;\n    ariaDescribedBy?: string;\n    autoComplete?: 'on' | 'off';\n    autofill?: IAutofillProps;\n    buttonIconProps?: IIconProps;\n    caretDownButtonStyles?: Partial<IButtonStyles>;\n    caseSensitive?: boolean;\n    comboBoxOptionStyles?: Partial<IComboBoxOptionStyles>;\n    componentRef?: IRefObject<IComboBox>;\n    dropdownMaxWidth?: number;\n    dropdownWidth?: number;\n    getClassNames?: (theme: ITheme, isOpen: boolean, disabled: boolean, required: boolean, focused: boolean, allowFreeForm: boolean, hasErrorMessage: boolean, className?: string) => IComboBoxClassNames;\n    iconButtonProps?: IButtonProps;\n    isButtonAriaHidden?: boolean;\n    multiSelectDelimiter?: string;\n    onChange?: (event: React_2.FormEvent<IComboBox>, option?: IComboBoxOption, index?: number, value?: string) => void;\n    onInputValueChange?: (text: string) => void;\n    onItemClick?: (event: React_2.FormEvent<IComboBox>, option?: IComboBoxOption, index?: number) => void;\n    onMenuDismiss?: () => void;\n    onMenuDismissed?: () => void;\n    onMenuOpen?: () => void;\n    onPendingValueChanged?: (option?: IComboBoxOption, index?: number, value?: string) => void;\n    onRenderLabel?: IRenderFunction<IOnRenderComboBoxLabelProps>;\n    onRenderLowerContent?: IRenderFunction<IComboBoxProps>;\n    onRenderUpperContent?: IRenderFunction<IComboBoxProps>;\n    onResolveOptions?: (options: IComboBoxOption[]) => IComboBoxOption[] | PromiseLike<IComboBoxOption[]>;\n    onScrollToItem?: (itemIndex: number) => void;\n    options: IComboBoxOption[];\n    persistMenu?: boolean;\n    scrollSelectedToTop?: boolean;\n    shouldRestoreFocus?: boolean;\n    styles?: Partial<IComboBoxStyles>;\n    text?: string;\n    theme?: ITheme;\n    useComboBoxAsMenuWidth?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ScrollablePane Component Interfaces in TypeScript\nDESCRIPTION: Defines the interfaces for the ScrollablePane component, including IScrollablePane, IScrollablePaneProps, IScrollablePaneState, and associated style and context interfaces. The ScrollablePane provides scrolling functionality with sticky headers and footers.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_169\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IScrollablePane {\n    forceLayoutUpdate(): void;\n    getScrollPosition(): number;\n}\n\n// @public (undocumented)\nexport interface IScrollablePaneContext {\n    // (undocumented)\n    scrollablePane?: {\n        subscribe: (handler: (container: HTMLElement, stickyContainer: HTMLElement) => void) => void;\n        unsubscribe: (handler: (container: HTMLElement, stickyContainer: HTMLElement) => void) => void;\n        addSticky: (sticky: Sticky) => void;\n        removeSticky: (sticky: Sticky) => void;\n        updateStickyRefHeights: () => void;\n        sortSticky: (sticky: Sticky, sortAgain?: boolean) => void;\n        notifySubscribers: (sort?: boolean) => void;\n        syncScrollSticky: (sticky: Sticky) => void;\n    };\n    // (undocumented)\n    window: Window | undefined;\n}\n\n// @public (undocumented)\nexport interface IScrollablePaneProps extends React_2.HTMLAttributes<HTMLElement | ScrollablePaneBase> {\n    className?: string;\n    componentRef?: IRefObject<IScrollablePane>;\n    initialScrollPosition?: number;\n    // (undocumented)\n    scrollbarVisibility?: ScrollbarVisibility;\n    scrollContainerAriaLabel?: string;\n    scrollContainerFocus?: boolean;\n    styles?: IStyleFunctionOrObject<IScrollablePaneStyleProps, IScrollablePaneStyles>;\n    theme?: ITheme;\n}\n\n// @public (undocumented)\nexport interface IScrollablePaneState {\n    // (undocumented)\n    scrollbarHeight: number;\n    // (undocumented)\n    scrollbarWidth: number;\n    // (undocumented)\n    stickyBottomHeight: number;\n    // (undocumented)\n    stickyTopHeight: number;\n}\n\n// @public (undocumented)\nexport interface IScrollablePaneStyleProps {\n    className?: string;\n    // (undocumented)\n    scrollbarVisibility?: IScrollablePaneProps['scrollbarVisibility'];\n    theme: ITheme;\n}\n\n// @public (undocumented)\nexport interface IScrollablePaneStyles {\n    contentContainer: IStyle;\n    root: IStyle;\n    stickyAbove: IStyle;\n    stickyBelow: IStyle;\n    stickyBelowItems: IStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Table Structure (HTML)\nDESCRIPTION: A basic example of the Table component structure in HTML. This mirrors the React example and demonstrates how the `Table`, `TableHeader`, `TableBody`, `TableRow` and `TableCell` are represented in raw HTML.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-table/library/docs/Spec.md#2025-04-20_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th></th>\n    </tr>\n  </thead>\n\n  <tbody>\n    <tr>\n      <td></td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Defining Popover Properties and Behavior\nDESCRIPTION: Details the structure and features of `PopoverProps`, outlining the properties that control the opening behavior, position, alignment, and additional configuration like offset and focus trapping, intended for popovers within a React application.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-popover/library/docs/Spec.md#2025-04-20_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type PopoverProps = {\n  /**\n   * Controls the popover open state\n   */\n  open?: boolean;\n\n  /**\n   * Call back when the component requests to change value\n   */\n  onOpenChange?: (e: OpenPopoverEvents, data: OpenEventData) => void;\n\n  /**\n   * Flag to open the Popover by hovering the trigger\n   */\n  openOnHover?: boolean;\n\n  /**\n   * Anchor the popover to an element other than the trigger\n   */\n  target?: HTMLElement;\n\n  /**\n   * Popover position relative to target\n   */\n  position?: 'above' | 'below' | 'before' | 'after';\n\n  /**\n   * Popover alignment relative to target\n   */\n  align?: 'top' | 'bottom' | 'start' | 'end' | 'center';\n\n  /**\n   * Popover offset value or callback with positioning props\n   */\n  offset?: OffsetFunction | [number, number];\n\n  /**\n   * Renders `PopoverSurface` to a portal out of DOM order\n   *\n   * @default document.body\n   */\n  mountNode?: string;\n\n  /**\n   * Explicitly render the popover in DOM order\n   */\n  inline?: boolean;\n\n  /**\n   * Traps focus inside the popup and applies modal dialog behaviour\n   */\n  trapFocus?: boolean;\n\n  /**\n   * Covers the target that the popover is anchored to. This is the `PopoverTrigger` unless `target` prop is used\n   */\n  coverTarget?: boolean;\n\n  /**\n   * Do not render an arrow pointing to the target element. This is the `PopoverTrigger` unless `target` prop is used\n   */\n  noArrow?: boolean;\n\n  /**\n   * Sets the delay for closing popover on mouse leave\n   */\n  mouseLeaveDelay?: number;\n\n  /**\n   * Close when scrolling outside of it\n   */\n  closeOnScroll?: boolean;\n};\n\n```\n\n----------------------------------------\n\nTITLE: Pre-RFC Checkbox Component Structure in TSX\nDESCRIPTION: Example showing the DOM structure of a Checkbox component before implementing the RFC proposal.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/native-element-props.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<slots.root>\n  <slots.checkmark {/* visual checkmark */} />\n  <slots.input {/* actual input */}>\n  {children /*label*/}\n</slots.root>\n```\n\n----------------------------------------\n\nTITLE: Defining Button Component Class in TypeScript\nDESCRIPTION: Extends BaseButton to create a Button class with properties for appearance, icon-only state, shape, and size. Includes warnings about release tags and internal declarations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Warning: (ae-different-release-tags) This symbol has another declaration with a different release tag\n// Warning: (ae-internal-mixed-release-tag) Mixed release tags are not allowed for \"Button\" because one of its declarations is marked as @internal\n//\n// @public\nexport class Button extends BaseButton {\n    appearance?: ButtonAppearance;\n    iconOnly: boolean;\n    shape?: ButtonShape;\n    size?: ButtonSize;\n}\n\n// @internal (undocumented)\nexport interface Button extends StartEnd {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Constants and Types for Fluent UI Components\nDESCRIPTION: Defines various constants, types, and interfaces for Fluent UI components including RadioControl, orientation types, color values, size options, and shadow variables. These constants support the configuration of component properties and styling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_46\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type RadioControl = Pick<HTMLInputElement, 'checked' | 'disabled' | 'focus' | 'setAttribute' | 'getAttribute'>;\n\nexport const RadioGroupOrientation: {\n    readonly horizontal: \"horizontal\"; /**\n    * Radio Group orientation\n    * @public\n    */\n    readonly vertical: \"vertical\";\n};\n\nexport type RadioGroupOrientation = ValuesOf<typeof RadioGroupOrientation>;\n\nexport const RatingDisplayColor: {\n    readonly neutral: \"neutral\";\n    readonly brand: \"brand\";\n    readonly marigold: \"marigold\";\n};\n\nexport type RatingDisplayColor = ValuesOf<typeof RatingDisplayColor>;\n\nexport const RatingDisplaySize: {\n    readonly small: \"small\";\n    readonly medium: \"medium\";\n    readonly large: \"large\";\n};\n\nexport type RatingDisplaySize = ValuesOf<typeof RatingDisplaySize>;\n\nexport const SliderMode: {\n    readonly singleValue: \"single-value\";\n};\n\nexport type SliderMode = ValuesOf<typeof SliderMode>;\n\nexport const SliderOrientation: {\n    readonly horizontal: \"horizontal\";\n    readonly vertical: \"vertical\";\n};\n\nexport type SliderOrientation = ValuesOf<typeof SliderOrientation>;\n\nexport const SliderSize: {\n    readonly small: \"small\";\n    readonly medium: \"medium\";\n};\n\nexport type SliderSize = ValuesOf<typeof SliderSize>;\n\nexport const shadow2 = \"var(--shadow2)\";\nexport const shadow2Brand = \"var(--shadow2Brand)\";\nexport const shadow4 = \"var(--shadow4)\";\nexport const shadow4Brand = \"var(--shadow4Brand)\";\nexport const shadow8 = \"var(--shadow8)\";\nexport const shadow8Brand = \"var(--shadow8Brand)\";\nexport const shadow16 = \"var(--shadow16)\";\nexport const shadow16Brand = \"var(--shadow16Brand)\";\nexport const shadow28 = \"var(--shadow28)\";\nexport const shadow28Brand = \"var(--shadow28Brand)\";\nexport const shadow64 = \"var(--shadow64)\";\nexport const shadow64Brand = \"var(--shadow64Brand)\";\n```\n\n----------------------------------------\n\nTITLE: Bumping package versions in FluentUI React Switch\nDESCRIPTION: This code snippet represents a series of patch updates where the versions of dependent packages are bumped. This includes packages such as @fluentui/react-field, @fluentui/react-jsx-runtime, @fluentui/react-label, @fluentui/react-shared-contexts, @fluentui/react-tabster, @fluentui/react-theme, and @fluentui/react-utilities. Each bump is associated with a pull request.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-switch/library/CHANGELOG.md#2025-04-20_snippet_6\n\nLANGUAGE: none\nCODE:\n```\n\"- Bump @fluentui/react-field to v9.1.23 ([PR #29056](https://github.com/microsoft/fluentui/pull/29056) by beachball)\n- Bump @fluentui/react-jsx-runtime to v9.0.4 ([PR #29056](https://github.com/microsoft/fluentui/pull/29056) by beachball)\n- Bump @fluentui/react-label to v9.1.31 ([PR #29056](https://github.com/microsoft/fluentui/pull/29056) by beachball)\n- Bump @fluentui/react-shared-contexts to v9.7.3 ([PR #29056](https://github.com/microsoft/fluentui/pull/29056) by beachball)\n- Bump @fluentui/react-tabster to v9.12.6 ([PR #29056](https://github.com/microsoft/fluentui/pull/29056) by beachball)\n- Bump @fluentui/react-theme to v9.1.12 ([PR #29056](https://github.com/microsoft/fluentui/pull/29056) by beachball)\n- Bump @fluentui/react-utilities to v9.13.1 ([PR #29056](https://github.com/microsoft/fluentui/pull/29056) by beachball)\"\n```\n\n----------------------------------------\n\nTITLE: Defining Shape and Template Components in TypeScript\nDESCRIPTION: TypeScript interfaces for shape annotations and chart templates in Plotly.js. Includes definitions for shapes, labels, styling options, and template structures that allow for consistent visualization styling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/chart-utilities/etc/chart-utilities.api.md#2025-04-20_snippet_37\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface Shape {\n    // (undocumented)\n    fillcolor: string;\n    // (undocumented)\n    label: Partial<ShapeLabel>;\n    // (undocumented)\n    layer: 'below' | 'above';\n    // (undocumented)\n    legendgroup: string;\n    // (undocumented)\n    legendgrouptitle: {\n        text: string;\n        font?: Partial<Font>;\n    };\n    // (undocumented)\n    legendrank: number;\n    // (undocumented)\n    line: Partial<ShapeLine>;\n    // (undocumented)\n    name: string;\n    // (undocumented)\n    opacity: number;\n    // (undocumented)\n    path: string;\n    // (undocumented)\n    showlegend: boolean;\n    // (undocumented)\n    templateitemname: string;\n    // (undocumented)\n    type: 'rect' | 'circle' | 'line' | 'path';\n    // (undocumented)\n    visible: boolean | 'legendonly';\n    // (undocumented)\n    x0: Datum;\n    // (undocumented)\n    x1: Datum;\n    // (undocumented)\n    xanchor: number | string;\n    // (undocumented)\n    xref: 'paper' | XAxisName;\n    // (undocumented)\n    xsizemode: 'scaled' | 'pixel';\n    // (undocumented)\n    y0: Datum;\n    // (undocumented)\n    y1: Datum;\n    // (undocumented)\n    yanchor: number | string;\n    // (undocumented)\n    yref: 'paper' | YAxisName;\n    // (undocumented)\n    ysizemode: 'scaled' | 'pixel';\n}\n\n// @public (undocumented)\nexport interface ShapeLabel {\n    // (undocumented)\n    font: Partial<Font>;\n    // (undocumented)\n    padding: number;\n    // (undocumented)\n    text: string;\n    // (undocumented)\n    textangle: 'auto' | number;\n    // (undocumented)\n    textposition: 'top left' | 'top center' | 'top right' | 'middle left' | 'middle center' | 'middle right' | 'bottom left' | 'bottom center' | 'bottom right' | 'start' | 'middle' | 'end';\n    // (undocumented)\n    texttemplate: string;\n    // (undocumented)\n    xanchor: 'auto' | 'left' | 'center' | 'right';\n    // (undocumented)\n    yanchor: 'top' | 'middle' | 'bottom';\n}\n\n// @public (undocumented)\nexport interface ShapeLine {\n    // (undocumented)\n    color: string;\n    // (undocumented)\n    dash: Dash;\n    // (undocumented)\n    width: number;\n}\n\n// @public (undocumented)\nexport interface Template {\n    // (undocumented)\n    data?: {\n        [type in PlotType]?: Array<Partial<PlotData>>;\n    } | undefined;\n    // (undocumented)\n    layout?: Partial<Layout> | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Ejecting Configuration with npm\nDESCRIPTION: The eject command removes the build dependency from the project and copies all configuration files into the project directory, granting full control over the build configuration. This is a one-way operation and should be used judiciously. No additional dependencies are required beyond the default installer.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/cra-template/README.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run eject\n```\n\n----------------------------------------\n\nTITLE: Link Element in Gestalt\nDESCRIPTION: Illustrates a block-styled Link in Gestalt system as an anchor tag. Needs CSS classes from Gestalt and a correct href attribute for rendering.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Link.md#2025-04-20_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<a class=\\\"Wk9 xQ4 WMU iyn ljY kVc\\\" href=\\\"https://pinterest.com\\\">click here</a>\n```\n\n----------------------------------------\n\nTITLE: Defining PeoplePicker Components Interfaces in TypeScript for FluentUI\nDESCRIPTION: Defines interfaces for PeoplePicker components in FluentUI, which allow users to select and manage person entities. Includes interfaces for the main picker, suggestion items, and selected items.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_161\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IPeopleFloatingPickerProps extends IBaseFloatingPickerProps<IPersonaProps> {\n}\n\n// @public (undocumented)\nexport interface IPeoplePickerItemProps extends IPickerItemProps<IExtendedPersonaProps> {\n}\n\n// @public\nexport interface IPeoplePickerItemSelectedProps extends IPickerItemProps<IPersonaProps & {\n    ValidationState: ValidationState;\n}>, IPeoplePickerItemSharedProps {\n    styles?: IStyleFunctionOrObject<IPeoplePickerItemSelectedStyleProps, IPeoplePickerItemSelectedStyles>;\n}\n\n// @public\nexport type IPeoplePickerItemSelectedStyleProps = Required<Pick<IPeoplePickerItemSelectedProps, 'theme'>> & Pick<IPeoplePickerItemSelectedProps, 'className' | 'selected' | 'disabled'> & {\n    invalid?: boolean;\n};\n\n// @public\nexport interface IPeoplePickerItemSelectedStyles {\n    itemContent: IStyle;\n    removeButton: IStyle;\n    root: IStyle;\n    subComponentStyles: IPeoplePickerItemSelectedSubComponentStyles;\n}\n\n// @public\nexport interface IPeoplePickerItemSelectedSubComponentStyles {\n    persona: IStyleFunctionOrObject<IPersonaStyleProps, any>;\n    personaCoin?: IStyleFunctionOrObject<IPersonaCoinStyleProps, any>;\n}\n\n// @public\nexport interface IPeoplePickerItemSharedProps {\n    className?: string;\n    theme?: ITheme;\n}\n\n// @public (undocumented)\nexport interface IPeoplePickerItemState {\n    // (undocumented)\n    contextualMenuVisible: boolean;\n}\n\n// @public\nexport interface IPeoplePickerItemSuggestionProps extends IPeoplePickerItemSharedProps {\n    compact?: boolean;\n    personaProps?: IPersonaProps;\n    styles?: IStyleFunctionOrObject<IPeoplePickerItemSuggestionStyleProps, IPeoplePickerItemSuggestionStyles>;\n    suggestionsProps?: IBasePickerSuggestionsProps;\n}\n\n// @public\nexport type IPeoplePickerItemSuggestionStyleProps = Required<Pick<IPeoplePickerItemSuggestionProps, 'theme'>> & Pick<IPeoplePickerItemSuggestionProps, 'className'> & {};\n\n// @public\nexport interface IPeoplePickerItemSuggestionStyles {\n    personaWrapper: IStyle;\n    root: IStyle;\n    subComponentStyles: IPeoplePickerItemSelectedSubComponentStyles;\n}\n\n// @public @deprecated\nexport interface IPeoplePickerItemWithMenuProps extends IPickerItemProps<IPersonaWithMenu> {\n}\n\n// @public\nexport interface IPeoplePickerProps extends IBasePickerProps<IPersonaProps> {\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for v1.1.0\nDESCRIPTION: Changelog entry documenting upgrade to TypeScript 4.0 and various dependency bumps\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-monaco-editor/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.1.0](https://github.com/microsoft/fluentui/tree/@fluentui/react-monaco-editor_v1.1.0)\n\nFri, 30 Apr 2021 07:42:23 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-monaco-editor_v1.0.33..@fluentui/react-monaco-editor_v1.1.0)\n\n### Minor changes\n\n- Upgrade to ts 4.0 ([PR #17932](https://github.com/microsoft/fluentui/pull/17932) by joschect@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Moving Internal v9 Dependencies in React\nDESCRIPTION: This chore involves moving all internal v9 dependencies from caret to fixed versions in the FluentUI React Tooltip component. This change ensures consistent and predictable behavior by locking down the exact versions of internal dependencies, preventing unexpected issues due to automatic updates.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tooltip/library/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: React\nCODE:\n```\n\"chore(v9): Move all internal v9 dependencies from caret to fixed version ([PR #19748](https://github.com/microsoft/fluentui/pull/19748) by lingfangao@hotmail.com)\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme-Switchable Snackbar Display\nDESCRIPTION: JSX code that implements a theme-switchable display component showing Snackbar examples in both light and dark modes. Uses DisplayToggle component for theme switching and includes image examples of standard and announcement snackbars.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/SnackbarPage/docs/android/SnackbarOverview.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<DisplayToggle onText=\"Dark\" offText=\"Light\" label=\"Theme Switcher\">\n### Snackbar\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/android/updated/img_snackbar_01_standard_light.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/android/updated/img_snackbar_01_standard_dark.png?text=DarkMode\" />\n\n### Announcement Snackbar\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/android/updated/img_snackbar_02_announcement_light.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/android/updated/img_snackbar_02_announcement_dark.png?text=DarkMode\" />\n</DisplayToggle>\n```\n\n----------------------------------------\n\nTITLE: Tooltip Component Class Names\nDESCRIPTION: Defines the class names for the Tooltip component across Swift and Objective-C implementations in FluentUI for iOS.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/TooltipPage/docs/ios/TooltipImplementation.md#2025-04-20_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nTooltip\n```\n\nLANGUAGE: objective-c\nCODE:\n```\nMSFTooltip\n```\n\n----------------------------------------\n\nTITLE: Performance Measurement Comparison Table\nDESCRIPTION: Synthetic test results showing performance impact of different theme token structures\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/theme-shared-colors.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Theme structure               |  ms |\n| ----------------------------- | --: |\n| 1200 tokens, alias references | 490 |\n| 1200 tokens, inline values    | 410 |\n| 550 tokens                    | 250 |\n| 160 tokens                    | 150 |\n```\n\n----------------------------------------\n\nTITLE: Bumping FluentUI React, Theme, Hooks and Monaco Editor\nDESCRIPTION: This snippet demonstrates bumping multiple FluentUI packages including react, theme, hooks and monaco editor.  Each bump is associated with the same PR.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-docsite-components/CHANGELOG.md#2025-04-20_snippet_20\n\nLANGUAGE: text\nCODE:\n```\n\"- Bump @fluentui/react to v8.111.4 ([PR #29313](https://github.com/microsoft/fluentui/pull/29313) by beachball)\",\n  \"- Bump @fluentui/theme to v2.6.36 ([PR #29313](https://github.com/microsoft/fluentui/pull/29313) by beachball)\",\n  \"- Bump @fluentui/react-hooks to v8.6.30 ([PR #29313](https://github.com/microsoft/fluentui/pull/29313) by beachball)\",\n  \"- Bump @fluentui/react-monaco-editor to v1.7.128 ([PR #29313](https://github.com/microsoft/fluentui/pull/29313) by beachball)\"\n```\n\n----------------------------------------\n\nTITLE: Checking Groupable Keys in TypeScript\nDESCRIPTION: This function checks if a given key is groupable, returning a boolean value. It's used to determine the grouping capability of certain data elements based on their keys.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/example-data/etc/example-data.api.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport function isGroupable(key: string): boolean;\n```\n\n----------------------------------------\n\nTITLE: Bootstrap New Executor using Yarn CLI\nDESCRIPTION: This command sets up a new executor directory using the NX executor plugin. It's used to scaffold an executor under the specific tools/workspace-plugin path required for the executor's functionality.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/STYLE-GUIDE.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nyarn nx g @nx/plugin:executor --directory tools/workspace-plugin/src/executors/<name-of-executor>\n```\n\n----------------------------------------\n\nTITLE: Adding custom test area to horizontal bar chart in React Charting\nDESCRIPTION: Added ability to customize the right side test values area in horizontal bar charts.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/CHANGELOG.md#2025-04-20_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Example usage:\n<HorizontalBarChart customTestArea={...} />\n```\n\n----------------------------------------\n\nTITLE: Package Name Declaration in Markdown\nDESCRIPTION: Declares the npm package name for the FluentUI React Tooltip components package\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tooltip/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @fluentui/react-tooltip\n```\n\n----------------------------------------\n\nTITLE: Defining TextAppearance Styles in FluentUI for Android\nDESCRIPTION: List of TextAppearance style names used in FluentUI for Android. These styles define different text appearances for various typographic elements like headlines, titles, headings, and body text.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/TextPage/docs/android/TextImplementation.md#2025-04-20_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\nTextAppearance.FluentUI.Headline\nTextAppearance.FluentUI.Title1\nTextAppearance.FluentUI.Title2\nTextAppearance.FluentUI.Heading\nTextAppearance.FluentUI.SubHeading1\nTextAppearance.FluentUI.SubHeading2\nTextAppearance.FluentUI.Body1\nTextAppearance.FluentUI.Body2\nTextAppearance.FluentUI.Caption\n```\n\n----------------------------------------\n\nTITLE: Visualizing Triage Automation Workflow with Mermaid\nDESCRIPTION: Mermaid diagram illustrating the workflow for automated issue triage, including label assignment, CODEOWNERS parsing, and team assignment.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/shared/build-system/triage-automation.md#2025-04-20_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD;\n    I(\"issue template created\")-->L(\"labels added\")-->C(\"parse codeowners\");\n    subgraph \"parse codeowners\"\n    C-->D(\"find owner based on package\")\n    end\n    D-->A(\"add issue to unified board\")-->AA(\"pick team based on ownership definition\");\n```\n\n----------------------------------------\n\nTITLE: Defining Shade Enumeration\nDESCRIPTION: Enumeration for shade levels used in the theming system, ranging from Unshaded (0) to Shade8 (8), representing different intensity levels of colors.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_258\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport enum Shade {\n    // (undocumented)\n    Shade1 = 1,\n    // (undocumented)\n    Shade2 = 2,\n    // (undocumented)\n    Shade3 = 3,\n    // (undocumented)\n    Shade4 = 4,\n    // (undocumented)\n    Shade5 = 5,\n    // (undocumented)\n    Shade6 = 6,\n    // (undocumented)\n    Shade7 = 7,\n    // (undocumented)\n    Shade8 = 8,\n    // (undocumented)\n    Unshaded = 0\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Component Selector Preview Package in Markdown\nDESCRIPTION: This code snippet shows the package name for the Fluent UI React component selector preview. It's written in Markdown format and highlights that these are preview components not meant for production use.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/component-selector-preview/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @fluentui/component-selector-preview\n```\n\n----------------------------------------\n\nTITLE: Defining SankeyChart Component and Props in TypeScript\nDESCRIPTION: Exports a FunctionComponent for SankeyChart and defines its props interface. The props include options for customizing the Sankey chart's appearance, data, and accessibility features.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charts/library/etc/react-charts.api.md#2025-04-20_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const SankeyChart: React_2.FunctionComponent<SankeyChartProps>;\n\nexport interface SankeyChartProps {\n    accessibility?: SankeyChartAccessibilityProps;\n    borderColorsForNodes?: string[];\n    calloutProps?: ChartPopoverProps;\n    className?: string;\n    colorsForNodes?: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Icon Components from @fluentui/react-icons-mdl2 in JavaScript\nDESCRIPTION: This snippet demonstrates how to import icon components from the @fluentui/react-icons-mdl2 package. Replace 'IconName' with the specific icon component you want to use in your React application.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-icons-mdl2/README.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { IconName } from '@fluentui/react-icons-mdl2';\n```\n\n----------------------------------------\n\nTITLE: Defining Typography Styles in TypeScript\nDESCRIPTION: Exports constants for various typography styles as CSSDirectives. These include styles for different body text, captions, titles, and subtitles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_61\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const typographyBody1StrongerStyles: CSSDirective;\nexport const typographyBody1StrongStyles: CSSDirective;\nexport const typographyBody1Styles: CSSDirective;\nexport const typographyBody2Styles: CSSDirective;\nexport const typographyCaption1StrongerStyles: CSSDirective;\nexport const typographyCaption1StrongStyles: CSSDirective;\nexport const typographyCaption1Styles: CSSDirective;\nexport const typographyCaption2StrongStyles: CSSDirective;\nexport const typographyCaption2Styles: CSSDirective;\nexport const typographyDisplayStyles: CSSDirective;\nexport const typographyLargeTitleStyles: CSSDirective;\nexport const typographySubtitle1Styles: CSSDirective;\nexport const typographySubtitle2StrongerStyles: CSSDirective;\nexport const typographySubtitle2Styles: CSSDirective;\nexport const typographyTitle1Styles: CSSDirective;\nexport const typographyTitle2Styles: CSSDirective;\nexport const typographyTitle3Styles: CSSDirective;\n```\n\n----------------------------------------\n\nTITLE: Importing Switch Components from Fluent UI\nDESCRIPTION: This snippet imports the Switch component and its related properties, events, and class names from the '@fluentui/react-switch' package. The Switch component allows toggling between two states.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/etc/react-components.api.md#2025-04-20_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Switch } from '@fluentui/react-switch';\nimport { switchClassNames } from '@fluentui/react-switch';\nimport { SwitchOnChangeData } from '@fluentui/react-switch';\nimport { SwitchProps } from '@fluentui/react-switch';\nimport { SwitchSlots } from '@fluentui/react-switch';\nimport { SwitchState } from '@fluentui/react-switch';\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for Version 9.0.0-beta.10\nDESCRIPTION: Shows the changelog entry for version 9.0.0-beta.10 of @fluentui/react-slider, including the release date, compare link, and list of changes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-slider/library/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.0.0-beta.10](https://github.com/microsoft/fluentui/tree/@fluentui/react-slider_v9.0.0-beta.10)\n\nFri, 04 Mar 2022 05:17:29 GMT\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-slider_v9.0.0-beta.9..@fluentui/react-slider_v9.0.0-beta.10)\n\n### Changes\n\n- undefined ([PR #21508](https://github.com/microsoft/fluentui/pull/21508) by dzearing@microsoft.com)\n- Adding explicit export maps on all consumer packages for FUIR 8 and 9. ([PR #21508](https://github.com/microsoft/fluentui/pull/21508) by dzearing@microsoft.com)\n- Bump @fluentui/react-shared-contexts to v9.0.0-rc.4 ([PR #21947](https://github.com/microsoft/fluentui/pull/21947) by beachball)\n- Bump @fluentui/react-tabster to v9.0.0-rc.5 ([PR #21947](https://github.com/microsoft/fluentui/pull/21947) by beachball)\n- Bump @fluentui/react-theme to v9.0.0-rc.4 ([PR #21947](https://github.com/microsoft/fluentui/pull/21947) by beachball)\n- Bump @fluentui/react-utilities to v9.0.0-rc.5 ([PR #21947](https://github.com/microsoft/fluentui/pull/21947) by beachball)\n- Bump @fluentui/react-label to v9.0.0-beta.9 ([PR #21947](https://github.com/microsoft/fluentui/pull/21947) by beachball)\n```\n\n----------------------------------------\n\nTITLE: FieldContextValue Definition\nDESCRIPTION: This snippet defines the FieldContextValue type. It represents the shape of the value provided by FieldContextProvider, containing properties like generatedControlId, orientation, required, size, validationState, and optional label/hint ids.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-field/library/etc/react-field.api.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport type FieldContextValue = Readonly<Pick<FieldState, 'generatedControlId' | 'orientation' | 'required' | 'size' | 'validationState'> & {\\n    labelFor?: string;\\n    labelId?: string;\\n    validationMessageId?: string;\\n    hintId?: string;\\n}>;\"\n```\n\n----------------------------------------\n\nTITLE: Applying Dynamic Styling with Props in Fluent UI (TSX)\nDESCRIPTION: This example demonstrates how to create dynamic styles based on component props. It shows conditional styling for expanded state and uses theme colors for background and hover effects.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Styles/ThemeSlotsPage/docs/web/ThemeSlotsImplementation.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst styles = props => ({\n  root: [\n    {\n      background: props.theme.palette.themePrimary,\n      selectors: {\n        ':hover': {\n          background: props.theme.palette.themeSecondary,\n        }\n      }\n    },\n    props.isExpanded\n      ? { display: 'block' }\n      : { display: 'none' }\n  ]\n});\n\n// In render()\nreturn <Component styles={styles} ... />;\n```\n\n----------------------------------------\n\nTITLE: Defining Communication Color Palette in TypeScript\nDESCRIPTION: Defines a set of predefined color shades for communication-related UI elements with various tints and shades\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/theme/etc/theme.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport namespace CommunicationColors {\n    const shade30 = \"#004578\";\n    const shade20 = \"#005a9e\";\n    const shade10 = \"#106ebe\";\n    const primary = \"#0078d4\";\n    const tint10 = \"#2b88d8\";\n    const tint20 = \"#c7e0f4\";\n    const tint30 = \"#deecf9\";\n    const tint40 = \"#eff6fc\";\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Loader Component Usage in FluentUI v0\nDESCRIPTION: Example of importing and using the Loader component from FluentUI v0 (react-northstar).\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Loader.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Loader } from '@fluentui/react-northstar';\nconst Component = () => <Loader />;\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Version 9.0.0-alpha.21\nDESCRIPTION: Changelog entry documenting the addition of color tokens in version 9.0.0-alpha.21.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-theme-sass/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.0.0-alpha.21](https://github.com/microsoft/fluentui/tree/@fluentui/react-theme-sass_v9.0.0-alpha.21)\n\nThu, 07 Mar 2024 19:33:26 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-theme-sass_v9.0.0-alpha.20..@fluentui/react-theme-sass_v9.0.0-alpha.21)\n\n### Changes\n\n- feat: Add color tokens ([PR #30412](https://github.com/microsoft/fluentui/pull/30412) by miroslav.stastny@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Declaring FloatingPeoplePicker Component\nDESCRIPTION: Defines the FloatingPeoplePicker component that extends BaseFloatingPeoplePicker. This component is used for selecting people from a floating suggestion list.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_34\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport class FloatingPeoplePicker extends BaseFloatingPeoplePicker {\n    // (undocumented)\n    static defaultProps: any;\n}\n```\n\n----------------------------------------\n\nTITLE: SwatchPicker DOM Structure (row layout)\nDESCRIPTION: This snippet shows the basic DOM structure for the SwatchPicker component when using a row layout. It utilizes a div element with role \"radiogroup\" and aria-label to indicate its purpose as a color grid.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-swatch-picker/library/docs/Spec.md#2025-04-20_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<div role=\"radiogroup\" aria-label=\"Color grid\" class=\"fui-SwatchPicker\">\n  <!-- Content rendered here -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Vertical Bar Chart Styles Interface in TypeScript\nDESCRIPTION: The IVerticalBarChartStyles interface provides the defined styles for a vertical bar chart, outlining customization of various areas including labels and opacity behaviors.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/etc/react-charting.api.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface IVerticalBarChartStyles extends ICartesianChartStyles {\n    barLabel: IStyle;\n    // @deprecated\n    chartLabel?: IStyle;\n    opacityChangeOnHover: IStyle;\n    // @deprecated\n    xAxisDomain?: IStyle;\n    // @deprecated\n    xAxisText?: IStyle;\n    // @deprecated\n    xAxisTicks?: IStyle;\n    // @deprecated\n    yAxisDomain?: IStyle;\n    // @deprecated\n    yAxisText?: IStyle;\n    // @deprecated\n    yAxisTicks?: IStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tree Item Types in TypeScript\nDESCRIPTION: Defines the possible types of tree items ('leaf' or 'branch') and the value type for tree items (string or number).\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tree/library/etc/react-tree.api.md#2025-04-20_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type TreeItemType = 'leaf' | 'branch';\n\nexport type TreeItemValue = string | number;\n```\n\n----------------------------------------\n\nTITLE: Running Tests from Package Directory in Bash\nDESCRIPTION: Commands to run tests and run tests in watch mode from within the package directory.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/test-a-feature.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Run tests with:\nyarn test\n\n# Run tests in watch mode with:\nyarn test:watch\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react to v8.42.0\nDESCRIPTION: This patch updates the @fluentui/react package to version 8.42.0, incorporating key updates and fixes. Refer to Pull Request #20419 for additional details.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/ts-minbar-test-react/CHANGELOG.md#2025-04-20_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.42.0 ([PR #20419](https://github.com/microsoft/fluentui/pull/20419) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme Toggle Component in FluentUI\nDESCRIPTION: React component implementing a display toggle for switching between dark and light theme views of Persona controls. Uses DisplayToggle component with theme-specific image assets.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/PersonaPage/docs/ios/PersonaOverview.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<DisplayToggle onText=\"Dark\" offText=\"Light\" label=\"Theme Switcher\">\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_personalistview_01_light.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_personalistview_01_dark.png?text=DarkMode\" />\n\n</DisplayToggle>\n```\n\n----------------------------------------\n\nTITLE: Building the Project with Yarn\nDESCRIPTION: This snippet describes the command to build the project after cleaning the cache and reinstalling the dependencies. This is a final step to ensure that all changes are properly compiled and potential build errors are resolved.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/common-dev-snags.md#2025-04-20_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Context Registration\nDESCRIPTION: Core implementation of the global context registration system using Symbol for unique keys and handling both browser and SSR environments\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/global-contex-registration.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\nimport { major } from 'semver';\n\ntype GlobalObject = typeof globalThis & Record<symbol, React.Context<any>>;\nconst isBrowser = typeof window !== 'undefined';\nconst globalObject: GlobalObject = isBrowser ? window : global;\n\nconst SYMBOL_NAMESPACE = 'global-context:';\n\nif (!isBrowser && process.env.NODE_ENV !== 'production') {\n  const globalSymbols = Object.getOwnPropertySymbols(globalObject);\n  globalSymbols.forEach(sym => {\n    if (Symbol.keyFor(sym)?.startsWith(SYMBOL_NAMESPACE)) {\n      console.log('deleting', sym);\n      delete globalObject[sym];\n    }\n  });\n}\n\nexport const createContext = <T>(defaultValue: T, name: string, packageName: string, packageVersion: string) => {\n  const sym = Symbol.for(`${SYMBOL_NAMESPACE}${packageName}/${name}/@${major(packageVersion)}`);\n\n  const globalSymbols = Object.getOwnPropertySymbols(globalObject);\n  if (!globalSymbols.includes(sym)) {\n    globalObject[sym] = React.createContext(defaultValue);\n  }\n\n  return globalObject[sym] as React.Context<T>;\n};\n```\n\n----------------------------------------\n\nTITLE: Default Label Usage in FluentUI v0 Loader\nDESCRIPTION: Example showing Loader with a label in v0, where the default labelPosition is 'below'.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Loader.stories.mdx#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Loader } from '@fluentui/react-northstar';\nconst Component = () => <Loader label=\"Loading\" />;\n```\n\n----------------------------------------\n\nTITLE: Version Headers and Change Documentation\nDESCRIPTION: Version headers and links showing the progression of updates from version 9.0.8 down to 0.1.0, including patches, minor changes and dependency bumps.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-message-bar/library/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.0.8](https://github.com/microsoft/fluentui/tree/@fluentui/react-message-bar_v9.0.8)\n\nThu, 30 Nov 2023 13:42:08 GMT\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-message-bar_v9.0.7..@fluentui/react-message-bar_v9.0.8)\n\n### Patches\n\n- Bump @fluentui/react-button to v9.3.57 ([PR #29929](https://github.com/microsoft/fluentui/pull/29929) by beachball)\n- Bump @fluentui/react-jsx-runtime to v9.0.20 ([PR #29929](https://github.com/microsoft/fluentui/pull/29929) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Component Development: Tooltip and Textarea Integration\nDESCRIPTION: Implements new components like Tooltip and Textarea with enhanced export and module configuration strategies\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/CHANGELOG.md#2025-04-20_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Defining BreadcrumbBase Component\nDESCRIPTION: BreadcrumbBase extends React.Component to customize the rendering and behaviors of breadcrumb navigation based on IBreadcrumbProps in a structured manner, setting default properties as needed.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class BreadcrumbBase extends React_2.Component<IBreadcrumbProps, any> {\n    constructor(props: IBreadcrumbProps);\n    static defaultProps: IBreadcrumbProps;\n    focus(): void;\n    render(): JSX.Element;\n}\n```\n\n----------------------------------------\n\nTITLE: Line Chart Accessibility Configuration\nDESCRIPTION: Customizing accessibility messages for x-axis and y-axis using `xAxisCalloutAccessibilityData` and `callOutAccessibilityData` props to enhance screen reader compatibility.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charts/stories/src/LineChart/LineChartBestPractices.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nxAxisCalloutAccessibilityData: {\n  ariaLabel: string\n},\ncallOutAccessibilityData: {\n  ariaLabel: string\n}\n```\n\n----------------------------------------\n\nTITLE: Bumping FluentUI React and Monaco Editor with PR\nDESCRIPTION: This snippet shows how to bump the version of both @fluentui/react and @fluentui/react-monaco-editor packages in a single pull request. The pull request number provides a direct link to the changes within the repository. This action is part of maintaining the dependencies for the project.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-docsite-components/CHANGELOG.md#2025-04-20_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n\"- Bump @fluentui/react to v8.112.2 ([PR #29431](https://github.com/microsoft/fluentui/pull/29431) by beachball)\",\n  \"- Bump @fluentui/react-monaco-editor to v1.7.133 ([PR #29431](https://github.com/microsoft/fluentui/pull/29431) by beachball)\"\n```\n\n----------------------------------------\n\nTITLE: Expounding PlotData Interface for Chart Details in TypeScript\nDESCRIPTION: The PlotData interface holds extensive detail for configuring graphical plot elements, encompassing line, marker details, axis, and color management. It supports in-depth customization for interactive chart series.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/chart-utilities/etc/chart-utilities.api.md#2025-04-20_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface PlotData {\n    // (undocumented)\n    'line.color': Color;\n    // (undocumented)\n    'line.dash': Dash;\n    // (undocumented)\n    'line.shape': 'linear' | 'spline' | 'hv' | 'vh' | 'hvh' | 'vhv';\n    // (undocumented)\n    'line.simplify': boolean;\n    // (undocumented)\n    'line.smoothing': number;\n    // (undocumented)\n    'line.width': number;\n    // (undocumented)\n    'marker.color': Color;\n    // (undocumented)\n    'marker.colorbar': {};\n    // (undocumented)\n    'marker.colorscale': ColorScale | ColorScale[];\n    // (undocumented)\n    'marker.line': Partial<ScatterMarkerLine>;\n    // (undocumented)\n    'marker.line.color': Color;\n    // (undocumented)\n    'marker.line.colorscale': ColorScale | ColorScale[];\n    // (undocumented)\n    'marker.maxdisplayed': number;\n    // (undocumented)\n    'marker.opacity': number | number[];\n    // (undocumented)\n    'marker.pad.b': number;\n    // (undocumented)\n    'marker.pad.l': number;\n    // (undocumented)\n    'marker.pad.r': number;\n    // (undocumented)\n    'marker.pad.t': number;\n    // (undocumented)\n    'marker.showscale': boolean;\n    // (undocumented)\n    'marker.size': number | number[] | number[][];\n    // (undocumented)\n    'marker.sizemax': number;\n    // (undocumented)\n    'marker.sizemin': number;\n    // (undocumented)\n    'marker.sizemode': 'diameter' | 'area';\n    // (undocumented)\n    'marker.sizeref': number;\n    // (undocumented)\n    'marker.symbol': MarkerSymbol | MarkerSymbol[];\n    // (undocumented)\n    autobinx: boolean;\n    // (undocumented)\n    autocontour: boolean;\n    // (undocumented)\n    automargin: boolean;\n    // (undocumented)\n    base: Datum[] | Datum[][] | TypedArray;\n    // (undocumented)\n    boxmean: boolean | 'sd';\n    // (undocumented)\n    boxpoints: 'all' | 'outliers' | 'suspectedoutliers' | false;\n    // (undocumented)\n    branchvalues: 'total' | 'remainder';\n    // (undocumented)\n    cliponaxis: boolean;\n    // (undocumented)\n    colorbar: Partial<ColorBar>;\n    // (undocumented)\n    colorscale: ColorScale;\n    // (undocumented)\n    connectgaps: boolean;\n    // (undocumented)\n    constraintext: 'inside' | 'outside' | 'both' | 'none';\n    // (undocumented)\n    contours: Partial<{\n        coloring: 'fill' | 'heatmap' | 'lines' | 'none';\n        end: number;\n        labelfont: Partial<Font>;\n        labelformat: string;\n        operation: '=' | '<' | '>=' | '>' | '<=' | '[]' | '()' | '[)' | '(]' | '][' | ')(' | '](' | ')[';\n        showlabels: boolean;\n        showlines: boolean;\n        size: number;\n        start: number;\n        type: 'levels' | 'constraint';\n        value: number | [lowerBound: number, upperBound: number];\n    }>;\n    // (undocumented)\n    customdata: Datum[] | Datum[][];\n    // (undocumented)\n    delta: Partial<Delta>;\n    // (undocumented)\n    direction: 'clockwise' | 'counterclockwise';\n```\n\n----------------------------------------\n\nTITLE: Defining AnchorButton Component and Related Types in TypeScript\nDESCRIPTION: Class definition for the AnchorButton component that extends BaseAnchor, with properties for appearance, shape, and size. Includes constants for enumerated values and templates.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-different-release-tags) This symbol has another declaration with a different release tag\n// Warning: (ae-internal-mixed-release-tag) Mixed release tags are not allowed for \"AnchorButton\" because one of its declarations is marked as @internal\n//\n// @public\nexport class AnchorButton extends BaseAnchor {\n    appearance?: AnchorButtonAppearance | undefined;\n    appearanceChanged(prev: AnchorButtonAppearance | undefined, next: AnchorButtonAppearance | undefined): void;\n    iconOnly: boolean;\n    iconOnlyChanged(prev: boolean, next: boolean): void;\n    shape?: AnchorButtonShape | undefined;\n    shapeChanged(prev: AnchorButtonShape | undefined, next: AnchorButtonShape | undefined): void;\n    size?: AnchorButtonSize;\n    sizeChanged(prev: AnchorButtonSize | undefined, next: AnchorButtonSize | undefined): void;\n}\n\n// @internal\nexport interface AnchorButton extends StartEnd {\n}\n\n// @public\nexport const AnchorButtonAppearance: {\n    readonly primary: \"primary\";\n    readonly outline: \"outline\";\n    readonly subtle: \"subtle\";\n    readonly transparent: \"transparent\";\n};\n\n// @public\nexport type AnchorButtonAppearance = ValuesOf<typeof AnchorButtonAppearance>;\n\n// @public (undocumented)\nexport const AnchorButtonDefinition: FASTElementDefinition<typeof AnchorButton>;\n\n// @public\nexport const AnchorButtonShape: {\n    readonly circular: \"circular\";\n    readonly rounded: \"rounded\";\n    readonly square: \"square\";\n};\n\n// @public\nexport type AnchorButtonShape = ValuesOf<typeof AnchorButtonShape>;\n\n// @public\nexport const AnchorButtonSize: {\n    readonly small: \"small\";\n    readonly medium: \"medium\";\n    readonly large: \"large\";\n};\n\n// @public\nexport type AnchorButtonSize = ValuesOf<typeof AnchorButtonSize>;\n\n// @public\nexport const AnchorButtonTemplate: ElementViewTemplate<AnchorButton>;\n\n// @public\nexport const AnchorTarget: {\n    readonly _self: \"_self\";\n    readonly _blank: \"_blank\";\n    readonly _parent: \"_parent\";\n    readonly _top: \"_top\";\n};\n\n// @public\nexport type AnchorTarget = ValuesOf<typeof AnchorTarget>;\n```\n\n----------------------------------------\n\nTITLE: Basic ChoiceGroup Usage in Fluent UI v8\nDESCRIPTION: Demonstrates the basic usage of ChoiceGroup component in Fluent UI v8, including importing, defining options, and rendering the component with props.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/RadioGroup.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { ChoiceGroup, IChoiceGroupOption } from '@fluentui/react/lib/ChoiceGroup';\n\nconst ChoiceGroupBasicExample = () => {\n  const options: IChoiceGroupOption[] = [\n    { key: 'A', text: 'Option A' },\n    { key: 'B', text: 'Option B' },\n    { key: 'C', text: 'Option C', disabled: true },\n    { key: 'D', text: 'Option D' },\n  ];\n\n  return <ChoiceGroup defaultSelectedKey=\"B\" options={options} label=\"Pick one\" required={true} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Easing Functions for Fluent UI Animations in TypeScript\nDESCRIPTION: This object defines various easing functions used in Fluent UI animations. Each function is represented by a cubic bezier curve created using the createCubicBezierAnimate function.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-migration-v0-v9/stories/src/Flex/Description.md#2025-04-20_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const easeFunction = {\n  easeInQuad: createCubicBezierAnimate(0.55, 0.085, 0.68, 0.53),\n  easeInCubic: createCubicBezierAnimate(0.55, 0.055, 0.675, 0.19),\n  easeInQuart: createCubicBezierAnimate(0.895, 0.03, 0.685, 0.22),\n  easeInQuint: createCubicBezierAnimate(0.755, 0.05, 0.855, 0.06),\n  easeInExpo: createCubicBezierAnimate(0.95, 0.05, 0.795, 0.035),\n  easeInCirc: createCubicBezierAnimate(0.6, 0.04, 0.98, 0.335),\n\n  easeOutQuad: createCubicBezierAnimate(0.25, 0.46, 0.45, 0.94),\n  easeOutCubic: createCubicBezierAnimate(0.215, 0.61, 0.355, 1),\n  easeOutQuart: createCubicBezierAnimate(0.165, 0.84, 0.44, 1),\n  easeOutQuint: createCubicBezierAnimate(0.23, 1, 0.32, 1),\n  easeOutExpo: createCubicBezierAnimate(0.19, 1, 0.22, 1),\n  easeOutCirc: createCubicBezierAnimate(0.075, 0.82, 0.165, 1),\n\n  easeInOutQuad: createCubicBezierAnimate(0.455, 0.03, 0.515, 0.955),\n  easeInOutCubic: createCubicBezierAnimate(0.645, 0.045, 0.355, 1),\n  easeInOutQuart: createCubicBezierAnimate(0.77, 0, 0.175, 1),\n  easeInOutQuint: createCubicBezierAnimate(0.86, 0, 0.07, 1),\n  easeInOutExpo: createCubicBezierAnimate(1, 0, 0, 1),\n  easeInOutCirc: createCubicBezierAnimate(0.785, 0.135, 0.15, 0.86),\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Image-Based FluentUI Button\nDESCRIPTION: Shows how to create a FluentUI button with an image instead of text. Uses NSImage template and primary filled style.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/ButtonPage/docs/mac/ButtonUsage.md#2025-04-20_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\n// You can display an image instead of a title\nlet buttonWithImageAndStyle = Button(image: NSImage(named: NSImage.addTemplateName)!, style: .primaryFilled)\n```\n\n----------------------------------------\n\nTITLE: Defining Vertical Stacked Chart Data Point Interface in TypeScript\nDESCRIPTION: The IVSChartDataPoint interface outlines the structure for data points specific to a stacked chart, facilitating data representation with properties for color and accessibility.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/etc/react-charting.api.md#2025-04-20_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface IVSChartDataPoint {\n    callOutAccessibilityData?: IAccessibilityProps;\n    color?: string;\n    data: number;\n    gradient?: [string, string];\n    legend: string;\n    xAxisCalloutData?: string;\n    yAxisCalloutData?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing usePrevious Hook in TypeScript\nDESCRIPTION: An internal hook that returns the previous value of a variable across renders.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-utilities/etc/react-utilities.api.md#2025-04-20_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @internal (undocumented)\nexport const usePrevious: <ValueType = unknown>(value: ValueType) => ValueType | null;\n```\n\n----------------------------------------\n\nTITLE: Exporting TagPicker Option Group Styles Hook in TypeScript\nDESCRIPTION: Exports a hook for applying styles to the TagPicker option group component based on its current state.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_67\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const useTagPickerOptionGroupStyles: (state: TagPickerOptionGroupState) => TagPickerOptionGroupState;\n```\n\n----------------------------------------\n\nTITLE: Fixing useTree to use env.NODE_ENV\nDESCRIPTION: This fix changes the environment variable from NODE to NODE_ENV in the useTree hook to ensure proper behavior in the component. No external dependencies are required for this update.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nFix `useTree` by changing `env.NODE` to `env.NODE_ENV` @yuanboxue-amber ([#16630](https://github.com/microsoft/fluentui/pull/16630))\n```\n\n----------------------------------------\n\nTITLE: Delegating focus outline to layout components in React\nDESCRIPTION: This chore delegates the responsibility of handling focus outlines to layout components. This change likely aims to improve the accessibility and consistency of focus indication within the Tree component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tree/library/CHANGELOG.md#2025-04-20_snippet_11\n\nLANGUAGE: React\nCODE:\n```\nchore: delegate focus outline to layout components ([PR #29293](https://github.com/microsoft/fluentui/pull/29293) by bernardo.sunderhus@gmail.com)\n```\n\n----------------------------------------\n\nTITLE: Removing Context Values from State - TypeScript\nDESCRIPTION: Demonstrates a solution where context values are removed from the state, calculated in render functions, but notes violations of React hooks rules.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/context-values.md#2025-04-20_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction renderBaz(state) {\n  const { open, inline } = state;\n\n  // 💥 this violates rules of hooks: hooks should be called inside components or other hooks\n  const contextValue = React.useMemo(() => ({ inline, open }), [inline, open]);\n\n  return (\n    <SampleContext.Provider value={contextValue}>\n      <div />\n    </SampleContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tab Component\nDESCRIPTION: Defines the Tab component class extending FASTElement with disabled property and connection lifecycle method.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Tab extends FASTElement {\n    connectedCallback(): void;\n    disabled: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Button Component Props in TypeScript for FluentUI\nDESCRIPTION: This snippet defines the props interface for the Button component. It extends ButtonSlots and includes various properties for customizing the button's appearance and behavior.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Styles/Colors/docs/web/ColorsPersonasGroups.md#2025-04-20_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type ButtonProps = ComponentProps<Partial<ButtonSlots>> & {\n  /**\n   * A button can be made circular.\n   *\n   * @defaultValue false\n   */\n  circular?: boolean;\n\n  /**\n   * A button can show that it cannot be interacted with.\n   *\n   * @defaultValue false\n   */\n  disabled?: boolean;\n\n  /**\n   * A button can take the full width of its container.\n   *\n   * @defaultValue false\n   */\n  fluid?: boolean;\n\n  /**\n   * A button can be formatted to show different levels of emphasis.\n   *\n   * @defaultValue 'secondary'\n   */\n  appearance?: 'primary' | 'subtle' | 'secondary' | 'outline' | 'transparent';\n\n  /**\n   * A button can have different sizes.\n   *\n   * @defaultValue 'medium'\n   */\n  size?: 'small' | 'medium' | 'large';\n\n  /**\n   * A button can be rounded, circular, or square.\n   *\n   * @defaultValue 'rounded'\n   */\n  shape?: 'rounded' | 'circular' | 'square';\n\n  /**\n   * A button supports different kinds of icons.\n   */\n  icon?: ShorthandProps<IconProps>;\n\n  /**\n   * A button can format its icon to appear before or after its content.\n   *\n   * @defaultValue 'before'\n   */\n  iconPosition?: 'before' | 'after';\n};\n```\n\n----------------------------------------\n\nTITLE: FluentUI Changelog Entry v8.1.8\nDESCRIPTION: Changelog entry documenting patch update bumping @fluentui/react dependency version\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-experiments/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## [8.1.8](https://github.com/microsoft/fluentui/tree/@fluentui/react-experiments_v8.1.8)\n\nFri, 14 May 2021 07:35:10 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-experiments_v8.1.7..@fluentui/react-experiments_v8.1.8)\n\n### Patches\n\n- Bump @fluentui/react to v8.14.8 ([PR #18150](https://github.com/microsoft/fluentui/pull/18150) by tristan.watanabe@gmail.com)\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react to v8.44.0\nDESCRIPTION: This patch upgrades the @fluentui/react package to version 8.44.0 to incorporate the latest updates. More information can be found in Pull Request #20784.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/ts-minbar-test-react/CHANGELOG.md#2025-04-20_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.44.0 ([PR #20784](https://github.com/microsoft/fluentui/pull/20784) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Theme Toggle Component with List Cell Examples\nDESCRIPTION: A DisplayToggle component that shows various list cell layouts with light/dark theme switching capability. Includes image examples for different cell configurations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/ListCellsPage/docs/ios/ListCellsOverview.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<DisplayToggle onText=\"Dark\" offText=\"Light\" label=\"Theme Switcher\">\n### One line\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_list_02_oneline_sharedleft_light.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_list_02_oneline_sharedleft_dark.png?text=DarkMode\" />\n\n### Two line\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_list_06_twoline_sharedleft_light.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_list_06_twoline_sharedleft.png?text=DarkMode\" />\n\n### Three line\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_list_08_threeline_sharedleft_light.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_list_08_threeline_sharedleft_dark.png?text=DarkMode\" />\n\n### Center line\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_list_04_oneline_sharedcentered_light.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_list_04_oneline_sharedcentered_dark.png?text=DarkMode\" />\n\n### Selection\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_list_09_selection_light.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_list_09_selection_dark.png?text=DarkMode\" />\n\n### Description\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_list_10_description_light.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_list_10_description_dark.png?text=DarkMode\" />\n\n</DisplayToggle>\n```\n\n----------------------------------------\n\nTITLE: Importing Render Functions for Color Swatch Picker (JavaScript)\nDESCRIPTION: This snippet imports rendering functions related to the 'Color Swatch Picker' component from the Fluent UI library, essential for managing color selections in the user interface.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/etc/react-components.api.md#2025-04-20_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { renderColorSwatch_unstable } from '@fluentui/react-swatch-picker';\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { renderEmptySwatch_unstable } from '@fluentui/react-swatch-picker';\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { renderSwatchPicker_unstable } from '@fluentui/react-swatch-picker';\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { renderSwatchPickerGrid } from '@fluentui/react-swatch-picker';\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { renderSwatchPickerRow_unstable } from '@fluentui/react-swatch-picker';\n```\n\n----------------------------------------\n\nTITLE: Using @noflip with shorthands utility\nDESCRIPTION: Demonstrates how to use the @noflip directive with the shorthands utility functions for border properties to prevent RTL flipping.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/styles-handbook.md#2025-04-20_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeStyles } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  root: {\n    ...shorthands.borderLeft('5px /* @noflip */', 'solid /* @noflip */', 'red /* @noflip */'),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories Path for FluentUI Migration\nDESCRIPTION: Storybook module configuration that specifies the file paths for including migration stories. Targets both MDX and TypeScript/TSX story files in the react-migration-v8-v9 package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-migration-v8-v9/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-migration-v8-v9/stories/src/**/*.stories.mdx', '../packages/react-components/react-migration-v8-v9/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Package.json Structure After Running Generator\nDESCRIPTION: This JSON snippet depicts the updated package.json after executing the generator, which ensures all dependencies reference the latest version of Fluent UI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/dependency-mismatch/README.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"@fluentui/react-theme\",\n  \"version\": \"9.0.2\"\n}\n\n{\n  \"name\": \"@fluentui/public-docsite-v9\",\n  \"dependencies\": {\n    \"@fluentui/react-theme\": \"^9.0.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verification Mode for Package Dependencies\nDESCRIPTION: This command executes the normalization process in verification mode to ensure all projects have their package.json files using a consistent versioning system. It serves as a validation check to prevent inconsistencies in dependency management.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/normalize-package-dependencies/README.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:normalize-package-dependencies\n```\n\n----------------------------------------\n\nTITLE: CSS Rule Explosion with Nested Selectors\nDESCRIPTION: Demonstrates a scenario where nested selectors, pseudo-classes, and at-rules can lead to a large number of generated CSS classes. Each nested rule set generates new classes in addition to base classes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/styles-handbook.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeStyles, shorthands } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  root: {\n    ...shorthands.padding('4px'),\n    ...shorthands.margin('4px'),\n\n    ':hover': {\n      ...shorthands.padding('4px'),\n      ...shorthands.margin('4px'),\n    },\n\n    '::before': {\n      display: 'block',\n      content: \"' '\",\n    },\n\n    '@media (forced-colors: active)': {\n      ...shorthands.padding('4px'),\n      ...shorthands.margin('4px'),\n    },\n  },\n});\n// ⬇️⬇️⬇️\n// produces 26 classes ((4+4)+(4+4)+2+(4+4))\n```\n\n----------------------------------------\n\nTITLE: Migrating Boolean Variables in Card Component\nDESCRIPTION: Example showing how to migrate boolean variables from the old styling approach to the new makeStyles API.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Card/Card.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// in COMPONENT_NAME.tsx\nimport { Card } from '@fluentui/react-northstar';\n\nexport const Component = () => <Card variables={{ isActionCard: true }} />;\n\n// in Card-styles.ts\nexport const CardStyles1 = {\n  root: ({ variables: { isActionCard } }) => ({\n    ...(isActionCard && {\n      color: colors.grey['250'],\n    }),\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Defining API Report for @fluentui/react-hooks in TypeScript\nDESCRIPTION: This code snippet defines the entire API for the @fluentui/react-hooks package. It includes imports, type definitions, interfaces, and function declarations for various hooks and utility functions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-hooks/etc/react-hooks.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Async } from '@fluentui/utilities';\nimport type { ISettingsMap } from '@fluentui/utilities';\nimport type { IWarnControlledUsageParams } from '@fluentui/utilities';\nimport type { Point } from '@fluentui/utilities';\nimport * as React_2 from 'react';\nimport { Rectangle } from '@fluentui/utilities';\nimport { useIsomorphicLayoutEffect } from '@fluentui/utilities';\n\n// @public (undocumented)\nexport type ChangeCallback<TElement extends HTMLElement, TValue, TEvent extends React_2.SyntheticEvent<TElement> | undefined> = (ev: TEvent, newValue: TValue | undefined) => void;\n\n// @public\nexport interface IUseBooleanCallbacks {\n    setFalse: () => void;\n    setTrue: () => void;\n    toggle: () => void;\n}\n\n// @public (undocumented)\nexport interface IWarningOptions<P> {\n    conditionallyRequired?: {\n        requiredProps: string[];\n        conditionalPropName: string;\n        condition: boolean;\n    }[];\n    controlledUsage?: Pick<IWarnControlledUsageParams<P>, 'valueProp' | 'defaultValueProp' | 'onChangeProp' | 'readOnlyProp'>;\n    deprecations?: ISettingsMap<P>;\n    mutuallyExclusive?: ISettingsMap<P>;\n    name: string;\n    other?: string[];\n    props: P;\n}\n\n// @public\nexport type RefCallback<T> = ((value: T | null) => void) & React_2.RefObject<T>;\n\n// @public\nexport type RefObjectFunction<T> = React_2.RefObject<T> & ((value: T) => void);\n\n// @public (undocumented)\nexport type Target = Element | string | MouseEvent | Point | Rectangle | null | React_2.RefObject<Element>;\n\n// @public\nexport function useAsync(): Async;\n\n// @public\nexport function useBoolean(initialState: boolean): [boolean, IUseBooleanCallbacks];\n\n// @public\nexport function useConst<T>(initialValue: T | (() => T)): T;\n\n// @public @deprecated (undocumented)\nexport function useConstCallback<T extends (...args: any[]) => any>(callback: T): T;\n\n// @public\nexport function useControllableValue<TValue, TElement extends HTMLElement>(controlledValue: TValue | undefined, defaultUncontrolledValue: TValue | undefined): Readonly<[TValue | undefined, (update: React_2.SetStateAction<TValue | undefined>) => void]>;\n\n// @public (undocumented)\nexport function useControllableValue<TValue, TElement extends HTMLElement, TEvent extends React_2.SyntheticEvent<TElement> | undefined>(controlledValue: TValue | undefined, defaultUncontrolledValue: TValue | undefined, onChange: ChangeCallback<TElement, TValue, TEvent> | undefined): Readonly<[\nTValue | undefined,\n(update: React_2.SetStateAction<TValue | undefined>, ev?: React_2.FormEvent<TElement>) => void\n]>;\n\n// @public\nexport function useEventCallback<Args extends unknown[], Return>(fn: (...args: Args) => Return): (...args: Args) => Return;\n\n// @public\nexport function useForceUpdate(): () => void;\n\n// @public\nexport function useId(prefix?: string, providedId?: string): string;\n\nexport { useIsomorphicLayoutEffect }\n\n// @public\nexport function useMergedRefs<T>(...refs: (React_2.Ref<T> | undefined)[]): RefObjectFunction<T>;\n\n// @public\nexport const useMount: (callback: () => void) => void;\n\n// @public @deprecated\nexport const useMountSync: (callback: () => void) => void;\n\n// @public\nexport function useOnEvent<TElement extends Element, TEvent extends Event>(element: React_2.RefObject<TElement | undefined | null> | TElement | Window | Document | undefined | null, eventName: string, callback: (ev: TEvent) => void, useCapture?: boolean): void;\n\n// @public\nexport function usePrevious<T>(value: T): T | undefined;\n\n// @public\nexport function useRefEffect<T>(callback: (value: T) => (() => void) | void, initial?: T | null): RefCallback<T>;\n\n// @public\nexport const useSetInterval: () => UseSetIntervalReturnType;\n\n// @public (undocumented)\nexport type UseSetIntervalReturnType = {\n    setInterval: (callback: () => void, duration: number) => number;\n    clearInterval: (id: number) => void;\n};\n\n// @public\nexport const useSetTimeout: () => UseSetTimeoutReturnType;\n\n// @public (undocumented)\nexport type UseSetTimeoutReturnType = {\n    setTimeout: (callback: () => void, duration: number) => number;\n    clearTimeout: (id: number) => void;\n};\n\n// @public\nexport function useTarget<TElement extends HTMLElement = HTMLElement>(target: Target | undefined, hostElement?: React_2.RefObject<TElement | null>): Readonly<[React_2.RefObject<Element | MouseEvent | Point | Rectangle | null>, Window | undefined]>;\n\n// @public\nexport const useUnmount: (callback: () => void) => void;\n\n// @public\nexport function useWarnings<P extends {}>(options: IWarningOptions<P>): void;\n```\n\n----------------------------------------\n\nTITLE: Extending Component by Adding Slots\nDESCRIPTION: This example shows how to extend a component by adding a new slot. It involves mutating the base state and calling mergeProps again, which can be complex and hard to validate.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/simplify-prop-merging.md#2025-04-20_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n\nconst extendedComponentShorthandProps = [...avatarShorthandProps, 'extraSlot']\n\n// Extend by adding a slot\n// Mutate state in extended component and call mergeProps again\nconst baseState = useBaseComponent(props, ref);\n\n// React elements cannot be extended and will break `resolveShorthandProps`\n// set to undefined since it will be resolved again anyway\n(baseState as unknown) as ExtendedComponentProps).slot = undefined;\nconst state = mergeProps(baseState, defaultProps, resolveShorthandProps(props, extendedComponentShorthandProps));\n```\n\n----------------------------------------\n\nTITLE: React Component Example with Button\nDESCRIPTION: This code shows examples of using the `Fade` component with a standard `Button` component and a custom `MyButton` component.  It highlights a potential issue where a custom component may not properly handle the `className` prop, leading to unexpected behavior when used with the `Fade` component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/motion-definition-n-apis.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyButton() {\n  return <Button>Hello world!</Button>;\n}\n\nfunction App() {\n  return (\n    <>\n      {/* 🟢 works as Button handles classes properly */}\n      <Fade>\n        <Button />\n      </Fade>\n      {/* 🔴 fails as MyButton does not handle classes properly */}\n      <Fade>\n        <MyButton />\n      </Fade>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Link Element with `href` in Fabric UI\nDESCRIPTION: Provides an anchor tag Link in Fabric UI styled with specific class names. Requires Fabric UI class styles and an assigned href for navigation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Link.md#2025-04-20_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<a href=\\\"http://dev.office.com/fabric/components/link\\\" class=\\\"ms-Link root-109\\\"> it renders as an anchor tag. </a>\n```\n\n----------------------------------------\n\nTITLE: Version Update Changelog Entry\nDESCRIPTION: Markdown formatted changelog entry showing version number, date, and associated changes including dependency version bumps and patch fixes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-text/library/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.3.34](https://github.com/microsoft/fluentui/tree/@fluentui/react-text_v9.3.34)\n\nWed, 20 Sep 2023 17:47:44 GMT\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-text_v9.3.33..@fluentui/react-text_v9.3.34)\n\n### Patches\n\n- chore: trigger manual version bump after broken release ([PR #29197](https://github.com/microsoft/fluentui/pull/29197) by martinhochel@microsoft.com)\n- Bump @fluentui/react-shared-contexts to v9.8.1 ([PR #29197](https://github.com/microsoft/fluentui/pull/29197) by beachball)\n- Bump @fluentui/react-jsx-runtime to v9.0.10 ([PR #29197](https://github.com/microsoft/fluentui/pull/29197) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Implementing Composition with Menu and Tooltip in React\nDESCRIPTION: This snippet demonstrates how to correctly implement a Menu and Tooltip in React while adhering to the trigger pattern. It showcases the issues that arise when trying to use both components together and the proposed changes to improve functionality.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/components/tooltip-api-alignment.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction App() {\n  return (\n    <Menu>\n      <MenuTrigger>\n        <button />\n      </MenuTrigger>\n      <MenuList />\n    </Menu>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LegendTitle Interface in TypeScript\nDESCRIPTION: The LegendTitle interface includes properties for styling titles in chart legends. The properties mainly deal with font styling and positioning. It relies on the Partial utility to make font properties optional.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/chart-utilities/etc/chart-utilities.api.md#2025-04-20_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface LegendTitle {\n    // (undocumented)\n    font: Partial<Font>;\n    // (undocumented)\n    side: 'top' | 'left' | 'top left' | 'top center' | 'top right';\n    // (undocumented)\n    text: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for FluentUI React Color Picker Stories\nDESCRIPTION: This snippet shows how to configure Storybook to include the color picker stories by specifying the stories globs in the Storybook configuration file.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-color-picker/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-color-picker/stories/src/**/*.stories.mdx', '../packages/react-components/react-color-picker/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Atomic CSS Performance Caveat\nDESCRIPTION: Illustrates that Atomic CSS can generate many classes, but usually there is only a limited number of CSS properties. It generates 6 classes including 4 padding classes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/styles-handbook.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeStyles, shorthands } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n    ...shorthands.padding('4px'),\n  },\n});\n// ⬇️⬇️⬇️\n// produces 6 classes (1 + 1 + 4 for expanded padding)\n```\n\n----------------------------------------\n\nTITLE: Defining IExpandingCardState Interface in TypeScript\nDESCRIPTION: Defines the IExpandingCardState interface with properties for tracking the first frame rendering and scroll needs. This interface is marked as @public but undocumented.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_129\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IExpandingCardState {\n    // (undocumented)\n    firstFrameRendered: boolean;\n    // (undocumented)\n    needsScroll: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Tooltip with Custom Component as Trigger\nDESCRIPTION: Example of using Tooltip with a custom component as the trigger. This shows that the Tooltip supports any component that accepts HTML attributes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tooltip/library/docs/Spec.md#2025-04-20_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Tooltip content=\"Supports any component that accepts HTML attributes\" relationship=\"label\">\n  <FancyButton />\n</Tooltip>\n```\n\n----------------------------------------\n\nTITLE: Defining ICommandBarStyles Interface\nDESCRIPTION: Defines the `ICommandBarStyles` interface, which specifies the styles for the CommandBar component. It includes properties for styling the primary set, root, and secondary set of items.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_77\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ICommandBarStyles {\n    // (undocumented)\n    primarySet?: IStyle;\n    // (undocumented)\n    root?: IStyle;\n    // (undocumented)\n    secondarySet?: IStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: Introducing allowMultipleShapesFor prop in React Charting\nDESCRIPTION: Added a new prop 'allowMultipleShapesFor' that allows multiple shapes for data points when set to true.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/CHANGELOG.md#2025-04-20_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Example usage:\n<Chart allowMultipleShapesFor={true} />\n```\n\n----------------------------------------\n\nTITLE: Updating Hook and Render Function Names in TypeScript\nDESCRIPTION: This snippet shows how to update the import and usage of component hooks and render functions with the new '_unstable' suffix.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/docs/MIGRATION-NOTES.md#2025-04-20_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n-import { renderAccordionHeader } from `@fluentui/react-components`;\n+import { renderAccordionHeader_unstable } from `@fluentui/react-components`;\n\n-useAccordionHeaderStyles();\n-renderAccordionHeader();\n+useAccordionHeaderStyles_unstable();\n+renderAccordionHeader_unstable();\n```\n\n----------------------------------------\n\nTITLE: Patch Entry Format\nDESCRIPTION: Format used to document package dependency updates in patch releases\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-toolbar/library/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Patches\n\n- Bump @fluentui/react-button to v9.4.5 ([PR #34166](https://github.com/microsoft/fluentui/pull/34166) by beachball)\n- Bump @fluentui/react-divider to v9.2.86 ([PR #34166](https://github.com/microsoft/fluentui/pull/34166) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Applying Focus Visible Polyfill - TypeScript\nDESCRIPTION: This function applies a focus visible polyfill to a specified HTML element and returns a cleanup function. It is intended to enhance accessibility by ensuring that the focus state is correctly applied and removed, improving keyboard navigation experience.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tabster/etc/react-tabster.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport function applyFocusVisiblePolyfill(scope: HTMLElement, targetWindow: Window): () => void;\n```\n\n----------------------------------------\n\nTITLE: Updating package.json for Preview Packages\nDESCRIPTION: Diff showing how to update the package.json file when converting a package to use the preview naming convention, including version resetting and change type configuration.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/new-release-process-v9-packages.md#2025-04-20_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n{\n- \"name\": \"@fluentui/react-control\",\n+ \"name\": \"@fluentui/react-control-preview\",\n- \"version\": \"9.0.0-alpha.0\",\n+ \"version\": \"0.0.0\",\n  \"beachball\": {\n    \"disallowedChangeTypes\": [\n      \"major\",\n-     \"minor\",\n-     \"patch\",\n+     \"prerelease\"\n    ]\n},\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing npm scripts with nx inferred tasks\nDESCRIPTION: This change replaces the existing npm scripts and just-scripts with nx inferred tasks.  Nx is a build system that can infer task dependencies and optimize the build process. This refactoring aims to improve the build performance and maintainability of the project.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nchore: replace npm-scripts and just-scrtips with nx inferred tasks ([PR #33074](https://github.com/microsoft/fluentui/pull/33074) by martinhochel@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Version History Entry - 9.12.1\nDESCRIPTION: Version update fixing RTL styling issues\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-positioning/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.12.1]\\nThu, 11 Jan 2024 09:04:29 GMT\\n\\n### Patches\\n- fix: update styles to not flip in RTL\n```\n\n----------------------------------------\n\nTITLE: Using Fit to Cover in Fluent UI Image Component\nDESCRIPTION: This snippet demonstrates the use of the fit prop with the value of cover to achieve the behavior previously managed by the coverStyle property in the v9 Fluent UI Image component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-image/library/docs/MIGRATION.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Image src=\"example.jpg\" fit=\"cover\" />\n```\n\n----------------------------------------\n\nTITLE: Defining SharedColors Namespace in TypeScript for FluentUI\nDESCRIPTION: Namespace containing color constants for shared semantic colors in the FluentUI design system. It provides named color values for commonly used colors like red, orange, and yellow with various intensity levels.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/theme/etc/theme.api.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport namespace SharedColors {\n    const // (undocumented)\n    pinkRed10 = \"#750b1c\";\n    const // (undocumented)\n    red20 = \"#a4262c\";\n    const // (undocumented)\n    red10 = \"#d13438\";\n    const // (undocumented)\n    redOrange20 = \"#603d30\";\n    const // (undocumented)\n    redOrange10 = \"#da3b01\";\n    const // (undocumented)\n    orange30 = \"#8e562e\";\n    const // (undocumented)\n    orange20 = \"#ca5010\";\n    const // (undocumented)\n    orange10 = \"#ffaa44\";\n    const // (undocumented)\n    yellow10 = \"#fce100\";\n    const // (undocumented)\n    orangeYellow20 = \"#986f0b\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ScrollbarVisibility Constants\nDESCRIPTION: Constants for specifying scrollbar visibility behavior in scrollable components. Options include 'auto' (showing when needed) and 'always' (always visible).\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_248\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport const ScrollbarVisibility: {\n    auto: \"auto\";\n    always: \"always\";\n};\n\n// @public (undocumented)\nexport type ScrollbarVisibility = (typeof ScrollbarVisibility)[keyof typeof ScrollbarVisibility];\n```\n\n----------------------------------------\n\nTITLE: Defining RadioGroup Events in FluentUI\nDESCRIPTION: Specifies the custom 'change' event fired by the RadioGroup component when a different radio button within the group is selected.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/radio-group/README.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### **Events**\n\n| Name     | Event Type    | Target           | Arguments | Description                                                                                                       |\n| -------- | ------------- | ---------------- | --------- | ----------------------------------------------------------------------------------------------------------------- |\n| `change` | `CustomEvent` | `FASTRadioGroup` | none      | Fired when the value of the RadioGroup changes (i.e., when a different radio button within the group is selected) |\n```\n\n----------------------------------------\n\nTITLE: Bumping FluentUI Set Version\nDESCRIPTION: This snippet shows how to bump the version of the @fluentui/set-version package. The commit hash provides a direct link to the change within the repository. This action is part of maintaining the dependencies for the project.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-docsite-components/CHANGELOG.md#2025-04-20_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n\"- Bump @fluentui/set-version to v8.2.12 ([commit](https://github.com/microsoft/fluentui/commit/70d0762fd12eb211f7c1dbe31a23b2fbb73a67c4) by beachball)\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Field Component in TypeScript\nDESCRIPTION: Defines a Field component class that extends BaseField with label position functionality\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_34\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class Field extends BaseField {\n    labelPosition: FieldLabelPosition;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Icons in FluentUI React Icons\nDESCRIPTION: Function to register a set of icons with optional configuration options, allowing dynamic icon management and customization\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-icons-compat/library/etc/react-icons-compat.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport function registerIcons(iconSubset: IconSubset, options?: Partial<IconOptions>): void;\n```\n\n----------------------------------------\n\nTITLE: Version History for FluentUI React Checkbox\nDESCRIPTION: Comprehensive changelog entries detailing version changes, bug fixes, dependency bumps and feature additions for the FluentUI React Checkbox component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-checkbox/library/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n### Patches\n\n- fix: Use caret dependency range for Griffel ([PR #23754](https://github.com/microsoft/fluentui/pull/23754) by lingfangao@hotmail.com)\n- Bump @fluentui/react-label to v9.0.1 ([PR #23754](https://github.com/microsoft/fluentui/pull/23754) by beachball)\n- Bump @fluentui/react-tabster to v9.0.1 ([PR #23754](https://github.com/microsoft/fluentui/pull/23754) by beachball)\n- Bump @fluentui/react-conformance-griffel to v9.0.0-beta.10 ([PR #23754](https://github.com/microsoft/fluentui/pull/23754) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Defining Component State and Props in TypeScript for FluentUI\nDESCRIPTION: This snippet demonstrates the proposed structure for component state and props interfaces in FluentUI. It includes the use of shorthand props and resolving them into a state object.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/simplify-prop-merging.md#2025-04-20_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nconst state: FooState = {\n  as: \"button\",\n\n  components: {\n    icon: \"span\",\n    content: \"span\",\n    loader: Loader,\n  },\n\n  // user props\n  ...props,\n\n  ref: resolvedRef,\n  content: resolveShorthand(\n    props.content,\n    { children: props.children } /* defaultProps for a slot */\n  ),\n  icon: resolveShorthand(props.icon),\n  loader: resolveShorthand(\n    props.loader,\n    { role: \"presentation\" } /* defaultProps for a slot */\n  ),\n};\n\nexport interface FooProps extends ComponentProps, React.ButtonHTMLAttributes<HTMLButtonElement> {\n  icon?: ShorthandProps<React.HTMLAttributes<HTMLSpanElement>;\n  content?: ShorthandProps<React.HTMLAttributes<HTMLSpanElement>;\n  Loader?: ShorthandProps<LoaderProps>;\n};\n\nexport interface FooState extends FooProps, React.ButtonHTMLAttributes<HTMLButtonElement> {\n  icon: ObjectShorthandProps<React.HTMLAttributes<HTMLSpanElement>;\n  content: ObjectShorthandProps<React.HTMLAttributes<HTMLSpanElement>;\n  Loader: ObjectShorthandProps<LoaderProps>;\n};\n```\n\n----------------------------------------\n\nTITLE: resolvePositioningShorthand function\nDESCRIPTION: Defines a public function `resolvePositioningShorthand` that accepts a `PositioningShorthand | undefined | null` and returns a `Readonly<PositioningProps>`. This function converts a positioning shorthand value into a full set of positioning properties.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-positioning/etc/react-positioning.api.md#2025-04-20_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport function resolvePositioningShorthand(shorthand: PositioningShorthand | undefined | null): Readonly<PositioningProps>;\n```\n\n----------------------------------------\n\nTITLE: FluentUI Component Version Updates Documentation\nDESCRIPTION: Documentation of version changes and updates for FluentUI React components including buttons, avatars, cards, dividers, providers, and other UI elements. Lists version bumps and changes across multiple releases.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/vr-tests/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### Changes\n\n- Bump @fluentui/react-button to v9.0.0-alpha.16 ([PR #17566](https://github.com/microsoft/fluentui/pull/17566) by Humberto.Morimoto@microsoft.com)\n- Bump @fluentui/react-avatar to v9.0.0-alpha.16 ([PR #17524](https://github.com/microsoft/fluentui/pull/17524) by lingfan.gao@microsoft.com)\n- Bump @fluentui/react-cards to v1.0.0-beta.75 ([PR #17524](https://github.com/microsoft/fluentui/pull/17524) by lingfan.gao@microsoft.com)\n- Bump @fluentui/react-divider to v9.0.0-alpha.5 ([PR #17524](https://github.com/microsoft/fluentui/pull/17524) by lingfan.gao@microsoft.com)\n- Bump @fluentui/react-provider to v9.0.0-alpha.15 ([PR #17524](https://github.com/microsoft/fluentui/pull/17524) by lingfan.gao@microsoft.com)\n- Bump @fluentui/react-make-styles to v9.0.0-alpha.15 ([PR #17524](https://github.com/microsoft/fluentui/pull/17524) by lingfan.gao@microsoft.com)\n- Bump @fluentui/react-link to v9.0.0-alpha.16 ([PR #17524](https://github.com/microsoft/fluentui/pull/17524) by lingfan.gao@microsoft.com)\n- Bump @fluentui/react-theme-provider to v9.0.0-alpha.15 ([PR #17524](https://github.com/microsoft/fluentui/pull/17524) by lingfan.gao@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Version Change Entry\nDESCRIPTION: Changelog entry for version 9.0.14 showing dependency updates\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-breadcrumb/library/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.0.14](https://github.com/microsoft/fluentui/tree/@fluentui/react-breadcrumb_v9.0.14)\n\nTue, 06 Feb 2024 17:55:21 GMT\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-breadcrumb_v9.0.13..@fluentui/react-breadcrumb_v9.0.14)\n\n### Patches\n\n- Bump @fluentui/react-aria to v9.8.2\n- Bump @fluentui/react-button to v9.3.68\n- Bump @fluentui/react-link to v9.2.10\n- Bump @fluentui/react-tabster to v9.19.0\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters Function for Fluent UI Addon\nDESCRIPTION: This snippet contains a public function 'parameters' that accepts options of type 'FluentParameters' and returns an object useful for configuring the Fluent UI React addon in Storybook. It defines the available parameters like direction, theme, mode, and disabled decorators, facilitating addon customization in a Storybook setup.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-storybook-addon/etc/react-storybook-addon.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport function parameters(options?: FluentParameters): {\n    dir: string;\n    fluentTheme: string;\n    mode: string;\n    reactStorybookAddon?: {\n        disabledDecorators: [\"AriaLive\" | \"FluentProvider\" | \"ReactStrictMode\"];\n    } | undefined;\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Class Concatenation\nDESCRIPTION: Illustrates that direct concatenation of class names from useClasses can lead to duplicated classes and unpredictable styling. It is crucial to use mergeClasses for correct class merging.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/styles-handbook.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeStyles, mergeClasses } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  rootA: { display: 'flex' },\n  rootB: { display: 'grid' },\n});\n\nfunction App(props) {\n  const classes = useClasses();\n\n  // ✅ Returns \"class-display-grid\"\n  const correctClasses = mergeClasses(classes.rootA, classes.rootB);\n  // 🔴 Never concatenate class strings, returns \"class-display-flex class-display-grid\"\n  const wrongClasses = classes.rootA + ' ' + classes.rootB;\n}\n```\n\n----------------------------------------\n\nTITLE: FluentUI Changelog Entry v8.1.7\nDESCRIPTION: Changelog entry documenting UnifiedPicker update to set suggestedDisplayValue for Autofill\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-experiments/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## [8.1.7](https://github.com/microsoft/fluentui/tree/@fluentui/react-experiments_v8.1.7)\n\nThu, 13 May 2021 07:36:55 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-experiments_v8.1.6..@fluentui/react-experiments_v8.1.7)\n\n### Patches\n\n- UnifiedPicker: set suggestedDisplayValue for Autofill ([PR #18105](https://github.com/microsoft/fluentui/pull/18105) by litong@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Defining Y Value Hover Interface in TypeScript\nDESCRIPTION: The IYValueHover interface describes the properties for managing hover interactions over y-values in charts, encompassing accessibility and color attributes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/etc/react-charting.api.md#2025-04-20_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface IYValueHover {\n    // (undocumented)\n    callOutAccessibilityData?: IAccessibilityProps;\n    // (undocumented)\n    color?: string;\n    // (undocumented)\n    data?: string | number;\n    // (undocumented)\n    index?: number;\n    // (undocumented)\n    legend?: string;\n    // (undocumented)\n    shouldDrawBorderBottom?: boolean;\n    // (undocumented)\n    y?: number;\n    // (undocumented)\n    yAxisCalloutData?: string | {\n        [id: string]: number;\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Selector bottom-up parsing visualization with Mermaid\nDESCRIPTION: Illustrates how CSS selectors are matched by browser engines from right to left (bottom-up parsing) using a flowchart.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/styles-handbook.md#2025-04-20_snippet_16\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart RL\n    C[li] --> B[ul] --> A[.menu]\n```\n\n----------------------------------------\n\nTITLE: Storybook Stories Configuration\nDESCRIPTION: This code snippet demonstrates how to configure Storybook to include stories from the @fluentui/react-drawer package. It specifies the glob patterns that Storybook should use to find the stories files, covering both MDX and TS/TSX formats.  This ensures that all stories related to the drawer component are included in the Storybook environment.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-drawer/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-drawer/stories/src/**/*.stories.mdx', '../packages/react-components/react-drawer/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Button Component from FluentUI React Native\nDESCRIPTION: Shows how to import the Button component from the @fluentui/react-native package for use in React Native applications.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/ButtonPage/docs/windows/ButtonImplementation.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Button } from '@fluentui/react-native';\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react to v8.46.0\nDESCRIPTION: This patch updates the @fluentui/react library to version 8.46.0, which includes crucial updates. Details are available in Pull Request #20715.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/ts-minbar-test-react/CHANGELOG.md#2025-04-20_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.46.0 ([PR #20715](https://github.com/microsoft/fluentui/pull/20715) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Avoiding !important in styles\nDESCRIPTION: Shows the approach to avoid using !important in styles, as it makes overrides unpredictable and is generally unnecessary with Griffel's styling system.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/styles-handbook.md#2025-04-20_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeStyles, mergeClasses, shorthands } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  base: {\n    // ❌ Don't do\n    display: 'flex !important',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Version Details Section\nDESCRIPTION: Markdown section showing version number, date, and comparison link for a specific release\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-textarea/library/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.3.42](https://github.com/microsoft/fluentui/tree/@fluentui/react-textarea_v9.3.42)\n\nMon, 02 Oct 2023 08:56:05 GMT\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-textarea_v9.3.41..@fluentui/react-textarea_v9.3.42)\n```\n\n----------------------------------------\n\nTITLE: Defining AccordionHeader Component Props\nDESCRIPTION: TypeScript interface for AccordionHeader component props, specifying the header section configuration options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-accordion/library/docs/Spec.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type AccordionHeaderProps = ComponentProps &\n  React.HTMLAttributes<HTMLElement> & {\n    size?: 'small' | 'medium' | 'large' | 'extra-large';\n    button?: ShorthandProps<React.HTMLAttributes<HTMLElement>>;\n    expandIcon?: ShorthandProps<AccordionHeaderExpandIconProps>;\n    expandIconPosition?: 'start' | 'end';\n    icon?: ShorthandProps<AccordionHeaderIconProps>;\n    inline?: boolean;\n  };\n```\n\n----------------------------------------\n\nTITLE: Defining Tablist Component\nDESCRIPTION: Defines the Tablist component with appearance and size customization options and change handlers.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Tablist extends BaseTablist {\n    activeidChanged(oldValue: string, newValue: string): void;\n    appearance?: TablistAppearance;\n    size?: TablistSize;\n    tabsChanged(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Sparkline Component in TypeScript\nDESCRIPTION: The Sparkline constant exports a React functional component designed to render sparkline charts for simplified data visualizations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/etc/react-charting.api.md#2025-04-20_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const Sparkline: React_2.FunctionComponent<ISparklineProps>;\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry v9.0.23\nDESCRIPTION: Version 9.0.23 changelog showing dependency updates including react-icons upgrade and various component version bumps\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-breadcrumb/library/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.0.23](https://github.com/microsoft/fluentui/tree/@fluentui/react-breadcrumb_v9.0.23)\n\nThu, 02 May 2024 11:36:30 GMT\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-breadcrumb_v9.0.22..@fluentui/react-breadcrumb_v9.0.23)\n\n### Patches\n\n- chore: upgrade @fluentui/react-icons to 2.0.237. ([PR #31139](https://github.com/microsoft/fluentui/pull/31139) by ololubek@microsoft.com)\n- Bump @fluentui/react-aria to v9.11.0 ([PR #31231](https://github.com/microsoft/fluentui/pull/31231) by beachball)\n- Bump @fluentui/react-button to v9.3.77 ([PR #31231](https://github.com/microsoft/fluentui/pull/31231) by beachball)\n- Bump @fluentui/react-link to v9.2.19 ([PR #31231](https://github.com/microsoft/fluentui/pull/31231) by beachball)\n- Bump @fluentui/react-tabster to v9.21.0 ([PR #31231](https://github.com/microsoft/fluentui/pull/31231) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Mobile-First Media Query Sorting\nDESCRIPTION: Demonstrates how to implement mobile-first methodology using sort-css-media-queries package for media query sorting.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/AdvancedConfiguration.stories.mdx#2025-04-20_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { createDOMRenderer } from '@fluentui/react-components';\nimport sortCSSmq from 'sort-css-media-queries';\n\nconst renderer = createDOMRenderer(document, {\n  compareMediaQueries: sortCSSmq,\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring Stroke Width Constants in TypeScript\nDESCRIPTION: CSS custom property references for stroke width values used throughout the FluentUI component system.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_57\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport const strokeWidthThick = \"var(--strokeWidthThick)\";\n\n// @public\nexport const strokeWidthThicker = \"var(--strokeWidthThicker)\";\n\n// @public\nexport const strokeWidthThickest = \"var(--strokeWidthThickest)\";\n\n// @public\nexport const strokeWidthThin = \"var(--strokeWidthThin)\";\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react to v8.48.0\nDESCRIPTION: This patch updates the @fluentui/react package to version 8.48.0. It was created to ensure the latest features and fixes are included in the project. The commit references the Pull Request #21011.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/ts-minbar-test-react/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.48.0 ([PR #21011](https://github.com/microsoft/fluentui/pull/21011) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Importing VirtualizerScrollViewDynamic from FluentUI\nDESCRIPTION: Demonstrates how to import the VirtualizerScrollViewDynamic component from the @fluentui/react-virtualizer package. Note that this is a preview component with potentially unstable APIs that may change before final release.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-virtualizer/stories/src/VirtualizerScrollViewDynamic/VirtualizerScrollViewDynamicDescription.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { VirtualizerScrollViewDynamic } from '@fluentui/react-virtualizer';\n```\n\n----------------------------------------\n\nTITLE: Bumping FluentUI React Monaco Editor Version with PR\nDESCRIPTION: This snippet shows how to bump the version of the @fluentui/react-monaco-editor package. The pull request number provides a direct link to the change within the repository. This action is part of maintaining the dependencies for the project.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-docsite-components/CHANGELOG.md#2025-04-20_snippet_23\n\nLANGUAGE: text\nCODE:\n```\n\"- Bump @fluentui/react-monaco-editor to v1.7.125 ([PR #29120](https://github.com/microsoft/fluentui/pull/29120) by beachball)\"\n```\n\n----------------------------------------\n\nTITLE: TagPickerButton Props Type\nDESCRIPTION: Defines the props interface for the TagPickerButton component, including properties from ComponentProps and DropdownProps, as well as a disabled property.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport type TagPickerButtonProps = ComponentProps<TagPickerButtonSlots> & Pick<DropdownProps, 'size' | 'appearance'> & {\n    disabled?: boolean;\n};\"\n```\n\n----------------------------------------\n\nTITLE: Defining SLink Type in TypeScript\nDESCRIPTION: The SLink type represents a link in the Sankey diagram, incorporating additional data through generic parameters for extended functionality.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/etc/react-charting.api.md#2025-04-20_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type SLink = SankeyLink<ISNodeExtra, ISLinkExtra>;\n```\n\n----------------------------------------\n\nTITLE: Updating TypeScript Config for Preview Packages\nDESCRIPTION: Diff showing how to update the TypeScript path mappings in tsconfig files when converting a package to use the preview naming convention.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/new-release-process-v9-packages.md#2025-04-20_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n\"paths\": {\n- \"@fluentui/react-control\": [\"packages/react-components/react-control/src/index.ts\"]\n+ \"@fluentui/react-control-preview\": [\"packages/react-components/react-control-preview/src/index.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Generated CSS with @noflip applied\nDESCRIPTION: Shows the CSS output when @noflip is applied to a style property. The same class is used for both LTR and RTL contexts instead of generating direction-specific classes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/styles-handbook.md#2025-04-20_snippet_27\n\nLANGUAGE: css\nCODE:\n```\n/* Will be applied in LTR & RTL */\n.f6x5cb6 {\n  padding-left: 10px;\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog Version Entries\nDESCRIPTION: Markdown formatted changelog entries showing version updates and patches for @fluentui/react-docsite-components\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-docsite-components/CHANGELOG.md#2025-04-20_snippet_26\n\nLANGUAGE: markdown\nCODE:\n```\n## [8.7.9]\n### Patches\n- Bump @fluentui/react to v8.67.0\n- Bump @fluentui/react-monaco-editor to v1.4.6\n\n## [8.7.8]\n### Patches\n- Bump @fluentui/react to v8.66.2\n- Bump @fluentui/react-monaco-editor to v1.4.5\n```\n\n----------------------------------------\n\nTITLE: Example usage of epic generator\nDESCRIPTION: This command demonstrates how to create an epic and sub-issues on the specified repository with a given title. It sets the `repository` and `title` options to define the target GitHub repository and the title of the issues.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/epic-generator/README.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:epic-generator --repository=\"microsoft/fluentui\" --title=\"Migrate vNext packages\"\n```\n\n----------------------------------------\n\nTITLE: Resolve Shorthand with Optional Parameters in TypeScript\nDESCRIPTION: Proposes enhancements for `resolveShorthand` function to allow flexible configuration through an optional parameter. This helps determine if a shorthand should result in null rendering or maintain default property values.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/slot-null-rendering.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport function resolveShorthand(\n  value,\n  defaultProps,\n+  {optional = true}\n+) {\n+  // verify if shorthand is undefined\n+  if (value === null || (value === undefined && optional)) {\n+    return undefined;\n+  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing FluentUI React Hooks\nDESCRIPTION: Collection of import statements for React hooks from various Fluent UI packages including core components, utilities, and styling hooks. These hooks provide functionality for UI components and common patterns in the Fluent UI ecosystem.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/etc/react-components.api.md#2025-04-20_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useFocusFinders } from '@fluentui/react-tabster';\nimport { useFocusObserved } from '@fluentui/react-tabster';\nimport { useFocusVisible } from '@fluentui/react-tabster';\nimport { useFocusWithin } from '@fluentui/react-tabster';\nimport { useHeadlessFlatTree_unstable } from '@fluentui/react-tree';\nimport { useId } from '@fluentui/react-utilities';\nimport { useImage_unstable } from '@fluentui/react-image';\nimport { useImageStyles_unstable } from '@fluentui/react-image';\n// ... additional imports omitted for brevity\n```\n\n----------------------------------------\n\nTITLE: Updating FluentUI React Components Dependencies\nDESCRIPTION: Example showing changes to package.json dependencies for @fluentui/react-components, replacing caret (^) versions with fixed versions for prerelease packages.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/fixed-versions-for-prerelease.md#2025-04-20_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"dependencies\": {\n-    \"@fluentui/react-accordion\": \"^9.0.0-alpha.70\",\n-    \"@fluentui/react-avatar\": \"^9.0.0-alpha.75\",\n-    \"@fluentui/react-badge\": \"^9.0.0-alpha.75\",\n-    \"@fluentui/react-button\": \"^9.0.0-alpha.80\",\n-    \"@fluentui/react-divider\": \"^9.0.0-alpha.62\",\n-    \"@fluentui/react-image\": \"^9.0.0-alpha.73\",\n-    \"@fluentui/react-label\": \"^9.0.0-alpha.34\",\n-    \"@fluentui/react-link\": \"^9.0.0-alpha.76\",\n-    \"@fluentui/react-make-styles\": \"^9.0.0-alpha.61\",\n-    \"@fluentui/react-menu\": \"^9.0.0-alpha.71\",\n-    \"@fluentui/react-popover\": \"^9.0.0-alpha.36\",\n-    \"@fluentui/react-portal\": \"^9.0.0-alpha.43\",\n-    \"@fluentui/react-provider\": \"^9.0.0-alpha.72\",\n-    \"@fluentui/react-theme\": \"^9.0.0-alpha.22\",\n-    \"@fluentui/react-tooltip\": \"^9.0.0-alpha.76\",\n-    \"@fluentui/react-utilities\": \"^9.0.0-alpha.43\",\n+    \"@fluentui/react-accordion\": \"9.0.0-alpha.70\",\n+    \"@fluentui/react-avatar\": \"9.0.0-alpha.75\",\n+    \"@fluentui/react-badge\": \"9.0.0-alpha.75\",\n+    \"@fluentui/react-button\": \"9.0.0-alpha.80\",\n+    \"@fluentui/react-divider\": \"9.0.0-alpha.62\",\n+    \"@fluentui/react-image\": \"9.0.0-alpha.73\",\n+    \"@fluentui/react-label\": \"9.0.0-alpha.34\",\n+    \"@fluentui/react-link\": \"9.0.0-alpha.76\",\n+    \"@fluentui/react-make-styles\": \"9.0.0-alpha.61\",\n+    \"@fluentui/react-menu\": \"9.0.0-alpha.71\",\n+    \"@fluentui/react-popover\": \"9.0.0-alpha.36\",\n+    \"@fluentui/react-portal\": \"9.0.0-alpha.43\",\n+    \"@fluentui/react-provider\": \"9.0.0-alpha.72\",\n+    \"@fluentui/react-theme\": \"9.0.0-alpha.22\",\n+    \"@fluentui/react-tooltip\": \"9.0.0-alpha.76\",\n+    \"@fluentui/react-utilities\": \"9.0.0-alpha.43\",\n    \"tslib\": \"^2.1.0\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring PopupMenuController in Swift and Objective-C\nDESCRIPTION: Demonstrates how to declare the PopupMenuController class in both Swift and Objective-C. This control is likely used for managing popup menus in the FluentUI framework.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/PopupMenuPage/docs/ios/PopupMenuImplementation.md#2025-04-20_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nPopupMenuController\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\nMSFPopupMenuController\n```\n\n----------------------------------------\n\nTITLE: Cleaning Yarn Cache and Reinstalling Dependencies\nDESCRIPTION: This snippet outlines the commands needed to clean the yarn cache and reinstall dependencies in case of build errors. It is intended for users facing persistent issues with their node modules and is a prerequisite step before performing a clean build.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/common-dev-snags.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nyarn cache clean\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: FluentUI React Image Changelog Entry\nDESCRIPTION: Changelog entries documenting version changes, dependency updates, and bug fixes for @fluentui/react-image component package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-image/library/CHANGELOG.md#2025-04-20_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n### Changes\n\n- Bump @fluentui/react-utilities to v9.0.0-alpha.33 ([PR #18861](https://github.com/microsoft/fluentui/pull/18861) by bsunderhus@microsoft.com)\n\n## [9.0.0-alpha.54](https://github.com/microsoft/fluentui/tree/@fluentui/react-image_v9.0.0-alpha.54)\n\nTue, 13 Jul 2021 22:32:58 GMT\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-image_v9.0.0-alpha.53..@fluentui/react-image_v9.0.0-alpha.54)\n```\n\n----------------------------------------\n\nTITLE: Defining useListItemStyles_unstable Hook for FluentUI in TypeScript\nDESCRIPTION: Exports an unstable hook that applies styles to a list item component based on its state. Takes a list item state object and returns the same state object with applied styles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-migration-v0-v9/library/etc/react-migration-v0-v9.api.md#2025-04-20_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport const useListItemStyles_unstable: (state: ListItemState) => ListItemState;\n```\n\n----------------------------------------\n\nTITLE: Defining TreeChart Node Structure Interface for Visualization\nDESCRIPTION: Defines the internal tree data structure used for visualization. Each node has an ID, coordinates, text content, parent reference, and styling. This structure enables tree traversal and positioning of nodes on the SVG canvas.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/src/components/TreeChart/TreeChart.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nITreeDataStructure {\n    id: node id,\n    children: Node object,\n    dataName: main text,\n    subName: subtext,\n    fill: node stroke color,\n    x: x coordinate,\n    y: y coordinate,\n    parentID: parent ID\n}\n```\n\n----------------------------------------\n\nTITLE: Bumping FluentUI Public Docsite Setup Version\nDESCRIPTION: This snippet shows how to bump the version of the @fluentui/public-docsite-setup package. The commit hash provides a direct link to the change within the repository. This action is part of maintaining the dependencies for the project.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-docsite-components/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n\"- Bump @fluentui/public-docsite-setup to v0.3.23 ([commit](https://github.com/microsoft/fluentui/commit/70d0762fd12eb211f7c1dbe31a23b2fbb73a67c4) by beachball)\"\n```\n\n----------------------------------------\n\nTITLE: Defining Line and Link Interfaces in TypeScript\nDESCRIPTION: Interface definitions for Line and Link components in FluentUI. The Line interface is used in Shimmer components, while the Link interfaces define hyperlink behavior and styling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_145\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface ILine extends IShimmerElement {\n    height?: number;\n    width?: number | string;\n}\n\n// @public (undocumented)\nexport interface ILink {\n    focus(): void;\n}\n\n// @public @deprecated (undocumented)\nexport interface ILinkHTMLAttributes<T> extends React_2.HTMLAttributes<T> {\n    [key: string]: any;\n    // (undocumented)\n    autoFocus?: boolean;\n    // (undocumented)\n    disabled?: boolean;\n    // (undocumented)\n    download?: any;\n    // (undocumented)\n    form?: string;\n    // (undocumented)\n    formAction?: string;\n    // (undocumented)\n    formEncType?: string;\n    // (undocumented)\n    formMethod?: string;\n    // (undocumented)\n    formNoValidate?: boolean;\n    // (undocumented)\n    formTarget?: string;\n    // (undocumented)\n    href?: string;\n    // (undocumented)\n    hrefLang?: string;\n    // (undocumented)\n    media?: string;\n    // (undocumented)\n    name?: string;\n    // (undocumented)\n    rel?: string;\n    // (undocumented)\n    target?: string;\n    // (undocumented)\n    type?: string;\n    // (undocumented)\n    value?: string | string[] | number;\n}\n\n// @public\nexport interface ILinkProps extends React_2.AnchorHTMLAttributes<HTMLAnchorElement | HTMLButtonElement | HTMLElement>, Omit<React_2.ButtonHTMLAttributes<HTMLAnchorElement | HTMLButtonElement | HTMLElement>, 'type'>, React_2.RefAttributes<HTMLElement> {\n    [key: string]: any;\n    as?: React_2.ElementType;\n    componentRef?: IRefObject<ILink>;\n    disabled?: boolean;\n    href?: string;\n    onClick?: (event: React_2.MouseEvent<HTMLAnchorElement | HTMLButtonElement | HTMLElement>) => void;\n    rel?: string;\n    styles?: IStyleFunctionOrObject<ILinkStyleProps, ILinkStyles>;\n    target?: string;\n    theme?: ITheme;\n    type?: string;\n    underline?: boolean;\n}\n\n// @public (undocumented)\nexport interface ILinkStyleProps {\n    // (undocumented)\n    className?: string;\n    // (undocumented)\n    isButton?: boolean;\n    // (undocumented)\n    isDisabled?: boolean;\n    // (undocumented)\n    isUnderlined?: boolean;\n    // (undocumented)\n    theme: ITheme;\n}\n\n// @public (undocumented)\nexport interface ILinkStyles {\n    // (undocumented)\n    root: IStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Stack.Item Component in JSX\nDESCRIPTION: This snippet demonstrates how to render a Stack.Item component using JSX and CSS classes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Flex/Flex.StackItem.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={styles.root}>\n  <div className={styles.item}>Item</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining ISpacing Interface in TypeScript for FluentUI\nDESCRIPTION: Internal interface that defines spacing values for FluentUI components. It includes various spacing sizes represented as strings, which are used for consistent component spacing throughout the UI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/theme/etc/theme.api.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-internal-missing-underscore) The name \"ISpacing\" should be prefixed with an underscore because the declaration is marked as @internal\n//\n// @internal\nexport interface ISpacing {\n    // (undocumented)\n    l1: string;\n    // (undocumented)\n    l2: string;\n    // (undocumented)\n    m: string;\n    // (undocumented)\n    s1: string;\n    // (undocumented)\n    s2: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing SearchBox Props and Concepts in Fluent UI v8 and v9\nDESCRIPTION: A markdown table detailing the differences between v8 and v9 SearchBox implementations, including changes in prop names, behavior, and new concepts.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-search/library/docs/MIGRATION.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Prop/concept                 | v8                                                                     | v9                                                                     |\n| ---------------------------- | ---------------------------------------------------------------------- | ---------------------------------------------------------------------- |\n| imperative API               | `componentRef`                                                         | n/a                                                                    |\n| supported native props       | `React.AllHTMLAttributes` (input or textarea)                          | `React.InputHTMLAttributes`                                            |\n| setting native props on root |                                                                        | `root` slot                                                            |\n| root element access          | `elementRef`                                                           | `ref` on `root` slot                                                   |\n| primary element access       | not possible                                                           | top-level `ref`                                                        |\n| underlined                   | `underlined?: boolean`                                                 | `appearance`                                                           |\n| borderless                   | `borderless?: boolean`                                                 | `appearance` or custom styles                                          |\n| fluid (full width)           | default behavior                                                       | default behavior                                                       |\n| label                        | `label?: string`, `onRenderLabel`                                      | handled by Field                                                       |\n| label position               | n/a (use styling)                                                      | handled by Field                                                       |\n| description                  | `description?: string`, `onRenderDescription`                          | handled by Field                                                       |\n| error message                | see [Spec-variants.md](./Spec-variants.md#validation)                  | handled by Field                                                       |\n| content outside before field | `prefix?: string`, `onRenderPrefix`                                    |                                                                        |\n| content outside after field  | `suffix?: string`, `onRenderSuffix`                                    |                                                                        |\n| icon at start of field       | n/a                                                                    | `contentBefore` slot                                                   |\n| icon at end of field         | `iconProps?: IIconProps`                                               | `contentAfter` slot                                                    |\n| value                        | `value?: string`                                                       | `value?: string`                                                       |\n| defaultValue                 | `defaultValue?: string`                                                | `defaultValue?: string`                                                |\n| onChange                     | `(ev?: React.ChangeEvent<HTMLInputElement>, value) => void`            | `(ev: ChangeEvent<HTMLInputElement>, data: { value: string }) => void` |\n| onClear                      | `(ev?: any) => void`                                                   | `(ev?: any) => void` on `dismiss` slot                                 |\n| onSearch                     | `(newValue: any) => void`                                              | not supported                                                          |\n| onEscape                     | `(ev?: any) => void`                                                   | not supported                                                          |\n| disableAnimation             | `disableAnimation?: boolean`                                           | default behavior                                                       |\n| container className          | `className?: string`                                                   | top-level `className`                                                  |\n| input className              | `inputClassName?: string`                                              | `className` on the `Input`'s `input` slot                              |\n| aria-label                   | `ariaLabel?: string`                                                   | `'aria-label'?: string`                                                |\n| showIcon                     | `showIcon?: boolean`                                                   | default behavior                                                       |\n| iconProps                    | `iconProps?: Pick<IIconProps, Exclude<keyof IIconProps, 'className'>>` | `contentBefore`, `dismiss`, and `contentAfter` props                   |\n| clearButtonProps             | `clearButtonProps?: IButtonProps`                                      | `dismiss` props                                                        |\n| style overrides              | `styles?: IStyleFunctionOrObject<...>`                                 | className, slot classNames                                             |\n```\n\n----------------------------------------\n\nTITLE: TeachingPopover Props and State Interfaces in TypeScript\nDESCRIPTION: Type definitions for props, state, and slot interfaces for the TeachingPopover component family. These interfaces define the component API and internal state structure.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-teaching-popover/library/etc/react-teaching-popover.api.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type TeachingPopoverBodyProps = ComponentProps<TeachingPopoverBodySlots> & {\n    mediaLength?: 'short' | 'medium' | 'tall';\n};\n\n// @public (undocumented)\nexport type TeachingPopoverBodySlots = {\n    root: NonNullable<Slot<'div'>>;\n    media?: Slot<'span'>;\n};\n\n// @public (undocumented)\nexport type TeachingPopoverBodyState = ComponentState<TeachingPopoverBodySlots> & Required<Pick<TeachingPopoverBodyProps, 'mediaLength'>>;\n\n// @public (undocumented)\nexport type TeachingPopoverCarouselCardProps = ComponentProps<TeachingPopoverCarouselCardSlots> & {\n    value: string;\n};\n\n// @public (undocumented)\nexport type TeachingPopoverCarouselCardSlots = {\n    root: NonNullable<Slot<CarouselItemProps>>;\n};\n\n// @public (undocumented)\nexport type TeachingPopoverCarouselCardState = ComponentState<TeachingPopoverCarouselCardSlots> & Required<Pick<TeachingPopoverCarouselCardProps, 'value'>>;\n\n// @public\nexport type TeachingPopoverCarouselFooterButtonProps = ComponentProps<TeachingPopoverCarouselFooterButtonSlots> & ButtonProps & {\n    navType: 'next' | 'prev';\n    altText: React_2.ReactNode;\n};\n\n// @public (undocumented)\nexport type TeachingPopoverCarouselFooterButtonSlots = {\n    root: NonNullable<Slot<ARIAButtonSlotProps<'a'>>>;\n};\n\n// @public\nexport type TeachingPopoverCarouselFooterButtonState = ButtonState & ComponentState<TeachingPopoverCarouselFooterButtonSlots> & Pick<TeachingPopoverCarouselFooterButtonProps, 'navType' | 'altText'> & {\n    popoverAppearance: PopoverContextValue['appearance'];\n};\n\n// @public\nexport type TeachingPopoverCarouselFooterProps = ComponentProps<TeachingPopoverCarouselFooterSlots> & {\n    layout?: TeachingPopoverCarouselFooterLayout;\n    initialStepText: string;\n    finalStepText: string;\n};\n\n// @public (undocumented)\nexport type TeachingPopoverCarouselFooterSlots = {\n    root: NonNullable<Slot<'div'>>;\n    previous?: Slot<TeachingPopoverCarouselFooterButtonProps>;\n    next: NonNullable<Slot<TeachingPopoverCarouselFooterButtonProps>>;\n};\n\n// @public\nexport type TeachingPopoverCarouselFooterState = ComponentState<Required<TeachingPopoverCarouselFooterSlots>> & Pick<TeachingPopoverCarouselFooterProps, 'layout'>;\n\n// @public\nexport type TeachingPopoverCarouselNavButtonProps = ComponentProps<TeachingPopoverCarouselNavButtonSlots>;\n\n// @public (undocumented)\nexport type TeachingPopoverCarouselNavButtonSlots = {\n    root: NonNullable<Slot<ARIAButtonSlotProps<'a'>>>;\n};\n\n// @public\nexport type TeachingPopoverCarouselNavButtonState = ComponentState<TeachingPopoverCarouselNavButtonSlots> & {\n    isSelected?: boolean;\n} & Pick<PopoverContextValue, 'appearance'>;\n\n// @public (undocumented)\nexport type TeachingPopoverCarouselNavProps = Omit<ComponentProps<Partial<TeachingPopoverCarouselNavSlots>>, 'children'> & {\n    children: NavButtonRenderFunction;\n};\n\n// @public (undocumented)\nexport type TeachingPopoverCarouselNavSlots = {\n    root: NonNullable<Slot<'div'>>;\n};\n\n// @public (undocumented)\nexport type TeachingPopoverCarouselNavState = ComponentState<TeachingPopoverCarouselNavSlots> & {\n    values: string[];\n    renderNavButton: NavButtonRenderFunction;\n};\n\n// @public\nexport type TeachingPopoverCarouselPageCountProps = Omit<ComponentProps<Partial<TeachingPopoverCarouselPageCountSlots>>, 'children'> & {\n    children: TeachingPopoverCarouselPageCountRenderFunction;\n};\n\n// @public (undocumented)\nexport type TeachingPopoverCarouselPageCountRenderFunction = (currentPage: number, totalPages: number) => React_2.ReactNode;\n\n// @public (undocumented)\nexport type TeachingPopoverCarouselPageCountSlots = {\n    root: Slot<'div'>;\n};\n\n// @public\nexport type TeachingPopoverCarouselPageCountState = ComponentState<TeachingPopoverCarouselPageCountSlots> & {\n    currentIndex: number;\n    totalPages: number;\n    renderPageCount: TeachingPopoverCarouselPageCountRenderFunction;\n};\n\n// @public\nexport type TeachingPopoverCarouselProps = ComponentProps<TeachingPopoverCarouselSlots> & UseCarouselOptions;\n\n// @public (undocumented)\nexport type TeachingPopoverCarouselSlots = {\n    root: NonNullable<Slot<'div'>>;\n};\n\n// @public\nexport type TeachingPopoverCarouselState = ComponentState<Required<TeachingPopoverCarouselSlots>> & Partial<Pick<PopoverContextValue, 'appearance'>> & CarouselContextValue;\n\n// @public (undocumented)\nexport type TeachingPopoverFooterProps = ComponentProps<TeachingPopoverFooterSlots> & Pick<TeachingPopoverFooterState, 'footerLayout'>;\n\n// @public (undocumented)\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Icons with Base Web in HTML\nDESCRIPTION: Illustrates how Base Web implements icon components using SVG. These icons are encapsulated within a single <svg> tag and identified with custom data attributes like 'data-baseweb'. The example emphasizes maintaining clean and accessible SVGs with defined viewBox properties.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Icon.md#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<svg data-baseweb=\"icon\" viewBox=\"0 0 24 24\" class=\"by bz c0 k2 kt\">\n  <title>Arrow Up</title>\n  <path\n    fill-rule=\"evenodd\"\n    clip-rule=\"evenodd\"\n    d=\"M11.2929 6.29289C11.6834 5.90237 12.3166 5.90237 12.7071 6.29289L16.7071 10.2929C17.0976 10.6834 17.0976 11.3166 16.7071 11.7071C16.3166 12.0976 15.6834 12.0976 15.2929 11.7071L13 9.41421V17C13 17.5523 12.5523 18 12 18C11.4477 18 11 17.5523 11 17V9.41421L8.70711 11.7071C8.31658 12.0976 7.68342 12.0976 7.29289 11.7071C6.90237 11.3166 6.90237 10.6834 7.29289 10.2929L11.2929 6.29289Z\"\n  ></path>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for FluentUI Project\nDESCRIPTION: This snippet shows the complete package.json configuration for the FluentUI project. It includes project metadata, dependencies, scripts for various tasks, and other configuration options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-link/stories/src/Link/LinkBestPractices.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"@fluentui/react-components\",\n  \"version\": \"9.46.3\",\n  \"description\": \"A set of React components for building Microsoft web experiences.\",\n  \"main\": \"lib-commonjs/index.js\",\n  \"module\": \"lib/index.js\",\n  \"typings\": \"lib/index.d.ts\",\n  \"sideEffects\": [\n    \"*.css.ts\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/microsoft/fluentui\"\n  },\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"build\": \"just-scripts build\",\n    \"bundle\": \"just-scripts bundle\",\n    \"bundle:storybook\": \"just-scripts storybook:build\",\n    \"clean\": \"just-scripts clean\",\n    \"code-style\": \"just-scripts code-style\",\n    \"e2e\": \"just-scripts e2e\",\n    \"just\": \"just-scripts\",\n    \"lint\": \"just-scripts lint\",\n    \"start\": \"just-scripts dev:storybook\",\n    \"start-test\": \"just-scripts jest-watch\",\n    \"test\": \"just-scripts test\",\n    \"type-check\": \"tsc -b tsconfig.json\"\n  },\n  \"devDependencies\": {\n    \"@fluentui/eslint-plugin\": \"^1.3.6\",\n    \"@fluentui/scripts-api-extractor\": \"^9.0.0-alpha.1\",\n    \"@fluentui/scripts-babel\": \"^1.0.0\",\n    \"@fluentui/scripts-jest\": \"^1.0.0\",\n    \"@fluentui/scripts-tasks\": \"^1.0.0\",\n    \"@fluentui/scripts-webpack\": \"^1.0.0\",\n    \"@types/react\": \"16.14.0\",\n    \"@types/react-dom\": \"16.9.16\",\n    \"@types/react-window\": \"^1.8.5\",\n    \"react\": \"16.14.0\",\n    \"react-dom\": \"16.14.0\"\n  },\n  \"dependencies\": {\n    \"@fluentui/react-avatar\": \"^9.15.13\",\n    \"@fluentui/react-badge\": \"^9.2.13\",\n    \"@fluentui/react-button\": \"^9.6.1\",\n    \"@fluentui/react-checkbox\": \"^9.1.13\",\n    \"@fluentui/react-combobox\": \"^9.4.3\",\n    \"@fluentui/react-context-selector\": \"^9.1.10\",\n    \"@fluentui/react-dialog\": \"^9.5.13\",\n    \"@fluentui/react-divider\": \"^9.2.12\",\n    \"@fluentui/react-dropdown\": \"^9.3.11\",\n    \"@fluentui/react-field\": \"^9.0.0-alpha.21\",\n    \"@fluentui/react-image\": \"^9.0.12\",\n    \"@fluentui/react-input\": \"^9.7.5\",\n    \"@fluentui/react-label\": \"^9.1.12\",\n    \"@fluentui/react-link\": \"^9.0.12\",\n    \"@fluentui/react-menu\": \"^9.13.0\",\n    \"@fluentui/react-persona\": \"^9.2.14\",\n    \"@fluentui/react-popover\": \"^9.7.2\",\n    \"@fluentui/react-portal\": \"^9.2.11\",\n    \"@fluentui/react-positioning\": \"^9.8.1\",\n    \"@fluentui/react-progress\": \"^9.1.13\",\n    \"@fluentui/react-radio\": \"^9.1.13\",\n    \"@fluentui/react-select\": \"^9.1.15\",\n    \"@fluentui/react-shared-contexts\": \"^9.7.2\",\n    \"@fluentui/react-slider\": \"^9.2.12\",\n    \"@fluentui/react-spinbutton\": \"^9.2.12\",\n    \"@fluentui/react-spinner\": \"^9.1.12\",\n    \"@fluentui/react-switch\": \"^9.1.13\",\n    \"@fluentui/react-tabster\": \"^9.12.1\",\n    \"@fluentui/react-table\": \"^9.14.0\",\n    \"@fluentui/react-tabs\": \"^9.6.1\",\n    \"@fluentui/react-tag\": \"^9.1.6\",\n    \"@fluentui/react-text\": \"^9.3.11\",\n    \"@fluentui/react-textarea\": \"^9.3.5\",\n    \"@fluentui/react-toast\": \"^9.7.1\",\n    \"@fluentui/react-tooltip\": \"^9.4.2\",\n    \"@fluentui/react-utilities\": \"^9.10.1\",\n    \"@fluentui/react-overflow\": \"^9.0.0-beta.5\",\n    \"@fluentui/react-virtualized\": \"^9.0.0-alpha.12\",\n    \"@griffel/react\": \"^1.5.2\",\n    \"@swc/helpers\": \"^0.4.14\",\n    \"tslib\": \"^2.1.0\"\n  },\n  \"peerDependencies\": {\n    \"@types/react\": \">=16.8.0 <19.0.0\",\n    \"@types/react-dom\": \">=16.8.0 <19.0.0\",\n    \"react\": \">=16.8.0 <19.0.0\",\n    \"react-dom\": \">=16.8.0 <19.0.0\"\n  },\n  \"beachball\": {\n    \"disallowedChangeTypes\": [\n      \"major\",\n      \"prerelease\"\n    ]\n  },\n  \"exports\": {\n    \".\": {\n      \"types\": \"./lib/index.d.ts\",\n      \"import\": \"./lib/index.js\",\n      \"require\": \"./lib-commonjs/index.js\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for Version 9.0.0-beta.11\nDESCRIPTION: Shows the changelog entry for version 9.0.0-beta.11 of @fluentui/react-slider, including the release date, compare link, and list of changes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-slider/library/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.0.0-beta.11](https://github.com/microsoft/fluentui/tree/@fluentui/react-slider_v9.0.0-beta.11)\n\nTue, 19 Apr 2022 19:16:53 GMT\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-slider_v9.0.0-beta.10..@fluentui/react-slider_v9.0.0-beta.11)\n\n### Changes\n\n- chore: Update Griffel to latest version ([PR #21976](https://github.com/microsoft/fluentui/pull/21976) by olfedias@microsoft.com)\n- Removing star exports. ([PR #22150](https://github.com/microsoft/fluentui/pull/22150) by Humberto.Morimoto@microsoft.com)\n- add inline slider, update tests and examples ([PR #21813](https://github.com/microsoft/fluentui/pull/21813) by mgodbolt@microsoft.com)\n- Moved Slider to RC, updated exported CSS variable name ([PR #22224](https://github.com/microsoft/fluentui/pull/22224) by mgodbolt@microsoft.com)\n- Bump @fluentui/react-shared-contexts to v9.0.0-rc.5 ([PR #21995](https://github.com/microsoft/fluentui/pull/21995) by beachball)\n- Bump @fluentui/react-tabster to v9.0.0-rc.6 ([PR #21995](https://github.com/microsoft/fluentui/pull/21995) by beachball)\n- Bump @fluentui/react-theme to v9.0.0-rc.5 ([PR #21995](https://github.com/microsoft/fluentui/pull/21995) by beachball)\n- Bump @fluentui/react-utilities to v9.0.0-rc.6 ([PR #21995](https://github.com/microsoft/fluentui/pull/21995) by beachball)\n- Bump @fluentui/react-conformance-griffel to v9.0.0-beta.4 ([PR #21995](https://github.com/microsoft/fluentui/pull/21995) by beachball)\n- Bump @fluentui/react-label to v9.0.0-beta.10 ([PR #21995](https://github.com/microsoft/fluentui/pull/21995) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Import GriffelStyle from @griffel/react and React\nDESCRIPTION: Imports GriffelStyle type from the \"@griffel/react\" library and the React library itself. These imports are fundamental for using griffel styles and React components within the module.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-positioning/etc/react-positioning.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { GriffelStyle } from '@griffel/react';\nimport * as React_2 from 'react';\n```\n\n----------------------------------------\n\nTITLE: Defining PresenceMotion Type in TypeScript\nDESCRIPTION: This snippet defines the PresenceMotion type in TypeScript, which combines 'enter' and 'exit' motions. It's used in createPresenceComponent() to define distinct keyframes and options for entering and exiting transitions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/motion-definition-n-apis.md#2025-04-20_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\ntype PresenceMotion = {\n  enter: AtomMotion;\n  exit: AtomMotion;\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating @beta Access Modifier in TypeScript\nDESCRIPTION: Shows the usage of @beta modifier for preview or experimental APIs, which are only exposed through the /unstable API surface.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/shared/build-system/package-public-api.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @filename package-a/src/unstable/index.ts\n\n/**\n *\n * @beta\n */\nexport function doSomething(): void {}\n\nexport function hello(): void {}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// @filename package-a/dist/unstable.d.ts\nexport function doSomething(): void;\nexport declare function hello(): void;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// @filename package-a/src/index.ts\n\n// 🚨🚨🚨 NOTE THAT THIS IS PROBABLY A MISTAKE BUT TOOLING WILL COVER YOU\n/**\n *\n * @beta\n */\nexport function doSomething(): void {}\n/**\n *\n * @public\n */\nexport function hello(): void {}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// @filename package-a/dist/index.d.ts\nexport declare function hello(): void;\n```\n\n----------------------------------------\n\nTITLE: Bundle Size Testing\nDESCRIPTION: This snippet describes Bundle size testing, prevents regressions in the bundle size. Currently measured using a custom solution under `/packages/bundle-size`.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/testing.md#2025-04-20_snippet_4\n\nLANGUAGE: none\nCODE:\n```\n\"Bundle size\"\n\n```\n\nLANGUAGE: none\nCODE:\n```\nPrevent regressions in the bundle size. Currently measured using our custom solution under `/packages/bundle-size`.\n```\n\n----------------------------------------\n\nTITLE: Removing defaultBehavior from component\nDESCRIPTION: Breaking change that removes the defaultBehavior property.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/CHANGELOG.md#2025-04-20_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\n`defaultBehavior` was removed\n```\n\n----------------------------------------\n\nTITLE: Implementing Style Generation Functions for Details Components\nDESCRIPTION: Provides style generation functions for the DetailsList component suite, including column, header, row, and check styles based on properties and theme.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_39\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport const getDetailsColumnStyles: (props: IDetailsColumnStyleProps) => IDetailsColumnStyles;\n\n// @public (undocumented)\nexport const getDetailsHeaderStyles: (props: IDetailsHeaderStyleProps) => IDetailsHeaderStyles;\n\n// @public (undocumented)\nexport const getDetailsListStyles: (props: IDetailsListStyleProps) => IDetailsListStyles;\n\n// @public (undocumented)\nexport const getDetailsRowCheckStyles: (props: IDetailsRowCheckStyleProps) => IDetailsRowCheckStyles;\n\n// @public (undocumented)\nexport const getDetailsRowStyles: (props: IDetailsRowStyleProps) => IDetailsRowStyles;\n```\n\n----------------------------------------\n\nTITLE: Running the move-packages generator\nDESCRIPTION: This command executes the move-packages generator within the FluentUI workspace plugin. It's used as the base command for moving packages to different folders.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/move-packages/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:move-packages ...\n```\n\n----------------------------------------\n\nTITLE: Bumping package versions in FluentUI React Switch\nDESCRIPTION: This code snippet represents a series of patch updates where the versions of dependent packages are bumped. This includes packages such as @fluentui/react-field, @fluentui/react-jsx-runtime, @fluentui/react-label, @fluentui/react-tabster, and @fluentui/react-utilities. Each bump is associated with a pull request.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-switch/library/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: none\nCODE:\n```\n\"- Bump @fluentui/react-field to v9.1.24 ([PR #29055](https://github.com/microsoft/fluentui/pull/29055) by beachball)\n- Bump @fluentui/react-jsx-runtime to v9.0.5 ([PR #29055](https://github.com/microsoft/fluentui/pull/29055) by beachball)\n- Bump @fluentui/react-label to v9.1.32 ([PR #29055](https://github.com/microsoft/fluentui/pull/29055) by beachball)\n- Bump @fluentui/react-tabster to v9.12.7 ([PR #29055](https://github.com/microsoft/fluentui/pull/29055) by beachball)\n- Bump @fluentui/react-utilities to v9.13.2 ([PR #29055](https://github.com/microsoft/fluentui/pull/29055) by beachball)\"\n```\n\n----------------------------------------\n\nTITLE: Creating Package and Initial Check-in for Codemods\nDESCRIPTION: This snippet discusses the creation of a package for codemods in the Fluent UI project. It indicates the initial check-in of code meant to facilitate code modifications in the UI library.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/codemods/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n- Codemods: Creating package and initial check-in. ([PR #13884](https://github.com/microsoft/fluentui/pull/13884) by joschect@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Update Scale Range with Adjusted Margin\nDESCRIPTION: Updates the range of the xBarScale to reflect the adjusted domain margin.  This ensures that the bars are positioned correctly after any centering or width adjustments.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/docs/implementing-2-to-1-spacing.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst xBarScale = d3ScaleBand()\n    .domain(this._xAxisLabels)\n    .range([this.margins.left! + this._domainMargin, containerWidth - this.margins.right! - this._domainMargin])\n    .paddingInner(2 / 3);\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.95.0\nDESCRIPTION: This entry points to the update for @fluentui/react reaching version 8.95.0, standardizing the usage of the library across projects.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/azure-themes/CHANGELOG.md#2025-04-20_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.95.0 ([PR #24792](https://github.com/microsoft/fluentui/pull/24792) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react-badge to version v9.0.0-rc.6\nDESCRIPTION: This snippet details the update of the @fluentui/react-badge component to version v9.0.0-rc.6, contributing to the overall upgrade of the Fluent UI library.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/vr-tests-react-components/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react-badge to v9.0.0-rc.6 ([PR #21995](https://github.com/microsoft/fluentui/pull/21995) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Update Adjusted Bar Width\nDESCRIPTION: Stores the adjusted bar width for use elsewhere within the component. This allows the component to use the updated width when rendering bars.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/docs/implementing-2-to-1-spacing.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nthis._barWidth = barWidth;\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.99.2\nDESCRIPTION: This snippet captures the update for the @fluentui/react library to version 8.99.2, as part of regular maintenance and enhancements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/azure-themes/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.99.2 ([PR #25331](https://github.com/microsoft/fluentui/pull/25331) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react to v8.41.3\nDESCRIPTION: This patch updates the @fluentui/react package to version 8.41.3, incorporating various improvements. This change can be found in Pull Request #20441.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/ts-minbar-test-react/CHANGELOG.md#2025-04-20_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.41.3 ([PR #20441](https://github.com/microsoft/fluentui/pull/20441) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Exporting Radio Component in TypeScript\nDESCRIPTION: This snippet exports a forward reference component for a Radio button using React and Fluent UI utilities. It allows for integration with React's context API and slot system, enabling developers to customize the behavior and appearance of radio buttons in their application.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-radio/library/etc/react-radio.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"react\" />\n\nimport type { ComponentProps } from '@fluentui/react-utilities';\nimport type { ComponentState } from '@fluentui/react-utilities';\nimport type { ForwardRefComponent } from '@fluentui/react-utilities';\nimport { Label } from '@fluentui/react-label';\nimport * as React_2 from 'react';\nimport type { Slot } from '@fluentui/react-utilities';\nimport type { SlotClassNames } from '@fluentui/react-utilities';\n\n// @public\nexport const Radio: ForwardRefComponent<RadioProps>;\n\n// @public (undocumented)\nexport const radioClassNames: SlotClassNames<RadioSlots>;\n\n// @public\nexport const RadioGroup: ForwardRefComponent<RadioGroupProps>;\n\n// @public (undocumented)\nexport const radioGroupClassNames: SlotClassNames<RadioGroupSlots>;\n```\n\n----------------------------------------\n\nTITLE: Version 0.2.37 Release Notes\nDESCRIPTION: Changelog entry documenting patches and dependency updates for version 0.2.37\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-timepicker-compat/library/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.2.37](https://github.com/microsoft/fluentui/tree/@fluentui/react-timepicker-compat_v0.2.37)\n\nMon, 11 Nov 2024 10:01:01 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-timepicker-compat_v0.2.36..@fluentui/react-timepicker-compat_v0.2.37)\n\n### Patches\n\n- chore: replace npm-scripts and just-scrtips with nx inferred tasks\n```\n\n----------------------------------------\n\nTITLE: Media Object Component Implementation Example\nDESCRIPTION: Example implementation of a media object component using FluentUI components and recipe hooks. Shows how to combine Text and Image components with custom styling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/components/recipes.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text } from '@fluentui/react-text';\nimport { Image } from '@fluentui/react-image';\nimport { useMediaObjectClassNames } from '@fluentui/react-recipe-hooks';\n\nconst MyMediaObject = () => {\n  const mediaObjectClassNames = useMediaObjectClassNames({ labelPosition: 'below' });\n\n  return (\n    <div className={mediaObjectClassNames.mediaObject}>\n      <Image\n        className={mediaObjectClassNames.media}\n        block\n        src=\"https://fabricweb.azureedge.net/fabric-website/placeholders/100x100.png\"\n      />\n      <Text className={mediaObjectClassNames.text}>Lorem Ipsum</Text>\n      <Text className={mediaObjectClassNames.text}>Dolorem</Text>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-shared-contexts version\nDESCRIPTION: This patch updates the version of the `@fluentui/react-shared-contexts` dependency.  Bumping this package ensures that the `@fluentui/react-badge` component uses the latest features and bug fixes available in the shared contexts package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nBump @fluentui/react-shared-contexts to v9.22.0 ([PR #33927](https://github.com/microsoft/fluentui/pull/33927) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Importing Fluent UI React Components and Utilities\nDESCRIPTION: This snippet demonstrates the import of various Fluent UI React components, types, and utilities from different packages within the @fluentui namespace. It includes imports for Carousel, Checkbox, ColorPicker, Combobox, Button, Badge, Table, and DataGrid components, along with their associated props, states, and styling utilities.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/etc/react-components.api.md#2025-04-20_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { carouselButtonClassNames } from '@fluentui/react-carousel';\nimport { CarouselButtonProps } from '@fluentui/react-carousel';\nimport { CarouselButtonSlots } from '@fluentui/react-carousel';\nimport { CarouselButtonState } from '@fluentui/react-carousel';\nimport { CarouselCard } from '@fluentui/react-carousel';\nimport { carouselCardClassNames } from '@fluentui/react-carousel';\nimport { CarouselCardProps } from '@fluentui/react-carousel';\nimport { CarouselCardSlots } from '@fluentui/react-carousel';\nimport { CarouselCardState } from '@fluentui/react-carousel';\nimport { carouselClassNames } from '@fluentui/react-carousel';\nimport { carouselContextDefaultValue } from '@fluentui/react-carousel';\nimport { CarouselContextValue } from '@fluentui/react-carousel';\nimport { CarouselContextValues } from '@fluentui/react-carousel';\nimport { CarouselIndexChangeData } from '@fluentui/react-carousel';\nimport { CarouselNav } from '@fluentui/react-carousel';\nimport { CarouselNavButton } from '@fluentui/react-carousel';\nimport { carouselNavButtonClassNames } from '@fluentui/react-carousel';\nimport { CarouselNavButtonProps } from '@fluentui/react-carousel';\nimport { CarouselNavButtonSlots } from '@fluentui/react-carousel';\nimport { CarouselNavButtonState } from '@fluentui/react-carousel';\nimport { carouselNavClassNames } from '@fluentui/react-carousel';\nimport { CarouselNavContainer } from '@fluentui/react-carousel';\nimport { carouselNavContainerClassNames } from '@fluentui/react-carousel';\nimport { CarouselNavContainerProps } from '@fluentui/react-carousel';\nimport { CarouselNavContainerSlots } from '@fluentui/react-carousel';\nimport { CarouselNavContainerState } from '@fluentui/react-carousel';\nimport { CarouselNavImageButton } from '@fluentui/react-carousel';\nimport { carouselNavImageButtonClassNames } from '@fluentui/react-carousel';\nimport { CarouselNavImageButtonProps } from '@fluentui/react-carousel';\nimport { CarouselNavImageButtonSlots } from '@fluentui/react-carousel';\nimport { CarouselNavImageButtonState } from '@fluentui/react-carousel';\nimport { CarouselNavProps } from '@fluentui/react-carousel';\nimport { CarouselNavSlots } from '@fluentui/react-carousel';\nimport { CarouselNavState } from '@fluentui/react-carousel';\nimport { CarouselProps } from '@fluentui/react-carousel';\nimport { CarouselProvider } from '@fluentui/react-carousel';\nimport { CarouselSlider } from '@fluentui/react-carousel';\nimport { carouselSliderClassNames } from '@fluentui/react-carousel';\nimport { CarouselSliderProps } from '@fluentui/react-carousel';\nimport { CarouselSliderSlots } from '@fluentui/react-carousel';\nimport { CarouselSliderState } from '@fluentui/react-carousel';\nimport { CarouselSlots } from '@fluentui/react-carousel';\nimport { CarouselState } from '@fluentui/react-carousel';\nimport { CarouselViewport } from '@fluentui/react-carousel';\nimport { carouselViewportClassNames } from '@fluentui/react-carousel';\nimport { CarouselViewportProps } from '@fluentui/react-carousel';\nimport { CarouselViewportSlots } from '@fluentui/react-carousel';\nimport { CarouselViewportState } from '@fluentui/react-carousel';\nimport { CellRenderFunction } from '@fluentui/react-table';\nimport { Checkbox } from '@fluentui/react-checkbox';\nimport { checkboxClassNames } from '@fluentui/react-checkbox';\nimport { CheckboxOnChangeData } from '@fluentui/react-checkbox';\nimport { CheckboxProps } from '@fluentui/react-checkbox';\nimport { CheckboxSlots } from '@fluentui/react-checkbox';\nimport { CheckboxState } from '@fluentui/react-checkbox';\nimport { ColorArea } from '@fluentui/react-color-picker';\nimport { colorAreaClassNames } from '@fluentui/react-color-picker';\nimport { ColorAreaProps } from '@fluentui/react-color-picker';\nimport { ColorAreaSlots } from '@fluentui/react-color-picker';\nimport { ColorAreaState } from '@fluentui/react-color-picker';\nimport { ColorPaletteTokens } from '@fluentui/react-theme';\nimport { ColorPicker } from '@fluentui/react-color-picker';\nimport { colorPickerClassNames } from '@fluentui/react-color-picker';\nimport { ColorPickerProps } from '@fluentui/react-color-picker';\nimport { ColorPickerSlots } from '@fluentui/react-color-picker';\nimport { ColorPickerState } from '@fluentui/react-color-picker';\nimport { ColorSlider } from '@fluentui/react-color-picker';\nimport { colorSliderClassNames } from '@fluentui/react-color-picker';\nimport { ColorSliderProps } from '@fluentui/react-color-picker';\nimport { ColorSliderSlots } from '@fluentui/react-color-picker';\nimport { ColorSliderState } from '@fluentui/react-color-picker';\nimport { ColorSwatch } from '@fluentui/react-swatch-picker';\nimport { colorSwatchClassNames } from '@fluentui/react-swatch-picker';\nimport { ColorSwatchProps } from '@fluentui/react-swatch-picker';\nimport { ColorSwatchSlots } from '@fluentui/react-swatch-picker';\nimport { ColorSwatchState } from '@fluentui/react-swatch-picker';\nimport { ColorTokens } from '@fluentui/react-theme';\nimport { ColumnIdContextProvider } from '@fluentui/react-table';\nimport { Combobox } from '@fluentui/react-combobox';\nimport { comboboxClassNames } from '@fluentui/react-combobox';\nimport { ComboboxContextValue } from '@fluentui/react-combobox';\nimport { ComboboxContextValues } from '@fluentui/react-combobox';\nimport { ComboboxOpenChangeData } from '@fluentui/react-combobox';\nimport { ComboboxOpenEvents } from '@fluentui/react-combobox';\nimport { ComboboxProps } from '@fluentui/react-combobox';\nimport { ComboboxProvider } from '@fluentui/react-combobox';\nimport { ComboboxSlots } from '@fluentui/react-combobox';\nimport { ComboboxState } from '@fluentui/react-combobox';\nimport { ComponentProps } from '@fluentui/react-utilities';\nimport { ComponentState } from '@fluentui/react-utilities';\nimport { CompoundButton } from '@fluentui/react-button';\nimport { compoundButtonClassNames } from '@fluentui/react-button';\nimport { CompoundButtonProps } from '@fluentui/react-button';\nimport { CompoundButtonSlots } from '@fluentui/react-button';\nimport { CompoundButtonState } from '@fluentui/react-button';\nimport { CounterBadge } from '@fluentui/react-badge';\nimport { counterBadgeClassNames } from '@fluentui/react-badge';\nimport { CounterBadgeProps } from '@fluentui/react-badge';\nimport { CounterBadgeState } from '@fluentui/react-badge';\nimport { createCSSRuleFromTheme } from '@fluentui/react-provider';\nimport { createCustomFocusIndicatorStyle } from '@fluentui/react-tabster';\nimport { CreateCustomFocusIndicatorStyleOptions } from '@fluentui/react-tabster';\nimport { createDarkTheme } from '@fluentui/react-theme';\nimport { createDOMRenderer } from '@griffel/react';\nimport { createFocusOutlineStyle } from '@fluentui/react-tabster';\nimport { CreateFocusOutlineStyleOptions } from '@fluentui/react-tabster';\nimport { createHighContrastTheme } from '@fluentui/react-theme';\nimport { createLightTheme } from '@fluentui/react-theme';\nimport { createMotionComponent } from '@fluentui/react-motion';\nimport { createPresenceComponent } from '@fluentui/react-motion';\nimport { createPresenceComponentVariant } from '@fluentui/react-motion';\nimport { createTableColumn } from '@fluentui/react-table';\nimport { CreateTableColumnOptions } from '@fluentui/react-table';\nimport { createTeamsDarkTheme } from '@fluentui/react-theme';\nimport { CurveTokens } from '@fluentui/react-theme';\nimport { DATA_OVERFLOW_DIVIDER } from '@fluentui/react-overflow';\nimport { DATA_OVERFLOW_ITEM } from '@fluentui/react-overflow';\nimport { DATA_OVERFLOW_MENU } from '@fluentui/react-overflow';\nimport { DATA_OVERFLOWING } from '@fluentui/react-overflow';\nimport { DataGrid } from '@fluentui/react-table';\nimport { DataGridBody } from '@fluentui/react-table';\nimport { dataGridBodyClassNames } from '@fluentui/react-table';\nimport { DataGridBodyProps } from '@fluentui/react-table';\nimport { DataGridBodySlots } from '@fluentui/react-table';\nimport { DataGridBodyState } from '@fluentui/react-table';\nimport { DataGridCell } from '@fluentui/react-table';\nimport { dataGridCellClassNames } from '@fluentui/react-table';\nimport { DataGridCellFocusMode } from '@fluentui/react-table';\nimport { DataGridCellProps } from '@fluentui/react-table';\nimport { DataGridCellSlots } from '@fluentui/react-table';\nimport { DataGridCellState } from '@fluentui/react-table';\nimport { dataGridClassNames } from '@fluentui/react-table';\nimport { DataGridContextProvider } from '@fluentui/react-table';\nimport { DataGridContextValue } from '@fluentui/react-table';\nimport { DataGridContextValues } from '@fluentui/react-table';\nimport { DataGridFocusMode } from '@fluentui/react-table';\nimport { DataGridHeader } from '@fluentui/react-table';\nimport { DataGridHeaderCell } from '@fluentui/react-table';\nimport { dataGridHeaderCellClassNames } from '@fluentui/react-table';\nimport { DataGridHeaderCellProps } from '@fluentui/react-table';\nimport { DataGridHeaderCellSlots } from '@fluentui/react-table';\nimport { DataGridHeaderCellState } from '@fluentui/react-table';\nimport { dataGridHeaderClassNames } from '@fluentui/react-table';\nimport { DataGridHeaderProps } from '@fluentui/react-table';\nimport { DataGridHeaderSlots } from '@fluentui/react-table';\nimport { DataGridHeaderState } from '@fluentui/react-table';\nimport { DataGridProps } from '@fluentui/react-table';\nimport { DataGridRow } from '@fluentui/react-table';\nimport { dataGridRowClassNames } from '@fluentui/react-table';\nimport { DataGridRowProps } from '@fluentui/react-table';\nimport { DataGridRowSlots } from '@fluentui/react-table';\nimport { DataGridRowState } from '@fluentui/react-table';\nimport { DataGridSelectionCell } from '@fluentui/react-table';\nimport { dataGridSelectionCellClassNames } from '@fluentui/react-table';\nimport { DataGridSelectionCellProps } from '@fluentui/react-table';\nimport { DataGridSelectionCellSlots } from '@fluentui/react-table';\nimport { DataGridSelectionCellState } from '@fluentui/react-table';\nimport { DataGridSlots } from '@fluentui/react-table';\n```\n\n----------------------------------------\n\nTITLE: Importing a pre-defined Fluent UI component\nDESCRIPTION: Shows how to import a pre-defined Fluent UI component (button) directly for use in an application.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/_docs/developer/quick-start.stories.mdx#2025-04-20_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport '@fluentui/web-components/button.js';\n```\n\n----------------------------------------\n\nTITLE: Importing FluentUI Components and Utilities\nDESCRIPTION: This code snippet demonstrates the import of various types, functions, and constants from FluentUI packages. It includes imports for styling, icons, utilities, date handling, and theme customization.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { IComponentStyles } from '@fluentui/foundation-legacy';\nimport { IconFontSizes } from '@fluentui/style-utilities';\nimport { IconNames } from '@fluentui/font-icons-mdl2';\nimport { ICSPSettings } from '@fluentui/style-utilities';\nimport { ICssInput } from '@fluentui/utilities';\nimport type { ICSSPixelUnitRule } from '@fluentui/merge-styles';\nimport type { ICSSRule } from '@fluentui/merge-styles';\nimport { ICustomizableProps } from '@fluentui/utilities';\nimport { ICustomizations } from '@fluentui/utilities';\nimport { ICustomizerContext } from '@fluentui/utilities';\nimport { ICustomizerProps } from '@fluentui/utilities';\nimport { IDateFormatting } from '@fluentui/date-time-utilities';\nimport type { IDayGridOptions } from '@fluentui/date-time-utilities';\n// ... (additional imports)\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-docsite-components to v8.7.26\nDESCRIPTION: This patch updates '@fluentui/react-docsite-components' to version 8.7.26, further polishing the documentation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/theming-designer/CHANGELOG.md#2025-04-20_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react-docsite-components to v8.7.26 ([PR #23445](https://github.com/microsoft/fluentui/pull/23445) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components and Shadow Theme Stories\nDESCRIPTION: Imports necessary components from Storybook and the Shadows component from ThemeShadows.stories file to create a documentation page for Fluent UI shadow themes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-theme/stories/src/Theme/shadows/index.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Canvas } from '@storybook/addon-docs';\nimport { Shadows } from './ThemeShadows.stories';\n```\n\n----------------------------------------\n\nTITLE: Defining useListStyles_unstable Hook for FluentUI in TypeScript\nDESCRIPTION: Exports an unstable hook that applies styles to a list component based on its state. Takes a list state object and returns the same state object with applied styles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-migration-v0-v9/library/etc/react-migration-v0-v9.api.md#2025-04-20_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport const useListStyles_unstable: (state: ListState) => ListState;\n```\n\n----------------------------------------\n\nTITLE: Unit Testing\nDESCRIPTION: This snippet describes Unit tests focus on testing behavior or functionality, guaranteeing outcomes like styling, behavior, or functionality changes. They should focus on behavior when possible, mainly on expected code results, minimizing mocking and integrating into integration testing. These tests are defined in `*.test.ts[x]` files.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/testing.md#2025-04-20_snippet_2\n\nLANGUAGE: none\nCODE:\n```\n\"Unit\"\n\n```\n\nLANGUAGE: none\nCODE:\n```\nFocus on testing the behaviour or functionality. We should use them to guarantee the outcome, whether this is a styling, behaviour or functionality change.\nWe should try to focus on behaviour, when possible, but mainly on the expected results for the code.\nWe also try to mock as little as possible and join in integration testing.\n\n```\n\nLANGUAGE: none\nCODE:\n```\nThese are all the additional unit tests defined in your `*.test.ts[x]` file.\n```\n\n----------------------------------------\n\nTITLE: Dry Run Cypress Component Configuration Generator\nDESCRIPTION: This command performs a dry run of the Cypress component configuration generator. It shows the files that would be generated without actually writing them to disk. This allows you to preview the changes before applying them.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/cypress-component-configuration/README.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n\"yarn nx g @fluentui/workspace-plugin:cypress-component-configuration --dry-run\"\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook and Color Stories for Fluent UI Migration Guide\nDESCRIPTION: This code snippet imports necessary components from Storybook and various color-related stories for the Fluent UI v8 to v9 migration guide. It sets up the structure for displaying color mapping information in a Storybook documentation page.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/ThemeColors/ColorMapping.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Preview, Story } from '@storybook/addon-docs';\nimport { NeutralColors } from './NeutralColors.stories';\nimport { NamedColors } from './NamedColors.stories';\nimport { BrandColors } from './BrandColors.stories';\nimport { SemanticColors } from './SemanticColors.stories';\n\n<Meta title=\"Concepts/Migration/from v8/Color Mapping\" />\n```\n\n----------------------------------------\n\nTITLE: Migrating Multiple Header Levels Using Typography Components in React\nDESCRIPTION: Demonstrates how to replace multiple Header components with different heading levels using the appropriate typography components from FluentUI v9.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Header.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Header } from '@fluentui/react-northstar';\nconst Component = () => (\n  <div>\n    <Header as=\"h1\" content=\"First Header\" />\n    <Header as=\"h2\" content=\"Second Header\" />\n    <Header as=\"h3\" content=\"Third Header\" />\n    <Header as=\"h4\" content=\"Fourth Header\" />\n    <Header as=\"h5\" content=\"Fifth Header\" />\n    <Header as=\"h6\" content=\"Sixth Header\" />\n  </div>\n);\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Title1, Title2, Title3, Headline, Subheadline, Body } from '@fluentui/react-components';\nconst Component = () => (\n  <div>\n    <Title1 as=\"h1\">First Header</Title1>\n    <Title2 as=\"h2\">Second Header</Title2>\n    <Title3 as=\"h3\">Third Header</Title3>\n    <Headline as=\"h4\">Fourth Header</Headline>\n    <Subheadline as=\"h5\">Fifth Header</Subheadline>\n    <Body as=\"h6\">Sixth Header</Body>\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Migrating Focus-on-Mount Behavior in FluentUI Grid\nDESCRIPTION: Demonstrates how to migrate a Grid component with auto-focus behavior from v0 to v9 using react-tabster and custom hooks for focus management.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/migrate-custom-accessibility.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Grid, gridBehavior } from '@fluentui/react-northstar';\n\nconst autoFocusGridBehavior = () => {\n  const behavior: AccessibilityDefinition = gridBehavior();\n  if (behavior.focusZone && behavior.focusZone.props) {\n    behavior.focusZone.props.shouldFocusOnMount = true;\n  }\n  return behavior;\n};\n\nconst Component = () => (\n  <Grid accessibility={autoFocusGridBehavior} role=\"menu\">\n    <Button role=\"menuitem\" content=\"First\" />\n    ...\n  </Grid>\n);\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeStyles } from '@fluentui/react-components';\nimport { useTabsterAttributes } from '@fluentui/react-tabster';\nimport { useFocusFinders } from '@fluentui/react-tabster';\n\nconst useStyles = makeStyles({\n  grid: {\n    display: 'grid',\n    justifyContent: 'space-evenly',\n  },\n});\n\nconst arrowKeyNavigationAttributes = useTabsterAttributes({\n  mover: {\n    direction: 3, // grid\n  },\n});\n\nconst Component = () => {\n  const { findFirstFocusable } = useFocusFinders();\n  const gridRef = React.useRef<HTMLElement>(null);\n  const classes = useStyles();\n\n  React.useEffect(() => {\n    if (gridRef.current) {\n      const firstFocusable = findFirstFocusable(gridRef.current);\n      firstFocusable?.focus();\n    }\n  }, [findFirstFocusable, gridRef]);\n\n  return (\n    <div className={classes.grid} {...arrowKeyNavigationAttributes} role=\"menu\" ref={gridRef}>\n      <Button role=\"menuitem\">First</Button>\n      ...\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Nx Monorepo Dependency Installation\nDESCRIPTION: Install project dependencies and deduplicate packages using Yarn. Essential first step for setting up the development environment.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/command-cheat-sheet.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn # installs everything. It fixes many things.\nyarn run dedupe # dedupes dependencies - necessary to run after any kind of package bump/changes\n```\n\n----------------------------------------\n\nTITLE: Defining IContextualMenuItemRenderFunctions Interface\nDESCRIPTION: Defines the `IContextualMenuItemRenderFunctions` interface, which specifies the functions used to render the content of a ContextualMenuItem.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_84\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IContextualMenuItemRenderFunctions {\n```\n\n----------------------------------------\n\nTITLE: Defining ScrollablePaneBase Component Class\nDESCRIPTION: The base implementation of ScrollablePane component that provides scrollable container functionality with sticky headers. It manages sticky elements, scrolling behavior, and layout updates.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_247\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport class ScrollablePaneBase extends React_2.Component<IScrollablePaneProps, IScrollablePaneState> implements IScrollablePane {\n    constructor(props: IScrollablePaneProps);\n    // (undocumented)\n    addSticky: (sticky: Sticky) => void;\n    // (undocumented)\n    componentDidMount(): void;\n    // (undocumented)\n    componentDidUpdate(prevProps: IScrollablePaneProps, prevState: IScrollablePaneState): void;\n    // (undocumented)\n    componentWillUnmount(): void;\n    // (undocumented)\n    get contentContainer(): HTMLDivElement | null;\n    // (undocumented)\n    static contextType: React_2.Context<WindowProviderProps>;\n    // (undocumented)\n    forceLayoutUpdate(): void;\n    // (undocumented)\n    getScrollPosition: () => number;\n    // (undocumented)\n    notifySubscribers: () => void;\n    // (undocumented)\n    removeSticky: (sticky: Sticky) => void;\n    // (undocumented)\n    render(): JSX.Element;\n    // (undocumented)\n    get root(): HTMLDivElement | null;\n    // (undocumented)\n    setStickiesDistanceFromTop(): void;\n    // (undocumented)\n    shouldComponentUpdate(nextProps: IScrollablePaneProps, nextState: IScrollablePaneState): boolean;\n    // (undocumented)\n    sortSticky: (sticky: Sticky, sortAgain?: boolean) => void;\n    // (undocumented)\n    get stickyAbove(): HTMLDivElement | null;\n    // (undocumented)\n    get stickyBelow(): HTMLDivElement | null;\n    // (undocumented)\n    subscribe: (handler: Function) => void;\n    // (undocumented)\n    syncScrollSticky: (sticky: Sticky) => void;\n    // (undocumented)\n    unsubscribe: (handler: Function) => void;\n    // (undocumented)\n    updateStickyRefHeights: () => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Package Structure\nDESCRIPTION: Lists proposed separate field packages in a potential alternative organization approach.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/field-package-layout.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- `@fluentui/react-checkbox-field`\n- `@fluentui/react-combobox-field`\n- `@fluentui/react-input-field`\n- `@fluentui/react-progress-field`\n- `@fluentui/react-radio-field`\n- `@fluentui/react-select-field`\n- `@fluentui/react-slider-field`\n- `@fluentui/react-spinbutton-field`\n- `@fluentui/react-switch-field`\n- `@fluentui/react-textarea-field`\n```\n\n----------------------------------------\n\nTITLE: SpinButton Custom Suffix v8\nDESCRIPTION: Demonstrates how to use a custom suffix with the SpinButton component in Fluent UI v8. It includes functions for validating input, incrementing, and decrementing the value with the suffix. It shows how to use `onValidate`, `onIncrement`, and `onDecrement` props.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/SpinButton.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\nimport { SpinButton, ISpinButtonStyles } from '@fluentui/react/lib/SpinButton';\n\nconst suffix = ' cm';\nconst min = 0;\nconst max = 100;\n\nconst styles: Partial<ISpinButtonStyles> = { spinButtonWrapper: { width: 300 } };\n\n/** Remove the suffix or any other text after the numbers, or return undefined if not a number */\nconst getNumericPart = (value: string): number | undefined => {\n  const valueRegex = /^(\\d+(\\.\\d+)?).*/;\n  if (valueRegex.test(value)) {\n    const numericValue = Number(value.replace(valueRegex, '$1'));\n    return isNaN(numericValue) ? undefined : numericValue;\n  }\n  return undefined;\n};\n\n/** Increment the value (or return nothing to keep the previous value if invalid) */\nconst onIncrement = (value: string, event?: React.SyntheticEvent<HTMLElement>): string | void => {\n  const numericValue = getNumericPart(value);\n  if (numericValue !== undefined) {\n    return String(Math.min(numericValue + 2, max)) + suffix;\n  }\n};\n\n/** Decrement the value (or return nothing to keep the previous value if invalid) */\nconst onDecrement = (value: string, event?: React.SyntheticEvent<HTMLElement>): string | void => {\n  const numericValue = getNumericPart(value);\n  if (numericValue !== undefined) {\n    return String(Math.max(numericValue - 2, min)) + suffix;\n  }\n};\n\n/**\n * Clamp the value within the valid range (or return nothing to keep the previous value\n * if there's not valid numeric input)\n */\nconst onValidate = (value: string, event?: React.SyntheticEvent<HTMLElement>): string | void => {\n  let numericValue = getNumericPart(value);\n  if (numericValue !== undefined) {\n    numericValue = Math.min(numericValue, max);\n    numericValue = Math.max(numericValue, min);\n    return String(numericValue) + suffix;\n  }\n};\n\n/** This will be called after each change */\nconst onChange = (event: React.SyntheticEvent<HTMLElement>, value?: string): void => {\n  console.log('Value changed to ' + value);\n};\n\nconst SpinButtonV8CustomSuffixBasicExample: React.FunctionComponent = () => {\n  return (\n    <SpinButton\n      label=\"SpinButton with Custom Suffix\"\n      defaultValue={'7' + suffix}\n      min={min}\n      max={max}\n      onValidate={onValidate}\n      onIncrement={onIncrement}\n      onDecrement={onDecrement}\n      onChange={onChange}\n      incrementButtonAriaLabel=\"Increase value by 2\"\n      decrementButtonAriaLabel=\"Decrease value by 2\"\n      styles={styles}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Brands Type in TypeScript\nDESCRIPTION: This snippet defines a Brands type as a union of numeric literals, providing a uniform way to represent brand levels in the application.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/tokens/etc/tokens.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type Brands = 10 | 20 | 30 | 40 | 50 | 60 | 70 | 80 | 90 | 100 | 110 | 120 | 130 | 140 | 150 | 160;\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react-shared-contexts to version v9.0.0-rc.5\nDESCRIPTION: This snippet describes the bump of the @fluentui/react-shared-contexts to version v9.0.0-rc.5, part of a larger effort to ensure all Fluent UI components are consistently updated.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/vr-tests-react-components/CHANGELOG.md#2025-04-20_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react-shared-contexts to v9.0.0-rc.5 ([PR #21995](https://github.com/microsoft/fluentui/pull/21995) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Incorrect shorthands padding example\nDESCRIPTION: Shows an example of incorrect usage of shorthand functions. It illustrates how passing all padding values as single argument produces unintended results where each padding property receives combined values.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/styles-handbook.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// ❌ Will produce wrong results:\n//   {\n//     paddingBottom: \"2px 4px\"\n//     paddingLeft: \"2px 4px\"\n//     paddingRight: \"2px 4px\"\n//     paddingTop: \"2px 4px\"\n//   }\nshorthands.padding('2px 4px');\n// ✅ Correct output:\n//   {\n//     paddingBottom: \"2px\"\n//     paddingLeft: \"4px\"\n//     paddingRight: \"4px\"\n//     paddingTop: \"2px\"\n//   }\nshorthands.padding('2px', '4px');\n```\n\n----------------------------------------\n\nTITLE: Defining TreeChart Component Props Interface\nDESCRIPTION: Interface for the TreeChart component props. It includes the tree data, composition type, dimensions, styling, and theming options. These props control the rendering behavior and appearance of the tree visualization.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/src/components/TreeChart/TreeChart.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ITreeProps {\n  treeData: ITreeChartDataPoint;\n  composition?: number | undefined;\n  width?: number;\n  height?: number;\n  styles?: IStyleFunctionOrObject<ITreeStyleProps, ITreeStyles>;\n  className?: string;\n  theme?: ITheme;\n}\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/eslint-plugin to version 1.3.3\nDESCRIPTION: This patch updates the @fluentui/eslint-plugin package to version 1.3.3 to ensure adherence to the latest linting rules and practices. This is critical for maintaining code quality across the project.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/theming-designer/CHANGELOG.md#2025-04-20_snippet_44\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/eslint-plugin to v1.3.3 ([PR #19169](https://github.com/microsoft/fluentui/pull/19169) by behowell@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Migrating nowrap property to wrap in FluentUI v9\nDESCRIPTION: Example showing how to achieve the same result as the nowrap property from v8 by using the wrap property set to false in v9.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-text/library/docs/MIGRATION.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Text wrap={false}>Not wrapped</Text>\n```\n\n----------------------------------------\n\nTITLE: Bumping package versions in FluentUI React Switch\nDESCRIPTION: This code snippet represents a series of patch updates where the versions of dependent packages are bumped. This includes packages such as @fluentui/react-field, @fluentui/react-jsx-runtime, @fluentui/react-label, @fluentui/react-tabster, and @fluentui/react-utilities. Each bump is associated with a pull request.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-switch/library/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: none\nCODE:\n```\n\"- Bump @fluentui/react-field to v9.1.25 ([PR #29080](https://github.com/microsoft/fluentui/pull/29080) by beachball)\n- Bump @fluentui/react-jsx-runtime to v9.0.6 ([PR #29080](https://github.com/microsoft/fluentui/pull/29080) by beachball)\n- Bump @fluentui/react-label to v9.1.33 ([PR #29080](https://github.com/microsoft/fluentui/pull/29080) by beachball)\n- Bump @fluentui/react-tabster to v9.12.8 ([PR #29080](https://github.com/microsoft/fluentui/pull/29080) by beachball)\n- Bump @fluentui/react-utilities to v9.13.3 ([PR #29080](https://github.com/microsoft/fluentui/pull/29080) by beachball)\"\n```\n\n----------------------------------------\n\nTITLE: Rating Component Interfaces\nDESCRIPTION: Interfaces for the Rating component including props, styles and star rendering\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_167\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IRating {\n    rating: number;\n}\n\nexport interface IRatingProps extends React_2.HTMLAttributes<HTMLDivElement>, React_2.RefAttributes<HTMLDivElement> {\n    allowZeroStars?: boolean;\n    ariaLabel?: string;\n    ariaLabelFormat?: string;\n    componentRef?: IRefObject<IRating>;\n    defaultRating?: number;\n    disabled?: boolean;\n    getAriaLabel?: (rating: number, max: number) => string;\n    icon?: string;\n    max?: number;\n    min?: number;\n    onChange?: (event: React_2.FormEvent<HTMLElement>, rating?: number) => void;\n    onRenderStar?: IRenderFunction<IRatingStarProps>;\n    rating?: number;\n    readOnly?: boolean;\n    size?: RatingSize;\n    styles?: IStyleFunctionOrObject<IRatingStyleProps, IRatingStyles>;\n    theme?: ITheme;\n    unselectedIcon?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying AvatarView Examples with Theme Toggle in Markdown\nDESCRIPTION: This snippet demonstrates how to showcase AvatarView examples with a theme switcher using markdown and custom HTML elements. It includes examples for initials, profile pictures, and group icons in both light and dark modes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/AvatarPage/docs/ios/AvatarOverview.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<DisplayToggle onText=\"Dark\" offText=\"Light\" label=\"Theme Switcher\">\n### Initials\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_avatar_02_initials.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_avatar_02_initials_dark.png?text=DarkMode\" />\n\n### Profile\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_avatar_01_profilepicture_light.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_avatar_01_profilepicture_dark.png?text=DarkMode\" />\n\n### Group\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_avatar_03_groups_light.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_avatar_03_groups_dark.png?text=DarkMode\" />\n\n</DisplayToggle>\n```\n\n----------------------------------------\n\nTITLE: Rendering Tooltip as a Label in DOM\nDESCRIPTION: Example of how a label tooltip is rendered in the DOM when not visible. The tooltip content is used as the aria-label of the control.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tooltip/library/docs/Spec.md#2025-04-20_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <!-- App root -->\n  <div>\n    <button aria-label=\"Example\" onPointerEnter=\"{...}\" onPointerLeave=\"{...}\" onFocus=\"{...}\" onBlur=\"{...}\">\n      <svg>...</svg>\n    </button>\n  </div>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Utilization of Tag Properties and State in TypeScript\nDESCRIPTION: This snippet outlines various types related to tag state management including `TagState`, `TagGroupState`, and methods to manage the display and behavior of the tags within grouped contexts. It also highlights the necessary props that define the appearance and functionality of tags in different scenarios.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tags/library/etc/react-tags.api.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport type TagState = ComponentState<TagSlots> & Required<Pick<TagProps, 'appearance' | 'disabled' | 'dismissible' | 'selected' | 'shape' | 'size'>> & UseTagAvatarContextValuesOptions;\n\n// @public (undocumented)\nexport type TagValue = string;\n\n// @public\nexport const useInteractionTag_unstable: (props: InteractionTagProps, ref: React_2.Ref<HTMLDivElement>) => InteractionTagState;\n\n// @public (undocumented)\nexport function useInteractionTagContextValues_unstable(state: InteractionTagState): InteractionTagContextValues;\n\n// @public\nexport const useInteractionTagPrimary_unstable: (props: InteractionTagPrimaryProps, ref: React_2.Ref<HTMLButtonElement>) => InteractionTagPrimaryState;\n\n// @public (undocumented)\nexport const useInteractionTagPrimaryStyles_unstable: (state: InteractionTagPrimaryState) => InteractionTagPrimaryState;\n\n// @public\nexport const useInteractionTagSecondary_unstable: (props: InteractionTagSecondaryProps, ref: React_2.Ref<HTMLButtonElement>) => InteractionTagSecondaryState;\n\n// @public (undocumented)\nexport const useInteractionTagSecondaryStyles_unstable: (state: InteractionTagSecondaryState) => InteractionTagSecondaryState;\n\n// @public\nexport const useInteractionTagStyles_unstable: (state: InteractionTagState) => InteractionTagState;\n```\n\n----------------------------------------\n\nTITLE: ESLint Package Dependencies Example\nDESCRIPTION: Example showing ESLint package using semver range (caret) for lodash dependency, illustrating version resolution differences.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/dependency-versions.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"eslint\",\n  \"dependencies\": {\n    \"lodash\": \"^4.17.21\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-docsite-components to v8.7.25\nDESCRIPTION: Here we document the increment of '@fluentui/react-docsite-components' to version 8.7.25 to align with performance improvements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/theming-designer/CHANGELOG.md#2025-04-20_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react-docsite-components to v8.7.25 ([PR #23266](https://github.com/microsoft/fluentui/pull/23266) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Generating Schema TypeScript Interfaces\nDESCRIPTION: This command converts a JSON schema into a TypeScript interface using 'json-schema-to-typescript'. The output is a '.d.ts' file matching the schema definitions from a '.json' file, ensuring strong typing in TypeScript.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/STYLE-GUIDE.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx json-schema-to-typescript@latest -i tools/workspace-plugin/src/generators/<name>/schema.json -o tools/workspace-plugin/src/generators/<name>/schema.d.ts --additionalProperties false\n```\n\n----------------------------------------\n\nTITLE: React Link Component Version History\nDESCRIPTION: Changelog entries detailing version updates and patches for the FluentUI React Link component. Includes dependency bumps, bug fixes, and feature additions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-link/library/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.1.8](https://github.com/microsoft/fluentui/tree/@fluentui/react-link_v9.1.8)\n\nFri, 11 Aug 2023 12:14:26 GMT\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-link_v9.1.7..@fluentui/react-link_v9.1.8)\n\n### Patches\n\n- Bump @fluentui/react-jsx-runtime to v9.0.0-alpha.15 ([PR #28808](https://github.com/microsoft/fluentui/pull/28808) by beachball)\n- Bump @fluentui/react-tabster to v9.12.2 ([PR #28808](https://github.com/microsoft/fluentui/pull/28808) by beachball)\n- Bump @fluentui/react-utilities to v9.11.1 ([PR #28808](https://github.com/microsoft/fluentui/pull/28808) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Installing @fluentui/react-bindings with Yarn\nDESCRIPTION: This command installs the `@fluentui/react-bindings` package as a dependency in a Yarn project. It uses the `yarn add` command to add the package to the project's `package.json` file.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/react-bindings/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"yarn add @fluentui/react-bindings\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Greeter Function\nDESCRIPTION: The greeter function takes a greeting message and a user object, returning a string. It is marked as public but lacks documentation. Ensure the User type is defined in the context where this function is used.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/executors/build/__fixtures__/executor/libs/proj/etc/proj.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport function greeter(greeting: string, user: User): string;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Import Order Example for Chart Testing\nDESCRIPTION: Example showing incorrect import sequence that leads to erroneous chart rendering\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/docs/TestPlans/TestingGuide.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { chartPoints } from '../VerticalBarChart/VerticalBarChart.test';\nimport { render, screen, queryAllByAttribute, fireEvent, act } from '@testing-library/react';\n```\n\n----------------------------------------\n\nTITLE: Version Metadata in Markdown\nDESCRIPTION: Version number, date, and comparison link for release 8.3.16 of FluentUI React Experiments\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-experiments/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## [8.3.16](https://github.com/microsoft/fluentui/tree/@fluentui/react-experiments_v8.3.16)\n\nTue, 28 Sep 2021 07:37:27 GMT\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-experiments_v8.3.15..@fluentui/react-experiments_v8.3.16)\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-docsite-components to v8.7.14\nDESCRIPTION: This entry reflects the upgrade of '@fluentui/react-docsite-components' to v8.7.14, aiming for improved documentation resources.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/theming-designer/CHANGELOG.md#2025-04-20_snippet_36\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react-docsite-components to v8.7.14 ([PR #22966](https://github.com/microsoft/fluentui/pull/22966) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Running Local Demo App for Fluent UI React Experiments\nDESCRIPTION: This section outlines the procedural steps required to run a local demo application for testing experimental components from the Fluent UI React library. It instructs the reader to set up the environment according to prior setup instructions and to use yarn to start the application with the specific option for the experimental components. This requires a previously configured local development environment.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-experiments/README.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Fill Options for Plot Areas\nDESCRIPTION: Defines the fill pattern options for various plot areas, crucial for distinguishing different data sections visually within a chart or graph.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/chart-utilities/etc/chart-utilities.api.md#2025-04-20_snippet_31\n\nLANGUAGE: TypeScript\nCODE:\n```\nfill: 'none' | 'tozeroy' | 'tozerox' | 'tonexty' | 'tonextx' | 'toself' | 'tonext';\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/set-version version\nDESCRIPTION: This code snippet describes the action of bumping the @fluentui/set-version dependency within patch releases of the @fluentui/fluent2-theme package. This action ensures that the set-version package is up to date.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluent2-theme/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nBump @fluentui/set-version to v8.2.23 ([commit](https://github.com/microsoft/fluentui/commit/444d2ef497b5be5b4252f4af86ded3d2db7a0850) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Importing VirtualizerScrollView from FluentUI React Virtualizer\nDESCRIPTION: Demonstrates how to import the VirtualizerScrollView component from the @fluentui/react-virtualizer package. Note that this is a preview component with potential API changes before final release.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-virtualizer/stories/src/VirtualizerScrollView/VirtualizerScrollViewDescription.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { VirtualizerScrollView } from '@fluentui/react-virtualizer';\n```\n\n----------------------------------------\n\nTITLE: Importing React Menu Package for Fluent UI React\nDESCRIPTION: This code snippet demonstrates how to import the @fluentui/react-menu package, which contains React Menu components for Fluent UI React.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n@fluentui/react-menu\n```\n\n----------------------------------------\n\nTITLE: Using Out of Office Status with Avatar in Fluent UI\nDESCRIPTION: Shows how to use the outOfOffice property with status indicators in the new Avatar component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Avatar.stories.mdx#2025-04-20_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Avatar } from '@fluentui/react-components';\nconst Component = () => (\n  <Avatar\n    badge={{\n      outOfOffice: true,\n      status: 'busy',\n    }}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Basic FluentUI Text Component Usage\nDESCRIPTION: Example showing how to use the Text component with FluentProvider from the main components package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-text/library/README.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { FluentProvider, Text } from '@fluentui/react-components';\n\nconst App = () => (\n  <FluentProvider>\n    <Text>Fluent UI Text!</Text>\n  </FluentProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing ProgressBar from Fluent UI React\nDESCRIPTION: This code snippet demonstrates how to import the ProgressBar component from the Fluent UI React components library, allowing its use in React applications.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-progress/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ProgressBar } from '@fluentui/react-components';\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook stories\nDESCRIPTION: This snippet demonstrates how to configure Storybook to include stories from the @fluentui/react-infolabel package. It specifies the glob patterns for finding story files within the package's stories directory. The configuration uses glob patterns to include both MDX and TypeScript story files.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-infolabel/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-infolabel/stories/src/**/*.stories.mdx', '../packages/react-components/react-infolabel/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BaseSlots Enum for Color Slots\nDESCRIPTION: The BaseSlots enum defines color slots with numeric indexes, which are used for styling components within the Fluent UI framework.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport enum BaseSlots {\n    backgroundColor = 1,\n    foregroundColor = 2,\n    primaryColor = 0\n}\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-docsite-components to v8.7.18\nDESCRIPTION: This entry highlights the upgrade of '@fluentui/react-docsite-components' to v8.7.18, aiming at a better experience for users interacting with documentation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/theming-designer/CHANGELOG.md#2025-04-20_snippet_27\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react-docsite-components to v8.7.18 ([PR #23103](https://github.com/microsoft/fluentui/pull/23103) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Version Update PR Link Markdown\nDESCRIPTION: Markdown links to pull requests for version updates\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-image/library/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[PR #19748](https://github.com/microsoft/fluentui/pull/19748)\n```\n\n----------------------------------------\n\nTITLE: Simple RadioGroup Usage\nDESCRIPTION: Shows a simple usage example of the `RadioGroup` component with three `Radio` components inside. The `defaultValue` prop on `RadioGroup` controls which radio is initially selected.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-radio/library/docs/Spec.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<RadioGroup defaultValue=\"one\">\n  <Radio value=\"one\" label=\"Option One\" />\n  <Radio value=\"two\" label=\"Option Two\" />\n  <Radio value=\"three\" label=\"Option Three\" />\n</RadioGroup>\n```\n\n----------------------------------------\n\nTITLE: Version History Entry for 0.2.17\nDESCRIPTION: Changelog entry noting fix for clear icon functionality and multiple dependency version updates.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-timepicker-compat/library/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.2.17](https://github.com/microsoft/fluentui/tree/@fluentui/react-timepicker-compat_v0.2.17)\n\nThu, 06 Jun 2024 15:26:41 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-timepicker-compat_v0.2.16..@fluentui/react-timepicker-compat_v0.2.17)\n\n### Patches\n\n- fix: clear icon not working with freeform\n- Bump @fluentui/react-combobox to v9.11.7\n- Bump @fluentui/react-field to v9.1.67\n- Bump @fluentui/react-jsx-runtime to v9.0.39\n- Bump @fluentui/react-utilities to v9.18.10\n```\n\n----------------------------------------\n\nTITLE: Defining Tree Traverse Enum in TypeScript\nDESCRIPTION: The TreeTraverse enum provides options for tree traversal methods, supporting various algorithms for data processing in tree charts.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/etc/react-charting.api.md#2025-04-20_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport enum TreeTraverse {\n    levelOrder = 0,\n    preOrder = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react to v8.46.3\nDESCRIPTION: This patch updates the @fluentui/react library to version 8.46.3 as part of ongoing improvements to the codebase. Further information can be found in Pull Request #20831.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/ts-minbar-test-react/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.46.3 ([PR #20831](https://github.com/microsoft/fluentui/pull/20831) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Listing Fluent UI NPM Package Names in Markdown\nDESCRIPTION: This snippet lists the current NPM package names under the @fluentui namespace. These names are used as the basis for the proposed repository reorganization.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/shared/build-system/05-folder-organization.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`react`, `react-components`, `react-northstar`, and `web-components`\n```\n\n----------------------------------------\n\nTITLE: Fixing TableHeaderCell hover/pressed tokens in FluentUI React Table\nDESCRIPTION: This snippet addresses an issue in the TableHeaderCell component where hover and pressed tokens were not being correctly applied. The fix ensures that the component uses the appropriate tokens for these states, improving the user experience.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-table/library/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n\"fix(TableHeaderCell): should use hover and pressed tokens ([PR #32352](https://github.com/microsoft/fluentui/pull/32352) by lingfangao@hotmail.com)\"\n```\n\n----------------------------------------\n\nTITLE: Custom Portal Mounting with Custom Node\nDESCRIPTION: Shows how to customize the mount location of a Portal by specifying a specific DOM node\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-portal/library/README.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst node = document.getElementById('customNode');\n\n<Portal mountNode={node}>Render to a custom node in DOM</Portal>;\n```\n\n----------------------------------------\n\nTITLE: Defining Field Class for Form Layouts in TypeScript\nDESCRIPTION: Defines the Field class which extends BaseField, adding the labelPosition property to control label placement in form fields.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_37\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class Field extends BaseField {\n    labelPosition: FieldLabelPosition;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Vertical Stacked Bar Chart Style Properties Interface in TypeScript\nDESCRIPTION: The IVerticalStackedBarChartStyleProps interface outlines the styling properties for the vertical stacked bar chart, ensuring consistent visual appearance within the application.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/etc/react-charting.api.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface IVerticalStackedBarChartStyleProps extends ICartesianChartStyleProps {\n}\n```\n\n----------------------------------------\n\nTITLE: Version History Documentation in Markdown\nDESCRIPTION: Structured version history documentation showing incremental version updates, patches, and dependency changes for the FluentUI theme samples package through several releases.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/theme-samples/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Patches\n\n- Bump @fluentui/react to v8.37.6 ([PR #20273](https://github.com/microsoft/fluentui/pull/20273) by beachball)\n\n## [8.2.30](https://github.com/microsoft/fluentui/tree/@fluentui/theme-samples_v8.2.30)\n\nThu, 28 Oct 2021 07:29:14 GMT\n```\n\n----------------------------------------\n\nTITLE: Dry Run Generator Command - FluentUI Workspace Plugin\nDESCRIPTION: Demonstrates how to preview the generator output without making actual file changes using the dry-run flag.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/tsconfig-base-all/README.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:tsconfig-base-all --dry-run\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Locale for Date Axis in JavaScript\nDESCRIPTION: This snippet illustrates how to specify a custom locale definition for date axis localization in a heatmap chart. It uses a d3-compatible locale definition object to determine appropriate tick labels based on the date range.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-examples/src/react-charting/HeatMapChart/docs/HeatMapChartBestPractices.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst timeFormatLocale = {\n  \"dateTime\": \"%x, %X\",\n  \"date\": \"%-m/%-d/%Y\",\n  \"time\": \"%-I:%M:%S %p\",\n  \"periods\": [\"AM\", \"PM\"],\n  \"days\": [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n  \"shortDays\": [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n  \"months\": [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n  \"shortMonths\": [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n};\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.112.8\nDESCRIPTION: Moves the @fluentui/react library to version 8.112.8, focusing on resolving issues and enhancing features.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluent2-theme/CHANGELOG.md#2025-04-20_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.112.8 ([PR #29772](https://github.com/microsoft/fluentui/pull/29772) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Proposed New Package Import Example\nDESCRIPTION: Shows proposed new import syntax from @fluentui/react-keyboard-key package for better readability.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/handling-keyboard-keys.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ArrowDown, Escape } from '@fuentui/react-keyboard-key';\n```\n\n----------------------------------------\n\nTITLE: Calculate Bar Gap Rate\nDESCRIPTION: Calculates the bar gap rate based on the inner padding for bars within a group. This rate is used in calculating the space between bars in a group.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/docs/implementing-2-to-1-spacing.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst BAR_GAP_RATE = X1_INNER_PADDING / (1 - X1_INNER_PADDING);\n```\n\n----------------------------------------\n\nTITLE: Setting Vertical Fill for Stack.Item using CSS\nDESCRIPTION: This snippet demonstrates how to set the vertical fill property for a Stack.Item component using CSS.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Flex/Flex.StackItem.stories.mdx#2025-04-20_snippet_15\n\nLANGUAGE: css\nCODE:\n```\n.flex-item {\n  height: 100%;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Jest test structure in TypeScript\nDESCRIPTION: Demonstrates the basic structure of a Jest test using describe and it blocks, along with an expectation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/testing-with-jest.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndescribe('thing', () => {\n  it('does something', () => {\n    expect(thing()).toEqual(aValue);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Strong Variant of a Theme in Fluent UI React\nDESCRIPTION: This snippet demonstrates how to create a strong variant from the Fluent UI theme and apply it using the ThemeProvider. It imports the necessary theme and variant function, then instantiates the strong theme before wrapping components with the ThemeProvider.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/scheme-utilities/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FluentTheme } from '@fluentui/theme';\nimport { getStrongVariant } from '@fluentui/theme-schemes';\n\nconst strongTheme = getStrongVariant(FluentTheme);\n\n<ThemeProvider theme={strongTheme}>\n  <components... />\n</ThemeProvider>\n```\n\n----------------------------------------\n\nTITLE: Running Bundle and Serve Commands in Fluent UI Local Sandbox\nDESCRIPTION: Command sequence to build the local sandbox project and start a development server. This enables manual performance testing and bundle analysis.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/local-sandbox/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn nx run local-sandbox:bundle\nyarn serve\n```\n\n----------------------------------------\n\nTITLE: Defining Prop Types for a Label Component in TypeScript\nDESCRIPTION: This snippet demonstrates how to define prop types for a `Label` component using PropTypes in TypeScript. It includes descriptions for each prop to provide clarity on their usage and expected types.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/document-a-feature.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nLabel.propTypes = {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A label can reduce its complexity. */\n  basic: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Color of the label. */\n  color: PropTypes.oneOf(Label._meta.props.color),\n\n  /** Place the label in one of the upper corners . */\n  corner: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(Label._meta.props.corner)]),\n\n  /** Add an icon by icon className or pass an <Icon /> */\n  icon: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n};\n```\n\n----------------------------------------\n\nTITLE: Extending Fluent UI Theme with Custom Tokens in TypeScript/React\nDESCRIPTION: Shows how to extend the base Fluent UI theme with custom tokens and use them in components. Includes theme extension, token object creation, and usage in styles. Warns about performance implications of adding custom tokens due to CSS variables being carried by DOM nodes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/patterns/extending-tokens.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeStyles, themeToTokensObject, webLightTheme, FluentProvider, Theme } from '@fluentui/react-components';\n\n// You can pass your own custom tokens to a theme and pass that to the provider.\ntype CustomTheme = Theme & {\n  tokenA: string;\n  tokenB: string;\n  tokenC: string;\n};\nconst customTheme: CustomTheme = { ...webLightTheme, tokenA: 'red', tokenB: 'blue', tokenC: 'green' };\nfunction App() {\n  return <FluentProvider theme={customTheme}>{/* ... */}</FluentProvider>;\n}\n\n// ...\n\n// You can construct a custom tokens object by yourself.\nconst customTokens: Record<keyof CustomTheme, string> = {\n  ...tokens,\n  tokenA: `var(--tokenA)`,\n  tokenB: `var(--tokenB)`,\n  tokenC: `var(--tokenC)`,\n};\n\n// You can alternatively use the themeToTokensObject function to construct the custom tokens object.\n// Note: If you do it via the themeToTokensObject you might see a negative effect on tree-shaking since bundles won't know the shape of the output.\nconst alternativeCustomTokens = themeToTokensObject(customTheme);\n\n// You can then use this custom tokens object inside your styles.\nconst useStyles = makeStyles({\n  base: {\n    color: customTokens.tokenA,\n    backgroundColor: customTokens.tokenB,\n    outlineColor: customTokens.tokenC,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling ESLint Rule in JSONC\nDESCRIPTION: This snippet shows how to enable a custom ESLint rule (e.g., `uppercase-const`) within a project's `.eslintrc` file. It assumes that the rule has been defined and registered within the workspace.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/eslint-rules/README.md#2025-04-20_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n/* @filename <project-root>/.eslintrc */\n{\n  \"extends:\" [\"../../.eslintrc\"],\n  \"rules\": {\n     /* pattern: <@nx/workspace>-<custom-rule-name> */\n    \"@nx/workspace-uppercase-const\": \"error\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Stardust Button DOM Structure in HTML\nDESCRIPTION: Example DOM structure for a Stardust button component showing a complex implementation with SVG icons and styled spans for content.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Button.md#2025-04-20_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<button\n  class=\"ui-button jz lc oh mt je le lf lg lh cl cp cn dd bj rm bl rn cb gz as at au av ro rp rq rr rs ln ha hb hc hd he hf hg hh hi hj hk hl hm hn ho hp ot ou ov ow hu hv hw hx hy hz ia ib ic id ie if ig ih ii ij ik il im ox oy oz pa ir is it iu iv iw ix iy rt ru\"\n>\n  <span class=\"ui-icon ck cb gw rv ca\" role=\"img\" aria-hidden=\"true\">\n    <svg class=\"cz ct cu da cw\" viewBox=\"8 8 16 16\" role=\"presentation\" focusable=\"false\">\n      <g class=\"ui-icon__outline cy\">\n        <path\n          d=\"M23.6968,12.0403c-0.1836-0.0786-0.3975-0.04-0.542,0.0981l-2.5317,2.4165C20.2212,14.9382,20,15.4514,20,16  c0,0.5483,0.2212,1.0615,0.623,1.4448l2.5317,2.4167C23.2495,19.9521,23.374,20,23.5,20c0.0664,0,0.1333-0.0132,0.1968-0.0403  C23.8809,19.8809,24,19.7002,24,19.5v-7C24,12.2998,23.8809,12.1191,23.6968,12.0403z M23,18.3315l-1.6865-1.6099v-0.0002  C21.1113,16.5286,21,16.2725,21,16s0.1113-0.5286,0.3135-0.7217L23,13.6685V18.3315z\"\n        ></path>\n        <path\n          d=\"M17.5,11H9.8193c-0.7056,0-1.3232,0.5393-1.4692,1.2822C8.1177,13.4619,8,14.7129,8,16s0.1177,2.5381,0.3501,3.7173  C8.4961,20.4607,9.1138,21,9.8193,21H17.5c0.8271,0,1.5-0.6729,1.5-1.5v-7C19,11.6729,18.3271,11,17.5,11z M18,19.5  c0,0.2756-0.2241,0.5-0.5,0.5H9.8193c-0.2285,0-0.4341-0.2-0.4878-0.4756C9.1113,18.4082,9,17.2224,9,16  s0.1113-2.4082,0.3315-3.5249C9.3853,12.2,9.5908,12,9.8193,12H17.5c0.2759,0,0.5,0.2244,0.5,0.5V19.5z\"\n        ></path>\n      </g>\n      <g class=\"ui-icon__filled\">\n        <path\n          d=\"M23.6968,12.0403c-0.1841-0.0786-0.3975-0.04-0.542,0.0981l-2.5317,2.4165C20.2212,14.9382,20,15.4514,20,16  c0,0.5483,0.2212,1.0615,0.623,1.4448l2.5317,2.4167C23.2495,19.9521,23.374,20,23.5,20c0.0664,0,0.1333-0.0132,0.1968-0.0403  C23.8809,19.8809,24,19.7002,24,19.5v-7C24,12.2998,23.8809,12.1191,23.6968,12.0403z\"\n        ></path>\n        <path\n          d=\"M17.5,11H9.8193c-0.7056,0-1.3232,0.5393-1.4692,1.2822C8.1177,13.4619,8,14.7129,8,16s0.1177,2.5381,0.3501,3.7173  C8.4961,20.4607,9.1138,21,9.8193,21H17.5c0.8271,0,1.5-0.6729,1.5-1.5v-7C19,11.6729,18.3271,11,17.5,11z\"\n        ></path>\n      </g>\n    </svg>\n  </span>\n  <span dir=\"auto\" class=\"ui-box lp lq lr cg ls ch\">A text button with an icon</span>\n</button>\n```\n\n----------------------------------------\n\nTITLE: Defining Component Custom Styles Context\nDESCRIPTION: This snippet details the creation of a custom styles context type for components. It provides a structure for components to apply specific custom styles through the context API effectively.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/custom-styling.md#2025-04-20_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport type ComponentCustomStylesContextValue = { useCustomStyles?: (state: ComponentState) => ComponentState; };\n\nexport const ComponentCustomStylesContext: Context<ComponentCustomStylesContextValue> = createContext<ComponentCustomStylesContextValue>({});\n\nexport const ComponentCustomStylesContextProvider = ComponentCustomStylesContext.Provider;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories Globs in Javascript\nDESCRIPTION: This code snippet demonstrates how to configure Storybook to include stories from the @fluentui/react-motion-components-preview package.  It specifies the file patterns for Storybook to find stories written in MDX, TypeScript, and TSX formats within the specified directory. The configuration is exported as a module.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-motion-components-preview/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-motion-components-preview/stories/src/**/*.stories.mdx', '../packages/react-components/react-motion-components-preview/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Shorthand Macro Function Usage\nDESCRIPTION: Example of using the proposed shorthand macro functions for property expansion\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/no-css-shorthands-in-make-styles.md#2025-04-20_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { shorthands } from '@fluentui/react-make-styles';\n\nmakeStyles({\n  rootA: { paddingLeft: '4px', paddingRight: '4px', paddingBottom: '4px', paddingTop: '4px' },\n  rootB: {\n    ...shorthands.padding('4px'),\n    ...shorthands.padding('4px', '8px'),\n    ...shorthands.padding('4px', '8px', '16px', 0),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining ColorPicker Component in React/TypeScript\nDESCRIPTION: Defines a functional component and a class component for a ColorPicker with IColorPickerProps interface.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const ColorPicker: React_2.FunctionComponent<IColorPickerProps>;\n\nexport class ColorPickerBase extends React_2.Component<IColorPickerProps, IColorPickerState> implements IColorPicker {\n    constructor(props: IColorPickerProps);\n    // (undocumented)\n    get color(): IColor;\n    // (undocumented)\n    componentDidUpdate(prevProps: Readonly<IColorPickerProps>, prevState: Readonly<IColorPickerState>): void;\n    // (undocumented)\n    static defaultProps: Partial<IColorPickerProps>;\n    // (undocumented)\n    render(): JSX.Element;\n}\n```\n\n----------------------------------------\n\nTITLE: Update README with Markdown TOC\nDESCRIPTION: This code snippet is for updating the Table of Contents in a README.md file using 'markdown-toc'. It automatically inserts a TOC based on headings, using dash '-' as bullet points.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/STYLE-GUIDE.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx markdown-toc --bullets \"-\" -i tools/generators/<generator-name>/README.md\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Version 9.0.0-alpha.26\nDESCRIPTION: Changelog entry showing package updates and changes for version 9.0.0-alpha.26, including replacement of npm-scripts with nx inferred tasks.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-theme-sass/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.0.0-alpha.26](https://github.com/microsoft/fluentui/tree/@fluentui/react-theme-sass_v9.0.0-alpha.26)\n\nMon, 11 Nov 2024 10:01:01 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-theme-sass_v9.0.0-alpha.23..@fluentui/react-theme-sass_v9.0.0-alpha.26)\n\n### Changes\n\n- chore: replace npm-scripts and just-scrtips with nx inferred tasks ([PR #33074](https://github.com/microsoft/fluentui/pull/33074) by martinhochel@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.112.6\nDESCRIPTION: Updates the @fluentui/react library to version 8.112.6, focusing on bug fixes and scaling issues.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluent2-theme/CHANGELOG.md#2025-04-20_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.112.6 ([PR #29747](https://github.com/microsoft/fluentui/pull/29747) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Resolving React Hooks Issues with npm link\nDESCRIPTION: Commands to resolve React hooks issues by manually linking react and react-dom between the linked packages.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/using-local-unpublished-version-of-the-lib-with-a-local-React-app.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ cd fluentui\n$ rm -rf fluentui/node_modules/react\n$ rm -rf fluentui/node_modules/react-dom\n$ npm link ../app/node_modules/react\n$ npm link ../app/node_modules/react-dom\n```\n\n----------------------------------------\n\nTITLE: Structuring Datepicker with HTML and ARIA\nDESCRIPTION: This HTML snippet outlines a complete DOM structure for a date picker widget conforming to ARIA practices. It includes label associations, dialog roles for accessibility, month and year navigation controls, and a grid for date selection. The placeholder is 'mm/dd/yyyy', and buttons change based on focus and hover states. Key features include role specifications for dialog and grid and ARIA attributes for labels and accessibility cues.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Datepicker.md#2025-04-20_snippet_2\n\nLANGUAGE: htmlmixed\nCODE:\n```\n<div id=\"myDatepicker\" class=\"datepicker\">\n  <div class=\"date\">\n    <label for=\"id-textbox-1\">\n      Date\n    </label>\n    <input type=\"text\"\n           placeholder=\"mm/dd/yyyy\"\n           id=\"id-textbox-1\"\n           aria-autocomplete=\"none\">\n    <button class=\"icon\" aria-label=\"Choose Date\">\n      <span class=\"fa fa-calendar-alt fa-2x\"></span>\n    </button>\n  </div>\n  <div id=\"id-datepicker-1\"\n       class=\"datepickerDialog\"\n       role=\"dialog\"\n       aria-modal=\"true\"\n       aria-labelledby=\"id-dialog-label\">\n    <div class=\"header\">\n      <button class=\"prevYear\" aria-label=\"previous year\">\n        <span class=\"fas fa-angle-double-left fa-lg\"></span>\n      </button>\n      <button class=\"prevMonth\" aria-label=\"previous month\">\n        <span class=\"fas fa-angle-left fa-lg\"></span>\n      </button>\n      <h2 id=\"id-dialog-label\"\n          class=\"monthYear\"\n          aria-live=\"polite\">\n        Month Year\n      </h2>\n      <button class=\"nextMonth\" aria-label=\"next month\">\n        <span class=\"fas fa-angle-right fa-lg\"></span>\n      </button>\n      <button class=\"nextYear\" aria-label=\"next year\">\n        <span class=\"fas fa-angle-double-right fa-lg\"></span>\n      </button>\n    </div>\n    <table id=\"myDatepickerGrid\"\n           class=\"dates\"\n           role=\"grid\"\n           aria-labelledby=\"id-dialog-label\">\n      <thead>\n        <tr>\n          <th scope=\"col\" abbr=\"Sunday\">\n            Su\n          </th>\n          <th scope=\"col\" abbr=\"Monday\">\n            Mo\n          </th>\n          <th scope=\"col\" abbr=\"Tuesday\">\n            Tu\n          </th>\n          <th scope=\"col\" abbr=\"Wednesday\">\n            We\n          </th>\n          <th scope=\"col\" abbr=\"Thursday\">\n            Th\n          </th>\n          <th scope=\"col\" abbr=\"Friday\">\n            Fr\n          </th>\n          <th scope=\"col\" abbr=\"Saturday\">\n            Sa\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td class=\"dateCell\">\n            <button class=\"dateButton\"\n                    tabindex=\"-1\"\n                    disabled=\"\">\n              25\n            </button>\n          </td>\n          <td class=\"dateCell\">\n            <button class=\"dateButton\"\n                    tabindex=\"-1\"\n                    disabled=\"\">\n              26\n            </button>\n          </td>\n          <td class=\"dateCell\">\n            <button class=\"dateButton\"\n                    tabindex=\"-1\"\n                    disabled=\"\">\n              27\n            </button>\n          </td>\n          <td class=\"dateCell\">\n            <button class=\"dateButton\"\n                    tabindex=\"-1\"\n                    disabled=\"\">\n              28\n            </button>\n          </td>\n          <td class=\"dateCell\">\n            <button class=\"dateButton\"\n                    tabindex=\"-1\"\n                    disabled=\"\">\n              29\n            </button>\n          </td>\n          <td class=\"dateCell\">\n            <button class=\"dateButton\"\n                    tabindex=\"-1\"\n                    disabled=\"\">\n              30\n            </button>\n          </td>\n          <td class=\"dateCell\">\n            <button class=\"dateButton\" tabindex=\"-1\">\n              1\n            </button>\n          </td>\n        </tr>\n        <tr>\n          <td class=\"dateCell\">\n            <button class=\"dateButton\" tabindex=\"-1\">\n              2\n            </button>\n          </td>\n          <td class=\"dateCell\">\n            <button class=\"dateButton\" tabindex=\"-1\">\n              3\n            </button>\n          </td>\n          <td class=\"dateCell\">\n            <button class=\"dateButton\" tabindex=\"-1\">\n              4\n            </button>\n          </td>\n          <td class=\"dateCell\">\n            <button class=\"dateButton\" tabindex=\"-1\">\n              5\n            </button>\n          </td>\n          <td class=\"dateCell\">\n            <button class=\"dateButton\" tabindex=\"-1\">\n              6\n            </button>\n          </td>\n          <td class=\"dateCell\">\n            <button class=\"dateButton\" tabindex=\"-1\">\n              7\n            </button>\n          </td>\n          <td class=\"dateCell\">\n            <button class=\"dateButton\" tabindex=\"-1\">\n              8\n            </button>\n          </td>\n        </tr>\n        <tr>\n          <td class=\"dateCell\">\n            <button class=\"dateButton\" tabindex=\"-1\">\n              9\n            </button>\n          </td>\n          <td class=\"dateCell\">\n            <button class=\"dateButton\" tabindex=\"-1\">\n              10\n            </button>\n          </td>\n          <td class=\"dateCell\">\n            <button class=\"dateButton\" tabindex=\"-1\">\n              11\n            </button>\n          </td>\n          <td class=\"dateCell\">\n            <button class=\"dateButton\" tabindex=\"-1\">\n              12\n            </button>\n          </td>\n          <td class=\"dateCell\">\n            <button class=\"dateButton\" tabindex=\"-1\">\n              13\n            </button>\n          </td>\n          <td class=\"dateCell\">\n            <button class=\"dateButton\" tabindex=\"0\">\n              14\n            </button>\n          </td>\n          <td class=\"dateCell\">\n            <button class=\"dateButton\" tabindex=\"-1\">\n              15\n            </button>\n          </td>\n        </tr>\n        <tr>\n          <td class=\"dateCell\">\n            <button class=\"dateButton\" tabindex=\"-1\">\n              16\n            </button>\n          </td>\n          <td class=\"dateCell\">\n            <button class=\"dateButton\" tabindex=\"-1\">\n              17\n            </button>\n          </td>\n          <td class=\"dateCell\">\n            <button class=\"dateButton\" tabindex=\"-1\">\n              18\n            </button>\n          </td>\n          <td class=\"dateCell\">\n            <button class=\"dateButton\" tabindex=\"-1\">\n              19\n            </button>\n          </td>\n          <td class=\"dateCell\">\n            <button class=\"dateButton\" tabindex=\"-1\">\n              20\n            </button>\n          </td>\n          <td class=\"dateCell\">\n            <button class=\"dateButton\" tabindex=\"-1\">\n              21\n            </button>\n          </td>\n          <td class=\"dateCell\">\n            <button class=\"dateButton\" tabindex=\"-1\">\n              22\n            </button>\n          </td>\n        </tr>\n        <tr>\n          <td class=\"dateCell\">\n            <button class=\"dateButton\" tabindex=\"-1\">\n              23\n            </button>\n          </td>\n          <td class=\"dateCell\">\n            <button class=\"dateButton\" tabindex=\"-1\">\n              24\n            </button>\n          </td>\n          <td class=\"dateCell\">\n            <button class=\"dateButton\" tabindex=\"-1\">\n              25\n            </button>\n          </td>\n          <td class=\"dateCell\">\n            <button class=\"dateButton\" tabindex=\"-1\">\n              26\n            </button>\n          </td>\n          <td class=\"dateCell\">\n            <button class=\"dateButton\" tabindex=\"-1\">\n              27\n            </button>\n          </td>\n          <td class=\"dateCell\">\n            <button class=\"dateButton\" tabindex=\"-1\">\n              28\n            </button>\n          </td>\n          <td class=\"dateCell\">\n            <button class=\"dateButton\" tabindex=\"-1\">\n              29\n            </button>\n          </td>\n        </tr>\n        <tr>\n          <td class=\"dateCell\">\n            <button class=\"dateButton\" tabindex=\"-1\">\n              30\n            </button>\n          </td>\n          <td class=\"dateCell\">\n            <button class=\"dateButton\" tabindex=\"-1\">\n              31\n            </button>\n          </td>\n          <td class=\"dateCell\">\n            <button class=\"dateButton\"\n                    tabindex=\"-1\"\n                    disabled=\"\">\n              1\n            </button>\n          </td>\n          <td class=\"dateCell\">\n            <button class=\"dateButton\"\n                    tabindex=\"-1\"\n                    disabled=\"\">\n              2\n            </button>\n          </td>\n          <td class=\"dateCell\">\n            <button class=\"dateButton\"\n                    tabindex=\"-1\"\n                    disabled=\"\">\n              3\n            </button>\n          </td>\n          <td class=\"dateCell\">\n            <button class=\"dateButton\"\n                    tabindex=\"-1\"\n                    disabled=\"\">\n              4\n            </button>\n          </td>\n          <td class=\"dateCell\">\n            <button class=\"dateButton\"\n                    tabindex=\"-1\"\n                    disabled=\"\">\n              5\n            </button>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n    <div class=\"dialogButtonGroup\">\n      <button class=\"dialogButton\" value=\"cancel\">\n        Cancel\n      </button>\n      <button class=\"dialogButton\" value=\"ok\">\n        OK\n      </button>\n    </div>\n    <div class=\"message\" aria-live=\"polite\">\n      Test\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering Version History in Markdown\nDESCRIPTION: Markdown formatted changelog entries showing version updates, dates, and package dependencies for the FluentUI theme samples package\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/theme-samples/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## [8.2.80](https://github.com/microsoft/fluentui/tree/@fluentui/theme-samples_v8.2.80)\n\nThu, 17 Feb 2022 07:28:31 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/theme-samples_v8.2.79..@fluentui/theme-samples_v8.2.80)\n\n### Patches\n\n- Bump @fluentui/react to v8.55.3 ([PR #21777](https://github.com/microsoft/fluentui/pull/21777) by beachball)\n- Bump @fluentui/scheme-utilities to v8.2.13 ([PR #21777](https://github.com/microsoft/fluentui/pull/21777) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.98.0\nDESCRIPTION: This entry marks the update process for @fluentui/react to version 8.98.0, a part of routine maintenance to ensure the package is current.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/azure-themes/CHANGELOG.md#2025-04-20_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.98.0 ([PR #25138](https://github.com/microsoft/fluentui/pull/25138) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Defining IEditingSelectedPeopleItemStylesProps Interface in TypeScript\nDESCRIPTION: Defines an empty IEditingSelectedPeopleItemStylesProps interface. This interface is marked as @public but undocumented.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_123\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IEditingSelectedPeopleItemStylesProps {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Sankey Diagram Interfaces in TypeScript\nDESCRIPTION: TypeScript interfaces for Sankey diagram visualization components in Plotly.js. Includes definitions for nodes, links, data structure, styling, and domain configuration options essential for creating flow diagrams.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/chart-utilities/etc/chart-utilities.api.md#2025-04-20_snippet_35\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport const sanitizeJson: (jsonObject: any, depth?: number) => any;\n\n// @public (undocumented)\nexport type SankeyColor = string | number;\n\n// @public (undocumented)\nexport type SankeyColors = Array<SankeyColor | null | undefined>;\n\n// @public (undocumented)\nexport interface SankeyColorscale {\n    // (undocumented)\n    cmax: number;\n    // (undocumented)\n    cmin: number;\n    // (undocumented)\n    colorscale: Array<[number, string]>;\n    // (undocumented)\n    label: string;\n    // (undocumented)\n    name: string;\n    // (undocumented)\n    templateitemname: string;\n}\n\n// @public (undocumented)\nexport interface SankeyData {\n    // (undocumented)\n    arrangement: 'snap' | 'perpendicular' | 'freeform' | 'fixed';\n    // (undocumented)\n    customdata: Datum[];\n    // (undocumented)\n    domain: Partial<SankeyDomain>;\n    // (undocumented)\n    hoverinfo: string;\n    // (undocumented)\n    hoverlabel: Partial<SankeyHoverLabel>;\n    // (undocumented)\n    ids: string[];\n    // (undocumented)\n    legend: string;\n    // (undocumented)\n    legendgrouptitle: Partial<SankeyDataTitle>;\n    // (undocumented)\n    legendrank: number;\n    // (undocumented)\n    legendwidth: number;\n    // (undocumented)\n    link: Partial<SankeyLink>;\n    // (undocumented)\n    meta: number | string;\n    // (undocumented)\n    name: string;\n    // (undocumented)\n    node: Partial<SankeyNode>;\n    // (undocumented)\n    orientation: SankeyOrientation;\n    // (undocumented)\n    selectpoints: string | number;\n    // (undocumented)\n    textfont: Partial<SankeyFont>;\n    // (undocumented)\n    type: 'sankey';\n    // (undocumented)\n    uirevision: string | number;\n    // (undocumented)\n    valueformat: string;\n    // (undocumented)\n    valuesuffix: string;\n    // (undocumented)\n    visible: boolean | 'legendonly';\n}\n\n// @public (undocumented)\nexport interface SankeyDataTitle {\n    // (undocumented)\n    font: Partial<SankeyFont>;\n    // (undocumented)\n    title: string;\n}\n\n// @public (undocumented)\nexport interface SankeyDomain {\n    // (undocumented)\n    column: number;\n    // (undocumented)\n    row: number;\n    // (undocumented)\n    x: number[];\n    // (undocumented)\n    y: number[];\n}\n\n// @public (undocumented)\nexport interface SankeyFont {\n    // (undocumented)\n    color: SankeyColor | SankeyColors;\n    // (undocumented)\n    family: string | string[];\n    // (undocumented)\n    size: number | number[];\n}\n\n// @public (undocumented)\nexport interface SankeyHoverLabel {\n    // (undocumented)\n    align: HoverLabel['align'] | Array<HoverLabel['align']>;\n    // (undocumented)\n    bgcolor: SankeyColor | SankeyColors;\n    // (undocumented)\n    bordercolor: SankeyColor | SankeyColors;\n    // (undocumented)\n    font: SankeyFont;\n    // (undocumented)\n    namelength: number | number[];\n}\n\n// @public (undocumented)\nexport interface SankeyLink {\n    // (undocumented)\n    arrowlen: number;\n    // (undocumented)\n    color: SankeyColor | SankeyColor[];\n    // (undocumented)\n    colorscale: Partial<SankeyColorscale>;\n    // (undocumented)\n    customdata: Datum[];\n    // (undocumented)\n    hovercolor: SankeyColor | SankeyColor[];\n    // (undocumented)\n    hoverinfo: 'all' | 'none' | 'skip';\n    // (undocumented)\n    hoverlabel: Partial<SankeyHoverLabel>;\n    // (undocumented)\n    hovertemplate: string | string[];\n    // (undocumented)\n    label: Datum[];\n    // (undocumented)\n    line: Partial<{\n        color: SankeyColor;\n        width: number;\n    }>;\n    // (undocumented)\n    source: number[];\n    // (undocumented)\n    target: number[];\n    // (undocumented)\n    value: number[];\n}\n\n// @public (undocumented)\nexport interface SankeyNode {\n    // (undocumented)\n    color: SankeyColor[];\n    // (undocumented)\n    customdata: Datum[];\n    // (undocumented)\n    groups: SankeyNode[];\n    // (undocumented)\n    hoverinfo: 'all' | 'none' | 'skip';\n    // (undocumented)\n    hoverlabel: Partial<SankeyHoverLabel>;\n    // (undocumented)\n    hovertemplate: string | string[];\n    // (undocumented)\n    label: Datum[];\n    // (undocumented)\n    line: Partial<{\n        color: SankeyColor;\n        width: number;\n    }>;\n    // (undocumented)\n    pad: number;\n    // (undocumented)\n    thickness: number;\n    // (undocumented)\n    x: number[];\n    // (undocumented)\n    y: number[];\n}\n\n// @public (undocumented)\nexport type SankeyOrientation = 'v' | 'h';\n```\n\n----------------------------------------\n\nTITLE: Version History and Dependency Updates in Markdown\nDESCRIPTION: Markdown formatted version history showing package updates, dependency bumps, and links to pull requests for the FluentUI global context package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/global-context/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Changes\n\n- chore: use package.json#files setup instead of npmignore for all v9 libraries ([PR #29734](https://github.com/microsoft/fluentui/pull/29734) by martinhochel@microsoft.com)\n- Bump @fluentui/react-context-selector to v9.1.42 ([PR #29800](https://github.com/microsoft/fluentui/pull/29800) by beachball)\n- Bump @fluentui/react-utilities to v9.15.2 ([PR #29800](https://github.com/microsoft/fluentui/pull/29800) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Vite Project\nDESCRIPTION: This code snippet runs the necessary npm commands to install project dependencies and start the development server for the FluentUI Vite.js project. It requires both Node.js and npm to be installed on the machine.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/starter-templates/src/react-components-vite/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Importing Table Components from Fluent UI\nDESCRIPTION: This snippet captures various imports related to table components from the '@fluentui/react-table' package, including Table, TableRow, and associated props and states necessary for table structure and rendering.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/etc/react-components.api.md#2025-04-20_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Table } from '@fluentui/react-table';\nimport { TableBody } from '@fluentui/react-table';\nimport { tableBodyClassName } from '@fluentui/react-table';\nimport { tableBodyClassNames } from '@fluentui/react-table';\nimport { TableBodyProps } from '@fluentui/react-table';\nimport { TableBodySlots } from '@fluentui/react-table';\nimport { TableBodyState } from '@fluentui/react-table';\nimport { TableCell } from '@fluentui/react-table';\nimport { TableCellActions } from '@fluentui/react-table';\nimport { tableCellActionsClassNames } from '@fluentui/react-table';\nimport { TableCellActionsProps } from '@fluentui/react-table';\nimport { TableCellActionsSlots } from '@fluentui/react-table';\nimport { TableCellActionsState } from '@fluentui/react-table';\nimport { tableCellClassName } from '@fluentui/react-table';\nimport { tableCellClassNames } from '@fluentui/react-table';\nimport { TableCellLayout } from '@fluentui/react-table';\nimport { tableCellLayoutClassNames } from '@fluentui/react-table';\nimport { TableCellLayoutProps } from '@fluentui/react-table';\nimport { TableCellLayoutSlots } from '@fluentui/react-table';\nimport { TableCellLayoutState } from '@fluentui/react-table';\nimport { TableCellProps } from '@fluentui/react-table';\nimport { TableCellSlots } from '@fluentui/react-table';\nimport { TableCellState } from '@fluentui/react-table';\nimport { tableClassName } from '@fluentui/react-table';\nimport { tableClassNames } from '@fluentui/react-table';\nimport { TableColumnDefinition } from '@fluentui/react-table';\nimport { TableColumnId } from '@fluentui/react-table';\nimport { TableColumnSizingOptions } from '@fluentui/react-table';\nimport { TableContextProvider } from '@fluentui/react-table';\nimport { TableContextValue } from '@fluentui/react-table';\nimport { TableContextValues } from '@fluentui/react-table';\nimport { TableFeaturePlugin } from '@fluentui/react-table';\nimport { TableFeaturesState } from '@fluentui/react-table';\nimport { TableHeader } from '@fluentui/react-table';\nimport { TableHeaderCell } from '@fluentui/react-table';\nimport { tableHeaderCellClassName } from '@fluentui/react-table';\nimport { tableHeaderCellClassNames } from '@fluentui/react-table';\nimport { TableHeaderCellProps } from '@fluentui/react-table';\nimport { TableHeaderCellSlots } from '@fluentui/react-table';\nimport { TableHeaderCellState } from '@fluentui/react-table';\nimport { tableHeaderClassName } from '@fluentui/react-table';\nimport { tableHeaderClassNames } from '@fluentui/react-table';\nimport { TableHeaderContextProvider } from '@fluentui/react-table';\nimport { TableHeaderProps } from '@fluentui/react-table';\nimport { TableHeaderSlots } from '@fluentui/react-table';\nimport { TableHeaderState } from '@fluentui/react-table';\nimport { TableProps } from '@fluentui/react-table';\nimport { TableResizeHandle } from '@fluentui/react-table';\nimport { tableResizeHandleClassNames } from '@fluentui/react-table';\nimport { TableRow } from '@fluentui/react-table';\nimport { tableRowClassName } from '@fluentui/react-table';\nimport { tableRowClassNames } from '@fluentui/react-table';\nimport { TableRowData } from '@fluentui/react-table';\nimport { TableRowId } from '@fluentui/react-table';\n```\n\n----------------------------------------\n\nTITLE: Rendering Icons with Chakra UI in HTML\nDESCRIPTION: Chakra UI implements its icons strictly as SVGs, as shown in this example. The SVGs are wrapped in minimal HTML and typically styled using CSS classes. Important attributes include viewBox and aria roles to ensure the icon is both styled effectively and remains accessible.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Icon.md#2025-04-20_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<svg viewBox=\"0 0 14 14\" focusable=\"false\" role=\"presentation\" class=\"css-h7g82p\">\n  <path\n    fill=\"currentColor\"\n    d=\"M2.20731,0.0127209 C2.1105,-0.0066419 1.99432,-0.00664663 1.91687,0.032079 C0.871279,0.438698 0.212942,1.92964 0.0580392,2.95587 C-0.426031,6.28627 2.20731,9.17133 4.62766,11.0689 C6.77694,12.7534 10.9012,15.5223 13.3409,12.8503 C13.6507,12.5211 14.0186,12.037 13.9993,11.553 C13.9412,10.7397 13.186,10.1588 12.6051,9.71349 C12.1598,9.38432 11.2304,8.47427 10.6495,8.49363 C10.1267,8.51299 9.79754,9.05515 9.46837,9.38432 L8.88748,9.96521 C8.79067,10.062 7.55145,9.24878 7.41591,9.15197 C6.91248,8.8228 6.4284,8.45491 6.00242,8.04829 C5.57644,7.64167 5.18919,7.19632 4.86002,6.73161 C4.7632,6.59607 3.96933,5.41495 4.04678,5.31813 C4.04678,5.31813 4.72448,4.58234 4.91811,4.2919 C5.32473,3.67229 5.63453,3.18822 5.16982,2.45243 C4.99556,2.18135 4.78257,1.96836 4.55021,1.73601 C4.14359,1.34875 3.73698,0.942131 3.27227,0.612963 C3.02055,0.419335 2.59457,0.0708094 2.20731,0.0127209 Z\"\n  ></path>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/scheme-utilities to v8.3.7\nDESCRIPTION: This note records the bump of '@fluentui/scheme-utilities' to version 8.3.7, enhancing the utilities related to theming in the library.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/theming-designer/CHANGELOG.md#2025-04-20_snippet_38\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/scheme-utilities to v8.3.7 ([PR #22966](https://github.com/microsoft/fluentui/pull/22966) by beachball)\n```\n\n----------------------------------------\n\nTITLE: TypeScript API Report for @fluentui/react-link\nDESCRIPTION: This is the complete API report for the @fluentui/react-link package, generated by API Extractor. It defines the public interface for the Link component including props, state, context, and utility functions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-link/library/etc/react-link.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BackgroundAppearanceContextValue } from '@fluentui/react-shared-contexts';\nimport type { ComponentProps } from '@fluentui/react-utilities';\nimport type { ComponentState } from '@fluentui/react-utilities';\nimport type { ForwardRefComponent } from '@fluentui/react-utilities';\nimport * as React_2 from 'react';\nimport type { Slot } from '@fluentui/react-utilities';\nimport type { SlotClassNames } from '@fluentui/react-utilities';\n\n// @public\nexport const Link: ForwardRefComponent<LinkProps>;\n\n// @public (undocumented)\nexport const linkClassNames: SlotClassNames<LinkSlots>;\n\n// @public (undocumented)\nexport const linkContextDefaultValue: LinkContextValue;\n\n// @public (undocumented)\nexport const LinkContextProvider: React_2.Provider<LinkContextValue | undefined>;\n\n// @public (undocumented)\nexport type LinkContextValue = {\n    inline?: boolean;\n};\n\n// @public (undocumented)\nexport type LinkProps = ComponentProps<LinkSlots> & {\n    appearance?: 'default' | 'subtle';\n    disabled?: boolean;\n    disabledFocusable?: boolean;\n    inline?: boolean;\n};\n\n// @public (undocumented)\nexport type LinkSlots = {\n    root: Slot<'a', 'button' | 'span'>;\n};\n\n// @public (undocumented)\nexport type LinkState = ComponentState<LinkSlots> & Required<Pick<LinkProps, 'appearance' | 'disabled' | 'disabledFocusable' | 'inline'>> & {\n    backgroundAppearance?: BackgroundAppearanceContextValue;\n};\n\n// @public\nexport const renderLink_unstable: (state: LinkState) => JSX.Element;\n\n// @public\nexport const useLink_unstable: (props: LinkProps, ref: React_2.Ref<HTMLAnchorElement | HTMLButtonElement | HTMLSpanElement>) => LinkState;\n\n// @public (undocumented)\nexport const useLinkContext: () => LinkContextValue;\n\n// @public\nexport const useLinkState_unstable: (state: LinkState) => LinkState;\n\n// @public (undocumented)\nexport const useLinkStyles_unstable: (state: LinkState) => LinkState;\n```\n\n----------------------------------------\n\nTITLE: Running Fluent UI Codemods using npx\nDESCRIPTION: This code snippet demonstrates the command to initiate the upgrade process of Fluent UI in your codebase. It uses npx to run the @fluentui/codemods package, applying relevant codemods if available. There are no additional dependencies required, simply run the command in the terminal.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/codemods/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx @fluentui/codemods\n```\n\n----------------------------------------\n\nTITLE: Version Management and Release Tracking for Fluent UI React Tree\nDESCRIPTION: Comprehensive changelog documenting version updates, minor changes, and patches for the @fluentui/react-tree package from versions 9.0.8 to 9.3.0\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tree/library/CHANGELOG.md#2025-04-20_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n## Version Release Notes\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-shared-contexts version\nDESCRIPTION: This patch updates the version of the `@fluentui/react-shared-contexts` dependency.  Bumping this package ensures that the `@fluentui/react-badge` component uses the latest features and bug fixes available in the shared contexts package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nBump @fluentui/react-shared-contexts to v9.20.1 ([PR #32840](https://github.com/microsoft/fluentui/pull/32840) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Creating a Fluent UI component in React Router 7/Remix\nDESCRIPTION: Example of using Fluent UI components in a React Router 7 or Remix route file.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/SSR/Remix.stories.mdx#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, Card, Title1, Body1 } from '@fluentui/react-components';\nimport { BookmarkRegular } from '@fluentui/react-icons';\n\nexport default function Index() {\n  return (\n    <Card style={{ maxWidth: '400px', margin: '20px' }}>\n      <Title1>Fluent UI + Remix</Title1>\n      <Body1>Welcome to your new app!</Body1>\n      <Button appearance=\"primary\" icon={<BookmarkRegular />}>\n        Click me\n      </Button>\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Base Avatar Class in TypeScript\nDESCRIPTION: Defines the base Avatar component class with initials and name properties.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport class BaseAvatar extends FASTElement {\n    constructor();\n    elementInternals: ElementInternals;\n    initials?: string | undefined;\n    name?: string | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Border Radius CSS Variables\nDESCRIPTION: CSS variable declarations for border radius tokens used in FluentUI components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nexport const borderRadiusCircular = \"var(--borderRadiusCircular)\";\nexport const borderRadiusLarge = \"var(--borderRadiusLarge)\";\nexport const borderRadiusMedium = \"var(--borderRadiusMedium)\";\nexport const borderRadiusNone = \"var(--borderRadiusNone)\";\nexport const borderRadiusSmall = \"var(--borderRadiusSmall)\";\nexport const borderRadiusXLarge = \"var(--borderRadiusXLarge)\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for React Calendar Compat Stories\nDESCRIPTION: This snippet shows how to configure the Storybook module.exports to include stories from the react-calendar-compat package. It specifies the glob patterns needed to find both MDX and TypeScript/TSX story files.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-calendar-compat/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-calendar-compat/stories/src/**/*.stories.mdx', '../packages/react-components/react-calendar-compat/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Version Numbers and Change Links\nDESCRIPTION: Markdown section headers showing version numbers with links to the GitHub repository and change comparisons\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## [5.9.7](https://github.com/microsoft/fluentui/tree/@fluentui/react-charting_v5.9.7)\n\nTue, 15 Mar 2022 07:45:54 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-charting_v5.9.6..@fluentui/react-charting_v5.9.7)\n```\n\n----------------------------------------\n\nTITLE: Using React.forwardRef with DialogTrigger in Fluent UI\nDESCRIPTION: This snippet demonstrates how to use React.forwardRef when creating custom components as children of DialogTrigger. This approach is necessary for proper ref forwarding and interaction with the DialogTrigger component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/stories/src/Dialog/DialogCustomTrigger.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nReact.forwardRef\n```\n\n----------------------------------------\n\nTITLE: Rendering Tooltip as a Description in JSX\nDESCRIPTION: Example of using Tooltip as a description for a button. This demonstrates the JSX structure for a description tooltip with an arrow.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tooltip/library/docs/Spec.md#2025-04-20_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<Tooltip content=\"Example description of the button\" relationship=\"description\" withArrow>\n  <button>The Button</button>\n</Tooltip>\n```\n\n----------------------------------------\n\nTITLE: Fix for shipping bundled and umd code to registry\nDESCRIPTION: This code snippet describes the fix for shipping bundled and umd code to registry.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluent2-theme/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: none\nCODE:\n```\nfix: ship bundled and umd code to registry ([PR #32212](https://github.com/microsoft/fluentui/pull/32212) by martinhochel@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Version Update Documentation in Markdown\nDESCRIPTION: Markdown formatted changelog entries documenting version updates, comparing changes between releases and listing dependency updates via patches and minor changes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-monaco-editor/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.6.9](https://github.com/microsoft/fluentui/tree/@fluentui/react-monaco-editor_v1.6.9)\n\nTue, 26 Jul 2022 07:39:35 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-monaco-editor_v1.6.8..@fluentui/react-monaco-editor_v1.6.9)\n\n### Patches\n\n- Bump @fluentui/react to v8.84.0 ([PR #24068](https://github.com/microsoft/fluentui/pull/24068) by beachball)\n- Bump @fluentui/react-hooks to v8.6.2 ([PR #24068](https://github.com/microsoft/fluentui/pull/24068) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Legacy Card Implementation with CardBody\nDESCRIPTION: Example showing the old implementation using Card and CardBody components from @fluentui/react-northstar package. Uses elevated Card with fitted CardBody wrapper.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Card/CardBody.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Card, CardBody } from '@fluentui/react-northstar';\n\nexport const CardBodyExample = () => (\n  <Card elevated>\n    <CardBody fitted>\n      <p>Lorem ipsum dolor sit amet.</p>\n    </CardBody>\n  </Card>\n);\n```\n\n----------------------------------------\n\nTITLE: Difficulties with overriding complex selectors in Griffel\nDESCRIPTION: Demonstrates the challenges consumers face when trying to override styles that use complicated nested selectors. Complex selectors make it harder for application code to customize library components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/styles-handbook.md#2025-04-20_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\n// On component's side (library code)\nmakeResetStyles({\n  '> .some-classname': {\n    '> .other-classname': {\n      ':hover': {\n        display: 'flex',\n        alignItems: 'center',\n      },\n    },\n  },\n});\n// 🟡 On consumer side (application code)\n//    Works, but it's hard for a consumer to guess it\nmakeStyles({\n  foo: {\n    '> .some-classname > .other-classname:hover': {\n      display: 'flex',\n      alignItems: 'center',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Checkbox Usage in Fluent UI v8\nDESCRIPTION: Demonstrates the basic usage of the Checkbox component in Fluent UI v8, showing checked, disabled, and indeterminate states.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Checkbox.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Checkbox } from '@fluentui/react';\n\nconst CheckboxV8BasicExample = () => {\n  return (\n    <>\n      <Checkbox checked label=\"Checked\" />\n      <Checkbox disabled label=\"Disabled\" />\n      <Checkbox indeterminate={true} label=\"Indeterminate\" />\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Bumping FluentUI React and Monaco Editor with PR\nDESCRIPTION: This snippet shows how to bump the version of both @fluentui/react and @fluentui/react-monaco-editor packages in a single pull request. The pull request number provides a direct link to the changes within the repository. This action is part of maintaining the dependencies for the project.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-docsite-components/CHANGELOG.md#2025-04-20_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n\"- Bump @fluentui/react to v8.112.0 ([PR #29334](https://github.com/microsoft/fluentui/pull/29334) by beachball)\",\n  \"- Bump @fluentui/react-monaco-editor to v1.7.129 ([PR #29334](https://github.com/microsoft/fluentui/pull/29334) by beachball)\"\n```\n\n----------------------------------------\n\nTITLE: React Component with mergeClasses\nDESCRIPTION: Example of using mergeClasses() function to deduplicate CSS classes\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/no-css-shorthands-in-make-styles.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  //                     👇 skips \"a\", returns only \"b c\"\n  return <div className={mergeClasses('a', 'b', 'c')}>Hello world</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tabster Interface in TypeScript\nDESCRIPTION: Defines the main Tabster interface with properties for various APIs and states related to focus management and keyboard navigation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tabster/etc/react-tabster.api.md#2025-04-20_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\ninterface Tabster {\n    // @internal (undocumented)\n    core: TabsterCore;\n    // (undocumented)\n    focusable: FocusableAPI;\n    // (undocumented)\n    focusedElement: FocusedElementState;\n    // (undocumented)\n    keyboardNavigation: KeyboardNavigationState;\n    // (undocumented)\n    root: RootAPI;\n    // (undocumented)\n    uncontrolled: UncontrolledAPI;\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for FluentUI React Radio v9.2.35\nDESCRIPTION: Latest version changelog showing package updates and dependency version bumps including changes to npm scripts and various FluentUI package dependencies.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-radio/library/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.2.35](https://github.com/microsoft/fluentui/tree/@fluentui/react-radio_v9.2.35)\n\nMon, 11 Nov 2024 10:00:52 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-radio_v9.2.34..@fluentui/react-radio_v9.2.35)\n\n### Patches\n\n- chore: replace npm-scripts and just-scrtips with nx inferred tasks ([PR #33074](https://github.com/microsoft/fluentui/pull/33074) by martinhochel@microsoft.com)\n- Bump @fluentui/react-field to v9.1.79 ([PR #33238](https://github.com/microsoft/fluentui/pull/33238) by beachball)\n- Bump @fluentui/react-jsx-runtime to v9.0.46 ([PR #33238](https://github.com/microsoft/fluentui/pull/33238) by beachball)\n- Bump @fluentui/react-label to v9.1.78 ([PR #33238](https://github.com/microsoft/fluentui/pull/33238) by beachball)\n- Bump @fluentui/react-shared-contexts to v9.21.0 ([PR #33238](https://github.com/microsoft/fluentui/pull/33238) by beachball)\n- Bump @fluentui/react-tabster to v9.23.0 ([PR #33238](https://github.com/microsoft/fluentui/pull/33238) by beachball)\n- Bump @fluentui/react-theme to v9.1.22 ([PR #33238](https://github.com/microsoft/fluentui/pull/33238) by beachball)\n- Bump @fluentui/react-utilities to v9.18.17 ([PR #33238](https://github.com/microsoft/fluentui/pull/33238) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories for Fluentui Component Selector Preview\nDESCRIPTION: This code snippet demonstrates how to configure the stories globs in the Storybook configuration file to include stories from the component-selector-preview package. It specifies the file paths for both MDX and TypeScript/TSX story files.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/component-selector-preview/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/component-selector-preview/stories/src/**/*.stories.mdx', '../packages/react-components/component-selector-preview/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.4.0\nDESCRIPTION: Changelog entry documenting minor changes to Collapse component and motion scale refactoring.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-motion-components-preview/library/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.4.0](https://github.com/microsoft/fluentui/tree/@fluentui/react-motion-components-preview_v0.4.0)\n\nMon, 09 Dec 2024 17:38:13 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-motion-components-preview_v0.3.2..@fluentui/react-motion-components-preview_v0.4.0)\n\n### Minor changes\n\n- feat(Collapse): add margin to whitespace animation ([PR #33405](https://github.com/microsoft/fluentui/pull/33405) by robertpenner@microsoft.com)\n\n### Patches\n\n- feat(motion): Refactor scale, migrate to new variant structure ([PR #33341](https://github.com/microsoft/fluentui/pull/33341) by olkatruk@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Starting the React 18 Test Application for Fluent UI v8\nDESCRIPTION: This command starts the application for testing and triaging Fluent UI v8 components in a React 18 environment. It uses a simple CRA style App.tsx file.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/react-18-tests-v8/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# yarn start\n```\n\n----------------------------------------\n\nTITLE: Dry Run Migration Command - Shell\nDESCRIPTION: This command simulates the package migration process without writing any changes to the file system. It is useful for verifying what will be created prior to actual migration.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/migrate-v8-pkg/README.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:migrate-v8-pkg --dry-run\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for FluentUI React Toast Stories\nDESCRIPTION: Configuration snippet for including FluentUI React Toast stories in Storybook's configuration file. Specifies the file globs for both MDX and TypeScript/TSX story files.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-toast/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-toast/stories/src/**/*.stories.mdx', '../packages/react-components/react-toast/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Component Inside a Package\nDESCRIPTION: Command to create a new component within an existing package. This creates the necessary folder structure and boilerplate files for a component implementation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/component-implementation-guide.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# NOTE: execute this command from monorepo root\n$ yarn create-component\n```\n\n----------------------------------------\n\nTITLE: Bumping package versions in FluentUI React Switch\nDESCRIPTION: This code snippet represents a series of patch updates where the versions of dependent packages are bumped. This includes packages such as @fluentui/react-field, @fluentui/react-jsx-runtime, @fluentui/react-label, @fluentui/react-tabster, and @fluentui/react-utilities. Each bump is associated with a pull request.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-switch/library/CHANGELOG.md#2025-04-20_snippet_9\n\nLANGUAGE: none\nCODE:\n```\n\"- Bump @fluentui/react-field to v9.1.20 ([PR #28957](https://github.com/microsoft/fluentui/pull/28957) by beachball)\n- Bump @fluentui/react-jsx-runtime to v9.0.1 ([PR #28957](https://github.com/microsoft/fluentui/pull/28957) by beachball)\n- Bump @fluentui/react-label to v9.1.28 ([PR #28957](https://github.com/microsoft/fluentui/pull/28957) by beachball)\n- Bump @fluentui/react-tabster to v9.12.3 ([PR #28957](https://github.com/microsoft/fluentui/pull/28957) by beachball)\n- Bump @fluentui/react-utilities to v9.11.2 ([PR #28957](https://github.com/microsoft/fluentui/pull/28957) by beachball)\"\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-theme version\nDESCRIPTION: This patch updates the version of the `@fluentui/react-theme` dependency.  Bumping this package ensures that the `@fluentui/react-badge` component uses the latest features and bug fixes available in the theme package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nBump @fluentui/react-theme to v9.1.21 ([PR #32999](https://github.com/microsoft/fluentui/pull/32999) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Version Change Entry Format\nDESCRIPTION: Standard format used for version entries in the changelog, showing version number, date, and comparison link\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-toolbar/library/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.4.4](https://github.com/microsoft/fluentui/tree/@fluentui/react-toolbar_v9.4.4)\n\nWed, 16 Apr 2025 19:42:18 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-toolbar_v9.4.3..@fluentui/react-toolbar_v9.4.4)\n```\n\n----------------------------------------\n\nTITLE: Prioritization Table for Build Shield Responsibilities in Markdown\nDESCRIPTION: This markdown table outlines the prioritization of different types of build issues that the build shield is responsible for addressing. It categorizes issues by type and assigns priority levels, helping the build shield to focus on the most critical problems first.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/shared/build-system/04-build-shield.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Issue type                                            | Priority                                                                                                            |\n| ----------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- |\n| Release build failed                                  | 🔥 Investigate ASAP (fix issue, or retry if intermittent)                                                           |\n| CI build fails > 50%                                  | 🔥 Fix ASAP (or notify team if external issue)                                                                      |\n| PR builds fail > 50% on non-user errors (CI okay)     | 🔥 ^                                                                                                                |\n| Local builds broken for most/all of team (PR/CI okay) | 🔥 Fix or at least find workaround ASAP                                                                             |\n| Published package broken                              | 🔥 Fix ASAP (usually due to dep issue or missing file)                                                              |\n| CI build intermittently broken                        | ⚠️ Try to investigate/fix (greater frequency => higher priority), or file an issue if it will take significant time |\n| PR intermittently fail on non-user errors (CI okay)   | ⚠️ ^                                                                                                                |\n| Local builds broken for one person/scenario           | ⚠️ ^ but at least get them unblocked                                                                                |\n| v7/8 website release failed (uncommon)                | ⚠️ Re-run failed stage, or see internal wiki                                                                        |\n```\n\n----------------------------------------\n\nTITLE: Version Header in Markdown\nDESCRIPTION: Header formatting for version numbers in the changelog\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-provider/library/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.0.0-beta.4](https://github.com/microsoft/fluentui/tree/@fluentui/react-provider_v9.0.0-beta.4)\n```\n\n----------------------------------------\n\nTITLE: FluentUI DatePicker Bug Fix Notes\nDESCRIPTION: Bug fix notes for DatePicker component, including accessibility improvements for voice control and date handling optimizations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-datepicker-compat/library/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- fix: DatePicker renders a semantic button for voice control ([PR #30499](https://github.com/microsoft/fluentui/pull/30499) by sarah.higley@microsoft.com)\n- fix: remove new Date() from prop destructuring ([PR #30519](https://github.com/microsoft/fluentui/pull/30519) by seanmonahan@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Version History Entries in Markdown\nDESCRIPTION: Markdown-formatted changelog entries tracking version updates, patches, and dependency changes for the FluentUI api-docs package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/api-docs/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [8.1.9](https://github.com/microsoft/fluentui/tree/@fluentui/api-docs_v8.1.9)\n\nTue, 18 May 2021 07:34:38 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/api-docs_v8.1.8..@fluentui/api-docs_v8.1.9)\n\n### Patches\n\n- Bump @fluentui/react to v8.14.10\n```\n\n----------------------------------------\n\nTITLE: Version Information Block\nDESCRIPTION: Markdown block showing version information and dependencies bumped in a specific release\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-textarea/library/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patches\n\n- Bump @fluentui/react-field to v9.1.33 ([commit](https://github.com/microsoft/fluentui/commit/67b6cc6534e684ed32704dc6c0faee632bb840dc) by beachball)\n- Bump @fluentui/react-utilities to v9.14.0 ([commit](https://github.com/microsoft/fluentui/commit/67b6cc6534e684ed32704dc6c0faee632bb840dc) by beachball)\n- Bump @fluentui/react-jsx-runtime to v9.0.13 ([commit](https://github.com/microsoft/fluentui/commit/67b6cc6534e684ed32704dc6c0faee632bb840dc) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Configuring TabList Appearance in Fluent UI React\nDESCRIPTION: This code snippet illustrates how to set the appearance of the TabList in Fluent UI React. It includes examples of transparent and subtle appearances, which modify the tab styles when rendered.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tabs/library/docs/Spec.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<TabList>\n  {/* ... */}\n</TabList>\n\n<TabList appearance=\"transparent\">\n  {/* ... */}\n</TabList>\n\n<TabList appearance=\"subtle\">{/* ... */}</TabList>\n```\n\n----------------------------------------\n\nTITLE: Selection State with Checkboxes - TSX\nDESCRIPTION: This snippet provides an example of how to manage selection states in the menu using checkboxes, demonstrating state management with React.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/library/docs/Spec.md#2025-04-20_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nconst trigger = <button> Open menu </button>\nconst [selectedItems, setSelectedItems] = React.useState([]);\n\n// basic checkbox example\nconst menuCheckbox = (\n  <Menu\n    kind=\"checkbox\"\n    selectedItems={selectedItems}\n    onSelectionChange={setSeelctedItems}\n  >\n    <MenuTrigger><button>Opem menu</button></MenuTrigger>\n    <MenuList>\n      <MenuItemCheckbox name=\"checkbox1\" value={1}>Option 1</MenuItemCheckbox>\n      <MenuItemCheckbox name=\"checkbox1\" value={2}>Option 2</MenuItemCheckbox>\n      <MenuItemCheckbox name=\"checkbox2\" value={3}>Option 3</MenuItemCheckbox>\n    </MenuList>\n  <Menu>\n)\n\n// leverage MenuGroup for different selection groups\nconst menuSelectableSections = (\n  <Menu\n    selectedItems={selectedItems}\n    onSelectionChange={setSeelctedItems}\n  >\n    <MenuTrigger><button>Opem menu</button></MenuTrigger>\n    <MenuList>\n      <MenuGroup title=\"Checkbox section\">\n        <MenuItemCheckbox name=\"checkbox\" value={1}>Option 1</MenuItemCheckbox>\n        <MenuItemCheckbox name=\"checkbox\" value={2}>Option 2</MenuItemCheckbox>\n        <MenuItemCheckbox name=\"checkbox\" value={3}>Option 3</MenuItemCheckbox>\n      </MenuGroup>\n      <MenuGroup title=\"Radio section\">\n        <MenuItemRadio name=\"radio\" value={1}>Option 1</MenuItemRadio>\n        <MenuItemRadio name=\"radio\" value={2}>Option 2</MenuItemRadio>\n        <MenuItemRadio name=\"radio\" value={3}>Option 3</MenuItemRadio>\n      </MenuGroup>\n    </MenuList>\n  <Menu>\n)\n```\n\n----------------------------------------\n\nTITLE: Define Inner Padding for Grouped Bar Chart\nDESCRIPTION: Defines a constant representing the inner padding for bars within a group in a grouped bar chart. This padding determines the spacing between bars within each group.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/docs/implementing-2-to-1-spacing.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst X1_INNER_PADDING = 0.1;\n```\n\n----------------------------------------\n\nTITLE: Defining IContextualMenuItemProps Interface\nDESCRIPTION: Defines the `IContextualMenuItemProps` interface, which specifies the properties for a ContextualMenuItem component.  It extends `React_2.HTMLAttributes<IContextualMenuItemProps>` and includes properties for class names, component refs, dismissMenu callbacks, submenu targeting, item index, the item itself, and styles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_83\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IContextualMenuItemProps extends React_2.HTMLAttributes<IContextualMenuItemProps> {\n    className?: string;\n    classNames: IMenuItemClassNames;\n    componentRef?: IRefObject<IContextualMenuRenderItem>;\n    dismissMenu?: (ev?: any, dismissAll?: boolean) => void;\n    dismissSubMenu?: () => void;\n    getSubmenuTarget?: () => HTMLElement | undefined;\n    hasIcons: boolean | undefined;\n    index: number;\n    item: IContextualMenuItem;\n    onCheckmarkClick?: (item: IContextualMenuItem, ev: React_2.MouseEvent<HTMLElement>) => void;\n    openSubMenu?: (item: any, target: HTMLElement) => void;\n    styles?: IStyleFunctionOrObject<IContextualMenuItemStyleProps, IContextualMenuItemStyles>;\n    theme?: ITheme;\n}\n```\n\n----------------------------------------\n\nTITLE: Define OffsetObject type\nDESCRIPTION: Defines a type called `OffsetObject` which contains `crossAxis` and `mainAxis` properties as numbers. This type allows specifying the offset as a 2D vector.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-positioning/etc/react-positioning.api.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type OffsetObject = {\n    crossAxis?: number;\n    mainAxis: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Current Keyboard Key Import Example\nDESCRIPTION: Demonstrates current implementation using @fluentui/keyboard-key package that adds 2kb minified to bundle size.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/handling-keyboard-keys.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ArrowLeftKey } from '@fluentui/keyboard-key';\n\nconsole.log(ArrowLeftKey);\n```\n\n----------------------------------------\n\nTITLE: Configuring FluentUI Bar Chart Properties\nDESCRIPTION: Available configuration options for customizing the bar chart including color scales, single color mode, callout rendering, and label display modes. Supports both string and numeric data points with options for label truncation and axis expansion.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-examples/src/react-charting/HorizontalBarChartWithAxis/docs/HorizontalBarChartWithAxisBestPractices.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  colors: string[], // Define color scale for bars\n  useSingleColor: boolean, // Use single color for all bars\n  onRenderCalloutPerHorizontalBar: (props) => ReactNode, // Custom callout renderer\n  showYAxisLablesTooltip: boolean, // Enable y-axis label tooltips\n  expandYAxisLabels: boolean // Expand y-axis to show full labels\n}\n```\n\n----------------------------------------\n\nTITLE: Bumping FluentUI React Monaco Editor Version with PR\nDESCRIPTION: This snippet shows how to bump the version of the @fluentui/react-monaco-editor package. The pull request number provides a direct link to the change within the repository. This action is part of maintaining the dependencies for the project.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-docsite-components/CHANGELOG.md#2025-04-20_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n\"- Bump @fluentui/react-monaco-editor to v1.7.132 ([PR #29418](https://github.com/microsoft/fluentui/pull/29418) by beachball)\"\n```\n\n----------------------------------------\n\nTITLE: Equivalent Label Usage in FluentUI v9 Spinner\nDESCRIPTION: Example showing how to achieve the same label position in v9 Spinner by explicitly setting labelPosition to 'below', as the default in v9 is 'after'.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Loader.stories.mdx#2025-04-20_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Spinner } from '@fluentui/react-components';\nconst Component = () => <Spinner label=\"Loading\" labelPosition=\"below\" />;\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Component in TypeScript\nDESCRIPTION: Defines an Image component with properties for block, bordered, fit, shadow and shape styling\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_35\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Image_2 extends FASTElement {\n    block?: boolean;\n    bordered?: boolean;\n    fit?: ImageFit;\n    shadow?: boolean;\n    shape?: ImageShape;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Theming Utilities for Fluent UI\nDESCRIPTION: Provides utility functions for theme management in Fluent UI. The setTheme function applies a theme to a DOM node, while setThemeFor is a deprecated function that applies a theme to a specific HTML element.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_47\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function setTheme(theme: Theme | null, node?: Document | HTMLElement): void;\n\nexport function setThemeFor(element: HTMLElement, theme: Theme | null): void;\n```\n\n----------------------------------------\n\nTITLE: Storybook Meta Configuration\nDESCRIPTION: Meta component configuration for the Storybook documentation page, setting the page title in the documentation hierarchy.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Accessibility/AccessibleComponents.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta title=\"Concepts/Developer/Accessibility/Components Overview\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Grow for Stack.Item using make-styles\nDESCRIPTION: This snippet shows how to set the grow property for a Stack.Item component using the make-styles approach.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Flex/Flex.StackItem.stories.mdx#2025-04-20_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nmakeStyles({\n  root: {\n    flexGrow: 1,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Breadcrumb Package Version Update Log\nDESCRIPTION: Markdown formatted changelog entries showing version updates and patches for the FluentUI React Breadcrumb component and its dependencies.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-breadcrumb/library/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patches\n\n- Bump @fluentui/react-aria to v9.13.2 ([PR #32067](https://github.com/microsoft/fluentui/pull/32067) by beachball)\n- Bump @fluentui/react-button to v9.3.87 ([PR #32067](https://github.com/microsoft/fluentui/pull/32067) by beachball)\n- Bump @fluentui/react-link to v9.2.28 ([PR #32067](https://github.com/microsoft/fluentui/pull/32067) by beachball)\n- Bump @fluentui/react-shared-contexts to v9.20.0 ([PR #32067](https://github.com/microsoft/fluentui/pull/32067) by beachball)\n- Bump @fluentui/react-tabster to v9.22.3 ([PR #32067](https://github.com/microsoft/fluentui/pull/32067) by beachball)\n- Bump @fluentui/react-utilities to v9.18.13 ([PR #32067](https://github.com/microsoft/fluentui/pull/32067) by beachball)\n- Bump @fluentui/react-jsx-runtime to v9.0.42 ([PR #32067](https://github.com/microsoft/fluentui/pull/32067) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Replacing Entire Slot Content with Render Function in React TSX\nDESCRIPTION: Example of completely replacing a slot's content using a render function. This technique allows bypassing the default slot container element and provides full control over the rendered content.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Slots/Slots.stories.mdx#2025-04-20_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst renderBigLetterIcon (Component, props) => {\n  return <b>B</b>;\n};\n\n<Button icon={{ children: renderBigLetterIcon }}>Bold</Button>;\n```\n\n----------------------------------------\n\nTITLE: TagPickerOnOpenChangeData Type\nDESCRIPTION: Defines the type for the data emitted when the TagPicker's open state changes. It includes the new open state and event data for either a click or keydown event.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport type TagPickerOnOpenChangeData = {\n    open: boolean;\n} & (EventData<'click', React_2.MouseEvent<HTMLDivElement>> | EventData<'keydown', React_2.KeyboardEvent<HTMLDivElement>>);\"\n```\n\n----------------------------------------\n\nTITLE: Fluent UI Navigation Hamburger Component\nDESCRIPTION: This snippet declares the Hamburger component utilizing button properties, facilitating menu display within a navigation. It includes state management and class names for custom styling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-nav-preview/library/etc/react-nav-preview.api.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const Hamburger: ForwardRefComponent<HamburgerProps>;\n\n// @public (undocumented)\nexport const hamburgerClassNames: SlotClassNames<ButtonSlots>;\n\n// @public\nexport type HamburgerProps = ButtonProps;\n\n// @public\nexport type HamburgerState = ButtonState;\n```\n\n----------------------------------------\n\nTITLE: Version Release Details in Markdown\nDESCRIPTION: Markdown formatted changelog entries detailing version updates, dependency changes, and bug fixes for the FluentUI React Input component\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-input/library/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Patches\n\n- chore: Update Griffel to v1.5.7. ([PR #27925](https://github.com/microsoft/fluentui/pull/27925) by seanmonahan@microsoft.com)\n- Bump @fluentui/react-field to v9.1.6 ([PR #28054](https://github.com/microsoft/fluentui/pull/28054) by beachball)\n- Bump @fluentui/react-jsx-runtime to v9.0.0-alpha.6 ([PR #28054](https://github.com/microsoft/fluentui/pull/28054) by beachball)\n- Bump @fluentui/react-utilities to v9.9.2 ([PR #28054](https://github.com/microsoft/fluentui/pull/28054) by beachball)\n- Bump @fluentui/react-conformance-griffel to v9.0.0-beta.22 ([PR #28054](https://github.com/microsoft/fluentui/pull/28054) by beachball)\n- Bump @fluentui/react-text to v9.3.12 ([PR #28054](https://github.com/microsoft/fluentui/pull/28054) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-theme version\nDESCRIPTION: This patch updates the version of the `@fluentui/react-theme` dependency.  Bumping this package ensures that the `@fluentui/react-badge` component uses the latest features and bug fixes available in the theme package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nBump @fluentui/react-theme to v9.1.23 ([PR #33372](https://github.com/microsoft/fluentui/pull/33372) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.96.3\nDESCRIPTION: This documentation entry captures the elevation of the @fluentui/react package to version 8.96.3, contributing to the library's ongoing updates.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/azure-themes/CHANGELOG.md#2025-04-20_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.96.3 ([PR #24990](https://github.com/microsoft/fluentui/pull/24990) by beachball)\n```\n\n----------------------------------------\n\nTITLE: AnnouncedBase Component Definition in TypeScript\nDESCRIPTION: Defines the AnnouncedBase class component that implements the base functionality for screen reader announcements. It includes default props and rendering logic.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport class AnnouncedBase extends React_2.Component<IAnnouncedProps> {\n    // (undocumented)\n    static defaultProps: Partial<IAnnouncedProps>;\n    // (undocumented)\n    render(): JSX.Element;\n}\n```\n\n----------------------------------------\n\nTITLE: Direction-specific animations with @noflip\nDESCRIPTION: Shows how to create direction-specific animations by using @noflip to prevent automatic RTL flipping, allowing explicit control over animation directions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/styles-handbook.md#2025-04-20_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeStyles } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  ltr: {\n    animationName: {\n      '0%': { left: '0% /* @noflip */' },\n      '100%': { left: '100% /* @noflip */' },\n    },\n  },\n  rtl: {\n    animationName: {\n      '100%': { right: '-100% /* @noflip */' },\n      '0%': { right: '100% /* @noflip */' },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using TextArea Component in React\nDESCRIPTION: Example of how to implement the TextArea component with className, id, defaultValue, and onChange handler. The onChange handler captures and logs the textarea's value.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-textarea/library/docs/Spec.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<TextArea\n  className=\"textAreaClassName\"\n  id=\"textarea-1\"\n  defaultValue=\"This is a TextArea\"\n  onChange={(ev, data) => console.log(data.value)}\n/>\n```\n\n----------------------------------------\n\nTITLE: Migrating Namespaced Styles with Conditional Props\nDESCRIPTION: Example showing how to migrate complex namespaced styles with conditional properties from the old API.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Card/Card.stories.mdx#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// in COMPONENT_NAME.tsx\nimport { Card, useUIProviderContext } from '@fluentui/react-northstar';\n\nexport const Component = props => {\n  const { vars } = useUIProviderContext();\n  const { enableUsingChatListGroupTitleAsHeader } = props;\n  return (\n    <Card\n      variables={vars('flyout', [\n        {\n          name: 'filterCard',\n          props: {\n            enableUsingChatListGroupTitleAsHeader,\n          },\n        },\n      ])}\n    />\n  );\n};\n\n// in Card-namespace-flyout.ts\nexport default {\n  root: {\n    filterCard: ({ variableProps: { enableUsingChatListGroupTitleAsHeader } }) => ({\n      ...(enableUsingChatListGroupTitleAsHeader && {\n        height: '3rem',\n        width: '8rem',\n        minWidth: '8rem',\n      }),\n    }),\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Version History Entry Format\nDESCRIPTION: Standard version entry format showing version number, date, and changes comparison link.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [5.23.59](https://github.com/microsoft/fluentui/tree/@fluentui/react-charting_v5.23.59)\n\nThu, 13 Mar 2025 07:20:52 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-charting_v5.23.58..@fluentui/react-charting_v5.23.59)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Context Selector Type Definitions and Functions\nDESCRIPTION: Defines TypeScript types and functions for implementing context selectors in React. Includes type definitions for Context, ContextSelector, ContextValue, ContextValues, and utility functions for context management.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-context-selector/etc/react-context-selector.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React_2 from 'react';\n\n// @internal (undocumented)\nexport type Context<Value> = React_2.Context<Value> & {\n    Provider: React_2.FC<React_2.ProviderProps<Value>>;\n    Consumer: never;\n};\n\n// @public (undocumented)\nexport type ContextSelector<Value, SelectedValue> = (value: Value) => SelectedValue;\n\n// @internal (undocumented)\nexport type ContextValue<Value> = {\n    listeners: ((payload: readonly [ContextVersion, Value]) => void)[];\n    value: React_2.MutableRefObject<Value>;\n    version: React_2.MutableRefObject<ContextVersion>;\n};\n\n// @internal (undocumented)\nexport type ContextValues<Value> = ContextValue<Value> & {\n    listeners: ((payload: readonly [ContextVersion, Record<string, Value>]) => void)[];\n};\n\n// @internal (undocumented)\nexport type ContextVersion = number;\n\n// @internal (undocumented)\nexport const createContext: <Value>(defaultValue: Value) => Context<Value>;\n\n// @internal\nexport const useContextSelector: <Value, SelectedValue>(context: Context<Value>, selector: ContextSelector<Value, SelectedValue>) => SelectedValue;\n\n// @internal\nexport function useHasParentContext<Value>(context: Context<Value>): boolean;\n```\n\n----------------------------------------\n\nTITLE: Extended Persona Props Interface in TypeScript\nDESCRIPTION: This interface defines the structure for extended persona props, including various attributes like imageUrl, presence, and text fields to represent user data effectively. It is essential for ensuring that persona data adheres to this structure during implementation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/example-data/etc/example-data.api.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal\nexport interface IExampleExtendedPersonaProps {\n    // (undocumented)\n    canExpand?: boolean;\n    // (undocumented)\n    imageInitials?: string;\n    // (undocumented)\n    imageUrl?: string;\n    // (undocumented)\n    isValid: boolean;\n    // (undocumented)\n    optionalText?: string;\n    // (undocumented)\n    presence?: number;\n    // (undocumented)\n    secondaryText?: string;\n    // (undocumented)\n    tertiaryText?: string;\n    // (undocumented)\n    text?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: SuggestionActionType Enumeration in FluentUI\nDESCRIPTION: Defines the types of actions that can be performed within suggestion components. Includes options for no action, forcing resolution, or searching for more suggestions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_266\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport enum SuggestionActionType {\n    forceResolve = 1,\n    none = 0,\n    searchMore = 2\n}\n```\n\n----------------------------------------\n\nTITLE: Accessibility Testing (Manual)\nDESCRIPTION: This snippet describes Accessibility testing which is done manually via E2E tests. Research is being conducted on automation of these tests and is tracked in issue #17243.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/testing.md#2025-04-20_snippet_5\n\nLANGUAGE: none\nCODE:\n```\n\"Accessibility\"\n\n```\n\nLANGUAGE: none\nCODE:\n```\nWe do not automate accessibility testing as of the writing of this document. E2E tests are used to ensure the component's accessibility requirements are met.\nResearch on accessibility testing automation is being done and tracked in [issue #17243](https://github.com/microsoft/fluentui/issues/17243).\n```\n\n----------------------------------------\n\nTITLE: Defining WeeklyDayPicker Component Interfaces in TypeScript for FluentUI\nDESCRIPTION: Defines interfaces for the WeeklyDayPicker component including props, strings, and styles. This date picker component displays and allows selection of days within a week or multiple weeks.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_227\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IWeeklyDayPicker {\n    // (undocumented)\n    focus(): void;\n}\n\n// @public (undocumented)\nexport type IWeeklyDayPickerNavigationIcons = Pick<ICalendarNavigationIcons, 'leftNavigation' | 'rightNavigation'>;\n\n// @public (undocumented)\nexport interface IWeeklyDayPickerProps extends IBaseProps<IWeeklyDayPicker>, Partial<ICalendarDayGridProps> {\n    animationDirection?: AnimationDirection;\n    className?: string;\n    componentRef?: IRefObject<IWeeklyDayPicker>;\n    dateTimeFormatter?: IDateFormatting;\n    firstDayOfWeek?: DayOfWeek;\n    initialDate?: Date;\n    maxDate?: Date;\n    minDate?: Date;\n    navigationIcons?: IWeeklyDayPickerNavigationIcons;\n    onNavigateDate?: (date: Date) => void;\n    onSelectDate?: (date: Date) => void;\n    restrictedDates?: Date[];\n    showFullMonth?: boolean;\n    strings: IWeeklyDayPickerStrings;\n    styles?: IStyleFunctionOrObject<IWeeklyDayPickerStyleProps, IWeeklyDayPickerStyles>;\n    theme?: ITheme;\n    today?: Date;\n    weeksToShow?: number;\n}\n\n// @public (undocumented)\nexport interface IWeeklyDayPickerStrings extends ICalendarStrings {\n    nextWeekAriaLabel?: string;\n    prevWeekAriaLabel?: string;\n}\n\n// @public (undocumented)\nexport interface IWeeklyDayPickerStyleProps extends ICalendarDayGridStyleProps {\n    className?: string;\n    theme: ITheme;\n}\n\n// @public (undocumented)\nexport interface IWeeklyDayPickerStyles extends Partial<ICalendarDayGridStyles> {\n    disabledStyle: IStyle;\n    navigationIconButton: IStyle;\n    root: IStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Styles on Application Start\nDESCRIPTION: This snippet illustrates how to set the custom styling hooks when initializing a React application. It encapsulates the customization process in a way that integrates seamlessly with the application’s render method.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/custom-styling.md#2025-04-20_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nconst rootElement = document.getElementById('root');\nconst root = createRoot(rootElement!);\n\nfuiCustomizer.useButtonCustomStyles = useFancyButtonStyles;\n\nroot.render(<App />);\n```\n\n----------------------------------------\n\nTITLE: Defining Package Name for FluentUI React Toast\nDESCRIPTION: Package name declaration for the FluentUI React Toast component module that specifies this is a development/testing component not meant for production use.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-toast/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @fluentui/react-toast\n```\n\n----------------------------------------\n\nTITLE: Defining Color Constants in TypeScript\nDESCRIPTION: Exports constants for transparent background and stroke colors using CSS custom properties.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const colorTransparentBackgroundHover = \"var(--colorTransparentBackgroundHover)\";\n\n// @public\nexport const colorTransparentBackgroundPressed = \"var(--colorTransparentBackgroundPressed)\";\n\n// @public\nexport const colorTransparentBackgroundSelected = \"var(--colorTransparentBackgroundSelected)\";\n\n// @public\nexport const colorTransparentStroke = \"var(--colorTransparentStroke)\";\n\n// @public\nexport const colorTransparentStrokeDisabled = \"var(--colorTransparentStrokeDisabled)\";\n\n// @public\nexport const colorTransparentStrokeInteractive = \"var(--colorTransparentStrokeInteractive)\";\n```\n\n----------------------------------------\n\nTITLE: Watching Tests on File Change in an Individual Package\nDESCRIPTION: This command enables watching of test files in an individual package. It automatically runs tests again whenever a file changes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/CONTRIBUTING.md#2025-04-20_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nyarn test:watch            # test on file change\n```\n\n----------------------------------------\n\nTITLE: Defining Tree Styles Interface in TypeScript\nDESCRIPTION: This interface, ITreeStyles, outlines various styling options for rendering different parts of a tree chart, such as nodes and links, utilizing a thematic approach.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/etc/react-charting.api.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface ITreeStyles {\n    link: IStyle;\n    rectBodyText: IStyle;\n    rectMetricText: IStyle;\n    rectNode: IStyle;\n    rectSubText: IStyle;\n    rectText: IStyle;\n    root: IStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-theme version\nDESCRIPTION: This patch updates the version of the `@fluentui/react-theme` dependency.  Bumping this package ensures that the `@fluentui/react-badge` component uses the latest features and bug fixes available in the theme package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nBump @fluentui/react-theme to v9.1.24 ([PR #33468](https://github.com/microsoft/fluentui/pull/33468) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-theme version\nDESCRIPTION: This patch updates the version of the `@fluentui/react-theme` dependency.  Bumping this package ensures that the `@fluentui/react-badge` component uses the latest features and bug fixes available in the theme package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nBump @fluentui/react-theme to v9.1.20 ([PR #32840](https://github.com/microsoft/fluentui/pull/32840) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Generating Migration Package - Shell\nDESCRIPTION: This command generates a migration package for converged packages using the Fluent UI workspace plugin. It is the primary method for starting the migration process.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/migrate-converged-pkg/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:migrate-converged-pkg ...\n```\n\n----------------------------------------\n\nTITLE: Rendering Icons with Ant Design in HTML\nDESCRIPTION: This snippet demonstrates how Ant Design implements icons using SVG within an <i> tag in an HTML document. It highlights the use of the 'aria-label' attribute to improve accessibility and the importance of setting appropriate viewBox and focusable properties in SVG elements. No external dependencies are necessary, and the primary constraint is support limited to SVG icons.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Icon.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<i aria-label=\"icon: home\" class=\"anticon anticon-home\">\n  <svg\n    viewBox=\"64 64 896 896\"\n    focusable=\"false\"\n    class=\"\"\n    data-icon=\"home\"\n    width=\"1em\"\n    height=\"1em\"\n    fill=\"currentColor\"\n    aria-hidden=\"true\"\n  >\n    <path\n      d=\"M946.5 505L560.1 118.8l-25.9-25.9a31.5 31.5 0 0 0-44.4 0L77.5 505a63.9 63.9 0 0 0-18.8 46c.4 35.2 29.7 63.3 64.9 63.3h42.5V940h691.8V614.3h43.4c17.1 0 33.2-6.7 45.3-18.8a63.6 63.6 0 0 0 18.7-45.3c0-17-6.7-33.1-18.8-45.2zM568 868H456V664h112v204zm217.9-325.7V868H632V640c0-22.1-17.9-40-40-40H432c-22.1 0-40 17.9-40 40v228H238.1V542.3h-96l370-369.7 23.1 23.1L882 542.3h-96.1z\"\n    ></path>\n  </svg>\n</i>\n```\n\n----------------------------------------\n\nTITLE: Rendering Border Radii Component in Storybook Canvas\nDESCRIPTION: Displays the BorderRadii component within a Storybook Canvas, with source code display disabled for cleaner documentation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-theme/stories/src/Theme/borderRadii/index.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas withSource=\"none\">\n  <BorderRadii />\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-utilities version\nDESCRIPTION: This patch updates the version of the `@fluentui/react-utilities` dependency.  Bumping this package ensures that the `@fluentui/react-badge` component uses the latest utility functions and bug fixes available in the utilities package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nBump @fluentui/react-utilities to v9.18.16 ([PR #32999](https://github.com/microsoft/fluentui/pull/32999) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Visibility Type Definitions\nDESCRIPTION: Type definitions for visibility states used in focus management, defining Invisible, PartiallyVisible, and Visible states.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tabster/etc/react-tabster.api.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Visibilities {\n    Invisible: 0;\n    PartiallyVisible: 1;\n    Visible: 2;\n}\n\ntype Visibility = Visibilities[keyof Visibilities];\n\ninterface WeakHTMLElement<D = undefined> {\n    get(): HTMLElement | undefined;\n    getData(): D | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Generator Help Command - Shell\nDESCRIPTION: Command to display the generator's help information.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/split-library-in-two/README.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:split-library-in-two --help\n```\n\n----------------------------------------\n\nTITLE: Running Cypress Tests Repeatedly\nDESCRIPTION: The snippet demonstrates how to use `Cypress._.times` to run a test multiple times, which helps in verifying its reliability. The dependencies include Cypress, and it is essential to ensure the test is temporary wrapped for verification in both `open` and `run` mode.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/e2e-testing-with-cypress.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nCypress._.times(20, () => {\n  describe.only('MyComponent', () => {\n    it('does stuff', () => /* test code here */);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Table Structure\nDESCRIPTION: A basic example of the Table component structure in React, demonstrating the composition of Table, TableHeader, TableBody, TableRow and TableCell elements. This provides a minimal table layout without any specific data or functionality.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-table/library/docs/Spec.md#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Table>\n  <TableHeader>\n    <TableRow>\n      <TableCell> </TableCell>\n      <TableCell> </TableCell>\n      <TableCell> </TableCell>\n    </TableRow>\n  </TableHeader>\n\n  <TableBody>\n    <TableRow>\n      <TableCell> </TableCell>\n      <TableCell> </TableCell>\n      <TableCell> </TableCell>\n    </TableRow>\n  </TableBody>\n</Table>\n```\n\n----------------------------------------\n\nTITLE: Defining IEventRecordList Interface in TypeScript\nDESCRIPTION: Defines an internal interface for a list of event records, including a count property and an index signature for event records.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/utilities/etc/utilities.api.md#2025-04-20_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface IEventRecordList {\n    [id: string]: IEventRecord[] | number;\n    count: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Overrides in AccordionHeaderState\nDESCRIPTION: This snippet demonstrates how to implement overrides in the AccordionHeaderState type and useAccordionHeader hook.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/slot-children-render-function.md#2025-04-20_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n// AccordionHeader.types.ts\ntype AccordionHeaderState = NextComponentState<AccordionHeaderSlots> & {\n  overrides: {\n    button: {\n      onClick(ev: React.MouseEvent<HTMLButtonElement>): void;\n    };\n  };\n};\n\n// useAccordionHeader.ts\nconst state = {\n  // ...\n  overrides: {\n    button: {\n      onClick: useEventCallback(ev => {\n        buttonSlot.props.onClick?.(ev);\n        if (!ev.defaultPrevented) {\n          onAccordionHeaderClick(ev);\n        }\n      }),\n    },\n  },\n};\n\n// renderAccordionHeader.tsx\nconst renderAccordionHeader_unstable = (state: AccordionHeaderState) => (\n  <state.root>\n    <state.button onClick={state.overrides.button.onClick}>\n      {state.expandIconPosition === 'start' && state.expandIcon && <state.expandIcon />}\n      {state.icon && <state.icon />}\n      {state.root.props.children}\n      {state.expandIconPosition === 'end' && state.expandIcon && <state.expandIcon />}\n    </state.button>\n  </state.root>\n);\n```\n\n----------------------------------------\n\nTITLE: Most Recently Used Personas in TypeScript\nDESCRIPTION: This constant contains an array of most recently used personas, following the same structure as extended personas. It helps facilitate quick access to frequently used user data.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/example-data/etc/example-data.api.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport const mru: (IExampleExtendedPersonaProps & {\n    key: string | number;\n})[];\n```\n\n----------------------------------------\n\nTITLE: Card with Centered Prop Before Migration\nDESCRIPTION: Example of a Card component with the 'centered' prop before migration.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Card/Card.stories.mdx#2025-04-20_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Card } from '@fluentui/react-northstar';\n\nconst Component = () => <Card centered>Lorem ipsum, dolor sit amet consectetur adipisicing elit.</Card>;\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-utilities version\nDESCRIPTION: This patch updates the version of the `@fluentui/react-utilities` dependency.  Bumping this package ensures that the `@fluentui/react-badge` component uses the latest utility functions and bug fixes available in the utilities package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nBump @fluentui/react-utilities to v9.18.19 ([PR #33468](https://github.com/microsoft/fluentui/pull/33468) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.68.2\nDESCRIPTION: This snippet documents the version bump of '@fluentui/react' to 8.68.2, emphasizing the importance of regular updates in the library.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/theming-designer/CHANGELOG.md#2025-04-20_snippet_30\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.68.2 ([PR #23024](https://github.com/microsoft/fluentui/pull/23024) by beachball)\n```\n\n----------------------------------------\n\nTITLE: WithSlotShorthandValue Type Definition in TypeScript\nDESCRIPTION: Shows the TypeScript type definition for WithSlotShorthandValue which allows slots to accept props objects or React children as input. This enables the flexible slot API that handles different input types.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Slots/Slots.stories.mdx#2025-04-20_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\ntype WithSlotShorthandValue<Props extends { children?: unknown }> =\n  | Props\n  | Extract<SlotShorthandValue, Props['children']>;\n\ntype SlotShorthandValue = React.ReactChild | React.ReactNodeArray | React.ReactPortal;\n```\n\n----------------------------------------\n\nTITLE: Implementing StartEnd Interface in TypeScript\nDESCRIPTION: TypeScript class implementation of the StartEnd interface that provides start and end slot elements for component composition.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_53\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport class StartEnd implements Start, End {\n    // (undocumented)\n    end: HTMLSlotElement;\n    // (undocumented)\n    start: HTMLSlotElement;\n}\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.98.6\nDESCRIPTION: This update indicates a bump to version 8.98.6 for @fluentui/react, part of ongoing efforts to manage and upgrade the library effectively.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/azure-themes/CHANGELOG.md#2025-04-20_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.98.6 ([PR #25226](https://github.com/microsoft/fluentui/pull/25226) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Generating Base Style Object\nDESCRIPTION: Defines a base style object containing CSS properties such as color and margin, along with a hover state. This object serves as a foundation for further processing to generate atomic CSS outputs.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/makeStyles.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst source = {\n  color: 'red',\n  margin: '0 10px 0 0',\n  ':hover': {\n    background: 'green',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Version Update Changelog Entry\nDESCRIPTION: Changelog entry for version 0.3.20 documenting bug fixes and dependency updates for the FluentUI React DatePicker compatibility package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-datepicker-compat/library/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n### Patches\n\n- fix: When the month picker is shown as overlay due to space restrictions, don't close the popover when selecting a month. ([PR #29481](https://github.com/microsoft/fluentui/pull/29481) by esteban.230@hotmail.com)\n- Bump @fluentui/react-field to v9.1.36 ([PR #29262](https://github.com/microsoft/fluentui/pull/29262) by beachball)\n- Bump @fluentui/react-input to v9.4.46 ([PR #29262](https://github.com/microsoft/fluentui/pull/29262) by beachball)\n- Bump @fluentui/react-jsx-runtime to v9.0.16 ([PR #29262](https://github.com/microsoft/fluentui/pull/29262) by beachball)\n- Bump @fluentui/react-popover to v9.8.14 ([PR #29262](https://github.com/microsoft/fluentui/pull/29262) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Exporting Presence Components - JavaScript\nDESCRIPTION: This snippet exports components related to presence indicators, which signify the availability status of users within an interface, contributing to user interaction dynamics.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/etc/react-components.api.md#2025-04-20_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nexport { PresenceBadge }\n\nexport { presenceBadgeClassNames }\n\nexport { PresenceBadgeProps }\n\nexport { PresenceBadgeState }\n\nexport { PresenceBadgeStatus }\n```\n\n----------------------------------------\n\nTITLE: Options for Build-less Addon Registration - JavaScript\nDESCRIPTION: This snippet presents two distinct options for registering a custom Storybook addon without requiring a build step. It focuses on using TypeScript source files directly while leveraging Storybook's Webpack configuration.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/scripts/storybook/README.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n+ const { registerTsPaths } = require('@fluentui/scripts-storybook');\n\nfunction config(entry = []) {\n  return [\n    ...entry,\n    require.resolve('./src/preset/preview.ts'),\n  ];\n}\n\nfunction managerEntries(entry = []) {\n  return [\n    ...entry,\n    require.resolve('./src/preset/manager.ts'),\n  ];\n}\n\n+ function managerWebpack(config, options) { (A)\n+   registerTsPaths({config, tsConfigPath: '/Users/martinhochel/Projects/msft/fluentui/tsconfig.base.json'});\n+ return config;\n+ }\n\n- module.exports = { managerEntries, config };\n+ module.exports = { managerWebpack, managerEntries, config }; (B)\n```\n\n----------------------------------------\n\nTITLE: Rendering Tooltip with Render Function for Trigger\nDESCRIPTION: Example of using Tooltip with a render function for the trigger. This allows for more complex trigger elements and custom prop handling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tooltip/library/docs/Spec.md#2025-04-20_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Tooltip content=\"The child can be a render function\" relationship=\"description\">\n  {triggerProps => (\n    <>\n      <div>\n        <button {...triggerProps}>The trigger element</button>\n      </div>\n    </>\n  )}\n</Tooltip>\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-utilities version\nDESCRIPTION: This patch updates the version of the `@fluentui/react-utilities` dependency.  Bumping this package ensures that the `@fluentui/react-badge` component uses the latest utility functions and bug fixes available in the utilities package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nBump @fluentui/react-utilities to v9.18.15 ([PR #32840](https://github.com/microsoft/fluentui/pull/32840) by beachball)\n```\n\n----------------------------------------\n\nTITLE: FluentUI Release Entry - June 21, 2021\nDESCRIPTION: Version update entry from June 21, 2021 including patches and changes to react-tabs and other components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/vr-tests/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.0.0]\n\nMon, 21 Jun 2021 07:34:33 GMT\n\n### Patches\n- Bump @fluentui/react to v8.20.1\n\n### Changes\n- Bump @fluentui/react-tabs to v1.0.0-beta.115\n- Bump @fluentui/react-accordion to v9.0.0-alpha.41\n- Bump @fluentui/react-divider to v9.0.0-alpha.35\n```\n\n----------------------------------------\n\nTITLE: HTML Output for Keyboard Navigation Attribute\nDESCRIPTION: Shows the resulting HTML markup with and without keyboard navigation attribute.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Accessibility/FocusIndicator.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- data-keyboard-nav is present when navigating with keyboard -->\n<div data-keyboard-nav=\"\">\n  <!-- ... -->\n</div>\n<!-- data-keyboard-nav is not present when navigating with mouse -->\n<div>\n  <!-- ... -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: FluentUI iOS Table View Cell Component Names\nDESCRIPTION: Mapping of table view cell component names between Swift and Objective-C implementations in the FluentUI framework. Lists the paired class names for various cell types including standard table cells, action cells, activity indicators, and boolean cells.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/ListCellsPage/docs/ios/ListCellsImplementation.md#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nTableViewCell -> MSFTableViewCell\nActionsCell -> MSFActionsCell\nActivityIndicatorCell -> MSFActivityIndicatorCell\nCenteredLabelCell -> MSFCenteredLabelCell\nBooleanCell -> MSFBooleanCell\nTableViewHeaderFooterView -> MSFTableViewHeaderFooterView\n```\n\n----------------------------------------\n\nTITLE: Exporting TreeItem Layout Hooks in TypeScript\nDESCRIPTION: Exports hooks for tree item layout state management and styles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tree/library/etc/react-tree.api.md#2025-04-20_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const useTreeItemLayout_unstable: (props: TreeItemLayoutProps, ref: React_2.Ref<HTMLElement>) => TreeItemLayoutState;\n\nexport const useTreeItemLayoutStyles_unstable: (state: TreeItemLayoutState) => TreeItemLayoutState;\n```\n\n----------------------------------------\n\nTITLE: Migrating Content Prop in ListItem (Before)\nDESCRIPTION: Example showing how content was passed as a prop in the ListItem component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/ItemLayout.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ListItem } from '@fluentui/react-northstar';\nconst Component = () => <ListItem content=\"hi\" />;\n```\n\n----------------------------------------\n\nTITLE: Using Typography Styles in Fluent UI React Components\nDESCRIPTION: This snippet shows how to use the typographyStyles from @fluentui/react-components to apply predefined typography styles to a custom component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-theme/stories/src/Theme/typography/index.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { makeStyles, typographyStyles } from '@fluentui/react-components';\n\nconst useStyles = makeStyles({\n  text: typographyStyles.title2,\n});\n\nexport const Example = () => {\n  const styles = useStyles();\n\n  return <span className={styles.text}>Text using tokens</span>;\n};\n```\n\n----------------------------------------\n\nTITLE: Using ContentWrapper Prop in ListItem (Before)\nDESCRIPTION: Example of passing props to content element in the ListItem component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/ItemLayout.stories.mdx#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ListItem } from '@fluentui/react-northstar';\nconst Component = () => <ListItem content={{ content: 'hi', id: 'content' }} />;\n```\n\n----------------------------------------\n\nTITLE: Creating Custom JSX Control with FluentProvider\nDESCRIPTION: Demonstrates how to create a custom HoverCard component for a Bar Chart using FluentProvider context. Includes styling classes and data processing for usage statistics display.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Charts.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useBarChartHoverCardClasses } from './BarChartHoverCard.styles';\nimport { BarChartHoverCardProps } from './BarChartHoverCard.types';\nimport { getDayName, getHourlyTimeframe } from './BarChartHoverCard.utils';\nimport { FluentProvider, webLightTheme } from '@fluentui/react-components';\n\nexport default function BarChartHoverCard(props: BarChartHoverCardProps) {\n  const classes = useBarChartHoverCardClasses();\n  const { calloutData } = props;\n  const usageValue = calloutData.chartData.reduce((sum, item) => sum + item.data, 0);\n  const usageStatus = calloutData.xAxisCalloutData;\n\n  return (\n    <FluentProvider theme={webLightTheme}>\n      <div className={classes.root}>\n        <div className={classes.datetime}>\n          <div>{getDayName(calloutData.xAxisPoint)}</div>\n          <div>{getHourlyTimeframe(calloutData.xAxisPoint)}</div>\n        </div>\n        {usageStatus && (\n          <div className={classes.usageStatus}>\n            <div className={classes.usageStatusIcon}>Icon</div>\n            <div className={classes.usageStatusText}>Status</div>\n          </div>\n        )}\n        <div className={classes.usageBox}>\n          <div className={classes.usageBar} />\n          <div className={classes.usageValueBox}>\n            <div>Usage</div>\n            <div className={classes.usageValue}>{usageValue.toFixed(1)}</div>\n          </div>\n        </div>\n      </div>\n    </FluentProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ActiveDescendantImperativeRef interface\nDESCRIPTION: This snippet defines the `ActiveDescendantImperativeRef` interface, which provides an imperative API for managing the active descendant of a component.  It includes methods for getting, focusing, and manipulating the active descendant, as well as controlling the visibility of attributes related to active descendant and focus.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-aria/library/etc/react-aria.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n// @public (undocumented)\nexport interface ActiveDescendantImperativeRef {\n    // (undocumented)\n    active: () => string | undefined;\n    // (undocumented)\n    blur: () => void;\n    // (undocumented)\n    find: (predicate: (id: string) => boolean, options?: IteratorOptions & FindOptions) => string | undefined;\n    // (undocumented)\n    first: (options?: IteratorOptions) => string | undefined;\n    // (undocumented)\n    focus: (id: string) => void;\n    // @deprecated (undocumented)\n    focusLastActive: () => void;\n    // (undocumented)\n    hideAttributes: () => void;\n    // (undocumented)\n    hideFocusVisibleAttributes: () => void;\n    // (undocumented)\n    last: (options?: IteratorOptions) => string | undefined;\n    // (undocumented)\n    next: (options?: IteratorOptions) => string | undefined;\n    // (undocumented)\n    prev: (options?: IteratorOptions) => string | undefined;\n    scrollActiveIntoView: () => void;\n    // (undocumented)\n    showAttributes: () => void;\n    // (undocumented)\n    showFocusVisibleAttributes: () => void;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining IBasePickerProps Interface in TypeScript\nDESCRIPTION: Specifies the props interface for the BasePicker component, including options for item selection, rendering, and customization.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_48\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface IBasePickerProps<T> extends IReactProps<any> {\n    ['aria-label']?: string;\n    className?: string;\n    componentRef?: IRefObject<IBasePicker<T>>;\n    createGenericItem?: (input: string, ValidationState: ValidationState) => ISuggestionModel<T> | T;\n    defaultSelectedItems?: T[];\n    disabled?: boolean;\n    enableSelectedSuggestionAlert?: boolean;\n    errorMessage?: string | JSX.Element;\n    getTextFromItem?: (item: T, currentValue?: string) => string;\n    inputProps?: IInputProps;\n    itemLimit?: number;\n    label?: string;\n    onBlur?: React_2.FocusEventHandler<HTMLInputElement | Autofill>;\n    onChange?: (items?: T[]) => void;\n    onDismiss?: (ev?: any, selectedItem?: T) => boolean | void;\n    onEmptyInputFocus?: (selectedItems?: T[]) => T[] | PromiseLike<T[]>;\n    onEmptyResolveSuggestions?: (selectedItems?: T[]) => T[] | PromiseLike<T[]>;\n    onFocus?: React_2.FocusEventHandler<HTMLInputElement | Autofill>;\n    onGetErrorMessage?: (items: T[]) => string | JSX.Element | PromiseLike<string | JSX.Element> | undefined;\n    onGetMoreResults?: (filter: string, selectedItems?: T[]) => T[] | PromiseLike<T[]>;\n    onInputChange?: (input: string) => string;\n    onItemSelected?: (selectedItem?: T) => T | PromiseLike<T> | null;\n    onRemoveSuggestion?: (item: T) => void;\n    onRenderItem?: (props: IPickerItemProps<T>) => JSX.Element;\n    onRenderSuggestionsItem?: (props: T, itemProps: ISuggestionItemProps<T>) => JSX.Element;\n    onResolveSuggestions: (filter: string, selectedItems?: T[]) => T[] | PromiseLike<T[]>;\n    onValidateInput?: (input: string) => ValidationState;\n    pickerCalloutProps?: ICalloutProps;\n    pickerSuggestionsProps?: IBasePickerSuggestionsProps;\n    removeButtonAriaLabel?: string;\n    removeButtonIconProps?: IIconProps;\n    required?: boolean;\n    resolveDelay?: number;\n    searchingText?: ((props: { input: string; }) => string) | string;\n    selectedItems?: T[];\n    selectionAriaLabel?: string;\n    selectionRole?: string;\n    styles?: IStyleFunctionOrObject<IBasePickerStyleProps, IBasePickerStyles>;\n    suggestionRemovedText?: string;\n    theme?: ITheme;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dropdown Types and Constants in TypeScript\nDESCRIPTION: Exports dropdown-related type definitions and constants including size options, types, and templates\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_33\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const DropdownSize: {\n    readonly small: \"small\";\n    readonly medium: \"medium\";\n    readonly large: \"large\";\n};\n\nexport const DropdownType: {\n    readonly combobox: \"combobox\";\n    readonly dropdown: \"dropdown\";\n    readonly select: \"select\";\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML List for Release Notes and Demos\nDESCRIPTION: This HTML snippet creates an unordered list with flexbox styling to display a link to Fluent UI React's release notes and component demos.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Overviews/ResourcesPage/docs/default/ResourcesDeveloperResources.md#2025-04-20_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<ul className=\"md-list--flex\">\n  <li className=\"mdut--full\">[Release notes and demos](https://aka.ms/fluentdemo)</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Running Behavior Tests in Watch Mode using Jest\nDESCRIPTION: Command to run behavior tests and watch for changes using Jest.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/test-a-feature.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn jest --watch behavior-test\n```\n\n----------------------------------------\n\nTITLE: Installing Griffel Babel Preset for Library Developers\nDESCRIPTION: Command to install the Griffel Babel preset as a development dependency for library developers who don't want to bundle their code but still need style optimization.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/BuildTimeStyles.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @griffel/babel-preset\n```\n\n----------------------------------------\n\nTITLE: Version Update Entry for 0.4.23\nDESCRIPTION: Changelog entry documenting accessibility improvements for DatePicker and dependency version bumps\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-datepicker-compat/library/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.4.23](https://github.com/microsoft/fluentui/tree/@fluentui/react-datepicker-compat_v0.4.23)\n\nTue, 06 Feb 2024 17:55:18 GMT\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-datepicker-compat_v0.4.22..@fluentui/react-datepicker-compat_v0.4.23)\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.68.3\nDESCRIPTION: This entry documents the version bump of '@fluentui/react' to 8.68.3, supporting the ongoing improvement efforts in the project.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/theming-designer/CHANGELOG.md#2025-04-20_snippet_28\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.68.3 ([PR #23069](https://github.com/microsoft/fluentui/pull/23069) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Empty API Report for @fluentui/react-colorpicker-compat in TypeScript\nDESCRIPTION: This is an empty TypeScript file generated by API Extractor. It indicates that either the package doesn't export any public API or the documentation is handled separately.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-colorpicker-compat/etc/react-colorpicker-compat.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// (No @packageDocumentation comment for this package)\n```\n\n----------------------------------------\n\nTITLE: Divider Style Variables Migration\nDESCRIPTION: Shows how to migrate boolean variables and style overrides from v0 to v9 using makeStyles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Divider.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// in COMPONENT_NAME.tsx\nimport { Divider } from '@fluentui/react-northstar';\n\nexport const Component = () => <Divider variables={{ isCustomDivider: true }} />;\n\n// in divider-styles.ts\nexport const dividerStyles = {\n  root: ({ variables: { isCustomDivider } }) => ({\n    ...(isCustomDivider && {\n      height: '3.2rem',\n    }),\n  }),\n};\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// in COMPONENT_NAME.tsx\nimport { Divider } from '@fluentui/react-components';\nimport { useStyles } from './COMPONENT_NAME.styles.ts';\n\nexport const Component = () => {\n  const classes = useStyles();\n  return <Divider className={classes.chatEntityHeaderDivider} />;\n};\n\n// in COMPONENT_NAME.styles.ts\nimport { makeStyles } from '@fluentui/react-components';\n\nexport const useStyles = makeStyles({\n  chatEntityHeaderDivider: {\n    height: '32px',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML List for API Documentation\nDESCRIPTION: This HTML snippet creates an unordered list with flexbox styling to display a link to the API reference documentation on docs.microsoft.com.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Overviews/ResourcesPage/docs/default/ResourcesDeveloperResources.md#2025-04-20_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<ul className=\"md-list--flex\">\n  <li className=\"mdut--full\">[API reference on docs.microsoft.com](https://docs.microsoft.com/en-us/javascript/api/office-ui-fabric-react?branch=live&view=office-ui-fabric-react-latest)</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-utilities version\nDESCRIPTION: This patch updates the version of the `@fluentui/react-utilities` dependency.  Bumping this package ensures that the `@fluentui/react-badge` component uses the latest utility functions and bug fixes available in the utilities package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nBump @fluentui/react-utilities to v9.18.14 ([PR #32494](https://github.com/microsoft/fluentui/pull/32494) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Bumping package versions in FluentUI React Switch\nDESCRIPTION: This code snippet represents a series of patch updates where the versions of dependent packages are bumped. This includes packages such as @fluentui/react-field, @fluentui/react-jsx-runtime, and @fluentui/react-label. Each bump is associated with a pull request.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-switch/library/CHANGELOG.md#2025-04-20_snippet_10\n\nLANGUAGE: none\nCODE:\n```\n\"- Bump @fluentui/react-field to v9.1.19 ([PR #28885](https://github.com/microsoft/fluentui/pull/28885) by beachball)\n- Bump @fluentui/react-jsx-runtime to v9.0.0 ([PR #28885](https://github.com/microsoft/fluentui/pull/28885) by beachball)\n- Bump @fluentui/react-label to v9.1.27 ([PR #28885](https://github.com/microsoft/fluentui/pull/28885) by beachball)\"\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown List of Fluentui Do's\nDESCRIPTION: A markdown unordered list containing two recommended practices for Fluentui implementation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/PageTemplates/TemplatePage/docs/default/TemplateDos.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Do this\n- Do this too\n```\n\n----------------------------------------\n\nTITLE: Building Production Application\nDESCRIPTION: Compiles the React application for production, creating an optimized and minified build in the build folder\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/cra-template/template/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Version History Documentation\nDESCRIPTION: Markdown formatted version history showing package updates and changes across multiple FluentUI releases\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Patches\n\n- Bump @fluentui/react to v8.82.2 ([PR #23995](https://github.com/microsoft/fluentui/pull/23995) by beachball)\n- Bump @fluentui/react-docsite-components to v8.9.6 ([PR #23995](https://github.com/microsoft/fluentui/pull/23995) by beachball)\n- Bump @fluentui/react-experiments to v8.12.5 ([PR #23995](https://github.com/microsoft/fluentui/pull/23995) by beachball)\n- Bump @fluentui/theme-samples to v8.6.6 ([PR #23995](https://github.com/microsoft/fluentui/pull/23995) by beachball)\n- Bump @fluentui/react-monaco-editor to v1.6.6 ([PR #23995](https://github.com/microsoft/fluentui/pull/23995) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Calculating Bar Chart Inner Padding Formula\nDESCRIPTION: Mathematical formula used to calculate the default inner padding between bar groups. The formula maintains a 2:1 spacing ratio between groups and is based on the space between groups divided by the total of space between groups plus group width.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charts/stories/src/GroupedVerticalBarChart/GroupedVerticalBarChartBestPractices.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninnerPadding = spaceBetweenGroups / (spaceBetweenGroups + groupWidth)\n```\n\n----------------------------------------\n\nTITLE: TagPickerButton State Type\nDESCRIPTION: Defines the state type for the TagPickerButton component, including properties from ComponentState and TagPickerContextValue, as well as a hasSelectedOption property.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport type TagPickerButtonState = ComponentState<TagPickerButtonSlots> & Pick<TagPickerContextValue, 'size'> & {\n    hasSelectedOption: boolean;\n};\"\n```\n\n----------------------------------------\n\nTITLE: Define Boundary type (deprecated)\nDESCRIPTION: Defines a type alias `Boundary` which is deprecated and refers to `PositioningBoundary`. This alias maintains backward compatibility while signaling the preferred type to use.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-positioning/etc/react-positioning.api.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @public @deprecated (undocumented)\nexport type Boundary = PositioningBoundary;\n```\n\n----------------------------------------\n\nTITLE: Setting up Email Filter Rule for GitHub Mentions\nDESCRIPTION: Email rule configuration to filter and organize GitHub mention notifications into a dedicated folder. This rule captures emails from the FluentUI GitHub notifications that contain your username in the body.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/keeping-up-with-review-requests.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```\nFrom fluentui@noreply.github.com\n  and with [your username] in the body\nmove it to the \"GitHub Mentions\" folder\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Page Language in HTML for Fluent UI\nDESCRIPTION: This snippet shows how to set the language for an entire HTML page to Thai using the 'lang' attribute on the root HTML element. This ensures that Fluent UI will use the appropriate font and character set for Thai content.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Styles/LocalizationPage/docs/web/LocalizationFonts.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html lang=\"th-TH\">\n  ...\n</html>\n```\n\n----------------------------------------\n\nTITLE: Rendering Icons with Semantic UI in HTML\nDESCRIPTION: Semantic UI places strong emphasis on icon typography, which is implemented using a font-based approach. Icons are rendered via <i> tags that use pseudo-elements for initialization. It enables additional icon manipulations such as layering and positioning.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Icon.md#2025-04-20_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<i aria-hidden=\"true\" class=\"users icon\">::before</i>\n```\n\n----------------------------------------\n\nTITLE: Importing Calendar Component from FluentUI\nDESCRIPTION: Shows how to import the Calendar component from the @fluentui/react-calendar-compat package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-calendar-compat/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Calendar } from '@fluentui/react-calendar-compat';\n```\n\n----------------------------------------\n\nTITLE: Default Popover Structure in React\nDESCRIPTION: The snippet illustrates the default structure of a popover constructed with React components. It shows how to nest Popover, PopoverTrigger, and PopoverSurface components, including a trigger button and expected markup.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-popover/library/docs/Spec.md#2025-04-20_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<div id=\"container\">\n  <Popover>\n    <PopoverTrigger>\n      <button>Trigger</button>\n    </PopoverTrigger>\n\n    <PopoverSurface>\n      {children}\n    </PopoverSurface>\n  </Popover>\n<div>\n```\n\n----------------------------------------\n\nTITLE: Defining Drawer Component Types in TypeScript\nDESCRIPTION: Defines core TypeScript types and interfaces for FluentUI Drawer components, including props, states, and slot configurations for different drawer variations\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-drawer/library/etc/react-drawer.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type DrawerProps = ComponentProps<DrawerSlots> & {\n    type?: 'inline' | 'overlay';\n} & (OverlayDrawerProps | InlineDrawerProps);\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for FluentUI React Carousel\nDESCRIPTION: Configuration code for including React Carousel stories in Storybook. Specifies glob patterns to locate story files with MDX and TypeScript/TSX extensions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-carousel/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-carousel/stories/src/**/*.stories.mdx', '../packages/react-components/react-carousel/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: FluentUI DateTime Version Updates\nDESCRIPTION: Version update entry showing package patches including DateTime utilities package addition\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-date-time/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nWed, 17 Jun 2020 12:37:16 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@uifabric/date-time_v7.8.100..@uifabric/date-time_v7.8.101)\n\n### Patches\n\n- Add Datetime utilities package ([PR #13605](https://github.com/microsoft/fluentui/pull/13605) by pompomon@gmail.com)\n```\n\n----------------------------------------\n\nTITLE: Axis Localization Configuration\nDESCRIPTION: Supporting localization for chart axes through JavaScript's built-in localization and custom locale definitions using `dateLocalizeOptions` and `timeFormatLocale` props.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charts/stories/src/LineChart/LineChartBestPractices.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndateLocalizeOptions: {\n  culture: string\n},\ntimeFormatLocale: CustomLocaleDefinition\n```\n\n----------------------------------------\n\nTITLE: Exporting Constants and Functions in TypeScript\nDESCRIPTION: This code snippet exports several constants and functions in TypeScript, aimed at manipulating DOM elements and attributes within the Fluent UI library. Functions like `elementContains`, `getChildren`, and `setVirtualParent` deal with navigating and modifying elements, many with optional handling of virtual DOM scenarios. The portion includes both documented and undocumented public utilities.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/dom-utilities/etc/dom-utilities.api.md#2025-04-20_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\n// @public (undocumented)\nexport const DATA_PORTAL_ATTRIBUTE = \"data-portal-element\";\n\n// @public\nexport function elementContains(parent: HTMLElement | null, child: HTMLElement | null, allowVirtualParents?: boolean): boolean;\n\n// @public\nexport function elementContainsAttribute(element: HTMLElement, attribute: string, doc?: Document): string | null;\n\n// @public\nexport function findElementRecursive(element: HTMLElement | null, matchFunction: (element: HTMLElement) => boolean, doc?: Document): HTMLElement | null;\n\n// @public (undocumented)\nexport const getActiveElement: (doc: Document) => Element | null;\n\n// @public\nexport function getChildren(parent: HTMLElement, allowVirtualChildren?: boolean): HTMLElement[];\n\n// @public (undocumented)\nexport const getEventTarget: (event: Event) => HTMLElement | null;\n\n// @public\nexport function getParent(child: HTMLElement, allowVirtualParents?: boolean): HTMLElement | null;\n\n// @public\nexport function getVirtualParent(child: HTMLElement): HTMLElement | undefined;\n\n// @public\nexport function isVirtualElement(element: HTMLElement | IVirtualElement): element is IVirtualElement;\n\n// @public\nexport interface IVirtualElement extends HTMLElement {\n    // (undocumented)\n    _virtual: {\n        parent?: IVirtualElement;\n        children: IVirtualElement[];\n    };\n}\n\n// @public\nexport function portalContainsElement(target: HTMLElement, parent?: HTMLElement, doc?: Document): boolean;\n\n// @public\nexport function setPortalAttribute(element: HTMLElement): void;\n\n// @public\nexport function setVirtualParent(child: HTMLElement, parent: HTMLElement | null): void;\n\n```\n\n----------------------------------------\n\nTITLE: Define PositioningBoundary type\nDESCRIPTION: Defines a type called `PositioningBoundary` which can be a `PositioningRect`, an `HTMLElement`, an array of `HTMLElement`s, or specific string literals ('clippingParents', 'scrollParent', 'window'). It specifies the boundary within which the positioned element should remain visible.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-positioning/etc/react-positioning.api.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type PositioningBoundary = PositioningRect | HTMLElement | Array<HTMLElement> | 'clippingParents' | 'scrollParent' | 'window';\n```\n\n----------------------------------------\n\nTITLE: Defining Subscribable Interface in TypeScript\nDESCRIPTION: Defines a generic Subscribable interface with methods for subscribing, unsubscribing, and subscribing as the first listener to events.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tabster/etc/react-tabster.api.md#2025-04-20_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\ninterface Subscribable<A, B = undefined> {\n    // (undocumented)\n    subscribe(callback: SubscribableCallback<A, B>): void;\n    // @internal (undocumented)\n    subscribeFirst(callback: SubscribableCallback<A, B>): void;\n    // (undocumented)\n    unsubscribe(callback: SubscribableCallback<A, B>): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react-divider to version v9.0.0-rc.6\nDESCRIPTION: This snippet details the patch for the @fluentui/react-divider component to version v9.0.0-rc.6, ensuring consistent improvements to the UI components offered by Fluent UI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/vr-tests-react-components/CHANGELOG.md#2025-04-20_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react-divider to v9.0.0-rc.6 ([PR #21995](https://github.com/microsoft/fluentui/pull/21995) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/font-icons-mdl2 to v8.3.3\nDESCRIPTION: This patch indicates the update of '@fluentui/font-icons-mdl2' to version 8.3.3, vital for keeping the icon library relevant and up-to-date.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/theming-designer/CHANGELOG.md#2025-04-20_snippet_40\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/font-icons-mdl2 to v8.3.3 ([PR #22966](https://github.com/microsoft/fluentui/pull/22966) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react-label to version v9.0.0-beta.10\nDESCRIPTION: In this entry, the @fluentui/react-label component is updated to version v9.0.0-beta.10, part of the ongoing updates to enhance usability and functionality.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/vr-tests-react-components/CHANGELOG.md#2025-04-20_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react-label to v9.0.0-beta.10 ([PR #21995](https://github.com/microsoft/fluentui/pull/21995) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Importing Label from Fluent UI React Components\nDESCRIPTION: Simple example showing how to import the Label component from the Fluent UI React Components package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-label/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { Label } from '@fluentui/react-components';\n```\n\n----------------------------------------\n\nTITLE: Example Generator Usage - FluentUI Workspace Plugin\nDESCRIPTION: Basic example showing the standard usage of the generator command.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/tsconfig-base-all/README.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:tsconfig-base-all\n```\n\n----------------------------------------\n\nTITLE: Implementing Word Icon Using CSS Classes\nDESCRIPTION: Example showing how to implement a 96x96px Word product icon using office-ui-fabric-core CSS classes. Includes the CDN link for the Fabric Core CSS and demonstrates the usage of BrandIcon classes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Styles/M365ProductIconsPage/docs/web/M365ProductIconsImplementation.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<link\n  rel=\"stylesheet\"\n  href=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/office-ui-fabric-core/11.1.0/css/fabric.css\"\n/>\n\n<div class=\"ms-BrandIcon--icon96 ms-BrandIcon--word\"></div>\n```\n\n----------------------------------------\n\nTITLE: Using FlexItem in Fluent UI v0 (TSX)\nDESCRIPTION: Example of how FlexItem was used in Fluent UI v0. It shows a Flex container with a Button and a FlexItem containing another Button.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/FlexItem.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Flex, FlexItem, Button } from \"@fluentui/react-northstar\";\nconst Component = () =>\n  <Flex>\n    <Button content=\"I am first button\">\n    <FlexItem grow push><Button content=\"I am far side button\" /></FlexItem>\n  </Flex>;\n```\n\n----------------------------------------\n\nTITLE: Defining Avatar Shape Constants in TypeScript\nDESCRIPTION: Defines shape options for Avatar components with circular and square variants.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport const AvatarShape: {\n    readonly circular: \"circular\";\n    readonly square: \"square\";\n};\n```\n\n----------------------------------------\n\nTITLE: Updating @fluentui/react-tabster to v9.0.0-beta.4\nDESCRIPTION: Updates the @fluentui/react-tabster package to version 9.0.0-beta.4, adding new hooks, updating dependencies, and making other changes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tabster/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## [9.0.0-beta.4](https://github.com/microsoft/fluentui/tree/@fluentui/react-tabster_v9.0.0-beta.4)\n\nFri, 12 Nov 2021 13:25:07 GMT\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-tabster_v9.0.0-beta.3..@fluentui/react-tabster_v9.0.0-beta.4)\n\n### Changes\n\n- Add useFocusableGroup hook ([PR #20132](https://github.com/microsoft/fluentui/pull/20132) by andredias@microsoft.com)\n- Use uncontrolled tabbing by default ([PR #20571](https://github.com/microsoft/fluentui/pull/20571) by lingfangao@hotmail.com)\n- Updated beta and RC components to ES2019 ([PR #20405](https://github.com/microsoft/fluentui/pull/20405) by gcox@microsoft.com)\n- Bump tabster and keyborg to 1.0.7 ([PR #20593](https://github.com/microsoft/fluentui/pull/20593) by lingfangao@hotmail.com)\n- Bump @fluentui/react-make-styles to v9.0.0-beta.3 ([PR #20583](https://github.com/microsoft/fluentui/pull/20583) by beachball)\n- Bump @fluentui/react-shared-contexts to v9.0.0-beta.3 ([PR #20583](https://github.com/microsoft/fluentui/pull/20583) by beachball)\n- Bump @fluentui/react-utilities to v9.0.0-beta.3 ([PR #20583](https://github.com/microsoft/fluentui/pull/20583) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Exposing Z-Index Layers as a Named Map (Discarded)\nDESCRIPTION: This code snippet presents a discarded option for managing z-index values using a named map. The `ZIndexLayers` type defines the semantic layers, and the `zIndexes` object maps these layers to specific z-index values. This approach was considered but ultimately discarded due to limitations regarding partner overrides.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/z-index-handling.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n\"// packages/tokens/src/global/zIndexes.ts\\n\\nimport { ZIndexLayers } from '../types';\\n\\n/**\\n * Global z-index values for elements\\n */\\nexport const zIndexes: ZIndexLayers = {\\n  background: 0, // default\\n  content: 1, // content - header, footer, sidebar\\n  overlay: 1000, // overlay elements - drawer, nav\\n  popup: 2000, // popup layers - popups, modals, dialogs\\n  messages: 3000, // communication elements - banners, messages, toasts, snackbar\\n  floating: 4000, // floating elements - dropdowns, teaching\\n  priority: 5000, // priority elements - tooltips\\n  debug: 6000, // debug - error overlays, debug messages\\n};\"\n```\n\n----------------------------------------\n\nTITLE: Bumping package versions in FluentUI React Switch\nDESCRIPTION: This code snippet represents a series of patch updates where the versions of dependent packages are bumped. This includes packages such as @fluentui/react-field, @fluentui/react-jsx-runtime, @fluentui/react-label, @fluentui/react-tabster, and @fluentui/react-utilities. Each bump is associated with a pull request.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-switch/library/CHANGELOG.md#2025-04-20_snippet_12\n\nLANGUAGE: none\nCODE:\n```\n\"- Bump @fluentui/react-field to v9.1.17 ([PR #28808](https://github.com/microsoft/fluentui/pull/28808) by beachball)\n- Bump @fluentui/react-jsx-runtime to v9.0.0-alpha.15 ([PR #28808](https://github.com/microsoft/fluentui/pull/28808) by beachball)\n- Bump @fluentui/react-label to v9.1.25 ([PR #28808](https://github.com/microsoft/fluentui/pull/28808) by beachball)\n- Bump @fluentui/react-tabster to v9.12.2 ([PR #28808](https://github.com/microsoft/fluentui/pull/28808) by beachball)\n- Bump @fluentui/react-utilities to v9.11.1 ([PR #28808](https://github.com/microsoft/fluentui/pull/28808) by beachball)\"\n```\n\n----------------------------------------\n\nTITLE: Generating React Library - Dry Run\nDESCRIPTION: This command simulates the library generation process without making any changes to the disk. It is useful for previewing what files will be created.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/react-library/README.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:react-library --dry-run\n```\n\n----------------------------------------\n\nTITLE: Importing Tag Components\nDESCRIPTION: This snippet demonstrates how to import the Tag, TagGroup, and InteractionTag components from the @fluentui/react-components package. These components are essential for displaying tags and tag groups within a Fluent UI React application.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tags/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Tag, TagGroup, InteractionTag } from '@fluentui/react-components';\n```\n\n----------------------------------------\n\nTITLE: HTML style placeholder\nDESCRIPTION: To control where styles are injected, you can add a placeholder `style` element in the head with `data-merge-styles` attribute\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/merge-styles/README.md#2025-04-20_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <style data-merge-styles></style>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Importing Avatar Component\nDESCRIPTION: This snippet demonstrates how to import the Avatar component from the '@fluentui/react-components' package, which is a prerequisite for using the component in your React application.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-avatar/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Avatar } from '@fluentui/react-components';\n```\n\n----------------------------------------\n\nTITLE: Exporting webpack configuration functions for React component libraries\nDESCRIPTION: Exports all the webpack configuration-related functions for use in FluentUI build scripts. Includes the main configuration creator, server configuration, and Jest test configuration.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-teaching-popover/stories/src/TeachingPopover/TeachingPopoverDescription.md#2025-04-20_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  createWebpackConfig,\n  createWebpackServeConfig,\n  createJestConfig,\n  createJestConfigWithRetries,\n};\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-docsite-components to v8.7.22\nDESCRIPTION: This note captures the upgrade of '@fluentui/react-docsite-components' to version 8.7.22, reinforcing the documentation capabilities.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/theming-designer/CHANGELOG.md#2025-04-20_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react-docsite-components to v8.7.22 ([PR #23126](https://github.com/microsoft/fluentui/pull/23126) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Creating webpack serve configuration for React component libraries\nDESCRIPTION: Generates a webpack-dev-server configuration for serving FluentUI component library demos. Includes setup for history API fallback, port configuration, and hot module replacement.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-teaching-popover/stories/src/TeachingPopover/TeachingPopoverDescription.md#2025-04-20_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction createWebpackServeConfig(options) {\n  const webpackConfig = createWebpackConfig(options);\n\n  return {\n    ...webpackConfig,\n    devServer: {\n      ...webpackConfig.devServer,\n      port: options.port || 8080,\n      historyApiFallback: true,\n      hot: true,\n      client: {\n        overlay: false,\n      },\n      static: {\n        directory: webpackConfig.output.path,\n        publicPath: '/',\n      },\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Construct Scale for Bars Within a Group\nDESCRIPTION: Constructs a band scale (xScale1) to define the geometry of the bars within each group. This scale's domain is the array of keys identifying bars, and its range is the bandwidth of the group scale (xScale0). The inner padding is set using `X1_INNER_PADDING`.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/docs/implementing-2-to-1-spacing.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst xScale1 = d3ScaleBand()\n    .domain(this._keys)\n    .range([0, xScale0.bandwidth()])\n    .paddingInner(X1_INNER_PADDING);\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML List for Fluent UI React Native Resources\nDESCRIPTION: This HTML snippet creates an unordered list with flexbox styling to display a link for getting started with Fluent UI React Native.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Overviews/ResourcesPage/docs/default/ResourcesDeveloperResources.md#2025-04-20_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<ul className=\"md-list--flex\">\n\n  <li className=\"mdut--full\">[Get started with Fluent UI React Native\n](https://github.com/microsoft/fluentui-react-native)</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Bumping FluentUI React and Monaco Editor with PR\nDESCRIPTION: This snippet shows how to bump the version of both @fluentui/react and @fluentui/react-monaco-editor packages in a single pull request. The pull request number provides a direct link to the changes within the repository. This action is part of maintaining the dependencies for the project.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-docsite-components/CHANGELOG.md#2025-04-20_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n\"- Bump @fluentui/react to v8.112.1 ([PR #29342](https://github.com/microsoft/fluentui/pull/29342) by beachball)\",\n  \"- Bump @fluentui/react-monaco-editor to v1.7.130 ([PR #29342](https://github.com/microsoft/fluentui/pull/29342) by beachball)\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Git Remote Configuration\nDESCRIPTION: Sample output showing the correct remote configuration for both origin and upstream repositories.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/dev-env.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit remote -v\n\n    origin  https://github.com/johndoe/fluentui.git (fetch)\n    origin  https://github.com/johndoe/fluentui.git (push)\n    upstream        https://github.com/microsoft/fluentui.git (fetch)\n    upstream        https://github.com/microsoft/fluentui.git (push)\n```\n\n----------------------------------------\n\nTITLE: Direct Typography Styling with make-styles\nDESCRIPTION: Example of importing and using typography styles directly with make-styles for lightweight styling without the Text component overhead.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-text/library/docs/Spec.md#2025-04-20_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { typographyStyles } from '@fluentui/react-text';\n\nconst useStyles = makeStyles({\n  root: typographyStyles.title,\n  caption: typographyStyles.caption,\n});\n\nconst Test = () => {\n  const styles = useStyles();\n\n  return (\n    <>\n      <p className={styles.root}>\n        <span>I am styled like a title</span>\n        <span className={styles.caption}>I am styled like a caption</span>\n      </p>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a React Component with FooLabel - JavaScript\nDESCRIPTION: This snippet defines a React functional component named FooExample. It imports React and a custom component named FooLabel from a module named 'foo'. The FooExample component returns a JSX element containing a FooLabel component, displaying static text 'I'm a FooLabel'. There's a dependency on 'react' and 'foo' modules. Parameters include components from 'foo', particularly FooLabel. Expected output is a rendered React component displaying a label.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-monaco-editor/src/transpiler/examples/customPackages.txt#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\nimport { FooLabel } from 'foo';\n\nexport const FooExample = () => {\n  return (\n    <div>\n      <FooLabel>I'm a FooLabel</FooLabel>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining DocumentCard Main Props Interface\nDESCRIPTION: TypeScript interface definition for the main DocumentCard component props. This interface extends basic props and HTML attributes to define the API for the DocumentCard component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_102\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IDocumentCardProps extends IBaseProps<IDocumentCard>, React_2.HTMLAttributes<HTMLDivElement> {\n    // @deprecated\n    accentColor?: string;\n    children?: React_2.ReactNode;\n    className?: string;\n    componentRef?: IRefObject<IDocumentCard>;\n    onClick?: (ev?: React_2.SyntheticEvent<HTMLElement>) => void;\n    onClickHref?: string;\n    onClickTarget?: string;\n    role?: string;\n    styles?: IStyleFunctionOrObject<IDocumentCardStyleProps, IDocumentCardStyles>;\n    theme?: ITheme;\n    type?: DocumentCardType;\n}\n```\n\n----------------------------------------\n\nTITLE: Autofill Component Definition in TypeScript\nDESCRIPTION: Defines the Autofill component for text input with autofill capabilities. Implements the IAutofill interface and includes various methods for cursor management, value selection, and focus handling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport class Autofill extends React_2.Component<IAutofillProps, IAutofillState> implements IAutofill {\n    constructor(props: IAutofillProps);\n    // (undocumented)\n    clear(): void;\n    // Warning: (ae-forgotten-export) The symbol \"ICursorLocation\" needs to be exported by the entry point index.d.ts\n    //\n    // (undocumented)\n    componentDidUpdate(_: any, _1: any, cursor: ICursorLocation | null): void;\n    // (undocumented)\n    componentWillUnmount(): void;\n    // (undocumented)\n    static contextType: React_2.Context<WindowProviderProps>;\n    // (undocumented)\n    get cursorLocation(): number | null;\n    // (undocumented)\n    static defaultProps: {\n        enableAutofillOnKeyPress: number[];\n    };\n    // (undocumented)\n    focus(): void;\n    // (undocumented)\n    static getDerivedStateFromProps(props: IAutofillProps, state: IAutofillState): IAutofillState | null;\n    // (undocumented)\n    getSnapshotBeforeUpdate(): ICursorLocation | null;\n    // (undocumented)\n    get inputElement(): HTMLInputElement | null;\n    // (undocumented)\n    get isValueSelected(): boolean;\n    // (undocumented)\n    render(): JSX.Element;\n    // (undocumented)\n    get selectionEnd(): number | null;\n    // (undocumented)\n    get selectionStart(): number | null;\n    // (undocumented)\n    get value(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: StickyPositionType Enumeration in FluentUI\nDESCRIPTION: Defines an enumeration for sticky position types in FluentUI. The values determine where a sticky component should adhere - at the top as a header, at the bottom as a footer, or both.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_264\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport enum StickyPositionType {\n    // (undocumented)\n    Both = 0,\n    // (undocumented)\n    Footer = 2,\n    // (undocumented)\n    Header = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-docsite-components to v8.7.24\nDESCRIPTION: This entry reflects the upgrade of '@fluentui/react-docsite-components' to version 8.7.24, further polishing the documentation system.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/theming-designer/CHANGELOG.md#2025-04-20_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react-docsite-components to v8.7.24 ([PR #23356](https://github.com/microsoft/fluentui/pull/23356) by beachball)\n```\n\n----------------------------------------\n\nTITLE: HTML Example of Custom Button with Enhanced Attributes\nDESCRIPTION: This HTML snippet displays the result of `useARIAButtonProps` inadvertently adding extra ARIA attributes to a custom `Button` component, leading to potentially redundant attributes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/triggers-and-multiple-layers-of-button-handling.md#2025-04-20_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<button onclick=\"fn\" onkeydown=\"fn\" onkeyup=\"fn\" role=\"button\" tabindex=\"0\">Trigger something</button>\n```\n\n----------------------------------------\n\nTITLE: Running React 18 Compatibility Tests for Fluent UI v8\nDESCRIPTION: This command runs the test files for React 18 issues that have been triaged and resolved. It helps prevent regressions in compatibility.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/react-18-tests-v8/README.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# yarn test\n```\n\n----------------------------------------\n\nTITLE: Proposed Tooltip with Improved Prop Passing\nDESCRIPTION: This snippet suggests a new implementation where the Tooltip passes its props and handlers to the correct components, allowing for proper composition with MenuTrigger. The new design allows for props to be passed down seamlessly.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/components/tooltip-api-alignment.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction App() {\n  return (\n    //  1️⃣ \"Tooltip\":\n    //      - clones its trigger (\"MenuTrigger\")\n    //      - adds custom handlers/props to a trigger\n    <Tooltip content=\"Some content\">\n      {/* 2️⃣ \"MenuTrigger\": */}\n      {/*    - clones its trigger (\"button\") */}\n      {/*    - adds custom handlers/props to a trigger */}\n      {/*    - ⚠️ merges and passes down all props passed to it */}\n      <MenuTrigger>\n        <button />\n      </MenuTrigger>\n    </Tooltip>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Example of class names produced\nDESCRIPTION: The following Typescript shows a code example of class names produced when merging style sets.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/merge-styles/README.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{ a: 'a-0', b: 'b-1' }\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.97.0\nDESCRIPTION: This entry describes the update for @fluentui/react to version 8.97.0, keeping the package consistent with the latest enhancements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/azure-themes/CHANGELOG.md#2025-04-20_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.97.0 ([PR #25025](https://github.com/microsoft/fluentui/pull/25025) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Defining Keyboard Interactions for Multiselect Dropdown in Markdown\nDESCRIPTION: This snippet defines the keyboard interactions for selecting options in a multiselect dropdown. It specifies the keys and their corresponding actions for toggling selection and closing the dropdown.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/stories/src/Dropdown/DropdownAccessibility.stories.mdx#2025-04-20_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n| Key                                  | Result                                                                                                |\n| ------------------------------------ | ----------------------------------------------------------------------------------------------------- |\n| <kbd>Enter</kbd> or <kbd>Space</kbd> | Toggles selection on or off for focused option                                                        |\n| <kbd>Tab</kbd>                       | Toggles selection on or off for focused option, closes the popup, and moves focus after the dropdown  |\n| <kbd>Shift</kbd> + <kbd>Tab</kbd>    | Toggles selection on or off for focused option, closes the popup, and moves focus before the dropdown |\n```\n\n----------------------------------------\n\nTITLE: Creating a New Package with Preview Suffix\nDESCRIPTION: Command to bootstrap a new FluentUI package, which will automatically add the -preview suffix to the package name.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/new-release-process-v9-packages.md#2025-04-20_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nyarn create-package\n\n# triggers standard prompt\n\n? Package name (do NOT include @fluentui prefix):  react-hello\n```\n\n----------------------------------------\n\nTITLE: Generating Lorem Text in TypeScript\nDESCRIPTION: This function generates a string of lorem text based on a specified word count. It is often used for placeholder text in UI components and testing scenarios.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/example-data/etc/example-data.api.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport function lorem(wordCount: number): string;\n```\n\n----------------------------------------\n\nTITLE: Running React 18 Integration Type Check for Fluent UI v9\nDESCRIPTION: This command runs TypeScript compiler against all monorepo v9 stories with @types/react@18 pinned. It excludes certain packages from the check.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/react-18-tests-v9/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn nx run react-18-tests-v9:type-check:integration\n```\n\n----------------------------------------\n\nTITLE: Migrating MenuButton Positioning Props in FluentUI\nDESCRIPTION: Example showing how to migrate positioning props from V0 to V9 syntax for MenuButton component. The new V9 positioning uses a simplified shorthand format combining position and alignment.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/SplitButton.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<MenuButton position=\"below\" align=\"end\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\n<Menu positioning=\"below-end\" />\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react-button to version v9.0.0-rc.6\nDESCRIPTION: This snippet specifies the patch for the @fluentui/react-button to version v9.0.0-rc.6, indicating a continuous effort to keep the components up to date in the Fluent UI framework.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/vr-tests-react-components/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react-button to v9.0.0-rc.6 ([PR #21995](https://github.com/microsoft/fluentui/pull/21995) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react-input to version v9.0.0-beta.6\nDESCRIPTION: This snippet describes the update of the @fluentui/react-input to version v9.0.0-beta.6, part of the routine maintenance and enhancement of the Fluent UI components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/vr-tests-react-components/CHANGELOG.md#2025-04-20_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react-input to v9.0.0-beta.6 ([PR #21995](https://github.com/microsoft/fluentui/pull/21995) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Theme and Styling Enhancements for Web Components\nDESCRIPTION: Provides improvements in theming capabilities, including individual element theme setting and unsetting, CSS positioning, and accessibility considerations\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/CHANGELOG.md#2025-04-20_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Implementing ToggleButton Component in TypeScript\nDESCRIPTION: Defines the ToggleButton component that extends Button class, adding mixed and pressed state properties with their change handlers and overriding the press method.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_81\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport class ToggleButton extends Button {\n    // (undocumented)\n    connectedCallback(): void;\n    mixed?: boolean;\n    // @internal\n    protected mixedChanged(): void;\n    // @override\n    protected press(): void;\n    pressed: boolean;\n    // @internal\n    protected pressedChanged(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ICommandBar Interface\nDESCRIPTION: Defines the `ICommandBar` interface, which provides methods for focusing and remeasuring the CommandBar component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_72\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ICommandBar {\n    focus(): void;\n    remeasure(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Public Constants in React Overflow - TypeScript\nDESCRIPTION: This snippet exports several undocumented but public constants such as DATA_OVERFLOW_DIVIDER, DATA_OVERFLOW_ITEM, etc. These constants likely represent attributes used in the handling of overflow elements within a React application.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-overflow/library/etc/react-overflow.api.md#2025-04-20_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const DATA_OVERFLOW_DIVIDER = \"data-overflow-divider\";\nexport const DATA_OVERFLOW_ITEM = \"data-overflow-item\";\nexport const DATA_OVERFLOW_MENU = \"data-overflow-menu\";\nexport const DATA_OVERFLOWING = \"data-overflowing\";\n```\n\n----------------------------------------\n\nTITLE: Rendering PopupMenu Examples with Theme Switcher in JSX\nDESCRIPTION: This code snippet demonstrates how to render examples of PopupMenus using a DisplayToggle component for switching between light and dark themes. It includes images for both top-down and bottom-up PopupMenus in light and dark modes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/PopupMenuPage/docs/ios/PopupMenuOverview.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<DisplayToggle onText=\"Dark\" offText=\"Light\" label=\"Theme Switcher\">\n### Top down\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_drawer_02_topsheet_light.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_drawer_02_topsheet.png?text=DarkMode\" />\n\n### Bottom up\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_drawer_01_bottomsheet_light.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_drawer_01_bottomsheet_dark.png?text=DarkMode\" />\n\n</DisplayToggle>\n```\n\n----------------------------------------\n\nTITLE: Implementing List Component in React/TypeScript\nDESCRIPTION: Implementation of the List component that renders a virtualized list of items. It handles item rendering, scrolling, and view calculations for efficient rendering of large lists in FluentUI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_231\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class List<T = any> extends React_2.Component<IListProps<T>, IListState<T>> implements IList {\n    constructor(props: IListProps<T>);\n    // (undocumented)\n    componentDidMount(): void;\n    // (undocumented)\n    componentDidUpdate(previousProps: IListProps, previousState: IListState<T>): void;\n    // (undocumented)\n    componentWillUnmount(): void;\n    // (undocumented)\n    static contextType: React_2.Context<WindowProviderProps>;\n    // (undocumented)\n    static defaultProps: {\n        startIndex: number;\n        onRenderCell: (item: any, index: number, containsFocus: boolean) => JSX.Element;\n        onRenderCellConditional: undefined;\n        renderedWindowsAhead: number;\n        renderedWindowsBehind: number;\n    };\n    // (undocumented)\n    forceUpdate(): void;\n    // (undocumented)\n    static getDerivedStateFromProps<U = any>(nextProps: IListProps<U>, previousState: IListState<U>): IListState<U>;\n    // (undocumented)\n    getStartItemIndexInView(measureItem?: (itemIndex: number) => number): number;\n    getTotalListHeight(): number;\n    // (undocumented)\n    get pageRefs(): Readonly<Record<string, unknown>>;\n    // (undocumented)\n    render(): JSX.Element | null;\n    scrollToIndex(index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode): void;\n    // (undocumented)\n    shouldComponentUpdate(newProps: IListProps<T>, newState: IListState<T>): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Setting a Prop Value in React\nDESCRIPTION: This snippet compares the old and new methodology for dynamically setting the font property in a Text component in React, showcasing the transition to using undefined instead of a base string.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/no-action-prop-value-standardization.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Before\n<Text font={isNumeric ? 'numeric' : 'base'}>\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// After\n<Text font={isNumeric ? 'numeric' : undefined}>\n\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.112.7\nDESCRIPTION: This snippet bumps @fluentui/react to version 8.112.7, ensuring compatibility and performance enhancements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluent2-theme/CHANGELOG.md#2025-04-20_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.112.7 ([PR #29654](https://github.com/microsoft/fluentui/pull/29654) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react to v8.43.0\nDESCRIPTION: This patch updates the @fluentui/react library to version 8.43.0 to ensure stability and performance. Details in Pull Request #20697.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/ts-minbar-test-react/CHANGELOG.md#2025-04-20_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.43.0 ([PR #20697](https://github.com/microsoft/fluentui/pull/20697) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Expected HTML Output for Checkbox Component\nDESCRIPTION: The expected HTML structure resulting from rendering the Checkbox component, showing how props are applied to different elements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/native-element-props.md#2025-04-20_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"bar\">\n  <!-- ref points to this element -->\n  <input type=\"checkbox\" name=\"foo\" checked />\n  <label>sample</label>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Exploration of Re-render Logic in ListItems\nDESCRIPTION: This snippet explains the rendering logic in response to changes in state and effects related to the List component, highlighting when and how items are re-rendered and why stale values might appear.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/context-selector-tearing.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n- render:List (activeValue: 2)\n  // re-rendered all items with stale value\n- render:ListItem* (activeValue: 1)\n- useLayoutEffect:List (activeValue: 2)\n  // re-rendered matched items with proper value\n- render:ListItem* (activeValue: 2)\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.95.1\nDESCRIPTION: This update reflects the incremental version bump to 8.95.1 for the @fluentui/react library, reinforcing new features and fixes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/azure-themes/CHANGELOG.md#2025-04-20_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.95.1 ([PR #24822](https://github.com/microsoft/fluentui/pull/24822) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Building All Northstar Packages with Yarn\nDESCRIPTION: This command builds all Northstar-related packages using NX. It targets the package tagged as 'react-northstar'.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/CONTRIBUTING.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn nx run-many -t build -p tag:react-northstar  # build all northstar packages\n```\n\n----------------------------------------\n\nTITLE: Exporting Color Palette Tokens in JavaScript\nDESCRIPTION: This snippet defines and exports color tokens for various color palettes in the Fluent UI design system. It includes variables for different colors like anchor, beige, berry, blue, brass, brown, and cornflower.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\n// @public\nexport const colorPaletteAnchorBackground2 = \"var(--colorPaletteAnchorBackground2)\";\n\n// @public\nexport const colorPaletteAnchorBorderActive = \"var(--colorPaletteAnchorBorderActive)\";\n\n// @public\nexport const colorPaletteAnchorForeground2 = \"var(--colorPaletteAnchorForeground2)\";\n\n// @public\nexport const colorPaletteBeigeBackground2 = \"var(--colorPaletteBeigeBackground2)\";\n\n// @public\nexport const colorPaletteBeigeBorderActive = \"var(--colorPaletteBeigeBorderActive)\";\n\n// @public\nexport const colorPaletteBeigeForeground2 = \"var(--colorPaletteBeigeForeground2)\";\n\n// @public\nexport const colorPaletteBerryBackground1 = \"var(--colorPaletteBerryBackground1)\";\n\n// @public\nexport const colorPaletteBerryBackground2 = \"var(--colorPaletteBerryBackground2)\";\n\n// @public\nexport const colorPaletteBerryBackground3 = \"var(--colorPaletteBerryBackground3)\";\n\n// @public\nexport const colorPaletteBerryBorder1 = \"var(--colorPaletteBerryBorder1)\";\n\n// @public\nexport const colorPaletteBerryBorder2 = \"var(--colorPaletteBerryBorder2)\";\n\n// @public\nexport const colorPaletteBerryBorderActive = \"var(--colorPaletteBerryBorderActive)\";\n\n// @public\nexport const colorPaletteBerryForeground1 = \"var(--colorPaletteBerryForeground1)\";\n\n// @public\nexport const colorPaletteBerryForeground2 = \"var(--colorPaletteBerryForeground2)\";\n\n// @public\nexport const colorPaletteBerryForeground3 = \"var(--colorPaletteBerryForeground3)\";\n\n// @public\nexport const colorPaletteBlueBackground2 = \"var(--colorPaletteBlueBackground2)\";\n\n// @public\nexport const colorPaletteBlueBorderActive = \"var(--colorPaletteBlueBorderActive)\";\n\n// @public\nexport const colorPaletteBlueForeground2 = \"var(--colorPaletteBlueForeground2)\";\n\n// @public\nexport const colorPaletteBrassBackground2 = \"var(--colorPaletteBrassBackground2)\";\n\n// @public\nexport const colorPaletteBrassBorderActive = \"var(--colorPaletteBrassBorderActive)\";\n\n// @public\nexport const colorPaletteBrassForeground2 = \"var(--colorPaletteBrassForeground2)\";\n\n// @public\nexport const colorPaletteBrownBackground2 = \"var(--colorPaletteBrownBackground2)\";\n\n// @public\nexport const colorPaletteBrownBorderActive = \"var(--colorPaletteBrownBorderActive)\";\n\n// @public\nexport const colorPaletteBrownForeground2 = \"var(--colorPaletteBrownForeground2)\";\n\n// @public\nexport const colorPaletteCornflowerBackground2 = \"var(--colorPaletteCornflowerBackground2)\";\n\n// @public\nexport const colorPaletteCornflowerBorderActive = \"var(--colorPaletteCornflowerBorderActive)\";\n\n// @public\n```\n\n----------------------------------------\n\nTITLE: Defining Toggle Component Interfaces in TypeScript for FluentUI\nDESCRIPTION: Defines the interfaces for the Toggle component including props, style props, and styles. This component provides a binary on/off control with customizable labels and styling options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_224\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IToggle {\n    // (undocumented)\n    focus: () => void;\n}\n\n// @public\nexport interface IToggleProps extends React_2.HTMLAttributes<HTMLElement>, React_2.RefAttributes<HTMLElement> {\n    ariaLabel?: string;\n    as?: IComponentAs<React_2.HTMLAttributes<HTMLElement>>;\n    checked?: boolean;\n    componentRef?: IRefObject<IToggle>;\n    defaultChecked?: boolean;\n    disabled?: boolean;\n    inlineLabel?: boolean;\n    label?: string | JSX.Element;\n    // @deprecated (undocumented)\n    offAriaLabel?: string;\n    offText?: string;\n    // @deprecated (undocumented)\n    onAriaLabel?: string;\n    onChange?: (event: React_2.MouseEvent<HTMLElement>, checked?: boolean) => void;\n    // @deprecated (undocumented)\n    onChanged?: (checked: boolean) => void;\n    onText?: string;\n    role?: 'checkbox' | 'switch' | 'menuitemcheckbox';\n    styles?: IStyleFunctionOrObject<IToggleStyleProps, IToggleStyles>;\n    theme?: ITheme;\n}\n\n// @public\nexport interface IToggleStyleProps {\n    checked?: boolean;\n    className?: string;\n    disabled?: boolean;\n    inlineLabel?: boolean;\n    onOffMissing?: boolean;\n    theme: ITheme;\n}\n\n// @public\nexport interface IToggleStyles {\n    container: IStyle;\n    label: IStyle;\n    pill: IStyle;\n    root: IStyle;\n    text: IStyle;\n    thumb: IStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SelectionZone Component Class\nDESCRIPTION: A component that manages selection behavior for collections of items. Handles keyboard and mouse interactions for selection, including multi-select with modifiers.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_253\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport class SelectionZone extends React_2.Component<ISelectionZoneProps, ISelectionZoneState> {\n    constructor(props: ISelectionZoneProps);\n    // (undocumented)\n    componentDidMount(): void;\n    // (undocumented)\n    componentDidUpdate(previousProps: ISelectionZoneProps): void;\n    // (undocumented)\n    componentWillUnmount(): void;\n    // (undocumented)\n    static defaultProps: {\n        isSelectedOnFocus: boolean;\n        toggleWithoutModifierPressed: boolean;\n        selectionMode: SelectionMode_2;\n        selectionClearedOnEscapePress: boolean;\n    };\n    // (undocumented)\n    static getDerivedStateFromProps(nextProps: ISelectionZoneProps, prevState: ISelectionZoneState): ISelectionZoneState;\n    ignoreNextFocus: () => void;\n    // (undocumented)\n    render(): JSX.Element;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ShimmerElementType Enumeration\nDESCRIPTION: Enumeration for different types of shimmer elements used in loading state visualizations, including line, circle, and gap elements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_260\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport enum ShimmerElementType {\n    circle = 2,\n    gap = 3,\n    line = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CSP settings via window.FabricConfig\nDESCRIPTION: Shows how to configure Content Security Policy (CSP) settings for `merge-styles` through the global `window.FabricConfig.mergeStyles.cspSettings`.  This configuration must occur before any Fluent UI React code is loaded.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/merge-styles/README.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nwindow.FabricConfig = {\n  mergeStyles: {\n    cspSettings: { nonce: 'your nonce here' },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Grow for Stack.Item using CSS\nDESCRIPTION: This snippet demonstrates how to set the grow property for a Stack.Item component using CSS.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Flex/Flex.StackItem.stories.mdx#2025-04-20_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.flex-item {\n  flex-grow: 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Boolean Transform Function - TypeScript\nDESCRIPTION: This snippet defines a `boolTransform` function that constructs a prop transform closure for modifying JSX element props concerning boolean values. It requires a new value and a mapping of old to new values, and it performs the replacement or transformation based on the presence of the prop within the JSX element.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/codemods/documentation/renamePropTransforms.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport function boolTransform(newValue?: boolean, map?: ValueMap<string>): PropTransform {\n  return (\n    element: JsxExpression | JsxOpeningElement | JsxSelfClosingElement,\n    toRename: string,\n    replacementName: string,\n  ) => {\n    if (elementNotInSpread(element)) {\n      const toChange = getValueToChange(element as JsxExpression);\n      if (toChange) {\n        const oldText = toChange.getText();\n        toChange.replaceWithText(map ? map[oldText] : newValue !== undefined ? newValue.toString() : toRename);\n        return Ok('Prop value transformed successfully');\n      }\n      return Err({ reason: 'Could not access prop value to transform.' });\n    } else {\n      return renamePropInSpread(\n        element as JsxOpeningElement | JsxSelfClosingElement,\n        toRename,\n        replacementName,\n        map,\n        newValue?.toString(),\n      );\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Package Updates Entry for Latest Release\nDESCRIPTION: List of package dependency updates for the latest release including various FluentUI packages\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-accordion/library/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Patches\n\n- Bump @fluentui/react-aria to v9.3.26 ([PR #28412](https://github.com/microsoft/fluentui/pull/28412) by beachball)\n- Bump @fluentui/react-context-selector to v9.1.26 ([PR #28412](https://github.com/microsoft/fluentui/pull/28412) by beachball)\n- Bump @fluentui/react-jsx-runtime to v9.0.0-alpha.10 ([PR #28412](https://github.com/microsoft/fluentui/pull/28412) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Installing @fluentui/react-icons-northstar with Yarn\nDESCRIPTION: This snippet provides the Yarn command to install the @fluentui/react-icons-northstar package, offering an alternative to NPM for package management.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/react-icons-northstar/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @fluentui/react-icons-northstar\n```\n\n----------------------------------------\n\nTITLE: Creating Focus Outline Styles in FluentUI\nDESCRIPTION: Example of using createFocusOutlineStyle to implement custom focus outline styling with specific offset values.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Accessibility/FocusIndicator.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeStyles } from '@fluentui/react-components';\nimport { createFocusOutlineStyle } from '@fluentui/react-components';\n\nconst useStyles = makeStyles({\n  focusIndicator: createFocusOutlineStyle({\n    // selector to be used to decide focus presence: 'focus-within' | 'focus'\n    selector: 'focus-within',\n    // custom style to be applied with the outline style\n    style: {\n      outlineOffset: { top: '6px', bottom: '6px', left: '4px', right: '4px' },\n    },\n  }),\n});\n\nfunction Component() {\n  const styles = useStyles();\n  return <div className={styles.focusIndicator} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.98.1\nDESCRIPTION: This patch notes the update to version 8.98.1 of @fluentui/react, aimed at delivering new fixes and features.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/azure-themes/CHANGELOG.md#2025-04-20_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.98.1 ([PR #25198](https://github.com/microsoft/fluentui/pull/25198) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Defining SelectableOptionMenuItemType Enumeration\nDESCRIPTION: Defines the types of items that can appear in selectable menus like dropdowns. Includes normal items, dividers, headers, and select all options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_250\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nenum SelectableOptionMenuItemType {\n    // (undocumented)\n    Divider = 1,\n    // (undocumented)\n    Header = 2,\n    // (undocumented)\n    Normal = 0,\n    // (undocumented)\n    SelectAll = 3\n}\nexport { SelectableOptionMenuItemType as DropdownMenuItemType }\nexport { SelectableOptionMenuItemType }\n```\n\n----------------------------------------\n\nTITLE: Version Comparison Documentation in Markdown\nDESCRIPTION: Markdown formatted change log entries showing version updates and patches, with links to pull requests and commit references.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-date-time/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patches\n\n- Bump @fluentui/react to v8.106.2 ([PR #26980](https://github.com/microsoft/fluentui/pull/26980) by beachball)\n\n## [8.7.60](https://github.com/microsoft/fluentui/tree/@fluentui/react-date-time_v8.7.60)\n\nWed, 22 Feb 2023 07:44:35 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-date-time_v8.7.59..@fluentui/react-date-time_v8.7.60)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Size Property Union Example\nDESCRIPTION: Example of a TypeScript discriminated union type for component size properties, showing both inline and exported type declaration approaches.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/implementation-best-practices.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Inline approach\nsize: 'small' | 'medium' | 'large';\n\n// Exported type approach\nexport type Size = 'small' | 'medium' | 'large';\nsize: Size;\n```\n\n----------------------------------------\n\nTITLE: Applying CSS-Based Motion via Griffel makeStyles\nDESCRIPTION: Example showing how to apply CSS-based motion by using it as a CSS class with Griffel's makeStyles. Part of the discarded CSS-based approach.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/motion-definition-n-apis.md#2025-04-20_snippet_30\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeStyles } from '@griffel/react';\nimport { fadeEnterSlow } from 'some-pkg';\n\nconst useStyles = makeStyles({\n  root: {\n    ...fadeEnterSlow,\n  },\n});\n\nfunction MyComponent() {\n  const styles = useStyles();\n\n  return <div className={styles.root}>Hello world!</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling with CSS for Flexbox\nDESCRIPTION: This CSS snippet sets the flexbox layout properties, including 'flex-wrap', 'overflow', and sizing options for HTML elements. These styles ensure the components behave consistently across different devices and screen sizes, with the 'box-sizing' property included for layout management.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Flex/Flex.Stack.stories.mdx#2025-04-20_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.flex {\\n  flex-wrap: wrap;\\n  overflow: visible;\\n  height: 100%;\\n}\\n.inner {\\n  display: flex;\\n  flex-wrap: wrap;\\n  overflow: visible;\\n  box-sizing: border-box;\\n  width: 100%;\\n  max-width: 100vw;\\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing Tokens in Fluent UI JavaScript\nDESCRIPTION: This snippet demonstrates how to define and expose token values for UI components using JavaScript. It utilizes the Fluent UI theme tokens to create customizable and reusable styles. Developers need '@fluentui/react-theme' module to use token definitions. The main idea is to expose these token definitions and then incorporate them into the existing theme structure.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/extended-design-tokens.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Button.tokens.ts\\n\\nimport { tokens } from '@fluentui/react-theme';\\n\\n// Semantic button, shared between all Button-family components\\n\\nexport const buttonGroupTokens = {\\n\\n  buttonBorderRadius: `var(--buttonBorderRadius, ${tokens.borderRadiusMedium})`,\\n\\n  buttonFontFamily: `var(--buttonFontFamily,${tokens.fontFamilyBase})`,\\n\\n  // ...\\n\\n}\\n// Button control tokens, used by Default button\\n\\nexport const buttonTokens = {\\n\\n  // Default\\n\\n  ctrlButtonBorderRadius: `var(--ctrlButtonBorderRadius, ${buttonGroupTokens.buttonBorderRadius})`,\\n\\n  ctrlButtonFontFamily: `var(--ctrlButtonFontFamily,${buttonGroupTokens.buttonFontFamily})`,\\n\\n  ...\\n\\n}\n```\n\n----------------------------------------\n\nTITLE: MUI Checkbox Example DOM Structure in HTML\nDESCRIPTION: This HTML snippet presents the DOM structure of an MUI Checkbox. The structure relies on nested spans within a label, using Material-UI's class names for styling and behavior. It also incorporates an SVG for the checkmark icon.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Checkbox.md#2025-04-20_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<label class=\"MuiFormControlLabel-root\">\n  <span\n    class=\"MuiButtonBase-root MuiIconButton-root jss264 MuiCheckbox-root MuiCheckbox-colorSecondary jss265 Mui-checked MuiIconButton-colorSecondary\"\n    aria-disabled=\"false\"\n  >\n    <span class=\"MuiIconButton-label\">\n      <input type=\"checkbox\" class=\"jss267\" value=\"checkedA\" data-indeterminate=\"false\" checked=\"\" />\n      <svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\" role=\"presentation\">\n        <path\n          d=\"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"\n        ></path>\n      </svg>\n    </span>\n    <span class=\"MuiTouchRipple-root\"></span>\n  </span>\n  <span class=\"MuiTypography-root MuiFormControlLabel-label MuiTypography-body1\">Secondary</span>\n</label>\n```\n\n----------------------------------------\n\nTITLE: Rendering FluentUI Tooltip Examples with Theme Switcher\nDESCRIPTION: This code snippet demonstrates how to render examples of FluentUI tooltips with a theme switcher. It uses the DisplayToggle component to allow switching between light and dark themes, and showcases both one-line and two-line tooltip examples using images.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/TooltipPage/docs/android/TooltipOverview.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<DisplayToggle onText=\"Dark\" offText=\"Light\" label=\"Theme Switcher\">\n### One line\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/android/updated/img_tooltip_01_oneline_light.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/android/updated/img_tooltip_01_oneline_dark.png?text=DarkMode\" />\n\n### Two line\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/android/updated/img_tooltip_02_twoline_light.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/android/updated/img_tooltip_02_twoline_dark.png?text=DarkMode\" />\n\n</DisplayToggle>\n```\n\n----------------------------------------\n\nTITLE: Defining OverflowAxis Type in TypeScript\nDESCRIPTION: This snippet defines the OverflowAxis type, which specifies the direction of potential overflow, either horizontal or vertical, used to manage display layout.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/priority-overflow/etc/priority-overflow.api.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type OverflowAxis = 'horizontal' | 'vertical';\n```\n\n----------------------------------------\n\nTITLE: Adding Hover Underline Effect to Link in Swift\nDESCRIPTION: Shows how to configure a Link control to display an underline effect when the mouse hovers over it using the showsUnderlineWhileMouseInside property.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/LinkPage/docs/mac/LinkUsage.md#2025-04-20_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\n// Link can also display an underline when a mouse hovers over it with the optional property \"showsUnderlineWhileMouseInside\".\nlet link = Link(title: \"Link  with hover effects\", url: NSURL(string: \"https://github.com/microsoft/fluentui-apple\")!)\nlink.showsUnderlineWhileMouseInside = true\n```\n\n----------------------------------------\n\nTITLE: Project Task Execution with Nx\nDESCRIPTION: Commands for running specific tasks on individual projects or across the entire monorepo using Nx run commands.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/command-cheat-sheet.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn nx run <project-name>:<target-name> # runs tasks within a package\nyarn nx run <package-name>:build # builds a specific package\nyarn nx run <package-name>:test # runs test suite for a package\nyarn nx run-many -t <target-name> # runs task on all monorepo projects\n```\n\n----------------------------------------\n\nTITLE: Pill DOM Representation in HTML\nDESCRIPTION: This snippet represents the DOM structure generated by Pill components. It illustrates how standard span elements are used, along with accessibility roles indicating button or listbox functionality.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Pills.md#2025-04-20_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<span> ... </span>\n\n<span role=\"button\"> ... </span>\n\n<div role=\"listbox\">\n  <span role=\"option\"> ... </span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Comparing Changes Between Versions in GitHub\nDESCRIPTION: This code snippet shows how to construct a URL to compare changes between two versions of the package on GitHub. It uses the package name and version numbers to generate the comparison link.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-image/library/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-image_v9.0.3..@fluentui/react-image_v9.0.4)\n```\n\n----------------------------------------\n\nTITLE: Defining Options in v8 Combobox, Dropdown and v0 Dropdown\nDESCRIPTION: Code examples showing how options were defined in Fluent UI v8's Combobox and Dropdown components, and v0's Dropdown component using the options/items props approach.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/library/docs/Spec.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// v7/v8 Combobox and Dropdown\n<Combobox options={[{ key: 'A', text: 'Option A' }, { key: 'B', text: 'Option B' }]} />\n\n<Dropdown options={[{ key: 'A', text: 'Option A' }, { key: 'B', text: 'Option B' }]} />\n\n// v0 Dropdown\n<Dropdown items={['Option A', 'Option B']} />\n```\n\n----------------------------------------\n\nTITLE: Version Update Log Entry\nDESCRIPTION: Markdown formatted changelog entry showing version updates and package dependency patches\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-button/library/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patches\n\n- Bump @fluentui/react-aria to v9.5.0 ([PR #30056](https://github.com/microsoft/fluentui/pull/30056) by beachball)\n- Bump @fluentui/react-jsx-runtime to v9.0.21 ([PR #30056](https://github.com/microsoft/fluentui/pull/30056) by beachball)\n- Bump @fluentui/react-shared-contexts to v9.13.1 ([PR #30056](https://github.com/microsoft/fluentui/pull/30056) by beachball)\n- Bump @fluentui/react-tabster to v9.15.1 ([PR #30056](https://github.com/microsoft/fluentui/pull/30056) by beachball)\n- Bump @fluentui/react-utilities to v9.15.3 ([PR #30056](https://github.com/microsoft/fluentui/pull/30056) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Running Tests with npm\nDESCRIPTION: This command launches the test runner in interactive watch mode for the application. It requires a testing framework compatible with Create React App.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/cra-template/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Displaying NotificationView Examples in Markdown\nDESCRIPTION: This markdown snippet demonstrates how to showcase the NotificationView component with images for both toast and bar styles in light and dark modes. It uses a DisplayToggle component for theme switching.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/MessageBarPage/docs/ios/MessageBarOverview.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<DisplayToggle onText=\"Dark\" offText=\"Light\" label=\"Theme Switcher\">\n### Toast\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_notifications_03_toast_light.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_notifications_03_toast_dark.png?text=DarkMode\" />\n\n### Bar\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_notifications_01_standard_light.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_notifications_01_standard_dark.png?text=DarkMode\" />\n\n</DisplayToggle>\n```\n\n----------------------------------------\n\nTITLE: TypeScript: Switch Class Names\nDESCRIPTION: Defines a constant for accessing the class names of the different slots in the Switch component. This is used internally for applying styles to the different parts of the component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-switch/library/etc/react-switch.api.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport const switchClassNames: SlotClassNames<SwitchSlots>;\"\n```\n\n----------------------------------------\n\nTITLE: Memoization of Context Values for Button Component in React\nDESCRIPTION: Illustrates context value memoization within a Button component, ensuring that consumer components are notified only when the relevant values change, thereby optimizing performance.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-utilities/src/compose/README.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfunction Button(props) {\n  const { inline, size } = state;\n  const value = React.useMemo(() => ({ inline, open }), [inline, open]);\n\n  // consumers of \"SampleContext\" will be notified only when \"value\" changes\n  return <SampleContext.Provider value={value} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Brand Variants Type in TypeScript\nDESCRIPTION: This snippet defines the BrandVariants type as a record mapping Brands to strings. This allows for a structured way to manage brand-related data throughout the UI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/tokens/etc/tokens.api.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type BrandVariants = Record<Brands, string>;\n```\n\n----------------------------------------\n\nTITLE: Empty TypeScript Package Documentation Block\nDESCRIPTION: An empty TypeScript code block indicating no package documentation comment exists for this package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-utilities-compat/library/etc/react-utilities-compat.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// (No @packageDocumentation comment for this package)\n```\n\n----------------------------------------\n\nTITLE: Version History Entry - FluentUI Font Icons MDL2\nDESCRIPTION: Example version entry from the changelog showing version number, date, comparison link and patch details\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/font-icons-mdl2/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [8.1.15](https://github.com/microsoft/fluentui/tree/@fluentui/font-icons-mdl2_v8.1.15)\n\nMon, 01 Nov 2021 07:32:08 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/font-icons-mdl2_v8.1.14..@fluentui/font-icons-mdl2_v8.1.15)\n\n### Patches\n\n- Bump @fluentui/style-utilities to v8.4.0 ([PR #20231](https://github.com/microsoft/fluentui/pull/20231) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Register On Theme Change Callback Function\nDESCRIPTION: Defines a function, `registerOnThemeChangeCallback`, which registers a callback function to be executed whenever the theme changes. The callback receives the new `ITheme` as an argument.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/style-utilities/etc/style-utilities.api.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n\"export function registerOnThemeChangeCallback(callback: (theme: ITheme) => void): void;\"\n```\n\n----------------------------------------\n\nTITLE: Defining Video Component for FluentUI in TypeScript\nDESCRIPTION: Exports a Video component for FluentUI that wraps the HTML video element with additional styling and functionality. Includes a className constant and interface definition for props.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-migration-v0-v9/library/etc/react-migration-v0-v9.api.md#2025-04-20_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport const Video: React_2.ForwardRefExoticComponent<VideoProps & React_2.RefAttributes<HTMLVideoElement>>;\n\n// @public (undocumented)\nexport const videoClassName = \"fui-Video\";\n\n// @public\nexport interface VideoProps extends React_2.VideoHTMLAttributes<HTMLVideoElement> {\n    autoPlay?: boolean;\n    controls?: boolean;\n    loop?: boolean;\n    muted?: boolean;\n    poster?: string;\n    src: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.68.1\nDESCRIPTION: This entry reflects the version bump of '@fluentui/react' to 8.68.1, contributing to improvements in the provided components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/theming-designer/CHANGELOG.md#2025-04-20_snippet_32\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.68.1 ([PR #23002](https://github.com/microsoft/fluentui/pull/23002) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Defining Motion Keyframes in JavaScript\nDESCRIPTION: This snippet defines a motion using JavaScript, including keyframes and duration. It demonstrates how the Web Animations API allows for defining animation properties directly in JavaScript objects, offering flexibility without relying on CSS classes or Griffel for keyframe generation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/motion-definition-n-apis.md#2025-04-20_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst fadeEnterSlow: AtomMotion = {\n  keyframes: [{ opacity: 0 }, { opacity: 1 }],\n\n  duration: 500,\n};\n```\n\n----------------------------------------\n\nTITLE: Converting List Shorthand API from v0 to v9\nDESCRIPTION: Example showing how to migrate from v0's shorthand items prop to v9's composition approach using ListItem components. Demonstrates converting a list with header and content properties into explicitly rendered ListItem components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-migration-v0-v9/stories/src/List/ListDescription.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst items = [\n  {\n    key: 'robert',\n    header: 'Robert Tolbert',\n    content: 'Program the sensor to the SAS alarm through the haptic SQL card!',\n  },\n  {\n    key: 'celeste',\n    header: 'Celeste Burton',\n    content: 'Use the online FTP application to input the multi-byte application!',\n  },\n];\n\nconst MyList = () => {\n  return <List items={items} />;\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst items = [\n  {\n    key: 'robert',\n    header: 'Robert Tolbert',\n    content: 'Program the sensor to the SAS alarm through the haptic SQL card!',\n  },\n  {\n    key: 'celeste',\n    header: 'Celeste Burton',\n    content: 'Use the online FTP application to input the multi-byte application!',\n  },\n];\n\nconst MyList = () => {\n  return (\n    <List>\n      {items.map(item => {\n        <ListItem key={item.key} value={item.key} header={item.header}>\n          {item.content}\n        </ListItem>;\n      })}\n    </List>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Dry Run for Normalizing Package Dependencies\nDESCRIPTION: This command simulates the generation of normalized package dependencies without actually writing to the disk. It helps users to view the changes that would be applied to their package.json files before committing to the changes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/normalize-package-dependencies/README.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:normalize-package-dependencies --dry-run\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.68.4\nDESCRIPTION: This patch captures the update of '@fluentui/react' to version 8.68.4, an important inclusion as part of the project's routine maintenance.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/theming-designer/CHANGELOG.md#2025-04-20_snippet_26\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.68.4 ([PR #23103](https://github.com/microsoft/fluentui/pull/23103) by beachball)\n```\n\n----------------------------------------\n\nTITLE: TagPickerButton Hook\nDESCRIPTION: Defines the hook for using the TagPickerButton component. It takes TagPickerButtonProps and a ref as input and returns TagPickerButtonState.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const useTagPickerButton_unstable: (props: TagPickerButtonProps, ref: React_2.Ref<HTMLButtonElement>) => TagPickerButtonState;\"\n```\n\n----------------------------------------\n\nTITLE: Updating react-icons Package in FluentUI React Table\nDESCRIPTION: This chore updates the react-icons package to version ^2.0.245 in the FluentUI React Table project. This update brings in the latest icons and potential performance improvements from the react-icons library.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-table/library/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: none\nCODE:\n```\n\"chore: Update react-icons package to ^2.0.245 ([PR #31802](https://github.com/microsoft/fluentui/pull/31802) by ololubek@microsoft.com)\"\n```\n\n----------------------------------------\n\nTITLE: Using insertion point for style specificity control\nDESCRIPTION: Demonstrates how to use the insertion point API to control the specificity of styles via document order when working with non-Griffel generated styles in shadow DOM.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/WebComponentsInterop/UsingFluentReactWithWebComponents.stories.mdx#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createRoot } from '@fluentui-contrib/react-shadow';\nimport { createCSSStyleSheetFromTheme, ThemelessFluentProvider } from '@fluentui-contrib/react-themeless-provider';\nimport { webLightTheme, Button } from '@fluentui/react-components';\n\nconst themeSheet = createCSSStyleSheetFromTheme(':root', webLightTheme);\ndocument.head.adoptedStyleSheets = [...document.adoptedStyleSheets, themeSheet];\n\n// This `CSSStyleSheet` acts as a sentinel for inserting Griffel styles.\n// Griffel styles are inserted after `insertionPoint`.\nconst insertionPoint = new CSSStyleSheet();\nconst root = createRoot({ insertionPoint });\n\n// These styles are not generated by Griffel.\nconst nonGriffelStyles = new CSSStyleSheet();\nnonGriffelStyles.insertRule('.my-style-from-outside-fluent: { color: red; }');\n\n// Griffel styles will be inserted after `insertionPoint` and\n// before `nonGriffelStyles`, allowing styles defined in `nonGriffelStyles`\n// to \"win\" specificity by appearing later in the document order.\nconst externalStyleSheets = [insertionPoint, nonGriffelStyles];\n\n<ThemelessFluentProvider>\n  <root.div styleSheets={externalStyleSheets}>\n    <Button className=\"my-style-from-outside-fluent\">Button with external style</Button>\n  </root.div>\n</ThemelessFluentProvider>;\n```\n\n----------------------------------------\n\nTITLE: Declaring Provider and Functions with TypeScript\nDESCRIPTION: This code snippet declares a context provider, a function type definition, and a hook function using TypeScript. It requires the 'react' library as a dependency. The PortalCompatContextProvider is a provider object for RegisterPortalFn, a function type handling portal registration. The usePortalCompat function returns a RegisterPortalFn instance, facilitating portal management. These declarations are non-documented and must align with the package's usage in @fluentui/react-portal-compat-context.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-portal-compat-context/etc/react-portal-compat-context.api.md#2025-04-20_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as React_2 from 'react';\n\n// @public (undocumented)\nexport const PortalCompatContextProvider: React_2.Provider<RegisterPortalFn>;\n\n// @public (undocumented)\nexport type RegisterPortalFn = (el: HTMLElement) => () => void;\n\n// @public (undocumented)\nexport function usePortalCompat(): RegisterPortalFn;\n\n// (No @packageDocumentation comment for this package)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Fade Component in Fluent UI using React\nDESCRIPTION: This code snippet demonstrates how to create a custom fade variant using the factory function `createFadePresence()` and then transform it into a React component with `createPresenceComponent()`. The fade variant uses Fluent UI's motion tokens to define animation durations and easing curves, making it customizable for interactive UI elements. The component takes a 'visible' property to control its visibility. The snippet requires Fluent UI's React components library.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-motion-components-preview/stories/src/Fade/FadeCustomization.stories.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { motionTokens } from '@fluentui/react-components';\n\nconst CustomFadeVariant = createPresenceComponent(\n  createFadePresence({\n    enterDuration: motionTokens.durationSlow,\n    enterEasing: motionTokens.curveEasyEaseMax,\n    exitDuration: motionTokens.durationNormal,\n  }),\n);\n\nconst CustomFade = ({ visible }) => (\n  <CustomFadeVariant unmountOnExit visible={visible}>\n    {/* Content */}\n  </CustomFadeVariant>\n);\n```\n\n----------------------------------------\n\nTITLE: Selection Class Definition in TypeScript\nDESCRIPTION: Class implementing selection functionality with methods for managing selected items and selection modes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/utilities/etc/utilities.api.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nclass Selection_2<TItem = IObjectWithKey> implements ISelection<TItem> {\n    constructor(...options: TItem extends IObjectWithKey ? [] | [ISelectionOptions<TItem>] : [ISelectionOptionsWithRequiredGetKey<TItem>]);\n    canSelectItem(item: TItem, index?: number): boolean;\n    count: number;\n    getItemIndex(key: string): number;\n    getItems(): TItem[];\n    getKey(item: TItem, index?: number): string;\n    getSelectedCount(): number;\n    getSelectedIndices(): number[];\n    getSelection(): TItem[];\n    isAllSelected(): boolean;\n    isIndexSelected(index: number): boolean;\n    isKeySelected(key: string): boolean;\n    isModal(): boolean;\n    isRangeSelected(fromIndex: number, count: number): boolean;\n    readonly mode: SelectionMode_2;\n    selectToIndex(index: number, clearSelection?: boolean): void;\n    selectToKey(key: string, clearSelection?: boolean): void;\n    selectToRange(fromIndex: number, count: number, clearSelection?: boolean): void;\n    setAllSelected(isAllSelected: boolean): void;\n    setChangeEvents(isEnabled: boolean, suppressChange?: boolean): void;\n    setIndexSelected(index: number, isSelected: boolean, shouldAnchor: boolean): void;\n    setItems(items: TItem[], shouldClear?: boolean): void;\n    setKeySelected(key: string, isSelected: boolean, shouldAnchor: boolean): void;\n    setModal(isModal: boolean): void;\n    setRangeSelected(fromIndex: number, count: number, isSelected: boolean, shouldAnchor: boolean): void;\n    toggleAllSelected(): void;\n    toggleIndexSelected(index: number): void;\n    toggleKeySelected(key: string): void;\n    toggleRangeSelected(fromIndex: number, count: number): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Option State Definition\nDESCRIPTION: This snippet defines the state for the Option component. It includes properties for disabled state, active state, focus visibility, multiselect state, and selected state.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/library/etc/react-combobox.api.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport type OptionState = ComponentState<OptionSlots> & Pick<OptionProps, 'disabled'> & {\n    active: boolean;\n    focusVisible: boolean;\n    multiselect?: boolean;\n    selected: boolean;\n};\"\n```\n\n----------------------------------------\n\nTITLE: Widening Types Problem Example\nDESCRIPTION: This code demonstrates a potential issue with type widening in TypeScript where a component's props might not be strictly compatible with the properties expected by the `root` slot. This can lead to unexpected behavior if properties intended for internal state are inadvertently passed to the root element.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/root-as-slot.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype ComponentProps<S extends ObjectShorthandPropsRecord> = Omit<\n  { [Key in keyof S]?: ShorthandProps<S[Key]> },\n  'root'\n> &\n  S['root']; // this will make Slots['root'] part of Props\n\ntype Slots = {\n  root: ObjectShorthandProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n};\n\ninterface Props extends ComponentProps<Slots> {\n  /**\n   * Property that can be passed through props\n   * but doesn't belong on the element itself,\n   * it's only used internally by state\n   */\n  stateSpecificProperty?: unknown;\n}\ninterface State extends ComponentState<Slots> {\n  stateSpecificProperty: unknown;\n}\n\n// ...\n// use*State hook\nreturn {\n  // This should error 🚨 because of stateSpecificProperty,\n  // but it doesn't due to type widening\n  root: resolveShorthand(props),\n};\n```\n\n----------------------------------------\n\nTITLE: Dry Run Command for Dependency Mismatch Generator\nDESCRIPTION: This command shows how to simulate the execution of the generator without making any changes to the disk, useful for previewing updates.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/dependency-mismatch/README.md#2025-04-20_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:dependency-mismatch --dry-run\n```\n\n----------------------------------------\n\nTITLE: Positioning Shorthand Type Definitions\nDESCRIPTION: Type definitions for the new positioning shorthand system including valid position values and helper functions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/exposing-popper-options.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport type PositioningShorthandValue =\n  | 'above'\n  | 'above-start'\n  | 'above-end'\n  | 'below'\n  | 'below-start'\n  | 'below-end'\n  | 'before'\n  | 'before-top'\n  | 'before-bottom'\n  | 'after'\n  | 'after-top'\n  | 'after-bottom';\n\nexport type PositioningShorthand = PositioningProps | PositioningShorthandValue;\n\nexport function resolvePositioningShorthand(shorthand: PositioningShorthand): PositioningProps {\n  if (typeof shorthand === 'string') {\n    return {\n      ...parseStringShorthand(shorthand),\n    };\n  }\n\n  return shorthand;\n}\n\nfunction parseStringShorthand(shorthand) {\n  // Some way to parse string to the position and align props\n  return {\n    position,\n    align,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Theme-Switchable Spinner Example in Markdown\nDESCRIPTION: This code snippet demonstrates how to display a theme-switchable spinner example using markdown and custom HTML tags. It includes a DisplayToggle component for switching between light and dark themes, and image placeholders for the spinner visuals.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/SpinnerPage/docs/android/SpinnerOverview.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<DisplayToggle onText=\"Dark\" offText=\"Light\" label=\"Theme Switcher\">\n### Spinner\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/android/updated/img_spinner_01_light.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/android/updated/img_spinner_01_dark.png?text=DarkMode\" />\n</DisplayToggle>\n```\n\n----------------------------------------\n\nTITLE: FluentUI React Monaco Editor PR References\nDESCRIPTION: Markdown links to pull requests associated with version changes\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-monaco-editor/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[PR #24394](https://github.com/microsoft/fluentui/pull/24394)\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.115.0\nDESCRIPTION: Updates the @fluentui/react package to version 8.115.0, focusing on resolving bugs and enhancing user experience.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluent2-theme/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.115.0 ([PR #30221](https://github.com/microsoft/fluentui/pull/30221) by beachball)\n```\n\n----------------------------------------\n\nTITLE: List Component Usage in v8 (Configuration-based)\nDESCRIPTION: Example of using the List component in Fluent UI React v8, which follows a configuration-based approach where items are passed directly to the component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-list/library/docs/MIGRATION.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst items = [{ name: 'John' }, { name: 'Alice' }];\n\nconst MyList = () => {\n  return <List items={items} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Attachment Component in FluentUI v9\nDESCRIPTION: Updated implementation of the Attachment component using v9's compositional pattern with separate subcomponents for icon, body, header, description, and action elements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-migration-v0-v9/stories/src/Attachment/AttachmentDescription.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Attachment progress={45} onClick={() => alert('Attachment clicked')}>\n  <AttachmentIcon><Word /></AttachmentIcon>\n   <AttachmentBody>\n    <AttachmentHeader>Document.docx</AttachmentHeader>\n    <AttachmentDescription>800 KB</AttachmentDescription>\n  </AttachmentBody>\n  <AttachmentAction icon={<Dismiss />} onClick={() => alert('Remove clicked')} title=\"Remove\" />\n</Attachment>\n```\n\n----------------------------------------\n\nTITLE: Bumping FluentUI React Monaco Editor Version with PR\nDESCRIPTION: This snippet shows how to bump the version of the @fluentui/react-monaco-editor package. The pull request number provides a direct link to the change within the repository. This action is part of maintaining the dependencies for the project.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-docsite-components/CHANGELOG.md#2025-04-20_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n\"- Bump @fluentui/react-monaco-editor to v1.7.138 ([PR #29542](https://github.com/microsoft/fluentui/pull/29542) by beachball)\"\n```\n\n----------------------------------------\n\nTITLE: Defining Icon Component\nDESCRIPTION: Defines `Icon` as a React functional component that takes `IIconProps` as props.  This is a simple functional component used to render an Icon.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_78\n\nLANGUAGE: typescript\nCODE:\n```\nexport const Icon: React_2.FunctionComponent<IIconProps>;\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.99.0\nDESCRIPTION: This entry discusses the increment to version 8.99.0 for the @fluentui/react package, reflecting ongoing updates for optimal performance and feature enhancements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/azure-themes/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.99.0 ([PR #25428](https://github.com/microsoft/fluentui/pull/25428) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Building\nDESCRIPTION: Details the steps to set up the development environment by navigating to the project root and installing dependencies using Yarn. Windows users are advised to run specific commands for initial setup and correct linking. The command sequence also includes starting specific documentation sites and selecting projects to work on.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/dev-workflow.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd fluentui\nyarn\n```\n\nLANGUAGE: bash\nCODE:\n```\n@fluentui/public-docsite // starts the public v8 documentation site.\n@fluentui/public-docsite-v9 // starts the v9 documentation storybook site.\n```\n\n----------------------------------------\n\nTITLE: SearchBoxProps Type Definition (TypeScript)\nDESCRIPTION: Defines the SearchBoxProps type, which extends ComponentProps and InputProps, while omitting certain properties like 'children', 'defaultValue', 'onChange', 'size', 'type', and 'value' from ComponentProps and 'onChange' from InputProps. It includes an optional onChange handler with a specific signature.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-search/library/etc/react-search.api.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type SearchBoxProps = Omit<ComponentProps<Partial<SearchBoxSlots>, 'input'>, 'children' | 'defaultValue' | 'onChange' | 'size' | 'type' | 'value'> & Omit<InputProps, 'onChange'> & {\n    onChange?: (event: SearchBoxChangeEvent, data: InputOnChangeData) => void;\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering SwatchPicker Grid with TypeScript\nDESCRIPTION: This code demonstrates using the renderSwatchPickerGrid utility to simplify grid layouts in a SwatchPicker. The SwatchPicker is set up with a grid layout, and renderSwatchPickerGrid is used to dynamically generate rows and swatches based on provided items and column count. Each swatch is rendered as either an ImageSwatch or a ColorSwatch, determined by the presence of a 'src' property in the item. This implementation requires React, TypeScript, and Fluent UI Swatch Picker components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-swatch-picker/library/docs/Spec.md#2025-04-20_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { renderSwatchPickerGrid } from '@fluentui/react-swatch-picker';\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<SwatchPicker\n  layout=\"grid\"\n  aria-label=\"SwatchPicker default\"\n  selectedValue={selectedValue}\n  onSelectionChange={handleSelect}\n>\n  {renderSwatchPickerGrid({\n    items,\n    columnCount: 3,\n    renderRow: ({ children, rowId }) => <SwatchPickerRow key={rowId}>{children}</SwatchPickerRow>,\n    renderSwatch: item =>\n      item.src ? <ImageSwatch key={item.value} {...item} /> : <ColorSwatch key={item.value} {...item} />,  })}\n</SwatchPicker>\n```\n\n----------------------------------------\n\nTITLE: Migrating CardPreview Component from FluentUI v0 to Latest Version\nDESCRIPTION: This snippet demonstrates the migration of the CardPreview component from @fluentui/react-northstar to @fluentui/react-components. The main changes include the import statement and the use of a standard HTML img tag instead of the Image component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Card/CardPreview.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CardPreview, Image } from '@fluentui/react-northstar';\n\nconst Component = () => (\n  <CardPreview>\n    <Image fluid src=\"https://url-of.the/image.jpg\" alt=\"Preview of a Word document\" />\n  </CardPreview>\n);\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CardPreview } from '@fluentui/react-components';\n\nconst Component = () => (\n  <CardPreview>\n    <img src=\"https://url-of.the/image.jpg\" alt=\"Preview of a Word document\" />\n  </CardPreview>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Select Component using Dropdown in TypeScript\nDESCRIPTION: This snippet showcases how to create a `Select` component that internally uses the `Dropdown` component from Fluent UI, providing a simplified API for selection. The `Select` component executes the `Dropdown` component with selection capabilities.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/document-a-feature.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * A <Select /> is sugar for <Dropdown selection />.\n * @see Dropdown\n */\nfunction Select(props) {\n  return <Dropdown {...props} selection />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Avatar in Table Component - TypeScript\nDESCRIPTION: This code snippet demonstrates how to integrate the Avatar component within a TableCellLayout in a Table, ensuring the Avatar respects the default size set by the Table's size property.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/reusing-avatar-in-components.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<Table size=\"smaller\">\n  <TableBody>\n    <TableRow>\n      <TableCell>\n        {/* The Avatar should have size 20 to follow the Table size */}\n        <TableCellLayout media={<Avatar />}>Main content</TableCellLayout>\n      </TableCell>\n    </TableRow>\n  </TableBody>\n</Table>\n```\n\n----------------------------------------\n\nTITLE: Displaying Theme-Toggled Images of Top App Bar in Markdown\nDESCRIPTION: This snippet demonstrates how to display theme-toggled images of a standard Top App bar using markdown and HTML. It uses a DisplayToggle component to switch between light and dark mode images.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/NavBarPage/docs/android/NavBarOverview.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<DisplayToggle onText=\"Dark\" offText=\"Light\" label=\"Theme Switcher\">\n### Top App bar\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/android/updated/img_topappbar_01_standard_light.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/android/updated/img_topappbar_01_standard_dark.png?text=DarkMode\" />\n\n### Top App bar with Search\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/android/updated/img_topappbar_02_search_light.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/android/updated/img_topappbar_02_search_dark.png?text=DarkMode\" />\n</DisplayToggle>\n```\n\n----------------------------------------\n\nTITLE: Defining KeyNames Interface for Keyboard Key Mappings in TypeScript\nDESCRIPTION: This snippet defines a comprehensive KeyNames interface that maps key names to their corresponding key codes, covering a wide range of keyboard keys and symbols.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/keyboard-key/etc/keyboard-key.api.md#2025-04-20_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface KeyNames {\n    ' ': 32;\n    '!': 49;\n    '#': 51;\n    '%': 53;\n    '&': 55;\n    \"'\": 222;\n    '(': 57;\n    ')': 48;\n    '*': 56;\n    '+': 187;\n    ',': 188;\n    '-': 189;\n    '.': 190;\n    '/': 191;\n    0: 48;\n    1: 49;\n    2: 50;\n    3: 51;\n    4: 52;\n    5: 53;\n    6: 54;\n    7: 55;\n    8: 56;\n    9: 57;\n    ':': 186;\n    ';': 186;\n    '<': 188;\n    '=': 187;\n    '>': 190;\n    '?': 191;\n    '@': 50;\n    '[': 219;\n    '\"': 222;\n    '\\\\': 220;\n    ']': 221;\n    '^': 54;\n    '`': 192;\n    '{': 219;\n    '|': 220;\n    '}': 221;\n    '~': 192;\n    $: 52;\n    _: 189;\n    A: 65;\n    a: 65;\n    // ... (more key mappings)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Loop File Support in FluentUI React\nDESCRIPTION: This update incorporates support for Loop files within the `@fluentui/react-file-type-icons` package.  Loop files are now visually represented with a specific file type icon. This extends the range of recognized file types and improves user experience when dealing with Loop files in FluentUI applications.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-file-type-icons/CHANGELOG.md#2025-04-20_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Configuring Babel Preset for Storybook\nDESCRIPTION: This JSON configuration snippet is used to include the Babel preset for Storybook that integrates Fluent UI React stories. It allows full source code to be accessible in Storybook, enhancing the development experience by providing context in the stories. The main parameter is the 'presets' array that includes the specified Babel preset.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/babel-preset-storybook-full-source/README.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\"@fluentui/babel-preset-storybook-full-source\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing FluentUI React Components and Utilities\nDESCRIPTION: This code snippet shows the import statements for various FluentUI React components, their props, states, and utility functions. It demonstrates how to import specific parts of the FluentUI library for use in a React application.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/etc/react-components.api.md#2025-04-20_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { OnOpenChangeData } from '@fluentui/react-popover';\nimport { OnSelectionChangeCallback } from '@fluentui/react-utilities';\nimport { OnSelectionChangeData } from '@fluentui/react-utilities';\nimport { OnVisibleChangeData } from '@fluentui/react-tooltip';\nimport { OpenPopoverEvents } from '@fluentui/react-popover';\nimport { Option as Option_2 } from '@fluentui/react-combobox';\nimport { optionClassNames } from '@fluentui/react-combobox';\nimport { OptionGroup } from '@fluentui/react-combobox';\nimport { optionGroupClassNames } from '@fluentui/react-combobox';\nimport { OptionGroupProps } from '@fluentui/react-combobox';\nimport { OptionGroupSlots } from '@fluentui/react-combobox';\nimport { OptionGroupState } from '@fluentui/react-combobox';\nimport { OptionOnSelectData } from '@fluentui/react-combobox';\nimport { OptionProps } from '@fluentui/react-combobox';\nimport { OptionSlots } from '@fluentui/react-combobox';\nimport { OptionState } from '@fluentui/react-combobox';\nimport { Overflow } from '@fluentui/react-overflow';\nimport { OverflowDivider } from '@fluentui/react-overflow';\nimport { OverflowItem } from '@fluentui/react-overflow';\nimport { OverflowItemProps } from '@fluentui/react-overflow';\nimport { OverflowProps } from '@fluentui/react-overflow';\nimport { OverlayDrawer } from '@fluentui/react-drawer';\nimport { overlayDrawerClassNames } from '@fluentui/react-drawer';\nimport { OverlayDrawerProps } from '@fluentui/react-drawer';\nimport { OverlayDrawerSlots } from '@fluentui/react-drawer';\nimport { OverlayDrawerState } from '@fluentui/react-drawer';\nimport { PartialTheme } from '@fluentui/react-theme';\nimport { PartitionAvatarGroupItems } from '@fluentui/react-avatar';\nimport { partitionAvatarGroupItems } from '@fluentui/react-avatar';\nimport { PartitionAvatarGroupItemsOptions } from '@fluentui/react-avatar';\nimport { PartitionBreadcrumbItems } from '@fluentui/react-breadcrumb';\nimport { partitionBreadcrumbItems } from '@fluentui/react-breadcrumb';\nimport { PartitionBreadcrumbItemsOptions } from '@fluentui/react-breadcrumb';\nimport { Persona } from '@fluentui/react-persona';\nimport { personaClassNames } from '@fluentui/react-persona';\nimport { PersonaProps } from '@fluentui/react-persona';\nimport { PersonaSlots } from '@fluentui/react-persona';\nimport { PersonaState } from '@fluentui/react-persona';\nimport { Popover } from '@fluentui/react-popover';\nimport { PopoverContextValue } from '@fluentui/react-popover';\nimport { PopoverProps } from '@fluentui/react-popover';\nimport { PopoverProvider } from '@fluentui/react-popover';\nimport { PopoverSize } from '@fluentui/react-popover';\nimport { PopoverState } from '@fluentui/react-popover';\nimport { PopoverSurface } from '@fluentui/react-popover';\nimport { popoverSurfaceClassNames } from '@fluentui/react-popover';\nimport { PopoverSurfaceProps } from '@fluentui/react-popover';\nimport { PopoverSurfaceSlots } from '@fluentui/react-popover';\nimport { PopoverSurfaceState } from '@fluentui/react-popover';\nimport { PopoverTrigger } from '@fluentui/react-popover';\nimport { PopoverTriggerChildProps } from '@fluentui/react-popover';\nimport { PopoverTriggerProps } from '@fluentui/react-popover';\nimport { PopoverTriggerState } from '@fluentui/react-popover';\nimport { Portal } from '@fluentui/react-portal';\nimport { PortalMountNodeProvider } from '@fluentui/react-shared-contexts';\nimport { PortalProps } from '@fluentui/react-portal';\nimport { PortalState } from '@fluentui/react-portal';\nimport { PositioningBoundary } from '@fluentui/react-positioning';\nimport { PositioningImperativeRef } from '@fluentui/react-positioning';\nimport { PositioningProps } from '@fluentui/react-positioning';\nimport { PositioningRect } from '@fluentui/react-positioning';\nimport { PositioningShorthand } from '@fluentui/react-positioning';\nimport { PositioningShorthandValue } from '@fluentui/react-positioning';\nimport { PositioningVirtualElement } from '@fluentui/react-positioning';\nimport { presenceAvailableFilled } from '@fluentui/react-badge';\nimport { presenceAvailableRegular } from '@fluentui/react-badge';\nimport { presenceAwayFilled } from '@fluentui/react-badge';\nimport { presenceAwayRegular } from '@fluentui/react-badge';\nimport { PresenceBadge } from '@fluentui/react-badge';\nimport { presenceBadgeClassNames } from '@fluentui/react-badge';\nimport { PresenceBadgeProps } from '@fluentui/react-badge';\nimport { PresenceBadgeState } from '@fluentui/react-badge';\nimport { PresenceBadgeStatus } from '@fluentui/react-badge';\nimport { presenceBlockedRegular } from '@fluentui/react-badge';\nimport { presenceBusyFilled } from '@fluentui/react-badge';\nimport { PresenceComponentProps } from '@fluentui/react-motion';\nimport { presenceDndFilled } from '@fluentui/react-badge';\nimport { presenceDndRegular } from '@fluentui/react-badge';\nimport { PresenceGroup } from '@fluentui/react-motion';\nimport { PresenceMotion } from '@fluentui/react-motion';\nimport { PresenceMotionFn } from '@fluentui/react-motion';\nimport { presenceOfflineRegular } from '@fluentui/react-badge';\nimport { presenceOofRegular } from '@fluentui/react-badge';\nimport { presenceUnknownRegular } from '@fluentui/react-badge';\nimport { ProgressBar } from '@fluentui/react-progress';\nimport { progressBarClassNames } from '@fluentui/react-progress';\nimport { ProgressBarProps } from '@fluentui/react-progress';\nimport { ProgressBarSlots } from '@fluentui/react-progress';\nimport { ProgressBarState } from '@fluentui/react-progress';\nimport { Radio } from '@fluentui/react-radio';\nimport { radioClassNames } from '@fluentui/react-radio';\nimport { RadioGroup } from '@fluentui/react-radio';\nimport { radioGroupClassNames } from '@fluentui/react-radio';\nimport { RadioGroupContextValue } from '@fluentui/react-radio';\nimport { RadioGroupContextValues } from '@fluentui/react-radio';\nimport { RadioGroupOnChangeData } from '@fluentui/react-radio';\nimport { RadioGroupProps } from '@fluentui/react-radio';\nimport { RadioGroupProvider } from '@fluentui/react-radio';\nimport { RadioGroupSlots } from '@fluentui/react-radio';\nimport { RadioGroupState } from '@fluentui/react-radio';\nimport { RadioOnChangeData } from '@fluentui/react-radio';\nimport { RadioProps } from '@fluentui/react-radio';\nimport { RadioSlots } from '@fluentui/react-radio';\nimport { RadioState } from '@fluentui/react-radio';\nimport { Rating } from '@fluentui/react-rating';\nimport { ratingClassNames } from '@fluentui/react-rating';\nimport { RatingContextValues } from '@fluentui/react-rating';\nimport { RatingDisplay } from '@fluentui/react-rating';\nimport { ratingDisplayClassNames } from '@fluentui/react-rating';\nimport { RatingDisplayContextValues } from '@fluentui/react-rating';\nimport { RatingDisplayProps } from '@fluentui/react-rating';\nimport { RatingDisplaySlots } from '@fluentui/react-rating';\nimport { RatingDisplayState } from '@fluentui/react-rating';\nimport { RatingItem } from '@fluentui/react-rating';\nimport { ratingItemClassNames } from '@fluentui/react-rating';\nimport { RatingItemProps } from '@fluentui/react-rating';\nimport { RatingItemProvider } from '@fluentui/react-rating';\nimport { RatingItemSlots } from '@fluentui/react-rating';\nimport { RatingItemState } from '@fluentui/react-rating';\nimport { RatingOnChangeEventData } from '@fluentui/react-rating';\nimport { RatingProps } from '@fluentui/react-rating';\nimport { RatingSlots } from '@fluentui/react-rating';\nimport { RatingState } from '@fluentui/react-rating';\nimport { RegisterTabEventHandler } from '@fluentui/react-tabs';\nimport { renderAccordion_unstable } from '@fluentui/react-accordion';\nimport { renderAccordionHeader_unstable } from '@fluentui/react-accordion';\nimport { renderAccordionItem_unstable } from '@fluentui/react-accordion';\nimport { renderAccordionPanel_unstable } from '@fluentui/react-accordion';\nimport { renderAlphaSlider_unstable } from '@fluentui/react-color-picker';\nimport { renderAriaLiveAnnouncer_unstable } from '@fluentui/react-aria';\nimport { renderAvatar_unstable } from '@fluentui/react-avatar';\nimport { renderAvatarGroup_unstable } from '@fluentui/react-avatar';\nimport { renderAvatarGroupItem_unstable } from '@fluentui/react-avatar';\nimport { renderAvatarGroupPopover_unstable } from '@fluentui/react-avatar';\nimport { renderBadge_unstable } from '@fluentui/react-badge';\nimport { renderBreadcrumb_unstable } from '@fluentui/react-breadcrumb';\nimport { renderBreadcrumbButton_unstable } from '@fluentui/react-breadcrumb';\nimport { renderBreadcrumbDivider_unstable } from '@fluentui/react-breadcrumb';\nimport { renderBreadcrumbItem_unstable } from '@fluentui/react-breadcrumb';\nimport { renderButton_unstable } from '@fluentui/react-button';\nimport { renderCard_unstable } from '@fluentui/react-card';\nimport { renderCardFooter_unstable } from '@fluentui/react-card';\nimport { renderCardHeader_unstable } from '@fluentui/react-card';\nimport { renderCardPreview_unstable } from '@fluentui/react-card';\nimport { renderCarousel_unstable } from '@fluentui/react-carousel';\nimport { renderCarouselAutoplayButton_unstable } from '@fluentui/react-carousel';\nimport { renderCarouselButton_unstable } from '@fluentui/react-carousel';\nimport { renderCarouselCard_unstable } from '@fluentui/react-carousel';\nimport { renderCarouselNav_unstable } from '@fluentui/react-carousel';\nimport { renderCarouselNavButton_unstable } from '@fluentui/react-carousel';\nimport { renderCarouselNavContainer_unstable } from '@fluentui/react-carousel';\nimport { renderCarouselNavImageButton_unstable } from '@fluentui/react-carousel';\nimport { renderCarouselSlider_unstable } from '@fluentui/react-carousel';\nimport { renderCarouselViewport_unstable } from '@fluentui/react-carousel';\nimport { renderCheckbox_unstable } from '@fluentui/react-checkbox';\nimport { renderColorArea_unstable } from '@fluentui/react-color-picker';\nimport { renderColorPicker_unstable } from '@fluentui/react-color-picker';\nimport { renderColorSlider_unstable } from '@fluentui/react-color-picker';\n```\n\n----------------------------------------\n\nTITLE: Type Checking React 18 Compatibility for Fluent UI v8 (Local Machine)\nDESCRIPTION: These commands perform type checking across React versions for Fluent UI v8. It uses a specific tsconfig file to disable path aliases and force tsc to consume linked monorepo build packages.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/react-18-tests-v8/README.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn nx run react-18-tests-v8:build\nyarn nx run react-18-tests-v8:type-check\n```\n\n----------------------------------------\n\nTITLE: Expected DOM Output from Basic Dialog Implementation in HTML\nDESCRIPTION: Demonstrates the expected DOM output when implementing a basic Dialog, highlighting ARIA attributes for accessibility.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/docs/Spec.md#2025-04-20_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<!-- expected DOM output  -->\n<button aria-haspopup=\"true\" class=\"fui-button\">Open Dialog</button>\n<!-- ... portal ... -->\n<div aria-hidden=\"true\" class=\"fui-dialog-backdrop\"></div>\n<div aria-modal=\"true\" role=\"dialog\" class=\"fui-dialog-content\">This is as basic as it gets</div>\n```\n\n----------------------------------------\n\nTITLE: Defining IDetailsListStyles Interface in TypeScript\nDESCRIPTION: This snippet defines the IDetailsListStyles interface, which represents the styles for different parts of a DetailsList component, including the root, content wrapper, header wrapper, and focus zone.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_88\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface IDetailsListStyles {\n    // (undocumented)\n    contentWrapper: IStyle;\n    // (undocumented)\n    focusZone: IStyle;\n    // (undocumented)\n    headerWrapper: IStyle;\n    // (undocumented)\n    root: IStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-docsite-components to v8.7.28\nDESCRIPTION: This entry features the upgrade of '@fluentui/react-docsite-components' to version 8.7.28, focusing on improving the documentation's quality and performance.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/theming-designer/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react-docsite-components to v8.7.28 ([PR #23493](https://github.com/microsoft/fluentui/pull/23493) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for React Tags Stories\nDESCRIPTION: This code snippet defines the configuration for Storybook to include story files for the React Tags component. It specifies the path where the story files are located, enabling Storybook to load them properly. No additional dependencies are required beyond the basic Storybook setup.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tags/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-tags/stories/src/**/*.stories.mdx', '../packages/react-components/react-tags/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: TagPickerButton Class Names\nDESCRIPTION: Defines the class names for the TagPickerButton component's slots, used for styling the component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport const tagPickerButtonClassNames: SlotClassNames<TagPickerButtonSlots>;\"\n```\n\n----------------------------------------\n\nTITLE: Proposed Dual Key/KeyCode Import Example\nDESCRIPTION: Shows proposed import syntax supporting both key and keyCode during transition period.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/handling-keyboard-keys.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ArrowDownKey, ArrowDownKeyCode } from '@fluentui/react-keyboard-key';\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.97.1\nDESCRIPTION: This snippet records the update process to version 8.97.1 for the @fluentui/react package, ensuring continuous enhancement.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/azure-themes/CHANGELOG.md#2025-04-20_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.97.1 ([PR #25022](https://github.com/microsoft/fluentui/pull/25022) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Animation Class Names Declaration\nDESCRIPTION: Declares an object, `AnimationClassNames`, that maps keys from the `IAnimationStyles` interface to strings. This allows easy access to animation class names within the Fluent UI ecosystem.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/style-utilities/etc/style-utilities.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"export const AnimationClassNames: {\\n    [key in keyof IAnimationStyles]?: string;\\n};\"\n```\n\n----------------------------------------\n\nTITLE: Exporting TagPicker List Hook in TypeScript\nDESCRIPTION: Exports a hook for managing the TagPicker list component state. Takes props and a ref to the div element.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_63\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const useTagPickerList_unstable: (props: TagPickerListProps, ref: React_2.Ref<HTMLDivElement>) => TagPickerListState;\n```\n\n----------------------------------------\n\nTITLE: Defining ARIAButtonProps type\nDESCRIPTION: This snippet defines the `ARIAButtonProps` type, which represents the props for an ARIA button component. It extends the intrinsic React element props based on the specified button type and includes optional `disabled` and `disabledFocusable` properties.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-aria/library/etc/react-aria.api.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n// @public\nexport type ARIAButtonProps<Type extends ARIAButtonType = ARIAButtonType> = React_2.PropsWithRef<JSX.IntrinsicElements[Type]> & {\n    disabled?: boolean;\n    disabledFocusable?: boolean;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Exporting Table Feature Hooks in TypeScript\nDESCRIPTION: Defines hooks for advanced table features like column sizing, navigation, selection, and sorting. These hooks enhance table functionality by adding interactive behaviors to the base table components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-table/library/etc/react-table.api.md#2025-04-20_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport function useTableColumnSizing_unstable<TItem>(params?: UseTableColumnSizingParams): (tableState: TableFeaturesState<TItem>) => TableFeaturesState<TItem>;\n\n// @public (undocumented)\nexport function useTableCompositeNavigation(): {\n    onTableKeyDown: React_2.KeyboardEventHandler;\n    tableTabsterAttribute: TabsterDOMAttribute;\n    tableRowTabsterAttribute: TabsterDOMAttribute;\n};\n\n// @public (undocumented)\nexport function useTableFeatures<TItem>(options: UseTableFeaturesOptions<TItem>, plugins?: TableFeaturePlugin[]): TableFeaturesState<TItem>;\n\n// @public (undocumented)\nexport interface UseTableFeaturesOptions<TItem> {\n    // (undocumented)\n    columns: TableColumnDefinition<TItem>[];\n    // (undocumented)\n    getRowId?: (item: TItem) => TableRowId;\n    // (undocumented)\n    items: TItem[];\n}\n\n// @public (undocumented)\nexport function useTableSelection<TItem>(options: SelectionHookParams): (tableState: TableFeaturesState<TItem>) => TableFeaturesState<TItem>;\n\n// @public (undocumented)\nexport function useTableSort<TItem>(options: UseTableSortOptions): (tableState: TableFeaturesState<TItem>) => TableFeaturesState<TItem>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Fluent UI Input Component in React\nDESCRIPTION: This snippet illustrates the usage of the Fluent UI Input component. It creates a text input field with a placeholder and an onChange event handler to capture user input.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Styles/FileTypeIconsPage/docs/web/FileTypeIconsResolutions.md#2025-04-20_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Input placeholder=\"Enter your name\" onChange={(e) => setName(e.target.value)} />\n```\n\n----------------------------------------\n\nTITLE: Defining Spinner Style Interfaces in TypeScript\nDESCRIPTION: TypeScript interfaces for Spinner component styles and props. These interfaces define the structure for styling the Spinner component, including the positioning of labels and size options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_175\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface ISpinnerStyleProps {\n    className?: string;\n    labelPosition?: SpinnerLabelPosition;\n    size?: SpinnerSize;\n    theme: ITheme;\n}\n\n// @public\nexport interface ISpinnerStyles {\n    circle?: IStyle;\n    label?: IStyle;\n    root?: IStyle;\n    screenReaderText?: IStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: Batch Conversion Command - Shell\nDESCRIPTION: Command to convert RC dependencies for all vNext packages with platform:web tag.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/rc-caret/README.md#2025-04-20_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:rc-caret --all\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Internal Properties in TypeScript\nDESCRIPTION: Illustrates how to define internal properties for a slot using the `use_COMPONENT_` hook, ensuring these can be overridden by external properties. This snippet ensures slots function correctly, while providing flexibility for developers to opt out using external properties.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/slot-children-render-function.md#2025-04-20_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// useAccordionHeader\nconst buttonShorthand = useARIAButtonShorthand(props.button, {\n  required: true,\n  // internal properties\n  defaultProps: {\n    'aria-expanded': open,\n    type: 'button',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using JavaScript state instead of input pseudo-classes in FluentUI\nDESCRIPTION: Demonstrates the preferred approach of using JavaScript state instead of CSS input pseudo-classes for styling. This produces cleaner code with simpler selectors and better maintainability.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/styles-handbook.md#2025-04-20_snippet_38\n\nLANGUAGE: jsx\nCODE:\n```\nimport { makeStyles, mergeClasses, shorthands } from '@griffel/react';\nimport { tokens } from '@fluentui/react-theme';\n\n// ❌ Don't do\nconst useBaseClassName = makeResetStyles({\n  color: tokens.colorNeutralForeground1,\n  ':checked': {\n    color: tokens.colorNeutralForeground2,\n  },\n});\n\n// ✅ Do\nconst useBaseClassName = makeResetStyles({\n  color: tokens.colorNeutralForeground1,\n});\nconst useClasses = makeStyles({\n  checked: {\n    color: tokens.colorNeutralForeground2,\n  },\n});\n\nfunction Checkbox(props) {\n  const [checked, setChecked] = React.useState();\n\n  const baseClassName = useBaseClassName();\n  const classes = useClasses();\n\n  return <input className={mergeClasses(baseClassName, checked && classes.checked)} checked={checked} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Viewport and Divider Interfaces in TypeScript for FluentUI\nDESCRIPTION: Defines interfaces for viewport functionality and vertical divider component. The viewport interfaces handle responsive design while the vertical divider interfaces define styling for divider components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_228\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public @deprecated (undocumented)\nexport interface IVerticalDividerClassNames {\n    divider: string;\n    wrapper: string;\n}\n\n// @public\nexport interface IVerticalDividerProps extends React_2.HTMLAttributes<HTMLElement>, React_2.RefAttributes<HTMLDivElement> {\n    className?: string;\n    // @deprecated\n    getClassNames?: (theme: ITheme) => IVerticalDividerClassNames;\n    styles?: IStyleFunctionOrObject<IVerticalDividerPropsStyles, IVerticalDividerStyles>;\n    theme?: ITheme;\n}\n\n// @public\nexport type IVerticalDividerPropsStyles = Pick<IVerticalDividerProps, 'theme' | 'getClassNames' | 'className'>;\n\n// @public\nexport interface IVerticalDividerStyles {\n    divider: IStyle;\n    wrapper: IStyle;\n}\n\n// @public\nexport interface IViewport {\n    height: number;\n    width: number;\n}\n\nexport { IVirtualElement }\n\nexport { IWarnControlledUsageParams }\n\n// @public\nexport interface IWindowWithSegments extends Window {\n    // (undocumented)\n    getWindowSegments?: () => DOMRect[];\n}\n\n// @public @deprecated (undocumented)\nexport interface IWithResponsiveModeState {\n    // (undocumented)\n    responsiveMode?: ResponsiveMode;\n}\n\n// @public\nexport interface IWithViewportProps {\n    delayFirstMeasure?: boolean;\n    disableResizeObserver?: boolean;\n    skipViewportMeasures?: boolean;\n}\n\n// @public (undocumented)\nexport interface IWithViewportState {\n    // (undocumented)\n    viewport?: IViewport;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Pre-Written Transform Functions - TypeScript\nDESCRIPTION: This snippet demonstrates how to use a pre-written transform function to flip a boolean value in a JSX element's prop. It involves getting the source file, finding the JSX tags, mapping the old boolean values to new ones, and applying the transformation using the `renameProp` utility.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/codemods/documentation/renamePropTransforms.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst file = project.getSourceFileOrThrow(DropdownPropsFile);\nconst tags = findJsxTag(file, 'Dropdown');\nconst dropdownMap: ValueMap<string> = { false: 'true', true: 'false' };\nconst transform = boolTransform(dropdownMap);\nrenameProp(tags, 'isDisabled', 'disabled', undefined, transform);\n```\n\n----------------------------------------\n\nTITLE: Defining IExpandingCard Interface in TypeScript\nDESCRIPTION: Defines an empty IExpandingCard interface. This interface is marked as @public but undocumented.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_127\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IExpandingCard {\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SplitButton in Latest FluentUI Version\nDESCRIPTION: This code snippet demonstrates how to implement the SplitButton functionality using the new composition of Menu, MenuTrigger, SplitButton, MenuPopover, MenuList, and MenuItem components from @fluentui/react-components. It shows how to set up the menu structure, handle button clicks, and render menu items.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/SplitButton.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Menu,\n  MenuButtonProps,\n  MenuItem,\n  MenuList,\n  MenuPopover,\n  MenuTrigger,\n  SplitButton,\n} from '@fluentui/react-components';\nconst Component = ({ menuItems }) => (\n  <Menu positioning=\"below-end\">\n    <MenuTrigger>\n      {(triggerProps: MenuButtonProps) => (\n        <SplitButton primaryActionButton={{ onClick: () => alert('button clicked') }} menuButton={triggerProps}>\n          Split button\n        </SplitButton>\n      )}\n    </MenuTrigger>\n\n    <MenuPopover>\n      <MenuList>\n        {menuItems.map(item => (\n          <MenuItem key={item.key}>{item.content}</MenuItem>\n        ))}\n      </MenuList>\n    </MenuPopover>\n  </Menu>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing KeytipManager Class in TypeScript\nDESCRIPTION: Definition of the KeytipManager class that handles registration, persistence, and management of keyboard shortcuts (keytips) within the application. Provides methods for entering/exiting keytip mode and managing keytip state.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_230\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class KeytipManager {\n    addParentOverflow(keytipProps: IKeytipProps): IKeytipProps;\n    // (undocumented)\n    delayUpdatingKeytipChange: boolean;\n    enterKeytipMode(): void;\n    exitKeytipMode(): void;\n    static getInstance(): KeytipManager;\n    getKeytips(): IKeytipProps[];\n    init(delayUpdatingKeytipChange: boolean): void;\n    // (undocumented)\n    inKeytipMode: boolean;\n    // (undocumented)\n    keytips: {\n        [key: string]: IUniqueKeytip;\n    };\n    menuExecute(overflowButtonSequences: string[], keytipSequences: string[]): void;\n    // (undocumented)\n    persistedKeytips: {\n        [key: string]: IUniqueKeytip;\n    };\n    register(keytipProps: IKeytipProps, persisted?: boolean): string;\n    // (undocumented)\n    sequenceMapping: {\n        [key: string]: IKeytipProps;\n    };\n    // (undocumented)\n    shouldEnterKeytipMode: boolean;\n    unregister(keytipToRemove: IKeytipProps, uniqueID: string, persisted?: boolean): void;\n    update(keytipProps: IKeytipProps, uniqueID: string): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating DocumentCardPreview with Preview Images - FluentUI v8\nDESCRIPTION: Example showing how to implement DocumentCardPreview with preview images in FluentUI v8. Uses the previewImages prop to display document previews with icons and images.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Card/CardPreview.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DocumentCard, DocumentCardPreview } from '@fluentui/react/lib/DocumentCard';\nimport { TestImages } from '@fluentui/example-data';\n\nconst previewImage = {\n  name: 'Revenue stream proposal fiscal year 2016 version02.pptx',\n  previewImageSrc: TestImages.documentPreview,\n  iconSrc: TestImages.iconPpt,\n  width: 144,\n};\n\nconst Component = () => (\n  <DocumentCard>\n    <DocumentCardPreview previewImages={[previewImage]} />\n  </DocumentCard>\n);\n```\n\n----------------------------------------\n\nTITLE: Removing Global Color Tokens - JavaScript\nDESCRIPTION: This JavaScript snippet illustrates the change of importing global color tokens directly instead of using them as CSS variables, resulting in improved efficiency.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/theme-shape.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/* Before */\nimport { makeStyles } from '@fluentui/react-components';\n\nconst useStyles = makeStyles({\n  root: theme => ({\n    color: theme.alias.color.neutral.neutralStroke1, // color: var(--alias-color-neutral-neutralStroke1)\n    background: theme.global.palette.grey[50], // background: var(--global-palette-grey-50)\n  }),\n});\n\n/* After */\nimport { makeStyles, globalColorTokens } from '@fluentui/react-components';\n\nconst useStyles = makeStyles({\n  root: theme => ({\n    color: theme.alias.color.neutral.neutralStroke1, // color: var(--alias-color-neutral-neutralStroke1)\n    background: globalColorTokens.palette.grey[50], // background: '#ddd' 👈 value inlined/bound during babel-plugin/build\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Improved Avatar Component Rendering with Direct Conditional Checks in TypeScript\nDESCRIPTION: This improved TypeScript snippet demonstrates enhanced 'renderAvatar_unstable' functionality by introducing direct conditional checks for optional slots. This approach omits the rendering of non-essential slots by conditionally checking their presence, thereby reducing the overall React tree size. It requires familiarity with TypeScript, React, and the Fluent UI framework to implement these conditional checks.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/remove-null-render.md#2025-04-20_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const renderAvatar_unstable = (state: AvatarState) => {\n  const { slots, slotProps } = getSlots<AvatarSlots>(state);\n\n  return (\n    <slots.root {...slotProps.root}>\n      {!!slots.initials && <slots.initials {...slotProps.initials} />}\n      {!!slots.icon && <slots.icon {...slotProps.icon} />}\n      {!!slots.image && <slots.image {...slotProps.image} />}\n      {!!slots.badge && <slots.badge {...slotProps.badge} />}\n    </slots.root>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing dependencies from @fluentui/dom-utilities and @fluentui/merge-styles\nDESCRIPTION: Import statements showing the dependencies of the @fluentui/utilities package, primarily from @fluentui/dom-utilities and @fluentui/merge-styles packages.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/utilities/etc/utilities.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DATA_PORTAL_ATTRIBUTE } from '@fluentui/dom-utilities';\nimport { elementContains } from '@fluentui/dom-utilities';\nimport { elementContainsAttribute } from '@fluentui/dom-utilities';\nimport type { ExtendedCSSStyleSheet } from '@fluentui/merge-styles';\nimport { findElementRecursive } from '@fluentui/dom-utilities';\nimport { getActiveElement } from '@fluentui/dom-utilities';\nimport { getChildren } from '@fluentui/dom-utilities';\nimport { getEventTarget } from '@fluentui/dom-utilities';\nimport { getParent } from '@fluentui/dom-utilities';\nimport { getVirtualParent } from '@fluentui/dom-utilities';\nimport type { IProcessedStyleSet } from '@fluentui/merge-styles';\nimport { IStyleFunction } from '@fluentui/merge-styles';\nimport { IStyleFunctionOrObject } from '@fluentui/merge-styles';\nimport type { IStyleSetBase } from '@fluentui/merge-styles';\nimport { isVirtualElement } from '@fluentui/dom-utilities';\nimport { IVirtualElement } from '@fluentui/dom-utilities';\nimport { Omit as Omit_2 } from '@fluentui/merge-styles';\nimport { portalContainsElement } from '@fluentui/dom-utilities';\nimport * as React_2 from 'react';\nimport { setPortalAttribute } from '@fluentui/dom-utilities';\nimport { setVirtualParent } from '@fluentui/dom-utilities';\nimport { ShadowConfig } from '@fluentui/merge-styles';\n```\n\n----------------------------------------\n\nTITLE: Table with sorting (v0)\nDESCRIPTION: This snippet shows how to implement sorting on a Table component in v0 of Fluent UI. It defines a `sortColumnHeader` function that returns a header item with an `onClick` handler to toggle the sorting direction. The component then uses this header configuration to display a sortable table.  `ArrowUp` and `ArrowDown` are assumed to be icons.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-table/library/docs/Spec.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// v0\nconst sortColumnHeader = (title, order, onOrderChange) => ({\n  content: `${title} ${order !== 0 ? order === 1 ? <ArrowUp /> : <ArrowDown /> : ''}`\n  onClick: () => onOrderChange(order === 0 ? 1 : -order),\n});\n\nconst header = {\n  key: 'header',\n  items: columns.map(c =>\n    sortColumnHeader(c.title, c.name === sortColumn ? sortDirection : 0, newSortDirection => {\n      setSortColumn(c.name);\n      setSortDirection(newSortDirection);\n    }),\n  ),\n};\n\n<Table header={header} rows={sortedRows} />;\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-docsite-components to v8.7.19\nDESCRIPTION: This snippet documents the increment of '@fluentui/react-docsite-components' to version 8.7.19, enhancing core documentation features.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/theming-designer/CHANGELOG.md#2025-04-20_snippet_25\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react-docsite-components to v8.7.19 ([PR #23158](https://github.com/microsoft/fluentui/pull/23158) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories for React Message Bar\nDESCRIPTION: Configuration snippet showing how to include Message Bar component stories in Storybook's configuration. Specifies the file glob patterns for both MDX and TypeScript/TSX story files.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-message-bar/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-message-bar/stories/src/**/*.stories.mdx', '../packages/react-components/react-message-bar/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Style Hooks in a Component\nDESCRIPTION: This snippet demonstrates how to implement the useCustomStyleHooks_unstable within a Button component to access a custom style hook. It ensures that both default and custom styling hooks are executed to maintain a consistent UI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/custom-styling.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Button: ForwardRefComponent<ButtonProps> = React.forwardRef((props, ref) => { //...\n\n  useButtonStyles_unstable(state);\n  useCustomStyleHook_unstable('useButtonStyles_unstable')(state);\n\n  //...\n});\n```\n\n----------------------------------------\n\nTITLE: Using useUnmount Hook in a React Component\nDESCRIPTION: Demonstrates how to use the `useUnmount` hook in a React component to execute a callback when the component is unmounted. The provided callback will be executed during the unmount phase of the component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-hooks/README.md#2025-04-20_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useUnmount } from '@fluentui/react-hooks';\n\nconst MyComponent = () => {\n  useUnmount(() => {\n    console.log('Example');\n  });\n\n  return <div />;\n};\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react to v8.42.3\nDESCRIPTION: This patch updates the @fluentui/react package to version 8.42.3 to introduce additional enhancements. Refer to Pull Request #20642 for full details.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/ts-minbar-test-react/CHANGELOG.md#2025-04-20_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.42.3 ([PR #20642](https://github.com/microsoft/fluentui/pull/20642) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Snackbar Usage in Kotlin for FluentUI Android\nDESCRIPTION: This snippet provides a link to a demo activity that showcases how to use the Snackbar control in a FluentUI Android application. The demo is implemented in Kotlin.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/SnackbarPage/docs/android/SnackbarImplementation.md#2025-04-20_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nhttps://github.com/microsoft/fluentui-android/blob/master/FluentUI.Demo/src/main/java/com/microsoft/fluentuidemo/demos/SnackbarActivity.kt\n```\n\n----------------------------------------\n\nTITLE: Exporting Rating Components - JavaScript\nDESCRIPTION: This snippet exports rating components that allow users to provide qualitative feedback, commonly used in scenarios such as reviews and appraisals.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/etc/react-components.api.md#2025-04-20_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nexport { Rating }\n\nexport { ratingClassNames }\n\nexport { RatingContextValues }\n\nexport { RatingDisplay }\n\nexport { ratingDisplayClassNames }\n\nexport { RatingDisplayContextValues }\n\nexport { RatingDisplayProps }\n\nexport { RatingDisplaySlots }\n\nexport { RatingDisplayState }\n\nexport { RatingItem }\n\nexport { ratingItemClassNames }\n\nexport { RatingItemProps }\n\nexport { RatingItemProvider }\n\nexport { RatingItemSlots }\n\nexport { RatingItemState }\n\nexport { RatingOnChangeEventData }\n\nexport { RatingProps }\n\nexport { RatingSlots }\n\nexport { RatingState }\n```\n\n----------------------------------------\n\nTITLE: Package Name Declaration in Markdown\nDESCRIPTION: Indicates the name of the FluentUI package that contains chart utilities. This is formatted as a Markdown heading.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/chart-utilities/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @fluentui/chart-utilities\n```\n\n----------------------------------------\n\nTITLE: Opting Out of Native <dialog> in FluentUI with React\nDESCRIPTION: This snippet shows how to opt out of using the native <dialog> element in FluentUI by specifying a different element type for the DialogSurface component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/docs/Spec.md#2025-04-20_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nconst dialog = <Dialog>\n  <DialogTrigger>\n    <Button>Open Dialog</Button>\n  <DialogTrigger>\n  <DialogSurface as=\"div\">\n    This is as basic as it gets.\n  </DialogSurface>\n</Dialog>\n```\n\n----------------------------------------\n\nTITLE: Migrating ToolbarCustomItem in FluentUI v0 to v9\nDESCRIPTION: Demonstrates how to replace ToolbarCustomItem with direct children in Toolbar component when migrating from v0 to v9.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Toolbar.stories.mdx#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// V0\n<Toolbar aria-label=\"Default\">\n  <ToolbarCustomItem content={<MyFacyButton>Click Here</MyFacyButton>} />\n</Toolbar>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// V9\n<Toolbar aria-label=\"Default\">\n  <MyFacyButton>Click Here</MyFacyButton>\n</Toolbar>\n```\n\n----------------------------------------\n\nTITLE: Define PositioningRect type\nDESCRIPTION: Defines a type called `PositioningRect` which describes a rectangle with width, height, x, and y properties. This is likely used to represent the bounding box of an element for positioning calculations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-positioning/etc/react-positioning.api.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type PositioningRect = {\n    width: number;\n    height: number;\n    x: number;\n    y: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Menu Popover Properties TypeScript\nDESCRIPTION: Defines prop types for menu popover components using ComponentProps to ensure type safety and proper structure. It depends on MenuPopoverSlots type.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/library/etc/react-menu.api.md#2025-04-20_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type MenuPopoverProps = ComponentProps<MenuPopoverSlots>;\n```\n\n----------------------------------------\n\nTITLE: Updating Button Components from v8 to v9 in React\nDESCRIPTION: This snippet demonstrates how to update v8 button components (PrimaryButton, DefaultButton, ActionButton) to the v9 Button component that uses an appearance property.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/HandlingBreakingChanges.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"\"\"\n    <PrimaryButton>OK</PrimaryButton>\n    <DefaultButton>Cancel</DefaultButton>\n    <ActionButton>Browse</ActionButton>\n\"\"\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\n\"\"\"\n    <Button appearance=\\\"primary\\\">OK</Button>\n    <Button>Cancel</Button>\n    <Button appearance=\\\"transparent\\\">Browse</Button>\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: TagPicker Component Definition\nDESCRIPTION: Defines the TagPicker React functional component using React.FC, specifying that it accepts TagPickerProps as its props.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const TagPicker: React_2.FC<TagPickerProps>;\"\n```\n\n----------------------------------------\n\nTITLE: Defining IFabricProps Interface in TypeScript\nDESCRIPTION: Defines the IFabricProps interface extending React HTML attributes with additional properties for theming and styling. This interface is marked as @public but undocumented.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_134\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IFabricProps extends React_2.HTMLAttributes<HTMLDivElement>, React_2.RefAttributes<HTMLDivElement> {\n    applyTheme?: boolean;\n    applyThemeToBody?: boolean;\n    as?: React_2.ElementType;\n    // (undocumented)\n    componentRef?: IRefObject<{}>;\n    dir?: 'rtl' | 'ltr' | 'auto';\n    preventBlanketFontInheritance?: boolean;\n    styles?: IStyleFunctionOrObject<IFabricStyleProps, IFabricStyles>;\n    theme?: ITheme;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Reduced Motion with makeStyles in Fluent UI\nDESCRIPTION: Example showing how to implement animation controls using makeStyles and prefers-reduced-motion media query in a Fluent UI Button component. Demonstrates both normal and reduced motion animation states.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/disabling-animations.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Button, ButtonProps, makeStyles } from '@fluentui/react-components';\nimport * as React from 'react';\n\nconst useStyles = makeStyles({\n  animations: {\n    animationDuration: '2s',\n    animationTimingFunction: 'linear',\n    animationIterationCount: 'infinite',\n    animationFillMode: 'both',\n    '@media(prefers-reduced-motion)': {\n      animationName: {\n        '0%': {\n          opacity: 1,\n        },\n        '50%': {\n          opacity: 0.8,\n        },\n        '100%': {\n          opacity: 1,\n        },\n      },\n    },\n    animationName: {\n      '0%': {\n        transform: 'scale(1)',\n      },\n      '25%': {\n        transform: 'scale(0.9)',\n      },\n      '50%': {\n        transform: 'scale(1)',\n      },\n      '75%': {\n        transform: 'scale(1.1)',\n      },\n      '100%': {\n        transform: 'scale(1)',\n      },\n    },\n  },\n});\n\nconst Example = (props: ButtonProps) => {\n  const styles = useStyles();\n  return (\n    <Button appearance=\"primary\" className={styles.animations}>\n      Example\n    </Button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ResizeGroup Component Interfaces in TypeScript\nDESCRIPTION: Defines the interfaces for the ResizeGroup component, including IResizeGroup, IResizeGroupProps, IResizeGroupState, and associated style interfaces. The ResizeGroup component handles dynamic content resizing based on available space.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_168\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IResizeGroup {\n    remeasure(): void;\n}\n\n// @public (undocumented)\nexport interface IResizeGroupProps extends React_2.HTMLAttributes<HTMLDivElement>, React_2.RefAttributes<HTMLDivElement> {\n    className?: string;\n    componentRef?: IRefObject<IResizeGroup>;\n    data: any;\n    dataDidRender?: (renderedData: any) => void;\n    direction?: ResizeGroupDirection;\n    onGrowData?: (prevData: any) => any;\n    onReduceData: (prevData: any) => any;\n    onRenderData: (data: any) => JSX.Element;\n    // @deprecated\n    styles?: IStyleFunctionOrObject<IResizeGroupStyleProps, IResizeGroupStyles>;\n    theme?: ITheme;\n}\n\n// @public (undocumented)\nexport interface IResizeGroupState {\n    dataToMeasure?: any;\n    measureContainer?: boolean;\n    renderedData?: any;\n    resizeDirection?: 'grow' | 'shrink';\n}\n\n// @public (undocumented)\nexport interface IResizeGroupStyleProps {\n    className?: string;\n    theme: ITheme;\n}\n\n// @public (undocumented)\nexport interface IResizeGroupStyles {\n    root: IStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/foundation-legacy to v8.2.8\nDESCRIPTION: This entry features the upgrade of '@fluentui/foundation-legacy' to version 8.2.8, part of the routine maintenance of the Fluent UI framework.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/theming-designer/CHANGELOG.md#2025-04-20_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/foundation-legacy to v8.2.8 ([PR #23266](https://github.com/microsoft/fluentui/pull/23266) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Interface Definitions for FluentUI Components\nDESCRIPTION: A comprehensive set of TypeScript interfaces defining the structure and properties of FluentUI components like GroupFooter, GroupHeader, HoverCard, Icon and Image components. These interfaces specify props, styles, states and other configuration options used by the components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_141\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IGroupFooterProps extends IGroupDividerProps {\n    styles?: IStyleFunctionOrObject<IGroupFooterStyleProps, IGroupFooterStyles>;\n}\n\nexport type IGroupFooterStyleProps = Required<Pick<IGroupFooterProps, 'theme'>> & \n    Pick<IGroupFooterProps, 'selected' | 'className'> & {\n    isCollapsed?: boolean;\n};\n\nexport interface IGroupFooterStyles {\n    root: IStyle;\n}\n\nexport interface IGroupHeaderCheckboxProps {\n    checked: boolean;\n    theme?: ITheme;\n}\n\nexport interface IGroupHeaderProps extends IGroupDividerProps {\n    expandButtonIcon?: string;\n    expandButtonProps?: React_2.HTMLAttributes<HTMLButtonElement>;\n    groupedListId?: string;\n    onRenderGroupHeaderCheckbox?: IRenderFunction<IGroupHeaderCheckboxProps>;\n    selectAllButtonProps?: React_2.HTMLAttributes<HTMLButtonElement>;\n    styles?: IStyleFunctionOrObject<IGroupHeaderStyleProps, IGroupHeaderStyles>;\n    useFastIcons?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating FluentUI React Switch to Version 9.0.0-rc.13\nDESCRIPTION: Changelog entry for version 9.0.0-rc.13 of @fluentui/react-switch, updating Griffel and other dependencies.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-switch/library/CHANGELOG.md#2025-04-20_snippet_15\n\nLANGUAGE: Markdown\nCODE:\n```\n## [9.0.0-rc.13](https://github.com/microsoft/fluentui/tree/@fluentui/react-switch_v9.0.0-rc.13)\n\nTue, 31 May 2022 21:28:47 GMT\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-switch_v9.0.0-rc.12..@fluentui/react-switch_v9.0.0-rc.13)\n\n### Changes\n\n- chore: Update Griffel to latest version ([PR #23275](https://github.com/microsoft/fluentui/pull/23275) by olfedias@microsoft.com)\n- Bump @fluentui/react-label to v9.0.0-rc.5 ([PR #23325](https://github.com/microsoft/fluentui/pull/23325) by beachball)\n- Bump @fluentui/react-tabster to v9.0.0-rc.13 ([PR #23325](https://github.com/microsoft/fluentui/pull/23325) by beachball)\n- Bump @fluentui/react-utilities to v9.0.0-rc.10 ([PR #23325](https://github.com/microsoft/fluentui/pull/23325) by beachball)\n- Bump @fluentui/react-conformance-griffel to v9.0.0-beta.8 ([PR #23325](https://github.com/microsoft/fluentui/pull/23325) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Defining useWarnings Hook in Typescript\nDESCRIPTION: Defines a React hook, `useWarnings`, that displays console warnings when specific conditions are met. It automatically removes the warning code in production mode when using webpack.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-hooks/README.md#2025-04-20_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useWarnings<P>(options: IWarningOptions<P>): void;\n```\n\n----------------------------------------\n\nTITLE: FluentUI Merge-Styles Changelog Entry\nDESCRIPTION: A markdown formatted changelog entry showing version history and changes for the FluentUI merge-styles module, including both minor changes and patches across multiple versions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/merge-styles/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Minor changes\n\n- Add backgroundClip property definition.\n\n## 5.14.1\nFri, 06 Apr 2018 10:25:55 GMT\n\n### Patches\n\n- mergeStyles: flipping RTL at runtime now resets the keys.\n\n## 5.14.0\nSun, 25 Mar 2018 03:08:03 GMT\n\n### Minor changes\n\n- Updating to webpack 4 for producting bundles. Adding appropriate `module` and `sideEffects` fl\n\n## 5.13.0\nFri, 02 Mar 2018 11:25:35 GMT\n\n### Minor changes\n\n- Upgrade to TypeScript 2.7.2\n```\n\n----------------------------------------\n\nTITLE: Global ExampleCard Configuration in TypeScript\nDESCRIPTION: Configure editor supported packages globally for all ExampleCard instances in an application\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-docsite-components/README.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { editorSupportedPackages } from '<file path>';\nimport { IExampleCardProps, IAppDefinition } from '@fluentui/react-docsite-components';\n\nconst exampleCardProps: IExampleCardProps = { editorSupportedPackages };\n\nconst appDefinition: IAppDefinition = {\n  theme: {\n    components: {\n      ExampleCard: {\n        styles: exampleCardProps\n      }\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Bumping FluentUI React Monaco Editor Version with PR\nDESCRIPTION: This snippet shows how to bump the version of the @fluentui/react-monaco-editor package. The pull request number provides a direct link to the change within the repository. This action is part of maintaining the dependencies for the project.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-docsite-components/CHANGELOG.md#2025-04-20_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n\"- Bump @fluentui/react-monaco-editor to v1.7.131 ([PR #29347](https://github.com/microsoft/fluentui/pull/29347) by beachball)\"\n```\n\n----------------------------------------\n\nTITLE: Updating AccordionHeader Component in React\nDESCRIPTION: This snippet demonstrates the changes to the AccordionHeader component to use the new non-mutating style approach.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/slot-children-render-function.md#2025-04-20_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\nexport const AccordionHeader: ForwardRefComponent<AccordionHeaderProps> = React.forwardRef((props, ref) => {\n  const state = useAccordionHeader_unstable(props, ref);\n- useAccordionHeaderStyles_unstable(state);\n+ const styles = useAccordionHeaderStyles_unstable(state);\n  const contextValues = useAccordionHeaderContextValues_unstable(state);\n- return renderAccordionHeader_unstable(state, contextValues);\n+ return renderAccordionHeader_unstable(state, styles, contextValues);\n});\n```\n\n----------------------------------------\n\nTITLE: Style Hook Modification for Slot Components\nDESCRIPTION: This snippet demonstrates how style hooks can be modified to work with the new slot component structure, showing two options for applying styles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/slot-children-render-function.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// Option 1: Mutate external properties\nexport const useAccordionHeaderStyles_unstable = (state: AccordionHeaderState) => {\n  const styles = useStyles();\n  state.root.props.className = mergeClasses(\n    accordionHeaderClassNames.root,\n    styles.root,\n    state.inline && styles.rootInline,\n    state.disabled && styles.rootDisabled,\n    state.root.props.className,\n  );\n\n  if (state.icon) {\n    state.icon.props.className = mergeClasses(\n      accordionHeaderClassNames.icon,\n      styles.icon,\n      state.icon.props.className\n    );\n  }\n\n  return state;\n};\n\n// Option 2: Mutate overrides\nexport const useAccordionHeaderStyles_unstable = (state: AccordionHeaderState) => {\n  const styles = useStyles();\n  state.overrides.root.className = mergeClasses(\n    accordionHeaderClassNames.root,\n    styles.root,\n    state.inline && styles.rootInline,\n    state.disabled && styles.rootDisabled,\n    state.root.props.className,\n  );\n\n  if (state.icon) {\n    state.overrides.icon.className = mergeClasses(\n      accordionHeaderClassNames.icon,\n      styles.icon,\n      state.icon.props.className\n    );\n  }\n\n  return state;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Breadcrumb Styles\nDESCRIPTION: This TypeScript snippet declares interfaces used to define styling properties for Breadcrumb components in Fluent UI. The `IBreadcrumbStyleProps` interface specifies optional class names and theme properties, while the `IBreadcrumbStyles` interface details different style elements such as `chevron`, `itemLink`, and `listItem`. These interfaces assist in establishing a consistent styling approach across breadcrumb components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_50\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface IBreadcrumbStyleProps {\n    className?: string;\n    theme: ITheme;\n}\n\nexport interface IBreadcrumbStyles {\n    chevron: IStyle;\n    item: IStyle;\n    itemLink: IStyle;\n    list: IStyle;\n    listItem: IStyle;\n    overflow: IStyle;\n    overflowButton: IStyle;\n    root: IStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: Component Slot Management in TypeScript\nDESCRIPTION: Illustrates handling of component slots, particularly when a parent slot is modified with inner children elements. This code demonstrates overriding children properties for slots and rendering strategies to maintain structural integrity.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/slot-null-rendering.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport function Component(props) {\n  const state = {\n    components: {\n      button: 'button',\n      icon: 'i',\n    },\n    button: resolveShorthand(props.button, {\n      children: React.Fragment, // 🚨 getSlots requires children\n    }),\n    icon: resolveShorthand(props.icon),\n  };\n\n  const { slots, slotProps } = getSlots(state, ['input']);\n\n  return (\n    <slots.root {...slotProps.root}>\n      <slots.button {...slotProps.button}>\n        <slots.icon {...slotProps.icon} />\n      </slots.button>\n    </slots.root>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to version 8.27.0\nDESCRIPTION: This patch updates the @fluentui/react package to version 8.27.0, ensuring that the latest features and fixes are integrated. It is part of continuous improvements made to the project. Dependencies on the latest version of Fluent UI are necessary for optimal functionality.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/theming-designer/CHANGELOG.md#2025-04-20_snippet_43\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.27.0 ([PR #18566](https://github.com/microsoft/fluentui/pull/18566) by behowell@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: usePositioning hook\nDESCRIPTION: Defines an internal hook called `usePositioning` that accepts `PositioningProps & PositioningOptions` and returns a `UsePositioningReturn`.  This hook likely handles the core positioning logic.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-positioning/etc/react-positioning.api.md#2025-04-20_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport function usePositioning(options: PositioningProps & PositioningOptions): UsePositioningReturn;\n```\n\n----------------------------------------\n\nTITLE: Defining TagPickerOption Properties in TypeScript\nDESCRIPTION: The TagPickerOption type definition sets properties for the selectable option within a TagPicker. It conforms to Combobox's option structure but introduces additional slots like media and secondary content for enhanced styling and configurability. Each option mandates a value property to designate its identity when selected by a user, enabling robust option management.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/Spec.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport type TagPickerOptionSlots = Pick<OptionSlots, 'root'> & {\n  media?: Slot<'div'>;\n  secondaryContent?: Slot<'span'>;\n};\n\n/**\n * TagPickerOption Props\n */\nexport type TagPickerOptionProps = ComponentProps<TagPickerOptionSlots> & {\n  children: React.ReactNode;\n  /**\n   * A TagPickerOption should always provide a value to\n   * identify itself once selected\n   */\n  value: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Web Component Checkbox Component Definition\nDESCRIPTION: Defines the core web component for the Fluent UI Checkbox, extending FAST Checkbox with custom attributes and behaviors\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/checkbox/README.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<fluent-checkbox label-position=\"after\" checked=\"false\" size=\"medium\" shape=\"square\">\n```\n\n----------------------------------------\n\nTITLE: Exporting TagPicker Group Hook in TypeScript\nDESCRIPTION: Exports a hook for managing the TagPicker group component state. Takes props and a ref to the div element.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_59\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const useTagPickerGroup_unstable: (props: TagPickerGroupProps, ref: React_2.Ref<HTMLDivElement>) => TagPickerGroupState;\n```\n\n----------------------------------------\n\nTITLE: Internal Slider Component Structure with Slots\nDESCRIPTION: Detailed internal rendering of Slider component using slot-based architecture with input, rail, and thumb elements\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-slider/library/docs/Spec.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<slots.root {...slotProps.root}>\n  <slots.input {...slotProps.input} />\n  <slots.rail {...slotProps.rail} />\n  <slots.thumb {...slotProps.thumb} />\n</slots.root>\n```\n\n----------------------------------------\n\nTITLE: Bumping FluentUI React Hooks Version\nDESCRIPTION: This snippet shows how to bump the version of the @fluentui/react-hooks package. The commit hash provides a direct link to the change within the repository. This action is part of maintaining the dependencies for the project.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-docsite-components/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n\"- Bump @fluentui/react-hooks to v8.6.31 ([commit](https://github.com/microsoft/fluentui/commit/70d0762fd12eb211f7c1dbe31a23b2fbb73a67c4) by beachball)\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Theme-Switchable DateTime Picker Images\nDESCRIPTION: JSX code showing image display logic for date and time pickers with theme switching capabilities. Includes examples for date picker, time picker, and date range picker components with both light and dark mode images.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/DatePickerPage/docs/android/DateTimePickerOverview.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<DisplayToggle onText=\"Dark\" offText=\"Light\" label=\"Theme Switcher\">\n<!-- prettier-ignore-start -->\n\n### Date Picker\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/android/updated/img_dateandtime_01_datepicker_light.png?text=LightMode\"/>\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/android/updated/img_dateandtime_01_datepicker_dark.png?text=DarkMode\"/>\n\n### Time Picker\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/android/updated/img_dateandtime_03_timepicker_light.png?text=LightMode\"/>\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/android/updated/img_dateandtime_03_timepicker_dark.png?text=DarkMode\"/>\n\n### Range Picker for Dates\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/android/updated/img_dateandtime_02_rangepicker_light.png?text=LightMode\"/>\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/android/updated/img_dateandtime_02_rangepicker_dark.png?text=DarkMode\"/>\n<!-- prettier-ignore-end -->\n</DisplayToggle>\n```\n\n----------------------------------------\n\nTITLE: FluentUI React SpinButton Version History\nDESCRIPTION: Markdown formatted changelog entries detailing version updates, patches, and dependency changes for the FluentUI React SpinButton component\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-spinbutton/library/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Change Log - @fluentui/react-spinbutton\n\nThis log was last generated on Wed, 16 Apr 2025 19:42:18 GMT and should not be manually modified.\n\n<!-- Start content -->\n\n## [9.3.5](https://github.com/microsoft/fluentui/tree/@fluentui/react-spinbutton_v9.3.5)\n\nWed, 16 Apr 2025 19:42:18 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-spinbutton_v9.3.4..@fluentui/react-spinbutton_v9.3.5)\n\n### Patches\n\n- Bump @fluentui/react-field to v9.2.5 ([PR #34166](https://github.com/microsoft/fluentui/pull/34166) by beachball)\n- Bump @fluentui/react-jsx-runtime to v9.0.54 ([PR #34166](https://github.com/microsoft/fluentui/pull/34166) by beachball)\n- Bump @fluentui/react-utilities to v9.19.0 ([PR #34166](https://github.com/microsoft/fluentui/pull/34166) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Line Chart Gaps Configuration\nDESCRIPTION: Adding data gaps or breaks in a line chart using the `gaps` prop. Supports representing missing data points or low-confidence predictions through start and end index configuration.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charts/stories/src/LineChart/LineChartBestPractices.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngaps: [\n  {\n    startIndex: number,\n    endIndex: number\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating useFieldControlProps Hook in TypeScript\nDESCRIPTION: The useFieldControlProps hook merges props from the Field context with the provided props for form controls. This allows for enhanced flexibility and ensures that accessibility attributes are correctly applied. It accepts an optional props object and options for controlling accessibility attributes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-field/library/docs/Spec.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Gets the control props from the field context, if this inside a `<Field>`.\n *\n * If `props` is provided: copies and merges the FieldControlProps with the given props, if this inside a `<Field>`.\n * Otherwise, returns the FieldControlProps that should be applied to the control.\n *\n * It is preferred to pass a `props` object if available, to improve the resulting merged props.\n *\n * @param props - The existing props for the control. These will be merged with the control props from the field context.\n * @param options - Option to include the size prop.\n * @returns Merged props if inside a `<Field>`, otherwise the original props, or undefined if no props given.\n */\nexport function useFieldControlProps_unstable<Props extends FieldControlProps>(\n  props?: Props,\n  options?: FieldControlPropsOptions,\n): Props | undefined;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Options for `useFieldControlProps_unstable`.\n */\nexport type FieldControlPropsOptions = {\n  /**\n   * Skips setting `aria-labelledby` on the control if the `label.htmlFor` refers to the control.\n   *\n   * This should be used with controls that can be the target of a label's `for` prop:\n   * `<button>`, `<input>`, `<progress>`, `<select>`, `<textarea>`.\n   */\n  supportsLabelFor?: boolean;\n\n  /**\n   * Sets `required` instead of `aria-required` when the Field is marked required.\n   *\n   * This should be used with controls that support the `required` prop:\n   * `<input>` (except `range` or `color`), `<select>`, `<textarea>`.\n   */\n  supportsRequired?: boolean;\n\n  /**\n   * Sets the size prop on the control to match the Field's size: `'small' | 'medium' | 'large'`.\n   *\n   * This should be used with controls that have a custom size prop that matches the Field's size prop.\n   */\n  supportsSize?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Using the useUnhandledProps Hook in React\nDESCRIPTION: This example demonstrates the use of the `useUnhandledProps` hook, which helps in extracting and spreading props that are not explicitly handled by a component. It defines a `Text` component and uses `useUnhandledProps` to gather the unhandled props and apply them to the `span` element. This allows users to pass additional props to the component that are not explicitly defined in the component's type definition.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/react-bindings/README.md#2025-04-20_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\ntype TextComponentProps = React.HTMLAttributes<HTMLSpanElement> * {\n  className?: string;\n};\n\nconst Text: React.FunctionComponent<TextComponentProps> = props => {\n  const { className, children } = props;\n  const unhandledProps = useUnhandledProps(['className'], props);\n\n  return <span {...unhandledProps} className={classes.root}>{children}</span>;\n};\n```\n\n----------------------------------------\n\nTITLE: Content Prop Migration\nDESCRIPTION: Demonstrates how to migrate the content prop to JSX children when moving from Box to Primitive.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Box.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Box } from '@fluentui/react-northstar';\nconst Component = () => <Box content=\"hi\" />;\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Primitive } from '@fluentui/react-migration-v0-v9';\nconst Component = () => <Primitive>hi</Primitive>;\n```\n\n----------------------------------------\n\nTITLE: Rendering Icons with Gestalt in HTML\nDESCRIPTION: Gestalt produces SVG icon components in HTML that are encapsulated within a <svg> tag. The icons also employ class names and 'aria-label' for styling and accessibility. Gestalt icons use a block display style by default.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Icon.md#2025-04-20_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<svg class=\"gUZ pBj U9O kVc\" height=\"16\" width=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Pin\" role=\"img\">\n  <path\n    d=\"M18 13.5c0-2.22-1.21-4.15-3-5.19V2.45A2.5 2.5 0 0 0 17 0H7a2.5 2.5 0 0 0 2 2.45v5.86c-1.79 1.04-3 2.97-3 5.19h5v8.46L12 24l1-2.04V13.5h5z\"\n  ></path>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Custom Button Component with Custom Styles in Fluent UI React\nDESCRIPTION: This snippet defines a custom button component that utilizes hooks from Fluent UI v9 for state management and styling. It demonstrates how to reuse the render and state logic from the default Button component while applying custom styles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/KeepingDesignConsistent.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\nimport {\n  makeStyles,\n  tokens,\n  renderButton_unstable as renderButton,\n  useButton_unstable as useButton,\n} from '@fluentui/react-components';\nimport type { ButtonProps, ButtonState, ForwardRefComponent } from '@fluentui/react-components';\n\nconst useStyles = makeStyles({\n  root: {\n    background: tokens.colorNeutralBackground2,\n    //...\n  },\n});\n\n// This is an example of a custom style hook\nconst useCustomButtonStyles = (state: ButtonState): ButtonState => {\n  const styles = useStyles();\n\n  state.root.className = styles.root;\n  //...\n\n  return state;\n};\n\nexport const MyButton: ForwardRefComponent<ButtonProps> = React.forwardRef((props, ref) => {\n  const state = useButton(props, ref);\n  useCustomButtonStyles(state);\n  return renderButton(state);\n}) as ForwardRefComponent<ButtonProps>;\n```\n\n----------------------------------------\n\nTITLE: FluentUI React Theme Version Headers\nDESCRIPTION: Version headers and metadata for different releases of the FluentUI React Theme package, including timestamps and comparison links.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-theme/library/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.0.0-alpha.7](https://github.com/microsoft/fluentui/tree/@fluentui/react-theme_v9.0.0-alpha.7)\n\nWed, 31 Mar 2021 00:53:43 GMT\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-theme_v9.0.0-alpha.6..@fluentui/react-theme_v9.0.0-alpha.7)\n```\n\n----------------------------------------\n\nTITLE: Bumping FluentUI React Monaco Editor Version with PR\nDESCRIPTION: This snippet shows how to bump the version of the @fluentui/react-monaco-editor package. The pull request number provides a direct link to the change within the repository. This action is part of maintaining the dependencies for the project.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-docsite-components/CHANGELOG.md#2025-04-20_snippet_25\n\nLANGUAGE: text\nCODE:\n```\n\"- Bump @fluentui/react-monaco-editor to v1.7.123 ([PR #28803](https://github.com/microsoft/fluentui/pull/28803) by beachball)\"\n```\n\n----------------------------------------\n\nTITLE: Defining CustomStyleHooksContextValue_unstable Type in TypeScript\nDESCRIPTION: This code snippet defines a TypeScript type 'CustomStyleHooksContextValue_unstable' as a partial object containing numerous custom style hooks for various Fluent UI components. Each property is a custom style hook for a specific component or subcomponent.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-shared-contexts/library/etc/react-shared-contexts.api.md#2025-04-20_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type CustomStyleHooksContextValue_unstable = Partial<{\n    useAccordionHeaderStyles_unstable: CustomStyleHook;\n    useAccordionItemStyles_unstable: CustomStyleHook;\n    useAccordionPanelStyles_unstable: CustomStyleHook;\n    useAccordionStyles_unstable: CustomStyleHook;\n    useAlphaSliderStyles_unstable: CustomStyleHook;\n    useAvatarGroupItemStyles_unstable: CustomStyleHook;\n    useAvatarGroupPopoverStyles_unstable: CustomStyleHook;\n    useAvatarGroupStyles_unstable: CustomStyleHook;\n    useAvatarStyles_unstable: CustomStyleHook;\n    useBadgeStyles_unstable: CustomStyleHook;\n    useBreadcrumbButtonStyles_unstable: CustomStyleHook;\n    useBreadcrumbDividerStyles_unstable: CustomStyleHook;\n    useBreadcrumbItemStyles_unstable: CustomStyleHook;\n    useBreadcrumbStyles_unstable: CustomStyleHook;\n    useButtonStyles_unstable: CustomStyleHook;\n    // ... (many more style hooks)\n    useToolbarStyles_unstable: CustomStyleHook;\n    useTooltipStyles_unstable: CustomStyleHook;\n}>\n```\n\n----------------------------------------\n\nTITLE: Implementing AvatarGroup in Fluent UI v9\nDESCRIPTION: This code snippet shows the equivalent implementation of AvatarGroup in Fluent UI v9. It uses the new AvatarGroup, AvatarGroupItem, and AvatarGroupPopover components, along with the partitionAvatarGroupItems function to handle inline and overflow items.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/AvatarGroup.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { AvatarGroup, AvatarGroupItem, AvatarGroupPopover } from '@fluentui/react-components';\n\nconst names = [\n  'Johnie McConnell',\n  'Allan Munger',\n  'Erik Nason',\n  'Kristin Patterson',\n  'Daisy Phillips',\n  'Carole Poland',\n  'Carlos Slattery',\n  'Robert Tolbert',\n  'Kevin Sturgis',\n  'Charlotte Waltson',\n  'Elliot Woodward',\n];\n\nconst AvatarGroupV9BasicExample = () => {\n  const { inlineItems, overflowItems } = partitionAvatarGroupItems({ items: names });\n\n  return (\n    <AvatarGroup {...props}>\n      {inlineItems.map(name => (\n        <AvatarGroupItem name={name} key={name} />\n      ))}\n      <AvatarGroupPopover>\n        {overflowItems.map(name => (\n          <AvatarGroupItem name={name} key={name} />\n        ))}\n      </AvatarGroupPopover>\n    </AvatarGroup>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Redefined Input Types with Simplified Props\nDESCRIPTION: This snippet shows the proposed approach where 'InputProps' directly includes all necessary properties, making what is required or optional explicit. 'InputState' uses 'Pick' and 'Required' to derive mandatory properties from 'InputProps', aiming to streamline type definitions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/remove-commons.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type InputProps = ComponentProps<InputSlots> & {\n  size?: 'small' | 'medium' | 'large';\n  appearance?: 'outline' | 'underline' | 'filledDarker' | 'filledLighter';\n  // maybe some other props here\n};\n\nexport type InputState =\n  // If there are things from props which remain optional in state, add another Pick without Required\n  Required<Pick<InputProps, 'size' | 'appearance'>> &\n    ComponentState<InputSlots> & {\n      // maybe some other state here\n    };\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.114.4\nDESCRIPTION: Implements an update for the @fluentui/react package to version 8.114.4, improving stability and fixing identified issues.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluent2-theme/CHANGELOG.md#2025-04-20_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.114.4 ([PR #30225](https://github.com/microsoft/fluentui/pull/30225) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Importing Azure Themes in JavaScript\nDESCRIPTION: This snippet shows how to import the various Azure theme objects from the @fluentui/azure-themes package. It includes light, dark, and high contrast theme options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/azure-themes/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  AzureThemeLight,\n  AzureThemeDark,\n  AzureThemeHighContrastLight,\n  AzureThemeHighContrastDark,\n} from '@fluentui/azure-themes';\n```\n\n----------------------------------------\n\nTITLE: Defining ITextFieldStyles Interface in TypeScript\nDESCRIPTION: Defines the ITextFieldStyles interface extending IShadowDomStyle for styling different parts of a text field.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_219\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface ITextFieldStyles extends IShadowDomStyle {\n    description: IStyle;\n    errorMessage: IStyle;\n    field: IStyle;\n    fieldGroup: IStyle;\n    icon: IStyle;\n    prefix: IStyle;\n    revealButton: IStyle;\n    revealIcon: IStyle;\n    revealSpan: IStyle;\n    root: IStyle;\n    subComponentStyles: ITextFieldSubComponentStyles;\n    suffix: IStyle;\n    wrapper: IStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Field Wrapper for ProgressBar\nDESCRIPTION: This code snippet demonstrates how to import the Field component from the Fluent UI React components library, which is useful for enhancing a ProgressBar component with additional functionality like labels and validation messages.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-progress/library/README.md#2025-04-20_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Field } from '@fluentui/react-field';\n```\n\n----------------------------------------\n\nTITLE: Pre-processed JavaScript Styles in Fluent UI\nDESCRIPTION: This JavaScript snippet demonstrates the pre-processed styles in a Fluent UI component, where the original styles have been transformed into CSS rules and classes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/shared/build-system/stop-styles-transforms.md#2025-04-20_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// @fluentui/react-menu/lib/components/MenuDivider/useMenuDividerStyles.styles.js\n// 📝 output is simpfied\n\nconst useStyles = /*#__PURE__*/ __styles(\n  {\n    root: {\n      B6of3ja: 'fvjh0tl',\n      t21cq0: ['f1rnx978', 'f1q7jvqi'],\n    },\n  },\n  {\n    d: ['.fvjh0tl{margin-top:4px;}', '.f1rnx978{margin-right:-5px;}', '.f1q7jvqi{margin-left:-5px;}'],\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Specifying MinorAxisLayout in TypeScript\nDESCRIPTION: The MinorAxisLayout interface specifies various layout and styling options for a chart's secondary axes, including grid and tick customization. The properties such as 'gridcolor', 'ticklen', and 'tickmode' offer fine control over axis appearance.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/chart-utilities/etc/chart-utilities.api.md#2025-04-20_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface MinorAxisLayout {\n    // (undocumented)\n    dtick: DTickValue;\n    // (undocumented)\n    gridcolor: Color;\n    // (undocumented)\n    griddash: Dash;\n    // (undocumented)\n    gridwidth: number;\n    // (undocumented)\n    nticks: number;\n    // (undocumented)\n    showgrid: boolean;\n    // (undocumented)\n    tick0: DTickValue;\n    // (undocumented)\n    tickcolor: Color;\n    // (undocumented)\n    ticklen: number;\n    // (undocumented)\n    tickmode: 'auto' | 'linear' | 'array';\n    // (undocumented)\n    ticks: 'outside' | 'inside' | '';\n    // (undocumented)\n    tickvals: any[];\n    // (undocumented)\n    tickwidth: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Get Placeholder Styles Function\nDESCRIPTION: Defines a function, `getPlaceholderStyles`, which takes a style object (`IStyle`) and returns an `IStyle` object. Likely used to apply specific styles to the placeholder text of input elements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/style-utilities/etc/style-utilities.api.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n\"export function getPlaceholderStyles(styles: IStyle): IStyle;\"\n```\n\n----------------------------------------\n\nTITLE: Importing Fluent UI React Combobox in Markdown\nDESCRIPTION: A markdown reference to the @fluentui/react-combobox package that is part of the Fluent UI React component library.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @fluentui/react-combobox\n\n**Combobox component for [Fluent UI React](https://react.fluentui.dev)**\n```\n\n----------------------------------------\n\nTITLE: Creating Vertical Tabs in Fluent UI React\nDESCRIPTION: This snippet illustrates how to define a vertical TabList in React using Fluent UI. By setting the vertical prop, the tabs will be arranged vertically while maintaining horizontal content alignment within each Tab.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tabs/library/docs/Spec.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<TabList vertical>\n  <Tab value=\"tab1\">One</Tab>\n  <Tab value=\"tab2\">Two</Tab>\n  <Tab value=\"tab3\">Three</Tab>\n</TabList>\n```\n\n----------------------------------------\n\nTITLE: Refactoring Trigger Props in React\nDESCRIPTION: This change details refactoring functionality related to applying trigger props to children as a utility in the React Tooltip component. The refactoring aims to improve code organization and reusability by extracting common logic into a dedicated utility function.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tooltip/library/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: React\nCODE:\n```\n\"Refactoring out functionality that applies trigger props to children as a utility. ([PR #19840](https://github.com/microsoft/fluentui/pull/19840) by Humberto.Morimoto@microsoft.com)\"\n```\n\n----------------------------------------\n\nTITLE: Discarded Design Approach for Tooltip Composition\nDESCRIPTION: This code snippet represents a discarded design proposal that aims to implement a more complex structure for the Tooltip component. While it seeks to introduce the host-trigger-content relationship, it is considered overly verbose and complicates usage.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/components/tooltip-api-alignment.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// ⚠️ not a real proposal\nfunction App() {\n  return (\n    <Tooltip>\n      <TooltipTrigger>\n        <button />\n      </TooltipTrigger>\n      <TooltipContent />\n    </Tooltip>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Breadcrumb in FluentUI Fabric (v8)\nDESCRIPTION: Example of creating a Breadcrumb component using FluentUI Fabric v8. It demonstrates setting up breadcrumb items, handling clicks, and configuring display options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-breadcrumb/library/docs/Spec.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Breadcrumb, IBreadcrumbItem } from '@fluentui/react/lib/Breadcrumb';\n\nconst items: IBreadcrumbItem[] = [\n  { text: 'Files', key: 'Files', onClick: _onBreadcrumbItemClicked },\n  { text: 'This is folder 1', key: 'f1', onClick: _onBreadcrumbItemClicked },\n  { text: 'This is folder 2 with a long name', key: 'f2', onClick: _onBreadcrumbItemClicked },\n  { text: 'This is folder 3 long', key: 'f3', onClick: _onBreadcrumbItemClicked },\n  { text: 'This is non-clickable folder 4', key: 'f4' },\n  { text: 'This is folder 5', key: 'f5', onClick: _onBreadcrumbItemClicked, isCurrentItem: true },\n];\n\nexport const BreadcrumbStaticExample: React.FunctionComponent = () => {\n  return (\n    <Breadcrumb\n      items={items}\n      maxDisplayedItems={3}\n      ariaLabel=\"Breadcrumb with static width\"\n      overflowAriaLabel=\"More items\"\n    />\n  );\n};\n\nfunction _onBreadcrumbItemClicked(ev: React.MouseEvent<HTMLElement>, item: IBreadcrumbItem): void {\n  console.log(`Breadcrumb item with key \"${item.key}\" has been clicked.`);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Custom Tokens in React\nDESCRIPTION: This example shows how to create and use custom tokens within a Fluent UI theme and styles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/docs/MIGRATION-NOTES.md#2025-04-20_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeStyles, themeToTokensObject, webLightTheme, FluentProvider, Theme } from '@fluentui/react-components';\n\n// You can pass your own custom tokens to a theme and pass that to the provider.\ntype CustomTheme = Theme & {\n  tokenA: string;\n  tokenB: string;\n  tokenC: string;\n};\nconst customTheme: CustomTheme = { ...webLightTheme, tokenA: 'red', tokenB: 'blue', tokenC: 'green' };\nfunction App() {\n  return <FluentProvider theme={customTheme}>{/* ... */}</FluentProvider>;\n}\n\n// ...\n\n// You can construct a custom tokens object by yourself.\nconst customTokens: Record<keyof CustomTheme, string> = {\n  ...tokens,\n  tokenA: `var(--tokenA)`,\n  tokenB: `var(--tokenB)`,\n  tokenC: `var(--tokenC)`,\n};\n\n// You can alternatively use the themeToTokensObject function to construct the custom tokens object.\n// Note: If you do it via the themeToTokensObject you might see a negative effect on tree-shaking since bundles won't know the shape of the output.\nconst alternativeCustomTokens = themeToTokensObject(customTheme);\n\n// You can then use this custom tokens object inside your styles.\nconst useStyles = makeStyles({\n  base: {\n    color: customTokens.tokenA,\n    backgroundColor: customTokens.tokenB,\n    outlineColor: customTokens.tokenC,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Virtualizer Components and Hooks\nDESCRIPTION: This snippet defines the main Virtualizer components and their associated hooks. It includes the Virtualizer, VirtualizerScrollView, and VirtualizerScrollViewDynamic components, along with their respective use hooks and style hooks.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-virtualizer/library/etc/react-virtualizer.api.md#2025-04-20_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport const Virtualizer: React_2.FC<VirtualizerProps>;\n\n// @public\nexport const VirtualizerScrollView: React_2.FC<VirtualizerScrollViewProps>;\n\n// @public\nexport const VirtualizerScrollViewDynamic: React_2.FC<VirtualizerScrollViewDynamicProps>;\n\n// @public (undocumented)\nexport function useVirtualizer_unstable(props: VirtualizerProps): VirtualizerState;\n\n// @public (undocumented)\nexport function useVirtualizerScrollView_unstable(props: VirtualizerScrollViewProps): VirtualizerScrollViewState;\n\n// @public (undocumented)\nexport function useVirtualizerScrollViewDynamic_unstable(props: VirtualizerScrollViewDynamicProps): VirtualizerScrollViewDynamicState;\n\n// @public\nexport const useVirtualizerStyles_unstable: (state: VirtualizerState) => VirtualizerState;\n\n// @public\nexport const useVirtualizerScrollViewStyles_unstable: (state: VirtualizerScrollViewState) => VirtualizerScrollViewState;\n\n// @public\nexport const useVirtualizerScrollViewDynamicStyles_unstable: (state: VirtualizerScrollViewDynamicState) => VirtualizerScrollViewDynamicState;\n```\n\n----------------------------------------\n\nTITLE: Shadow DOM usage with MergeStylesRootProvider and MergeStylesShadowRootProvider\nDESCRIPTION: This example demonstrates the use of `MergeStylesRootProvider` and `MergeStylesShadowRootProvider` in React to enable `merge-styles` support for Shadow DOM. `react-shadow` library is used to create shadow roots.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/merge-styles/README.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrimaryButton } from '@fluentui/react';\nimport { MergeStylesRootProvider, MergeStylesShadowRootProvider } from '@fluentui/utilities';\nimport root from 'react-shadow';\n\nconst ShadowRoot = ({ children }) => {\n  // This is a ref but we're using state to manage it so we can force\n  // a re-render.\n  const [shadowRootEl, setShadowRootEl] = React.useState<HTMLElement | null>(null);\n\n  return (\n    <MergeStylesRootProvider>\n      <root.div className=\"shadow-root\" delegatesFocus ref={setShadowRootEl}>\n        <MergeStylesShadowRootProvider shadowRoot={shadowRootEl?.shadowRoot}>{children}</MergeStylesShadowRootProvider>\n      </root.div>\n    </MergeStylesRootProvider>\n  );\n};\n\n<ShadowRoot>\n  <PrimaryButton>I'm in the shadow DOM!</PrimaryButton>\n</ShadowRoot>\n<PrimaryButton>I'm in the light DOM!</PrimaryButton>\n```\n\n----------------------------------------\n\nTITLE: FluentUI Storybook Version History Entry\nDESCRIPTION: A changelog entry documenting version 1.0.0 updates and dependency bumps for the FluentUI Storybook package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/storybook/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.0.0](https://github.com/microsoft/fluentui/tree/@fluentui/storybook_v1.0.0)\n\nWed, 30 Jun 2021 07:38:35 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/storybook_v1.0.0..@fluentui/storybook_v1.0.0)\n\n### Changes\n\n- Bump @fluentui/react-storybook to v9.0.0-alpha.0 ([PR #18695](https://github.com/microsoft/fluentui/pull/18695) by tristan.watanabe@gmail.com)\n```\n\n----------------------------------------\n\nTITLE: React Component: Rendering JSX Output\nDESCRIPTION: The `renderSample` function is responsible for rendering the component's JSX output based on the provided state. It uses `getSlots` from `@fluentui/react-utilities` to extract slot information. This function is a pure function that takes the component's state and renders JSX. No state mutation or processing should happen within this function.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/converged-implementation-patterns.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getSlots } from '@fluentui/react-utilities';\nimport { sampleShorthandProps } from './useSample';\n\n// state should come from `useSample` hook\nexport const renderSample = (state: SampleState) => {\n  const { slots, slotProps } = getSlots(state, sampleShorthandProps);\n\n  return (\n    <slots.root {...slotProps.root}>\n      <slot.icon {...slotProps.icon} />\n    </slots.root>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Design Toolkit Links with JSX\nDESCRIPTION: JSX markup for displaying a structured list of design toolkit download links for various platforms including Web, iOS, Android, and Windows in both Sketch and Figma formats.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Overviews/ResourcesPage/docs/default/ResourcesDesignResources.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ul className=\"md-list--flex\">\n  <li className=\"mdut--half\">[Download Web toolkit (Sketch)](https://aka.ms/FluentToolkits/Web/Sketch)</li>\n  <li className=\"mdut--half\">[Download Web toolkit (Figma)](https://aka.ms/FluentToolkits/Web/Figma)</li>\n  <li className=\"mdut--half\">[Download iOS toolkit (Sketch)](https://aka.ms/FluentToolkits/iOS/Sketch)</li>\n  <li className=\"mdut--half\">[Download iOS toolkit (Figma)](https://aka.ms/FluentToolkits/iOS/Figma)</li>\n  <li className=\"mdut--half\">[Download Android toolkit (Sketch)](https://aka.ms/FluentToolkits/Android/Sketch)</li>\n  <li className=\"mdut--half\">[Download Android toolkit (Figma)](https://aka.ms/FluentToolkits/Android/Figma)</li>\n  <li className=\"mdut--half\">[Download Windows toolkit (Figma)](https://aka.ms/figmatoolkit)</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Updating @fluentui/react-tabster to v9.0.0-beta.3\nDESCRIPTION: Updates the @fluentui/react-tabster package to version 9.0.0-beta.3, adding styling to documentation and updating dependencies.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tabster/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n## [9.0.0-beta.3](https://github.com/microsoft/fluentui/tree/@fluentui/react-tabster_v9.0.0-beta.3)\n\nWed, 27 Oct 2021 12:14:22 GMT\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-tabster_v9.0.0-beta.2..@fluentui/react-tabster_v9.0.0-beta.3)\n\n### Changes\n\n- added styling of documentation ([PR #20193](https://github.com/microsoft/fluentui/pull/20193) by peter@draxler.ml)\n- Bump @fluentui/make-styles to v9.0.0-beta.2 ([PR #20353](https://github.com/microsoft/fluentui/pull/20353) by beachball)\n- Bump @fluentui/react-make-styles to v9.0.0-beta.2 ([PR #20353](https://github.com/microsoft/fluentui/pull/20353) by beachball)\n- Bump @fluentui/react-shared-contexts to v9.0.0-beta.2 ([PR #20353](https://github.com/microsoft/fluentui/pull/20353) by beachball)\n- Bump @fluentui/react-utilities to v9.0.0-beta.2 ([PR #20353](https://github.com/microsoft/fluentui/pull/20353) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Defining IDragDropTarget Interface in TypeScript\nDESCRIPTION: Defines the IDragDropTarget interface with properties for key, options, and root element. This interface is marked as @public but undocumented.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_112\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IDragDropTarget {\n    // (undocumented)\n    key: string;\n    // (undocumented)\n    options: IDragDropOptions;\n    // (undocumented)\n    root: HTMLElement;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring PopupMenuItem in Swift and Objective-C\nDESCRIPTION: Shows the declaration of the PopupMenuItem class in both Swift and Objective-C. This class likely represents individual items within a popup menu in the FluentUI framework.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/PopupMenuPage/docs/ios/PopupMenuImplementation.md#2025-04-20_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nPopupMenuItem\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\nMSFPopupMenuItem\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Meta and Custom Components in JSX\nDESCRIPTION: Initial imports for Storybook documentation and utility components, including Meta component and custom FullscreenLink component. Also exports a parent path constant for story navigation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/AccessibilityScenarios/ListOfScenarios.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs';\nimport { FullscreenLink } from './utils';\nexport const parentPath = 'concepts-developer-accessibility-stories';\n```\n\n----------------------------------------\n\nTITLE: Key Code Namespace Definition\nDESCRIPTION: Defines a comprehensive namespace of keyboard key codes including letters, numbers, function keys, and special characters. Maps internal numeric constants to exported names.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/keyboard-keys/etc/keyboard-keys.api.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare namespace keyCodes {\n    export {\n        Cancel_2 as Cancel,\n        Help_2 as Help,\n        Backspace_2 as Backspace,\n        Tab_2 as Tab,\n        Clear_2 as Clear,\n        Enter_2 as Enter,\n        Shift_2 as Shift,\n        Control_2 as Control,\n        Alt_2 as Alt,\n        Pause_2 as Pause,\n        CapsLock_2 as CapsLock,\n        Escape_2 as Escape,\n        Convert_2 as Convert,\n        NonConvert_2 as NonConvert,\n        Accept_2 as Accept,\n        ModeChange_2 as ModeChange,\n        Space_2 as Space,\n        PageUp_2 as PageUp,\n        PageDown_2 as PageDown,\n        End_2 as End,\n        Home_2 as Home,\n        ArrowLeft_2 as ArrowLeft,\n        ArrowUp_2 as ArrowUp,\n        ArrowRight_2 as ArrowRight,\n        ArrowDown_2 as ArrowDown,\n        Select_2 as Select,\n        Print_2 as Print,\n        Execute_2 as Execute,\n        PrintScreen_2 as PrintScreen,\n        Insert_2 as Insert,\n        Delete_2 as Delete\n        // Additional exports omitted for brevity\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Prop Interface and PropTypes Definition in React\nDESCRIPTION: This code demonstrates how to define a `MyComponentProps` interface and `propTypes` for a React component.  It uses `PropTypes` for runtime type checking and the interface to define the structure of the props. It imports common types and propTypes from `../../utils` for consistency.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/add-a-feature.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as PropTypes from 'prop-types'\nimport * as React from 'react'\n\nimport {\n ChildrenComponentProps,\n ContentComponentProps,\n UIComponentProps,\n commonPropTypes,\n} from '../../utils'\n\nexport interface DividerProps\n extends UIComponentProps,\n   ChildrenComponentProps,\n   ContentComponentProps {\n /**\n  * Accessibility behavior if overridden by the user.\n  */\n accessibility?: Accessibility\n\n /** A divider can be fitted, without any space above or below it.  */\n fitted?: boolean\n\n /** Size multiplier (default 0) * */\n size?: number\n\n /** A divider can appear more important and draw the user's attention. */\n important?: boolean\n}\n\n// ...\n\n static propTypes = {\n    ...commonPropTypes.createCommon({ color: true }),\n    fitted: PropTypes.bool,\n    important: PropTypes.bool,\n    size: PropTypes.number,\n }\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Component with Custom Styling in React Native\nDESCRIPTION: Example demonstrating how to use the Text component from Fluent UI React Native with different variants and custom styling. Shows usage of default text, predefined variants like captionStandard and secondaryStandard, and custom text styles using the customize method.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/TextPage/docs/cross/TextUsage.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from \"react\";\nimport { View } from \"react-native\";\nimport { Text } from \"@fluentui/react-native\";\n\nconst RedCaptionSemiBold = Text.customize({ tokens: { variant: 'captionStandard', fontWeight: 'semiBold', color: '#ff0000' } });\nconst ArialBlack = Text.customize({ tokens: { variant: 'heroLargeStandard', fontFamily: 'Arial Black' } });\n\nconst App = () => {\n  return (\n    <View>\n      <Text>Normal Text</Text>\n      <Text variant=\"captionStandard\">CaptionStandard</Text>\n      <Text variant=\"secondaryStandard\">SecondaryStandard</Text>\n      <RedCaptionSemiBold>RedCaptionSemiBold</RedCaptionSemiBold>\n      <ArialBlack>Arial Black</ArialBlack>\n    </View>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Focus-Aware Button Component in React Native with FluentUI\nDESCRIPTION: Example implementation of a button component that manages focus state using React hooks and FluentUI React Native components. The component demonstrates focus management through refs and state, using Stack for layout and Button components with customizable content.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/ButtonPage/docs/windows/ButtonUsage.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\nimport { Button, IFocusable } from '@fluentui/react-native';\nimport { Stack } from '@fluentui-react-native/stack';\n\nexport const ButtonFocusTest: React.FunctionComponent<{}> = () => {\n  const [state, setState] = React.useState({\n    focused: false\n  });\n  const buttonRef = React.useRef<IFocusable>(null);\n\n  const onFocus = React.useCallback(() => {\n    setState({ focused: !state.focused });\n    if (buttonRef.current && !state.focused) {\n      buttonRef.current.focus();\n    }\n  }, [state, setState]);\n\n  return (\n    <Stack>\n      <Button content={state.focused ? 'Focused' : 'Not Focused'} componentRef={buttonRef} />\n      <Button content=\"Click to focus\" onClick={onFocus} />\n    </Stack>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Fluent UI React Native Link Component in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the Link component from Fluent UI React Native in a TypeScript React Native application. It shows two use cases: a link for navigation and a link that triggers an alert. The example also includes basic styling for the container view.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/LinkPage/docs/cross/LinkUsage.md#2025-04-20_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as React from 'react';\nimport { Alert } from 'react-native';\nimport { Link } from '@fluentui/react-native';\nimport { View, StyleSheet } from 'react-native';\n\nconst App = () => {\n  const doPress = (): void => {\n    Alert.alert('Alert.', 'You have been alerted.');\n  };\n\n  return (\n    <View style={styles.stackStyle}>\n      <Link url=\"https://www.bing.com/\" content=\"Click to navigate.\" />\n      <Link onPress={doPress} content=\"Click to alert.\" />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  stackStyle: {\n    borderWidth: 1,\n    borderColor: '#bdbdbd',\n    paddingVertical: 8,\n    paddingHorizontal: 12,\n    margin: 8\n  },\n});\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Installing Fluent UI Web Components with pnpm\nDESCRIPTION: Command to install Fluent UI Web Components as a dependency using pnpm package manager. This installs the beta version of the library.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/README.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @fluentui/web-components@beta\n```\n\n----------------------------------------\n\nTITLE: Adding Fabric Core CSS via CDN in HTML\nDESCRIPTION: This snippet shows how to include the Fabric Core CSS file in the head of an HTML document using a CDN link. The link references version 11.1.0 of the library, with a note that version 9.6.1 can be used for MDL2 styles from Fabric 6.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Overviews/GetStartedPage/docs/web/GetStartedDevelopCore.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link\n  rel=\"stylesheet\"\n  href=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/office-ui-fabric-core/11.1.0/css/fabric.min.css\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding and Updating Design Tokens in React Theme\nDESCRIPTION: Adds new design tokens and updates existing ones in the react-theme package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-theme/library/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Added/updated in PR #20569\n// New and updated design tokens\n```\n\n----------------------------------------\n\nTITLE: React 16/17 ID Prefix Configuration\nDESCRIPTION: Shows how to implement ID prefixing for React 16 and 17 using IdPrefixProvider to prevent styling issues and ID collisions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/AdvancedConfiguration.stories.mdx#2025-04-20_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { IdPrefixProvider, FluentProvider } from '@fluentui/react-components';\nimport * as React from 'react';\n\nfunction MyApp() {\n  return (\n    <IdPrefixProvider value=\"APP1-\">\n      <FluentProvider>{/* children */}</FluentProvider>\n    </IdPrefixProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: React Component: Forwarding Ref and Using Hooks\nDESCRIPTION: This snippet demonstrates the main component file (`Sample.tsx`). It uses `React.forwardRef` to forward a ref to the underlying DOM element. It calls the `useSample` hook to manage component state, `useSampleStyles` to apply styles, and `renderSample` to render the component's JSX output. The component acts as a wrapper that integrates the logic from the hooks and renderer.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/converged-implementation-patterns.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const Sample = React.forwardRef<HTMLElement, SampleProps>((props, ref) => {\n  const state = useSample(props, ref);\n  useSampleStyles(state);\n\n  return renderSample(state);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Keyboard Interactions for Selecting an Option in Markdown\nDESCRIPTION: This snippet defines the keyboard interactions for selecting an option in a dropdown. It specifies the keys and their corresponding actions for selecting an option and closing the dropdown.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/stories/src/Dropdown/DropdownAccessibility.stories.mdx#2025-04-20_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| Key                                  | Result                                                                            |\n| ------------------------------------ | --------------------------------------------------------------------------------- |\n| <kbd>Enter</kbd> or <kbd>Space</kbd> | Selects the focused option and closes the popup                                   |\n| <kbd>Tab</kbd>                       | Selects the focused option, closes the popup, and moves focus after the dropdown  |\n| <kbd>Shift</kbd> + <kbd>Tab</kbd>    | Selects the focused option, closes the popup, and moves focus before the dropdown |\n```\n\n----------------------------------------\n\nTITLE: Applying Theme with FluentProvider\nDESCRIPTION: Shows how to apply a theme to an application by passing it to the FluentProvider component that wraps the app. This enables consistent styling across the application.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-theme/library/README.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FluentProvider theme={webLightTheme}>\n  <App />\n</FluentProvider>\n```\n\n----------------------------------------\n\nTITLE: Implementing Button with CSS Custom Properties in React\nDESCRIPTION: Shows how to create a Button component using CSS custom properties for styling, allowing for easy customization.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/custom-styling.md#2025-04-20_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n// Button with component tokens and global fallbacks\nconst ButtonTokens = {\n  background: '--fui-button-background',\n  color: '--fui-button-color',\n  border: '--fui-button-complex-selector',\n};\nconst useButtonStyles = makeResetStyles({\n  backgroundColor: `var(${ButtonTokens.background}, ${tokens.colorBrandBackground})`,\n  color: `var(${ButtonTokens.color}, ${tokens.colorNeutralForegroundOnBrand})`,\n  border: '4px solid',\n  ':enabled:not(:checked):not(:indeterminate)': {\n    borderColor: `var(${ButtonTokens.border}, orange)`,\n  },\n});\n\nconst Button = props => {\n  const styles = useButtonStyles();\n  return (\n    <button {...props} className={mergeClasses(styles, props.className)}>\n      {props.children}\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: TagPickerInput Component Definition\nDESCRIPTION: Defines the TagPickerInput React component as a ForwardRefComponent. It is a component that accepts a ref and forwards it to a child element.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const TagPickerInput: ForwardRefComponent<TagPickerInputProps>;\"\n```\n\n----------------------------------------\n\nTITLE: Considering Alternate Solutions for Event Typing Issues\nDESCRIPTION: An example explores a discarded solution where events are cast to existing types to avoid breaking changes. However, it highlights the potential for runtime type inaccuracies, showing why this approach was dismissed in favor of a more robust solution.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/event-handlers-event-type.md#2025-04-20_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Within our codebase:\nexport type OpenPopoverEvents = KeyboardEvent | MouseEvent;\n\nconst usePopover = () => {\n  const handleScroll = (e: Event) => {\n    onOpenChange(e as OpenPopoverEvents, data);\n  };\n};\n\n// In consumer implementations:\nconst onOpenChange = (e: MouseEvent | KeyboardEvent) => {\n  console.log(e.shiftKey); // 💣 This would fail since shiftKey doesn't exist on 'Event'\n};\nconst props: Props = { onOpenChange };\n```\n\n----------------------------------------\n\nTITLE: Defining FluentUI React Select Component API in TypeScript\nDESCRIPTION: This TypeScript definition file describes the public API for the @fluentui/react-select package. It includes type definitions, component exports, and utility functions for implementing select elements with the FluentUI React framework.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-select/library/etc/react-select.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"react\" />\n\nimport type { ComponentProps } from '@fluentui/react-utilities';\nimport type { ComponentState } from '@fluentui/react-utilities';\nimport type { ForwardRefComponent } from '@fluentui/react-utilities';\nimport * as React_2 from 'react';\nimport type { Slot } from '@fluentui/react-utilities';\nimport { SlotClassNames } from '@fluentui/react-utilities';\n\n// @public\nexport const renderSelect_unstable: (state: SelectState) => JSX.Element;\n\n// @public\nexport const Select: ForwardRefComponent<SelectProps>;\n\n// @public (undocumented)\nexport const selectClassNames: SlotClassNames<SelectSlots>;\n\n// @public\nexport type SelectOnChangeData = {\n  value: string;\n};\n\n// @public (undocumented)\nexport type SelectProps = Omit<ComponentProps<Partial<SelectSlots>, 'select'>, 'size' | 'onChange'> & {\n  appearance?: 'outline' | 'underline' | 'filled-darker' | 'filled-lighter';\n  onChange?: (ev: React_2.ChangeEvent<HTMLSelectElement>, data: SelectOnChangeData) => void;\n  size?: 'small' | 'medium' | 'large';\n};\n\n// @public (undocumented)\nexport type SelectSlots = {\n  root: NonNullable<Slot<'span'>>;\n  select: NonNullable<Slot<'select'>>;\n  icon: Slot<'span'>;\n};\n\n// @public (undocumented)\nexport type SelectState = ComponentState<SelectSlots> & Required<Pick<SelectProps, 'appearance' | 'size'>>;\n\n// @public\nexport const useSelect_unstable: (props: SelectProps, ref: React_2.Ref<HTMLSelectElement>) => SelectState;\n\n// @public\nexport const useSelectStyles_unstable: (state: SelectState) => SelectState;\n\n// (No @packageDocumentation comment for this package)\n```\n\n----------------------------------------\n\nTITLE: Basic Loader Shorthand Usage in React\nDESCRIPTION: Demonstrates the simplest way to use a shorthand prop with a Loader component by providing a label string\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/docs/src/pages/ShorthandProps.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Loader label=\"Fetching data...\" />\n```\n\n----------------------------------------\n\nTITLE: Defining GroupedVerticalBarChart Interfaces in TypeScript\nDESCRIPTION: Defines interfaces for GroupedVerticalBarChart component props, styles, and data structures. Includes options for customization such as bar width, enabling gradients, and rendering custom callouts.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/etc/react-charting.api.md#2025-04-20_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface IGroupedVerticalBarChartProps extends ICartesianChartProps {\n    barwidth?: number | 'default' | 'auto';\n    chartTitle?: string;\n    culture?: string;\n    data: IGroupedVerticalBarChartData[];\n    enableGradient?: boolean;\n    hideLabels?: boolean;\n    isCalloutForStack?: boolean;\n    legendColor?: string;\n    maxBarWidth?: number;\n    mode?: 'default' | 'plotly';\n    onRenderCalloutPerDataPoint?: IRenderFunction<IGVBarChartSeriesPoint>;\n    roundCorners?: boolean;\n    showXAxisGridLines?: boolean;\n    showXAxisPath?: boolean;\n    showYAxisGridLines?: boolean;\n    showYAxisPath?: boolean;\n    styles?: IStyleFunctionOrObject<IGroupedVerticalBarChartStyleProps, IGroupedVerticalBarChartStyles>;\n    xAxisInnerPadding?: number;\n    xAxisOuterPadding?: number;\n}\n\nexport interface IGroupedVerticalBarChartData {\n    name: string;\n    series: IGVBarChartSeriesPoint[];\n    stackCallOutAccessibilityData?: IAccessibilityProps;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SelectionZone Component Interfaces in TypeScript\nDESCRIPTION: Defines the interfaces for the SelectionZone component, including ISelectionZone, ISelectionZoneProps, and ISelectionZoneState. The SelectionZone component handles keyboard and mouse selection behaviors for lists and grids.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_171\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface ISelectionZone {\n    ignoreNextFocus: () => void;\n}\n\n// @public (undocumented)\nexport interface ISelectionZoneProps extends React_2.ClassAttributes<SelectionZone> {\n    // (undocumented)\n    children?: React_2.ReactNode;\n    className?: string;\n    componentRef?: () => void;\n    disableAutoSelectOnInputElements?: boolean;\n    enableTouchInvocationTarget?: boolean;\n    enterModalOnTouch?: boolean;\n    isSelectedOnFocus?: boolean;\n    // @deprecated (undocumented)\n    layout?: {};\n    onItemContextMenu?: (item?: any, index?: number, ev?: Event) => void | boolean;\n    onItemInvoked?: (item?: IObjectWithKey, index?: number, ev?: Event) => void;\n    selection: ISelection;\n    selectionClearedOnEscapePress?: boolean;\n    selectionClearedOnSurfaceClick?: boolean;\n    selectionMode?: SelectionMode_2;\n    selectionPreservedOnEmptyClick?: boolean;\n    toggleWithoutModifierPressed?: boolean;\n}\n\n// @public (undocumented)\nexport interface ISelectionZoneState {\n    // (undocumented)\n    isModal: boolean | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CompoundButton Component in TypeScript\nDESCRIPTION: This snippet defines the CompoundButton component, which extends the Button class. It also defines constants for appearance, shape, and size, as well as their respective types using ValuesOf utility type.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport class CompoundButton extends Button {\n}\n\n// @public\nexport const CompoundButtonAppearance: {\n    readonly primary: \"primary\";\n    readonly outline: \"outline\";\n    readonly subtle: \"subtle\";\n    readonly transparent: \"transparent\";\n};\n\n// @public\nexport type CompoundButtonAppearance = ValuesOf<typeof CompoundButtonAppearance>;\n\n// @public (undocumented)\nexport const CompoundButtonDefinition: FASTElementDefinition<typeof CompoundButton>;\n\n// @public\nexport const CompoundButtonShape: {\n    readonly circular: \"circular\";\n    readonly rounded: \"rounded\";\n    readonly square: \"square\";\n};\n\n// @public\nexport type CompoundButtonShape = ValuesOf<typeof CompoundButtonShape>;\n\n// @public\nexport const CompoundButtonSize: {\n    readonly small: \"small\";\n    readonly medium: \"medium\";\n    readonly large: \"large\";\n};\n\n// @public\nexport type CompoundButtonSize = ValuesOf<typeof CompoundButtonSize>;\n```\n\n----------------------------------------\n\nTITLE: Defining EventData and EventHandler for Consistent Typing\nDESCRIPTION: This code introduces helper types, EventData and EventHandler, to centralize and standardize event handling across components. EventData is used to structure data with specific and generic events, while EventHandler enforces consistent usage of React.SyntheticEvent or Event as the first callback argument, enhancing flexibility and ensuring type safety.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/event-handlers-event-type.md#2025-04-20_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type EventData<Type extends string, TEvent> =\n  | { type: undefined; event: React.SyntheticEvent | Event }\n  | { type: Type; event: TEvent };\n\nexport type EventHandler<TData extends EventData<string, unknown>> = (\n  ev: React.SyntheticEvent | Event,\n  data: TData,\n) => void;\n```\n\n----------------------------------------\n\nTITLE: Implementing Presence Motions with useMotion Hook in React\nDESCRIPTION: This snippet demonstrates how to use the useMotion hook from @fluentui/react-motion-preview to implement presence motions in a React component. It shows the setup of CSS classes for different motion states and how to apply them based on the component's visibility.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/motion-definition-n-apis.md#2025-04-20_snippet_33\n\nLANGUAGE: tsx\nCODE:\n```\nimport { fadeEnterSlow, fadeExitSlow } from 'some-pkg';\nimport { useMotion } from '@fluentui/react-motion-preview';\n\nconst useClasses = makeStyles({\n  root: {\n    /* some CSS */\n  },\n  entering: {\n    ...fadeEnterSlow,\n  },\n  exiting: {\n    ...fadeExitSlow,\n  },\n});\n\nfunction MyComponent() {\n  const classes = useClasses();\n\n  const [visible, setVisible] = useState(false);\n  const { state, ref } = useMotion(visible);\n\n  return (\n    <div ref={ref} className={mergeClasses(classes.root, classes[state])}>\n      Hello world!\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Text Component Interface and Export in TypeScript\nDESCRIPTION: Defines interface properties and methods for the Text component, including font settings, style properties like italic and underline, and change handlers. The code also includes a re-export statement.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_72\n\nLANGUAGE: TypeScript\nCODE:\n```\nfontChanged(prev: TextFont | undefined, next: TextFont | undefined): void;\n    // @internal\n    handleChange(source: any, propertyName: string): void;\n    italic: boolean;\n    nowrap: boolean;\n    size?: TextSize;\n    sizeChanged(prev: TextSize | undefined, next: TextSize | undefined): void;\n    strikethrough: boolean;\n    truncate: boolean;\n    underline: boolean;\n    weight?: TextWeight;\n    weightChanged(prev: TextWeight | undefined, next: TextWeight | undefined): void;\n}\nexport { Text_2 as Text }\n```\n\n----------------------------------------\n\nTITLE: Documenting Package Version and Release Date in Markdown\nDESCRIPTION: Markdown header syntax used to specify the version number and release date for a particular release of the package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-checkbox/library/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n## [9.0.11](https://github.com/microsoft/fluentui/tree/@fluentui/react-checkbox_v9.0.11)\n\nWed, 02 Nov 2022 11:57:49 GMT\n```\n\n----------------------------------------\n\nTITLE: Disabling Motion with null Value\nDESCRIPTION: Example showing how to disable motion by passing null to the motion prop, similar to the Slots API approach in FluentUI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/motion-definition-n-apis.md#2025-04-20_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\n<DialogSurface motion={null}>\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-utilities version\nDESCRIPTION: This patch updates the version of the `@fluentui/react-utilities` dependency.  Bumping this package ensures that the `@fluentui/react-badge` component uses the latest utility functions and bug fixes available in the utilities package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nBump @fluentui/react-utilities to v9.18.21 ([PR #33927](https://github.com/microsoft/fluentui/pull/33927) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry with Patches\nDESCRIPTION: Markdown formatted patch notes with PR references and author details\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### Patches\n\n- update typings for context and definition, export base classes ([PR #18716](https://github.com/microsoft/fluentui/pull/18716) by chhol@microsoft.com)\n- Updated type ramp to latest values. ([PR #16927](https://github.com/microsoft/fluentui/pull/16927) by brheston@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Growth Animation Component in TypeScript\nDESCRIPTION: Creates a motion component with an infinite growth animation that uses the element's scroll height to determine animation keyframes. The animation cycles through opacity and maxHeight changes over 300ms duration.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-motion/stories/src/CreateMotionComponent/CreateMotionComponentFunctionParams.stories.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst Grow = createMotionComponent(({ element }) => ({\n  duration: 300,\n  keyframes: [\n    { opacity: 0, maxHeight: `${element.scrollHeight / 2}px` },\n    { opacity: 1, maxHeight: `${element.scrollHeight}px` },\n    { opacity: 0, maxHeight: `${element.scrollHeight / 2}px` },\n  ],\n  iterations: Infinity,\n}));\n```\n\n----------------------------------------\n\nTITLE: Illustrating React Context Duplication in a TypeScript Example\nDESCRIPTION: Defines a React context and demonstrates how it can return unexpected default values due to module-level singleton scoping. This example is used to illustrate the problem addressed by the Babel preset.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/babel-preset-global-context/README.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// my-context-package\nimport * as React from 'react';\n\nexport const MyContext = React.createContext({ foo: 'foo' });\n\n// provider.ts\n\n// node_modules/my-context-package/lib/index.js\nimport { MyContext } from 'my-context-package';\n\nfunction Provider({ children }) {\n  const ctx = { foo: 'bar' };\n\n  // 1. Instantiate context with value foo='bar'\n  return <MyContext.Provider value={ctx}>{children}</MyContext.Provider>;\n}\n\n// consumer.ts\n\n// node_modules/nested-dep/node_modules/my-context-package/lib/index.js\nimport * as React from 'react';\nimport { MyContext } from 'my-context-package';\n\nfunction Consumer() {\n  // 2. Consume the 'same' context from different module\n  const ctx = React.useContext(MyContext);\n\n  // 3. ⚠️ Actual value would be the default 'foo'\n  return <div>{ctx.foo}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Divider Component Implementation in TypeScript\nDESCRIPTION: Implementation of the Divider component with customization options for appearance, alignment, and orientation. Extends BaseDivider with additional properties for UI customization.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_30\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Warning: (ae-forgotten-export) The symbol \"CSSDisplayPropertyValue\" needs to be exported by the entry point index.d.ts\n//\n// @public\nexport function display(displayValue: CSSDisplayPropertyValue): string;\n\n// @public\nexport class Divider extends BaseDivider {\n    // (undocumented)\n    alignContent?: DividerAlignContent;\n    // (undocumented)\n    appearance?: DividerAppearance;\n    // (undocumented)\n    inset?: boolean;\n}\n\n// @public\nexport const DividerAlignContent: {\n    readonly center: \"center\";\n    readonly start: \"start\";\n    readonly end: \"end\";\n};\n\n// @public\nexport type DividerAlignContent = ValuesOf<typeof DividerAlignContent>;\n\n// @public\nexport const DividerAppearance: {\n    readonly strong: \"strong\";\n    readonly brand: \"brand\";\n    readonly subtle: \"subtle\";\n};\n\n// @public\nexport type DividerAppearance = ValuesOf<typeof DividerAppearance>;\n\n// @public\nexport const DividerDefinition: FASTElementDefinition<typeof Divider>;\n\n// @public\nexport const DividerOrientation: {\n    readonly horizontal: \"horizontal\"; /**\n    * Divider roles\n    * @public\n    */\n    readonly vertical: \"vertical\";\n};\n\n// @public\nexport type DividerOrientation = ValuesOf<typeof DividerOrientation>;\n\n// @public\nexport const DividerRole: {\n    readonly separator: \"separator\";\n    readonly presentation: \"presentation\";\n};\n\n// @public\nexport type DividerRole = ValuesOf<typeof DividerRole>;\n\n// @public\nexport const DividerStyles: ElementStyles;\n\n// @public\nexport const DividerTemplate: ElementViewTemplate<Divider>;\n```\n\n----------------------------------------\n\nTITLE: Bumping package versions using beachball\nDESCRIPTION: This code snippet illustrates the action of bumping package versions using the `beachball` tool within the FluentUI project. It demonstrates how dependencies like `@fluentui/react`, `@fluentui/theme`, and `@fluentui/react-monaco-editor` are updated to newer versions. The `PR` number links to the pull request associated with the version bump.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-docsite-components/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n\"- Bump @fluentui/react to v8.117.5 ([PR #31022](https://github.com/microsoft/fluentui/pull/31022) by beachball)\"\n\n```\n\nLANGUAGE: none\nCODE:\n```\n\"- Bump @fluentui/theme to v2.6.45 ([PR #31022](https://github.com/microsoft/fluentui/pull/31022) by beachball)\"\n\n```\n\nLANGUAGE: none\nCODE:\n```\n\"- Bump @fluentui/example-data to v8.4.17 ([PR #31022](https://github.com/microsoft/fluentui/pull/31022) by beachball)\"\n\n```\n\nLANGUAGE: none\nCODE:\n```\n\"- Bump @fluentui/public-docsite-setup to v0.3.27 ([PR #31022](https://github.com/microsoft/fluentui/pull/31022) by beachball)\"\n\n```\n\nLANGUAGE: none\nCODE:\n```\n\"- Bump @fluentui/react-hooks to v8.7.2 ([PR #31022](https://github.com/microsoft/fluentui/pull/31022) by beachball)\"\n\n```\n\nLANGUAGE: none\nCODE:\n```\n\"- Bump @fluentui/set-version to v8.2.16 ([PR #31022](https://github.com/microsoft/fluentui/pull/31022) by beachball)\"\n\n```\n\nLANGUAGE: none\nCODE:\n```\n\"- Bump @fluentui/react-monaco-editor to v1.7.194 ([PR #31022](https://github.com/microsoft/fluentui/pull/31022) by beachball)\"\n\n```\n\n----------------------------------------\n\nTITLE: Bumping package versions in FluentUI React Switch\nDESCRIPTION: This code snippet represents a series of patch updates where the versions of dependent packages are bumped. This includes packages such as @fluentui/react-field, @fluentui/react-jsx-runtime, and @fluentui/react-label. Each bump is associated with a pull request.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-switch/library/CHANGELOG.md#2025-04-20_snippet_11\n\nLANGUAGE: none\nCODE:\n```\n\"- Bump @fluentui/react-field to v9.1.18 ([PR #28791](https://github.com/microsoft/fluentui/pull/28791) by beachball)\n- Bump @fluentui/react-jsx-runtime to v9.0.0-alpha.16 ([PR #28791](https://github.com/microsoft/fluentui/pull/28791) by beachball)\n- Bump @fluentui/react-label to v9.1.26 ([PR #28791](https://github.com/microsoft/fluentui/pull/28791) by beachball)\"\n```\n\n----------------------------------------\n\nTITLE: Fixing HTML details element support in react-focus\nDESCRIPTION: This patch adds support for the HTML details element within the react-focus component. It ensures that the focus management works correctly with the details element, allowing users to navigate and interact with it using keyboard or other input methods.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-focus/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nfix: add support for HTML details element ([PR #25324](https://github.com/microsoft/fluentui/pull/25324) by seanmonahan@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: useWindow Hook\nDESCRIPTION: Defines a React hook called `useWindow` that returns the Window object or undefined if the window is not available. This hook allows components to access the window object in a React-friendly way.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-window-provider/etc/react-window-provider.api.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const useWindow: () => Window | undefined;\n```\n\n----------------------------------------\n\nTITLE: Shallow Comparison in TypeScript\nDESCRIPTION: Function to perform a shallow comparison between two values of any type. Returns a boolean indicating equality.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/utilities/etc/utilities.api.md#2025-04-20_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function shallowCompare<TA extends any, TB extends any>(a: TA, b: TB): boolean;\n```\n\n----------------------------------------\n\nTITLE: Using the useStyles Hook in React\nDESCRIPTION: This example demonstrates the use of the `useStyles` hook, which facilitates the usage of CSS-in-JS styles along with Fluent UI theming. It defines a `Text` component that utilizes the `useStyles` hook to apply styles based on a `color` prop, applying the styles to the root element. It showcases the retrieval of styles through the hook.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/react-bindings/README.md#2025-04-20_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\ntype TextComponentProps = {\n  className?: string;\n  color?: string;\n};\n\nconst Text: React.FunctionComponent<TextComponentProps> = props => {\n  const { className, children, color } = props;\n\n  const { classes } = useStyles('Text', {\n    className: 'ui-text',\n    mapPropsToStyles: () => ({ color }),\n  });\n\n  return <span className={classes.root}>{children}</span>;\n};\n```\n\n----------------------------------------\n\nTITLE: Internal Structure of Switch Component in Fluent UI React\nDESCRIPTION: An internal view of the Switch component's structural rendering. It exhibits components within the root slot, emphasizing input handling and labelling positions. Requires familiarity with JSX and Fluent UI concepts.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-switch/library/docs/Spec.md#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<slots.root {...slotProps.root}>\n  <slots.input {...slotProps.input} />\n  {labelPosition !== 'after' && slots.label && <slots.label {...slotProps.label} />}\n  <slots.indicator {...slotProps.indicator} />\n  {labelPosition === 'after' && slots.label && <slots.label {...slotProps.label} />}\n</slots.root>\n```\n\n----------------------------------------\n\nTITLE: TagPickerInput Slots Type\nDESCRIPTION: Defines the slots available for the TagPickerInput component. It includes a root slot, which is a non-nullable input element.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport type TagPickerInputSlots = {\n    root: NonNullable<Slot<'input'>>;\n};\"\n```\n\n----------------------------------------\n\nTITLE: Bumping package versions in FluentUI React Switch\nDESCRIPTION: This code snippet represents a series of patch updates where the versions of dependent packages are bumped. This includes packages such as @fluentui/react-field, @fluentui/react-jsx-runtime and @fluentui/react-label. Each bump is associated with a pull request.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-switch/library/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n\"Bump @fluentui/react-field to v9.1.27 ([PR #29145](https://github.com/microsoft/fluentui/pull/29145) by beachball)\n- Bump @fluentui/react-jsx-runtime to v9.0.8 ([PR #29145](https://github.com/microsoft/fluentui/pull/29145) by beachball)\n- Bump @fluentui/react-label to v9.1.35 ([PR #29145](https://github.com/microsoft/fluentui/pull/29145) by beachball)\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Component in TypeScript for FluentUI\nDESCRIPTION: This snippet defines the Button component using the ForwardRefComponent type. It sets up the component with default props and renders the button structure based on the provided props.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Styles/Colors/docs/web/ColorsPersonasGroups.md#2025-04-20_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const Button: ForwardRefComponent<ButtonProps> = React.forwardRef((props, ref) => {\n  const {\n    circular,\n    disabled,\n    fluid,\n    appearance = 'secondary',\n    size = 'medium',\n    shape = 'rounded',\n    icon,\n    iconPosition = 'before',\n    ...rest\n  } = props;\n\n  const state: ButtonState = {\n    circular,\n    disabled,\n    fluid,\n    appearance,\n    size,\n    shape,\n    icon,\n    iconPosition,\n  };\n\n  const { classes, styles } = useButtonStyles(state);\n  const { slots, slotProps } = useButton(props, state, ref);\n\n  return (\n    <slots.root {...slotProps.root}>\n      {icon && iconPosition === 'before' && (\n        <slots.icon {...slotProps.icon} className={classes.icon} />\n      )}\n      {slots.content && <slots.content {...slotProps.content} />}\n      {icon && iconPosition === 'after' && (\n        <slots.icon {...slotProps.icon} className={classes.icon} />\n      )}\n    </slots.root>\n  );\n});\n\nButton.displayName = 'Button';\n```\n\n----------------------------------------\n\nTITLE: Defining GaugeChart Interfaces in TypeScript\nDESCRIPTION: Specifies interfaces for GaugeChart component props, styles, and segment data. Includes options for customization such as chart value formatting, enabling gradients, and hiding tooltips.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/etc/react-charting.api.md#2025-04-20_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface IGaugeChartProps {\n    calloutProps?: Partial<ICalloutProps>;\n    chartTitle?: string;\n    chartValue: number;\n    chartValueFormat?: GaugeValueFormat | ((sweepFraction: [number, number]) => string);\n    className?: string;\n    componentRef?: IRefObject<IChart>;\n    culture?: string;\n    enableGradient?: boolean;\n    height?: number;\n    hideLegend?: boolean;\n    hideMinMax?: boolean;\n    hideTooltip?: boolean;\n    legendProps?: Partial<ILegendsProps>;\n    maxValue?: number;\n    minValue?: number;\n    roundCorners?: boolean;\n    segments: IGaugeChartSegment[];\n    styles?: IStyleFunctionOrObject<IGaugeChartStyleProps, IGaugeChartStyles>;\n    sublabel?: string;\n    theme?: ITheme;\n    variant?: GaugeChartVariant;\n    width?: number;\n}\n\nexport interface IGaugeChartSegment {\n    accessibilityData?: IAccessibilityProps;\n    color?: string;\n    gradient?: [string, string];\n    legend: string;\n    size: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Image Component Interfaces in TypeScript\nDESCRIPTION: Interface and enum definitions for the Image component in FluentUI, including different image fitting modes and cover styles. The Image component provides advanced image handling with loading states and various layout options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_147\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nconst Image_2: React_2.FunctionComponent<IImageProps>;\nexport { Image_2 as Image }\n\n// @public (undocumented)\nexport const ImageBase: React_2.FunctionComponent<IImageProps>;\n\n// @public\nexport enum ImageCoverStyle {\n    landscape = 0,\n    portrait = 1\n}\n\n// @public\nexport enum ImageFit {\n    center = 0,\n    centerContain = 5,\n    centerCover = 4,\n    contain = 1,\n    cover = 2,\n    none = 3\n}\n\n// @public\nexport const ImageIcon: React_2.FunctionComponent<IImageIconProps>;\n\n// @public (undocumented)\nexport enum ImageLoadState {\n    error = 2,\n    // @deprecated (undocumented)\n    errorLoaded = 3,\n    loaded = 1,\n    notLoaded = 0\n}\n\nexport { imageProperties }\n```\n\n----------------------------------------\n\nTITLE: Using Qualitative Colors from DataVizPalette in FluentUI Charts\nDESCRIPTION: Demonstrates how to use colors from the Qualitative color palette provided by DataVizPalette. This palette offers 40 distinct colors that are ideal for visualizing categorical variables.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/docs/colors.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { DataVizPalette, IChartProps, ILineChartPoints, LineChart } from '@fluentui/react-charting';\n\nconst dataSeries: ILineChartPoints[] = [\n  {\n    legend: 'Line 1',\n    data: [\n      { x: 20, y: 50 },\n      { x: 40, y: 80 },\n    ],\n    color: DataVizPalette.color1, // .color2, .color3, ....., .color40\n  },\n];\nconst chartData: IChartProps = {\n  chartTitle: 'Line chart',\n  lineChartData: dataSeries,\n};\n\nconst App = () => {\n  return <LineChart data={chartData} />;\n};\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining CompoundButton Class and Related Types in TypeScript\nDESCRIPTION: Defines the CompoundButton class extending Button, along with related enums and types for appearance, shape, and size.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_29\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport class CompoundButton extends Button {\n}\n\n// @public\nexport const CompoundButtonAppearance: {\n    readonly primary: \"primary\";\n    readonly outline: \"outline\";\n    readonly subtle: \"subtle\";\n    readonly transparent: \"transparent\";\n};\n\n// @public\nexport type CompoundButtonAppearance = ValuesOf<typeof CompoundButtonAppearance>;\n\n// @public (undocumented)\nexport const CompoundButtonDefinition: FASTElementDefinition<typeof CompoundButton>;\n\n// @public\nexport const CompoundButtonShape: {\n    readonly circular: \"circular\";\n    readonly rounded: \"rounded\";\n    readonly square: \"square\";\n};\n\n// @public\nexport type CompoundButtonShape = ValuesOf<typeof CompoundButtonShape>;\n\n// @public\nexport const CompoundButtonSize: {\n    readonly small: \"small\";\n    readonly medium: \"medium\";\n    readonly large: \"large\";\n};\n\n// @public\nexport type CompoundButtonSize = ValuesOf<typeof CompoundButtonSize>;\n\n// Warning: (ae-missing-release-tag) \"styles\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport const CompoundButtonStyles: ElementStyles;\n\n// @public\nexport const CompoundButtonTemplate: ElementViewTemplate<CompoundButton>;\n```\n\n----------------------------------------\n\nTITLE: Defining PieHoverInfo Type in TypeScript\nDESCRIPTION: The PieHoverInfo type lists various options for hover information on pie charts, allowing combinations of labels, text, values, percent, and names to be displayed.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/chart-utilities/etc/chart-utilities.api.md#2025-04-20_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type PieHoverInfo = 'all' | 'none' | 'skip' | 'label' | 'text' | 'value' | 'percent' | 'name' | 'label+text' | 'label+value' | 'label+percent' | 'label+name' | 'text+value' | 'text+percent' | 'text+name' | 'value+percent' | 'value+name' | 'percent+name' | 'label+text+value' | 'label+text+percent' | 'label+text+name' | 'label+value+percent' | 'label+value+name' | 'label+percent+name' | 'text+value+percent' | 'text+value+name' | 'text+percent+name' | 'value+percent+name' | 'label+text+value+percent' | 'label+text+value+name' | 'label+text+percent+name' | 'label+value+percent+name' | 'text+value+percent+name';\n```\n\n----------------------------------------\n\nTITLE: Defining IEditingSelectedPeopleItemStyles Interface in TypeScript\nDESCRIPTION: Defines the IEditingSelectedPeopleItemStyles interface with style properties for the root and input of an editing selected people item. This interface is marked as @public but undocumented.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_122\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IEditingSelectedPeopleItemStyles {\n    // (undocumented)\n    input: IStyle;\n    // (undocumented)\n    root: IStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Announced Component in TypeScript\nDESCRIPTION: This snippet demonstrates rendering an Announced component to notify screen readers about the number of search results found. The message '3 items found' will be read by the screen reader when a user interacts with a search-like input, such as a contact field or search box. The component is initialized with a unique id and a message. Prerequisites include having Fluent UI set up and accessibility features enabled.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-examples/src/react/Announced/docs/SearchResults/Overview.md#2025-04-20_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\npublic render(): JSX.Element {\n  return (\n    <Announced\n      id={announcedId}\n      message='3 items found'\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Native OS Platform Guidelines with JSX\nDESCRIPTION: JSX markup for displaying a comprehensive list of design guidelines for iOS, macOS, and Android platforms, including links to Human Interface Guidelines and app icon specifications.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Overviews/ResourcesPage/docs/default/ResourcesDesignResources.md#2025-04-20_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ul className=\"md-list--flex\">\n  <li className=\"mdut--half\">[iOS Human Interface Guidelines](https://developer.apple.com/design/human-interface-guidelines/ios/overview/themes/)</li>\n  <li className=\"mdut--half\">[Guidelines for iOS app icons](https://developer.apple.com/design/human-interface-guidelines/ios/icons-and-images/app-icon/)</li>\n  <li className=\"mdut--half\">[macOS Human Interface Guidelines](https://developer.apple.com/design/human-interface-guidelines/macos/overview/themes/)</li>\n  <li className=\"mdut--half\">[Guidelines for macOS app icons](https://developer.apple.com/design/human-interface-guidelines/macos/icons-and-images/app-icon/)</li>\n  <li className=\"mdut--half\">[Android Human Interface Guidelines](https://developer.android.com/design/)</li>\n  <li className=\"mdut--half\">[Guidelines for Android app icons](https://developer.android.com/guide/practices/ui_guidelines/icon_design)</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: DetailsList with sorting (v8)\nDESCRIPTION: This snippet shows how to add column sorting to a DetailsList component in v8 of Fluent UI. It defines an `onColumnClick` handler that is called when a column header is clicked. The handler then sorts the data. The `columns` array defines the column configurations, including the `onColumnClick` handler. IColumn is a type.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-table/library/docs/Spec.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// v8\nconst onColumnClick = (ev: React.MouseEvent<HTMLElement>, column: IColumn): void => {\n  // sort data\n};\n\nconst columns: IColumn[] = [\n  {\n    name: 'File Type',\n    fieldName: 'name',\n    onColumnClick: onColumnClick,\n  },\n  {\n    name: 'Name',\n    fieldName: 'name',\n    onColumnClick: onColumnClick,\n  },\n];\n\n<DetailsList\n  items={items}\n  columns={columns}\n  isHeaderVisible={true}\n/>\n```\n\n----------------------------------------\n\nTITLE: Exporting FluentUI Color Token Variables\nDESCRIPTION: Defines and exports CSS variable references for FluentUI's color system. These variables cover neutral backgrounds, foregrounds, strokes, and their various interaction states (hover, pressed, selected, disabled). Each token is marked as @public and references a corresponding CSS custom property.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const colorCompoundBrandStrokePressed = \"var(--colorCompoundBrandStrokePressed)\";\n\n// @public\nexport const colorNeutralBackground1 = \"var(--colorNeutralBackground1)\";\n\n// @public\nexport const colorNeutralBackground1Hover = \"var(--colorNeutralBackground1Hover)\";\n\n// @public\nexport const colorNeutralBackground1Pressed = \"var(--colorNeutralBackground1Pressed)\";\n\n// @public\nexport const colorNeutralBackground1Selected = \"var(--colorNeutralBackground1Selected)\";\n\n// Additional color tokens follow same pattern...\n```\n\n----------------------------------------\n\nTITLE: Attempt to Avoid Portal Error in SSR\nDESCRIPTION: This snippet attempts to prevent the error in the previous example by checking if `document` exists before creating and appending the tooltip element. However, even if the error is avoided, React hydration will still throw a warning because the server render produces no content, while the client render introduces a new element.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/ssr-context.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// Avoid throwing\nlet toolTipEl;\n\nif (typeof document === 'object') {\n  const tooltipEl = document.createElement('div');\n  document.appendChild(tooltipEl);\n}\n\nif (!tooltipEl) {\n  React.createPortal(tooltip, tooltipEl)\n}\n\nreturn null;\n\n```\n\n----------------------------------------\n\nTITLE: Using Fabric Core Class Names in HTML\nDESCRIPTION: This example demonstrates how to apply Fabric Core styles in an HTML document. It adds the 'ms-Fabric' class to the body element to set the font-family, and then applies specific typography and color classes to a span element.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Overviews/GetStartedPage/docs/web/GetStartedDevelopCore.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<body class=\"ms-Fabric\" dir=\"ltr\">\n  <span class=\"ms-font-su ms-fontColor-themePrimary\">Big blue text</span>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Version History and Changes - FluentUI React InfoLabel\nDESCRIPTION: Markdown formatted changelog entries tracking version updates and changes to the InfoLabel component, including patches and dependency bumps.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-infolabel/library/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.0.50](https://github.com/microsoft/fluentui/tree/@fluentui/react-infolabel_v9.0.50)\n\nMon, 18 Nov 2024 09:44:39 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-infolabel_v9.0.49..@fluentui/react-infolabel_v9.0.50)\n\n### Patches\n\n- chore: Adding maxWidth to InfoButton's popover to match figma spec. ([PR #33253](https://github.com/microsoft/fluentui/pull/33253) by Humberto.Morimoto@microsoft.com)\n- Bump @fluentui/react-popover to v9.9.25 ([PR #33229](https://github.com/microsoft/fluentui/pull/33229) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Creating sample data for the DataGrid\nDESCRIPTION: This snippet initializes an array of items representing files with associated metadata such as authors, timestamps, and icons. The items will be rendered in the DataGrid.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-table/library/README.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst items: Item[] = [\n  {\n    file: { label: 'Meeting notes', icon: <DocumentRegular /> },\n    author: { label: 'Max Mustermann', status: 'available' },\n    lastUpdated: { label: '7h ago', timestamp: 3 },\n    lastUpdate: {\n      label: 'You edited this',\n      icon: <EditRegular />,\n    },\n  },\n  {\n    file: { label: 'Thursday presentation', icon: <FolderRegular /> },\n    author: { label: 'Erika Mustermann', status: 'busy' },\n    lastUpdated: { label: 'Yesterday at 1:45 PM', timestamp: 2 },\n    lastUpdate: {\n      label: 'You recently opened this',\n      icon: <OpenRegular />,\n    },\n  },\n  {\n    file: { label: 'Training recording', icon: <VideoRegular /> },\n    author: { label: 'John Doe', status: 'away' },\n    lastUpdated: { label: 'Yesterday at 1:45 PM', timestamp: 2 },\n    lastUpdate: {\n      label: 'You recently opened this',\n      icon: <OpenRegular />,\n    },\n  },\n  {\n    file: { label: 'Purchase order', icon: <DocumentPdfRegular /> },\n    author: { label: 'Jane Doe', status: 'offline' },\n    lastUpdated: { label: 'Tue at 9:30 AM', timestamp: 1 },\n    lastUpdate: {\n      label: 'You shared this in a Teams chat',\n      icon: <PeopleRegular />,\n    },\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing useTooltipVisibility_unstable Hook in TypeScript\nDESCRIPTION: TypeScript function implementation for the useTooltipVisibility_unstable hook that returns the tooltip visibility context value.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-shared-contexts/library/etc/react-shared-contexts.api.md#2025-04-20_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport function useTooltipVisibility_unstable(): TooltipVisibilityContextValue_unstable;\n```\n\n----------------------------------------\n\nTITLE: Configuring Plot Marker Attributes\nDESCRIPTION: A detailed interface for defining the attributes of plot markers including size, color, gradient, and line properties. This allows for extensive customization of data points in a chart.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/chart-utilities/etc/chart-utilities.api.md#2025-04-20_snippet_32\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface PlotMarker {\n    autocolorscale?: boolean | undefined;\n    cauto?: boolean | undefined;\n    cmax?: number | undefined;\n    cmin?: number | undefined;\n    color?: Color | Color[] | undefined;\n    colorbar?: Partial<ColorBar> | undefined;\n    colors?: Color[] | undefined;\n    colorscale?: ColorScale | undefined;\n    gradient?: {\n        type: 'radial' | 'horizontal' | 'vertical' | 'none';\n        color: Color;\n        typesrc: any;\n        colorsrc: any;\n    } | undefined;\n    line: Partial<ScatterMarkerLine>;\n    maxdisplayed?: number | undefined;\n    opacity: number | number[];\n    pad?: Partial<Padding> | undefined;\n    pattern?: Partial<Pattern>;\n    reversescale?: boolean | undefined;\n    showscale?: boolean | undefined;\n    size: number | number[];\n    sizemax?: number | undefined;\n    sizemin?: number | undefined;\n    sizemode?: 'diameter' | 'area' | undefined;\n    sizeref?: number | undefined;\n    symbol: MarkerSymbol;\n    width?: number | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Run Generator\nDESCRIPTION: Executes the React component generator to create a new component.  The generator will prompt for required parameters if they are not provided on the command line.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/react-component/README.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:react-component\n```\n\n----------------------------------------\n\nTITLE: Property Mapping Table for FluentUI Divider Across Versions\nDESCRIPTION: A markdown table comparing the properties of the Divider/Separator component across FluentUI versions v8, v0, and v9. It shows how properties map or change between versions, including new additions and unsupported features.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-divider/library/docs/MIGRATION.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| v8 `Separator` | v0 `Divider` | v9 `Divider`   |\n| -------------- | ------------ | -------------- |\n| `alignContent` | -            | `alignContent` |\n| -              | -            | `appearance`   |\n| -              | `color`      |                |\n| `children`     | `content`    | `children`     |\n| -              | `fitted`     |                |\n| -              | `important`  |                |\n| -              | -            | `inset`        |\n| -              | `size`       |                |\n| `styles`       | -            |                |\n| `theme`        | -            |                |\n| `vertical`     | `vertical`   | `vertical`     |\n```\n\n----------------------------------------\n\nTITLE: Using Fluent UI Button Component in React\nDESCRIPTION: This example demonstrates how to use the Fluent UI Button component in a React application. It shows a primary button with the text 'Click me' and an onClick event handler.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Styles/FileTypeIconsPage/docs/web/FileTypeIconsResolutions.md#2025-04-20_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Button appearance=\"primary\" onClick={() => console.log('Button clicked')}>\\n  Click me\\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Bumping package versions in FluentUI React Switch\nDESCRIPTION: This code snippet represents a series of patch updates where the versions of dependent packages are bumped. This includes packages such as @fluentui/react-field, @fluentui/react-jsx-runtime, @fluentui/react-label, and @fluentui/react-tabster. Each bump is associated with a pull request.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-switch/library/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n\"- Bump @fluentui/react-field to v9.1.26 ([PR #29129](https://github.com/microsoft/fluentui/pull/29129) by beachball)\n- Bump @fluentui/react-jsx-runtime to v9.0.7 ([PR #29129](https://github.com/microsoft/fluentui/pull/29129) by beachball)\n- Bump @fluentui/react-label to v9.1.34 ([PR #29129](https://github.com/microsoft/fluentui/pull/29129) by beachball)\n- Bump @fluentui/react-tabster to v9.12.9 ([PR #29129](https://github.com/microsoft/fluentui/pull/29129) by beachball)\"\n```\n\n----------------------------------------\n\nTITLE: Defining MarqueeSelection Interfaces in TypeScript\nDESCRIPTION: Interface definitions for MarqueeSelection component in FluentUI, which enables drag-to-select functionality. These interfaces define props, styles, and behavior for selection rectangle functionality.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_148\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IMarqueeSelection {\n}\n\n// @public (undocumented)\nexport interface IMarqueeSelectionProps extends React_2.HTMLAttributes<HTMLDivElement> {\n    className?: string;\n    componentRef?: IRefObject<IMarqueeSelection>;\n    isDraggingConstrainedToRoot?: boolean;\n    isEnabled?: boolean;\n    onShouldStartSelection?: (ev: MouseEvent) => boolean;\n    rootProps?: React_2.HTMLAttributes<HTMLDivElement>;\n    selection: ISelection;\n    styles?: IStyleFunction<IMarqueeSelectionStyleProps, IMarqueeSelectionStyles>;\n    theme?: ITheme;\n}\n\n// @public (undocumented)\nexport interface IMarqueeSelectionStyleProps {\n    // (undocumented)\n    className?: string;\n    // (undocumented)\n    theme: ITheme;\n}\n\n// @public (undocumented)\nexport interface IMarqueeSelectionStyles {\n    // (undocumented)\n    box?: IStyle;\n    // (undocumented)\n    boxFill?: IStyle;\n    // (undocumented)\n    dragMask?: IStyle;\n    // (undocumented)\n    root?: IStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: Current Problematic `as` Prop Usage with Components\nDESCRIPTION: Shows how components can currently accept any React element type in the `as` prop, causing typing complications\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/as-prop.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Button as={Link} /> // renders <Link /> + additional props\n```\n\n----------------------------------------\n\nTITLE: Specifying Storybook Glob Patterns for Story Inclusion\nDESCRIPTION: This JavaScript snippet shows how to configure Storybook to include stories from the react-components/react-tree package. The configuration uses globs to match story files with extensions .stories.mdx and index.stories.ts or .tsx. The snippet does not require any external dependencies other than having Storybook set up.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tree/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\\n  stories: ['../packages/react-components/react-tree/stories/src/**/*.stories.mdx', '../packages/react-components/react-tree/stories/src/**/index.stories.@(ts|tsx)'],\\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Key Down Events with Named Constants - TypeScript\nDESCRIPTION: This snippet demonstrates how to use imported named constants from the '@fluentui/keyboard-keys' package in a React keydown event handler. It shows checking against the 'Enter' key and a sample usage of directly using other character keys. Dependencies include React and the @fluentui/keyboard-keys package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/keyboard-keys/README.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Enter } from '@fluentui/keyboard-keys';\n\nconst onKeyDown = (e: React.KeyboardEvent) => {\n  if (e.key === Enter) {\n    // ...\n  }\n\n  // Unicode characters 'a', '1', '%'...\n  // should be used directly in code\n  if (e.key === 'a') {\n    // ...\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: AnchorButton Configuration Constants and Types\nDESCRIPTION: Defines constants and types for AnchorButton customization, including appearance styles, shapes, sizes, and target options for link behavior.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const AnchorButtonAppearance: {\n    readonly primary: \"primary\";\n    readonly outline: \"outline\";\n    readonly subtle: \"subtle\";\n    readonly transparent: \"transparent\";\n};\n\n// @public\nexport type AnchorButtonAppearance = ValuesOf<typeof AnchorButtonAppearance>;\n\n// @public (undocumented)\nexport const AnchorButtonDefinition: FASTElementDefinition<typeof AnchorButton>;\n\n// @public\nexport const AnchorButtonShape: {\n    readonly circular: \"circular\";\n    readonly rounded: \"rounded\";\n    readonly square: \"square\";\n};\n\n// @public\nexport type AnchorButtonShape = ValuesOf<typeof AnchorButtonShape>;\n\n// @public\nexport const AnchorButtonSize: {\n    readonly small: \"small\";\n    readonly medium: \"medium\";\n    readonly large: \"large\";\n};\n\n// @public\nexport type AnchorButtonSize = ValuesOf<typeof AnchorButtonSize>;\n\n// @public\nexport const AnchorButtonTemplate: ElementViewTemplate<AnchorButton>;\n\n// @public\nexport const AnchorTarget: {\n    readonly _self: \"_self\";\n    readonly _blank: \"_blank\";\n    readonly _parent: \"_parent\";\n    readonly _top: \"_top\";\n};\n\n// @public\nexport type AnchorTarget = ValuesOf<typeof AnchorTarget>;\n```\n\n----------------------------------------\n\nTITLE: Avatar Color Constants Definition in TypeScript\nDESCRIPTION: Constants defining the available color options for Avatar components, including both named colors and semantic colors.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport const AvatarNamedColor: {\n    readonly darkRed: \"dark-red\";\n    readonly cranberry: \"cranberry\";\n    readonly red: \"red\";\n    readonly pumpkin: \"pumpkin\";\n    readonly peach: \"peach\";\n    readonly marigold: \"marigold\";\n    readonly gold: \"gold\";\n    readonly brass: \"brass\";\n    readonly brown: \"brown\";\n    readonly forest: \"forest\";\n    readonly seafoam: \"seafoam\";\n    readonly darkGreen: \"dark-green\";\n    readonly lightTeal: \"light-teal\";\n    readonly teal: \"teal\";\n    readonly steel: \"steel\";\n    readonly blue: \"blue\";\n    readonly royalBlue: \"royal-blue\";\n    readonly cornflower: \"cornflower\";\n    readonly navy: \"navy\";\n    readonly lavender: \"lavender\";\n    readonly purple: \"purple\";\n    readonly grape: \"grape\";\n    readonly lilac: \"lilac\";\n    readonly pink: \"pink\";\n    readonly magenta: \"magenta\";\n    readonly plum: \"plum\";\n    readonly beige: \"beige\";\n    readonly mink: \"mink\";\n    readonly platinum: \"platinum\";\n    readonly anchor: \"anchor\";\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Fluent UI Navigation Item Types\nDESCRIPTION: This set of declarations defines types and components for navigation items, including AppItem and its variants, which are essential for creating interactive UI elements. These types ensure proper integration with the component state and slot system.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-nav-preview/library/etc/react-nav-preview.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const AppItem: ForwardRefComponent<AppItemProps>;\n\n// @public (undocumented)\nexport const appItemClassNames: SlotClassNames<AppItemSlots>;\n\n// @public\nexport type AppItemProps = ComponentProps<AppItemSlots> & {\n    href?: string;\n};\n\n// @public (undocumented)\nexport type AppItemSlots = {\n    root: NonNullable<Slot<ARIAButtonSlotProps<'a'>>>;\n    icon?: Slot<'span'>;\n};\n\n// @public\nexport type AppItemState = ComponentState<AppItemSlots> & {\n    density: NavDensity;\n};\n```\n\n----------------------------------------\n\nTITLE: Example of Composition Approach with Motion Components (Not Recommended)\nDESCRIPTION: Example showing why composition is not the recommended approach for motion overrides. This method introduces issues with state control and doesn't replace the original motion automatically.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/motion-definition-n-apis.md#2025-04-20_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\n// ⚠️ This is not proposed API, it's just an example\n\nimport { Dialog, DialogSurface } from '@fluentui/react-components';\nimport { createPresenceComponent } from '@fluentui/react-motions-preview';\n\nconst FadeSlow = createPresenceComponent(/* --- */);\n\nfunction MyComponent() {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <Dialog open={open}>\n      {/* 1️⃣ `FadeSlow` is a state controller, state can't be controlled by Dialog */}\n      <FadeSlow visible={visible}>\n        {/* 2️⃣ Original motion is still in place */}\n        <DialogSurface>\n          <div>Hello world!</div>\n        </DialogSurface>\n      </FadeSlow>\n    </Dialog>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: useStyles Hook Reference in React\nDESCRIPTION: This provides the reference usage for the `useStyles` hook, highlighting the input parameters. It specifies the display name and options, the options object allows to specify the static class name, map the component props to styles, or enable RTL mode.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/react-bindings/README.md#2025-04-20_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst { classes } = useStyles(\n  displayName: string,\n  options: UseStylesOptions<Props>,\n)\n```\n\n----------------------------------------\n\nTITLE: FluentUI SpinButton Changelog Entry\nDESCRIPTION: Markdown changelog entry detailing version changes, dependency updates, and modifications to the SpinButton component\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-spinbutton/library/CHANGELOG.md#2025-04-20_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n### Changes\n\n- remove MIGRATION.md ([PR #22737](https://github.com/microsoft/fluentui/pull/22737) by seanmonahan@microsoft.com)\n- react-spinbutton: remove \"inputType\" prop ([PR #22652](https://github.com/microsoft/fluentui/pull/22652) by seanmonahan@microsoft.com)\n- Bump @fluentui/keyboard-keys to v9.0.0-rc.5 ([PR #22786](https://github.com/microsoft/fluentui/pull/22786) by beachball)\n- Bump @fluentui/react-input to v9.0.0-beta.8 ([PR #22786](https://github.com/microsoft/fluentui/pull/22786) by beachball)\n- Bump @fluentui/react-theme to v9.0.0-rc.6 ([PR #22786](https://github.com/microsoft/fluentui/pull/22786) by beachball)\n- Bump @fluentui/react-utilities to v9.0.0-rc.7 ([PR #22786](https://github.com/microsoft/fluentui/pull/22786) by beachball)\n- Bump @fluentui/react-label to v9.0.0-beta.11 ([PR #22786](https://github.com/microsoft/fluentui/pull/22786) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Defining Utility Functions for Style Manipulation in TypeScript\nDESCRIPTION: This snippet defines various utility functions for manipulating styles, including keyframes, mergeCss, mergeCssSets, mergeStyles, and mergeStyleSets. These functions are used to combine and process styles in the FluentUI system.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/merge-styles/etc/merge-styles.api.md#2025-04-20_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function keyframes(timeline: IKeyframes): string;\n\nexport const makeShadowConfig: (stylesheetKey: string, inShadow: boolean, window?: Window) => ShadowConfig;\n\nexport function mergeCss(args: StyleArgWithShadow | StyleArgWithShadow[], options?: IStyleOptions): string;\n\nexport function mergeCssSets<TStyleSet>(styleSets: [TStyleSet | Missing_2], options?: IStyleOptions): IProcessedStyleSet<ObjectOnly<TStyleSet>>;\n\nexport function mergeCssSets<TStyleSet1, TStyleSet2>(styleSets: [TStyleSet1 | MissingOrShadowConfig, TStyleSet2 | Missing_2], options?: IStyleOptions): IProcessedStyleSet<ObjectOnly<TStyleSet1> & ObjectOnly<TStyleSet2>>;\n\nexport function mergeStyles(...args: StyleArg[]): string;\n\nexport function mergeStyleSets<TStyleSet>(styleSet: TStyleSet | Missing_2): IProcessedStyleSet<ObjectOnly<TStyleSet>>;\n```\n\n----------------------------------------\n\nTITLE: Configuring PeoplePicker Callout Properties\nDESCRIPTION: This code snippet demonstrates how to configure the `PeoplePicker` component to render its dropdown inline instead of in its own layer. This configuration is particularly useful in mobile environments to improve accessibility for users with touch-based screen readers by preventing clipping issues caused by overflow containers. Setting `doNotLayer` to `true` ensures the dropdown is rendered inline.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-examples/src/react/PeoplePicker/docs/PeoplePickerBestPractices.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\npickerCalloutProps={{ doNotLayer: true }}\n```\n\n----------------------------------------\n\nTITLE: Wrapping theme object with withDebugId (JSX)\nDESCRIPTION: This JSX snippet demonstrates wrapping a theme object with `withDebugId` function. This helps to assign a name to the theme object which appears in the Fluent UI Debug panel.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/docs/src/pages/Debugging.mdx#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { withDebugId } from '@Fluent UI/react-northstar';\n\nconst theme = withDebugId(themeObject, 'themeName');\n```\n\n----------------------------------------\n\nTITLE: Implementing Listbox Component in TypeScript\nDESCRIPTION: Defines a Listbox component with methods for handling selection, options and events\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_36\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class Listbox extends FASTElement {\n    constructor();\n    beforetoggleHandler(e: ToggleEvent): boolean | undefined;\n    clickHandler(e: PointerEvent): boolean | void;\n    connectedCallback(): void;\n    dropdown?: BaseDropdown;\n    elementInternals: ElementInternals;\n    get enabledOptions(): DropdownOption[];\n    handleChange(source: any, propertyName?: string): void;\n    id: string;\n    multiple?: boolean;\n    multipleChanged(prev: boolean | undefined, next: boolean | undefined): void;\n    options: DropdownOption[];\n    optionsChanged(prev: DropdownOption[] | undefined, next: DropdownOption[] | undefined): void;\n    selectedIndex: number;\n    get selectedOptions(): DropdownOption[];\n    selectOption(index?: number): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Bumping FluentUI React Version\nDESCRIPTION: This snippet shows how to bump the version of the @fluentui/react package. The commit hash provides a direct link to the change within the repository. This action is part of maintaining the dependencies for the project.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-docsite-components/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n\"- Bump @fluentui/react to v8.112.4 ([commit](https://github.com/microsoft/fluentui/commit/70d0762fd12eb211f7c1dbe31a23b2fbb73a67c4) by beachball)\"\n```\n\n----------------------------------------\n\nTITLE: Careful Slot Size Control with Avatar - TypeScript\nDESCRIPTION: This component demonstrates the use of context for managing Avatar sizes. A custom component TableAvatar reads context to adapt its size prop, ensuring it fits with the layout it's placed in.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/reusing-avatar-in-components.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst tableAvatarSizeMap = {\n  small: 24,\n  smaller: 20,\n};\n\nexport function TableAvatar: React.FC<AvatarProps>(props) {\n  // recomposed TableAvatar can read TableContext to adapt to its size prop\n  const { size } = useTableContext();\n\n  const state = useAvatar({...props, size: tableAvatarSizeMap[size]});\n  state = useAvatarStyles(props);\n  return renderAvatar(state);\n}\n\n<Table size=\"smaller\">\n  <TableBody>\n    <TableRow>\n      <TableCell>\n        {/* This will be sized automatically */}\n        <TableCellLayout media={<TableAvatar />}>Main content</TableCellLayout>\n      </TableCell>\n    </TableRow>\n  </TableBody>\n</Table>\n```\n\n----------------------------------------\n\nTITLE: Minor Changes Changelog Entry\nDESCRIPTION: Changelog entry documenting minor changes including feature additions and dependency updates\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-teaching-popover/library/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Minor changes\n\n- feat: Ensure all sub components are overridable and enable better string pass through via slots ([PR #30998](https://github.com/microsoft/fluentui/pull/30998) by mifraser@microsoft.com)\n- Bump @fluentui/react-popover to v9.9.4 ([PR #31100](https://github.com/microsoft/fluentui/pull/31100) by beachball)\n- Bump @fluentui/react-button to v9.3.75 ([PR #31100](https://github.com/microsoft/fluentui/pull/31100) by beachball)\n- Bump @fluentui/react-tabster to v9.20.0 ([PR #31100](https://github.com/microsoft/fluentui/pull/31100) by beachball)\n- Bump @fluentui/react-aria to v9.10.4 ([PR #31100](https://github.com/microsoft/fluentui/pull/31100) by beachball)\n```\n\n----------------------------------------\n\nTITLE: DialogBody Props Definition\nDESCRIPTION: Defines the props for the DialogBody component.  It includes ComponentProps from '@fluentui/react-utilities'. It represents the properties that can be passed to the DialogBody component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/etc/react-dialog.api.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport type DialogBodyProps = ComponentProps<DialogBodySlots> & {};\"\n```\n\n----------------------------------------\n\nTITLE: Defining AccordionItem Component and Related Types in TypeScript\nDESCRIPTION: Class definition for the AccordionItem component that extends BaseAccordionItem, with properties for block, marker position, and size. Includes interfaces, constants, templates, and style definitions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-different-release-tags) This symbol has another declaration with a different release tag\n// Warning: (ae-internal-mixed-release-tag) Mixed release tags are not allowed for \"AccordionItem\" because one of its declarations is marked as @internal\n//\n// @public\nexport class AccordionItem extends BaseAccordionItem {\n    block: boolean;\n    markerPosition?: AccordionItemMarkerPosition;\n    size?: AccordionItemSize;\n}\n\n// @internal\nexport interface AccordionItem extends StartEnd {\n}\n\n// @public (undocumented)\nexport const accordionItemDefinition: FASTElementDefinition<typeof AccordionItem>;\n\n// Warning: (ae-missing-release-tag) \"AccordionItemMarkerPosition\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport const AccordionItemMarkerPosition: {\n    readonly start: \"start\";\n    readonly end: \"end\";\n};\n\n// @public\nexport type AccordionItemMarkerPosition = ValuesOf<typeof AccordionItemMarkerPosition>;\n\n// @public\nexport type AccordionItemOptions = StartEndOptions<AccordionItem> & {\n    expandedIcon?: StaticallyComposableHTML<AccordionItem>;\n    collapsedIcon?: StaticallyComposableHTML<AccordionItem>;\n};\n\n// Warning: (ae-missing-release-tag) \"AccordionItemSize\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport const AccordionItemSize: {\n    readonly small: \"small\";\n    readonly medium: \"medium\";\n    readonly large: \"large\";\n    readonly extraLarge: \"extra-large\";\n};\n\n// @public\nexport type AccordionItemSize = ValuesOf<typeof AccordionItemSize>;\n\n// Warning: (ae-missing-release-tag) \"styles\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport const accordionItemStyles: ElementStyles;\n\n// @public\nexport const accordionItemTemplate: ElementViewTemplate<AccordionItem>;\n```\n\n----------------------------------------\n\nTITLE: Configuring AriaLiveAnnouncer in React for FluentUI Status Component\nDESCRIPTION: This snippet provides a link to the documentation for configuring the AriaLiveAnnouncer component in a React application. The AriaLiveAnnouncer should be placed near the top of the React tree to ensure proper functionality of aria-live announcements for the Status component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-message-bar/stories/src/MessageBar/MessageBarDescription.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://react.fluentui.dev/?path=/docs/utilities-aria-live-arialiveannouncer--docs\">AriaLiveAnnouncer</a>\n```\n\n----------------------------------------\n\nTITLE: SpinButton Custom Suffix v9\nDESCRIPTION: Demonstrates how to use a custom suffix with the SpinButton component in Fluent UI v9. It leverages the `displayValue` prop to show a formatted value with a suffix, separating the numeric value from the displayed string.  It uses `value` and `displayValue` state variables.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/SpinButton.stories.mdx#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\nimport { makeStyles, Label, SpinButton } from '@fluentui/react-components';\nimport type { SpinButtonChangeEvent, SpinButtonOnChangeData } from '@fluentui/react-components';\nimport { useId } from '@fluentui/react-utilities';\n\nconst useLayoutStyles = makeStyles({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    maxWidth: '300px',\n\n    '> label': {\n      marginBottom: '5px',\n    },\n  },\n});\n\nconst suffix = 'cm';\nconst getNumericPart = (value: string): number | undefined => {\n  const valueRegex = /^(\\d+(\\.\\d+)?).*/;\n  if (valueRegex.test(value)) {\n    const numericValue = Number(value.replace(valueRegex, '$1'));\n    return isNaN(numericValue) ? undefined : numericValue;\n  }\n  return undefined;\n};\n\nconst SpinButtonV9CustomSuffixBasicExample = () => {\n  const spinButtonId = useId('spinbutton');\n  const layoutStyles = useLayoutStyles();\n\n  const [value, setValue] = React.useState(7);\n  const [displayValue, setDisplayValue] = React.useState(`7 ${suffix}`);\n\n  const onChange = (e: SpinButtonChangeEvent, data: SpinButtonOnChangeData): void => {\n    let newValue;\n    let newDisplayValue;\n    if (data.value !== undefined) {\n      // Value stepped with the buttons or hotkeys\n      newValue = data.value;\n      newDisplayValue = `${data.value} ${suffix}`;\n    } else if (data.displayValue !== undefined) {\n      // Value changed by typing into text input.\n      newValue = getNumericPart(data.displayValue);\n      if (newValue !== undefined) {\n        newDisplayValue = `${newValue} ${suffix}`;\n      }\n    }\n\n    if (newValue !== undefined && newDisplayValue !== undefined) {\n      console.log(`Display value changed to ${newDisplayValue}`);\n      setValue(newValue);\n      setDisplayValue(newDisplayValue);\n    }\n  };\n\n  return (\n    <div className={layoutStyles.root}>\n      <Label htmlFor={spinButtonId}>SpinButton with Custom Suffix</Label>\n      <SpinButton\n        id={spinButtonId}\n        value={value}\n        displayValue={displayValue}\n        step={2}\n        min={0}\n        max={100}\n        onChange={onChange}\n      />\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Calendar Component Usage in JSX\nDESCRIPTION: Demonstrates the basic usage of the Calendar component in a React application.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-calendar-compat/library/README.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Calendar />\n```\n\n----------------------------------------\n\nTITLE: Version Number Header Markdown\nDESCRIPTION: Markdown header showing the version number and release date.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_48\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.0.0-alpha.90](https://github.com/microsoft/fluentui/tree/@fluentui/react-badge_v9.0.0-alpha.90)\n```\n\n----------------------------------------\n\nTITLE: Defining Image Component with Various Display Options in TypeScript\nDESCRIPTION: Defines the Image component class with properties for controlling its display, including block behavior, borders, fit, shadow, and shape options. Each property has a corresponding change handler.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_38\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Image_2 extends FASTElement {\n    block?: boolean;\n    blockChanged(prev: boolean, next: boolean): void;\n    bordered?: boolean;\n    borderedChanged(prev: boolean, next: boolean): void;\n    // @internal\n    elementInternals: ElementInternals;\n    fit?: ImageFit;\n    fitChanged(prev: ImageFit | undefined, next: ImageFit | undefined): void;\n    shadow?: boolean;\n    shadowChanged(prev: boolean, next: boolean): void;\n    shape?: ImageShape;\n    shapeChanged(prev: ImageShape | undefined, next: ImageShape | undefined): void;\n}\nexport { Image_2 as Image }\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.69.0\nDESCRIPTION: This note reflects the version bump of '@fluentui/react' to 8.69.0, a crucial step in maintaining the library's relevance and functionality.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/theming-designer/CHANGELOG.md#2025-04-20_snippet_24\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.69.0 ([PR #23158](https://github.com/microsoft/fluentui/pull/23158) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Fix for Combobox Listbox Labelling in FluentUI React\nDESCRIPTION: Code snippet showing a fix to ensure the combobox listbox is properly labeled by the field label, improving accessibility.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/library/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- fix: ensure that the listbox is labelled by the field label ([PR #34196](https://github.com/microsoft/fluentui/pull/34196) by dmytrokirpa@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Custom JSX Pragma Implementation in TypeScript\nDESCRIPTION: This snippet shows a custom JSX pragma implementation that handles slot components and their overrides.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/slot-children-render-function.md#2025-04-20_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\nfunction jsxFromSlotComponent<Props extends UnknownSlotProps>(\n  component: SlotComponent<Props>,\n  overrides?: Props | null,\n  ...childrenOverride: React.ReactNode[]\n): React.ReactElement<Props> | null {\n  const props = { ...component.defaultProps, ...component.props, ...overrides };\n  const children = normalizeChildren(component.props, component.defaultProps, overrides, ...childrenOverride);\n  const { as: asProp, ...propsWithoutAs } = props;\n\n  const elementType =\n    component.componentType === undefined || typeof component.componentType === 'string'\n      ? asProp ?? component.componentType ?? 'div'\n      : component.componentType;\n\n  // on the case of an External property of children as render then this overrides even the override children.\n  if (typeof component.props.children === 'function') {\n    const render = component.props.children;\n    return React.createElement(\n      React.Fragment,\n      {},\n      // children will not be lost in this case!\n      render(elementType, { ...propsWithoutAs, children }),\n    ) as React.ReactElement<Props>;\n  }\n\n  const shouldOmitAsProp = typeof elementType === 'string' && asProp;\n\n  return React.createElement<Props>(elementType, shouldOmitAsProp ? propsWithoutAs : props, children);\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Babel Preset Function in TypeScript\nDESCRIPTION: The code snippet defines and exports a function named 'preset' that returns a 'PluginItem'. The functionality is meant for use in Babel configurations, typically as a plugin or preset. The function is exported by default, suggesting it is the primary export of the module. The code requires the '@babel/core' package for types and optionally depends on Babel's configuration context.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/babel-preset-global-context/etc/babel-preset-global-context.api.md#2025-04-20_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\nimport type { PluginItem } from '@babel/core';\n\n// @public (undocumented)\nfunction preset(): PluginItem;\nexport default preset;\n\n// (No @packageDocumentation comment for this package)\n\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing a Branch in Git\nDESCRIPTION: Provides instructions to create a new branch from a local repository using Git CLI. Dependencies include having Git installed and a cloned repository. The process encompasses checking out to the master, syncing with the upstream, and creating a new branch. Suitable for developers working on code changes with minimal risk of naming conflicts.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/dev-workflow.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout master\ngit pull upstream master // pulls from the main repo\ngit push // syncs your fork's master and your local master\ngit checkout -b my-branch-name // creates your branch\n```\n\n----------------------------------------\n\nTITLE: Defining ESLint Plugin for FluentUI React Components in TypeScript\nDESCRIPTION: This code snippet defines an ESLint plugin for FluentUI React components. It includes metadata, recommended configuration, and a rule for preferring FluentUI v9 over v8. The plugin is designed to assist in migrating from FluentUI v8 to v9.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/eslint-plugin-react-components/etc/eslint-plugin-react-components.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RuleListener } from '@typescript-eslint/utils/dist/ts-eslint';\nimport { RuleModule } from '@typescript-eslint/utils/dist/ts-eslint';\n\n// @public (undocumented)\nexport const plugin: {\n    meta: {\n        name: string;\n        version: string;\n    };\n    configs: {\n        recommended: {\n            plugins: string[];\n            rules: {};\n        };\n    };\n    rules: {\n        \"prefer-fluentui-v9\": RuleModule<\"replaceFluent8With9\" | \"replaceIconWithJsx\" | \"replaceStackWithFlex\" | \"replaceFocusZoneWithTabster\", {}[], unknown, RuleListener>;\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories Paths\nDESCRIPTION: This JavaScript snippet demonstrates how to configure paths for Storybook to include stories from the react-charts package. It specifies glob patterns to locate .stories.mdx and .stories.ts/.tsx files within the directory structure. There are no additional dependencies, and the key parameter is the 'stories' array which defines the paths to story files.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charts/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/charts/react-charts/stories/src/**/*.stories.mdx', '../packages/charts/react-charts/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the DummyInputObserver Interface\nDESCRIPTION: This interface describes an observer for dummy input elements in the DOM, providing methods to add and remove elements, handle updates, and manage their lifecycle. This is used to manage non-standard focusable elements, enhancing the flexibility of input management.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tabster/etc/react-tabster.api.md#2025-04-20_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\ninterface DummyInputObserver {\n    // (undocumented)\n    add(dummy: HTMLElement, callback: () => void): void;\n    // (undocumented)\n    dispose(): void;\n    // (undocumented)\n    domChanged?(parent: HTMLElement): void;\n    // (undocumented)\n    remove(dummy: HTMLElement): void;\n    // (undocumented)\n    updatePositions(compute: (scrollTopLeftCache: Map<HTMLElement, {\n        scrollTop: number;\n        scrollLeft: number;\n    } | null>) => () => void): void;\n}\n```\n\n----------------------------------------\n\nTITLE: DialogTrigger State Definition\nDESCRIPTION: Defines the state for the DialogTrigger component, containing React elements for children.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/etc/react-dialog.api.md#2025-04-20_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport type DialogTriggerState = {\n    children: React_2.ReactElement | null;\n};\"\n```\n\n----------------------------------------\n\nTITLE: Custom Style Hooks Context Value in TS\nDESCRIPTION: Configuration file defining custom style hooks for the CustomStyleHooksProvider.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/AdvancedStylingTechniques.stories.mdx#2025-04-20_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { type CustomStyleHooksContextValue } from '@fluentui/react-components';\nimport { useFancyButtonStyles } from './useFancyButtonStyles';\n\nexport const FANCY_CUSTOM_STYLE_HOOKS: CustomStyleHooksContextValue = {\n  useButtonStyles_unstable: useFancyButtonStyles,\n  // ... more component styles as needed for your theme.\n};\n```\n\n----------------------------------------\n\nTITLE: Package Dependency Management in React Rating\nDESCRIPTION: Tracks version bumps for related FluentUI packages including jsx-runtime, tabster, and utilities, ensuring consistent dependency management\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-rating/library/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"dependencies\": {\n  \"@fluentui/react-jsx-runtime\": \"v9.0.54\",\n  \"@fluentui/react-tabster\": \"v9.24.5\",\n  \"@fluentui/react-utilities\": \"v9.19.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting AnnounceProvider in TypeScript\nDESCRIPTION: Exports the AnnounceProvider, which is a React Provider component for the AnnounceContextValue. It allows components to access and use the announce functionality throughout the component tree.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-shared-contexts/library/etc/react-shared-contexts.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nconst AnnounceProvider: React_2.Provider<AnnounceContextValue | undefined>;\nexport { AnnounceProvider }\nexport { AnnounceProvider as AnnounceProvider_unstable }\n```\n\n----------------------------------------\n\nTITLE: Overriding Context Values - TypeScript\nDESCRIPTION: An example showing how to override the context value conditionally. Emphasizes the necessity to re-compute the context value on state changes to ensure proper re-rendering of consumers.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/context-values.md#2025-04-20_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n// 🛠 In this example I would like to override `size` based on a condition\nfunction useSuperBazState(props) {\n  const state = useBazState(props);\n\n  // ❌ is broken because `state.contextValue.size` remains the same\n  if (props.reallyBig) {\n    state.size = 'xxl';\n  }\n\n  // ❌ is broken because `state.contextValue` is a stable object and will not trigger\n  //     a rerender\n  if (props.reallyBig) {\n    state.size = 'xxl';\n    state.contextValue.size = 'xxl';\n  }\n\n  // ✅ only this solution will work as expected\n  state.size = 'xxl';\n  state.contextValue = React.useMemo(\n    () => ({\n      ...contextValue,\n      ...(props.reallyBig && { size: 'xxl' }),\n    }),\n    [state.contextValue, props.reallyBig],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using CSS Variables in Motion Keyframes\nDESCRIPTION: This code shows how CSS variables can be used directly within the `keyframes` array when defining motion animations. The `tokens.colorBrandBackground` variable is used as a value for the `backgroundColor` property, demonstrating integration with a theming system using CSS variables.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/motion-definition-n-apis.md#2025-04-20_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { tokens } from '@fluentui/react-components';\n\nconst flash: AtomMotion = {\n  keyframes: [\n    { backgroundColor: 'white' },\n    // 💡`tokens.colorBrandBackground` is a CSS variable i.e. `var(--colorBrandBackground)`\n    { backgroundColor: tokens.colorBrandBackground },\n    { backgroundColor: 'white' },\n  ],\n\n  duration: 500,\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ARIA Attributes for Navigating Dropdown Options in Markdown\nDESCRIPTION: This snippet defines the ARIA attributes for navigating between options in an open dropdown. It specifies the roles and states for the listbox and an unselected option.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/stories/src/Dropdown/DropdownAccessibility.stories.mdx#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Name       | Role    | States and properties   |\n| ---------- | ------- | ----------------------- |\n| (2) -      | listbox | -                       |\n| (3) Banana | option  | `aria-selected=\"false\"` |\n```\n\n----------------------------------------\n\nTITLE: Creating Gauge Interface for Visualization\nDESCRIPTION: Comprehensive interface defining gauge visualization parameters, including axis, bar, color, border, shape, and threshold configurations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/chart-utilities/etc/chart-utilities.api.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Gauge {\n    axis: Partial<Axis>;\n    bar: Partial<GaugeBar>;\n    bgcolor: Color;\n    bordercolor: Color;\n    borderwidth: number;\n    shape: 'angular' | 'bullet';\n    steps: Array<{\n        range: number[];\n        color: Color;\n    }>;\n    threshold: Partial<Threshold>;\n}\n```\n\n----------------------------------------\n\nTITLE: Utilizing Alias Tokens in Fluent UI React Components\nDESCRIPTION: Demonstrates how Fluent UI React components directly use alias tokens for styling. This snippet illustrates the coupling of component styles with alias tokens, which results in theme-level changes affecting multiple components. Dependencies include the Fluent UI React library and appropriate theme configurations. Input parameters include specific token names for styling, and the output is the styled component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/extended-design-tokens.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// useButtonStyles.styles.ts\nconst useRootBaseClassName = makeStyles({\n  ...\n  backgroundColor: tokens.colorNeutralBackground1,\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing text truncation in FluentUI v9\nDESCRIPTION: Example showing how to replace the truncated property from v0 with the new truncate property and required configuration in v9.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-text/library/docs/MIGRATION.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Text block truncate wrap={false}>\n  Not wrapped\n</Text>\n```\n\n----------------------------------------\n\nTITLE: Starting Storybook for DatePicker - Shell\nDESCRIPTION: This shell command is used to initiate the Storybook environment locally for the DatePicker component. It's helpful for developing and testing UI components in isolation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-datepicker-compat/library/README.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn workspace @fluentui/react-datepicker-compat start\n```\n\n----------------------------------------\n\nTITLE: Version Update Changelog Entry\nDESCRIPTION: Changelog entry showing version updates and dependency bumps for @fluentui/react-drawer package\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-drawer/library/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patches\n\n- Bump @fluentui/react-dialog to v9.9.14 ([PR #30740](https://github.com/microsoft/fluentui/pull/30740) by beachball)\n- Bump @fluentui/react-jsx-runtime to v9.0.33 ([PR #30740](https://github.com/microsoft/fluentui/pull/30740) by beachball)\n- Bump @fluentui/react-motion-preview to v0.5.16 ([PR #30740](https://github.com/microsoft/fluentui/pull/30740) by beachball)\n- Bump @fluentui/react-shared-contexts to v9.15.1 ([PR #30740](https://github.com/microsoft/fluentui/pull/30740) by beachball)\n- Bump @fluentui/react-tabster to v9.19.4 ([PR #30740](https://github.com/microsoft/fluentui/pull/30740) by beachball)\n- Bump @fluentui/react-theme to v9.1.18 ([PR #30740](https://github.com/microsoft/fluentui/pull/30740) by beachball)\n- Bump @fluentui/react-utilities to v9.18.4 ([PR #30740](https://github.com/microsoft/fluentui/pull/30740) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Using Z-Index Map in Styles (Discarded)\nDESCRIPTION: This code snippet shows how to use the z-index map (from the discarded option) in component styles. By importing the `zIndexes` object and accessing the desired layer, components can consistently apply z-index values. This option was rejected due to the inability of partners to override the values.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/z-index-handling.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n\"// Fluent/partner code\\n\\nimport { zIndexes } from '@fluentui/theme';\\n\\nconst styles = {\\n  root: {\\n    zIndex: zIndexes.overlay,\\n  },\\n};\"\n```\n\n----------------------------------------\n\nTITLE: Using useRefEffect Hook in a React Component\nDESCRIPTION: Demonstrates how to use the `useRefEffect` hook in a React component to observe the size of a div element using a ResizeObserver. The hook's callback is used to create and connect the ResizeObserver, and the returned cleanup function disconnects the observer when the component unmounts.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-hooks/README.md#2025-04-20_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useRefEffect } from '@fluentui/react-hooks';\n\nconst MyComponent = () => {\n  const myDivRef = useRefEffect<HTMLElement>(myDiv => {\n    const observer = new ResizeObserver(entries => {\n      console.log(`myDiv is ${entries[0].contentRect.width} px wide`);\n    });\n    observer.observe(myDiv);\n\n    // Return a function to clean up the ResizeObserver when the ref is unmounted\n    return () => observer.disconnect();\n  });\n\n  return <div ref={myDivRef} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Stack Item Props Interface Definition in TypeScript\nDESCRIPTION: Comprehensive interface for StackItem component props, including flex properties like align, basis, grow, shrink, and order. Also includes HTML attributes and styling options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_179\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface IStackItemProps extends IStackItemSlots, IStyleableComponentProps<IStackItemProps, IStackItemTokens, IStackItemStyles>, React_2.HTMLAttributes<HTMLElement> {\n    align?: 'auto' | 'stretch' | 'baseline' | 'start' | 'center' | 'end';\n    basis?: React_2.CSSProperties['flexBasis'];\n    // (undocumented)\n    children?: React_2.ReactNode;\n    className?: string;\n    disableShrink?: boolean;\n    grow?: boolean | number | 'inherit' | 'initial' | 'unset';\n    order?: number | string;\n    shrink?: boolean | number | 'inherit' | 'initial' | 'unset';\n    verticalFill?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Structure for Alert Dialog in FluentUI\nDESCRIPTION: This snippet shows the expected HTML output for an alert dialog in FluentUI, including ARIA attributes and class names for accessibility and styling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/docs/Spec.md#2025-04-20_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<button aria-haspopup=\"true\" class=\"fui-button\">Open Dialog</button>\n<!-- ... portal ... -->\n<div aria-hidden=\"true\" class=\"fui-dialog-backdrop\"></div>\n<div\n  aria-describedby=\"fui-dialog-body-id\"\n  aria-labelledby=\"fui-dialog-title-id\"\n  aria-modal=\"true\"\n  role=\"alertdialog\"\n  class=\"fui-dialog-content\"\n>\n  <div id=\"fui-dialog-title-id\" class=\"fui-dialog-title\">\n    <span>Title</span>\n    <!-- action -->\n  </div>\n  <div id=\"fui-dialog-body-id\" class=\"fui-dialog-body\">This is going to be inside the dialog</div>\n  <div class=\"fui-dialog-actions\">\n    <button class=\"fui-button\">Close</button>\n    <button class=\"fui-button\">Action</button>\n  </div>\n</div>\n<!-- ... portal ... -->\n```\n\n----------------------------------------\n\nTITLE: Enabling Tabster keyboarding support in shadow DOM\nDESCRIPTION: Shows how to enable Tabster keyboarding support when using Fluent React components in shadow DOM. This is necessary for proper keyboard navigation across shadow DOM boundaries.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/WebComponentsInterop/UsingFluentReactWithWebComponents.stories.mdx#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useShadowDOMSupport } from '@fluentui-contrib/pierce-dom';\nimport { root } from '@fluentui-contrib/react-shadow';\nimport { createCSSStyleSheetFromTheme, ThemelessFluentProvider } from '@fluentui-contrib/react-themeless-provider';\nimport { webLightTheme, Button } from '@fluentui/react-components';\n\nconst themeSheet = createCSSStyleSheetFromTheme(':root', webLightTheme);\ndocument.adoptedStyleSheets = [...document.adoptedStyleSheets, themeSheet];\n\nconst AppComponent = () => {\n  // This must be called _before_ you render any Fluent React controls\n  useShadowDOMSupport();\n  <ThemelessFluentProvider>\n    {/* This is the shadow root */}\n    <root.div>\n      <Button>First Button</Button>\n      <Button>Second Button</Button>\n    </root.div>\n  </ThemelessFluentProvider>;\n};\n```\n\n----------------------------------------\n\nTITLE: Avoiding Inline Theme Prop Definition in React\nDESCRIPTION: This snippet emphasizes the importance of not defining the 'theme' prop inline when using the ThemeProvider component in React. Instead, it suggests using a file-scope constant, React.useMemo, or a class member to store the theme value for improved performance, preventing unwanted mutations and style recalculations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-examples/src/react/ThemeProvider/docs/ThemeProviderBestPractices.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Avoid inline definition: \n// <ThemeProvider theme={{ palette: { themePrimary: 'red' }}}> \n// Use:\nconst theme = { palette: { themePrimary: 'red' }}; // or use React.useMemo\n// <ThemeProvider theme={theme}>\n```\n\n----------------------------------------\n\nTITLE: Using motion and className Props for Motion Overrides in React\nDESCRIPTION: This example shows how to use the motion and className props to apply motion overrides in a React component. It demonstrates lifting the state controller up in the React tree to manage the motion state, but notes potential drawbacks of this approach.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/motion-definition-n-apis.md#2025-04-20_snippet_34\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeStyles, Drawer } from '@fluentui/react-components';\nimport { useMotion } from '@fluentui/react-motion-preview';\n\nconst useClasses = makeStyles({\n  /* some CSS */\n});\n\nfunction App() {\n  const classes = useClasses();\n\n  const [visible, setVisible] = useState(false);\n  const motion = useMotion(visible);\n\n  const className = mergeClasses(classes.root, classes[motion.state] /* simplied example */);\n\n  return (\n    <>\n      <Drawer className={className} open={motion} />\n      {/* other components */}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Toolbar in FluentUI v9\nDESCRIPTION: Example of a controlled Toolbar implementation in FluentUI v9 using React useState hook to manage checked values and handle state changes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Toolbar.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  Toolbar,\n  ToolbarToggleButton,\n  ToolbarDivider,\n  ToolbarButton\n} from '@fluentui/react-components';\n\n\n\nconst Component = () => {\n  const [checkedValues, setCheckedValues] = React.useState<Record<string, string[]>>({\n    textOptions: ['bold', 'italic'],\n  });\n  const onChange: ToolbarProps['onCheckedValueChange'] = (e, { name, checkedItems }) => {\n    setCheckedValues(s => {\n      return s ? { ...s, [name]: checkedItems } : { [name]: checkedItems };\n    });\n  };\n\n  return (\n    <Toolbar checkedValues={checkedValues} onCheckedValueChange={onChange}>\n      <ToolbarToggleButton aria-label=\"Bold\" icon={<TextBold24Regular />} name=\"textOptions\" value=\"bold\" />\n      <ToolbarToggleButton aria-label=\"Italic\" icon={<TextItalic24Regular />} name=\"textOptions\" value=\"italic\" />\n      <ToolbarToggleButton\n        aria-label=\"Underline\"\n        icon={<TextUnderline24Regular />}\n        name=\"textOptions\"\n        value=\"underline\"\n      />\n    </Toolbar>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Before Conversion Example - JSON Dependencies\nDESCRIPTION: Example showing package.json dependencies before running the RC caret converter, with pinned version number.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/rc-caret/README.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@fluentui/react-button\": \"9.0.0-rc.1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Trigger Behavior with disableButtonEnhancement Property in TypeScript\nDESCRIPTION: This code snippet demonstrates using the `disableButtonEnhancement` property to control ARIA enhancement functionalities in the `Trigger` component. The `Trigger` API provides a way to avoid automatic ARIA property additions, deferring to the user to handle button-like behaviors.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/triggers-and-multiple-layers-of-button-handling.md#2025-04-20_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n<Trigger>\n  <Button>Trigger something</Button>\n</Trigger>\n<Trigger>\n  <div>Trigger something</div>\n</Trigger>\n<Trigger>\n  <button>Trigger something</button>\n</Trigger>\n\n<Trigger disableButtonEnhancement>\n  <Button>Trigger something</Button>\n</Trigger>\n<Trigger disableButtonEnhancement>\n  <div>Trigger something</div>\n</Trigger>\n<Trigger disableButtonEnhancement>\n  <button>Trigger something</button>\n</Trigger>\n```\n\n----------------------------------------\n\nTITLE: Result of Build-time Style Compilation with Griffel\nDESCRIPTION: Demonstrates the transformed output after build-time optimization. The makeStyles call is replaced with an optimized __styles function that contains pre-computed class names and CSS rules.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/BuildTimeStyles.stories.mdx#2025-04-20_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst useStyles = __styles(\n  {\n    root: {\n      mc9l5x: 'f22iagw',\n      uwmqm3: ['f10xn8zz', 'f136y8j8'],\n    },\n  },\n  {\n    d: [\n      '.f22iagw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}',\n      '.f10xn8zz{padding-left:1px;}',\n      '.f136y8j8{padding-right:1px;}',\n    ],\n  },\n);\n\nfunction Component() {\n  const classes = useStyles();\n  return <div className={classes.root} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Image Fade-in Animation with makeStyles in Fluent UI\nDESCRIPTION: This example provides a migration guide where shouldFadeIn is replaced by using make-styles for animation and global onLoad events to detect image loading state to implement fade-in animation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-image/library/docs/MIGRATION.md#2025-04-20_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { Image } from '@fluentui/react-image';\nimport { makeStyles } from '@griffel/react';\n\nconst useStyles = makeStyles(theme => ({\n  fadeIn400: {\n    animationName: {\n      from : {\n        opacity: 0,\n      },\n      to: {\n        opacity: 1,\n      }\n    },\n    animationIterationCount: 'infinite',\n    animationDuration: '0.367s',\n  },\n})\n\nconst MyComponent = () => {\n    const [isLoaded, setLoaded] = useState(false);\n    const styles = useStyles()\n\n    return <Image src=\"example.jpg\" onLoad={()=> setLoaded(true)} className={!isLoaded? styles.fadeIn400 : ''} />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Slot Overrides in TypeScript\nDESCRIPTION: Demonstrates how to implement slot overrides in Fluent UI components to ensure that certain properties, specifically children, take precedence over others. This pattern is used to allow slots to act as wrappers, managing the content rendered within them.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/slot-children-render-function.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// renderAccordionHeader\n\n<slots.root {...slotProps.root}>\n  <slots.button {...slotProps.button}>\n    {state.expandIconPosition === 'start' && <slots.expandIcon {...slotProps.expandIcon} />}\n    {slots.icon && <slots.icon {...slotProps.icon} />}\n    {slotProps.root.children}\n    {state.expandIconPosition === 'end' && <slots.expandIcon {...slotProps.expandIcon} />}\n  </slots.button>\n</slots.root>\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-docsite-components to v8.7.30\nDESCRIPTION: This patch updates '@fluentui/react-docsite-components' to version 8.7.30, improving documentation components for the Fluent UI framework. The change was also made via a pull request by 'beachball'.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/theming-designer/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react-docsite-components to v8.7.30 ([PR #23551](https://github.com/microsoft/fluentui/pull/23551) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Bumping FluentUI React and Monaco Editor with PR\nDESCRIPTION: This snippet shows how to bump the version of both @fluentui/react and @fluentui/react-monaco-editor packages in a single pull request. The pull request number provides a direct link to the changes within the repository. This action is part of maintaining the dependencies for the project.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-docsite-components/CHANGELOG.md#2025-04-20_snippet_24\n\nLANGUAGE: text\nCODE:\n```\n\"- Bump @fluentui/react to v8.111.2 ([PR #29014](https://github.com/microsoft/fluentui/pull/29014) by beachball)\",\n  \"- Bump @fluentui/react-monaco-editor to v1.7.124 ([PR #29014](https://github.com/microsoft/fluentui/pull/29014) by beachball)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Controls Pane\nDESCRIPTION: This JavaScript snippet configures the Storybook preview.js file to disable the controls pane by default for all stories, except for the `Docs` view and a specific story like `Default/Playground`. The configuration enhances user experience by reducing clutter and focusing controls where necessary. No external dependencies are required beyond Storybook.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/authoring-stories.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const parameters = {\n  // disable control pane/addon for all stories except `Docs` view\n  controls: {\n    disable: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining DocumentCard Image Component Interfaces\nDESCRIPTION: TypeScript interface definitions for DocumentCardImage component, its props, style props, and styles. This component displays images within a DocumentCard.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_97\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IDocumentCardImage {\n}\n\n// @public (undocumented)\nexport interface IDocumentCardImageProps extends IBaseProps<{}> {\n    className?: string;\n    componentRef?: IRefObject<IDocumentCardImage>;\n    height?: number;\n    iconProps?: IIconProps;\n    imageFit?: ImageFit;\n    imageSrc?: string;\n    styles?: IStyleFunctionOrObject<IDocumentCardImageStyleProps, IDocumentCardImageStyles>;\n    theme?: ITheme;\n    width?: number;\n}\n\n// @public (undocumented)\nexport interface IDocumentCardImageStyleProps extends IDocumentCardImageProps {\n}\n\n// @public (undocumented)\nexport interface IDocumentCardImageStyles {\n    // (undocumented)\n    centeredIcon: IStyle;\n    // (undocumented)\n    centeredIconWrapper: IStyle;\n    // (undocumented)\n    cornerIcon: IStyle;\n    // (undocumented)\n    root: IStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Fluent Icons Font Usage\nDESCRIPTION: This snippet demonstrates how to set up a webpack configuration to use Fluent icons as font files in an application. It includes rules for treating font files as assets, resolving the font implementation, and using the FluentUIReactIconsFontSubsettingPlugin for optimization.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Icons/IconsUsage.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\nconst {\n  default: FluentUIReactIconsFontSubsettingPlugin,\n} = require('@fluentui/react-icons-font-subsetting-webpack-plugin');\n\nmodule.exports = {\n  module: {\n    rules: [\n      // Treat the font files as webpack assets\n      {\n        test: /\\.(ttf|woff2?)$/,\n        type: 'asset',\n      },\n    ],\n  },\n  resolve: {\n    // Include 'fluentIconFont' to use the font implementation of the Fluent icons\n    conditionNames: ['fluentIconFont', 'import'],\n  },\n  plugins: [\n    // Include this plugin\n    new FluentUIReactIconsFontSubsettingPlugin(),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: chore: Replace npm scripts with nx inferred tasks\nDESCRIPTION: This code snippet is a chore operation that replaces npm-scripts and just-scripts with nx inferred tasks. This kind of refactoring improves the build process and development workflow by standardizing task execution.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-slider/library/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n\"chore: replace npm-scripts and just-scrtips with nx inferred tasks ([PR #33074](https://github.com/microsoft/fluentui/pull/33074) by martinhochel@microsoft.com)\"\n```\n\n----------------------------------------\n\nTITLE: Hiding Internal Stories with CSS - TypeScript\nDESCRIPTION: This snippet demonstrates how to use CSS to hide internal stories from the sidebar and documentation page of Storybook. It uses a specific attribute selector for the visibility control.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/authoring-stories.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// CSS to hide internal stories\n[id*='internal'] {\n  display: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Meta Component for Theme Colors in JSX\nDESCRIPTION: This JSX snippet sets up the Storybook Meta component, specifying the title for the documentation page as 'Theme/Colors'. It's crucial for organizing the Storybook structure.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-theme/stories/src/Theme/colors/index.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Meta title=\"Theme/Colors\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Axis Formatters for Heatmap in JavaScript\nDESCRIPTION: This snippet shows how to use different formatters for various axis types in a heatmap chart. It includes formatters for date, numeric, and string axes for both x and y directions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-examples/src/react-charting/HeatMapChart/docs/HeatMapChartBestPractices.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  xAxisDateFormatString: 'MM/dd/yyyy',\n  yAxisDateFormatString: 'MM/dd/yyyy',\n  xAxisNumberFormatString: '0.0',\n  yAxisNumberFormatString: '0.0',\n  xAxisStringFormatter: (value) => value.toUpperCase(),\n  yAxisStringFormatter: (value) => value.toLowerCase()\n};\n```\n\n----------------------------------------\n\nTITLE: Chart Data Point Interface\nDESCRIPTION: Defines the structure for a single data point in a chart. It includes properties for callout accessibility data, color, data value, horizontal bar chart data, legend text, click handler, placeholder status, and callout data for the X and Y axes. These properties enable rich customization and interactivity for individual data points.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charts/library/etc/react-charts.api.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport interface ChartDataPoint {\n    callOutAccessibilityData?: AccessibilityProps;\n    color?: string;\n    data?: number;\n    horizontalBarChartdata?: HorizontalDataPoint;\n    legend?: string;\n    onClick?: VoidFunction;\n    placeHolder?: boolean;\n    xAxisCalloutData?: string;\n    yAxisCalloutData?: string;\n}\"\n```\n\n----------------------------------------\n\nTITLE: Creating Grid Layout Styles with Fluent UI\nDESCRIPTION: This code snippet demonstrates setting up styles for a grid layout media object using Fluent UI. The grid layout is defined with grid-auto-flow set to columns, allowing media to be displayed to the left of the text. This setup reduces DOM layers compared to a flex layout. Dependencies involve basic styling through @fluentui/react-components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/recipes/src/recipes/media-object/MediaObject.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst useStyles = makeStyles({\n  parent: {\n    display: 'grid',\n    gridAutoFlow: 'column',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Version 9.0.0-alpha.63 Changelog Entry\nDESCRIPTION: Changelog entry showing bump of @fluentui/babel-make-styles dependency\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-button/library/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.0.0-alpha.63](https://github.com/microsoft/fluentui/tree/@fluentui/react-button_v9.0.0-alpha.63)\n\nThu, 22 Jul 2021 07:36:55 GMT\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-button_v9.0.0-alpha.62..@fluentui/react-button_v9.0.0-alpha.63)\n\n### Changes\n\n- Bump @fluentui/babel-make-styles to v9.0.0-alpha.29 ([PR #19038](https://github.com/microsoft/fluentui/pull/19038) by lingfan.gao@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Using ContentWrapper Prop in ItemLayout (After)\nDESCRIPTION: Example of using the contentWrapper slot to pass props to wrapper element in ItemLayout.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/ItemLayout.stories.mdx#2025-04-20_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ItemLayout } from '@fluentui/react-migration-v0-v9';\nconst Component = () => <ItemLayout contentWrapper={{ id: 'content' }}>hi</ItemLayout>;\n```\n\n----------------------------------------\n\nTITLE: Defining clamp() Internal Utility Function in TypeScript\nDESCRIPTION: Declares an internal utility function that clamps a numeric value between a minimum and maximum. It takes three number parameters and returns a number.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-utilities/etc/react-utilities.api.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const clamp: (value: number, min: number, max: number) => number;\n```\n\n----------------------------------------\n\nTITLE: Implementing isConformant in Component Tests\nDESCRIPTION: Shows how to use the isConformant function within a component's test file. This example demonstrates configuring the test for a 'Foo' component, including specifying the component, display name, and any tests that should be disabled.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-conformance/README.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { isConformant } from '../../common/isConformant';\n\ndescribe('Foo', () => {\n  isConformant({\n    Component: Foo,\n    displayName: 'Foo',\n    disabledTests: [],\n    // 👆 For tests that don't fit the guidelines of your component you can disable them.\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Selectable Menu Item Props - TypeScript\nDESCRIPTION: This snippet defines the props for selectable menu items in TypeScript, including properties for name, value, and a disabled state.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/library/docs/Spec.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// Props for selecatble menu items\nexport type MenuItemSelectableProps = React.HTMLAttributes<HTMLElement> & {\n  /**\n   * Follows input convention\n   * https://www.w3schools.com/jsref/prop_checkbox_name.asp\n   */\n  name: string;\n\n  /**\n   * Follows input convention\n   * https://www.w3schools.com/jsref/prop_checkbox_value.asp\n   */\n  value: string;\n\n  /**\n   * Whether the selectable item is disabled\n   */\n  disabled?: boolean;\n};\n\nexport type MenuItemCheckboxProps = ComponentProps &\n  React.HTMLAttributes<HTMLElement> &\n  MenuItemProps &\n  MenuItemSelectableProps & {\n    /**\n     * Slot for the checkmark indicator\n     */\n    checkmark?: ShorthandProps<React.HTMLAttributes<HTMLElement>>;\n  };\n\nexport type MenuItemRadioProps = ComponentProps &\n  React.HTMLAttributes<HTMLElement> &\n  MenuItemProps &\n  MenuItemSelectableProps & {\n    checkmark?: ShorthandProps<React.HTMLAttributes<HTMLElement>>;\n  };\n```\n\n----------------------------------------\n\nTITLE: Dynamic Placement in Grid Layout with Fluent UI\nDESCRIPTION: This snippet details an optional approach to dynamically place media and text using grid-template-columns in a grid layout with Fluent UI. It specifies template columns and adjusts media and text start and end positions for flexible content alignment, facilitating complex layouts. Dependencies are consistent with previous Fluent UI grid setups.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/recipes/src/recipes/media-object/MediaObject.stories.mdx#2025-04-20_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst useStyles = makeStyles({\n  parent: {\n    display: 'grid',\n    gridTemplateColumns: 'max-content [middle] auto',\n  },\n});\n```\n\nLANGUAGE: jsx\nCODE:\n```\nconst useStyles = makeStyles({\n  // parent styles\n  media: {\n    gridColumnEnd: 'middle',\n  },\n  text: {\n    gridColumnStart: 'middle',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Triage Bot GH Workflow in YAML\nDESCRIPTION: This YAML code sets up a GitHub Actions workflow that activates when issues are opened. It runs a JavaScript script, defined in the repository, using the configuration from the JSON file to automatically label and assign issues.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/scripts/triage-bot/README.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Triage Bot\non:\n  issues:\n    types:\n      - opened\n\njobs:\n  triage-issue-manual:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/github-script@v7\n        with:\n          script: |\n            const config = require('./.github/triage-bot.config.json');\n            const run = require('./scripts/triage-bot');\n            await run({github,context,core,config});\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Version 9.0.0-alpha.88\nDESCRIPTION: Release entry documenting dependency updates and version bumps for the react-image component\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-image/library/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.0.0-alpha.88](https://github.com/microsoft/fluentui/tree/@fluentui/react-image_v9.0.0-alpha.88)\n\nFri, 01 Oct 2021 14:13:08 GMT\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-image_v9.0.0-alpha.86..@fluentui/react-image_v9.0.0-alpha.88)\n\n### Changes\n\n- Bump v9 prerelease versions to rerelease\n- Bump @fluentui/react-make-styles to v9.0.0-alpha.76\n- Bump @fluentui/react-utilities to v9.0.0-alpha.55\n- Bump @fluentui/babel-make-styles to v9.0.0-alpha.58\n- Bump @fluentui/jest-serializer-make-styles to v9.0.0-alpha.51\n- Bump @fluentui/react-conformance-make-styles to v9.0.0-alpha.20\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Theme with Font Customizations in Fluent UI (TSX)\nDESCRIPTION: This code snippet shows how to create a custom theme in Fluent UI with font customizations. It sets a default font style for all variants and specifies custom font sizes and weights for small, medium, large, and extra-large text.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Styles/TypographyPage/docs/web/TypographyCustomization.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createTheme } from '@fluentui/react';\n\nconst appTheme = createTheme({\n  defaultFontStyle: { fontFamily: 'Monaco, Menlo, Consolas', fontWeight: 'regular' },\n  fonts: {\n    small: {\n      fontSize: '11px',\n    },\n    medium: {\n      fontSize: '13px',\n    },\n    large: {\n      fontSize: '20px',\n      fontWeight: 'semibold',\n    },\n    xLarge: {\n      fontSize: '22px',\n      fontWeight: 'semibold',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating Fluent UI with React Router\nDESCRIPTION: In this snippet, the Button component from Fluent UI makes use of the 'as' prop to integrate with react-router's Link component. This showcases passing unhandled props like 'to' from the Button to Link, allowing for seamless integration and navigation within a React application using routing.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/docs/src/pages/Composition.mdx#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from 'react-router-dom';\n\n// 💡 `to` prop is not handled in `Button` and will be passed to `Link` component\n<Button as={Link} to=\"/home\">\n  To homepage\n</Button>;\n```\n\n----------------------------------------\n\nTITLE: Import Types from @fluentui/react-utilities and React\nDESCRIPTION: Imports necessary type definitions from the @fluentui/react-utilities package and the React library. These types are used to define the props, state, and slots for the Image component. The import of React as React_2 is likely to avoid naming conflicts within the module.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-image/library/etc/react-image.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ComponentProps } from '@fluentui/react-utilities';\nimport type { ComponentState } from '@fluentui/react-utilities';\nimport type { ForwardRefComponent } from '@fluentui/react-utilities';\nimport * as React_2 from 'react';\nimport type { Slot } from '@fluentui/react-utilities';\nimport type { SlotClassNames } from '@fluentui/react-utilities';\n```\n\n----------------------------------------\n\nTITLE: Generating Y-Axis Scale Values in TypeScript\nDESCRIPTION: This method generates a linear scale for the Y-axis based on input parameters related to data points, axis configuration, and various optional properties. It is essential for ensuring that charts display values correctly along the Y-axis, accommodating different axis types and data configurations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/etc/react-charting.api.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ncreateYAxis: (yAxisParams: IYAxisParams, isRtl: boolean, axisData: IAxisData, isIntegralDataset: boolean, useSecondaryYScale?: boolean, supportNegativeData?: boolean, roundedTicks?: boolean) => ScaleLinear<number, number, never>;\n```\n\n----------------------------------------\n\nTITLE: Stack Component Props Interface in TypeScript\nDESCRIPTION: Interface definition for Stack component props, including layout options like horizontal/vertical alignment, wrapping, growth, and deprecated properties for padding and dimensions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_181\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface IStackProps extends ISlottableProps<IStackSlots>, IStyleableComponentProps<IStackProps, IStackTokens, IStackStyles>, React_2.HTMLAttributes<HTMLElement> {\n    as?: React_2.ElementType<React_2.HTMLAttributes<HTMLElement>>;\n    disableShrink?: boolean;\n    // @deprecated\n    doNotRenderFalsyValues?: boolean;\n    enableScopedSelectors?: boolean;\n    // @deprecated\n    gap?: number | string;\n    grow?: boolean | number | 'inherit' | 'initial' | 'unset';\n    horizontal?: boolean;\n    horizontalAlign?: Alignment;\n    // @deprecated\n    maxHeight?: number | string;\n    // @deprecated\n    maxWidth?: number | string;\n    // @deprecated\n    padding?: number | string;\n    reversed?: boolean;\n    verticalAlign?: Alignment;\n    verticalFill?: boolean;\n    wrap?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating makeStyles with Shorthands in TypeScript\nDESCRIPTION: This example demonstrates how to update makeStyles calls to use the new shorthands functions for various CSS properties.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/docs/MIGRATION-NOTES.md#2025-04-20_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\nimport { makeStyles } from '@fluentui/react-componenents';\n+import { makeStyles, shorthands } from '@fluentui/react-componenents';\n\nconst useStyles = makeStyles({\n-  backgroundColor: { background: 'red' },\n+  backgroundColor: { backgroundColor: 'red' },\n-  padding: { padding: '5px' },\n+  padding: { ...shorthands.padding('5px') },\n-  margin: { margin: '5px' },\n+  margin: { ...shorthands.margin('5px') },\n-  border: { border: '5px solid red' },\n+  border: { ...shorthands.border('5px', 'solid', 'red') },\n-  borderRight: { borderRight: '5px solid red' },\n+  borderRight: { ...shorthands.borderRight('5px', 'solid', 'red') },\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Default Strings and Functions for DatePicker\nDESCRIPTION: This snippet exports constants and functions like defaultDatePickerErrorStrings and renderDatePicker_unstable, which are foundational for the default rendering behavior and error messaging of the DatePicker component. They provide preset configurations and methods to enhance the user interface.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-datepicker-compat/library/etc/react-datepicker-compat.api.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const defaultDatePickerErrorStrings: Record<DatePickerErrorType, string>;\n\nexport const defaultDatePickerStrings: CalendarStrings;\n\nexport const renderDatePicker_unstable: (state: DatePickerState) => JSX.Element;\n\nexport const useDatePicker_unstable: (props: DatePickerProps, ref: React_2.Ref<HTMLInputElement>) => DatePickerState;\n\nexport const useDatePickerStyles_unstable: (state: DatePickerState) => DatePickerState;\n```\n\n----------------------------------------\n\nTITLE: Slider Component Usage Examples\nDESCRIPTION: This code snippet provides several examples of how to use the Slider component with different configurations. These examples showcase setting default values, binding to a state variable with an onChange handler, setting min/max values, rendering vertically, disabling the slider, setting a step value, and adjusting the size.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-slider/library/README.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Slider />\n<Slider defaultValue={3} />\n<Slider value={sliderValue} onChange={sliderOnChange} />\n<Slider min={0} max={10} />\n<Slider vertical />\n<Slider disabled />\n<Slider step={10} />\n<Slider size=\"small\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring WhatsNewBoxes Component\nDESCRIPTION: Configuration of the WhatsNewBoxes component with three feature boxes highlighting lightweight components, tokens system, and M365 integration assets.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Introduction.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<WhatsNewBoxes\n  boxes={[\n    {\n      image: require('../../public/lightweight.svg'),\n      text: 'Lightweight components for smaller bundle size and faster performance.',\n    },\n    {\n      image: require('../../public/tokens.svg'),\n      text: 'New tokens system for frictionless cohesion across OS themes.',\n    },\n    {\n      image: require('../../public/spring.svg'),\n      text: 'New assets to level up Teams add-ins and M365 experiences.',\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML List for Fluent UI React Resources\nDESCRIPTION: This HTML snippet creates an unordered list with flexbox styling to display links for getting started with Fluent UI React and accessing tutorials.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Overviews/ResourcesPage/docs/default/ResourcesDeveloperResources.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<ul className=\"md-list--flex\">\n  <li className=\"mdut--full\">[Get started with Fluent UI React](#/get-started)</li>\n  <li className=\"mdut--full\">[Fluent UI React tutorial](https://github.com/microsoft/fluentui/wiki/Getting-Started-with-UI-Fabric)</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Converting Menu Items to Tab Components - After Migration\nDESCRIPTION: Example showing how to map Menu items to Tab components in FluentUI v9\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/TabList.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tab, TabList } from '@fluentui/react-components';\nconst Component = ({ items }) => (\n  <TabList>\n    {items.map(({ id, content }) => (\n      <Tab key={id} value={id}>\n        {content}\n      </Tab>\n    ))}\n  </TabList>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Color Override in AvatarGroupItem\nDESCRIPTION: This snippet demonstrates how to customize the color of each AvatarGroupItem. The first Avatar in the AvatarGroup is set to a specific color while the others inherit their colors from the default settings. This allows for distinctive styling within the avatar group.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-avatar/library/docs/SPEC-AvatarGroup.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<AvatarGroup>\n  <AvatarGroupItem color=\"darkRed\" name=\"Katri Athokas\" />\n  <AvatarGroupItem name=\"Elvia Atkins\" />\n  <AvatarGroupItem name=\"Cameron Evans\" />\n  <AvatarGroupItem name=\"Wanda Howard\" />\n  <AvatarGroupItem name=\"Mona Kane\" />\n</AvatarGroup>\n```\n\n----------------------------------------\n\nTITLE: Migrating Segment Styles with Variables\nDESCRIPTION: Example demonstrating how to migrate Segment component styles using variables from v0 to v9 using makeStyles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Segment.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Segment } from '@fluentui/react-northstar';\n\nexport const Component = () => <Segment variables={{ isSpeedDialContactCard: true }} />;\n\n// in segment-styles.ts\nexport const segmentStyles1 = {\n  root: ({ variables: { isSpeedDialContactCard } }) => ({\n    ...(isSpeedDialContactCard && {\n      backgroundColor: 'inherit',\n      boxShadow: 'none',\n    }),\n  }),\n};\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useStyles } from './COMPONENT_NAME.styles.ts';\nimport { Segment } from '@fluentui/react-migration-v0-v9';\n\nexport const Component = () => {\n  const classes = useStyles();\n  return <Segment className={classes.speedDialContactCard}></Segment>;\n};\n\n// in COMPONENT_NAME.styles.ts\nimport { makeStyles } from '@fluentui/react-components';\n\nexport const useStyles = makeStyles({\n  speedDialContactCard: {\n    backgroundColor: 'inherit',\n    boxShadow: 'none',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Fluent UI Web Components with NPM\nDESCRIPTION: Command to install Fluent UI Web Components as a dependency using NPM package manager. This installs the beta version of the library.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/README.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @fluentui/web-components@beta\n```\n\n----------------------------------------\n\nTITLE: Defining MotionTimings Namespace in TypeScript for FluentUI\nDESCRIPTION: Namespace containing CSS cubic-bezier timing functions for animations. It includes standard easing patterns like accelerate, decelerate, linear, and standard for consistent animation behavior in FluentUI components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/theme/etc/theme.api.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport namespace MotionTimings {\n    const // (undocumented)\n    accelerate = \"cubic-bezier(0.9, 0.1, 1, 0.2)\";\n    const // (undocumented)\n    decelerate = \"cubic-bezier(0.1, 0.9, 0.2, 1)\";\n    const // (undocumented)\n    linear = \"cubic-bezier(0, 0, 1, 1)\";\n    const // (undocumented)\n    standard = \"cubic-bezier(0.8, 0, 0.2, 1)\";\n}\n```\n\n----------------------------------------\n\nTITLE: Selector complexity example with makeStyles\nDESCRIPTION: Demonstrates different types of CSS selectors with varying degrees of performance impact. Shows how wide selectors can affect performance by matching unnecessary elements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/styles-handbook.md#2025-04-20_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nimport { makeStyles } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  test: {\n    color: 'orange',\n\n    '> *': {\n      color: 'red',\n    },\n    '> h1': {\n      color: 'magenta',\n    },\n    '> div': {\n      color: 'green',\n    },\n    '> .ui-button': {\n      color: 'blue',\n    },\n  },\n});\n\nfunction App() {\n  const classes = useClasses();\n\n  return (\n    <>\n      <div className={classes.test}>\n        <h1>Hello World</h1>\n        <button class=\"ui-button\">A button</button>\n      </div>\n\n      {/* Renders 500 empty divs */}\n      {Array.from({ length: 500 }, (_, i) => (\n        <div key={i} />\n      ))}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to various versions\nDESCRIPTION: Multiple patches are made to the @fluentui/react package, including updates to versions 8.26.1, 8.26.0, 8.25.0, 8.24.0, and others. Each of these upgrades may include critical updates, bug fixes, or new features that enhance the component library.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/theming-designer/CHANGELOG.md#2025-04-20_snippet_45\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.26.1 ([PR #19212](https://github.com/microsoft/fluentui/pull/19212) by czearing@outlook.com)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.26.0 ([PR #19195](https://github.com/microsoft/fluentui/pull/19195) by rezha@microsoft.com)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.25.0 ([PR #19137](https://github.com/microsoft/fluentui/pull/19137) by ololubek@microsoft.com)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.24.0 ([PR #19080](https://github.com/microsoft/fluentui/pull/19080) by sarah.higley@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Importing Render Functions for Combobox (JavaScript)\nDESCRIPTION: This snippet imports the rendering functions for the Combobox component, which allows users to select options from a dropdown or input their own.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/etc/react-components.api.md#2025-04-20_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { renderCombobox_unstable } from '@fluentui/react-combobox';\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { renderDropdown_unstable } from '@fluentui/react-combobox';\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { renderListbox_unstable } from '@fluentui/react-combobox';\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { renderOption_unstable } from '@fluentui/react-combobox';\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { renderOptionGroup_unstable } from '@fluentui/react-combobox';\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react to v8.47.2\nDESCRIPTION: This patch updates the @fluentui/react package to version 8.47.2, ensuring users have access to the latest improvements and fixes. This change was detailed in Pull Request #20904.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/ts-minbar-test-react/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.47.2 ([PR #20904](https://github.com/microsoft/fluentui/pull/20904) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Replacing useTheme Hook Usage in React\nDESCRIPTION: This example demonstrates how to replace the deprecated useTheme hook with direct usage of the tokens object.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/docs/MIGRATION-NOTES.md#2025-04-20_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n-import { useTheme } from `@fluentui/react-components`;\n+import { tokens } from `@fluentui/react-components`;\n\nfunction App() {\n-  const theme = useTheme();\n\n-  return <div style={{ color: theme.colorNeutralForeground1 }} />;\n+  return <div style={{ color: tokens.colorNeutralForeground1 }} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Card with Overflow Count - FluentUI v9\nDESCRIPTION: Updated implementation showing how to create a custom card with overflow count functionality in FluentUI v9. Uses basic Card component with custom layout.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Card/CardPreview.stories.mdx#2025-04-20_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { Text } from '@fluentui/react-components';\nimport { Card } from '@fluentui/react-card/unstable';\n\nexport const Default = () => {\n  return (\n    <Card orientation=\"horizontal\">\n      <div>\n        <div>\n          <img src=\"powerpoint_logo.svg\" alt=\"Powerpoint logo\" />\n          <Text truncate>Revenue stream proposal fiscal year 2016 version02</Text>\n        </div>\n\n        <div>\n          <img src=\"powerpoint_logo.svg\" alt=\"Powerpoint logo\" />\n          <Text truncate>New Contoso Collaboration for Conference Presentation Draft</Text>\n        </div>\n\n        <div>\n          <img src=\"powerpoint_logo.svg\" alt=\"Powerpoint logo\" />\n          <Text truncate>Spec Sheet for design</Text>\n        </div>\n\n        <div>\n          <Text>+1 more</Text>\n        </div>\n      </div>\n    </Card>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering React App to Static HTML on Server\nDESCRIPTION: This snippet demonstrates how to render a React app to static HTML on the server using `ReactDOMServer.renderToString`. The rendered HTML is then sent as the response with the 'text/html' content type. On the client, `ReactDOM.hydrate` attaches event listeners to the existing markup, ensuring interactivity.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/ssr-context.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// render app to static HTML on the server\nReactDOMServer.renderToString(<App />);\nres.writeHead(200, { 'Content-Type': 'text/html' });\n\n// On the client\nconst root = document.getElementById('root');\nReactDOM.hydrate(<App />, root);\n```\n\n----------------------------------------\n\nTITLE: Defining TabsAppearance Constants in TypeScript\nDESCRIPTION: Constants defining possible appearance values for the Tabs component, allowing for subtle or transparent visual styling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_68\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"TabsAppearance\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n// Warning: (ae-missing-release-tag) \"TabsAppearance\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport const TabsAppearance: {\n    readonly subtle: \"subtle\";\n    readonly transparent: \"transparent\";\n};\n\n// @public (undocumented)\nexport type TabsAppearance = ValuesOf<typeof TabsAppearance>;\n```\n\n----------------------------------------\n\nTITLE: Test Plan Structure for Sparkline Chart in Markdown\nDESCRIPTION: Detailed test cases for validating line path properties, area path attributes, and chart empty states using RTL testing framework. The plan covers stroke, opacity, fill-opacity validations and data presence checks.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/docs/TestPlans/SparklineChart/UnitTests.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|                **Test steps**                |                  **Validation**                  | **Tool used** |\n| :------------------------------------------: | :----------------------------------------------: | :-----------: |\n|            Test 1: Get Line Path             |                                                  |               |\n| - Get the Line path using 'line' class name. |             Should return Line path.             |      RTL      |\n|       - Get the stroke from line path.       |     Should return the correct stroke value.      |      RTL      |\n|      - Get the opacity from line path.       |     Should return the correct opacity value.     |      RTL      |\n|            Test 2: Get Area Path             |                                                  |               |\n| - Get the Area path using 'area' class name. |             Should return Area path.             |      RTL      |\n|    - Get the fill-opacity from area path.    |  Should return the correct fill-opacity value.   |      RTL      |\n|      - Get the opacity from area path.       |     Should return the correct opacity value.     |      RTL      |\n|            Test 3: Is Chart Empty            |                                                  |               |\n|                 - Empty Data                 |   Should return true when chart data is empty    |      RTL      |\n|               - Non-Empty Data               | Should return false when chart data is non-empty |      RTL      |\n```\n\n----------------------------------------\n\nTITLE: WLT Performance Degradation Analysis\nDESCRIPTION: Comparison of theme token count and its impact on window load time performance\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/theme-shared-colors.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Theme structure               | WLT degradation [ms] |\n| ----------------------------- | -------------------: |\n| 1200 tokens, alias references |                   80 |\n| 600 tokens                    |                   20 |\n| 200 tokens                    |                    7 |\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme Tokens (Before Flattening) in JavaScript\nDESCRIPTION: This code snippet illustrates how theme tokens are accessed in FluentUI before the proposed flattening. The deep object structure requires navigating multiple levels to reach a specific token. This can lead to difficulties in token discovery and performance issues during theme merging and CSS variable insertion.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/theme-shape.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/* Before */\ntheme.alias.colors.red.neutral;\n```\n\n----------------------------------------\n\nTITLE: Replacing makeStyles with makeResetStyles in React\nDESCRIPTION: This chore updates the codebase by replacing makeStyles with makeResetStyles. This change likely involves updating the styling approach within the component, potentially to improve consistency or adhere to updated styling guidelines within FluentUI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tree/library/CHANGELOG.md#2025-04-20_snippet_10\n\nLANGUAGE: React\nCODE:\n```\nchore: replace makeStyles with makeResetStyles ([PR #29338](https://github.com/microsoft/fluentui/pull/29338) by bernardo.sunderhus@gmail.com)\n```\n\n----------------------------------------\n\nTITLE: Defining IComboBoxClassNames Interface\nDESCRIPTION: Defines the interface `IComboBoxClassNames` which describes the CSS class names used for styling a ComboBox component.  It includes properties for the root element, header, input, options container, options container wrapper, and screen reader text.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_65\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IComboBoxClassNames {\n    // (undocumented)\n    header: string;\n    // (undocumented)\n    input: string;\n    // (undocumented)\n    label: string;\n    // (undocumented)\n    optionsContainer: string;\n    // (undocumented)\n    optionsContainerWrapper: string;\n    // (undocumented)\n    root: string;\n    // (undocumented)\n    screenReaderText: string;\n}\n```\n\n----------------------------------------\n\nTITLE: MergeProps Retirement Options\nDESCRIPTION: This example demonstrates two ways of achieving the same outcome: using `defaultProps` or directly mutating the state. It argues that since state mutation is already possible, `mergeProps` is not providing significant value.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/simplify-prop-merging.md#2025-04-20_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nconst state = mergeProps(\n  {\n    foo: {},\n  },\n  defaultProps,\n  resolveShorthandProps(props, buttonShorthandProps),\n);\n\n// Option 1 - defaultProps\nuseComponentState(props, { foo: { bar: 'bar' } });\n\n// Option 2 - mutate state\nconst state = useComponentState(props);\nstate.foo.bar = 'bar';\n```\n\n----------------------------------------\n\nTITLE: Implementing Layer and Measurement Functions\nDESCRIPTION: Provides utility functions for working with Layer components and calculating measurements for responsive UI components. These are used for performance optimization and layout calculations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_40\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport function getLayerCount(hostId: string): number;\n\n// @public\nexport function getLayerHost(hostId: string): ILayerHost | undefined;\n\n// @public\nexport function getLayerHostSelector(): string | undefined;\n\n// @public (undocumented)\nexport const getLayerStyles: (props: ILayerStyleProps) => ILayerStyles;\n\n// @public\nexport function getMaxHeight(target: Element | MouseEvent | Point | Rectangle, targetEdge: DirectionalHint, gapSpace?: number, bounds?: IRectangle, coverTarget?: boolean, win?: Window): number;\n\n// @public\nexport const getMeasurementCache: () => {\n    getCachedMeasurement: (data: any) => number | undefined;\n    addMeasurementToCache: (data: any, measurement: number) => void;\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering InfoButton Component in React\nDESCRIPTION: This snippet demonstrates a basic usage of the InfoButton component in a React application. It highlights how to pass additional information via the 'info' prop, which is shown in a Popover when the InfoButton is interacted with. There are no external dependencies required for this example, but the component assumes the presence of Fluent UI styles and components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-infolabel/library/docs/Spec.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<InfoButton info=\"This is some additional information.\" />\n```\n\n----------------------------------------\n\nTITLE: Using Context-Aware Wrapper with field in JSX\nDESCRIPTION: This example illustrates using a field wrapper function to integrate custom components within Field without altering the render tree, using FieldContext for prop management. It allows JSX structure flexibility but foregoes automatic prop application via cloneElement.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/field-custom-components.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst MyInputInField = field(MyInput, props => mapMyInputFieldProps(props));\n\n<>\n  <Field label=\"...\" validationState=\"error\">\n    <MyInputInField defaultValue=\"...\" />\n  </Field>\n  <Field label=\"...\" validationState=\"error\">\n    <div>\n      <MyInputInField defaultValue=\"...\" />\n    </div>\n  </Field>\n</>;\n```\n\n----------------------------------------\n\nTITLE: Defining Tree Component Props in TypeScript\nDESCRIPTION: Defines the props for the Tree component, including slots, navigation mode, appearance, size, open items, selection mode, and event handlers for various tree operations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tree/library/etc/react-tree.api.md#2025-04-20_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type TreeProps = ComponentProps<TreeSlots> & {\n    navigationMode?: TreeNavigationMode;\n    appearance?: 'subtle' | 'subtle-alpha' | 'transparent';\n    size?: 'small' | 'medium';\n    openItems?: Iterable<TreeItemValue>;\n    defaultOpenItems?: Iterable<TreeItemValue>;\n    onOpenChange?(event: TreeOpenChangeEvent, data: TreeOpenChangeData): void;\n    onNavigation?(event: TreeNavigationEvent_unstable, data: TreeNavigationDataParam): void;\n    selectionMode?: SelectionMode_2;\n    checkedItems?: Iterable<TreeItemValue | [TreeItemValue, TreeSelectionValue]>;\n    onCheckedChange?(event: TreeCheckedChangeEvent, data: TreeCheckedChangeData): void;\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering a Sample Component Using Motion State\nDESCRIPTION: Shows how to render the JSX of a sample component based on its motion state to control visibility and transitions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/component-transitions-on-mount-or-unmount.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Render the final JSX of Sample\n */\nexport const renderSample_unstable = (state: SampleState) => {\n  if (state.motion.canRender) {\n    return null;\n  }\n\n  assertSlots<SampleSlots>(state);\n\n  return <state.root />;\n};\n```\n\n----------------------------------------\n\nTITLE: Define PositioningProps interface\nDESCRIPTION: Defines an interface called `PositioningProps` which extends `Pick<PositioningOptions,...>` and includes the positioningRef and target properties. This interface represents the props that can be passed to a positioning component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-positioning/etc/react-positioning.api.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface PositioningProps extends Pick<PositioningOptions, 'align' | 'arrowPadding' | 'autoSize' | 'coverTarget' | 'fallbackPositions' | 'flipBoundary' | 'offset' | 'overflowBoundary' | 'overflowBoundaryPadding' | 'pinned' | 'position' | 'strategy' | 'useTransform' | 'matchTargetSize' | 'onPositioningEnd' | 'disableUpdateOnResize' | 'shiftToCoverTarget'> {\n    positioningRef?: React_2.Ref<PositioningImperativeRef>;\n    target?: TargetElement | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Stateful Class Component in React with Event Handler\nDESCRIPTION: This code snippet illustrates a stateful class component in React with an event handler. It extends `AutoControlledComponent` for easier state management. The `handleClick` method logs a message to the console when the component is clicked, and this method is bound to the `onClick` event of the div element.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/add-a-feature.md#2025-04-20_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface MyComponentProps {}\n\nclass MyComponent extends AutoControlledComponent<MyComponentProps> {\n  handleClick = e => {\n    console.log('Clicked my component!');\n  };\n\n  render() {\n    return <div onClick={this.handleClick} />;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: FluentUI Version Change Entry\nDESCRIPTION: Changelog entry for version 9.0.0-alpha.53 showing dependency updates and patches\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-provider/library/CHANGELOG.md#2025-04-20_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.0.0-alpha.53](https://github.com/microsoft/fluentui/tree/@fluentui/react-provider_v9.0.0-alpha.53)\n\nFri, 09 Jul 2021 07:39:31 GMT\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-provider_v9.0.0-alpha.52..@fluentui/react-provider_v9.0.0-alpha.53)\n\n### Patches\n\n- Bump @fluentui/eslint-plugin to v1.3.2 ([PR #18808](https://github.com/microsoft/fluentui/pull/18808) by martinhochel@microsoft.com)\n- Bump @fluentui/react-conformance to v0.4.2 ([PR #18808](https://github.com/microsoft/fluentui/pull/18808) by martinhochel@microsoft.com)\n- Bump @fluentui/scripts to v1.0.0 ([PR #18808](https://github.com/microsoft/fluentui/pull/18808) by martinhochel@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Implementing BaseTablist Class in TypeScript\nDESCRIPTION: Defines the BaseTablist class which extends FASTElement. It implements core functionality for tablist components, including tab management and orientation handling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class BaseTablist extends FASTElement {\n    activeid: string;\n    // @internal (undocumented)\n    protected activeidChanged(oldValue: string, newValue: string): void;\n    activetab: HTMLElement;\n    adjust(adjustment: number): void;\n    // @internal (undocumented)\n    connectedCallback(): void;\n    disabled: boolean;\n    // @internal\n    protected disabledChanged(prev: boolean, next: boolean): void;\n    // @internal\n    elementInternals: ElementInternals;\n    orientation: TablistOrientation;\n    // @internal (undocumented)\n    protected orientationChanged(prev: TablistOrientation, next: TablistOrientation): void;\n    protected setTabs(): void;\n    // @internal (undocumented)\n    tabs: HTMLElement[];\n    // @internal (undocumented)\n    protected tabsChanged(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Storybook Story with Controls Pane for Playground\nDESCRIPTION: This TypeScript snippet is part of a Storybook story file where specific stories like Playground are configured to utilize the controls pane. By enabling controls only for this story, it provides a place for users to interactively play with props in a controlled environment. The code requires Fluent UI Storybook setup.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/authoring-stories.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const Playground = (props:FooBarProps) => {.....}\nDefault.parameters = {\n  controls: {\n    // Enable Controls Pane only for our default/playground\n    disable: false,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Fluent UI Label Component in React\nDESCRIPTION: This snippet imports necessary React components and the Label component from Fluent UI to render a simple labeled component. It requires the Fluent UI React library as a dependency and demonstrates creating a functional component that returns JSX with the Label component. The key functionality is to display a basic label within a div element.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-monaco-editor/src/transpiler/examples/functionTranspiled.txt#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Label } from '@fluentui/react/lib/Label';\nexport var LabelBasicExample = function () {\n    return (React.createElement(\"div\", null,\n        React.createElement(Label, null, \"I'm a Label\")));\n};\n```\n\n----------------------------------------\n\nTITLE: Version History Documentation in Markdown\nDESCRIPTION: Chronological version history showing incremental version updates and dependency patches for the FluentUI React Monaco Editor component. Each entry includes version number, date, and list of dependency updates.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-monaco-editor/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.2.61](https://github.com/microsoft/fluentui/tree/@fluentui/react-monaco-editor_v1.2.61)\n\nMon, 10 Jan 2022 07:26:30 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-monaco-editor_v1.2.60..@fluentui/react-monaco-editor_v1.2.61)\n\n### Patches\n\n- Bump @fluentui/react to v8.49.2 ([PR #21041](https://github.com/microsoft/fluentui/pull/21041) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Defining TagPickerList Properties in TypeScript\nDESCRIPTION: This definition outlines properties of the TagPickerList, acting akin to a listbox slot. It is rendered within a Portal when not inline and is responsible for ensuring focus navigation and styling as a wrapper for TagPickerOptions. This facilitates organized options presentation and smooth user interactions within the TagPicker ecosystem.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/Spec.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport type TagPickerListSlots = {\n  root: Slot<typeof Listbox>;\n};\n\nexport type TagPickerListProps = ComponentProps<TagPickerListSlots>;\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint for TypeScript Project\nDESCRIPTION: ESLint configuration that extends FluentUI's React plugin and sets up parser options to use the appropriate TypeScript configs for different environments.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/shared/build-system/02-solution-style-ts-configs.md#2025-04-20_snippet_4\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"extends\": [\"@fluentui/eslint-plugin/react\"],\n  \"parserOptions\": {\n    // this will speed up linting up to 40%\n    \"tsconfigRootDir\": \"path/to/<package-name>\",\n    // we need to specify our environment configs (will be removed once typescript-eslint properly supports project references)\n    // tsc program will be created accordingly per environment/scope\n    \"project\": [\n      // includes tsconfig.lib.json and tsconfig.spec.json\n      \"path/to/<package-name>/tsconfig.*?.json\",\n      // includes storybook config\n      \"path/to/<package-name>/.storybook/tsconfig.json\"\n    ]\n  },\n  \"rules\": {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Version History Entry - September 29, 2021\nDESCRIPTION: Changelog entry listing version updates for multiple FluentUI React components including Avatar, Button, Provider and Theme\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/perf-test/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Patches\n\n- Bump @fluentui/react-avatar to v9.0.0-alpha.88 ([PR #19660](https://github.com/microsoft/fluentui/pull/19660) by beachball)\n- Bump @fluentui/react-button to v9.0.0-alpha.94 ([PR #19660](https://github.com/microsoft/fluentui/pull/19660) by beachball)\n- Bump @fluentui/react-provider to v9.0.0-alpha.85 ([PR #19660](https://github.com/microsoft/fluentui/pull/19660) by beachball)\n- Bump @fluentui/react-theme to v9.0.0-alpha.24 ([PR #19660](https://github.com/microsoft/fluentui/pull/19660) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Updating FluentUI React Switch to Version 9.0.0-rc.14\nDESCRIPTION: Changelog entry for version 9.0.0-rc.14 of @fluentui/react-switch, updating dependencies.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-switch/library/CHANGELOG.md#2025-04-20_snippet_14\n\nLANGUAGE: Markdown\nCODE:\n```\n## [9.0.0-rc.14](https://github.com/microsoft/fluentui/tree/@fluentui/react-switch_v9.0.0-rc.14)\n\nThu, 23 Jun 2022 14:25:31 GMT\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-switch_v9.0.0-rc.13..@fluentui/react-switch_v9.0.0-rc.14)\n\n### Changes\n\n- Bump @fluentui/react-label to v9.0.0-rc.6 ([PR #23608](https://github.com/microsoft/fluentui/pull/23608) by beachball)\n- Bump @fluentui/react-tabster to v9.0.0-rc.14 ([PR #23608](https://github.com/microsoft/fluentui/pull/23608) by beachball)\n- Bump @fluentui/react-theme to v9.0.0-rc.10 ([PR #23608](https://github.com/microsoft/fluentui/pull/23608) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Package Version History Entry - 9.0.10\nDESCRIPTION: Version update entry for @fluentui/react-radio package containing patches and dependency version bumps\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-radio/library/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.0.10](https://github.com/microsoft/fluentui/tree/@fluentui/react-radio_v9.0.10)\n\nWed, 02 Nov 2022 11:57:59 GMT\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-radio_v9.0.9..@fluentui/react-radio_v9.0.10)\n```\n\n----------------------------------------\n\nTITLE: Defining Margin Interface in TypeScript\nDESCRIPTION: The Margin interface defines the margins around a chart, specifying individual size values for bottom, left, right, and top margins. Each property accepts a number indicating the size of the margin in pixels.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/chart-utilities/etc/chart-utilities.api.md#2025-04-20_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface Margin {\n    // (undocumented)\n    b: number;\n    // (undocumented)\n    l: number;\n    // (undocumented)\n    pad: number;\n    // (undocumented)\n    r: number;\n    // (undocumented)\n    t: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PieColor and PieColors Types in TypeScript\nDESCRIPTION: PieColor and PieColors are types representing color values for pie chart elements, allowing either single values or arrays of color values to support customization and styling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/chart-utilities/etc/chart-utilities.api.md#2025-04-20_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type PieColor = string | number;\nexport type PieColors = Array<PieColor | null | undefined>;\n```\n\n----------------------------------------\n\nTITLE: Using PresenceGroup for Group Motions in React\nDESCRIPTION: This snippet demonstrates the use of PresenceGroup to manage multiple presence animations in React. It shows how to wrap multiple Fade components within a PresenceGroup to coordinate their animations and unmounting behavior.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/motion-definition-n-apis.md#2025-04-20_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createPresenceComponent, type PresenceMotion, PresenceGroup } from '@fluentui/react-motions-preview';\n\nconst fadePresence: PresenceMotion = {\n  /* --- */\n};\n\nconst Fade = createPresenceComponent(fadePresence);\n\nfunction App() {\n  return (\n    <PresenceGroup>\n      <Fade>\n        <div>Hello world!</div>\n      </Fade>\n      <Fade>\n        <div>Hello world!</div>\n      </Fade>\n    </PresenceGroup>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for v9.0.0-alpha.3\nDESCRIPTION: Changelog entry documenting removal of SwitchField's labelPosition prop and dependency updates.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-field/library/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.0.0-alpha.3](https://github.com/microsoft/fluentui/tree/@fluentui/react-field_v9.0.0-alpha.3)\n\nMon, 03 Oct 2022 22:24:37 GMT\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-field_v9.0.0-alpha.2..@fluentui/react-field_v9.0.0-alpha.3)\n```\n\n----------------------------------------\n\nTITLE: Defining Panel Interface and Props in TypeScript for FluentUI\nDESCRIPTION: Defines the IPanel interface and IPanelProps that specify the properties and methods for a Panel component in FluentUI. Includes properties for customizing appearance, behavior, and event handlers.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_156\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IPanel {\n    dismiss: (ev?: React_2.KeyboardEvent<HTMLElement> | KeyboardEvent) => void;\n    open: () => void;\n}\n\n// @public\nexport interface IPanelProps extends React_2.HTMLAttributes<PanelBase> {\n    allowTouchBodyScroll?: boolean;\n    className?: string;\n    closeButtonAriaLabel?: string;\n    // @deprecated (undocumented)\n    componentId?: string;\n    componentRef?: IRefObject<IPanel>;\n    customWidth?: string;\n    elementToFocusOnDismiss?: HTMLElement;\n    // @deprecated\n    firstFocusableSelector?: string;\n    focusTrapZoneProps?: IFocusTrapZoneProps;\n    // @deprecated\n    forceFocusInsideTrap?: boolean;\n    hasCloseButton?: boolean;\n    headerClassName?: string;\n    headerText?: string;\n    headerTextProps?: React_2.HTMLAttributes<HTMLDivElement>;\n    // @deprecated\n    ignoreExternalFocusing?: boolean;\n    isBlocking?: boolean;\n    isFooterAtBottom?: boolean;\n    isHiddenOnDismiss?: boolean;\n    isLightDismiss?: boolean;\n    isOpen?: boolean;\n    layerProps?: ILayerProps;\n    onDismiss?: (ev?: React_2.SyntheticEvent<HTMLElement> | KeyboardEvent) => void;\n    onDismissed?: () => void;\n    onLightDismissClick?: () => void;\n    onOpen?: () => void;\n    onOpened?: () => void;\n    onOuterClick?: (ev?: React_2.MouseEvent<HTMLDivElement>) => void;\n    onRenderBody?: IRenderFunction<IPanelProps>;\n    onRenderFooter?: IRenderFunction<IPanelProps>;\n    onRenderFooterContent?: IRenderFunction<IPanelProps>;\n    onRenderHeader?: IPanelHeaderRenderer;\n    onRenderNavigation?: IRenderFunction<IPanelProps>;\n    onRenderNavigationContent?: IRenderFunction<IPanelProps>;\n    overlayProps?: IOverlayProps;\n    popupProps?: IPopupProps;\n    styles?: IStyleFunctionOrObject<IPanelStyleProps, IPanelStyles>;\n    theme?: ITheme;\n    type?: PanelType;\n}\n```\n\n----------------------------------------\n\nTITLE: Utilizing FluentProvider Styles in TypeScript\nDESCRIPTION: The function 'useFluentProviderStyles_unstable' applies styles to the 'FluentProviderState', integrating visual themes and custom styling. It modifies the state object directly, enhancing UI responsiveness and theme integration.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-provider/library/etc/react-provider.api.md#2025-04-20_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const useFluentProviderStyles_unstable: (state: FluentProviderState) => FluentProviderState;\n```\n\n----------------------------------------\n\nTITLE: Mobile-First Inheritance in Fluent UI Grid\nDESCRIPTION: Demonstrates the mobile-first inheritance principle where layouts defined for small screens (ms-sm) are automatically inherited by larger screen sizes unless overridden by specific medium (ms-md) or large (ms-lg) screen utilities.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Styles/LayoutPage/docs/web/LayoutGridImplementation.md#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"ms-Grid-col ms-sm12 ms-lg4\">Example</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Undocumented Zoom Constants in JavaScript\nDESCRIPTION: This snippet exports constants related to zoom operations and input method toggles, intended for use in applications requiring such functionality. The constants include untranslated and direct identifiers like 'ZoomIn', 'ZoomOut', and 'ZoomToggle'.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/keyboard-keys/etc/keyboard-keys.api.md#2025-04-20_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n// @public (undocumented)\nexport const ZenkakuHankaku = \"ZenkakuHankaku\";\n\n// @public (undocumented)\nexport const ZoomIn = \"ZoomIn\";\n\n// @public (undocumented)\nexport const ZoomOut = \"ZoomOut\";\n\n// @public (undocumented)\nconst ZoomOut_2 = 251;\n\n// @public (undocumented)\nexport const ZoomToggle = \"ZoomToggle\";\n```\n\n----------------------------------------\n\nTITLE: Defining Dropdown Class with Properties and Methods in TypeScript\nDESCRIPTION: Defines the Dropdown class which extends BaseDropdown, including properties for appearance and size, and various lifecycle methods. It handles state changes for appearance, open state, and size.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_35\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class Dropdown extends BaseDropdown {\n    constructor();\n    appearance: DropdownAppearance;\n    // @internal\n    appearanceChanged(prev: DropdownAppearance | undefined, next: DropdownAppearance | undefined): void;\n    // (undocumented)\n    connectedCallback(): void;\n    // (undocumented)\n    disconnectedCallback(): void;\n    // @internal\n    openChanged(prev: boolean | undefined, next: boolean | undefined): void;\n    size?: DropdownSize;\n    // @internal\n    sizeChanged(prev: DropdownSize | undefined, next: DropdownSize | undefined): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Carbon Design Button DOM Structure\nDESCRIPTION: HTML structure for Carbon Design button showing icon implementation with SVG. Uses BEM-style CSS classes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Button.md#2025-04-20_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<button class=\"bx--btn bx--btn--primary\" type=\"button\">\n  With icon\n  <svg\n    focusable=\"false\"\n    preserveAspectRatio=\"xMidYMid meet\"\n    style=\"will-change: transform;\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    class=\"bx--btn__icon\"\n    width=\"16\"\n    height=\"16\"\n    viewBox=\"0 0 16 16\"\n    aria-hidden=\"true\"\n  >\n    <path d=\"M9 7L9 3 7 3 7 7 3 7 3 9 7 9 7 13 9 13 9 9 13 9 13 7z\"></path>\n  </svg>\n</button>\n```\n\n----------------------------------------\n\nTITLE: Flowchart of Visual Regression Process - Mermaid\nDESCRIPTION: This diagram illustrates the workflow of the visual regression process, outlining the sequence from Storybook production builds through to report generation after comparing baseline images with actual outputs. It visually represents how the various components interact.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/visual-regression-assert/README.md#2025-04-20_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n\nS[*.stories.tsx?] --> SB[Storybook Production Build] --> W[Static Web Page]\n\nStoryWright --> W --> GI[Generate Images From Web Page]\n\nVRA[Assert CLI] --> GI --> BC[compare Baseline and Actual] --> GR[Generate Report/Fail Pipeline]\n```\n\n----------------------------------------\n\nTITLE: FluentUI Fabric Slider Implementation\nDESCRIPTION: Current FluentUI Fabric implementation of the slider component showing container-focused approach with additional wrapper divs. Notable differences include missing marks and no tooltip support.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Slider.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div\n  aria-valuenow=\"0\"\n  aria-valuemin=\"0\"\n  aria-valuemax=\"10\"\n  aria-label=\"Controlled example\"\n  aria-disabled=\"false\"\n  class=\"ms-Slider-slideBox ms-Slider-showValue ms-Slider-showTransitions\"\n  id=\"Slider187\"\n  role=\"slider\"\n  tabindex=\"0\"\n  data-is-focusable=\"true\"\n>\n  <div class=\"ms-Slider-line\">\n    <span class=\"ms-Slider-thumb\" style=\"left: 0%;\"></span>\n    <span class=\"ms-Slider-active activeSection-243\" style=\"width: 0%;\"></span>\n    <span class=\"ms-Slider-inactive inactiveSection-244\" style=\"width: 100%;\"></span>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding IPYNB Filetype Icon Support in FluentUI React\nDESCRIPTION: This snippet describes the addition of support for the `ipnyb` (Jupyter Notebook) file type icon within the `@fluentui/react-file-type-icons` package.  This enhances the ability to visually represent Jupyter Notebook files with a specific icon. The addition expands the range of supported file types within the FluentUI React library.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-file-type-icons/CHANGELOG.md#2025-04-20_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Changelog Entry for Beta.11\nDESCRIPTION: Changelog markdown showing version comparison and changes made in beta.11 release.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.0.0-beta.11](https://github.com/microsoft/fluentui/tree/@fluentui/react-dialog_v9.0.0-beta.11)\n\nMon, 03 Oct 2022 22:24:36 GMT\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-dialog_v9.0.0-beta.10..@fluentui/react-dialog_v9.0.0-beta.11)\n\n### Changes\n\n- feat: removes DialogSurface native dialog support ([PR #24979](https://github.com/microsoft/fluentui/pull/24979) by bernardo.sunderhus@gmail.com)\n- Bump @fluentui/react-aria to v9.2.1 ([PR #25055](https://github.com/microsoft/fluentui/pull/25055) by beachball)\n- Bump @fluentui/react-tabster to v9.1.2 ([PR #25055](https://github.com/microsoft/fluentui/pull/25055) by beachball)\n- Bump @fluentui/react-portal to v9.0.6 ([PR #25055](https://github.com/microsoft/fluentui/pull/25055) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Theme Samples Version History Entry\nDESCRIPTION: Version history entry showing dependency updates and patch changes for the theme-samples package\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/theme-samples/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [8.4.40](https://github.com/microsoft/fluentui/tree/@fluentui/theme-samples_v8.4.40)\n\nWed, 01 Jun 2022 07:38:24 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/theme-samples_v8.4.39..@fluentui/theme-samples_v8.4.40)\n\n### Patches\n\n- Bump @fluentui/react to v8.72.0 ([PR #23293](https://github.com/microsoft/fluentui/pull/23293) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Defining HorizontalBarChartWithAxis Component and Props in TypeScript\nDESCRIPTION: Exports a FunctionComponent for HorizontalBarChartWithAxis and defines its props interface. The props extend CartesianChartProps and include options for customizing the chart's appearance and behavior.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charts/library/etc/react-charts.api.md#2025-04-20_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const HorizontalBarChartWithAxis: React_2.FunctionComponent<HorizontalBarChartWithAxisProps>;\n\nexport interface HorizontalBarChartWithAxisProps extends CartesianChartProps {\n    barHeight?: number;\n    chartTitle?: string;\n    colors?: string[];\n    culture?: string;\n    data?: HorizontalBarChartWithAxisDataPoint[];\n    enableGradient?: boolean;\n    onRenderCalloutPerDataPoint?: RenderFunction<HorizontalBarChartWithAxisDataPoint>;\n    roundCorners?: boolean;\n    showYAxisLables?: boolean;\n    showYAxisLablesTooltip?: boolean;\n    styles?: HorizontalBarChartWithAxisStyles;\n    useSingleColor?: boolean;\n    yAxisPadding?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining useSetTimeout Hook in Typescript\nDESCRIPTION: Defines a React hook, `useSetTimeout`, that returns safe `setTimeout` and `clearTimeout` methods. Timeout callbacks set up using this hook will be automatically cleared when the component is unmounted, preventing memory leaks. The returned callbacks always have the same identity.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-hooks/README.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useSetTimeout(): {\n  setTimeout: (callback: () => void, duration: number) => number;\n  clearTimeout: (id: number) => void;\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up FluentProvider in React 18 - JavaScript\nDESCRIPTION: This code snippet illustrates how to set up the FluentProvider with a web light theme in a React 18 application. It uses the createRoot function from React's DOM client to render the main App component with the theming context provided by Fluent UI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/QuickStart.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { FluentProvider, webLightTheme } from '@fluentui/react-components';\n\nimport App from './App';\n\nconst root = createRoot(document.getElementById('root'));\n\nroot.render(\n  <FluentProvider theme={webLightTheme}>\n    <App />\n  </FluentProvider>,\n);\n```\n\n----------------------------------------\n\nTITLE: Update Render Scenario for List and ListItems with Stale Values\nDESCRIPTION: This snippet logs the update render scenario where a List is re-rendered with stale ListItems values, identifying the re-rendering behavior when items are matched or mismatched.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/context-selector-tearing.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nrender:List\n/* re-rendered all items, but with _stale_ values */\nrenders:ListItem {active: true, value: '1'}\nrenders:ListItem {active: false, value: '2'}\nrenders:ListItem {active: false, value: '3'}\nrenders:ListItem {active: false, value: '4'}\n/* re-rendered matched items with proper values */\nrenders:ListItem {active: false, value: '1'}\nrenders:ListItem {active: true, value: '2'}\n```\n\n----------------------------------------\n\nTITLE: Using Motion Prop with Predefined Motion Component in React Dialog\nDESCRIPTION: Example of using a custom motion component with a FluentUI Dialog by passing a motion component to the motion prop. This allows overriding the default motion behavior with a predefined motion component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/motion-definition-n-apis.md#2025-04-20_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Dialog, DialogSurface } from '@fluentui/react-components';\nimport { createPresenceComponent } from '@fluentui/react-motions-preview';\n\n// 💡 Consumers will have the option to use either predefined motions as objects or as components.\n//   They won't need to define custom motions unless they specifically want to.\nconst FadeSlow = createPresenceComponent(/* --- */);\n\nfunction MyComponent() {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <Dialog open={open}>\n      <DialogSurface motion={FadeSlow}>\n        <div>Hello world!</div>\n      </DialogSurface>\n    </Dialog>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Transform Interface for Data Transformations\nDESCRIPTION: Defines a TypeScript interface for data transformation operations in visualizations. Supports aggregation, filtering, grouping, and sorting with various configuration options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/chart-utilities/etc/chart-utilities.api.md#2025-04-20_snippet_39\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface Transform {\n    // (undocumented)\n    aggregations: TransformAggregation[];\n    // (undocumented)\n    enabled: boolean;\n    // (undocumented)\n    groups: string | number[] | string[];\n    // (undocumented)\n    nameformat: string;\n    // (undocumented)\n    operation: string;\n    // (undocumented)\n    order: 'ascending' | 'descending';\n    // (undocumented)\n    preservegaps: boolean;\n    // (undocumented)\n    styles: TransformStyle[];\n    // (undocumented)\n    target: number | string | number[] | string[];\n    // (undocumented)\n    type: 'aggregate' | 'filter' | 'groupby' | 'sort';\n    // (undocumented)\n    value: any;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Motion Prop in a Component's State Hook\nDESCRIPTION: Example showing how to implement the motion prop within a component's state hook using the motionSlot utility, maintaining consistency across components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/motion-definition-n-apis.md#2025-04-20_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nimport { motionSlot, Collapse } from '@fluentui/react-motions-preview';\nimport { mergeCallbacks } from '@fluentui/react-utilities';\nimport * as React from 'react';\n\nfunction useComponentState(props, ref) {\n  const { motion } = props;\n  const [open, setOpen] = React.useState(false);\n\n  const state = {\n    motion: motionSlot(motion, {\n      element: Collapse,\n      visible: open,\n    }),\n  };\n\n  // Heads up! Like other events callbacks on slots, we should merge them\n  state.motion.onMotionFinish = mergeCallbacks(state.motion.onMotionFinish, () => {\n    /* do something */\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Version Change History in Markdown\nDESCRIPTION: Markdown formatted changelog showing version history with commit references and package dependency updates. Each version includes a link to source tree and comparison with previous version.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/theme-samples/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## [8.1.13](https://github.com/microsoft/fluentui/tree/@fluentui/theme-samples_v8.1.13)\n\nMon, 24 May 2021 07:35:28 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/theme-samples_v8.1.12..@fluentui/theme-samples_v8.1.13)\n\n### Patches\n\n- Bump @fluentui/react to v8.14.14 ([PR #18221](https://github.com/microsoft/fluentui/pull/18221) by tristan.watanabe@gmail.com)\n```\n\n----------------------------------------\n\nTITLE: Suggestions Component Interfaces for Suggestion Items in TypeScript\nDESCRIPTION: Interfaces for suggestion items within the Suggestions component, defining props for rendering, selection, and removal of individual suggestion items.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_185\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface ISuggestionItemProps<T> {\n    className?: string;\n    componentRef?: IRefObject<ISuggestionsItem>;\n    id?: string;\n    isSelectedOverride?: boolean;\n    onClick: (ev: React_2.MouseEvent<HTMLButtonElement>) => void;\n    onRemoveItem: (ev: React_2.MouseEvent<HTMLButtonElement>) => void;\n    removeButtonAriaLabel?: string;\n    removeButtonIconProps?: IIconProps;\n    RenderSuggestion: (item: T, suggestionItemProps: ISuggestionItemProps<T>) => JSX.Element;\n    showRemoveButton?: boolean;\n    styles?: IStyleFunctionOrObject<ISuggestionsItemStyleProps, ISuggestionsItemStyles>;\n    suggestionModel: ISuggestionModel<T>;\n    theme?: ITheme;\n}\n\n// @public\nexport interface ISuggestionModel<T> {\n    ariaLabel?: string;\n    item: T;\n    selected: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Standard and Enhanced HTML Results for Trigger with disableButtonEnhancement\nDESCRIPTION: The HTML snippet illustrates the output of using the `Trigger` component with and without the `disableButtonEnhancement` property. It demonstrates the removals of automatic ARIA attributes on button-like elements when the enhancement is disabled.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/triggers-and-multiple-layers-of-button-handling.md#2025-04-20_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n<button onclick=\"fn\" onkeydown=\"fn\" onkeyup=\"fn\" role=\"button\" tabindex=\"0\">Trigger something</button>\n<div onclick=\"fn\" onkeydown=\"fn\" onkeyup=\"fn\" role=\"button\" tabindex=\"0\">Trigger something</div>\n<button>Trigger something</button>\n\n<button>Trigger something</button>\n<div>Trigger something</div>\n<button>Trigger something</button>\n```\n\n----------------------------------------\n\nTITLE: Implementing TagPicker Hook with Event Callbacks\nDESCRIPTION: Implementation of useTagPicker hook showing how event callbacks are wrapped and passed to the underlying ComboBox component with proper event and data handling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/patterns/change-event-callbacks.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst comboboxState = useComboboxBaseState({\n  ...props,\n  onOptionSelect: useEventCallback((event, data) =>\n    props.onOptionSelect?.(event, {\n      selectedOptions: data.selectedOptions,\n      value: data.optionValue,\n      type: event.type,\n      event,\n    } as TagPickerOnOptionSelectData),\n  ),\n  onOpenChange: useEventCallback((event, data) =>\n    props.onOpenChange?.(event, {\n      ...data,\n      type: event.type,\n      event,\n    } as TagPickerOnOpenChangeData),\n  ),\n  activeDescendantController,\n  editable: true,\n  multiselect: true,\n  size: 'medium',\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Unselectable Tree Item Behavior\nDESCRIPTION: This fix ensures that un-selectable tree items are correctly displayed when the selectable prop is set to false, preventing user confusion.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/CHANGELOG.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nFix `Tree` to have un-selectable `treeItem` with `selectable` prop false @yuanboxue-amber ([#15170](https://github.com/microsoft/fluentui/pull/15170))\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for React Avatar Components in JavaScript\nDESCRIPTION: This JavaScript snippet configures Storybook to include stories from the react-avatar package of @fluentui. The configuration uses glob patterns to specify the file paths of the stories, enabling their inclusion in the Storybook environment. No additional dependencies are needed apart from Node.js and Storybook being set up. The snippet does not define any public API and simply maps the file paths for story discovery.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-avatar/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-avatar/stories/src/**/*.stories.mdx', '../packages/react-components/react-avatar/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tooltip Positioning Options in TypeScript\nDESCRIPTION: This snippet defines a constant object TooltipPositioningOption with various positioning options for tooltips. It includes positions like above, below, before, and after, with specific alignment variations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_84\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const TooltipPositioningOption: {\n    readonly 'above-start': \"block-start span-inline-end\";\n    readonly above: \"block-start\";\n    readonly 'above-end': \"block-start span-inline-start\";\n    readonly 'below-start': \"block-end span-inline-end\";\n    readonly below: \"block-end\";\n    readonly 'below-end': \"block-end span-inline-start\";\n    readonly 'before-top': \"inline-start span-block-end\";\n    readonly before: \"inline-start\";\n    readonly 'before-bottom': \"inline-start span-block-start\";\n    readonly 'after-top': \"inline-end span-block-end\";\n    readonly after: \"inline-end\";\n    readonly 'after-bottom': \"inline-end span-block-start\";\n};\n```\n\n----------------------------------------\n\nTITLE: Style Interfaces for CalendarDay\nDESCRIPTION: Interfaces defining style props and styles for the CalendarDay component, extending CalendarDayGridStyleProps with additional styling options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-calendar-compat/library/etc/react-calendar-compat.api.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport interface CalendarDayStyleProps extends CalendarDayGridStyleProps {\n    className?: string;\n    headerIsClickable?: boolean;\n    showWeekNumbers?: boolean;\n}\n\n// @internal (undocumented)\nexport interface CalendarDayStyles {\n    disabledStyle: string;\n    header: string;\n    headerIconButton: string;\n    monthAndYear: string;\n    monthComponents: string;\n    root: string;\n}\n```\n\n----------------------------------------\n\nTITLE: DialogTrigger Component Definition\nDESCRIPTION: Defines the DialogTrigger component as a React function component (FC) accepting DialogTriggerProps. This component is used to trigger the opening or closing of a dialog.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/etc/react-dialog.api.md#2025-04-20_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const DialogTrigger: React_2.FC<DialogTriggerProps>;\"\n```\n\n----------------------------------------\n\nTITLE: Adding Tokens to Fluent UI Theme TypeScript\nDESCRIPTION: This TypeScript snippet shows how to integrate defined tokens into the Fluent UI theme structure. It enhances the 'Theme' type by including 'ButtonTokens', thus making these tokens available across various components. Developers need '@fluentui/react-components' for seamless integration.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/extended-design-tokens.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Tokens/src/types.ts\\nimport { ButtonTokens } from '@fluentui/react-components';\\n\\nexport type Theme = FontSizeTokens &\\n  LineHeightTokens &\\n  BorderRadiusTokens &\\n  StrokeWidthTokens &\\n  HorizontalSpacingTokens &\\n  VerticalSpacingTokens &\\n  DurationTokens &\\n  CurveTokens &\\n  ShadowTokens &\\n  ShadowBrandTokens &\\n  FontFamilyTokens &\\n  FontWeightTokens &\\n  ColorPaletteTokens &\\n  ColorStatusTokens &\\n  ColorTokens &\\n  ButtonTokens; // Addition\n```\n\n----------------------------------------\n\nTITLE: List Component in v9 (Migrated from v0 Shorthand API)\nDESCRIPTION: Example of using the List component in Fluent UI React v9, migrated from v0 Shorthand API. It demonstrates how to adapt the structured data approach to the composition model.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-list/library/docs/MIGRATION.md#2025-04-20_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst items = [\n  {\n    key: 'robert',\n    header: 'Robert Tolbert',\n    content: 'Program the sensor to the SAS alarm through the haptic SQL card!',\n  },\n  {\n    key: 'celeste',\n    header: 'Celeste Burton',\n    content: 'Use the online FTP application to input the multi-byte application!',\n  },\n];\n\nconst MyList = () => {\n  return (\n    <List>\n      {items.map(item => {\n        <ListItem key={item.key}>\n          <h2>{item.header}</h2>\n          <p>{item.content}></p>\n        </ListItem>;\n      })}\n    </List>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing useControllableValue Hook in TypeScript\nDESCRIPTION: Definition of the useControllableValue hook, which manages the current value for a component that could be either controlled or uncontrolled.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-hooks/README.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useControllableValue<TValue, TElement extends HTMLElement>(\n  controlledValue: TValue | undefined,\n  defaultUncontrolledValue: TValue | undefined,\n): Readonly<[TValue | undefined, (update: React.SetStateAction<TValue | undefined>) => void]>;\n\nfunction useControllableValue<\n  TValue,\n  TElement extends HTMLElement,\n  TCallback extends ChangeCallback<TElement, TValue> | undefined,\n>(\n  controlledValue: TValue | undefined,\n  defaultUncontrolledValue: TValue | undefined,\n  onChange: TCallback,\n): Readonly<\n  [TValue | undefined, (update: React.SetStateAction<TValue | undefined>, ev: React.FormEvent<TElement>) => void]\n>;\n\ntype ChangeCallback<TElement extends HTMLElement, TValue> = (\n  ev: React.FormEvent<TElement> | undefined,\n  newValue: TValue | undefined,\n) => void;\n```\n\n----------------------------------------\n\nTITLE: Proposed Changes to Tooltip API for Slot Usage\nDESCRIPTION: This snippet suggests modifications to the Tooltip API, proposing the transformation of the content property into a true slot for better composition, thus improving the overall integration with other components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/components/tooltip-api-alignment.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction App() {\n  return (\n    <>\n      {/*  Before */}\n      <Tooltip content=\"Foo\" />\n      <Tooltip content=\"Foo\" className=\"bar\" />\n\n      {/* After */}\n      <Tooltip content=\"Foo\" />\n      <Tooltip content={{ children: 'Foo', className: 'bar' }} />\n      {/*      👆 if \"className\" will passed directly to \"Tooltip\" we will get a TS error */}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Empty TypeScript API Report for @fluentui/react-theme-sass\nDESCRIPTION: This empty TypeScript code block represents the current state of the API report for the @fluentui/react-theme-sass package. It suggests that either the package has no public API to document or the report generation process resulted in an empty output.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-theme-sass/etc/react-theme-sass.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// (No @packageDocumentation comment for this package)\n```\n\n----------------------------------------\n\nTITLE: Implementing Size Helper Functions for Persona Components\nDESCRIPTION: Utility functions for working with PersonaSize values, including a function to convert numeric size values to boolean flags and a mapping of size enum values to pixel dimensions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_261\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport const sizeBoolean: (size: PersonaSize) => {\n    isSize8: boolean;\n    isSize10: boolean;\n    isSize16: boolean;\n    isSize24: boolean;\n    isSize28: boolean;\n    isSize32: boolean;\n    isSize40: boolean;\n    isSize48: boolean;\n    isSize56: boolean;\n    isSize72: boolean;\n    isSize100: boolean;\n    isSize120: boolean;\n};\n\n// @public (undocumented)\nexport const sizeToPixels: {\n    [key: number]: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing DOM Structure for Label\nDESCRIPTION: Shows the DOM structure generated by the Label component including required indicator.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-label/library/docs/Spec.md#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<label {/*Label*/} class=\"...\">\n  I'm a Label\n  <span {/*required*/} class=\"...\">*</span>\n</label>\n```\n\n----------------------------------------\n\nTITLE: Test Images Constant in TypeScript\nDESCRIPTION: This constant object defines a collection of test image URLs used throughout the application for testing and development purposes. It ensures that UI elements can reference valid image links.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/example-data/etc/example-data.api.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport const TestImages: {\n    choiceGroupBarUnselected: string;\n    choiceGroupBarSelected: string;\n    choiceGroupPieUnselected: string;\n    choiceGroupPieSelected: string;\n    documentPreview: string;\n    documentPreviewTwo: string;\n    documentPreviewThree: string;\n    iconOne: string;\n    iconPpt: string;\n    personaFemale: string;\n    personaMale: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Scaffolding Generator Structure in Shell\nDESCRIPTION: This snippet demonstrates the directory structure for scoping a generator using NX tooling. Key directories include 'files/' for templates and 'lib/' for module divisions. It also highlights the naming convention for files ending with '__tmpl__'.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/STYLE-GUIDE.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\\n<generator-name>/\\n|- files/\\n    |- some-file.ts__tmpl__\\n    |- config.json__tmpl__\\n|- lib/\\n    |- utils.ts\\n    |- utils.spec.ts\\n    |- add-foo.ts\\n    |- add-foo.spec.ts\\n|- index.ts\\n|- index.spec.ts\\n|- schema.ts\\n|- schema.json\\n|- README.md\\n\n```\n\n----------------------------------------\n\nTITLE: Defining Icon Context and Provider in TypeScript for FluentUI\nDESCRIPTION: This snippet defines the IconContext, IconProvider component, and related types for managing icon subsets in FluentUI. It also includes a hook for accessing the icon subset.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-icon-provider/etc/react-icon-provider.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { IIconSubset } from '@fluentui/style-utilities';\nimport * as React_2 from 'react';\n\n// @public\nexport const IconContext: React_2.Context<IIconSubset | undefined>;\n\n// @public\nexport const IconProvider: React_2.FunctionComponent<IconProviderProps>;\n\n// @public\nexport interface IconProviderProps extends React_2.HTMLAttributes<HTMLDivElement> {\n    icons: IIconSubset;\n}\n\n// @public\nexport const useIconSubset: () => IIconSubset | undefined;\n\n// (No @packageDocumentation comment for this package)\n```\n\n----------------------------------------\n\nTITLE: Package Version Reference Links\nDESCRIPTION: Markdown links to specific package versions and commit comparisons\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[5.16.17](https://github.com/microsoft/fluentui/tree/@fluentui/react-charting_v5.16.17)\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-charting_v5.16.16..@fluentui/react-charting_v5.16.17)\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Path Aliases for Fluent UI Convergence Packages\nDESCRIPTION: This snippet shows the configuration of TypeScript path aliases in a base tsconfig.json file. It sets up aliases for various Fluent UI packages, allowing for easier imports and better development experience.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/shared/build-system/01_convergence_devstack.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"@fluentui/ts-config-common\",\n  \"compilerOptions\": {\n    \"lib\": [\"dom\", \"es2017\", \"dom.iterable\"],\n    \"rootDir\": \".\",\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@fluentui/react-button\": [\"packages/react-button/src/index.ts\"],\n      \"@fluentui/react-hooks\": [\"packages/react-hooks/src/index.ts\"]\n      // other aliases...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Output from Button Custom Slot Rendering - HTML\nDESCRIPTION: This HTML comment provides a simplified representation of the DOM output generated when using the children function to customize a slot's rendering, illustrating how additional elements can be introduced.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Slots.md#2025-04-20_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<!-- 💡 Simplified DOM output -->\n<button class=\"ms-Button\">\n  <!-- 👇 An additional element was added to markup -->\n  <div id=\"icon-wrapper\">\n    <span class=\"ms-Button-icon\" id=\"icon-slot\">\n      <span class=\"ms-Icon\"><svg /></span>\n    </span>\n  </div>\n</button>\n```\n\n----------------------------------------\n\nTITLE: Function to Build IColumn Configurations\nDESCRIPTION: The buildColumns function generates column configurations, handling resizing, clicking, sorting, and grouping actions in a data table structure. It accepts parameters such as items, canResizeColumns, onColumnClick, among others to tailor column behaviors.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function buildColumns(items: any[], canResizeColumns?: boolean, onColumnClick?: (ev: React_2.MouseEvent<HTMLElement>, column: IColumn) => void, sortedColumnKey?: string, isSortedDescending?: boolean, groupedColumnKey?: string, isMultiline?: boolean, columnActionsMode?: ColumnActionsMode): IColumn[];\n```\n\n----------------------------------------\n\nTITLE: Defining Fluent Parameters Interface in TypeScript\nDESCRIPTION: This snippet defines the 'FluentParameters' interface which extends Storybook's Parameters and includes customizable options for configuration. It includes parameters for layout direction (LTR/RTL), theme, mode (default/vr-test), and a structure for ‘reactStorybookAddon’ to manage disabled decorators.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-storybook-addon/etc/react-storybook-addon.api.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface FluentParameters extends Parameters_2 {\n    // (undocumented)\n    dir?: 'ltr' | 'rtl';\n    // (undocumented)\n    fluentTheme?: ThemeIds;\n    // (undocumented)\n    mode?: 'default' | 'vr-test';\n    // (undocumented)\n    reactStorybookAddon?: {\n        disabledDecorators: ['AriaLive' | 'FluentProvider' | 'ReactStrictMode'];\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Announcing Load Progress with FluentUI Announced\nDESCRIPTION: This code snippet demonstrates how to use the `Announced` component in FluentUI to announce the progress of a page loading.  It renders the `Announced` component with a message indicating the completion status (e.g., '50% complete'). The `id` prop is used for proper screen reader management.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-examples/src/react/Announced/docs/Asynchronous/Overview.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\npublic render(): JSX.Element {\n  return (\n    <Announced\n      id={announcedId}\n      message='50% complete'\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling className Prop in Custom React Component\nDESCRIPTION: This snippet demonstrates the correct way to handle the `className` prop in a custom React component. By passing the `className` prop to the underlying `Button` component, the component can correctly merge and apply CSS classes from parent components like `Fade`.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/motion-definition-n-apis.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyButton() {\n  return <Button className={props.className}>Hello world!</Button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the moveOutWithDefaultAction Function Type\nDESCRIPTION: This snippet defines a TypeScript function type that specifies a method for handling movement actions in a user interface. The function accepts a boolean indicating the direction (backwards) and a KeyboardEvent related to the action. This setup is used in scenarios where keyboard accessibility is important.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tabster/etc/react-tabster.api.md#2025-04-20_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nmoveOutWithDefaultAction: (backwards: boolean, relatedEvent: KeyboardEvent) => void;\n```\n\n----------------------------------------\n\nTITLE: Card Implementation - FluentUI v9\nDESCRIPTION: Equivalent implementation using the new Card component in FluentUI v9, demonstrating horizontal orientation with preview image, avatar, and text content.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Card/Card.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { Text, Avatar, Caption1 } from '@fluentui/react-components';\nimport { Card, CardHeader, CardPreview } from '@fluentui/react-card/unstable';\n\nexport const SizedCard = () => {\n  const styles = useStyles();\n\n  return (\n    <Card size=\"small\" orientation=\"horizontal\">\n      <CardPreview>\n        <img src=\"logo.svg\" alt=\"Company Logo\" />\n      </CardPreview>\n\n      <CardHeader\n        image={<Avatar badge={{ status: 'available' }} image={{ src: 'avatar.svg' }} />}\n        header={<Text weight=\"semibold\">Strategy 2021</Text>}\n        description={<Caption1>https://aka.ms/fluentui</Caption1>}\n      />\n    </Card>\n  );\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering a Fluent UI PrimaryButton in React\nDESCRIPTION: Example of importing and rendering a PrimaryButton component from @fluentui/react in a React application.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/using-local-unpublished-version-of-the-lib-with-a-local-React-app.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { render } from 'react-dom';\nimport { PrimaryButton } from '@fluentui/react';\n\n// ...\n\nrender(<PrimaryButton />, document.getElementById('content'));\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react-accordion to version v9.0.0-rc.6\nDESCRIPTION: This snippet documents the update for the @fluentui/react-accordion package to version v9.0.0-rc.6. It is part of a batch of updates that includes multiple packages being bumped in version.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/vr-tests-react-components/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react-accordion to v9.0.0-rc.6 ([PR #21995](https://github.com/microsoft/fluentui/pull/21995) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Implementing NavDivider Styles\nDESCRIPTION: Custom styles implementation for NavDivider with specific styling opinions\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/patterns/basic-recomposition.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { makeStyles, mergeClasses } from '@griffel/react';\nimport { useDividerStyles_unstable, type DividerSlots } from '@fluentui/react-divider';\nimport type { SlotClassNames } from '@fluentui/react-utilities';\nimport type { NavDividerState } from './NavDivider.types';\n\nexport const navDividerClassNames: SlotClassNames<DividerSlots> = {\n  root: 'fui-NavDivider',\n  wrapper: 'fui-NavDivider__wrapper',\n};\n\nconst useStyles = makeStyles({\n  root: {\n    flexGrow: 0,\n    marginTop: '4px',\n    marginBottom: '4px',\n  },\n});\n\n/**\n * Apply styling to the NavDivider slots based on the state\n */\nexport const useNavDividerStyles_unstable = (state: NavDividerState): NavDividerState => {\n  'use no memo';\n\n  const styles = useStyles();\n\n  state.root.className = mergeClasses(navDividerClassNames.root, styles.root, state.root.className);\n  state.wrapper.className = mergeClasses(navDividerClassNames.wrapper, state.wrapper.className);\n\n  useDividerStyles_unstable(state);\n  return state;\n};\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format - FluentUI VR Tests\nDESCRIPTION: Standard format for documenting version changes in the FluentUI VR Tests package, including version number, date, and dependency updates.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/vr-tests/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.0.0](https://github.com/microsoft/fluentui/tree/@fluentui/vr-tests_v1.0.0)\n\nThu, 09 Jun 2022 07:45:28 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/vr-tests_v1.0.0..@fluentui/vr-tests_v1.0.0)\n\n### Patches\n\n- Bump @fluentui/react to v8.72.3 ([PR #23445](https://github.com/microsoft/fluentui/pull/23445) by beachball)\n- Bump @fluentui/react-experiments to v8.9.1 ([PR #23445](https://github.com/microsoft/fluentui/pull/23445) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Integrating PortalCompatProvider in a Fluent UI Application\nDESCRIPTION: This JSX snippet demonstrates how to use the PortalCompatProvider within a FluentProvider to render components in portals, ensuring compatibility across different Fluent UI packages. No additional configuration is needed beyond importing the required modules.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-portal-compat/README.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { FluentProvider } from '@fluentui/react-components';\nimport { PortalCompatProvider } from '@fluentui/react-portal-compat';\n\nfunction App() {\n  return (\n    <FluentProvider>\n      <PortalCompatProvider>{/* your components */}</PortalCompatProvider>\n    </FluentProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Version History Entry\nDESCRIPTION: Example version history entry showing version number, date, and patch changes\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/theme-samples/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [8.7.23](https://github.com/microsoft/fluentui/tree/@fluentui/theme-samples_v8.7.23)\n\nWed, 09 Nov 2022 07:48:12 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/theme-samples_v8.7.22..@fluentui/theme-samples_v8.7.23)\n\n### Patches\n\n- Bump @fluentui/react to v8.101.0 ([PR #25564](https://github.com/microsoft/fluentui/pull/25564) by beachball)\n- Bump @fluentui/set-version to v8.2.3 ([PR #25564](https://github.com/microsoft/fluentui/pull/25564) by beachball)\n- Bump @fluentui/scheme-utilities to v8.3.19 ([PR #25564](https://github.com/microsoft/fluentui/pull/25564) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Comparing Changes Between Versions in Markdown\nDESCRIPTION: Markdown syntax used to link to GitHub comparisons between different versions of the component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-switch/library/CHANGELOG.md#2025-04-20_snippet_16\n\nLANGUAGE: Markdown\nCODE:\n```\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-switch_v9.0.0-rc.1..@fluentui/react-switch_v9.0.0-rc.3)\n```\n\n----------------------------------------\n\nTITLE: CalendarYear Component and Related Interfaces\nDESCRIPTION: Declaration of the CalendarYear component and its associated interfaces for rendering the year view in the calendar.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-calendar-compat/library/etc/react-calendar-compat.api.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport const CalendarYear: React_2.FunctionComponent<CalendarYearProps>;\n\n// @internal (undocumented)\nexport interface CalendarYearHeaderProps extends CalendarYearProps, CalendarYearRange {\n    animateBackwards?: boolean;\n    onSelectNext?: () => void;\n    onSelectPrev?: () => void;\n}\n\n// @internal (undocumented)\nexport interface CalendarYearProps {\n    animationDirection?: AnimationDirection;\n    className?: string;\n    componentRef?: React_2.RefObject<ICalendarYear>;\n    highlightCurrentYear?: boolean;\n    highlightSelectedYear?: boolean;\n    maxYear?: number;\n    minYear?: number;\n    navigatedYear?: number;\n    navigationIcons: CalendarNavigationIcons;\n    onHeaderSelect?: (focus: boolean) => void;\n    onRenderTitle?: (props: CalendarYearHeaderProps) => React_2.ReactNode;\n    onRenderYear?: (year: number) => React_2.ReactNode;\n    onSelectYear?: (year: number) => void;\n    selectedYear?: number;\n    strings?: CalendarYearStrings;\n}\n\n// @internal (undocumented)\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 9.3.0\nDESCRIPTION: Changelog entry showing version update to 9.3.0 with minor changes and dependency bumps.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-aria/library/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.3.0](https://github.com/microsoft/fluentui/tree/@fluentui/react-aria_v9.3.0)\n\nWed, 02 Nov 2022 11:57:47 GMT\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-aria_v9.2.3..@fluentui/react-aria_v9.3.0)\n\n### Minor changes\n\n- exposes internal typings: ARIAButtonAlteredProps and ARIAButtonElement\n```\n\n----------------------------------------\n\nTITLE: Refactoring useAccordionHeaderStyles_unstable in TypeScript\nDESCRIPTION: This snippet shows the changes to the useAccordionHeaderStyles_unstable function to stop mutating state and return a styles object instead.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/slot-children-render-function.md#2025-04-20_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n-export const useAccordionHeaderStyles_unstable = (state: AccordionHeaderState) => {\n+export const useAccordionHeaderStyles_unstable = (state: AccordionHeaderState): AccordionHeaderStyles => {\n  const styles = useStyles();\n- state.root.className = mergeClasses(\n-   accordionHeaderClassNames.root,\n-   styles.root,\n-   state.inline && styles.rootInline,\n-   state.disabled && styles.rootDisabled,\n-   state.root.className,\n- );\n\n- if (state.icon) {\n-    state.icon.className = mergeClasses(\n-     accordionHeaderClassNames.icon,\n-     styles.icon,\n-      state.icon.className\n-   );\n- }\n- return state;\n+ return {\n+   root: mergeClasses(\n+     accordionHeaderClassNames.root,\n+     styles.root,\n+     state.inline && styles.rootInline,\n+     state.disabled && styles.rootDisabled,\n+     state.root.props.className,\n+   );\n+   icon: state.icon && mergeClasses(\n+     accordionHeaderClassNames.icon,\n+     styles.icon,\n+     state.icon.props.className\n+   )\n+ }\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Icons with Atlaskit in HTML\nDESCRIPTION: Documenting how Atlaskit generates icon elements using SVG within a <span> tag. The example demonstrates the assignment of class names for styling and the use of 'aria-label' for accessibility purposes. Icons from this library are primarily SVG-based and require direct import for execution.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Icon.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"sc-gzVnrw fihEGT\" aria-label=\"HomeIcon\">\n  <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" focusable=\"false\" role=\"presentation\">\n    <path\n      d=\"M10 19v-4.5a2 2 0 1 1 4 0V19h4a1 1 0 0 0 1-1v-7.831l-6.293-6.296a1 1 0 0 0-1.414 0L5 10.169V18a1 1 0 0 0 1 1h4zm11-6.83V18a3 3 0 0 1-3 3H6a3 3 0 0 1-3-3v-5.83l-.04.04c-.39.39-1.03.39-1.42 0-.39-.39-.39-1.03 0-1.42l8.339-8.331a3 3 0 0 1 4.242 0l8.339 8.331c.39.39.39 1.03 0 1.42-.39.39-1.03.39-1.42 0l-.04-.04z\"\n      fill=\"currentColor\"\n    ></path>\n  </svg>\n</span>\n```\n\n----------------------------------------\n\nTITLE: Defining Griffel Conformance Testing Types and Exports\nDESCRIPTION: Defines a makeStylesTests object and OverridesWinTestOptions type for Griffel style testing in FluentUI. The makeStylesTests object provides test utilities while OverridesWinTestOptions type specifies options for overrides testing with an optional callCount parameter.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-conformance-griffel/etc/react-conformance-griffel.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TestObject } from '@fluentui/react-conformance';\n\n// @public (undocumented)\nconst makeStylesTests: TestObject;\nexport default makeStylesTests;\n\n// @public (undocumented)\nexport type OverridesWinTestOptions = {\n    callCount?: number;\n};\n\n// (No @packageDocumentation comment for this package)\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-utilities version\nDESCRIPTION: This patch updates the version of the `@fluentui/react-utilities` dependency.  Bumping this package ensures that the `@fluentui/react-badge` component uses the latest utility functions and bug fixes available in the utilities package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nBump @fluentui/react-utilities to v9.18.22 ([PR #34032](https://github.com/microsoft/fluentui/pull/34032) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Applying Styles with CSS Classes in React\nDESCRIPTION: This snippet demonstrates how to apply styles using CSS classes in a React component. It utilizes `useStyles` to retrieve CSS classes and `mergeClasses` to combine them with existing classes on the child element.  The `React.cloneElement` function is used to apply the merged classes to the child.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/motion-definition-n-apis.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction Fade() {\n  const classes = useStyles();\n  const state = useAnimationState();\n\n  return React.cloneElement(props.children, { className: mergeClasses(props.children.className, classes[state]) });\n}\n```\n\n----------------------------------------\n\nTITLE: TagPickerInput Props Type\nDESCRIPTION: Defines the props interface for the TagPickerInput component. It includes properties from ComponentProps and ComboboxProps, as well as disabled and value properties. Omit is used to exclude children, size, and defaultValue.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport type TagPickerInputProps = Omit<ComponentProps<Partial<TagPickerInputSlots>>, 'children' | 'size' | 'defaultValue'> & Pick<ComboboxProps, 'clearable' | 'appearance'> & {\n    disabled?: boolean;\n    value?: string;\n};\"\n```\n\n----------------------------------------\n\nTITLE: AccordionItem Component Definition in TypeScript\nDESCRIPTION: Defines the AccordionItem class that extends BaseAccordionItem with various configuration properties. It includes options for size, block display, and marker position customization.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-different-release-tags) This symbol has another declaration with a different release tag\n// Warning: (ae-internal-mixed-release-tag) Mixed release tags are not allowed for \"AccordionItem\" because one of its declarations is marked as @internal\n//\n// @public\nexport class AccordionItem extends BaseAccordionItem {\n    block: boolean;\n    blockChanged(prev: boolean, next: boolean): void;\n    markerPosition?: AccordionItemMarkerPosition;\n    markerPositionChanged(prev: AccordionItemMarkerPosition | undefined, next: AccordionItemMarkerPosition | undefined): void;\n    size?: AccordionItemSize;\n    sizeChanged(prev: AccordionItemSize | undefined, next: AccordionItemSize | undefined): void;\n}\n\n// @internal\nexport interface AccordionItem extends StartEnd {\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme Tokens (After Flattening) in JavaScript\nDESCRIPTION: This code snippet demonstrates how theme tokens would be accessed after flattening the theme object in FluentUI. The flattened structure allows direct access to tokens using a single property lookup, simplifying token discovery and potentially improving performance during theme merging.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/theme-shape.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/* After */\ntheme.aliasColorsRedNeutral;\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Custom Style Hook in Button Component\nDESCRIPTION: This snippet shows how to access a global custom styling hook within the Button component. It demonstrates the use of the customizer to modify button styles after applying the default styles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/custom-styling.md#2025-04-20_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Button: ForwardRefComponent<ButtonProps> = React.forwardRef((props, ref) => {\n  const state = useButton_unstable(props, ref);\n\n  useButtonStyles_unstable(state);\n\n  fuiCustomizer.useButtonCustomStyles_unstable(state);\n\n  return renderButton_unstable(state);\n}) as ForwardRefComponent<ButtonProps>;\n```\n\n----------------------------------------\n\nTITLE: Storybook with Expanded Controls Table\nDESCRIPTION: This TypeScript snippet configures Storybook to render an expanded descriptions table in the Canvas Control pane, providing more detailed API information directly from JSDoc comments. It enhances documentation readability and user experience. The setup is done via the root Storybook configuration file.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/authoring-stories.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const parameters = { controls: { expanded: true } };\n```\n\n----------------------------------------\n\nTITLE: Running Assertion for Visual Regression Diffing - Shell\nDESCRIPTION: This command runs assertions against the actual visual regression scenarios of stories, generating reports in various formats such as HTML and Markdown. The command will fail if any visual differences are detected, which is essential for ensuring the integrity of the VRT pipeline in a CI environment.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/visual-regression-assert/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nvisual-regression-assert assert --baselineDir src/__snapshots__ --outputPath dist/vrt\n```\n\n----------------------------------------\n\nTITLE: Rendering Contribution Links using JSX for Web Platform\nDESCRIPTION: JSX markup for displaying a list of contribution resources for the Fluent UI Web implementation. Uses markdown links inside list elements with custom CSS classes for layout and styling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Overviews/ResourcesPage/docs/default/ResourcesContributionProcess.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ul className=\"md-list--flex\">\n  <li className=\"mdut--full\">[Implement a Fluent UI React control](https://github.com/microsoft/fluentui/wiki/New-Components)</li>\n  <li className=\"mdut--full\">[Give feedback on a control by filing an issue on GitHub](https://github.com/microsoft/fluentui/wiki/Reporting-Issues)</li>\n  <li className=\"mdut--full\">[View current GitHub issues for all Fluent UI React controls](https://github.com/microsoft/fluentui/issues)</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Migrating JSX importSource in FluentUI React Switch\nDESCRIPTION: This code snippet represents a chore update where the package is migrated to use JSX importSource. This likely involves changes to the build configuration and potentially to the source code to ensure compatibility with the new JSX transform.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-switch/library/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: none\nCODE:\n```\n\"- chore: migrate package to use JSX importSource ([PR #28959](https://github.com/microsoft/fluentui/pull/28959) by bernardo.sunderhus@gmail.com)\"\n```\n\n----------------------------------------\n\nTITLE: ProgressBar State Definition\nDESCRIPTION: Defines the ProgressBarState type, which combines ComponentState with required properties from ProgressBarProps ('max', 'shape', 'thickness') and optional properties ('value', 'color'). This type likely represents the internal state of the ProgressBar component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-progress/library/etc/react-progress.api.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n// @public\nexport type ProgressBarState = ComponentState<Required<ProgressBarSlots>> &\n  Required<Pick<ProgressBarProps, 'max' | 'shape' | 'thickness'>> &\n  Pick<ProgressBarProps, 'value' | 'color'>;\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.json for Deep Imports in FluentUI Unstable Packages\nDESCRIPTION: This JSON snippet demonstrates how to configure the package.json file for deep imports in unstable packages of FluentUI. It specifies separate entry points for CommonJS (used by Jest) and ESM (used by webpack) to ensure compatibility across different module systems.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/fixed-versions-for-prerelease.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"main\": \"../lib-commonjs/unstable/index.js\",\n  \"module\": \"../lib/unstable/index.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Object-based Styling in Fluent UI Components (TSX)\nDESCRIPTION: This snippet demonstrates how to define styles for different areas of a component using an object-based approach. It shows how to target specific elements, use selectors, and apply conditional styling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Styles/ThemeSlotsPage/docs/web/ThemeSlotsImplementation.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// Define styling, split out styles for each area.\nconst styles: IComponentStyles {\n  root: { /* styles */ },\n  child1: ['className', { /* styles */ }],\n  child2: { /* styles */ }\n  subComponentStyles: {\n    subComponent: {\n      root: { /* styles */ },\n      child1: { /* styles */ },\n    }\n  }\n}\n\n// In render()\nreturn <Component styles={styles} ... />;\n```\n\n----------------------------------------\n\nTITLE: Implementing ResizeGroup State Management\nDESCRIPTION: Provides a state management function for ResizeGroup component that handles measurement caching and provides the next state based on container dimensions. This enables responsive UI components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_41\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport const getNextResizeGroupStateProvider: (measurementCache?: {\n    getCachedMeasurement: (data: any) => number | undefined;\n    addMeasurementToCache: (data: any, measurement: number) => void;\n}) => {\n    getNextState: (props: IResizeGroupProps, currentState: IResizeGroupState, getElementToMeasureDimension: () => number, newContainerDimension?: number) => IResizeGroupState | undefined;\n    shouldRenderDataForMeasurement: (dataToMeasure: any | undefined) => boolean;\n    getInitialResizeGroupState: (data: any) => IResizeGroupState;\n};\n```\n\n----------------------------------------\n\nTITLE: Generating New ESLint Rule using Shell\nDESCRIPTION: This snippet shows how to use the NX generator to create a new ESLint rule. The generator scaffolds the necessary files and configurations for a new rule within the FluentUI workspace.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/eslint-rules/README.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g @fluentui/workspace-plugin:eslint-rule\n```\n\n----------------------------------------\n\nTITLE: Defining ObserveOptions Interface in TypeScript\nDESCRIPTION: This snippet outlines the ObserveOptions interface, which includes settings for observing item visibility and overflow options. It contains optional parameters to configure the minimum visible items and functions to handle visibility updates.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/priority-overflow/etc/priority-overflow.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface ObserveOptions {\n    minimumVisible?: number;\n    onUpdateItemVisibility: OnUpdateItemVisibility;\n    onUpdateOverflow: OnUpdateOverflow;\n    overflowAxis?: OverflowAxis;\n    overflowDirection?: OverflowDirection;\n    padding?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendered Basic Grid Layout Example with Fluent UI\nDESCRIPTION: A rendered version of the basic ms-Grid layout with demo blocks to visualize the column structure. This shows how the responsive classes affect the layout at different screen sizes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Styles/LayoutPage/docs/web/LayoutGridImplementation.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"ms-Grid\">\n  <div class=\"ms-Grid-row\">\n    <div class=\"ms-Grid-col ms-sm6 ms-md4 ms-lg2\">\n      <div class=\"LayoutPage-demoBlock\">A</div>\n    </div>\n    <div class=\"ms-Grid-col ms-sm6 ms-md8 ms-lg10\">\n      <div class=\"LayoutPage-demoBlock\">B</div>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Editor Supported Packages in TypeScript\nDESCRIPTION: Define custom list of supported packages for live code editor, including dynamic package loading and type definitions\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-docsite-components/README.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IPackageGroup } from '@fluentui/react-monaco-editor';\nimport { defaultSupportedPackages } from '@fluentui/react-monaco-editor/lib/utilities/defaultSupportedPackages';\n\nexport const editorSupportedPackages: IPackageGroup[] = [\n  ...defaultSupportedPackages,\n  {\n    globalName: 'MyPackage',\n    loadGlobal: () => import('my-package'),\n    packages: [\n      {\n        packageName: 'my-package',\n        loadTypes: () => import('!raw-loader!my-package/dist/my-package.d.ts')\n      },\n      {\n        packageName: 'my-package-utilities',\n        loadTypes: () => import('!raw-loader!my-package-utilities/dist/my-package-utilities.d.ts')\n      }\n    ]\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: Simplifying complex selectors in Griffel CSS\nDESCRIPTION: Shows the recommended approach of simplifying complex selectors by applying classes directly to elements, which improves code maintainability and produces more efficient CSS.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/styles-handbook.md#2025-04-20_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeStyles, makeResetStyles, mergeClasses, shorthands } from '@griffel/react';\nimport { tokens } from '@fluentui/react-theme';\n\n// ❌ Don't do\n// Avoid complex selectors i.e. simplify them\nconst useBaseClassName = makeResetStyles({\n  '> .foo-classname': {\n    '> .bar-classname': {\n      '> .baz-classname': {\n        display: 'flex',\n        alignItems: 'center',\n      },\n    },\n  },\n});\n\n// ✅ Do\n// Apply classes directly to an element\nconst useBaseBazClasses = makeResetStyles({\n  display: 'flex',\n  alignItems: 'center',\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic Label with Fluent UI in React\nDESCRIPTION: This snippet defines a React functional component that renders a basic label using the Label component from Fluent UI. It showcases how to use imported UI components from Fluent UI to build user interfaces. The snippet has no external dependencies other than React and Fluent UI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-monaco-editor/src/transpiler/examples/function.txt#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { Label } from '@fluentui/react/lib/Label';\n\nexport const LabelBasicExample = () => {\n  return (\n    <div>\n      <Label>I'm a Label</Label>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Updating getSlots Usage in TypeScript\nDESCRIPTION: This example demonstrates how to update the usage of getSlots function in custom render functions to handle null values for slots.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/docs/MIGRATION-NOTES.md#2025-04-20_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\nconst renderMyComponent = (state: MyComponentState) => {\n-  const { slots, slotProps } = getSlots<MyComponentSlots>(state, ['root', 'slotA', 'slotB']);\n+  const { slots, slotProps } = getSlots<MyComponentSlots>(state);\n\n  return (\n    <slots.root {...slotProps.root}>\n-      <slots.slotA {...slotProps.slotA} />\n-      <slots.slotB {...slotProps.slotB} />\n+      {slots.slotA && <slots.slotA {...slotProps.slotA} />}\n+      {slots.slotB && <slots.slotB {...slotProps.slotB} />}\n    </slots.root>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Toggle Button Using useToggleButton_unstable Hook in React\nDESCRIPTION: Implements a toggle button by extending the base button functionality with customized state management for 'checked' states and accessibility attributes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-utilities/src/compose/README.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst useToggleButton_unstable = (props, ref) => {\n  const state = useButton_unstable(props, ref);\n\n  // Hand a \"checked\" and \"defaultChecked\" state, onClicks to toggle the value,\n  // and appropriate a11y attributes.\n  useChecked(state);\n};\n\nconst ToggleButton = React.forwardRef((props, ref) => {\n  const state = useToggleButton_unstable(props, ref);\n\n  // Inject classNames as needed.\n  state.className = mergeClasses(state.className, styles.root, state.checked && styles.checked);\n\n  return renderButton_unstable(state);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories for FluentUI React Motion\nDESCRIPTION: This code snippet demonstrates how to specify the glob patterns for including Storybook stories from the @fluentui/react-motion package. It configures the 'stories' property in the Storybook module exports to include both MDX and TypeScript/TSX story files.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-motion/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-motion/stories/src/**/*.stories.mdx', '../packages/react-components/react-motion/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Version Update Log Entry\nDESCRIPTION: Markdown changelog entry documenting version updates and dependency bumps for the FluentUI React Input component package\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-input/library/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patches\n\n- Bump @fluentui/react-field to v9.1.33 ([commit](https://github.com/microsoft/fluentui/commit/67b6cc6534e684ed32704dc6c0faee632bb840dc) by beachball)\n- Bump @fluentui/react-jsx-runtime to v9.0.13 ([commit](https://github.com/microsoft/fluentui/commit/67b6cc6534e684ed32704dc6c0faee632bb840dc) by beachball)\n- Bump @fluentui/react-utilities to v9.14.0 ([commit](https://github.com/microsoft/fluentui/commit/67b6cc6534e684ed32704dc6c0faee632bb840dc) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Embedding Tooltip with MenuTrigger in React\nDESCRIPTION: Here, the example tries to have both a Menu and Tooltip on the same element, which leads to failure due to the current implementation strategy of Tooltip not supporting the trigger pattern effectively.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/components/tooltip-api-alignment.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction App() {\n  return (\n    <Menu>\n      <Tooltip content=\"Some content\">\n        <MenuTrigger>\n          <button>Opens only a tooltip</button>\n        </MenuTrigger>\n      </Tooltip>\n    </Menu>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping ThemeProvider and FluentProvider for Migration in React\nDESCRIPTION: This code snippet demonstrates how to wrap both ThemeProvider from Fluent UI v8 and FluentProvider from v9 around components to provide theme context during the migration to v9.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/KeepingDesignConsistent.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ThemeProvider, Button as ButtonV8 } from '@fluentui/react';\nimport { FluentProvider, Button as ButtonV9, webLightTheme } from '@fluentui/react-components';\n\nfunction App() {\n  return (\n    <ThemeProvider>\n      <FluentProvider theme={webLightTheme}>\n        <ButtonV8>Hello migration</ButtonV8>\n        <ButtonV9>Hello migration</ButtonV9>\n      </FluentProvider>\n    </ThemeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IComboBoxState Interface\nDESCRIPTION: Defines the `IComboBoxState` interface, which represents the internal state of the ComboBox component. It includes properties for managing the active descendant for accessibility, the current pending value, focus state and whether the menu is open.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_70\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IComboBoxState {\n    ariaActiveDescendantValue?: string;\n    currentPendingValue?: string;\n    currentPendingValueValidIndex: number;\n    currentPendingValueValidIndexOnHover: number;\n    focusState?: 'none' | 'focused' | 'focusing';\n    isOpen?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IOverflowSetProps Interface in TypeScript\nDESCRIPTION: This interface defines props for an OverflowSet component, including items to display, rendering functions for items and overflow button, and styling options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_155\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface IOverflowSetProps extends React_2.RefAttributes<HTMLElement> {\n    className?: string;\n    componentRef?: IRefObject<IOverflowSet>;\n    items?: IOverflowSetItemProps[];\n    itemSubMenuProvider?: (item: IOverflowSetItemProps) => any[] | boolean | undefined;\n    keytipSequences?: string[];\n    onRenderItem: (item: IOverflowSetItemProps) => any;\n    onRenderOverflowButton: IRenderFunction<any[]>;\n    overflowItems?: IOverflowSetItemProps[];\n    overflowSide?: 'start' | 'end';\n    role?: string;\n    styles?: IStyleFunctionOrObject<IOverflowSetProps, IOverflowSetStyles>;\n    vertical?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating CustomStyleHooksContext for React Components\nDESCRIPTION: This snippet defines a context for custom style hooks using React's createContext function. The context value type is partially defined to accommodate various custom styling hooks while retaining the option for default no-op methods in the implementation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/custom-styling.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport type CustomStyleHooksContextValue = Partial<{ useAccordionHeaderStyles_unstable: CustomStyleHook; //... }>; \n\nexport const CustomStyleHooksContext = React.createContext<CustomStyleHooksContextValue | undefined>(undefined);\n```\n\n----------------------------------------\n\nTITLE: Defining Fluent Story Context in TypeScript\nDESCRIPTION: This snippet defines the 'FluentStoryContext' interface, which extends StoryContext and provides a structure for integrating Fluent UI-specific globals and parameters into the Storybook context. This enables easier access to themed configurations and layout adjustments within stories.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-storybook-addon/etc/react-storybook-addon.api.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface FluentStoryContext extends StoryContext {\n    // (undocumented)\n    globals: FluentGlobals;\n    // (undocumented)\n    parameters: FluentParameters;\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating to intrinsic props in React\nDESCRIPTION: This chore updates the codebase by migrating from getNativeElementProps to getIntrinsicElementProps. This change likely improves the component's compatibility and aligns it with newer practices within the FluentUI framework.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tree/library/CHANGELOG.md#2025-04-20_snippet_8\n\nLANGUAGE: React\nCODE:\n```\nchore: migrate from getNativeElementProps to getIntrinsicElementProps ([PR #29387](https://github.com/microsoft/fluentui/pull/29387) by bernardo.sunderhus@gmail.com)\n```\n\n----------------------------------------\n\nTITLE: Run Migration on All vNext Packages - Shell\nDESCRIPTION: This command executes the migration on all vNext packages, streamlining the migration process for multiple packages at once.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/migrate-converged-pkg/README.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:migrate-converged-pkg --all\n```\n\n----------------------------------------\n\nTITLE: Storybook Execution Flow with Mermaid\nDESCRIPTION: A Mermaid flowchart showing the process of running Storybook from a v8 package of @fluentui/react. It outlines how Storybook setup involves compiling and rendering example components in the @fluentui/react-examples package. The graph serves as a visual guide for the Storybook execution workflow.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-examples/README.md#2025-04-20_snippet_1\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n\nsubgraph \"@fluentui/react start storybook\"\n\nSB(\"run storybook\") --> SBRE(\"storybook setup in @fluentui/react-examples\") --compile and render--> RESF[\"{ComponentName}.{ExampleName}.Example.tsx\"];\n\nend\n```\n\n----------------------------------------\n\nTITLE: Using Font-Based Icons in Fabric Core HTML\nDESCRIPTION: This HTML snippet demonstrates how to use font-based icons in a non-React application using Fabric Core. It shows the correct CSS classes to apply and includes the aria-hidden attribute for accessibility.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Styles/FabricIconsPage/docs/web/FabricIconsUsage.md#2025-04-20_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<i class=\"ms-Icon ms-Icon--Mail\" aria-hidden=\"true\"></i>\n```\n\n----------------------------------------\n\nTITLE: Using makeStyles for Custom Styles in v9\nDESCRIPTION: This snippet illustrates how to transition from using styles prop in v8 for the Persona component to using makeStyles for styling in v9.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/HandlingBreakingChanges.stories.mdx#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n\"\"\"\nconst personaStyles: Partial<IPersonaStyles> = {\n  primaryText: {\n    color: 'steelblue',\n  },\n  secondaryText: {\n    margin: '5px 0 0 10px',\n  },\n};\n\n<Persona\n  imageInitials=\\\"AR\\\"\n  text=\\\"Annie Reid\\\"\n  secondaryText=\\\"Designer\\\"\n  presence={PersonaPresence.online}\n  styles={personaStyles}\n/>;\n\"\"\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\n\"\"\"\nconst usePersonaStyles = makeStyles({\n  primaryText: {\n    color: 'steelblue',\n  },\n  secondaryText: {\n    ...shorthands.margin('5px', '0', '0', '10px'),\n  },\n});\n\nconst personaStyles = usePersonaStyles();\n\n<Persona\n  name=\\\"Anne Reid\\\"\n  primaryText={{ className: personaStyles.primaryText }}\n  secondaryText={{ className: personaStyles.secondaryText, children: 'Available' }}\n  presence={{\n    status: 'available',\n  }}\n/>;\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Card Header in Fluent UI v9 (JSX)\nDESCRIPTION: This snippet demonstrates how to create a card header using the new Card and CardHeader components in Fluent UI v9. It includes a title, image, and description.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Card/CardHeader.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { Text, Caption1 } from '@fluentui/react-components';\nimport { Card, CardHeader } from '@fluentui/react-card/unstable';\n\nexport const Component = () => {\n  return (\n    <Card>\n      <Text size={400}>Revenue stream proposal fiscal year 2016 version02.pptx</Text>\n      <CardHeader\n        image={<img src=\"powerpoint_logo.svg\" />}\n        header={<Text weight=\"bold\">Annie Lindqvist</Text>}\n        description={<Caption1>Created a few minutes ago</Caption1>}\n      />\n    </Card>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: FluentUI Changelog Entries\nDESCRIPTION: Markdown formatted changelog entries documenting version history, changes, and updates to the FluentUI react-focus package. Includes version numbers, dates, and detailed descriptions of changes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-focus/CHANGELOG.md#2025-04-20_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n## [7.7.0](https://github.com/microsoft/fluentui/tree/@fluentui/react-focus_v7.7.0)\n\nTue, 28 Apr 2020 12:34:09 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-focus_v7.6.0..@fluentui/react-focus_v7.7.0)\n\n### Minor changes\n\n- Updating IPoint, x and y references to Point, left and top respectively. ([PR #12722](https://github.com/microsoft/fluentui/pull/12722) by humbertomakotomorimoto@gmail.com)\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for FluentUI Migration Stories in JavaScript\nDESCRIPTION: This code snippet demonstrates how to configure Storybook's module.exports to include story globs for the FluentUI react-migration-v0-v9 package. It specifies paths for both MDX and TypeScript/TSX story files.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-migration-v0-v9/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-migration-v0-v9/stories/src/**/*.stories.mdx', '../packages/react-components/react-migration-v0-v9/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RatingDisplay Class in TypeScript for Fluent UI\nDESCRIPTION: Defines the RatingDisplay class which extends BaseRatingDisplay to implement a component that displays ratings with configurable color, size, and compact mode options. It provides methods to get maximum icons and selected values.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_44\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class RatingDisplay extends BaseRatingDisplay {\n    color?: RatingDisplayColor;\n    compact: boolean;\n    // @override\n    protected getMaxIcons(): number;\n    // @override\n    protected getSelectedValue(): number;\n    size?: RatingDisplaySize;\n}\n```\n\n----------------------------------------\n\nTITLE: Facepile Persona Interface in TypeScript\nDESCRIPTION: This interface specifies the structure for facepile personas, which includes fields for clickable persona details and represents how individual users are portrayed in facepile displays.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/example-data/etc/example-data.api.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal\nexport interface IExampleFacepilePersona {\n    // (undocumented)\n    data?: any;\n    // (undocumented)\n    imageInitials?: string;\n    // (undocumented)\n    imageUrl?: string;\n    // (undocumented)\n    initialsColor?: number;\n    // (undocumented)\n    onClick?: (ev: unknown, persona?: IExampleFacepilePersona) => void;\n    // (undocumented)\n    personaName?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Portal Prop Implementation - TSX\nDESCRIPTION: Shows a discarded solution using a portal prop instead of mountNode, demonstrating why this approach was not chosen.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/components/portal-mount-node.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App() {\n  return (\n    <>\n      <Portal portal={element} />\n      <Portal portal={{ element }} />\n      <Portal portal={{ className: 'foo' }} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: FluentUI React Monaco Editor Version Links\nDESCRIPTION: Markdown links to version history and comparisons for the FluentUI React Monaco Editor package\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-monaco-editor/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[1.6.31](https://github.com/microsoft/fluentui/tree/@fluentui/react-monaco-editor_v1.6.31)\n```\n\n----------------------------------------\n\nTITLE: Configuring Stories for Storybook in JavaScript\nDESCRIPTION: This snippet exports a configuration object for Storybook, specifying glob patterns to locate and include stories related to the React Navigation Preview component. It allows developers to extend Storybook's capabilities by including relevant stories from various source directories.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-nav-preview/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-nav-preview/stories/src/**/*.stories.mdx', '../packages/react-components/react-nav-preview/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories Globs for React Components\nDESCRIPTION: This code snippet exports a configuration object for Storybook, specifying the locations of the stories for the React Field component. The configuration includes a glob pattern that allows Storybook to dynamically include all relevant story files based on the defined paths.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-field/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-field/stories/src/**/*.stories.mdx', '../packages/react-components/react-field/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme Picker Component in TypeScript/React\nDESCRIPTION: React component that creates a theme picker dropdown menu, allowing users to switch between different Fluent UI themes using Storybook globals.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-storybook-addon/README.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { themes, setGlobalTheme, FluentStoryContext, THEME_ID } from '@fluentui/react-storybook-addon';\n\nexport const ThemePicker: React.FC<{ context: FluentStoryContext }> = ({ context }) => {\n  const handleChange = e => {\n    setGlobalTheme(e.target.value);\n  };\n\n  const selectedTheme = themes.find(theme => theme.id === context.globals[THEME_ID]);\n\n  return (\n    <select onChange={handleChange}>\n      {themes.map(theme => (\n        <option selected={selectedTheme.id === theme.id} value={theme.id}>\n          {theme.label}\n        </option>\n      ))}\n    </select>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Appending Items to DetailsList in React (TSX)\nDESCRIPTION: This code snippet demonstrates how to append new items to a DetailsList in a React component using TypeScript (TSX). It shows how to avoid mutating the original array by using the spread syntax to create a new array when updating the state.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-examples/src/react/DetailsList/docs/DetailsListBestPractices.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\npublic appendItems(): void {\n  const { items } = this.state;\n\n  this.setState({\n    items: [...items, ...['Foo', 'Bar']]\n  })\n}\n\npublic render(): JSX.Element {\n  const { items } = this.state;\n\n  return <DetailsList items={items} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Manual RTL handling with useFluent hook\nDESCRIPTION: Demonstrates how to manually handle RTL styles when CSS variables prevent automatic flipping. Uses the useFluent hook to check the current direction and applies appropriate classes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/styles-handbook.md#2025-04-20_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeStyles } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  root: {\n    boxShadow: 'var(--box-shadow)',\n  },\n  rtl: {\n    boxShadow: 'var(--box-shadow-in-rtl)',\n  },\n});\n\nfunction App() {\n  const classes = useClasses();\n  const { dir } = useFluent();\n  const className = mergeClasses(classes.root, dir === 'rtl' && classes.rtl);\n\n  /* --- */\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ToolTipProps in React\nDESCRIPTION: This code snippet reflects the updating of ToolTipProps for consistency within the FluentUI React Tooltip component. The update aimed to ensure a uniform and predictable structure for the properties associated with the ToolTip component, enhancing its usability and maintainability.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tooltip/library/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: React\nCODE:\n```\n\"Updated ToolTipProps for consistency ([commit](https://github.com/microsoft/fluentui/commit/95682da34c48813f7658032ae490d21d2f363b90) by gcox@microsoft.com)\"\n```\n\n----------------------------------------\n\nTITLE: Defining DocumentCard Activity Style Interfaces\nDESCRIPTION: TypeScript interface definitions for DocumentCardActivity style props and styles. These interfaces enable styling customization of the DocumentCardActivity component using FluentUI's styling system.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_94\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IDocumentCardActivityStyleProps {\n    className?: string;\n    multiplePeople?: boolean;\n    theme: ITheme;\n}\n\n// @public (undocumented)\nexport interface IDocumentCardActivityStyles {\n    // (undocumented)\n    activity: IStyle;\n    // (undocumented)\n    avatar: IStyle;\n    // (undocumented)\n    avatars: IStyle;\n    // (undocumented)\n    details: IStyle;\n    // (undocumented)\n    name: IStyle;\n    // (undocumented)\n    root: IStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Popup Content and Styles in Fluent UI from v0 to v9\nDESCRIPTION: Shows how to migrate Popup content with custom styles from v0 to v9 using the makeStyles API. Demonstrates changes in component structure and style application.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Popup.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// in COMPONENT_NAME.tsx\nimport { Popup } from '@fluentui/react-northstar';\n\nexport const Component = props => (\n  <Popup\n    content={{\n      content: props.content,\n      variables: { isCustomPopup: true },\n    }}\n    trigger={props.trigger}\n  />\n);\n\n// in popup-content-styles.ts\nexport const popupContentStyles = {\n  root: ({ variables: { isCustomPopup } }) => ({\n    ...(isCustomPopup && {\n      backgroundColor: colorSchemeBrand.background,\n    }),\n  }),\n};\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// in COMPONENT_NAME.tsx\nimport { Popover, PopoverTrigger, PopoverSurface } from '@fluentui/react-components';\nimport { useStyles } from './COMPONENT_NAME.styles.ts';\n\nexport const Component = () => {\n  const classes = useStyles();\n  return (\n    <Popover positioning={'above-start'} noArrow>\n      <PopoverTrigger>{props.trigger}</PopoverTrigger>\n      <PopoverSurface className={classes.customPopup}>{props.content}</PopoverSurface>\n    </Popover>\n  );\n};\n\n// in COMPONENT_NAME.styles.ts\nimport { makeStyles, tokens } from '@fluentui/react-components';\n\nexport const useStyles = makeStyles({\n  customPopup: {\n    backgroundColor: tokens.colorBrandBackground,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Button Functionality\nDESCRIPTION: The `IButton` interface defines method signatures for common button functionalities like dismissing menus and focusing elements. It outlines essential operations for interactive button components in the Fluent UI framework, facilitating the interaction and visibility management of button states.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_51\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface IButton {\n    dismissMenu: () => void;\n    focus: () => void;\n    openMenu: (shouldFocusOnContainer?: boolean, shouldFocusOnMount?: boolean) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Property Mapping between Fluent React 9 and Fluent Web Components 3\nDESCRIPTION: Explains the differences in property implementation between the React and Web Component versions of RadioGroup, particularly how layout configuration is handled differently.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/radio-group/README.md#2025-04-20_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n**Property Mapping**\n| Fluent UI React 9 | Fluent Web Components | Description of difference |\n|-------------------|-------------------------- |---------------------------|\n| `layout` | `orientation` + `stacked` | React implementation requires user to pass either `\"horizontal\"` or `\"horizontal-stacked\"` through `layout` prop. <br /> WC3 implementation requires user to either pass `\"vertical\"` or \"`horizontal\"` through `orientation` attribute. Additionally, adding the `boolean` attribute `stacked` when the orientation is set to `horizontal` will create the `horizontal-stacked` layout available in FUIR9.\n```\n\n----------------------------------------\n\nTITLE: Material-UI Slider Implementation\nDESCRIPTION: MUI's implementation of the slider component with focus on thumb element and support for multi-range functionality. Uses hidden input for form integration.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Slider.md#2025-04-20_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"MuiSlider-root MuiSlider-colorPrimary\">\n  <span class=\"MuiSlider-rail\"></span>\n  <span class=\"MuiSlider-track\" style=\"left: 0%; width: 20%;\"></span>\n  <input type=\"hidden\" value=\"20\" />\n  <span\n    class=\"MuiSlider-thumb MuiSlider-thumbColorPrimary\"\n    tabindex=\"0\"\n    role=\"slider\"\n    data-index=\"0\"\n    aria-label=\"custom thumb label\"\n    aria-orientation=\"horizontal\"\n    aria-valuemax=\"100\"\n    aria-valuemin=\"0\"\n    aria-valuenow=\"20\"\n    style=\"left: 20%;\"\n  ></span>\n</span>\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme Toggle with DisplayToggle in JSX\nDESCRIPTION: Example of implementing a theme switcher using DisplayToggle component to toggle between light and dark mode persona views, including image display logic.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/PersonaPage/docs/android/PersonaOverview.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<DisplayToggle onText=\"Dark\" offText=\"Light\" label=\"Theme Switcher\">\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/android/updated/img_personaview_01_light.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/android/updated/img_personaview_01_dark.png?text=DarkMode\" />\n\n</DisplayToggle>\n```\n\n----------------------------------------\n\nTITLE: Defining Motion Utility Functions in TypeScript\nDESCRIPTION: This snippet defines utility functions for creating motion components and presence components. It includes functions like createMotionComponent, createPresenceComponent, and createPresenceComponentVariant.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-motion/library/etc/react-motion.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport function createMotionComponent<MotionParams extends Record<string, MotionParam> = {}>(value: AtomMotion | AtomMotion[] | AtomMotionFn<MotionParams>): React_2.FC<MotionComponentProps & MotionParams>;\n\n// @public (undocumented)\nexport function createPresenceComponent<MotionParams extends Record<string, MotionParam> = {}>(value: PresenceMotion | PresenceMotionFn<MotionParams>): PresenceComponent<MotionParams>;\n\n// @public\nexport function createPresenceComponentVariant<MotionParams extends Record<string, MotionParam> = {}>(component: PresenceComponent<MotionParams>, variantParams: Partial<MotionParams>): PresenceComponent<MotionParams>;\n```\n\n----------------------------------------\n\nTITLE: ThemeProvider for React Portal Styling\nDESCRIPTION: This snippet illustrates the workaround for styling React Portals by wrapping them with a new `ThemeProvider`.  This creates a new set of inline CSS variables, which can impact performance and complexity if not properly managed.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/theme-css-variable-insertion.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n\"<Portal>\n    <ThemeProvider> // writes CSS vars inline again\n        <div id=\\\"tooltip\\\"> /n    </ThemeProvider>\n</Portal>\"\n```\n\n----------------------------------------\n\nTITLE: Defining Vertical Stacked Bar Chart Styles Interface in TypeScript\nDESCRIPTION: The IVerticalStackedBarChartStyles interface defines styles specific to the vertical stacked bar chart, promoting a unified aesthetic for the various visual elements presented.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/etc/react-charting.api.md#2025-04-20_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface IVerticalStackedBarChartStyles extends ICartesianChartStyles {\n    barLabel: IStyle;\n    // @deprecated\n    chart?: IStyle;\n    opacityChangeOnHover?: IStyle;\n    // @deprecated\n    xAxisDomain?: IStyle;\n    // @deprecated\n    xAxisText?: IStyle;\n    // @deprecated\n    xAxisTicks?: IStyle;\n    // @deprecated\n    yAxisDomain?: IStyle;\n    // @deprecated\n    yAxisText?: IStyle;\n    // @deprecated\n    yAxisTicks?: IStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Facepile Component in React\nDESCRIPTION: Defines the Facepile component and its base implementation. The component extends React.Component with IFacepileProps interface and includes render methods for handling avatars and aria descriptions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_33\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport const Facepile: React_2.FunctionComponent<IFacepileProps>;\n\n// @public\nexport class FacepileBase extends React_2.Component<IFacepileProps, {}> {\n    constructor(props: IFacepileProps);\n    // (undocumented)\n    static defaultProps: IFacepileProps;\n    // (undocumented)\n    protected onRenderAriaDescription(): \"\" | JSX.Element | undefined;\n    // (undocumented)\n    render(): JSX.Element;\n}\n```\n\n----------------------------------------\n\nTITLE: Default Tab Implementation - Fluent UI Web Component - HTML\nDESCRIPTION: Demonstrates the default horizontal arrangement of tabs where the developer sets the `selected-value` to manage visibility. The ordering of tabs must match the corresponding tab panels for correct functionality.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/tabs/tabs.spec.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<fluent-tab-list>\n  <fluent-tab>One / Left</fluent-tab>\n  <fluent-tab>Two / Middle</fluent-tab>\n  <fluent-tab>Three / Right</fluent-tab>\n\n  <fluent-tab-panel>Panel One</fluent-tab-panel>\n  <fluent-tab-panel>Panel Two</fluent-tab-panel>\n  <fluent-tab-panel>Panel Three</fluent-tab-panel>\n</fluent-tab-list>\n```\n\n----------------------------------------\n\nTITLE: Reusing Visible Text for Button Labels in React\nDESCRIPTION: Demonstrates how to properly label a button by reusing visible text instead of using aria-label. This approach uses aria-labelledby to reference the button text and user name.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Accessibility/ComponentLabelling.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ul>\n  <li>The <code> id=\"userNameId\" </code> applied on the span element with user name.</li>\n  <li>The <code> id=\"removeButtonId\"</code> applied on the \"Remove\" button.</li>\n  <li>The<code> aria-labelledby=\"removeButtonId userNameId\"</code> applied on button.</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Version Update Details\nDESCRIPTION: Markdown changelog entry documenting version changes and dependency updates for the FluentUI React Switch component\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-switch/library/CHANGELOG.md#2025-04-20_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n### Changes\n\n- Bump all v9 components to beta prerelease tag ([PR #20106](https://github.com/microsoft/fluentui/pull/20106) by lingfangao@hotmail.com)\n- Bump @fluentui/react-make-styles to v9.0.0-beta.1 ([PR #20106](https://github.com/microsoft/fluentui/pull/20106) by beachball)\n- Bump @fluentui/react-shared-contexts to v9.0.0-beta.1 ([PR #20106](https://github.com/microsoft/fluentui/pull/20106) by beachball)\n- Bump @fluentui/react-tabster to v9.0.0-beta.1 ([PR #20106](https://github.com/microsoft/fluentui/pull/20106) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Get Focus Outline Style Function\nDESCRIPTION: Defines a function, `getFocusOutlineStyle`, that returns an `IRawStyle` object. It is used to generate consistent focus outline styles using theme colors, inset, width and color.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/style-utilities/etc/style-utilities.api.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n\"export function getFocusOutlineStyle(theme: ITheme, inset?: number, width?: number, color?: string): IRawStyle;\"\n```\n\n----------------------------------------\n\nTITLE: Button Component Composition Example in TSX\nDESCRIPTION: Example of using react-texture to create a recomposable button implementation with customizable slots and properties without runtime performance penalties.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Button.md#2025-04-20_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nconst FooButton = BaseButton.compose({\n  tokens: {},\n  styles: {},\n  slots: {}\n});\n\nconst onClickAlert = () => {\n  alert('Clicked');\n};\n\nrender() {\n  <FooButton onClick={onClickAlert}>\n    Click me!\n  </FooButton>\n}\n```\n\n----------------------------------------\n\nTITLE: Bumping FluentUI React and Monaco Editor with PR\nDESCRIPTION: This snippet shows how to bump the version of both @fluentui/react and @fluentui/react-monaco-editor packages in a single pull request. The pull request number provides a direct link to the changes within the repository. This action is part of maintaining the dependencies for the project.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-docsite-components/CHANGELOG.md#2025-04-20_snippet_21\n\nLANGUAGE: text\nCODE:\n```\n\"- Bump @fluentui/react to v8.111.3 ([PR #29321](https://github.com/microsoft/fluentui/pull/29321) by beachball)\",\n  \"- Bump @fluentui/react-monaco-editor to v1.7.127 ([PR #29321](https://github.com/microsoft/fluentui/pull/29321) by beachball)\"\n```\n\n----------------------------------------\n\nTITLE: Focus Clear Style Function\nDESCRIPTION: Defines a function, `focusClear`, that returns an `IRawStyle` object. This is likely used to remove default browser focus styles and provide a consistent focus appearance across different browsers.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/style-utilities/etc/style-utilities.api.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\"export function focusClear(): IRawStyle;\"\n```\n\n----------------------------------------\n\nTITLE: Component Slots Definition\nDESCRIPTION: Defines themeable slots for DatePicker and Calendar components including root, input, button, and various Calendar-specific elements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Datepicker.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Slot name          | Description                                                    |\n| ------------------ | -------------------------------------------------------------- |\n| root               | Root slot for `Datepicker`.                                    |\n| input              | `Input` slot for datepicker.                                   |\n| button             | Trigger `button` slot for datepicker, used to open `Calendar`. |\n| CalendarControls   | Slot for `Calendar`'s controls.                                |\n| CalendarHeader     | Slot for `Calendar`'s header.                                  |\n| CalendarHeaderCell | Slot for `Calendar`'s header cell.                             |\n| CalendarBody       | Slot for `Calendar`'s body.                                    |\n| CalendarCell       | Slot for `Calendar`'s body cell.                               |\n| CalendarFooter     | Slot for `Calendar`'s footer.                                  |\n```\n\n----------------------------------------\n\nTITLE: TagPickerOptionGroup Slots Type\nDESCRIPTION: Defines the slots available for the TagPickerOptionGroup component using OptionGroupSlots.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport type TagPickerOptionGroupSlots = OptionGroupSlots;\"\n```\n\n----------------------------------------\n\nTITLE: Exporting FileTypeIconMap in FluentUI React\nDESCRIPTION: This snippet refers to the export of the `FileTypeIconMap` within the `@fluentui/react-file-type-icons` package.  This likely makes the map of file extensions to icon components available for external use. It enhances the customizability and accessibility of file type icons within FluentUI React applications.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-file-type-icons/CHANGELOG.md#2025-04-20_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Configuring Storybook stories for react-switch\nDESCRIPTION: This code snippet demonstrates how to configure Storybook to include the stories for the react-switch component. It specifies the glob patterns to find the story files within the react-switch package's stories directory. The stories are defined as MDX and TS/TSX files.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-switch/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-switch/stories/src/**/*.stories.mdx', '../packages/react-components/react-switch/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Card Header in Fluent UI v8 (TSX)\nDESCRIPTION: This snippet shows how to create a card header using DocumentCard components in Fluent UI v8. It includes a title and activity information.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Card/CardHeader.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  DocumentCard,\n  DocumentCardDetails,\n  DocumentCardTitle,\n  DocumentCardActivity,\n} from '@fluentui/react/lib/DocumentCard';\nimport { TestImages } from '@fluentui/example-data';\n\nconst Component = () => (\n  <DocumentCard>\n    <DocumentCardDetails>\n      <DocumentCardTitle title=\"Revenue stream proposal fiscal year 2016 version02.pptx\" shouldTruncate />\n      <DocumentCardActivity\n        activity=\"Created a few minutes ago\"\n        people={{ name: 'Annie Lindqvist', profileImageSrc: TestImages.personaFemale }}\n      />\n    </DocumentCardDetails>\n  </DocumentCard>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Label in Fluent UI v8\nDESCRIPTION: This snippet demonstrates the basic usage of the Label component in Fluent UI v8. It imports the Label from '@fluentui/react/lib/Label' and uses the useId hook for generating a unique ID.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Label.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { Label } from '@fluentui/react/lib/Label';\nimport { useId } from '@fluentui/react-hooks';\n\nexport const LabelBasicExample = () => {\n  const inputId = useId('anInput');\n\n  return (\n    <>\n      <Label htmlFor={inputId}>A Label for an input</Label>\n      <input id={inputId} type=\"text\" />\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using motion Prop as Object for Motion Configuration in React\nDESCRIPTION: This snippet illustrates an alternative approach to motion configuration by passing the motion prop as an object to the component. This method avoids lifting up the state and allows for easier motion disabling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/motion-definition-n-apis.md#2025-04-20_snippet_35\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeStyles, Drawer } from '@fluentui/react-components';\n\nconst useClasses = makeStyles({\n  /* some CSS */\n});\n\nfunction App() {\n  const classes = useClasses();\n  const [visible, setVisible] = useState(false);\n\n  return (\n    <>\n      <Drawer open={visible} motion={{ classes }} />\n      {/* other components */}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Versioning and Release Date Format\nDESCRIPTION: This snippet demonstrates the format used for specifying version numbers and release dates in the changelog. It includes the version number, release date, and a link to the package tree on GitHub for that version.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-image/library/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.0.4](https://github.com/microsoft/fluentui/tree/@fluentui/react-image_v9.0.4)\n\nWed, 03 Aug 2022 16:03:49 GMT\n```\n\n----------------------------------------\n\nTITLE: Optimizing performance with memoizeFunction\nDESCRIPTION: Shows how to optimize style resolution by using `memoizeFunction` from `@fluentui/utilities` to cache the results of `mergeStyleSets` based on the input parameters. This reduces unnecessary recalculations on every render.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/merge-styles/README.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { memoizeFunction } from '@fluentui/utilities';\n\nexport const getClassNames = memoizeFunction((isToggled: boolean) => {\n  return mergeStyleSets({\n    // ...\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories Glob\nDESCRIPTION: This code exports a configuration object for Storybook, specifying the paths for story files related to the React Persona component. The glob patterns allow Storybook to dynamically load all story markdown files and those with TypeScript extensions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-persona/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-persona/stories/src/**/*.stories.mdx', '../packages/react-components/react-persona/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for FluentUI React Link Stories\nDESCRIPTION: This code snippet shows how to configure a Storybook module.exports to include the stories from the @fluentui/react-link package. It specifies the glob patterns needed to capture both MDX and TypeScript/TSX story files.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-link/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-link/stories/src/**/*.stories.mdx', '../packages/react-components/react-link/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server with npm\nDESCRIPTION: This script runs the app in development mode, allowing live reloading on edits and displaying lint errors in the console. No additional dependencies are required to run this script other than a properly set up project environment.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/cra-template/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Applying Styles and Handling Overrides\nDESCRIPTION: Illustrates how to apply defined styles to a component and use mergeClasses to handle dynamic styling based on component props. This ensures that the component adapts to primary or disabled states correctly.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/makeStyles.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Component() {\n  const classes = useStyles();\n\n  return (\n    <>\n      <div className={mergeClasses('ui-component', classes.root, props.primary && classes.rootPrimary)} />\n      {/* 💣 Atomic classes should be merged with mergeClasses(), a usage below will produce wrong results */}\n      <div className={classes.root + classes.rootPrimary} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Inefficient use of mergeClasses - Anti-pattern\nDESCRIPTION: Shows an anti-pattern where mergeClasses is called multiple times for the same element, which can cause performance issues. This should be avoided.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/styles-handbook.md#2025-04-20_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// ❌ Don't do\nfunction Component(props) {\n  const baseClassName = useBaseClassName();\n  const classes = useClasses();\n\n  const classesForFoo = mergeClasses(/* ---- */);\n  const className = mergeClasses(baseClassName, classesForFoo, mergeClasses(/* ---- */), mergeClasses(/* ---- */));\n\n  /* --- */\n}\n```\n\n----------------------------------------\n\nTITLE: Ejecting from Create React App Configuration\nDESCRIPTION: Removes build dependencies and copies configuration files, providing full control over build tools and configurations\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/cra-template/template/README.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run eject\n```\n\n----------------------------------------\n\nTITLE: Implementing Node Connection Method in StandardTree Class\nDESCRIPTION: Method signature for adding link connections between nodes. It calculates and renders the SVG paths that connect parent and child nodes based on their positions, dimensions, and gap settings.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/src/components/TreeChart/TreeChart.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\naddLinktoNodes(\n    parent: any,\n    child: any,\n    leaf: boolean,\n    rectWidth: number,\n    rectHeight: number,\n    gap: number,\n  )\n```\n\n----------------------------------------\n\nTITLE: Dry Run Migration Package - Shell\nDESCRIPTION: This command simulates the migration process without making any changes to the disk, allowing developers to preview the output of the migration.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/migrate-converged-pkg/README.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:migrate-converged-pkg --dry-run\n```\n\n----------------------------------------\n\nTITLE: Comparing CSS output with and without complex selectors\nDESCRIPTION: Compares the CSS output from Griffel for simple styles versus complex selectors, showing how complex selectors produce more verbose and less efficient CSS.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/styles-handbook.md#2025-04-20_snippet_35\n\nLANGUAGE: css\nCODE:\n```\n/* ✅ no selectors */\n.f22iagw {\n  display: flex;\n}\n\n/* ⚠️ with complex selectors */\n.f1312jvm > .some-classname > .other-classname {\n  display: flex;\n}\n.f1c58nry > .some-classname > .other-classname {\n  align-items: center;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for FluentUI React Select Stories\nDESCRIPTION: This code snippet shows how to configure a Storybook module to include stories from the FluentUI React Select package. It specifies the glob patterns needed to correctly load both MDX and TypeScript/TSX story files.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-select/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-select/stories/src/**/*.stories.mdx', '../packages/react-components/react-select/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Field Components with makeField in JSX\nDESCRIPTION: This snippet shows how to define custom Field components using a proposed makeField function. It wraps components like MyInput to create custom components like MyInputField with integrated Field functionality, ensuring consistency with built-in controls using TypeScript for prop validation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/field-custom-components.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst MyInputField = makeField(MyInput);\n\n<MyInputField label=\"...\" validationState=\"error\" defaultValue=\"...\" />;\n```\n\n----------------------------------------\n\nTITLE: ColorSwatch DOM Structure (grid layout)\nDESCRIPTION: This snippet shows the DOM structure for a ColorSwatch component when used in a grid layout. It uses a button element with the \"gridcell\" role and CSS variables for styling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-swatch-picker/library/docs/Spec.md#2025-04-20_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<button\n  aria-label=\"Pink\"\n  role=\"gridcell\"\n  aria-selected=\"true\"\n  style=\"--fui-SwatchPicker--color: #ff0099\"\n  class=\"fui-ColorSwatch\">\n</button>\n```\n\n----------------------------------------\n\nTITLE: Using Fluent UI Colors with SCSS Variables and Mixins\nDESCRIPTION: Shows how to use Fluent UI colors in SCSS, importing from either 'office-ui-fabric-core' or '@fluentui/react'. The example demonstrates using both SCSS variables and mixins to set background colors.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Styles/Colors/docs/web/ColorsImplementation.md#2025-04-20_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n// Import all mixins and variables.\n// (These are also available from '@fluentui/react/dist/sass/References'.)\n@import 'office-ui-fabric-core/dist/sass/References';\n\n.myClass1 {\n  background-color: $ms-color-communicationPrimary; // Using variables\n}\n\n.myClass2 {\n  @include ms-bgColor-communicationPrimary; // Using mixins\n}\n```\n\n----------------------------------------\n\nTITLE: getSlots Function for Component Slot Management in React\nDESCRIPTION: Defines the getSlots function which takes a component's state and a list of slot names, returning configured slots and props for rendering, facilitating reusable component structures.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-utilities/src/compose/README.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst Button = props => {\n  const { slots, slotProps } = getSlots(props, ['foo', 'bar']);\n\n  return (\n    <slots.root {...slotProps.root}>\n      <slots.foo {...slotProps.foo} />\n      <slots.bar {...slotProps.foo} />\n    </slots.root>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Markdown Component Requirements List\nDESCRIPTION: Lists the core requirements for the independent set of components, including migration plans, package independence, and performance improvements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/focus-and-iteration-towers-2.0.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- A documented migration plan from existing /react and /react-northstar components\n- Partners must be able to pickup and use new converged components without needing a particular version of /react or /react-northstar\n- react-* packages cannot depend on either /react or /react-northstar\n- Styling and theming stories are supported in both Teams and Office products and there is a path to address previously supported scenarios\n- Improvements must be tangible when compared to previous offerings in at least one of the following ways:\n  - Bundle size\n  - First-render performance\n  - Re-render performance\n  - API cleanliness\n```\n\n----------------------------------------\n\nTITLE: FluentUI React Switch Release Notes Entry\nDESCRIPTION: A sample changelog entry showing version, date, and patch details for the React Switch component\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-switch/library/CHANGELOG.md#2025-04-20_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.0.20](https://github.com/microsoft/fluentui/tree/@fluentui/react-switch_v9.0.20)\n\nMon, 23 Jan 2023 16:43:12 GMT\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-switch_v9.0.19..@fluentui/react-switch_v9.0.20)\n\n### Patches\n\n- Bump @fluentui/react-field to v9.0.0-alpha.16 ([PR #26434](https://github.com/microsoft/fluentui/pull/26434) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Configuring Media Query Sorting in FluentUI\nDESCRIPTION: Shows how to implement custom media query sorting using compareMediaQueries function with createDOMRenderer. Includes example with predefined order array.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/AdvancedConfiguration.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { createDOMRenderer } from '@fluentui/react-components';\n\nconst mediaQueryOrder = [\n  'only screen and (min-width: 1024px)',\n  'only screen and (min-width: 1366px)',\n  'only screen and (min-width: 1920px)',\n];\n\nfunction sortMediaQueries(a, b) {\n  return mediaQueryOrder.indexOf(a) - mediaQueryOrder.indexOf(b);\n}\n\nconst renderer = createDOMRenderer(document, {\n  compareMediaQueries: sortMediaQueries,\n});\n```\n\n----------------------------------------\n\nTITLE: Fixing Selectable Tree Node Behavior\nDESCRIPTION: This fix addresses the issue where nodes with unselectable children incorrectly displayed their selection state in selectable trees, ensuring accurate user interaction. No additional dependencies are mentioned.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nFix selectable `Tree` where node with unselectable children displaying wrong selection state @yuanboxue-amber ([#16158](https://github.com/microsoft/fluentui/pull/16158))\n```\n\n----------------------------------------\n\nTITLE: Complete App Implementation with Context Selection in TSX\nDESCRIPTION: Shows a complete application setup using useContextSelector with List and ListItem components, demonstrating efficient re-rendering patterns.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/context-selector-tearing.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App() {\n  const [activeValue, setActiveValue] = React.useState(1);\n  // 💡 React.memo() could be also used there to bail out from re-renders\n  const children = React.useMemo(\n    () => (\n      <>\n        <ListItem value={1} />\n        <ListItem value={2} />\n        <ListItem value={3} />\n      </>\n    ),\n    [],\n  );\n\n  return (\n    <>\n      <List activeValue={activeValue}>{children}</List>\n      <button onClick={() => setActiveValue(2)}>Set value to 2</button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Motion Definition to Styled-Components Format\nDESCRIPTION: Example showing how a motion definition could be converted for use with styled-components, highlighting the need for different helpers for different CSS-in-JS libraries.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/motion-definition-n-apis.md#2025-04-20_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\nimport styled, { keyframes } from 'styled-components';\nimport { type fadeEnterSlow, toStyledComponents } from 'some-pkg';\n\nconst [keyframesCSS, css] = toStyledComponents(fadeEnterSlow);\nconst fadeIn = keyframes`${keyframesCSS}`;\n\nconst FadeInButton = styled.button`\n  animation-name: ${fadeIn};\n  ${css}\n`;\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-jsx-runtime version\nDESCRIPTION: This patch updates the version of the `@fluentui/react-jsx-runtime` dependency. Bumping this package ensures that the `@fluentui/react-badge` component uses the latest features and bug fixes available in the JSX runtime.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nBump @fluentui/react-jsx-runtime to v9.0.46 ([PR #33238](https://github.com/microsoft/fluentui/pull/33238) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Extending Component by Modifying Slots\nDESCRIPTION: This shows extending a base component by modifying existing slots using mergeProps and resolveShorthandProps. Requires knowledge of the internals of mergeProps and resolveShorthands to understand without guidance.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/simplify-prop-merging.md#2025-04-20_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// Extend by modifying existing slots\n// call resolveShorthandprops on defaultProps\nconst state = mergeProps(\n  {\n    as: 'span',\n    label: { as: 'span' },\n    getInitials: defaultGetInitials,\n    ref,\n  },\n  defaultProps && resolveShorthandProps(defaultProps, avatarShorthandProps),\n  resolveShorthandProps(props, avatarShorthandProps),\n);\n```\n\n----------------------------------------\n\nTITLE: InfoLabel Component State and Rendering Utilities\nDESCRIPTION: Provides unstable rendering and state management functions for the InfoLabel component, including hooks for state and styles\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-infolabel/library/etc/react-infolabel.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const renderInfoLabel_unstable: (state: InfoLabelState) => JSX.Element;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport const useInfoLabel_unstable: (props: InfoLabelProps, ref: React_2.Ref<HTMLLabelElement>) => InfoLabelState;\n```\n\n----------------------------------------\n\nTITLE: Icon Sizing in Fluent UI v9\nDESCRIPTION: Example of setting icon size using fontSize property in Fluent UI v9.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Icons.stories.mdx#2025-04-20_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<MyIcon fontSize={24} />\n```\n\n----------------------------------------\n\nTITLE: SearchBoxState Type Definition (TypeScript)\nDESCRIPTION: Defines the SearchBoxState type, combining ComponentState, InputState, and specific properties from InputState and SearchBoxProps. It requires 'size' from InputState and 'disabled' from SearchBoxProps, and includes a boolean 'focused' property.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-search/library/etc/react-search.api.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport type SearchBoxState = ComponentState<SearchBoxSlots> & InputState & Required<Pick<InputState, 'size'>> & Required<Pick<SearchBoxProps, 'disabled'>> & {\n    focused: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting TreeItem Persona Layout Hooks in TypeScript\nDESCRIPTION: Exports hooks for tree item persona layout state management and styles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tree/library/etc/react-tree.api.md#2025-04-20_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const useTreeItemPersonaLayout_unstable: (props: TreeItemPersonaLayoutProps, ref: React_2.Ref<HTMLSpanElement>) => TreeItemPersonaLayoutState;\n\nexport const useTreeItemPersonaLayoutStyles_unstable: (state: TreeItemPersonaLayoutState) => TreeItemPersonaLayoutState;\n```\n\n----------------------------------------\n\nTITLE: Structured HTML for Checkbox Component with Static Class Names in FluentUI\nDESCRIPTION: This snippet provides an example HTML structure showcasing how static classNames should be applied to each slot of a Checkbox component according to the proposed naming convention.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/static-classes-on-slots.md#2025-04-20_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<span className=\"fui-Checkbox ...other classes...\">\n  <span className=\"fui-Checkbox__indicator ...other classes...\"> ... </span>\n  <input className=\"fui-Checkbox__input ...other classes...\" />\n  <label className=\"fui-Checkbox__label ...other classes...\"> ... </label>\n</span>\n```\n\n----------------------------------------\n\nTITLE: Basic Card Component Usage After Migration\nDESCRIPTION: Example of how to import and use the Card component from @fluentui/react-components after migration.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Card/Card.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Card } from '@fluentui/react-components';\nconst Component = () => <Card>Lorem ipsum, dolor sit amet consectetur adipisicing elit.</Card>;\n```\n\n----------------------------------------\n\nTITLE: Define Position type\nDESCRIPTION: Defines a type called `Position` which is a union of string literals representing different positions relative to a target: 'above', 'below', 'before', and 'after'. This type determines where the positioned element is placed.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-positioning/etc/react-positioning.api.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type Position = 'above' | 'below' | 'before' | 'after';\n```\n\n----------------------------------------\n\nTITLE: Usage of Tooltip Without Host-Trigger-Content Structure\nDESCRIPTION: This snippet illustrates the current usage of the Tooltip component, which does not utilize the host-trigger-content connection, thus limiting composition capabilities in conjunction with other components such as Menu.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/components/tooltip-api-alignment.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction App() {\n  return (\n    <Tooltip>\n      <button />\n    </Tooltip>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-shared-contexts version\nDESCRIPTION: This patch updates the version of the `@fluentui/react-shared-contexts` dependency.  Bumping this package ensures that the `@fluentui/react-badge` component uses the latest features and bug fixes available in the shared contexts package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nBump @fluentui/react-shared-contexts to v9.20.2 ([PR #32999](https://github.com/microsoft/fluentui/pull/32999) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format in Markdown\nDESCRIPTION: Standard format for changelog entries showing version, date, comparison links and patch updates for the @fluentui/perf-test package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/perf-test/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.0.0](https://github.com/microsoft/fluentui/tree/@fluentui/perf-test_v1.0.0)\n\nFri, 29 Jul 2022 07:41:56 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/perf-test_v1.0.0..@fluentui/perf-test_v1.0.0)\n\n### Patches\n\n- Bump @fluentui/react to v8.86.0 ([PR #24132](https://github.com/microsoft/fluentui/pull/24132) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-shared-contexts version\nDESCRIPTION: This patch updates the version of the `@fluentui/react-shared-contexts` dependency.  Bumping this package ensures that the `@fluentui/react-badge` component uses the latest features and bug fixes available in the shared contexts package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nBump @fluentui/react-shared-contexts to v9.20.0 ([PR #32067](https://github.com/microsoft/fluentui/pull/32067) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Generating Normalized Package Dependencies Using Yarn\nDESCRIPTION: This command is used to generate normalized package dependencies across projects in a Fluent UI workspace. It modifies the package.json files to ensure they use a unified versioning system represented by '*'. No dependencies need to be specified manually as it works across the entire monorepo.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/normalize-package-dependencies/README.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:normalize-package-dependencies ...\n```\n\n----------------------------------------\n\nTITLE: Describing PieHoverLabel Interface in TypeScript\nDESCRIPTION: The PieHoverLabel interface contains various properties for customizing hover labels on pie charts, including alignment, background color, border color, font, and name length.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/chart-utilities/etc/chart-utilities.api.md#2025-04-20_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface PieHoverLabel {\n    // (undocumented)\n    align: HoverLabel['align'] | Array<HoverLabel['align']>;\n    // (undocumented)\n    bgcolor: PieColor | PieColors;\n    // (undocumented)\n    bordercolor: PieColor | PieColors;\n    // (undocumented)\n    font: PieFont;\n    // (undocumented)\n    namelength: number | number[];\n}\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-shared-contexts version\nDESCRIPTION: This patch updates the version of the `@fluentui/react-shared-contexts` dependency.  Bumping this package ensures that the `@fluentui/react-badge` component uses the latest features and bug fixes available in the shared contexts package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nBump @fluentui/react-shared-contexts to v9.21.0 ([PR #33238](https://github.com/microsoft/fluentui/pull/33238) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Target-Action for Link in Swift\nDESCRIPTION: Demonstrates how to override the default behavior of a Link control using the Target-Action pattern to perform custom tasks, such as displaying an alert dialog.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/LinkPage/docs/mac/LinkUsage.md#2025-04-20_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\n// Because Link is a subclass of NSControl, we can override the target/action to perform a custom task\nlet link = Link(title: \"Link with overridden Target/Action\")\nlink.showsUnderlineWhileMouseInside = true\nlink.target = self\nlink.action = #selector(displayAlert)\n\n@objc private func displayAlert() {\n    let alert = NSAlert()\n    alert.messageText = \"Alert\"\n    alert.informativeText = \"This is an alert generated by a Link with an overridden Target/Action\"\n    alert.runModal()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OutputChartType Interface in TypeScript\nDESCRIPTION: The OutputChartType interface is used to represent the chart output which includes validation status, type information, and optional error messages. It also has optional properties for more detailed trace information.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/chart-utilities/etc/chart-utilities.api.md#2025-04-20_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface OutputChartType {\n    // (undocumented)\n    errorMessage?: string;\n    // (undocumented)\n    isValid: boolean;\n    // (undocumented)\n    type?: string;\n    validTracesInfo?: [number, string][];\n}\n```\n\n----------------------------------------\n\nTITLE: Cartesian Chart Component Definition\nDESCRIPTION: Defines the CartesianChart React component, used for rendering charts with X and Y axes. It takes `ModifiedCartesianChartProps` as its properties and is defined as a React FunctionComponent. This is a base component for other charts like AreaChart and BarChart.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charts/library/etc/react-charts.api.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const CartesianChart: React_2.FunctionComponent<ModifiedCartesianChartProps>;\"\n```\n\n----------------------------------------\n\nTITLE: Type Definition for Shorthand Properties in TypeScript\nDESCRIPTION: Defines the `ShorthandProps` type that can include various React nodes, number, null, undefined, or an object shorthand. This is used to handle component properties passed as shorthand in React components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/slot-null-rendering.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ShorthandProps<Props = {}> =\n  | React.ReactChild\n  | React.ReactNodeArray\n  | React.ReactPortal\n  | number\n  | null\n  | undefined\n  | ObjectShorthandProps<Props>;\n```\n\n----------------------------------------\n\nTITLE: usePositioningMouseTarget hook\nDESCRIPTION: Defines an internal hook called `usePositioningMouseTarget` that manages the state of the virtual mouse target. It returns a read-only tuple containing the current `PositioningVirtualElement` and a `SetVirtualMouseTarget` function to update it.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-positioning/etc/react-positioning.api.md#2025-04-20_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal\nexport const usePositioningMouseTarget: (initialState?: PositioningVirtualElement | (() => PositioningVirtualElement)) => readonly [PositioningVirtualElement | undefined, SetVirtualMouseTarget];\n```\n\n----------------------------------------\n\nTITLE: Defining Theme Interfaces in TypeScript for FluentUI\nDESCRIPTION: Contains interface definitions for theming in FluentUI, including IThemeRules and IThemeSlotRule which define the structure for theme customization and color inheritance.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_222\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport { ITheme }\n\n// @public (undocumented)\nexport interface IThemeRules {\n    // (undocumented)\n    [key: string]: IThemeSlotRule;\n}\n\n// @public (undocumented)\nexport interface IThemeSlotRule {\n    asShade?: Shade;\n    color?: IColor;\n    dependentRules: IThemeSlotRule[];\n    inherits?: IThemeSlotRule;\n    isBackgroundShade?: boolean;\n    isCustomized?: boolean;\n    name: string;\n    value?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-utilities version\nDESCRIPTION: This patch updates the version of the `@fluentui/react-utilities` dependency.  Bumping this package ensures that the `@fluentui/react-badge` component uses the latest utility functions and bug fixes available in the utilities package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nBump @fluentui/react-utilities to v9.18.13 ([PR #32067](https://github.com/microsoft/fluentui/pull/32067) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Migrated Namespaced Styles Using mergeClasses\nDESCRIPTION: Updated example using mergeClasses from @fluentui/react-components to handle conditional classes based on props.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Card/Card.stories.mdx#2025-04-20_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// in COMPONENT_NAME.tsx\nimport { Card, mergeClasses } from '@fluentui/react-components';\nimport { useStyles } from './COMPONENT_NAME.styles.ts';\n\nexport const Component = props => {\n  const classes = useStyles();\n\n  return (\n    <Card\n      className={mergeClasses(props.enableUsingChatListGroupTitleAsHeader && classes.chatListGroupTitleAsHeader)}\n    ></Card>\n  );\n};\n\n// in COMPONENT_NAME.styles.ts\nimport { makeStyles } from '@fluentui/react-components';\n\nexport const useStyles = makeStyles({\n  chatListGroupTitleAsHeader: {\n    height: '3rem',\n    width: '8rem',\n    minWidth: '8rem',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Table Column in TypeScript\nDESCRIPTION: Exports a function that creates a table column given specific options. It provides a column identifier, render functions for both cell and header, and a comparison function for sorting items.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-table/library/etc/react-table.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport function createTableColumn<TItem>(options: CreateTableColumnOptions<TItem>): {\n    columnId: TableColumnId;\n    renderCell: (item: TItem) => ReactNode;\n    renderHeaderCell: (data?: unknown) => ReactNode;\n    compare: (a: TItem, b: TItem) => number;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories for Fluent UI React Theme\nDESCRIPTION: This code snippet demonstrates how to configure the stories property in the Storybook module exports to include Fluent UI React Theme stories. It specifies the file paths and patterns for both MDX and TypeScript/TSX story files.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-theme/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-theme/stories/src/**/*.stories.mdx', '../packages/react-components/react-theme/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Using bundleIcon() for Icon Version Toggling in Fluent UI React\nDESCRIPTION: The bundleIcon() function is used to combine Regular and Filled versions of icons in Fluent UI React. This allows for toggling between icon styles on hover. Some components like Button and MenuItem have this fill-on-hover behavior built-in.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Icons/IconsBundleIcon.stories.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nbundleIcon()\n```\n\n----------------------------------------\n\nTITLE: Defining TabsSize Constants in TypeScript\nDESCRIPTION: Constants defining possible size values for the Tabs component, allowing for small, medium, or large sizing options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_70\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"TabsSize\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n// Warning: (ae-missing-release-tag) \"TabsSize\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport const TabsSize: {\n    readonly small: \"small\";\n    readonly medium: \"medium\";\n    readonly large: \"large\";\n};\n\n// @public (undocumented)\nexport type TabsSize = ValuesOf<typeof TabsSize>;\n```\n\n----------------------------------------\n\nTITLE: Order of arguments in mergeClasses\nDESCRIPTION: Explains how the order of classes passed to mergeClasses affects the resulting styles, allowing for style overrides. Classes passed later in the arguments list take precedence.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/styles-handbook.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mergeClasses, makeStyles } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  blue: { color: 'blue' },\n  red: { color: 'red' },\n});\n\nfunction Component(props) {\n  // ℹ️ Order of arguments determines the results\n\n  const redClassName = mergeClasses(classes.blue, classes.red);\n  // 👆 { color: 'red' }\n  const blueClassName = mergeClasses(classes.red, classes.blue);\n  // 👆 { color: 'blue' }\n\n  /* --- */\n}\n```\n\n----------------------------------------\n\nTITLE: Using InfoLabel Component in React\nDESCRIPTION: This snippet demonstrates how to import and use the InfoLabel component from the Fluent UI React library. The InfoLabel is used to display informational text associated with a label. The example uses a basic functional component structure to render the InfoLabel.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-infolabel/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { InfoLabel } from '@fluentui/react-components';\n\nconst InfoLabelExample = () => {\n  return <InfoLabel info=\"Sample information\">Sample label</InfoLabel>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining MaskedTextField Interfaces in TypeScript\nDESCRIPTION: Interface definitions for the MaskedTextField component in FluentUI, which extends the TextField with input masking capabilities. These interfaces define the masking behavior and formatting options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_149\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IMaskedTextField extends ITextField {\n    value: string | undefined;\n}\n\n// @public\nexport interface IMaskedTextFieldProps extends ITextFieldProps, React_2.RefAttributes<HTMLDivElement> {\n    componentRef?: IRefObject<IMaskedTextField>;\n    mask?: string;\n    maskChar?: string;\n    maskFormat?: {\n        [key: string]: RegExp;\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Fluent UI providers in React Router 7/Remix root layout\nDESCRIPTION: Modifications to the app/root.tsx file to add Fluent UI providers and setup the insertion point for styles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/SSR/Remix.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// 1. Import Fluent UI dependencies\nimport { FluentProvider, webLightTheme } from '@fluentui/react-components';\n\nexport function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <Meta />\n        <Links />\n        {/* 2. Add insertion point for Fluent UI styles before the </head>. */}\n        <meta name=\"fluentui-insertion-point\" content=\"fluentui-insertion-point\" />\n      </head>\n      <body>\n        {/* 3. Wrap app content with FluentProvider */}\n        <FluentProvider theme={webLightTheme}>{children}</FluentProvider>\n        <ScrollRestoration />\n        <Scripts />\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Custom Styling Hooks\nDESCRIPTION: This code provides an example of creating a global object containing custom styling hooks for various components. The structure aims to avoid circular dependencies and allows for flexible style management.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/custom-styling.md#2025-04-20_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport type FluentStyleCustomizer = { useCustomButtonStyles_unstable: (state: unknown) => void; };\n\nexport const fuiCustomizer: FluentStyleCustomizer = { useCustomButtonStyles_unstable: () => {}, //... };\n```\n\n----------------------------------------\n\nTITLE: Disabling Shrink for Stack.Item using CSS\nDESCRIPTION: This snippet demonstrates how to disable shrinking for a Stack.Item component using CSS.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Flex/Flex.StackItem.stories.mdx#2025-04-20_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.flex-item {\n  flex-shrink: 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic CSS-in-JS Style Declaration with Fluent UI\nDESCRIPTION: Example showing how to create styles with makeStyles and use them in a React component. This demonstrates what code gets optimized at build time.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/BuildTimeStyles.stories.mdx#2025-04-20_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeStyles } from '@fluentui/react-components';\n\n// 1.\nconst useStyles = makeStyles({\n  root: { paddingLeft: '1px', display: 'flex' },\n});\n\nfunction Component() {\n  // 2.\n  const classes = useStyles();\n\n  return <div className={classes.root} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories Glob\nDESCRIPTION: This code snippet configures Storybook to load stories for the React Datepicker Compat component from specified directories. It allows the inclusion of TypeScript (.ts, .tsx) and MDX files in story generation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-datepicker-compat/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-datepicker-compat/stories/src/**/*.stories.mdx', '../packages/react-components/react-datepicker-compat/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CustomStyleHook Type in TypeScript\nDESCRIPTION: This code snippet defines a type alias for a CustomStyleHook, which is designed to take an unknown state type and returns void. This is intended to avoid circular dependencies and ensure flexibility in type casting for various components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/custom-styling.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype CustomStyleHook = (state: unknown) => void;\n```\n\n----------------------------------------\n\nTITLE: Sample Mod Configuration JSON Structure\nDESCRIPTION: This JSON structure serves as a template for developers seeking to configure their codemods without utilizing command-line flags. It incorporates filter options for string and regex patterns, determining the inclusion of mods.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/codemods/README.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"stringFilters\": [],\n  \"regexFilters\": [],\n  \"includeMods\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Using Internal Stories for Testing - TypeScript\nDESCRIPTION: This snippet illustrates how to create a hidden internal story for testing purposes. Such stories will not appear in the public Storybook and use a specific naming convention to avoid conflicts.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/authoring-stories.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// MenuTabstopsInternal.internal.stories.tsx\n// Deep link /story/components-menu--tabstops-internal\n// Does not appear in the sidebar or docs page\nexport const TabstopsInternal = () => {\n  // story\n};\n```\n\n----------------------------------------\n\nTITLE: Component Composition Approach for Input Appearance in Fluent V9\nDESCRIPTION: This example shows how partners could compose components on the application side to modify default props. This approach allows setting a default appearance of 'filled-darker' to match the V0 appearance.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/convergence/apperance-migration.md#2025-04-20_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport const Input: ForwardRefComponent<InputProps> = React.forwardRef((props, ref) => {\n  const state = useInput_unstable({ appearance: 'filled-darker', ...props }, ref);\n\n  useInputStyles_unstable(state);\n  return renderInput_unstable(state);\n});\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-jsx-runtime version\nDESCRIPTION: This patch updates the version of the `@fluentui/react-jsx-runtime` dependency. Bumping this package ensures that the `@fluentui/react-badge` component uses the latest features and bug fixes available in the JSX runtime.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nBump @fluentui/react-jsx-runtime to v9.0.54 ([PR #34166](https://github.com/microsoft/fluentui/pull/34166) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Version and Change Documentation\nDESCRIPTION: Markdown formatted changelog entries documenting version updates, patches, and dependency changes for the FluentUI React-Text component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-text/library/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.4.4]\n- Bump @fluentui/react-utilities to v9.15.6\n- Bump @fluentui/react-jsx-runtime to v9.0.24\n\n## [9.4.0]\n### Minor changes\n- feature: adds semantic elements (strong, b, em, i) to Text root signature\n```\n\n----------------------------------------\n\nTITLE: Using Select Component with Options in Fluent UI\nDESCRIPTION: Example of how to use the fluent-select component with options and option groups. This shows the proper structure for creating a select dropdown with grouped and ungrouped options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/select/select.spec.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<fluent-select>\n  <option value=\"option1\">Option 1</option>\n  <option value=\"option2\">Option 2</option>\n  <optgroup label=\"Group 1\">\n    <option value=\"option3\">Option 3</option>\n    <option value=\"option4\">Option 4</option>\n  </optgroup>\n</fluent-select>\n```\n\n----------------------------------------\n\nTITLE: Migrating Style Overrides for Avatar in Fluent UI\nDESCRIPTION: Shows how to migrate boolean variables and style overrides from the old Avatar component to the new one using makeStyles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Avatar.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// in COMPONENT_NAME.tsx\nimport { Avatar } from '@fluentui/react-northstar';\n\nexport const Component = () => <Avatar variables={{ isCustomVariable: true }} />;\n\n// in avatar-styles.ts\nexport const avatarStyles = {\n  root: ({ variables: { isCustomVariable } }) => ({\n    ...(isCustomVariable && {\n      ':focus': {\n        outlineColor: colorSchemeBrand.borderFocus,\n      },\n    }),\n  }),\n};\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// in COMPONENT_NAME.tsx\nimport { Avatar } from '@fluentui/react-components';\nimport { useStyles } from './COMPONENT_NAME.styles.ts';\n\nexport const Component = () => {\n  const classes = useStyles();\n  return <Avatar className={classes.customAvatar} />;\n};\n\n// in COMPONENT_NAME.styles.ts\nimport { makeStyles, tokens } from '@fluentui/react-components';\n\nexport const useStyles = makeStyles({\n  customAvatar: {\n    ':focus': {\n      outlineColor: tokens.colorNeutralBackground3Pressed,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Z-Index Priority with useZIndexPriority Hook in React\nDESCRIPTION: This snippet demonstrates the use of a useZIndexPriority hook to manage z-index priority between multiple elements. It automatically sets z-index values for a list of elements based on their order and the specified layering group.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/z-index-handling.md#2025-04-20_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useZIndexPriority } from '@fluentui/react-components';\n\n// component side\nexport const Component = (props: ComponentProps) => {\n  const drawerStartRef = React.useRef();\n  const drawerEndRef = React.useRef();\n  const navRef = React.useRef();\n\n  /*\n   * This would control the z-index of the elements based on the layering group,\n   * incrementing based on the priority list\n   */\n  useZIndexPriority('overlay', [drawerStartRef, drawerEndRef, navRef]);\n\n  return (\n    <>\n      <Drawer position=\"start\" ref={drawerStartRef} /> // z-index 2003\n      <Drawer position=\"end\" ref={drawerEndRef} /> // z-index 2002\n      <Nav ref={navRef} /> // z-index 2001\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Warning About Usage in Markdown\nDESCRIPTION: This snippet provides a warning about the package's usage, emphasizing that it's not the recommended approach and should only be used as a workaround for specific bundle issues.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/global-context/README.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n> ⚠️ The recommended approach is not to use this package and deduplicate affected packages in node_modules\n\nThis package is is a workaround when multiple context objects are included into a bundle. This can happen when\nthere are multiple copies of the same package installed in `node_modules`.\n\n**This package is not inteded to be used directly in code, but through a [Babel transform](/todo)**\n```\n\n----------------------------------------\n\nTITLE: Defining Avatar Size Constants in TypeScript\nDESCRIPTION: Defines numerical size constants for Avatar components ranging from 16 to 128 pixels.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport const AvatarSize: {\n    readonly _16: 16;\n    readonly _20: 20;\n    readonly _24: 24;\n    readonly _28: 28;\n    readonly _32: 32;\n    readonly _36: 36;\n    readonly _40: 40;\n    readonly _48: 48;\n    readonly _56: 56;\n    readonly _64: 64;\n    readonly _72: 72;\n    readonly _96: 96;\n    readonly _120: 120;\n    readonly _128: 128;\n};\n```\n\n----------------------------------------\n\nTITLE: FieldControlPropsOptions Definition\nDESCRIPTION: This snippet defines the FieldControlPropsOptions type. It specifies options for supporting labelFor, required, and size properties.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-field/library/etc/react-field.api.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport type FieldControlPropsOptions = {\\n    supportsLabelFor?: boolean;\\n    supportsRequired?: boolean;\\n    supportsSize?: boolean;\\n};\"\n```\n\n----------------------------------------\n\nTITLE: Importing Radio Components in JavaScript\nDESCRIPTION: This snippet demonstrates the import statements needed to include the Radio and RadioGroup components from the Fluent UI library into a JavaScript project. These are necessary for setting up radio inputs in a React application.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-radio/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// From @fluentui/react-components\nimport { Radio, RadioGroup } from '@fluentui/react-components';\n\n// Directly from @fluentui/react-radio\nimport { Radio, RadioGroup } from '@fluentui/react-radio';\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-jsx-runtime version\nDESCRIPTION: This patch updates the version of the `@fluentui/react-jsx-runtime` dependency. Bumping this package ensures that the `@fluentui/react-badge` component uses the latest features and bug fixes available in the JSX runtime.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nBump @fluentui/react-jsx-runtime to v9.0.44 ([PR #32840](https://github.com/microsoft/fluentui/pull/32840) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-jsx-runtime version\nDESCRIPTION: This patch updates the version of the `@fluentui/react-jsx-runtime` dependency. Bumping this package ensures that the `@fluentui/react-badge` component uses the latest features and bug fixes available in the JSX runtime.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nBump @fluentui/react-jsx-runtime to v9.0.42 ([PR #32067](https://github.com/microsoft/fluentui/pull/32067) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Adding trapFocus and autoFocus props to Popup component\nDESCRIPTION: Breaking change that adds new props to Popup component and removes old behavior props.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/CHANGELOG.md#2025-04-20_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nAdd `trapFocus` and `autoFocus` props to `Popup` and remove `popupFocusTrapBehavior` and `popupAutoFocusBehavior`\n```\n\n----------------------------------------\n\nTITLE: Changelog Version Entry 9.0.3\nDESCRIPTION: Changelog entry documenting patches and updates for version 9.0.3 of @fluentui/react-charts, including new features like SankeyChart and HeatMapChart, along with various bug fixes and improvements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charts/library/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.0.3]\n\nWed, 16 Apr 2025 19:42:09 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-charts_v9.0.2..@fluentui/react-charts_v9.0.3)\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories for FluentUI React Utilities\nDESCRIPTION: Configuration snippet showing how to specify glob patterns in Storybook's configuration to include stories from the react-utilities-compat package. Includes patterns for both MDX and TypeScript/TSX story files.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-utilities-compat/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-utilities-compat/stories/src/**/*.stories.mdx', '../packages/react-components/react-utilities-compat/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Running Performance Tests with Yarn\nDESCRIPTION: Describes the command-line instructions to run performance tests using Yarn within the Fluent UI project. It requires prior building of the perf-test package and its dependencies. The commands execute performance scenarios and allow for testing specific scenarios through arguments.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/perf-testing.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn just perf-test\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn just run-perf-test\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn just perf-test -- --scenarios SplitButton,SplitButtonNew --iterations 1000\n```\n\n----------------------------------------\n\nTITLE: NPM Import of CSS Anchor Positioning Polyfill\nDESCRIPTION: This snippet provides an example of how to import the CSS anchor positioning polyfill from NPM to be included in the main bundle, again needing to be added before Fluent UI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/_docs/developer/polyfilling.stories.mdx#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * NPM Import example where polyfill is bundled into main bundle\n * This MUST be included before Fluent UI.\n */\nimport { default as applyPolyfill } from '@oddbird/css-anchor-positioning/fn';\nwindow.CSS_ANCHOR_POLYFILL = applyPolyfill;\n```\n\n----------------------------------------\n\nTITLE: Defining DocumentCard Style Interfaces\nDESCRIPTION: TypeScript interface definitions for DocumentCard component's style props and styles. These interfaces are used with the FluentUI styling system to customize component appearance.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_92\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IDocumentCardActionsStyleProps {\n    className?: string;\n    theme: ITheme;\n}\n\n// @public (undocumented)\nexport interface IDocumentCardActionsStyles {\n    // (undocumented)\n    action: IStyle;\n    // (undocumented)\n    root: IStyle;\n    // (undocumented)\n    views: IStyle;\n    // (undocumented)\n    viewsIcon: IStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: Version Updates and Changes\nDESCRIPTION: Changelog entries documenting version changes, dependency updates, and feature modifications for the FluentUI React Field component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-field/library/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Changes\n\n- Bump @fluentui/react-context-selector to v9.1.2 ([PR #25683](https://github.com/microsoft/fluentui/pull/25683) by beachball)\n- Bump @fluentui/react-label to v9.0.11 ([PR #25683](https://github.com/microsoft/fluentui/pull/25683) by beachball)\n- Bump @fluentui/react-utilities to v9.2.2 ([PR #25683](https://github.com/microsoft/fluentui/pull/25683) by beachball)\n```\n\n----------------------------------------\n\nTITLE: CalendarDayGrid Component Declaration\nDESCRIPTION: Declaration of the CalendarDayGrid component which renders the grid of days. Note the API extractor warning about incompatible release tags between the component and its props.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-calendar-compat/library/etc/react-calendar-compat.api.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-incompatible-release-tags) The symbol \"CalendarDayGrid\" is marked as @public, but its signature references \"CalendarDayGridProps\" which is marked as @internal\n//\n// @public (undocumented)\nexport const CalendarDayGrid: React_2.FunctionComponent<CalendarDayGridProps>;\n\n// @internal (undocumented)\nexport const calendarDayGridClassNames: SlotClassNames<CalendarDayGridStyles>;\n```\n\n----------------------------------------\n\nTITLE: Customizing Slot Styles with className in React TSX\nDESCRIPTION: Demonstrates how to apply custom styles to a component slot using the className prop. The example uses makeStyles to create a custom badge style and applies it to the Avatar's badge slot.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Slots/Slots.stories.mdx#2025-04-20_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst useStyles = makeStyles({\n  badge: { color: tokens.colorBrandStroke1 },\n});\n\nconst BusyBrandAvatar = () => {\n  const styles = useStyles();\n  return <Avatar name=\"IT probably\" badge={{ status: 'busy', className: styles.badge }} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Type Definition for FluentUI Component Slot Class Names in TypeScript\nDESCRIPTION: This snippet defines a TypeScript type 'ClassNames' that ensures the existence of string class name definitions for each slot of a component. The type uses TypeScript's mapped types and semi-optional properties.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/static-classes-on-slots.md#2025-04-20_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type ClassNames<Slots> = {\n  [SlotName in keyof Slots]-?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining OverflowItemEntry Interface in TypeScript\nDESCRIPTION: This snippet specifies the OverflowItemEntry interface, representing an entry in the overflow system, containing properties such as element reference, optional group ID, unique ID, and priority level.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/priority-overflow/etc/priority-overflow.api.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface OverflowItemEntry {\n    element: HTMLElement;\n    // (undocumented)\n    groupId?: string;\n    id: string;\n    priority: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for React Swatch Picker Stories\nDESCRIPTION: Configuration example showing how to include React Swatch Picker stories in Storybook's configuration file. Specifies the glob patterns to match story files with .mdx, .ts, and .tsx extensions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-swatch-picker/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-swatch-picker/stories/src/**/*.stories.mdx', '../packages/react-components/react-swatch-picker/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Using getIconClassName API in Fluent UI React (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the getIconClassName API from @fluentui/style-utilities to manually render an icon using a CSS class. It returns an HTML string with the appropriate class name.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/font-icons-mdl2/README.md#2025-04-20_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { getIconClassName } from '@fluentui/style-utilities';\n\nreturn `<i class=\"${getIconClassName('Snow')}\" />`;\n```\n\n----------------------------------------\n\nTITLE: Using makeStyles with FluentUI v9 Spinner\nDESCRIPTION: Example of migrating style overrides to the v9 approach using makeStyles. This demonstrates how to replace v0 variables with v9 className-based styling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Loader.stories.mdx#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// in COMPONENT_NAME.tsx\nimport { Spinner } from '@fluentui/react-components';\nimport { useStyles } from './COMPONENT_NAME.styles.ts';\n\nexport const Component = () => {\n  const classes = useStyles();\n  return <Spinner className={classes.isLoading}></Spinner>;\n};\n\n// in COMPONENT_NAME.styles.ts\nimport { makeStyles, tokens } from '@fluentui/react-components';\n\nexport const useStyles = makeStyles({\n  isLoading: {\n    display: 'block',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Simplified Render Method in TSX\nDESCRIPTION: This snippet shows how the render method can be simplified by removing the need for getSlots and using the new slot components directly.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/slot-children-render-function.md#2025-04-20_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport const renderAccordionHeader_unstable = (state: AccordionHeaderState) => (\n  <state.root>\n    <state.button>\n      {state.expandIconPosition === 'start' && state.expandIcon && <state.expandIcon />}\n      {state.icon && <state.icon />}\n      {state.root.props.children}\n      {state.expandIconPosition === 'end' && state.expandIcon && <state.expandIcon />}\n    </state.button>\n  </state.root>\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Tree Properties Interface in TypeScript\nDESCRIPTION: The ITreeProps interface describes the properties necessary for rendering a tree chart component, including layout, styling, and event handling options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/etc/react-charting.api.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface ITreeProps {\n    className?: string;\n    composition?: NodesComposition.long | NodesComposition.compact;\n    height?: number;\n    layoutWidth?: number;\n    margins?: IMargins;\n    styles?: IStyleFunctionOrObject<ITreeStyleProps, ITreeStyles>;\n    theme?: ITheme;\n    treeData: ITreeChartDataPoint;\n    treeTraversal?: TreeTraverse.preOrder | TreeTraverse.levelOrder;\n    width?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories Glob\nDESCRIPTION: This code snippet demonstrates how to configure Storybook to include stories from the @fluentui/react-provider package. It specifies the globs for MDX and TypeScript/TypeScript React stories located within the package's stories directory.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-provider/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-provider/stories/src/**/*.stories.mdx', '../packages/react-components/react-provider/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IComboBoxOption Interface\nDESCRIPTION: Defines the `IComboBoxOption` interface, extending `ISelectableOption`.  It adds optional `styles` of type `Partial<IComboBoxOptionStyles>` and a `useAriaLabelAsText` boolean property, providing control over the rendering of each option in the ComboBox.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_66\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IComboBoxOption extends ISelectableOption {\n    styles?: Partial<IComboBoxOptionStyles>;\n    useAriaLabelAsText?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering with JSX Elements Passed as Primitives - React JSX\nDESCRIPTION: This example shows how JSX elements can be passed directly to a slot, demonstrating shorthand usage of slots to simplify component usage without changing the output structure.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Slots.md#2025-04-20_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <Button icon={{ children: <FooIcon /> }} />\n  {/* 💡 will produce the same JSX/HTML markup, as will be expanded to { children: <FooIcon /> } */}\n  <Button icon={<FooIcon />} />\n</>\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.4.3\nDESCRIPTION: Changelog entry documenting patch updates and changes to the Collapse motion atom functions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-motion-components-preview/library/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.4.3](https://github.com/microsoft/fluentui/tree/@fluentui/react-motion-components-preview_v0.4.3)\n\nWed, 22 Jan 2025 14:00:19 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-motion-components-preview_v0.4.0..@fluentui/react-motion-components-preview_v0.4.3)\n\n### Patches\n\n- refactor(Collapse): streamline motion atom functions ([PR #33463](https://github.com/microsoft/fluentui/pull/33463) by robertpenner@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react to v8.39.0\nDESCRIPTION: This patch upgrades the @fluentui/react library to version 8.39.0 to ensure optimal functionality and improve library performance. More information is included in Pull Request #20331.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/ts-minbar-test-react/CHANGELOG.md#2025-04-20_snippet_24\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.39.0 ([PR #20331](https://github.com/microsoft/fluentui/pull/20331) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Defining useList_unstable Hook for FluentUI in TypeScript\nDESCRIPTION: Exports an unstable hook for managing list component state in FluentUI. Takes list props and a ref to the list element and returns a state object that can be used for rendering and behavior.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-migration-v0-v9/library/etc/react-migration-v0-v9.api.md#2025-04-20_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport const useList_unstable: (props: ListProps, ref: React_2.Ref<HTMLDivElement | HTMLUListElement>) => ListState;\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-docsite-components to various versions\nDESCRIPTION: This set of patches updates the @fluentui/react-docsite-components package to various versions including v8.3.0 and others, ensuring that the documentation components are in sync with updates to the Fluent UI library.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/theming-designer/CHANGELOG.md#2025-04-20_snippet_46\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react-docsite-components to v8.3.0 ([PR #18957](https://github.com/microsoft/fluentui/pull/18957) by elcraig@microsoft.com)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react-docsite-components to v8.2.38 ([PR #18928](https://github.com/microsoft/fluentui/pull/18928) by elcraig@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Customizing Themes with ThemeProvider\nDESCRIPTION: This snippet allows the customization of a theme by defining a PartialTheme object and passing it to the ThemeProvider. It showcases how to set a primary theme color.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/src/utilities/ThemeProvider/README.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { ThemeProvider, PartialTheme } from '@fluentui/react';\n\nconst appTheme: PartialTheme = {\n  palette: {\n    themePrimary: 'red'\n    ...\n  }\n};\n\nexport const App = () => (\n  <ThemeProvider theme={appTheme}>\n    App content ...\n  </ThemeProvider>\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format\nDESCRIPTION: Standard version changelog entry showing version number, date, comparison link and patch details\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-docsite-components/CHANGELOG.md#2025-04-20_snippet_30\n\nLANGUAGE: markdown\nCODE:\n```\n## [8.2.12](https://github.com/microsoft/fluentui/tree/@fluentui/react-docsite-components_v8.2.12)\n\nFri, 21 May 2021 07:34:54 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-docsite-components_v8.2.11..@fluentui/react-docsite-components_v8.2.12)\n\n### Patches\n\n- Bump @fluentui/react to v8.14.13 ([PR #18198](https://github.com/microsoft/fluentui/pull/18198) by tristan.watanabe@gmail.com)\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react to v8.42.4\nDESCRIPTION: This patch upgrades the @fluentui/react package to version 8.42.4 which brings several improvements and fixes. More information can be found in Pull Request #20639.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/ts-minbar-test-react/CHANGELOG.md#2025-04-20_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.42.4 ([PR #20639](https://github.com/microsoft/fluentui/pull/20639) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Importing Fluent UI AvatarGroup Components in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the AvatarGroup-related components from the Fluent UI library for React. These components allow for organizing avatars into interactive layouts. Dependencies include the '@fluentui/react-components' package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-avatar/library/README-AvatarGroup.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {\n  AvatarGroup,\n  AvatarGroupItem,\n  AvatarGroupPopover,\n  partitionAvatarGroupItems,\n} from '@fluentui/react-components';\n```\n\n----------------------------------------\n\nTITLE: Updating FocusZone Keyboard Handling in React\nDESCRIPTION: This update enhances FocusZone keyboard event handling to support modifier keys. This modification allows for greater flexibility and control over focus behavior within the FocusZone component when modifier keys are used in conjunction with keyboard navigation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-focus/CHANGELOG.md#2025-04-20_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Migrating Style Variables in FluentUI v0 Loader\nDESCRIPTION: Example showing how style variables were used with the Loader component in FluentUI v0. This includes conditional styling based on the isLoading variable.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Loader.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// in COMPONENT_NAME.tsx\nimport { Loader } from '@fluentui/react-northstar';\n\nexport const Component = () => <Loader variables={{ isLoading: true }} />;\n\n// in label-styles.ts\nexport const labelStyles1 = {\n  root: ({ variables: { isLoading } }) => ({\n    ...(isLoading && {\n      display: 'block',\n    }),\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Focus Trap Callout in Fluent UI v8\nDESCRIPTION: Illustrates the use of a `FocusTrapCallout` in Fluent UI v8 to maintain focus within the callout when it is visible, which is beneficial for keeping user interactions contained within the callout boundaries.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-popover/library/docs/Spec.md#2025-04-20_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n{isCalloutVisible && (\n  <FocusTrapCallout\n    setInitialFocus\n    target={`#${targetId}`}\n    onDismiss={toggleIsCalloutVisible}\n  >\n    {children}\n  </FocusTrapCallout>\n}\n\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Media Query Sorting\nDESCRIPTION: Shows the resulting HTML structure after applying media query sorting configuration with style elements and their respective media attributes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/AdvancedConfiguration.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <style media=\"only screen and (min-width: 1024px)\" data-make-styles-bucket=\"m\"></style>\n    <style media=\"only screen and (min-width: 1366px)\" data-make-styles-bucket=\"m\"></style>\n    <style media=\"only screen and (min-width: 1920px)\" data-make-styles-bucket=\"m\"></style>\n  </head>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Adding Monaco Webpack Configuration in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the addMonacoWebpackConfig helper function to add Monaco-related configuration to your Webpack setup. It includes the import statement and function call with parameters.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/monaco-editor/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { addMonacoWebpackConfig } = require('@fluentui/monaco-editor/scripts/addMonacoWebpackConfig');\n\n// Somewhere in this file, call:\nconfig = addMonacoWebpackConfig(originalConfig, options);\n```\n\n----------------------------------------\n\nTITLE: Setting up Email Filter Rule for GitHub Review Requests\nDESCRIPTION: Email rule configuration to filter and organize GitHub review request notifications into a dedicated folder. This rule captures emails from the FluentUI GitHub notifications that contain the phrase 'requested your review'.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/keeping-up-with-review-requests.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nFrom fluentui@noreply.github.com\nwith \"requested your review\" in the body\nmove it to the \"GitHub Reviews\" folder\n```\n```\n\n----------------------------------------\n\nTITLE: Bad Practice: Inline Definitions Mixed with Re-exports - TypeScript\nDESCRIPTION: This snippet illustrates a bad practice where inline definitions are mixed with re-exports in the main story file, violating the defined structure for story organization.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/authoring-stories.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// @filename  Button.stories.tsx\nexport const ButtonDefault = (props: ButtonProps) => <Button {...props}>Button</Button>;\nButtonDefault.storyName = 'Default';\n\nexport * from 'ButtonWithIcon.stories';\n\nexport default {\n  title: 'Components/Button',\n  component: Button,\n} as Meta;\n```\n\n----------------------------------------\n\nTITLE: Defining Separator Component Interface in TypeScript\nDESCRIPTION: Defines the interfaces for the Separator component, including ISeparator, ISeparatorProps, and associated style interfaces. The Separator component provides a visual divider with optional alignment and orientation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_173\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface ISeparator {\n}\n\n// @public (undocumented)\nexport interface ISeparatorProps extends React_2.HTMLAttributes<HTMLDivElement>, React_2.RefAttributes<HTMLDivElement> {\n    alignContent?: 'start' | 'center' | 'end';\n    styles?: IStyleFunctionOrObject<ISeparatorStyleProps, ISeparatorStyles>;\n    theme?: ITheme;\n    vertical?: boolean;\n}\n\n// @public (undocumented)\nexport type ISeparatorStyleProps = Required<Pick<ISeparatorProps, 'theme'>> & Pick<ISeparatorProps, 'className' | 'alignContent' | 'vertical'>;\n\n// @public (undocumented)\nexport interface ISeparatorStyles {\n    content: IStyle;\n    root: IStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IExtendedPersonaProps Interface in TypeScript\nDESCRIPTION: Defines the IExtendedPersonaProps interface extending IPersonaProps with additional properties for extended persona functionality. This interface is marked as @public but undocumented.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_133\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IExtendedPersonaProps extends IPersonaProps {\n    // (undocumented)\n    blockRecipientRemoval?: boolean;\n    // (undocumented)\n    canExpand?: boolean;\n    // (undocumented)\n    isEditing?: boolean;\n    // (undocumented)\n    isValid: boolean;\n    // (undocumented)\n    key?: React_2.Key;\n    // (undocumented)\n    shouldBlockSelection?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: ColorArea DOM Structure\nDESCRIPTION: The HTML DOM structure for the ColorArea component, showing input elements for X and Y axes, and a thumb element for visual selection.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-color-picker/library/docs/Spec.md#2025-04-20_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div role=\"group\" class=\"fui-ColorArea\" aria-label=\"Gradient area\">\n  <input id=\"sliderX\" type=\"range\" class=\"fui-ColorArea__inputX\" value=\"96\" aria-label=\"saturation\">\n  <input id=\"sliderY\" type=\"range\" class=\"fui-ColorArea__inputY\" value=\"0\" aria-label=\"brightness\">\n  <div class=\"fui-ColorArea__thumb\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Compiler Options for Custom Global Types\nDESCRIPTION: Configuration snippet for tsconfig.json to enable custom global type definitions. Sets up typeRoots to include both @types from node_modules and custom typings directory, and specifies custom-global in the types array.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/typings/custom-global/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"typeRoots\": [\"../../node_modules/@types\", \"../../typings\"],\n\"types\": [\"custom-global\"]\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-jsx-runtime version\nDESCRIPTION: This patch updates the version of the `@fluentui/react-jsx-runtime` dependency. Bumping this package ensures that the `@fluentui/react-badge` component uses the latest features and bug fixes available in the JSX runtime.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nBump @fluentui/react-jsx-runtime to v9.0.41 ([PR #31998](https://github.com/microsoft/fluentui/pull/31998) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Styles for Motion States\nDESCRIPTION: Defines styles for the motion states of the sample component using makeStyles, including animations for entering and exiting.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/component-transitions-on-mount-or-unmount.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { makeStyles, mergeClasses, shorthands } from '@griffel/react';\nimport type { SampleSlots, SampleState } from './Sample.types';\nimport type { SlotClassNames } from '@fluentui/react-utilities';\nimport { tokens } from '@fluentui/react-theme';\n\nexport const SampleClassNames: SlotClassNames<SampleSlots> = {\n  root: 'fui-Sample',\n};\n\n/**\n * Styles for the root slot\n */\nconst useStyles = makeStyles({\n  root: {\n    opacity: 0,\n    transitionTimingFunction: 'ease-out',\n    transitionProperty: 'opacity',\n    willChange: 'opacity',\n  },\n\n  entering: {\n    transitionDuration: '200ms',\n  },\n\n  exiting: {\n    transitionDuration: '250ms',\n  },\n\n  visible: {\n    opacity: 1,\n  },\n});\n\nexport const useSampleStyles_unstable = (state: SampleState): SampleState => {\n  const styles = useStyles();\n\n  state.root.className = mergeClasses(\n    SampleClassNames.root,\n    state.motion.active && styles.visible,\n    state.motion.type === 'entering' && styles.entering,\n    state.motion.type === 'exiting' && styles.exiting,\n    styles.root,\n  );\n\n  return state;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Action List with Focusable List Items in HTML\nDESCRIPTION: This snippet demonstrates the recommended approach for implementing a single action list with focusable list items. It uses the 'list' and 'listitem' roles, with 'aria-roledescription' to indicate the action.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-list/library/docs/ListA11y.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<ul role=\"list\">\n  <li role=\"listitem\" tabindex=\"0\" aria-roledescription=\"button\">\n    John Doe\n  </li>\n  <!-- More list items -->\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Deletion Announcement with FluentUI Announced Component in TSX\nDESCRIPTION: This snippet shows how to use the Announced component to notify screen reader users when an email has been successfully deleted. Similar to the previous example, it requires an ID and a message property that will be read by screen readers.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-examples/src/react/Announced/docs/QuickActions/Overview.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\npublic render(): JSX.Element {\n  return (\n    <Announced\n      id={announcedId}\n      message='Mail deleted'\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PresenceGroup Component in TypeScript\nDESCRIPTION: This snippet defines the PresenceGroup component, which is likely used to manage the presence state of multiple child components. It includes lifecycle methods and state management.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-motion/library/etc/react-motion.api.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport class PresenceGroup extends React_2.Component<PresenceGroupProps, PresenceGroupState> {\n    constructor(props: PresenceGroupProps, context: unknown);\n    // (undocumented)\n    componentDidMount(): void;\n    // (undocumented)\n    componentWillUnmount(): void;\n    // (undocumented)\n    static getDerivedStateFromProps(nextProps: PresenceGroupProps, { childMapping: prevChildMapping, firstRender }: PresenceGroupState): {\n        childMapping: PresenceGroupChildMapping;\n        firstRender: boolean;\n    };\n    // (undocumented)\n    render(): JSX.Element;\n}\n```\n\n----------------------------------------\n\nTITLE: WithSlotRenderFunction Type Definition in TypeScript\nDESCRIPTION: Shows the TypeScript type definition for WithSlotRenderFunction which enables slots to accept render functions as children. This allows for complete replacement of a slot's content implementation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Slots/Slots.stories.mdx#2025-04-20_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\ntype WithSlotRenderFunction<Props extends { children?: unknown }> = Props & {\n  children?: Props['children'] | SlotRenderFunction<Props>;\n};\n\ntype SlotRenderFunction<Props> = (\n  Component: React.ElementType<Props>,\n  props: Omit<Props, 'children' | 'as'>,\n) => React.ReactNode;\n```\n\n----------------------------------------\n\nTITLE: Defining Shape Component in TypeScript\nDESCRIPTION: The Shape constant exports a functional component for rendering shapes within charts, aiding in customizable visual presentations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/etc/react-charting.api.md#2025-04-20_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport const Shape: React_2.FC<IShapeProps>;\n```\n\n----------------------------------------\n\nTITLE: Refactor getSlots for Null Rendering in TypeScript\nDESCRIPTION: Adjusts the `getSlots` method to determine slot rendering based on shorthand existence rather than `children` property. This ensures more flexible rendering logic by handling undefined shorthand effectively.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/slot-null-rendering.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getSlots(state, slotNames) {\n  // ...\n  if (state[name] === undefined) {\n    slots[name] = nullRender;\n    continue;\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Group One Personas in TypeScript\nDESCRIPTION: This constant represents a group of extended persona props, enhancing basic persona functionality by including additional properties. It is designed to facilitate handling user details with associated keys.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/example-data/etc/example-data.api.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport const groupOne: (IExampleExtendedPersonaProps & {\n    key: string | number;\n})[];\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react to v8.45.0\nDESCRIPTION: This patch updates the @fluentui/react library to version 8.45.0 for performance enhancements and bug fixes. Referenced in Pull Request #20833.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/ts-minbar-test-react/CHANGELOG.md#2025-04-20_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.45.0 ([PR #20833](https://github.com/microsoft/fluentui/pull/20833) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Defining Options in v8 Pickers with onResolveSuggestions\nDESCRIPTION: Example showing how options were defined in Fluent UI v8's Pickers component using the onResolveSuggestions callback approach rather than a direct options prop.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/library/docs/Spec.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst options = [\n  { key: 'A', name: 'Option A' },\n  { key: 'B', name: 'Option B' },\n];\nconst filterSuggestedOptions = (filterText: string, tagList: ITag[]): ITag[] => options;\n\n<TagPicker onResolveSuggestions={filterSuggestedOptions} />;\n```\n\n----------------------------------------\n\nTITLE: Defining Globals and Themes in TypeScript\nDESCRIPTION: This snippet defines various types and constants for global parameters related to Fluent UI themes and layout directions. It includes an interface 'FluentGlobals' which extends Storybook's Args and allows for specifying layout direction (LTR/RTL), theme IDs, and strict mode. Additionally, it defines a constant 'THEME_ID' representing the theme identifier used in the addon.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-storybook-addon/etc/react-storybook-addon.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Args } from '@storybook/react';\nimport { Parameters as Parameters_2 } from '@storybook/react';\nimport { StoryContext } from '@storybook/react';\n\n// @public (undocumented)\nexport const DIR_ID: \"storybook_fluentui-react-addon_dir\";\n\n// @public\nexport interface FluentGlobals extends Args {\n    // (undocumented)\n    [DIR_ID]?: 'ltr' | 'rtl';\n    // (undocumented)\n    [STRICT_MODE_ID]?: boolean;\n    // (undocumented)\n    [THEME_ID]?: ThemeIds;\n}\n\n// @public (undocumented)\nexport const THEME_ID: \"storybook_fluentui-react-addon_theme\";\n\n// @public (undocumented)\nexport type ThemeIds = (typeof themes)[number]['id'];\n\n// @public (undocumented)\nexport const themes: readonly [{\n    readonly id: \"web-light\";\n    readonly label: \"Web Light\";\n}, {\n    readonly id: \"web-dark\";\n    readonly label: \"Web Dark\";\n}, {\n    readonly id: \"teams-light\";\n    readonly label: \"Teams Light\";\n}, {\n    readonly id: \"teams-dark\";\n    readonly label: \"Teams Dark\";\n}, {\n    readonly id: \"teams-high-contrast\";\n    readonly label: \"Teams High Contrast\";\n}];\n```\n\n----------------------------------------\n\nTITLE: Defining CSS-Based Motion with Griffel\nDESCRIPTION: Example of defining a CSS-based motion animation using Griffel, creating a fadeEnter animation with keyframes. This is part of the discarded CSS-based approach.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/motion-definition-n-apis.md#2025-04-20_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type GriffelStyle } from '@griffel/react';\n\nconst fadeEnterSlow: GriffelStyle = {\n  animationName: {\n    from: { opacity: 0 },\n    to: { opacity: 1 },\n  },\n  animationFillMode: 'forwards',\n  animationDuration: tokens.durationSlow,\n  animationTimingFunction: tokens.accelerateMax,\n};\n```\n\n----------------------------------------\n\nTITLE: Migrating Menu and Trigger Props in Fluent UI - After\nDESCRIPTION: Example of how to migrate menu and trigger props to the new component structure in Fluent UI v9 using MenuTrigger and MenuItem components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Menu.stories.mdx#2025-04-20_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Menu, MenuTrigger, MenuPopover, MenuList, MenuItem, Button } from '@fluentui/react-components';\n\nexport const Component = () => {\n  <Menu>\n    <MenuTrigger>\n      <Button>Open</Button>\n    </MenuTrigger>\n    <MenuPopover>\n      <MenuList>\n        <MenuItem>1. menu item</MenuItem>\n        <MenuItem>2. menu item</MenuItem>\n      </MenuList>\n    </MenuPopover>\n  </Menu>;\n};\n```\n\n----------------------------------------\n\nTITLE: Build Class Map Function\nDESCRIPTION: Defines a function, `buildClassMap`, which takes a generic object `styles` and returns an object mapping the keys of `styles` to strings. It is used to create a mapping of style names to CSS class names.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/style-utilities/etc/style-utilities.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"export function buildClassMap<T extends Object>(styles: T): {\\n    [key in keyof T]?: string;\\n};\"\n```\n\n----------------------------------------\n\nTITLE: Using SearchBox Component in JSX\nDESCRIPTION: Examples showing how to utilize the SearchBox component within a React component using JSX syntax. The first example sets the default value of the search box to 'Hello, World!'. The second example demonstrates handling the search box's 'value' and 'onChange' event.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-search/library/README.md#2025-04-20_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<SearchBox defaultValue=\\\"Hello, World!\\\" />\n```\n\nLANGUAGE: JSX\nCODE:\n```\n<SearchBox value={value} onChange={onInputChange} />\n```\n\n----------------------------------------\n\nTITLE: Using Styles to Override Avatar Sizes - TypeScript\nDESCRIPTION: This snippet demonstrates how to use the makeStyles hook to style the Avatar component inside a TableCellLayout, allowing direct control over its dimensions via CSS.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/reusing-avatar-in-components.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst useStyles = makeStyles({\n  avatarSlot: {\n    '& fui-Avatar': {\n      width: '10px',\n      height: '10px',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Bumping FluentUI React and Monaco Editor with PR\nDESCRIPTION: This snippet shows how to bump the version of both @fluentui/react and @fluentui/react-monaco-editor packages in a single pull request. The pull request number provides a direct link to the changes within the repository. This action is part of maintaining the dependencies for the project.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-docsite-components/CHANGELOG.md#2025-04-20_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n\"- Bump @fluentui/react to v8.112.3 ([PR #29054](https://github.com/microsoft/fluentui/pull/29054) by beachball)\",\n  \"- Bump @fluentui/react-monaco-editor to v1.7.136 ([PR #29054](https://github.com/microsoft/fluentui/pull/29054) by beachball)\"\n```\n\n----------------------------------------\n\nTITLE: Theme Overriding with Providers in Fluent UI (JSX)\nDESCRIPTION: This JSX snippet demonstrates how themes can be overridden in Fluent UI using nested Provider components and inline variable/style overrides. It showcases the merging of different theme layers.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/docs/src/pages/Debugging.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Provider theme={outerTheme}>\n  <Provider theme={innerTheme}>\n    <Component variables={componentVariablesOverrides} design={designStyleOverrides} styles={componentStyleOverrides} />\n  </Provider>\n</Provider>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Tokens with makeStyles\nDESCRIPTION: Demonstrates how to use both custom tokens and standard tokens in makeStyles after they have been injected through FluentProvider.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/convergence/make-styles-no-functions.md#2025-04-20_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { tokens } from '@fluentui/react-theme';\nimport type { CustomTokens } from './custom-theme';\n\nconst customTokens: CustomTokens = {\n  tokenA: 'var(--tokenA)',\n};\n\nmakeStyles({\n  root: {\n    backgroundColor: customTokens.tokenA,\n    color: tokens.tokenB,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Domain for Data Plot\nDESCRIPTION: Defines a partial object representing the domain of a plot including its rows, columns, and x/y dimensions. This is part of a larger plot configuration schema used to customize the visualization of data.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/chart-utilities/etc/chart-utilities.api.md#2025-04-20_snippet_29\n\nLANGUAGE: TypeScript\nCODE:\n```\ndomain: Partial<{\n    row: number;\n    column: number;\n    x: number[];\n    y: number[];\n}>;\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.75.1\nDESCRIPTION: This patch updates '@fluentui/react' to version 8.75.1 as part of the ongoing maintenance of the Fluent UI components. The update was executed via a pull request by the contributor 'beachball'.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/theming-designer/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.75.1 ([PR #23551](https://github.com/microsoft/fluentui/pull/23551) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Implementing PeoplePicker Style Functions\nDESCRIPTION: Provides style generation functions for PeoplePicker components including selected items and suggestions. These functions apply theming and state-based styling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_42\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport function getPeoplePickerItemStyles(props: IPeoplePickerItemSelectedStyleProps): IPeoplePickerItemSelectedStyles;\n\n// @public (undocumented)\nexport function getPeoplePickerItemSuggestionStyles(props: IPeoplePickerItemSuggestionStyleProps): IPeoplePickerItemSuggestionStyles;\n\n// @public\nexport function getPersonaInitialsColor(props: Pick<IPersonaProps, 'primaryText' | 'text' | 'initialsColor'>): string;\n```\n\n----------------------------------------\n\nTITLE: Rendering JSX with FluentProvider in TypeScript\nDESCRIPTION: The 'renderFluentProvider_unstable' function takes a state and context values to return a JSX element, enabling dynamic UI rendering. It requires state information about the FluentProvider and its context to compose the UI elements correctly.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-provider/library/etc/react-provider.api.md#2025-04-20_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const renderFluentProvider_unstable: (state: FluentProviderState, contextValues: FluentProviderContextValues) => JSX.Element;\n```\n\n----------------------------------------\n\nTITLE: Migrate package to use JSX importSource\nDESCRIPTION: This change migrates the package to use JSX importSource. This involves updating the build configuration and potentially some code to align with the new JSX transform.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-slider/library/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: none\nCODE:\n```\n\"chore: migrate package to use JSX importSource ([PR #28959](https://github.com/microsoft/fluentui/pull/28959) by bernardo.sunderhus@gmail.com)\"\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react-utilities to version v9.0.0-rc.6\nDESCRIPTION: This snippet documents the update of the @fluentui/react-utilities to version v9.0.0-rc.6, ensuring utility functions are maintained and updated for a robust framework.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/vr-tests-react-components/CHANGELOG.md#2025-04-20_snippet_25\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react-utilities to v9.0.0-rc.6 ([PR #21995](https://github.com/microsoft/fluentui/pull/21995) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Passing Context Values to Render Functions - TypeScript\nDESCRIPTION: Illustrates modifying render functions to accept and handle context values as parameters. Separates context creation into a custom hook function.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/context-values.md#2025-04-20_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction useFooContextValues() {\n  const barContextValue = React.useMemo(/* ... */);\n  const bazContextValue = React.useMemo(/* ... */);\n\n  return { bar: bazContextValue, baz: bazContextValue };\n}\n\nfunction FooComponent() {\n  const state = useFooState();\n  const contextValues = useFooContextValues(state);\n\n  return renderFoo(state, contextValues);\n}\n\nfunction renderFoo(state, contextValues) {\n  return <SampleContext.Provider value={contextValues.baz} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Tree Behavior for Multi-Select\nDESCRIPTION: This fix updates the tree's behavior to correctly handle multi-selection, addressing previously unhandled cases that were causing issues for users. No specific dependencies are mentioned.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nFix `treeAsListBehavior` to support multi-select `Tree` @yuanboxue-amber ([#15147](https://github.com/microsoft/fluentui/pull/15147))\n```\n\n----------------------------------------\n\nTITLE: Adding eslint react-compiler\nDESCRIPTION: This patch adds `eslint react-compiler`.  It likely integrates the React compiler ESLint plugin to improve code quality and catch potential issues related to React components during development.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-spinbutton/library/CHANGELOG.md#2025-04-20_snippet_7\n\nLANGUAGE: none\nCODE:\n```\nchore: add eslint react-compiler ([PR #31457](https://github.com/microsoft/fluentui/pull/31457) by seanmonahan@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Component Wrapper Approach for Fluent V9 Input Appearance\nDESCRIPTION: This example demonstrates wrapping library components to modify the appearance prop at the application level. This approach adds a layer of components that always apply the 'filled-darker' appearance.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/convergence/apperance-migration.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Input: ForwardRefComponent<InputProps> = React.forwardRef((props, ref) => {\n  return <BaseInput appearance=\"filled-darker\" {...props} ref={ref} />;\n});\n```\n\n----------------------------------------\n\nTITLE: Fixing npm versions in all packages\nDESCRIPTION: This patch reverts incorrectly set npm versions in all packages. It ensures that the correct versions are used for dependencies and during the packaging process.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nfix: revert incorectly set npm versions in all packages ([PR #31937](https://github.com/microsoft/fluentui/pull/31937) by martinhochel@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Executing Workspace Generator for Migration - Shell Script\nDESCRIPTION: This command triggers the workspace generator to migrate package dependencies from carets to fixed versions. It is a fundamental operation for ensuring that all package dependencies adhere to a specified versioning scheme.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/migrate-fixed-versions/README.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:migrate-fixed-versions ...\n```\n\n----------------------------------------\n\nTITLE: Picker Component Interfaces\nDESCRIPTION: TypeScript interfaces defining the structure and props of Picker components including ARIA IDs and item props\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_165\n\nLANGUAGE: typescript\nCODE:\n```\nexport type IPickerAriaIds = {\n    selectedSuggestionAlert: string;\n    selectedItems: string;\n    suggestionList: string;\n    combobox: string;\n    error: string;\n};\n\nexport interface IPickerItem {\n}\n\nexport interface IPickerItemProps<T> extends React_2.AllHTMLAttributes<HTMLElement> {\n    componentRef?: IRefObject<IPickerItem>;\n    index: number;\n    item: T;\n    key?: string | number;\n    onItemChange?: (item: T, index: number) => void;\n    onRemoveItem?: () => void;\n    removeButtonAriaLabel?: string;\n    removeButtonIconProps?: IIconProps;\n    selected?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Overflow Props in FluentUI Toolbar\nDESCRIPTION: Shows the before state of using overflow props in Toolbar component. The after state requires referring to a separate example for implementation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Toolbar.stories.mdx#2025-04-20_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Toolbar } from '@fluentui/react-components';\nconst Component = () => (\n  <Toolbar\n    aria-label=\"Toolbar overflow menu\"\n    items={toolbarItems}\n    overflow\n    overflowOpen={overflowOpen}\n    overflowItem={{\n      title: 'More',\n    }}\n    onOverflowOpenChange={(e, { overflowOpen }) => {\n      setOverflowOpen(overflowOpen);\n    }}\n    getOverflowItems={startIndex => itemData.slice(startIndex)}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Tree Data Structure Interface in TypeScript\nDESCRIPTION: The ITreeDataStructure interface defines the structure for a node in tree data with properties for children and various metrics, supporting hierarchical rendering in charts.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/etc/react-charting.api.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface ITreeDataStructure {\n    bodyText?: string;\n    children: Array<ITreeDataStructure>;\n    dataName: string;\n    fill: string;\n    id: number;\n    metricName?: string;\n    parentID: number;\n    subName?: string;\n    x: number;\n    y: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Meta Component from Storybook Addon-Docs\nDESCRIPTION: This code snippet imports the Meta component from the '@storybook/addon-docs' package to define metadata for Storybook documentation. It does not require additional dependencies other than Storybook itself.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/_docs/developer/migration.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs';\n```\n\n----------------------------------------\n\nTITLE: Rendering Different Button Variants in React\nDESCRIPTION: This example demonstrates various ways to render and customize the Button component, including with icons, different appearances, sizes, and disabled state.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-button/library/README.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Button>Submit</Button>\n<Button icon={<SVGIcon />} />\n<Button icon={<SVGIcon />}>Submit</Button>\n<Button icon={<SVGIcon />} iconPosition=\"after\">Submit</Button>\n<Button appearance=\"primary\">Submit</Button>\n<Button disabled>Submit</Button>\n<Button size=\"small\">Submit</Button>\n<Button size=\"large\">Submit</Button>\n```\n\n----------------------------------------\n\nTITLE: Declaring TextAlign Constants and Type in TypeScript\nDESCRIPTION: Defines a constant object TextAlign with properties for text alignment options (start, end, center, justify) and exports a type using ValuesOf utility type.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_73\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport const TextAlign: {\n    readonly start: \"start\";\n    readonly end: \"end\";\n    readonly center: \"center\";\n    readonly justify: \"justify\";\n};\n\n// @public\nexport type TextAlign = ValuesOf<typeof TextAlign>;\n```\n\n----------------------------------------\n\nTITLE: Ensuring TreeItem emits events in React\nDESCRIPTION: This bugfix ensures that the TreeItem component emits events properly. This is crucial for interactive components that need to respond to user actions or state changes within the tree structure.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tree/library/CHANGELOG.md#2025-04-20_snippet_9\n\nLANGUAGE: React\nCODE:\n```\nbugfix: ensure TreeItem emits events properly ([PR #29390](https://github.com/microsoft/fluentui/pull/29390) by bernardo.sunderhus@gmail.com)\n```\n\n----------------------------------------\n\nTITLE: Defining Text Component Props and State in TypeScript Without Default\nDESCRIPTION: This snippet defines the props and state types for a Text component, demonstrating the absence of a default value for the font property to avoid overwriting styles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/no-action-prop-value-standardization.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Text.types.ts\n\ntype TextProps = {\n  font?: 'monospace' | 'numeric';\n};\ntype TextState = {\n  // Also nullable as the default does not overwrite styles\n  font?: 'monospace' | 'numeric';\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// useText.ts\n\nconst { font /* {...} */ } = props; // We no longer set a default here\n\nconst state = {\n  font,\n  // {...}\n};\n```\n\n----------------------------------------\n\nTITLE: Version Update Notes\nDESCRIPTION: Changelog entries documenting version bumps, dependency updates, and feature changes for the React Tooltip component\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tooltip/library/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.0.0-alpha.75]\n### Changes\n- Bump @fluentui/babel-make-styles to v9.0.0-alpha.42\n\n## [9.0.0-alpha.74] \n### Changes\n- Bump @fluentui/react-portal to v9.0.0-alpha.41\n\n## [9.0.0-alpha.73]\n### Changes \n- Bump @fluentui/babel-make-styles to v9.0.0-alpha.40\n```\n\n----------------------------------------\n\nTITLE: Implementing atMention='me' styling in dark theme using FluentUI v9\nDESCRIPTION: Example showing how to achieve the same visual result as atMention='me' property in the dark theme using makeStyles in v9.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-text/library/docs/MIGRATION.md#2025-04-20_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeStyles, Text } from '@fluentui/react-components';\n\nconst useStyles = makeStyles({\n  root: {\n    color: 'rgb(233, 117, 72)',\n    fontWeight: 700,\n  },\n});\n\nconst MyComponent = () => {\n  const styles = useStyles();\n\n  return <Text className={styles.root}>{/* ... */}</Text>;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Extended mountNode Prop in Portal Component - TSX\nDESCRIPTION: Demonstrates the current and proposed usage patterns for the Portal component's mountNode prop, including support for object notation and className customization.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/components/portal-mount-node.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App() {\n  return (\n    <>\n      {/* Current usage, already exists */}\n      <Portal mountNode={element} />\n\n      {/* Proposed usages */}\n      <Portal mountNode={element} />\n      <Portal mountNode={{ element }} />\n      <Portal mountNode={{ className: 'foo' }} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react-textarea to version v9.0.0-alpha.1\nDESCRIPTION: This entry encapsulates the update for the @fluentui/react-textarea component to version v9.0.0-alpha.1, part of a commitment to keeping all components within the Fluent UI library current.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/vr-tests-react-components/CHANGELOG.md#2025-04-20_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react-textarea to v9.0.0-alpha.1 ([PR #21995](https://github.com/microsoft/fluentui/pull/21995) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Positioning and Triggering Menu in Fluent UI\nDESCRIPTION: Demonstrates how to position and trigger a menu in both v7/8 and v0 of Fluent UI. It shows the usage of 'target' and 'trigger' props for anchoring and controlling the menu visibility.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/library/docs/Spec.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst buttonRef = React.useRef(<button />)\n// V7/8\n<ContextualMenu\n  ...\n  target={buttonRef}\n/>\n\n// v0 - shorthand\n<Popup\n  target={buttonRef}\n  content={...}\n/>\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// v0 - shorthand trigger\n<Popup\n  trigger={<Button />}\n  content={...}\n/>\n// v0 - children trigger\n<Popup content={...}>\n  <Button icon={<MoreIcon />} title=\"Show popup\" />\n</Popup>\n```\n\n----------------------------------------\n\nTITLE: Defining SelectAllVisibility Enumeration\nDESCRIPTION: Controls the visibility of the \"Select All\" option in multi-select components. Options include none (disabled), hidden (not shown but functionality available), and visible.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_251\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport enum SelectAllVisibility {\n    // (undocumented)\n    hidden = 1,\n    // (undocumented)\n    none = 0,\n    // (undocumented)\n    visible = 2\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React and Utility Types in Calendar Component\nDESCRIPTION: Import statements for React and SlotClassNames utility type from @fluentui/react-utilities, which are used throughout the calendar component implementation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-calendar-compat/library/etc/react-calendar-compat.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"react\" />\n\nimport * as React_2 from 'react';\nimport type { SlotClassNames } from '@fluentui/react-utilities';\n```\n\n----------------------------------------\n\nTITLE: Defining OnUpdateItemVisibilityPayload Interface in TypeScript\nDESCRIPTION: This snippet specifies the OnUpdateItemVisibilityPayload interface, which contains the item entry and its visibility status, used as input for updating the visibility of items.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/priority-overflow/etc/priority-overflow.api.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface OnUpdateItemVisibilityPayload {\n    // (undocumented)\n    item: OverflowItemEntry;\n    // (undocumented)\n    visible: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RTL Direction in HTML for Fluent UI\nDESCRIPTION: Demonstrates how to set up right-to-left text direction at the HTML document level by adding the dir attribute. This configuration enables RTL layout for Fluent UI components and Fabric Core responsive grid.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Styles/LocalizationPage/docs/web/LocalizationRTL.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html dir=\"rtl\">\n  <head>\n    <meta charset=\"utf-8\" />\n  </head>\n  ...\n</html>\n```\n\n----------------------------------------\n\nTITLE: Vertical Tablist Implementation in HTML\nDESCRIPTION: This snippet demonstrates how to create a vertically oriented Tablist component by setting the `orientation` attribute to \"vertical\". This attribute changes the layout of the tablist from the default horizontal to a vertical arrangement.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/tablist/readme.md#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<fluent-tablist orientation=\"vertical\">\n  <fluent-tab>One / Left</fluent-tab>\n  <fluent-tab>Two / Middle</fluent-tab>\n  <fluent-tab>Three / Right</fluent-tab>\n</fluent-tablist>\n```\n\n----------------------------------------\n\nTITLE: Setting up FluentProvider for Theme Injection in React\nDESCRIPTION: This code demonstrates how to instantiate a FluentProvider component to inject a Fluent UI theme into the DOM, which is required before using the SASS variables.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-theme-sass/README.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { FluentProvider, teamsLightTheme } from '@fluentui/react-components';\nimport App from './App';\nReactDOM.render(\n  <FluentProvider theme={teamsLightTheme}>\n    <App />\n  </FluentProvider>,\n  document.getElementById('root'),\n);\n```\n\n----------------------------------------\n\nTITLE: Link Element as Button without `href` in Material-UI\nDESCRIPTION: Showcases button usage for Links in Material-UI when href is absent. Relies upon Material-UI's CSS and button properties to render.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Link.md#2025-04-20_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<button\\n  class=\\\"MuiTypography-root MuiLink-root MuiLink-underlineHover MuiLink-button MuiTypography-body2 MuiTypography-colorPrimary\\\"\\n>\\n  Button Link\\n</button>\n```\n\n----------------------------------------\n\nTITLE: Stardust Checkbox Props Definition\nDESCRIPTION: Props specification for the Stardust Checkbox component with support for custom styling, accessibility, and interaction\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Checkbox.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface StardustCheckboxProps {\n  checked?: boolean;\n  disabled?: boolean;\n  labelPosition?: 'start' | 'end';\n  toggle?: boolean;\n  onChange?: ComponentEventHandler;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Style Class Names with Fluent UI\nDESCRIPTION: Code for retrieving style class names using Fluent UI's classNamesFunction. This is used to apply consistent styling to tree chart components based on the component's style props and styles interface.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/src/components/TreeChart/TreeChart.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst getClassNames = classNamesFunction<ITreeStyleProps, ITreeStyles>();\n```\n\n----------------------------------------\n\nTITLE: Migrated FlexItem in Fluent UI v9 (TSX)\nDESCRIPTION: Example of how to migrate the FlexItem component to Fluent UI v9. It uses a custom style hook to apply flex item properties to a Button component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/FlexItem.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// in COMPONENT_NAME.tsx\nimport { Flex, Button } from \"@fluentui/react-components\";\nimport { useStyles } from \"./COMPONENT_NAME.styles.ts\";\n\nexport const Component = () => {\n  const classes = useStyles();\n  <Flex>\n    <Button content=\"I am first button\">\n    <Button className={classes.flexItemPushColumn}>I am far side button</Button>\n  </Flex>;\n```\n\n----------------------------------------\n\nTITLE: Menu Item Role Attribute Configuration\nDESCRIPTION: Defines the different role configurations for menu items, supporting standard menu interactions and input types\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/menu-item/README.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<fluent-menu-item role=\"menuitem\"></fluent-menu-item>\n<fluent-menu-item role=\"menuitemcheckbox\"></fluent-menu-item>\n<fluent-menu-item role=\"menuitemradio\"></fluent-menu-item>\n```\n\n----------------------------------------\n\nTITLE: Dry Run Command - Shell\nDESCRIPTION: Command to preview the generator's output without making actual changes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/split-library-in-two/README.md#2025-04-20_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:split-library-in-two --dry-run\n```\n\n----------------------------------------\n\nTITLE: Defining Tree Chart Data Point Interface in TypeScript\nDESCRIPTION: This interface, ITreeChartDataPoint, defines the structure for a data point in a tree chart, including optional and required fields to represent hierarchical data.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/etc/react-charting.api.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface ITreeChartDataPoint {\n    bodytext?: string;\n    children?: Array<ITreeChartDataPoint>;\n    fill: string;\n    metric?: string;\n    name: string;\n    subname?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Area Chart Props Interface\nDESCRIPTION: Defines the properties for the AreaChart component, extending the CartesianChartProps. It includes properties such as `culture` for localization, `data` of type `ChartProps`, `enableGradient` to enable gradient fills, `enablePerfOptimization` for performance tweaks, `mode` for how areas are rendered, callbacks for rendering custom callouts, and styling options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charts/library/etc/react-charts.api.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport interface AreaChartProps extends CartesianChartProps {\n    culture?: string;\n    data: ChartProps;\n    enableGradient?: boolean;\n    enablePerfOptimization?: boolean;\n    mode?: 'tozeroy' | 'tonexty';\n    onRenderCalloutPerDataPoint?: RenderFunction<CustomizedCalloutData>;\n    onRenderCalloutPerStack?: RenderFunction<CustomizedCalloutData>;\n    // (undocumented)\n    optimizeLargeData?: boolean;\n    styles?: CartesianChartStyles;\n}\"\n```\n\n----------------------------------------\n\nTITLE: React Hook Declarations for Modal and Navigation\nDESCRIPTION: TypeScript declarations for React hooks used in modal activation and arrow navigation groups with customizable options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tabster/etc/react-tabster.api.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport function useActivateModal(): (elementFromModal: HTMLElement | undefined) => void;\n\nexport const useArrowNavigationGroup: (options?: UseArrowNavigationGroupOptions) => Types.TabsterDOMAttribute;\n\nexport interface UseArrowNavigationGroupOptions {\n    axis?: 'vertical' | 'horizontal' | 'grid' | 'grid-linear' | 'both';\n    circular?: boolean;\n    ignoreDefaultKeydown?: Types.FocusableProps['ignoreKeydown'];\n    memorizeCurrent?: boolean;\n    tabbable?: boolean;\n    unstable_hasDefault?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react to v8.41.1\nDESCRIPTION: This patch upgrades the @fluentui/react library to version 8.41.1 to address identified issues and integrate improvements. Referenced in Pull Request #20514.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/ts-minbar-test-react/CHANGELOG.md#2025-04-20_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.41.1 ([PR #20514](https://github.com/microsoft/fluentui/pull/20514) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Ban Instanceof HTMLElement (Incorrect)\nDESCRIPTION: This code snippet shows the incorrect usage of `instanceof HTMLElement` which can cause problems in multiple realms environments. It directly uses `instanceof` to check the type of `event.target`.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/eslint-plugin/README.md#2025-04-20_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nevent.target instanceof HTMLElement;\n\nevent.target instanceof HTMLInputElement;\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyboard Event Utility Functions in TypeScript\nDESCRIPTION: This snippet defines utility functions for working with keyboard events, including getCode and getKey functions to retrieve key codes and names.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/keyboard-key/etc/keyboard-key.api.md#2025-04-20_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function getCode(eventOrKey: Partial<KeyboardEventLike> | string): number | undefined;\n\nexport function getKey(eventOrCode: Partial<KeyboardEventLike> | number): string | undefined;\n\nexport type KeyboardEventLike = Pick<KeyboardEvent, 'key' | 'keyCode' | 'which' | 'shiftKey'>;\n\nexport const keyboardKey: KeyNames;\n```\n\n----------------------------------------\n\nTITLE: ActivityItem Component Definition in TypeScript\nDESCRIPTION: Defines the ActivityItem component that extends React.Component. It takes props of type IActivityItemProps and renders activity information in a structured format.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport class ActivityItem extends React_2.Component<IActivityItemProps, {}> {\n    constructor(props: IActivityItemProps);\n    // (undocumented)\n    render(): JSX.Element;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Virtual Parents in React Portals\nDESCRIPTION: Introduces the concept of virtual parents for managing DOM relationships in out-of-order elements within React Portals, including utility methods to set virtual parents and check element containment.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-portal/library/docs/Spec.md#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// Setting a virtual parent\n\nconst parent document.getElementById('parent')\nconst child document.getElement.ById('child');\n\nchild._virtual.parent = parent;\n```\n\n----------------------------------------\n\nTITLE: useImage_unstable Hook Definition\nDESCRIPTION: Defines the useImage_unstable hook, which is likely used to manage the state and behavior of the Image component. It accepts ImageProps and a ref to the HTMLImageElement as input, and returns the ImageState.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-image/library/etc/react-image.api.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const useImage_unstable: (props: ImageProps, ref: React_2.Ref<HTMLImageElement>) => ImageState;\n```\n\n----------------------------------------\n\nTITLE: Get Screen Selector Function\nDESCRIPTION: Defines a function, `getScreenSelector`, that generates a media query string based on provided minimum and maximum screen width values. Used to apply responsive styles based on screen size.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/style-utilities/etc/style-utilities.api.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n\"export function getScreenSelector(min: number | undefined, max: number | undefined): string;\"\n```\n\n----------------------------------------\n\nTITLE: Fixing onFocusParent Triggering\nDESCRIPTION: This fix triggers the onFocusParent prop on the ArrowLeft key press for leaf nodes in the Tree component, enhancing keyboard navigation. No other specific requirements are listed.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nFix `Tree` to have prop `onFocusParent` triggered on `ArrowLeft` for leaf node @yuanboxue-amber ([#15442](https://github.com/microsoft/fluentui/pull/15442))\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Component with Success Color in High Contrast Theme\nDESCRIPTION: This snippet shows how to create a Text component with success color styling for the high contrast theme using makeStyles from FluentUI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-text/library/docs/MIGRATION.md#2025-04-20_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeStyles, Text } from '@fluentui/react-components';\n\nconst useStyles = makeStyles({\n  root: {\n    color: 'rgb(146, 195, 83)',\n  },\n});\n\nconst MyComponent = () => {\n  const styles = useStyles();\n\n  return <Text className={styles.root}>{/* ... */}</Text>;\n};\n```\n\n----------------------------------------\n\nTITLE: Version 9.0.0-alpha.73 Changelog Entry\nDESCRIPTION: Changelog entry documenting dependency bump of @fluentui/babel-make-styles package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-provider/library/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.0.0-alpha.73](https://github.com/microsoft/fluentui/tree/@fluentui/react-provider_v9.0.0-alpha.73)\n\nMon, 06 Sep 2021 07:34:53 GMT\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-provider_v9.0.0-alpha.72..@fluentui/react-provider_v9.0.0-alpha.73)\n\n### Changes\n\n- Bump @fluentui/babel-make-styles to v9.0.0-alpha.44 ([PR #19640](https://github.com/microsoft/fluentui/pull/19640) by lingfangao@hotmail.com)\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react to v8.41.0\nDESCRIPTION: This patch updates the @fluentui/react library to version 8.41.0, including critical enhancements. Further details are found in Pull Request #20488.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/ts-minbar-test-react/CHANGELOG.md#2025-04-20_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.41.0 ([PR #20488](https://github.com/microsoft/fluentui/pull/20488) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Basic Plot Schema Interface\nDESCRIPTION: Specifies the basic structure for a plot's schema, including configuration, data, and layout options. This serves as a comprehensive blueprint for building and configuring visual data plots.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/chart-utilities/etc/chart-utilities.api.md#2025-04-20_snippet_33\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface PlotlySchema {\n    config?: Partial<Config>;\n    data: Data[];\n    layout?: Partial<Layout>;\n}\n```\n\n----------------------------------------\n\nTITLE: Image Fit Options Examples - React (JavaScript)\nDESCRIPTION: This snippet demonstrates how to utilize various fit options for the Image component: none, center, contain, and cover, supporting responsive design.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-image/library/docs/Spec.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// None\n<Image fit=\"none\" src=\"...\" />\n\n// Center\n<Image fit=\"center\" src=\"...\" />\n\n// Contain\n<Image fit=\"contain\" src=\"...\" />\n\n// Cover\n<Image fit=\"cover\" src=\"...\" />\n```\n\n----------------------------------------\n\nTITLE: Version 9.0.0-alpha.74 Changelog Entry\nDESCRIPTION: Changelog entry documenting dependency bump of @fluentui/babel-make-styles package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-provider/library/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.0.0-alpha.74](https://github.com/microsoft/fluentui/tree/@fluentui/react-provider_v9.0.0-alpha.74)\n\nFri, 10 Sep 2021 07:39:51 GMT\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-provider_v9.0.0-alpha.73..@fluentui/react-provider_v9.0.0-alpha.74)\n\n### Changes\n\n- Bump @fluentui/babel-make-styles to v9.0.0-alpha.45 ([PR #19642](https://github.com/microsoft/fluentui/pull/19642) by behowell@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Adding build-storybook Script to Package.json\nDESCRIPTION: Shows how to add a build-storybook script to a package's package.json file to generate storybook assets in the dist folder. The example uses a hypothetical @fluentui/react-clippy package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/pr-deploy-site/README.md#2025-04-20_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n  {\n    \"name\": \"@fluentui/react-clippy\",\n    \"scripts\": {\n+      \"build-storybook\": \"storybook build -o ./dist/storybook\"\n    }\n  }\n```\n```\n\n----------------------------------------\n\nTITLE: Optimized Path-Based Imports for Fluent UI React Components\nDESCRIPTION: Recommended approach for importing Fluent UI React components using specific paths to reduce bundle size. This method imports only the necessary components rather than the entire library.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-resources/src/docs/GettingStartedOverview.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from '@fluentui/react/lib/Button';\nimport { Dropdown } from '@fluentui/react/lib/Dropdown';\nimport { List } from '@fluentui/react/lib/List';\n```\n\n----------------------------------------\n\nTITLE: Defining Keyboard Key Constants in TypeScript\nDESCRIPTION: This snippet defines various keyboard key constants as numeric values, representing key codes for different keys on a keyboard.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/keyboard-key/etc/keyboard-key.api.md#2025-04-20_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const AmpersandKey: 55;\n\nexport const ArrowDownKey: 40;\n\nexport const ArrowLeftKey: 37;\n\nexport const ArrowRightKey: 39;\n\nexport const ArrowUpKey: 38;\n\nexport const AtSignKey: 50;\n\nexport const BackSlashKey: 220;\n\nexport const CaretKey: 54;\n\nexport const ColonKey: 186;\n\nexport const CommaKey: 188;\n\nexport const DecimalKey: 190;\n\n// ... (more key constants)\n```\n\n----------------------------------------\n\nTITLE: Applying ThemeProvider Class to React Portal\nDESCRIPTION: This code shows how the generated class name from ThemeProvider can be applied to React Portal to ensure correct themeing. The class name is passed down to children via context.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/theme-css-variable-insertion.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n\"<Portal className=\\\"theme-provider-1\\\">\n    <div id=\\\"tooltip\\\"> // can use theme \\o/\n</Portal>\"\n```\n\n----------------------------------------\n\nTITLE: createSlideStyles function\nDESCRIPTION: Defines a public function `createSlideStyles` that accepts a `mainAxis` number and returns a `GriffelStyle` object. This function likely generates styles for sliding animations or transitions along a main axis.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-positioning/etc/react-positioning.api.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport function createSlideStyles(mainAxis: number): GriffelStyle;\n```\n\n----------------------------------------\n\nTITLE: Disabling Strict Mode in Next.js - JavaScript\nDESCRIPTION: This snippet provides configuration settings to disable strict mode in a Next.js application to avoid hydration issues when using Fluent UI with React 18. This is important for ensuring seamless operation in specific cases.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/QuickStart.stories.mdx#2025-04-20_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  reactStrictMode: false,\n};\n```\n\n----------------------------------------\n\nTITLE: Function to Configure Keytip Mappings\nDESCRIPTION: The buildKeytipConfigMap function maps configurations using IKeytipConfig to enable keyboard shortcuts within Fluent UI applications. Unlike its predecessor which is deprecated, this function optimizes the accessibility of keytip functionalities.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function buildKeytipConfigMap(config: IKeytipConfig): IKeytipConfigMap;\n```\n\n----------------------------------------\n\nTITLE: Interaction Tag Structure in Fluent UI React\nDESCRIPTION: Sets up the InteractionTag's HTML structure, highlighting use cases both with and without the dismiss icon in the context of Fluent UI React's component library.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tags/library/docs/Spec.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<div>\n  <button>\n    <span>{iconOrMedia}</span>\n    <span>{primaryText}</span>\n    <span>{secondaryText}</span>\n  </button>\n  <button>{dismissIcon}</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react to v8.46.2\nDESCRIPTION: This patch updates the @fluentui/react package to version 8.46.2, ensuring that the project utilizes the latest enhancements. Referenced in Pull Request #20769.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/ts-minbar-test-react/CHANGELOG.md#2025-04-20_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.46.2 ([PR #20769](https://github.com/microsoft/fluentui/pull/20769) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Rendering Announced Component for Bulk Item Movement\nDESCRIPTION: Demonstrates how to use the Announced component to announce the total number of items moved in a single screen reader message, improving user experience for accessibility\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-examples/src/react/Announced/docs/BulkLongRunning/Overview.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\npublic render(): JSX.Element {\n  return (\n    <Announced\n      id={announcedId}\n      message='30 items moved'\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing NavDivider Component\nDESCRIPTION: React component implementation for NavDivider that uses base renderDivider function\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/patterns/basic-recomposition.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\nimport { useNavDivider_unstable } from './useNavDivider';\nimport { useNavDividerStyles_unstable } from './useNavDividerStyles.styles';\nimport { renderDivider_unstable } from '@fluentui/react-divider';\n\nimport type { ForwardRefComponent } from '@fluentui/react-utilities';\nimport type { NavDividerProps } from './NavDivider.types';\n\n/**\n * NavDivider component\n */\nexport const NavDivider: ForwardRefComponent<NavDividerProps> = React.forwardRef((props, ref) => {\n  const state = useNavDivider_unstable(props, ref);\n\n  useNavDividerStyles_unstable(state);\n\n  return renderDivider_unstable(state);\n});\n\nNavDivider.displayName = 'NavDivider';\n```\n\n----------------------------------------\n\nTITLE: Pill Public Structure in JSX\nDESCRIPTION: This snippet shows the public structure for using Pill components and their variants, including standard Pill, actionable Pill, and a Pills grouping. It provides an example of how to utilize the Pill component in various contexts.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Pills.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Pill />\n\n<Pill actionable />\n\n<Pills>\n  <Pill />\n</Pills>\n```\n\n----------------------------------------\n\nTITLE: Defining Input Slots in TypeScript\nDESCRIPTION: Defines the slots for the Input component, including root, input, contentBefore, and contentAfter slots. Ensures that the root and input slots are always rendered.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Slots/Slots.stories.mdx#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport type InputSlots = {\n  root: NonNullable<Slot<'span'>>;\n  input: NonNullable<Slot<'input'>>;\n  contentBefore?: Slot<'span'>;\n  contentAfter?: Slot<'span'>;\n};\n```\n\n----------------------------------------\n\nTITLE: Preset.js Configuration for Custom Addon - JavaScript\nDESCRIPTION: This snippet outlines the structure and contents of preset.js for a custom Storybook addon. It defines the configuration for loading preview and manager entries for the Storybook UI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/scripts/storybook/README.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction config(entry = []) {\n  return [\n    ...entry,\n    require.resolve('./lib/preset/preview'), // (A)\n  ];\n}\n\nfunction managerEntries(entry = []) {\n  return [\n    ...entry,\n    require.resolve('./lib/preset/manager'), // (B)\n  ];\n}\n\nmodule.exports = { managerEntries, config };\n```\n\n----------------------------------------\n\nTITLE: Styling Components with Theme Tokens in React\nDESCRIPTION: Shows how to use makeStyles and theme tokens to create styled components in Fluent UI, emphasizing the use of tokens instead of direct CSS variables.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Theming.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { tokens } from '@fluentui/react-components';\n\nconst useStyles = makeStyles({\n  root: { display: 'flex' },\n  rootPrimary: { color: tokens.colorNeutralForeground3 },\n});\n\nexport Component = props => {\n  const classes = useStyles();\n\n  return <div className={mergeClasses('ui-component', classes.root, props.primary && classes.rootPrimary)} />;\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Fluent UI Documentation\nDESCRIPTION: HTML markup structuring the documentation sections for Fluent UI React, Fabric Core, and designer resources using custom heading IDs to avoid duplicate auto-generation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Overviews/GetStartedPage/docs/web/GetStartedOverview.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- manually creating h3 to avoid duplicate auto-generated IDs -->\n<h3 id=\"fluent-ui-react-overview\">Fluent UI React</h3>\n\n<h3 id=\"fabric-core-overview\">Fabric Core</h3>\n\n<h3 id=\"for-designers\">For Designers</h3>\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react-theme to version v9.0.0-rc.5\nDESCRIPTION: This snippet details the update of the @fluentui/react-theme to version v9.0.0-rc.5, ensuring that thematic elements remain consistently updated in the Fluent UI framework.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/vr-tests-react-components/CHANGELOG.md#2025-04-20_snippet_23\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react-theme to v9.0.0-rc.5 ([PR #21995](https://github.com/microsoft/fluentui/pull/21995) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Configuring Monaco Environment Manually in JavaScript\nDESCRIPTION: This code snippet shows how to manually configure the Monaco environment by importing and calling the configureEnvironment function. This sets up the global MonacoEnvironment required for Monaco to load worker files.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/monaco-editor/README.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { configureEnvironment } from '@fluentui/monaco-editor/lib/configureEnvironment';\n\nconfigureEnvironment(config);\n```\n\n----------------------------------------\n\nTITLE: Get Global Class Names Function\nDESCRIPTION: Defines a function, `getGlobalClassNames`, which takes a `GlobalClassNames` object, a `theme`, and an optional flag to disable global class names. It returns a `GlobalClassNames` object.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/style-utilities/etc/style-utilities.api.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n\"export function getGlobalClassNames<T>(classNames: GlobalClassNames<T>, theme: ITheme, disableGlobalClassNames?: boolean): GlobalClassNames<T>;\"\n```\n\n----------------------------------------\n\nTITLE: Implementing atMention styling in dark theme using FluentUI v9\nDESCRIPTION: Example showing how to achieve the same visual result as atMention property in the dark theme using makeStyles in v9.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-text/library/docs/MIGRATION.md#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeStyles, Text } from '@fluentui/react-components';\n\nconst useStyles = makeStyles({\n  root: {\n    color: 'rgb(166, 167, 220)',\n  },\n});\n\nconst MyComponent = () => {\n  const styles = useStyles();\n\n  return <Text className={styles.root}>{/* ... */}</Text>;\n};\n```\n\n----------------------------------------\n\nTITLE: Setting a Theme at the Root Application Level\nDESCRIPTION: Demonstrates how to apply a theme to the entire application by setting it on the document body. This example imports the webLightTheme from Fluent UI tokens and applies it using the setTheme utility.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/_docs/developer/theming.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setTheme } from '@fluentui/web-components';\nimport { webLightTheme } from '@fluentui/tokens';\n\nsetTheme(webLightTheme);\n```\n\n----------------------------------------\n\nTITLE: Style Variables Migration\nDESCRIPTION: Shows how to migrate boolean variables and style overrides from the old Box component to the new Primitive component using makeStyles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Box.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// in COMPONENT_NAME.tsx\nimport { Box } from '@fluentui/react-northstar';\n\nexport const Component = () => <Box variables={{ isWideBox: true }} />;\n\n// in box-styles.ts\nexport const boxStyles1 = {\n  root: ({ variables: { isWideBox } }) => ({\n    ...(isWideBox && {\n      width: '100%',\n    }),\n  }),\n};\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// in COMPONENT_NAME.tsx\nimport { Primitive } from '@fluentui/react-migration-v0-v9';\nimport { useStyles } from './COMPONENT_NAME.styles.ts';\n\nexport const Component = () => {\n  const classes = useStyles();\n  return <Primitive className={classes.wideBox} />;\n};\n\n// in COMPONENT_NAME.styles.ts\nimport { makeStyles } from '@fluentui/react-components';\n\nexport const useStyles = makeStyles({\n  wideBox: {\n    width: '100%',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Textarea in Fluent UI v8\nDESCRIPTION: This snippet demonstrates basic usage of the TextField component in Fluent UI v8, including standard, disabled, and non-resizable textareas.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Textarea.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { TextField } from '@fluentui/react/lib/TextField';\n\nconst TextAreaV0BasicExample = () => {\n  return (\n    <>\n      <TextField label=\"Standard\" multiline rows={3} />\n      <TextField label=\"Disabled\" multiline rows={3} disabled defaultValue={dummyText} />\n      <TextField label=\"Non-resizable\" multiline resizable={false} />\n    </>\n  );\n};\n\nexport default TextAreaExample;\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Component Class in TypeScript\nDESCRIPTION: TypeScript class definition for the Text component that extends FASTElement, providing text display functionality with alignment and font options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_71\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nclass Text_2 extends FASTElement {\n    align?: TextAlign;\n    alignChanged(prev: TextAlign | undefined, next: TextAlign | undefined): void;\n    block: boolean;\n    // (undocumented)\n    connectedCallback(): void;\n    // (undocumented)\n    disconnectedCallback(): void;\n    // @internal\n    elementInternals: ElementInternals;\n    font?: TextFont;\n}\n```\n\n----------------------------------------\n\nTITLE: Using File Type Icons with Fluent UI React Icon Component\nDESCRIPTION: This snippet shows how to use the Icon component from Fluent UI React with file type icon properties. It demonstrates rendering a file type icon for a specific file extension and size.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-file-type-icons/README.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Icon } from '@fluentui/react/lib/Icon';\nimport { getFileTypeIconProps } from '@fluentui/react-file-type-icons';\n\n<Icon {...getFileTypeIconProps({ extension: 'docx', size: 16 })} />;\n```\n\n----------------------------------------\n\nTITLE: Initial Render Scenario for List and ListItems\nDESCRIPTION: This snippet provides a log of the initial render for a List containing multiple ListItems, showcasing their active states and values.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/context-selector-tearing.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nrender:List\nrender:ListItem {active: true, value: '1'}\nrenders:ListItem {active: false, value: '2'}\nrenders:ListItem {active: false, value: '3'}\nrenders:ListItem {active: false, value: '4'}\n```\n\n----------------------------------------\n\nTITLE: Running Development Server for @fluentui/react-northstar\nDESCRIPTION: This command starts the development server for @fluentui/react-northstar packages. After running this command, developers should choose the @fluentui/docs option and open localhost:8080 to see real-time updates while making changes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/setup-local-development.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Displaying Hint Text with Fluent UI React Field in JSX\nDESCRIPTION: This snippet shows how to display hint text using the Field component in JSX. The 'hint' parameter is used to provide additional information about the input constraints.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-field/library/README.md#2025-04-20_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Field label=\"Password\" hint=\"Must be at least 8 characters long.\">\n  <Input type=\"password\" />\n</Field>\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react to v8.40.0\nDESCRIPTION: This patch updates @fluentui/react to version 8.40.0, bringing in several key updates. Refer to Pull Request #20036 for complete information.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/ts-minbar-test-react/CHANGELOG.md#2025-04-20_snippet_23\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.40.0 ([PR #20036](https://github.com/microsoft/fluentui/pull/20036) by beachball)\n```\n\n----------------------------------------\n\nTITLE: FluentProvider Props Type Definition with PartialTheme\nDESCRIPTION: Alternative type definition for FluentProvider props that ensures the theme always has the required keys from the default tokens.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/convergence/make-styles-no-functions.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FluentProviderProps<TTheme extends PartialTheme = PartialTheme>\n  extends Omit<ComponentProps<FluentProviderSlots>, 'dir'>,\n    Partial<FluentProviderCommons> {\n  theme?: TTheme;\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog Version Entry 9.0.2\nDESCRIPTION: Changelog entry documenting patches and updates for version 9.0.2 of @fluentui/react-charts, including migration of various chart components to v9 and implementation of grouped charts.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charts/library/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.0.2]\n\nTue, 01 Apr 2025 15:08:01 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-charts_v9.0.1..@fluentui/react-charts_v9.0.2)\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react to v8.41.4\nDESCRIPTION: This patch upgrades the @fluentui/react library to version 8.41.4 for improved performance. Additional information is present in Pull Request #20529.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/ts-minbar-test-react/CHANGELOG.md#2025-04-20_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.41.4 ([PR #20529](https://github.com/microsoft/fluentui/pull/20529) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Creating Options with Complex JSX Content in FluentUI Dropdown\nDESCRIPTION: Demonstrates how to create an Option with complex JSX content by providing an explicit value prop that matches the displayed text, enabling proper keyboard navigation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/stories/src/Dropdown/DropdownAccessibility.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Option value=\"Simple text string\">\n  <CheckRegular />\n  <span>Simple text string</span>\n</Option>\n```\n\n----------------------------------------\n\nTITLE: Composing Typography Tokens in Fluent UI React Components\nDESCRIPTION: This example demonstrates how to use individual typography tokens from @fluentui/react-components to create custom text styles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-theme/stories/src/Theme/typography/index.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { makeStyles, tokens } from '@fluentui/react-components';\n\nconst useStyles = makeStyles({\n  text: {\n    fontFamily: tokens.fontFamilyMonospace,\n    fontSize: tokens.fontSizeBase600,\n    fontWeight: tokens.fontWeightBold,\n    lineHeight: tokens.lineHeightBase600,\n  },\n});\n\nexport const Composing = () => {\n  const styles = useStyles();\n\n  return <span className={styles.text}>Custom text using only tokens</span>;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook and ThemeColors Components in JavaScript\nDESCRIPTION: This snippet imports necessary components from Storybook addon-docs and a custom Colors component from a local file. It sets up the structure for a Storybook documentation page focused on theme colors.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-theme/stories/src/Theme/colors/index.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Canvas } from '@storybook/addon-docs';\nimport { Colors } from './ThemeColors.stories.tsx';\n```\n\n----------------------------------------\n\nTITLE: Defining Utility Color Variables in TypeScript\nDESCRIPTION: Exports CSS variable references for utility colors like focus, subtle backgrounds, and transparent backgrounds with variants for different interaction states.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const colorStrokeFocus1 = \"var(--colorStrokeFocus1)\";\nexport const colorStrokeFocus2 = \"var(--colorStrokeFocus2)\";\nexport const colorSubtleBackground = \"var(--colorSubtleBackground)\";\n// ... additional utility color definitions\n```\n\n----------------------------------------\n\nTITLE: Defining ITeachingBubbleSubComponentStyles Interface in TypeScript\nDESCRIPTION: Defines the ITeachingBubbleSubComponentStyles interface for styling subcomponents of a teaching bubble.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_212\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface ITeachingBubbleSubComponentStyles {\n    callout: IStyleFunctionOrObject<any, any>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Styles with makeStyles\nDESCRIPTION: Shows how to define styles for a component using the makeStyles function, where each style is keyed and can be referenced within the component for seamless styling based on class names.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/makeStyles.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst useStyles = makeStyles({\n  root: { color: 'red' },\n  rootPrimary: { color: 'blue' },\n\n  image: { display: 'flex' },\n  // etc.\n});\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react-popover to version v9.0.0-rc.6\nDESCRIPTION: This snippet captures the update for the @fluentui/react-popover to version v9.0.0-rc.6, ensuring that popover utilities remain optimal within the UI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/vr-tests-react-components/CHANGELOG.md#2025-04-20_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react-popover to v9.0.0-rc.6 ([PR #21995](https://github.com/microsoft/fluentui/pull/21995) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Installing Fluent UI Style Utilities\nDESCRIPTION: This snippet demonstrates how to install the '@fluentui/style-utilities' package using npm. It is essential for projects that do not rely on '@fluentui/react' but still want to use Fluent UI style utilities.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/style-utilities/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnpm install --save @fluentui/style-utilities\n```\n\n----------------------------------------\n\nTITLE: Version Change Log Entry\nDESCRIPTION: Example version changelog entry showing version number, date, and changes\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tabster/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n## [9.0.0-alpha.39](https://github.com/microsoft/fluentui/tree/@fluentui/react-tabster_v9.0.0-alpha.39)\n\nFri, 02 Jul 2021 23:15:55 GMT\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-tabster_v9.0.0-alpha.38..@fluentui/react-tabster_v9.0.0-alpha.39)\n\n### Changes\n\n- Bump @fluentui/react-make-styles to v9.0.0-alpha.46 ([PR #18721](https://github.com/microsoft/fluentui/pull/18721) by bsunderhus@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: createArrowHeightStyles function\nDESCRIPTION: Defines an internal function `createArrowHeightStyles` that accepts an `arrowHeight` number and returns a `GriffelStyle` object. This function likely generates styles specifically for the height of an arrow element.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-positioning/etc/react-positioning.api.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal\nexport function createArrowHeightStyles(arrowHeight: number): GriffelStyle;\n```\n\n----------------------------------------\n\nTITLE: Merging Style Classes\nDESCRIPTION: Demonstrates how to merge base and override class objects into a single class object which is then used to apply all necessary classes to an element. This approach ensures a clean application of styles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/makeStyles.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst merged = {\n  ...baseClasses,\n  ...overrideClasses,\n};\n```\n\n----------------------------------------\n\nTITLE: Defining IExpandingCardStyles Interface in TypeScript\nDESCRIPTION: Defines the IExpandingCardStyles interface extending IBaseCardStyles with additional style properties for compact and expanded card states. This interface is marked as @public but undocumented.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_131\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IExpandingCardStyles extends IBaseCardStyles {\n    compactCard?: IStyle;\n    expandedCard?: IStyle;\n    expandedCardScroll?: IStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating CardHeader from @fluentui/react-northstar to @fluentui/react-components in TSX\nDESCRIPTION: This snippet demonstrates how to migrate the CardHeader component from the old @fluentui/react-northstar package to the new @fluentui/react-components package. The main change is in the import statement and the component usage syntax.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Card/CardHeader.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CardHeader } from '@fluentui/react-northstar';\n\nconst Component = () => <CardHeader>Lorem ipsum</CardHeader>;\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CardHeader } from '@fluentui/react-components';\n\nconst Component = () => <CardHeader header=\"Lorem ipsum\" />;\n```\n\n----------------------------------------\n\nTITLE: Version History Entry for 0.2.19\nDESCRIPTION: Changelog entry documenting dependency version bumps for @fluentui/react-combobox and @fluentui/react-field packages.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-timepicker-compat/library/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.2.19](https://github.com/microsoft/fluentui/tree/@fluentui/react-timepicker-compat_v0.2.19)\n\nMon, 17 Jun 2024 07:34:17 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-timepicker-compat_v0.2.18..@fluentui/react-timepicker-compat_v0.2.19)\n\n### Patches\n\n- Bump @fluentui/react-combobox to v9.11.8\n- Bump @fluentui/react-field to v9.1.68\n```\n\n----------------------------------------\n\nTITLE: FluentUI Menu Migration Overview\nDESCRIPTION: Explanation of fundamental changes in menu component structure and implementation between v8 and v9\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Menu.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Menu Migration\n\n**v8**\n\n- A menu can be displayed by passing menuProps to Button, or by showing/hiding a ContextualMenu.\n  In both cases, the menu items are specified as an IContextualMenuItem array passed in props.\n- Different types of menu items are created by setting the IContextualMenuItem.itemType property.\n\n**v9**\n\n- A menu can be displayed by creating a hierarchy of children under Menu.\n- There are children that act as containers and coordinate behavior including MenuTrigger, MenuPopover, MenuList, and MenuGroup.\n- There are individual components for different types of items including MenuItem, MenuDivider, MenuItemCheckbox, MenuItemRadio, MenuGroup, and MenuSplitGroup.\n```\n\n----------------------------------------\n\nTITLE: Using Icon Component in Fluent UI React\nDESCRIPTION: This example demonstrates how to use the Icon component in a Fluent UI React application. It imports necessary dependencies and creates a functional component that renders an icon.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Styles/FabricIconsPage/docs/web/FabricIconsUsage.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Icon } from '@fluentui/react/lib/Icon';\n\nconst MyIcon = () => <Icon iconName=\"CompassNW\" />;\n\nReactDOM.render(<MyIcon />, document.body.firstChild);\n```\n\n----------------------------------------\n\nTITLE: FluentUI v0 Menu Component Custom Rendering\nDESCRIPTION: Demonstrates custom rendering approaches in v0 using shorthand components and children API\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/library/docs/Spec.md#2025-04-20_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n// v0 shorthand children render callback\nconst items = [\n  {\n    key: 'editorials',\n    children: (El, props) => <El>{props.key}</El>\n  },\n]\n\n<Menu defaultActiveIndex={0} items={items} />\n\n// v0 children API custom render\n<Menu>\n  <Menu.Item index={0}>\n    <Menu.ItemContent>Editorials</Menu.ItemContent>\n  </Menu.Item>\n  <Menu.Item index={1}>\n    CustomContent\n  </Menu.Item>\n  {/*Not recommended but definitely possible*/}\n  <div>custom item</div>\n</Menu>\n```\n\n----------------------------------------\n\nTITLE: Synchronous Tooltip Component Structure\nDESCRIPTION: The structure of the synchronous part of the Tooltip component that gets included in the initial bundle. This lightweight wrapper only includes logic to determine when the tooltip should be visible.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/future/async-import-hidden-components.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n{state.children}\n{state.shouldRenderTooltip && (...)}\n</>\n```\n\n----------------------------------------\n\nTITLE: Injection Mode Enum for Style Insertion\nDESCRIPTION: Defines configuration options for how CSS styles are inserted into the document, with modes for no insertion, node insertion, and child appending\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/merge-styles/etc/merge-styles.api.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const InjectionMode: {\n  none: 0;\n  insertNode: 1;\n  appendChild: 2;\n};\n```\n\n----------------------------------------\n\nTITLE: Option 2: Standard Object Shorthand - JSX/React\nDESCRIPTION: Proposed solution using standard slot syntax where badge prop accepts an object with status property. Matches behavior of other slots while maintaining PresenceBadge integration.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/components/avatar-badge-shorthand.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Avatar badge={{ status: 'away' }} />\n```\n\n----------------------------------------\n\nTITLE: Version Update Entry - FluentUI Spinner\nDESCRIPTION: Markdown formatted version history entry showing version number, date, changes and dependency updates\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-spinner/library/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.3.29](https://github.com/microsoft/fluentui/tree/@fluentui/react-spinner_v9.3.29)\n\nThu, 09 Nov 2023 17:29:43 GMT\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-spinner_v9.3.28..@fluentui/react-spinner_v9.3.29)\n\n### Patches\n\n- chore: use package.json#files setup instead of npmignore for all v9 libraries\n```\n\n----------------------------------------\n\nTITLE: Importing Branded MDL2 Icon Components in JavaScript\nDESCRIPTION: This code snippet demonstrates how to import branded MDL2 icon components from the @fluentui/react-icons-mdl2-branded package. Replace 'IconName' with the specific icon component you want to use.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-icons-mdl2-branded/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { IconName } from '@fluentui/react-icons-mdl2-branded';\n```\n\n----------------------------------------\n\nTITLE: Describing PieLine Interface for Stroke Styling in TypeScript\nDESCRIPTION: The PieLine interface specifies the style of lines used in pie charts, focusing on color and width properties for defining the stroke around and between segments.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/chart-utilities/etc/chart-utilities.api.md#2025-04-20_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface PieLine {\n    // (undocumented)\n    color: PieColor | PieColors;\n    // (undocumented)\n    width: number | number[];\n}\n```\n\n----------------------------------------\n\nTITLE: Including Fluent UI Web Components via CDN\nDESCRIPTION: HTML snippet showing how to include Fluent UI Web Components in a web page using a CDN. This uses a module script to load the latest beta version from unpkg.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/README.md#2025-04-20_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <script type=\"module\" src=\"https://unpkg.com/@fluentui/web-components@beta\"></script>\n  </head>\n  <!-- ... -->\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining MarkerSymbol Type in TypeScript\nDESCRIPTION: The MarkerSymbol type encompasses different possible symbols that can be used for markers on a chart, specified as strings or numbers, or an array of such identifiers. It allows for customizing marker appearance.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/chart-utilities/etc/chart-utilities.api.md#2025-04-20_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type MarkerSymbol = string | number | Array<string | number>;\n```\n\n----------------------------------------\n\nTITLE: Before Publish Package.json Structure\nDESCRIPTION: This JSON snippet represents the structure of package.json before publishing, showing the initial version of the Fluent UI theme and the dependent package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/dependency-mismatch/README.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"@fluentui/react-theme\",\n  \"version\": \"9.0.1\"\n}\n\n{\n  \"name\": \"@fluentui/public-docsite-v9\"\n  \"dependencies\": {\n    \"@fluentui/react-theme\": \"^9.0.1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dry run of the move-packages generator\nDESCRIPTION: This command performs a dry run of the move-packages generator, showing the changes that would be made without actually writing them to disk. Useful for previewing the effects of the generator.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/move-packages/README.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:move-packages --dry-run\n```\n\n----------------------------------------\n\nTITLE: Adding Minutes to a Date - TypeScript\nDESCRIPTION: This constant represents a function that takes a Date object and a number of minutes to add, returning the updated Date object. It is a public method meant for easy date manipulation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/date-time-utilities/etc/date-time-utilities.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const addMinutes: (date: Date, minutes: number) => Date;\n```\n\n----------------------------------------\n\nTITLE: Avoiding Action Instructions in Accessibility Names\nDESCRIPTION: Demonstrates the correct way to label a button without including unnecessary action instructions. This improves screen reader narration by keeping the label concise and avoiding redundant information.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Accessibility/ComponentLabelling.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<code>aria-label=\"Send message \"</code>\n```\n\n----------------------------------------\n\nTITLE: Bumping React Radio Version in Fluent UI\nDESCRIPTION: This snippet reflects the increment of the @fluentui/react-radio package to version 9.3.0, reflecting a commitment to continual improvement of the library's component set.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tree/library/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n- Bump @fluentui/react-radio to v9.3.0 ([PR #33876](https://github.com/microsoft/fluentui/pull/33876) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Exporting Tokens as CSS Variables\nDESCRIPTION: Proposed implementation for exporting tokens as a plain object with CSS variables, eliminating the need for the useTheme() hook.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/convergence/make-styles-no-functions.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Theme } from '@fluentui/react-theme';\n\nconst tokens: Theme = {\n  borderRadiusNone: 'var(--borderRadiusNone)',\n  borderRadiusSmall: 'var(--borderRadiusSmall)',\n  /* ... */\n};\n```\n\n----------------------------------------\n\nTITLE: Inline Alias Token Values - CSS\nDESCRIPTION: This CSS snippet demonstrates the proposed change of inlining alias token values directly instead of referencing global tokens, enhancing rendering performance.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/theme-shape.md#2025-04-20_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Before */\n--global-red: #f00;\n--alias-error: var(--global-red);\n\n/* After */\n--global-red: #f00; /* no change here */\n--alias-error: #f00; /* inlined value from --global-red */\n```\n\n----------------------------------------\n\nTITLE: SlotComponent Type Definition in TypeScript\nDESCRIPTION: This snippet defines the SlotComponent type, which represents the new exotic component type for slots.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/slot-children-render-function.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype SlotComponent<Props extends UnknownSlotProps = UnknownSlotProps> = React.ExoticComponent<\n  Props & React.RefAttributes<Element>\n> & {\n  readonly props: Props;\n  readonly defaultProps?: Partial<Props> | undefined;\n  readonly componentType:\n    | React.ComponentType<Props>\n    | (Props extends AsIntrinsicElement<infer As> ? As : keyof JSX.IntrinsicElements);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining applyTriggerPropsToChildren() Internal Function in TypeScript\nDESCRIPTION: Declares an internal function that applies trigger props to children elements in React components. It takes children and triggerChildProps as parameters and returns a ReactElement or null.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-utilities/etc/react-utilities.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport function applyTriggerPropsToChildren<TriggerChildProps>(children: TriggerProps<TriggerChildProps>['children'], triggerChildProps: TriggerChildProps): React_2.ReactElement | null;\n```\n\n----------------------------------------\n\nTITLE: Defining Focus Control Components in React\nDESCRIPTION: Declares React components for controlling focus behavior including FocusTrapCallout and FocusTrapZone. These components help manage keyboard focus within specific UI elements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_35\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport const FocusTrapCallout: React_2.FunctionComponent<IFocusTrapCalloutProps>;\n\n// @public (undocumented)\nexport const FocusTrapZone: React_2.FunctionComponent<IFocusTrapZoneProps> & {\n    focusStack?: string[];\n};\n```\n\n----------------------------------------\n\nTITLE: Defining OnUpdateItemVisibility Type in TypeScript\nDESCRIPTION: This snippet defines the OnUpdateItemVisibility type as a function that takes a payload containing item visibility data, providing a mechanism for updating item visibility in overflow scenarios.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/priority-overflow/etc/priority-overflow.api.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type OnUpdateItemVisibility = (data: OnUpdateItemVisibilityPayload) => void;\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Loader in Fluent UI Northstar (v0)\nDESCRIPTION: This snippet demonstrates the basic implementation of the Loader component in Fluent UI Northstar (v0). It imports the Loader from '@fluentui/react-northstar' and renders it without any props.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Spinner.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Loader } from '@fluentui/react-northstar';\nimport React from 'react';\n\nconst LoaderV0BasicExample = () => <Loader />;\n\nexport default LoaderV0BasicExample;\n```\n\n----------------------------------------\n\nTITLE: DialogBody Slots Definition\nDESCRIPTION: Defines the slots available within the DialogBody component, using Slot from '@fluentui/react-utilities'. It indicates that the DialogBody component has a 'root' slot, which is a div element.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/etc/react-dialog.api.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport type DialogBodySlots = {\n    root: Slot<'div'>;\n};\"\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react-menu to version v9.0.0-rc.6\nDESCRIPTION: This snippet details the update for the @fluentui/react-menu package to version v9.0.0-rc.6, part of the component updates within the Fluent UI framework.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/vr-tests-react-components/CHANGELOG.md#2025-04-20_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react-menu to v9.0.0-rc.6 ([PR #21995](https://github.com/microsoft/fluentui/pull/21995) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Implementing Timestamp Text in Dark Theme\nDESCRIPTION: This snippet demonstrates how to create a Text component with timestamp styling for the dark theme using makeStyles from FluentUI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-text/library/docs/MIGRATION.md#2025-04-20_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeStyles, Text } from '@fluentui/react-components';\n\nconst useStyles = makeStyles({\n  root: {\n    color: 'rgb(138, 136, 134)',\n  },\n});\n\nconst MyComponent = () => {\n  const styles = useStyles();\n\n  return <Text className={styles.root}>{/* ... */}</Text>;\n};\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react-link to version v9.0.0-rc.6\nDESCRIPTION: This snippet documents the bump for the @fluentui/react-link to version v9.0.0-rc.6, reflecting adjustments to ensure link components are up to date.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/vr-tests-react-components/CHANGELOG.md#2025-04-20_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react-link to v9.0.0-rc.6 ([PR #21995](https://github.com/microsoft/fluentui/pull/21995) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Using Variables for Style Overrides in ListItem (Before)\nDESCRIPTION: Example of using the variables prop for style customization in ListItem component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/ItemLayout.stories.mdx#2025-04-20_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// in COMPONENT_NAME.tsx\nimport { ListItem } from '@fluentui/react-northstar';\n\nexport const Component = () => <ListItem variables={{ isSomething: true }} />;\n\n// in list-item-styles.ts\nexport const itemItemStyles = {\n  root: ({ variables: { isSomething } }) => ({\n    ...(isSomething && { display: 'flex' }),\n  }),\n  endMedia: ({ variables: { isSomething } }) => ({\n    ...(isSomething && { display: 'none' }),\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Popper Hook Usage Examples\nDESCRIPTION: Comparison of current and proposed usePopper hook usage patterns.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/exposing-popper-options.md#2025-04-20_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// 👎 Existing usage\n// Need to be aware of user props and make sure they are added to the hook usage\nusePopper({\n  align: state.align,\n  position: state.position,\n  target: state.target,\n  coverTarget: state.coverTarget,\n  offset: state.offset,\n});\n\n// 👍 Proposed usage\n// Guaranteed to configure based on user props, and any component specific modifications after\n// However adds some extra logic to use shorthand correctly\nconst popperOptions = resolvePositioningShorthand(state.positioning);\npopperOptions.offset = state.offset;\nusePopper(popperOptions);\n```\n\n----------------------------------------\n\nTITLE: Rendering with Hooks - TypeScript\nDESCRIPTION: A proposed solution converting render functions into hooks to use hooks properly within the function, albeit with a potential to compromise separation of concerns.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/context-values.md#2025-04-20_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction useRenderBaz(state) {\n  const { open, inline } = state;\n  // ✅ now we can use hooks\n  const contextValue = React.useMemo(() => ({ inline, open }), [inline, open]);\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Run Migration on Multiple Packages - Shell\nDESCRIPTION: This command allows the migration process to be executed on a set of specified packages by providing a comma-separated list of package names.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/migrate-converged-pkg/README.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# run migration on:\n# - @fluentui/lib-zero\n# - @fluentui/lib-one\n# - @fluentui/lib-two\nyarn nx g @fluentui/workspace-plugin:migrate-converged-pkg --name='@fluentui/lib-zero,@fluentui/lib-one,@fluentui/lib-two'\n```\n\n----------------------------------------\n\nTITLE: Defining ITextFieldSubComponentStyles Interface in TypeScript\nDESCRIPTION: Specifies the ITextFieldSubComponentStyles interface for styling subcomponents of a text field.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_220\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface ITextFieldSubComponentStyles {\n    label: IStyleFunctionOrObject<any, any>;\n}\n```\n\n----------------------------------------\n\nTITLE: FluentUI React Theme Change Entries\nDESCRIPTION: Detailed changelog entries documenting patches, changes, and dependency updates across different versions\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-theme/library/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n### Patches\n\n- Bump @fluentui/eslint-plugin to v1.1.0 ([PR #17568](https://github.com/microsoft/fluentui/pull/17568) by elcraig@microsoft.com)\n- Bump @fluentui/scripts to v1.0.0 ([PR #17568](https://github.com/microsoft/fluentui/pull/17568) by elcraig@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Defining useUnmount Hook in Typescript\nDESCRIPTION: Defines a React hook, `useUnmount`, that asynchronously executes a callback function when the component is unmounted, utilizing the `useEffect` hook with an empty dependency array for cleanup.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-hooks/README.md#2025-04-20_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nconst useUnmount: (callback: () => void) => void;\n```\n\n----------------------------------------\n\nTITLE: Defining IBreadcrumbProps Interface in TypeScript\nDESCRIPTION: Specifies the props interface for the Breadcrumb component, including options for rendering items, customization, and accessibility.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_49\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface IBreadcrumbProps extends React_2.HTMLAttributes<HTMLElement> {\n    ariaLabel?: string;\n    className?: string;\n    componentRef?: IRefObject<IBreadcrumb>;\n    dividerAs?: IComponentAs<IDividerAsProps>;\n    focusZoneProps?: IFocusZoneProps;\n    items: IBreadcrumbItem[];\n    maxDisplayedItems?: number;\n    onGrowData?: (data: IBreadcrumbData) => IBreadcrumbData | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: ScatterChart React Component Definition\nDESCRIPTION: TypeScript interface for Scatter Chart properties, supporting customizable data points, culture settings, and callout rendering\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charts/library/etc/react-charts.api.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ScatterChartProps extends CartesianChartProps {\n  culture?: string;\n  data: ChartProps;\n  getCalloutDescriptionMessage?: (calloutDataProps: CustomizedCalloutData) => string | undefined;\n  onRenderCalloutPerDataPoint?: RenderFunction<CustomizedCalloutData>;\n  styles?: ScatterChartStyles;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Structure of FluentUI Input Component\nDESCRIPTION: Illustrates the resulting HTML structure when the FluentUI Input component is rendered, including class names and inline styles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-input/library/docs/Spec.md#2025-04-20_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<span className=\"rootClass\" style=\"background: red\">\n  <span><!-- contentBefore here --></span>\n  <!-- input: type=\"text\" is applied automatically -->\n  <input\n    type=\"text\"\n    className=\"inputClass\"\n    style=\"background: blue\"\n    id=\"input1\"\n    value=\"something\"\n    onChange=\"(function)\"\n  />\n  <span><!-- contentAfter here --></span>\n</span>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Fluent UI Theme Designer in Storybook\nDESCRIPTION: This code snippet imports the Meta component from Storybook and the ThemeDesigner component from Fluent UI. It then sets up a Storybook documentation page and renders the ThemeDesigner component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Theming/ThemeDesigner.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs';\nimport { ThemeDesigner } from '@fluentui/theme-designer';\n\n<Meta title=\"Theme/Theme Designer\" />\n\n<ThemeDesigner />\n```\n\n----------------------------------------\n\nTITLE: Migrating Boolean Variables in FluentUI Toolbar Styles\nDESCRIPTION: Shows how to migrate boolean variables used for styling in Toolbar component from v0 to v9 using makeStyles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Toolbar.stories.mdx#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// Before:\n// in COMPONENT_NAME.tsx\nimport { Toolbar } from '@fluentui/react-components';\n\nexport const Component = () => <Toolbar variables={{ fluid: true }} items={[{ content: 'item 1' }]} />;\n\n// in toolbar-button-styles.ts\nexport const toolbarStyles = {\n  root: ({ variables: { fluid } }) => ({\n    ...(fluid && {\n      width: '100%',\n    }),\n  }),\n};\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// After:\n// in COMPONENT_NAME.tsx\nimport { useStyles } from './COMPONENT_NAME.styles.ts';\nimport { Toolbar, ToolbarButton } from '@fluentui/react-components';\n\nexport const Component = () => {\n  const classes = useStyles();\n  return (\n    <Toolbar className={classes.breakoutRoomsAssignmentToolbar}>\n      <ToolbarButton>Italic</ToolbarButton>\n    </Toolbar>\n  );\n};\n\n// in COMPONENT_NAME.styles.ts\nimport { makeStyles } from '@fluentui/react-components';\n\nexport const useStyles = makeStyles({\n  breakoutRoomsAssignmentToolbar: {\n    width: '100%',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react-tooltip to version v9.0.0-rc.6\nDESCRIPTION: This snippet captures the update for the @fluentui/react-tooltip component to version v9.0.0-rc.6, contributing to continuous improvements in user interactions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/vr-tests-react-components/CHANGELOG.md#2025-04-20_snippet_24\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react-tooltip to v9.0.0-rc.6 ([PR #21995](https://github.com/microsoft/fluentui/pull/21995) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom MotionStyle Type for CSS-Based Animations\nDESCRIPTION: Example of creating a custom type for motion definitions in the CSS-based approach, restricting the GriffelStyle properties to only those related to animations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/motion-definition-n-apis.md#2025-04-20_snippet_27\n\nLANGUAGE: ts\nCODE:\n```\nimport { type GriffelStyle } from '@griffel/react';\n\ntype MotionStyle = Pick<\n  GriffelStyle,\n  'animationName' | 'animationFillMode' | 'animationDuration' | 'animationTimingFunction'\n>;\n```\n\n----------------------------------------\n\nTITLE: Running Performance Tests Locally with Yarn for FluentUI in JavaScript\nDESCRIPTION: Commands for building and running performance tests locally using Yarn. It includes options for building dependencies, running all scenarios, or running specific scenarios with custom iterations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/perf-test-react-components/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn just perf-test\nyarn just run-perf-test\nyarn just perf-test -- --scenarios SplitButton,SplitButtonNew --iterations 1000\n```\n\n----------------------------------------\n\nTITLE: Importing and Using MenuButton in Fluent UI v0\nDESCRIPTION: Example of how to import and use the MenuButton component in Fluent UI v0. It shows the basic structure with a trigger button and menu items.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Menu.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MenuButton, Button } from '@fluentui/react-northstar';\nconst Component = () => <MenuButton trigger={<Button content=\"Open\" title=\"Open\" />} menu={['1', '2', '3']} />;\n```\n\n----------------------------------------\n\nTITLE: FluentUI React Charting Changelog Entry\nDESCRIPTION: Example changelog entry showing version, date, comparison link and patch details\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/CHANGELOG.md#2025-04-20_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n## [5.3.44](https://github.com/microsoft/fluentui/tree/@fluentui/react-charting_v5.3.44)\n\nWed, 22 Sep 2021 09:55:02 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-charting_v5.3.43..@fluentui/react-charting_v5.3.44)\n\n### Patches\n\n- Bump @fluentui/react to v8.34.5 ([PR #19902](https://github.com/microsoft/fluentui/pull/19902) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Customizing Icon Font CDN in Fluent UI React\nDESCRIPTION: This snippet shows how to initialize font-based icons with a custom CDN path in a Fluent UI React application. It allows developers to control where the icon fonts are served from.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Styles/FabricIconsPage/docs/web/FabricIconsUsage.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninitializeIcons('https://my.cdn.com/path/to/icons/');\n```\n\n----------------------------------------\n\nTITLE: Non-Optimized Module Import for Fluent UI React Components\nDESCRIPTION: Example of importing components using the main module entry point. This approach is not recommended without a tree-shaking bundler as it can lead to unnecessarily large bundles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-resources/src/docs/GettingStartedOverview.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from '@fluentui/react';\n```\n\n----------------------------------------\n\nTITLE: Group Two Personas in TypeScript\nDESCRIPTION: This constant holds a second set of personas following the same structure as group one, aimed at providing additional user information for UI components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/example-data/etc/example-data.api.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport const groupTwo: (IExampleExtendedPersonaProps & {\n    key: string | number;\n})[];\n```\n\n----------------------------------------\n\nTITLE: Validating Props in Button Component - React JSX\nDESCRIPTION: This snippet showcases how the Fluent UI Button ensures that only valid props are passed to the underlying DOM elements, preventing unnecessary attributes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Slots.md#2025-04-20_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Button foo={true} icon={{ bar: true }} />\n```\n\n----------------------------------------\n\nTITLE: Setting tabIndex on List Component in JSX\nDESCRIPTION: Use tabIndex={0} on the List component when items have no actionable elements inside. This makes the list itself focusable, allowing users to scroll using arrow keys after focusing.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-list/stories/src/List/ListBestPractices.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<List tabIndex={0}>\n```\n\n----------------------------------------\n\nTITLE: Spinner Component Definition in TypeScript\nDESCRIPTION: Defines a Spinner component that extends BaseSpinner with configurable appearance and size properties. Includes type definitions for appearance modes and size options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_51\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class Spinner extends BaseSpinner {\n    appearance?: SpinnerAppearance;\n    appearanceChanged(prev: SpinnerAppearance | undefined, next: SpinnerAppearance | undefined): void;\n    size?: SpinnerSize;\n    sizeChanged(prev: SpinnerSize | undefined, next: SpinnerSize | undefined): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react-avatar to version v9.0.0-rc.6\nDESCRIPTION: This snippet shows the version bump for the @fluentui/react-avatar package to v9.0.0-rc.6. This is part of the component updates for Fluent UI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/vr-tests-react-components/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react-avatar to v9.0.0-rc.6 ([PR #21995](https://github.com/microsoft/fluentui/pull/21995) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating CSS Class Order Conflict in HTML\nDESCRIPTION: This HTML snippet shows how CSS class order can lead to unexpected styling when multiple bundles are involved. It demonstrates the current state where styles from a CDN bundle can override styles from the main bundle.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/shared/build-system/stop-styles-transforms.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- CURRENT STATE -->\n\n<!-- main bundle -->\n<style>\n  .order0 {\n    padding: 10px;\n  }\n  .order1 {\n    padding-left: 5px;\n  }\n</style>\n\n<!-- CDN bundle -->\n<style>\n  .order0 {\n    padding: 10px;\n  }\n</style>\n\n<!-- HTML -->\n\n<!--\n  🔴 We expect that a \"div\" below will have \"padding-left: 5px\", but instead, it has \"padding: 10px\".\n\n     The issue appears because the CDN bundle loads after the main bundle, resulting in style overrides. This occurs because \".order0\" appears in both bundles, and CSS prioritizes the order of appearance. \n  -->\n\n<div class=\"order0 order1\"></div>\n```\n\n----------------------------------------\n\nTITLE: Using Z-Index Values in React Components with useZIndex Hook\nDESCRIPTION: This snippet shows how to use the useZIndex hook to retrieve and apply z-index values in a component. It demonstrates setting the z-index style directly on the root element of a component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/z-index-handling.md#2025-04-20_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useZIndex } from '@fluentui/react-components';\n\n// component side\nexport const useComponent_unstable = (props: ComponentProps, ref: React.Ref<HTMLElement>): ComponentState => {\n  const { overlay } = useZIndex();\n\n  return {\n    components: {\n      root: 'div',\n    },\n\n    root: slot.always(\n      {\n        ref,\n        ...props,\n        style: {\n          zIndex: overlay,\n        },\n      },\n      {\n        elementType: 'div',\n      },\n    ),\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Dry Run Recipe Generator\nDESCRIPTION: Executes the recipe-generator workspace plugin in dry-run mode, showing what will be generated without making any actual changes to the disk. This is useful for previewing the generated recipe structure and files before committing to the changes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/recipe-generator/README.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:recipe-generator --dry-run\n```\n\n----------------------------------------\n\nTITLE: Replacing .shorthands() Usage in Styles\nDESCRIPTION: This patch replaces the usage of `.shorthands()` in styles.  This likely involves refactoring the styling implementation to use a different approach for defining CSS shorthand properties, possibly for improved compatibility or maintainability.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-spinbutton/library/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: none\nCODE:\n```\nchore: replace usage of .shorthands() in styles ([PR #31449](https://github.com/microsoft/fluentui/pull/31449) by olfedias@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Importing Positioning and Utility Functions from Fluent UI\nDESCRIPTION: This snippet imports several utility functions and types from the '@fluentui/react-positioning' and '@fluentui/react-utilities' packages. It is intended for use in managing component positioning and shorthand resolution within Fluent UI components. Necessary functions like resolvePositioningShorthand and resolveShorthand are included.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/etc/react-components.api.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { resolvePositioningShorthand } from '@fluentui/react-positioning';\nimport { resolveShorthand } from '@fluentui/react-utilities';\nimport { ResolveShorthandFunction } from '@fluentui/react-utilities';\nimport { ResolveShorthandOptions } from '@fluentui/react-utilities';\n```\n\n----------------------------------------\n\nTITLE: Importing Link Component from Fluent UI React\nDESCRIPTION: Shows how to import the Link component from the Fluent UI React components package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-link/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { Link } from '@fluentui/react-components';\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.96.0\nDESCRIPTION: This snippet covers the transition to version 8.96.0 for @fluentui/react. This regular update is essential for maintaining library integrity.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/azure-themes/CHANGELOG.md#2025-04-20_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.96.0 ([PR #24771](https://github.com/microsoft/fluentui/pull/24771) by beachball)\n```\n\n----------------------------------------\n\nTITLE: TagGroup Usage\nDESCRIPTION: This snippet demonstrates how to group multiple `<Tag>` components using the `<TagGroup>` component. This allows for organizing and displaying related tags together.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tags/library/README.md#2025-04-20_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<TagGroup>\n  <Tag>Tag 1</Tag>\n  <Tag>Tag 2</Tag>\n  <Tag>Tag 3</Tag>\n</TagGroup>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating @public Access Modifier in TypeScript\nDESCRIPTION: Illustrates the use of @public modifier for officially released APIs, which are exposed in the public API surface and follow semver versioning.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/shared/build-system/package-public-api.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @filename package-a/src/index.ts\n\n/**\n *\n * @internal\n */\nexport function doSomething(): void {}\n/**\n *\n * @public\n */\nexport function hello(): void {}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// @filename package-a/dist/index.d.ts\nexport declare function hello(): void;\n```\n\n----------------------------------------\n\nTITLE: Get Theme Function\nDESCRIPTION: Defines a function, `getTheme`, that returns an `ITheme` object. The parameter `depComments` is likely used to include or exclude dependency comments during theme creation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/style-utilities/etc/style-utilities.api.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n\"export function getTheme(depComments?: boolean): ITheme;\"\n```\n\n----------------------------------------\n\nTITLE: Defining RadioGroup Attributes in FluentUI\nDESCRIPTION: Lists the HTML attributes that correspond to the component's fields, including 'disabled', 'named', 'value', and 'orientation'.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/radio-group/README.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### **Attributes**\n\n| Name          | Field       | Inherited From |\n| ------------- | ----------- | -------------- |\n| `disabled`    | disabled    |                |\n| `named`       | name        |                |\n| `value`       | value       |                |\n| `orientation` | orientation |                |\n```\n\n----------------------------------------\n\nTITLE: Implementing ComponentStyles Context and Provider in React\nDESCRIPTION: Sets up a React context and provider for component styles, including a custom hook for accessing the styles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/custom-styling.md#2025-04-20_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nexport type ComponentStylesContextValue = ComponentStyleHooks;\n\nconst ComponentStylesContext = React.createContext<ComponentStylesContextValue | undefined>(\n  undefined,\n) as React.Context<ComponentStylesContextValue>;\n\nexport const Provider = ComponentStylesContext.Provider;\n\nexport function useComponentStyles(): ComponentStylesContextValue {\n  return React.useContext(ComponentStylesContext) ?? defaultComponentStyleHooks;\n}\n```\n\n----------------------------------------\n\nTITLE: Version Entry Example\nDESCRIPTION: Standard changelog entry format showing version number, date, and changes\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/azure-themes/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [8.6.103](https://github.com/microsoft/fluentui/tree/@fluentui/azure-themes_v8.6.103)\n\nFri, 11 Oct 2024 16:51:54 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/azure-themes_v8.6.102..@fluentui/azure-themes_v8.6.103)\n\n### Patches\n\n- Bump @fluentui/react to v8.121.4 ([PR #33024](https://github.com/microsoft/fluentui/pull/33024) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Button Styles Hook in TypeScript\nDESCRIPTION: Creates a custom hook for button styles that applies classes based on button state and size.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/custom-styling.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport const useFancyButtonStyles = (state: unknown) => {\n  const styles = useStyles();\n\n  const buttonState = state as ButtonState;\n\n  buttonState.root.className = mergeClasses(\n    buttonState.root.className,\n    styles.root,\n    buttonState.size === 'small' && styles.small,\n    buttonState.size === 'medium' && styles.medium,\n    buttonState.size === 'large' && styles.large,\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ITeachingBubbleStyleProps Type in TypeScript\nDESCRIPTION: Defines the ITeachingBubbleStyleProps type with required and optional properties for styling teaching bubbles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_210\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport type ITeachingBubbleStyleProps = Required<Pick<ITeachingBubbleProps, 'theme'>> & Pick<ITeachingBubbleProps, 'hasCondensedHeadline' | 'hasSmallHeadline' | 'isWide'> & {\n    calloutProps?: ICalloutContentStyleProps;\n    primaryButtonClassName?: string;\n    secondaryButtonClassName?: string;\n    hasCloseButton?: boolean;\n    hasHeadline?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: API Report Generation\nDESCRIPTION: This snippet indicates the start of an API report file, automatically generated.  It signifies that the file's content should not be manually edited, as changes will be overwritten by the generation process.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/recipes/etc/recipes.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n\n// (No @packageDocumentation comment for this package)\n\n```\n```\n\n----------------------------------------\n\nTITLE: Defining IDropHintDetails Interface in TypeScript\nDESCRIPTION: Defines the IDropHintDetails interface with properties for drop hint elements and positions. This interface is marked as @public but undocumented.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_120\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IDropHintDetails {\n    // (undocumented)\n    dropHintElementRef: HTMLElement;\n    // (undocumented)\n    endX: number;\n    // (undocumented)\n    originX: number;\n    // (undocumented)\n    startX: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Theme-Specific Overrides\nDESCRIPTION: Demonstrates how to conditionally apply theme-specific styles and merge them at render time based on props, ensuring controlled style application reflecting current theme context.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/makeStyles.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst classes = useStyles();\nconst className = mergeClasses(\n  classes.root,\n  someCondition /* some condition based on React Context */ && classes.rootDarkTheme,\n);\n```\n\n----------------------------------------\n\nTITLE: Using CSS Shorthand Functions in TypeScript\nDESCRIPTION: This snippet shows how to use the new shorthands functions for CSS properties that no longer support shorthands directly.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/docs/MIGRATION-NOTES.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { shorthands } from '@fluentui/react-componenents';\n\nconsole.log(shorthands.overflow('hidden')); // { overflowX: 'hidden', overflowY: 'hidden' }\n```\n\n----------------------------------------\n\nTITLE: Defining Vertical Stacked Bar Data Point Interface in TypeScript\nDESCRIPTION: The IVerticalStackedBarDataPoint interface defines data points for a vertical stacked bar chart, inheriting from IDataPoint while modifying the x property type.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/etc/react-charting.api.md#2025-04-20_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface IVerticalStackedBarDataPoint extends Omit<IDataPoint, 'x'> {\n    x: number | string | Date;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PieTextPosition in TypeScript\nDESCRIPTION: The PieTextPosition type lists positions for text on pie charts, such as inside, outside, auto, or none, to adjust how labels and annotations are displayed.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/chart-utilities/etc/chart-utilities.api.md#2025-04-20_snippet_26\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type PieTextPosition = 'inside' | 'outside' | 'auto' | 'none';\n```\n\n----------------------------------------\n\nTITLE: Public API Example of the Switch Component in Fluent UI React\nDESCRIPTION: A simple usage example of the Switch component in Fluent UI React. It shows how to set a Switch component to a checked state publicly. No additional props or handlers are used in this basic example.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-switch/library/docs/Spec.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Switch checked={true} />\n```\n\n----------------------------------------\n\nTITLE: Basic TextArea Implementation in Fluent UI v0\nDESCRIPTION: Example showing basic usage of TextArea component in Fluent UI Northstar (v0) with a label and placeholder text.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Textarea.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { TextArea } from '@fluentui/react-northstar';\n\nconst TextAreaV0BasicExample = () => {\n  const textAreaId = 'textArea';\n\n  return (\n    <>\n      <Label htmlFor={textAreaId} content=\"Enter review\" />\n      <TextArea id={textAreaId} placeholder=\"Type here...\" />\n    </>\n  );\n};\n\nexport default TextAreaExample;\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react to v8.46.1\nDESCRIPTION: This patch updates the @fluentui/react package to v8.46.1 to introduce new fixes and improvements. This patch is referenced in Pull Request #20887.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/ts-minbar-test-react/CHANGELOG.md#2025-04-20_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.46.1 ([PR #20887](https://github.com/microsoft/fluentui/pull/20887) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Defining TransformStyle Interface for Styling Transformed Data\nDESCRIPTION: Defines a TypeScript interface for applying styles to transformed data in visualizations. Allows targeting specific data points or series and applying partial PlotData styling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/chart-utilities/etc/chart-utilities.api.md#2025-04-20_snippet_41\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface TransformStyle {\n    // (undocumented)\n    target: number | string | number[] | string[];\n    // (undocumented)\n    value: Partial<PlotData>;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Fluent UI Design Tokens in JavaScript\nDESCRIPTION: This snippet demonstrates how to access a Fluent UI design token for neutral foreground color. These tokens can be used to create custom motions and maintain consistency with Fluent UI's design system.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-motion/stories/src/CreateMotionComponent/CreateMotionComponentTokensUsage.stories.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntokens.colorNeutralForeground1\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.72.1\nDESCRIPTION: This patch updates '@fluentui/react' to version 8.72.1, keeping the project in sync with the latest code changes and improvements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/theming-designer/CHANGELOG.md#2025-04-20_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.72.1 ([PR #23356](https://github.com/microsoft/fluentui/pull/23356) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Migrating Basic Button Usage in React\nDESCRIPTION: Demonstrates the change in basic Button usage from @fluentui/react-northstar to @fluentui/react-components. The main difference is that the 'content' prop is replaced with children.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Button.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from '@fluentui/react-northstar';\nconst Component = () => <Button content=\"Here is Button\" />;\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from '@fluentui/react-components';\nconst Component = () => <Button>Here is Button</Button>;\n```\n\n----------------------------------------\n\nTITLE: Installing Fluent UI ESLint Plugin with npm\nDESCRIPTION: Command to install the Fluent UI ESLint plugin using npm as a development dependency. This step is necessary before configuring ESLint rules for Fluent UI React components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/eslint-plugin-react-components/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# npm\\nnpm install --save-dev @fluentui/eslint-plugin-react-components\n```\n\n----------------------------------------\n\nTITLE: Importing Switch Component from Fluent UI React\nDESCRIPTION: This snippet demonstrates how to import the Switch component from the Fluent UI React package, allowing developers to use the Switch in their applications. Ensure that '@fluentui/react-components' is installed as a dependency.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-switch/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Switch } from '@fluentui/react-components';\n```\n\n----------------------------------------\n\nTITLE: Using Default ThemeProvider\nDESCRIPTION: This snippet demonstrates how to use the default ThemeProvider without customization. It wraps the application content to apply the default Fluent UI theme.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/src/utilities/ThemeProvider/README.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { ThemeProvider } from '@fluentui/react';\n\nexport const App = () => (\n  <ThemeProvider>\n    <>...app</>\n  </ThemeProvider>\n);\n```\n```\n\n----------------------------------------\n\nTITLE: FluentUI React Divider Changelog Entry\nDESCRIPTION: A changelog entry documenting version updates and changes to the React Divider component\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-divider/library/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Changes\n\n- Bump @fluentui/babel-make-styles to v9.0.0-alpha.28 ([PR #18998](https://github.com/microsoft/fluentui/pull/18998) by olfedias@microsoft.com)\n\n## [9.0.0-alpha.46](https://github.com/microsoft/fluentui/tree/@fluentui/react-divider_v9.0.0-alpha.46)\n\nFri, 16 Jul 2021 22:53:17 GMT\n```\n\n----------------------------------------\n\nTITLE: Batch Migration for All vNext Web Packages - Shell Script\nDESCRIPTION: This command initiates a batch migration of all vNext web packages, streamlining the process by applying changes across multiple packages simultaneously.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/migrate-fixed-versions/README.md#2025-04-20_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:migrate-fixed-versions --all\n```\n\n----------------------------------------\n\nTITLE: Version History Entry for SpinButton v9.0.0-beta.16\nDESCRIPTION: Changelog entry documenting dependency updates and bug fixes for the SpinButton component beta release.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-spinbutton/library/CHANGELOG.md#2025-04-20_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.0.0-beta.16]\n\n### Changes\n\n- fix: Use caret dependency range for Griffel\n- Bump @fluentui/react-input to v9.0.1\n- Bump @fluentui/react-conformance-griffel to v9.0.0-beta.10\n- Bump @fluentui/react-label to v9.0.1\n```\n\n----------------------------------------\n\nTITLE: Defining ITagItemProps Interface in TypeScript\nDESCRIPTION: Defines the ITagItemProps interface extending IPickerItemProps for tag items with additional styling and behavior options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_200\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface ITagItemProps extends IPickerItemProps<ITag> {\n    className?: string;\n    enableTagFocusInDisabledPicker?: boolean;\n    removeButtonProps?: ITagItemRemoveButtonProps;\n    styles?: IStyleFunctionOrObject<ITagItemStyleProps, ITagItemStyles>;\n    theme?: ITheme;\n    title?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Render Functions for Dialog (JavaScript)\nDESCRIPTION: This snippet imports rendering functions for dialog components from the Fluent UI, which allow for modal interactions and feedback in the user interface.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/etc/react-components.api.md#2025-04-20_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { renderDialog_unstable } from '@fluentui/react-dialog';\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { renderDialogActions_unstable } from '@fluentui/react-dialog';\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { renderDialogBody_unstable } from '@fluentui/react-dialog';\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { renderDialogContent_unstable } from '@fluentui/react-dialog';\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { renderDialogSurface_unstable } from '@fluentui/react-dialog';\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { renderDialogTitle_unstable } from '@fluentui/react-dialog';\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { renderDialogTrigger_unstable } from '@fluentui/react-dialog';\n```\n\n----------------------------------------\n\nTITLE: Defining assertSlots() Type Assertion Function in TypeScript\nDESCRIPTION: Declares an internal type assertion function that checks if a state object contains valid slot components. It uses TypeScript's 'asserts' keyword for type narrowing.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-utilities/etc/react-utilities.api.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport function assertSlots<Slots extends SlotPropsRecord>(state: unknown): asserts state is SlotComponents<Slots>;\n```\n\n----------------------------------------\n\nTITLE: Installing Fluent UI ESLint Plugin with pnpm\nDESCRIPTION: Command to install the Fluent UI ESLint plugin using pnpm as a development dependency. This provides another package management option for installing the plugin.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/eslint-plugin-react-components/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# pnpm\\npnpm add --save-dev @fluentui/eslint-plugin-react-components\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-docsite-components to v8.7.29\nDESCRIPTION: This patch updates the '@fluentui/react-docsite-components' version to 8.7.29 as part of maintaining the component documentation framework, addressing recent issues.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/theming-designer/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react-docsite-components to v8.7.29 ([PR #23528](https://github.com/microsoft/fluentui/pull/23528) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Basic Checkbox Implementation in Fluent UI v0\nDESCRIPTION: Example showing basic usage of Checkbox component in Fluent UI Northstar (v0) with checked, disabled, and mixed states.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Checkbox.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { Checkbox } from '@fluentui/react-northstar';\n\nconst CheckboxV0BasicExample = () => {\n  return (\n    <>\n      <Checkbox checked label=\"Checked\" />\n      <Checkbox disabled label=\"Disabled\" />\n      <Checkbox checked=\"mixed\" label=\"Mixed\" />\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ARIA Attributes for Closed Dropdown in Markdown\nDESCRIPTION: This snippet defines the ARIA attributes for a closed dropdown after an option has been selected. It specifies the role and state for the combobox.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/stories/src/Dropdown/DropdownAccessibility.stories.mdx#2025-04-20_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| Name           | Role     | States and properties   |\n| -------------- | -------- | ----------------------- |\n| (2) Best fruit | combobox | `aria-expanded=\"false\"` |\n```\n\n----------------------------------------\n\nTITLE: DialogBody Slots Class Names Definition\nDESCRIPTION: Defines the class names for the slots within the DialogBody component, using SlotClassNames from '@fluentui/react-utilities'. It is used for styling purposes within the Fluent UI React framework.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/etc/react-dialog.api.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport const dialogBodyClassNames: SlotClassNames<DialogBodySlots>;\"\n```\n\n----------------------------------------\n\nTITLE: Updating Flex Styles for 'fill' Prop\nDESCRIPTION: A breaking change that modifies the styles applied when using the 'fill' prop on the Flex component. This may affect layout and sizing in existing implementations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/CHANGELOG.md#2025-04-20_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Updated Flex component with modified 'fill' prop behavior\n<Flex fill>\n  {/* Flex content */}\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Running CodeMods with Project - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to configure and run codemods on specific source files using the project object and the runMods function.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/codemods/documentation/howTo.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nproject = new Project();\nproject.addSourceFileAtPaths(`${process.cwd()}addSomePathHere!`);\n/* If you want to add many paths, you can do that too. */\nproject.addSourceFilesAtPaths(`${process.cwd()}someRegexPath`);\n```\n\n----------------------------------------\n\nTITLE: ProgressBar Component Declaration\nDESCRIPTION: Declares the ProgressBar component as a ForwardRefComponent. This means it can accept a ref and forward it to a child component. It uses the ProgressBarProps type for its props.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-progress/library/etc/react-progress.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n// @public\nexport const ProgressBar: ForwardRefComponent<ProgressBarProps>;\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Boolean Variables Caching in FluentUI\nDESCRIPTION: Example of using the enableBooleanVariablesCaching performance option to enable styles caching for primitive variables overrides. This feature was added in v0.45.0 for performance improvements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/CHANGELOG.md#2025-04-20_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Provider\n  performance={{\n    enableBooleanVariablesCaching: true\n  }}\n>\n  {/* Provider content */}\n</Provider>\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react-checkbox to version v9.0.0-beta.11\nDESCRIPTION: In this snippet, the update for the @fluentui/react-checkbox package to version v9.0.0-beta.11 is outlined, ensuring the component is on the latest release.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/vr-tests-react-components/CHANGELOG.md#2025-04-20_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react-checkbox to v9.0.0-beta.11 ([PR #21995](https://github.com/microsoft/fluentui/pull/21995) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-theme version\nDESCRIPTION: This patch updates the version of the `@fluentui/react-theme` dependency.  Bumping this package ensures that the `@fluentui/react-badge` component uses the latest features and bug fixes available in the theme package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nBump @fluentui/react-theme to v9.1.22 ([PR #33238](https://github.com/microsoft/fluentui/pull/33238) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Running Prettier on Changed Files\nDESCRIPTION: This command applies Prettier formatting to any files that have been changed, ensuring consistent code style across the project.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/CONTRIBUTING.md#2025-04-20_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nyarn format              # run prettier on changed files\n```\n\n----------------------------------------\n\nTITLE: Implementing Fluent UI Icon Font in HTML\nDESCRIPTION: Shows how to add a Fluent UI icon to an HTML document using the ms-Icon class system. The example uses the AccessLogo icon and includes the aria-hidden attribute for accessibility.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Styles/M365ProductIconsPage/docs/web/M365ProductIconsSingleColor.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<i class=\"ms-Icon ms-Icon--AccessLogo\" aria-hidden=\"true\"></i>\n```\n\n----------------------------------------\n\nTITLE: DocumentCard Implementation - FluentUI v8\nDESCRIPTION: Example of a compact DocumentCard implementation using FluentUI v8 components, showing document preview with title and activity information.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Card/Card.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  DocumentCard,\n  DocumentCardActivity,\n  DocumentCardDetails,\n  DocumentCardPreview,\n  DocumentCardTitle,\n  DocumentCardType,\n} from '@fluentui/react/lib/DocumentCard';\nimport { TestImages } from '@fluentui/example-data';\n\nconst previewImage = {\n  name: 'Revenue stream proposal fiscal year 2016 version02.pptx',\n  linkProps: {\n    href: 'http://bing.com',\n    target: '_blank',\n  },\n  previewImageSrc: TestImages.documentPreview,\n  iconSrc: TestImages.iconPpt,\n  width: 144,\n};\n\nconst Component = () => (\n  <DocumentCard type={DocumentCardType.compact}>\n    <DocumentCardPreview previewImages={[previewImage]} />\n    <DocumentCardDetails>\n      <DocumentCardTitle title=\"Revenue stream proposal fiscal year 2016 version02.pptx\" />\n      <DocumentCardActivity activity=\"Created a few minutes ago\" />\n    </DocumentCardDetails>\n  </DocumentCard>\n);\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.98.7\nDESCRIPTION: This snippet highlights the patching process for @fluentui/react to version 8.98.7, aimed at providing small yet significant improvements to the library.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/azure-themes/CHANGELOG.md#2025-04-20_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.98.7 ([PR #24903](https://github.com/microsoft/fluentui/pull/24903) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Exporting Default Button Story in Single File - TypeScript\nDESCRIPTION: This snippet demonstrates how to create a default story for the Button component using a single `.stories.tsx` file. The default export configures metadata for the Storybook documentation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/authoring-stories.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// @filename Button.stories.tsx\nimport { Button, ButtonProps } from './Button'; // the component\nimport { Meta } from '@storybook/react';\n\nexport const Default = (props: ButtonProps) => <Button {...props}>Button</Button>;\nexport const ButtonWithIcon = () => <Button icon={<CalendarIcon />}>Text</Button>;\n\nexport default {\n  title: 'Components/Button',\n  component: Button,\n} as Meta;\n```\n\n----------------------------------------\n\nTITLE: Setting Storybook Page Title with Meta Component in JSX\nDESCRIPTION: This JSX code uses the imported Meta component to set the title of the Storybook documentation page. The title is set to 'Concepts/Migration/from v8/Components/GroupedList Migration'.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/GroupedList.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta title=\"Concepts/Migration/from v8/Components/GroupedList Migration\" />\n```\n\n----------------------------------------\n\nTITLE: Removing export * statements in FluentUI React Avatar\nDESCRIPTION: This code snippet represents a chore task to remove the usage of \"export *\" statements in the FluentUI React Avatar component. This is part of a larger effort to improve code clarity and maintainability.  It removes the wildcard exports, forcing explicit imports and exports to clarify dependencies.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-avatar/library/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n\"chore: remove usage of \\\"export *\\\" ([PR #33384](https://github.com/microsoft/fluentui/pull/33384) by olfedias@microsoft.com)\"\n```\n\n----------------------------------------\n\nTITLE: Using Fluent UI v9 Components\nDESCRIPTION: Example of correct usage by importing and using migrated Fluent UI v9 components in React. Ensures adherence to the 'prefer-fluentui-v9' rule.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/eslint-plugin-react-components/README.md#2025-04-20_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// Import and use components that have been already migrated to Fluent UI v9\\nimport { Button } from '@fluentui/react-components';\\n\\nconst Component = () => <Button>...</Button>;\n```\n\n----------------------------------------\n\nTITLE: Upgrade react-icons version\nDESCRIPTION: This patch upgrades the react-icons version to pick up a provider export map fix.  It ensures the component uses the correct provider export map.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-spinbutton/library/CHANGELOG.md#2025-04-20_snippet_6\n\nLANGUAGE: none\nCODE:\n```\nchore: Upgrade react-icons version to 2.0.239 to pick up provider export map fix. ([PR #31287](https://github.com/microsoft/fluentui/pull/31287) by ololubek@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Importing Meta from Storybook in JavaScript\nDESCRIPTION: This snippet imports the Meta component from Storybook's addon-docs package. It's used to set metadata for the documentation page in Storybook.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/migrate-styles.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs';\n```\n\n----------------------------------------\n\nTITLE: Skeleton Component DOM Structure (HTML)\nDESCRIPTION: Shows the expected DOM structure for the Skeleton component. It includes attributes like `aria-busy`, `role`, and `aria-live` for accessibility.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Skeleton.md#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n\"<div id=\\\"mySkeleton\\\" class=\\\"skeleton-ui\\\" aria-busy=\\\"true\\\" role=\\\"alert\\\" aria-live=\\\"polite\\\">\\n    <span class=\\\"skeleton-ui__shape\\\">\\n    <span class=\\\"skeleton-ui__line\\\">\\n</div>\"\n```\n\n----------------------------------------\n\nTITLE: Proposed Color Alias Token Restructuring\nDESCRIPTION: Breakdown of proposed color alias token tables to reduce overall token count\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/theme-shared-colors.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n1. Semantic States\n   - 5 unique global colors\n   - 9 alias tokens\n   - 45 alias tokens in total (5 x 9)\n2. Persona\n   - 30 unique global colors\n   - 3 alias tokens\n   - 90 tokens in total (30 x 3)\n3. Category\n   - 10 unique global colors\n   - 9 alias slots\n   - 90 tokens in total (10 x 9)\n```\n\n----------------------------------------\n\nTITLE: FluentUI React Select Version History\nDESCRIPTION: Changelog entries showing version updates and changes made to the React Select component, including dependency bumps and patches.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-select/library/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.1.29]\n- Bump @fluentui/react-field to v9.1.19\n- Bump @fluentui/react-jsx-runtime to v9.0.0\n\n## [9.1.28]\n- Bump @fluentui/react-field to v9.1.18 \n- Bump @fluentui/react-jsx-runtime to v9.0.0-alpha.16\n\n## [9.1.27]\n- Bump @fluentui/react-field to v9.1.17\n- Bump @fluentui/react-jsx-runtime to v9.0.0-alpha.15\n- Bump @fluentui/react-utilities to v9.11.1\n```\n\n----------------------------------------\n\nTITLE: Defining Animation Styles Interface in TypeScript\nDESCRIPTION: Interface for animation styles with various predefined CSS animations like fade, rotate, scale, and slide effects\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/theme/etc/theme.api.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IAnimationStyles {\n    fadeIn100: IRawStyle;\n    fadeOut200: IRawStyle;\n    rotate90deg: IRawStyle;\n    scaleUpIn100: IRawStyle;\n    slideDownIn10: IRawStyle;\n    // ... additional animation styles\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for v9.0.0-alpha.1\nDESCRIPTION: Changelog entry documenting initial release and dependency updates.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-field/library/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.0.0-alpha.1](https://github.com/microsoft/fluentui/tree/@fluentui/react-field_v9.0.0-alpha.1)\n\nThu, 15 Sep 2022 09:49:04 GMT\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-field_v9.0.0-alpha.0..@fluentui/react-field_v9.0.0-alpha.1)\n```\n\n----------------------------------------\n\nTITLE: Pivot Component Interfaces\nDESCRIPTION: Interfaces defining the structure and styling of the Pivot navigation component\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_166\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IPivot {\n    focus(): void;\n}\n\nexport interface IPivotItemProps extends React_2.HTMLAttributes<HTMLDivElement> {\n    alwaysRender?: boolean;\n    ariaLabel?: string;\n    children?: React_2.ReactNode;\n    componentRef?: IRefObject<{}>;\n    headerButtonProps?: IButtonProps | {\n        [key: string]: string | number | boolean;\n    };\n    headerText?: string;\n    itemCount?: number | string;\n    itemIcon?: string;\n    itemKey?: string;\n    keytipProps?: IKeytipProps;\n    linkText?: string;\n    onRenderItemLink?: IRenderFunction<IPivotItemProps>;\n}\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.68.0\nDESCRIPTION: This entry serves as a record for the update of '@fluentui/react' to version 8.68.0, a key move in enhancing component performance.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/theming-designer/CHANGELOG.md#2025-04-20_snippet_34\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.68.0 ([PR #22966](https://github.com/microsoft/fluentui/pull/22966) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Using Radio Component within RadioGroup\nDESCRIPTION: Example of how to properly use the Fluent UI Radio component within a RadioGroup container. Unlike the Fluent UI React 9 implementation, the WC3 Radio must be rendered inside a RadioGroup to inherit appropriate styles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/radio/README.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<fluent-radio-group>\n  <fluent-radio></fluent-radio>\n</fluent-radio-group>\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/font-icons-mdl2 to v8.4.1\nDESCRIPTION: This document notes the update of '@fluentui/font-icons-mdl2' to version 8.4.1, enhancing the icon capabilities within the Fluent UI framework.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/theming-designer/CHANGELOG.md#2025-04-20_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/font-icons-mdl2 to v8.4.1 ([PR #23266](https://github.com/microsoft/fluentui/pull/23266) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Importing Meta from Storybook in JavaScript\nDESCRIPTION: This code snippet imports the Meta component from Storybook's addon-docs package. It's used to set metadata for the Storybook documentation page.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Accessibility/Truncation.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs';\n```\n\n----------------------------------------\n\nTITLE: Version History and Changes Entry\nDESCRIPTION: Markdown formatted changelog entry showing version history, patches, and dependency updates for the FluentUI React Tabs component\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tabs/library/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patches\n\n- Bump @fluentui/react-context-selector to v9.1.10\n- Bump @fluentui/react-tabster to v9.5.3\n- Bump @fluentui/react-utilities to v9.6.0\n```\n\n----------------------------------------\n\nTITLE: Implementing useId in TypeScript\nDESCRIPTION: A public hook that generates a unique ID, optionally prefixed, for accessibility or keying purposes. It accepts an optional provided ID that takes precedence when available.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-utilities/etc/react-utilities.api.md#2025-04-20_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport function useId(prefix?: string, providedId?: string): string;\n```\n\n----------------------------------------\n\nTITLE: Current Package Dependencies\nDESCRIPTION: Lists the dependencies of the current @fluentui/react-field package implementation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/field-package-layout.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- `@fluentui/react-field` depends on:\n  - `@fluentui/react-checkbox`\n  - `@fluentui/react-combobox`\n  - `@fluentui/react-input`\n  - `@fluentui/react-progress`\n  - `@fluentui/react-radio`\n  - `@fluentui/react-select`\n  - `@fluentui/react-slider`\n  - `@fluentui/react-spinbutton`\n  - `@fluentui/react-switch`\n  - `@fluentui/react-textarea`\n  - `@fluentui/react-icons`\n  - `@fluentui/react-label`\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react-radio to version v9.0.0-beta.3\nDESCRIPTION: In this snippet, the update for the @fluentui/react-radio to version v9.0.0-beta.3 is noted, part of the continuous update tradition of the UI components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/vr-tests-react-components/CHANGELOG.md#2025-04-20_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react-radio to v9.0.0-beta.3 ([PR #21995](https://github.com/microsoft/fluentui/pull/21995) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Defining Legend Shape Enum in TypeScript\nDESCRIPTION: The LegendShape type encapsulates the various shapes that can be used for chart legends, enhancing visual differentiation and aesthetics.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/etc/react-charting.api.md#2025-04-20_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport type LegendShape = 'default' | 'triangle' | keyof typeof Points | keyof typeof CustomPoints;\n```\n\n----------------------------------------\n\nTITLE: Examples of non-reusable CSS selectors\nDESCRIPTION: Demonstrates how unique selectors create CSS rules that cannot be reused across different components. This pattern should be avoided to maximize code reuse.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/styles-handbook.md#2025-04-20_snippet_33\n\nLANGUAGE: css\nCODE:\n```\n/*    ⬇️ cannot be reused in other components  */\n.hash .some-unique-class {\n  display: flex;\n}\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.114.3\nDESCRIPTION: Moves the @fluentui/react package to version 8.114.3, aiming for better performance metrics and resolving minor bugs.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluent2-theme/CHANGELOG.md#2025-04-20_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.114.3 ([PR #30296](https://github.com/microsoft/fluentui/pull/30296) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Fixing Button Focus\nDESCRIPTION: This entry fixes a bug where the button's focus was bleeding into the outside bounding box, enhancing accessibility.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluent2-theme/CHANGELOG.md#2025-04-20_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n- fix: Button focus bleeding into outside bounding box ([PR #28361](https://github.com/microsoft/fluentui/pull/28361) by mifraser@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Stack Component Type Definitions in TypeScript\nDESCRIPTION: Type definitions for Stack and StackItem components, defining the component structure, tokens, and styles interfaces for these layout components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_178\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type IStackComponent = IComponent<IStackProps, IStackTokens, IStackStyles>;\n\n// @public (undocumented)\nexport type IStackItemComponent = IComponent<IStackItemProps, IStackItemTokens, IStackItemStyles>;\n```\n\n----------------------------------------\n\nTITLE: Setting Global Monaco Configuration in JavaScript\nDESCRIPTION: This snippet demonstrates how to set up a global MonacoConfig object with configuration properties. This approach allows for automatic configuration when importing @fluentui/monaco-editor.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/monaco-editor/README.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MonacoConfig = {\n  baseUrl: '.',\n  useMinified: false,\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up Storybook Documentation Page with JSX\nDESCRIPTION: Configures the Storybook documentation page with a title and displays the Shadows component within a Canvas. The component demonstrates various shadow styling options in Fluent UI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-theme/stories/src/Theme/shadows/index.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Meta title=\"Theme/Shadows\" />\n\n<h1 class=\"sbdocs-title\"> Shadow </h1>\n\n<Canvas withSource=\"none\">\n  <Shadows />\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Numeric Key Code Definitions\nDESCRIPTION: Defines numeric key codes for various keyboard keys, which can be used for low-level keyboard event handling and cross-browser compatibility\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/keyboard-keys/etc/keyboard-keys.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst A = 65;\nconst a = 65;\n\nconst Digit0 = 48;\nconst Digit1 = 49;\n\nconst F1_2 = 112;\nconst F10_2 = 121;\n```\n\n----------------------------------------\n\nTITLE: Using useMergedRefs Hook in TypeScript React\nDESCRIPTION: Example of how to use the useMergedRefs hook in a React component to merge a forwarded ref with a local ref.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-hooks/README.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst Example = React.forwardRef(function Example(props: {}, forwardedRef: React.Ref<HTMLDivElement>) {\n  const localRef = React.useRef<HTMLDivElement>();\n  const mergedRef = useMergedRef(localRef, forwardedRef);\n\n  React.useEffect(() => {\n    localRef.current.focus();\n  }, []);\n\n  return <div>Example</div>;\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Render Functions for Table (JavaScript)\nDESCRIPTION: This snippet imports several rendering functions for table components, crucial for handling data presentation effectively within the user interface.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/etc/react-components.api.md#2025-04-20_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { renderDataGrid_unstable } from '@fluentui/react-table';\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { renderDataGridBody_unstable } from '@fluentui/react-table';\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { renderDataGridCell_unstable } from '@fluentui/react-table';\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { renderDataGridHeader_unstable } from '@fluentui/react-table';\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { renderDataGridHeaderCell_unstable } from '@fluentui/react-table';\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { renderDataGridRow_unstable } from '@fluentui/react-table';\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { renderDataGridSelectionCell_unstable } from '@fluentui/react-table';\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { renderTable_unstable } from '@fluentui/react-table';\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { renderTableBody_unstable } from '@fluentui/react-table';\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { renderTableRow_unstable } from '@fluentui/react-table';\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { renderTableCell_unstable } from '@fluentui/react-table';\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { renderTableHeader_unstable } from '@fluentui/react-table';\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { renderTableSelectionCell_unstable } from '@fluentui/react-table';\n```\n\n----------------------------------------\n\nTITLE: Using the useMotion Hook in React Components\nDESCRIPTION: Demonstrates how to use the useMotion hook within a sample React component to manage its motion state.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/component-transitions-on-mount-or-unmount.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst [open, setOpen] = React.useState(false);\nconst options = {\n  animateOnFirstMount: false,\n};\nconst { ref, type, active, canRender } = useMotion(open, options);\n```\n\n----------------------------------------\n\nTITLE: Accessibility Improvements for Charts\nDESCRIPTION: Multiple patches focusing on improving chart accessibility across various chart types including Area, Line, Vertical Bar, Donut, HeatMap, and Grouped Vertical charts\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/CHANGELOG.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Accessibility enhancements for various chart components\n// Includes role assignments, focus management, and screen reader support\n```\n\n----------------------------------------\n\nTITLE: Bug Fix Entry\nDESCRIPTION: Changelog entry for version 9.0.5 documenting a focus border fix\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-breadcrumb/library/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.0.5](https://github.com/microsoft/fluentui/tree/@fluentui/react-breadcrumb_v9.0.5)\n\nThu, 21 Dec 2023 17:00:40 GMT\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-breadcrumb_v9.0.4..@fluentui/react-breadcrumb_v9.0.5)\n\n### Patches\n\n- fix(breadcrumb): BreadcrumbButton focus border has incorrent width and transition\n```\n\n----------------------------------------\n\nTITLE: Ceiling Minute to Increment - TypeScript\nDESCRIPTION: This constant defines a function that can round a given date to the nearest increment of minutes specified. It helps in precise time calculations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/date-time-utilities/etc/date-time-utilities.api.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const ceilMinuteToIncrement: (date: Date, increments: number) => Date;\n```\n\n----------------------------------------\n\nTITLE: Creating a ProgressBar Example in React\nDESCRIPTION: This snippet shows a simple implementation of the ProgressBar component with a specified thickness and value, rendering a progress indicator within a React component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-progress/library/README.md#2025-04-20_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nconst ProgressBarExample = () => {\n  return <ProgressBar thickness=\"large\" value={0.5} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining useListSelection Function for FluentUI in TypeScript\nDESCRIPTION: Exports a function for managing selection state within a list component. Takes optional selection hook parameters and returns a state object for managing list selection.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-migration-v0-v9/library/etc/react-migration-v0-v9.api.md#2025-04-20_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport function useListSelection(options?: SelectionHookParams): ListSelectionState;\n```\n\n----------------------------------------\n\nTITLE: Exporting Flat Tree Hooks in TypeScript\nDESCRIPTION: Exports hooks for handling flat tree structures, including state management, context values, and styles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tree/library/etc/react-tree.api.md#2025-04-20_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const useFlatTree_unstable: (props: FlatTreeProps, ref: React_2.Ref<HTMLElement>) => FlatTreeState;\n\nexport const useFlatTreeContextValues_unstable: (state: FlatTreeState) => FlatTreeContextValues;\n\nexport const useFlatTreeStyles_unstable: (state: FlatTreeState) => FlatTreeState;\n```\n\n----------------------------------------\n\nTITLE: Preventing RTL transformations with @noflip\nDESCRIPTION: Shows how to prevent automatic RTL flipping for specific CSS properties by using the @noflip comment directive within the CSS value.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/styles-handbook.md#2025-04-20_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeStyles } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  root: {\n    paddingLeft: '10px /* @noflip */',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Removing 'defaultTarget' Prop from Popup Component\nDESCRIPTION: A breaking change that removes the 'defaultTarget' prop from the Popup component. This may affect how default positioning of popups is handled.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/CHANGELOG.md#2025-04-20_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Updated Popup component usage without 'defaultTarget' prop\n<Popup content=\"Popup content\">\n  <Button>Toggle Popup</Button>\n</Popup>\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for v9.0.0-alpha.2\nDESCRIPTION: Changelog entry listing multiple dependency version bumps for FluentUI components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-field/library/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.0.0-alpha.2](https://github.com/microsoft/fluentui/tree/@fluentui/react-field_v9.0.0-alpha.2)\n\nTue, 20 Sep 2022 20:55:45 GMT\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-field_v9.0.0-alpha.1..@fluentui/react-field_v9.0.0-alpha.2)\n```\n\n----------------------------------------\n\nTITLE: Defining Line Chart Component in TypeScript\nDESCRIPTION: The LineChart constant exports a functional component intended for rendering line charts, configured via props to dictate data and styling options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/etc/react-charting.api.md#2025-04-20_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const LineChart: React_2.FunctionComponent<ILineChartProps>;\n```\n\n----------------------------------------\n\nTITLE: Date Formatting Interface\nDESCRIPTION: Interface defining methods for formatting various date representations like day, month, and year\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-calendar-compat/library/etc/react-calendar-compat.api.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface DateFormatting {\n    formatDay: (date: Date) => string;\n    formatMonth: (date: Date, strings: DateGridStrings) => string;\n    formatMonthDayYear: (date: Date, strings: DateGridStrings) => string;\n    formatMonthYear: (date: Date, strings: DateGridStrings) => string;\n    formatYear: (date: Date) => string;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Fluent UI Colors with CSS Classes in HTML\nDESCRIPTION: Demonstrates how to use Fluent UI colors via CSS classes in HTML. This requires loading the Fabric Core stylesheet as per the getting started instructions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Styles/Colors/docs/web/ColorsImplementation.md#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"ms-bgColor-communicationPrimary\"></div>\n```\n\n----------------------------------------\n\nTITLE: Safari Default Focus Outline Fix\nDESCRIPTION: This addresses an issue in Safari where the default focused outline was not rendering correctly, ensuring consistent appearance across browsers.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/CHANGELOG.md#2025-04-20_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nFix default focused outline in Safari @yuanboxue-amber ([#14917](https://github.com/microsoft/fluentui/pull/14917))\n```\n\n----------------------------------------\n\nTITLE: ChoiceGroup Option Interface in TypeScript\nDESCRIPTION: Interface for defining individual options within a ChoiceGroup component, supporting rich configuration with images, icons, and styling\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_59\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IChoiceGroupOption extends Omit<React_2.InputHTMLAttributes<HTMLElement | HTMLInputElement>, 'checked'> {\n    ariaLabel?: string;\n    disabled?: boolean;\n    iconProps?: IIconProps;\n    text: string;\n    // ... additional option configuration\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Meta Component from Storybook in JavaScript\nDESCRIPTION: This code snippet imports the Meta component from Storybook's addon-docs package. It's used to set metadata for the Storybook documentation page.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/GroupedList.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs';\n```\n\n----------------------------------------\n\nTITLE: Enabling Fluent UI Debugging in DevTools (JS)\nDESCRIPTION: This JavaScript snippet shows how to enable Fluent UI debugging by setting the `fluentUIDebug` flag in local storage. This allows you to use the Fluent UI Styles Debug panel.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/docs/src/pages/Debugging.mdx#2025-04-20_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nwindow.localStorage.fluentUIDebug = true;\n```\n\n----------------------------------------\n\nTITLE: Replacing mergeThemes Function in TypeScript\nDESCRIPTION: This snippet shows how to replace the removed mergeThemes function with object spreading to combine themes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/docs/MIGRATION-NOTES.md#2025-04-20_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\nimport { webLightTheme, Theme } from '@fluentui/react-components';\n\nconst customTokens = { ... };\n-const customTheme = mergeTheme(webLightTheme, customTokens);\n+const customTheme = { ...webLightTheme, ...customTokens };\n```\n\n----------------------------------------\n\nTITLE: Disabling sanitize-css Plugin in FluentUI Production Mode\nDESCRIPTION: Example of how the sanitize-css plugin is disabled for production mode by default in FluentUI v0.45.0. This was introduced as a breaking change.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/CHANGELOG.md#2025-04-20_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In webpack config or similar build tool setup\nmodule.exports = {\n  // ...\n  plugins: [\n    new FluentUIPlugin({\n      disableSanitizeCSS: process.env.NODE_ENV === 'production'\n    })\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IDragDropHelper Interface in TypeScript\nDESCRIPTION: Defines the IDragDropHelper interface with methods for disposing, subscribing, and unsubscribing drag and drop functionality.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_109\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface IDragDropHelper {\n    dispose: () => void;\n    subscribe: (root: HTMLElement, events: EventGroup, options: IDragDropOptions) => {\n        key: string;\n        dispose: () => void;\n    };\n    unsubscribe: (root: HTMLElement, key: string) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Button Output with as Prop\nDESCRIPTION: This is the incorrect rendering output when trying to pass the `as` prop to the Loader via the Button. The loader component is completely ignored.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/simplify-prop-merging.md#2025-04-20_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<Button>\n  {/* 👇 this is just a plain div, Loader is not rendered 🚨 */}\n  <div />\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Restricting TypeScript Checks for Component Props\nDESCRIPTION: A breaking change that restricts TypeScript checks for component props. This likely impacts type definitions and may require updates to component usage.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/CHANGELOG.md#2025-04-20_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Example of restricted prop type checking\ninterface ComponentProps {\n  // Restricted prop types\n}\n\nconst Component: React.FC<ComponentProps> = (props) => {\n  // Component implementation\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Preset Global Context in Bash\nDESCRIPTION: Commands to install the @fluentui/babel-preset-global-context package using yarn or npm. This preset is used to transform createContext calls in React applications.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/babel-preset-global-context/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @fluentui/babel-preset-global-context\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --dev @fluentui/babel-preset-global-context\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for Visual Regression Utilities with Jest\nDESCRIPTION: This snippet demonstrates how to execute unit tests for the visual-regression-utilities library using Jest. This step is crucial for ensuring the correctness of the library's code.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/visual-regression-utilities/README.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx test visual-regression-utilities\n```\n\n----------------------------------------\n\nTITLE: SSR Unsafe Id Generation\nDESCRIPTION: This snippet shows an example of an unsafe id generation approach for SSR applications.  The `getId` function increments a global variable.  This will cause mismatch between server and client rendered content during hydration as the id count is reset on the client.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/ssr-context.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Same code run on server and client\nlet id = 0;\nexport function getId() {\n  return id++;\n}\n\nconst useId = () => {\n  const ref = React.useRef();\n  if (ref.current) {\n    ref.current = getId();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML List for SharePoint Framework Resources\nDESCRIPTION: This HTML snippet creates an unordered list with flexbox styling to display links related to SharePoint Framework integration with Fluent UI React.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Overviews/ResourcesPage/docs/default/ResourcesDeveloperResources.md#2025-04-20_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<ul className=\"md-list--flex\">\n  <li className=\"mdut--half\">[SharePoint Framework overview](https://aka.ms/spfx)</li>\n  <li className=\"mdut--half\">[Use Fluent UI React components in web parts](https://aka.ms/spfx-fabric-react)</li>\n  <li className=\"mdut--half\">[Theme Designer](https://aka.ms/themedesigner)</li>\n  <li className=\"mdut--half\">[Get started with building client-side web parts](https://aka.ms/spfx-tutorials)</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Defining Chart Color Tokens\nDESCRIPTION: TypeScript interface defining a set of color tokens and status-related color strings, likely used for chart theming and styling\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charts/library/etc/react-charts.api.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    color16: string;\n    color17: string;\n    color18: string;\n    ...\n    info: string;\n    disabled: string;\n    highError: string;\n    error: string;\n    warning: string;\n    success: string;\n    highSuccess: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IEntityRect Interface in TypeScript\nDESCRIPTION: Defines the IEntityRect interface with optional height and width properties. This interface is marked as @public but undocumented.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_126\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface IEntityRect {\n    // (undocumented)\n    height?: number;\n    // (undocumented)\n    width?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Running FluentUI Performance Tests with Parameters\nDESCRIPTION: Command for running performance tests with specific scenarios and iteration counts. This allows targeting particular components and controlling test depth.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/perf-test/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn just perf-test -- --scenarios SplitButton,SplitButtonNew --iterations 1000\n```\n\n----------------------------------------\n\nTITLE: Basic Checkbox Implementation in Fluent UI v9\nDESCRIPTION: Equivalent implementation of Checkbox component in Fluent UI v9, demonstrating the same functionality with updated import path.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Checkbox.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { Checkbox } from '@fluentui/react-components';\n\nconst CheckboxV9BasicExample = () => {\n  return (\n    <>\n      <Checkbox checked label=\"Checked\" />\n      <Checkbox disabled label=\"Disabled\" />\n      <Checkbox checked=\"mixed\" label=\"Mixed\" />\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Vertical Stacked Bar Chart Component in TypeScript\nDESCRIPTION: The VerticalStackedBarChart constant exports a functional component for vertical stacked bar charts, offering customization for data representation and appearance.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/etc/react-charting.api.md#2025-04-20_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const VerticalStackedBarChart: React_2.FunctionComponent<IVerticalStackedBarChartProps>;\n```\n\n----------------------------------------\n\nTITLE: Specifying PieMarker Interface in TypeScript\nDESCRIPTION: The PieMarker interface defines marker properties for pie charts, including color arrays and partial pie line styling. It helps in adjusting the appearance and boundary of pie segments.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/chart-utilities/etc/chart-utilities.api.md#2025-04-20_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface PieMarker {\n    // (undocumented)\n    colors: PieColors;\n    // (undocumented)\n    line: Partial<PieLine>;\n}\n```\n\n----------------------------------------\n\nTITLE: Render Props with Component Slots\nDESCRIPTION: Illustrates advanced slot customization using render props technique, allowing complete control over slot rendering and wrapping\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/docs/src/pages/ShorthandProps.mdx#2025-04-20_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Attachment\n  header=\"Contacts.docx\"\n  action={{\n    content: '?',\n    children: (\n      Component,\n      props\n    ) => <Tooltip content=\"Help...\" trigger={<Component {...props} />} />,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Divider Class and Related Types in TypeScript\nDESCRIPTION: Defines the Divider class extending BaseDivider, along with related enums and types for alignment, appearance, orientation, and role.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_33\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport class Divider extends BaseDivider {\n    // (undocumented)\n    alignContent?: DividerAlignContent;\n    alignContentChanged(prev: DividerAlignContent | undefined, next: DividerAlignContent | undefined): void;\n    // (undocumented)\n    appearance?: DividerAppearance;\n    appearanceChanged(prev: DividerAppearance | undefined, next: DividerAppearance | undefined): void;\n    // (undocumented)\n    inset?: boolean;\n    insetChanged(prev: boolean, next: boolean): void;\n}\n\n// @public\nexport const DividerAlignContent: {\n    readonly center: \"center\";\n    readonly start: \"start\";\n    readonly end: \"end\";\n};\n\n// @public\nexport type DividerAlignContent = ValuesOf<typeof DividerAlignContent>;\n\n// @public\nexport const DividerAppearance: {\n    readonly strong: \"strong\";\n    readonly brand: \"brand\";\n    readonly subtle: \"subtle\";\n};\n\n// @public\nexport type DividerAppearance = ValuesOf<typeof DividerAppearance>;\n\n// @public\nexport const DividerDefinition: FASTElementDefinition<typeof Divider>;\n\n// @public\nexport const DividerOrientation: {\n    readonly horizontal: \"horizontal\";\n    readonly vertical: \"vertical\";\n};\n\n// @public\nexport type DividerOrientation = ValuesOf<typeof DividerOrientation>;\n\n// @public\nexport const DividerRole: {\n    readonly separator: \"separator\";\n    readonly presentation: \"presentation\";\n};\n\n// @public\nexport type DividerRole = ValuesOf<typeof DividerRole>;\n\n// @public\nexport const DividerStyles: ElementStyles;\n\n// @public\nexport const DividerTemplate: ElementViewTemplate<Divider>;\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.98.4\nDESCRIPTION: This patch details the transition to version 8.98.4 for @fluentui/react, focused on improving library features and stability.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/azure-themes/CHANGELOG.md#2025-04-20_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.98.4 ([PR #25294](https://github.com/microsoft/fluentui/pull/25294) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Updating loadTheme Usage\nDESCRIPTION: This snippet shows the recommended approach to replace loadTheme calls with ThemeProvider for consistent theming throughout the application.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/src/utilities/ThemeProvider/README.md#2025-04-20_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\n<ThemeProvider theme={your_theme}>\n  <App />\n</ThemeProvider>\n```\n```\n\n----------------------------------------\n\nTITLE: Setting up Fluent UI Theme\nDESCRIPTION: JavaScript code to set up a theme for Fluent UI Web Components. This uses the setTheme utility and webLightTheme from the tokens package to establish styling for components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/README.md#2025-04-20_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { setTheme } from '@fluentui/web-components';\nimport { webLightTheme } from '@fluentui/tokens';\n\nsetTheme(webLightTheme);\n```\n\n----------------------------------------\n\nTITLE: Using SCSS Variables and Mixins for Elevation\nDESCRIPTION: Shows how to implement elevation effects using SCSS variables and mixins from Fabric Core or Fluent UI React.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Styles/ElevationPage/docs/web/ElevationImplementation.md#2025-04-20_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n// Import all mixins and variables.\n// (These are also available from '@fluentui/react/dist/sass/References'.)\n@import 'office-ui-fabric-core/dist/sass/References';\n\n.myClass1 {\n  box-shadow: $ms-depth-shadow-8; // Using variables\n}\n\n.myClass2 {\n  @include ms-depth-8; // Using mixins\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Fluent UI as a Dependency - Shell\nDESCRIPTION: This snippet demonstrates how to install the Fluent UI React components library as a dependency using Yarn. It is essential for any application that intends to use Fluent UI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/QuickStart.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nyarn add @fluentui/react-components\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.72.0\nDESCRIPTION: This note document updates '@fluentui/react' to version 8.72.0, implementing various key enhancements from previous versions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/theming-designer/CHANGELOG.md#2025-04-20_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.72.0 ([PR #23293](https://github.com/microsoft/fluentui/pull/23293) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Expected HTML Output with Root CSS Class\nDESCRIPTION: The expected HTML output when applying a CSS class to the root element of the Checkbox component for layout purposes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/native-element-props.md#2025-04-20_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"foo\">\n  <label>sample</label>\n  <input type=\"checkbox\" name=\"foo\" checked />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Patch Release Notes Feature\nDESCRIPTION: Highlights specific patches and improvements in each version, including dependency updates and minor functional enhancements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-field/library/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Patches\n\n- Bump @fluentui/react-context-selector to v9.1.76\n- Bump @fluentui/react-jsx-runtime to v9.0.54\n```\n\n----------------------------------------\n\nTITLE: Defining Keyboard Key Constants in TypeScript\nDESCRIPTION: Provides a comprehensive collection of keyboard key constants for use in FluentUI applications, including navigation keys, function keys, and special control keys\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/keyboard-keys/etc/keyboard-keys.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const ArrowDown = \"ArrowDown\";\nconst ArrowDown_2 = 40;\n\nexport const Backspace = \"Backspace\";\nconst Backspace_2 = 8;\n\nexport const Control = \"Control\";\nconst Control_2 = 17;\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/set-version to v8.2.1\nDESCRIPTION: This entry captures the update of '@fluentui/set-version' to version 8.2.1, integral for version management in the development process.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/theming-designer/CHANGELOG.md#2025-04-20_snippet_39\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/set-version to v8.2.1 ([PR #22966](https://github.com/microsoft/fluentui/pull/22966) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Migrating Basic Tooltip Implementation in React\nDESCRIPTION: Shows the basic migration pattern from v0 to v9 Tooltip component, highlighting the new required relationship prop and children structure.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Tooltip.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tooltip, Button } from '@fluentui/react-northstar';\nconst Component = () => <Tooltip trigger={<Button>trigger</Button>} content=\"Example tooltip\" />;\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tooltip, Button } from '@fluentui/react-components';\nconst Component = () => (\n  <Tooltip\n    content=\"Example tooltip\"\n    relationship=\"label\" // relationship prop is required on v9 Tooltip\n  >\n    <Button>trigger</Button>\n  </Tooltip>\n);\n```\n\n----------------------------------------\n\nTITLE: Expected HTML Output with Wrapper Props\nDESCRIPTION: The expected HTML output when using the wrapper slot approach and applying props to both the input and wrapper elements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/native-element-props.md#2025-04-20_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"bar\">\n  <input type=\"checkbox\" name=\"foo\" checked className=\"foo\" />\n  <label>sample</label>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Calendar Day Grid Style Properties Interface\nDESCRIPTION: Defines styling properties for calendar day grid, including animation, theme, and display configurations\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ICalendarDayGridStyleProps {\n    animateBackwards?: boolean;\n    animationDirection?: AnimationDirection;\n    className?: string;\n    dateRangeType?: DateRangeType;\n    lightenDaysOutsideNavigatedMonth?: boolean;\n    showWeekNumbers?: boolean;\n    theme: ITheme;\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating a Specific Project - Shell Script\nDESCRIPTION: This command executes the migration process for a specific project identified by its name. The project name must be provided as a parameter.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/migrate-fixed-versions/README.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:migrate-fixed-versions --name=example\n```\n\n----------------------------------------\n\nTITLE: Migrating Package Directory Structure for Preview Packages\nDESCRIPTION: Commands to rename package directories and API documentation files when migrating from regular to preview package structure.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/new-release-process-v9-packages.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmv packages/react-components/react-control packages/react-components/react-control-preview\nmv packages/react-components/react-control/etc/react-control.api.md packages/react-components/react-control/etc/react-control-preview.api.md\n```\n\n----------------------------------------\n\nTITLE: Configuring Screener Tests in TypeScript\nDESCRIPTION: Example configuration for Screener visual regression tests. It demonstrates how to set up steps for testing a Dropdown component across multiple themes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/test-a-feature.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Dropdown } from '@fluentui/react-northstar';\n\nconst config: ScreenerTestsConfig = {\n  themes: ['teams', 'teamsDark', 'teamsHighContrast'],\n  steps: [\n    builder => builder.click(`.${Dropdown.slotClassNames.triggerButton}`).snapshot('Opens dropdown list'),\n    builder =>\n      builder\n        .click(`.${Dropdown.slotClassNames.triggerButton}`)\n        .hover(`.${Dropdown.slotClassNames.itemsList} li:nth-child(2)`)\n        .snapshot('Highlights an item'),\n  ],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Generated CSS for RTL and LTR styles\nDESCRIPTION: Demonstrates the CSS classes generated by Griffel for LTR and RTL directions. The first class is applied in LTR context, while the second is applied in RTL context.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/styles-handbook.md#2025-04-20_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n/* Will be applied in LTR */\n.frdkuqy {\n  padding-left: 10px;\n}\n/* Will be applied in RTL */\n.f81rol6 {\n  padding-right: 10px;\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Customizer with ThemeProvider\nDESCRIPTION: This snippet demonstrates how to replace the deprecated Customizer component and its props with the ThemeProvider for applying themes in your app.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/src/utilities/ThemeProvider/README.md#2025-04-20_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\n<ThemeProvider theme={theme} />\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Tree Chart Component in TypeScript\nDESCRIPTION: The TreeChart constant exports a React functional component for rendering tree charts, utilizing props for tree data management and visual customization.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/etc/react-charting.api.md#2025-04-20_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const TreeChart: React_2.FunctionComponent<ITreeProps>;\n```\n\n----------------------------------------\n\nTITLE: Implementing MessageBarButton in React/TypeScript\nDESCRIPTION: Definition of MessageBarButton component that extends React.Component. This button is specifically styled for use within MessageBar components in the FluentUI library.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_234\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MessageBarButton extends React_2.Component<IButtonProps, {}> {\n    // (undocumented)\n    render(): JSX.Element;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Panel Header Renderer Interface in TypeScript for FluentUI\nDESCRIPTION: Defines the IPanelHeaderRenderer interface which extends IRenderFunction for rendering custom panel headers in FluentUI Panel components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_163\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface IPanelHeaderRenderer extends IRenderFunction<IPanelProps> {\n    // (undocumented)\n    (props?: IPanelProps, defaultRender?: IPanelHeaderRenderer, headerTextId?: string | undefined): JSX.Element | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Button Control in Swift and Objective-C\nDESCRIPTION: Specifies the naming conventions for the Button control in Swift and Objective-C. This information is crucial for developers working with FluentUI on macOS to correctly reference the control in their code.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/ButtonPage/docs/mac/ButtonImplementation.md#2025-04-20_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nButton\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\nMSFButton\n```\n\n----------------------------------------\n\nTITLE: Importing Render Functions for Button (JavaScript)\nDESCRIPTION: This snippet imports rendering functions for button components within the Fluent UI library to facilitate various interactions within the user interface.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/etc/react-components.api.md#2025-04-20_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { renderCompoundButton_unstable } from '@fluentui/react-button';\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { renderMenuButton_unstable } from '@fluentui/react-button';\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { renderSplitButton_unstable } from '@fluentui/react-button';\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { renderToggleButton_unstable } from '@fluentui/react-button';\n```\n\n----------------------------------------\n\nTITLE: Get Icon Function\nDESCRIPTION: Defines a function, `getIcon`, that retrieves an `IIconRecord` based on the provided icon name. It returns `undefined` if no matching icon is found.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/style-utilities/etc/style-utilities.api.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n\"export function getIcon(name?: string): IIconRecord | undefined;\"\n```\n\n----------------------------------------\n\nTITLE: Importing React SwatchPicker Components\nDESCRIPTION: This snippet demonstrates how to import the Swatch Picker components from the '@fluentui/react-components' package to be used in a React application.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-swatch-picker/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SwatchPicker, ColorSwatch, SwatchPickerOnSelectEventHandler } from '@fluentui/react-components';\n```\n\n----------------------------------------\n\nTITLE: Defining Font Interface in TypeScript\nDESCRIPTION: Interface representing font properties including color, family, shadow, size, and weight. Used for styling text elements in UI components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/chart-utilities/etc/chart-utilities.api.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Font {\n    color: Color;\n    family: string;\n    shadow: string;\n    size: number;\n    weight: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing startSlotTemplate Function in TypeScript\nDESCRIPTION: TypeScript function that creates a template for components with a start slot, capturing the source and parent types.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_56\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport function startSlotTemplate<TSource extends Pick<StartEnd, 'start'> = StartEnd, TParent = any>(options: StartOptions<TSource, TParent>): CaptureType<TSource, TParent>;\n```\n\n----------------------------------------\n\nTITLE: Defining Overlay Component in TypeScript\nDESCRIPTION: Exports the Overlay component as a React FunctionComponent and defines the OverlayBase class extending React.Component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_238\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const Overlay: React_2.FunctionComponent<IOverlayProps>;\n\n// @public (undocumented)\nexport class OverlayBase extends React_2.Component<IOverlayProps, {}> {\n    constructor(props: IOverlayProps);\n    // (undocumented)\n    componentDidMount(): void;\n    // (undocumented)\n    componentWillUnmount(): void;\n    // (undocumented)\n    render(): JSX.Element;\n}\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.94.2\nDESCRIPTION: This snippet captures the adjustment to version 8.94.2 for the @fluentui/react library, noting the continual improvement strategies employed.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/azure-themes/CHANGELOG.md#2025-04-20_snippet_25\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.94.2 ([PR #24663](https://github.com/microsoft/fluentui/pull/24663) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Standard React Context Usage Example\nDESCRIPTION: Demonstrates the traditional React.useContext() approach showing why it leads to unnecessary re-renders.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/context-selector-tearing.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction ListItem(props) {\n  // 👎 Re-render on every context change\n  const activeValue = React.useContext(ListValueContext);\n  const isActive = activeValue === props.value;\n\n  return (\n    <div>\n      {props.value}, isActive: {isActive.toString()}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useAnnounce Hook in TypeScript\nDESCRIPTION: TypeScript function implementation for the useAnnounce hook that returns the announce context value. Provides both standard and unstable exports.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-shared-contexts/library/etc/react-shared-contexts.api.md#2025-04-20_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nfunction useAnnounce(): AnnounceContextValue;\nexport { useAnnounce }\nexport { useAnnounce as useAnnounce_unstable }\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-docsite-components to v8.7.15\nDESCRIPTION: This patch records the version bump of '@fluentui/react-docsite-components' to 8.7.15, ensuring documentation remains up-to-date.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/theming-designer/CHANGELOG.md#2025-04-20_snippet_33\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react-docsite-components to v8.7.15 ([PR #23002](https://github.com/microsoft/fluentui/pull/23002) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Defining IComboBoxOptionStyles Interface\nDESCRIPTION: Defines the `IComboBoxOptionStyles` interface, extending `IButtonStyles`. It includes properties for styling the option text wrapper and the option text.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_68\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IComboBoxOptionStyles extends IButtonStyles {\n    optionText: IStyle;\n    optionTextWrapper: IStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.113.1\nDESCRIPTION: This entry updates the @fluentui/react library to version 8.113.1 with bug fixes and optimizations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluent2-theme/CHANGELOG.md#2025-04-20_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.113.1 ([PR #30061](https://github.com/microsoft/fluentui/pull/30061) by beachball)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/set-version to v8.2.13 ([PR #30061](https://github.com/microsoft/fluentui/pull/30061) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Importing Rating Components from Fluent UI\nDESCRIPTION: Demonstrates two methods of importing Rating and RatingDisplay components from Fluent UI libraries, providing flexible import options for developers\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-rating/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// From @fluentui/react-components\nimport { Rating, RatingDisplay } from '@fluentui/react-components';\n\n// Directly from @fluentui/react-rating\nimport { Rating, RatingDisplay } from '@fluentui/react-rating';\n```\n\n----------------------------------------\n\nTITLE: Implementing Snackbar in Kotlin for FluentUI Android\nDESCRIPTION: This snippet shows the location of the Snackbar implementation in the FluentUI Android library. It is written in Kotlin and can be found in the specified GitHub repository.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/SnackbarPage/docs/android/SnackbarImplementation.md#2025-04-20_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nhttps://github.com/microsoft/fluentui-android/blob/master/FluentUI/src/main/java/com/microsoft/fluentui/snackbar/Snackbar.kt\n```\n\n----------------------------------------\n\nTITLE: Tag Picker Option Render Function\nDESCRIPTION: This is the render function for the TagPickerOption component. It takes the state and renders the option element within the TagPicker list.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const renderTagPickerOption_unstable: (state: TagPickerOptionState) => JSX.Element;\"\n```\n\n----------------------------------------\n\nTITLE: Defining FluentUI Button Styles in XML\nDESCRIPTION: These are the style names used for FluentUI Buttons in Android XML layouts. They define the appearance and behavior of standard and borderless buttons.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/ButtonPage/docs/android/ButtonImplementation.md#2025-04-20_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\nWidget.FluentUI.Button\n\nWidget.FluentUI.Button.Borderless\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components and StrokeWidths for FluentUI Theme Documentation in JavaScript\nDESCRIPTION: Imports the necessary components from Storybook and the StrokeWidths component to create a documentation page for FluentUI stroke width theme tokens.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-theme/stories/src/Theme/strokeWidths/index.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Canvas } from '@storybook/addon-docs';\nimport { StrokeWidths } from './ThemeStrokeWidths.stories';\n```\n\n----------------------------------------\n\nTITLE: Preparing Diff Report for CI - Shell\nDESCRIPTION: This command aggregates the visual regression reports from all projects within a monorepo context that utilize the assert command, generating a consolidated report in a specified output directory. This is particularly useful for CI processes that require an overview of visual discrepancies across multiple projects.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/visual-regression-assert/README.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nvisual-regression-assert report --outputPath dist/vrt\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entries\nDESCRIPTION: Series of changelog entries documenting version updates, dependency bumps, and bug fixes for the FluentUI React Badge component\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_46\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.2.22]\nThu, 18 Jan 2024 14:25:03 GMT\n- Bump @fluentui/react-jsx-runtime to v9.0.27\n- Bump @fluentui/react-shared-contexts to v9.14.0\n- Bump @fluentui/react-utilities to v9.16.1\n\n## [9.2.21]\nWed, 17 Jan 2024 16:18:50 GMT\n- Bump @fluentui/react-jsx-runtime to v9.0.26\n- Bump @fluentui/react-utilities to v9.16.0\n```\n\n----------------------------------------\n\nTITLE: Overriding Transition Animations in Fluent UI Components\nDESCRIPTION: Demonstrates how to override motion settings in Fluent UI Drawable components using CSS classes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/component-transitions-on-mount-or-unmount.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\nimport { Drawer } from '@fluentui/react-drawer';\nimport { makeStyles } from '@fluentui/react-components';\n\nconst useStyles = makeStyles({\n  customDuration: {\n    transitionDuration: '500ms',\n  },\n});\n\nexport const CustomDuration = () => {\n  const styles = useStyles();\n\n  return <Drawer className={styles.customDuration} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Label Implementation - FluentUI v0\nDESCRIPTION: Example showing basic usage of Label component in FluentUI Northstar (v0) using the content prop to display text.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Label.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { Label } from '@fluentui/react-northstar';\n\nconst LabelV0BasicExample = () => {\n  return <Label content=\"You have 23 emails\" />;\n};\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-docsite-components to v8.7.21\nDESCRIPTION: This entry documents the increment of '@fluentui/react-docsite-components' to version 8.7.21, ensuring the documentation remains current.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/theming-designer/CHANGELOG.md#2025-04-20_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react-docsite-components to v8.7.21 ([PR #23127](https://github.com/microsoft/fluentui/pull/23127) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Tag Picker Render Function\nDESCRIPTION: This is the render function for the TagPicker component. It takes the state and context values of the TagPicker and renders the JSX element.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const renderTagPicker_unstable: (state: TagPickerState, contexts: TagPickerContextValues) => JSX.Element;\"\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definitions for Tabster Core Types\nDESCRIPTION: Core interface definitions for Tabster including UncontrolledAPI, UncontrolledOnElement, and UncontrolledProps for managing uncontrolled focus behaviors.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tabster/etc/react-tabster.api.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ninterface UncontrolledAPI {\n    isUncontrolledCompletely(element: HTMLElement, completely: boolean): boolean;\n}\n\ninterface UncontrolledOnElement {\n    uncontrolled: UncontrolledProps;\n}\n\ninterface UncontrolledProps {\n    completely?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Carousel in react-northstar\nDESCRIPTION: The react-northstar implementation uses a single Carousel component with items and navigation props for configuration. The navigation items are mapped from carouselItems array.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-carousel/library/docs/Migration.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Carousel\n  navigation={{\n    items: carouselItems.map((item, index) => ({\n      key: item.id,\n    })),\n  }}\n  items={carouselItems}\n/>\n```\n\n----------------------------------------\n\nTITLE: WindowContext\nDESCRIPTION: Defines a React context called `WindowContext` that holds the `WindowProviderProps`. This context is used to provide the window object to the component tree.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-window-provider/etc/react-window-provider.api.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const WindowContext: React_2.Context<WindowProviderProps>;\n```\n\n----------------------------------------\n\nTITLE: Creating Style Class Names Object for StandardTree Class\nDESCRIPTION: Creates a style class names object that provides access to class names for different elements of the tree chart. This object is used by the parent class to style the links, rectangle nodes, and text elements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/src/components/TreeChart/TreeChart.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst styleClassNames = {\n  link: this._classNames.link,\n  rectNode: this._classNames.rectNode,\n  rectText: this._classNames.rectText,\n};\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-docsite-components to v8.7.13\nDESCRIPTION: This note captures the upgrade of '@fluentui/react-docsite-components' to version 8.7.13, improving the documentation tools available.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/theming-designer/CHANGELOG.md#2025-04-20_snippet_42\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react-docsite-components to v8.7.13 ([PR #22812](https://github.com/microsoft/fluentui/pull/22812) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react-switch to version v9.0.0-rc.6\nDESCRIPTION: This snippet details the update for the @fluentui/react-switch component to version v9.0.0-rc.6, ensuring the switch controls are up to date in the Fluent UI component library.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/vr-tests-react-components/CHANGELOG.md#2025-04-20_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react-switch to v9.0.0-rc.6 ([PR #21995](https://github.com/microsoft/fluentui/pull/21995) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Dropdown Component Definition\nDESCRIPTION: This snippet defines the Dropdown component as a ForwardRefComponent, similar to Combobox but with a different visual presentation and interaction pattern.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/library/etc/react-combobox.api.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const Dropdown: ForwardRefComponent<DropdownProps>;\"\n```\n\n----------------------------------------\n\nTITLE: MergeProps Current Usage\nDESCRIPTION: Shows the current use of mergeProps to set default component state.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/simplify-prop-merging.md#2025-04-20_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nconst state = mergeProps(\n  {\n    ref: resolvedRef,\n    as: 'button',\n    icon: { as: 'span' },\n    content: { as: 'span', children: props.children },\n    loader: { as: Loader, role: 'presentation' },\n  },\n  defaultProps,\n  resolveShorthandProps(props, buttonShorthandProps),\n);\n```\n\n----------------------------------------\n\nTITLE: Option 1: Direct Status Shorthand - JSX/React\nDESCRIPTION: Current implementation where badge shorthand directly maps to PresenceBadge status prop. Simple but non-standard approach that hard-codes PresenceBadge usage.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/components/avatar-badge-shorthand.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Avatar badge=\"away\" />\n```\n\n----------------------------------------\n\nTITLE: Updating project.json for Preview Packages\nDESCRIPTION: Diff showing how to update the project.json file when converting a package to use the preview naming convention.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/new-release-process-v9-packages.md#2025-04-20_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n{\n- \"name\": \"@fluentui/react-control\",\n+ \"name\": \"@fluentui/react-control-preview\",\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Windows High Contrast Mode Detection with CSS Media Queries\nDESCRIPTION: CSS media queries to detect Windows high contrast mode settings and apply appropriate styles based on the color scheme preference. Uses forced-colors and prefers-color-scheme media queries to handle both light and dark high contrast themes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/high-contrast-theme.md#2025-04-20_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@media (forced-colors: active) {\n  /* HC is enabled in Windows */\n\n  @media (prefers-color-scheme: light) {\n    /* The HC theme is dark on light */\n  }\n\n  @media (prefers-color-scheme: dark) {\n    /* The HC theme is light on dark */\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Fluent UI Library after Changes\nDESCRIPTION: Commands to rebuild the Fluent UI library after making changes, ensuring they are picked up by the linked application.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/using-local-unpublished-version-of-the-lib-with-a-local-React-app.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ cd fluentui\n$ yarn nx run react:build\n```\n\n----------------------------------------\n\nTITLE: Slider Component Composition Example\nDESCRIPTION: Example of composing a custom slider component using BaseSlider implementation with react-texture. Shows how to customize tokens, styles, and slots.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Slider.md#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst FooSlider = BaseSlider.compose({\n  tokens: {},\n  styles: {},\n  slots: {}\n});\n\nrender() {\n  <FooSlider min={-100} max={100} centerValue={0}>\n}\n```\n\n----------------------------------------\n\nTITLE: Importing v9 Slider Examples (Raw)\nDESCRIPTION: This snippet imports the raw code of the v9 Slider examples using `raw-loader`.  This enables the Storybook documentation to display the code directly.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Slider/Slider.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"import v9Demo from '!!raw-loader!./Sliderv9Examples.stories.tsx';\"\n```\n\n----------------------------------------\n\nTITLE: Migrating Status Prop for Avatar in Fluent UI\nDESCRIPTION: Demonstrates how to migrate the status prop to the new badge prop with simplified status indicators in the Avatar component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Avatar.stories.mdx#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Avatar } from '@fluentui/react-northstar';\nconst Component = () => (\n  <Avatar\n    status={{\n      color: 'green',\n      icon: <AcceptIcon />,\n      title: 'Available',\n    }}\n  />\n);\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Avatar } from '@fluentui/react-components';\nconst Component = () => (\n  <Avatar\n    badge={{\n      status: 'available',\n    }}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Migrating Link and Href Props in React TSX\nDESCRIPTION: Demonstrates how to migrate Text components with 'link' and 'href' props to use the Link component in v9.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Text.stories.mdx#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from '@fluentui/react-northstar';\nconst Component = () => <Text link href=\"#\" target=\"_blank\" content=\"Link somewhere\" />;\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from '@fluentui/react-components';\nconst Component = () => (\n  <Link href=\"#\" target=\"_blank\">\n    Link somewhere\n  </Link>\n);\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.96.1\nDESCRIPTION: This entry summarizes the update to version 8.96.1 of the @fluentui/react package, reinforcing ongoing support and improvements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/azure-themes/CHANGELOG.md#2025-04-20_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.96.1 ([PR #24871](https://github.com/microsoft/fluentui/pull/24871) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Finding JSX Elements in Code - TypeScript\nDESCRIPTION: This snippet demonstrates how to find JSX elements in a specific file using the ts-morph library, which is essential for validating codemod changes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/codemods/documentation/howTo.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst file = project.getSourceFileOrThrow(DropdownPropsFile);\nconst tags = findJsxTag(file, 'Dropdown');\n```\n\n----------------------------------------\n\nTITLE: Defining ButtonGlobalClassNames Object in TypeScript\nDESCRIPTION: Defines a constant object containing CSS class names for various button elements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const ButtonGlobalClassNames: {\n    msButton: string;\n    msButtonHasMenu: string;\n    msButtonIcon: string;\n    msButtonMenuIcon: string;\n    msButtonLabel: string;\n    msButtonDescription: string;\n    msButtonScreenReaderText: string;\n    msButtonFlexContainer: string;\n    msButtonTextContainer: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Coachmark Props Interface in TypeScript\nDESCRIPTION: Interface defining configuration and interaction properties for a Coachmark component with extensive customization options\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_60\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ICoachmarkProps extends React_2.RefAttributes<HTMLDivElement> {\n    ariaAlertText?: string;\n    target: Target;\n    onDismiss?: (ev?: Event | React_2.MouseEvent<HTMLElement> | React_2.KeyboardEvent<HTMLElement>) => void;\n    // ... multiple configuration and styling properties\n}\n```\n\n----------------------------------------\n\nTITLE: Event Handler Memoization Challenge\nDESCRIPTION: Illustrates potential issues with event handlers when using memoized components with `as` prop\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/as-prop.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Button() {\n  // 💣 Oops, this will break memoized input, should be wrapped with React.useCallback()\n  const handleClick = () => {};\n\n  return <Element onClick={handleClick} />;\n}\n\n<Button as={MemoEl} />;\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.114.1\nDESCRIPTION: This snippet updates the @fluentui/react library to version 8.114.1, focusing on addressing outstanding bugs.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluent2-theme/CHANGELOG.md#2025-04-20_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.114.1 ([PR #30003](https://github.com/microsoft/fluentui/pull/30003) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Running React 18 Integration E2E Tests for Fluent UI v9\nDESCRIPTION: This command runs Cypress against all monorepo v9 *.cy.tsx? files with react18 runtime dependencies pinned.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/react-18-tests-v9/README.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn nx run react-18-tests-v9:e2e:integration\n```\n\n----------------------------------------\n\nTITLE: Defining ISuggestionsStyles Interface in TypeScript\nDESCRIPTION: Specifies the ISuggestionsStyles interface with style properties for various parts of the Suggestions component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_192\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface ISuggestionsStyles {\n    forceResolveButton: IStyle;\n    noSuggestions: IStyle;\n    root: IStyle;\n    searchForMoreButton: IStyle;\n    subComponentStyles: ISuggestionsSubComponentStyles;\n    suggestionsAvailable: IStyle;\n    suggestionsContainer: IStyle;\n    title: IStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tree State Type in TypeScript\nDESCRIPTION: Defines the state structure for Tree components, extending ComponentState with open state and either TreeContextValue or SubtreeContextValue.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tree/library/etc/react-tree.api.md#2025-04-20_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type TreeState = ComponentState<TreeSlots> & {\n    open: boolean;\n} & (TreeContextValue | SubtreeContextValue);\n```\n\n----------------------------------------\n\nTITLE: Linting All Northstar Packages with Yarn\nDESCRIPTION: This command lints all packages tagged as 'react-northstar' using NX. It ensures the code follows the defined linting rules.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/CONTRIBUTING.md#2025-04-20_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nyarn nx run-many -t lint -p tag:react-northstar   # lint all packages\n```\n\n----------------------------------------\n\nTITLE: TagPickerOption State Type\nDESCRIPTION: Defines the state type for the TagPickerOption component. It includes properties from ComponentState and OptionState, specifically 'components' and 'root'.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport type TagPickerOptionState = ComponentState<TagPickerOptionSlots> & Pick<OptionState, 'components' | 'root'>;\"\n```\n\n----------------------------------------\n\nTITLE: mountNodeClassName Prop Implementation - TSX\nDESCRIPTION: Illustrates another discarded solution using a separate mountNodeClassName prop, showing limitations in scalability.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/components/portal-mount-node.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App() {\n  return (\n    <>\n      {/* Current usage, already exists */}\n      <Portal mountNode={element} />\n\n      {/* Proposed usages */}\n      <Portal mountNode={element} mountNodeClassName=\"foo\" />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-docsite-components to v8.7.27\nDESCRIPTION: The update of '@fluentui/react-docsite-components' to version 8.7.27 is documented here, which enhances documentation performance.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/theming-designer/CHANGELOG.md#2025-04-20_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react-docsite-components to v8.7.27 ([PR #23468](https://github.com/microsoft/fluentui/pull/23468) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Style Variables Migration\nDESCRIPTION: Shows how to migrate boolean variables to use makeStyles pattern in v9\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Grid.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// in COMPONENT_NAME.tsx\nimport { Grid } from '@fluentui/react-northstar';\n\nexport const Component = () => <Grid variables={{ isSomething: true }} />;\n\n// in grid-styles.ts\nexport const gridStyles = {\n  root: ({ variables: { isSomething } }) => ({\n    ...(isSomething && { color: 'red' }),\n  }),\n};\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// in COMPONENT_NAME.tsx\nimport { Grid } from '@fluentui/react-migration-v0-v9';\nimport { useStyles } from './COMPONENT_NAME.styles.ts';\n\nexport const Component = () => {\n  const classes = useStyles();\n\n  return <Grid className={classes.root} />;\n};\n\n// in COMPONENT_NAME.styles.ts\nimport { makeStyles } from '@fluentui/react-components';\n\nexport const useStyles = makeStyles({\n  root: { color: 'red' },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating CODEOWNERS File for Preview Packages\nDESCRIPTION: Diff showing how to update the CODEOWNERS file to reflect the new package directory structure.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/new-release-process-v9-packages.md#2025-04-20_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n-packages/react-components/react-control @microsoft/<team-name>\n+packages/react-components/react-control-preview @microsoft/<team-name>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Icon in Fluent UI v9\nDESCRIPTION: Example showing how to use a custom icon created with wrapIcon and bundleIcon in v9, demonstrating both default and filled variants.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Icons.stories.mdx#2025-04-20_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// Default outlined icon\n<MyIcon />\n\n// Filled Icon\n<MyIcon filled />\n```\n\n----------------------------------------\n\nTITLE: Display Generator Help\nDESCRIPTION: Shows the help information for the React component generator using the Nx CLI. This command will output the available options and usage instructions for the generator.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/react-component/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:react-component --help\n```\n\n----------------------------------------\n\nTITLE: Adding coverTarget Modifier\nDESCRIPTION: Introduces a new modifier option to control how the popper element covers its target, providing more flexible positioning strategies\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-positioning/CHANGELOG.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nAdd `coverTarget` modifier and option\n```\n\n----------------------------------------\n\nTITLE: Rendering Checkbox with Wrapper Props in TSX\nDESCRIPTION: Example of rendering a Checkbox with props applied to both the input and the wrapper element using the wrapper slot approach.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/native-element-props.md#2025-04-20_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<Checkbox name=\"foo\" checked className=\"foo\" wrapper={{ className: 'bar' }}>\n  sample\n</Checkbox>\n```\n\n----------------------------------------\n\nTITLE: Updating README.md for Preview Packages\nDESCRIPTION: Diff showing how to update the README.md file when converting a package to use the preview naming convention.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/new-release-process-v9-packages.md#2025-04-20_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n-# @fluentui/react-control-preview\n+# @fluentui/react-control\n```\n\n----------------------------------------\n\nTITLE: Version 9.6.0 Minor Changes\nDESCRIPTION: Changelog entry documenting addition of color tokens and dependency updates.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-migration-v8-v9/library/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.6.0]\n\n### Minor changes\n\n- feat: Add color tokens\n- Bump @fluentui/react-components to v9.46.8\n- Bump @fluentui/react-theme to v9.1.17\n- Bump @fluentui/react-utilities to v9.18.3\n```\n\n----------------------------------------\n\nTITLE: TextArea Public Implementation Example\nDESCRIPTION: Example of the public API for implementing the TextArea component with an id and onChange handler. The component's content is passed as children.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-textarea/library/docs/Spec.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<TextArea id=\"textarea-1\" onChange={(ev, data) => console.log(data.value)}>\n  This is a TextArea\n</TextArea>\n```\n\n----------------------------------------\n\nTITLE: Import Babel Core\nDESCRIPTION: Imports the Babel core library, which is essential for using Babel's functionalities, such as creating plugins and transforming code.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/babel-preset-storybook-full-source/etc/babel-preset-storybook-full-source.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Babel from '@babel/core';\n```\n\n----------------------------------------\n\nTITLE: Exporting TagPicker Option Hook in TypeScript\nDESCRIPTION: Exports a hook for managing the TagPicker option component state. Takes props and a ref to the div element.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_65\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const useTagPickerOption_unstable: (props: TagPickerOptionProps, ref: React_2.Ref<HTMLDivElement>) => TagPickerOptionState;\n```\n\n----------------------------------------\n\nTITLE: Public Usage Example of Text Component in FluentUI\nDESCRIPTION: Demonstrates how to publicly utilize the Text component in FluentUI using JSX syntax. It shows the basic structure for encapsulating text within the component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Text.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Text>Foo bar baz<Text>\n```\n\n----------------------------------------\n\nTITLE: Implementing PersonaChipView in Kotlin for FluentUI Android\nDESCRIPTION: This snippet shows the location of the PersonaChipView source code in the FluentUI Android repository. It is implemented in Kotlin and can be found in the specified GitHub path.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/ChipPage/docs/android/ChipImplementation.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPersonaChipView\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook and BorderRadii Components for Theme Documentation\nDESCRIPTION: Imports the necessary components from Storybook and the BorderRadii component to display border radius theme values in the documentation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-theme/stories/src/Theme/borderRadii/index.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Meta, Canvas } from '@storybook/addon-docs';\nimport { BorderRadii } from './ThemeBorderRadii.stories';\n```\n\n----------------------------------------\n\nTITLE: Option 3: Custom Badge Component - JSX/React\nDESCRIPTION: Flexible approach allowing any badge component to be used. Includes example of both PresenceBadge and custom Badge usage.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/components/avatar-badge-shorthand.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Avatar badge={<PresenceBadge status=\"away\" size=\"smaller\" />} />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Avatar badge={<Badge>DF</Badge>} />\n```\n\n----------------------------------------\n\nTITLE: Creating Vertical and Horizontal Separators with FluentUI in Swift\nDESCRIPTION: Demonstrates how to create separator components in both vertical and horizontal orientations using the FluentUI Separator class. The orientation parameter determines the direction in which the separator will be displayed.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/SeparatorPage/docs/mac/SeparatorUsage.md#2025-04-20_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n// Separators can be created in two orientations\nlet verticalSeparator = Separator(orientation: .vertical)\nlet horizontalSeparator = Separator(orientation: .horizontal)\n```\n\n----------------------------------------\n\nTITLE: CSS Class Definition Example\nDESCRIPTION: Demonstrates how CSS class definitions work with makeStyles() and class conflicts\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/no-css-shorthands-in-make-styles.md#2025-04-20_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.a {\n  background-color: red;\n}\n.b {\n  background-color: green;\n}\n.c {\n  color: yellow;\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Documentation Site with Yarn\nDESCRIPTION: This command starts the documentation site for Fluent UI. Use this command from the root of the repository to select 'docs' as the site to start.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/CONTRIBUTING.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn start                 # start doc site: choose `docs`\n```\n\n----------------------------------------\n\nTITLE: Media Control Constants in TypeScript\nDESCRIPTION: Defines constants for media control operations like play, pause, volume, and navigation controls.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/keyboard-keys/etc/keyboard-keys.api.md#2025-04-20_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const Play = \"Play\";\nconst Play_2 = 250;\nexport const PlaySpeedDown = \"PlaySpeedDown\";\nexport const PlaySpeedReset = \"PlaySpeedReset\";\nexport const PlaySpeedUp = \"PlaySpeedUp\";\nexport const Power = \"Power\";\nexport const PowerOff = \"PowerOff\";\n```\n\n----------------------------------------\n\nTITLE: Adding Package Entry to PR Deploy Site Configuration\nDESCRIPTION: Shows how to add a new package entry to the siteInfo array in pr-deploy-site.js, including specifying a link to the storybook build, an icon, and a title for the navigation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/pr-deploy-site/README.md#2025-04-20_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n```diff\nvar siteInfo = [\n  {...},\n  {...},\n+  {\n+    package: '@fluentui/react-clippy',\n+    link: './react-clippy/storybook/index.html',\n+    icon: /* icon name you chose above */,\n+    title: 'A clippy is back. this time packaged!',\n+  },\n]\n```\n```\n\n----------------------------------------\n\nTITLE: Defining FluentUI BottomNavigation Styles in XML\nDESCRIPTION: These are the style names used for FluentUI BottomNavigation widgets in Android XML layouts. They define the appearance and behavior of the navigation components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/BottomNavigationPage/docs/android/BottomNavigationImplementation.md#2025-04-20_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\nWidget.FluentUI.BottomNavigation\n```\n\nLANGUAGE: XML\nCODE:\n```\nWidget.FluentUI.BottomNavigation.Unlabeled\n```\n\n----------------------------------------\n\nTITLE: Dry Run Generator\nDESCRIPTION: Executes the React component generator in dry-run mode. This allows you to preview the files that would be generated without actually writing them to disk, useful for testing configurations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/react-component/README.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:react-component --dry-run\n```\n\n----------------------------------------\n\nTITLE: Defining Spinner HTML Structure\nDESCRIPTION: The HTML structure of the Spinner component includes a root span element containing a label and an SVG element for animation. The Spinner is visually represented with circles that indicate loading status.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-spinner/library/docs/Spec.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"fui-Spinner\">\n  <!-- Label for Spinner -->\n  <span className=\"fui-Spinner__label\">Loading...</span>\n  <span className=\"fui-Spinner__spinner\">\n    <!-- Svg that receives the animation. Classnames are used for animation -->\n    <svg role=\"progressbar\" className=\"fui-Spinner__Progressbar\">\n      <circle className=\"fui-Spinner__Track\" />\n      <circle className=\"fui-Spinner__Tail\" />\n    </svg>\n  </span>\n</span>\n```\n\n----------------------------------------\n\nTITLE: Implementing Switch Component Class in TypeScript\nDESCRIPTION: TypeScript class definition for the Switch component that extends BaseCheckbox, providing toggle switch functionality.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_59\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"Switch\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport class Switch extends BaseCheckbox {\n    constructor();\n}\n```\n\n----------------------------------------\n\nTITLE: Generating React Library - Help Command\nDESCRIPTION: This command displays help information for generating a React library using the Fluent UI CLI. It provides guidance on the command structure and options available.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/react-library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:react-library --help\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.99.3\nDESCRIPTION: This snippet details the update of the @fluentui/react package to version 8.99.3. It is part of continuous patching efforts to keep the library up-to-date with the latest features and fixes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/azure-themes/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.99.3 ([PR #25453](https://github.com/microsoft/fluentui/pull/25453) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.96.2\nDESCRIPTION: This snippet highlights the update for the @fluentui/react library to version 8.96.2 as part of continuous development.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/azure-themes/CHANGELOG.md#2025-04-20_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.96.2 ([PR #24900](https://github.com/microsoft/fluentui/pull/24900) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Importing Persona component\nDESCRIPTION: This code snippet demonstrates how to import the Persona component from the '@fluentui/react-components' package. This import statement is necessary to use the Persona component in a React application.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-persona/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Persona } from '@fluentui/react-components';\n```\n\n----------------------------------------\n\nTITLE: Defining Tree Navigation Event Types in TypeScript\nDESCRIPTION: Defines types for tree navigation events and modes, extracting the event type from the TreeNavigationData_unstable type.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tree/library/etc/react-tree.api.md#2025-04-20_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type TreeNavigationEvent_unstable = TreeNavigationData_unstable['event'];\n\nexport type TreeNavigationMode = 'tree' | 'treegrid';\n```\n\n----------------------------------------\n\nTITLE: Skeleton Component Usage (TSX)\nDESCRIPTION: Demonstrates the public usage of the Skeleton component in React. It shows both a simple Skeleton and a Skeleton with child components (Skeleton.Line and Skeleton.Shape).\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Skeleton.md#2025-04-20_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\n\"<Skeleton />\\n\\n<Skeleton>\\n  <Skeleton.Line />\\n  <Skeleton.Shape />\\n</Skeleton>\"\n```\n\n----------------------------------------\n\nTITLE: Defining Fluent UI components manually\nDESCRIPTION: JavaScript code demonstrating how to manually define a Fluent UI component using named imports. This approach gives more control over component registration.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/README.md#2025-04-20_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { ButtonDefinition, FluentDesignSystem } from '@fluentui/web-components';\n\nButtonDefinition.define(FluentDesignSystem.registry);\n```\n\n----------------------------------------\n\nTITLE: Recipe Generator with CLI Prompt\nDESCRIPTION: Executes the recipe-generator workspace plugin with a guided CLI prompt. The generator prompts the user for input to customize the recipe generation process interactively.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/recipe-generator/README.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:recipe-generator\n```\n\n----------------------------------------\n\nTITLE: Updating isHTMLElement Type Support in TypeScript\nDESCRIPTION: Enhancement of the isHTMLElement utility to support broader HTMLElement class types, improving type checking and flexibility in HTML element detection\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-utilities/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Feature: Generalize HTMLElement attribute to unknown type\nfeat: generalize is HTMLElement attribute to unknown\n```\n\n----------------------------------------\n\nTITLE: Date Range Type Enum\nDESCRIPTION: Enumeration defining different types of date ranges, including day, week, work week, and month\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-calendar-compat/library/etc/react-calendar-compat.api.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum DateRangeType {\n    Day = 0,\n    Week = 1,\n    Month = 2,\n    WorkWeek = 3\n}\n```\n\n----------------------------------------\n\nTITLE: Internal Checkbox Component Structure\nDESCRIPTION: Internal implementation structure showing slot composition and prop distribution.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-checkbox/library/docs/Spec.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<slots.root {...slotProps.root}>\n  <slots.input {...slotProps.input} />\n  {state.labelPosition === 'before' && slots.label && <slots.label {...slotProps.label} />}\n  <slots.indicator {...slotProps.indicator} />\n  {state.labelPosition === 'after' && slots.label && <slots.label {...slotProps.label} />}\n</slots.root>\n```\n\n----------------------------------------\n\nTITLE: Creating Contact List with HTML and Markdown\nDESCRIPTION: Template for displaying a list of project contacts using HTML unordered list markup and Markdown-style links with mailto protocol.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/PageTemplates/TemplatePage/docs/default/TemplateContact.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- This file is intended to contain ONLY an unordered list of contacts -->\n\n- [Contact One](mailto://)\n- [Contact Two](mailto://)\n```\n\n----------------------------------------\n\nTITLE: Exporting TagPicker Input Hook in TypeScript\nDESCRIPTION: Exports a hook for managing the TagPicker input component state. Takes props and a ref to the input element.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_61\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const useTagPickerInput_unstable: (propsArg: TagPickerInputProps, ref: React_2.Ref<HTMLInputElement>) => TagPickerInputState;\n```\n\n----------------------------------------\n\nTITLE: Generating React Library - Execute Command\nDESCRIPTION: This command actually generates the React library using the Fluent UI CLI. It creates the necessary files and structure for the library.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/react-library/README.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:react-library\n```\n\n----------------------------------------\n\nTITLE: Importing SpinButton in Fluent UI React\nDESCRIPTION: This snippet demonstrates how to import the SpinButton component from the @fluentui/react-spinbutton package. This import is necessary for using the SpinButton in a React application.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-spinbutton/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { SpinButton } from '@fluentui/react-spinbutton';\n```\n\n----------------------------------------\n\nTITLE: Defining OverridesContextValue_unstable Type in TypeScript\nDESCRIPTION: TypeScript type definition for the overrides context value which configures default appearance for input components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-shared-contexts/library/etc/react-shared-contexts.api.md#2025-04-20_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @internal (undocumented)\nexport type OverridesContextValue_unstable = {\n    inputDefaultAppearance?: 'outline' | 'filled-darker' | 'filled-lighter';\n};\n```\n\n----------------------------------------\n\nTITLE: Defining canUseDOM() Utility Function in TypeScript\nDESCRIPTION: Declares a public utility function that checks if the DOM can be used in the current environment. It returns a boolean value.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-utilities/etc/react-utilities.api.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport function canUseDOM(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Initial Project Structure Example - Shell\nDESCRIPTION: Shows the original folder structure before splitting the library.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/split-library-in-two/README.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n|- react-components/\n|- |- react-text/\n```\n\n----------------------------------------\n\nTITLE: Reworking mergeComponentStyles\nDESCRIPTION: This rework avoids unnecessary merging processes in the mergeComponentStyles function to enhance performance for style applications in components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/CHANGELOG.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nRework `mergeComponentStyles()` to avoid additional merging @layershifter ([#15381](https://github.com/microsoft/fluentui/pull/15381))\n```\n\n----------------------------------------\n\nTITLE: Command to Run Dependency Mismatch Generator\nDESCRIPTION: This shell command demonstrates how to execute the generator using Yarn, which updates the mismatched dependencies in the workspace.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/dependency-mismatch/README.md#2025-04-20_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:dependency-mismatch\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories for React Portal\nDESCRIPTION: Module configuration for including Storybook stories from the FluentUI React Portal package, specifying glob patterns for stories files\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-portal/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-portal/stories/src/**/*.stories.mdx', '../packages/react-components/react-portal/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Motion Component with Factory Function\nDESCRIPTION: Example showing how to use a factory function to create a React component for CSS-based motion, similar to the Web Animations API approach.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/motion-definition-n-apis.md#2025-04-20_snippet_31\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createMotionComponent, fadeEnterSlow } from 'some-pkg';\n\nconst FadeEnterSlow = createMotionComponent(fadeEnterSlow);\n\nfunction MyComponent() {\n  return (\n    <FadeEnterSlow>\n      <div>Hello world!</div>\n    </FadeEnterSlow>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Avatar Component Initials Prop Update\nDESCRIPTION: Demonstrates the change from using getInitials prop to directly setting initials prop in Avatar component\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/docs/MIGRATION-NOTES.md#2025-04-20_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n- <Avatar name={name} getInitials={customGetInitialsFunction} />\n+ <Avatar name={name} initials={customGetInitialsFunction(name)} />\n```\n\n----------------------------------------\n\nTITLE: Adding Default Aria Attributes to Dialog\nDESCRIPTION: A feature that adds default 'aria-labelledby' and 'aria-describedby' attributes to the Dialog component, improving accessibility.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/CHANGELOG.md#2025-04-20_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Dialog component with default aria attributes\n<Dialog\n  header=\"Dialog Title\"\n  content=\"Dialog content\"\n  // aria-labelledby and aria-describedby are automatically added\n/>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating v8 Positioning Configuration\nDESCRIPTION: Examples showing how positioning is configured in FluentUI v8 components using ICalloutProps.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/exposing-popper-options.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Callout\n  {...props} // ICalloutProps interface\n/>\n\n<ContextualMenu\n  calloutProps={calloutProps} // ICalloutProps interface\n  // also can spread calloutProps\n  calloutMaxHeight\n  bounds\n  directionalHintFixed\n/>\n```\n\n----------------------------------------\n\nTITLE: Component Props Interface Definitions\nDESCRIPTION: Interface definitions showing how positioning props should be implemented in components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/exposing-popper-options.md#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PositioningShorthand } from '@fluentui/react-positioning';\n\nexport interface TooltipProps {\n  positioning: PositioningShorthand;\n}\n\nexport interface MenuProps {\n  positioning: PositioningShorthand;\n}\n\nexport interface PopoverProps {\n  positioning: PositioningShorthand;\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Individual Package with Yarn\nDESCRIPTION: This command runs tests for an individual package located under 'packages/fluentui'. It is useful for checking the functionality of a specific package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/CONTRIBUTING.md#2025-04-20_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nyarn test                  # test once\n```\n\n----------------------------------------\n\nTITLE: Applying Theme Tokens in Fluent UI Styles\nDESCRIPTION: Shows how to use theme tokens in style definitions to ensure consistent theming across components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/StylingComponents.stories.mdx#2025-04-20_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { makeStyles, tokens } from '@fluentui/react-components';\n\nconst useStyles = makeStyles({\n  root: { display: 'flex' },\n  rootPrimary: { color: tokens.colorNeutralForeground3 },\n});\n```\n\n----------------------------------------\n\nTITLE: Empty TypeScript Module Declaration\nDESCRIPTION: Empty TypeScript code block indicating no package documentation or exported APIs are present in this module.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/component-selector-preview/library/etc/component-selector-preview.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// (No @packageDocumentation comment for this package)\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Vertical Stack\nDESCRIPTION: Creates a default vertical stack with child components aligned vertically. Demonstrates the standard configuration of a Stack component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-examples/src/react/Stack/docs/StackOverview.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack>\n  <Stack.Item>First Item</Stack.Item>\n  <Stack.Item>Second Item</Stack.Item>\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Defining Component Selection Options in GitHub Issue Template\nDESCRIPTION: Example of how to structure the component selection options in a GitHub issue template for different Fluent UI versions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/shared/build-system/triage-automation.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nComponent:\n - Text\n - Menu\n - Dialog\n - ...\n```\n\n----------------------------------------\n\nTITLE: Positioned Slot Props Interface\nDESCRIPTION: Interface definition for components that use positioning in their slots.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/exposing-popper-options.md#2025-04-20_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PositioningProps } from '@fluentui/react-positioning';\n\nexport interface ComponentWithPositionedSlotProps {\n  positionedSlot: React.HTMLAttributes<HTMLElement> & { positioning?: PositioningShorthand };\n}\n```\n\n----------------------------------------\n\nTITLE: Button Icon Size Simplification\nDESCRIPTION: Shows the simplified icon usage in Button component without specific size variants\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/docs/MIGRATION-NOTES.md#2025-04-20_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n- <Button icon={<Add20Filled />} />\n- <Button icon={<Add24Filled />} size=\"large\" />\n+ <Button icon={<AddFilled />} />\n+ <Button icon={<AddFilled />} size=\"large\" />\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server with npm\nDESCRIPTION: Runs the React application in development mode on localhost:3000, with live reloading and lint error reporting\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/cra-template/template/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Defining Rating Component and Enum in TypeScript\nDESCRIPTION: Exports the Rating component, RatingBase, and RatingSize enum.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_243\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const Rating: React_2.FunctionComponent<IRatingProps>;\n\n// @public (undocumented)\nexport const RatingBase: React_2.FunctionComponent<IRatingProps>;\n\n// @public (undocumented)\nexport enum RatingSize {\n    // (undocumented)\n    Large = 1,\n    // (undocumented)\n    Small = 0\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Proposed Component Composition\nDESCRIPTION: Demonstrates an alternative approach to component composition instead of using `as` prop\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/as-prop.md#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction LinkButton(props: ButtonProps & LinkProps) {\n  // ⚠️ \"components\" are not support in hooks API yet, this will be covered in a separate RFC\n  const { state, render } = useButton({\n    components: { root: Link },\n  });\n\n  return render(state);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ITagItemStyleProps Type in TypeScript\nDESCRIPTION: Defines the ITagItemStyleProps type with required and optional properties for styling tag items.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_202\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport type ITagItemStyleProps = Required<Pick<ITagItemProps, 'theme'>> & Pick<ITagItemProps, 'className' | 'selected' | 'disabled'> & {};\n```\n\n----------------------------------------\n\nTITLE: Cypress Assertion Examples in JavaScript\nDESCRIPTION: Examples of common Cypress assertions using Chai-style syntax with retry-ability built in.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/e2e-testing-with-cypress.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('#greeting').should('have.text', 'hello world');\ncy.contains('hello world').should('exist');\ncy.get('li.selected').should('have.length', 3);\ncy.focused().should('have.text', 'click me');\n```\n\n----------------------------------------\n\nTITLE: Linting Once in an Individual Package\nDESCRIPTION: This command runs the linter once on the code within the specified individual package to help catch code style issues.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/CONTRIBUTING.md#2025-04-20_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nyarn lint                  # lint once\n```\n\n----------------------------------------\n\nTITLE: Escaping Special Characters in TSDoc Comments\nDESCRIPTION: Shows how to properly escape special characters that have meaning in TSDoc, such as >, {, and @.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/api-docs/README.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Comment about `>` and `{`.\n * As of version \\>= 1.0.0.\n */\n```\n\n----------------------------------------\n\nTITLE: Navigation Components Reference\nDESCRIPTION: Reference documentation for core navigation components in FluentUI Android: AppBarLayout, Toolbar, and Searchbar. Links to implementations and demo code.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/NavBarPage/docs/android/NavBarImplementation.md#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAppBarLayout\\nToolbar\\nSearchbar\n```\n\n----------------------------------------\n\nTITLE: Compat Package Release Flow Diagram\nDESCRIPTION: Mermaid flowchart showing the release process for compat Fluent UI packages with unique versioning\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/prepare-initial-release/README.md#2025-04-20_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TB\n\nsubgraph IRP[1st release preparation]\nGP(nx prepare-initial-release --phase=compat)\nRP(released to npm as v0.0.1)\nGP--ci:npm publish-->RP\nend\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Badges in Markdown\nDESCRIPTION: This code snippet shows how to display various project badges using Markdown syntax. It includes badges for build status, GitHub contributors, top language, and Twitter followers.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Build Status](https://img.shields.io/azure-devops/build/uifabric/fabricpublic/164/master?style=flat-square)](https://dev.azure.com/uifabric/fabricpublic/_build?definitionId=164) ![GitHub contributors](https://img.shields.io/github/contributors/microsoft/fluentui?style=flat-square) ![GitHub top language](https://img.shields.io/github/languages/top/microsoft/fluentui?style=flat-square) [![Twitter Follow](https://img.shields.io/twitter/follow/fluentui?logo=x&style=flat-square)](https://twitter.com/FluentUI?ref_src=twsrc%5Etfw)\n```\n\n----------------------------------------\n\nTITLE: Converting Menu with TabList Behavior - Before Migration\nDESCRIPTION: Original implementation using Menu component with tabListBehavior in FluentUI v0\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/TabList.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Menu, tabListBehavior } from \"@fluentui/react-northstar\";\nconst Component = ({items}) => (\n  <Menu\n    defaultActiveIndex={0}\n    items={items}\n    primary\n    underlined\n    accessibility={tabListBehavior}\n  />;\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing External Slot Properties in TypeScript\nDESCRIPTION: This TypeScript snippet illustrates how to access external properties of a slot within a Fluent UI component. By using shorthands like `props.button`, the snippet demonstrates the way external properties are retrieved and subsequently passed to slots as needed.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/slot-children-render-function.md#2025-04-20_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport const AccordionHeader: ForwardRefComponent<AccordionHeaderProps> = React.forwardRef((props, ref) => {\n  props.button; // this is the button shorthand\n});\n```\n\n----------------------------------------\n\nTITLE: Semantic UI Button DOM Structure in HTML\nDESCRIPTION: Example DOM structure for a Semantic UI button component showing how icons are implemented using an i element with icon classes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Button.md#2025-04-20_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<button class=\"ui facebook button\">\n  <i aria-hidden=\"true\" class=\"facebook icon\">::before</i>\n  Facebook\n</button>\n```\n\n----------------------------------------\n\nTITLE: HTML Class Usage Examples\nDESCRIPTION: Shows correct and incorrect usage of CSS classes with potential conflicts\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/no-css-shorthands-in-make-styles.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Case 1: ❌ Wrong usage -->\n<div class=\"a b c\">Hello world!</div>\n<!-- Case 2: ✅ Correct usage -->\n<div class=\"a c\">Hello world!</div>\n<div class=\"b c\">Hello world!</div>\n```\n\n----------------------------------------\n\nTITLE: Getting Git hash for React component webpack configuration\nDESCRIPTION: A function that retrieves the current Git commit hash for labeling builds with a unique identifier. Uses child_process to execute Git commands and extract the commit hash.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-teaching-popover/stories/src/TeachingPopover/TeachingPopoverDescription.md#2025-04-20_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst execSync = require('child_process').execSync;\nfunction getGitHash() {\n  let stdout = '';\n  try {\n    stdout = execSync('git rev-parse --short HEAD', {\n      cwd: process.cwd(),\n      stdio: ['pipe', 'pipe', 'ignore'],\n    }).toString();\n  } catch (e) {\n    // We're probably not in a git repo at all, maybe in a CI harness?\n    stdout = '';\n  }\n\n  // Clean stdout from command execution\n  const cleanedHash = stdout.trim().replace(/\\r?\\n|\\r/g, '');\n  return cleanedHash;\n}\n```\n\n----------------------------------------\n\nTITLE: TV Control Constants in TypeScript\nDESCRIPTION: Constants for TV-specific controls including input selection, channels, and TV functions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/keyboard-keys/etc/keyboard-keys.api.md#2025-04-20_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const TV = \"TV\";\nexport const TVInput = \"TVInput\";\nexport const TVInputHDMI1 = \"TVInputHDMI1\";\nexport const TVInputHDMI2 = \"TVInputHDMI2\";\nexport const TVPower = \"TVPower\";\nexport const TVTimer = \"TVTimer\";\n```\n\n----------------------------------------\n\nTITLE: Time Constants Object\nDESCRIPTION: Object containing various time-related constants for milliseconds, minutes, hours, and other time calculations\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-calendar-compat/library/etc/react-calendar-compat.api.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport const TimeConstants: {\n    MillisecondsInOneDay: number;\n    MillisecondsIn1Sec: number;\n    MillisecondsIn1Min: number;\n    // ... other time-related constants\n}\n```\n\n----------------------------------------\n\nTITLE: Listbox Props Definition\nDESCRIPTION: This snippet defines the props for the Listbox component, including SelectionProps and a disableAutoFocus property.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/library/etc/react-combobox.api.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport type ListboxProps = ComponentProps<ListboxSlots> & SelectionProps & {\n    disableAutoFocus?: boolean;\n};\"\n```\n\n----------------------------------------\n\nTITLE: Defining ISuggestionsStyleProps Interface in TypeScript\nDESCRIPTION: Defines the ISuggestionsStyleProps interface which extends ISuggestionsProps with additional style-related properties.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_191\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type ISuggestionsStyleProps = Required<Pick<ISuggestionsProps<any>, 'theme'>> & Pick<ISuggestionsProps<any>, 'className' | 'suggestionsClassName'> & {\n    forceResolveButtonSelected?: boolean;\n    searchForMoreButtonSelected?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Referencing ThemeProvider Package in FluentUI React\nDESCRIPTION: Example of the ThemeProvider package reference in FluentUI React v8. This utility is used to apply themes to components and component trees.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-examples/src/react/ThemeProvider/docs/ThemeProviderOverview.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n@fluentui/react\n```\n\n----------------------------------------\n\nTITLE: Importing Meta Component from Storybook\nDESCRIPTION: Import statement for the Meta component from Storybook's addon-docs to set up documentation page.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/BrowserSupportMatrix.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs';\n\n<Meta title=\"Concepts/Developer/Browser Support Matrix\" />\n```\n\n----------------------------------------\n\nTITLE: Extending Environment Interface Definition\nDESCRIPTION: Example showing how to extend the ExtendedProcessEnv interface with new environment variables.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/typings/environment/README.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ExtendedProcessEnv {\n  NODE_ENV?: 'production' | 'development' | 'test';\n  CI?: string;\n  TF_BUILD?: string;\n+ NX_ENV?: string\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Content Prop in React TSX\nDESCRIPTION: Shows how to migrate the 'content' prop to JSX children when using the Text component in v9.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Text.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from '@fluentui/react-northstar';\nconst Component = () => <Text content=\"hi\" />;\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StyledText } from '@fluentui/react-migration-v0-v9';\nconst Component = () => <StyledText>hi</StyledText>;\n```\n\n----------------------------------------\n\nTITLE: Rendering Font Size Component in Storybook Canvas\nDESCRIPTION: This JSX snippet renders the FontSize component within a Storybook Canvas, hiding the source code.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-theme/stories/src/Theme/fonts/index.stories.mdx#2025-04-20_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas withSource=\"none\">\n  <FontSize />\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Installing FluentUI React Charting Package with npm\nDESCRIPTION: Command to install the FluentUI React Charting library from npm, which is required before using any charting components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnpm install @fluentui/react-charting\n```\n\n----------------------------------------\n\nTITLE: Rendering Font Family Component in Storybook Canvas\nDESCRIPTION: This JSX snippet renders the FontFamily component within a Storybook Canvas, hiding the source code.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-theme/stories/src/Theme/fonts/index.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas withSource=\"none\">\n  <FontFamily />\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Updating Slot Type Definitions in TypeScript\nDESCRIPTION: Shows migration from IntrinsicShorthandProps and ObjectShorthandProps to the new unified Slot type system for component slots\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/docs/MIGRATION-NOTES.md#2025-04-20_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\ntype MyComponentSlots = {\n-  root?: IntrinsicShorthandProps<'div'>;\n-  slotA?: IntrinsicShorthandProps<'label', 'span' | 'div'>;\n-  slotB?: ObjectShorthandProps<ButtonProps>;\n+  root?: Slot<'div'>;\n+  slotA?: Slot<'label', 'span' | 'div'>;\n+  slotB?: Slot<typeof Button>;\n};\n```\n\n----------------------------------------\n\nTITLE: Numeric Key Code Constants\nDESCRIPTION: Defines numeric key code constants for various keyboard keys including letters, numbers and special characters.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/keyboard-keys/etc/keyboard-keys.api.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst ForwardSlash = 191;\nconst G = 71;\nconst g = 71;\nconst H = 72;\nconst h = 72;\nconst Home_2 = 36;\n// Additional constants...\n```\n\n----------------------------------------\n\nTITLE: Changelog Version Entry 9.0.1\nDESCRIPTION: Changelog entry documenting dependency updates for version 9.0.1 of @fluentui/react-charts.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charts/library/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.0.1]\n\nThu, 27 Mar 2025 21:12:51 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-charts_v9.0.0..@fluentui/react-charts_v9.0.1)\n```\n\n----------------------------------------\n\nTITLE: Option 4: Status Prop Addition - JSX/React\nDESCRIPTION: Alternative approach adding a dedicated status prop to Avatar component while maintaining badge slot flexibility.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/components/avatar-badge-shorthand.md#2025-04-20_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Avatar status=\"away\" />\n```\n\n----------------------------------------\n\nTITLE: Importing v8 Slider Examples\nDESCRIPTION: This snippet imports the V8 Slider examples components to be rendered in the Storybook story.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Slider/Slider.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\"import {\\n  V8BasicExample,\\n  V8SnappingExample,\\n  V8ControlledExample,\\n  V8FormattedValueExample,\\n} from './Sliderv8Examples.stories';\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for v9.0.0-alpha.0\nDESCRIPTION: Initial changelog entry showing first version with conformance update.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-field/library/CHANGELOG.md#2025-04-20_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.0.0-alpha.0](https://github.com/microsoft/fluentui/tree/@fluentui/react-field_v9.0.0-alpha.0)\n\nWed, 03 Aug 2022 16:04:10 GMT\n```\n\n----------------------------------------\n\nTITLE: Suggestions State Interface in TypeScript\nDESCRIPTION: Interface for tracking the state of suggestion selections, including the type of selected action within the suggestions component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_190\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface ISuggestionsState {\n    // (undocumented)\n    selectedActionType: SuggestionActionType;\n}\n```\n\n----------------------------------------\n\nTITLE: TimePicker Selection Example with Keyboard Input\nDESCRIPTION: Demonstration of keyboard interaction in TimePicker, showing the Enter key being used for selection\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-timepicker-compat/library/docs/Spec.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n<kbd>Enter</kbd>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating PersonaChipView Usage in FluentUI Android Demo\nDESCRIPTION: This snippet indicates the location of a demo activity that showcases the usage of PersonaChipView. The demo can be found in the FluentUI.Demo module of the FluentUI Android repository.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/ChipPage/docs/android/ChipImplementation.md#2025-04-20_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nPersonaChipView demo activity\n```\n\n----------------------------------------\n\nTITLE: Listbox Component Definition\nDESCRIPTION: This snippet defines the Listbox component as a ForwardRefComponent. Listbox is used to render the options for Combobox and Dropdown components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/library/etc/react-combobox.api.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const Listbox: ForwardRefComponent<ListboxProps>;\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Compatibility Host for Fluent UI v9\nDESCRIPTION: Demonstrates how to use the compatibility host with Fluent UI providers across different versions\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/portal-compat.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<V9Provider>\n  <CompatHostV9>\n    <V0Provider>{/* Components from v9 or v0... */}</V0Provider>\n  </CompatHostV9>\n</V9Provider>\n```\n\n----------------------------------------\n\nTITLE: Updating React peer dependency in Fluent UI Charting\nDESCRIPTION: Updated peerDependencies to allow React 17, though full validation with React 17 is still pending.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/CHANGELOG.md#2025-04-20_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n// package.json\n\"peerDependencies\": {\n  \"react\": \">=16.8.0 <18.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: React Element as Shorthand Prop\nDESCRIPTION: Shows how React Elements can be passed directly to component slots using shorthand syntax\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/docs/src/pages/ShorthandProps.mdx#2025-04-20_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <Popup content={<em>Awesome Popup!</em>} />\n  <Popup content={{ content: <em>Awesome Popup!</em> }} />\n</>\n```\n\n----------------------------------------\n\nTITLE: Defining PieDataTitle Interface in TypeScript\nDESCRIPTION: The PieDataTitle interface extends DataTitle to include specific attributes for pie chart titles, mainly focusing on font characteristics for better styling and customization.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/chart-utilities/etc/chart-utilities.api.md#2025-04-20_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface PieDataTitle extends Pick<DataTitle, 'text' | 'position'> {\n    // (undocumented)\n    font: Partial<PieFont>;\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting TagPicker Control Styles Hook in TypeScript\nDESCRIPTION: Exports a hook for applying styles to the TagPicker control component based on its current state.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_57\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const useTagPickerControlStyles_unstable: (state: TagPickerControlState) => TagPickerControlState;\n```\n\n----------------------------------------\n\nTITLE: TextInput Component Class Definition in TypeScript\nDESCRIPTION: Defines the TextInput component class extending BaseTextInput with appearance and control size properties.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_57\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class TextInput extends BaseTextInput {\n    appearance?: TextInputAppearance;\n    controlSize?: TextInputControlSize;\n}\n```\n\n----------------------------------------\n\nTITLE: Style Utility Export Declarations in TypeScript\nDESCRIPTION: Export declarations for various style-related interfaces used throughout the FluentUI component library for consistent styling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_184\n\nLANGUAGE: typescript\nCODE:\n```\nexport { IStyle }\n\nexport { IStyleFunction }\n\nexport { IStyleFunctionOrObject }\n\nexport { IStyleSet }\n\nexport { IStyleSheetConfig }\n```\n\n----------------------------------------\n\nTITLE: Virtual Parent Assignment\nDESCRIPTION: Demonstrates how to set a virtual parent for handling complex DOM interactions across nested Portal components\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-portal/library/README.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst parent = document.getElementById('parent');\nconst child = document.getElementById('child');\n\nchild._virtual.parent = parent;\n```\n\n----------------------------------------\n\nTITLE: TagPickerOptionGroup Component Definition\nDESCRIPTION: Defines the TagPickerOptionGroup React component as a ForwardRefComponent, indicating that it's a component that accepts a ref and forwards it to a child element.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const TagPickerOptionGroup: ForwardRefComponent<TagPickerOptionGroupProps>;\"\n```\n\n----------------------------------------\n\nTITLE: Exporting TagPicker List Styles Hook in TypeScript\nDESCRIPTION: Exports a hook for applying styles to the TagPicker list component based on its current state.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_64\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const useTagPickerListStyles_unstable: (state: TagPickerListState) => TagPickerListState;\n```\n\n----------------------------------------\n\nTITLE: Referencing NotificationView in Swift and Objective-C\nDESCRIPTION: This snippet demonstrates how to reference the NotificationView control in both Swift and Objective-C. It's important to use the correct class name based on the language being used.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/MessageBarPage/docs/ios/MessageBarImplementation.md#2025-04-20_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nNotificationView\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\nMSFNotificationView\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format\nDESCRIPTION: Standard format for documenting changes with PR references and author attribution\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/library/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Changes\n\n- feat(Menu): Use react-icons for checkmarks and stories ([PR #19313](https://github.com/microsoft/fluentui/pull/19313) by lingfan.gao@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Applying Elevation with CSS Classes\nDESCRIPTION: Demonstrates how to use predefined CSS classes from Fabric Core for elevation effects.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Styles/ElevationPage/docs/web/ElevationImplementation.md#2025-04-20_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"ms-depth-8\"></div>\n```\n\n----------------------------------------\n\nTITLE: Patch Entry Format in Markdown\nDESCRIPTION: Shows the format used for listing package updates and patches\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.96.1 ([PR #24871](https://github.com/microsoft/fluentui/pull/24871) by beachball)\n```\n\n----------------------------------------\n\nTITLE: SearchBox Component Definition (TypeScript)\nDESCRIPTION: Defines the SearchBox component as a ForwardRefComponent, allowing it to be passed a ref. It is a public component in the @fluentui/react-search package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-search/library/etc/react-search.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const SearchBox: ForwardRefComponent<SearchBoxProps>;\n```\n\n----------------------------------------\n\nTITLE: Creating a React TypeScript App with create-react-app\nDESCRIPTION: Command to create a new React TypeScript application using create-react-app.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/using-local-unpublished-version-of-the-lib-with-a-local-React-app.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx create-react-app app --template typescript\n```\n\n----------------------------------------\n\nTITLE: Preparing Initial Release for Preview Phase\nDESCRIPTION: Command to generate files needed for the preview phase of a FluentUI component using the workspace-plugin generator.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/release-cycle.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:prepare-initial-release --project @fluentui/react-one-preview --phase=preview\n```\n\n----------------------------------------\n\nTITLE: Implementing usePortalMountNode Hook in TypeScript\nDESCRIPTION: TypeScript function implementation for the usePortalMountNode hook that returns the portal mount node context value.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-shared-contexts/library/etc/react-shared-contexts.api.md#2025-04-20_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport function usePortalMountNode(): PortalMountNodeContextValue;\n```\n\n----------------------------------------\n\nTITLE: Comparing changes between versions in Markdown\nDESCRIPTION: Markdown syntax used to link to GitHub comparisons between different versions of the package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-avatar/library/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-avatar_v9.2.5..@fluentui/react-avatar_v9.2.6)\n```\n\n----------------------------------------\n\nTITLE: Defining HTML Comment for Fluentui Do's Documentation\nDESCRIPTION: An HTML comment that describes the purpose of the file, indicating it will contain an unordered list of recommended practices.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/PageTemplates/TemplatePage/docs/default/TemplateDos.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- This file is intended to contain an unordered list of Do's -->\n```\n\n----------------------------------------\n\nTITLE: Defining ITextFieldSnapshot Interface in TypeScript\nDESCRIPTION: Specifies the internal ITextFieldSnapshot interface for text field components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_216\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Warning: (ae-internal-missing-underscore) The name \"ITextFieldSnapshot\" should be prefixed with an underscore because the declaration is marked as @internal\n//\n// @internal (undocumented)\nexport interface ITextFieldSnapshot {\n    selection?: [number | null, number | null];\n}\n```\n\n----------------------------------------\n\nTITLE: Vertical Layout for Menu in Fluent UI v0\nDESCRIPTION: Shows how to achieve a vertical layout for the Menu component in Fluent UI v0, which differs from the default horizontal layout.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/library/docs/Spec.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Menu items={items} vertical />\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Meta Information for Border Radii Documentation\nDESCRIPTION: Sets up the Storybook metadata for the Border Radii documentation page, specifying the title and category.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-theme/stories/src/Theme/borderRadii/index.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta title=\"Theme/Border Radii\" />\n```\n\n----------------------------------------\n\nTITLE: Using MenuItemLink for Navigation in FluentUI\nDESCRIPTION: Recommendation to use MenuItemLink component when menu items should navigate to a new page.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/stories/src/Menu/MenuBestPractices.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- Use `MenuItemLink` if the menu item should navigate to a new page\n```\n\n----------------------------------------\n\nTITLE: Setting Order for Stack.Item using make-styles\nDESCRIPTION: This snippet shows how to set the order property for a Stack.Item component using the make-styles approach.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Flex/Flex.StackItem.stories.mdx#2025-04-20_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nmakeStyles({\n  root: {\n    order: 1,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Shrink for Stack.Item using make-styles\nDESCRIPTION: This snippet shows how to disable shrinking for a Stack.Item component using the make-styles approach.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Flex/Flex.StackItem.stories.mdx#2025-04-20_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nmakeStyles({\n  root: {\n    flexShrink: 0,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Project Configuration with Type Check Dependencies\nDESCRIPTION: JSON configuration showing how to set up type-check dependencies in project.json\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/shared/build-system/08-type-checking-perf-improvements.md#2025-04-20_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"targets\": {\n    \"type-check\": {\n      \"dependsOn\": [\n        \"generate-circular-deps-dts\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecating API Items in TypeScript\nDESCRIPTION: Illustrates the correct way to mark an API item as deprecated using the @deprecated tag in TypeScript.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/api-docs/README.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @deprecated Use `foo` instead.\n */\n```\n\n----------------------------------------\n\nTITLE: Implementing useMount Hook in TypeScript\nDESCRIPTION: Definition of the useMount hook, which executes a callback once the component has been mounted.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-hooks/README.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst useMount: (callback: () => void) => void;\n```\n\n----------------------------------------\n\nTITLE: Adding target prop to Provider component\nDESCRIPTION: New feature that allows specifying a document where styles should be rendered.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/CHANGELOG.md#2025-04-20_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nAdd `target` prop on `Provider`, allows to specify a `document` where styles should be renderer\n```\n\n----------------------------------------\n\nTITLE: Change Comparison Links\nDESCRIPTION: Markdown links to compare changes between package versions\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/library/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-menu_v0.8.2..@fluentui/react-menu_v0.8.3)\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-menu_v0.8.1..@fluentui/react-menu_v0.8.2)\n```\n\n----------------------------------------\n\nTITLE: Running React 18 Tests for Fluent UI v9\nDESCRIPTION: This command runs tests for React 18 issues that have been triaged and resolved to prevent regressions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/react-18-tests-v9/README.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# yarn test\n```\n\n----------------------------------------\n\nTITLE: Problematic Style Override Example\nDESCRIPTION: Demonstrates an incorrect way of overriding FluentProvider styles using makeStyles, which can cause RTL compatibility issues\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/provider-style-overrides.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeStyles } from '@fluentui/react-components';\n\nconst useProviderOverrides = makeStyles({\n  provider: {\n    // ⚠️ requires marginRight RTL style\n    marginLeft: '1px',\n  },\n});\n\nconst App = () => {\n  const styles = useProviderOverrides();\n  return <FluentProvider className={styles.provider}>{children}</FluentProvider>;\n};\n```\n\n----------------------------------------\n\nTITLE: Basic RatingItem Component in React\nDESCRIPTION: Illustrates rendering a standalone RatingItem, which is recommended to be used within a Rating or RatingDisplay component\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-rating/library/docs/Spec.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { RatingItem } from '@fluentui/react-components';\n\nfunction App() {\n  return <RatingItem />;\n}\n```\n\n----------------------------------------\n\nTITLE: Enhancing VerticalStackedBarChart in React Charting\nDESCRIPTION: Added support for bar gaps, rounded corners, and line features in VerticalStackedBarChart.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/CHANGELOG.md#2025-04-20_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Example usage:\n<VerticalStackedBarChart barGap={5} roundedCorners={true} lines={...} />\n```\n\n----------------------------------------\n\nTITLE: Import Path Modification Example\nDESCRIPTION: Diff showing how to modify component imports to avoid circular dependencies\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/shared/build-system/08-type-checking-perf-improvements.md#2025-04-20_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n-import {Button} from '@fluentui/react-components'\n+import {Button} from '@fluentui/react-button'\n```\n\n----------------------------------------\n\nTITLE: Running Package Creation Command in FluentUI\nDESCRIPTION: Command to bootstrap a new FluentUI package using the create-package tool. This initiates a prompt for the package name and automatically adds the -preview suffix.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/release-cycle.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn create-package\n\n# triggers standard prompt\n\n? Package name (do NOT include @fluentui prefix):  react-hello\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react-slider to version v9.0.0-beta.11\nDESCRIPTION: This entry outlines the update for the @fluentui/react-slider to version v9.0.0-beta.11, reflecting the ongoing commitment to maintain component performance and reliability.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/vr-tests-react-components/CHANGELOG.md#2025-04-20_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react-slider to v9.0.0-beta.11 ([PR #21995](https://github.com/microsoft/fluentui/pull/21995) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Importing TimePicker Component in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the TimePicker component from the @fluentui/react-timepicker-compat package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-timepicker-compat/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TimePicker } from '@fluentui/react-timepicker-compat';\n```\n\n----------------------------------------\n\nTITLE: DOM Structure of a Fluent UI React Switch - Label After Indicator\nDESCRIPTION: The DOM structure of a Switch component in Fluent UI with the label positioned after the indicator. It visually represents the output on the web page and assists in understanding component hierarchy and CSS styling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-switch/library/docs/Spec.md#2025-04-20_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<div class=\"fui-Switch\">\n  <input class=\"fui-Switch__input\" id=\"switch-1\" role=\"switch\" type=\"checkbox\" />\n  <div aria-hidden=\"true\" class=\"fui-Switch__indicator\">\n    <CircleFilled />\n  </div>\n  <label class=\"fui-Switch__label\" for=\"switch-1\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing Fluent UI React Components\nDESCRIPTION: Example of how to import Fluent UI React components, specifically the PrimaryButton component, in a JavaScript/React file.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Overviews/GetStartedPage/docs/web/GetStartedDevelopExisting.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { PrimaryButton } from '@fluentui/react';\n```\n\n----------------------------------------\n\nTITLE: Disabling Shrink in Stack Items\nDESCRIPTION: This snippet shows how to disable shrinking of Stack items using CSS.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Flex/Flex.Stack.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nmakeStyles({\n  root: {\n    '> *': {\n      flexShrink: 0,\n    }\n  },\n})\n```\n\nLANGUAGE: css\nCODE:\n```\n.flex > * {\n  flex-shrink: 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main Configuration\nDESCRIPTION: Configuration code for adding the export-to-sandbox addon to Storybook's main configuration file.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-storybook-addon-export-to-sandbox/README.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  addons: ['@fluentui/react-storybook-addon-export-to-sandbox'],\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Card Component Usage Before Migration\nDESCRIPTION: Example of how to import and use the Card component from @fluentui/react-northstar before migration.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Card/Card.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Card } from '@fluentui/react-northstar';\nconst Component = () => <Card>Lorem ipsum, dolor sit amet consectetur adipisicing elit.</Card>;\n```\n\n----------------------------------------\n\nTITLE: Resulting Project Structure - Shell\nDESCRIPTION: Demonstrates the final folder structure after splitting into library and stories packages.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/split-library-in-two/README.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n|- react-components/\n|- |- react-text/\n|- |- |- library/\n|- |- |- stories/\n```\n\n----------------------------------------\n\nTITLE: BreadcrumbDivider DOM Structure in HTML\nDESCRIPTION: HTML structure of the BreadcrumbDivider component, showing the SVG icon used as a divider.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-breadcrumb/library/docs/Spec.md#2025-04-20_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n  <li class=\"fui-BreadcrumbDivider\">\n    <svg\n      aria-hidden=\"true\"\n      fill=\"currentColor\"\n      height=\"16\"\n      viewBox=\"0 0 16 16\"\n      width=\"16\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path d=\"M5.65 3.15a.5.5 0 000 .7L9.79 8l-4.14 4.15a.5.5 0 00.7.7l4.5-4.5a.5.5 0 000-.7l-4.5-4.5a.5.5 0 00-.7 0z\" fill=\"currentColor\" />\n    </svg>\n  </li>\n```\n\n----------------------------------------\n\nTITLE: Implementing SSRProvider Component in TypeScript\nDESCRIPTION: A public React component that provides server-side rendering context to child components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-utilities/etc/react-utilities.api.md#2025-04-20_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport const SSRProvider: React_2.FC<{\n    children: React_2.ReactNode;\n}>;\n```\n\n----------------------------------------\n\nTITLE: Callout Position Properties Interface\nDESCRIPTION: Defines positioning properties for callout components, including beak visibility and positioning configurations\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ICalloutPositionProps extends IPositionProps {\n    beakWidth?: number;\n    isBeakVisible?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating to webpack 5 in Fluent UI React Charting\nDESCRIPTION: Updated build configuration to use webpack 5 along with latest typings, loaders and plugins.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/CHANGELOG.md#2025-04-20_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n// webpack.config.js\nmodule.exports = {\n  // Updated webpack 5 configuration\n};\n```\n\n----------------------------------------\n\nTITLE: Bump Packages to Full Release\nDESCRIPTION: Example showing how to bump all vNext packages from beta to full release version.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/version-bump/README.md#2025-04-20_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:version-bump --all --bumpType minor\n```\n\n----------------------------------------\n\nTITLE: Implementing useTimeout Hook in TypeScript\nDESCRIPTION: An internal hook that provides functionality for setting and clearing timeouts.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-utilities/etc/react-utilities.api.md#2025-04-20_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @internal\nexport function useTimeout(): readonly [(fn: () => void, delay?: number | undefined) => number, () => void];\n```\n\n----------------------------------------\n\nTITLE: Installing Fluent UI Web Components with Yarn\nDESCRIPTION: Command to install Fluent UI Web Components as a dependency using Yarn package manager. This installs the beta version of the library.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/README.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @fluentui/web-components@beta\n```\n\n----------------------------------------\n\nTITLE: Setting Shrink for Stack.Item using CSS\nDESCRIPTION: This snippet demonstrates how to set the shrink property for a Stack.Item component using CSS.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Flex/Flex.StackItem.stories.mdx#2025-04-20_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n.flex-item {\n  flex-shrink: 1;\n}\n```\n\n----------------------------------------\n\nTITLE: React Provider Release Comparison\nDESCRIPTION: Markdown link showing comparison between versions of React Provider package\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-provider/library/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-provider_v9.0.0-rc.7..@fluentui/react-provider_v9.0.0-rc.8)\n```\n\n----------------------------------------\n\nTITLE: CSS Feature Query Selector Example\nDESCRIPTION: Example of feature query support added in version 6.9.0 for selectors in merge-styles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/merge-styles/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n@supports (display: grid) { .ms-Grid { display: grid; } }\n```\n\n----------------------------------------\n\nTITLE: Divider Content Prop Migration\nDESCRIPTION: Demonstrates how to migrate the content prop to use JSX children in v9.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Divider.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Divider } from '@fluentui/react-northstar';\nconst Component = () => <Divider content=\"hi\" />;\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Divider } from '@fluentui/react-components';\nconst Component = () => <Divider>hi</Divider>;\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Meta Title\nDESCRIPTION: Sets up the Storybook documentation page title using the Meta component for accessibility scenarios documentation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/AccessibilityScenarios/ListOfScenarios.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Meta title=\"Concepts/Developer/Accessibility/Stories/List of scenarios\" />\n```\n\n----------------------------------------\n\nTITLE: Defining ISwatchColorPickerStyles Interface in TypeScript\nDESCRIPTION: Defines the ISwatchColorPickerStyles interface for styling different parts of the SwatchColorPicker component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_198\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface ISwatchColorPickerStyles {\n    focusedContainer?: IStyle;\n    root: IStyle;\n    tableCell: IStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: Building Documentation with Yarn\nDESCRIPTION: This command generates the documentation bundle using NX. Run this from the root of the repository.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/CONTRIBUTING.md#2025-04-20_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn nx run docs:bundle   # build docs\n```\n\n----------------------------------------\n\nTITLE: Defining Switch Component\nDESCRIPTION: Defines the Switch component class extending BaseCheckbox with associated types and templates.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Switch extends BaseCheckbox {\n    constructor();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ThemeClassNameContextValue_unstable Type in TypeScript\nDESCRIPTION: TypeScript type definition for the theme class name context value which is a string.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-shared-contexts/library/etc/react-shared-contexts.api.md#2025-04-20_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport type ThemeClassNameContextValue_unstable = string;\n```\n\n----------------------------------------\n\nTITLE: Bump All Packages to Beta Version\nDESCRIPTION: Example showing how to bump all vNext packages from alpha to beta version.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/version-bump/README.md#2025-04-20_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:version-bump --all --bumpType prerelease --prereleaseTag beta\n```\n\n----------------------------------------\n\nTITLE: Expected Button Output with as Prop\nDESCRIPTION: This shows the expected output when using the as prop to modify a component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/simplify-prop-merging.md#2025-04-20_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n// Expected Result ✅\n<Button>\n  <Loader as=\"div\" />\n</Button>\n```\n\n----------------------------------------\n\nTITLE: TagPickerGroup Props Type\nDESCRIPTION: Defines the props interface for the TagPickerGroup component, based on ComponentProps and TagPickerGroupSlots.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport type TagPickerGroupProps = ComponentProps<TagPickerGroupSlots>;\"\n```\n\n----------------------------------------\n\nTITLE: Using Fabric Core CSS Classes for Typography\nDESCRIPTION: Demonstrates how to apply typography styles using predefined CSS classes from Fabric Core stylesheet.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Styles/TypographyPage/docs/web/TypographyImplementation.md#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"ms-fontSize-42\"></div>\n```\n\n----------------------------------------\n\nTITLE: Proposed `as` Prop Type Restriction\nDESCRIPTION: Shows the proposed type change to restrict `as` prop to only HTML tags\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/as-prop.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Proposed change\n-  as?: React.ElementType;\n+  as?: keyof JSX.IntrinsicElements;\n```\n\n----------------------------------------\n\nTITLE: Updating ShorthandValue and ShorthandCollection types\nDESCRIPTION: Breaking change that makes Props parameter required in ShorthandValue and ShorthandCollection types.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/CHANGELOG.md#2025-04-20_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\n`Props` param is required in `ShorthandValue` and `ShorthandCollection`\n```\n\n----------------------------------------\n\nTITLE: Defining ITagItemRemoveButtonProps Interface in TypeScript\nDESCRIPTION: Specifies the ITagItemRemoveButtonProps interface extending IButtonProps for tag item remove buttons.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_201\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface ITagItemRemoveButtonProps extends IButtonProps {\n    'data-id'?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Static Assets\nDESCRIPTION: TypeScript compiler configuration to enable static asset imports by including the static-assets type definitions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/typings/static-assets/README.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"types\": [\"static-assets\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting isVirtualElement in TypeScript\nDESCRIPTION: Exports the isVirtualElement function or variable.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_195\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport { isVirtualElement }\n```\n\n----------------------------------------\n\nTITLE: Implementing Vertical Separator in FluentUI v8\nDESCRIPTION: Example showing how to create a vertical Separator with end-aligned content in FluentUI v8.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Divider.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Separator vertical alignContent=\"end\">\n  Content\n</Separator>\n```\n\n----------------------------------------\n\nTITLE: Comparing Drawer Component Types in FluentUI\nDESCRIPTION: Overview of different drawer component types with their recommended use cases and performance implications\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-drawer/stories/src/Drawer/DrawerBestPractices.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<OverlayDrawer />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<InlineDrawer />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Drawer mode=\"inline\" />\n```\n\n----------------------------------------\n\nTITLE: Importing and Running Common Tests in TypeScript\nDESCRIPTION: Example of importing and running the isConformant common test for the Divider component. This test ensures the component conforms to basic guidelines applicable to all components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/test-a-feature.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isConformant } from '../../../specs/commonTests';\n\nimport Divider from '../../../../src/components/Divider/Divider';\n\ndescribe('Divider', () => {\n  isConformant(Divider);\n});\n```\n\n----------------------------------------\n\nTITLE: Package Version Changelog Notation\nDESCRIPTION: Version number and timestamp notation for package releases\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/library/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.0.0-alpha.61](https://github.com/microsoft/fluentui/tree/@fluentui/react-menu_v9.0.0-alpha.61)\n\nWed, 11 Aug 2021 07:34:54 GMT\n```\n\n----------------------------------------\n\nTITLE: Using Method Declarations for Event Type Extension in TypeScript\nDESCRIPTION: This snippet demonstrates how to use method declarations instead of arrow functions to extend event types in TypeScript callbacks. It shows why this approach works with TypeScript's type system but also highlights potential runtime issues.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/event-handlers-event-type.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype OpenPopoverEvents = MouseEvent | PointerEvent;\ntype Props = {\n  onOpenChange(e: OpenPopoverEvents): void; // method instead of arrow function\n};\nconst onOpenChange = (e: MouseEvent) => {\n  console.log(e.clientX);\n};\nconst props: Props = { onOpenChange }; // ✅\n```\n\n----------------------------------------\n\nTITLE: Installing @fluentui/react-context-selector with NPM\nDESCRIPTION: Command to install the @fluentui/react-context-selector package using NPM package manager.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-context-selector/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @fluentui/react-context-selector\n```\n\n----------------------------------------\n\nTITLE: MergeProps Example: Functions/Primitives\nDESCRIPTION: Demonstrates that `mergeProps` simply replaces functions and primitive values, similar to object spreading but without deep merge.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/simplify-prop-merging.md#2025-04-20_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nconst state = {\n  fooSlot: { type: \"submit\" },\n  barSlot: { as: \"button\" },\n  components: {\n    fooSlot: \"button\",\n    barSlot: Loader, // JSX element\n  },\n};\n\n// let's use our `Component`\n<Component fooSlot={{ as: 'div' }} barSlot={{as: \"div\"}} />\n\n// result\n<Component>\n  <div type=\"submit\">button</div>\n  <Loader as=\"div\" />\n</Component>\n```\n\n----------------------------------------\n\nTITLE: Push and Pull Column Ordering in Fluent UI Grid\nDESCRIPTION: Shows how to use push and pull utilities (ms-smPush8, ms-smPull4) to change the visual order of columns independently from their order in the source code. Push moves columns to the right while pull moves them to the left.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Styles/LayoutPage/docs/web/LayoutGridImplementation.md#2025-04-20_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"ms-Grid-col ms-sm4 ms-smPush8\">First in code</div>\n<div class=\"ms-Grid-col ms-sm8 ms-smPull4\">Second in code</div>\n```\n\n----------------------------------------\n\nTITLE: Version Header in Markdown\nDESCRIPTION: Markdown header showing the package version number and tree link\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-resources/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [8.1.41](https://github.com/microsoft/fluentui/tree/@fluentui/public-docsite-resources_v8.1.41)\n```\n\n----------------------------------------\n\nTITLE: Implementing Toolbar Component in FluentUI v0\nDESCRIPTION: Example of implementing a Toolbar component using FluentUI v0 with various buttons, icons, and a dropdown menu. Shows the older pattern of defining toolbar items as an array of objects.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Toolbar.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Toolbar } from '@fluentui/react-northstar';\nconst Component = () => (\n  <Toolbar\n    aria-label=\"Default\"\n    items={[\n      {\n        icon: (\n          <BoldIcon\n            {...{\n              outline: true,\n            }}\n          />\n        ),\n        key: 'bold',\n        kind: 'toggle',\n        active: state.bold,\n        title: 'Toggle bold',\n      },\n      {\n        icon: (\n          <ItalicIcon\n            {...{\n              outline: true,\n            }}\n          />\n        ),\n        key: 'italic',\n        kind: 'toggle',\n        active: state.italic,\n        title: 'Toggle italic',\n      },\n      {\n        icon: (\n          <UnderlineIcon\n            {...{\n              outline: true,\n            }}\n          />\n        ),\n        key: 'underline',\n        kind: 'toggle',\n        active: state.underline,\n        title: 'Toggle underline',\n      },\n      {\n        key: 'divider-1',\n        kind: 'divider',\n      },\n      {\n        icon: (\n          <FontSizeIcon\n            {...{\n              outline: true,\n            }}\n          />\n        ),\n        key: 'font-size',\n        title: 'Font size',\n      },\n      {\n        icon: (\n          <RemoveFormatIcon\n            {...{\n              outline: true,\n            }}\n          />\n        ),\n        key: 'remove-format',\n        title: 'Remove formatting',\n      },\n      {\n        key: 'divider-2',\n        kind: 'divider',\n      },\n      {\n        icon: (\n          <OutdentIcon\n            {...{\n              outline: true,\n            }}\n          />\n        ),\n        key: 'outdent',\n        title: 'Outdent',\n      },\n      {\n        icon: (\n          <IndentIcon\n            {...{\n              outline: true,\n            }}\n          />\n        ),\n        key: 'indent',\n        title: 'Indent',\n      },\n      {\n        key: 'divider-3',\n        kind: 'divider',\n      },\n      {\n        icon: (\n          <MoreIcon\n            {...{\n              outline: true,\n            }}\n          />\n        ),\n        key: 'more',\n        active: state.more,\n        title: 'More',\n        menu: [\n          {\n            key: 'quote',\n            content: 'Quote',\n            icon: <QuoteIcon />,\n          },\n          {\n            key: 'link',\n            content: 'Link',\n            icon: <LinkIcon />,\n            disabled: true,\n          },\n          {\n            key: 'code',\n            content: 'Code snippet',\n            icon: <CodeSnippetIcon />,\n          },\n        ],\n      },\n    ]}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format\nDESCRIPTION: Standard format for documenting version changes with bullet points\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Patches\n\n- Bump @fluentui/react to v8.107.5 ([PR #27443](https://github.com/microsoft/fluentui/pull/27443) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Adding node field to package.json exports map\nDESCRIPTION: Fix to add a node field to the exports map in package.json.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-shared-contexts/library/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"exports\": {\n  \".\": {\n    \"node\": \"./lib/index.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @fluentui/react-context-selector with Yarn\nDESCRIPTION: Command to install the @fluentui/react-context-selector package using Yarn package manager.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-context-selector/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @fluentui/react-context-selector\n```\n\n----------------------------------------\n\nTITLE: Running Screener Tests from Repository Root in Bash\nDESCRIPTION: Command to run Screener visual regression tests from the repository root.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/test-a-feature.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn test:fluentui:visual\n```\n\n----------------------------------------\n\nTITLE: Defining ISwatchColorPickerStyleProps Interface in TypeScript\nDESCRIPTION: Specifies the ISwatchColorPickerStyleProps interface for styling properties of the SwatchColorPicker component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_197\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface ISwatchColorPickerStyleProps {\n    cellMargin?: number;\n    className?: string;\n    theme: ITheme;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Template Literal Types for Color Palette in TypeScript\nDESCRIPTION: Removes template literal types used for the color palette in the react-theme package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-theme/library/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Removed in PR #20251\n// Template literal types for color palette\n```\n\n----------------------------------------\n\nTITLE: Basic Generator Usage - FluentUI Workspace Plugin\nDESCRIPTION: Shows the basic command to run the tsconfig-base-all generator using nx and yarn.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/tsconfig-base-all/README.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:tsconfig-base-all\n```\n\n----------------------------------------\n\nTITLE: Initializing Square Avatar with Icon - JSX\nDESCRIPTION: Renders a square-shaped Avatar displaying a team icon with appropriate aria-label.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-avatar/library/docs/SPEC.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Avatar aria-label=\"Team\" icon={<PeopleTeamRegular />} shape=\"square\" />\n```\n\n----------------------------------------\n\nTITLE: Button Component Usage in HTML\nDESCRIPTION: Shows the HTML tag syntax for using the Button component in FluentUI Web Components v3.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/button/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<fluent-button></fluent-button>\n```\n\n----------------------------------------\n\nTITLE: Basic Box to Primitive Component Migration\nDESCRIPTION: Shows the basic migration from Box to Primitive component import and usage.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Box.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Box } from '@fluentui/react-northstar';\nconst Component = () => <Box />;\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Primitive } from '@fluentui/react-migration-v0-v9';\nconst Component = () => <Primitive />;\n```\n\n----------------------------------------\n\nTITLE: Defining ISuggestionsSubComponentStyles Interface in TypeScript\nDESCRIPTION: Defines the ISuggestionsSubComponentStyles interface for styling subcomponents of the Suggestions component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_193\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface ISuggestionsSubComponentStyles {\n    spinner: IStyleFunctionOrObject<ISpinnerStyleProps, any>;\n}\n```\n\n----------------------------------------\n\nTITLE: Change Comparison Link Format\nDESCRIPTION: Link format for comparing changes between versions\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/library/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-menu_v9.0.0-alpha.60..@fluentui/react-menu_v9.0.0-alpha.61)\n```\n\n----------------------------------------\n\nTITLE: Storybook Meta Configuration\nDESCRIPTION: Meta component configuration setting the documentation title path for accessibility experiences.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Accessibility/AccessibleExperiences.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta title=\"Concepts/Developer/Accessibility/Experiences\" />\n```\n\n----------------------------------------\n\nTITLE: FluentUI SearchBar Component Class Names\nDESCRIPTION: Class name definitions for SearchBar component across Swift and Objective-C implementations in FluentUI framework.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/NavBarPage/docs/ios/NavBarImplementation.md#2025-04-20_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nSearchBar\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\nMSFSearchBar\n```\n\n----------------------------------------\n\nTITLE: Defining ITag Interface in TypeScript\nDESCRIPTION: Specifies the ITag interface representing a tag with a key and name.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_199\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface ITag {\n    key: string | number;\n    name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Fluent UI Web Components with NPM\nDESCRIPTION: Command to install Fluent UI Web Components as a dependency using NPM package manager.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/_docs/developer/quick-start.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @fluentui/web-components\n```\n\n----------------------------------------\n\nTITLE: Installing Fluent UI Web Components with Yarn\nDESCRIPTION: Command to install Fluent UI Web Components as a dependency using Yarn package manager.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/_docs/developer/quick-start.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @fluentui/web-components\n```\n\n----------------------------------------\n\nTITLE: Implementing Sized Card After Migration\nDESCRIPTION: Example showing how to create a card with a specific size after migration by using a parent container with defined dimensions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Card/Card.stories.mdx#2025-04-20_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { makeStyles } from '@fluentui/react-components';\nimport { Card } from '@fluentui/react-components';\n\nconst useStyles = makeStyles({\n  parent: {\n    width: '500px',\n  },\n});\n\nexport const SizedCard = () => {\n  const styles = useStyles();\n\n  return (\n    <div className={styles.parent}>\n      <Card>\n        <p>Lorem ipsum dolor sit amet.</p>\n      </Card>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Recipe Generator with Recipe Name\nDESCRIPTION: Executes the recipe-generator workspace plugin with a specific recipe name. This command directly specifies the 'recipeName' option, avoiding the interactive prompt. The name is used to generate folder and file names.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/recipe-generator/README.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:recipe-generator --recipeName 'My Recipe'\n```\n\n----------------------------------------\n\nTITLE: Setting Storybook Meta for Fluent UI Theme Fonts Documentation\nDESCRIPTION: This JSX snippet sets the Storybook metadata for the Theme/Fonts documentation page.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-theme/stories/src/Theme/fonts/index.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Meta title=\"Theme/Fonts\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Fluent UI ESLint Plugin with Yarn\nDESCRIPTION: Command to install the Fluent UI ESLint plugin using Yarn as a development dependency. This is an alternative setup method for those preferring Yarn over npm.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/eslint-plugin-react-components/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\\nyarn add --dev @fluentui/eslint-plugin-react-components\n```\n\n----------------------------------------\n\nTITLE: Migrating Content Prop in ItemLayout (After)\nDESCRIPTION: Example showing how to use JSX children instead of the content prop with ItemLayout.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/ItemLayout.stories.mdx#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ItemLayout } from '@fluentui/react-migration-v0-v9';\nconst Component = () => <ItemLayout>hi</ItemLayout>;\n```\n\n----------------------------------------\n\nTITLE: Bumping FluentUI React Monaco Editor Version with PR\nDESCRIPTION: This snippet shows how to bump the version of the @fluentui/react-monaco-editor package. The pull request number provides a direct link to the change within the repository. This action is part of maintaining the dependencies for the project.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-docsite-components/CHANGELOG.md#2025-04-20_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n\"- Bump @fluentui/react-monaco-editor to v1.7.139 ([PR #29585](https://github.com/microsoft/fluentui/pull/29585) by beachball)\"\n```\n\n----------------------------------------\n\nTITLE: Version 0.2.35 Release Notes\nDESCRIPTION: Changelog entry documenting patches and dependency updates for version 0.2.35\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-timepicker-compat/library/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.2.35](https://github.com/microsoft/fluentui/tree/@fluentui/react-timepicker-compat_v0.2.35)\n\nTue, 08 Oct 2024 22:05:59 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-timepicker-compat_v0.2.34..@fluentui/react-timepicker-compat_v0.2.35)\n```\n\n----------------------------------------\n\nTITLE: Defining StartOptions Type in TypeScript\nDESCRIPTION: TypeScript type definition for StartOptions that enables configuration of the start slot in components that implement StartEnd interface.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_55\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport type StartOptions<TSource = any, TParent = any> = {\n    start?: StaticallyComposableHTML<TSource, TParent>;\n};\n```\n\n----------------------------------------\n\nTITLE: Package Identifier in Markdown\nDESCRIPTION: Identifies the package name @fluentui/react-list as a markdown code element, indicating this is the React List component package for Fluent UI React.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-list/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@fluentui/react-list\n```\n\n----------------------------------------\n\nTITLE: Version Comparison Link Markdown\nDESCRIPTION: Markdown link showing version comparison between releases.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_47\n\nLANGUAGE: markdown\nCODE:\n```\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-badge_v9.0.0-alpha.88..@fluentui/react-badge_v9.0.0-alpha.90)\n```\n\n----------------------------------------\n\nTITLE: Defining ITagPickerProps Interface in TypeScript\nDESCRIPTION: Specifies the ITagPickerProps interface extending IBasePickerProps for tag pickers.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_207\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface ITagPickerProps extends IBasePickerProps<ITag> {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IFacepile Interface in TypeScript\nDESCRIPTION: Defines an empty IFacepile interface. This interface is marked as @public but undocumented.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_137\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IFacepile {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tree Root Reset Component in TypeScript\nDESCRIPTION: Exports a component for resetting the root of a tree structure.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tree/library/etc/react-tree.api.md#2025-04-20_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const TreeRootReset: (props: TreeRootResetProps) => JSX.Element;\n```\n\n----------------------------------------\n\nTITLE: TagPickerSize Type\nDESCRIPTION: Defines the possible sizes for the TagPicker component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport type TagPickerSize = 'medium' | 'large' | 'extra-large';\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Icon DOM Structure - HTML\nDESCRIPTION: The recommended DOM structure for rendering an icon component with proper accessibility attributes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Icon.md#2025-04-20_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"root\" aria-hidden=\"true\">{fontIconName}</span>\n```\n\n----------------------------------------\n\nTITLE: Defining ITagItemSuggestionStyles Interface in TypeScript\nDESCRIPTION: Defines the ITagItemSuggestionStyles interface for styling tag item suggestions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_206\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface ITagItemSuggestionStyles {\n    suggestionTextOverflow?: IStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Documentation Metadata\nDESCRIPTION: Import Meta component from Storybook for documentation page configuration\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Menu.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs'\n```\n\n----------------------------------------\n\nTITLE: Defining ToolbarToggleButton Props Interface in TypeScript\nDESCRIPTION: TypeScript interface extending ToggleButton props for the ToolbarToggleButton component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-toolbar/library/docs/Spec.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype ToolbarToggleButtonProps = ComponentProps<Partial<ToggleButtonSlots>>;\n```\n\n----------------------------------------\n\nTITLE: Exporting Subtree Context Hook in TypeScript\nDESCRIPTION: Exports a hook for accessing the subtree context in tree components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tree/library/etc/react-tree.api.md#2025-04-20_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const useSubtreeContext_unstable: () => SubtreeContextValue;\n```\n\n----------------------------------------\n\nTITLE: Defining TooltipDelay Enum\nDESCRIPTION: Enum defining tooltip delay timing options for FluentUI tooltips.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_271\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport enum TooltipDelay {\n    long = 2,\n    medium = 1,\n    // (undocumented)\n    zero = 0\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Divider Component Migration\nDESCRIPTION: Shows the basic migration from v0 to v9 Divider component import and usage.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Divider.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Divider } from '@fluentui/react-northstar';\nconst Component = () => <Divider />;\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Divider } from '@fluentui/react-components';\nconst Component = () => <Divider />;\n```\n\n----------------------------------------\n\nTITLE: Global Styles Selector Example\nDESCRIPTION: Example of :global selector usage enhanced in version 6.15.1.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/merge-styles/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n:global(.selector) { property: value; }\n```\n\n----------------------------------------\n\nTITLE: Persona Interface Definitions\nDESCRIPTION: TypeScript interfaces for the Persona component, including persona menu integration\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_164\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IPersonaWithMenu extends IPersonaProps {\n    menuItems?: IContextualMenuItem[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Calendar Component in React/TypeScript\nDESCRIPTION: Defines a functional component for a Calendar with ICalendarProps interface.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const Calendar: React_2.FunctionComponent<ICalendarProps>;\n```\n\n----------------------------------------\n\nTITLE: Version Update Entry - September 30, 2021\nDESCRIPTION: Changelog entry documenting patch updates to FluentUI React Button and Provider packages\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/perf-test/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Patches\n\n- Bump @fluentui/react-button to v9.0.0-alpha.96 ([PR #19990](https://github.com/microsoft/fluentui/pull/19990) by beachball)\n- Bump @fluentui/react-provider to v9.0.0-alpha.86 ([PR #19990](https://github.com/microsoft/fluentui/pull/19990) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Defining Coachmark and Style Interfaces in TypeScript\nDESCRIPTION: This code snippet provides TypeScript interfaces for defining coachmark styles and types, specifically targeting properties like ariaContainer, collapsed, and entityHost. These interfaces help structure your UI component's style and properties using TypeScript.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_61\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ICoachmarkStyles {\n    ariaContainer?: IStyle;\n    childrenContainer: IStyle;\n    collapsed?: IStyle;\n    entityHost?: IStyle;\n    entityInnerHost: IStyle;\n    pulsingBeacon?: IStyle;\n    root?: IStyle;\n    rotateAnimationLayer?: IStyle;\n    scaleAnimationLayer?: IStyle;\n    translateAnimationContainer?: IStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: Flex with unnecessary Flex.Item\nDESCRIPTION: This example highlights a potential anti-pattern where Flex.Item is used unnecessarily. The Flex.Item component adds no value because no props are being specified.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/docs/src/examples/components/Flex/Recipes.mdx#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"<Flex gap=\\\"gap.small\\\">\\n    <Button content=\\\"Accept\\\" />\\n    <Flex.Item>\\n      <Button content=\\\"Deny\\\" />\\n    </Flex.Item>\\n  </Flex>\"\n```\n\n----------------------------------------\n\nTITLE: Adding Event Helpers for Mouse and Touch Interactions\nDESCRIPTION: Introduction of new event helper utilities to simplify working with mouse and touch events in React components, enhancing interaction handling\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-utilities/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Feature: Add event helpers for mouse and touch interactions\nfeat: Add event helpers to ease working with mouse and touch\n```\n\n----------------------------------------\n\nTITLE: Adding Documentation Styling in React Theme\nDESCRIPTION: Adds styling for documentation in the react-theme package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-theme/library/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Added in PR #20193\n// Styling for documentation\n```\n\n----------------------------------------\n\nTITLE: Defining Checkbox Component in React/TypeScript\nDESCRIPTION: Defines a functional component for a Checkbox with ICheckboxProps interface.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const Checkbox: React_2.FunctionComponent<ICheckboxProps>;\n```\n\n----------------------------------------\n\nTITLE: Fixing nesting issues with Dialog inside Popup\nDESCRIPTION: Bug fix for nesting Dialog component inside Popup.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/CHANGELOG.md#2025-04-20_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nFix nesting issues with `Dialog` component inside `Popup`\n```\n\n----------------------------------------\n\nTITLE: Defining ITagItemSuggestionProps Interface in TypeScript\nDESCRIPTION: Defines the ITagItemSuggestionProps interface extending React.AllHTMLAttributes for tag item suggestions with additional styling options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_204\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface ITagItemSuggestionProps extends React_2.AllHTMLAttributes<HTMLElement> {\n    className?: string;\n    styles?: IStyleFunctionOrObject<ITagItemSuggestionStyleProps, ITagItemSuggestionStyles>;\n    theme?: ITheme;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Generator Execution - Shell\nDESCRIPTION: Command to run the generator with default options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/split-library-in-two/README.md#2025-04-20_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:split-library-in-two\n```\n\n----------------------------------------\n\nTITLE: Importing Input Component in React\nDESCRIPTION: Basic import statement for the Fluent UI Input component from the react-components package\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-input/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { Input } from '@fluentui/react-components';\n```\n\n----------------------------------------\n\nTITLE: Installing Fluent UI Storybook Addon\nDESCRIPTION: Command to install the Fluent UI Storybook addon as a development dependency using yarn.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-storybook-addon/README.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add -D @fluentui/react-storybook-addon\n```\n\n----------------------------------------\n\nTITLE: Starting the FluentUI V9 Documentation Website\nDESCRIPTION: Command to start the FluentUI V9 documentation website using Yarn workspaces.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn workspace @fluentui/public-docsite-v9 start\n```\n\n----------------------------------------\n\nTITLE: Defining isValidShade Function in TypeScript\nDESCRIPTION: Declares the isValidShade function to check if a given shade is valid.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_194\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport function isValidShade(shade?: Shade): boolean;\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Environment Types\nDESCRIPTION: TypeScript compiler configuration to enable environment type definitions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/typings/environment/README.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"types\": [\"environment\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Icon Sizing in Fluent UI v0\nDESCRIPTION: Example of setting icon size using predefined size values in Fluent UI v0.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Icons.stories.mdx#2025-04-20_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<MyIcon size=\"small\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Divider Component in JavaScript\nDESCRIPTION: Shows how to import the Divider component from the Fluent UI React components library.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-divider/library/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Divider } from '@fluentui/react-components';\n```\n\n----------------------------------------\n\nTITLE: Mixing Typography Tokens and Custom Styles in Fluent UI React Components\nDESCRIPTION: This snippet illustrates how to combine typography styles with custom CSS properties in Fluent UI React components. It uses the spread operator to merge predefined styles with custom properties.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-theme/stories/src/Theme/typography/index.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { makeStyles, typographyStyles, Text } from '@fluentui/react-components';\n\nconst useStyles = makeStyles({\n  title: typographyStyles.title2,\n\n  paragraph: {\n    ...typographyStyles.body1,\n    letterSpacing: '0.0675em',\n    fontStyle: 'italic',\n  },\n});\n\nexport const MixedStyles = () => {\n  const styles = useStyles();\n\n  return (\n    <div>\n      <Text as=\"h1\" block className={styles.title}>\n        Using Title 2 tokens\n      </Text>\n\n      <Text as=\"p\" block className={styles.paragraph}>\n        I'm a paragraph using Body 1 tokens and customized styles\n      </Text>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Running Application Tests\nDESCRIPTION: Launches the test runner in interactive watch mode for running and monitoring application tests\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/cra-template/template/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Generated CSS for @noflip with shorthands\nDESCRIPTION: Shows the CSS output when @noflip is applied to border properties using shorthands. The same classes are used for both LTR and RTL contexts.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/styles-handbook.md#2025-04-20_snippet_29\n\nLANGUAGE: css\nCODE:\n```\n/* Will be applied in LTR & RTL */\n.f1h8qh3y {\n  border-left-width: 5px;\n}\n\n.f150p1cp {\n  border-left-style: solid;\n}\n\n.f1sim4um {\n  border-left-color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Fluent UI React Charts package using npm\nDESCRIPTION: Command to install the Fluent UI React charts package using npm package manager.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/chart-docsite/src/Introduction.mdx#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @fluentui/react-charts\n```\n\n----------------------------------------\n\nTITLE: AnimationDirection Enum Definition in TypeScript\nDESCRIPTION: Defines an enumeration for animation directions, containing Horizontal and Vertical options. Used to specify the direction of animations in FluentUI components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport enum AnimationDirection {\n    Horizontal = 0,\n    Vertical = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Standard Package Release Flow Diagram\nDESCRIPTION: Mermaid flowchart depicting the release process for standard Fluent UI packages from kickoff to stable phase\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/prepare-initial-release/README.md#2025-04-20_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TB\n\nsubgraph IRP[1st release preparation for preview]\nGP(nx prepare-initial-release --phase=preview)\nRP(released to npm as v0.1.0)\nGP--ci:npm publish-->RP\nend\n```\n\n----------------------------------------\n\nTITLE: Running the epic generator\nDESCRIPTION: This command executes the epic generator plugin within the Nx workspace. It uses the `@fluentui/workspace-plugin:epic-generator` schematic to create an epic issue and sub-issues on GitHub.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/epic-generator/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:epic-generator ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Fabric Async Loader in Webpack\nDESCRIPTION: Webpack configuration for enabling automatic code splitting using the Fluent UI Fabric Async Loader. This loader allows code splitting without requiring code changes in the library or application.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/webpack-utilities/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  ...,\n  module: {\n    rules: [\n      {\n        test: /\\.(jsx?|tsx?)$/,\n        include: require('@fluentui/webpack-utilities/lib/fabricAsyncLoaderInclude'),\n        loader: '@fluentui/webpack-utilities/lib/fabricAsyncLoader.js',\n        options: {\n          ...\n        }\n      },\n    ...\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: FluentUI Navigation Component Class Names\nDESCRIPTION: Class name definitions for NavigationController component across Swift and Objective-C implementations in FluentUI framework.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/NavBarPage/docs/ios/NavBarImplementation.md#2025-04-20_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nNavigationController\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\nMSFNavigationController\n```\n\n----------------------------------------\n\nTITLE: Creating webpack configuration for React component libraries\nDESCRIPTION: Main function that creates a complete webpack configuration object for FluentUI component libraries. Configures entry points, output paths, resolve settings, modules, optimizations, and plugins.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-teaching-popover/stories/src/TeachingPopover/TeachingPopoverDescription.md#2025-04-20_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction createWebpackConfig(options = {}) {\n  options.outDir = options.outDir || 'dist';\n  options.rootPath = options.rootPath || findGitRoot(process.cwd()) || process.cwd();\n  options.committedGitHash = options.committedGitHash || getGitHash();\n\n  if (options.onlyProduction && !options.production) {\n    throw new Error('Must set production flag for onlyProduction configuration');\n  }\n\n  const htmlWebpackPlugin = generateHTMLWebpackPlugin(options);\n\n  const plugins = [];\n\n  const styleLoader = {\n    loader: 'style-loader',\n    options: {\n      injectType: options.styleLoader?.injectType || 'singletonStyleTag',\n      attributes: {\n        'data-loader': 'style-loader',\n      },\n    },\n  };\n\n  if (!!options.tsCheckerEnabled) {\n    plugins.push(new ForkTsCheckerWebpackPlugin());\n  }\n\n  if (htmlWebpackPlugin) {\n    plugins.push(htmlWebpackPlugin);\n  }\n\n  if (options.bundleAnalyzerPlugin) {\n    plugins.push(\n      new BundleAnalyzerPlugin({\n        analyzerMode: 'static',\n        reportFilename: 'bundle-size.html',\n        openAnalyzer: false,\n        generateStatsFile: true,\n        statsOptions: {\n          source: false,\n        },\n      }),\n    );\n  }\n\n  if (options.duplicatesPlugin) {\n    plugins.push(new DuplicatesPlugin());\n  }\n\n  if (options.plugins && Array.isArray(options.plugins)) {\n    plugins.push(...options.plugins);\n  }\n\n  // These are mocked in webpack.config.tests.js\n  const webpackDefines = {\n    'process.env': options.production ? { NODE_ENV: JSON.stringify('production') } : {},\n    ...options.webpackDefines,\n  };\n  plugins.push(new _webpack.DefinePlugin(webpackDefines));\n\n  plugins.push(\n    new _webpack.DefinePlugin({\n      // Define or override window.fetch\n      ...(options.globalFetch && {\n        'window.fetch': options.globalFetch,\n      }),\n    }),\n  );\n\n  /**\n   * Alias 'react-native' imports to 'react-native-web' and\n   * alias \"react\" for ensuring modularized relaiming of React\n   */\n  let configResolveAlias = { 'react-native': 'react-native-web', ...options.alias };\n\n  if (!options.excludeReactModularization) {\n    configResolveAlias.react = path.resolve(path.join('node_modules', 'react'));\n  }\n\n  return {\n    mode: options.production ? 'production' : 'development',\n    target: options.target || 'web',\n\n    entry: {\n      app: options.entry || './lib/index.js',\n      ...options.entries,\n    },\n\n    ...(options.outputFilename && {\n      output: {\n        filename: options.outputFilename,\n      },\n    }),\n\n    ...(options.output && {\n      output: {\n        ...options.output,\n      },\n    }),\n\n    output: {\n      path: path.resolve(process.cwd(), options.outDir),\n      pathinfo: !options.production,\n      publicPath: options.publicPath || '/',\n      crossOriginLoading: 'anonymous',\n      ...options.output,\n    },\n\n    experiments: {\n      ...options.experiments,\n    },\n\n    optimization: {\n      minimize: options.production,\n      minimizer: options.production\n        ? [\n            new TerserPlugin({\n              extractComments: false,\n              sourceMap: true,\n              terserOptions: {\n                compress: {\n                  // minimizer conflict with definePlugin.process.env.NODE_ENV===production\n                  // drop_console: true,\n                  ...options.terserOptions?.compress,\n                },\n              },\n            }),\n          ]\n        : [],\n      ...(options.optimization && { ...options.optimization }),\n    },\n\n    module: {\n      strictExportPresence: true,\n      rules: [\n        {\n          test: /\\.js$/,\n          use: 'source-map-loader',\n          enforce: 'pre',\n        },\n        ...(options.module?.rules || []),\n        {\n          test: /\\.(js|ts|tsx)$/,\n          exclude: [\n            /node_modules/,\n            ...(Array.isArray(options.excludeFromCompilation) ? options.excludeFromCompilation : []),\n          ],\n          use: [\n            {\n              loader: 'babel-loader',\n              options: {\n                configFile: false,\n                babelrc: false,\n\n                plugins: [\n                  '@babel/plugin-syntax-typescript',\n                  '@babel/plugin-proposal-class-properties',\n                  [\n                    '@babel/plugin-transform-typescript',\n                    {\n                      isTSX: true,\n                    },\n                  ],\n                ],\n                presets: [\n                  [\n                    '@babel/preset-env',\n                    {\n                      targets: {\n                        browsers: ['last 2 versions', 'ie >= 11'],\n                      },\n                      useBuiltIns: 'entry',\n                      corejs: 3,\n                    },\n                  ],\n                  '@babel/preset-react',\n                ],\n\n                ...options.babelOptions,\n              },\n            },\n          ],\n        },\n        {\n          test: /\\.css$/,\n          exclude: /\\.module\\.css$/,\n          use: [\n            styleLoader,\n            {\n              loader: 'css-loader',\n              options: {\n                importLoaders: 1,\n              },\n            },\n          ],\n        },\n        {\n          test: /\\.module\\.css$/,\n          use: [\n            styleLoader,\n            {\n              loader: 'css-loader',\n              options: {\n                importLoaders: 1,\n                modules: {\n                  localIdentName: '[name]_[local]_[hash:base64:5]',\n                  auto: true,\n                },\n              },\n            },\n          ],\n        },\n      ],\n    },\n\n    plugins,\n\n    resolve: {\n      extensions: ['.js'],\n      alias: configResolveAlias,\n      fallback: {},\n      ...(options.resolve && options.resolve),\n    },\n\n    performance: {\n      hints: 'warning',\n      ...(!!options.performance && options.performance),\n    },\n\n    ...(options.devServer && {\n      devServer: options.devServer,\n    }),\n\n    stats: 'errors-warnings',\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TextArea Configuration Options in TypeScript\nDESCRIPTION: Defines constants and types for TextArea autocomplete, resize, and size options. Also exports the element definition, styles, and template for the TextArea component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_76\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"TextAreaAutocomplete\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport const TextAreaAutocomplete: {\n    readonly on: \"on\";\n    readonly off: \"off\";\n};\n\n// @public (undocumented)\nexport type TextAreaAutocomplete = ValuesOf<typeof TextAreaAutocomplete>;\n\n// @public\nexport const TextAreaDefinition: FASTElementDefinition<typeof TextArea>;\n\n// Warning: (ae-missing-release-tag) \"TextAreaResize\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n// Warning: (ae-missing-release-tag) \"TextAreaResize\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport const TextAreaResize: {\n    readonly none: \"none\";\n    readonly both: \"both\";\n    readonly horizontal: \"horizontal\";\n    readonly vertical: \"vertical\";\n};\n\n// @public (undocumented)\nexport type TextAreaResize = ValuesOf<typeof TextAreaResize>;\n\n// Warning: (ae-missing-release-tag) \"TextAreaSize\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport const TextAreaSize: {\n    readonly small: \"small\";\n    readonly medium: \"medium\";\n    readonly large: \"large\";\n};\n\n// @public (undocumented)\nexport type TextAreaSize = ValuesOf<typeof TextAreaSize>;\n\n// @public\nexport const TextAreaStyles: ElementStyles;\n\n// Warning: (ae-internal-missing-underscore) The name \"TextAreaTemplate\" should be prefixed with an underscore because the declaration is marked as @internal\n//\n// @internal (undocumented)\nexport const TextAreaTemplate: ElementViewTemplate<TextArea>;\n```\n\n----------------------------------------\n\nTITLE: Defining IComboBoxOptionClassNames Interface\nDESCRIPTION: Defines the `IComboBoxOptionClassNames` interface, which specifies the CSS class names used for styling individual options within a ComboBox.  It includes properties for the root element, the option text wrapper and the option text.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_67\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IComboBoxOptionClassNames {\n    // (undocumented)\n    optionText: string;\n    // (undocumented)\n    optionTextWrapper: string;\n    // (undocumented)\n    root: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing v8 Slider Examples (Raw)\nDESCRIPTION: This snippet imports the raw code of the v8 Slider examples using `raw-loader`. This allows the code to be displayed within the Storybook documentation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Slider/Slider.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"import v8Demo from '!!raw-loader!./Sliderv8Examples.stories.tsx';\"\n```\n\n----------------------------------------\n\nTITLE: Avoiding Fluent UI v8 Components\nDESCRIPTION: Example of incorrect usage that imports and uses deprecated Fluent UI v8 components. This violates the 'prefer-fluentui-v9' rule by not using the updated v9 counterparts.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/eslint-plugin-react-components/README.md#2025-04-20_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// Avoid importing and using Fluent UI V8 components that have already been migrated to Fluent UI V9.\\nimport { DefaultButton } from '@fluentui/react';\\n\\nconst Component = () => <DefaultButton>...</DefaultButton>;\n```\n\n----------------------------------------\n\nTITLE: Loading Workspace Addon in Storybook - JavaScript\nDESCRIPTION: This snippet demonstrates how to register a custom Storybook addon using the loadWorkspaceAddon function. It sets up the addons array in the Storybook configuration, allowing the integration of third-party and custom addons without pre-building them.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/scripts/storybook/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// @filename .storybook/main.js\n\nconst { loadWorkspaceAddon } = require('@fluentui/scripts/storybook');\n\nconst tsConfigPath = path.join(workspaceRoot, 'tsconfig.base.json');\n\nmodule.exports = {\n  addons: [\n    // 3rd party packages/addons\n    '@storybook/addon-essentials',\n    '@storybook/addon-a11y',\n\n    // workspace custom addon\n    loadWorkspaceAddon('@fluentui/custom-storybook-addon', { tsConfigPath }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering v8 Slider Examples in Storybook\nDESCRIPTION: This snippet demonstrates how to render the v8 Slider examples within a Storybook story using the Canvas and Story components. It passes the raw code to the `source` parameter for documentation purposes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Slider/Slider.stories.mdx#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n\"<Canvas>\\n  <Story parameters={{ docs: { source: { code: v8Demo } } }} name=\\\"v8 Example\\\">\\n    <V8BasicExample />\\n    <V8SnappingExample />\\n    <V8ControlledExample />\\n    <V8FormattedValueExample />\\n  </Story>\\n</Canvas>\"\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/merge-styles to v8.5.2\nDESCRIPTION: This note captures the update of '@fluentui/merge-styles' to version 8.5.2, contributing to UI styling enhancements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/theming-designer/CHANGELOG.md#2025-04-20_snippet_35\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/merge-styles to v8.5.2 ([PR #22966](https://github.com/microsoft/fluentui/pull/22966) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Current makeStyles Implementation with Theme Functions\nDESCRIPTION: Shows how makeStyles currently supports both object and function-based style rules. The function approach couples styles to tokens from @fluentui/react-theme.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/convergence/make-styles-no-functions.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmakeStyles({\n  // 👇 as an object\n  rootA: { color: 'red' },\n  // 👇 as a function\n  rootB: theme => ({ color: theme.tokenB }),\n});\n```\n\n----------------------------------------\n\nTITLE: Dry Run Release Generation\nDESCRIPTION: Command to preview package release generation without writing to disk\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/prepare-initial-release/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:prepare-initial-release --dry-run\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories Path for SpinButton Component\nDESCRIPTION: Configuration snippet showing how to set up story paths in Storybook's configuration file to include SpinButton component stories. Specifies globs for both MDX and TypeScript/TSX story files.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-spinbutton/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-spinbutton/stories/src/**/*.stories.mdx', '../packages/react-components/react-spinbutton/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Single Package Conversion - Shell\nDESCRIPTION: Command to convert RC dependencies for a specific package using the name option.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/rc-caret/README.md#2025-04-20_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:rc-caret --name=react-components\n```\n\n----------------------------------------\n\nTITLE: Implementing retry mechanism for async operations in webpack config\nDESCRIPTION: A utility function that retries an asynchronous operation a specified number of times with exponential backoff delay. Used to handle intermittent issues during build processes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-teaching-popover/stories/src/TeachingPopover/TeachingPopoverDescription.md#2025-04-20_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function createJestConfigWithRetries(options = {}) {\n  return retryAsync(() => createJestConfig(options), {\n    maxTries: 3,\n    retryDelay: 500,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Version Tree Link Markdown\nDESCRIPTION: Markdown link to version tree in repository\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-image/library/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n[9.0.0-alpha.75](https://github.com/microsoft/fluentui/tree/@fluentui/react-image_v9.0.0-alpha.75)\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Solution Style for vNext Packages\nDESCRIPTION: Main package TypeScript configuration file that uses project references to link to environment-specific configs. It extends the base config and sets up type checking without emitting files.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/shared/build-system/02-solution-style-ts-configs.md#2025-04-20_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"extends\": \"../tsconfig.base.json\",\n  \"compilerOptions\": {\n    // by default we gonna use tsc for type checking only\n    \"noEmit\": true\n    //...\n  },\n  \"include\": [],\n  \"files\": [],\n  \"references\": [\n    {\n      \"path\": \"./tsconfig.lib.json\"\n    },\n    {\n      \"path\": \"./tsconfig.spec.json\"\n    },\n    {\n      \"path\": \"./storybook/tsconfig.json\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating v0 Positioning Configuration\nDESCRIPTION: Examples showing how positioning is configured in FluentUI v0 components using direct props.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/exposing-popper-options.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Popup\n  align\n  position\n  offset\n/>\n\n<Menu\n  items={[\n    { menu: popper: { align, position, offset }}\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Fluent UI React Components Dependencies\nDESCRIPTION: Command to install the required Fluent UI React components package using either Yarn or NPM.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/SSR/Nextjs.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Using Yarn\nyarn add @fluentui/react-components\n\n# Using NPM\nnpm install @fluentui/react-components\n```\n\n----------------------------------------\n\nTITLE: Bootstrap New Generator using Yarn CLI\nDESCRIPTION: This command initializes a new workspace generator using the '@fluentui/workspace-plugin' in an NX repository. It provides a CLI method for setting up the basic structure necessary for a generator.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/STYLE-GUIDE.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:workspace-generator\n```\n\n----------------------------------------\n\nTITLE: Refactoring renderAccordionHeader_unstable in React\nDESCRIPTION: This snippet shows the changes to the renderAccordionHeader_unstable function to accept and use the new styles object.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/slot-children-render-function.md#2025-04-20_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n- export const renderAccordionHeader_unstable = (state: AccordionHeaderState) => (\n+ export const renderAccordionHeader_unstable = (state: AccordionHeaderState, styles: AccordionHeaderStyles) => (\n-  <state.root>\n+  <state.root className={styles.root}>\n    <state.button>\n      {state.expandIconPosition === 'start' && state.expandIcon && <state.expandIcon />}\n      {state.icon && <state.icon />}\n      {state.root.props.children}\n      {state.expandIconPosition === 'end' && state.expandIcon && <state.expandIcon />}\n    </state.button>\n  </state.root>\n);\n```\n\n----------------------------------------\n\nTITLE: Tag Picker Option Group Render Function\nDESCRIPTION: This is the render function for the TagPickerOptionGroup component. It takes the state and renders a group of options within the TagPicker list.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const renderTagPickerOptionGroup: (state: TagPickerOptionGroupState) => JSX.Element;\"\n```\n\n----------------------------------------\n\nTITLE: Bumping FluentUI React Monaco Editor Version with PR\nDESCRIPTION: This snippet shows how to bump the version of the @fluentui/react-monaco-editor package. The pull request number provides a direct link to the change within the repository. This action is part of maintaining the dependencies for the project.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-docsite-components/CHANGELOG.md#2025-04-20_snippet_22\n\nLANGUAGE: text\nCODE:\n```\n\"- Bump @fluentui/react-monaco-editor to v1.7.126 ([PR #29188](https://github.com/microsoft/fluentui/pull/29188) by beachball)\"\n```\n\n----------------------------------------\n\nTITLE: Updating Component Style with Fallback Tokens JavaScript\nDESCRIPTION: This snippet illustrates how to update existing component references to use expanded tokens with var() fallback in JavaScript. It provides a method to ensure that components reference the precise token value while maintaining backward compatibility using alias tokens.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/extended-design-tokens.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst useRootBaseClassName = makeStyles({ backgroundColor: 'var(--colorNeutralForeground1)' });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst useRootBaseClassName = makeStyles({\\n  backgroundColor: 'var(--buttonBackgroundColorRest, var(--colorNeutralForeground1))',\\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Slider Step Destructuring in useSlider\nDESCRIPTION: Code modification for correctly destructuring the snapToStep property in the useSlider hook, improving slider functionality and parameter handling\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-slider/library/CHANGELOG.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nDestructure snapToStep correctly for useSlider\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-shared-contexts version\nDESCRIPTION: This patch updates the version of the `@fluentui/react-shared-contexts` dependency.  Bumping this package ensures that the `@fluentui/react-badge` component uses the latest features and bug fixes available in the shared contexts package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nBump @fluentui/react-shared-contexts to v9.19.1 ([PR #31998](https://github.com/microsoft/fluentui/pull/31998) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Downloading FluentUI Vite Template\nDESCRIPTION: This snippet demonstrates the use of `npx degit` to download a FluentUI example project specific to Vite.js. This command clones the starter template into a local directory named `react-components-vite` and requires `npx` to be installed.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/starter-templates/src/react-components-vite/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx degit microsoft/fluentui/starter-templates/src/react-components-vite\ncd react-components-vite\n```\n\n----------------------------------------\n\nTITLE: Defining Motion Types and State in TypeScript\nDESCRIPTION: Defines types and structure for the motion state and shorthand used in the motion tracking system.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/component-transitions-on-mount-or-unmount.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Types\nexport type MotionType = 'unmounted' | 'entering' | 'entered' | 'idle' | 'exiting' | 'exited';\n\nexport type MotionState<Element extends HTMLElement = HTMLElement> = {\n  /**\n   * Ref to the element.\n   */\n  ref: React.Ref<Element>;\n\n  /**\n   * Current state of the element.\n   *\n   * - `unmounted` - The element is not yet rendered or can be safely removed from the DOM.\n   * - `entering` - The element is performing enter animation.\n   * - `entered` - The element has finished enter animation.\n   * - `idle` - The element is currently not animating, but rendered on screen.\n   * - `exiting` - The element is performing exit animation.\n   * - `exited` - The element has finished exit animation.\n   */\n  type: MotionType;\n\n  /**\n   * Indicates whether the component is currently rendered and visible.\n   * Useful to apply CSS transitions only when the element is active.\n   */\n  active: boolean;\n\n  /**\n   * Indicates whether the component can be rendered.\n   * This can be used to avoid rendering the component when it is not visible anymore.\n   */\n  canRender: boolean;\n};\n\nexport type MotionShorthandValue = boolean;\n\nexport type MotionShorthand<Element extends HTMLElement = HTMLElement> = MotionShorthandValue | MotionState<Element>;\n\ntype MotionOptions = {\n  /**\n   * Whether to animate the element on first mount. Useful when the animation/transition\n   * should be played if the element is already rendered on screen.\n   *\n   * @default false\n   */\n  animateOnFirstMount: false;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Card Component Props and State in TypeScript\nDESCRIPTION: This snippet defines the props and state types for a Card component in TypeScript, illustrating the usage of a default appearance value for component behavior enforcement.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/no-action-prop-value-standardization.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Card.types.ts\n\ntype CardProps = {\n  appearance?: 'filled' | 'filled-alternative' | 'outline' | 'subtle';\n};\ntype CardState = {\n  // Required as we need a value for our hooks to work\n  appearance: 'filled' | 'filled-alternative' | 'outline' | 'subtle';\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// useCard.ts\n\nconst { appearance = 'filled' /* {...} */ } = props; // Default applied to enforce behavior\n\nconst state = {\n  appearance,\n  // {...}\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// useCardStyles.ts\n\nconst appearanceLookup = {\n  filled: styles.filled,\n  'filled-alternative': styles.filledAlternative,\n  outline: styles.outline,\n  subtle: styles.subtle,\n} as const;\n\nstate.root.className = mergeClasses(\n  cardClassNames.root,\n  styles.root,\n  appearanceLookup[state.appearance],\n  // {...}\n  state.root.className,\n);\n```\n\n----------------------------------------\n\nTITLE: Migrating Button Style Variables in React\nDESCRIPTION: Demonstrates how to migrate boolean variables used for styling in @fluentui/react-northstar to className-based styling in @fluentui/react-components using makeStyles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Button.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// in COMPONENT_NAME.tsx\nimport { Button } from '@fluentui/react-northstar';\n\nexport const Component = () => <Button variables={{ isActionButton: true }} />;\n\n// in button-styles.ts\nexport const buttonStyles1 = {\n  root: ({ variables: { isActionButton } }) => ({\n    ...(isActionButton && {\n      color: colors.grey['250'],\n    }),\n  }),\n};\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// in COMPONENT_NAME.tsx\nimport { Button } from '@fluentui/react-components';\nimport { useStyles } from './COMPONENT_NAME.styles.ts';\n\nexport const Component = () => {\n  const classes = useStyles();\n  return <Button className={classes.actionButton}></Button>;\n};\n\n// in COMPONENT_NAME.styles.ts\nimport { makeStyles, tokens } from '@fluentui/react-components';\n\nexport const useStyles = makeStyles({\n  actionButton: {\n    color: colors.colorNeutralForeground1,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating CSS pseudo-elements in FluentUI React Table\nDESCRIPTION: This change updates the CSS pseudo-element syntax from `:after` to `::after` in the FluentUI React Table component. This is a chore update to align with modern CSS standards and best practices.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-table/library/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n\"chore: change :after to ::after ([PR #32236](https://github.com/microsoft/fluentui/pull/32236) by seanmonahan@microsoft.com)\"\n```\n\n----------------------------------------\n\nTITLE: Converting Generic Motion Definition to Griffel Style\nDESCRIPTION: Example showing how to convert a generic motion definition to a Griffel-specific style using a helper function. Part of the discarded CSS-based approach.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/motion-definition-n-apis.md#2025-04-20_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeStyles, tokens } from '@fluentui/react-components';\nimport { type CSSMotionAtom, toGriffelStyle } from 'some-pkg';\n\nconst fadeEnterSlow: CSSMotionAtom = {\n  keyframes: {\n    from: { opacity: 0 },\n    to: { opacity: 1 },\n  },\n  fillMode: 'forwards',\n  duration: tokens.durationSlow,\n  timingFunction: tokens.accelerateMax,\n};\n\nconst useStyles = makeStyles({\n  root: {\n    ...toGriffelStyle(fadeEnterSlow),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: CalendarStrings Interface for Localization\nDESCRIPTION: Interface defining string resources for calendar components, enabling localization and accessibility with appropriate ARIA labels.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-calendar-compat/library/etc/react-calendar-compat.api.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface CalendarStrings extends DateGridStrings {\n    closeButtonAriaLabel?: string;\n    dayMarkedAriaLabel?: string;\n    goToToday: string;\n    monthPickerHeaderAriaLabel?: string;\n    nextMonthAriaLabel?: string;\n    nextYearAriaLabel?: string;\n    nextYearRangeAriaLabel?: string;\n    prevMonthAriaLabel?: string;\n    prevYearAriaLabel?: string;\n    prevYearRangeAriaLabel?: string;\n    selectedDateFormatString?: string;\n    todayDateFormatString?: string;\n    weekNumberFormatString?: string;\n    yearPickerHeaderAriaLabel?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Grid Template Migration\nDESCRIPTION: Demonstrates migration of complex grid templates using style overrides\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Grid.stories.mdx#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// in COMPONENT_NAME.tsx\nimport { Grid } from '@fluentui/react-northstar';\n\nexport const Component = () => <Grid columns=\"5\" rows=\"2fr repeat(2, 1fr)\" />;\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// in COMPONENT_NAME.tsx\nimport { Grid } from '@fluentui/react-migration-v0-v9';\nimport { useStyles } from './COMPONENT_NAME.styles.ts';\n\nexport const Component = () => {\n  const classes = useStyles();\n\n  return <Grid className={classes.root} />;\n};\n\n// in COMPONENT_NAME.styles.ts\nimport { makeStyles, grid } from '@fluentui/react-migration-v0-v9';\n\nexport const useStyles = makeStyles({\n  root: {\n    ...grid.columns('5'),\n    ...grid.rows('2fr repeat(2, 1fr)'),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: FluentUI React Swatch Picker Type Definitions\nDESCRIPTION: TypeScript type definitions and exports for the FluentUI React Swatch Picker component including component props, state interfaces, context values, and utility functions for handling color swatches, image swatches, and empty swatches.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-swatch-picker/library/etc/react-swatch-picker.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"react\" />\n\nimport type { ComponentProps } from '@fluentui/react-utilities';\nimport type { ComponentState } from '@fluentui/react-utilities';\nimport type { ContextSelector } from '@fluentui/react-context-selector';\nimport type { EventData } from '@fluentui/react-utilities';\nimport type { EventHandler } from '@fluentui/react-utilities';\nimport type { ForwardRefComponent } from '@fluentui/react-utilities';\nimport * as React_2 from 'react';\nimport type { Slot } from '@fluentui/react-utilities';\nimport type { SlotClassNames } from '@fluentui/react-utilities';\n\n// @public\nexport const ColorSwatch: ForwardRefComponent<ColorSwatchProps>;\n\n// @public (undocumented)\nexport const colorSwatchClassNames: SlotClassNames<ColorSwatchSlots>;\n\n// @public\nexport type ColorSwatchProps = ComponentProps<ColorSwatchSlots> & Pick<SwatchPickerProps, 'size' | 'shape'> & {\n    borderColor?: string;\n    color: string;\n    disabled?: boolean;\n    value: string;\n};\n\n// @public (undocumented)\nexport type ColorSwatchSlots = {\n    root: NonNullable<Slot<'button'>>;\n    icon?: Slot<'span'>;\n    disabledIcon?: Slot<'span'>;\n};\n\n// @public\nexport type ColorSwatchState = ComponentState<ColorSwatchSlots> & Pick<ColorSwatchProps, 'color' | 'disabled' | 'size' | 'shape' | 'value'> & {\n    selected: boolean;\n};\n\n// @public\nexport const EmptySwatch: ForwardRefComponent<EmptySwatchProps>;\n\n// @public (undocumented)\nexport const emptySwatchClassNames: SlotClassNames<EmptySwatchSlots>;\n\n// @public\nexport type EmptySwatchProps = ComponentProps<EmptySwatchSlots> & Pick<SwatchPickerProps, 'size' | 'shape'>;\n\n// @public (undocumented)\nexport type EmptySwatchSlots = {\n    root: Slot<'button'>;\n};\n\n// @public\nexport type EmptySwatchState = ComponentState<EmptySwatchSlots> & Pick<EmptySwatchProps, 'size' | 'shape'>;\n\n// @public\nexport const ImageSwatch: ForwardRefComponent<ImageSwatchProps>;\n\n// @public (undocumented)\nexport const imageSwatchClassNames: SlotClassNames<ImageSwatchSlots>;\n\n// @public\nexport type ImageSwatchProps = ComponentProps<ImageSwatchSlots> & Pick<SwatchPickerProps, 'size' | 'shape'> & {\n    src: string;\n    value: string;\n};\n\n// @public (undocumented)\nexport type ImageSwatchSlots = {\n    root: Slot<'button'>;\n};\n\n// @public\nexport type ImageSwatchState = ComponentState<ImageSwatchSlots> & Pick<ImageSwatchProps, 'color' | 'size' | 'shape' | 'value'> & {\n    selected: boolean;\n};\n\n// @public\nexport const renderColorSwatch_unstable: (state: ColorSwatchState) => JSX.Element;\n\n// @public\nexport const renderEmptySwatch_unstable: (state: EmptySwatchState) => JSX.Element;\n\n// @public\nexport const renderImageSwatch_unstable: (state: ImageSwatchState) => JSX.Element;\n\n// @public\nexport const renderSwatchPicker_unstable: (state: SwatchPickerState, contextValues: SwatchPickerContextValues) => JSX.Element;\n\n// @public (undocumented)\nexport const renderSwatchPickerGrid: (props: SwatchPickerGridProps) => JSX.Element[];\n\n// @public\nexport const renderSwatchPickerRow_unstable: (state: SwatchPickerRowState) => JSX.Element;\n\n// @public (undocumented)\nexport const swatchCSSVars: {\n    color: string;\n    borderColor: string;\n};\n\n// @public\nexport const SwatchPicker: ForwardRefComponent<SwatchPickerProps>;\n\n// @public (undocumented)\nexport const swatchPickerClassNames: SlotClassNames<SwatchPickerSlots>;\n\n// @public (undocumented)\nexport const swatchPickerContextDefaultValue: SwatchPickerContextValue;\n\n// @public\nexport type SwatchPickerContextValue = Pick<SwatchPickerProps, 'size' | 'shape' | 'spacing' | 'selectedValue'> & {\n    isGrid: boolean;\n    requestSelectionChange: (event: React_2.MouseEvent<HTMLButtonElement>, data: {\n        selectedValue: string;\n        selectedSwatch: string;\n    }) => void;\n};\n\n// @public (undocumented)\nexport type SwatchPickerContextValues = {\n    swatchPicker: SwatchPickerContextValue;\n};\n\n// @public (undocumented)\nexport type SwatchPickerGridProps = {\n    items: SwatchProps[];\n    columnCount: number;\n    renderRow?: (props: {\n        children: JSX.Element[];\n        rowId: string | number;\n    }) => JSX.Element;\n    renderSwatch?: (item: SwatchProps) => JSX.Element;\n};\n\n// @public (undocumented)\nexport type SwatchPickerOnSelectEventHandler = EventHandler<SwatchPickerOnSelectionChangeData>;\n\n// @public (undocumented)\nexport type SwatchPickerOnSelectionChangeData = EventData<'click', React_2.MouseEvent<HTMLButtonElement>> & {\n    selectedValue: string;\n    selectedSwatch: string;\n};\n\n// @public\nexport type SwatchPickerProps = ComponentProps<SwatchPickerSlots> & {\n    defaultSelectedValue?: string;\n    layout?: 'row' | 'grid';\n    onSelectionChange?: EventHandler<SwatchPickerOnSelectionChangeData>;\n    selectedValue?: string;\n    size?: 'extra-small' | 'small' | 'medium' | 'large';\n    shape?: 'rounded' | 'square' | 'circular';\n    spacing?: 'small' | 'medium';\n};\n\n// @public (undocumented)\nexport const SwatchPickerProvider: React_2.Provider<SwatchPickerContextValue> & React_2.FC<React_2.ProviderProps<SwatchPickerContextValue>>;\n\n// @public\nexport const SwatchPickerRow: ForwardRefComponent<SwatchPickerRowProps>;\n\n// @public (undocumented)\nexport const swatchPickerRowClassNames: SlotClassNames<SwatchPickerRowSlots>;\n\n// @public\nexport type SwatchPickerRowProps = ComponentProps<SwatchPickerRowSlots>;\n\n// @public (undocumented)\nexport type SwatchPickerRowSlots = {\n    root: Slot<'div'>;\n};\n\n// @public\nexport type SwatchPickerRowState = ComponentState<SwatchPickerRowSlots> & Pick<SwatchPickerProps, 'spacing'>;\n\n// @public (undocumented)\nexport type SwatchPickerSlots = {\n    root: Slot<'div'>;\n};\n\n// @public\nexport type SwatchPickerState = ComponentState<SwatchPickerSlots> & SwatchPickerContextValue & Pick<SwatchPickerProps, 'layout' | 'size' | 'shape' | 'spacing'> & {\n    isGrid: boolean;\n};\n\n// @public (undocumented)\nexport type SwatchProps = ImageSwatchProps | ColorSwatchProps;\n\n// @public\nexport const useColorSwatch_unstable: (props: ColorSwatchProps, ref: React_2.Ref<HTMLButtonElement>) => ColorSwatchState;\n\n// @public\nexport const useColorSwatchStyles_unstable: (state: ColorSwatchState) => ColorSwatchState;\n\n// @public\nexport const useEmptySwatch_unstable: (props: EmptySwatchProps, ref: React_2.Ref<HTMLButtonElement>) => EmptySwatchState;\n\n// @public\nexport const useEmptySwatchStyles_unstable: (state: EmptySwatchState) => EmptySwatchState;\n\n// @public\nexport const useImageSwatch_unstable: (props: ImageSwatchProps, ref: React_2.Ref<HTMLButtonElement>) => ImageSwatchState;\n\n// @public\nexport const useImageSwatchStyles_unstable: (state: ImageSwatchState) => ImageSwatchState;\n\n// @public\nexport const useSwatchPicker_unstable: (props: SwatchPickerProps, ref: React_2.Ref<HTMLDivElement>) => SwatchPickerState;\n\n// @public (undocumented)\nexport const useSwatchPickerContextValue_unstable: <T>(selector: ContextSelector<SwatchPickerContextValue, T>) => T;\n\n// @public (undocumented)\nexport const useSwatchPickerContextValues: (state: SwatchPickerState) => SwatchPickerContextValues;\n\n// @public\nexport const useSwatchPickerRow_unstable: (props: SwatchPickerRowProps, ref: React_2.Ref<HTMLDivElement>) => SwatchPickerRowState;\n\n// @public\nexport const useSwatchPickerRowStyles_unstable: (state: SwatchPickerRowState) => SwatchPickerRowState;\n\n// @public\nexport const useSwatchPickerStyles_unstable: (state: SwatchPickerState) => SwatchPickerState;\n```\n\n----------------------------------------\n\nTITLE: Accessible Markup for Trapping Focus Popover\nDESCRIPTION: This code depicts the accessible markup for a popover that traps focus, implementing aria-hidden on non-interactive elements and confirming focus trapping within the modal dialog structure.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-popover/library/docs/Spec.md#2025-04-20_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n<div aria-hidden=\"true\" /> // other content\n<div aria-hidden=\"true\" /> // other content\n<div aria-hidden=\"true\" className='fui-provider'>\n  <button aria-expanded=\"false\">Trigger</button>\n</div>\n\n<div role=\"dialog\" aria-modal=\"true\">\n  Focus trapped\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining TextArea Appearance Constants and Types in TypeScript\nDESCRIPTION: Defines constants and types for TextArea appearance options (outline, filledLighter, filledDarker) and exports an array of appearances that can display shadows.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_75\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"TextAreaAppearance\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport const TextAreaAppearance: {\n    readonly outline: \"outline\";\n    readonly filledLighter: \"filled-lighter\";\n    readonly filledDarker: \"filled-darker\";\n};\n\n// @public (undocumented)\nexport type TextAreaAppearance = ValuesOf<typeof TextAreaAppearance>;\n\n// @public\nexport const TextAreaAppearancesForDisplayShadow: Partial<TextAreaAppearance[]>;\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.72.2\nDESCRIPTION: This entry records the version bump of the '@fluentui/react' package to 8.72.2, ensuring the library includes important updates.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/theming-designer/CHANGELOG.md#2025-04-20_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.72.2 ([PR #23266](https://github.com/microsoft/fluentui/pull/23266) by beachball)\n```\n\n----------------------------------------\n\nTITLE: AlphaSlider DOM Structure\nDESCRIPTION: The HTML DOM structure for the AlphaSlider component, showing an input element for the slider, a rail for visual representation, and a thumb element for selection of alpha values.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-color-picker/library/docs/Spec.md#2025-04-20_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"fui-AlphaSlider\" role=\"group\">\n  <input id=\"slider\" type=\"range\"  value=\"100\" aria-label=\"red\">\n  <div class=\"fui-AlphaSlider__rail\" ></div>\n  <div class=\"fui-AlphaSlider__thumb\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Meta Component\nDESCRIPTION: Import statement for the Meta component from Storybook's addon-docs library, used for documentation configuration.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Accessibility/AccessibleExperiences.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs';\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Beta.10\nDESCRIPTION: Changelog markdown showing version comparison and changes made in beta.10 release.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.0.0-beta.10](https://github.com/microsoft/fluentui/tree/@fluentui/react-dialog_v9.0.0-beta.10)\n\nFri, 23 Sep 2022 10:32:29 GMT\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-dialog_v9.0.0-beta.9..@fluentui/react-dialog_v9.0.0-beta.10)\n\n### Changes\n\n- feat: implements DialogContent as a swap of DialogBody ([PR #24855](https://github.com/microsoft/fluentui/pull/24855) by bernardo.sunderhus@gmail.com)\n```\n\n----------------------------------------\n\nTITLE: Importing Sample Themes in JavaScript\nDESCRIPTION: This code snippet demonstrates how to import sample themes from the '@fluentui/theme-samples' package in a JavaScript environment. It allows developers to utilize predefined themes within their Fluent UI React applications for testing and experimentation purposes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/theme-samples/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport { ThemeName } from '@fluentui/theme-samples';\n```\n```\n\n----------------------------------------\n\nTITLE: Menu Component Child Order Example\nDESCRIPTION: Demonstrates the correct and incorrect ordering of Menu component children with MenuTrigger and MenuPopover\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/docs/MIGRATION-NOTES.md#2025-04-20_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App() {\n  return (\n    <>\n      {/* ❌❌❌ */}\n      <Menu>\n        <MenuPopover>\n          <MenuList>\n            <MenuItem> Item </MenuItem>\n            <MenuItem> Item </MenuItem>\n            <MenuItem> Item </MenuItem>\n          </MenuList>\n        </MenuPopover>\n        <MenuTrigger>\n          <button>Menu trigger</button>\n        </MenuTrigger>\n      </Menu>\n\n      {/* ✅✅✅ */}\n      <Menu>\n        <MenuTrigger>\n          <button>Menu trigger</button>\n        </MenuTrigger>\n        <MenuPopover>\n          <MenuList>\n            <MenuItem> Item </MenuItem>\n            <MenuItem> Item </MenuItem>\n            <MenuItem> Item </MenuItem>\n          </MenuList>\n        </MenuPopover>\n      </Menu>\n\n      {/* ✅✅✅ */}\n      <Menu>\n        <WrapperElement>\n          <MenuTrigger>\n            <button>Menu trigger</button>\n          </MenuTrigger>\n        </WrapperElement>\n        <MenuPopover>\n          <MenuList>\n            <MenuItem> Item </MenuItem>\n            <MenuItem> Item </MenuItem>\n            <MenuItem> Item </MenuItem>\n          </MenuList>\n        </MenuPopover>\n      </Menu>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: FluentUI Icon Name Enumeration (TypeScript)\nDESCRIPTION: A portion of an enum that defines icon name constants for the FluentUI library. Each enum entry maps a symbolic name to a matching string literal, representing available icons in the library. All entries are marked as undocumented.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/font-icons-mdl2/etc/font-icons-mdl2.api.md#2025-04-20_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n    // (undocumented)\n    OfficeVideoLogoInverse = \"OfficeVideoLogoInverse\",\n    // (undocumented)\n    OfflineOneDriveParachute = \"OfflineOneDriveParachute\",\n    // (undocumented)\n    OfflineOneDriveParachuteDisabled = \"OfflineOneDriveParachuteDisabled\",\n    // (undocumented)\n    OfflineStorage = \"OfflineStorage\",\n    // (undocumented)\n    OfflineStorageSolid = \"OfflineStorageSolid\",\n    // (undocumented)\n    Onboarding = \"Onboarding\",\n    // (undocumented)\n    OneDriveAdd = \"OneDriveAdd\",\n    // (undocumented)\n    OneDriveFolder16 = \"OneDriveFolder16\",\n    // (undocumented)\n    OneDriveLogo = \"OneDriveLogo\",\n    // (undocumented)\n    OneNoteEduLogoInverse = \"OneNoteEduLogoInverse\",\n    // (undocumented)\n    OneNoteLogo = \"OneNoteLogo\",\n    // (undocumented)\n    OneNoteLogo16 = \"OneNoteLogo16\",\n    // (undocumented)\n    OneNoteLogoFill = \"OneNoteLogoFill\",\n    // (undocumented)\n    OneNoteLogoFill16 = \"OneNoteLogoFill16\",\n    // (undocumented)\n    OneNoteLogoInverse = \"OneNoteLogoInverse\",\n    // (undocumented)\n    OneNoteLogoInverse16 = \"OneNoteLogoInverse16\",\n    // (undocumented)\n    OpenEnrollment = \"OpenEnrollment\",\n    // (undocumented)\n    OpenFile = \"OpenFile\",\n    // (undocumented)\n    OpenFolderHorizontal = \"OpenFolderHorizontal\",\n    // (undocumented)\n    OpenInNewTab = \"OpenInNewTab\",\n    // (undocumented)\n    OpenInNewWindow = \"OpenInNewWindow\",\n    // (undocumented)\n    OpenPane = \"OpenPane\",\n    // (undocumented)\n    OpenPaneMirrored = \"OpenPaneMirrored\",\n    // (undocumented)\n    OpenSource = \"OpenSource\",\n    // (undocumented)\n    Org = \"Org\",\n    // (undocumented)\n    Orientation = \"Orientation\",\n    // (undocumented)\n    Orientation2 = \"Orientation2\",\n    // (undocumented)\n    OutlookLogo = \"OutlookLogo\",\n    // (undocumented)\n    OutlookLogo16 = \"OutlookLogo16\",\n    // (undocumented)\n    OutlookLogoFill = \"OutlookLogoFill\",\n    // (undocumented)\n    OutlookLogoFill16 = \"OutlookLogoFill16\",\n    // (undocumented)\n    OutlookLogoInverse = \"OutlookLogoInverse\",\n    // (undocumented)\n    OutlookLogoInverse16 = \"OutlookLogoInverse16\",\n    // (undocumented)\n    OutOfOffice = \"OutOfOffice\",\n    // (undocumented)\n    Package = \"Package\",\n    // (undocumented)\n    Packages = \"Packages\",\n    // (undocumented)\n    Padding = \"Padding\",\n    // (undocumented)\n    PaddingBottom = \"PaddingBottom\",\n    // (undocumented)\n    PaddingLeft = \"PaddingLeft\",\n    // (undocumented)\n    PaddingRight = \"PaddingRight\",\n    // (undocumented)\n    PaddingTop = \"PaddingTop\",\n    // (undocumented)\n    Page = \"Page\",\n    // (undocumented)\n    PageAdd = \"PageAdd\",\n    // (undocumented)\n    PageArrowRight = \"PageArrowRight\",\n    // (undocumented)\n    PageCheckedin = \"PageCheckedin\",\n    // (undocumented)\n    PageCheckedOut = \"PageCheckedOut\",\n    // (undocumented)\n    PageData = \"PageData\",\n    // (undocumented)\n    PageEdit = \"PageEdit\",\n    // (undocumented)\n    PageHeader = \"PageHeader\",\n    // (undocumented)\n    PageHeaderEdit = \"PageHeaderEdit\",\n    // (undocumented)\n    PageLeft = \"PageLeft\",\n    // (undocumented)\n    PageLink = \"PageLink\",\n    // (undocumented)\n    PageList = \"PageList\",\n    // (undocumented)\n    PageListFilter = \"PageListFilter\",\n    // (undocumented)\n    PageListMirroredSolid = \"PageListMirroredSolid\",\n    // (undocumented)\n    PageListSolid = \"PageListSolid\",\n    // (undocumented)\n    PageLock = \"PageLock\",\n    // (undocumented)\n    PageRemove = \"PageRemove\",\n    // (undocumented)\n    PageRight = \"PageRight\",\n    // (undocumented)\n    PageShared = \"PageShared\",\n    // (undocumented)\n    PageSolid = \"PageSolid\",\n    // (undocumented)\n    PanoIndicator = \"PanoIndicator\",\n    // (undocumented)\n    Parachute = \"Parachute\",\n    // (undocumented)\n    ParachuteSolid = \"ParachuteSolid\",\n    // (undocumented)\n    Parameter = \"Parameter\",\n    // (undocumented)\n    ParkingLocation = \"ParkingLocation\",\n    // (undocumented)\n    ParkingLocationMirrored = \"ParkingLocationMirrored\",\n    // (undocumented)\n    ParkingMirroredSolid = \"ParkingMirroredSolid\",\n    // (undocumented)\n    ParkingSolid = \"ParkingSolid\",\n    // (undocumented)\n    PartlyCloudyDay = \"PartlyCloudyDay\",\n    // (undocumented)\n    PartlyCloudyNight = \"PartlyCloudyNight\",\n    // (undocumented)\n    PartyLeader = \"PartyLeader\",\n    // (undocumented)\n    PassiveAuthentication = \"PassiveAuthentication\",\n    // (undocumented)\n    PasswordField = \"PasswordField\",\n    // (undocumented)\n    Paste = \"Paste\",\n    // (undocumented)\n    PasteAsCode = \"PasteAsCode\",\n    // (undocumented)\n    PasteAsText = \"PasteAsText\",\n    // (undocumented)\n    Pause = \"Pause\",\n    // (undocumented)\n    PaymentCard = \"PaymentCard\",\n    // (undocumented)\n    PC1 = \"PC1\",\n    // (undocumented)\n    PDF = \"PDF\",\n    // (undocumented)\n    PencilReply = \"PencilReply\",\n    // (undocumented)\n    Pentagon = \"Pentagon\",\n    // (undocumented)\n    PenWorkspace = \"PenWorkspace\",\n    // (undocumented)\n    People = \"People\",\n    // (undocumented)\n    PeopleAdd = \"PeopleAdd\",\n    // (undocumented)\n    PeopleAlert = \"PeopleAlert\",\n    // (undocumented)\n    PeopleBlock = \"PeopleBlock\",\n    // (undocumented)\n    PeoplePause = \"PeoplePause\",\n    // (undocumented)\n    PeopleRepeat = \"PeopleRepeat\",\n    // (undocumented)\n    Permissions = \"Permissions\",\n    // (undocumented)\n    PermissionsSolid = \"PermissionsSolid\",\n    // (undocumented)\n    Personalize = \"Personalize\",\n    // (undocumented)\n    Phishing = \"Phishing\",\n    // (undocumented)\n    Phone = \"Phone\",\n    // (undocumented)\n    Photo = \"Photo\",\n    // (undocumented)\n    Photo2 = \"Photo2\",\n    // (undocumented)\n    Photo2Add = \"Photo2Add\",\n    // (undocumented)\n    Photo2Fill = \"Photo2Fill\",\n    // (undocumented)\n    Photo2Remove = \"Photo2Remove\",\n    // (undocumented)\n    PhotoCollection = \"PhotoCollection\",\n    // (undocumented)\n    PhotoVideoMedia = \"PhotoVideoMedia\",\n    // (undocumented)\n    Picture = \"Picture\",\n    // (undocumented)\n    PictureCenter = \"PictureCenter\",\n    // (undocumented)\n    PictureFill = \"PictureFill\",\n    // (undocumented)\n    PictureLibrary = \"PictureLibrary\",\n    // (undocumented)\n    PicturePosition = \"PicturePosition\",\n    // (undocumented)\n    PictureStretch = \"PictureStretch\",\n    // (undocumented)\n    PictureTile = \"PictureTile\",\n    // (undocumented)\n    PieDouble = \"PieDouble\",\n    // (undocumented)\n    PieSingle = \"PieSingle\",\n    // (undocumented)\n    PieSingleSolid = \"PieSingleSolid\",\n    // (undocumented)\n    Pill = \"Pill\",\n    // (undocumented)\n    Pin = \"Pin\",\n    // (undocumented)\n    Pinned = \"Pinned\",\n    // (undocumented)\n    PinnedFill = \"PinnedFill\",\n    // (undocumented)\n    PinnedSolid = \"PinnedSolid\",\n    // (undocumented)\n    PinSolid12 = \"PinSolid12\",\n    // (undocumented)\n    PinSolidOff12 = \"PinSolidOff12\",\n    // (undocumented)\n    PivotChart = \"PivotChart\",\n    // (undocumented)\n    PlainText = \"PlainText\",\n    // (undocumented)\n    PlannerLogo = \"PlannerLogo\",\n    // (undocumented)\n    PlanView = \"PlanView\",\n    // (undocumented)\n    Play = \"Play\",\n    // (undocumented)\n    PlaybackRate1x = \"PlaybackRate1x\",\n    // (undocumented)\n    PlayerSettings = \"PlayerSettings\",\n    // (undocumented)\n    PlayResume = \"PlayResume\",\n    // (undocumented)\n    PlayReverse = \"PlayReverse\",\n    // (undocumented)\n    PlayReverseResume = \"PlayReverseResume\",\n    // (undocumented)\n    Plug = \"Plug\",\n    // (undocumented)\n    PlugConnected = \"PlugConnected\",\n    // (undocumented)\n    PlugDisconnected = \"PlugDisconnected\",\n    // (undocumented)\n    PlugSolid = \"PlugSolid\",\n    // (undocumented)\n    POI = \"POI\",\n    // (undocumented)\n    POISolid = \"POISolid\",\n    // (undocumented)\n    PollResults = \"PollResults\",\n    // (undocumented)\n    PostUpdate = \"PostUpdate\",\n    // (undocumented)\n    PowerApps = \"PowerApps\",\n    // (undocumented)\n    PowerApps2Logo = \"PowerApps2Logo\",\n    // (undocumented)\n    PowerAppsLogo = \"PowerAppsLogo\",\n    // (undocumented)\n    PowerBILogo = \"PowerBILogo\",\n    // (undocumented)\n    PowerBILogo16 = \"PowerBILogo16\",\n    // (undocumented)\n    PowerBILogoBackplate16 = \"PowerBILogoBackplate16\",\n    // (undocumented)\n    PowerButton = \"PowerButton\",\n    // (undocumented)\n    PowerPointDocument = \"PowerPointDocument\",\n    // (undocumented)\n    PowerPointLogo = \"PowerPointLogo\",\n    // (undocumented)\n    PowerPointLogo16 = \"PowerPointLogo16\",\n    // (undocumented)\n    PowerPointLogoFill = \"PowerPointLogoFill\",\n    // (undocumented)\n    PowerPointLogoFill16 = \"PowerPointLogoFill16\",\n    // (undocumented)\n    PowerPointLogoInverse = \"PowerPointLogoInverse\",\n    // (undocumented)\n    PowerPointLogoInverse16 = \"PowerPointLogoInverse16\",\n    // (undocumented)\n    Precipitation = \"Precipitation\",\n    // (undocumented)\n    PresenceChickletVideo = \"PresenceChickletVideo\",\n    // (undocumented)\n    Presentation = \"Presentation\",\n    // (undocumented)\n    Presentation12 = \"Presentation12\",\n    // (undocumented)\n    Preview = \"Preview\",\n    // (undocumented)\n    PreviewLink = \"PreviewLink\",\n    // (undocumented)\n    Previous = \"Previous\",\n    // (undocumented)\n    PrimaryCalendar = \"PrimaryCalendar\",\n    // (undocumented)\n    Print = \"Print\",\n    // (undocumented)\n    PrintfaxPrinterFile = \"PrintfaxPrinterFile\",\n    // (undocumented)\n    Processing = \"Processing\",\n    // (undocumented)\n    ProcessMetaTask = \"ProcessMetaTask\",\n    // (undocumented)\n    Product = \"Product\",\n    // (undocumented)\n    ProductCatalog = \"ProductCatalog\",\n    // (undocumented)\n    ProductionFloorManagement = \"ProductionFloorManagement\",\n    // (undocumented)\n    ProductList = \"ProductList\",\n    // (undocumented)\n    ProductRelease = \"ProductRelease\",\n    // (undocumented)\n    ProductVariant = \"ProductVariant\",\n    // (undocumented)\n    ProfileSearch = \"ProfileSearch\",\n    // (undocumented)\n    ProFootball = \"ProFootball\",\n    // (undocumented)\n    ProgressLoopInner = \"ProgressLoopInner\",\n    // (undocumented)\n    ProgressLoopOuter = \"ProgressLoopOuter\",\n```\n\n----------------------------------------\n\nTITLE: Default Link DOM Structure Suggestion\nDESCRIPTION: Proposes a standard anchor tag structure for Links across libraries, focusing on class application and href usage. Applicable for recomposition scenarios.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Link.md#2025-04-20_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<a class=\\\"root\\\" href=\\\"{href}\\\">{children}</a>\n```\n\n----------------------------------------\n\nTITLE: FluentUI React Combobox Changelog Entry Beta.12\nDESCRIPTION: Version 9.0.0-beta.12 changelog entry documenting fixes for dropdown arrow layout and scroll behavior, plus context exports.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/library/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.0.0-beta.12](https://github.com/microsoft/fluentui/tree/@fluentui/react-combobox_v9.0.0-beta.12)\n\nThu, 13 Oct 2022 11:02:45 GMT\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-combobox_v9.0.0-beta.11..@fluentui/react-combobox_v9.0.0-beta.12)\n\n### Changes\n\n- chore: Update Griffel to latest version ([PR #25075](https://github.com/microsoft/fluentui/pull/25075) by olfedias@microsoft.com)\n- fix: add ScrollIntoView hook for Listbox options ([PR #25080](https://github.com/microsoft/fluentui/pull/25080) by sarah.higley@microsoft.com)\n- feat: export contexts from react-combobox ([PR #25099](https://github.com/microsoft/fluentui/pull/25099) by sarah.higley@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Updating FluentUI React Button Dependencies\nDESCRIPTION: Example showing changes to package.json dependencies for @fluentui/react-button, demonstrating how to handle both monorepo and external dependencies with fixed versions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/fixed-versions-for-prerelease.md#2025-04-20_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n  \"dependencies\": {\n-    \"@fluentui/keyboard-keys\": \"^9.0.0-alpha.1\",\n-    \"@fluentui/react-icons\": \"^1.1.136\",\n-    \"@fluentui/react-make-styles\": \"^9.0.0-alpha.61\",\n-    \"@fluentui/react-tabster\": \"^9.0.0-alpha.55\",\n-    \"@fluentui/react-utilities\": \"^9.0.0-alpha.43\",\n+    \"@fluentui/keyboard-keys\": \"9.0.0-alpha.1\",\n+    \"@fluentui/react-icons\": \"^1.1.136\",\n+    \"@fluentui/react-make-styles\": \"9.0.0-alpha.61\",\n+    \"@fluentui/react-tabster\": \"9.0.0-alpha.55\",\n+    \"@fluentui/react-utilities\": \"9.0.0-alpha.43\",\n    \"tslib\": \"2.1.0\"\n  },\n```\n\n----------------------------------------\n\nTITLE: Defining Calendar Year Range Interface\nDESCRIPTION: Interface for specifying a range of years with start and end points in a calendar context\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-calendar-compat/library/etc/react-calendar-compat.api.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CalendarYearRange {\n    fromYear: number;\n    toYear: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Bump swc/helpers version\nDESCRIPTION: This change updates the @swc/helpers dependency to version 0.5.1. This likely brings in performance improvements or bug fixes within the swc helpers library which is used during the build process.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-slider/library/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: none\nCODE:\n```\n\"bumps @swc/helpers version to 0.5.1 ([PR #28989](https://github.com/microsoft/fluentui/pull/28989) by bernardo.sunderhus@gmail.com)\"\n```\n\n----------------------------------------\n\nTITLE: URL Utility Function in TypeScript\nDESCRIPTION: A utility function to check if a URL is relative. Takes a URL string as input and returns a boolean indicating whether the URL is relative or not.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_177\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport function isRelativeUrl(url: string): boolean;\n```\n\n----------------------------------------\n\nTITLE: Using Ref Component in FluentUI v0 (TSX)\nDESCRIPTION: This snippet shows how the Ref component was used in FluentUI v0 to wrap a Button component and pass a ref to it. It demonstrates the old pattern that is now deprecated.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Ref.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from '@fluentui/react-northstar';\nconst Component = ({ buttonRef }) => (\n  <Ref innerRef={buttonRef}>\n    <Button content=\"some content\" />\n  </Ref>\n);\n```\n\n----------------------------------------\n\nTITLE: Banning Context Export (Incorrect)\nDESCRIPTION: This code snippet demonstrates the incorrect way to export context objects in Fluent UI, which can lead to unexpected usage and hinder future refactoring. It exports the context directly from the context file, which exposes the internal context object to consumers.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/eslint-plugin/README.md#2025-04-20_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// src/context.ts\nimport * as React from 'react';\nexport const MyContext = React.createContext();\n\n// src/index.ts\nexport { MyContext } from './context';\n```\n\n----------------------------------------\n\nTITLE: Version Comparison Links in Markdown\nDESCRIPTION: Markdown links for comparing changes between different versions of the FluentUI React Provider package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-provider/library/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-provider_v9.0.0-beta.3..@fluentui/react-provider_v9.0.0-beta.4)\n```\n\n----------------------------------------\n\nTITLE: Version History Entry - 9.12.3\nDESCRIPTION: Version update with dependency bump for react-utilities package\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-positioning/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.12.3]\\nWed, 17 Jan 2024 16:18:50 GMT\\n\\n### Patches\\n- Bump @fluentui/react-utilities to v9.16.0\n```\n\n----------------------------------------\n\nTITLE: Displaying Flamegraph Image in HTML\nDESCRIPTION: This HTML snippet embeds an image of a flamegraph, which is used to visualize performance bottlenecks in the code. The image is linked to a full-size version for detailed viewing.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/perf-test-react-components/README.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a target=\"_blank\" href=\"https://user-images.githubusercontent.com/26070760/60136445-07304c00-9759-11e9-882a-33d73575dc15.png\"><img src=\"https://user-images.githubusercontent.com/26070760/60136445-07304c00-9759-11e9-882a-33d73575dc15.png\" width=\"1385\"/></a>\n```\n\n----------------------------------------\n\nTITLE: Displaying PillButtonBar Theme Toggle Example - HTML/MDX\nDESCRIPTION: Example markup showing how to display theme-toggled images of the PillButtonBar component using DisplayToggle component with light and dark mode variants.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/PillButtonBarPage/docs/ios/PillButtonBarOverview.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- prettier-ignore-start -->\n<DisplayToggle onText=\"Dark\" offText=\"Light\" label=\"Theme Switcher\">\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_pillbar_01_light.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_pillbar_01_dark.png?text=DarkMode\" />\n\n</DisplayToggle>\n<!-- prettier-ignore-end -->\n```\n\n----------------------------------------\n\nTITLE: Stateless Component with Arrow Function in React\nDESCRIPTION: This code snippet shows how to define a stateless component using an arrow function in React.  It leverages React's FunctionalComponent type for type safety and clear definition. The component takes props as input and returns JSX to render the UI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/add-a-feature.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst Button: React.FunctionalComponent = props => {\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Migrating Style Variables in Flex Component\nDESCRIPTION: Shows how to migrate boolean variables to makeStyles pattern in v9\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Flex.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// in COMPONENT_NAME.tsx\nimport { Flex } from '@fluentui/react-northstar';\n\nexport const Component = () => <Flex variables={{ isSomething: true }} />;\n\n// in flex-styles.ts\nexport const flexStyles = {\n  root: ({ variables: { isSomething } }) => ({\n    ...(isSomething && { color: 'red' }),\n  }),\n};\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// in COMPONENT_NAME.tsx\nimport { Flex } from '@fluentui/react-migration-v0-v9';\nimport { useStyles } from './COMPONENT_NAME.styles.ts';\n\nexport const Component = () => {\n  const classes = useStyles();\n\n  return <Flex className={classes.root} />;\n};\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// in COMPONENT_NAME.styles.ts\nimport { makeStyles } from '@fluentui/react-migration-v0-v9';\n\nexport const useStyles = makeStyles({\n  root: { color: 'red' },\n});\n```\n\n----------------------------------------\n\nTITLE: Day of Week Enum\nDESCRIPTION: Enumeration representing days of the week with numeric values from 0 to 6\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-calendar-compat/library/etc/react-calendar-compat.api.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum DayOfWeek {\n    Sunday = 0,\n    Monday = 1,\n    Tuesday = 2,\n    Wednesday = 3,\n    Thursday = 4,\n    Friday = 5,\n    Saturday = 6\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Style Overrides in React TSX and TypeScript\nDESCRIPTION: Illustrates how to migrate style overrides using variables in v0 to using makeStyles in v9. This example shows migration for a specific style applied conditionally.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Text.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// in COMPONENT_NAME.tsx\nimport { Text } from '@fluentui/react-northstar';\n\nexport const Component = () => <Text variables={{ enableMainWindowChatHeaderTitleStyles: true }} />;\n\n// in text-styles.ts\nexport const textStyles1 = {\n  root: ({ variables: { enableMainWindowChatHeaderTitleStyles } }) => ({\n    ...(enableMainWindowChatHeaderTitleStyles && {\n      maxWidth: '11rem',\n    }),\n  }),\n};\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// in COMPONENT_NAME.tsx\nimport { StyledText } from '@fluentui/react-migration-v0-v9';\nimport { useStyles } from './COMPONENT_NAME.styles.ts';\n\nexport const Component = () => {\n  const classes = useStyles();\n  return <StyledText className={classes.mainWindowChatHeaderTitle}></StyledText>;\n};\n\n// in COMPONENT_NAME.styles.ts\nimport { makeStyles } from '@fluentui/react-components';\n\nexport const useStyles = makeStyles({\n  mainWindowChatHeaderTitle: {\n    maxWidth: '11rem',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Overflow Manager in TypeScript\nDESCRIPTION: This snippet defines a function that creates an instance of the OverflowManager. It is marked as internal and undocumented, indicating it's meant for internal use.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/priority-overflow/etc/priority-overflow.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport function createOverflowManager(): OverflowManager;\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.112.5\nDESCRIPTION: Moves @fluentui/react to version 8.112.5, enhancing various functionalities and fixing bugs.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluent2-theme/CHANGELOG.md#2025-04-20_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.112.5 ([PR #29699](https://github.com/microsoft/fluentui/pull/29699) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Bumping package versions in FluentUI React Switch\nDESCRIPTION: This code snippet represents a series of patch updates where the versions of dependent packages are bumped. This includes packages such as @fluentui/react-field, @fluentui/react-jsx-runtime, @fluentui/react-label, @fluentui/react-tabster, and @fluentui/react-utilities. Each bump is associated with a pull request.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-switch/library/CHANGELOG.md#2025-04-20_snippet_7\n\nLANGUAGE: none\nCODE:\n```\n\"- Bump @fluentui/react-field to v9.1.22 ([PR #29005](https://github.com/microsoft/fluentui/pull/29005) by beachball)\n- Bump @fluentui/react-jsx-runtime to v9.0.3 ([PR #29005](https://github.com/microsoft/fluentui/pull/29005) by beachball)\n- Bump @fluentui/react-label to v9.1.30 ([PR #29005](https://github.com/microsoft/fluentui/pull/29005) by beachball)\n- Bump @fluentui/react-tabster to v9.12.5 ([PR #29005](https://github.com/microsoft/fluentui/pull/29005) by beachball)\n- Bump @fluentui/react-utilities to v9.13.0 ([PR #29005](https://github.com/microsoft/fluentui/pull/29005) by beachball)\"\n```\n\n----------------------------------------\n\nTITLE: Defining Theme Type in TypeScript\nDESCRIPTION: Defines the Theme type as a record with string keys and string or number values. Marked as internal.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_80\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Warning: (ae-internal-missing-underscore) The name \"Theme\" should be prefixed with an underscore because the declaration is marked as @internal\n//\n// @internal\nexport type Theme = Record<string, string | number>;\n```\n\n----------------------------------------\n\nTITLE: FluentUI React Toast API Types and Definitions\nDESCRIPTION: Comprehensive TypeScript type definitions and component declarations for the FluentUI React Toast component library. Includes types for toast properties, state management, rendering functions, and utility hooks.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-toast/library/etc/react-toast.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"react\" />\n\nimport { ARIAButtonResultProps } from '@fluentui/react-aria';\nimport { ARIAButtonType } from '@fluentui/react-aria';\nimport { BackgroundAppearanceContextValue } from '@fluentui/react-shared-contexts';\nimport type { ComponentProps } from '@fluentui/react-utilities';\nimport type { ComponentState } from '@fluentui/react-utilities';\nimport type { ForwardRefComponent } from '@fluentui/react-utilities';\nimport { JSXElementConstructor } from 'react';\nimport type { PortalProps } from '@fluentui/react-portal';\nimport * as React_2 from 'react';\nimport { ReactElement } from 'react';\nimport type { Slot } from '@fluentui/react-utilities';\nimport type { SlotClassNames } from '@fluentui/react-utilities';\nimport type { TriggerProps } from '@fluentui/react-utilities';\n\n// @public\nexport const renderToast_unstable: (state: ToastState, contextValues: ToastContextValues) => JSX.Element;\n\n// @public\nexport const renderToastBody_unstable: (state: ToastBodyState) => JSX.Element;\n\n// @public\nexport const renderToaster_unstable: (state: ToasterState) => JSX.Element;\n\n// @public\nexport const renderToastFooter_unstable: (state: ToastFooterState) => JSX.Element;\n\n// @public\nexport const renderToastTitle_unstable: (state: ToastTitleState) => JSX.Element;\n\n// @public\nexport const renderToastTrigger_unstable: (state: ToastTriggerState) => ReactElement<any, string | JSXElementConstructor<any>> | null;\n\n// @public\nexport const Toast: ForwardRefComponent<ToastProps>;\n\n// @public\nexport const ToastBody: ForwardRefComponent<ToastBodyProps>;\n\n// @public (undocumented)\nexport const toastBodyClassNames: SlotClassNames<ToastBodySlots>;\n\n// @public\nexport type ToastBodyProps = ComponentProps<ToastBodySlots> & {};\n\n// @public (undocumented)\nexport type ToastBodySlots = {\n    root: Slot<'div'>;\n    subtitle?: Slot<'div'>;\n};\n\n// @public\nexport type ToastBodyState = ComponentState<ToastBodySlots> & {\n    backgroundAppearance: BackgroundAppearanceContextValue;\n};\n\n// @public (undocumented)\nexport const toastClassNames: SlotClassNames<ToastSlots>;\n\n// @public\nexport const Toaster: React_2.FC<ToasterProps>;\n\n// @public (undocumented)\nexport const toasterClassNames: SlotClassNames<ToasterSlots>;\n\n// @public\nexport type ToasterProps = Omit<ComponentProps<ToasterSlots>, 'children'> & Partial<ToasterOptions> & Pick<PortalProps, 'mountNode'> & {\n    announce?: Announce;\n    inline?: boolean;\n};\n\n// @public (undocumented)\nexport type ToasterSlots = {\n    root: Slot<'div'>;\n};\n\n// @public\nexport type ToasterState = ComponentState<ToasterSlotsInternal> & Pick<AriaLiveProps, 'announceRef'> & Pick<PortalProps, 'mountNode'> & Pick<Required<ToasterProps>, 'announce' | 'inline'> & {\n    offset: ToasterOptions['offset'] | undefined;\n    renderAriaLive: boolean;\n    dir: 'rtl' | 'ltr';\n};\n\n// @public\nexport const ToastFooter: ForwardRefComponent<ToastFooterProps>;\n\n// @public (undocumented)\nexport const toastFooterClassNames: SlotClassNames<ToastFooterSlots>;\n\n// @public\nexport type ToastFooterProps = ComponentProps<ToastFooterSlots> & {};\n\n// @public (undocumented)\nexport type ToastFooterSlots = {\n    root: Slot<'div'>;\n};\n\n// @public\nexport type ToastFooterState = ComponentState<ToastFooterSlots>;\n\n// @public (undocumented)\nexport type ToastId = string;\n\n// @public (undocumented)\nexport type ToastIntent = 'info' | 'success' | 'error' | 'warning';\n\n// @public (undocumented)\nexport type ToastOffset = Partial<Record<ToastPosition, ToastOffsetObject>> | ToastOffsetObject;\n\n// @public (undocumented)\nexport type ToastPoliteness = 'assertive' | 'polite';\n\n// @public (undocumented)\nexport type ToastPosition = 'top-end' | 'top-start' | 'bottom-end' | 'bottom-start' | 'top' | 'bottom';\n\n// @public\nexport type ToastProps = ComponentProps<ToastSlots> & {\n    appearance?: BackgroundAppearanceContextValue;\n};\n\n// @public (undocumented)\nexport type ToastSlots = {\n    root: Slot<'div'>;\n};\n\n// @public\nexport type ToastState = ComponentState<ToastSlots> & {\n    backgroundAppearance: BackgroundAppearanceContextValue;\n    intent?: ToastIntent | undefined;\n};\n\n// @public (undocumented)\nexport type ToastStatus = 'queued' | 'visible' | 'dismissed' | 'unmounted';\n\n// @public\nexport const ToastTitle: ForwardRefComponent<ToastTitleProps>;\n\n// @public (undocumented)\nexport const toastTitleClassNames: SlotClassNames<ToastTitleSlots>;\n\n// @public\nexport type ToastTitleProps = ComponentProps<ToastTitleSlots> & {};\n\n// @public (undocumented)\nexport type ToastTitleSlots = {\n    root: NonNullable<Slot<'div'>>;\n    media?: Slot<'div'>;\n    action?: Slot<'div'>;\n};\n\n// @public\nexport type ToastTitleState = ComponentState<ToastTitleSlots> & Pick<ToastContainerContextValue, 'intent'> & {\n    backgroundAppearance: BackgroundAppearanceContextValue;\n};\n\n// @public\nexport const ToastTrigger: React_2.FC<ToastTriggerProps>;\n\n// @public\nexport type ToastTriggerChildProps<Type extends ARIAButtonType = ARIAButtonType, Props = {}> = ARIAButtonResultProps<Type, Props>;\n\n// @public (undocumented)\nexport type ToastTriggerProps = TriggerProps<ToastTriggerChildProps> & {\n    disableButtonEnhancement?: boolean;\n};\n\n// @public (undocumented)\nexport type ToastTriggerState = {\n    children: React_2.ReactElement | null;\n};\n\n// @public\nexport const useToast_unstable: (props: ToastProps, ref: React_2.Ref<HTMLElement>) => ToastState;\n\n// @public\nexport const useToastBody_unstable: (props: ToastBodyProps, ref: React_2.Ref<HTMLElement>) => ToastBodyState;\n\n// @public\nexport const useToastBodyStyles_unstable: (state: ToastBodyState) => ToastBodyState;\n\n// @public (undocumented)\nexport function useToastController(toasterId?: ToasterId): {\n    dispatchToast: (content: React_2.ReactNode, options?: DispatchToastOptions) => void;\n    dismissToast: (toastId: ToastId) => void;\n    dismissAllToasts: () => void;\n    updateToast: (options: UpdateToastOptions) => void;\n    pauseToast: (toastId: ToastId) => void;\n    playToast: (toastId: ToastId) => void;\n};\n\n// @public\nexport const useToaster_unstable: (props: ToasterProps) => ToasterState;\n\n// @public\nexport const useToasterStyles_unstable: (state: ToasterState) => ToasterState;\n\n// @public\nexport const useToastFooter_unstable: (props: ToastFooterProps, ref: React_2.Ref<HTMLElement>) => ToastFooterState;\n\n// @public\nexport const useToastFooterStyles_unstable: (state: ToastFooterState) => ToastFooterState;\n\n// @public\nexport const useToastStyles_unstable: (state: ToastState) => ToastState;\n\n// @public\nexport const useToastTitle_unstable: (props: ToastTitleProps, ref: React_2.Ref<HTMLElement>) => ToastTitleState;\n\n// @public\nexport const useToastTitleStyles_unstable: (state: ToastTitleState) => ToastTitleState;\n\n// @public\nexport const useToastTrigger_unstable: (props: ToastTriggerProps) => ToastTriggerState;\n```\n\n----------------------------------------\n\nTITLE: Recommended DOM structure for Fluent UI Checkbox in HTML\nDESCRIPTION: This HTML snippet represents the recommended DOM structure for a Fluent UI checkbox. It includes a label, a box containing the input (actual checkbox), and an icon for the checkmark.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Checkbox.md#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<label class=\"checkbox-root\">\n  <div class=\"box\">\n    <input class=\"checkbox\" role=\"checkbox\" aria-checked\"false\" aria-label=\"Fluent checkbox\">\n    <i class=\"icon\"></i>\n  </div>\n</label>\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.75.0\nDESCRIPTION: This entry documents the update of '@fluentui/react' to version 8.75.0, providing necessary bug fixes and enhancements to the components. The change was made by 'beachball'.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/theming-designer/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.75.0 ([PR #23528](https://github.com/microsoft/fluentui/pull/23528) by beachball)\n```\n\n----------------------------------------\n\nTITLE: After Conversion Example - JSON Dependencies\nDESCRIPTION: Example showing package.json dependencies after running the RC caret converter, with caret version range.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/rc-caret/README.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@fluentui/react-button\": \"^9.0.0-rc.1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme-Switchable Pivot Controls in FluentUI (JSX)\nDESCRIPTION: This code demonstrates how to display Pivot controls with a theme toggle. It showcases pivot variants with two, three, and four segments, each displayed in both light and dark themes using the DisplayToggle component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/PivotPage/docs/ios/PivotOverview.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<DisplayToggle onText=\"Dark\" offText=\"Light\" label=\"Theme Switcher\">\n### Two\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_pivot_03_twosegments_light.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_pivot_03_twosegments_dark.png?text=DarkMode\" />\n\n### Three\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_pivot_02_threesegments_light.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_pivot_02_threesegments_dark.png?text=DarkMode\" />\n\n### Four\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_pivot_01_foursegments_light.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_pivot_01_foursegments_dark.png?text=DarkMode\" />\n\n</DisplayToggle>\n```\n\n----------------------------------------\n\nTITLE: Alternative Import from Utilities Example\nDESCRIPTION: Alternative approach showing imports from react-utilities package, though potentially less readable.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/handling-keyboard-keys.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ArrowDown, useIsomorphicLayoutEffect, Escape, useEventCallback } from '@fluentui/react-utilities';\n```\n\n----------------------------------------\n\nTITLE: FluentUI Changelog Entry Version 1.0.0\nDESCRIPTION: Version history entry documenting package updates and changes for FluentUI performance test module. Contains dependency version bumps and links to associated pull requests.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/perf-test/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.0.0](https://github.com/microsoft/fluentui/tree/perf-test_v1.0.0)\n\nTue, 30 Mar 2021 07:34:45 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/perf-test_v1.0.0..perf-test_v1.0.0)\n\n### Patches\n\n- Bump @fluentui/react to v8.7.0 ([PR #17584](https://github.com/microsoft/fluentui/pull/17584) by olfedias@microsoft.com)\n\n### Changes\n\n- Bump @fluentui/react-button to v9.0.0-alpha.17 ([PR #17584](https://github.com/microsoft/fluentui/pull/17584) by olfedias@microsoft.com)\n- Bump @fluentui/react-tabs to v1.0.0-beta.73 ([PR #17584](https://github.com/microsoft/fluentui/pull/17584) by olfedias@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Migrating Button with Icon-Only Prop in React\nDESCRIPTION: Shows how to migrate a Button with the 'iconOnly' prop from @fluentui/react-northstar to @fluentui/react-components, including changes in icon import and usage.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Button.stories.mdx#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from '@fluentui/react-northstar';\nconst Component1 = () => <Button icon={<TeamCreateIcon />} iconOnly />;\nconst Component2 = () => <Button icon={<TeamCreateIcon />} iconOnly text />;\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from '@fluentui/react-components';\nimport { PeopleTeamAdd } from '@fluentui/react-components-icons';\nconst Component1 = () => <Button icon={<PeopleTeamAdd />} />;\nconst Component2 = () => <Button icon={<PeopleTeamAdd />} appearance=\"transparent\" />;\n```\n\n----------------------------------------\n\nTITLE: API Declaration for @fluentui/react-breadcrumb Package\nDESCRIPTION: This TypeScript declaration file defines the complete API surface for the @fluentui/react-breadcrumb package, including component types, props interfaces, state definitions, and utility functions. Generated by API Extractor.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-breadcrumb/library/etc/react-breadcrumb.api.md#2025-04-20_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/// <reference types=\"react\" />\n\nimport { ButtonProps } from '@fluentui/react-button';\nimport { ButtonSlots } from '@fluentui/react-button';\nimport { ButtonState } from '@fluentui/react-button';\nimport type { ComponentProps } from '@fluentui/react-utilities';\nimport type { ComponentState } from '@fluentui/react-utilities';\nimport type { ForwardRefComponent } from '@fluentui/react-utilities';\nimport * as React_2 from 'react';\nimport type { Slot } from '@fluentui/react-utilities';\nimport type { SlotClassNames } from '@fluentui/react-utilities';\n\n// @public\nexport const Breadcrumb: ForwardRefComponent<BreadcrumbProps>;\n\n// @public\nexport const BreadcrumbButton: ForwardRefComponent<BreadcrumbButtonProps>;\n\n// @public\nexport const breadcrumbButtonClassNames: SlotClassNames<BreadcrumbButtonSlots>;\n\n// @public\nexport type BreadcrumbButtonProps = ComponentProps<BreadcrumbButtonSlots> & Pick<BreadcrumbProps, 'size'> & Pick<ButtonProps, 'disabled' | 'disabledFocusable'> & {\n    current?: boolean;\n};\n\n// @public (undocumented)\nexport type BreadcrumbButtonSlots = ButtonSlots;\n\n// @public\nexport type BreadcrumbButtonState = ComponentState<BreadcrumbButtonSlots> & Omit<ButtonState, keyof ButtonSlots | 'components'> & Required<Pick<BreadcrumbButtonProps, 'current' | 'size'>>;\n\n// @public (undocumented)\nexport const breadcrumbClassNames: SlotClassNames<BreadcrumbSlots>;\n\n// @public\nexport type BreadcrumbContextValues = Required<Pick<BreadcrumbProps, 'size'>>;\n\n// @public\nexport const BreadcrumbDivider: ForwardRefComponent<BreadcrumbDividerProps>;\n\n// @public (undocumented)\nexport const breadcrumbDividerClassNames: SlotClassNames<BreadcrumbDividerSlots>;\n\n// @public\nexport type BreadcrumbDividerProps = ComponentProps<BreadcrumbDividerSlots> & {};\n\n// @public (undocumented)\nexport type BreadcrumbDividerSlots = {\n    root: Slot<'li'>;\n};\n\n// @public\nexport type BreadcrumbDividerState = ComponentState<BreadcrumbDividerSlots> & Pick<BreadcrumbProps, 'size'>;\n\n// @public\nexport const BreadcrumbItem: ForwardRefComponent<BreadcrumbItemProps>;\n\n// @public (undocumented)\nexport const breadcrumbItemClassNames: SlotClassNames<BreadcrumbItemSlots>;\n\n// @public\nexport type BreadcrumbItemProps = ComponentProps<BreadcrumbItemSlots> & Pick<BreadcrumbProps, 'size'>;\n\n// @public (undocumented)\nexport type BreadcrumbItemSlots = {\n    root: Slot<'li'>;\n};\n\n// @public\nexport type BreadcrumbItemState = ComponentState<BreadcrumbItemSlots> & Required<Pick<BreadcrumbItemProps, 'size'>>;\n\n// @public\nexport type BreadcrumbProps = ComponentProps<BreadcrumbSlots> & {\n    focusMode?: 'arrow' | 'tab';\n    size?: 'small' | 'medium' | 'large';\n};\n\n// @internal (undocumented)\nexport const BreadcrumbProvider: React_2.Provider<Required<Pick<BreadcrumbProps, \"size\">> | undefined>;\n\n// @public (undocumented)\nexport type BreadcrumbSlots = {\n    root: Slot<'nav'>;\n    list?: Slot<'ol'>;\n};\n\n// @public\nexport type BreadcrumbState = ComponentState<BreadcrumbSlots> & Required<Pick<BreadcrumbProps, 'size'>>;\n\n// @public (undocumented)\nexport const isTruncatableBreadcrumbContent: (content: string, maxLength: number) => boolean;\n\n// @public (undocumented)\nexport type PartitionBreadcrumbItems<T> = {\n    startDisplayedItems: readonly T[];\n    overflowItems?: readonly T[];\n    endDisplayedItems?: readonly T[];\n};\n\n// @public\nexport const partitionBreadcrumbItems: <T>(options: PartitionBreadcrumbItemsOptions<T>) => PartitionBreadcrumbItems<T>;\n\n// @public (undocumented)\nexport type PartitionBreadcrumbItemsOptions<T> = {\n    items: readonly T[];\n    maxDisplayedItems?: number;\n    overflowIndex?: number;\n};\n\n// @public\nexport const renderBreadcrumb_unstable: (state: BreadcrumbState, contextValues: BreadcrumbContextValues) => JSX.Element;\n\n// @public\nexport const renderBreadcrumbButton_unstable: (state: BreadcrumbButtonState) => JSX.Element;\n\n// @public\nexport const renderBreadcrumbDivider_unstable: (state: BreadcrumbDividerState) => JSX.Element;\n\n// @public\nexport const renderBreadcrumbItem_unstable: (state: BreadcrumbItemState) => JSX.Element;\n\n// @public (undocumented)\nexport const truncateBreadcrumbLongName: (content: string, maxLength?: number) => string;\n\n// @public (undocumented)\nexport const truncateBreadcrumLongTooltip: (content: string, maxLength?: number) => string;\n\n// @public\nexport const useBreadcrumb_unstable: (props: BreadcrumbProps, ref: React_2.Ref<HTMLElement>) => BreadcrumbState;\n\n// @public\nexport const useBreadcrumbButton_unstable: (props: BreadcrumbButtonProps, ref: React_2.Ref<HTMLButtonElement | HTMLAnchorElement>) => BreadcrumbButtonState;\n\n// @public\nexport const useBreadcrumbButtonStyles_unstable: (state: BreadcrumbButtonState) => BreadcrumbButtonState;\n\n// @internal (undocumented)\nexport const useBreadcrumbContext_unstable: () => Required<Pick<BreadcrumbProps, \"size\">>;\n\n// @public\nexport const useBreadcrumbDivider_unstable: (props: BreadcrumbDividerProps, ref: React_2.Ref<HTMLLIElement>) => BreadcrumbDividerState;\n\n// @public\nexport const useBreadcrumbDividerStyles_unstable: (state: BreadcrumbDividerState) => BreadcrumbDividerState;\n\n// @public\nexport const useBreadcrumbItem_unstable: (props: BreadcrumbItemProps, ref: React_2.Ref<HTMLLIElement>) => BreadcrumbItemState;\n\n// @public\nexport const useBreadcrumbItemStyles_unstable: (state: BreadcrumbItemState) => BreadcrumbItemState;\n\n// @public\nexport const useBreadcrumbStyles_unstable: (state: BreadcrumbState) => BreadcrumbState;\n```\n\n----------------------------------------\n\nTITLE: Dry Run Migration Command - Shell Script\nDESCRIPTION: This command generates a preview of the migration process without making any actual changes to the file system. It is useful for reviewing what will happen during the migration.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/migrate-fixed-versions/README.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:migrate-fixed-versions --dry-run\n```\n\n----------------------------------------\n\nTITLE: Basic Dialog Implementation in React (v0)\nDESCRIPTION: Shows how the Dialog component in v0 accepts all content as props and uses a trigger prop to control its visibility.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/docs/Spec.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Dialog\n  cancelButton=\"Connect protocol\"\n  confirmButton=\"Transmit capacitor\"\n  content=\"Connect driver\"\n  header=\"Transmit capacitor\"\n  headerAction=\"Generate protocol\"\n  trigger={<Button content=\"A trigger\" />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Mutable State with useButton_unstable Hook in React\nDESCRIPTION: Defines a custom hook that generates mutable state for a button component, allowing for user-defined props and accessibility features. It handles default properties and applies behaviors based on the component's rendered type.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-utilities/src/compose/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst useButton_unstable = (props, ref) => {\n  const state = {\n    // Default props\n    role: 'button',\n    // User props\n    ...props,\n    // Overrides\n    ref,\n  };\n\n  // Apply button behaviors.\n  if (state.as !== 'button' && state.as !== 'a') {\n    state.tabIndex = 0;\n  }\n\n  return state;\n};\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-jsx-runtime version\nDESCRIPTION: This patch updates the version of the `@fluentui/react-jsx-runtime` dependency. Bumping this package ensures that the `@fluentui/react-badge` component uses the latest features and bug fixes available in the JSX runtime.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nBump @fluentui/react-jsx-runtime to v9.0.45 ([PR #32999](https://github.com/microsoft/fluentui/pull/32999) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Implementing useOnScrollOutside Hook in TypeScript\nDESCRIPTION: An internal hook that executes a callback when scrolling occurs outside specified element references.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-utilities/etc/react-utilities.api.md#2025-04-20_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @internal\nexport const useOnScrollOutside: (options: UseOnClickOrScrollOutsideOptions) => void;\n```\n\n----------------------------------------\n\nTITLE: Flat Folder Structure Changes\nDESCRIPTION: Diff showing proposed flat folder structure reorganization\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/shared/build-system/08-type-checking-perf-improvements.md#2025-04-20_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\nreact-components/\n+  react-text-stories/\n+  |- .storybook\n+  |- src\n+  |- package.json\n+  |- project.json\n   react-text/\n-  |- .storybook/\n-  |- stories/\n   |- src/\n   |- package.json\n   |- project.json\n```\n\n----------------------------------------\n\nTITLE: Importing a defined Fluent UI component\nDESCRIPTION: JavaScript code showing how to import a pre-defined Fluent UI Web Component (button). This is the simplest way to use components in your application.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/README.md#2025-04-20_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport '@fluentui/web-components/button.js';\n```\n\n----------------------------------------\n\nTITLE: Creating Options with Simple Text Content in FluentUI Dropdown\nDESCRIPTION: Shows how to create a basic Option component with simple text content, where the value is automatically calculated from the text children.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/stories/src/Dropdown/DropdownAccessibility.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Option>Simple text string</Option>\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components and Spacing for FluentUI Theme Documentation\nDESCRIPTION: This code imports necessary components from Storybook's addon-docs library and the Spacing component from ThemeSpacing.stories file to create documentation for FluentUI's theme spacing.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-theme/stories/src/Theme/spacing/index.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta, Canvas } from '@storybook/addon-docs';\nimport { Spacing } from './ThemeSpacing.stories';\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.98.5\nDESCRIPTION: This entry documents the update to @fluentui/react to version 8.98.5, ensuring users benefit from the latest developments.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/azure-themes/CHANGELOG.md#2025-04-20_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.98.5 ([PR #24283](https://github.com/microsoft/fluentui/pull/24283) by beachball)\n```\n\n----------------------------------------\n\nTITLE: renderImage_unstable Function Definition\nDESCRIPTION: Defines the renderImage_unstable function, which is responsible for rendering the Image component based on the provided ImageState. It returns a JSX.Element, representing the rendered output.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-image/library/etc/react-image.api.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const renderImage_unstable: (state: ImageState) => JSX.Element;\n```\n\n----------------------------------------\n\nTITLE: Running All Package Tests with Yarn\nDESCRIPTION: This command executes tests for all packages within the Fluent UI repository at once. Run this command from the root directory of the repo.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/CONTRIBUTING.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn test                  # run all packages' tests once\n```\n\n----------------------------------------\n\nTITLE: Defining Render Function for Slot in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to define a render function to replace a slot's entire content in a Fluent UI component. The function is intended to be passed as a child to the component, allowing for custom rendering behavior. External properties can be provided directly as an object or as primitive values such as strings, numbers, arrays, or JSX elements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/slot-children-render-function.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst renderBigLetterIcon = (Component, props) => {\n  return <b>B</b>;\n};\n\n<Button icon={{ children: renderBigLetterIcon }}>Bold</Button>;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Fluent UI Icon in HTML\nDESCRIPTION: This snippet demonstrates how to add a Fluent UI font-based icon (specifically the Access Logo icon) using HTML. It uses the ms-Icon class alongside the specific icon class and includes the aria-hidden attribute for accessibility.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Styles/FileTypeIconsPage/docs/web/FileTypeIconsSingleColor.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<i class=\"ms-Icon ms-Icon--AccessLogo\" aria-hidden=\"true\"></i>\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-jsx-runtime version\nDESCRIPTION: This patch updates the version of the `@fluentui/react-jsx-runtime` dependency. Bumping this package ensures that the `@fluentui/react-badge` component uses the latest features and bug fixes available in the JSX runtime.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nBump @fluentui/react-jsx-runtime to v9.0.51 ([PR #33927](https://github.com/microsoft/fluentui/pull/33927) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Bumping FluentUI React Monaco Editor Version\nDESCRIPTION: This snippet shows how to bump the version of the @fluentui/react-monaco-editor package. The commit hash provides a direct link to the change within the repository. This action is part of maintaining the dependencies for the project.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-docsite-components/CHANGELOG.md#2025-04-20_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n\"- Bump @fluentui/react-monaco-editor to v1.7.141 ([commit](https://github.com/microsoft/fluentui/commit/70d0762fd12eb211f7c1dbe31a23b2fbb73a67c4) by beachball)\"\n```\n\n----------------------------------------\n\nTITLE: Versioning and Release Date in Markdown\nDESCRIPTION: Markdown syntax used to specify the version number and release date of a particular release.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-switch/library/CHANGELOG.md#2025-04-20_snippet_17\n\nLANGUAGE: Markdown\nCODE:\n```\n## [9.0.0-rc.3](https://github.com/microsoft/fluentui/tree/@fluentui/react-switch_v9.0.0-rc.3)\n\nFri, 18 Feb 2022 13:35:34 GMT\n```\n\n----------------------------------------\n\nTITLE: Installing @fluentui/keyboard-key via Package Managers\nDESCRIPTION: Commands to install the @fluentui/keyboard-key package using either yarn or npm package managers.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/keyboard-key/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn add keyboard-key\n\n# or\n\nnpm install keyboard-key\n```\n\n----------------------------------------\n\nTITLE: Folder Structure for Documentation\nDESCRIPTION: Proposed documentation structure showing where recipes would be located in the documentation hierarchy.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/components/recipes.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\\- Concepts\n  |- Introduction\n  |- Developer\n  |- Migration\n  |- Recipes\n    |- Recipe #1\n    |- Recipe #2\n\\- Theme\n  |- Color\n  |- Motion and Size\n  |- Typography\n\\- Components\n  |- ...\n\\- Preview Components\n  |- ...\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.115.1\nDESCRIPTION: Updates the @fluentui/react package to version 8.115.1, continuing the adjustments for performance and reliability.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluent2-theme/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.115.1 ([PR #30323](https://github.com/microsoft/fluentui/pull/30323) by beachball)\n```\n\n----------------------------------------\n\nTITLE: FluentUI Component Package Import Declarations\nDESCRIPTION: Extensive list of TypeScript imports from FluentUI React packages including components, class names, props, slots, states, rendering functions, and hooks. Contains imports from react-alert, react-drawer, react-tree, react-infobutton, and react-virtualizer packages.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-components/etc/react-components.unstable.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Alert } from '@fluentui/react-alert';\nimport { alertClassNames } from '@fluentui/react-alert';\nimport { AlertProps } from '@fluentui/react-alert';\nimport { AlertSlots } from '@fluentui/react-alert';\nimport { AlertState } from '@fluentui/react-alert';\nimport { Drawer } from '@fluentui/react-drawer';\nimport { DrawerBody } from '@fluentui/react-drawer';\nimport { drawerBodyClassNames } from '@fluentui/react-drawer';\nimport { DrawerBodySlots } from '@fluentui/react-drawer';\nimport { DrawerBodyState } from '@fluentui/react-drawer';\n// ... additional imports\n```\n\n----------------------------------------\n\nTITLE: Version History Entry for SpinButton v9.0.0-beta.15\nDESCRIPTION: Changelog entry noting dependency updates, icon updates, and button type fixes for the SpinButton component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-spinbutton/library/CHANGELOG.md#2025-04-20_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.0.0-beta.15]\n\n### Changes\n\n- Update 9.0.0-rc dependencies to use caret range\n- chore: Update @fluentui/react-icons to latest version\n- Bump Griffel dependencies\n- fix: Making increment and decrement buttons of SpinButton have 'type=button' instead of 'type=submit'\n```\n\n----------------------------------------\n\nTITLE: Implementing Word Icon Using SVG Image\nDESCRIPTION: Example showing how to implement a 48x48px Word product icon using a direct SVG image reference. Demonstrates the usage of the img element with proper dimensions and accessibility attributes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Styles/M365ProductIconsPage/docs/web/M365ProductIconsImplementation.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<img\n  src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/assets/brand-icons/product/svg/word_48x1.svg\"\n  width=\"48\"\n  height=\"48\"\n  alt=\"Word product icon\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Specifying Bounds in Fluent UI v8 Callout\nDESCRIPTION: Provides an example of setting bounds for a v8 `Callout` using pixel values for bounding rectangles and calloutProps for target and bounds specification, with auto flip and overflow behavior.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-popover/library/docs/Spec.md#2025-04-20_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n<Callout\n  // pixel values for bounding rectangle\n  // defaults to target window as default bounding rectangle\n  bounds={{height: 0, width: 0, top: 0, left:0 , right: 0, bottom: 0}}\n  // callback for bounds\n  bounds{(target, targetWindow) => ({/*Same object as above*/})}\n  target={htmlElement}\n\n  // renders to a portal node on body\n  layerProps={/*ILayerProps*/}\n\n  // every single one of the above can all be declared here too\n  calloutProps={{bounds, target}}\n/>\n\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react-image to version v9.0.0-rc.6\nDESCRIPTION: This entry documents the bump of version for @fluentui/react-image to v9.0.0-rc.6, part of an ongoing effort to keep the Fluent UI library components up to date.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/vr-tests-react-components/CHANGELOG.md#2025-04-20_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react-image to v9.0.0-rc.6 ([PR #21995](https://github.com/microsoft/fluentui/pull/21995) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Rendering Checkbox with Top-Level Props in TSX\nDESCRIPTION: Example of rendering a Checkbox component with top-level props for name, checked state, and root ID. This demonstrates the desired API for users.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/native-element-props.md#2025-04-20_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<Checkbox name=\"foo\" checked root={{ id: 'bar' }} ref={ref}>\n  sample\n</Checkbox>\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react to v8.37.6\nDESCRIPTION: This patch updates the @fluentui/react library to version 8.37.6 to ensure stability and performance. More information is in Pull Request #20273.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/ts-minbar-test-react/CHANGELOG.md#2025-04-20_snippet_26\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.37.6 ([PR #20273](https://github.com/microsoft/fluentui/pull/20273) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-docsite-components to v8.7.16\nDESCRIPTION: This patch highlights the bump of '@fluentui/react-docsite-components' to version 8.7.16, providing better support for documentation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/theming-designer/CHANGELOG.md#2025-04-20_snippet_31\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react-docsite-components to v8.7.16 ([PR #23024](https://github.com/microsoft/fluentui/pull/23024) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Defining Icon Names Constants in TypeScript\nDESCRIPTION: This snippet includes a series of constants representing icon names used within the Fluent UI library. Each constant is not documented, indicating they are likely intended for internal use or have assumed knowledge by the developers. These constants enable easy reference to specific icons throughout the application.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/font-icons-mdl2/etc/font-icons-mdl2.api.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n    VisioOnlineLogo32 = \"VisioOnlineLogo32\",\n    // (undocumented)\n    VisioOnlineLogoCloud32 = \"VisioOnlineLogoCloud32\",\n    // (undocumented)\n    VisioOnlineLogoFill32 = \"VisioOnlineLogoFill32\",\n    // (undocumented)\n    VisualBasicLanguage = \"VisualBasicLanguage\",\n    // (undocumented)\n    VisuallyImpaired = \"VisuallyImpaired\",\n    // (undocumented)\n    VisualsFolder = \"VisualsFolder\",\n    // (undocumented)\n    VisualsStore = \"VisualsStore\",\n    // (undocumented)\n    VisualStudioIDELogo32 = \"VisualStudioIDELogo32\",\n    // (undocumented)\n    VisualStudioLogo = \"VisualStudioLogo\",\n    // (undocumented)\n    VoicemailForward = \"VoicemailForward\",\n    // (undocumented)\n    VoicemailIRM = \"VoicemailIRM\",\n    // (undocumented)\n    VoicemailReply = \"VoicemailReply\",\n    // (undocumented)\n    Volume0 = \"Volume0\",\n    // (undocumented)\n    Volume1 = \"Volume1\",\n    // (undocumented)\n    Volume2 = \"Volume2\",\n    // (undocumented)\n    Volume3 = \"Volume3\",\n    // (undocumented)\n    VolumeDisabled = \"VolumeDisabled\",\n    // (undocumented)\n    VSTSAltLogo1 = \"VSTSAltLogo1\",\n    // (undocumented)\n    VSTSAltLogo2 = \"VSTSAltLogo2\",\n    // (undocumented)\n    VSTSLogo = \"VSTSLogo\",\n    // (undocumented)\n    Waffle = \"Waffle\",\n    // (undocumented)\n    WaffleOffice365 = \"WaffleOffice365\",\n    // (undocumented)\n    WaitlistConfirm = \"WaitlistConfirm\",\n    // (undocumented)\n    WaitlistConfirmMirrored = \"WaitlistConfirmMirrored\",\n    // (undocumented)\n    Warning = \"Warning\",\n    // (undocumented)\n    Warning12 = \"Warning12\",\n    // (undocumented)\n    WarningSolid = \"WarningSolid\",\n    // (undocumented)\n    WavingHand = \"WavingHand\",\n    // (undocumented)\n    WebAppBuilderFragment = \"WebAppBuilderFragment\",\n    // (undocumented)\n    WebAppBuilderFragmentCreate = \"WebAppBuilderFragmentCreate\",\n    // (undocumented)\n    WebAppBuilderModule = \"WebAppBuilderModule\",\n    // (undocumented)\n    WebAppBuilderSlot = \"WebAppBuilderSlot\",\n    // (undocumented)\n    Webcam2 = \"Webcam2\",\n    // (undocumented)\n    WebComponents = \"WebComponents\",\n    // (undocumented)\n    WebPublish = \"WebPublish\",\n    // (undocumented)\n    Website = \"Website\",\n    // (undocumented)\n    WebTemplate = \"WebTemplate\",\n    // (undocumented)\n    Weights = \"Weights\",\n    // (undocumented)\n    Wheelchair = \"Wheelchair\",\n    // (undocumented)\n    WhiteBoardApp16 = \"WhiteBoardApp16\",\n    // (undocumented)\n    WhiteBoardApp32 = \"WhiteBoardApp32\",\n    // (undocumented)\n    WifiEthernet = \"WifiEthernet\",\n    // (undocumented)\n    WifiWarning4 = \"WifiWarning4\",\n    // (undocumented)\n    WindDirection = \"WindDirection\",\n    // (undocumented)\n    WindowEdit = \"WindowEdit\",\n    // (undocumented)\n    WindowsLogo = \"WindowsLogo\",\n    // (undocumented)\n    Wines = \"Wines\",\n    // (undocumented)\n    WipePhone = \"WipePhone\",\n    // (undocumented)\n    WordDocument = \"WordDocument\",\n    // (undocumented)\n    WordLogo = \"WordLogo\",\n    // (undocumented)\n    WordLogo16 = \"WordLogo16\",\n    // (undocumented)\n    WordLogoFill = \"WordLogoFill\",\n    // (undocumented)\n    WordLogoFill16 = \"WordLogoFill16\",\n    // (undocumented)\n    WordLogoInverse = \"WordLogoInverse\",\n    // (undocumented)\n    WordLogoInverse16 = \"WordLogoInverse16\",\n    // (undocumented)\n    Work = \"Work\",\n    // (undocumented)\n    WorkFlow = \"WorkFlow\",\n    // (undocumented)\n    WorkforceManagement = \"WorkforceManagement\",\n    // (undocumented)\n    WorkItem = \"WorkItem\",\n    // (undocumented)\n    WorkItemAlert = \"WorkItemAlert\",\n    // (undocumented)\n    WorkItemBar = \"WorkItemBar\",\n    // (undocumented)\n    WorkItemBarSolid = \"WorkItemBarSolid\",\n    // (undocumented)\n    WorkItemBug = \"WorkItemBug\",\n    // (undocumented)\n    World = \"World\",\n    // (undocumented)\n    WorldClock = \"WorldClock\",\n    // (undocumented)\n    YammerLogo = \"YammerLogo\",\n    // (undocumented)\n    ZipFolder = \"ZipFolder\",\n    // (undocumented)\n    Zoom = \"Zoom\",\n    // (undocumented)\n    ZoomIn = \"ZoomIn\",\n    // (undocumented)\n    ZoomOut = \"ZoomOut\",\n    // (undocumented)\n    ZoomToFit = \"ZoomToFit\"\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.98.2\nDESCRIPTION: This entry reflects the library update to version 8.98.2, maintaining the overall quality and enhancements of the @fluentui/react.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/azure-themes/CHANGELOG.md#2025-04-20_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.98.2 ([PR #24976](https://github.com/microsoft/fluentui/pull/24976) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Installing the package using yarn\nDESCRIPTION: This command installs the `@fluentui/react-portal-compat-context` package as a dependency using yarn. This package provides React Context for portal compatibility in Fluent UI React components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-portal-compat-context/README.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n```sh\nyarn add @fluentui/react-portal-compat-context\n```\n```\n\n----------------------------------------\n\nTITLE: Suggestions Item Style Interfaces in TypeScript\nDESCRIPTION: Interfaces for styling suggestion items, defining the structure for customizing the appearance of individual suggestion entries.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_188\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface ISuggestionsItem {\n}\n\n// @public\nexport type ISuggestionsItemStyleProps = Required<Pick<ISuggestionItemProps<any>, 'theme'>> & Pick<ISuggestionItemProps<any>, 'className'> & {\n    suggested?: boolean;\n};\n\n// @public\nexport interface ISuggestionsItemStyles {\n    closeButton: IStyle;\n    itemButton: IStyle;\n    root: IStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing DateTimePicker Control in Swift and Objective-C\nDESCRIPTION: Demonstrates how to reference the DateTimePicker control in Swift and Objective-C codebases. The control is named 'DateTimePicker' in Swift and 'MSFDateTimePicker' in Objective-C.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/DatePickerPage/docs/ios/DateTimePickerImplementation.md#2025-04-20_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nDateTimePicker\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\nMSFDateTimePicker\n```\n\n----------------------------------------\n\nTITLE: Efficient use of mergeClasses with conditions\nDESCRIPTION: Demonstrates the preferred approach for handling complex class conditions by using variables for conditions rather than nested mergeClasses calls.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/styles-handbook.md#2025-04-20_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n// ✅ Do\nfunction Component(props) {\n  const baseClassName = useBaseClassName();\n  const classes = useClasses();\n\n  const conditionForFoo = /* ---- */ true;\n  const className = mergeClasses(baseClassName, conditionForFoo && classes.foo /* other condition */);\n\n  /* --- */\n}\n```\n\n----------------------------------------\n\nTITLE: Bumping React Avatar Version in Fluent UI\nDESCRIPTION: This snippet captures the update of the @fluentui/react-avatar package to version 9.7.0, ensuring that the avatar component of the Fluent UI library receives the latest updates and fixes as part of the evolving framework.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tree/library/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n- Bump @fluentui/react-avatar to v9.7.0 ([PR #33876](https://github.com/microsoft/fluentui/pull/33876) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Start Legacy Demo App for React Packages\nDESCRIPTION: Command to start the legacy demo application for the @fluentui/react package and related packages, using yarn workspace. This is used for viewing legacy component demos on a local environment.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-examples/README.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn workspace @fluentui/react start:legacy\n```\n\n----------------------------------------\n\nTITLE: Version History Entry for FluentUI React Text\nDESCRIPTION: Markdown formatted changelog entry showing version updates and dependency changes\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-text/library/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.3.17](https://github.com/microsoft/fluentui/tree/@fluentui/react-text_v9.3.17)\n\nTue, 11 Jul 2023 18:46:36 GMT\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-text_v9.3.16..@fluentui/react-text_v9.3.17)\n\n### Patches\n\n- Bump @fluentui/react-jsx-runtime to v9.0.0-alpha.11 ([PR #28491](https://github.com/microsoft/fluentui/pull/28491) by beachball)\n- Bump @fluentui/react-conformance-griffel to v9.0.0 ([PR #28491](https://github.com/microsoft/fluentui/pull/28491) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Defining PersonaCoin and PersonaPresence Interfaces in TypeScript for FluentUI\nDESCRIPTION: Defines the interfaces for PersonaCoin and PersonaPresence components in FluentUI. These are subcomponents of the Persona component that handle display of profile pictures and online presence status.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_160\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IPersonaCoinProps extends IPersonaSharedProps {\n    className?: string;\n    componentRef?: IRefObject<{}>;\n    styles?: IStyleFunctionOrObject<IPersonaCoinStyleProps, IPersonaCoinStyles>;\n}\n\n// @public (undocumented)\nexport interface IPersonaCoinStyleProps {\n    className?: string;\n    coinSize?: number;\n    showUnknownPersonaCoin?: boolean;\n    size?: PersonaSize;\n    theme: ITheme;\n}\n\n// @public (undocumented)\nexport interface IPersonaCoinStyles {\n    // (undocumented)\n    coin: IStyle;\n    // (undocumented)\n    image: IStyle;\n    // (undocumented)\n    imageArea: IStyle;\n    // (undocumented)\n    initials: IStyle;\n    // (undocumented)\n    size10WithoutPresenceIcon: IStyle;\n}\n\n// @public (undocumented)\nexport interface IPersonaPresenceProps extends IPersonaSharedProps {\n    componentRef?: IRefObject<{}>;\n    styles?: IStyleFunctionOrObject<IPersonaPresenceStyleProps, IPersonaPresenceStyles>;\n}\n\n// @public (undocumented)\nexport type IPersonaPresenceStyleProps = Required<Pick<IPersonaSharedProps, 'theme'>> & Pick<IPersonaSharedProps, 'presence' | 'isOutOfOffice' | 'size' | 'presenceColors'> & Pick<IPersonaProps, 'className'>;\n\n// @public (undocumented)\nexport interface IPersonaPresenceStyles {\n    // (undocumented)\n    presence: IStyle;\n    // (undocumented)\n    presenceIcon: IStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Maybe to Eliminate Null Checks in Codemods\nDESCRIPTION: This entry describes the modification aimed at reducing the need for null checks by implementing a 'maybe' approach in the codemods. This change enhances code robustness and maintainability.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/codemods/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n- CodeMods: Add maybe to help eliminate null checks ([PR #13965](https://github.com/microsoft/fluentui/pull/13965) by joschect@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Version 9.5.20 Changelog Entry\nDESCRIPTION: Changelog entry documenting dependency version bumps for various FluentUI packages including react-utilities, react-jsx-runtime, and others.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.5.20](https://github.com/microsoft/fluentui/tree/@fluentui/react-dialog_v9.5.20)\n\nFri, 04 Aug 2023 08:52:58 GMT\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-dialog_v9.5.19..@fluentui/react-dialog_v9.5.20)\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.72.3\nDESCRIPTION: This note captures the bump of '@fluentui/react' to version 8.72.3, continuing to upgrade relevant packages in the Fluent UI system.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/theming-designer/CHANGELOG.md#2025-04-20_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.72.3 ([PR #23445](https://github.com/microsoft/fluentui/pull/23445) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Correct Import Order Example for Chart Testing\nDESCRIPTION: Example showing correct import sequence for proper chart rendering\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/docs/TestPlans/TestingGuide.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { render, screen, queryAllByAttribute } from '@testing-library/react';\nimport { chartPoints } from './VerticalBarChart.test';\n```\n\n----------------------------------------\n\nTITLE: Using ThemelessFluentProvider with shadow DOM\nDESCRIPTION: Demonstrates how to use ThemelessFluentProvider to render Fluent components inside shadow DOM. This approach requires manually creating and applying theme styles using CSS custom properties.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/WebComponentsInterop/UsingFluentReactWithWebComponents.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createCSSStyleSheetFromTheme, ThemelessFluentProvider } from '@fluentui-contrib/react-themeless-provider';\nimport { root } from '@fluentui-contrib/react-shadow';\nimport { webLightTheme, Button } from '@fluentui/react-components';\n\n// Create theme styles outside of React component rendering\nconst themeSheet = createCSSStyleSheetFromTheme(':root', webLightTheme);\ndocument.adoptedStyleSheets = [...document.adoptedStyleSheets, themeSheet];\n\n// Render Fluent components\nconst ShadowDOMApp = () => {\n  return (\n    <ThemelessFluentProvider>\n      {/* This is the shadow root */}\n      <root.div>\n        <Button>Fluent React Button in shadow DOM</Button>\n      </root.div>\n    </ThemelessFluentProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for FluentUI React Card Stories in JavaScript\nDESCRIPTION: This code snippet demonstrates how to configure a Storybook module.exports to include React Card stories. It specifies the glob patterns needed to include both MDX and TypeScript/TSX story files from the react-card package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-card/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-card/stories/src/**/*.stories.mdx', '../packages/react-components/react-card/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Link Component in TypeScript\nDESCRIPTION: Defines the Link component class extending BaseAnchor with appearance and inline display properties. Includes change handlers for component properties.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Link extends BaseAnchor {\n    appearance?: LinkAppearance | undefined;\n    appearanceChanged(prev: LinkAppearance | undefined, next: LinkAppearance | undefined): void;\n    inline: boolean;\n    inlineChanged(prev: boolean, next: boolean): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Structure for Controlled Dialog in FluentUI\nDESCRIPTION: This snippet shows the expected HTML output for a controlled dialog in FluentUI, including ARIA attributes and class names for accessibility and styling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/docs/Spec.md#2025-04-20_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<button aria-haspopup=\"true\" class=\"fui-button\">Open Dialog</button>\n<!-- ... portal ... -->\n<div aria-hidden=\"true\" class=\"fui-dialog-backdrop\"></div>\n<div\n  aria-describedby=\"fui-dialog-body-id\"\n  aria-labelledby=\"fui-dialog-title-id\"\n  aria-modal=\"true\"\n  role=\"dialog\"\n  class=\"fui-dialog-content\"\n>\n  <div id=\"fui-dialog-title-id\" class=\"fui-dialog-title\">\n    <span>Title</span>\n    <!-- action -->\n  </div>\n  <div id=\"fui-dialog-body-id\" class=\"fui-dialog-body\">This is going to be inside the dialog</div>\n  <div class=\"fui-dialog-actions\">\n    <button class=\"fui-button\">Close</button>\n    <button class=\"fui-button\">Action</button>\n  </div>\n</div>\n<!-- ... portal ... -->\n```\n\n----------------------------------------\n\nTITLE: Memoizing Context Value - TypeScript\nDESCRIPTION: This code demonstrates the use of React.useMemo to memoize context values, ensuring consumers of 'SampleContext' update only when 'value' changes. Dependencies include React library for hooks and context API.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/context-values.md#2025-04-20_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// 💡 an example of memoization approach\n\nfunction Baz(props) {\n  const { inline, size } = props;\n  const value = React.useMemo(() => ({ inline, open }), [inline, open]);\n\n  // consumers of \"SampleContext\" will be notified only when \"value\" changes\n  return <SampleContext.Provider value={value} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Icon using wrapIcon and bundleIcon in Fluent UI v9\nDESCRIPTION: Example of creating a custom icon in Fluent UI v9 using wrapIcon and bundleIcon functions, which requires separate definitions for outline and filled variants.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Icons.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// MyIcon.tsx\nimport { FluentIconsProps, bundleIcon, wrapIcon } from '@fluentui/react-icons';\n\nexport const MyOutlineIcon = wrapIcon((props: FluentIconsProps) => {\n  return (\n    <svg height=\"1rem\" width=\"1rem\" role=\"presentation\" focusable=\"false\" viewBox=\"2 2 16 16\" {...props}>\n      <g>\n        <path d=\"...\" />\n      </g>\n    </svg>\n  );\n}, 'MyOutlineIcon');\n\nexport const MyFilledIcon = wrapIcon((props: FluentIconsProps) => {\n  return (\n    <svg height=\"1rem\" width=\"1rem\" role=\"presentation\" focusable=\"false\" viewBox=\"2 2 16 16\" {...props}>\n      <g>\n        <path d=\"...\" />\n      </g>\n    </svg>\n  );\n}, 'MyFilledIcon');\n\nexport const MyIcon = bundleIcon(MyFilledIcon, MyOutlineIcon);\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.71.0\nDESCRIPTION: This snippet serves as a record for the version bump of '@fluentui/react' to 8.71.0, essential for keeping the components fresh and updated.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/theming-designer/CHANGELOG.md#2025-04-20_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.71.0 ([PR #23127](https://github.com/microsoft/fluentui/pull/23127) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Callout Interaction Tests\nDESCRIPTION: Test scenarios for callout behaviors when interacting with chart bars and lines, including default and custom callout rendering\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/docs/TestPlans/VerticalBarChart/ComponentTests.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Hover mouse over a bar\n- Specify custom callout and hover mouse over a bar\n- Specify custom callout and hover mouse over the line\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.112.9\nDESCRIPTION: Updates the @fluentui/react version to 8.112.9, ensuring stability and fixing important bugs.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluent2-theme/CHANGELOG.md#2025-04-20_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.112.9 ([PR #29791](https://github.com/microsoft/fluentui/pull/29791) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Adding Description to Unit Tests in Fluent UI (TypeScript)\nDESCRIPTION: Demonstrates how to add a description to a unit test using the @description tag in JSDoc format. This is useful for providing context or explanations for tests that should not be considered as part of the unit test itself.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/test-a-feature.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @description\n * Image is usually only visual representation and therefore is hidden from screen readers.\n*/\n```\n\n----------------------------------------\n\nTITLE: Defining ITextComponent Type in TypeScript\nDESCRIPTION: Specifies the ITextComponent type as an IComponent with ITextProps, ITextTokens, and ITextStyles.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_213\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport type ITextComponent = IComponent<ITextProps, ITextTokens, ITextStyles>;\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.115.2\nDESCRIPTION: Updates the @fluentui/react package to version 8.115.2, addressing issues and ensuring compatibility with latest features.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluent2-theme/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.115.2 ([PR #30254](https://github.com/microsoft/fluentui/pull/30254) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Defining Nodes Composition Enum in TypeScript\nDESCRIPTION: The NodesComposition enum specifies possible compositions for nodes in tree structures, allowing flexible rendering layouts in chart implementations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/etc/react-charting.api.md#2025-04-20_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport enum NodesComposition {\n    compact = 0,\n    long = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Controlled Mode in TypeScript\nDESCRIPTION: This function sets the controlled mode state based on the provided boolean value. It allows for managing the UI behavior depending on whether it operates in controlled or uncontrolled mode.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/example-data/etc/example-data.api.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport const setControlledMode: (val: boolean) => void;\n```\n\n----------------------------------------\n\nTITLE: Defining Control Names - FluentUI iOS Components\nDESCRIPTION: Lists the control names for spinning indicator and HUD overlay components in both Swift and Objective-C. ActivityIndicatorView provides the spinning element functionality while HUD offers an overlay with large spinner and different modes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/SpinnerPage/docs/ios/SpinnerImplementation.md#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nActivityIndicatorView (Swift) / MSFActivityIndicatorView (Objective-C)\nHUD (Swift) / MSFHUD (Objective-C)\n```\n\n----------------------------------------\n\nTITLE: Bump Packages to Nightly Release\nDESCRIPTION: Example showing how to bump all vNext packages to a nightly release version.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/version-bump/README.md#2025-04-20_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:version-bump --all --bumpType nightly --prereleaseTag nightly\n```\n\n----------------------------------------\n\nTITLE: ComponentProps Type Definition in TypeScript\nDESCRIPTION: TypeScript type definition for component props that handles primary slot specification.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/native-element-props.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ComponentProps<Shorthands, Primary extends keyof Shorthands = 'root'> =\n  Shorthands[Primary] & {\n    [Key in Exclude<\n      keyof Shorthands,\n      Primary extends 'root' ? Primary : never\n    >]?: ShorthandProps<NonNullable<Shorthands[Key]>>;\n  };\n```\n\n----------------------------------------\n\nTITLE: React TSX Boolean vs Union Props Example\nDESCRIPTION: Comparison between boolean properties and discriminated unions in React components, demonstrating proper usage patterns.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/implementation-best-practices.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Boolean approach (not recommended for mutually exclusive props)\n<Tooltip before after cover />\n\n// Discriminated union approach (recommended)\n<Tooltip position=\"before\" />\n```\n\n----------------------------------------\n\nTITLE: Calendar Component Usage with Selected Date State\nDESCRIPTION: Describes how the Calendar component modifies CalendarCell styling to indicate user date selection.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Datepicker.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n`Calendar` component changes styling of `CalendarCell` to communicate that the user has selected a particular date.\n```\n\n----------------------------------------\n\nTITLE: Patch Notes Format\nDESCRIPTION: Standard format for documenting patches and changes with PR references\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Patches\n\n- feat: export legend data and config from Legends component ([PR #33847](https://github.com/microsoft/fluentui/pull/33847) by 110246001+krkshitij@users.noreply.github.com)\n- fix(react-charting): Handle invalid plotly data ([PR #33982](https://github.com/microsoft/fluentui/pull/33982) by 120183316+srmukher@users.noreply.github.com)\n```\n\n----------------------------------------\n\nTITLE: CSS classes applied to a single element\nDESCRIPTION: This CSS example shows how multiple semantic classes are applied to a single element in the v8 makeStyles approach. The component is styled using combined classes. This approach is similar to static CSS.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/makeStyles.md#2025-04-20_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.primary {\n}\n.disabled {\n}\n.primary.disabled {\n}\n\n```\n\n----------------------------------------\n\nTITLE: ColorPicker DOM Structure\nDESCRIPTION: The HTML DOM structure for the ColorPicker component, showing the outer container with appropriate ARIA attributes for accessibility.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-color-picker/library/docs/Spec.md#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div role=\"group\" class=\"fui-ColorPicker\" arial-label=\"ColorPicker\">\n  <!-- Content rendered here -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining ISemanticTextColors Interface in TypeScript for FluentUI\nDESCRIPTION: Interface that defines semantic text color properties for FluentUI themes. It includes properties for various text states like disabled, hovered, and pressed, as well as specific component text colors like buttons and links.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/theme/etc/theme.api.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ISemanticTextColors {\n    accentButtonText: string;\n    actionLink: string;\n    actionLinkHovered: string;\n    bodySubtext: string;\n    bodyText: string;\n    bodyTextChecked: string;\n    buttonText: string;\n    buttonTextChecked: string;\n    buttonTextCheckedHovered: string;\n    buttonTextDisabled: string;\n    buttonTextHovered: string;\n    buttonTextPressed: string;\n    disabledBodySubtext: string;\n    disabledBodyText: string;\n    disabledSubtext: string;\n    disabledText: string;\n    errorText: string;\n    inputPlaceholderText: string;\n    inputText: string;\n    inputTextHovered: string;\n    link: string;\n    linkHovered: string;\n    listText: string;\n    // @deprecated (undocumented)\n    listTextColor: string;\n    messageText: string;\n    primaryButtonText: string;\n    primaryButtonTextDisabled: string;\n    primaryButtonTextHovered: string;\n    primaryButtonTextPressed: string;\n    // @deprecated (undocumented)\n    successText: string;\n    // @deprecated (undocumented)\n    warningText: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Documentation with JSX for FluentUI Stroke Widths\nDESCRIPTION: Sets up the Storybook documentation page structure with Meta configuration and Canvas to display the StrokeWidths component examples.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-theme/stories/src/Theme/strokeWidths/index.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Meta title=\"Theme/Stroke Widths\" />\n\n<h1 class=\"sbdocs-title\">Stroke Widths</h1>\n\n<Canvas withSource=\"none\">\n  <StrokeWidths />\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Markdown Implementation Details List\nDESCRIPTION: Outlines the specific steps for implementing the new component development approach, including package creation and partner integration.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/focus-and-iteration-towers-2.0.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. We will produce a new set of component specific @fluentui/react-* packages. This is like we did for react-button.\n2. These components will be made available to partners for integration into early scenarios, often with our assistance.\n3. We will make early use of these components to vet the model, iterating as we get feedback from partners.\n4. We will publish information on these components on a documentation site (TBD). Along with the current status (Experimental, Preview, Stable).\n5. [Optional] Once these components are stable, we can choose to fold them back into the /react suite package for distribution to broader consumers of @fluentui/react\n```\n\n----------------------------------------\n\nTITLE: Dialog Usage in Fluent Web Components V3\nDESCRIPTION: The HTML snippet for Fluent Web Components version 3 demonstrates how to define a dialog using the 'fluent-dialog-body' element for content, allowing for more expressive layouts with separate image and body elements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/_docs/developer/migration.stories.mdx#2025-04-20_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- V3 -->\n<fluent-dialog>\n  <img src=\"full-width.jpg\" alt=\"optional image\" />\n  <fluent-dialog-body>\n    <h1 slot=\"title\">Title goes here</h1>\n    Contents go here\n  </fluent-dialog-body>\n</fluent-dialog>\n```\n\n----------------------------------------\n\nTITLE: Implementing useCustomStyleHook_unstable in TypeScript\nDESCRIPTION: TypeScript function implementation for the useCustomStyleHook_unstable hook that returns a custom style hook based on the provided hook key.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-shared-contexts/library/etc/react-shared-contexts.api.md#2025-04-20_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport const useCustomStyleHook_unstable: (hook: keyof CustomStyleHooksContextValue_unstable) => CustomStyleHook;\n```\n\n----------------------------------------\n\nTITLE: Event Handler Implementation in Fluent UI v8\nDESCRIPTION: Shows the current implementation of event handlers in Fluent UI v8, where onChange receives an event object and new value.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/event-handlers-arguments.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// v8\n// \"newValue\" is the new value of the component's main data, depending on the component type\nonChange: (ev: React.FormEvent, newValue:  ___);\n```\n\n----------------------------------------\n\nTITLE: Defining ITeachingBubble Interface in TypeScript\nDESCRIPTION: Defines the ITeachingBubble interface with a focus method.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_208\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface ITeachingBubble {\n    focus(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.99.1\nDESCRIPTION: Here, the focus is on pulling the @fluentui/react library to version 8.99.1, ensuring users have access to the latest changes and improvements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/azure-themes/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.99.1 ([PR #25409](https://github.com/microsoft/fluentui/pull/25409) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Renaming MaximizeFrame to Block in Fluent UI\nDESCRIPTION: Demonstrates the migration of the maximizeFrame property by using the block property to maintain the same behavior in the Fluent UI Image component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-image/library/docs/MIGRATION.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Image src=\"example.jpg\" block />\n```\n\n----------------------------------------\n\nTITLE: Event Handler Implementation in Fluent UI Northstar\nDESCRIPTION: Shows the current implementation in Fluent UI Northstar, where onChange receives an event object and data object containing props with new value.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/event-handlers-arguments.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Northstar\n// \"data\" is props, with the new value mixed in on top\n// const data = { ...props, value: newValue }\nonChange: (ev: React.FormEvent, data: TProps);\n```\n\n----------------------------------------\n\nTITLE: After Publish Package.json Structure with Mismatched Dependencies\nDESCRIPTION: This JSON snippet shows the package.json after publishing, illustrating the version increment of the Fluent UI theme while the dependent package still references the previous version.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/dependency-mismatch/README.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"@fluentui/react-theme\",\n  \"version\": \"9.0.2\"\n}\n\n{\n  \"name\": \"@fluentui/public-docsite-v9\",\n  \"dependencies\": {\n    \"@fluentui/react-theme\": \"^9.0.1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.98.3\nDESCRIPTION: This snippet describes the update to version 8.98.3 for the @fluentui/react package, reinforcing the library's ongoing enhancements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/azure-themes/CHANGELOG.md#2025-04-20_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.98.3 ([PR #25219](https://github.com/microsoft/fluentui/pull/25219) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for React Image Stories\nDESCRIPTION: This code snippet demonstrates how to configure Storybook to include stories for the React Image component from the FluentUI library. It specifies the file paths to the MDX and TypeScript/TSX story files.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-image/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-image/stories/src/**/*.stories.mdx', '../packages/react-components/react-image/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-utilities version\nDESCRIPTION: This patch updates the version of the `@fluentui/react-utilities` dependency.  Bumping this package ensures that the `@fluentui/react-badge` component uses the latest utility functions and bug fixes available in the utilities package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nBump @fluentui/react-utilities to v9.18.17 ([PR #33238](https://github.com/microsoft/fluentui/pull/33238) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Defining Icon Identifiers in JavaScript\nDESCRIPTION: This set of code snippets enumerates icons and identifiers in a JavaScript object or similar construct without accompanying documentation. Each entry corresponds to an identifier with a string value that is presumed to represent an icon within the Fluent UI library. These enums provide placeholder values for the icons' usage in the library's components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/font-icons-mdl2/etc/font-icons-mdl2.api.md#2025-04-20_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// (undocumented)\nFilterSolid = \"FilterSolid\"\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// (undocumented)\nFiltersSolid = \"FiltersSolid\"\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// (undocumented)\nFinancial = \"Financial\"\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// (undocumented)\nFinancialMirroredSolid = \"FinancialMirroredSolid\"\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// (undocumented)\nFinancialSolid = \"FinancialSolid\"\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// (undocumented)\nFingerprint = \"Fingerprint\"\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// (undocumented)\nFitPage = \"FitPage\"\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// (undocumented)\nFitWidth = \"FitWidth\"\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// (undocumented)\nFiveTileGrid = \"FiveTileGrid\"\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// (undocumented)\nFlag = \"Flag\"\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-shared-contexts version\nDESCRIPTION: This patch updates the version of the `@fluentui/react-shared-contexts` dependency.  Bumping this package ensures that the `@fluentui/react-badge` component uses the latest features and bug fixes available in the shared contexts package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nBump @fluentui/react-shared-contexts to v9.23.1 ([PR #34034](https://github.com/microsoft/fluentui/pull/34034) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Defining Color Palette Variables in TypeScript\nDESCRIPTION: Exports CSS variable references for FluentUI's color tokens covering navy, peach, pink, platinum, plum, pumpkin, purple, red, royal blue, seafoam, steel, teal and yellow color variations. Each color has background, border and foreground variants.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const colorPaletteNavyBackground2 = \"var(--colorPaletteNavyBackground2)\";\nexport const colorPaletteNavyBorderActive = \"var(--colorPaletteNavyBorderActive)\";\nexport const colorPaletteNavyForeground2 = \"var(--colorPaletteNavyForeground2)\";\n// ... additional color definitions\n```\n\n----------------------------------------\n\nTITLE: Defining OverflowGroupState Type in TypeScript\nDESCRIPTION: This snippet defines the OverflowGroupState type, which represents the visibility states of overflow item groups, allowing the system to determine how to present items based on their overflow status.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/priority-overflow/etc/priority-overflow.api.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type OverflowGroupState = 'visible' | 'hidden' | 'overflow';\n```\n\n----------------------------------------\n\nTITLE: ToggleButton Component Class Definition in TypeScript\nDESCRIPTION: Defines the ToggleButton component class extending Button with properties and methods for toggle state management.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_58\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class ToggleButton extends Button {\n    // (undocumented)\n    connectedCallback(): void;\n    mixed?: boolean;\n    // @internal\n    protected mixedChanged(): void;\n    // @override\n    protected press(): void;\n    pressed: boolean;\n    // @internal\n    protected pressedChanged(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Local Machine Flow for React 18 Type Checking in Fluent UI v9\nDESCRIPTION: These commands build the v9 libraries and run type checking using a special tsconfig that consumes linked monorepo build packages.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/react-18-tests-v9/README.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nyarn nx run react-18-tests-v9:build\n\nyarn nx run react-18-tests-v9:type-check\n```\n\n----------------------------------------\n\nTITLE: FluentUI Global Context Package Version History Entry\nDESCRIPTION: Changelog entry showing version details, date, comparison links and dependency version bumps for @fluentui/global-context package\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/global-context/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.0.0-beta.32](https://github.com/microsoft/fluentui/tree/@fluentui/global-context_v9.0.0-beta.32)\n\nWed, 28 Jun 2023 11:12:21 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/global-context_v9.0.0-beta.31..@fluentui/global-context_v9.0.0-beta.32)\n\n### Changes\n\n- Bump @fluentui/react-context-selector to v9.1.25 ([PR #28320](https://github.com/microsoft/fluentui/pull/28320) by beachball)\n- Bump @fluentui/react-utilities to v9.10.0 ([PR #28320](https://github.com/microsoft/fluentui/pull/28320) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating CSS Specificity Workaround\nDESCRIPTION: This CSS snippet shows a temporary workaround for the class prefixing issue by increasing the specificity of CSS rules in the consuming app.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/shared/build-system/stop-styles-transforms.md#2025-04-20_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.color-red {\n}\n/* becomes ⬇️ */\n.PREFIX .color-red {\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating @internal Access Modifier in TypeScript\nDESCRIPTION: Shows how the @internal modifier is used to mark an API item for internal use only, which will be trimmed from the public API surface by tooling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/shared/build-system/package-public-api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @filename package-a/src/index.ts\n\n/**\n *\n * @internal\n */\nexport function doSomething(): void {}\n\nexport function hello(): void {}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// @filename package-a/dist/index.d.ts\n\nexport declare function hello(): void;\n```\n\n----------------------------------------\n\nTITLE: Migrating Style Overrides in Fluent UI - Before\nDESCRIPTION: Example of how style overrides were applied in Fluent UI v0 using the variables prop and a separate styles file.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Menu.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// in COMPONENT_NAME.tsx\nimport { MenuButton, Button } from '@fluentui/react-northstar';\n\nexport const Component = () => (\n  <MenuButton\n    trigger={<Button content=\"Open\" />}\n    menu={['1']}\n    variables={{ isBreakoutRoomsAssignmentMenuButton: true }}\n  />\n);\n\n// in menu-button-styles.ts\nexport const menuButtonStyles = {\n  root: ({ variables: { isBreakoutRoomsAssignmentMenuButton } }) => ({\n    ...(isBreakoutRoomsAssignmentMenuButton && {\n      width: '100%',\n    }),\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Bumping FluentUI React Monaco Editor Version with PR\nDESCRIPTION: This snippet shows how to bump the version of the @fluentui/react-monaco-editor package. The pull request number provides a direct link to the change within the repository. This action is part of maintaining the dependencies for the project.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-docsite-components/CHANGELOG.md#2025-04-20_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n\"- Bump @fluentui/react-monaco-editor to v1.7.134 ([PR #29462](https://github.com/microsoft/fluentui/pull/29462) by beachball)\"\n```\n\n----------------------------------------\n\nTITLE: Option C Implementation Example\nDESCRIPTION: Shows the v7/v8 approach implementation where the second argument is just the new value.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/event-handlers-arguments.md#2025-04-20_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst onChange = (ev: React.FormEvent, value: string) => {\n  // I can access the new value.\n  console.log(`The new value is ${value}`);\n\n  // I can not access the props of the originating component; `ev.target` may handle some of this:\n  console.log(`The input (#${ev.target.id}) change its value to ${value}.`);\n\n  // I can not access additional metadata without baking it into `value`, which may require a breaking change\n  const { index } = value;\n};\n```\n\n----------------------------------------\n\nTITLE: Button Loader Usage with as Prop\nDESCRIPTION: This code demonstrates the broken `as` prop issue.  When using shorthand to override the `loader` to a `div`, the `Loader` component is not rendered, instead it renders a plain div.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/simplify-prop-merging.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// During usage, want to use `Loader` as `div`\n<Button loader={{ as: 'div' }} />\n```\n\n----------------------------------------\n\nTITLE: ObjectShorthandProps Definition\nDESCRIPTION: This code defines the `ObjectShorthandProps` type, which is used for defining the props of slots. It includes support for `as` (for overriding the HTML element) and `ref` properties, providing more flexibility when working with slots.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/root-as-slot.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype ObjectShorthandProps<Props = {}, Ref = unknown, As extends keyof JSX.IntrinsicElements = never> = Props &\n  React.RefAttributes<Ref> & {\n    as?: As;\n    children?: Props['children'] | ShorthandRenderFunction<Props>;\n  };\n```\n\n----------------------------------------\n\nTITLE: Bumping React Tabster Version in Fluent UI\nDESCRIPTION: This entry confirms the bump of the @fluentui/react-tabster to version 9.24.0, part of the ongoing commitment to enhance the Fluent UI framework and optimize internal component management.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tree/library/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n- Bump @fluentui/react-tabster to v9.24.0 ([PR #33876](https://github.com/microsoft/fluentui/pull/33876) by beachball)\n```\n\n----------------------------------------\n\nTITLE: FluentUI Menu Component Type Definitions\nDESCRIPTION: Type definitions for Menu components including MenuProps, MenuTriggerProps, MenuListProps, and MenuItemProps\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/library/docs/Spec.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport type MenuProps = MenuListProps &\n  Pick<PositioningProps, '<Positioning props as necessary>'> & {\n    /**\n     * Explicitly require children\n     */\n\n    children: React.ReactNode;\n    /**\n     * Whether the popup is open\n     */\n    open?: boolean;\n\n    /**\n     * Call back when the component requests to change value\n     * The `open` value is used as a hint when directly controlling the component\n     */\n    onOpenChange?: (e: MenuOpenEvents, data: MenuOpenChangeData) => void;\n\n    /**\n     * Whether the popup is open by default\n     */\n    defaultOpen?: boolean;\n\n    /**\n     * Wrapper to style and add events for the popup\n     */\n    menuPopup?: ShorthandProps<React.HTMLAttributes<HTMLElement>>;\n\n    /*\n     * Opens the menu on hover\n     */\n    openOnHover?: boolean;\n\n    /**\n     * Opens the menu on right click (context menu), removes all other menu open interactions\n     */\n    openOnContext?: boolean;\n\n    /**\n     * Root menus are rendered out of DOM order on `document.body`, use this to render the menu in DOM order\n     * This option is disregarded for submenus\n     */\n    inline?: boolean;\n  };\n```\n\n----------------------------------------\n\nTITLE: Defining IFabricStyles Interface in TypeScript\nDESCRIPTION: Defines the IFabricStyles interface with style properties for the root and themed body. This interface is marked as @public but undocumented.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_136\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IFabricStyles {\n    // (undocumented)\n    bodyThemed: IStyle;\n    // (undocumented)\n    root: IStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Packages to Move in Markdown\nDESCRIPTION: A markdown list of @fluentui/react-components packages that should be moved to the new 'react-components' subfolder.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/shared/build-system/05.1-react-components-folder-organization.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Packages to move include `keyboard-keys`, `priority-overflow`, `react-accordion`, `react-aria`, `react-avatar`, `react-badge`, `react-button`, `react-card`, `react-checkbox`, `react-combobox`, `react-conformance-griffel`, `react-context-selector`, `react-dialog`, `react-divider`, `react-image`, `react-input`, `react-label`, `react-link`, `react-list`, `react-menu`, `react-popover`, `react-portal`, `react-positioning`, `react-priority-overflow`, `react-provider`, `react-radio`, `react-select`, `react-shared-contexts`, `react-slider`, `react-spinbutton`, `react-spinner`, `react-storybook`, `react-storybook-addon`, `react-switch`, `react-tabs`, `react-tabster`, `react-text`, `react-textarea`, `react-theme`, `react-toolbar`, `react-tooltip`, `react-utilities`, and the `react-components` package itself.\n```\n\n----------------------------------------\n\nTITLE: Declarative Chart Component Interface\nDESCRIPTION: TypeScript interface defining props for a declarative chart component, including chart schema and optional change event handler\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charts/library/etc/react-charts.api.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface DeclarativeChartProps extends React_2.RefAttributes<HTMLDivElement> {\n    chartSchema: Schema;\n    componentRef?: React_2.RefObject<IDeclarativeChart>;\n    onSchemaChange?: (eventData: Schema) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Current Package Layout Structure\nDESCRIPTION: Shows the current package organization where @fluentui/react-field exports all Field components and their dependencies.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/field-package-layout.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `@fluentui/react-field` exports:\n  - Field utilities (`useField_unstable`, etc.)\n  - `CheckboxField`\n  - `ComboboxField`\n  - `InputField`\n  - `ProgressField`\n  - `RadioGroupField`\n  - `SelectField`\n  - `SliderField`\n  - `SpinButtonField`\n  - `SwitchField`\n  - `TextareaField`\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.112.4\nDESCRIPTION: Updates the @fluentui/react package to version 8.112.4, focusing on fixing issues and improving stability.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluent2-theme/CHANGELOG.md#2025-04-20_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.112.4 ([commit](https://github.com/microsoft/fluentui/commit/70d0762fd12eb211f7c1dbe31a23b2fbb73a67c4) by beachball)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/set-version to v8.2.12 ([commit](https://github.com/microsoft/fluentui/commit/70d0762fd12eb211f7c1dbe31a23b2fbb73a67c4) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Defining RootAPI Interface in TypeScript\nDESCRIPTION: Defines the RootAPI interface which extends Disposable and RootAPIInternal. It includes an eventTarget property of type EventTarget.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tabster/etc/react-tabster.api.md#2025-04-20_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\ninterface RootAPI extends Disposable, RootAPIInternal {\n    // (undocumented)\n    eventTarget: EventTarget;\n}\n```\n\n----------------------------------------\n\nTITLE: WindowProviderProps Type\nDESCRIPTION: Defines the `WindowProviderProps` type, which includes the window object and optional children. The window object can be undefined.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-window-provider/etc/react-window-provider.api.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport type WindowProviderProps = {\n    window: Window | undefined;\n    children?: React_2.ReactNode;\n};\n```\n\n----------------------------------------\n\nTITLE: CSS variables limitation in RTL flipping\nDESCRIPTION: Shows how CSS variables in style values might not be automatically flipped in RTL contexts. This is a limitation of the automatic RTL flipping system.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/styles-handbook.md#2025-04-20_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeStyles } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  root: {\n    // ⚠️ \"boxShadow\" will not be flipped in this example\n    boxShadow: 'var(--box-shadow)',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initial Preview Package Release\nDESCRIPTION: First release of the @fluentui/react-search-preview package, introducing preview functionality for search components in FluentUI React\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-search/library/CHANGELOG.md#2025-04-20_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Dry Run Command - Shell\nDESCRIPTION: Command to preview generator changes without writing to disk.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/rc-caret/README.md#2025-04-20_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:rc-caret --dry-run\n```\n\n----------------------------------------\n\nTITLE: DisplayToggle Component with Theme Switcher - FluentUI XML\nDESCRIPTION: XML markup for a theme switcher component that toggles between light and dark mode drawer images using DisplayToggle with label and theme-specific image sources.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/DrawerPage/docs/android/DrawerOverview.md#2025-04-20_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<DisplayToggle onText=\"Dark\" offText=\"Light\" label=\"Theme Switcher\">\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/android/updated/img_drawer_01_light.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/android/updated/img_drawer_01_dark.png?text=DarkMode\" />\n\n</DisplayToggle>\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-docsite-components to v8.7.23\nDESCRIPTION: The entry reflects the bump of '@fluentui/react-docsite-components' to version 8.7.23, targeting enhanced documentation features.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/theming-designer/CHANGELOG.md#2025-04-20_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react-docsite-components to v8.7.23 ([PR #23293](https://github.com/microsoft/fluentui/pull/23293) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Implementing useForceUpdate Hook in TypeScript\nDESCRIPTION: An internal hook that returns a function to force a component to re-render when called.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-utilities/etc/react-utilities.api.md#2025-04-20_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @internal\nexport function useForceUpdate(): React_2.DispatchWithoutAction;\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-docsite-components to v8.7.20\nDESCRIPTION: This entry underscores the update of '@fluentui/react-docsite-components' to v8.7.20, aiming for improved documentation tools.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/theming-designer/CHANGELOG.md#2025-04-20_snippet_23\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react-docsite-components to v8.7.20 ([PR #23207](https://github.com/microsoft/fluentui/pull/23207) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Applying ARIA Role and Label to Color-based Badge in JSX\nDESCRIPTION: Illustrates how to make a color-based badge accessible by adding role=\"img\" and an aria-label to convey its meaning to screen readers.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/stories/src/Badge/BadgeBestPractices.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Badge role=\"img\" aria-label=\"Active\" appearance=\"filled\" color=\"brand\" />} />\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react-shared-contexts version\nDESCRIPTION: This patch updates the version of the `@fluentui/react-shared-contexts` dependency.  Bumping this package ensures that the `@fluentui/react-badge` component uses the latest features and bug fixes available in the shared contexts package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-badge/library/CHANGELOG.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nBump @fluentui/react-shared-contexts to v9.23.0 ([PR #34032](https://github.com/microsoft/fluentui/pull/34032) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Defining ResizeGroup Component in TypeScript\nDESCRIPTION: Exports the ResizeGroup component, ResizeGroupBase, and ResizeGroupDirection enum.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_244\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const ResizeGroup: React_2.FunctionComponent<IResizeGroupProps>;\n\n// @public (undocumented)\nexport const ResizeGroupBase: React_2.FunctionComponent<IResizeGroupProps>;\n\n// @public (undocumented)\nexport enum ResizeGroupDirection {\n}\n```\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react-card to version v9.0.0-beta.11\nDESCRIPTION: This entry describes the patching of the @fluentui/react-card to version v9.0.0-beta.11, part of the familiar cycle of updates aimed at maintaining component reliability.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/vr-tests-react-components/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react-card to v9.0.0-beta.11 ([PR #21995](https://github.com/microsoft/fluentui/pull/21995) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Displaying iOS Navigation Controller Theme Toggle with Portrait and Landscape Views\nDESCRIPTION: HTML/Markdown code that creates a theme switcher display toggle showing the iOS navigation controller in both light and dark modes, with separate portrait and landscape orientation examples.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/NavBarPage/docs/ios/NavBarOverview.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- prettier-ignore-start -->\n<DisplayToggle onText=\"Dark\" offText=\"Light\" label=\"Theme Switcher\">\n### Portrait\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_navigation_01_iphoneportrait_light.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_navigation_01_iphoneportrait_dark.png?text=DarkMode\" />\n\n### Landscape\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_navigation_01_iphonelandscape_light.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_navigation_01_iphonelandscape_dark.png?text=DarkMode\" />\n\n</DisplayToggle>\n<!-- prettier-ignore-end -->\n```\n\n----------------------------------------\n\nTITLE: Version Tag Example in Markdown\nDESCRIPTION: Shows versioning and comparison link format used in the changelog\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [8.2.41](https://github.com/microsoft/fluentui/tree/@fluentui/public-docsite_v8.2.41)\n```\n\n----------------------------------------\n\nTITLE: String Key Constants\nDESCRIPTION: Exports string constants representing keyboard keys and media controls for use in keyboard event handling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/keyboard-keys/etc/keyboard-keys.api.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const FavoriteRecall3 = \"FavoriteRecall3\";\nexport const FavoriteStore0 = \"FavoriteStore0\";\nexport const FavoriteStore1 = \"FavoriteStore1\";\nexport const Find = \"Find\";\nexport const Fn = \"Fn\";\nexport const FnLock = \"FnLock\";\n// Additional exports...\n```\n\n----------------------------------------\n\nTITLE: Adding StrictMode Decorator in Storybook\nDESCRIPTION: This code snippet demonstrates how to add the `withStrictMode` decorator to Storybook. This decorator allows you to wrap a story in `React.StrictMode` by adding a knob to control the strict mode.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/storybook/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addDecorator } from '@storybook/react';\nimport { withStrictMode } from '@fluentui/storybook';\n\naddDecorator(withStrictMode);\n```\n\n----------------------------------------\n\nTITLE: Declaring DatePickerController Class Names\nDESCRIPTION: Declaration of class names for the DatePicker controller across Swift and Objective-C implementations in FluentUI\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/DatePickerPage/docs/mac/DatePickerImplementation.md#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nDatePickerController in Swift\nMSFDatePickerController in Objective-C\n```\n\n----------------------------------------\n\nTITLE: Base Web Button DOM Structure\nDESCRIPTION: HTML structure for Base Web button with SVG icon implementation. Uses data attributes and extensive CSS classes for styling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Button.md#2025-04-20_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<button\n  data-baseweb=\"button\"\n  class=\"b3 ay b4 b5 b6 b7 b8 b9 ba bb bc b1 bd mh mi bg bh bi bj ah jp bk ex bl bm bn bo fi fk d6 fj bt ae ms mt mu\"\n>\n  <div class=\"al j6\">\n    <svg data-baseweb=\"icon\" viewBox=\"0 0 24 24\" class=\"by bz c0 d3 md\">\n      <title>Arrow Right</title>\n      <path\n        fill-rule=\"evenodd\"\n        clip-rule=\"evenodd\"\n        d=\"M6 12C6 12.5523 6.44772 13 7 13H14.5858L12.2929 15.2929C11.9024 15.6834 11.9024 16.3166 12.2929 16.7071C12.6834 17.0976 13.3166 17.0976 13.7071 16.7071L17.7071 12.7071C17.8946 12.5196 18 12.2652 18 12C18 11.7348 17.8946 11.4804 17.7071 11.2929L13.7071 7.29289C13.3166 6.90237 12.6834 6.90237 12.2929 7.29289C11.9024 7.68342 11.9024 8.31658 12.2929 8.70711L14.5858 11H7C6.44772 11 6 11.4477 6 12Z\"\n      ></path>\n    </svg>\n  </div>\n  Start Enhancer\n</button>\n```\n\n----------------------------------------\n\nTITLE: Defining LocalizedFontNames Namespace in TypeScript for FluentUI\nDESCRIPTION: Namespace that provides font name constants for various languages and regions. These are used when specifying font names directly without full font-family CSS declarations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/theme/etc/theme.api.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport namespace LocalizedFontNames {\n    const // (undocumented)\n    Arabic = \"Segoe UI Web (Arabic)\";\n    const // (undocumented)\n    Cyrillic = \"Segoe UI Web (Cyrillic)\";\n    const // (undocumented)\n    EastEuropean = \"Segoe UI Web (East European)\";\n    const // (undocumented)\n    Greek = \"Segoe UI Web (Greek)\";\n    const // (undocumented)\n    Hebrew = \"Segoe UI Web (Hebrew)\";\n    const // (undocumented)\n    Thai = \"Leelawadee UI Web\";\n    const // (undocumented)\n    Vietnamese = \"Segoe UI Web (Vietnamese)\";\n    const // (undocumented)\n    WestEuropean = \"Segoe UI Web (West European)\";\n    const // (undocumented)\n    Selawik = \"Selawik Web\";\n    const // (undocumented)\n    Armenian = \"Segoe UI Web (Armenian)\";\n    const // (undocumented)\n    Georgian = \"Segoe UI Web (Georgian)\";\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Codemods with Yarn Commands\nDESCRIPTION: This snippet details the commands to test codemods by utilizing yarn. It first installs the dependencies and then starts the test suite to verify if the codemods apply correctly. Ensure yarn is installed and run these commands in sequence in your terminal.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/codemods/README.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn\nyarn start-test\n```\n\n----------------------------------------\n\nTITLE: Formatting Agenda Items in Loop Meeting Notes\nDESCRIPTION: Examples of how to format agenda items using author attribution in two different styles - using @alias notation or bracketed author names.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/conducting-meetings-style-guide.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n//@alias / <Topic> --- translates to --> 💬 @Martin / Write a style guide for drinking beer\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<Topic> / [<Author>] --- translates to --> Write a style guide for drinking beer / [Martin]\n```\n\n----------------------------------------\n\nTITLE: Slots for Collections in Fluent UI Components - Documentation Note\nDESCRIPTION: This note highlights that while some components use slots for individual values, collections of items, like in the Menu component, require alternative approaches as converged components will not support slots for collections.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Slots.md#2025-04-20_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Z-Index Fix Implementation\nDESCRIPTION: Patch note describing z-index fix for inline DatePickerCompat rendering\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-datepicker-compat/library/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- fix: set popup's z-index: 1 when rendering DatePickerCompat inline. ([PR #30281](https://github.com/microsoft/fluentui/pull/30281) by seanmonahan@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Inheriting Parent CSS Vars and Reusing Style Tag\nDESCRIPTION: This code snippet is similar to the previous one, except that all `ThemeProviders` now share the same `<style />` tag. Requires `themeToCssVars` to convert theme to css vars, and `diff` function to compare two themes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/theme-css-variable-insertion.md#2025-04-20_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n\"const cssVars = themeToCssVars(theme);\nconst parentCssVars = themeToCssVars(parentTheme);\nconst diff = diff(cssVars, parentCssVars)\nconst cssRule = {...};\n// result: .theme-provider { --css-var: '#fff' }\nstyleEl.sheet.insertRule(cssRule);\n\n<head>\n  <style id=\\\"the one\\\" />\n</head>\n\n\n<div class=\\\"theme-provider-1\\\">\n    <div class=\\\"theme-provider-1 theme-provider-2\\\">\n        <div class=\\\"theme-provider-1 theme-provider-2 theme-provider-3\\\">\n        </div>\n    </div>\n</div>\"\n```\n\n----------------------------------------\n\nTITLE: Running Storybook for Calendar Component\nDESCRIPTION: Command to run Storybook locally for the Calendar component development and testing.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-calendar-compat/library/README.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn workspace @fluentui/react-calendar-compat start\n```\n\n----------------------------------------\n\nTITLE: FluentUI React Monaco Editor Change Comparisons\nDESCRIPTION: Markdown links to compare changes between different versions of the package\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-monaco-editor/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-monaco-editor_v1.6.30..@fluentui/react-monaco-editor_v1.6.31)\n```\n\n----------------------------------------\n\nTITLE: Displaying FluentUI iOS Tab Bar Examples with Theme Toggle in HTML/Markdown\nDESCRIPTION: This code snippet demonstrates how to showcase FluentUI iOS Tab Bar examples using a DisplayToggle component to switch between light and dark themes. The code shows portrait and landscape orientations of the tab bar component with corresponding images.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/BottomNavigationPage/docs/ios/BottomNavigationOverview.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<DisplayToggle onText=\"Dark\" offText=\"Light\" label=\"Theme Switcher\">\n### Portrait\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_tabbar_01_portrait_light.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_tabbar_01_portrait_dark.png?text=DarkMode\" />\n\n### Landscape\n\n<img className=\"off\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_tabbar_02_landscape_light.png?text=LightMode\" />\n<img className=\"on\" src=\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/fabric-website/images/controls/ios/updated/img_tabbar_02_landscape_dark.png?text=DarkMode\" />\n\n</DisplayToggle>\n```\n\n----------------------------------------\n\nTITLE: Running Recipe Generator\nDESCRIPTION: Executes the recipe-generator workspace plugin to generate a recipe. This command initiates the recipe generation process, potentially prompting the user for input if options are not provided.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/recipe-generator/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn nx g @fluentui/workspace-plugin:recipe-generator\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.67.0\nDESCRIPTION: This entry reflects the version increment of '@fluentui/react' to 8.67.0, supporting new features and bug fixes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/theming-designer/CHANGELOG.md#2025-04-20_snippet_41\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.67.0 ([PR #22812](https://github.com/microsoft/fluentui/pull/22812) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Migrating FlexItem Style Overrides in Fluent UI v9 (TSX)\nDESCRIPTION: Example of how to migrate style overrides from FlexItem in v0 to a child component in v9. It demonstrates moving styles applied using variables to the child component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/FlexItem.stories.mdx#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// in COMPONENT_NAME.tsx\nimport { Button, Flex } from \"@fluentui/react-components\";\nimport { useStyles } from \"./COMPONENT_NAME.styles.ts\";\n\nexport const Component = () => {\n  const classes = useStyles();\n\n  return (\n    <Flex>\n      <Button className={classes.root}>I am a button</Button>\n    <Flex/>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Bumping React Aria Version in Fluent UI\nDESCRIPTION: This snippet mentions the update of the @fluentui/react-aria package to version 9.14.0, indicating ongoing improvements and version control practices in the project. It's part of a series of patches where dependencies for UI components are regularly updated to ensure compatibility and performance.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tree/library/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n- Bump @fluentui/react-aria to v9.14.0 ([PR #33876](https://github.com/microsoft/fluentui/pull/33876) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Implementing BaseSpinner Class in TypeScript\nDESCRIPTION: Defines the BaseSpinner class which extends FASTElement. It provides a foundation for spinner components with element internals.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class BaseSpinner extends FASTElement {\n    constructor();\n    // @internal\n    elementInternals: ElementInternals;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring ThemeDesigner for Storybook\nDESCRIPTION: Imports the ThemeDesigner component and Meta component from Storybook, then configures display parameters to hide various UI elements for a clean presentation.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/theme-designer/src/ThemeDesigner.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeDesigner } from './index';\nimport { Meta } from '@storybook/addon-docs';\n\n<Meta\n  title=\"ThemeDesigner\"\n  parameters={{\n    showToolbar: false,\n    viewMode: 'canvas',\n    toolbar: {\n      hidden: true,\n      title: { hidden: true },\n      zoom: { hidden: true },\n      eject: { hidden: true },\n      copy: { hidden: true },\n      fullscreen: { hidden: true },\n      'storybook/fluentui-react-addon/strict-mode': { hidden: true },\n      'storybook/fluentui-react-addon/theme': { hidden: true },\n    },\n    backgrounds: {\n      disable: true,\n      grid: {\n        disable: true,\n      },\n      outline: {\n        disable: true,\n      },\n    },\n  }}\n/>\n\n<ThemeDesigner />\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/foundation-legacy to v8.2.7\nDESCRIPTION: The entry features the upgrade of '@fluentui/foundation-legacy' to version 8.2.7, critical for maintaining legacy support in Fluent UI projects.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/theming-designer/CHANGELOG.md#2025-04-20_snippet_37\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/foundation-legacy to v8.2.7 ([PR #22966](https://github.com/microsoft/fluentui/pull/22966) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react version\nDESCRIPTION: This code snippet describes the common pattern of bumping the @fluentui/react dependency within patch releases of the @fluentui/fluent2-theme package. This action ensures that the theme stays in sync with the latest component library updates. The changelog entries highlight this recurring pattern.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluent2-theme/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n\nBump @fluentui/react to v8.121.5 ([PR #33048](https://github.com/microsoft/fluentui/pull/33048) by beachball)\n\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.71.1\nDESCRIPTION: This entry records updating '@fluentui/react' to version 8.71.1, contributing to the ongoing improvement efforts within the Fluent UI library.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/theming-designer/CHANGELOG.md#2025-04-20_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.71.1 ([PR #23126](https://github.com/microsoft/fluentui/pull/23126) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Renaming 'context' Prop to 'mountNode' in PortalInner\nDESCRIPTION: A breaking change that renames the 'context' prop to 'mountNode' in the PortalInner component. This affects how the mounting node for portals is specified.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/fluentui/CHANGELOG.md#2025-04-20_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Updated usage of PortalInner with 'mountNode' prop\n<PortalInner mountNode={document.body}>\n  {/* Portal content */}\n</PortalInner>\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format in Markdown\nDESCRIPTION: Structured markdown format for documenting version changes and dependency updates in the FluentUI public docsite resources package.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-resources/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## [8.1.41](https://github.com/microsoft/fluentui/tree/@fluentui/public-docsite-resources_v8.1.41)\n\nTue, 30 Nov 2021 07:37:33 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/public-docsite-resources_v8.1.41..@fluentui/public-docsite-resources_v8.1.41)\n\n### Patches\n\n- Bump @fluentui/react to v8.45.0 ([PR #20833](https://github.com/microsoft/fluentui/pull/20833) by beachball)\n- Bump @fluentui/azure-themes to v8.1.107 ([PR #20833](https://github.com/microsoft/fluentui/pull/20833) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Version 9.2.5 Release Notes\nDESCRIPTION: Changelog entry documenting patches including design changes to ColorSwatch selected state and dependency version bumps.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-swatch-picker/library/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.2.5](https://github.com/microsoft/fluentui/tree/@fluentui/react-swatch-picker_v9.2.5)\n\nWed, 16 Apr 2025 19:42:04 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-swatch-picker_v9.2.4..@fluentui/react-swatch-picker_v9.2.5)\n\n### Patches\n\n- fix: design change of selected state for ColorSwatch\n- Bump @fluentui/react-context-selector to v9.1.76\n- Bump @fluentui/react-field to v9.2.5\n- Bump @fluentui/react-jsx-runtime to v9.0.54\n- Bump @fluentui/react-tabster to v9.24.5\n- Bump @fluentui/react-utilities to v9.19.0\n```\n\n----------------------------------------\n\nTITLE: Defining Persona Components and Enums in TypeScript\nDESCRIPTION: Exports Persona-related components and enums including PersonaInitialsColor, PersonaPresence, and PersonaSize.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_240\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const Persona: React_2.FunctionComponent<IPersonaProps>;\n\nexport const PersonaBase: React_2.FunctionComponent<IPersonaProps>;\n\nexport const PersonaCoin: React_2.FunctionComponent<IPersonaCoinProps>;\n\nexport const PersonaCoinBase: React_2.FunctionComponent<IPersonaCoinProps>;\n\n// @public (undocumented)\nexport enum PersonaInitialsColor {\n    // @deprecated (undocumented)\n    black = 11,\n    // (undocumented)\n    blue = 1,\n    // (undocumented)\n    burgundy = 19,\n    // (undocumented)\n    coolGray = 21,\n    // (undocumented)\n    cyan = 23,\n    // (undocumented)\n    darkBlue = 2,\n    // (undocumented)\n    darkGreen = 6,\n    // (undocumented)\n    darkRed = 14,\n    // (undocumented)\n    gold = 18,\n    gray = 22,\n    // (undocumented)\n    green = 5,\n    // (undocumented)\n    lightBlue = 0,\n    // (undocumented)\n    lightGreen = 4,\n    // (undocumented)\n    lightPink = 7,\n    // (undocumented)\n    lightRed = 17,\n    // (undocumented)\n    magenta = 9,\n    // (undocumented)\n    orange = 12,\n    // (undocumented)\n    pink = 8,\n    // (undocumented)\n    purple = 10,\n    // @deprecated (undocumented)\n    red = 13,\n    // (undocumented)\n    rust = 24,\n    // (undocumented)\n    teal = 3,\n    transparent = 15,\n    // (undocumented)\n    violet = 16,\n    // (undocumented)\n    warmGray = 20\n}\n\n// @public (undocumented)\nexport enum PersonaPresence {\n    // (undocumented)\n    away = 3,\n    // (undocumented)\n    blocked = 5,\n    // (undocumented)\n    busy = 6,\n    // (undocumented)\n    dnd = 4,\n    // (undocumented)\n    none = 0,\n    // (undocumented)\n    offline = 1,\n    // (undocumented)\n    online = 2\n}\n\n// @public (undocumented)\nexport enum PersonaSize {\n    // @deprecated\n    extraExtraSmall = 1,\n    // @deprecated\n    extraLarge = 6,\n    // @deprecated\n    extraSmall = 2,\n    // @deprecated\n    large = 5,\n    // @deprecated\n    regular = 4,\n    // @deprecated\n    size10 = 9,\n    size100 = 15,\n    size120 = 18,\n    // @deprecated\n    size16 = 8,\n    size24 = 10,\n    // @deprecated\n    size28 = 7,\n    size32 = 11,\n    size40 = 12,\n    size48 = 13,\n    size56 = 16,\n    size72 = 14,\n    size8 = 17,\n    // @deprecated\n    small = 3,\n    // @deprecated\n    tiny = 0\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Avatar with Profile Picture in Swift using FluentUI\nDESCRIPTION: This code snippet shows how to create an AvatarView with a profile image. It uses the contact's name, email, and a named image resource.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/AvatarPage/docs/mac/AvatarUsage.md#2025-04-20_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nAvatarView(avatarSize: size, contactName: \"Amanda Brady\", contactEmail: \"Amanda.Brady@example.com\", contactImage: NSImage(named: \"Amanda\"))\n```\n\n----------------------------------------\n\nTITLE: Property Mapping Table for TimePicker Migration from v8 to v9\nDESCRIPTION: This markdown table outlines the property mappings between v8 TimePicker and v9 TimePicker, showing how various props have changed or been replaced in the new version.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-timepicker-compat/library/docs/Migration.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| v8 TimePicker         | v9 TimePicker                                                 |\n| --------------------- | ------------------------------------------------------------- |\n| `dateAnchor`          | `dateAnchor`                                                  |\n| `defaultValue`        | `defaultSelectedTime`                                         |\n| `increments`          | `increment`                                                   |\n| `label`               | handled by `Field`                                            |\n| `onChange`            | `onTimeChange`                                                |\n| `onFormatDate`        | `formatDateToTimeString`                                      |\n| `onValidateUserInput` | `formatDateToTimeString`                                      |\n| `onValidationResult`  | `onTimeChange` contains error type in `data`                  |\n| `showSeconds`         | `showSeconds`                                                 |\n| `strings`             | use `Field` to display error. See 'Custom Validation' example |\n| `timeRange`           | `startHour` and `endHour`                                     |\n| `useHour12`           | `hourCycle='h11'` or `hourCycle='h12'`                        |\n| `value`               | `selectedTime`                                                |\n```\n\n----------------------------------------\n\nTITLE: Migrating Styles - Before Migration\nDESCRIPTION: Original style implementation using variables in FluentUI v0\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/TabList.stories.mdx#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// in COMPONENT_NAME.tsx\nimport { Menu, tabListBehavior } from '@fluentui/react-northstar';\n\nexport const Component = () => (\n  <Menu\n    defaultActiveIndex={0}\n    variables={{ chatTabList: true }}\n    items={items}\n    primary\n    underlined\n    accessibility={tabListBehavior}\n  />\n);\n\n// in menu-styles.ts\nexport const menuStyles1 = {\n  root: ({ variables: { chatTabList } }) => ({\n    ...(chatTabList && {\n      width: '100%',\n    }),\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub pull requests in Markdown\nDESCRIPTION: Markdown syntax used to link to specific pull requests that introduced changes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-avatar/library/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n([PR #25522](https://github.com/microsoft/fluentui/pull/25522) by humberto_makoto@hotmail.com)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Storybook Documentation for FluentUI Theme Spacing\nDESCRIPTION: JSX markup that configures the Storybook documentation page for FluentUI's Theme Spacing component. It sets the page title and renders the Spacing component in a Canvas without displaying the source code.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-theme/stories/src/Theme/spacing/index.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta title=\"Theme/Spacing\" />\n\n<h1 class=\"sbdocs-title\">Spacing</h1>\n\n<Canvas withSource=\"none\">\n  <Spacing />\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Defining IDetailsListState Interface in TypeScript\nDESCRIPTION: This snippet defines the IDetailsListState interface, which represents the state of a DetailsList component. It includes properties for collapse state, sizing, selection mode, and width.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_86\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetDerivedStateFromProps(nextProps: IDetailsListProps, previousState: IDetailsListState): IDetailsListState;\n// (undocumented)\nisCollapsed?: boolean;\n// (undocumented)\nisSizing?: boolean;\n// (undocumented)\nisSomeGroupExpanded?: boolean;\n// (undocumented)\nlastSelectionMode?: SelectionMode_2;\n// (undocumented)\nlastWidth?: number;\nversion: {};\n```\n\n----------------------------------------\n\nTITLE: Manually defining Fluent UI components using named imports\nDESCRIPTION: Demonstrates how to manually define Fluent UI components using named imports and the design system registry.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/_docs/developer/quick-start.stories.mdx#2025-04-20_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { ButtonDefinition, FluentDesignSystem } from '@fluentui/web-components';\n\nButtonDefinition.define(FluentDesignSystem.registry);\n```\n\n----------------------------------------\n\nTITLE: Cloning Fluent UI Fork Repository\nDESCRIPTION: Commands for cloning a personal fork of the Fluent UI repository and setting up the upstream remote to the main repository.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/dev-env.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/johndoe/fluentui.git\ncd fluentui\n```\n\n----------------------------------------\n\nTITLE: Button Usage Example with Root as Primary Slot\nDESCRIPTION: Example of using Button component with root as the primary slot, showing both JSX and resulting DOM.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/native-element-props.md#2025-04-20_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Button id=\"myId\" className=\"myClass\" />\n```\n\nLANGUAGE: html\nCODE:\n```\n<button id=\"myId\" class=\"myClass\" />\n```\n\n----------------------------------------\n\nTITLE: No Restricted Imports (Correct)\nDESCRIPTION: This code snippet demonstrates the correct way of importing using the preferred packages. It imports `makeStyles` and `webDarkTheme` from `@fluentui/react-components` which is the suggested alternative. This showcases the desired import style enforced by the `no-restricted-imports` rule.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/eslint-plugin/README.md#2025-04-20_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as React from 'react';\nimport { makeStyles, webDarkTheme } from '@fluentui/react-components';\n```\n\n----------------------------------------\n\nTITLE: TagPickerOptionGroup Props Type\nDESCRIPTION: Defines the props interface for the TagPickerOptionGroup component using OptionGroupProps.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport type TagPickerOptionGroupProps = OptionGroupProps;\"\n```\n\n----------------------------------------\n\nTITLE: Defining DocumentCard Activity Component Interfaces\nDESCRIPTION: TypeScript interface definitions for DocumentCardActivity component and its related props. This component displays person information with activity details within a DocumentCard.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_93\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface IDocumentCardActivity {\n}\n\n// @public (undocumented)\nexport interface IDocumentCardActivityPerson {\n    allowPhoneInitials?: boolean;\n    initials?: string;\n    initialsColor?: PersonaInitialsColor;\n    name: string;\n    profileImageSrc: string;\n}\n\n// Warning: (ae-forgotten-export) The symbol \"DocumentCardActivityBase\" needs to be exported by the entry point index.d.ts\n//\n// @public (undocumented)\nexport interface IDocumentCardActivityProps extends React_2.ClassAttributes<DocumentCardActivityBase> {\n    activity: string;\n    className?: string;\n    componentRef?: IRefObject<IDocumentCardActivity>;\n    people: IDocumentCardActivityPerson[];\n    styles?: IStyleFunctionOrObject<IDocumentCardActivityStyleProps, IDocumentCardActivityStyles>;\n    theme?: ITheme;\n}\n```\n\n----------------------------------------\n\nTITLE: Using useAnnounce Hook in React Component\nDESCRIPTION: Demonstrates how to use the useAnnounce hook to announce a message when a button is clicked. The hook returns an announce function that can be called with a message and options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-shared-contexts/stories/src/UseAnnouce/UseAnnounceDescription.md#2025-04-20_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport { useAnnounce } from '@fluentui/react-components';\n\nfunction Example() {\n  const { announce } = useAnnounce();\n\n  return <button onClick={() => announce('Hello world!', { polite: true })}>Announce</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ListItem for Composite Navigation in JSX\nDESCRIPTION: Use navigationMode=\"composite\" on ListItem when there are other focusable elements inside the list items. This sets up proper navigation for complex list item structures.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-list/stories/src/List/ListBestPractices.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ListItem navigationMode=\"composite\">\n```\n\n----------------------------------------\n\nTITLE: Installing Individual Text Package\nDESCRIPTION: Commands to install the standalone Text package and its provider dependency.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-text/library/README.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @fluentui/react-text\nnpm install @fluentui/react-provider\n```\n\n----------------------------------------\n\nTITLE: List Component with Shorthand API in v0\nDESCRIPTION: Example of using the List component with Shorthand API in Fluent UI React v0, where structured item objects are passed directly to the component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-list/library/docs/MIGRATION.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst items = [\n  {\n    key: 'robert',\n    header: 'Robert Tolbert',\n    content: 'Program the sensor to the SAS alarm through the haptic SQL card!',\n  },\n  {\n    key: 'celeste',\n    header: 'Celeste Burton',\n    content: 'Use the online FTP application to input the multi-byte application!',\n  },\n];\n\nconst MyList = () => {\n  return <List items={items} />;\n};\n```\n\n----------------------------------------\n\nTITLE: DialogTitle Component Definition\nDESCRIPTION: Defines the DialogTitle component as a forward-ref component accepting DialogTitleProps.  It is responsible for rendering the title of the dialog. It relies on ForwardRefComponent from '@fluentui/react-utilities'.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/etc/react-dialog.api.md#2025-04-20_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const DialogTitle: ForwardRefComponent<DialogTitleProps>;\"\n```\n\n----------------------------------------\n\nTITLE: Using makeStyles for Style Overrides in ItemLayout (After)\nDESCRIPTION: Example of using makeStyles with ItemLayout component to achieve the same styling as with variables in V0.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/ItemLayout.stories.mdx#2025-04-20_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// in COMPONENT_NAME.tsx\nimport { ItemLayout } from '@fluentui/react-migration-v0-v9';\nimport { useStyles } from './COMPONENT_NAME.styles.ts';\n\nexport const Component = () => {\n  const classes = useStyles();\n\n  return <ItemLayout className={classes.root} endMedia={{ className: classes.endMedia }} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Basic RadioGroup Usage in Fluent UI Northstar (v0)\nDESCRIPTION: Demonstrates the basic usage of RadioGroup component in Fluent UI Northstar (v0). It shows how to create a RadioGroup with two options, one of which is disabled, using the 'items' prop.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/RadioGroup.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { RadioGroup } from '@fluentui/react-northstar';\n\nconst RadioGroupV0BasicExample = () => {\n  const items = [\n    { name: 'pizza', key: 'Capricciosa', label: 'Capricciosa', value: 'capricciosa' },\n    {\n      name: 'pizza',\n      key: 'Prosciutto',\n      label: 'Prosciutto',\n      value: 'prosciutto',\n      disabled: true,\n    },\n  ];\n\n  return <RadioGroup defaultCheckedValue=\"capricciosa\" items={items} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Modern Card Implementation\nDESCRIPTION: Updated implementation using only the Card component from @fluentui/react-components package. Content is placed directly inside the Card without needing a CardBody wrapper.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Card/CardBody.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Card } from '@fluentui/react-components';\n\nexport const CardBodyExample = () => (\n  <Card>\n    <p>Lorem ipsum dolor sit amet.</p>\n  </Card>\n);\n```\n\n----------------------------------------\n\nTITLE: Version Header Format in Markdown\nDESCRIPTION: Markdown header formatting for version numbers in the changelog, including version number, tree link and timestamp.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-docsite-components/CHANGELOG.md#2025-04-20_snippet_28\n\nLANGUAGE: markdown\nCODE:\n```\n## [8.3.18](https://github.com/microsoft/fluentui/tree/@fluentui/react-docsite-components_v8.3.18)\\n\\nMon, 23 Aug 2021 07:35:43 GMT\n```\n\n----------------------------------------\n\nTITLE: Defining Menu Popover Slots in TypeScript\nDESCRIPTION: Defines slot configurations for MenuPopover components with a root slot of type Slot<'div'>. These slots manage the structure of menu popovers.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-menu/library/etc/react-menu.api.md#2025-04-20_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type MenuPopoverSlots = {\n    root: Slot<'div'>;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing SearchBox Component from FluentUI React Components\nDESCRIPTION: This code snippet demonstrates how to import the SearchBox component from the FluentUI React Components library. The SearchBox component provides users with search functionality, including filtering and clearing capabilities.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-search/stories/src/SearchBox/SearchBoxDescription.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SearchBox } from '@fluentui/react-components';\n```\n\n----------------------------------------\n\nTITLE: Setting text direction with FluentProvider in JSX\nDESCRIPTION: Uses FluentProvider to set the text direction for components. The default is LTR, but can be explicitly set to RTL with the dir prop.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/styles-handbook.md#2025-04-20_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport { FluentProvider } from '@fluentui/react-components';\n\nfunction App() {\n  return (\n    <>\n      <FluentProvider>\n        {/* Inner components will have styles for LTR */}\n        {/* ... */}\n      </FluentProvider>\n      <FluentProvider dir=\"rtl\">\n        {/* Inner components will have styles for RTL */}\n        {/* ... */}\n      </FluentProvider>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry with Version Details\nDESCRIPTION: Markdown formatted changelog entry showing version number, date, and comparison link\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.22.1](https://github.com/microsoft/fluentui/tree/@fluentui/web-components_v0.22.1)\n\nTue, 08 Jun 2021 07:32:44 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/web-components_v0.22.0..@fluentui/web-components_v0.22.1)\n```\n\n----------------------------------------\n\nTITLE: Supporting Shorthand Props in Button Component in React\nDESCRIPTION: Allows flexible input for components using shorthand props by resolving input types and integrating them into the button state.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-utilities/src/compose/README.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<>\n  {/* The icon can be a string */}\n  <Button icon=\"X\" />\n  {/* The icon can be JSX */}\n  <Button icon={<FooIcon />} />\n  {/* The icon can be an object */}\n  <Button icon={{ as: 'i', children: getCode('Add') }} />\n  {/* The icon can be a children function (which receives the original slot and props)  */}\n  <Button\n    icon={{\n      children: (Component, props) => (\n        <>\n          <Component {...props} />\n          {/* other things */}\n        </>\n      ),\n    }}\n  />\n</>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Icon Component - TypeScript React\nDESCRIPTION: Example showing how to compose a custom icon component using the BaseIcon implementation with react-texture.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Icon.md#2025-04-20_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nconst FooIcon = BaseIcon.compose({\n  tokens: {},\n  styles: {},\n  slots: {}\n});\n\nrender () {\n  <FooIcon name=\"Home\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Fluent UI v9 via npm\nDESCRIPTION: This command installs the latest version of Fluent UI React v9 package using npm. It's the first step in the migration process from v8 to v9.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/ComponentMapping.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @fluentui/react-components\n```\n\n----------------------------------------\n\nTITLE: Configuring Inline Dropdown for ComboBox\nDESCRIPTION: Configuration property to render ComboBox dropdown inline, which improves accessibility for screen reader users, especially in containers with overflow settings\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-examples/src/react/ComboBox/docs/ComboBoxBestPractices.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncalloutProps={{ doNotLayer: true }}\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry\nDESCRIPTION: Latest changelog entry showing version 0.3.9 updates including dependency bumps for react-combobox, react-field, react-jsx-runtime and react-utilities packages\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-timepicker-compat/library/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.3.9](https://github.com/microsoft/fluentui/tree/@fluentui/react-timepicker-compat_v0.3.9)\n\nWed, 16 Apr 2025 19:42:18 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-timepicker-compat_v0.3.8..@fluentui/react-timepicker-compat_v0.3.9)\n\n### Patches\n\n- Bump @fluentui/react-combobox to v9.14.5 ([PR #34166](https://github.com/microsoft/fluentui/pull/34166) by beachball)\n- Bump @fluentui/react-field to v9.2.5 ([PR #34166](https://github.com/microsoft/fluentui/pull/34166) by beachball)\n- Bump @fluentui/react-jsx-runtime to v9.0.54 ([PR #34166](https://github.com/microsoft/fluentui/pull/34166) by beachball)\n- Bump @fluentui/react-utilities to v9.19.0 ([PR #34166](https://github.com/microsoft/fluentui/pull/34166) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Rendering Data Grid Components in TypeScript\nDESCRIPTION: Defines various functions for rendering different parts of the DataGrid, such as the body, cells, headers, and rows. These functions facilitate the dynamic rendering of table content based on the component's state.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-table/library/etc/react-table.api.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const renderDataGrid_unstable: (state: DataGridState, contextValues: DataGridContextValues) => JSX.Element;\n// @public\nexport const renderDataGridBody_unstable: (state: DataGridBodyState) => JSX.Element;\n// @public\nexport const renderDataGridCell_unstable: (state: DataGridCellState) => JSX.Element;\n// @public\nexport const renderDataGridHeader_unstable: (state: DataGridHeaderState) => JSX.Element;\n// @public\nexport const renderDataGridHeaderCell_unstable: (state: DataGridHeaderCellState) => JSX.Element;\n// @public\nexport const renderDataGridRow_unstable: (state: DataGridRowState) => JSX.Element;\n// @public\nexport const renderDataGridSelectionCell_unstable: (state: DataGridSelectionCellState) => JSX.Element;\n```\n\n----------------------------------------\n\nTITLE: Field Class Names Definition\nDESCRIPTION: This snippet defines the fieldClassNames as a SlotClassNames type based on FieldSlots. It is used for styling the Field component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-field/library/etc/react-field.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport const fieldClassNames: SlotClassNames<FieldSlots>;\"\n```\n\n----------------------------------------\n\nTITLE: Importing Meta Component and Package Info\nDESCRIPTION: Imports required for the documentation page including Storybook Meta component and package version information.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Introduction.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs';\nimport pkg from '@fluentui/react-components/package.json';\nimport { WhatsNewBoxes } from './components/WhatsNewBoxes';\n```\n\n----------------------------------------\n\nTITLE: Tag Structure in Fluent UI React\nDESCRIPTION: Defines the HTML structure for Tag components, with and without the dismiss icon, to be used in Fluent UI's React implementation. The structure varies slightly based on the presence of a dismiss icon.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tags/library/docs/Spec.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// without dismiss icon\n<span>\n  <span>{iconOrMedia}</span>\n  <span>{primaryText}</span>\n  <span>{secondaryText}</span>\n</span>\n\n// with dismiss icon\n<button>\n  <span>{iconOrMedia}</span>\n  <span>{primaryText}</span>\n  <span>{secondaryText}</span>\n  <span>{dismissIcon}</span>\n</button>\n```\n\n----------------------------------------\n\nTITLE: Bumping @fluentui/react to v8.94.4\nDESCRIPTION: The documentation reflects the upgrade to version 8.94.4 for @fluentui/react, part of a systematic review and revision of library versions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/azure-themes/CHANGELOG.md#2025-04-20_snippet_23\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.94.4 ([PR #24615](https://github.com/microsoft/fluentui/pull/24615) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Defining DetailsRowBase React Component in TypeScript\nDESCRIPTION: Defines the DetailsRowBase class extending React.Component. It includes lifecycle methods, focus handling, and rendering logic for individual rows in a DetailsList.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class DetailsRowBase extends React_2.Component<IDetailsRowBaseProps, IDetailsRowState> {\n    constructor(props: IDetailsRowBaseProps);\n    // (undocumented)\n    componentDidMount(): void;\n    // (undocumented)\n    componentDidUpdate(previousProps: IDetailsRowBaseProps): void;\n    // (undocumented)\n    componentWillUnmount(): void;\n    // (undocumented)\n    focus(forceIntoFirstElement?: boolean): boolean;\n    // (undocumented)\n    static getDerivedStateFromProps(nextProps: IDetailsRowBaseProps, previousState: IDetailsRowState): IDetailsRowState;\n    measureCell(index: number, onMeasureDone: (width: number) => void): void;\n    // (undocumented)\n    protected _onRenderCheck(props: IDetailsRowCheckProps): JSX.Element;\n    // (undocumented)\n    render(): JSX.Element;\n    // (undocumented)\n    shouldComponentUpdate(nextProps: IDetailsRowBaseProps, nextState: IDetailsRowState): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding lines to vertical stacked bar chart in React Charting\nDESCRIPTION: Enhanced vertical stacked bar chart to support adding lines, enabling more complex combo charts.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/CHANGELOG.md#2025-04-20_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Example usage:\n<VerticalStackedBarChart lines={...} />\n```\n\n----------------------------------------\n\nTITLE: FluentUI Icon Name Enum Values in TypeScript\nDESCRIPTION: A section of the FluentUI icon name enumeration showing string constants for various icons. Each entry represents a unique icon identifier that can be used within the FluentUI framework. Most entries are marked as undocumented in the codebase.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/font-icons-mdl2/etc/font-icons-mdl2.api.md#2025-04-20_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n    TagUnknown12Mirror = \"TagUnknown12Mirror\",\n    // (undocumented)\n    TagUnknownMirror = \"TagUnknownMirror\",\n    // (undocumented)\n    Taskboard = \"Taskboard\",\n    // (undocumented)\n    TaskGroup = \"TaskGroup\",\n    // (undocumented)\n    TaskGroupMirrored = \"TaskGroupMirrored\",\n    // (undocumented)\n    TaskLogo = \"TaskLogo\",\n    // (undocumented)\n    TaskManager = \"TaskManager\",\n    // (undocumented)\n    TaskManagerMirrored = \"TaskManagerMirrored\",\n    // (undocumented)\n    TaskSolid = \"TaskSolid\",\n    // (undocumented)\n    Taxi = \"Taxi\",\n    // (undocumented)\n    TeamFavorite = \"TeamFavorite\",\n    // (undocumented)\n    TeamsLogo = \"TeamsLogo\",\n    // (undocumented)\n    TeamsLogo16 = \"TeamsLogo16\",\n    // (undocumented)\n    TeamsLogoFill = \"TeamsLogoFill\",\n    // (undocumented)\n    TeamsLogoFill16 = \"TeamsLogoFill16\",\n    // (undocumented)\n    TeamsLogoInverse = \"TeamsLogoInverse\",\n    // (undocumented)\n    Teamwork = \"Teamwork\",\n    // (undocumented)\n    Teeth = \"Teeth\",\n    // (undocumented)\n    Telemarketer = \"Telemarketer\",\n    // (undocumented)\n    TemporaryUser = \"TemporaryUser\",\n    // (undocumented)\n    Tennis = \"Tennis\",\n    // (undocumented)\n    TestAutoSolid = \"TestAutoSolid\",\n    // (undocumented)\n    TestBeaker = \"TestBeaker\",\n    // (undocumented)\n    TestBeakerSolid = \"TestBeakerSolid\",\n    // (undocumented)\n    TestCase = \"TestCase\",\n    // (undocumented)\n    TestExploreSolid = \"TestExploreSolid\",\n    // (undocumented)\n    TestImpactSolid = \"TestImpactSolid\",\n    // (undocumented)\n    TestParameter = \"TestParameter\",\n    // (undocumented)\n    TestPlan = \"TestPlan\",\n    // (undocumented)\n    TestStep = \"TestStep\",\n    // (undocumented)\n    TestSuite = \"TestSuite\",\n    // (undocumented)\n    TestUserSolid = \"TestUserSolid\",\n    // (undocumented)\n    TextBox = \"TextBox\",\n    // (undocumented)\n    TextCallout = \"TextCallout\",\n    // (undocumented)\n    TextDocument = \"TextDocument\",\n    // (undocumented)\n    TextDocumentShared = \"TextDocumentShared\",\n    // (undocumented)\n    TextField = \"TextField\",\n    // (undocumented)\n    TextOverflow = \"TextOverflow\",\n    // (undocumented)\n    TFVCLogo = \"TFVCLogo\",\n    // (undocumented)\n    ThisPC = \"ThisPC\",\n    // (undocumented)\n    ThreeQuarterCircle = \"ThreeQuarterCircle\",\n    // (undocumented)\n    ThumbnailView = \"ThumbnailView\",\n    // (undocumented)\n    ThumbnailViewMirrored = \"ThumbnailViewMirrored\",\n    // (undocumented)\n    Thunderstorms = \"Thunderstorms\",\n    // (undocumented)\n    Ticket = \"Ticket\",\n    // (undocumented)\n    Tiles = \"Tiles\",\n    // (undocumented)\n    Tiles2 = \"Tiles2\",\n    // (undocumented)\n    TimeEntry = \"TimeEntry\",\n    // (undocumented)\n    Timeline = \"Timeline\",\n    // (undocumented)\n    TimelineDelivery = \"TimelineDelivery\",\n    // (undocumented)\n    TimelineMatrixView = \"TimelineMatrixView\",\n    // (undocumented)\n    TimelineProgress = \"TimelineProgress\",\n    // (undocumented)\n    TimePicker = \"TimePicker\",\n    // (undocumented)\n    Timer = \"Timer\",\n    // (undocumented)\n    TimeSheet = \"TimeSheet\",\n    // (undocumented)\n    ToDoLogoBottom = \"ToDoLogoBottom\",\n    // (undocumented)\n    ToDoLogoInverse = \"ToDoLogoInverse\",\n    // (undocumented)\n    ToDoLogoOutline = \"ToDoLogoOutline\",\n    // (undocumented)\n    ToDoLogoTop = \"ToDoLogoTop\",\n    // (undocumented)\n    ToggleBorder = \"ToggleBorder\",\n    // (undocumented)\n    ToggleFilled = \"ToggleFilled\",\n    // (undocumented)\n    ToggleLeft = \"ToggleLeft\",\n    // (undocumented)\n    ToggleRight = \"ToggleRight\",\n    // (undocumented)\n    ToggleThumb = \"ToggleThumb\",\n    // (undocumented)\n    Toll = \"Toll\",\n    // (undocumented)\n    Toolbox = \"Toolbox\",\n    // (undocumented)\n    Touch = \"Touch\",\n    // (undocumented)\n    TouchPointer = \"TouchPointer\",\n    // (undocumented)\n    Trackers = \"Trackers\",\n    // (undocumented)\n    TrackersMirrored = \"TrackersMirrored\",\n    // (undocumented)\n    Train = \"Train\",\n    // (undocumented)\n    TrainSolid = \"TrainSolid\",\n    // (undocumented)\n    TransferCall = \"TransferCall\",\n    // (undocumented)\n    Transition = \"Transition\",\n    // (undocumented)\n    TransitionEffect = \"TransitionEffect\",\n    // (undocumented)\n    TransitionPop = \"TransitionPop\",\n    // (undocumented)\n    TransitionPush = \"TransitionPush\",\n    // (undocumented)\n    Translate = \"Translate\",\n    // (undocumented)\n    Trending12 = \"Trending12\",\n    // (undocumented)\n    TriangleDown12 = \"TriangleDown12\",\n    // (undocumented)\n    TriangleLeft12 = \"TriangleLeft12\",\n    // (undocumented)\n    TriangleRight12 = \"TriangleRight12\",\n    // (undocumented)\n    TriangleShape = \"TriangleShape\",\n    // (undocumented)\n    TriangleShapeSolid = \"TriangleShapeSolid\",\n    // (undocumented)\n    TriangleSolid = \"TriangleSolid\",\n    // (undocumented)\n    TriangleSolidDown12 = \"TriangleSolidDown12\",\n    // (undocumented)\n    TriangleSolidLeft12 = \"TriangleSolidLeft12\",\n    // (undocumented)\n    TriangleSolidRight12 = \"TriangleSolidRight12\",\n    // (undocumented)\n    TriangleSolidUp12 = \"TriangleSolidUp12\",\n    // (undocumented)\n    TriangleUp12 = \"TriangleUp12\",\n    // (undocumented)\n    TriggerApproval = \"TriggerApproval\",\n    // (undocumented)\n    TriggerAuto = \"TriggerAuto\",\n    // (undocumented)\n    TriggerUser = \"TriggerUser\",\n    // (undocumented)\n    Trim = \"Trim\",\n    // (undocumented)\n    TrimEnd = \"TrimEnd\",\n    // (undocumented)\n    TrimStart = \"TrimStart\",\n    // (undocumented)\n    TripleColumn = \"TripleColumn\",\n    // (undocumented)\n    TripleColumnEdit = \"TripleColumnEdit\",\n    // (undocumented)\n    TripleColumnWide = \"TripleColumnWide\",\n    // (undocumented)\n    Trophy = \"Trophy\",\n    // (undocumented)\n    Trophy2 = \"Trophy2\",\n    // (undocumented)\n    Trophy2Solid = \"Trophy2Solid\",\n    // (undocumented)\n    TurnRight = \"TurnRight\",\n    // (undocumented)\n    TVMonitor = \"TVMonitor\",\n    // (undocumented)\n    TVMonitorSelected = \"TVMonitorSelected\",\n    // (undocumented)\n    TwelvePointStar = \"TwelvePointStar\",\n    // (undocumented)\n    TypeScriptLanguage = \"TypeScriptLanguage\",\n    // (undocumented)\n    Umbrella = \"Umbrella\",\n    // (undocumented)\n    Underline = \"Underline\",\n    // (undocumented)\n    Undo = \"Undo\",\n    // (undocumented)\n    Uneditable = \"Uneditable\",\n    // (undocumented)\n    Uneditable2 = \"Uneditable2\",\n    // (undocumented)\n    Uneditable2Mirrored = \"Uneditable2Mirrored\",\n    // (undocumented)\n    UneditableMirrored = \"UneditableMirrored\",\n    // (undocumented)\n    UneditableSolid12 = \"UneditableSolid12\",\n    // (undocumented)\n    UneditableSolidMirrored12 = \"UneditableSolidMirrored12\",\n    // (undocumented)\n    Unfavorite = \"Unfavorite\",\n    // (undocumented)\n    UngroupObject = \"UngroupObject\",\n    // (undocumented)\n    Unknown = \"Unknown\",\n    // (undocumented)\n    UnknownCall = \"UnknownCall\",\n    // (undocumented)\n    UnknownMirrored = \"UnknownMirrored\",\n    // (undocumented)\n    UnknownMirroredSolid = \"UnknownMirroredSolid\",\n    // (undocumented)\n    UnknownSolid = \"UnknownSolid\",\n    // (undocumented)\n    Unlock = \"Unlock\",\n    // (undocumented)\n    UnlockSolid = \"UnlockSolid\",\n    // (undocumented)\n    Unpin = \"Unpin\",\n    // (undocumented)\n    UnpublishContent = \"UnpublishContent\",\n    // (undocumented)\n    UnSetColor = \"UnSetColor\",\n    // (undocumented)\n    UnstackSelected = \"UnstackSelected\",\n    // (undocumented)\n    Unsubscribe = \"Unsubscribe\",\n    // (undocumented)\n    UnsyncFolder = \"UnsyncFolder\",\n    // (undocumented)\n    UnsyncOccurence = \"UnsyncOccurence\",\n    // (undocumented)\n    Untag = \"Untag\",\n    // (undocumented)\n    Up = \"Up\",\n    // (undocumented)\n    UpgradeAnalysis = \"UpgradeAnalysis\",\n    // (undocumented)\n    Upload = \"Upload\",\n    // (undocumented)\n    USB = \"USB\",\n    // (undocumented)\n    UserEvent = \"UserEvent\",\n    // (undocumented)\n    UserFollowed = \"UserFollowed\",\n    // (undocumented)\n    UserGauge = \"UserGauge\",\n    // (undocumented)\n    UserOptional = \"UserOptional\",\n    // (undocumented)\n    UserPause = \"UserPause\",\n    // (undocumented)\n    UserRemove = \"UserRemove\",\n    // (undocumented)\n    UserSync = \"UserSync\",\n    // (undocumented)\n    UserWarning = \"UserWarning\",\n    // (undocumented)\n    Vacation = \"Vacation\",\n    // (undocumented)\n    Variable = \"Variable\",\n    // (undocumented)\n    Variable2 = \"Variable2\",\n    // (undocumented)\n    VariableGroup = \"VariableGroup\",\n    // (undocumented)\n    VB = \"VB\",\n    // (undocumented)\n    VennDiagram = \"VennDiagram\",\n    // (undocumented)\n    VerifiedBrand = \"VerifiedBrand\",\n    // (undocumented)\n    VerifiedBrandSolid = \"VerifiedBrandSolid\",\n    // (undocumented)\n    VersionControlPush = \"VersionControlPush\",\n    // (undocumented)\n    VerticalDistributeCenter = \"VerticalDistributeCenter\",\n    // (undocumented)\n    Video = \"Video\",\n    // (undocumented)\n    Video360Generic = \"Video360Generic\",\n    // (undocumented)\n    VideoLightOff = \"VideoLightOff\",\n    // (undocumented)\n    VideoOff = \"VideoOff\",\n    // (undocumented)\n    VideoSearch = \"VideoSearch\",\n    // (undocumented)\n    VideoSolid = \"VideoSolid\",\n    // (undocumented)\n    View = \"View\",\n    // (undocumented)\n    ViewAll = \"ViewAll\",\n    // (undocumented)\n    ViewAll2 = \"ViewAll2\",\n    // (undocumented)\n    ViewDashboard = \"ViewDashboard\",\n    // (undocumented)\n    ViewList = \"ViewList\",\n    // (undocumented)\n    ViewListGroup = \"ViewListGroup\",\n    // (undocumented)\n    ViewListTree = \"ViewListTree\",\n    // (undocumented)\n    ViewOriginal = \"ViewOriginal\",\n    // (undocumented)\n    VisioDiagram = \"VisioDiagram\",\n    // (undocumented)\n    VisioDiagramSync = \"VisioDiagramSync\",\n    // (undocumented)\n    VisioDocument = \"VisioDocument\",\n    // (undocumented)\n    VisioLogo = \"VisioLogo\",\n    // (undocumented)\n    VisioLogo16 = \"VisioLogo16\",\n    // (undocumented)\n    VisioLogoFill = \"VisioLogoFill\",\n    // (undocumented)\n    VisioLogoFill16 = \"VisioLogoFill16\",\n    // (undocumented)\n    VisioLogoInverse = \"VisioLogoInverse\",\n    // (undocumented)\n    VisioLogoInverse16 = \"VisioLogoInverse16\",\n    // (undocumented)\n```\n\n----------------------------------------\n\nTITLE: Global CSS Animation Override\nDESCRIPTION: CSS implementation for globally disabling animations and transitions while maintaining animation events functionality. Uses important declarations to override all animation properties.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/disabling-animations.md#2025-04-20_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n*,\n*::before,\n*::after {\n  animation-delay: -1ms !important;\n  animation-duration: 1ms !important;\n  animation-iteration-count: 1 !important;\n  scroll-behavior: auto !important;\n  transition-duration: 0.1s !important;\n  transition-delay: 0.1s !important;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering SVG Icons for Name-based Reference\nDESCRIPTION: Shows how to register SVG icons for use with components that accept iconProps or require name-based icon references. Includes unregistering existing icons and registering new ones using the registerIcons API.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Styles/FabricIconsPage/docs/web/FabricIconsSvgUsage.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { unregisterIcons, registerIcons } from '@fluentui/react/lib/Styling';\n// Note: This approach works with any SVG icon set, not just @fluentui/react-icons-mdl2\nimport { ChevronDownIcon, BadgeIcon } from '@fluentui/react-icons-mdl2';\n\n// Note: For any icon name that has an icon already registered to it, you need to unregister it first before registering a new one\nunregisterIcons(['ChevronDown']);\n\nregisterIcons({\n  icons: {\n    ChevronDown: <ChevronDownIcon />,\n    ANewIconName: <BadgeIcon />,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Content Prop Migration\nDESCRIPTION: Demonstrates how to migrate the content prop to use JSX children instead\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV0/Components/Grid.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Grid } from '@fluentui/react-northstar';\nconst Component = () => <Grid content=\"hi\" />;\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Grid } from '@fluentui/react-migration-v0-v9';\nconst Component = () => <Grid>hi</Grid>;\n```\n\n----------------------------------------\n\nTITLE: Defining ITeachingBubbleStyles Interface in TypeScript\nDESCRIPTION: Specifies the ITeachingBubbleStyles interface for styling different parts of a teaching bubble.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_211\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface ITeachingBubbleStyles {\n    // (undocumented)\n    body: IStyle;\n    // (undocumented)\n    bodyContent: IStyle;\n    // (undocumented)\n    closeButton: IStyle;\n    // (undocumented)\n    content: IStyle;\n    // (undocumented)\n    footer: IStyle;\n    // (undocumented)\n    header: IStyle;\n    // (undocumented)\n    headline: IStyle;\n    // (undocumented)\n    imageContent: IStyle;\n    // (undocumented)\n    primaryButton: IStyle;\n    // (undocumented)\n    root: IStyle;\n    // (undocumented)\n    secondaryButton: IStyle;\n    // (undocumented)\n    subComponentStyles?: ITeachingBubbleSubComponentStyles;\n    // (undocumented)\n    subText: IStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: CSS for Popover Positioning\nDESCRIPTION: This CSS snippet addresses potential positioning issues created by the popover polyfill and ensures proper display of components using popovers.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/_docs/developer/polyfilling.stories.mdx#2025-04-20_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n[popover].\\:popover-open {\n  inset: unset;\n  border: 1px solid transparent;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IGroupedListProps Interface in TypeScript\nDESCRIPTION: This snippet defines the IGroupedListProps interface, which extends React.ClassAttributes<GroupedListBase>. It includes properties for configuring a GroupedList component, such as group rendering, selection mode, and styling options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_140\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface IGroupedListProps extends React_2.ClassAttributes<GroupedListBase> {\n    className?: string;\n    compact?: boolean;\n    componentRef?: IRefObject<IGroupedList>;\n    dragDropEvents?: IDragDropEvents;\n    dragDropHelper?: IDragDropHelper;\n    eventsToRegister?: {\n        eventName: string;\n        callback: (context: IDragDropContext, event?: any) => void;\n    }[];\n    focusZoneProps?: IFocusZoneProps;\n    getGroupHeight?: (group: IGroup, groupIndex: number) => number;\n    groupProps?: IGroupRenderProps;\n    groups?: IGroup[];\n    items: any[];\n    listProps?: IListProps;\n    onGroupExpandStateChanged?: (isSomeGroupExpanded: boolean) => void;\n    onRenderCell: (nestingDepth?: number, item?: any, index?: number) => React_2.ReactNode;\n    onShouldVirtualize?: (props: IListProps) => boolean;\n    role?: string;\n    rootListProps?: IListProps;\n    selection?: ISelection;\n    selectionMode?: SelectionMode_2;\n    styles?: IStyleFunctionOrObject<IGroupedListStyleProps, IGroupedListStyles>;\n    theme?: ITheme;\n    usePageCache?: boolean;\n    viewport?: IViewport;\n}\n```\n\n----------------------------------------\n\nTITLE: Version 9.6.16 Release Notes\nDESCRIPTION: Changelog entry documenting patches including a typo fix in CheckboxShim migration and dependency updates.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-migration-v8-v9/library/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.6.16]\n\n### Patches\n\n- chore: Fixing typo in CheckboxShim migration.\n- Bump @fluentui/react-components to v9.54.0\n- Bump @fluentui/react-utilities to v9.18.10\n```\n\n----------------------------------------\n\nTITLE: Implementing usePopperMouseTarget Hook\nDESCRIPTION: A reusable hook to manage the state of a virtual popper element, allowing dynamic positioning based on mouse interactions\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-positioning/CHANGELOG.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfeat(usePopperMouseTarget): Reusable hook to manage the state of a virtual popper element\n```\n\n----------------------------------------\n\nTITLE: Importing FluentUI Virtualizer Preview Component\nDESCRIPTION: Demonstrates how to import the Virtualizer component from the @fluentui/react-virtualizer package. This component is currently in preview status and its API may change before final release.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-virtualizer/stories/src/Virtualizer/VirtualizerDescription.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Virtualizer } from '@fluentui/react-virtualizer';\n```\n\n----------------------------------------\n\nTITLE: Defining Slots in a Button Component - React JSX\nDESCRIPTION: This snippet demonstrates how to define slots within a Button component to organize its layout. It shows how different sub-components can be structured within a root slot to enhance accessibility and design.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Slots.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// ⚠️ not a real JSX/DOM markup\n<slots.root>\n  <slots.loader />\n  <slots.children />\n  <slots.icon />\n</slots.root>\n```\n\n----------------------------------------\n\nTITLE: Version History Table in Markdown\nDESCRIPTION: A changelog entry showing version updates and changes for the @fluentui/react-utilities package. Includes links to compare changes between versions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-utilities/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.19.0](https://github.com/microsoft/fluentui/tree/@fluentui/react-utilities_v9.19.0)\n\nWed, 16 Apr 2025 19:42:06 GMT \n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-utilities_v9.18.23..@fluentui/react-utilities_v9.19.0)\n\n### Minor changes\n\n- Add getSlotClassNameProp_unstable function to allow custom style hooks to preserve the original className while overriding the component default className.\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Divider Components in React TSX\nDESCRIPTION: Demonstrates the basic usage of the Divider component in React, including horizontal, vertical, and content-containing variants.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-divider/library/docs/Spec.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Divider />\n<Divider vertical />\n<Divider>This is a divider with content</Divider>\n```\n\n----------------------------------------\n\nTITLE: Importing Webpack Resources and Resolve Alias\nDESCRIPTION: Demonstrates how to import webpack utility functions from Fluent UI scripts package for configuring webpack builds and resolving module aliases\nSOURCE: https://github.com/microsoft/fluentui/blob/master/scripts/webpack/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { resources, getResolveAlias } from '@fluentui/scripts/webpack';\n```\n\n----------------------------------------\n\nTITLE: Defining useListItem_unstable Hook for FluentUI in TypeScript\nDESCRIPTION: Exports an unstable hook for managing list item component state in FluentUI. Takes list item props and a ref to the list item element and returns a state object that can be used for rendering and behavior.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-migration-v0-v9/library/etc/react-migration-v0-v9.api.md#2025-04-20_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport const useListItem_unstable: (props: ListItemProps, ref: React_2.Ref<HTMLLIElement | HTMLDivElement>) => ListItemState;\n```\n\n----------------------------------------\n\nTITLE: Comparing TypeScript Declaration Output for Different Module Types\nDESCRIPTION: This snippet demonstrates that TypeScript declaration files don't emit different output based on different module fields (CommonJS vs ESM). This redundancy is addressed in the proposal by generating declarations only once during the build process.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/shared/build-system/03-packaging-for-npm.md#2025-04-20_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport type { FunctionComponent } from 'react';\nimport { TextWrapperProps } from '../wrapper';\nexport declare const bodyClassName = 'fui-Body';\nexport declare const Body: FunctionComponent<TextWrapperProps>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories for React Icons Compatibility\nDESCRIPTION: This snippet configures Storybook to include story files from the React Icons Compatibility package by defining story globs. The specified paths allow Storybook to locate and load the necessary story files for rendering components in a live environment.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-icons-compat/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-icons-compat/stories/src/**/*.stories.mdx', '../packages/react-components/react-icons-compat/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Implementation of MemberListPeoplePicker in TypeScript\nDESCRIPTION: TypeScript class definition for MemberListPeoplePicker, which extends BasePickerListBelow to provide people picking functionality with specific handling for member lists.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_232\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MemberListPeoplePicker extends BasePickerListBelow<IPersonaProps, IPeoplePickerProps> {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Menu Item Types and Components\nDESCRIPTION: TypeScript definitions for menu item components including types for column count, roles, and component options.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_45\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type MenuItemColumnCount = 0 | 1 | 2;\n\nexport const MenuItemRole = {\n    readonly menuitem: \"menuitem\",\n    readonly menuitemcheckbox: \"menuitemcheckbox\",\n    readonly menuitemradio: \"menuitemradio\"\n};\n\nexport type MenuItemOptions = StartEndOptions<MenuItem> & {\n    indicator?: StaticallyComposableHTML<MenuItem>;\n    submenuGlyph?: StaticallyComposableHTML<MenuItem>;\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Line Height Component in Storybook Canvas\nDESCRIPTION: This JSX snippet renders the LineHeight component within a Storybook Canvas, hiding the source code.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-theme/stories/src/Theme/fonts/index.stories.mdx#2025-04-20_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas withSource=\"none\">\n  <LineHeight />\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Griffel Style Optimization\nDESCRIPTION: Webpack configuration that adds the Griffel loader to process TypeScript files. The loader should be added after other transpilation loaders to ensure it works with transpiled code.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/BuildTimeStyles.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\nmodule.exports = {\n  module: {\n    rules: [\n      // 💡 We recommend adding the Griffel webpack loader after `babel-loader`, `ts-loader`, etc.\n      //\n      //    The underlying Babel transforms used by the Webpack loader are configured by default to use\n      //    the most basic language features. Therefore, to avoid extra configuration or parsing errors,\n      //    using the Webpack loader after compilation is the required approach.\n      {\n        test: /\\.(ts|tsx)$/,\n        exclude: /node_modules/,\n        use: {\n          loader: '@griffel/webpack-loader',\n          options: {\n            // see https://github.com/microsoft/griffel/tree/main/packages/webpack-loader#configuring-babel-settings\n            babelOptions: {\n              presets: ['@babel/preset-typescript'],\n            },\n          },\n        },\n      },\n      {\n        test: /\\.(ts|tsx)$/,\n        exclude: /node_modules/,\n        use: {\n          // or 'ts-loader'\n          loader: 'babel-loader',\n        },\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Function References for Donut Chart Testing\nDESCRIPTION: Key functions identified for unit testing in the Donut Chart component implementation. These functions handle calculations and data transformations.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/docs/TestingStrategy.md#2025-04-20_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconvertToLocaleString() // From DonutChart.base.tsx\ngetAccessibleDataObject() // From DonutChart.base.tsx\n_valueInsideDonut() // From DonutChart.base.tsx\nwrapTextInsideDonut() // From Pie.tsx\n_computeTotalValue() // From Pie.tsx\n```\n\n----------------------------------------\n\nTITLE: SearchBoxSlots Type Definition (TypeScript)\nDESCRIPTION: Defines the SearchBoxSlots type, which extends InputSlots and adds an optional dismiss slot of type 'span'.  This determines the slots available for customization in the SearchBox component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-search/library/etc/react-search.api.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport type SearchBoxSlots = InputSlots & {\n    dismiss?: Slot<'span'>;\n};\n```\n\n----------------------------------------\n\nTITLE: Generated CSS with custom displayName\nDESCRIPTION: The following CSS code example shows the generated CSS when a custom display name is used in TypeScript\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/merge-styles/README.md#2025-04-20_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.MyComponent-0 {\n  background: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Declare fullSourcePlugin Function\nDESCRIPTION: Declares the `fullSourcePlugin` function, which is the main function of the Babel plugin. It takes the Babel object and options as input and returns a Babel plugin object.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/babel-preset-storybook-full-source/etc/babel-preset-storybook-full-source.api.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nfunction fullSourcePlugin(babel: typeof Babel, options: BabelPluginOptions): Babel.PluginObj;\nexport default fullSourcePlugin;\n```\n\n----------------------------------------\n\nTITLE: Running SSR Test Utility\nDESCRIPTION: This command executes the SSR test utility on specified story files. It generates CommonJS and ES Modules outputs, and an index.html file, storing the assets in the `node_modules/.cache/ssr-tests` directory.  The utility then performs browser-based tests to ensure SSR functionality is working correctly.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/scripts/test-ssr/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"# test-ssr \\\"./stories/**/*.stories.tsx\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Property Mapping Table for Spinner Migration in FluentUI\nDESCRIPTION: This table provides a comprehensive mapping of properties for the Spinner component across v8, v0, and v9 of FluentUI. It shows how properties have changed or been deprecated between versions.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-spinner/library/docs/MIGRATION.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| v8 `Spinner`   | v0 `Loader`     | v9 `Spinner`    |\n| -------------- | --------------- | --------------- |\n| `ariaLabel`    | `aria-label`    | `aria-label`    |\n| `ariaLive`     | `aria-live`     | `aria-live`     |\n| `componentRef` | `ref`           | `ref`           |\n|                | `delay`         |                 |\n|                | `inline`        |                 |\n|                | `labelPosition` | `labelPosition` |\n|                | `size`          | `size`          |\n| `theme`        |                 |                 |\n```\n\n----------------------------------------\n\nTITLE: Defining TagPickerGroup Properties in TypeScript\nDESCRIPTION: The TagPickerGroupTypeScript definition extends a TagGroup by incorporating specialized properties and event handling for dismissable tags. It regulates styling and focus behavior when tags are managed, ensuring seamless interaction by focusing on the trigger when no tags are left to dismiss. This ensures TagPicker components are manageable and user-friendly.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/Spec.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type TagPickerGroupSlots = TagGroupSlots;\n\n/**\n * TagPickerGroup Props\n */\nexport type TagPickerGroupProps = ComponentProps<TagPickerGroupSlots>;\n```\n\n----------------------------------------\n\nTITLE: AccordionItem Component Type Definition for Marker Position in Markdown\nDESCRIPTION: Type definition for the Accordion Item marker position, specifying where the expand icon should be positioned (start or end).\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/src/accordion-item/README.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`AccordionItemMarkerPosition` | Expand icon position       | `{ start: \"start\", end: \"end\" }`\n```\n\n----------------------------------------\n\nTITLE: Bumping package versions in FluentUI React Switch\nDESCRIPTION: This code snippet represents a series of patch updates where the versions of dependent packages are bumped. This includes packages such as @fluentui/react-field, @fluentui/react-jsx-runtime, @fluentui/react-label, @fluentui/react-tabster, and @fluentui/react-utilities. Each bump is associated with a pull request.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-switch/library/CHANGELOG.md#2025-04-20_snippet_8\n\nLANGUAGE: none\nCODE:\n```\n\"- Bump @fluentui/react-field to v9.1.21 ([PR #28973](https://github.com/microsoft/fluentui/pull/28973) by beachball)\n- Bump @fluentui/react-jsx-runtime to v9.0.2 ([PR #28973](https://github.com/microsoft/fluentui/pull/28973) by beachball)\n- Bump @fluentui/react-label to v9.1.29 ([PR #28973](https://github.com/microsoft/fluentui/pull/28973) by beachball)\n- Bump @fluentui/react-tabster to v9.12.4 ([PR #28973](https://github.com/microsoft/fluentui/pull/28973) by beachball)\n- Bump @fluentui/react-utilities to v9.12.0 ([PR #28973](https://github.com/microsoft/fluentui/pull/28973) by beachball)\"\n```\n\n----------------------------------------\n\nTITLE: DialogContent Slots Definition\nDESCRIPTION: Defines the slots available within the DialogContent component, using Slot from '@fluentui/react-utilities'.  It indicates that the DialogContent component has a 'root' slot, which is a div element.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-dialog/library/etc/react-dialog.api.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport type DialogContentSlots = {\n    root: Slot<'div'>;\n};\"\n```\n\n----------------------------------------\n\nTITLE: TagPickerControl Class Names\nDESCRIPTION: Defines the class names for the TagPickerControl component's slots, used for styling the component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-tag-picker/library/etc/react-tag-picker.api.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport const tagPickerControlClassNames: SlotClassNames<TagPickerControlSlots & TagPickerControlInternalSlots>;\"\n```\n\n----------------------------------------\n\nTITLE: Visualizing Package API Patterns with Mermaid\nDESCRIPTION: A Mermaid graph showing the access patterns for different API modifiers, illustrating how @alpha and @beta are accessed from the /unstable path, @public from the main package path, and @internal is not accessible.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/shared/build-system/package-public-api.md#2025-04-20_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\nA[\"@alpha,@beta\"] -- access from path --> U[\"@fluentui/package-name/unstable\"]\nB[\"@public\"] -- access from path --> S[\"@fluentui/package-name\"]\nC[\"@internal\"] -- access from path --> E((X))\n```\n\n----------------------------------------\n\nTITLE: Rendering Field Component with Child Element in JSX\nDESCRIPTION: This JSX snippet illustrates how to use the Field component with a direct child component. The field accepts various props for accessibility and validation, enhancing user interaction while ensuring that ARIA roles are applied correctly.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-field/library/docs/Spec.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n<Field\n  label=\"This is the field label\"\n  orientation=\"horizontal\"\n  validationState=\"error\"\n  validationMessage=\"This is a validation message\"\n  hint=\"This is a hint message\"\n>\n  <Input /> {/* Or any other form control from this library */}\n</Field>\n```\n\n----------------------------------------\n\nTITLE: Building and Running the Fluent UI Website Locally\nDESCRIPTION: Commands to set up dependencies, build the website, and start a local development server with live-reload functionality. These commands should be run from the root of the repository, not from the public-docsite folder.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn\nyarn nx run public-docsite:build\n\nyarn nx run public-docsite:start\n```\n\n----------------------------------------\n\nTITLE: Defining AnnounceContextValue and AnnounceOptions in TypeScript\nDESCRIPTION: Defines types for the announce context value and options used in accessibility announcements. The AnnounceContextValue includes a function to make announcements, while AnnounceOptions specifies configuration for those announcements.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-shared-contexts/library/etc/react-shared-contexts.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\ntype AnnounceContextValue = {\n    announce: (message: string, options?: AnnounceOptions) => void;\n};\nexport { AnnounceContextValue }\nexport { AnnounceContextValue as AnnounceContextValue_unstable }\n\n// @public\nexport type AnnounceOptions = {\n    alert?: boolean;\n    batchId?: string;\n    polite?: boolean;\n    priority?: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining FocusZoneDirection Enum in TypeScript\nDESCRIPTION: Defines the FocusZoneDirection enum, representing possible focus directional modes in a FocusZone. It supports bidirectional, domOrder, horizontal, and vertical focus navigation modes. These modes dictate how focus transitions between elements within the focus zone.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-focus/etc/react-focus.api.md#2025-04-20_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\\nexport enum FocusZoneDirection {\\n    bidirectional = 2,\\n    domOrder = 3,\\n    horizontal = 1,\\n    vertical = 0\\n}\n```\n\n----------------------------------------\n\nTITLE: MergeProps Example with Handlers\nDESCRIPTION: This code snippet demonstrates the problem with `mergeProps` where function properties are simply replaced instead of merged. This can lead to unexpected behavior when combining handler functions from different sources.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/simplify-prop-merging.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst props = { button: { customHandleClick /* a custom handler */ } };\nconst state = mergeProps(\n  { button: { handleClick /* a require handler by our component */ } },\n  resolveShorthandProps(props),\n);\n// Results in => { button: { customHandleClick /* 💣 handlers are not merged */ } }\n```\n\n----------------------------------------\n\nTITLE: Defining Overflow Hooks and Utilities - TypeScript\nDESCRIPTION: This section includes various hooks and utilities such as useOverflowContainer and useOverflowMenu, both public and internal. These hooks provide functions for managing overflow states and visibility and are essential for implementing robust user interfaces that handle dynamic content sizes.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-overflow/library/etc/react-overflow.api.md#2025-04-20_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function useIsOverflowGroupVisible(id: string): OverflowGroupState;\n\nexport function useIsOverflowItemVisible(id: string): boolean;\n\nexport const useOverflowContainer: <TElement extends HTMLElement>(update: OnUpdateOverflow, options: Omit<ObserveOptions, 'onUpdateOverflow'>) => UseOverflowContainerReturn<TElement>;\n\nexport const useOverflowContext: <SelectedValue>(selector: ContextSelector<OverflowContextValue, SelectedValue>) => SelectedValue;\n\nexport const useOverflowCount: () => number;\n\nexport function useOverflowDivider<TElement extends HTMLElement>(groupId?: string): React_2.RefObject<TElement>;\n\nexport function useOverflowItem<TElement extends HTMLElement>(id: string, priority?: number, groupId?: string): React_2.RefObject<TElement>;\n\nexport function useOverflowMenu<TElement extends HTMLElement>(id?: string): {\n    ref: React_2.RefObject<TElement>;\n    overflowCount: number;\n    isOverflowing: boolean;\n};\n\nexport function useOverflowVisibility(): {\n    itemVisibility: Record<string, boolean>;\n    groupVisibility: Record<string, OverflowGroupState>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Checkbox Component Class in TypeScript\nDESCRIPTION: Extends BaseCheckbox to create a Checkbox class with properties for indeterminate state, shape, and size. Includes methods for handling state changes and toggling.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/web-components.api.md#2025-04-20_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport class Checkbox extends BaseCheckbox {\n    constructor();\n    indeterminate?: boolean;\n    // @internal\n    protected indeterminateChanged(prev: boolean | undefined, next: boolean | undefined): void;\n    // @internal @override\n    protected setAriaChecked(value?: boolean): void;\n    shape?: CheckboxShape;\n    size?: CheckboxSize;\n    toggleChecked(force?: boolean): void;\n}\n\n// @public\nexport const CheckboxDefinition: FASTElementDefinition<typeof Checkbox>;\n\n// @public\nexport type CheckboxOptions = {\n    checkedIndicator?: StaticallyComposableHTML<Checkbox>;\n    indeterminateIndicator?: StaticallyComposableHTML<Checkbox>;\n};\n\n// @public\nexport const CheckboxShape: {\n    readonly circular: \"circular\";\n    readonly square: \"square\";\n};\n\n// @public (undocumented)\nexport type CheckboxShape = ValuesOf<typeof CheckboxShape>;\n\n// @public\nexport const CheckboxSize: {\n    readonly medium: \"medium\";\n    readonly large: \"large\";\n};\n\n// @public (undocumented)\nexport type CheckboxSize = ValuesOf<typeof CheckboxSize>;\n\n// @public\nexport const CheckboxStyles: ElementStyles;\n\n// @public\nexport const CheckboxTemplate: ElementViewTemplate<Checkbox>;\n```\n\n----------------------------------------\n\nTITLE: Pull Request Links\nDESCRIPTION: Markdown links to pull requests containing changes\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-input/library/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n[PR #24491](https://github.com/microsoft/fluentui/pull/24491)\n[PR #24221](https://github.com/microsoft/fluentui/pull/24221)\n```\n\n----------------------------------------\n\nTITLE: Implementing atMention='me' styling in high contrast theme using FluentUI v9\nDESCRIPTION: Example showing how to achieve the same visual result as atMention='me' property in the high contrast theme using makeStyles in v9.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-text/library/docs/MIGRATION.md#2025-04-20_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeStyles, Text } from '@fluentui/react-components';\n\nconst useStyles = makeStyles({\n  root: {\n    color: 'rgb(255, 255, 1)',\n    fontWeight: 700,\n  },\n});\n\nconst MyComponent = () => {\n  const styles = useStyles();\n\n  return <Text className={styles.root}>{/* ... */}</Text>;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Tabs with v9 TabList and Tab in React TSX\nDESCRIPTION: This snippet shows how to migrate from v8 Pivot to v9 TabList. It demonstrates the new structure where tab labels are children of Tab components, and content is rendered separately based on the selected tab value.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Tabs.stories.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst [selectedValue, setSelectedValue] = React.useState<TabValue>();\n\nconst onTabSelect = (event: SelectTabEvent, data: SelectTabData) => {\n    setSelectedValue(data.value);\n};\n\n//...\n\n<TabList selectedValue={selectedValue} onTabSelect={onTabSelect}>\n  <Tab value=\"tab1\">First Tab</Tab>\n  <Tab value=\"tab2\">Second Tab</Tab>\n  <Tab value=\"tab3\">Third Tab</Tab>\n</TabList>\n<div>\n  {selectedValue === 'tab1' && <div>Content 1</div>}\n  {selectedValue === 'tab2' && <div>Content 2</div>}\n  {selectedValue === 'tab3' && <div>Content 3</div>}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing Font-Based Icons in Fluent UI React\nDESCRIPTION: This snippet demonstrates how to initialize font-based icons in a Fluent UI React application. It imports the initializeIcons function from the @fluentui/font-icons-mdl2 package and calls it to load the icon fonts.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Styles/FabricIconsPage/docs/web/FabricIconsUsage.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { initializeIcons } from '@fluentui/font-icons-mdl2';\ninitializeIcons();\n```\n\n----------------------------------------\n\nTITLE: Changelog Version Updates - Markdown\nDESCRIPTION: Changelog entries documenting version updates, dependency changes, and styling improvements for the FluentUI React Slider component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-slider/library/CHANGELOG.md#2025-04-20_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n### Changes\n\n- added styling of documentation ([PR #20193](https://github.com/microsoft/fluentui/pull/20193) by peter@draxler.ml)\n- Bump @fluentui/react-make-styles to v9.0.0-beta.2 ([PR #20353](https://github.com/microsoft/fluentui/pull/20353) by beachball)\n- Bump @fluentui/react-shared-contexts to v9.0.0-beta.2 ([PR #20353](https://github.com/microsoft/fluentui/pull/20353) by beachball)\n- Bump @fluentui/react-tabster to v9.0.0-beta.3 ([PR #20353](https://github.com/microsoft/fluentui/pull/20353) by beachball)\n- Bump @fluentui/react-utilities to v9.0.0-beta.2 ([PR #20353](https://github.com/microsoft/fluentui/pull/20353) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Implementing AvatarView in Kotlin for FluentUI Android\nDESCRIPTION: The AvatarView is a UI component in the FluentUI Android library. It is implemented in Kotlin and can be found in the specified GitHub repository. The component is likely used for displaying user avatars or profile pictures in Android applications.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite/src/pages/Controls/AvatarPage/docs/android/AvatarImplementation.md#2025-04-20_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Source code can be found at:\nhttps://github.com/microsoft/fluentui-android/blob/master/FluentUI/src/main/java/com/microsoft/fluentui/persona/AvatarView.kt\n```\n\n----------------------------------------\n\nTITLE: Defining ResponsiveMode Enumeration in TypeScript\nDESCRIPTION: Defines the ResponsiveMode enum used for responsive design breakpoints in FluentUI. It includes values from small to xxxLarge, with an unknown fallback value.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_245\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport enum ResponsiveMode {\n    large = 2,\n    medium = 1,\n    small = 0,\n    // (undocumented)\n    unknown = 999,\n    xLarge = 3,\n    xxLarge = 4,\n    xxxLarge = 5\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Styles Using MakeStyles in JavaScript\nDESCRIPTION: This code snippet uses the 'makeStyles' function to create a set of styles programmatically in JavaScript. It is used for components applying flexible box properties like 'flexWrap' and other style-related properties. Dependencies include having a style-in-JS library installed to utilize 'makeStyles'.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/public-docsite-v9/src/Concepts/Migration/FromV8/Components/Flex/Flex.Stack.stories.mdx#2025-04-20_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nmakeStyles({\\n  root: {\\n    flexWrap: 'wrap',\\n    overflow: 'visible',\\n    height: '100%',\\n  },\\n  inner: {\\n    display: 'flex',\\n    flexWrap: 'wrap',\\n    overflow: 'visible',\\n    boxSizing: 'border-box',\\n    width: '100%',\\n    maxWidth: '100vw',\\n  }\\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Classes with makeStyles Hook Based on Theme\nDESCRIPTION: This snippet illustrates how to create styles for React components using the makeStyles hook, which allows styles to adapt based on the active theme.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/src/utilities/ThemeProvider/README.md#2025-04-20_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\nimport { makeStyles } from '@fluentui/react';\n\nconst useFooStyles = makeStyles(theme => ({\n  root: {\n    background: theme.semanticColors.bodyBackground,\n    ':hover': {\n      background: theme.semanticColors.bodyBackgroundHovered,\n    },\n  },\n}));\n\nconst Foo = props => {\n  const classes = useFooStyles();\n\n  return <div className={classes.root} />;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Version History Entry - FluentUI React Avatar\nDESCRIPTION: Markdown formatted changelog entry showing version history, changes and dependency updates\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-avatar/library/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## [9.6.8](https://github.com/microsoft/fluentui/tree/@fluentui/react-avatar_v9.6.8)\n\nWed, 17 Jan 2024 16:18:50 GMT\n[Compare changes](https://github.com/microsoft/fluentui/compare/@fluentui/react-avatar_v9.6.7..@fluentui/react-avatar_v9.6.8)\n\n### Patches\n\n- Bump @fluentui/react-badge to v9.2.21\n- Bump @fluentui/react-context-selector to v9.1.48\n- Bump @fluentui/react-popover to v9.8.32\n- Bump @fluentui/react-tabster to v9.17.2\n- Bump @fluentui/react-tooltip to v9.4.10\n- Bump @fluentui/react-utilities to v9.16.0\n- Bump @fluentui/react-jsx-runtime to v9.0.26\n```\n\n----------------------------------------\n\nTITLE: Rendering Button with Icon After Children in TSX\nDESCRIPTION: Demonstrates the structure of a Button component with an icon positioned after the children content, rendered as a native button element.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-button/library/docs/SPEC.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<button class=\"root\" href={href}>\n  {children}\n  <span class=\"icon\" />\n</button>\n```\n\n----------------------------------------\n\nTITLE: Defining ProviderContextValue_unstable Type in TypeScript\nDESCRIPTION: TypeScript type definition for the provider context value which specifies text direction and target document.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-shared-contexts/library/etc/react-shared-contexts.api.md#2025-04-20_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport type ProviderContextValue_unstable = {\n    dir: 'ltr' | 'rtl';\n    targetDocument?: Document;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Accessible Dropdown with Label in React\nDESCRIPTION: Demonstrates the recommended pattern for providing accessible labels with the Dropdown component using the Label component with htmlFor attribute pointing to the Dropdown's id.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-combobox/stories/src/Dropdown/DropdownAccessibility.stories.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Label htmlFor=\"dropdown-id\">Favorite Fruit</Label>\n<Dropdown id=\"dropdown-id\">\n  <Option>Apple</Option>\n  <Option>Banana</Option>\n</Dropdown>\n```\n\n----------------------------------------\n\nTITLE: Declaring Legend Interface in TypeScript\nDESCRIPTION: The Legend interface is defined to extend the Label interface and includes properties to control various legend attributes in a chart. It contains numeric and string properties to manage display aspects like border width, item sizing, and orientation. Dependencies include a structure that assumes inheriting from Label and using types like Font and LegendTitle.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/chart-utilities/etc/chart-utilities.api.md#2025-04-20_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface Legend extends Label {\n    // (undocumented)\n    borderwidth: number;\n    // (undocumented)\n    groupclick: 'toggleitem' | 'togglegroup';\n    // (undocumented)\n    grouptitlefont: Partial<Font>;\n    // (undocumented)\n    itemclick: 'toggle' | 'toggleothers' | false;\n    // (undocumented)\n    itemdoubleclick: 'toggle' | 'toggleothers' | false;\n    // (undocumented)\n    itemsizing: 'trace' | 'constant';\n    // (undocumented)\n    itemwidth: number;\n    // (undocumented)\n    orientation: 'v' | 'h';\n    // (undocumented)\n    title: Partial<LegendTitle>;\n    // (undocumented)\n    tracegroupgap: number;\n    // (undocumented)\n    traceorder: 'grouped' | 'normal' | 'reversed' | 'reversed+grouped';\n    // (undocumented)\n    uid: string;\n    // (undocumented)\n    uirevision: number | string;\n    // (undocumented)\n    valign: 'top' | 'middle' | 'bottom';\n    // (undocumented)\n    x: number;\n    // (undocumented)\n    xanchor: 'auto' | 'left' | 'center' | 'right';\n    // (undocumented)\n    xref: 'container' | 'paper';\n    // (undocumented)\n    y: number;\n    // (undocumented)\n    yanchor: 'auto' | 'top' | 'middle' | 'bottom';\n    // (undocumented)\n    yref: 'container' | 'paper';\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TagPicker Event Types and Callbacks in TypeScript\nDESCRIPTION: TypeScript definitions for TagPicker event data types and callback props. Includes definitions for option selection and open state change events, combining event data with DOM events.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/patterns/change-event-callbacks.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Source event type is defined by string to handle varying event source types i.e. 'click' vs 'keydown'\nexport type TagPickerOnOptionSelectData = {\n  value: string;\n  selectedOptions: string[];\n} & (EventData<'click', React.MouseEvent<HTMLDivElement>> | EventData<'keydown', React.KeyboardEvent<HTMLDivElement>>);\n\n// Unique event data type is provided for each component action\nexport type TagPickerOnOpenChangeData = { open: boolean } & (\n  | EventData<'click', React.MouseEvent<HTMLDivElement>>\n  | EventData<'keydown', React.KeyboardEvent<HTMLDivElement>>\n);\n\n// Event callbacks are then defined as EventHandler with data type in TagPickerProps\nonOpenChange?: EventHandler<TagPickerOnOpenChangeData>;\nonOptionSelect?: EventHandler<TagPickerOnOptionSelectData>;\n```\n\n----------------------------------------\n\nTITLE: Patch Updates Section\nDESCRIPTION: Lists of package dependency updates and patches using bullet points\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/charts/react-charting/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n### Patches\n\n- Bump @fluentui/react-focus to v8.5.5 ([PR #22094](https://github.com/microsoft/fluentui/pull/22094) by beachball)\n- Bump @fluentui/react to v8.61.1 ([PR #22094](https://github.com/microsoft/fluentui/pull/22094) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Executing Cypress Component Configuration Generator\nDESCRIPTION: This command executes the Cypress component configuration generator from the @fluentui/workspace-plugin. It sets up the necessary files and configurations for component testing in the specified project.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/tools/workspace-plugin/src/generators/cypress-component-configuration/README.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n\"yarn nx g @fluentui/workspace-plugin:cypress-component-configuration ...\"\n```\n\n----------------------------------------\n\nTITLE: Defining Curve Constants in TypeScript\nDESCRIPTION: Exports constants for various animation curves using CSS custom properties.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/web-components/docs/api-report.md#2025-04-20_snippet_31\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport const curveAccelerateMax = \"var(--curveAccelerateMax)\";\n\n// @public\nexport const curveAccelerateMid = \"var(--curveAccelerateMid)\";\n\n// @public\nexport const curveAccelerateMin = \"var(--curveAccelerateMin)\";\n\n// @public\nexport const curveDecelerateMax = \"var(--curveDecelerateMax)\";\n\n// @public\nexport const curveDecelerateMid = \"var(--curveDecelerateMid)\";\n\n// @public\nexport const curveDecelerateMin = \"var(--curveDecelerateMin)\";\n\n// @public\nexport const curveEasyEase = \"var(--curveEasyEase)\";\n\n// @public\nexport const curveEasyEaseMax = \"var(--curveEasyEaseMax)\";\n\n// @public\nexport const curveLinear = \"var(--curveLinear)\";\n```\n\n----------------------------------------\n\nTITLE: Creating Motion Elements with createMotionElement\nDESCRIPTION: This code shows an example of using `createMotionElement` to create animated versions of existing components like `Button`. It demonstrates how to compose existing components with motion factories to create `FadeEnterButton` which provides the animation to the base button component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/motion-definition-n-apis.md#2025-04-20_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from '@fluentui/react-components';\nimport { type AtomMotion, createMotionElement } from '@fluentui/react-motions-preview';\n\nconst fade: AtomMotion = {\n  /* --- */\n};\n\nconst FadeEnterDiv = createMotionElement('div', fade);\nconst FadeEnterButton = createMotionElement(Button, fade);\n\nfunction MyComponent() {\n  return (\n    <>\n      <FadeEnterDiv>Hello world!</FadeEnterDiv>\n      <FadeEnterButton>Hello world!</FadeEnterButton>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: FloatingSuggestion TypeScript Fix\nDESCRIPTION: Fix to resolve FloatingSuggestion if conditions to mitigate TypeScript 4.7 'always true' violation\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-experiments/CHANGELOG.md#2025-04-20_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Patching @fluentui/react to v8.47.3\nDESCRIPTION: This patch updates the @fluentui/react package to version 8.47.3. It was necessary to apply this change to maintain compatibility and prevent potential issues that can arise from using outdated libraries. The commit references the Pull Request #20716.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/apps/ts-minbar-test-react/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Bump @fluentui/react to v8.47.3 ([PR #20716](https://github.com/microsoft/fluentui/pull/20716) by beachball)\n```\n\n----------------------------------------\n\nTITLE: Applying Component-Level Styles\nDESCRIPTION: This snippet demonstrates how to apply component-level styles by providing a theme object to the ThemeProvider, specifically styling the Checkbox component.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/src/utilities/ThemeProvider/README.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { Checkbox, ThemeProvider, createTheme } from '@fluentui/react';\n\nexport const App = () => (\n  <ThemeProvider\n    theme={{\n      components: { Checkbox: { styles: { root: { background: 'red' } } } },\n    }}\n  >\n    <Checkbox />\n  </ThemeProvider>\n);\n```\n```\n\n----------------------------------------\n\nTITLE: React Hook for managing Web Animations API\nDESCRIPTION: This code demonstrates a React hook implementation for managing animations using the Web Animations API.  It uses `React.useEffect` to start and cancel the animation based on changes to the `motion` dependency. The hook takes a motion definition object as input and returns a ref to be attached to the animated element.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/convergence/motion-definition-n-apis.md#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction useAtomMotion(motion) {\n  const elementRef = React.useRef();\n\n  React.useEffect(() => {\n    const animation = elementRef.current.animate(motion.keyframes, {\n      duration: motion.duration,\n    });\n\n    return () => {\n      animation.cancel();\n    };\n  }, [motion]);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Italic Text in FluentUI\nDESCRIPTION: This snippet demonstrates how to create a Text component with italic styling using makeStyles from FluentUI. This replaces the deprecated 'temporary' property.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-text/library/docs/MIGRATION.md#2025-04-20_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeStyles, Text } from '@fluentui/react-components';\n\nconst useStyles = makeStyles({\n  root: {\n    fontStyle: 'italic',\n  },\n});\n\nconst MyComponent = () => {\n  const styles = useStyles();\n\n  return <Text className={styles.root}>{/* ... */}</Text>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ITextField Interface in TypeScript\nDESCRIPTION: Defines the ITextField interface with methods and properties for text field components.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_214\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface ITextField {\n    blur: () => void;\n    focus: () => void;\n    select: () => void;\n    selectionEnd: number | null;\n    selectionStart: number | null;\n    setSelectionEnd: (value: number) => void;\n    setSelectionRange: (start: number, end: number) => void;\n    setSelectionStart: (value: number) => void;\n    value: string | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Highlighting API Differences Between Trigger Types\nDESCRIPTION: This snippet illustrates the distinction in API behaviors between the MenuTrigger and Tooltip components, highlighting the limitations of Tooltip when used as a trigger.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/docs/react-v9/contributing/rfcs/react-components/components/tooltip-api-alignment.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction App() {\n  return (\n    <>\n      {/* \"MenuTrigger\" does not accept DOM props by typings, but will pass them to a trigger */}\n      <MenuTrigger onClick={() => {}} />\n      {/* \"Tooltip\" accepts DOM props and will pass them to \"div\" that wraps \"content\" */}\n      <Tooltip onClick={() => {}} />\n      {/* \"content\" on \"Tooltip\" is not a real slot, it's \"React.ReactNode\" */}\n      <Tooltip content=\"Some content\" />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: StylesClassMapping Type Definition in FluentUI\nDESCRIPTION: Defines a mapping type that converts a style set with IStyle values to corresponding CSS class name strings. Used for component styling in FluentUI.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react/etc/react.api.md#2025-04-20_snippet_265\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport type StylesClassMapping<TStyleSet extends {\n    [key in keyof TStyleSet]: IStyle;\n}> = {\n    [key in keyof TStyleSet]: string;\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript: useSwitch Hook\nDESCRIPTION: Defines a hook function that processes the props and ref of the Switch component to produce the SwitchState. This hook is responsible for managing the component's state and logic.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-switch/library/etc/react-switch.api.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const useSwitch_unstable: (props: SwitchProps, ref: React_2.Ref<HTMLInputElement>) => SwitchState;\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for Fluentui React Divider Stories in JavaScript\nDESCRIPTION: This code snippet demonstrates how to configure the Storybook module exports to include the Fluentui React Divider stories. It specifies the glob patterns for both MDX and TypeScript/TSX story files.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-divider/stories/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nstories: ['../packages/react-components/react-divider/stories/src/**/*.stories.mdx', '../packages/react-components/react-divider/stories/src/**/index.stories.@(ts|tsx)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Selectable List (Listbox) in HTML\nDESCRIPTION: This snippet shows how to implement a selectable list using the 'listbox' and 'option' roles. This approach is suitable for lists where the primary action is selection.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/packages/react-components/react-list/library/docs/ListA11y.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<ul role=\"listbox\">\n  <li role=\"option\" aria-selected=\"false\" tabindex=\"0\">\n    John Doe\n  </li>\n  <!-- More list items -->\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Rendering Pill Components in JSX\nDESCRIPTION: This snippet illustrates how to render basic Pill components using JSX. It demonstrates the usage of both regular and clickable Pills, along with encapsulating them within a Pills component, and a TogglePill for toggle functionality.\nSOURCE: https://github.com/microsoft/fluentui/blob/master/specs/Pills.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Pill>Item 1</Pill>\n<Pill clickable>Item 2</Pill>\n<Pills><Pill>Item 1</Pill></Pills>\n<TogglePill>On</TogglePill>\n```"
  }
]