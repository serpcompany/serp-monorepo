[
  {
    "owner": "prefix-dev",
    "repo": "pixi",
    "content": "TITLE: Using MiniJinja for Rendering Task Commands in TOML Configuration\nDESCRIPTION: Example of how to use MiniJinja templating in Pixi task commands for text transformation, conditional logic, string operations, and iteration. This new feature in version 0.46.0 allows for powerful command rendering with filters and control structures.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[tasks]\n# The arg `text`, converted to uppercase, will be printed.\ntask1 = { cmd = \"echo {{ text | upper }}\", args = [\"text\"] }\n# If arg `text` contains 'hoi', it will be converted to lowercase. The result will be printed.\ntask2 = { cmd = \"echo {{ text | lower if 'hoi' in text }}\", args = [\n  { arg = \"text\", default = \"\" },\n] }\n# With `a` and `b` being strings, they will be appended and then printed.\ntask3 = { cmd = \"echo {{ a + b }}\", args = [\"a\", { arg = \"b\", default = \"!\" }] }\n# `names` will be split by whitespace and then every name will be printed separately\ntask4 = { cmd = \"{% for name in names | split %} echo {{ name }};{% endfor %}\", args = [\n  \"names\",\n] }\n```\n\n----------------------------------------\n\nTITLE: Installing Pixi on macOS and Linux with curl\nDESCRIPTION: Command to install Pixi on macOS and Linux systems using curl. The script downloads the latest version, extracts it, and adds the binary to PATH.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://pixi.sh/install.sh | sh\n# or with brew\nbrew install pixi\n```\n\n----------------------------------------\n\nTITLE: Defining Tasks with Argument Variables in TOML Configuration\nDESCRIPTION: Example of using argument variables in Pixi tasks, introduced in version 0.45.0. This allows defining mandatory and optional arguments with defaults, providing more flexible task execution.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[tasks.install]\ncmd = \"cargo install {{ type }} --path {{ path }}\"\nargs = [\"path\", { arg = \"type\", default = \"--release\" }] # `path` is mandatory, `type` is optional with a default\n```\n\n----------------------------------------\n\nTITLE: Installing Pixi on Linux/macOS\nDESCRIPTION: Command to download and install Pixi package manager on Linux and macOS systems. The script installs Pixi to ~/.pixi/bin and updates PATH.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://pixi.sh/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Installing Pixi on Windows using PowerShell\nDESCRIPTION: This PowerShell command downloads and executes the Pixi installation script for Windows. It installs Pixi and adds it to the PATH environment variable.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/advanced/installation.md#2025-04-23_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\npowershell -ExecutionPolicy ByPass -c \"irm -useb https://pixi.sh/install.ps1 | iex\"\n```\n\n----------------------------------------\n\nTITLE: Shortened Task Composition with depends-on in TOML Configuration\nDESCRIPTION: Example showing the shortened syntax for task composition using the depends-on key in Pixi 0.46.0. This allows for more concise definition of task dependencies and execution sequences.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[tasks]\ntest-all = [{ task = \"test\", args = [\"all\"] }]\n# Equivalent to: test-all = { depends-on = [{task = \"test\", args = [\"all\"] }]}\n```\n\n----------------------------------------\n\nTITLE: Multi-stage Docker Build with Pixi Environment\nDESCRIPTION: Dockerfile example demonstrating a multi-stage build process that uses Pixi for dependency management. It creates a production-ready container with a minimal footprint by using shell-hook to activate the Pixi environment without requiring Pixi installation in the final container.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/deployment/container.md#2025-04-23_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM ghcr.io/prefix-dev/pixi:0.41.4 AS build\n\n# copy source code, pixi.toml and pixi.lock to the container\nWORKDIR /app\nCOPY . .\n# install dependencies to `/app/.pixi/envs/prod`\n# use `--locked` to ensure the lockfile is up to date with pixi.toml\nRUN pixi install --locked -e prod\n# create the shell-hook bash script to activate the environment\nRUN pixi shell-hook -e prod -s bash > /shell-hook\nRUN echo \"#!/bin/bash\" > /app/entrypoint.sh\nRUN cat /shell-hook >> /app/entrypoint.sh\n# extend the shell-hook script to run the command passed to the container\nRUN echo 'exec \"$@\"' >> /app/entrypoint.sh\n\nFROM ubuntu:24.04 AS production\nWORKDIR /app\n# only copy the production environment into prod container\n# please note that the \"prefix\" (path) needs to stay the same as in the build container\nCOPY --from=build /app/.pixi/envs/prod /app/.pixi/envs/prod\nCOPY --from=build --chmod=0755 /app/entrypoint.sh /app/entrypoint.sh\n# copy your project code into the container as well\nCOPY ./my_project /app/my_project\n\nEXPOSE 8000\nENTRYPOINT [ \"/app/entrypoint.sh\" ]\n# run your app inside the pixi environment\nCMD [ \"uvicorn\", \"my_project:app\", \"--host\", \"0.0.0.0\" ]\n```\n\n----------------------------------------\n\nTITLE: Setting Supported Platforms for Dependency Resolution (TOML)\nDESCRIPTION: Illustrates the platforms key in the [workspace] table for listing supported system targets. Pixi will lock dependencies for every indicated platform; valid values include linux-64, osx-64, osx-arm64, and more. Append desired platforms to the platforms list to support cross-platform or universal builds; see referenced official list for available strings.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_manifest.md#2025-04-23_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\nplatforms = [\n  \"linux-64\",\n  \"osx-64\",\n  \"osx-arm64\"\n]\n\n```\n\n----------------------------------------\n\nTITLE: Defining Tasks in Pixi TOML Configuration\nDESCRIPTION: Examples of task definitions in Pixi including simple commands, dependent tasks, file operations, and environment-specific configurations.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_manifest.md#2025-04-23_snippet_19\n\nLANGUAGE: toml\nCODE:\n```\n[tasks]\nsimple = \"echo This is a simple task\"\ncmd = { cmd=\"echo Same as a simple task but now more verbose\"}\ndepending = { cmd=\"echo run after simple\", depends-on=\"simple\"}\nalias = { depends-on=[\"depending\"]}\ndownload = { cmd=\"curl -o file.txt https://example.com/file.txt\" , outputs=[\"file.txt\"]}\nbuild = { cmd=\"npm build\", cwd=\"frontend\", inputs=[\"frontend/package.json\", \"frontend/*.js\"]}\nrun = { cmd=\"python run.py $ARGUMENT\", env={ ARGUMENT=\"value\" }}\nformat = { cmd=\"black $INIT_CWD\" }\nclean-env = { cmd = \"python isolated.py\", clean-env = true}\n```\n\n----------------------------------------\n\nTITLE: Listing Environment Contents with Pixi\nDESCRIPTION: This snippet shows the output of the 'pixi list' command, which displays the packages installed in the Pixi environment, including their versions, build information, size, and source.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/tutorial.md#2025-04-23_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nPackage          Version     Build               Size       Kind   Source\nasgiref          3.8.1                           68.5 KiB   pypi   asgiref-3.8.1-py3-none-any.whl\nblack            24.10.0     py313h8f79df9_0     388.7 KiB  conda  black\nblinker          1.9.0                           23.9 KiB   pypi   blinker-1.9.0-py3-none-any.whl\nbzip2            1.0.8       h99b78c6_7          120 KiB    conda  bzip2\nca-certificates  2024.12.14  hf0a4a13_0          153.4 KiB  conda  ca-certificates\nclick            8.1.8       pyh707e725_0        82.7 KiB   conda  click\nflask            3.1.0                           335.9 KiB  pypi   flask-3.1.0-py3-none-any.whl\nitsdangerous     2.2.0                           45.8 KiB   pypi   itsdangerous-2.2.0-py3-none-any.whl\njinja2           3.1.5                           484.8 KiB  pypi   jinja2-3.1.5-py3-none-any.whl\nlibexpat         2.6.4       h286801f_0          63.2 KiB   conda  libexpat\nlibffi           3.4.2       h3422bc3_5          38.1 KiB   conda  libffi\nliblzma          5.6.3       h39f12f2_1          96.8 KiB   conda  liblzma\nlibmpdec         4.0.0       h99b78c6_0          67.6 KiB   conda  libmpdec\nlibsqlite        3.48.0      h3f77e49_1          832.8 KiB  conda  libsqlite\nlibzlib          1.3.1       h8359307_2          45.3 KiB   conda  libzlib\nmarkupsafe       3.0.2                           73 KiB     pypi   markupsafe-3.0.2-cp313-cp313-macosx_11_0_arm64.whl\nmypy_extensions  1.0.0       pyha770c72_1        10.6 KiB   conda  mypy_extensions\nncurses          6.5         h5e97a16_3          778.3 KiB  conda  ncurses\nopenssl          3.4.0       h81ee809_1          2.8 MiB    conda  openssl\npackaging        24.2        pyhd8ed1ab_2        58.8 KiB   conda  packaging\npathspec         0.12.1      pyhd8ed1ab_1        40.1 KiB   conda  pathspec\npixi_py          0.1.0                                      pypi    (editable)\nplatformdirs     4.3.6       pyhd8ed1ab_1        20 KiB     conda  platformdirs\npython           3.13.1      h4f43103_105_cp313  12.3 MiB   conda  python\npython_abi       3.13        5_cp313             6.2 KiB    conda  python_abi\nreadline         8.2         h92ec313_1          244.5 KiB  conda  readline\ntk               8.6.13      h5083fa2_1          3 MiB      conda  tk\ntzdata           2025a       h78e105d_0          120 KiB    conda  tzdata\nwerkzeug         3.1.3                           743 KiB    pypi   werkzeug-3.1.3-py3-none-any.whl\n```\n\n----------------------------------------\n\nTITLE: Complete pyproject.toml Configuration for Pixi\nDESCRIPTION: This comprehensive example demonstrates a full pyproject.toml configuration for Pixi, including project metadata, dependencies, tasks, system requirements, features, and environments.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/pyproject_toml.md#2025-04-23_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[project]\nname = \"my_project\"\nrequires-python = \">=3.9\"\ndependencies = [\n    \"numpy\",\n    \"pandas\",\n    \"matplotlib\",\n    \"ruff\",\n]\n\n[tool.pixi.workspace]\nchannels = [\"conda-forge\"]\nplatforms = [\"linux-64\", \"osx-arm64\", \"osx-64\", \"win-64\"]\n\n[tool.pixi.dependencies]\ncompilers = \"*\"\ncmake = \"*\"\n\n[tool.pixi.tasks]\nstart = \"python my_project/main.py\"\nlint = \"ruff lint\"\n\n[tool.pixi.system-requirements]\ncuda = \"11.0\"\n\n[tool.pixi.feature.test.dependencies]\npytest = \"*\"\n\n[tool.pixi.feature.test.tasks]\ntest = \"pytest\"\n\n[tool.pixi.environments]\ntest = [\"test\"]\n```\n\n----------------------------------------\n\nTITLE: Enabling Cross-Machine ML Features with pixi.toml (TOML)\nDESCRIPTION: This TOML config demonstrates an advanced setup enabling a single ML workspace to handle CPU, CUDA, or Apple MLX hardware, automatically adapting dependencies and tasks per environment. Features/platforms specify system requirements (e.g., CUDA version, macOS version), and channels are prioritized for hardware support. Key elements include feature-specific tasks and dependency overrides, making this ideal for ML workflows across diverse machines. Requires pixi to support all specified features and proper hardware for each environment.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/workspace/multi_environment.md#2025-04-23_snippet_16\n\nLANGUAGE: toml\nCODE:\n```\n[workspace]\nname = \"my-ml-workspace\"\ndescription = \"A workspace that does ML stuff\"\nauthors = [\"Your Name <your.name@gmail.com>\"]\nchannels = [\"conda-forge\", \"pytorch\"]\n# All platforms that are supported by the workspace as the features will take the intersection of the platforms defined there.\nplatforms = [\"win-64\", \"linux-64\", \"osx-64\", \"osx-arm64\"]\n\n[tasks]\ntrain-model = \"python train.py\"\nevaluate-model = \"python test.py\"\n\n[dependencies]\npython = \"3.11.*\"\npytorch = {version = \">=2.0.1\", channel = \"pytorch\"}\ntorchvision = {version = \">=0.15\", channel = \"pytorch\"}\npolars = \">=0.20,<0.21\"\nmatplotlib-base = \">=3.8.2,<3.9\"\nipykernel = \">=6.28.0,<6.29\"\n\n[feature.cuda]\nplatforms = [\"win-64\", \"linux-64\"]\nchannels = [\"nvidia\", {channel = \"pytorch\", priority = -1}]\nsystem-requirements = {cuda = \"12.1\"}\n\n[feature.cuda.tasks]\ntrain-model = \"python train.py --cuda\"\nevaluate-model = \"python test.py --cuda\"\n\n[feature.cuda.dependencies]\npytorch-cuda = {version = \"12.1.*\", channel = \"pytorch\"}\n\n[feature.mlx]\nplatforms = [\"osx-arm64\"]\n# MLX is only available on macOS >=13.5 (>14.0 is recommended)\nsystem-requirements = {macos = \"13.5\"}\n\n[feature.mlx.tasks]\ntrain-model = \"python train.py --mlx\"\nevaluate-model = \"python test.py --mlx\"\n\n[feature.mlx.dependencies]\nmlx = \">=0.16.0,<0.17.0\"\n\n[feature.cpu]\nplatforms = [\"win-64\", \"linux-64\", \"osx-64\", \"osx-arm64\"]\n\n[environments]\ncuda = [\"cuda\"]\nmlx = [\"mlx\"]\ndefault = [\"cpu\"]\n\n```\n\n----------------------------------------\n\nTITLE: Running Python Code with Pixi\nDESCRIPTION: This snippet demonstrates how to run Python code using Pixi, importing and executing a function from the project.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/tutorial.md#2025-04-23_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\npixi run python -c 'import pixi_py; pixi_py.say_hello()'\n```\n\n----------------------------------------\n\nTITLE: Testing C++ Package with Python\nDESCRIPTION: This bash command demonstrates how to test the built C++ package by importing it in Python and using its add function.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/build/advanced_cpp.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pixi run start\n3\n```\n\n----------------------------------------\n\nTITLE: Configuring Test and Production Environments with pixi.toml (TOML)\nDESCRIPTION: This TOML snippet describes how to structure a pixi workspace to separate test feature dependencies from production requirements. The file defines environment groups 'default' and 'prod', sharing a solve group to ensure consistent dependency resolution. Tasks for installing in editable or non-editable mode, as well as commands for serving with uvicorn, are included. Dependencies: pixi, Python (>=3.12), FastAPI stack, pytest for testing, and proper solve group configuration.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/workspace/multi_environment.md#2025-04-23_snippet_13\n\nLANGUAGE: toml\nCODE:\n```\n[workspace]\nname = \"my-app\"\n# ...\nchannels = [\"conda-forge\"]\nplatforms = [\"osx-arm64\", \"linux-64\"]\n\n[tasks]\npostinstall-e = \"pip install --no-build-isolation --no-deps --disable-pip-version-check -e .\"\npostinstall = \"pip install --no-build-isolation --no-deps --disable-pip-version-check .\"\ndev = \"uvicorn my_app.app:main --reload\"\nserve = \"uvicorn my_app.app:main\"\n\n[dependencies]\npython = \">=3.12\"\npip = \"*\"\npydantic = \">=2\"\nfastapi = \">=0.105.0\"\nsqlalchemy = \">=2,<3\"\nuvicorn = \"*\"\naiofiles = \"*\"\n\n[feature.test.dependencies]\npytest = \"*\"\npytest-md = \"*\"\npytest-asyncio = \"*\"\n[feature.test.tasks]\ntest = \"pytest --md=report.md\"\n\n[environments]\n# both default and prod will have exactly the same dependency versions when they share a dependency\ndefault = {features = [\"test\"], solve-group = \"prod-group\"}\nprod = {features = [], solve-group = \"prod-group\"}\n\n```\n\n----------------------------------------\n\nTITLE: Installing Pixi on Linux and macOS using curl\nDESCRIPTION: This command downloads and executes the Pixi installation script using curl. It installs the latest version of Pixi, extracts it, and adds the binary to the PATH.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/advanced/installation.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://pixi.sh/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure\nDESCRIPTION: Shows the directory structure created by the pixi init command, including the pyproject.toml file and src layout.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/tutorial.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npixi-py\n├── pyproject.toml\n└── src\n    └── pixi_py\n        └── __init__.py\n```\n\n----------------------------------------\n\nTITLE: Listing Package Installation Details with Pixi CLI - Shell\nDESCRIPTION: Lists installed package details using the Pixi CLI to confirm installation source and type. This uses the 'pixi list' command, specifying the package name (e.g., pygments) as a parameter. The output shows package version, build, size, and origin (PyPI or Conda). Pixi CLI must be installed in the system. Inputs are the package name, output is the installation details in a table format in the shell.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/tutorial.md#2025-04-23_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\npixi list pygments\n```\n\nLANGUAGE: shell\nCODE:\n```\npixi list pygments\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Environment Pixi Manifest in TOML\nDESCRIPTION: This snippet expands the basic Pixi manifest to include multiple environments for different Python versions. It defines features for Python 3.12 and 3.13, and creates corresponding environments.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/getting_started.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n--8<-- \"docs/source_files/pixi_workspaces/introduction/multi_env/pixi.toml\"\n```\n\n----------------------------------------\n\nTITLE: Configuring PyPI Dependencies in TOML\nDESCRIPTION: Extensive example of specifying PyPI dependencies in TOML, including version constraints, extras, git repositories, local paths, and direct URLs.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_manifest.md#2025-04-23_snippet_29\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\npython = \">=3.6\"\n\n[pypi-dependencies]\nfastapi = \"*\"\npre-commit = \"~=3.5.0\"\npandas = { version = \">=1.0.0\", extras = [\"dataframe\", \"sql\"]}\nflask = { git = \"ssh://git@github.com/pallets/flask\" }\nhttpx = { git = \"https://github.com/encode/httpx.git\", rev = \"c7c13f18a5af4c64c649881b2fe8dbd72a519c32\"}\nboltons = { git = \"https://github.com/mahmoud/boltons.git\", branch = \"master\" }\nboltons = { git = \"https://github.com/mahmoud/boltons.git\", tag = \"25.0.0\" }\nboltons = { git = \"https://github.com/mahmoud/boltons.git\", tag = \"25.0.0\", subdirectory = \"some-subdir\" }\nminimal-project = { path = \"./minimal-project\", editable = true}\nclick = { url = \"https://github.com/pallets/click/releases/download/8.1.7/click-8.1.7-py3-none-any.whl\" }\npytest = { git = \"https://github.com/pytest-dev/pytest.git\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Minimal Pixi Workspace Settings (TOML)\nDESCRIPTION: This snippet demonstrates the minimally required [workspace] table for a Pixi TOML manifest. It is the starting point for configuring a Pixi workspace, typically including essential details such as channels and platforms for dependency resolution. Requires Toml support and must reside in either pixi.toml or under tool.pixi in pyproject.toml.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_manifest.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[workspace]\nchannels = [\"conda-forge\"]\nplatforms = [\"linux-64\"]\n\n```\n\n----------------------------------------\n\nTITLE: Adding a PyPI Package\nDESCRIPTION: Command to add a package from PyPI instead of conda channels.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/tutorial.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\npixi add black --pypi\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Pixi Manifest in TOML\nDESCRIPTION: This snippet shows a basic Pixi manifest configuration with a single task and two dependencies. It defines channels, platforms, and a start task that runs a Python file.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/getting_started.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n--8<-- \"docs/source_files/pixi_workspaces/introduction/task_add/pixi.toml\"\n```\n\n----------------------------------------\n\nTITLE: Installing Pixi on Windows\nDESCRIPTION: PowerShell command to download and install Pixi package manager on Windows. Installs to LocalAppData/pixi/bin and updates PATH.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/index.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\npowershell -ExecutionPolicy ByPass -c \"irm -useb https://pixi.sh/install.ps1 | iex\"\n```\n\n----------------------------------------\n\nTITLE: Running Pixi Development Tasks with Shell Commands\nDESCRIPTION: Commands for building, linting, testing, and installing Pixi during development using Pixi's own task system.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npixi run build-debug # or `pixi run build-release` to build with optimizations\npixi run lint\npixi run test-all-fast\npixi run install # only works on unix systems as on windows you can't overwrite the binary while it's running\n```\n\n----------------------------------------\n\nTITLE: Defining Full Environment Modifications in TOML\nDESCRIPTION: Illustrates a comprehensive feature definition including dependencies, pypi-dependencies, platforms, activation scripts, system requirements, channels, tasks, and target-specific configurations.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/workspace/multi_environment.md#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[feature.cuda]\ndependencies = {cuda = \"x.y.z\", cudnn = \"12.0\"}\npypi-dependencies = {torch = \"1.9.0\"}\nplatforms = [\"linux-64\", \"osx-arm64\"]\nactivation = {scripts = [\"cuda_activation.sh\"]}\nsystem-requirements = {cuda = \"12\"}\nchannels = [\"nvidia\", {channel = \"pytorch\", priority = -1}]\ntasks = { warmup = \"python warmup.py\" }\ntarget.osx-arm64 = {dependencies = {mlx = \"x.y.z\"}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional Dependencies in pyproject.toml for Pixi\nDESCRIPTION: This example demonstrates how to define optional dependencies in pyproject.toml, which Pixi interprets as features. It shows the original pyproject.toml and how Pixi transforms it after initialization.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/pyproject_toml.md#2025-04-23_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[project]\nname = \"my_project\"\ndependencies = [\"package1\"]\n\n[project.optional-dependencies]\ntest = [\"pytest\"]\nall = [\"package2\",\"my_project[test]\"]\n```\n\nLANGUAGE: toml\nCODE:\n```\n[project]\nname = \"my_project\"\ndependencies = [\"package1\"]\n\n[project.optional-dependencies]\ntest = [\"pytest\"]\nall = [\"package2\",\"my_project[test]\"]\n\n[tool.pixi.workspace]\nchannels = [\"conda-forge\"]\nplatforms = [\"linux-64\"] # if executed on linux\n\n[tool.pixi.environments]\ndefault = {features = [], solve-group = \"default\"}\ntest = {features = [\"test\"], solve-group = \"default\"}\nall = {features = [\"all\", \"test\"], solve-group = \"default\"}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Pixi in GitHub Actions Workflow - YAML\nDESCRIPTION: This YAML snippet configures a GitHub Actions workflow to use Pixi by utilizing the official setup action and then running a command using the previously installed Pixi executable. It enables automatic dependency installation and environment caching within CI pipelines. The step 'uses' installs Pixi in the action environment, and the subsequent 'run' step executes 'cowpy' with the specified message. Prerequisites include a compatible runner and permissions to use GitHub Actions.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/README.md#2025-04-23_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\n- uses: prefix-dev/setup-pixi@v0.8.1\n- run: pixi exec cowpy \"Thanks for using pixi\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Pinning Strategy for Dependencies in Pixi (TOML)\nDESCRIPTION: This code configures the 'pinning-strategy' option in config.toml to control how dependency versions are pinned when adding packages via Pixi. Allowed values include 'no-pin', 'semver', 'exact-version', 'major', 'minor', and 'latest-up'. This affects requirements written to manifests but does not alter behavior for dependencies already present. Only requires a functioning Pixi installation.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_configuration.md#2025-04-23_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\npinning-strategy = \"semver\"\n\n```\n\n----------------------------------------\n\nTITLE: Defining Dependency Types in Pixi Manifest (TOML)\nDESCRIPTION: This snippet demonstrates how to specify different types of dependencies in a Pixi manifest file. It includes examples of build dependencies, host dependencies, and run dependencies for a C++ package.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/build/dependency_types.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n--8<-- \"docs/source_files/pixi_tomls/dependency_types.toml:dependencies\"\n```\n\n----------------------------------------\n\nTITLE: Running a Task with Pixi (Shell)\nDESCRIPTION: Executes an arbitrary command ('which python') within a Pixi-managed environment using 'pixi run'. Requires Pixi to be installed. Pixi wraps the command in a compatible shell across platforms, helping users locate the active Python interpreter.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/switching_from/poetry.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npixi run which python\n```\n\n----------------------------------------\n\nTITLE: Configuring Workspace Channels and Pinning Dependency Source (TOML)\nDESCRIPTION: Demonstrates best practice for explicitly prioritizing channels in dependency resolution and pinning a particular dependency to a specified channel, reducing compatibility issues. Part of [workspace] and [dependencies] tables. Useful for robust environment setup and when channel priority is required.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_manifest.md#2025-04-23_snippet_17\n\nLANGUAGE: toml\nCODE:\n```\n[workspace]\n# Putting conda-forge first solves most issues\nchannels = [\"conda-forge\", \"channel-name\"]\n[dependencies]\npackage = {version = \"*\", channel = \"channel-name\"}\n\n```\n\n----------------------------------------\n\nTITLE: Updating Pixi to the latest version\nDESCRIPTION: This command updates Pixi to the latest version using its built-in self-update feature.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/advanced/installation.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npixi self-update\n```\n\n----------------------------------------\n\nTITLE: Configuring Editable PyPI Dependencies\nDESCRIPTION: Configuration for installing the project package in editable mode, allowing changes to be reflected without reinstallation.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/tutorial.md#2025-04-23_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n# Editable installs\n[tool.pixi.pypi-dependencies]\npixi-py = { path = \".\", editable = true }\n```\n\n----------------------------------------\n\nTITLE: Defining a Nanobind Python Module Target in CMake\nDESCRIPTION: Utilizes the `nanobind_add_module` command, made available after finding the nanobind package, to define a build target for the Python extension module. The module is named after the CMake project (`${PROJECT_NAME}`, which is 'cpp_math') and is compiled from the `src/math.cpp` source file.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/source_files/pixi_workspaces/pixi_build/cpp/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nnanobind_add_module(${PROJECT_NAME} src/math.cpp) # (5)!\n```\n\n----------------------------------------\n\nTITLE: Defining Default Features in TOML\nDESCRIPTION: Demonstrates how to define default features in the pixi.toml file, including dependencies, pypi-dependencies, system-requirements, and activation scripts.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/workspace/multi_environment.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies] # short for [feature.default.dependencies]\npython = \"*\"\nnumpy = \"==2.3\"\n\n[pypi-dependencies] # short for [feature.default.pypi-dependencies]\npandas = \"*\"\n\n[system-requirements] # short for [feature.default.system-requirements]\nlibc = \"2.33\"\n\n[activation] # short for [feature.default.activation]\nscripts = [\"activate.sh\"]\n```\n\n----------------------------------------\n\nTITLE: Initializing Pixi Project\nDESCRIPTION: Shell command to initialize a Pixi project with a separate pixi.toml file instead of extending the pyproject.toml.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/build/python.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npixi init --format pixi\n```\n\n----------------------------------------\n\nTITLE: Installing a Global Package with Pixi\nDESCRIPTION: Command to install rattler-build tool globally using pixi, making it available system-wide.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/global_tools/introduction.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi global install rattler-build\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Tasks and Dependencies in TOML\nDESCRIPTION: Demonstrates how to set up platform-specific tasks, dependencies, and activation scripts using the target table in a Pixi manifest file.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_manifest.md#2025-04-23_snippet_32\n\nLANGUAGE: toml\nCODE:\n```\n[target.win-64.activation]\nscripts = [\"setup.bat\"]\n\n[target.win-64.dependencies]\nmsmpi = \"~=10.1.1\"\n\n[target.win-64.build-dependencies]\nvs2022_win-64 = \"19.36.32532\"\n\n[target.win-64.tasks]\ntmp = \"echo $TEMP\"\n\n[target.osx-64.dependencies]\nclang = \">=16.0.6\"\n```\n\n----------------------------------------\n\nTITLE: Configuring System Requirements and Dependencies in pixi.toml (TOML)\nDESCRIPTION: This TOML snippet demonstrates how to define system requirements (like CUDA version 12) and project dependencies (like any Python version) within a `pixi.toml` file. This configuration, highlighted in version 0.42.0, illustrates improved flexibility where the setup works even on non-CUDA machines if the packages don't directly depend on CUDA.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[system-requirements]\ncuda = \"12\"\n\n[dependencies]\npython = \"*\"\n```\n\n----------------------------------------\n\nTITLE: Initializing a Python Project with Pixi\nDESCRIPTION: Creates a new Python project directory with pyproject.toml configuration using pixi.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/tutorial.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npixi init pixi-py --format pyproject\n```\n\n----------------------------------------\n\nTITLE: Enforcing Pixi Version Requirement for Workspace Resolution (TOML)\nDESCRIPTION: Demonstrates use of the requires-pixi key under [workspace] to constrain the minimum or range of Pixi versions needed to resolve or build the workspace. The value is a valid Conda version spec string, such as '>=0.40' or '>=0.40,<1.0'. This ensures workspace compatibility and reproducibility, and prevents execution on unsupported Pixi versions.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_manifest.md#2025-04-23_snippet_18\n\nLANGUAGE: toml\nCODE:\n```\n[workspace]\nrequires-pixi = \">=0.40\"\n\n```\n\nLANGUAGE: toml\nCODE:\n```\n[workspace]\nrequires-pixi = \">=0.40,<1.0\"\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Dockerfile for Pixi-enabled Devcontainer\nDESCRIPTION: This Dockerfile sets up a Ubuntu-based devcontainer with Pixi pre-installed. It downloads a specific version of Pixi, makes it executable, sets up the environment for the 'vscode' user, and adds Pixi bash completion to the shell configuration.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/editor/vscode.md#2025-04-23_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM mcr.microsoft.com/devcontainers/base:jammy\n\nARG PIXI_VERSION=v0.46.0\n\nRUN curl -L -o /usr/local/bin/pixi -fsSL --compressed \"https://github.com/prefix-dev/pixi/releases/download/${PIXI_VERSION}/pixi-$(uname -m)-unknown-linux-musl\" \\\n    && chmod +x /usr/local/bin/pixi \\\n    && pixi info\n\n# set some user and workdir settings to work nicely with vscode\nUSER vscode\nWORKDIR /home/vscode\n\nRUN echo 'eval \"$(pixi completion -s bash)\"' >> /home/vscode/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Adding Rust Dependency with Pixi in Shell\nDESCRIPTION: Adds the Rust toolchain (including `rustc` and `cargo`) as a project dependency using the `pixi add` command. This command modifies the `[dependencies]` section of the `pixi.toml` file.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/tutorials/rust.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npixi add rust\n```\n\n----------------------------------------\n\nTITLE: Adding a Conda Package\nDESCRIPTION: Command to add the black package from conda-forge channel to the project.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/tutorial.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncd pixi-py # Move into the project directory\npixi add black\n```\n\n----------------------------------------\n\nTITLE: Using Pixi CLI for Environment Activation\nDESCRIPTION: Demonstrates various CLI commands for activating and using specific environments in Pixi, including running tasks and starting shells.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/workspace/multi_environment.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n➜ pixi run python\n# Runs python in the `default` environment\n\n➜ pixi run -e test pytest\n➜ pixi run --environment test pytest\n# Runs `pytest` in the `test` environment\n\n➜ pixi shell -e cuda\npixi shell --environment cuda\n# Starts a shell in the `cuda` environment\n\n➜ pixi run -e test any_command\n# Runs any_command in the `test` environment which doesn't require to be predefined as a task.\n```\n\n----------------------------------------\n\nTITLE: Running Test and Development Commands with pixi (Shell)\nDESCRIPTION: These shell snippets show how pixi can be used to invoke test and development tasks based on the environment. Dependencies: pixi CLI must be installed with the environments defined in pixi.toml. The first command runs installation (editable mode) followed by tests for CI, the second runs installation and launches the development server for local development.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/workspace/multi_environment.md#2025-04-23_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\npixi run postinstall-e && pixi run test\n```\n\nLANGUAGE: shell\nCODE:\n```\npixi run postinstall-e && pixi run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Matrix for pixi Environments (YAML)\nDESCRIPTION: This YAML snippet defines a GitHub Actions workflow for testing multiple pixi environments in parallel using a matrix job. It leverages the prefix-dev/setup-pixi action to set up desired environments and then runs test tasks in each matrix entry. Dependencies: GitHub Actions, prefix-dev/setup-pixi, environments as defined in pixi.toml (e.g., py311, py312). Ensures parallel and reproducible environment-specific testing in CI.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/workspace/multi_environment.md#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  tests-per-env:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        environment: [py311, py312]\n    steps:\n    - uses: actions/checkout@v4\n      - uses: prefix-dev/setup-pixi@v0.5.1\n        with:\n          environments: ${{ matrix.environment }}\n      - name: Run tasks\n        run: |\n          pixi run --environment ${{ matrix.environment }} test\n  tests-with-multiple-envs:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - uses: prefix-dev/setup-pixi@v0.5.1\n      with:\n       environments: pl017 pl018\n    - run: |\n        pixi run -e pl017 test\n        pixi run -e pl018 test\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Pixi Project in Shell\nDESCRIPTION: Creates a new Pixi project directory named 'my_rust_project' and changes the current directory into it. This command requires the `pixi` executable to be installed and available in the system's PATH.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/tutorials/rust.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npixi init my_rust_project\ncd my_rust_project\n```\n\n----------------------------------------\n\nTITLE: Configuring Clean Environment for Pixi Tasks\nDESCRIPTION: Demonstrates how to set up a 'clean' environment for a Pixi task, which includes only minimal required environment variables. This can be configured in the pixi.toml file or via command-line flag.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/workspace/advanced_tasks.md#2025-04-23_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[tasks]\nclean_command = { cmd = \"python run_in_isolated_env.py\", clean-env = true}\n```\n\n----------------------------------------\n\nTITLE: Specifying Different Dependencies per Feature in TOML\nDESCRIPTION: Shows how to define different dependencies for various features like py39, py310, and test in the pixi.toml file.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/workspace/multi_environment.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[feature.py39.dependencies]\npython = \"~=3.9.0\"\n[feature.py310.dependencies]\npython = \"~=3.10.0\"\n[feature.test.dependencies]\npytest = \"*\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Pixi.toml for Rattler-Build Backend\nDESCRIPTION: This snippet shows the pixi.toml configuration file, highlighting the use of the pixi-build-rattler-build backend instead of pixi-build-cmake.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/build/advanced_cpp.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n--8<-- \"docs/source_files/pixi_workspaces/pixi_build/advanced_cpp/pixi.toml\"\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Environments with Pixi\nDESCRIPTION: This snippet shows how to create multiple environments in Pixi, including a default environment and a test environment with specific features and solve groups.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/tutorial.md#2025-04-23_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\npixi project environment add default --solve-group default --force\npixi project environment add test --feature test --solve-group default\n```\n\nLANGUAGE: toml\nCODE:\n```\n[tool.pixi.environments]\ndefault = { solve-group = \"default\" }\ntest = { features = [\"test\"], solve-group = \"default\" }\n```\n\n----------------------------------------\n\nTITLE: Configuring Devcontainer JSON for Pixi Integration\nDESCRIPTION: This devcontainer.json configuration sets up a development container for a Pixi project. It references the Dockerfile, configures VSCode extensions, adds Docker-in-Docker functionality, and mounts the Pixi directory as a volume to avoid issues with case-insensitive filesystems. It also runs a post-creation command to install dependencies with Pixi.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/editor/vscode.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"my-workspace\",\n    \"build\": {\n      \"dockerfile\": \"Dockerfile\",\n      \"context\": \"..\",\n    },\n    \"customizations\": {\n      \"vscode\": {\n        \"settings\": {},\n        \"extensions\": [\"ms-python.python\", \"charliermarsh.ruff\", \"GitHub.copilot\"]\n      }\n    },\n    \"features\": {\n      \"ghcr.io/devcontainers/environments/docker-in-docker:2\": {}\n    },\n    \"mounts\": [\"source=${localWorkspaceFolderBasename}-pixi,target=${containerWorkspaceFolder}/.pixi,type=volume\"],\n    \"postCreateCommand\": \"sudo chown vscode .pixi && pixi install\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Channels in Pixi (TOML)\nDESCRIPTION: This example demonstrates how to specify the 'default-channels' section in a Pixi configuration file (config.toml), which sets the Conda channels to be used when initializing new projects or installing global packages before a specific project manifest is configured. This setting can influence the initial software sources but does not affect already-initialized projects, which use local manifest channels. Requires only a compatible Pixi installation.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[default-channels]\nchannels = [\n    \"conda-forge\"\n]\n\n```\n\n----------------------------------------\n\nTITLE: Creating a New Environment with Pixi (Shell)\nDESCRIPTION: Illustrates how to create a new project workspace using Pixi, initializing the environment and supporting files. This command requires Pixi to be installed. The parameter 'myenv' sets the environment name and directory, and Pixi scaffolds a compatible environment structure.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/switching_from/poetry.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npixi init myenv\n```\n\n----------------------------------------\n\nTITLE: Adding a PyPI Dependency with Pixi\nDESCRIPTION: This snippet shows how to add the 'rich' dependency from PyPI using Pixi.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/tutorial.md#2025-04-23_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\npixi add --pypi rich\n```\n\n----------------------------------------\n\nTITLE: Creating a .envrc Configuration File for Pixi Projects\nDESCRIPTION: Configuration for a .envrc file that watches for changes to pixi.lock and evaluates the pixi shell-hook to activate the environment automatically.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/third_party/direnv.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwatch_file pixi.lock # (1)!\neval \"$(pixi shell-hook)\" # (2)!\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Package Metadata in pyproject.toml\nDESCRIPTION: TOML configuration defining the Python package metadata, dependencies, and build instructions using the hatchling backend.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/build/python.md#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n--8<-- \"docs/source_files/pixi_workspaces/pixi_build/python/pyproject.toml\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Python Nanobind Module - CMake\nDESCRIPTION: This snippet illustrates the full configuration for building a nanobind-powered C++ extension for Python via CMake. Required dependencies include Python (minimum version 3.8, with Interpreter and Development.Module components) and the nanobind package, which is located using find_package and a dynamically discovered cmake directory. execute_process calls obtain critical paths such as nanobind's CMake directory and Python's installed site-packages. The nanobind_add_module macro compiles the source file into a Python-importable module, and install rules place all artifacts in the appropriate directories. Paths such as ${Python_EXECUTABLE}, ${PYTHON_SITE_PACKAGES}, and ${CMAKE_INSTALL_LIBDIR} must be resolvable in the user's CMake environment.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/source_files/pixi_workspaces/pixi_build/workspace_variants/packages/cpp_math/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20...3.27)\nproject(cpp_math)\n\nfind_package(Python 3.8 COMPONENTS Interpreter Development.Module REQUIRED) # (1)!\n\nexecute_process(\n  COMMAND \"${Python_EXECUTABLE}\" -m nanobind --cmake_dir\n  OUTPUT_STRIP_TRAILING_WHITESPACE OUTPUT_VARIABLE nanobind_ROOT\n) # (2)!\n\nexecute_process(\n    COMMAND ${Python_EXECUTABLE} -c \"import sysconfig; print(sysconfig.get_path('purelib'))\"\n    OUTPUT_VARIABLE PYTHON_SITE_PACKAGES\n    OUTPUT_STRIP_TRAILING_WHITESPACE\n) # (3)!\n\nfind_package(nanobind CONFIG REQUIRED) # (4)!\n\nnanobind_add_module(${PROJECT_NAME} src/math.cpp) # (5)!\n\ninstall( # (6)!\n    TARGETS ${PROJECT_NAME}\n    EXPORT ${PROJECT_NAME}Targets\n    LIBRARY DESTINATION ${PYTHON_SITE_PACKAGES}\n    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n    RUNTIME DESTINATION ${BINDIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Environments from Features in TOML\nDESCRIPTION: Shows how to create different environments by combining features in the pixi.toml file, including implicit default feature inclusion.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/workspace/multi_environment.md#2025-04-23_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[environments]\ndefault = [\"py39\"] # implicit: default = [\"py39\", \"default\"]\npy310 = [\"py310\"] # implicit: py310 = [\"py310\", \"default\"]\ntest = [\"test\"] # implicit: test = [\"test\", \"default\"]\ntest39 = [\"test\", \"py39\"] # implicit: test39 = [\"test\", \"py39\", \"default\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-Version Polars Test Environments with pixi.toml (TOML)\nDESCRIPTION: This TOML snippet configures a pixi workspace called 'polarify' to support flexible testing across multiple Python and Polars versions. It defines dependency groups for each supported Python/Polars pair and combines them into named environments. This allows developers or CI pipelines to easily select between combinations, supporting both local and automated testing scenarios. Requires pixi to interpret the TOML file, and CI to select desired environments.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/workspace/multi_environment.md#2025-04-23_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\n[workspace]\nname = \"polarify\"\n# ...\nchannels = [\"conda-forge\"]\nplatforms = [\"linux-64\", \"osx-arm64\", \"osx-64\", \"win-64\"]\n\n[tasks]\npostinstall = \"pip install --no-build-isolation --no-deps --disable-pip-version-check -e .\"\n\n[dependencies]\npython = \">=3.9\"\npip = \"*\"\npolars = \">=0.14.24,<0.21\"\n\n[feature.py39.dependencies]\npython = \"3.9.*\"\n[feature.py310.dependencies]\npython = \"3.10.*\"\n[feature.py311.dependencies]\npython = \"3.11.*\"\n[feature.py312.dependencies]\npython = \"3.12.*\"\n[feature.pl017.dependencies]\npolars = \"0.17.*\"\n[feature.pl018.dependencies]\npolars = \"0.18.*\"\n[feature.pl019.dependencies]\npolars = \"0.19.*\"\n[feature.pl020.dependencies]\npolars = \"0.20.*\"\n\n[feature.test.dependencies]\npytest = \"*\"\npytest-md = \"*\"\npytest-emoji = \"*\"\nhypothesis = \"*\"\n[feature.test.tasks]\ntest = \"pytest\"\n\n[feature.lint.dependencies]\npre-commit = \"*\"\n[feature.lint.tasks]\nlint = \"pre-commit run --all\"\n\n[environments]\npl017 = [\"pl017\", \"py39\", \"test\"]\npl018 = [\"pl018\", \"py39\", \"test\"]\npl019 = [\"pl019\", \"py39\", \"test\"]\npl020 = [\"pl020\", \"py39\", \"test\"]\npy39 = [\"py39\", \"test\"]\npy310 = [\"py310\", \"test\"]\npy311 = [\"py311\", \"test\"]\npy312 = [\"py312\", \"test\"]\n```\n\n----------------------------------------\n\nTITLE: CMake Configuration for Python Bindings\nDESCRIPTION: CMake configuration file that sets up the build environment for nanobind Python bindings, including Python detection and installation paths.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/build/cpp.md#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n--8<-- \"docs/source_files/pixi_workspaces/pixi_build/cpp/CMakeLists.txt\"\n```\n\n----------------------------------------\n\nTITLE: Example of Uploading a Conda Package with Pixi\nDESCRIPTION: Shows a practical example of using the 'pixi upload' command to upload a conda package to a specific channel on prefix.dev.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/upload.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npixi upload https://prefix.dev/api/v1/upload/my_channel my_package.conda\n```\n\n----------------------------------------\n\nTITLE: Channel Priority Configuration Example in TOML\nDESCRIPTION: Example showing channel priority defined by order in the channels array. The first channel (conda-forge) has the highest priority, followed by my-channel and your-channel.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/advanced/channel_logic.md#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[workspace]\nchannels = [\"conda-forge\", \"my-channel\", \"your-channel\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimal PyTorch Installation with CUDA via conda-forge in pyproject.toml\nDESCRIPTION: A bare minimum configuration for installing PyTorch from the conda-forge channel with CUDA support using pyproject.toml. This snippet shows how to configure PyTorch with CUDA in a Python project.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/pytorch.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n--8<-- \"docs/source_files/pyproject_tomls/pytorch-conda-forge.toml:minimal\"\n```\n\n----------------------------------------\n\nTITLE: Enabling or Disabling Post-Link Script Execution - TOML\nDESCRIPTION: Provides a TOML configuration snippet to toggle execution of package post-link and pre-unlink scripts in Pixi. Default is 'false' for security, but can be set to 'insecure' via TOML or shell commands to opt-in. Inputs: config value for 'run-post-link-scripts'; output: changes script execution policy for installed packages. Future plans include a possible sandbox mode.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_configuration.md#2025-04-23_snippet_12\n\nLANGUAGE: toml\nCODE:\n```\n--8<-- \\\"docs/source_files/pixi_config_tomls/main_config.toml:run-post-link-scripts\\\"\n```\n\n----------------------------------------\n\nTITLE: Creating CPU and GPU PyTorch Environments in pixi.toml\nDESCRIPTION: Configuration for setting up separate CPU and GPU environments for PyTorch from conda-forge using pixi.toml. This approach allows switching between environments based on hardware availability.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/pytorch.md#2025-04-23_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n--8<-- \"docs/source_files/pixi_tomls/pytorch-conda-forge-envs.toml:use-envs\"\n```\n\n----------------------------------------\n\nTITLE: Uninstalling a Conda Package with Pixi (Shell)\nDESCRIPTION: Removes a conda-based package (e.g., 'numpy') from a Pixi environment. The operation updates project configuration and the lock file. Pixi must be available.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/switching_from/poetry.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\npixi remove numpy\n```\n\n----------------------------------------\n\nTITLE: Using pixi init Command in Shell\nDESCRIPTION: Demonstrates the basic usage syntax for the 'pixi init' command. It shows how to invoke the command with optional arguments and options.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/init.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npixi init [OPTIONS] [PATH]\n```\n\n----------------------------------------\n\nTITLE: Configuring Pixi Workspace and Package in pixi.toml\nDESCRIPTION: TOML configuration for Pixi, defining workspace settings, dependencies, tasks, and package information for building a Python package with Pixi.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/build/python.md#2025-04-23_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n--8<-- \"docs/source_files/pixi_workspaces/pixi_build/python/pixi.toml\"\n```\n\n----------------------------------------\n\nTITLE: Default pyproject.toml Configuration\nDESCRIPTION: The initial pyproject.toml file generated by pixi, containing project metadata, build system configuration, and pixi-specific settings.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/tutorial.md#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[project]\ndependencies = []\nname = \"pixi-py\"\nrequires-python = \">= 3.11\"\nversion = \"0.1.0\"\n\n[build-system]\nbuild-backend = \"hatchling.build\"\nrequires = [\"hatchling\"]\n\n[tool.pixi.workspace]\nchannels = [\"conda-forge\"]\nplatforms = [\"osx-arm64\"]\n\n[tool.pixi.pypi-dependencies]\npixi_py = { path = \".\", editable = true }\n\n[tool.pixi.tasks]\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building an SDL2 Example with CMake\nDESCRIPTION: This CMake script sets up a C++ project named `sdl_example`. It requires CMake version 3.7 or higher and finds the SDL2 library package using `find_package`. An executable target is created from `src/main.cc` and its output directory is set to `${CMAKE_BINARY_DIR}/bin`. A conditional check for the MSVC compiler sets the `WIN32_EXECUTABLE` property if necessary. Finally, it links the executable target (`${PROJECT_NAME}`) against the imported SDL2 targets `SDL2::SDL2` and `SDL2::SDL2main`. Dependencies include CMake, a C++ compiler, and the SDL2 development libraries.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/cpp-sdl/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.7)\nproject(sdl_example)\n\nfind_package(SDL2 REQUIRED)\n\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/bin\")\n\nadd_executable(${PROJECT_NAME} src/main.cc)\n\nif (MSVC)\n    set_target_properties(${PROJECT_NAME} PROPERTIES WIN32_EXECUTABLE TRUE)\nendif()\n\ntarget_link_libraries(\n    ${PROJECT_NAME} PRIVATE\n    SDL2::SDL2\n    SDL2::SDL2main\n)\n```\n\n----------------------------------------\n\nTITLE: Running a Custom ROS 2 Python Node\nDESCRIPTION: Executes the custom Python node `my_node` from the `my_package` package using `pixi run`. Because the activation scripts were configured, Pixi ensures the environment is set up correctly for ROS 2 to find and run the node.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/tutorials/ros2.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\npixi run ros2 run my_package my_node\n```\n\n----------------------------------------\n\nTITLE: PyTorch with NVIDIA Configuration Example in TOML\nDESCRIPTION: Complex real-world configuration showing how to use PyTorch with NVIDIA drivers while also utilizing the conda-forge channel. Demonstrates channel-specific dependencies and careful ordering of channels.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/advanced/channel_logic.md#2025-04-23_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[workspace]\nchannels = [\"nvidia/label/cuda-11.8.0\", \"nvidia\", \"conda-forge\", \"pytorch\"]\nplatforms = [\"linux-64\"]\n\n[dependencies]\ncuda = {version = \"*\", channel=\"nvidia/label/cuda-11.8.0\"}\npytorch = {version = \"2.0.1.*\", channel=\"pytorch\"}\ntorchvision = {version = \"0.15.2.*\", channel=\"pytorch\"}\npytorch-cuda = {version = \"11.8.*\", channel=\"pytorch\"}\npython = \"3.10.*\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Conda Dependencies in TOML\nDESCRIPTION: Demonstrates how to specify conda package dependencies in the TOML configuration file. Includes examples of version constraints and channel-specific packages.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_manifest.md#2025-04-23_snippet_26\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\npython = \">3.9,<=3.11\"\nrust = \"==1.72\"\npytorch-cpu = { version = \"~=1.1\", channel = \"pytorch\" }\n```\n\n----------------------------------------\n\nTITLE: Setting up GitHub Actions Workflow for Pixi Lockfile Updates\nDESCRIPTION: A GitHub Actions workflow configuration for automatically updating pixi lockfiles. The workflow runs on a schedule and creates a pull request with the lockfile changes. It uses the pixi-diff-to-markdown tool to generate a summary of the changes.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/ci/updates_github_actions.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Update lockfiles\n\npermissions: # (1)!\n  contents: write\n  pull-requests: write\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: 0 5 1 * * # (2)!\n\njobs:\n  pixi-update:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Set up pixi\n        uses: prefix-dev/setup-pixi@v0.8.3\n        with:\n          run-install: false\n      - name: Update lockfiles\n        run: |\n          set -o pipefail\n          pixi update --json | pixi exec pixi-diff-to-markdown >> diff.md\n      - name: Create pull request\n        uses: peter-evans/create-pull-request@v7\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          commit-message: Update pixi lockfile\n          title: Update pixi lockfile\n          body-path: diff.md\n          branch: update-pixi\n          base: main\n          labels: pixi\n          delete-branch: true\n          add-paths: pixi.lock\n```\n\n----------------------------------------\n\nTITLE: Specifying CUDA Version for PyTorch Installation in pyproject.toml\nDESCRIPTION: Configuration for installing PyTorch with a specific CUDA version from conda-forge using pyproject.toml. This ensures the correct version of the cudatoolkit package is installed for compatibility.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/pytorch.md#2025-04-23_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n--8<-- \"docs/source_files/pyproject_tomls/pytorch-conda-forge.toml:cuda-version\"\n```\n\n----------------------------------------\n\nTITLE: Documenting the Project Version (TOML)\nDESCRIPTION: This snippet shows how to set the semantic version of the workspace using the version key. The version must comply with Conda Version Spec, detailing major, minor, and patch if desired. Useful for versioned releases, automation, or CI tools.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_manifest.md#2025-04-23_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\nversion = \"1.2.3\"\n\n```\n\n----------------------------------------\n\nTITLE: Defining Global Environments in TOML for Pixi\nDESCRIPTION: This TOML snippet shows the structure of a global manifest file for Pixi. It defines multiple environments with their channels, dependencies, and exposed executables.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/global_tools/manifest.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nversion = 1\n\n[envs.rattler-build]\nchannels = [\"conda-forge\"]\ndependencies = { rattler-build = \"*\" }\nexposed = { rattler-build = \"rattler-build\" }\n\n[envs.ipython]\nchannels = [\"conda-forge\"]\ndependencies = { ipython = \"*\", numpy = \"*\", matplotlib = \"*\" }\nexposed = { ipython = \"ipython\", ipython3 = \"ipython3\" }\n\n[envs.python]\nchannels = [\"conda-forge\"]\ndependencies = { python = \"3.12.*\" }\nexposed = { py3 = \"python\" }\n```\n\n----------------------------------------\n\nTITLE: Using pixi-pack with Pixi exec\nDESCRIPTION: Commands to run pixi-pack in a temporary environment using Pixi exec for packing and unpacking operations.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/deployment/pixi_pack.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npixi exec pixi-pack pack\npixi exec pixi-pack unpack environment.tar\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Pixi Environments Using rm (Shell)\nDESCRIPTION: These shell commands demonstrate how to clean up Pixi environments by removing the entire `.pixi/envs` directory or individual environment directories like `default` or `cuda`. Pixi will automatically recreate these environments when needed based on the `pixi.toml` and `pixi.lock` files.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/workspace/environment.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# either:\nrm -rf .pixi/envs\n\n# or per environment:\nrm -rf .pixi/envs/default\nrm -rf .pixi/envs/cuda\n```\n\n----------------------------------------\n\nTITLE: Manually Installing Dependencies\nDESCRIPTION: Command to explicitly install all dependencies defined in the project configuration.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/tutorial.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\npixi install\n```\n\n----------------------------------------\n\nTITLE: Running a ROS 2 Node within a Pixi Shell\nDESCRIPTION: Demonstrates an alternative way to run ROS 2 nodes. First, it starts an interactive shell (`pixi shell`) with the Pixi environment activated. Then, within that activated shell, it directly runs the `turtlesim_node` using the standard `ros2 run` command.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/tutorials/ros2.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npixi shell\nros2 run turtlesim turtlesim_node\n```\n\n----------------------------------------\n\nTITLE: Displaying Inverted Dependency Tree for a Package in Pixi - Shell\nDESCRIPTION: Shows how to display the inverted dependency tree for a specified package (here 'pygments') using Pixi CLI. The 'pixi tree --invert' command highlights which higher-level packages depend on the specified package. Pixi CLI must be available. The main parameter is the target package name and the invert flag.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/tutorial.md#2025-04-23_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\npixi tree --invert pygments\n```\n\n----------------------------------------\n\nTITLE: Importing Conda Environment to Pixi Workspace - Shell\nDESCRIPTION: This snippet shows how to initialize a Pixi workspace by importing dependencies from a Conda 'environment.yml' file. It requires a valid 'environment.yml' and Pixi installed. The command creates a new workspace, sets up a manifest, and applies the imported dependency set. This is used for transitioning existing Conda environments into the Pixi workflow.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/switching_from/conda.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n~~~shell\\npixi init --import environment.yml\\n~~~\n```\n\n----------------------------------------\n\nTITLE: Configuring Solve Groups in Pixi Environments (TOML)\nDESCRIPTION: Example configuration for using solve-groups in Pixi environments to ensure dependency alignment across different environments without simultaneous installation. This is useful for managing identical dependencies in test and production environments.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/CHANGELOG.md#2025-04-23_snippet_17\n\nLANGUAGE: toml\nCODE:\n```\n[environments]\ntest = { features = [\"prod\", \"test\"], solve-groups = [\"group1\"] }\nprod = { features = [\"prod\"], solve-groups = [\"group1\"] }\n```\n\n----------------------------------------\n\nTITLE: Adjusting Concurrency Settings - TOML and Shell\nDESCRIPTION: Illustrates how to adjust concurrency limits in Pixi with configuration in TOML, and how to set these values via the Pixi CLI in the shell. Parameters control the number of concurrent solves and downloads. Required: Pixi CLI and its config subsystem. Inputs are TOML keys or CLI commands; outputs affect Pixi runtime concurrency.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_configuration.md#2025-04-23_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\n--8<-- \\\"docs/source_files/pixi_config_tomls/main_config.toml:concurrency\\\"\n```\n\nLANGUAGE: shell\nCODE:\n```\npixi config set concurrency.solves 1\npixi config set concurrency.downloads 12\n```\n\n----------------------------------------\n\nTITLE: Creating CPU and GPU PyTorch Environments in pyproject.toml\nDESCRIPTION: Configuration for setting up separate CPU and GPU environments for PyTorch from conda-forge using pyproject.toml. Enables development on both CUDA-enabled and CPU-only machines.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/pytorch.md#2025-04-23_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n--8<-- \"docs/source_files/pyproject_tomls/pytorch-conda-forge-envs.toml:use-envs\"\n```\n\n----------------------------------------\n\nTITLE: Running Pixi Info Command Output Example\nDESCRIPTION: Example output of running the `pixi info` command in a pixi repository, showing system information, workspace details, and environment configuration. The output includes version information, platform details, virtual packages, cache locations, and environment-specific settings.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/advanced/explain_info_command.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n➜ pixi info\n      Pixi version: 0.13.0\n          Platform: linux-64\n  Virtual packages: __unix=0=0\n                  : __linux=6.5.12=0\n                  : __glibc=2.36=0\n                  : __cuda=12.3=0\n                  : __archspec=1=x86_64\n         Cache dir: /home/user/.cache/rattler/cache\n      Auth storage: /home/user/.rattler/credentials.json\n\nWorkspace\n------------\n           Version: 0.13.0\n     Manifest file: /home/user/development/pixi/pixi.toml\n      Last updated: 25-01-2024 10:29:08\n\nEnvironments\n------------\ndefault\n          Features: default\n          Channels: conda-forge\n  Dependency count: 10\n      Dependencies: pre-commit, rust, openssl, pkg-config, git, mkdocs, mkdocs-material, pillow, cairosvg, compilers\n  Target platforms: linux-64, osx-arm64, win-64, osx-64\n             Tasks: docs, test-all, test, build, lint, install, build-docs\n```\n\n----------------------------------------\n\nTITLE: Forcing Specific Channel Priority in TOML Configuration\nDESCRIPTION: Example of explicitly setting channel priorities using the 'priority' key in multi-environment setups. Demonstrates how to control channel ordering for different feature environments with different priority needs.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/advanced/channel_logic.md#2025-04-23_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[workspace]\nname = \"test_channel_priority\"\nplatforms = [\"linux-64\", \"osx-64\", \"win-64\", \"osx-arm64\"]\nchannels = [\"conda-forge\"]\n\n[feature.a]\nchannels = [\"nvidia\"]\n\n[feature.b]\nchannels = [ \"pytorch\", {channel = \"nvidia\", priority = 1}]\n\n[feature.c]\nchannels = [ \"pytorch\", {channel = \"nvidia\", priority = -1}]\n\n[environments]\na = [\"a\"]\nb = [\"b\"]\nc = [\"c\"]\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of pixi exec Command\nDESCRIPTION: Shows the basic syntax for using the pixi exec command, which runs a specified command in a temporary environment.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/exec.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi exec [OPTIONS] [COMMAND]...\n```\n\n----------------------------------------\n\nTITLE: Installing Packages for a Different Platform with Pixi\nDESCRIPTION: This example shows how to install packages for a different platform using the --platform flag with the pixi global install command. It's useful for installing packages for a platform different from the current system, such as osx-64 packages on osx-arm64.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/global_tools/examples.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npixi global install --platform osx-64 python\n```\n\nLANGUAGE: toml\nCODE:\n```\n[envs.python]\nchannels = [\"conda-forge\"]\nplatforms = [\"osx-64\"]\ndependencies = { python = \"*\" }\n# ...\n```\n\n----------------------------------------\n\nTITLE: Installing Multiple Packages in a Custom Environment\nDESCRIPTION: This shell command demonstrates how to install multiple packages in a custom environment using Pixi CLI.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/global_tools/manifest.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npixi global install --environment my-env git vim python\n```\n\n----------------------------------------\n\nTITLE: Initializing Pixi Workspace\nDESCRIPTION: Commands to create and navigate to a new Pixi workspace directory.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/index.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npixi init hello-world\ncd hello-world\n```\n\n----------------------------------------\n\nTITLE: Authentication JSON File Format\nDESCRIPTION: Shows the format for the JSON credentials file that can be used as a fallback storage or with RATTLER_AUTH_FILE. Includes examples for different authentication types.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/deployment/authentication.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"*.prefix.dev\": {\n        \"BearerToken\": \"your_token\"\n    },\n    \"otherhost.com\": {\n        \"BasicHTTP\": {\n            \"username\": \"your_username\",\n            \"password\": \"your_password\"\n        }\n    },\n    \"conda.anaconda.org\": {\n        \"CondaToken\": \"your_token\"\n    },\n    \"s3://my-bucket\": {\n        \"S3Credentials\": {\n            \"access_key_id\": \"my-access-key-id\",\n            \"secret_access_key\": \"my-secret-access-key\",\n            \"session_token\": null\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing a Conda Package with Pixi (Shell)\nDESCRIPTION: Shows the command to install the conda variant of a package (e.g., 'numpy') in a Pixi environment. Pixi manages dependencies via conda by default. After execution, the conda package is available in the workspace. Pixi must be installed.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/switching_from/poetry.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npixi add numpy\n```\n\n----------------------------------------\n\nTITLE: Updating Python Package to Use C++ Function\nDESCRIPTION: Modifies the 'python_rich' package to use the 'add' function from 'cpp_math' to correct age calculations.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/build/workspace.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/source_files/pixi_workspaces/pixi_build/workspace/src/python_rich/__init__.py\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Cargo Project within Pixi Environment in Shell\nDESCRIPTION: Uses `pixi run` to execute the `cargo init` command within the Pixi-managed environment. This ensures `cargo` uses the Rust toolchain specified in `pixi.toml` and creates a standard Rust project structure (`src/main.rs`, `Cargo.toml`) inside the Pixi project directory.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/tutorials/rust.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npixi run cargo init\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Platform Support in Pixi TOML\nDESCRIPTION: Example pixi.toml configuration demonstrating platform-specific dependencies and activation scripts. It shows how to specify supported platforms, override dependencies for specific targets, and define platform-specific activation scripts.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/workspace/multi_platform_configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[workspace]\n# Default workspace info....\n# A list of platforms you are supporting with your package.\nplatforms = [\"win-64\", \"linux-64\", \"osx-64\", \"osx-arm64\"]\n\n[dependencies]\npython = \">=3.8\"\n\n[target.win-64.dependencies]\n# Overwrite the needed python version only on win-64\npython = \"3.7\"\n\n\n[activation]\nscripts = [\"setup.sh\"]\n\n[target.win-64.activation]\n# Overwrite activation scripts only for windows\nscripts = [\"setup.bat\"]\n```\n\n----------------------------------------\n\nTITLE: S3 Authentication for Pixi\nDESCRIPTION: GitHub Action configuration for authenticating with an S3 bucket using access key ID, secret access key, and optional session token stored in GitHub secrets.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/ci/github_actions.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- uses: prefix-dev/setup-pixi@v0.8.3\n  with:\n    auth-host: s3://my-s3-bucket\n    auth-s3-access-key-id: ${{ secrets.ACCESS_KEY_ID }}\n    auth-s3-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}\n    auth-s3-session-token: ${{ secrets.SESSION_TOKEN }} # (1)!\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies for C++ ROS 2 Nodes\nDESCRIPTION: Adds necessary dependencies for building C++ ROS 2 packages using `ament_cmake`. This includes the `ros-humble-ament-cmake-auto` package, system compilers (`compilers`), build tools (`pkg-config`, `cmake`, `ninja`).\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/tutorials/ros2.md#2025-04-23_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\npixi add ros-humble-ament-cmake-auto compilers pkg-config cmake ninja\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional pixi-pycharm Dependency using Multiple Environments\nDESCRIPTION: TOML configuration for pixi.toml that sets up pixi-pycharm as an optional dependency in development environments while keeping it out of production environments using multiple environment features.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/editor/jetbrains.md#2025-04-23_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[workspace]\nname = \"multi-env\"\nversion = \"0.1.0\"\nrequires-python = \">=3.12\"\ndependencies = [\"numpy\"]\n\n[tool.pixi.workspace]\nchannels = [\"conda-forge\"]\nplatforms = [\"linux-64\"]\n\n[tool.pixi.feature.lint.dependencies]\nruff =  \"*\"\n\n[tool.pixi.feature.dev.dependencies]\npixi-pycharm = \"*\"\n\n[tool.pixi.environments]\n# The production environment is the default feature set.\n# Adding a solve group to make sure the same versions are used in the `default` and `prod` environments.\nprod = { solve-group = \"main\" }\n\n# Setup the default environment to include the dev features.\n# By using `default` instead of `dev` you'll not have to specify the `--environment` flag when running `pixi run`.\ndefault = { features = [\"dev\"], solve-group = \"main\" }\n\n# The lint environment doesn't need the default feature set but only the `lint` feature\n# and thus can also be excluded from the solve group.\nlint = { features = [\"lint\"], no-default-feature = true }\n```\n\n----------------------------------------\n\nTITLE: Building and Running Production with Docker and pixi (Dockerfile)\nDESCRIPTION: This Dockerfile snippet illustrates how to build and run a production-grade application image using pixi as the environment manager. It copies source files, installs dependencies into a production environment, exposes the service port, and sets the default command to serve the app. Prerequisite: the specified pixi image must exist, and all code must be compatible with the 'prod' environment as defined in pixi.toml.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/workspace/multi_environment.md#2025-04-23_snippet_15\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM ghcr.io/prefix-dev/pixi:latest # this doesn\\'t exist yet\nWORKDIR /app\nCOPY . .\nRUN pixi run --environment prod postinstall\nEXPOSE 8080\nCMD [\"/usr/local/bin/pixi\", \"run\", \"--environment\", \"prod\", \"serve\"]\n```\n\n----------------------------------------\n\nTITLE: Adding a Test Task with Pixi\nDESCRIPTION: This snippet demonstrates how to add a task for running tests using Pixi, specifically adding a 'test' task that runs pytest.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/tutorial.md#2025-04-23_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\npixi task add --feature test test \"pytest\"\n```\n\n----------------------------------------\n\nTITLE: Building Cargo Project with Pixi in Shell\nDESCRIPTION: Compiles the Rust project using `cargo build` executed within the Pixi environment via `pixi run`. This command leverages the dependencies (like the Rust toolchain) managed by Pixi.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/tutorials/rust.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npixi run cargo build\n```\n\n----------------------------------------\n\nTITLE: Matrix Strategy for Multiple Pixi Environments\nDESCRIPTION: GitHub Action workflow that uses a matrix strategy to run tests on multiple Python environments (3.11 and 3.12) defined in the Pixi configuration.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/ci/github_actions.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntest:\n  runs-on: ubuntu-latest\n  strategy:\n    matrix:\n      environment: [py311, py312]\n  steps:\n  - uses: actions/checkout@v4\n  - uses: prefix-dev/setup-pixi@v0.8.3\n    with:\n      environments: ${{ matrix.environment }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Dependencies in TOML\nDESCRIPTION: Shows how to set up dependencies for different platforms using the target table in a Pixi manifest file.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_manifest.md#2025-04-23_snippet_31\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\ncmake = \"3.26.4\"\npython = \"3.10\"\n\n[target.osx.dependencies]\npython = \"3.11\"\n```\n\n----------------------------------------\n\nTITLE: Running a Command in Pixi Environment\nDESCRIPTION: Command to run an installed package within the Pixi environment without activating a shell. This executes cowpy with a message.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/README.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\npixi run cowpy \"Thanks for using pixi\"\n```\n\n----------------------------------------\n\nTITLE: Setting up JupyterLab with pixi-kernel for advanced usage\nDESCRIPTION: This snippet demonstrates how to set up JupyterLab with pixi-kernel for advanced usage. It initializes a Pixi workspace, adds JupyterLab and pixi-kernel packages, and then starts JupyterLab.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/editor/jupyterlab.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npixi init\npixi add jupyterlab pixi-kernel\npixi run jupyter lab\n```\n\n----------------------------------------\n\nTITLE: Uninstalling a PyPI Package with Pixi (Shell)\nDESCRIPTION: Removes a PyPI-based package (e.g., 'numpy') from a Pixi environment using the '--pypi' flag. Updates relevant sections in project files. Pixi must be installed and the environment active.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/switching_from/poetry.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\npixi remove --pypi numpy\n```\n\n----------------------------------------\n\nTITLE: Executing ML Tasks on CPU, CUDA, or MLX Machines with pixi (Shell)\nDESCRIPTION: This series of shell commands enables users to run the 'train-model' task under different hardware-specific environments as configured by pixi.toml. Each command selects the matching feature set, and will fail if run on a machine that does not meet system requirements (e.g., missing CUDA or Mac hardware). Usage: replace 'cuda' or 'mlx' with the appropriate environment; the plain command uses the CPU fallback.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/workspace/multi_environment.md#2025-04-23_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\npixi run train-model --environment cuda\n# will execute `python train.py --cuda`\n# fails if not on linux-64 or win-64 with cuda 12.1\n```\n\nLANGUAGE: shell\nCODE:\n```\npixi run train-model --environment mlx\n# will execute `python train.py --mlx`\n# fails if not on osx-arm64\n```\n\nLANGUAGE: shell\nCODE:\n```\npixi run train-model\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Environments in Pixi Configuration\nDESCRIPTION: This code block demonstrates how to create multiple environments in the pixi.toml file, each specifying a different Python version.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/build/variants.md#2025-04-23_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n--8<-- \"docs/source_files/pixi_workspaces/pixi_build/workspace_variants/pixi.toml:environments\"\n```\n\n----------------------------------------\n\nTITLE: Defining Environments and Packages in Pixi Lock File (YAML)\nDESCRIPTION: This YAML snippet demonstrates the structure of a Pixi lock file, showing how environments and packages are defined. It includes channel URLs and package specifications for different platforms.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/workspace/lockfile.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nenvironments:\n    default:\n        channels:\n          - url: https://conda.anaconda.org/conda-forge/\n        packages:\n            linux-64:\n            ...\n            - conda: https://conda.anaconda.org/conda-forge/linux-64/python-3.12.2-hab00c5b_0_cpython.conda\n            ...\n            osx-64:\n            ...\n            - conda: https://conda.anaconda.org/conda-forge/osx-64/python-3.12.2-h9f0c242_0_cpython.conda\n            ...\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions for pixi WASM project deployment\nDESCRIPTION: This YAML configuration sets up a GitHub Actions workflow to build a pixi WASM environment and deploy a JupyterLite project to GitHub Pages. It includes steps for checkout, setting up pixi, building the distribution, and deploying to GitHub Pages.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/wasm-jupyterlite/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Build and Deploy\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - '*'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      - name: Setup pixi project\n        uses: prefix-dev/setup-pixi@v0.8.2\n      - name: Build dist\n        run: pixi run build-dist\n      - name: Upload artifact\n        uses: actions/upload-pages-artifact@v3\n        with:\n          path: ./dist\n\n  deploy:\n    needs: build\n    if: github.ref == 'refs/heads/main'\n    permissions:\n      pages: write\n      id-token: write\n\n    environment:\n      name: github-pages\n      url: ${{ steps.deployment.outputs.page_url }}\n\n    runs-on: ubuntu-latest\n    steps:\n      - name: Deploy to GitHub Pages\n        id: deployment\n        uses: actions/deploy-pages@v4\n```\n\n----------------------------------------\n\nTITLE: Re-indexing S3 Bucket with rattler-index\nDESCRIPTION: Shell command for re-indexing an S3 bucket after uploading new packages. Uses the rattler-index tool to update the repodata.json file with information about newly uploaded packages.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/deployment/s3.md#2025-04-23_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\npixi exec rattler-index s3 s3://my-s3-bucket/my-channel \\\n    --endpoint-url https://my-s3-host \\\n    --region us-east-1 \\\n    --force-path-style \\\n    --access-key-id <access-key-id> \\\n    --secret-access-key <secret-access-key>\n```\n\n----------------------------------------\n\nTITLE: Implementing Python Package with Rich Table Output\nDESCRIPTION: Python implementation of the package's __init__.py file, which contains a main function that displays a formatted table of people using the Rich library.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/build/python.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/source_files/pixi_workspaces/pixi_build/python/src/python_rich/__init__.py\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Channel and Host Mirrors for Conda - TOML\nDESCRIPTION: Shows a TOML configuration for specifying mirrors for conda channels and entire hosts. Mirrors are prioritized by list order for repodata fetching. Each mirror entry replaces matching channel URLs, affecting where packages are fetched from. Requires accurate mirroring and proper TOML structure. Limitations: unmirrored channels will fail unless explicitly listed.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_configuration.md#2025-04-23_snippet_16\n\nLANGUAGE: toml\nCODE:\n```\n--8<-- \\\"docs/source_files/pixi_config_tomls/mirror_prefix_config.toml:mirrors\\\"\n```\n\n----------------------------------------\n\nTITLE: Initializing a Pixi Project for ROS 2\nDESCRIPTION: Creates a new directory `my_ros2_project`, initializes a Pixi project within it, specifying the `robostack-humble` and `conda-forge` channels for package sources, and then changes the current directory into the newly created project folder. This sets up the basic Pixi environment for ROS 2 Humble development.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/tutorials/ros2.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npixi init my_ros2_project -c robostack-humble -c conda-forge\ncd my_ros2_project\n```\n\n----------------------------------------\n\nTITLE: Using Pixi Search Command in Bash\nDESCRIPTION: This snippet demonstrates the basic usage syntax for the 'pixi search' command. It shows how to search for a package with optional arguments and options.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/search.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi search [OPTIONS] <PACKAGE>\n```\n\n----------------------------------------\n\nTITLE: Installing Multiple Pixi Environments in One Job\nDESCRIPTION: GitHub Action configuration that installs multiple environments (py311 and py312) in a single job and demonstrates how to run commands in each environment.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/ci/github_actions.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- uses: prefix-dev/setup-pixi@v0.8.3\n  with:\n    environments: >- # (1)!\n      py311\n      py312\n- run: |\n  pixi run -e py311 test\n  pixi run -e py312 test\n```\n\n----------------------------------------\n\nTITLE: Running Python Scripts in Pixi Environment\nDESCRIPTION: GitHub Action step that uses a custom shell wrapper to run a Python script inside a Pixi environment, allowing direct execution of Python code in workflows.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/ci/github_actions.md#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- run: | # (1)!\n    import my_package\n    print(\"Hello world!\")\n  shell: pixi run python {0}\n```\n\n----------------------------------------\n\nTITLE: Running Pixi Task\nDESCRIPTION: Command to execute a defined task within the Pixi environment.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/index.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npixi run start\n```\n\n----------------------------------------\n\nTITLE: Adding Pixi Tasks for Common ROS 2 Commands\nDESCRIPTION: Uses the `pixi task add` command to define shortcuts (tasks) for frequently used commands. It creates tasks named `sim` (runs turtlesim), `build` (runs colcon build with symlink install), and `hello` (runs the custom Python node).\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/tutorials/ros2.md#2025-04-23_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\npixi task add sim \"ros2 run turtlesim turtlesim_node\"\npixi task add build \"colcon build --symlink-install\"\npixi task add hello \"ros2 run my_package my_node\"\n```\n\n----------------------------------------\n\nTITLE: Using Pixi Self-Update Command in Bash\nDESCRIPTION: This snippet demonstrates the basic usage of the 'pixi self-update' command. It updates Pixi to the latest version or a specific version if provided.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/self-update.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi self-update\n```\n\n----------------------------------------\n\nTITLE: Determining nanobind CMake Directory Path using Python in CMake\nDESCRIPTION: This snippet executes the Python interpreter found earlier (`${Python_EXECUTABLE}`) to run the `nanobind` module with the `--cmake_dir` argument. The output of this command, which is the path to nanobind's CMake configuration files, is captured into the CMake variable `nanobind_ROOT`. `OUTPUT_STRIP_TRAILING_WHITESPACE` removes any trailing newline characters from the output.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/source_files/pixi_workspaces/pixi_build/advanced_cpp/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nexecute_process(\n  COMMAND \"${Python_EXECUTABLE}\" -m nanobind --cmake_dir\n  OUTPUT_STRIP_TRAILING_WHITESPACE OUTPUT_VARIABLE nanobind_ROOT\n) # (2)!\n```\n\n----------------------------------------\n\nTITLE: Checking CUDA Toolkit Version in Pixi Environment\nDESCRIPTION: Shell command to check the CUDA toolkit version installed in the Pixi environment using nvcc. This helps verify the exact CUDA compiler version available in the environment.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/pytorch.md#2025-04-23_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\npixi run nvcc --version\n```\n\n----------------------------------------\n\nTITLE: Activating Pixi Shell Environment via Shell Hook - Shell\nDESCRIPTION: This snippet demonstrates how to activate a Pixi environment in the current shell using the shell hook. It requires Pixi to be installed and available on the system. The command outputs and evaluates the activation script so the current shell inherits the environment context. Useful for advanced scenarios where you want in-place activation without subshells or launching a dedicated Pixi shell.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/switching_from/conda.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n~~~shell\\n~/myenv > eval \\\"$(pixi shell-hook)\\\"\\n~~~\n```\n\n----------------------------------------\n\nTITLE: Pixi PyPI Dependencies Section (TOML)\nDESCRIPTION: Defines PyPI-based dependencies for Pixi projects via '[tool.pixi.pypi-dependencies]' or '[project.dependencies]' sections, segregating them from conda dependencies. Allows project maintainers to delineate sources.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/switching_from/poetry.md#2025-04-23_snippet_16\n\nLANGUAGE: toml\nCODE:\n```\n[tool.pixi.pypi-dependencies]\n```\n\nLANGUAGE: toml\nCODE:\n```\n[project.dependencies]\n```\n\n----------------------------------------\n\nTITLE: Executing Tasks with Arguments in Command Line\nDESCRIPTION: Examples showing how to execute Pixi tasks with arguments from the command line. The first example uses argument variables while the second example shows the default behavior of appending all CLI arguments to the task command.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npixi run install /path/to/manifest\npixi run install /path/to/manifest --debug\n```\n\nLANGUAGE: bash\nCODE:\n```\npixi run install --debug --path /path/to/manifest\n```\n\n----------------------------------------\n\nTITLE: One-off Python Script with Pixi Exec\nDESCRIPTION: GitHub Action step that uses 'pixi exec' to run a Python script in a temporary environment with specific dependencies (Python 3.11 and ruamel.yaml), useful for scripting without creating a permanent environment.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/ci/github_actions.md#2025-04-23_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n- run: | # (1)!\n    import ruamel.yaml\n    # ...\n  shell: pixi exec --spec python=3.11.* --spec ruamel.yaml -- python {0}\n```\n\n----------------------------------------\n\nTITLE: Exporting Pixi Workspace Environment to Conda Format - Shell\nDESCRIPTION: This snippet demonstrates how to export the dependencies of a Pixi workspace to a Conda-compatible 'environment.yml' file. It assumes a configured Pixi workspace and active manifest. This command helps share environments with Conda users or infrastructure, ensuring interoperability. The resulting YAML file can be used for reproducibility or migration.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/switching_from/conda.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n~~~shell\\npixi workspace export conda-environment\\n~~~\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Science Sandbox Environment with Pixi\nDESCRIPTION: This example demonstrates how to create a data science environment with multiple tools using the pixi global install command. It exposes specific tools (jupyter and ipython) from the environment, making them available globally.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/global_tools/examples.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npixi global install --environment data-science --expose jupyter --expose ipython jupyter numpy pandas matplotlib ipython\n```\n\nLANGUAGE: toml\nCODE:\n```\n[envs.data-science]\nchannels = [\"conda-forge\"]\ndependencies = { jupyter = \"*\", ipython = \"*\" }\nexposed = { jupyter = \"jupyter\", ipython = \"ipython\" }\n```\n\nLANGUAGE: shell\nCODE:\n```\n> ipython\n# Or\n> jupyter lab\n```\n\n----------------------------------------\n\nTITLE: Installing Global Packages with Pixi CLI\nDESCRIPTION: This shell command demonstrates how to install a global package (snakemake) using Pixi CLI, specifying multiple channels.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/global_tools/manifest.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npixi global install --channel conda-forge --channel bioconda snakemake\n```\n\n----------------------------------------\n\nTITLE: Configuring Workspace in Pixi TOML File\nDESCRIPTION: Demonstrates the configuration of the workspace in the 'pixi.toml' file, including channels, platforms, and dependencies.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/build/workspace.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n--8<-- \"docs/source_files/pixi_workspaces/pixi_build/workspace/pixi.toml:workspace\"\n```\n\n----------------------------------------\n\nTITLE: Defining Channel-Specific Dependencies in TOML Configuration\nDESCRIPTION: Example configuration showing how to specify a specific channel for a dependency in Pixi. The workspace uses both conda-forge and a custom channel, but forces 'packgex' to only use the custom channel.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/advanced/channel_logic.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[workspace]\nchannels = [\"conda-forge\", \"my-channel\"]\n\n[dependencies]\npackgex = { version = \"*\", channel = \"my-channel\" }\n```\n\n----------------------------------------\n\nTITLE: Activating and Using a Pixi Shell\nDESCRIPTION: Commands to activate a shell in the Pixi environment, run a command within that environment, and then exit back to the original shell.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/README.md#2025-04-23_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\npixi shell\ncowpy \"Thanks for using pixi\"\nexit\n```\n\n----------------------------------------\n\nTITLE: Defining Package Dependencies with Matchspec in TOML\nDESCRIPTION: Shows how to define package dependencies using a matchspec format in TOML. Includes examples of specifying version and channel or build number.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_manifest.md#2025-04-23_snippet_25\n\nLANGUAGE: toml\nCODE:\n```\npackage0 = { version = \">=1.2.3\", channel=\"conda-forge\" }\npackage1 = { version = \">=1.2.3\", build=\"py34_0\" }\n```\n\n----------------------------------------\n\nTITLE: Activating Specific Pixi Environment with Multiple Installations\nDESCRIPTION: This example shows how to activate a specific environment when multiple environments are installed using the setup-pixi action.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/ci/github_actions.md#2025-04-23_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n- uses: prefix-dev/setup-pixi@v0.8.3\n  with:\n    environments: >\n      py311\n      py312\n    activate-environment: py311\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom ROS 2 Python Package\nDESCRIPTION: Uses `pixi run` to execute the `ros2 pkg create` command within the Pixi environment. This creates a new ROS 2 package named `my_package` with a Python build type (`ament_python`), placing the source code in the `src` directory and creating a node named `my_node`.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/tutorials/ros2.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npixi run ros2 pkg create --build-type ament_python --destination-directory src --node-name my_node my_package\n```\n\n----------------------------------------\n\nTITLE: Viewing Pixi Environment Installation Metadata (JSON)\nDESCRIPTION: This JSON object represents the content of the `pixi` metadata file located in the environment's `conda-meta` folder. It includes the path to the project's manifest (`pixi.toml`), the environment's name, the Pixi version used for creation, and the lock file hash (`environment_lock_file_hash`) used for synchronization checks.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/workspace/environment.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"manifest_path\": \"/home/user/dev/pixi/pixi.toml\",\n  \"environment_name\": \"default\",\n  \"pixi_version\": \"0.34.0\",\n  \"environment_lock_file_hash\": \"4f36ee620f10329d\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Preview Features in TOML\nDESCRIPTION: Shows how to enable preview features, specifically the Pixi Build feature, in a Pixi manifest file.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_manifest.md#2025-04-23_snippet_37\n\nLANGUAGE: toml\nCODE:\n```\n[workspace]\npreview = [\"pixi-build\"]\n```\n\n----------------------------------------\n\nTITLE: Examining Pixi Shell Hook Activation Output (Shell)\nDESCRIPTION: This snippet displays example output generated by the `pixi shell-hook` command. It shows the environment variables (like `PATH`, `CONDA_PREFIX`, `PIXI_*`) being exported and the conda activation scripts (`.sh` files) being sourced to fully activate the environment within the current shell.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/workspace/environment.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nexport PATH=\"/home/user/development/pixi/.pixi/envs/default/bin:/home/user/.local/bin:/home/user/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/home/user/.pixi/bin\"\nexport CONDA_PREFIX=\"/home/user/development/pixi/.pixi/envs/default\"\nexport PIXI_PROJECT_NAME=\"pixi\"\nexport PIXI_PROJECT_ROOT=\"/home/user/development/pixi\"\nexport PIXI_PROJECT_VERSION=\"0.12.0\"\nexport PIXI_PROJECT_MANIFEST=\"/home/user/development/pixi/pixi.toml\"\nexport CONDA_DEFAULT_ENV=\"pixi\"\nexport PIXI_ENVIRONMENT_PLATFORMS=\"osx-64,linux-64,win-64,osx-arm64\"\nexport PIXI_ENVIRONMENT_NAME=\"default\"\nexport PIXI_PROMPT=\"(pixi) \"\n. \"/home/user/development/pixi/.pixi/envs/default/etc/conda/activate.d/activate-binutils_linux-64.sh\"\n. \"/home/user/development/pixi/.pixi/envs/default/etc/conda/activate.d/activate-gcc_linux-64.sh\"\n. \"/home/user/development/pixi/.pixi/envs/default/etc/conda/activate.d/activate-gfortran_linux-64.sh\"\n. \"/home/user/development/pixi/.pixi/envs/default/etc/conda/activate.d/activate-gxx_linux-64.sh\"\n. \"/home/user/development/pixi/.pixi/envs/default/etc/conda/activate.d/libglib_activate.sh\"\n. \"/home/user/development/pixi/.pixi/envs/default/etc/conda/activate.d/rust.sh\"\n```\n\n----------------------------------------\n\nTITLE: Using pixi workspace channel add Command in Bash\nDESCRIPTION: This snippet shows the basic usage of the 'pixi workspace channel add' command. It demonstrates how to add one or more channels to a pixi workspace, with optional flags for priority and prepending.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/workspace/channel/add.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi workspace channel add [OPTIONS] <CHANNEL>...\n```\n\n----------------------------------------\n\nTITLE: Comparing Test and Default Environments\nDESCRIPTION: This snippet demonstrates how to list and compare the explicit dependencies in the test and default environments using Pixi.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/tutorial.md#2025-04-23_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\npixi list --explicit --environment test\n# vs. default environment\npixi list --explicit\n```\n\n----------------------------------------\n\nTITLE: Adding a Package as a Dependency via Pixi CLI - Shell\nDESCRIPTION: Demonstrates adding a package ('pygments') using the Pixi CLI, which updates the pyproject.toml configuration file. The command 'pixi add pygments' automatically manages dependency entries. Requires an existing project already set up for Pixi.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/tutorial.md#2025-04-23_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\npixi add pygments\n```\n\n----------------------------------------\n\nTITLE: Installing PyTorch from PyPI in pixi.toml\nDESCRIPTION: Configuration for installing PyTorch from PyPI using uv integration in pixi.toml. This approach provides access to the latest PyTorch versions through the official PyTorch index.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/pytorch.md#2025-04-23_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n--8<-- \"docs/source_files/pixi_tomls/pytorch-pypi.toml:minimal\"\n```\n\n----------------------------------------\n\nTITLE: AWS Configuration for Pixi S3 Access\nDESCRIPTION: Example AWS configuration file that sets up an SSO profile for accessing S3 buckets. This can be used with Pixi to authenticate to private S3 channels.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/deployment/s3.md#2025-04-23_snippet_1\n\nLANGUAGE: cfg\nCODE:\n```\n[profile conda]\nsso_account_id = 123456789012\nsso_role_name = PowerUserAccess\nsso_start_url = https://my-company.awsapps.com/start\nsso_region = eu-central-1\nregion = eu-central-1\noutput = json\n```\n\n----------------------------------------\n\nTITLE: Setting Default Tasks for an Environment in TOML\nDESCRIPTION: Demonstrates how to define tasks as defaults for a specific environment in the pixi.toml file.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/workspace/multi_environment.md#2025-04-23_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[feature.test.tasks]\ntest = \"pytest\"\n\n[environments]\ntest = [\"test\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Channel Priority for Dependency Solver (TOML)\nDESCRIPTION: Demonstrates toggling the channel-priority setting for the dependency solver. Set to \"strict\" for prioritized channels (default and recommended), or \"disabled\" to mix packages from all listed channels, which poses compatibility and security risks. Used as a single string value and affects how Pixi resolves dependencies.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_manifest.md#2025-04-23_snippet_16\n\nLANGUAGE: toml\nCODE:\n```\nchannel-priority = \"disabled\"\n\n```\n\n----------------------------------------\n\nTITLE: Usage of Pixi Update Command\nDESCRIPTION: Shows the basic usage syntax for the 'pixi update' command, including optional arguments and packages.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/update.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi update [OPTIONS] [PACKAGES]...\n```\n\n----------------------------------------\n\nTITLE: Initializing Pixi workspace and adding JupyterLab package\nDESCRIPTION: This snippet shows how to create a new Pixi workspace and add the JupyterLab package to it. It uses two Pixi commands: 'init' to create the workspace and 'add' to include the JupyterLab package.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/editor/jupyterlab.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi init\npixi add jupyterlab\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple PyPI PyTorch Environments in pixi.toml\nDESCRIPTION: Configuration for setting up multiple environments (CPU and GPU) for PyTorch installations from PyPI in pixi.toml. This allows switching between environments based on hardware capabilities.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/pytorch.md#2025-04-23_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n--8<-- \"docs/source_files/pixi_tomls/pytorch-pypi-envs.toml:multi-env\"\n```\n\n----------------------------------------\n\nTITLE: Testing PyTorch Installation in Pixi Environment\nDESCRIPTION: Shell command to verify PyTorch installation by importing the library and checking version and CUDA availability. This helps confirm that PyTorch is properly installed in the Pixi environment.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/pytorch.md#2025-04-23_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\npixi run python -c \"import torch; print(torch.__version__); print(torch.cuda.is_available())\"\n```\n\n----------------------------------------\n\nTITLE: Example Pixi Global Expose Remove Command\nDESCRIPTION: Practical example showing how to remove multiple exposed binary names (python310 and python3) from a specific environment named 'myenv'.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/global/expose/remove.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npixi global expose remove python310 python3 --environment myenv\n```\n\n----------------------------------------\n\nTITLE: Configuring ReadTheDocs Build Settings in YAML\nDESCRIPTION: This YAML configuration specifies the build settings for ReadTheDocs, including Python version, build commands, and documentation source location. It ensures the correct environment and dependencies are set up for building the pixi documentation.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/readthedocs-override/docs/index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2\n\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.11\"\n\npython:\n  install:\n    - requirements: docs/requirements.txt\n\nsphinx:\n  configuration: docs/conf.py\n```\n\n----------------------------------------\n\nTITLE: Configuring, Building, and Running C++ SDL Project with Pixi\nDESCRIPTION: This code snippet shows the shell commands to configure the CMake project, build the executable, and start the built executable using Pixi. It assumes that Pixi is available in the terminal and the user is in the correct directory.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/pixi-build/cpp-sdl/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Configure the CMake project\npixi run configure\n\n# Build the executable\npixi run build\n\n# Start the build executable\npixi run start\n```\n\n----------------------------------------\n\nTITLE: Example of removing a package from a global environment\nDESCRIPTION: Shows an example of how to use the 'pixi global remove' command to remove the 'numpy' package from the 'python' environment. This demonstrates the practical application of the command with specific options.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/global/remove.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npixi global remove --environment python numpy\n```\n\n----------------------------------------\n\nTITLE: Adding ROS 2 Desktop and Turtlesim Dependencies with Pixi\nDESCRIPTION: Uses the `pixi add` command to add the `ros-humble-desktop` and `ros-humble-turtlesim` packages as dependencies to the Pixi project. Pixi resolves and installs these packages and their dependencies into the project's isolated environment.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/tutorials/ros2.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npixi add ros-humble-desktop ros-humble-turtlesim\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure\nDESCRIPTION: Shows the expected directory layout for the C++ math project including CMake configuration, source files, and Pixi configuration.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/build/cpp.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncpp_math/\n├── CMakeLists.txt\n├── pixi.toml\n├── .gitignore\n└── src\n    └── math.cpp\n```\n\n----------------------------------------\n\nTITLE: Using pixi install command in Bash\nDESCRIPTION: Shows the basic usage syntax for the 'pixi install' command. This command is used to install an environment, updating the lockfile and installing the environment.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/install.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi install [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Using Pixi Auth Logout Command\nDESCRIPTION: Command syntax for removing authentication information from a specified host using the pixi auth logout command. Requires a HOST argument to specify which host to remove credentials from.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/auth/logout.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi auth logout <HOST>\n```\n\n----------------------------------------\n\nTITLE: Pixi Project Metadata Section (TOML)\nDESCRIPTION: Specifies the tool section for Pixi within configuration files, enabling Pixi-specific project settings and metadata. Required for Pixi projects in 'pyproject.toml'.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/switching_from/poetry.md#2025-04-23_snippet_13\n\nLANGUAGE: toml\nCODE:\n```\n[tool.pixi]\n```\n\n----------------------------------------\n\nTITLE: Adding a Dependency Group in pyproject.toml\nDESCRIPTION: This snippet demonstrates how to add a dependency group (feature) named 'test' with the 'pytest' package to the pyproject.toml file using Pixi.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/tutorial.md#2025-04-23_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\npixi add --pypi --feature test pytest\n```\n\nLANGUAGE: toml\nCODE:\n```\n[dependency-groups]\ntest = [\"pytest\"]\n```\n\n----------------------------------------\n\nTITLE: Installing a specific version of Pixi\nDESCRIPTION: This command installs a specific version of Pixi using the PIXI_VERSION environment variable during the installation process.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/advanced/installation.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncurl -fsSL https://pixi.sh/install.sh | PIXI_VERSION=v0.18.0 bash\n```\n\n----------------------------------------\n\nTITLE: Activating Pixi Environment in GitHub Actions\nDESCRIPTION: This snippet demonstrates how to activate the pixi-installed environment, making all binaries available to subsequent steps without using a custom shell wrapper.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/ci/github_actions.md#2025-04-23_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n- uses: prefix-dev/setup-pixi@v0.8.3\n  with:\n    activate-environment: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple PyPI PyTorch Environments in pyproject.toml\nDESCRIPTION: Configuration for setting up multiple environments (CPU and GPU) for PyTorch installations from PyPI in pyproject.toml. Enables development on both CUDA-enabled and CPU-only machines.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/pytorch.md#2025-04-23_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\n--8<-- \"docs/source_files/pyproject_tomls/pytorch-pypi-envs.toml:multi-env\"\n```\n\n----------------------------------------\n\nTITLE: Self-Contained Python CLI for Installing Pixi Environments\nDESCRIPTION: This Python script creates a self-contained CLI tool that can install a Pixi environment to an arbitrary prefix. It uses py-rattler and typer libraries, which are specified in the shebang line. The script reads a lock file, extracts environment information for a specified platform, and installs the environment to a target prefix.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/advanced/shebang.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env -S pixi exec --spec py-rattler>=0.10.0,<0.11 --spec typer>=0.15.0,<0.16 -- python\n\nimport asyncio\nfrom pathlib import Path\nfrom typing import get_args\n\nfrom rattler import install as rattler_install\nfrom rattler import LockFile, Platform\nfrom rattler.platform.platform import PlatformLiteral\nfrom rattler.networking import Client, MirrorMiddleware, AuthenticationMiddleware\nimport typer\n\n\napp = typer.Typer()\n\n\nasync def _install(\n    lock_file_path: Path,\n    environment_name: str,\n    platform: Platform,\n    target_prefix: Path,\n) -> None:\n    lock_file = LockFile.from_path(lock_file_path)\n    environment = lock_file.environment(environment_name)\n    if environment is None:\n        raise ValueError(f\"Environment {environment_name} not found in lock file {lock_file_path}\")\n    records = environment.conda_repodata_records_for_platform(platform)\n    if not records:\n        raise ValueError(f\"No records found for platform {platform} in lock file {lock_file_path}\")\n    await rattler_install(\n        records=records,\n        target_prefix=target_prefix,\n        client=Client(\n            middlewares=[\n                MirrorMiddleware({\"https://conda.anaconda.org/conda-forge\": [\"https://repo.prefix.dev/conda-forge\"]}),\n                AuthenticationMiddleware(),\n            ]\n        ),\n    )\n\n\n@app.command()\ndef install(\n    lock_file_path: Path = Path(\"pixi.lock\").absolute(),\n    environment_name: str = \"default\",\n    platform: str = str(Platform.current()),\n    target_prefix: Path = Path(\"env\").absolute(),\n) -> None:\n    \"\"\"\n    Installs a pixi.lock file to a custom prefix.\n    \"\"\"\n    if platform not in get_args(PlatformLiteral):\n        raise ValueError(f\"Invalid platform {platform}. Must be one of {get_args(PlatformLiteral)}\")\n    asyncio.run(\n        _install(\n            lock_file_path=lock_file_path,\n            environment_name=environment_name,\n            platform=Platform(platform),\n            target_prefix=target_prefix,\n        )\n    )\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Exposing Python Binary Example\nDESCRIPTION: Example showing how to expose a Python binary from a specific environment with a custom name.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/global/expose.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npixi global expose add python310=python3.10 --environment myenv\n```\n\n----------------------------------------\n\nTITLE: Adding Platform-Specific Dependencies via Pixi CLI\nDESCRIPTION: Examples of using Pixi CLI commands to add platform-specific dependencies. It demonstrates adding dependencies for different platforms and dependency types (host, build).\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/workspace/multi_platform_configuration.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npixi add --platform win-64 posix\npixi add --host --platform win-64 posix\npixi add --build --platform osx-64 clang\n```\n\n----------------------------------------\n\nTITLE: Configuring CUDA Feature in TOML\nDESCRIPTION: Demonstrates how to set up a CUDA feature with various configuration options in a Pixi manifest file.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_manifest.md#2025-04-23_snippet_34\n\nLANGUAGE: toml\nCODE:\n```\n[feature.cuda]\nactivation = {scripts = [\"cuda_activation.sh\"]}\n# Results in:  [\"nvidia\", \"conda-forge\"] when the default is `conda-forge`\nchannels = [\"nvidia\"]\ndependencies = {cuda = \"x.y.z\", cudnn = \"12.0\"}\npypi-dependencies = {torch = \"==1.9.0\"}\nplatforms = [\"linux-64\", \"osx-arm64\"]\nsystem-requirements = {cuda = \"12\"}\ntasks = { warmup = \"python warmup.py\" }\ntarget.osx-arm64 = {dependencies = {mlx = \"x.y.z\"}}\n```\n\n----------------------------------------\n\nTITLE: Custom Shell Wrapper with Bash and Pixi\nDESCRIPTION: GitHub Action step that uses a custom shell wrapper to run commands inside a Pixi environment using Bash, useful for executing multiple commands in the same environment.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/ci/github_actions.md#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- run: | # (1)!\n    python --version\n    pip install --no-deps -e .\n  shell: pixi run bash -e {0}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Pixi Project\nDESCRIPTION: Commands to initialize a new Pixi project and navigate to the project directory. This is the first step in setting up a Pixi-managed environment.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/README.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\npixi init myproject\ncd myproject\n```\n\n----------------------------------------\n\nTITLE: Using the Pixi Add Command\nDESCRIPTION: Demonstrates the basic usage syntax for the 'pixi add' command, which is used to add dependencies to a Pixi workspace. The command accepts various options and one or more dependency specifications.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/add.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npixi add [OPTIONS] <SPEC>...\n```\n\n----------------------------------------\n\nTITLE: Adding System Dependencies (OpenSSL, pkg-config, compilers) with Pixi in Shell\nDESCRIPTION: Adds required system-level dependencies (`openssl`, `pkg-config`, and `compilers`) to the Pixi environment using `pixi add`. This command resolves build issues for crates like `git2` by making these dependencies available within the project's isolated environment.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/tutorials/rust.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\npixi add openssl pkg-config compilers\n```\n\n----------------------------------------\n\nTITLE: Installing Pixi using Winget on Windows\nDESCRIPTION: This command installs Pixi using the Winget package manager on Windows systems.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/advanced/installation.md#2025-04-23_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nwinget install prefix-dev.pixi\n```\n\n----------------------------------------\n\nTITLE: Poetry Project Metadata Section (TOML)\nDESCRIPTION: Defines the main tool section for configuring Poetry within a 'pyproject.toml' file. This block is required for all Poetry projects and holds project-level metadata and configuration options.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/switching_from/poetry.md#2025-04-23_snippet_12\n\nLANGUAGE: toml\nCODE:\n```\n[tool.poetry]\n```\n\n----------------------------------------\n\nTITLE: Setting PyPI Registry Defaults - TOML\nDESCRIPTION: Provides TOML configuration for defining default PyPI registry options for Pixi projects. Parameters include 'index-url', 'extra-index-urls', 'keyring-provider', and 'allow-insecure-host', each affecting how PyPI packages are sourced and credentials managed. Except for 'keyring-provider', these settings update only the manifest files (pixi.toml or pyproject.toml) and are not interpreted globally, ensuring reproducibility and isolation.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_configuration.md#2025-04-23_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n--8<-- \\\"docs/source_files/pixi_config_tomls/main_config.toml:pypi-config\\\"\n```\n\n----------------------------------------\n\nTITLE: Installing a specific version of Pixi on Windows\nDESCRIPTION: This PowerShell command installs a specific version of Pixi on Windows using the PixiVersion parameter.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/advanced/installation.md#2025-04-23_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\niwr -useb https://pixi.sh/install.ps1 | iex -Args \"-PixiVersion v0.18.0\"\n```\n\n----------------------------------------\n\nTITLE: Running Defined Pixi Tasks\nDESCRIPTION: Shows how to execute the previously defined Pixi tasks using the `pixi run <task_name>` command. This simplifies running the simulation, building the workspace, and launching the custom node.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/tutorials/ros2.md#2025-04-23_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\npixi run sim\npixi run build\npixi run hello\n```\n\n----------------------------------------\n\nTITLE: Specifying CUDA Version for PyTorch Installation in pixi.toml\nDESCRIPTION: Configuration for installing PyTorch with a specific CUDA version from conda-forge using pixi.toml. This snippet shows how to constrain the CUDA version using the cuda-version package for proper dependency resolution.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/pytorch.md#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n--8<-- \"docs/source_files/pixi_tomls/pytorch-conda-forge.toml:cuda-version\"\n```\n\n----------------------------------------\n\nTITLE: Creating Pixi Task for Running Project in Shell\nDESCRIPTION: Defines a custom task named 'start' in `pixi.toml` using `pixi task add`. This task serves as a shortcut for the `cargo run` command.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/tutorials/rust.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\npixi task add start \"cargo run\"\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Syntax for pixi CLI (Bash)\nDESCRIPTION: This snippet demonstrates the fundamental structure for executing `pixi` commands in a shell environment. It shows that the command accepts optional global flags (`[OPTIONS]`) followed by a required subcommand (`<COMMAND>`) to perform specific actions.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n```\npixi [OPTIONS] <COMMAND>\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Build Task in pixi.toml\nDESCRIPTION: Shows the `[tasks]` section in `pixi.toml` after adding the 'build' task via `pixi task add`. This configuration allows running `cargo build` simply by executing `pixi run build`.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/tutorials/rust.md#2025-04-23_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[tasks]\nbuild = \"cargo build\"\n```\n\n----------------------------------------\n\nTITLE: Installing R Packages with Pixi CLI\nDESCRIPTION: Command line instructions for installing R packages using Pixi. R packages from conda-forge are prefixed with 'r-'.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/editor/r_studio.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi add r-<package-name>\n# for example\npixi add r-ggplot2\n```\n\n----------------------------------------\n\nTITLE: Configuring Features and Environments in TOML\nDESCRIPTION: Shows how to define features and environments using the feature and environments tables in a Pixi manifest file.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_manifest.md#2025-04-23_snippet_33\n\nLANGUAGE: toml\nCODE:\n```\n[feature.test.dependencies]\npytest = \"*\"\n\n[environments]\ntest = [\"test\"]\n```\n\n----------------------------------------\n\nTITLE: Installing Global Package with Dependencies using Pixi\nDESCRIPTION: Command to install ipython with numpy and matplotlib dependencies in the same environment, allowing them to be imported within the ipython session.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/global_tools/introduction.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npixi global install ipython --with numpy --with matplotlib\n```\n\n----------------------------------------\n\nTITLE: Creating Pixi Task for Building in Shell\nDESCRIPTION: Defines a custom task named 'build' in the `pixi.toml` file using the `pixi task add` command. This task serves as a shortcut for the `cargo build` command.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/tutorials/rust.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npixi task add build \"cargo build\"\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Channel in Pixi TOML\nDESCRIPTION: Configuration example for setting up an S3 bucket as a package channel in pixi.toml. This allows Pixi to fetch packages from your S3 storage.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/deployment/s3.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[workspace]\n# ...\nchannels = [\"s3://my-bucket/custom-channel\"]\n```\n\n----------------------------------------\n\nTITLE: Building the ROS 2 Workspace with Colcon\nDESCRIPTION: Executes the `colcon build` command within the Pixi environment using `pixi run`. Colcon discovers packages in the `src` directory and builds them, placing build artifacts and installation files in the `build` and `install` directories respectively.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/tutorials/ros2.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\npixi run colcon build\n```\n\n----------------------------------------\n\nTITLE: Example Initial pixi.toml Configuration\nDESCRIPTION: Shows the default content of the `pixi.toml` manifest file generated by `pixi init`. It defines workspace properties like name, version, description, authors, specifies package channels (`robostack-humble`, `conda-forge`), lists supported platforms (e.g., `linux-64`), and includes sections for tasks and dependencies.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/tutorials/ros2.md#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[workspace]\nname = \"my_ros2_project\"\nversion = \"0.1.0\"\ndescription = \"Add a short description here\"\nauthors = [\"User Name <user.name@email.url>\"]\nchannels = [\"robostack-humble\", \"conda-forge\"]\n# Your project can support multiple platforms, the current platform will be automatically added.\nplatforms = [\"linux-64\"]\n\n[tasks]\n\n[dependencies]\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Anaconda.org using Conda Token\nDESCRIPTION: Example of logging into anaconda.org using a conda token, which is included in the URL for authentication.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/deployment/authentication.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npixi auth login anaconda.org --conda-token xy-72b914cc-c105-4ec7-a969-ab21d23480ed\n```\n\n----------------------------------------\n\nTITLE: Installing Pixi from Source with Cargo\nDESCRIPTION: Command to build and install Pixi directly from the GitHub repository using Rust's Cargo package manager.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/README.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ncargo install --locked --git https://github.com/prefix-dev/pixi.git pixi\n```\n\n----------------------------------------\n\nTITLE: Pixi Dependencies Section (TOML)\nDESCRIPTION: Specifies Conda dependencies for a Pixi project in 'pyproject.toml', under the '[tool.pixi.dependencies]' section. Pixi uses this to resolve and install necessary packages via Conda.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/switching_from/poetry.md#2025-04-23_snippet_15\n\nLANGUAGE: toml\nCODE:\n```\n[tool.pixi.dependencies]\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Options in Pixi TOML\nDESCRIPTION: TOML configuration for S3 options in pixi.toml file. This approach is useful for custom S3-compatible hosts rather than using AWS configuration.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/deployment/s3.md#2025-04-23_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[workspace.s3-options.my-bucket]\nendpoint-url = \"https://my-s3-host\"\nregion = \"us-east-1\"\nforce-path-style = false\n```\n\n----------------------------------------\n\nTITLE: Package Configuration in Pixi Manifest\nDESCRIPTION: Defines package-specific properties for building in the Pixi manifest.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/build/getting_started.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n--8<-- \"docs/source_files/pixi_workspaces/pixi_build/getting_started/pixi.toml:package\"\n```\n\n----------------------------------------\n\nTITLE: Installing a PyPI Package with Pixi (Shell)\nDESCRIPTION: Installs a package from PyPI (e.g., 'numpy') into a Pixi environment using the '--pypi' flag. This signals Pixi to use the PyPI ecosystem instead of conda for resolution and installation. Pixi must be installed, and network access to PyPI is required.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/switching_from/poetry.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npixi add --pypi numpy\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Pixi Tasks\nDESCRIPTION: Shows how to set environment variables for a Pixi task in the pixi.toml file. These variables can be overwritten from the shell when running the task.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/workspace/advanced_tasks.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[tasks]\necho = { cmd = \"echo $ARGUMENT\", env = { ARGUMENT = \"hello\" } }\n```\n\n----------------------------------------\n\nTITLE: Installing Pixi Environment with Keyring\nDESCRIPTION: Command to install a Pixi environment with keyring PyPI authentication enabled.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/deployment/authentication.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n# From an existing pixi project\npixi install --pypi-keyring-provider subprocess\n```\n\n----------------------------------------\n\nTITLE: Adding a Package Version Constraint in pyproject.toml - TOML\nDESCRIPTION: Shows the syntax for specifying a package dependency with version constraints in the pyproject.toml file under the '[tool.pixi.dependencies]' section. Inputs are the package name (pygments) and version specifier, ensuring the project uses a compatible version from Conda. Pixi uses this configuration to resolve and install dependencies.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/tutorial.md#2025-04-23_snippet_28\n\nLANGUAGE: toml\nCODE:\n```\n[tool.pixi.dependencies]\\npygments = \"=2.19.1,<3\"\n```\n\n----------------------------------------\n\nTITLE: Installing Multiple Dependencies in Pixi Global Environment\nDESCRIPTION: Example showing how to install multiple dependencies in a named global environment while customizing exposed binary names\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/CHANGELOG.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\npixi global install \\\n    --environment science \\\n    --expose scipython=ipython \\\n    ipython scipy\n```\n\n----------------------------------------\n\nTITLE: Adding Python Code to the Project\nDESCRIPTION: This snippet demonstrates adding a new function to the project's __init__.py file, which uses the 'rich' library for formatted output.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/tutorial.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom rich import print\n\ndef hello():\n    return \"Hello, [bold magenta]World[/bold magenta]!\", \":vampire:\"\n\ndef say_hello():\n    print(*hello())\n```\n\n----------------------------------------\n\nTITLE: Activating Pixi Environment with eval and shell-hook (Shell)\nDESCRIPTION: This sequence of shell commands demonstrates using `eval \"$(pixi shell-hook)\"` to activate the Pixi environment directly in the current shell, mimicking the behavior of `conda activate`. It shows checking for the `python` executable before and after activation to confirm success. Note that this traditional activation method is discouraged due to complexities in deactivation; `pixi shell` is recommended instead.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/workspace/environment.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ which python\npython not found\n$ eval \"$(pixi shell-hook)\"\n$ (default) which python\n/path/to/project/.pixi/envs/default/bin/python\n```\n\n----------------------------------------\n\nTITLE: Running a ROS 2 Node using Pixi Run\nDESCRIPTION: Executes the `turtlesim_node` from the `turtlesim` package within the Pixi-managed environment using the `pixi run` command. This command ensures the ROS 2 command is run with the correct environment variables and paths set by Pixi.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/tutorials/ros2.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npixi run ros2 run turtlesim turtlesim_node\n```\n\n----------------------------------------\n\nTITLE: Expanded Multi-Environment Pixi Manifest in TOML\nDESCRIPTION: This snippet shows an expanded version of the multi-environment Pixi manifest, explicitly defining the default feature and environments. It illustrates how Pixi interprets the configuration behind the scenes.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/getting_started.md#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[workspace]\nchannels = [\"conda-forge\"]\nname = \"hello-world\"\nplatforms = [\"linux-64\", \"osx-arm64\", \"win-64\"]\n\n[feature.default.tasks]\nstart = 'python hello.py'\n\n[feature.default.dependencies]\ncowpy = \"1.1.*\"\n\n[feature.py312.dependencies]\npython = \"3.12.*\"\n\n[feature.py313.dependencies]\npython = \"3.13.*\"\n\n[environments]\ndefault = [\"default\"]\npy312 = [\"default\", \"py312\"]\npy313 = [\"default\", \"py313\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring PyPI with Keyring in Pixi Manifest\nDESCRIPTION: TOML configuration examples for different PyPI registry types that use keyring authentication.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/deployment/authentication.md#2025-04-23_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[pypi-options]\nindex-url = \"https://your_username@custom-registry.com/simple\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Shell Options in Pixi (TOML)\nDESCRIPTION: This snippet illustrates configuring shell-specific behaviors in Pixi via the 'shell' section of config.toml. It includes toggling the display of the (pixi) prompt prefix, forcing environment re-activation, and enabling/disabling autocompletion scripts sourcing. Values can be set to 'true' or 'false'. These options affect the operation of the 'pixi shell' subcommand and require no additional dependencies beyond Pixi.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_configuration.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[shell]\nchange-ps1 = false\nforce-activate = true\nsource-completion-scripts = false\n\n```\n\n----------------------------------------\n\nTITLE: Poetry Dependencies Section (TOML)\nDESCRIPTION: Lists the Python package dependencies for a Poetry project within the 'pyproject.toml' file. All standard and optional dependencies are declared here and managed by Poetry's resolver.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/switching_from/poetry.md#2025-04-23_snippet_14\n\nLANGUAGE: toml\nCODE:\n```\n[tool.poetry.dependencies]\n```\n\n----------------------------------------\n\nTITLE: Defining Recipe.yaml for Rattler-Build\nDESCRIPTION: This yaml file describes how rattler-build should build the package. It includes source configuration, build script, and dependency specifications for both build and host environments.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/build/advanced_cpp.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n--8<-- \"docs/source_files/pixi_workspaces/pixi_build/advanced_cpp/recipe.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Example direnv Workflow with Pixi\nDESCRIPTION: Demonstration of the direnv workflow showing how it blocks initial access, requires approval, activates the environment when entering the project directory, and deactivates it when leaving.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/third_party/direnv.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ cd my-project\ndirenv: error /my-project/.envrc is blocked. Run `direnv allow` to approve its content\n$ direnv allow\ndirenv: loading /my-project/.envrc\n✔ Project in /my-project is ready to use!\ndirenv: export +CONDA_DEFAULT_ENV +CONDA_PREFIX +PIXI_ENVIRONMENT_NAME +PIXI_ENVIRONMENT_PLATFORMS +PIXI_PROJECT_MANIFEST +PIXI_PROJECT_NAME +PIXI_PROJECT_ROOT +PIXI_PROJECT_VERSION +PIXI_PROMPT ~PATH\n$ which python\n/my-project/.pixi/envs/default/bin/python\n$ cd ..\ndirenv: unloading\n$ which python\npython not found\n```\n\n----------------------------------------\n\nTITLE: Building pybind11 Modules with Pixi\nDESCRIPTION: This command compiles the C++ code, generates Python bindings, and creates distribution packages in the 'dist' folder.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/pybind11/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npixi run build\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom ROS 2 C++ Package\nDESCRIPTION: Uses `pixi run` to execute `ros2 pkg create` for generating a C++ ROS 2 package. It creates `my_cpp_package` with build type `ament_cmake` in the `src` directory, including a node named `my_cpp_node`.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/tutorials/ros2.md#2025-04-23_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\npixi run ros2 pkg create --build-type ament_cmake --destination-directory src --node-name my_cpp_node my_cpp_package\n```\n\n----------------------------------------\n\nTITLE: Adding Task to Pixi Configuration\nDESCRIPTION: Command to create a new task in the Pixi configuration for running the Python script.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/index.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npixi task add start python hello.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Devcontainer with Secret Management for Private Conda Channels\nDESCRIPTION: This devcontainer.json snippet demonstrates how to add secrets for authenticating with private conda channels. It uses the build options to pass a token as a secret that can be used in the build process.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/editor/vscode.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"build\": \"Dockerfile\",\n    \"context\": \"..\",\n    \"options\": [\n        \"--secret\",\n        \"id=prefix_dev_token,env=PREFIX_DEV_TOKEN\",\n    ],\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Running pixi-diff to Compare Lockfiles\nDESCRIPTION: Example command showing how to use pixi-diff to compare two lockfiles and output the differences as a JSON object. The output shows added/removed/changed dependencies across environments.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/third_party/pixi_diff.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pixi-diff --before pixi.lock.old --after pixi.lock.new\n{\n  \"version\": 1,\n  \"environment\": {\n    \"default\": {\n      \"osx-arm64\": [\n        {\n          \"name\": \"libmpdec\",\n          \"before\": null,\n          \"after\": {\n            \"conda\": \"https://conda.anaconda.org/conda-forge/osx-arm64/libmpdec-4.0.0-h99b78c6_0.conda\",\n            \"sha256\": \"f7917de9117d3a5fe12a39e185c7ce424f8d5010a6f97b4333e8a1dcb2889d16\",\n            \"md5\": \"7476305c35dd9acef48da8f754eedb40\",\n            \"depends\": [\n              \"__osx >=11.0\"\n            ],\n            \"license\": \"BSD-2-Clause\",\n            \"license_family\": \"BSD\",\n            \"size\": 69263,\n            \"timestamp\": 1723817629767\n          },\n          \"type\": \"conda\"\n        },\n// ...\n```\n\n----------------------------------------\n\nTITLE: Using Pixi Reinstall Command in Bash\nDESCRIPTION: Demonstrates the basic usage of the 'pixi reinstall' command. This command can be used to reinstall specific packages or entire environments, with various options for customization.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/reinstall.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi reinstall [OPTIONS] [PACKAGE]...\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Tools with Pixi Global Install\nDESCRIPTION: This example shows how to add multiple tools at once using the pixi global install command without specifying an environment. It creates separate non-interfering environments for each tool while exposing only the minimum required binaries.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/global_tools/examples.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npixi global install pixi-pack rattler-build\n```\n\nLANGUAGE: toml\nCODE:\n```\n[envs.pixi-pack]\nchannels = [\"conda-forge\"]\ndependencies= { pixi-pack = \"*\" }\nexposed = { pixi-pack = \"pixi-pack\" }\n\n[envs.rattler-build]\nchannels = [\"conda-forge\"]\ndependencies = { rattler-build = \"*\" }\nexposed = { rattler-build = \"rattler-build\" }\n```\n\n----------------------------------------\n\nTITLE: Using Pixi Workspace Name Command in Bash\nDESCRIPTION: This snippet shows the usage syntax for the 'pixi workspace name' command. It demonstrates how to invoke the command with optional arguments and subcommands.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/workspace/name.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi workspace name [OPTIONS] <COMMAND>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Platform Support in Pyproject TOML\nDESCRIPTION: Example pyproject.toml configuration for Pixi, showing how to specify supported platforms, override dependencies for specific targets, and define platform-specific activation scripts within the pyproject.toml structure.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/workspace/multi_platform_configuration.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[tool.pixi.workspace]\n# Default workspace info....\n# A list of platforms you are supporting with your package.\nplatforms = [\"win-64\", \"linux-64\", \"osx-64\", \"osx-arm64\"]\n\n[tool.pixi.dependencies]\npython = \">=3.8\"\n\n[tool.pixi.target.win-64.dependencies]\n# Overwrite the needed python version only on win-64\npython = \"~=3.7.0\"\n\n\n[tool.pixi.activation]\nscripts = [\"setup.sh\"]\n\n[tool.pixi.target.win-64.activation]\n# Overwrite activation scripts only for windows\nscripts = [\"setup.bat\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Pixi for Self-hosted Runners in GitHub Actions\nDESCRIPTION: This snippet demonstrates how to configure the setup-pixi action for self-hosted runners, including post-cleanup and custom binary path settings.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/ci/github_actions.md#2025-04-23_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n- uses: prefix-dev/setup-pixi@v0.8.3\n  with:\n    post-cleanup: true\n    pixi-bin-path: ${{ runner.temp }}/bin/pixi # (1)!\n```\n\n----------------------------------------\n\nTITLE: Installing a Conda Package Globally with Pixi - Bash\nDESCRIPTION: This bash snippet demonstrates how to use Pixi to globally install a conda package (in this case, 'cowpy') into its own isolated environment. This method works similarly to tools like pipx and condax for package isolation. The command requires Pixi to be pre-installed in the environment, and the package name should be specified as an argument. The output is a globally installed conda environment usable via Pixi.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/README.md#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\npixi global install cowpy\n```\n\n----------------------------------------\n\nTITLE: Global S3 Configuration for Pixi\nDESCRIPTION: TOML configuration for setting up global S3 options in Pixi's configuration file. This applies to all projects using the configured S3 bucket.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/deployment/s3.md#2025-04-23_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[s3-options.my-bucket]\nendpoint-url = \"https://my-s3-host\"\nregion = \"us-east-1\"\nforce-path-style = false\n```\n\n----------------------------------------\n\nTITLE: Specifying File System-based Conda Channels (TOML)\nDESCRIPTION: This snippet shows the use of absolute file system paths as Conda channels, demonstrating Pixi's support for local package hosting. Place the absolute path(s) in the channels array alongside remote channels as needed. Useful for internal or offline environments.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_manifest.md#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\nchannels = [\n  \"conda-forge\",\n  \"/absolute/path/to/channel\"\n]\n\n```\n\n----------------------------------------\n\nTITLE: Checking PyTorch Environment Configuration with PyPI\nDESCRIPTION: Shell commands to run Python code checking PyTorch version and CUDA availability in different Pixi environments. These commands allow verifying that the PyPI-based PyTorch installation is working correctly.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/pytorch.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\npixi run --environment cpu python -c \"import torch; print(torch.__version__); print(torch.cuda.is_available())\"\npixi run -e gpu python -c \"import torch; print(torch.__version__); print(torch.cuda.is_available())\"\n```\n\n----------------------------------------\n\nTITLE: Querying specific configuration values with pixi\nDESCRIPTION: Example of using the 'pixi config list' command to view a specific configuration value. This command retrieves the 'default-channels' configuration setting.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/config/list.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npixi config list default-channels\n```\n\n----------------------------------------\n\nTITLE: Building and Running a Custom C++ Node\nDESCRIPTION: Demonstrates building the C++ package using the previously defined `build` task, passing CMake arguments (`--cmake-args -G Ninja`) to specify the Ninja generator. After building, it runs the custom C++ node `my_cpp_node` from `my_cpp_package` using `pixi run`.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/tutorials/ros2.md#2025-04-23_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\n# Passing arguments to the build command to build with Ninja, add them to the manifest if you want to default to ninja.\npixi run build --cmake-args -G Ninja\npixi run ros2 run my_cpp_package my_cpp_node\n```\n\n----------------------------------------\n\nTITLE: Source Dependencies Configuration\nDESCRIPTION: Defines source dependencies either through local paths or git repositories, specifying how the package should be sourced for building.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/build/getting_started.md#2025-04-23_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n--8<-- \"docs/source_files/pixi_workspaces/pixi_build/getting_started/pixi.toml:dependencies\"\n```\n\n----------------------------------------\n\nTITLE: Running LightGBM Classification Model\nDESCRIPTION: This command runs the LightGBM classification model on the Wisconsin Breast Cancer dataset using the pixi package manager.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/lightgbm/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi run start\n```\n\n----------------------------------------\n\nTITLE: Basic setup-pixi GitHub Action Configuration\nDESCRIPTION: Basic configuration for the setup-pixi GitHub Action that installs a specific version of Pixi, enables caching, and sets up authentication with prefix.dev.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/ci/github_actions.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- uses: prefix-dev/setup-pixi@v0.8.3\n  with:\n    pixi-version: v0.46.0\n    cache: true\n    auth-host: prefix.dev\n    auth-token: ${{ secrets.PREFIX_DEV_TOKEN }}\n- run: pixi run test\n```\n\n----------------------------------------\n\nTITLE: Build System Configuration\nDESCRIPTION: Specifies the build backend and channels used for building the package. Uses pixi-build-python backend for Python package building.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/build/getting_started.md#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n--8<-- \"docs/source_files/pixi_workspaces/pixi_build/getting_started/pixi.toml:build-system\"\n```\n\n----------------------------------------\n\nTITLE: Usage of pixi upgrade command\nDESCRIPTION: Shows the basic usage syntax for the 'pixi upgrade' command, including optional arguments and packages.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/upgrade.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npixi upgrade [OPTIONS] [PACKAGES]...\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Environments without Default Features in TOML\nDESCRIPTION: Demonstrates how to create a custom environment that excludes the default feature, useful for specialized environments like linting.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/workspace/multi_environment.md#2025-04-23_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\npython = \"*\"\nnumpy = \"*\"\n\n[feature.lint.dependencies]\npre-commit = \"*\"\n\n[environments]\nlint = {features = [\"lint\"], no-default-feature = true}\n```\n\n----------------------------------------\n\nTITLE: Configuring Channel Mirrors in Pixi (TOML)\nDESCRIPTION: This snippet presents an example of how to set up Conda channel mirror configurations in config.toml under the 'mirrors' section. Mirrors can redirect or proxy access to upstream channels, generally for performance or security. Requires knowledge of available mirrors and their URLs. No further dependencies are needed beyond Pixi.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_configuration.md#2025-04-23_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[mirrors]\n[mirrors.conda-forge]\nurl = \"https://local-mirror/conda-forge\"\n[mirrors.bioconda]\nurl = \"https://local-mirror/bioconda\"\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Activation Scripts and Environment Variables in TOML\nDESCRIPTION: Demonstrates how to set up activation scripts and environment variables for different platforms using the activation table in a Pixi manifest file.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_manifest.md#2025-04-23_snippet_30\n\nLANGUAGE: toml\nCODE:\n```\n[activation]\nscripts = [\"env_setup.sh\"]\nenv = { ENV_VAR = \"value\" }\n\n# To support windows platforms as well add the following\n[target.win-64.activation]\nscripts = [\"env_setup.bat\"]\n\n[target.linux-64.activation.env]\nENV_VAR = \"linux-value\"\n\n# You can also reference existing environment variables, but this has\n# to be done separately for unix-like operating systems and Windows\n[target.unix.activation.env]\nENV_VAR = \"$OTHER_ENV_VAR/unix-value\"\n\n[target.win.activation.env]\nENV_VAR = \"%OTHER_ENV_VAR%\\\\windows-value\"\n```\n\n----------------------------------------\n\nTITLE: Installing direnv via Pixi Global Command\nDESCRIPTION: Command to install direnv as a global tool using Pixi's global install feature.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/third_party/direnv.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi global install direnv\n```\n\n----------------------------------------\n\nTITLE: Displaying Pixi Cache Directory Environment Variable\nDESCRIPTION: Shows the environment variable PIXI_CACHE_DIR, which defines the directory where Pixi stores its cache. If not set, it falls back to other environment variables or default locations.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/environment_variables.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nPIXI_CACHE_DIR\n```\n\n----------------------------------------\n\nTITLE: PyPI Options Configuration\nDESCRIPTION: Configuration for PyPI registry options including custom index URLs and build settings.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_manifest.md#2025-04-23_snippet_21\n\nLANGUAGE: toml\nCODE:\n```\n[pypi-options]\nindex-url = \"https://pypi.org/simple\"\nextra-index-urls = [\"https://example.com/simple\"]\nfind-links = [{path = './links'}]\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Platform Activation Scripts in Pixi\nDESCRIPTION: Demonstrates how to define platform-specific activation scripts in `pixi.toml` for a project supporting multiple platforms (Linux and Windows). It sets a default script and then uses the `[target.win-64.activation]` table to override the script specifically for the `win-64` platform.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/tutorials/ros2.md#2025-04-23_snippet_12\n\nLANGUAGE: toml\nCODE:\n```\n[workspace]\nplatforms = [\"linux-64\", \"win-64\"]\n\n[activation]\nscripts = [\"install/setup.sh\"]\n[target.win-64.activation]\nscripts = [\"install/setup.bat\"]\n```\n\n----------------------------------------\n\nTITLE: Usage of Pixi Global Sync Command\nDESCRIPTION: Shows the basic usage syntax for the 'pixi global sync' command. This command can be run with various options to customize its behavior.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/global/sync.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi global sync [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Pixi Global Install Examples\nDESCRIPTION: Various examples showing how to use the 'pixi global install' command with different options including installing multiple packages, adding dependencies, creating aliases, and working with environments.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/global/install.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npixi global install starship nushell ripgrep bat\npixi global install jupyter --with polars\npixi global install --expose python3.8=python python=3.8\npixi global install --environment science --expose jupyter --expose ipython jupyter ipython polars\n```\n\n----------------------------------------\n\nTITLE: Solving and Visualizing Lorenz System in Python\nDESCRIPTION: This snippet calls the solve_lorenz function to compute and visualize the Lorenz system trajectories with default parameters. It demonstrates how to use the function and obtain the results.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/jupyterlab/LorenzDifferentialEquations.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nt, x_t = solve_lorenz(angle=0, N=10)\n```\n\n----------------------------------------\n\nTITLE: Defining Default System Requirements for Linux in TOML\nDESCRIPTION: Specifies the minimum Linux kernel version and glibc version required for a Pixi workspace on Linux systems.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/workspace/system_requirements.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[system-requirements]\nlinux = \"4.18\"\nlibc = { family = \"glibc\", version = \"2.28\" }\n```\n\n----------------------------------------\n\nTITLE: Listing Package Versions for Python 3.11 Environment\nDESCRIPTION: This shell command and its output show the package versions used in the Python 3.11 environment, including the specific build of cpp_math.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/build/variants.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ pixi list --environment py311\nPackage            Version     Build               Size       Kind   Source\npython             3.11.11     h9e4cc4f_1_cpython  29.2 MiB   conda  python\ncpp_math    0.1.0       py311h43a39b2_0                conda  cpp_math\npython_rich       0.1.0       pyhbf21a9e_0                   conda  python_rich\n```\n\n----------------------------------------\n\nTITLE: Using the Pixi Build Command in Bash\nDESCRIPTION: Basic usage pattern for the 'pixi build' command showing the command structure with optional parameters.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/build.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi build [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Setting up Pixi autocompletion for PowerShell\nDESCRIPTION: This command sets up autocompletion for Pixi in PowerShell. It should be added to the PowerShell profile file.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/advanced/installation.md#2025-04-23_snippet_14\n\nLANGUAGE: powershell\nCODE:\n```\n(& pixi completion --shell powershell) | Out-String | Invoke-Expression\n```\n\n----------------------------------------\n\nTITLE: Conda-token Authentication for Pixi\nDESCRIPTION: GitHub Action configuration for authenticating with anaconda.org or a Quetz instance using a conda token stored in GitHub secrets.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/ci/github_actions.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- uses: prefix-dev/setup-pixi@v0.8.3\n  with:\n    auth-host: anaconda.org # (1)!\n    auth-conda-token: ${{ secrets.CONDA_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Conda Channels (TOML)\nDESCRIPTION: Shows how to specify a list of conda channels using the channels key under the [workspace] table. This allows Pixi to resolve package dependencies from multiple sources, such as conda-forge and bioconda. Each channel is added as a string in the channels array; ordering determines priority when channel-priority is set to strict.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_manifest.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nchannels = [\n  \"conda-forge\",\n  \"bioconda\",\n  \"defaults\"\n]\n\n```\n\n----------------------------------------\n\nTITLE: Installing PyTorch from PyPI in pyproject.toml\nDESCRIPTION: Configuration for installing PyTorch from PyPI using uv integration in pyproject.toml. Enables access to PyTorch versions not available in conda-forge or other channels.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/pytorch.md#2025-04-23_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n--8<-- \"docs/source_files/pyproject_tomls/pytorch-pypi.toml:minimal\"\n```\n\n----------------------------------------\n\nTITLE: Installing Python with Version Constraint in Pixi\nDESCRIPTION: This shell command shows how to install a specific version of Python globally using Pixi CLI.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/global_tools/manifest.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npixi global install \"python<3.12\"\n```\n\n----------------------------------------\n\nTITLE: Authenticating with S3 Bucket\nDESCRIPTION: Examples of logging into an S3 bucket using access keys and optionally a session token for temporary credentials.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/deployment/authentication.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npixi auth login s3://my-bucket --s3-access-key-id <access-key-id> --s3-secret-access-key <secret-access-key>\n# if your key uses a session token, you can also use:\npixi auth login s3://my-bucket --s3-access-key-id <access-key-id> --s3-secret-access-key <secret-access-key> --s3-session-token <session-token>\n```\n\n----------------------------------------\n\nTITLE: Configuring RStudio Environment in Pixi.toml\nDESCRIPTION: Configuration file that sets up an RStudio environment with R and ggplot2 dependencies across multiple platforms.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/editor/r_studio.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[workspace]\nname = \"r\"\nchannels = [\"conda-forge\"]\nplatforms = [\"linux-64\", \"osx-64\", \"osx-arm64\"]\n\n[target.linux.tasks]\nrstudio = \"rstudio\"\n\n[target.osx.tasks]\nrstudio = \"open -a rstudio\"\n# or alternatively with the full path:\n# rstudio = \"/Applications/RStudio.app/Contents/MacOS/RStudio\"\n\n[dependencies]\nr = \">=4.3,<5\"\nr-ggplot2 = \">=3.5.0,<3.6\"\n```\n\n----------------------------------------\n\nTITLE: Extending PATH Environment Variable in Pixi Task\nDESCRIPTION: Shows how to extend an existing environment variable (PATH) in a Pixi task configuration instead of completely overwriting it.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/workspace/advanced_tasks.md#2025-04-23_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[tasks]\necho = { cmd = \"echo $PATH\", env = { PATH = \"/tmp/path:$PATH\" } }\n```\n\n----------------------------------------\n\nTITLE: Using Pixi Global Expose Remove Command\nDESCRIPTION: Example usage of the pixi global expose remove command showing the basic syntax and available options for removing exposed binaries from the global environment.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/global/expose/remove.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi global expose remove [OPTIONS] [EXPOSED_NAME]...\n```\n\n----------------------------------------\n\nTITLE: Building and Running Docker Container for Production in Pixi Project\nDESCRIPTION: These commands build a Docker image for production and run it, exposing port 8000. The first command builds the image with the tag 'pixi-docker', and the second runs the container.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/docker/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker build -t pixi-docker .\ndocker run -p 8000:8000 pixi-docker\n```\n\n----------------------------------------\n\nTITLE: Using Stdin for Lockfile Comparison\nDESCRIPTION: Command example demonstrating how to use stdin (with the dash notation) to pipe git history content as input to pixi-diff for comparison with the current lockfile.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/third_party/pixi_diff.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit show HEAD~20:pixi.lock | pixi-diff --before - --after pixi.lock\n```\n\n----------------------------------------\n\nTITLE: Installing Pixi Without Workspace Setup in GitHub Actions\nDESCRIPTION: This snippet demonstrates how to use the setup-pixi action to only install pixi without setting up the current workspace.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/ci/github_actions.md#2025-04-23_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\n- uses: prefix-dev/setup-pixi@v0.8.3\n  with:\n    run-install: false\n```\n\n----------------------------------------\n\nTITLE: Starting JupyterLab using Pixi\nDESCRIPTION: This command demonstrates how to start JupyterLab using Pixi. It uses the 'pixi run' command to execute JupyterLab within the Pixi environment.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/editor/jupyterlab.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npixi run jupyter lab\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Pixi\nDESCRIPTION: This snippet shows how to run the tests using the Pixi task system, executing the 'test' task.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/tutorial.md#2025-04-23_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\npixi run test\n```\n\n----------------------------------------\n\nTITLE: Creating Dependent Pixi Task for Linting in Shell\nDESCRIPTION: Defines a custom task named 'lint' in `pixi.toml` that runs `cargo clippy`. It uses the `--depends-on fmt` flag to specify that the 'fmt' task (cargo fmt) should be executed before the 'lint' task when `pixi run lint` is called.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/tutorials/rust.md#2025-04-23_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\npixi task add lint \"cargo clippy\" --depends-on fmt\n```\n\n----------------------------------------\n\nTITLE: Configuring Pixi Activation Script for Linux/macOS\nDESCRIPTION: Shows how to configure Pixi to automatically source the ROS 2 workspace setup script (`install/setup.sh`) upon environment activation on Linux and macOS. This is done by adding an `[activation]` section with a `scripts` list to the `pixi.toml` file.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/tutorials/ros2.md#2025-04-23_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\n[activation]\nscripts = [\"install/setup.sh\"]\n```\n\n----------------------------------------\n\nTITLE: Specifying Build Variants in Pixi Configuration\nDESCRIPTION: This snippet shows how to specify the Python versions to build against in the workspace.build-variants section of the pixi.toml file.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/build/variants.md#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n--8<-- \"docs/source_files/pixi_workspaces/pixi_build/workspace_variants/pixi.toml:variants\"\n```\n\n----------------------------------------\n\nTITLE: System Requirements Configuration in TOML\nDESCRIPTION: Defining system requirements for Unix systems with specific libc versions and CUDA dependencies.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_manifest.md#2025-04-23_snippet_20\n\nLANGUAGE: toml\nCODE:\n```\n[system-requirements]\nlibc = \"2.28\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n[system-requirements]\ncuda = \"12\"\n```\n\n----------------------------------------\n\nTITLE: Starting Jupyter Lab Server with Pixi\nDESCRIPTION: This command starts the Jupyter Lab server using Pixi. After execution, it provides a link to access the examples via localhost.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/jupyterlab/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npixi run start\n```\n\n----------------------------------------\n\nTITLE: Running Python Code in Pixi Environment - Shell\nDESCRIPTION: Runs a one-line Python script inside a Pixi-managed environment using the 'pixi run' command. This demonstrates that dependencies are properly configured and Python modules can be executed in the context of the managed environment. Requires python and the specified module (pixi_py) to be installed in the environment.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/tutorial.md#2025-04-23_snippet_30\n\nLANGUAGE: shell\nCODE:\n```\npixi run python -c 'import pixi_py; pixi_py.say_hello()'\n```\n\n----------------------------------------\n\nTITLE: Using Pixi CLI to Export Conda Environment\nDESCRIPTION: This command exports the workspace environment to a conda environment.yaml file. It allows specifying an output path, target platform, and environment. The command also supports a global option for specifying the manifest path.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/workspace/export/conda-environment.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi workspace export conda-environment [OPTIONS] [OUTPUT_PATH]\n```\n\n----------------------------------------\n\nTITLE: Configuring ReadTheDocs build for pixi in YAML\nDESCRIPTION: This YAML configuration sets up the build process for pixi documentation on ReadTheDocs. It specifies the build version, Python version, and install steps for required dependencies.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/readthedocs-extend/docs/index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2\n\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.11\"\n\npython:\n  install:\n    - requirements: docs/requirements.txt\n\nsphinx:\n  configuration: docs/conf.py\n```\n\n----------------------------------------\n\nTITLE: Using 'pixi workspace requires-pixi get' Command in Bash\nDESCRIPTION: This command retrieves the minimum Pixi version required for the current workspace. It's used to ensure compatibility between the project and the Pixi tool.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/workspace/requires-pixi/get.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi workspace requires-pixi get\n```\n\n----------------------------------------\n\nTITLE: Creating Pixi Task for Testing in Shell\nDESCRIPTION: Defines a custom task named 'test' in `pixi.toml` using `pixi task add`. This task provides a shortcut for executing the project's tests via `cargo test` within the Pixi environment.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/tutorials/rust.md#2025-04-23_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\npixi task add test \"cargo test\"\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose for Development in Pixi Project\nDESCRIPTION: This command builds and runs a Docker container for development purposes using Docker Compose. It sets up the environment as defined in the docker-compose file.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/docker/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose up --build\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Host and Build Dependencies in Pixi TOML\nDESCRIPTION: Example of specifying platform-specific host and build dependencies in pixi.toml. It shows the resulting configuration after adding dependencies using Pixi CLI commands.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/workspace/multi_platform_configuration.md#2025-04-23_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[target.win-64.host-dependencies]\nposix = \"1.0.0.*\"\n\n[target.osx-64.build-dependencies]\nclang = \"16.0.6.*\"\n```\n\n----------------------------------------\n\nTITLE: Adding additional kernels and scientific packages to Pixi workspace\nDESCRIPTION: This snippet shows how to add more kernels and scientific packages to the Pixi workspace. It uses the 'pixi add' command to include bash_kernel, ipywidgets, matplotlib, numpy, and pandas.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/editor/jupyterlab.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npixi add bash_kernel ipywidgets matplotlib numpy pandas  # ...\n```\n\n----------------------------------------\n\nTITLE: Illustrating Pixi Environment Directory Structure (Shell)\nDESCRIPTION: This snippet shows the default directory structure for Pixi environments (e.g., `default`, `cuda`) located within the `.pixi/envs` folder in a project workspace. It demonstrates how environments are isolated and organized as standard conda environments, although managed exclusively through `pixi.toml`.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/workspace/environment.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n.pixi\n└── envs\n    ├── cuda\n    │   ├── bin\n    │   ├── conda-meta\n    │   ├── etc\n    │   ├── include\n    │   ├── lib\n    │   ...\n    └── default\n        ├── bin\n        ├── conda-meta\n        ├── etc\n        ├── include\n        ├── lib\n        ...\n```\n\n----------------------------------------\n\nTITLE: Initializing Pixi Workspace\nDESCRIPTION: Command to create a new Pixi workspace for the C++ math project.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/build/cpp.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi init cpp_math\n```\n\n----------------------------------------\n\nTITLE: Setting Environment-Specific System Requirements in TOML\nDESCRIPTION: Demonstrates how to set system requirements for a specific feature and environment in the manifest file.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/workspace/system_requirements.md#2025-04-23_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[feature.cuda.system-requirements]\ncuda = \"12\"\n\n[environments]\ncuda = [\"cuda\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Lock File Structure with Environments in YAML\nDESCRIPTION: Shows the structure of a lock file that includes the 'environments' field for specifying which environments a package belongs to.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/workspace/multi_environment.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- platform: linux-64\n  name: pre-commit\n  version: 3.3.3\n  category: main\n  environments:\n    - dev\n    - test\n    - lint\n  ...:\n- platform: linux-64\n  name: python\n  version: 3.9.3\n  category: main\n  environments:\n    - dev\n    - test\n    - lint\n    - py39\n    - default\n  ...:\n```\n\n----------------------------------------\n\nTITLE: Specifying the Project Name in Pixi Workspace (TOML)\nDESCRIPTION: This snippet demonstrates setting the name of the workspace using the name key. If absent, the directory's name is used as the default. The name value should be a short string, typically matching the repository or project name.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_manifest.md#2025-04-23_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\nname = \"myworkspace\"\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimal PyTorch Installation with CUDA via conda-forge in pixi.toml\nDESCRIPTION: A bare minimum configuration for installing PyTorch from the conda-forge channel with CUDA support using pixi.toml. This snippet demonstrates the basic structure needed for a CUDA-enabled PyTorch installation.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/pytorch.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n--8<-- \"docs/source_files/pixi_tomls/pytorch-conda-forge.toml:minimal\"\n```\n\n----------------------------------------\n\nTITLE: Handling Ambiguous Environment Selection in Pixi CLI\nDESCRIPTION: Shows the interactive CLI behavior when a task is defined in multiple environments, prompting the user to select the desired environment.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/workspace/multi_environment.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n➜ pixi run ambi\n? The task 'ambi' can be run in multiple environments.\n\nPlease select an environment to run the task in: ›\n❯ default # selecting default\n  test\n  dev\n\n✨ Pixi task (ambi in default): echo Ambi::Test\nAmbi::Test\n\n➜ pixi run --environment test ambi\n✨ Pixi task (ambi in test): echo Ambi::Test\nAmbi::Test\n\n➜ pixi run --environment dev ambi\n✨ Pixi task (ambi in dev): echo Ambi::Dev\nAmbi::Dev\n\n# dev is run in the default environment\n➜ pixi run dev\n✨ Pixi task (dev in default): echo Dev\nDev\n\n# dev is run in the dev environment\n➜ pixi run -e dev dev\n✨ Pixi task (dev in dev): echo Dev\nDev\n```\n\n----------------------------------------\n\nTITLE: Using the Pixi Info Command in Bash\nDESCRIPTION: This snippet demonstrates the basic usage of the 'pixi info' command. It shows the command syntax and available options for retrieving system and environment information.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/info.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi info [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Remote Channels by URL (TOML)\nDESCRIPTION: Demonstrates configuration of Pixi to use channels hosted on remote sources using explicit URLs. This is required for proprietary, prefix.dev, or Quetz servers. Place channel URLs in the channels list as shown.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_manifest.md#2025-04-23_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\nchannels = [\n  \"https://repo.prefix.dev/prefix-dev\",\n  \"conda-forge\"\n]\n\n```\n\n----------------------------------------\n\nTITLE: Generating API Documentation with pdoc in Python\nDESCRIPTION: This Python script uses pdoc to generate API documentation for the pixi project. It configures pdoc settings, specifies the modules to document, and sets the output directory. The script is likely executed as part of the documentation build process.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/readthedocs-override/docs/index.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pdoc\n\npdoc.render.configure(\n    template_directory=\"docs/pdoc_template\",\n    docformat=\"google\",\n)\n\nmodules = [\n    \"pixi\",\n    \"pixi.api\",\n    \"pixi.build\",\n    \"pixi.cli\",\n    \"pixi.commands\",\n    \"pixi.environment\",\n    \"pixi.lock\",\n    \"pixi.project\",\n    \"pixi.run\",\n    \"pixi.solver\",\n    \"pixi.spec\",\n    \"pixi.version\",\n]\n\npdoc.pdoc(*modules, output_directory=\"docs/api\")\n```\n\n----------------------------------------\n\nTITLE: Creating Pixi Task for Code Formatting in Shell\nDESCRIPTION: Defines a custom task named 'fmt' in `pixi.toml` using `pixi task add`. This task provides a shortcut for formatting the Rust code using `cargo fmt` within the Pixi environment.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/tutorials/rust.md#2025-04-23_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\npixi task add fmt \"cargo fmt\"\n```\n\n----------------------------------------\n\nTITLE: Running Factorial Calculation with Various Arguments\nDESCRIPTION: This snippet demonstrates different ways to run the factorial calculation using Pixi tasks with various arguments. It shows how to override default values for the number and engine used in the calculation.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/ctypes-factorial/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\npixi run factorial  # python script defines default n=10\npixi run factorial 100  # overrides default Python n\npixi run factorial -e ctypes  # overrides default Python engine\npixi run factorial 100 -e ctypes  # overrides both defaults\n```\n\n----------------------------------------\n\nTITLE: Defining Python Dependencies in pyproject.toml for Pixi\nDESCRIPTION: This example demonstrates how to specify Python dependencies in pyproject.toml, which Pixi will interpret as pypi-dependencies. It also shows the equivalent configuration in pixi.toml.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/pyproject_toml.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[project]\nname = \"my_project\"\nrequires-python = \">=3.9\"\ndependencies = [\n    \"numpy\",\n    \"pandas\",\n    \"matplotlib\",\n]\n\n[tool.pixi.workspace]\nchannels = [\"conda-forge\"]\nplatforms = [\"linux-64\", \"osx-arm64\", \"osx-64\", \"win-64\"]\n```\n\nLANGUAGE: toml\nCODE:\n```\n[workspace]\nname = \"my_project\"\nchannels = [\"conda-forge\"]\nplatforms = [\"linux-64\", \"osx-arm64\", \"osx-64\", \"win-64\"]\n\n[pypi-dependencies]\nnumpy = \"*\"\npandas = \"*\"\nmatplotlib = \"*\"\n\n[dependencies]\npython = \">=3.9\"\n```\n\n----------------------------------------\n\nTITLE: S3 Authentication with Pixi CLI\nDESCRIPTION: Bash command for authenticating with an S3 bucket using Pixi's auth login command. This stores credentials in Pixi's authentication storage.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/deployment/s3.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ pixi auth login --aws-access-key-id=... --aws-secret-access-key=... s3://my-s3-bucket\nAuthenticating with s3://my-s3-bucket\n$ pixi search my-private-package\n# ...\n```\n\n----------------------------------------\n\nTITLE: Defining Host Dependencies in TOML\nDESCRIPTION: Shows how to specify host dependencies in the TOML configuration file. These are typically base interpreters or libraries linked against during compilation.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_manifest.md#2025-04-23_snippet_27\n\nLANGUAGE: toml\nCODE:\n```\n[host-dependencies]\npython = \"~=3.10.3\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Features and Environment Activation Caching - TOML and Shell\nDESCRIPTION: Presents TOML and shell commands to enable experimental features in Pixi, specifically environment activation caching. Enabling caches activation environments to a per-project folder in JSON format. Shell commands allow the setting to be applied globally or locally. The configuration requires caution as caching is experimental and invalidation is non-trivial.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_configuration.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\npixi config set experimental.use-environment-activation-cache true --global\n\n# For a specific project\npixi config set experimental.use-environment-activation-cache true --local\n```\n\nLANGUAGE: toml\nCODE:\n```\n--8<-- \\\"docs/source_files/pixi_config_tomls/main_config.toml:experimental\\\"\n```\n\n----------------------------------------\n\nTITLE: Checking System CUDA Version with nvidia-smi\nDESCRIPTION: Shell command to check the CUDA version using NVIDIA's system management interface. This helps verify the CUDA version installed on the system if Pixi doesn't detect it automatically.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/pytorch.md#2025-04-23_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nnvidia-smi\n```\n\n----------------------------------------\n\nTITLE: Installing PyTorch from Legacy PyTorch Channel in pixi.toml\nDESCRIPTION: Configuration for installing PyTorch from the legacy PyTorch channel in pixi.toml. This method uses the original PyTorch channel but is considered legacy as it won't receive future updates.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/pytorch.md#2025-04-23_snippet_12\n\nLANGUAGE: toml\nCODE:\n```\n--8<-- \"docs/source_files/pixi_tomls/pytorch-from-pytorch-channel.toml:minimal\"\n```\n\n----------------------------------------\n\nTITLE: TOML Configuration for Custom Environment with Multiple Packages\nDESCRIPTION: This TOML snippet shows the resulting manifest entry after installing multiple packages in a custom environment.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/global_tools/manifest.md#2025-04-23_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[envs.my-env]\nchannels = [\"conda-forge\"]\ndependencies = { git = \"*\", vim = \"*\", python = \"*\" }\n# ...\n```\n\n----------------------------------------\n\nTITLE: Usage of Pixi Config Command in Bash\nDESCRIPTION: Demonstrates the basic usage syntax for the 'pixi config' command. This command is used to access various configuration management functions in Pixi.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/config.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi config <COMMAND>\n```\n\n----------------------------------------\n\nTITLE: Running Pixi Task with Different Argument\nDESCRIPTION: Demonstrates how to run a Pixi task with a different argument to process a different file. Also mentions the --verbose flag for debugging globs.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/workspace/advanced_tasks.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npixi run process-file data2\n```\n\nLANGUAGE: shell\nCODE:\n```\npixi run -v start\n```\n\n----------------------------------------\n\nTITLE: Using pixi global remove command\nDESCRIPTION: Demonstrates the basic usage syntax for the 'pixi global remove' command. This command is used to remove one or more packages from a specified global Pixi environment.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/global/remove.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi global remove [OPTIONS] <PACKAGE>...\n```\n\n----------------------------------------\n\nTITLE: Configuring SDL2 Project with CMake\nDESCRIPTION: This CMake script sets up an SDL2 project named 'sdl_example'. It finds the SDL2 package, sets the output directory, creates an executable, links SDL2 libraries, and defines installation rules. For MSVC, it sets the executable as a WIN32 application.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/pixi-build/cpp-sdl/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.7)\nproject(sdl_example)\n\nfind_package(SDL2 REQUIRED)\n\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/bin\")\n\nadd_executable(${PROJECT_NAME} src/main.cc)\n\nif (MSVC)\n    set_target_properties(${PROJECT_NAME} PROPERTIES WIN32_EXECUTABLE TRUE)\nendif()\n\ntarget_link_libraries(\n    ${PROJECT_NAME} PRIVATE\n    SDL2::SDL2\n    SDL2::SDL2main\n)\n\ninclude(GNUInstallDirs)\ninstall(\n    TARGETS ${PROJECT_NAME}\n    EXPORT ${PROJECT_NAME}Targets\n    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n    RUNTIME DESTINATION ${BINDIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Shell Completion Scripts for Pixi\nDESCRIPTION: Command to generate shell autocompletion scripts for Pixi. Supports multiple shells including bash, elvish, fish, nushell, powershell, and zsh.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/misc/packaging.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npixi completion --shell <SHELL>\n```\n\n----------------------------------------\n\nTITLE: Installing Global Tools and Running Commands with Pixi - Shell\nDESCRIPTION: This snippet demonstrates installing a tool globally using Pixi and executing a command from the installed package. Pixi must be present on the system, and the command adds the 'bat' tool to the global isolated environment. The following command runs 'bat' on the 'pixi.toml' file as an example usage. Note that tools installed this way are isolated from workspaces and environments.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/switching_from/conda.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n~~~shell\\npixi global install bat\\nbat pixi.toml\\n~~~\n```\n\n----------------------------------------\n\nTITLE: Installing Starship Fork with Pixi Support\nDESCRIPTION: Command to install a Pixi-enabled fork of Starship using the yolo-forge and conda-forge channels. This fork adds support for Pixi environments to the Starship prompt.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/third_party/starship.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi global install -c https://prefix.dev/yolo-forge -c conda-forge starship-fork-pavelzw\n```\n\n----------------------------------------\n\nTITLE: Advanced Pixi Task Configuration Example\nDESCRIPTION: Illustrates more advanced task definitions within `pixi.toml`. The `build` task now specifies `inputs` for caching purposes (only rebuilds if files in `src` change), and the `hello` task declares a dependency on the `build` task using `depends-on`, ensuring the project is built before the node is run.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/tutorials/ros2.md#2025-04-23_snippet_16\n\nLANGUAGE: toml\nCODE:\n```\n[tasks]\nsim = \"ros2 run turtlesim turtlesim_node\"\nbuild = {cmd = \"colcon build --symlink-install\", inputs = [\"src\"]}\nhello = { cmd = \"ros2 run my_package my_node\", depends-on = [\"build\"] }\n```\n\n----------------------------------------\n\nTITLE: Hetzner Object Storage Configuration for Pixi\nDESCRIPTION: TOML configuration snippet for Hetzner Object Storage. Specifies Hetzner-specific endpoint URL, region, and path style settings.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/deployment/s3.md#2025-04-23_snippet_15\n\nLANGUAGE: toml\nCODE:\n```\nendpoint-url = \"https://fsn1.your-objectstorage.com\"\nregion = \"US\"\nforce-path-style = false\n```\n\n----------------------------------------\n\nTITLE: Executing PATCH Version Bump with Pixi CLI - Shell\nDESCRIPTION: This snippet demonstrates how to invoke the Pixi CLI to increment the workspace version at the PATCH level. Prerequisites include having Pixi installed and a properly initialized workspace. The primary parameter is the 'patch' argument to 'pixi workspace version', which will update the workspace configuration and project files to reflect the incremented patch version. The command executes in a shell environment and expects corresponding configuration files to be present.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/workspace/version/patch.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npixi workspace version patch\n```\n\n----------------------------------------\n\nTITLE: Installing pixi-diff and Related Tools Globally\nDESCRIPTION: Command to globally install pixi-diff, pixi-diff-to-markdown, and md-tui tools using pixi's global install feature. These tools are available on conda-forge and enable lockfile comparison and visualization.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/third_party/pixi_diff.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi global install pixi-diff pixi-diff-to-markdown md-tui\n```\n\n----------------------------------------\n\nTITLE: Configuring Repodata Options - TOML\nDESCRIPTION: Demonstrates TOML configuration to control repodata fetching for Pixi. Dependencies include the core Pixi tool and a properly formatted config TOML file. Users can override the settings on a per-channel basis by specifying a channel prefix, providing granular control over package index data retrieval. Expects configuration under the appropriate TOML section; limitations depend on Pixi support for hierarchical overrides.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_configuration.md#2025-04-23_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n--8<-- \\\"docs/source_files/pixi_config_tomls/main_config.toml:repodata-config\\\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n--8<-- \\\"docs/source_files/pixi_config_tomls/main_config.toml:prefix-repodata-config\\\"\n```\n\n----------------------------------------\n\nTITLE: Exposing Executable with Custom Name in Pixi\nDESCRIPTION: This shell command shows how to install a package and expose its executable under a custom name using Pixi CLI.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/global_tools/manifest.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\npixi global install --expose bird=bat bat\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependency Groups in pyproject.toml for Pixi\nDESCRIPTION: This example shows how to define dependency groups in pyproject.toml, which Pixi interprets as features. It demonstrates the original pyproject.toml and how Pixi transforms it after initialization.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/pyproject_toml.md#2025-04-23_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[project]\nname = \"my_project\"\ndependencies = [\"package1\"]\n\n[dependency-groups]\ntest = [\"pytest\"]\ndocs = [\"sphinx\"]\ndev = [{include-group = \"test\"}, {include-group = \"docs\"}]\n```\n\nLANGUAGE: toml\nCODE:\n```\n[project]\nname = \"my_project\"\ndependencies = [\"package1\"]\n\n[dependency-groups]\ntest = [\"pytest\"]\ndocs = [\"sphinx\"]\ndev = [{include-group = \"test\"}, {include-group = \"docs\"}]\n\n[tool.pixi.workspace]\nchannels = [\"conda-forge\"]\nplatforms = [\"linux-64\"] # if executed on linux\n\n[tool.pixi.environments]\ndefault = {features = [], solve-group = \"default\"}\ntest = {features = [\"test\"], solve-group = \"default\"}\ndocs = {features = [\"docs\"], solve-group = \"default\"}\ndev = {features = [\"dev\"], solve-group = \"default\"}\n```\n\n----------------------------------------\n\nTITLE: Using the pixi config list command\nDESCRIPTION: Basic usage pattern for the 'pixi config list' command. It allows listing all configuration values or specifying a particular key to display. Various scope options determine whether the command applies to local, global, or system configuration.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/config/list.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi config list [OPTIONS] [KEY]\n```\n\n----------------------------------------\n\nTITLE: Adding a PyPI Package with Optional Dependencies\nDESCRIPTION: Command to add a PyPI package with extras (optional dependencies).\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/tutorial.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\npixi add \"flask[async]==3.1.0\" --pypi\n```\n\n----------------------------------------\n\nTITLE: Configuring Pixi Environment Activation in pixi.toml (TOML)\nDESCRIPTION: This placeholder indicates that environment activation behavior can be customized within the `pixi.toml` manifest file using the `[activation]` table. This allows adding custom activation scripts or injecting environment variables during the activation process. Refer to the linked reference documentation for specific syntax and options.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/workspace/environment.md#2025-04-23_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n--8<-- \"docs/source_files/pixi_tomls/activation.toml:activation\"\n```\n\n----------------------------------------\n\nTITLE: Starting Pixi Shell for ROS1 Noetic\nDESCRIPTION: Command to start a Pixi shell in the ROS1 Noetic environment, allowing execution of ROS1 commands like rostopic echo.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/turtlesim/README.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\npixi shell -e noetic\nrostopic echo /turtle1/cmd_vel\n```\n\n----------------------------------------\n\nTITLE: Defining Production and Test Environments with Solve Groups in TOML\nDESCRIPTION: Illustrates how to create production and test environments using solve groups to ensure consistent dependency versions across environments.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/workspace/multi_environment.md#2025-04-23_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[environments]\nprod = {features = [\"py39\"], solve-group = \"prod\"}\ntest_prod = {features = [\"py39\", \"test\"], solve-group = \"prod\"}\n```\n\n----------------------------------------\n\nTITLE: Global Environment Configuration Manifest\nDESCRIPTION: Example TOML manifest file showing configuration for multiple global Pixi environments with dependencies and exposed binaries\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/CHANGELOG.md#2025-04-23_snippet_14\n\nLANGUAGE: toml\nCODE:\n```\nversion = 1\n\n[envs.ipython]\nchannels = [\"conda-forge\"]\ndependencies = { ipython = \"*\" }\nexposed = { ipython = \"ipython\", ipython3 = \"ipython3\" }\n\n[envs.science]\nchannels = [\"conda-forge\"]\ndependencies = { ipython = \"*\", scipy = \"*\" }\nexposed = { scipython = \"ipython\" }\n```\n\n----------------------------------------\n\nTITLE: Usage of 'pixi global shortcut add' Command in Bash\nDESCRIPTION: This snippet demonstrates the basic usage syntax for the 'pixi global shortcut add' command. It shows how to specify options and arguments when running the command.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/global/shortcut/add.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi global shortcut add [OPTIONS] --environment <ENVIRONMENT> [PACKAGE]...\n```\n\n----------------------------------------\n\nTITLE: PyPI Dependency in pyproject.toml\nDESCRIPTION: The entry added to the dependencies list when installing a PyPI package.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/tutorial.md#2025-04-23_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\ndependencies = [\"black\"]\n```\n\n----------------------------------------\n\nTITLE: Cloudflare R2 Configuration for Pixi\nDESCRIPTION: TOML configuration snippet for Cloudflare R2 storage. Specifies endpoint URL, region (WEUR), and disables force-path-style for R2 compatibility.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/deployment/s3.md#2025-04-23_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\nendpoint-url = \"https://<account-id>.eu.r2.cloudflarestorage.com\"\nregion = \"WEUR\"\nforce-path-style = false\n```\n\n----------------------------------------\n\nTITLE: Specifying CUDA Version Requirement in TOML\nDESCRIPTION: Shows how to set a specific CUDA version requirement in the system-requirements table.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/workspace/system_requirements.md#2025-04-23_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[system-requirements]\ncuda = \"12\"  # Replace \"12\" with the specific CUDA version you intend to use\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Authentication - TOML\nDESCRIPTION: Shows TOML configuration required for managing S3 authentication within Pixi, using credentials stored in Pixi authentication storage rather than AWS defaults. This is necessary for deployments interacting with S3 resources via Pixi, with additional details available in the deployment documentation. Prerequisite: correct setup of Pixi authentication storage.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_configuration.md#2025-04-23_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\n--8<-- \\\"docs/source_files/pixi_config_tomls/main_config.toml:s3-options\\\"\n```\n\n----------------------------------------\n\nTITLE: Pixi Global Add Command Examples\nDESCRIPTION: Demonstrates practical examples of using the pixi global add command, including adding a single package and adding multiple packages with custom executable mapping.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/global/add.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npixi global add --environment python numpy\npixi global add --environment my_env pytest pytest-cov --expose pytest=pytest\n```\n\n----------------------------------------\n\nTITLE: Forcing Environment Activation and Ignoring Cache - Shell\nDESCRIPTION: Provides a shell command to force Pixi to activate an environment, ignoring cached activation results. This is useful for testing or in cases where the cache may be out of date. Requires Pixi CLI; outputs an activated environment regardless of cache validity.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_configuration.md#2025-04-23_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\npixi run/shell/shell-hook --force-activate\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Activation Scripts in Pixi TOML\nDESCRIPTION: Example of defining platform-specific activation scripts in pixi.toml. It demonstrates how to specify default scripts and override them for specific platforms like Windows.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/workspace/multi_platform_configuration.md#2025-04-23_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[activation]\nscripts = [\"setup.sh\", \"local_setup.bash\"]\n\n[target.win-64.activation]\nscripts = [\"setup.bat\", \"local_setup.bat\"]\n```\n\n----------------------------------------\n\nTITLE: Usage of 'pixi run' Command\nDESCRIPTION: Demonstrates the basic syntax for using the 'pixi run' command. It shows that the command can take options and one or more task arguments.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/run.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npixi run [OPTIONS] [TASK]...\n```\n\n----------------------------------------\n\nTITLE: Specifying OCI Registry Mirrors - TOML\nDESCRIPTION: Presents a TOML snippet for configuring OCI (Open Container Initiative) registry mirrors in Pixi. Useful for leveraging public mirrors such as the Github container registry maintained by conda-forge. Entries must match the OCI registry URLs. Prerequisite: familiarity with OCI and the Pixi configuration system.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_configuration.md#2025-04-23_snippet_17\n\nLANGUAGE: toml\nCODE:\n```\n--8<-- \\\"docs/source_files/pixi_config_tomls/oci_config.toml:oci-mirrors\\\"\n```\n\n----------------------------------------\n\nTITLE: Username/Password Authentication for Pixi\nDESCRIPTION: GitHub Action configuration for authenticating with an Artifactory instance using HTTP Basic Auth with username and password stored in GitHub secrets.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/ci/github_actions.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- uses: prefix-dev/setup-pixi@v0.8.3\n  with:\n    auth-host: custom-artifactory.com\n    auth-username: ${{ secrets.PIXI_USERNAME }}\n    auth-password: ${{ secrets.PIXI_PASSWORD }}\n```\n\n----------------------------------------\n\nTITLE: Executing Image Browser Function in Python\nDESCRIPTION: This snippet calls the browse_images function with the loaded digits dataset, creating an interactive image browser.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/jupyterlab/Image_Browsing.ipynb#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nbrowse_images(digits)\n```\n\n----------------------------------------\n\nTITLE: Defining Tasks in Multiple Environments using TOML\nDESCRIPTION: Illustrates how to define tasks in multiple environments, which can lead to ambiguous task selection and require user interaction.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/workspace/multi_environment.md#2025-04-23_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[workspace]\nname = \"test_ambiguous_env\"\nchannels = []\nplatforms = [\"linux-64\", \"win-64\", \"osx-64\", \"osx-arm64\"]\n\n[tasks]\ndefault = \"echo Default\"\nambi = \"echo Ambi::Default\"\n[feature.test.tasks]\ntest = \"echo Test\"\nambi = \"echo Ambi::Test\"\n\n[feature.dev.tasks]\ndev = \"echo Dev\"\nambi = \"echo Ambi::Dev\"\n\n[environments]\ndefault = [\"test\", \"dev\"]\ntest = [\"test\"]\ndev = [\"dev\"]\n```\n\n----------------------------------------\n\nTITLE: Using Pixi Workspace Environment Command in Bash\nDESCRIPTION: This snippet shows the basic usage syntax for the 'pixi workspace environment' command. It demonstrates how to use the command with options and subcommands.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/workspace/environment.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi workspace environment [OPTIONS] <COMMAND>\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Pixi on Linux\nDESCRIPTION: Command to remove the Pixi binary from a Linux system, which is the first step in uninstalling Pixi.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/README.md#2025-04-23_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nrm ~/.pixi/bin/pixi\n```\n\n----------------------------------------\n\nTITLE: PyPI Dependency with Extras\nDESCRIPTION: The entry in pyproject.toml for a PyPI package with optional dependencies.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/tutorial.md#2025-04-23_snippet_12\n\nLANGUAGE: toml\nCODE:\n```\ndependencies = [\"black\", \"flask[async]==3.1.0\"]\n```\n\n----------------------------------------\n\nTITLE: Installing Global Package with Automatic Binary Exposure\nDESCRIPTION: Example of globally installing a package (ansible) using Pixi, which automatically exposes the binary with the same name, even if the binary comes from a dependency.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/global_tools/concepts.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi global install ansible\n```\n\n----------------------------------------\n\nTITLE: Basic Pixi Global Add Command Syntax\nDESCRIPTION: Shows the basic command structure for adding packages to a Pixi global environment. Requires specifying an environment name and at least one package.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/global/add.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi global add [OPTIONS] --environment <ENVIRONMENT> <PACKAGE>...\n```\n\n----------------------------------------\n\nTITLE: Importing and Using the Compiled Module in Python\nDESCRIPTION: This Python code snippet demonstrates how to import and use the compiled module after installation.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/pybind11/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport your_module_name\n# Use your module here\n```\n\n----------------------------------------\n\nTITLE: Pixi Configuration Example Command\nDESCRIPTION: Example command showing how to set default channels configuration in Pixi. Demonstrates setting a JSON array value for channel configuration.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/config/set.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npixi config set default-channels '[\"conda-forge\", \"bioconda\"]'\n```\n\n----------------------------------------\n\nTITLE: Using Frozen or Locked Pixi Installation in GitHub Actions\nDESCRIPTION: This snippet illustrates how to specify frozen or locked installation modes when using the setup-pixi action.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/ci/github_actions.md#2025-04-23_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n- uses: prefix-dev/setup-pixi@v0.8.3\n  with:\n    locked: true\n    # or\n    frozen: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Environments with Features in TOML\nDESCRIPTION: Demonstrates how to define environments with various features and solve groups in a Pixi manifest file.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_manifest.md#2025-04-23_snippet_36\n\nLANGUAGE: toml\nCODE:\n```\n[environments]\ntest = {features = [\"test\"], solve-group = \"test\"}\nprod = {features = [\"prod\"], solve-group = \"test\"}\nlint = {features = [\"lint\"], no-default-feature = true}\n```\n\n----------------------------------------\n\nTITLE: Installing Pixi on Windows with PowerShell\nDESCRIPTION: PowerShell command to install Pixi on Windows systems. The script bypasses execution policy to run the installer from the internet.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\npowershell -ExecutionPolicy ByPass -c \"irm -useb https://pixi.sh/install.ps1 | iex\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Python Extension Module\nDESCRIPTION: This CMake script sets up a project named 'cpp_math' that will create a Python extension module. It finds the required Python components, locates the nanobind package, and configures the build and installation process.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/source_files/pixi_workspaces/pixi_build/workspace/packages/cpp_math/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20...3.27)\nproject(cpp_math)\n\nfind_package(Python 3.8 COMPONENTS Interpreter Development.Module REQUIRED)\n\nexecute_process(\n  COMMAND \"${Python_EXECUTABLE}\" -m nanobind --cmake_dir\n  OUTPUT_STRIP_TRAILING_WHITESPACE OUTPUT_VARIABLE nanobind_ROOT\n)\n\nexecute_process(\n    COMMAND ${Python_EXECUTABLE} -c \"import sysconfig; print(sysconfig.get_path('purelib'))\"\n    OUTPUT_VARIABLE PYTHON_SITE_PACKAGES\n    OUTPUT_STRIP_TRAILING_WHITESPACE\n)\n\nfind_package(nanobind CONFIG REQUIRED)\n\nnanobind_add_module(${PROJECT_NAME} src/math.cpp)\n\ninstall(\n    TARGETS ${PROJECT_NAME}\n    EXPORT ${PROJECT_NAME}Targets\n    LIBRARY DESTINATION ${PYTHON_SITE_PACKAGES}\n    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n    RUNTIME DESTINATION ${BINDIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies to Pixi Environment\nDESCRIPTION: Command to add Python and cowpy as dependencies to the Pixi environment.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/index.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npixi add cowpy python\n```\n\n----------------------------------------\n\nTITLE: Using pixi config unset Command\nDESCRIPTION: Basic usage syntax for the 'pixi config unset' command which requires a configuration key to unset and supports different configuration scopes.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/config/unset.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi config unset [OPTIONS] <KEY>\n```\n\n----------------------------------------\n\nTITLE: Using pixi workspace export conda-explicit-spec Command\nDESCRIPTION: This snippet demonstrates the basic usage of the 'pixi workspace export conda-explicit-spec' command. It requires an output directory argument and supports various options for customizing the export process.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/workspace/export/conda-explicit-spec.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi workspace export conda-explicit-spec [OPTIONS] <OUTPUT_DIR>\n```\n\n----------------------------------------\n\nTITLE: Backblaze B2 Configuration for Pixi\nDESCRIPTION: TOML configuration snippet for Backblaze B2 storage. Specifies B2-specific endpoint URL, region, and enables force-path-style for proper functionality.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/deployment/s3.md#2025-04-23_snippet_13\n\nLANGUAGE: toml\nCODE:\n```\nendpoint-url = \"https://s3.us-west-004.backblazeb2.com\"\nregion = \"us-west-004\"\nforce-path-style = true\n```\n\n----------------------------------------\n\nTITLE: Uninstalling a Package with Poetry (Shell)\nDESCRIPTION: Removes a package (such as 'numpy') from the Poetry-managed environment and configuration files. Also updates the lock file as needed. Poetry must be active in the shell.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/switching_from/poetry.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npoetry remove numpy\n```\n\n----------------------------------------\n\nTITLE: Running Linting for Pull Request Preparation\nDESCRIPTION: Command for running the linting tools to prepare code for a pull request using Pixi's lint task.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npixi run lint\n```\n\n----------------------------------------\n\nTITLE: TOML Configuration for Package with Shortcuts\nDESCRIPTION: This TOML snippet shows the manifest entry for a package (mss) that includes shortcuts for the start menu.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/global_tools/manifest.md#2025-04-23_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\n[envs.mss]\nchannels = [\"https://prefix.dev/conda-forge\"]\ndependencies = { mss = \"*\" }\nexposed = { ... }\nshortcuts = [\"mss\"]\n```\n\n----------------------------------------\n\nTITLE: Updating Python Version Requirement in cpp_math Package\nDESCRIPTION: This code snippet demonstrates how to change the Python version requirement in the cpp_math package's pixi.toml file from a specific version to any version.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/build/variants.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n--8<-- \"docs/source_files/pixi_workspaces/pixi_build/workspace_variants/packages/cpp_math/pixi.toml:host-dependencies\"\n```\n\n----------------------------------------\n\nTITLE: Defining Default System Requirements for macOS in TOML\nDESCRIPTION: Specifies the minimum macOS version required for a Pixi workspace on macOS systems.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/workspace/system_requirements.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[system-requirements]\nmacos = \"13.0\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Logging for Pixi in GitHub Actions\nDESCRIPTION: This example shows how to enable debug logging for the pixi executable by setting the log-level input in the setup-pixi action.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/ci/github_actions.md#2025-04-23_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n- uses: prefix-dev/setup-pixi@v0.8.3\n  with:\n    log-level: vvv # (1)!\n```\n\n----------------------------------------\n\nTITLE: Defining Conda-PyPI Package Mapping (JSON and TOML)\nDESCRIPTION: Illustrates a mapping from Conda package names to PyPI package names in JSON format, suitable for mapping cross-index dependencies. The conda-pypi-map table in TOML allows referencing mapping files or external URLs; Pixi will use these mappings to translate package names for resolution. If conda-forge is not present, Pixi defaults to prefix.dev's mapping.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_manifest.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jupyter-ros\": \"my-name-from-mapping\",\n  \"boltons\": \"boltons-pypi\"\n}\n\n```\n\nLANGUAGE: toml\nCODE:\n```\nconda-pypi-map = { \"conda-forge\" = \"https://example.com/mapping\", \"https://repo.prefix.dev/robostack\" = \"local/robostack_mapping.json\"}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Pixi Activation Script for Windows\nDESCRIPTION: Shows how to configure Pixi to automatically run the ROS 2 workspace setup batch script (`install/setup.bat`) upon environment activation on Windows. This is achieved by adding an `[activation]` section with a `scripts` list pointing to the `.bat` file in `pixi.toml`.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/tutorials/ros2.md#2025-04-23_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\n[activation]\nscripts = [\"install/setup.bat\"]\n```\n\n----------------------------------------\n\nTITLE: Using the Pixi Task Alias Command in Bash\nDESCRIPTION: This snippet demonstrates the usage syntax for the 'pixi task alias' command. It shows how to create an alias with optional arguments and dependencies.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/task/alias.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi task alias [OPTIONS] <ALIAS> <DEPENDS_ON>...\n```\n\n----------------------------------------\n\nTITLE: Referencing README File (TOML)\nDESCRIPTION: Demonstrates use of the readme key to specify the project documentation file. Path should be relative to the workspace root, such as README.md or README.rst. This file is optional but aids documentation discovery and tooling.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_manifest.md#2025-04-23_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\nreadme = \"README.md\"\n\n```\n\n----------------------------------------\n\nTITLE: Running Pixi Task in Python 3.13 Environment\nDESCRIPTION: This bash command demonstrates how to run the 'start' task in the Python 3.13 environment using Pixi.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/getting_started.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npixi run --environment=py313 start\n```\n\n----------------------------------------\n\nTITLE: Using pixi global update command in Bash\nDESCRIPTION: This command is used to update environments in the global environment. It allows specifying multiple environments and various configuration options.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/global/update.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi global update [OPTIONS] [ENVIRONMENTS]...\n```\n\n----------------------------------------\n\nTITLE: Finding Python Site-Packages Directory using Python in CMake\nDESCRIPTION: This snippet uses `execute_process` to run a short Python script that imports the `sysconfig` module and prints the path to the 'purelib' directory (platform-specific location for pure Python modules). This path is stored in the CMake variable `PYTHON_SITE_PACKAGES` and will be used later as the installation destination for the compiled C++ module.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/source_files/pixi_workspaces/pixi_build/advanced_cpp/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nexecute_process(\n    COMMAND ${Python_EXECUTABLE} -c \"import sysconfig; print(sysconfig.get_path('purelib'))\"\n    OUTPUT_VARIABLE PYTHON_SITE_PACKAGES\n    OUTPUT_STRIP_TRAILING_WHITESPACE\n) # (3)!\n```\n\n----------------------------------------\n\nTITLE: Using Pixi Config Append Command\nDESCRIPTION: Command syntax for appending values to pixi configuration list keys. Takes a key and value as required arguments, with optional flags to specify configuration scope (local, global, or system).\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/config/append.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi config append [OPTIONS] <KEY> <VALUE>\n```\n\n----------------------------------------\n\nTITLE: Using Conventional Commits for Git Commits\nDESCRIPTION: Examples of how to format commit messages following the conventional commits standard used by the Pixi maintainers.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit add FILES_YOU_CHANGED\n# This is the conventional commit convention:\ngit commit -m \"<type>[optional scope]: <description>\"\n# An example:\ngit commit -m \"feat: add xxx to the pixi.toml\"\n```\n\n----------------------------------------\n\nTITLE: Using Pixi Workspace Version Command\nDESCRIPTION: This snippet demonstrates the basic usage of the 'pixi workspace version' command. It shows the command structure and indicates that additional options and subcommands are available.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/workspace/version.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi workspace version [OPTIONS] <COMMAND>\n```\n\n----------------------------------------\n\nTITLE: No Build Isolation Configuration\nDESCRIPTION: Example of configuring build isolation settings for specific packages in the PyPI environment.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_manifest.md#2025-04-23_snippet_22\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\npytorch = \"2.4.0\"\n\n[pypi-options]\nno-build-isolation = [\"detectron2\"]\n\n[pypi-dependencies]\ndetectron2 = { git = \"https://github.com/facebookresearch/detectron2.git\", rev = \"5b72c27ae39f99db75d43f18fd1312e1ea934e60\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Image Browser Function in Python\nDESCRIPTION: This function creates an interactive image browser for the digits dataset. It uses matplotlib to display images and ipywidgets to create a slider for navigation.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/jupyterlab/Image_Browsing.ipynb#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef browse_images(digits):\n    n = len(digits.images)\n    def view_image(i):\n        plt.imshow(digits.images[i], cmap=plt.cm.gray_r, interpolation='nearest')\n        plt.title('Training: %s' % digits.target[i])\n        plt.show()\n    interact(view_image, i=(0,n-1))\n```\n\n----------------------------------------\n\nTITLE: Installing Keyring for PyPI Authentication\nDESCRIPTION: Commands for installing the keyring package globally with Pixi, including options for different registry backends.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/deployment/authentication.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npixi global install keyring\n```\n\n----------------------------------------\n\nTITLE: Creating Self-Contained Bash Script with Pixi Exec\nDESCRIPTION: This bash script uses pixi exec with a shebang line to create a self-contained script that runs the 'bat' utility without requiring manual dependency installation. The script uses /usr/bin/env to find pixi in the system PATH, creates a temporary environment with the bat dependency, and runs the script in that environment.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/advanced/shebang.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env -S pixi exec --spec bat -- bash -e\n\nbat my-file.json\n```\n\n----------------------------------------\n\nTITLE: Specifying Build Dependencies in TOML\nDESCRIPTION: Demonstrates how to define build dependencies in the TOML configuration. These are packages needed to build the workspace and are installed for the build machine architecture.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_manifest.md#2025-04-23_snippet_28\n\nLANGUAGE: toml\nCODE:\n```\n[build-dependencies]\ncmake = \"~=3.24\"\n```\n\n----------------------------------------\n\nTITLE: Host Dependencies Configuration\nDESCRIPTION: Specifies host dependencies including hatchling as the Python build backend required for building the package.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/build/getting_started.md#2025-04-23_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n--8<-- \"docs/source_files/pixi_workspaces/pixi_build/getting_started/pixi.toml:host-dependencies\"\n```\n\n----------------------------------------\n\nTITLE: Using AWS Credentials with Pixi CLI\nDESCRIPTION: Bash commands showing how to use AWS SSO login with Pixi. This sets up environment variables and logs in to AWS SSO before using Pixi to search for packages in an S3 bucket.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/deployment/s3.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ export AWS_CONFIG_FILE=/path/to/aws.config\n$ export AWS_PROFILE=conda\n$ aws sso login\nAttempting to automatically open the SSO authorization page in your default browser.\nIf the browser does not open or you wish to use a different device to authorize this request, open the following URL:\n\nhttps://my-company.awsapps.com/start/#/device\n\nThen enter the code:\n\nDTBC-WFXC\nSuccessfully logged into Start URL: https://my-company.awsapps.com/start\n$ pixi search -c s3://my-s3-bucket/channel my-private-package\n# ...\n```\n\n----------------------------------------\n\nTITLE: Running Visualization Script for ROS2 Humble\nDESCRIPTION: Command to run a script that visualizes the turtle in RViz for ROS2 Humble. This should be run in another terminal.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/turtlesim/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npixi run viz\n```\n\n----------------------------------------\n\nTITLE: Using the pixi auth login Command\nDESCRIPTION: Basic usage syntax for the pixi auth login command. This command requires a HOST argument and supports various authentication options depending on the target service.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/auth/login.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi auth login [OPTIONS] <HOST>\n```\n\n----------------------------------------\n\nTITLE: One-off Command with Pixi Exec (Bash)\nDESCRIPTION: GitHub Action step that uses 'pixi exec' to run a command in a temporary environment with specific dependencies (zstd), useful for one-time operations without creating a permanent environment.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/ci/github_actions.md#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n- run: | # (1)!\n    zstd --version\n  shell: pixi exec --spec zstd -- bash -e {0}\n```\n\n----------------------------------------\n\nTITLE: Fish Shell Hook Evaluation\nDESCRIPTION: Command to evaluate pixi shell-hook output in fish shell environment.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/advanced/pixi_shell.md#2025-04-23_snippet_5\n\nLANGUAGE: fish\nCODE:\n```\npixi shell-hook | source\n```\n\n----------------------------------------\n\nTITLE: Bash Function for Pixi Environment Activation\nDESCRIPTION: Function definition for convenient pixi environment activation with optional manifest path specification.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/advanced/pixi_shell.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nfunction pixi_activate() {\n    # default to current directory if no path is given\n    local manifest_path=\"${1:-.}\"\n    eval \"$(pixi shell-hook --manifest-path $manifest_path)\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using 'pixi workspace environment list' Command in Bash\nDESCRIPTION: This command lists all environments defined in the Pixi workspace's manifest file. It provides an overview of the available environments for the project.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/workspace/environment/list.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi workspace environment list\n```\n\n----------------------------------------\n\nTITLE: Generated TOML Configuration for Nested Executable\nDESCRIPTION: The resulting TOML manifest entry when exposing a nested executable, showing how the relative path is specified in the exposed section.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/global_tools/concepts.md#2025-04-23_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[envs.dotnet]\nchannels = [\"conda-forge\"]\ndependencies = { dotnet = \"*\" }\nexposed = { dotnet = 'dotnet\\dotnet' }\n```\n\n----------------------------------------\n\nTITLE: Installing a Package with Poetry (Shell)\nDESCRIPTION: Demonstrates how to install a new package (here, 'numpy') using Poetry. This command updates the 'pyproject.toml' and 'poetry.lock' files and ensures the package is available in the active environment.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/switching_from/poetry.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npoetry add numpy\n```\n\n----------------------------------------\n\nTITLE: Setting up Pixi autocompletion for Zsh\nDESCRIPTION: These commands set up autocompletion for Pixi in Zsh shells. They should be added to the ~/.zshrc file.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/advanced/installation.md#2025-04-23_snippet_13\n\nLANGUAGE: zsh\nCODE:\n```\nautoload -Uz compinit && compinit\neval \"$(pixi completion --shell zsh)\"\n```\n\n----------------------------------------\n\nTITLE: Installing Python with Custom Executable Name\nDESCRIPTION: Command to install Python 3.12 globally while exposing the python executable as 'py3' to avoid conflicts with other Python versions.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/global_tools/introduction.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npixi global install --expose py3=python \"python=3.12\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Host Dependencies for Python Package Building (TOML)\nDESCRIPTION: This snippet shows how to define host dependencies for building a Python package using Pixi. It includes 'hatchling' and 'uv' as examples of build tools that need to be specified as host dependencies due to technical limitations.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/build/dependency_types.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[host-dependencies]\nhatchling = \"*\"\nuv = \"*\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Version in pyproject.toml for Pixi\nDESCRIPTION: This snippet shows how to specify the required Python version in pyproject.toml, which Pixi will use as a dependency. It also demonstrates the equivalent configuration in pixi.toml.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/pyproject_toml.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[project]\nname = \"my_project\"\nrequires-python = \">=3.9\"\n\n[tool.pixi.workspace]\nchannels = [\"conda-forge\"]\nplatforms = [\"linux-64\", \"osx-arm64\", \"osx-64\", \"win-64\"]\n```\n\nLANGUAGE: toml\nCODE:\n```\n[workspace]\nname = \"my_project\"\nchannels = [\"conda-forge\"]\nplatforms = [\"linux-64\", \"osx-arm64\", \"osx-64\", \"win-64\"]\n\n[dependencies]\npython = \">=3.9\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up AWS Credentials in GitHub Actions\nDESCRIPTION: GitHub Actions workflow configuration for accessing S3 buckets with Pixi. Uses AWS OIDC authentication to obtain temporary credentials for secure access to S3 resources.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/deployment/s3.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  ci:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v4\n\n      # temporary credentials via OIDC\n      - name: Log in to AWS\n        uses: aws-actions/configure-aws-credentials@v4\n        with:\n          role-to-assume: arn:aws:iam::123456789012:role/github-poweruser\n          aws-region: eu-central-1\n\n      - name: Set up pixi\n        # AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY are set by aws-actions/configure-aws-credentials\n        uses: prefix-dev/setup-pixi@v0.8.3\n```\n\n----------------------------------------\n\nTITLE: Installing pixi-pycharm Package\nDESCRIPTION: Command to add the pixi-pycharm package to your Pixi workspace, which provides a conda shim for PyCharm integration.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/editor/jetbrains.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi add pixi-pycharm\n```\n\n----------------------------------------\n\nTITLE: LLM Inference Performance Metrics\nDESCRIPTION: This snippet shows the performance metrics of running the LLM inference on an M1 Max machine. It includes load time, sample time, prompt evaluation time, and total execution time for the model.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/llama-index-inference/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nllama_print_timings:        load time =    2043.14 ms\nllama_print_timings:      sample time =      22.51 ms /   247 runs   (    0.09 ms per token, 10973.88 tokens per second)\nllama_print_timings: prompt eval time =    2043.03 ms /    71 tokens (   28.78 ms per token,    34.75 tokens per second)\nllama_print_timings:        eval time =   17786.87 ms /   246 runs   (   72.30 ms per token,    13.83 tokens per second)\nllama_print_timings:       total time =   19959.11 ms /   317 tokens\n```\n\n----------------------------------------\n\nTITLE: Using Pixi Workspace Version Major Command in Bash\nDESCRIPTION: This command is used to increment the major version number of the workspace. It's typically used when making breaking changes to the project.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/workspace/version/major.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi workspace version major\n```\n\n----------------------------------------\n\nTITLE: Using the Pixi Task Command in Bash\nDESCRIPTION: Shows the basic usage syntax for the 'pixi task' command. This command is used to interact with tasks in the workspace.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/task.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi task [OPTIONS] <COMMAND>\n```\n\n----------------------------------------\n\nTITLE: Pixi Activate Usage Examples\nDESCRIPTION: Examples showing how to use the pixi_activate function with and without specific manifest paths.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/advanced/pixi_shell.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npixi_activate\n\n# or with a specific manifest\npixi_activate ~/projects/my_project\n```\n\n----------------------------------------\n\nTITLE: Example of Setting Workspace Description\nDESCRIPTION: An example demonstrating how to use the 'pixi workspace description set' command with a specific description.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/workspace/description/set.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npixi workspace description set \"My awesome workspace\"\n```\n\n----------------------------------------\n\nTITLE: Running Python Script in Pixi Environment\nDESCRIPTION: Command to execute a Python script within the Pixi environment.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/index.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npixi run python hello.py\n```\n\n----------------------------------------\n\nTITLE: Adjusting System Requirements for Older Linux Systems in TOML\nDESCRIPTION: Demonstrates how to lower the Linux kernel version requirement to accommodate older systems.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/workspace/system_requirements.md#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[system-requirements]\nlinux = \"4.12.14\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Pixi autocompletion for Nushell\nDESCRIPTION: These commands set up autocompletion for Pixi in Nushell. They should be added to the Nushell configuration file.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/advanced/installation.md#2025-04-23_snippet_16\n\nLANGUAGE: nushell\nCODE:\n```\nmkdir $\"($nu.data-dir)/vendor/autoload\"\npixi completion --shell nushell | save --force $\"($nu.data-dir)/vendor/autoload/pixi-completions.nu\"\n```\n\n----------------------------------------\n\nTITLE: Running PyTorch in Different Environments with Pixi\nDESCRIPTION: Shell commands to run Python code in different Pixi environments (CPU or GPU) to check PyTorch installation and CUDA availability. These commands allow verifying the correct PyTorch setup.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/pytorch.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npixi run --environment cpu python -c \"import torch; print(torch.cuda.is_available())\"\npixi run -e gpu python -c \"import torch; print(torch.cuda.is_available())\"\n```\n\n----------------------------------------\n\nTITLE: Adding Build Dependencies for Python Packages\nDESCRIPTION: Adds necessary build dependencies for compiling ROS 2 Python packages using `colcon`. It installs `colcon-common-extensions` and pins `setuptools` to a specific version (`<=58.2.0`) known to work well with `ament_python`.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/tutorials/ros2.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\npixi add colcon-common-extensions \"setuptools<=58.2.0\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Detached Environments in Pixi (TOML, Boolean and Path)\nDESCRIPTION: These snippets show two ways to use the 'detached-environments' option in config.toml: a boolean to enable/disable detached mode, or a string path for a custom global environments directory. A boolean 'true' stores environments in the cache; a string path stores them at the specified location outside the project folder. This may lead to needing manual cleanup. No dependencies except Pixi and correct path permissions are required.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_configuration.md#2025-04-23_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\ndetached-environments = true\n\n```\n\nLANGUAGE: toml\nCODE:\n```\ndetached-environments = \"/opt/pixi/envs\"\n\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Prefix.dev using Token\nDESCRIPTION: Example of logging into prefix.dev using a bearer token which is sent with every request as an additional authentication header.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/deployment/authentication.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npixi auth login prefix.dev --token pfx_jj8WDzvnuTHEGdAhwRZMC1Ag8gSto8\n```\n\n----------------------------------------\n\nTITLE: Viewing Initial pixi.toml Configuration in TOML\nDESCRIPTION: Displays the default content of the `pixi.toml` manifest file generated by `pixi init`. It includes workspace metadata like name and version, project description, authors, conda channels, and target platforms.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/tutorials/rust.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[workspace]\nname = \"my_rust_project\"\nversion = \"0.1.0\"\ndescription = \"Add a short description here\"\nauthors = [\"User Name <user.name@email.url>\"]\nchannels = [\"conda-forge\"]\nplatforms = [\"linux-64\"] # (1)!\n\n[tasks]\n\n[dependencies]\n```\n\n----------------------------------------\n\nTITLE: Adding a Test File for the Project\nDESCRIPTION: This snippet shows the content of a test file (test_me.py) that tests the hello() function from the project.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/tutorial.md#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom pixi_py import hello\n\ndef test_pixi_py():\n    assert hello() == (\"Hello, [bold magenta]World[/bold magenta]!\", \":vampire:\")\n```\n\n----------------------------------------\n\nTITLE: Installing the Nanobind Python Module using CMake\nDESCRIPTION: Configures the installation process for the compiled Python module target (`${PROJECT_NAME}`). It primarily directs the installation of the library component (the `.so` or `.pyd` file) to the Python site-packages directory (`${PYTHON_SITE_PACKAGES}`). It also sets up installation rules for potential archive and runtime components and exports the target information.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/source_files/pixi_workspaces/pixi_build/cpp/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ninstall( # (6)!\n    TARGETS ${PROJECT_NAME}\n    EXPORT ${PROJECT_NAME}Targets\n    LIBRARY DESTINATION ${PYTHON_SITE_PACKAGES}\n    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n    RUNTIME DESTINATION ${BINDIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Manifest and Lock File Relationship (Mermaid)\nDESCRIPTION: This Mermaid flowchart demonstrates the relationship between the manifest file, lock file, and environment in Pixi. It shows how changes in the manifest file propagate to the lock file and environment.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/workspace/lockfile.md#2025-04-23_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    C[manifest] --> A[lockfile] --> B[environment]\n```\n\n----------------------------------------\n\nTITLE: Setting up Zsh Autocompletion for Pixi\nDESCRIPTION: Configuration for enabling Pixi command autocompletion in Zsh shell, which is the default on macOS. This should be added to the .zshrc file.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: zsh\nCODE:\n```\n# ~/.zshrc\n\neval \"$(pixi completion --shell zsh)\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Workspace Description using Pixi CLI\nDESCRIPTION: This command is used to get the description of the current Pixi workspace. It doesn't require any additional parameters and returns the workspace description when executed.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/workspace/description/get.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi workspace description get\n```\n\n----------------------------------------\n\nTITLE: Defining Lorenz System Solver and Visualizer in Python\nDESCRIPTION: This function solves the Lorenz system numerically and visualizes the trajectories in 3D. It takes parameters for the differential equations, numerical integration, and visualization. The function returns the time array and trajectory data.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/jupyterlab/LorenzDifferentialEquations.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef solve_lorenz(N=10, angle=0.0, max_time=4.0, sigma=10.0, beta=8./3, rho=28.0):\n\n    fig = plt.figure()\n    ax = fig.add_axes([0, 0, 1, 1], projection='3d')\n    ax.axis('off')\n\n    # prepare the axes limits\n    ax.set_xlim((-25, 25))\n    ax.set_ylim((-35, 35))\n    ax.set_zlim((5, 55))\n    \n    def lorenz_deriv(x_y_z, t0, sigma=sigma, beta=beta, rho=rho):\n        \"\"\"Compute the time-derivative of a Lorenz system.\"\"\"\n        x, y, z = x_y_z\n        return [sigma * (y - x), x * (rho - z) - y, x * y - beta * z]\n\n    # Choose random starting points, uniformly distributed from -15 to 15\n    np.random.seed(1)\n    x0 = -15 + 30 * np.random.random((N, 3))\n\n    # Solve for the trajectories\n    t = np.linspace(0, max_time, int(250*max_time))\n    x_t = np.asarray([integrate.odeint(lorenz_deriv, x0i, t)\n                      for x0i in x0])\n    \n    # choose a different color for each trajectory\n    colors = plt.cm.viridis(np.linspace(0, 1, N))\n\n    for i in range(N):\n        x, y, z = x_t[i,:,:].T\n        lines = ax.plot(x, y, z, '-', c=colors[i])\n        plt.setp(lines, linewidth=2)\n\n    ax.view_init(30, angle)\n    plt.show()\n\n    return t, x_t\n```\n\n----------------------------------------\n\nTITLE: Using pyproject.toml as Pixi Manifest in GitHub Actions\nDESCRIPTION: This example shows how to explicitly set the pyproject.toml file as the manifest for pixi in the setup-pixi action.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/ci/github_actions.md#2025-04-23_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\n- uses: prefix-dev/setup-pixi@v0.8.3\n  with:\n    manifest-path: pyproject.toml\n```\n\n----------------------------------------\n\nTITLE: Configuring Detached Environments Directory with Pixi - Shell\nDESCRIPTION: This snippet shows how to configure Pixi to use detached environments, either in the default global location or a user-specified path. Dependencies include an existing Pixi installation. The first command enables detached environments globally, while the second allows specifying a custom environment storage directory. This affects where environments are stored, but disables activation via 'pixi shell -n'.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/switching_from/conda.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n~~~shell\\npixi config set detached-environments true\\n# or a specific location\\npixi config set detached-environments /path/to/envs\\n~~~\n```\n\n----------------------------------------\n\nTITLE: Specifying Run Dependencies in Pixi Configuration (TOML)\nDESCRIPTION: Example of specifying run dependencies in a Pixi configuration. These are dependencies required at runtime by the package, commonly used for Python packages.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_manifest.md#2025-04-23_snippet_39\n\nLANGUAGE: toml\nCODE:\n```\n--8<-- \"docs/source_files/pixi_tomls/simple_pixi_build.toml:run-dependencies\"\n```\n\n----------------------------------------\n\nTITLE: Adding a Pixi Task for the C++ Node\nDESCRIPTION: Creates a simple Pixi task named `hello-cpp` as a shortcut to run the custom C++ node `my_cpp_node` from the `my_cpp_package` package.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/tutorials/ros2.md#2025-04-23_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\npixi task add hello-cpp \"ros2 run my_cpp_package my_cpp_node\"\n```\n\n----------------------------------------\n\nTITLE: Creating and running self-extracting binaries on Linux/macOS\nDESCRIPTION: Commands to create and execute a self-extracting binary containing the packed environment on Linux or macOS.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/deployment/pixi_pack.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ pixi-pack pack --create-executable\n$ ls\nenvironment.sh\n$ ./environment.sh\n$ ls\nenv/\nactivate.sh\nenvironment.sh\n```\n\n----------------------------------------\n\nTITLE: Using the Pixi Workspace System Requirements Add Command\nDESCRIPTION: This command adds an environment requirement to the manifest file. It requires specifying the requirement name and version, with optional parameters for Libc family and feature name.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/workspace/system-requirements/add.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi workspace system-requirements add [OPTIONS] <REQUIREMENT> <VERSION>\n```\n\n----------------------------------------\n\nTITLE: Fish Function for Pixi Environment Activation\nDESCRIPTION: Fish shell function definition for convenient pixi environment activation with optional manifest path support.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/advanced/pixi_shell.md#2025-04-23_snippet_6\n\nLANGUAGE: fish\nCODE:\n```\nfunction pixi_activate\n    # default to current directory if no path is given\n    set -l manifest_path $argv[1]\n    test -z \"$manifest_path\"; and set manifest_path \".\"\n\n    pixi shell-hook --manifest-path \"$manifest_path\" | source\nend\n```\n\n----------------------------------------\n\nTITLE: Running the Turtlesim Teleoperation Node\nDESCRIPTION: Provides the commands to run the `turtle_teleop_key` node, allowing keyboard control of the turtlesim turtle. It assumes this is run in a new terminal, navigates to the project directory, and uses `pixi run` to execute the ROS 2 command within the correct environment.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/tutorials/ros2.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncd my_ros2_project\npixi run ros2 run turtlesim turtle_teleop_key\n```\n\n----------------------------------------\n\nTITLE: Installing Pixi to Custom Location with Install-As Task\nDESCRIPTION: Shows the usage of the install-as task which allows building Pixi and installing the executable to a custom location using a Python script.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ pixi run install-as\nusage: install.py [-h] [--dest DEST] name\n\nBuild pixi and copy the executable to ~/.pixi/bin or a custom destination\n\npositional arguments:\n  name                  Name of the executable (e.g. pixid)\n\noptions:\n  -h, --help            show this help message and exit\n  --dest DEST           Destination directory for the executable, default: $PIXI_HOME/bin (or ~/.pixi/bin if $PIXI_HOME isn't set)\n```\n\n----------------------------------------\n\nTITLE: Customizing Sphinx Configuration for ReadTheDocs\nDESCRIPTION: This Python script configures Sphinx for extended ReadTheDocs features. It supports unpublished RST files, integrates readthedocs-sphinx-ext, and uses Sphinx lifecycle events to run Pixi tasks during the build process.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/readthedocs-extend/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# docs/conf.py\nimport os\nimport sys\n\nfrom sphinx.application import Sphinx\n\nsys.path.insert(0, os.path.abspath(\".\"))\n\nproject = \"pixi\"\ncopyright = \"2023, Prefix.dev\"\nauthor = \"Prefix.dev\"\n\nextensions = [\n    \"myst_parser\",\n    \"sphinx.ext.napoleon\",\n    \"sphinx.ext.autodoc\",\n    \"sphinx.ext.autosummary\",\n    \"sphinx_click\",\n    \"sphinx_copybutton\",\n    \"sphinx.ext.viewcode\",\n    \"sphinx.ext.intersphinx\",\n    \"sphinxcontrib.mermaid\",\n    \"readthedocs_ext.readthedocs\",\n]\n\nhtml_theme = \"furo\"\n\nif os.environ.get(\"READTHEDOCS\", None) == \"True\":\n    import subprocess\n\n    def run_apidoc(_):\n        subprocess.run([sys.executable, \"-m\", \"pixi\", \"run\", \"rtd-sphinx\"])\n\n    def setup(app: Sphinx):\n        app.connect(\"builder-inited\", run_apidoc)\n```\n\n----------------------------------------\n\nTITLE: Setting up PowerShell Autocompletion for Pixi\nDESCRIPTION: PowerShell command to enable Pixi autocompletion. This should be added to the PowerShell profile file to load on startup.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/README.md#2025-04-23_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\n(& pixi completion --shell powershell) | Out-String | Invoke-Expression\n```\n\n----------------------------------------\n\nTITLE: Using 'pixi workspace description' Command in Bash\nDESCRIPTION: This snippet shows the basic usage syntax for the 'pixi workspace description' command. It demonstrates how to invoke the command with options and subcommands.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/workspace/description.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi workspace description [OPTIONS] <COMMAND>\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies in Global Ipython\nDESCRIPTION: Command demonstrating how to verify that numpy and matplotlib can be imported in the globally installed ipython.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/global_tools/introduction.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nipython -c 'import numpy; import matplotlib'\n```\n\n----------------------------------------\n\nTITLE: Configuring Workspace Repository URL (TOML)\nDESCRIPTION: Demonstrates specifying the repository key for the source code repository location, such as a GitHub URL. Useful for traceability and as additional metadata for tools or automation.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_manifest.md#2025-04-23_snippet_13\n\nLANGUAGE: toml\nCODE:\n```\nrepository = \"https://github.com/prefix-dev/pixi\"\n\n```\n\n----------------------------------------\n\nTITLE: Example of Setting Workspace Name in Pixi\nDESCRIPTION: An example showing how to use the 'pixi workspace name set' command to set a workspace name to 'my-workspace'. This illustrates the practical application of the command.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/workspace/name/set.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npixi workspace name set \"my-workspace\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Build System in Pixi Configuration (TOML)\nDESCRIPTION: Example of configuring the build system in a Pixi configuration. This specifies how the package can be built, including channels and build backend details.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_manifest.md#2025-04-23_snippet_40\n\nLANGUAGE: toml\nCODE:\n```\n--8<-- \"docs/source_files/pixi_tomls/simple_pixi_build.toml:build-system\"\n```\n\n----------------------------------------\n\nTITLE: Invoking Pixi Workspace Command - Shell\nDESCRIPTION: Demonstrates the basic syntax for using the pixi workspace command with optional parameters and required subcommands. The command is used to modify pixi workspace configuration files through the terminal. Requires the pixi CLI to be installed and accessible in the shell environment. The <COMMAND> parameter specifies the workspace operation to perform, while [OPTIONS] are placeholders for global or specific flags. Returns output or modifies files as determined by the subcommand used.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/workspace.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npixi workspace [OPTIONS] <COMMAND>\n```\n\n----------------------------------------\n\nTITLE: Running Pixi Task in Python 3.12 Environment\nDESCRIPTION: This bash command demonstrates how to run the 'start' task in the Python 3.12 environment using Pixi.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/getting_started.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npixi run --environment=py312 start\n```\n\n----------------------------------------\n\nTITLE: Packing a Pixi environment with pixi-pack\nDESCRIPTION: Command to pack a Pixi environment for a specific platform, creating a compressed archive file.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/deployment/pixi_pack.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npixi-pack pack --manifest-file pixi.toml --environment prod --platform linux-64\n```\n\n----------------------------------------\n\nTITLE: Using the Pixi Task Add Command\nDESCRIPTION: This snippet demonstrates the basic usage syntax for the 'pixi task add' command. It shows how to add a new task with a name and one or more commands to execute.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/task/add.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npixi task add [OPTIONS] <NAME> <COMMAND>...\n```\n\n----------------------------------------\n\nTITLE: Starting ROS1 Noetic Core\nDESCRIPTION: Command to start roscore for ROS1 Noetic using Pixi. This should be run in one terminal.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/turtlesim/README.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npixi run -e noetic core\n```\n\n----------------------------------------\n\nTITLE: Running Cargo Project with Pixi in Shell\nDESCRIPTION: Compiles and executes the Rust project using `cargo run` within the Pixi environment. `pixi run` ensures the correct environment and dependencies are available.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/tutorials/rust.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\npixi run cargo run\n```\n\n----------------------------------------\n\nTITLE: Adding Version-Specific Conda Package\nDESCRIPTION: Command to add a specific version of a conda package to the project.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/tutorial.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npixi add black=24\n```\n\n----------------------------------------\n\nTITLE: Setting up Fish Autocompletion for Pixi\nDESCRIPTION: Configuration for enabling Pixi command autocompletion in Fish shell. This should be added to the Fish config file.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/README.md#2025-04-23_snippet_8\n\nLANGUAGE: fish\nCODE:\n```\n# ~/.config/fish/config.fish\n\npixi completion --shell fish | source\n```\n\n----------------------------------------\n\nTITLE: Using the Pixi Workspace Channel List Command\nDESCRIPTION: This snippet demonstrates the usage syntax for the 'pixi workspace channel list' command. It shows how to run the command with optional arguments.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/workspace/channel/list.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi workspace channel list [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Confirming Successful Build After Adding System Dependencies in Shell\nDESCRIPTION: Shows sample successful compilation output after running `pixi run build`. This confirms that adding system dependencies like `openssl`, `pkg-config`, and `compilers` via Pixi resolved the previous build errors related to the `git2` crate.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/tutorials/rust.md#2025-04-23_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\npixi run build\n...\n   Compiling git2 v0.18.3\n   Compiling my_rust_project v0.1.0 (/my_rust_project)\n    Finished dev [unoptimized + debuginfo] target(s) in 7.44s\n     Running `target/debug/my_rust_project`\n```\n\n----------------------------------------\n\nTITLE: Defining Pinject Package Configuration in YAML\nDESCRIPTION: This YAML configuration specifies the build process for the pinject Python package (version 0.14.1). It includes source location and verification hash, build settings, runtime and host dependencies, test requirements, and package metadata.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/crates/pixi_build_frontend/test-data/conda-render/pinject.txt#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npackage:\n  name: pinject\n  version: 0.14.1\nsource:\n  sha256: 0f0a0b14f9df87a85b529a21cdaf530269b1f24fb303d418583a12bb53f69382\n  url: https://pypi.io/packages/source/p/pinject/pinject-0.14.1.tar.gz\nbuild:\n  noarch: python\n  number: '0'\n  script: C:\\\\Users\\\\zalms\\\\conda-bld\\\\pinject_1723465624118\\\\_h_env\\\\python.exe -m\n    pip install . -vv\nrequirements:\n  host:\n    - ca-certificates 2024.7.4 h56e8100_0\n    - libexpat 2.6.2 h63175ca_0\n    - tzdata 2024a h0c530f3_0\n    - ucrt 10.0.22621.0 h57928b3_0\n    - vc14_runtime 14.40.33810 ha82c5b3_20\n    - vc 14.3 h8a93ad2_20\n    - vs2015_runtime 14.40.33810 h3bf8584_20\n    - bzip2 1.0.8 h2466b09_7\n    - libffi 3.4.2 h8ffe710_5\n    - libsqlite 3.46.0 h2466b09_0\n    - libzlib 1.3.1 h2466b09_1\n    - openssl 3.3.1 h2466b09_2\n    - tk 8.6.13 h5226925_1\n    - xz 5.2.6 h8d14728_0\n    - python 3.12.5 h889d299_0_cpython\n    - setuptools 72.1.0 pyhd8ed1ab_0\n    - wheel 0.44.0 pyhd8ed1ab_0\n    - pip 24.2 pyhd8ed1ab_0\n  run:\n    - python >=3.4\n    - six >=1.7.3\n    - decorator >=4.3.0\ntest:\n  commands:\n    - pip check\n  imports:\n    - pinject\n  requires:\n    - pip\nabout:\n  home: https://github.com/google/pinject\n  license: Apache-2.0\n  license_file: LICENSE\n  summary: A pythonic dependency injection library\nextra:\n  copy_test_source_files: true\n  final: true\n  recipe-maintainers:\n    - baszalmstra\n```\n\n----------------------------------------\n\nTITLE: Using the pixi global edit command\nDESCRIPTION: Command syntax for editing the global manifest file using pixi. The command optionally accepts an editor argument, defaulting to the EDITOR environment variable or platform-specific defaults.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/global/edit.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi global edit [EDITOR]\n```\n\n----------------------------------------\n\nTITLE: Disabling TLS Verification in Pixi (TOML)\nDESCRIPTION: This snippet shows the 'tls-no-verify' option in config.toml to disable TLS certificate verification globally in Pixi. Setting this value to 'true' bypasses standard SSL checks, which is discouraged except for testing and internal network scenarios for security reasons. No additional dependencies are required; valid for use only in trusted environments.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_configuration.md#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\ntls-no-verify = true\n\n```\n\n----------------------------------------\n\nTITLE: Using Pixi Workspace Channel Command in Bash\nDESCRIPTION: This snippet demonstrates the basic usage of the 'pixi workspace channel' command. It shows the command structure for executing channel-related operations in a Pixi workspace.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/workspace/channel.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi workspace channel <COMMAND>\n```\n\n----------------------------------------\n\nTITLE: Displaying Rattler Cache Directory Environment Variable\nDESCRIPTION: Shows the environment variable RATTLER_CACHE_DIR, which is used as a fallback for PIXI_CACHE_DIR if the latter is not set.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/environment_variables.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nRATTLER_CACHE_DIR\n```\n\n----------------------------------------\n\nTITLE: Conda Dependency in pyproject.toml\nDESCRIPTION: The entry added to pyproject.toml when installing a conda package, showing version constraints.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/tutorial.md#2025-04-23_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[tool.pixi.dependencies]\nblack = \">=24.10.0,<25\"  # (1)!\n```\n\n----------------------------------------\n\nTITLE: Configuring Build System in pyproject.toml for Pixi\nDESCRIPTION: This snippet shows how to specify the build system in pyproject.toml for Pixi. It demonstrates the default configuration used by Pixi if no build-system section is provided, and a recommended configuration using hatchling.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/pyproject_toml.md#2025-04-23_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[build-system]\nrequires = [\"setuptools >= 40.8.0\"]\nbuild-backend = \"setuptools.build_meta:__legacy__\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n[build-system]\nbuild-backend = \"hatchling.build\"\nrequires = [\"hatchling\"]\n```\n\n----------------------------------------\n\nTITLE: Starting ROS1 Noetic Turtlesim\nDESCRIPTION: Command to start the turtlesim node for ROS1 Noetic using Pixi. This should be run in a second terminal.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/turtlesim/README.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npixi run -e noetic start\n```\n\n----------------------------------------\n\nTITLE: Starting ROS2 NAV2 Simulation with PIXI\nDESCRIPTION: This command uses PIXI to launch the entire ROS2 navigation stack, including Gazebo simulator, RViz2 visualizer, and the navigation components for a TurtleBot3 simulation.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/ros2-nav2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npixi run start\n```\n\n----------------------------------------\n\nTITLE: Running LLM Inference Example with Pixi\nDESCRIPTION: This command executes the LLM inference example using Pixi. It demonstrates how to start the application with the necessary environment and dependencies set up by Pixi.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/llama-index-inference/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pixi run start\n```\n\n----------------------------------------\n\nTITLE: Setting up Pixi autocompletion for Fish shell\nDESCRIPTION: This command sets up autocompletion for Pixi in Fish shells. It should be added to the Fish configuration file.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/advanced/installation.md#2025-04-23_snippet_15\n\nLANGUAGE: fish\nCODE:\n```\npixi completion --shell fish | source\n```\n\n----------------------------------------\n\nTITLE: Using Pixi Workspace Platform Remove Command\nDESCRIPTION: This snippet demonstrates the usage syntax for the 'pixi workspace platform remove' command. It shows how to invoke the command with optional arguments and options.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/workspace/platform/remove.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npixi workspace platform remove [OPTIONS] <PLATFORM>...\n```\n\n----------------------------------------\n\nTITLE: Building a Package with Poetry (Shell)\nDESCRIPTION: Builds a distribution package from the current Poetry project source tree. This command requires a valid pyproject.toml and a fully-resolved dependency graph. Output artifacts are typically wheels or source distributions.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/switching_from/poetry.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\npoetry build\n```\n\n----------------------------------------\n\nTITLE: Testing Package Build\nDESCRIPTION: Command to build the bindings, install them, and run the test task.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/build/cpp.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ pixi run start\n3\n```\n\n----------------------------------------\n\nTITLE: Using Pixi Global Install Command\nDESCRIPTION: Example syntax for the 'pixi global install' command, showing the basic usage pattern with options and package arguments.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/global/install.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi global install [OPTIONS] <PACKAGE>...\n```\n\n----------------------------------------\n\nTITLE: Using 'pixi workspace environment remove' Command in Bash\nDESCRIPTION: This command removes a specified environment from the Pixi manifest file. It requires the name of the environment to be removed as an argument.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/workspace/environment/remove.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi workspace environment remove <NAME>\n```\n\n----------------------------------------\n\nTITLE: Configuring, Building, and Running C++ SDL Project with Pixi\nDESCRIPTION: This code snippet demonstrates the shell commands needed to set up and run a C++ SDL project using Pixi. It includes steps for configuring the CMake project, building the executable, and starting the built executable.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/cpp-sdl/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Configure the CMake project\npixi run configure\n\n# Build the executable\npixi run build\n\n# Start the build executable\npixi run start\n```\n\n----------------------------------------\n\nTITLE: Structure of packed environment archive\nDESCRIPTION: Displays the file structure of the packed environment archive, including metadata and package files.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/deployment/pixi_pack.md#2025-04-23_snippet_3\n\nLANGUAGE: plain\nCODE:\n```\n# environment.tar\n| pixi-pack.json\n| environment.yml\n| channel\n|    ├── noarch\n|    |    ├── tzdata-2024a-h0c530f3_0.conda\n|    |    ├── ...\n|    |    └── repodata.json\n|    └── linux-64\n|         ├── ca-certificates-2024.2.2-hbcca054_0.conda\n|         ├── ...\n|         └── repodata.json\n```\n\n----------------------------------------\n\nTITLE: Specifying Authentication Override File in Pixi (TOML)\nDESCRIPTION: This snippet shows how to override Pixi's authentication data source by specifying a JSON file path in config.toml. Normally Pixi prefers OS keyring-based authentication, but this option forces usage of the provided JSON file for credentials. Requires the indicated file to exist and contain valid JSON-formatted authentication data.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_configuration.md#2025-04-23_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\nauthentication-override-file = \"/path/to/auth.json\"\n\n```\n\n----------------------------------------\n\nTITLE: Specifying Package Version Ranges in TOML\nDESCRIPTION: Demonstrates how to specify package version ranges using comparison operators in TOML format. Includes examples of greater than or equal to, less than, and OR conditions.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_manifest.md#2025-04-23_snippet_24\n\nLANGUAGE: toml\nCODE:\n```\npackage3 = \">=1.2.3|<1.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Python Script Using Cowpy\nDESCRIPTION: Example Python script demonstrating usage of the cowpy library in a Pixi environment.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/index.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/source_files/pixi_workspaces/introduction/deps_add/hello.py\"\n```\n\n----------------------------------------\n\nTITLE: Installing pixi-pack globally using Pixi\nDESCRIPTION: Command to install pixi-pack globally using the Pixi package manager.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/deployment/pixi_pack.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi global install pixi-pack\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for JupyterLite\nDESCRIPTION: This snippet installs the necessary packages (ipywidgets and sympy) for the JupyterLite environment.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/jupyterlab/Factoring.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install -q ipywidgets sympy\n```\n\n----------------------------------------\n\nTITLE: Creating Pixi Alias in Windows PowerShell\nDESCRIPTION: PowerShell command to create an alias for the pixi command on Windows systems. This creates a new alias that points to the pixi executable.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/misc/FAQ.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-Alias -Name not_pixi -Value pixi\n```\n\n----------------------------------------\n\nTITLE: Using the Pixi Global List Command in Bash\nDESCRIPTION: This snippet demonstrates the basic usage of the 'pixi global list' command. It can be used with optional arguments and flags to filter and sort the list of globally installed packages.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/global/list.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi global list [OPTIONS] [REGEX]\n```\n\n----------------------------------------\n\nTITLE: Publishing a Package with Poetry (Shell)\nDESCRIPTION: Publishes a previously built Python package to a repository, such as PyPI. Requires pre-existing credentials and configuration for the target repository. Executes after building with 'poetry build'.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/switching_from/poetry.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\npoetry publish\n```\n\n----------------------------------------\n\nTITLE: Adding a nanobind Python Module Target in CMake\nDESCRIPTION: This command utilizes the `nanobind_add_module` function (made available by finding the nanobind package earlier). It defines a Python extension module target named after the current CMake project (`${PROJECT_NAME}`, which is 'cpp_math'). The module is built from the specified C++ source file (`src/math.cpp`). This function handles the necessary compiler and linker flags for creating the Python module.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/source_files/pixi_workspaces/pixi_build/advanced_cpp/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nnanobind_add_module(${PROJECT_NAME} src/math.cpp) # (5)!\n```\n\n----------------------------------------\n\nTITLE: Usage of pixi global expose add command\nDESCRIPTION: Demonstrates the basic syntax for using the 'pixi global expose add' command. It shows the command structure with options and arguments placeholders.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/global/expose/add.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi global expose add [OPTIONS] --environment <ENVIRONMENT> [MAPPING]...\n```\n\n----------------------------------------\n\nTITLE: Setting Authentication File Location in Bash\nDESCRIPTION: Examples of overriding the default authentication storage location using the RATTLER_AUTH_FILE environment variable or command-line argument.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/deployment/authentication.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport RATTLER_AUTH_FILE=$HOME/credentials.json\n# You can also specify the file in the command line\npixi global install --auth-file $HOME/credentials.json ...\n```\n\n----------------------------------------\n\nTITLE: Examples of pixi global expose add command usage\nDESCRIPTION: Provides two examples of how to use the 'pixi global expose add' command. The first example shows how to expose multiple Python executables, and the second demonstrates adding pytest with exposure.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/global/expose/add.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npixi global expose add python310=python3.10 python3=python3 --environment myenv\n```\n\nLANGUAGE: bash\nCODE:\n```\npixi global add --environment my_env pytest pytest-cov --expose pytest=pytest\n```\n\n----------------------------------------\n\nTITLE: Creating a cross-platform pack with pixi-pack\nDESCRIPTION: Command to create a pack for a specific platform (Windows 64-bit in this example) using pixi-pack.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/deployment/pixi_pack.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npixi-pack pack --platform win-64\n```\n\n----------------------------------------\n\nTITLE: Using the Pixi Upload Command in Shell\nDESCRIPTION: Demonstrates the usage syntax for the 'pixi upload' command. It requires two arguments: the host/channel to upload to and the package file to be uploaded.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/upload.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npixi upload <HOST> <PACKAGE_FILE>\n```\n\n----------------------------------------\n\nTITLE: Configuring Preview Feature in Pixi Manifest\nDESCRIPTION: Enables the preview build feature in the Pixi manifest by adding pixi-build to the workspace preview section.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/build/getting_started.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n--8<-- \"docs/source_files/pixi_workspaces/pixi_build/getting_started/pixi.toml:preview\"\n```\n\n----------------------------------------\n\nTITLE: Run Dependencies Configuration\nDESCRIPTION: Defines runtime dependencies needed for package execution, specifically including rich as a run dependency.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/build/getting_started.md#2025-04-23_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n--8<-- \"docs/source_files/pixi_workspaces/pixi_build/getting_started/pixi.toml:run-dependencies\"\n```\n\n----------------------------------------\n\nTITLE: Getting Nanobind CMake Directory Path using Python in CMake\nDESCRIPTION: Runs a Python command via `execute_process` to ask the `nanobind` module for the location of its CMake support files (`--cmake_dir`). The resulting path is stored in the `nanobind_ROOT` CMake variable for later use. Requires `nanobind` to be installed in the Python environment being used.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/source_files/pixi_workspaces/pixi_build/cpp/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nexecute_process(\n  COMMAND \"${Python_EXECUTABLE}\" -m nanobind --cmake_dir\n  OUTPUT_STRIP_TRAILING_WHITESPACE OUTPUT_VARIABLE nanobind_ROOT\n) # (2)!\n```\n\n----------------------------------------\n\nTITLE: Using the pixi auth command\nDESCRIPTION: Basic usage syntax for the pixi auth command which requires a subcommand to be specified.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/auth.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npixi auth <COMMAND>\n```\n\n----------------------------------------\n\nTITLE: Using Named Pipes for Git History Comparison\nDESCRIPTION: Examples showing how to compare a lockfile from an older git commit with the current lockfile using named pipes in both bash/zsh and fish shells.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/third_party/pixi_diff.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# bash / zsh\npixi-diff --before <(git show HEAD~20:pixi.lock) --after pixi.lock\n\n# fish\npixi-diff --before (git show HEAD~20:pixi.lock | psub) --after pixi.lock\n```\n\n----------------------------------------\n\nTITLE: Using Pixi Global Uninstall Command\nDESCRIPTION: Shows the basic usage syntax for the 'pixi global uninstall' command. It allows for uninstalling one or more environments from the global Pixi setup.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/global/uninstall.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi global uninstall [OPTIONS] <ENVIRONMENT>...\n```\n\n----------------------------------------\n\nTITLE: Usage of 'pixi workspace channel remove' Command\nDESCRIPTION: Demonstrates the basic usage syntax for the 'pixi workspace channel remove' command. It shows that the command accepts options and requires at least one CHANNEL argument.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/workspace/channel/remove.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi workspace channel remove [OPTIONS] <CHANNEL>...\n```\n\n----------------------------------------\n\nTITLE: Listing Available Tasks with pixi in Bash\nDESCRIPTION: This command lists all the runnable tasks defined in the `pixi.toml` file for the current project. It helps users discover available commands beyond the default 'start' task. Requires `pixi` to be installed and executed within a pixi project directory.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npixi task list\n```\n\n----------------------------------------\n\nTITLE: Using Pixi Workspace Environment Add Command\nDESCRIPTION: This snippet demonstrates the usage syntax for the 'pixi workspace environment add' command. It shows how to add a new environment to the Pixi project manifest file, with optional parameters for customization.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/workspace/environment/add.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi workspace environment add [OPTIONS] <NAME>\n```\n\n----------------------------------------\n\nTITLE: Running Python with Custom Executable Name\nDESCRIPTION: Command showing how to use the custom 'py3' executable to run Python code.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/global_tools/introduction.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npy3 -c \"print('Hello World')\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Nushell Autocompletion for Pixi\nDESCRIPTION: Commands to configure Pixi autocompletion in Nushell by saving the completion script to the Nushell autoload directory.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/README.md#2025-04-23_snippet_9\n\nLANGUAGE: nushell\nCODE:\n```\nmkdir $\"($nu.data-dir)/vendor/autoload\"\npixi completion --shell nushell | save --force $\"($nu.data-dir)/vendor/autoload/pixi-completions.nu\"\n```\n\n----------------------------------------\n\nTITLE: Setting Keyring Credentials for PyPI\nDESCRIPTION: Shows how to use keyring to store credentials for accessing private PyPI repositories.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/deployment/authentication.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nkeyring set https://my-index/simple your_username\n# prompt will appear for your password\n```\n\n----------------------------------------\n\nTITLE: Using the Pixi Global Shortcut Remove Command in Bash\nDESCRIPTION: This command is used to remove shortcuts from the user's machine. It can take multiple shortcut names as arguments and has various configuration options for TLS verification, authentication, and concurrent operations.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/global/shortcut/remove.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi global shortcut remove [OPTIONS] [SHORTCUT]...\n```\n\n----------------------------------------\n\nTITLE: Implementing PEP735 Dependency Groups in pyproject.toml\nDESCRIPTION: Shows how to define dependency groups following PEP735 in pyproject.toml, allowing for organization of dependencies into logical groups like 'test', 'docs', and 'dev' with the ability to include other groups.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/CHANGELOG.md#2025-04-23_snippet_12\n\nLANGUAGE: toml\nCODE:\n```\n[dependency-groups]\ntest = [\"pytest\"]\ndocs = [\"sphinx\"]\ndev = [{include-group = \"test\"}, {include-group = \"docs\"}]\n\n[tool.pixi.environments]\ndev = [\"dev\"]\n```\n\n----------------------------------------\n\nTITLE: Setting up Bash Autocompletion for Pixi\nDESCRIPTION: Configuration for enabling Pixi command autocompletion in Bash shell. This should be added to the .bashrc file.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# ~/.bashrc\n\neval \"$(pixi completion --shell bash)\"\n```\n\n----------------------------------------\n\nTITLE: Building and Installing Pixi-Generated Constructor Installer\nDESCRIPTION: Commands to build an installer using Pixi-generated Conda specs and Constructor, followed by installing the built installer. These commands should be run in the project directory after ensuring Pixi is available in the terminal.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/constructor-minimal/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Build the installer\npixi run build\n\n# Install the built installer\npixi run start\n```\n\n----------------------------------------\n\nTITLE: Defining Host Dependencies for Cross-Compilation (TOML)\nDESCRIPTION: This snippet demonstrates how to specify host dependencies when cross-compiling. It uses SDL2 as an example of a library that needs to be added to the host-dependencies table when compiling for a different architecture.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/build/dependency_types.md#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n # in our example these dependencies will use the aarch64 binaries\n[host-dependencies]\nsdl2 = \"*\"\n```\n\n----------------------------------------\n\nTITLE: Generating Markdown Diff with pixi-diff-to-markdown\nDESCRIPTION: Command showing how to pipe the output of pixi-diff to pixi-diff-to-markdown to generate a human-readable markdown file containing the lockfile differences.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/third_party/pixi_diff.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npixi-diff <(git show HEAD~20:pixi.lock) pixi.lock | pixi-diff-to-markdown > diff.md\n```\n\n----------------------------------------\n\nTITLE: Using the 'pixi completion' Command in Bash\nDESCRIPTION: This snippet demonstrates the usage of the 'pixi completion' command to generate a shell completion script. It requires specifying the target shell using the --shell option.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/completion.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi completion --shell <SHELL>\n```\n\n----------------------------------------\n\nTITLE: Usage of pixi workspace requires-pixi command\nDESCRIPTION: Shows the basic usage syntax for the 'pixi workspace requires-pixi' command. This command is used to manage the Pixi minimum version requirement and requires additional subcommands to perform specific actions.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/workspace/requires-pixi.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi workspace requires-pixi [OPTIONS] <COMMAND>\n```\n\n----------------------------------------\n\nTITLE: C++ Source with Nanobind Implementation\nDESCRIPTION: C++ source file implementing a simple math function and its Python binding using nanobind.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/build/cpp.md#2025-04-23_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n--8<-- \"docs/source_files/pixi_workspaces/pixi_build/cpp/src/math.cpp\"\n```\n\n----------------------------------------\n\nTITLE: Using Pixi Workspace Version Minor Command in Bash\nDESCRIPTION: This command is used to bump the workspace version to the next minor version in a Pixi project. It increments the minor version number while keeping the major version the same and resetting the patch version to 0.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/workspace/version/minor.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi workspace version minor\n```\n\n----------------------------------------\n\nTITLE: Using Pixi Workspace System Requirements List Command in Bash\nDESCRIPTION: This command lists the environments in the manifest file. It can be customized with options to output in JSON format or to list requirements for a specific environment.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/workspace/system-requirements/list.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi workspace system-requirements list [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Using pixi config prepend command\nDESCRIPTION: Command syntax for prepending a value to a list configuration key in pixi. The command requires specifying both the key to modify and the value to prepend.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/config/prepend.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi config prepend [OPTIONS] <KEY> <VALUE>\n```\n\n----------------------------------------\n\nTITLE: Running a Task with Poetry (Shell)\nDESCRIPTION: Shows how to run an executable or script within the Poetry virtual environment using 'poetry run'. In this case, it runs the 'which python' command, outputting the path to the Python interpreter associated with the Poetry environment.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/switching_from/poetry.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npoetry run which python\n```\n\n----------------------------------------\n\nTITLE: Executing Pixi Command to Unset Workspace Version Requirement\nDESCRIPTION: This command removes the Pixi minimum version requirement from the workspace configuration. It is used when you no longer need to enforce a specific Pixi version for the project.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/workspace/requires-pixi/unset.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi workspace requires-pixi unset\n```\n\n----------------------------------------\n\nTITLE: Configuring PyPI Dependencies with Custom Index in TOML\nDESCRIPTION: Demonstrates how to specify a custom PyPI index for a specific dependency in the pixi.toml file. This allows targeting alternative package repositories like PyTorch's custom wheel index.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/CHANGELOG.md#2025-04-23_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\n[pypi-dependencies]\npytorch ={ version = \"*\", index = \"https://download.pytorch.org/whl/cu118\" }\n```\n\n----------------------------------------\n\nTITLE: Installing x86 version of Pixi on Apple Silicon\nDESCRIPTION: This command forces the installation of the x86 version of Pixi on Apple Silicon Macs using the PIXI_ARCH environment variable.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/advanced/installation.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncurl -fsSL https://pixi.sh/install.sh | PIXI_ARCH=x86_64 bash\n```\n\n----------------------------------------\n\nTITLE: Building and Testing Pixi from Source\nDESCRIPTION: Commands to build and test Pixi locally using Cargo for development purposes.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/README.md#2025-04-23_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncargo build\ncargo test\n```\n\n----------------------------------------\n\nTITLE: Token Authentication with Prefix.dev\nDESCRIPTION: GitHub Action configuration for authenticating with prefix.dev using a bearer token stored in GitHub secrets.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/ci/github_actions.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- uses: prefix-dev/setup-pixi@v0.8.3\n  with:\n    auth-host: prefix.dev\n    auth-token: ${{ secrets.PREFIX_DEV_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Viewing Markdown Diff with md-tui\nDESCRIPTION: Command demonstrating how to use md-tui to view the generated markdown diff file in the terminal with proper formatting and rendering.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/third_party/pixi_diff.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmdt diff.md\n```\n\n----------------------------------------\n\nTITLE: Listing Project Authors in Pixi Workspace (TOML)\nDESCRIPTION: Illustrates including a list of workspace authors using the authors key. Each string in the array should be a name or identifier. This metadata is optional but recommended for clarity and provenance.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_manifest.md#2025-04-23_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\nauthors = [\n  \"Alice Example\",\n  \"Bob Example\"\n]\n\n```\n\n----------------------------------------\n\nTITLE: Starting RViz for ROS1 Noetic\nDESCRIPTION: Command to start RViz for visualizing the turtle in ROS1 Noetic. This should be run in a separate terminal.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/turtlesim/README.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\npixi run -e noetic rviz\n```\n\n----------------------------------------\n\nTITLE: Importing interact from ipywidgets\nDESCRIPTION: This snippet imports the interact function from the ipywidgets module, which will be used to create an interactive widget.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/jupyterlab/Factoring.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import interact\n```\n\n----------------------------------------\n\nTITLE: Using Pixi Task Remove Command in Bash\nDESCRIPTION: This snippet demonstrates the basic usage of the 'pixi task remove' command. It shows the command syntax and indicates that options and task names can be provided.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/task/remove.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi task remove [OPTIONS] [TASK_NAME]...\n```\n\n----------------------------------------\n\nTITLE: Using Pixi Workspace System Requirements Command in Bash\nDESCRIPTION: This snippet shows the basic usage syntax for the 'pixi workspace system-requirements' command. It demonstrates how to invoke the command with options and subcommands.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/workspace/system-requirements.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi workspace system-requirements [OPTIONS] <COMMAND>\n```\n\n----------------------------------------\n\nTITLE: Overriding pypi-dependencies with conda dependencies in pyproject.toml\nDESCRIPTION: This snippet shows how to override pypi-dependencies with conda dependencies in pyproject.toml for Pixi. Pixi will prioritize conda dependencies over pypi dependencies.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/pyproject_toml.md#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[project]\nname = \"my_project\"\nrequires-python = \">=3.9\"\ndependencies = [\n    \"numpy\",\n    \"pandas\",\n    \"matplotlib\",\n]\n\n[tool.pixi.workspace]\nchannels = [\"conda-forge\"]\nplatforms = [\"linux-64\", \"osx-arm64\", \"osx-64\", \"win-64\"]\n\n[tool.pixi.dependencies]\nnumpy = \"*\"\npandas = \"*\"\nmatplotlib = \"*\"\n```\n\n----------------------------------------\n\nTITLE: Checking CUDA Version Information in Pixi\nDESCRIPTION: Shell command to display Pixi's system information, which includes detected virtual packages like __cuda. This helps verify if Pixi correctly detects the CUDA installation on the system.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/pytorch.md#2025-04-23_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\npixi info\n```\n\n----------------------------------------\n\nTITLE: Executing 'pixi workspace name get' Command in Bash\nDESCRIPTION: This command retrieves the name of the current Pixi workspace. It is used in the terminal or command prompt to display the workspace identifier.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/workspace/name/get.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi workspace name get\n```\n\n----------------------------------------\n\nTITLE: Building and testing Pixi from source\nDESCRIPTION: These commands build and test Pixi from source code using Cargo. Useful for developers who want to make changes to Pixi.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/advanced/installation.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncargo build\ncargo test\n```\n\n----------------------------------------\n\nTITLE: Setting up Pixi autocompletion for Bash\nDESCRIPTION: This command sets up autocompletion for Pixi in Bash shells. It should be added to the ~/.bashrc file.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/advanced/installation.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\neval \"$(pixi completion --shell bash)\"\n```\n\n----------------------------------------\n\nTITLE: Example of Setting Pixi Minimum Version\nDESCRIPTION: Provides a concrete example of how to use the 'set' subcommand to set the minimum Pixi version to 0.42 for a project workspace.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/workspace/requires-pixi/set.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npixi workspace pixi-minimum set 0.42\n```\n\n----------------------------------------\n\nTITLE: Using Pixi Auth Login Command\nDESCRIPTION: Shows the usage and options for the pixi auth login command, which supports different authentication methods including tokens, basic HTTP auth, and S3 credentials.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/deployment/authentication.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nUsage: pixi auth login [OPTIONS] <HOST>\n\nArguments:\n  <HOST>  The host to authenticate with (e.g. repo.prefix.dev)\n\nOptions:\n      --token <TOKEN>                                The token to use (for authentication with prefix.dev)\n      --username <USERNAME>                          The username to use (for basic HTTP authentication)\n      --password <PASSWORD>                          The password to use (for basic HTTP authentication)\n      --conda-token <CONDA_TOKEN>                    The token to use on anaconda.org / quetz authentication\n      --s3-access-key-id <S3_ACCESS_KEY_ID>          The S3 access key ID\n      --s3-secret-access-key <S3_SECRET_ACCESS_KEY>  The S3 secret access key\n      --s3-session-token <S3_SESSION_TOKEN>          The S3 session token\n  -v, --verbose...                                   Increase logging verbosity\n  -q, --quiet...                                     Decrease logging verbosity\n      --color <COLOR>                                Whether the log needs to be colored [env: PIXI_COLOR=] [default: auto] [possible values: always, never, auto]\n      --no-progress                                  Hide all progress bars, always turned on if stderr is not a terminal [env: PIXI_NO_PROGRESS=]\n  -h, --help                                         Print help\n```\n\n----------------------------------------\n\nTITLE: Finding Conda Shim Path on Linux & macOS\nDESCRIPTION: Command to get the full path of the conda shim executable on Linux and macOS systems, which is needed when configuring PyCharm.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/editor/jetbrains.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npixi run 'echo $CONDA_PREFIX/libexec/conda'\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies to Existing Environment in Pixi\nDESCRIPTION: This shell command shows how to add new dependencies to an existing environment using Pixi CLI.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/global_tools/manifest.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npixi global add --environment my-env package-a package-b\n```\n\n----------------------------------------\n\nTITLE: Installing the Generated Wheel File\nDESCRIPTION: These commands navigate to the 'dist' folder and install the generated wheel file for local testing using pip.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/pybind11/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd dist\n```\n\nLANGUAGE: sh\nCODE:\n```\npip install your_package_name-version-py3-none-any.whl\n```\n\n----------------------------------------\n\nTITLE: Extracting Results from Interactive Lorenz System Explorer in Python\nDESCRIPTION: These snippets demonstrate how to extract the results and parameters from the interactive widget. They show how to access the computed trajectories and the current parameter values used in the simulation.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/jupyterlab/LorenzDifferentialEquations.ipynb#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nt, x_t = w.result\n```\n\nLANGUAGE: python\nCODE:\n```\nw.kwargs\n```\n\n----------------------------------------\n\nTITLE: Using 'pixi list' Command in Bash\nDESCRIPTION: This snippet shows the basic usage syntax for the 'pixi list' command. It allows for optional arguments and options to customize the listing of workspace packages.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/list.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi list [OPTIONS] [REGEX]\n```\n\n----------------------------------------\n\nTITLE: Usage of 'pixi workspace requires-pixi set' Command\nDESCRIPTION: Demonstrates the syntax for using the 'set' subcommand to specify the minimum Pixi version required for a project. The command takes a single argument for the version number.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/workspace/requires-pixi/set.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi workspace requires-pixi set <VERSION>\n```\n\n----------------------------------------\n\nTITLE: Using PowerShell with Pixi in GitHub Actions\nDESCRIPTION: GitHub Action step that demonstrates how to use PowerShell as a shell wrapper for running commands inside a Pixi environment, with proper command syntax for PowerShell.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/ci/github_actions.md#2025-04-23_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n- run: | # (1)!\n    python --version | Select-String \"3.11\"\n  shell: pixi run pwsh -Command {0} # pwsh works on all platforms\n```\n\n----------------------------------------\n\nTITLE: Example of Uninstalling Multiple Global Environments\nDESCRIPTION: Demonstrates how to use the 'pixi global uninstall' command to remove multiple environments ('pixi-pack' and 'rattler-build') from the global Pixi setup.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/global/uninstall.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npixi global uninstall pixi-pack rattler-build\n```\n\n----------------------------------------\n\nTITLE: Using 'pixi workspace description set' Command\nDESCRIPTION: This command is used to set the description for a Pixi workspace. It requires a single argument which is the description text.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/workspace/description/set.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi workspace description set <DESCRIPTION>\n```\n\n----------------------------------------\n\nTITLE: Executing Pixi CLI Documentation Generator\nDESCRIPTION: This command runs the documentation generator for the Pixi CLI. It uses the 'pixi run' command to execute a predefined task named 'generate-cli-docs'.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/pixi_docs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`pixi run generate-cli-docs`\n```\n\n----------------------------------------\n\nTITLE: Wasabi S3-Compatible Configuration for Pixi\nDESCRIPTION: TOML configuration snippet for Wasabi storage. Specifies Wasabi-specific endpoint URL, region, and path style settings.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/deployment/s3.md#2025-04-23_snippet_12\n\nLANGUAGE: toml\nCODE:\n```\nendpoint-url = \"https://s3.de-1.wasabisys.com\"\nregion = \"de-1\"\nforce-path-style = false\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Basic HTTP Security\nDESCRIPTION: Example of logging into a server secured with Basic HTTP Authentication by providing a username and password.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/deployment/authentication.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npixi auth login myserver.com --username user --password password\n```\n\n----------------------------------------\n\nTITLE: MinIO S3-Compatible Configuration for Pixi\nDESCRIPTION: TOML configuration for connecting to MinIO S3-compatible storage in Pixi. Specifies endpoint URL, region, and path style settings for MinIO.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/deployment/s3.md#2025-04-23_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\n[workspace.s3-options]\nendpoint-url = \"https://minio.example.com\"\nregion = \"us-east-1\"\nforce-path-style = true\n```\n\n----------------------------------------\n\nTITLE: Basic Pixi Shell Command\nDESCRIPTION: Simple command to launch a new shell with pixi environment activated.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/advanced/pixi_shell.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npixi shell\n```\n\n----------------------------------------\n\nTITLE: Running Face Detection with Pixi and OpenCV\nDESCRIPTION: This command runs a simple face detection algorithm using Pixi. It utilizes OpenCV for computer vision tasks.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/opencv/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npixi run start\n```\n\n----------------------------------------\n\nTITLE: Example Output: Package Installed from Conda - Shell\nDESCRIPTION: Shows the output of the 'pixi list pygments' command after pygments has been installed from Conda. The output table provides details such as version, build string, size, distribution kind, and source. No dependencies are needed; this is strictly command output for verification.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/tutorial.md#2025-04-23_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\nPackage   Version  Build         Size       Kind   Source\\npygments  2.19.1   pyhd8ed1ab_0  867.8 KiB  conda  pygments\n```\n\n----------------------------------------\n\nTITLE: Configuring CUDA Feature with Separate Tables in TOML\nDESCRIPTION: Shows an alternative way to set up a CUDA feature using separate tables for each configuration option in a Pixi manifest file.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_manifest.md#2025-04-23_snippet_35\n\nLANGUAGE: toml\nCODE:\n```\n[feature.cuda.activation]\nscripts = [\"cuda_activation.sh\"]\n\n[feature.cuda.dependencies]\ncuda = \"x.y.z\"\ncudnn = \"12.0\"\n\n[feature.cuda.pypi-dependencies]\ntorch = \"==1.9.0\"\n\n[feature.cuda.system-requirements]\ncuda = \"12\"\n\n[feature.cuda.tasks]\nwarmup = \"python warmup.py\"\n\n[feature.cuda.target.osx-arm64.dependencies]\nmlx = \"x.y.z\"\n\n# Channels and Platforms are not available as separate tables as they are implemented as lists\n[feature.cuda]\nchannels = [\"nvidia\"]\nplatforms = [\"linux-64\", \"osx-arm64\"]\n```\n\n----------------------------------------\n\nTITLE: Using the Pixi Clean Cache Command\nDESCRIPTION: Basic usage syntax for the 'pixi clean cache' command with optional parameters. This command allows users to clean specific caches by providing appropriate flags.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/clean/cache.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi clean cache [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Usage of 'pixi workspace name set' Command\nDESCRIPTION: Demonstrates the syntax for using the 'pixi workspace name set' command in the Pixi CLI. This command is used to set the name of a workspace.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/workspace/name/set.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npixi workspace name set <NAME>\n```\n\n----------------------------------------\n\nTITLE: Configuring Public S3 Bucket in Pixi TOML\nDESCRIPTION: TOML configuration for accessing a public S3 bucket via HTTPS URL. This doesn't require authentication as the bucket is publicly accessible.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/deployment/s3.md#2025-04-23_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[workspace]\nchannels = [\"https://my-public-bucket.s3.eu-central-1.amazonaws.com/channel\"]\n```\n\n----------------------------------------\n\nTITLE: Removing Exposed Binary Example\nDESCRIPTION: Example showing how to remove a previously exposed binary from the global environment.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/global/expose.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npixi global expose remove python310 --environment myenv\n```\n\n----------------------------------------\n\nTITLE: Retrieving Workspace Version using Pixi CLI\nDESCRIPTION: This command retrieves the current version of the workspace using the Pixi CLI. It is used to display the version information for the current project or workspace.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/workspace/version/get.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi workspace version get\n```\n\n----------------------------------------\n\nTITLE: Configuring Zsh Completions for Pixi Global Packages\nDESCRIPTION: Zsh shell configuration to enable completions for tools installed with pixi global.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/global_tools/introduction.md#2025-04-23_snippet_7\n\nLANGUAGE: zsh\nCODE:\n```\n# zsh, default on macOS\nfpath+=(~/.pixi/completions/zsh)\nautoload -Uz compinit\ncompinit\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Version for Pixi\nDESCRIPTION: Command to build Pixi with a custom version string that will be displayed in the '--version' output. Useful for package maintainers to specify their own versioning scheme.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/misc/packaging.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nPIXI_VERSION=\"HEAD-123456\" cargo build --locked --profile dist\n```\n\n----------------------------------------\n\nTITLE: Pixi Config Append Example\nDESCRIPTION: Example showing how to append a new channel to the default-channels configuration list.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/config/append.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npixi config append default-channels bioconda\n```\n\n----------------------------------------\n\nTITLE: Removing Dependencies from Environment in Pixi\nDESCRIPTION: This shell command demonstrates how to remove dependencies from an existing environment using Pixi CLI.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/global_tools/manifest.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\npixi global remove --environment my-env package-a package-b\n```\n\n----------------------------------------\n\nTITLE: Problematic Shell Configuration Examples\nDESCRIPTION: Examples of shell configurations that can interfere with pixi shell functionality, including WSL and alternative shell execution patterns.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/advanced/pixi_shell.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# on WSL - the `wsl.exe` somehow takes over `stdin` and prevents `pixi shell` from succeeding\nwsl.exe -d wsl-vpnkit --cd /app service wsl-vpnkit start\n\n# on macOS or Linux, some users start fish or nushell from their `bashrc`\n# If you wish to start an alternative shell from bash, it's better to do so\n# from `~/.bash_profile` or `~/.profile`\nif [[ $- = *i* ]]; then\n  exec ~/.pixi/bin/fish\nfi\n```\n\n----------------------------------------\n\nTITLE: Starting Pixi Shell for ROS2 Humble\nDESCRIPTION: Command to start a Pixi shell in the ROS2 Humble environment, allowing execution of ROS2 commands like topic echo.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/turtlesim/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npixi shell\nros2 topic echo /turtle1/cmd_vel\n```\n\n----------------------------------------\n\nTITLE: Installing Pixi on Windows with Winget\nDESCRIPTION: Command to install Pixi using the Windows Package Manager (winget), which provides a simpler installation process without manual script execution.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nwinget install prefix-dev.pixi\n```\n\n----------------------------------------\n\nTITLE: Displaying LightGBM Model Results\nDESCRIPTION: This code block shows the expected output after running the LightGBM model, including the model accuracy and confusion matrix metrics (True Positive, True Negative, False Positive, False Negative).\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/lightgbm/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nModel accuracy: 0.930\nTrue Positive(TP) = 55\nTrue Negatice(TN) = 104\nFalse Positive(FP) = 8\nFalse Negative(FN) = 4\n```\n\n----------------------------------------\n\nTITLE: Using the Pixi Shell Command\nDESCRIPTION: This snippet shows the basic usage of the 'pixi shell' command. It can be run with optional arguments to customize the shell environment.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/shell.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi shell [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Checking Pixi Windows Installation Script\nDESCRIPTION: PowerShell command to view the installation script before executing it, allowing users to verify its contents for security.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\npowershell -c \"irm -useb https://pixi.sh/install.ps1 | more\"\n```\n\n----------------------------------------\n\nTITLE: Google Cloud Storage Configuration for Pixi\nDESCRIPTION: TOML configuration snippet for Google Cloud Storage. Specifies GCS endpoint URL, region, and path style settings for S3-compatible access.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/deployment/s3.md#2025-04-23_snippet_14\n\nLANGUAGE: toml\nCODE:\n```\nendpoint-url = \"https://storage.googleapis.com\"\nregion = \"us-east-1\"\nforce-path-style = false\n```\n\n----------------------------------------\n\nTITLE: Unpacking without pixi-pack using conda or micromamba\nDESCRIPTION: Commands to unpack and install the environment using conda or micromamba when pixi-pack is not available.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/deployment/pixi_pack.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ntar -xvf environment.tar\nmicromamba create -p ./env --file environment.yml\n# or\nconda env create -p ./env --file environment.yml\n```\n\n----------------------------------------\n\nTITLE: Using Pixi Workspace Export Command in Shell\nDESCRIPTION: This snippet shows the basic usage syntax for the 'pixi workspace export' command. It demonstrates how to invoke the command and indicates that it requires a subcommand.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/workspace/export.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npixi workspace export <COMMAND>\n```\n\n----------------------------------------\n\nTITLE: Configuring Bash Completions for Pixi Global Packages\nDESCRIPTION: Bash shell configuration to enable completions for tools installed with pixi global.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/global_tools/introduction.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# bash, default on most Linux distributions\nsource ~/.pixi/completions/bash/*\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Dependencies in Pixi TOML\nDESCRIPTION: Example of specifying platform-specific dependencies in pixi.toml. It shows how to define general dependencies and override them for specific platforms like Windows.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/workspace/multi_platform_configuration.md#2025-04-23_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\npython = \">=3.8\"\n\n[target.win-64.dependencies]\nmsmpi = \"*\"\npython = \"3.8\"\n```\n\n----------------------------------------\n\nTITLE: Bash/Zsh Pixi Shell-Hook Evaluation\nDESCRIPTION: Command to evaluate pixi shell-hook output for environment activation in bash or zsh shells.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/advanced/pixi_shell.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\neval \"$(pixi shell-hook)\"\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies to a Pixi Project\nDESCRIPTION: Command to add a package dependency to a Pixi project. This example adds the cowpy package.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/README.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\npixi add cowpy\n```\n\n----------------------------------------\n\nTITLE: Installing Pixi on Linux and macOS using wget\nDESCRIPTION: This command downloads and executes the Pixi installation script using wget. It's an alternative method for systems without curl installed.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/advanced/installation.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwget -qO- https://pixi.sh/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Starting RViz for ROS2 Humble\nDESCRIPTION: Command to start RViz for visualizing the turtle in ROS2 Humble. This should be run in a separate terminal.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/turtlesim/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npixi run rviz\n```\n\n----------------------------------------\n\nTITLE: Installing Pixi using Homebrew\nDESCRIPTION: This command installs Pixi using the Homebrew package manager on macOS or Linux systems with Homebrew installed.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/advanced/installation.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nbrew install pixi\n```\n\n----------------------------------------\n\nTITLE: Executing Custom Pixi Start Task and Output in Shell\nDESCRIPTION: Runs the custom 'start' task (which executes `cargo run`) using `pixi run start` and shows the expected standard output \"Hello, world!\" from the default Rust executable.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/tutorials/rust.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\npixi run start\nHello, world!\n```\n\n----------------------------------------\n\nTITLE: Usage of Pixi Shell Hook Command\nDESCRIPTION: Demonstrates the basic usage syntax for the 'pixi shell-hook' command. This command is used to print the Pixi environment activation script.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/shell-hook.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi shell-hook [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Installing Pixi from source using Cargo\nDESCRIPTION: This command installs Pixi from its source code using Cargo, the Rust package manager. It clones the repository and builds the latest version.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/advanced/installation.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncargo install --locked --git https://github.com/prefix-dev/pixi.git pixi\n```\n\n----------------------------------------\n\nTITLE: Custom Cache Key Configuration\nDESCRIPTION: GitHub Action configuration that shows how to restrict cache writing to only occur on the main branch to avoid exceeding GitHub's cache size limits.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/ci/github_actions.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- uses: prefix-dev/setup-pixi@v0.8.3\n  with:\n    cache: true\n    cache-write: ${{ github.event_name == 'push' && github.ref_name == 'main' }}\n```\n\n----------------------------------------\n\nTITLE: Teleoperating ROS2 Humble Turtle\nDESCRIPTION: Command to start the teleop node for controlling the turtle in ROS2 Humble. This should be run in a second terminal.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/turtlesim/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npixi run teleop\n```\n\n----------------------------------------\n\nTITLE: Using Pixi Workspace Platform Command in Bash\nDESCRIPTION: This snippet demonstrates the basic usage of the 'pixi workspace platform' command. It shows the command structure and indicates that additional options and subcommands are available.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/workspace/platform.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi workspace platform [OPTIONS] <COMMAND>\n```\n\n----------------------------------------\n\nTITLE: Configuring Fish Completions for Pixi Global Packages\nDESCRIPTION: Fish shell configuration to enable completions for tools installed with pixi global.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/global_tools/introduction.md#2025-04-23_snippet_8\n\nLANGUAGE: fish\nCODE:\n```\n# fish\nfor file in ~/.pixi/completions/fish/*\n    source $file\nend\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependency Versions in Pixi (TOML)\nDESCRIPTION: Demonstrates typical version specifiers for package dependencies in Pixi environments, using range and wildcard expressions. Shows how to enforce version boundaries or allow any version in 'pyproject.toml'.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/switching_from/poetry.md#2025-04-23_snippet_18\n\nLANGUAGE: toml\nCODE:\n```\nnumpy = \">=1.2.3 <2.0.0\"\n```\n\nLANGUAGE: toml\nCODE:\n```\nnumpy = \">=1.2.3 <1.3.0\"\n```\n\nLANGUAGE: toml\nCODE:\n```\nnumpy = \"*\"\n```\n\n----------------------------------------\n\nTITLE: Installing Git with Completions Support\nDESCRIPTION: Command to install git globally with pixi, which will automatically install shell completions.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/global_tools/introduction.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npixi global install git\n```\n\n----------------------------------------\n\nTITLE: Creating 3D Surface Plot with Projections using Matplotlib in Python\nDESCRIPTION: This code snippet demonstrates how to create a 3D surface plot with projected contours using matplotlib and mpl_toolkits.mplot3d. It generates test data, plots the 3D surface, adds contour projections for each dimension, and sets axis labels and limits.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/wasm-jupyterlite/files/Matplotlib.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport matplotlib.pyplot as plt\n\nfrom mpl_toolkits.mplot3d import axes3d\n\nax = plt.figure().add_subplot(projection='3d')\nX, Y, Z = axes3d.get_test_data(0.05)\n\n# Plot the 3D surface\nax.plot_surface(X, Y, Z, edgecolor='royalblue', lw=0.5, rstride=8, cstride=8,\n                alpha=0.3)\n\n# Plot projections of the contours for each dimension.  By choosing offsets\n# that match the appropriate axes limits, the projected contours will sit on\n# the 'walls' of the graph\nax.contourf(X, Y, Z, zdir='z', offset=-100, cmap='coolwarm')\nax.contourf(X, Y, Z, zdir='x', offset=-40, cmap='coolwarm')\nax.contourf(X, Y, Z, zdir='y', offset=40, cmap='coolwarm')\n\nax.set(xlim=(-40, 40), ylim=(-40, 40), zlim=(-100, 100),\n       xlabel='X', ylabel='Y', zlabel='Z')\n\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Installing Pixi on macOS with Zsh\nDESCRIPTION: Command to install Pixi specifically for macOS Catalina or newer where Zsh is the default shell. This ensures proper PATH configuration in .zshrc.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\ncurl -fsSL https://pixi.sh/install.sh | zsh\n```\n\n----------------------------------------\n\nTITLE: Teleoperating ROS1 Noetic Turtle\nDESCRIPTION: Command to start the teleop node for controlling the turtle in ROS1 Noetic. This should be run in a third terminal.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/turtlesim/README.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npixi run -e noetic teleop\n```\n\n----------------------------------------\n\nTITLE: Customizing Pixi Self-Update Error Message\nDESCRIPTION: Command to build Pixi with a custom error message for the self-update functionality when it's disabled. This helps direct users to the appropriate package manager for updates.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/misc/packaging.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nPIXI_SELF_UPDATE_DISABLED_MESSAGE=\"`self-update` has been disabled for this build. Run `brew upgrade pixi` instead\" cargo build --locked --profile dist\n```\n\n----------------------------------------\n\nTITLE: Python Script for Displaying Python Version\nDESCRIPTION: This Python script uses the cowpy library to display a message with the current Python version. It's used to demonstrate the different Python versions in the multi-environment setup.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/getting_started.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/source_files/pixi_workspaces/introduction/multi_env/hello.py\"\n```\n\n----------------------------------------\n\nTITLE: Global Option for Pixi Task Command in Markdown\nDESCRIPTION: Describes the global option '--manifest-path' for the 'pixi task' command. This option allows specifying the path to the configuration file or workspace directory.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/task.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- <a id=\"arg---manifest-path\" href=\"#arg---manifest-path\">`--manifest-path <MANIFEST_PATH>`</a>\n:  The path to `pixi.toml`, `pyproject.toml`, or the workspace directory\n```\n\n----------------------------------------\n\nTITLE: Setting Workspace Homepage URL (TOML)\nDESCRIPTION: Provides an example of the homepage key pointing to a project or organization webpage. Useful for metadata, discovery, or when publishing workspace metadata to third parties. Value must be a valid URL string.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_manifest.md#2025-04-23_snippet_12\n\nLANGUAGE: toml\nCODE:\n```\nhomepage = \"https://example.com/myworkspace\"\n\n```\n\n----------------------------------------\n\nTITLE: Version Specification Examples\nDESCRIPTION: Examples of different version specification formats for package dependencies.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_manifest.md#2025-04-23_snippet_23\n\nLANGUAGE: toml\nCODE:\n```\npackage0 = \"==1.2.3\"\npackage1 = \"~=1.2.3\"\npackage2 = \">1.2,<=1.4\"\n```\n\n----------------------------------------\n\nTITLE: Pixi Workspace Environment Global Option in Markdown\nDESCRIPTION: This snippet describes the global option '--manifest-path' for the 'pixi workspace environment' command. It specifies the path to the manifest file or workspace directory.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/workspace/environment.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- <a id=\"arg---manifest-path\" href=\"#arg---manifest-path\">`--manifest-path <MANIFEST_PATH>`</a>\n:  The path to `pixi.toml`, `pyproject.toml`, or the workspace directory\n```\n\n----------------------------------------\n\nTITLE: Referencing Build System Configuration in TOML\nDESCRIPTION: References a TOML configuration snippet that defines the build system setup, though the actual snippet content is not shown in the source (uses a file inclusion directive).\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/build/backends.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n--8<-- \"docs/source_files/pixi_tomls/simple_pixi_build.toml:build-system\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Directory Structure in Shell\nDESCRIPTION: Shows the directory structure of the project after copying the 'python_binding' package into a 'packages' folder.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/build/workspace.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n.\n├── packages\n│   └── cpp_math\n│       ├── CMakeLists.txt\n│       ├── pixi.toml\n│       └── src\n│           └── math.cpp\n├── pixi.lock\n├── pixi.toml\n├── pyproject.toml\n└── src\n    └── python_rich\n        └── __init__.py\n```\n\n----------------------------------------\n\nTITLE: Usage of deprecated 'pixi global upgrade-all' command\nDESCRIPTION: Shows the basic usage syntax for the deprecated 'pixi global upgrade-all' command. This command is no longer supported and users should use 'pixi global update' instead.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/global/upgrade-all.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi global upgrade-all [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Pixi Workspace Configuration\nDESCRIPTION: The pixi workspace section in pyproject.toml that defines channels and platforms for the project environment.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/tutorial.md#2025-04-23_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n# Main pixi entry\n[tool.pixi.workspace]\nchannels = [\"conda-forge\"]\n# This is your machine platform by default\nplatforms = [\"osx-arm64\"]\n```\n\n----------------------------------------\n\nTITLE: Installing Pixi on Alpine Linux with APK\nDESCRIPTION: Command to install Pixi on Alpine Linux using the apk package manager after enabling the testing repository.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/README.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\napk add pixi\n```\n\n----------------------------------------\n\nTITLE: Importing Interactive Widgets in Python\nDESCRIPTION: This code imports the interact function from ipywidgets, which will be used to create an interactive slider.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/jupyterlab/Image_Browsing.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import interact\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Python Extension with pybind11\nDESCRIPTION: This CMake script sets up a project for building a Python extension module. It specifies the minimum CMake version, project details, finds pybind11, compiles source files, and configures the module installation.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/pybind11/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15...3.29)\n\nproject(${SKBUILD_PROJECT_NAME} VERSION ${SKBUILD_PROJECT_VERSION} LANGUAGES CXX)\n\nset(PYBIND11_NEWPYTHON ON)\nfind_package(pybind11 CONFIG REQUIRED)\n\nfile(GLOB SOURCES \"src/*.cpp\")\n\npybind11_add_module(${PROJECT_NAME} ${SOURCES})\n\ninstall(TARGETS ${PROJECT_NAME} DESTINATION .)\n```\n\n----------------------------------------\n\nTITLE: Finding Python 3.8 Interpreter and Development Components in CMake\nDESCRIPTION: Locates a Python 3.8 installation using CMake's `find_package`. It requires both the interpreter and the development components (`Development.Module`) necessary for building Python extension modules. The build will fail if a suitable Python 3.8 installation is not found.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/source_files/pixi_workspaces/pixi_build/cpp/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Python 3.8 COMPONENTS Interpreter Development.Module REQUIRED) # (1)!\n```\n\n----------------------------------------\n\nTITLE: Usage of 'pixi tree' Command in Bash\nDESCRIPTION: Shows the basic usage syntax for the 'pixi tree' command. It can accept optional arguments and a regex pattern.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/tree.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi tree [OPTIONS] [REGEX]\n```\n\n----------------------------------------\n\nTITLE: Specifying SPDX-compliant License String (TOML)\nDESCRIPTION: Shows how to annotate the workspace's license using the license key with a valid SPDX identifier. Multiple licenses may be composed (e.g. MIT AND Apache-2.0). This field is optional and serves documentation or compliance tooling.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_manifest.md#2025-04-23_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\nlicense = \"MIT AND Apache-2.0\"\n\n```\n\n----------------------------------------\n\nTITLE: Adding a Project Description in Pixi Workspace (TOML)\nDESCRIPTION: Demonstrates the use of the description key, which stores a brief summary of the workspace's purpose. The value should be a concise string representing the intent or features of the environment.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_manifest.md#2025-04-23_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\ndescription = \"A vivid description of my workspace.\"\n\n```\n\n----------------------------------------\n\nTITLE: Running Visualization Script for ROS1 Noetic\nDESCRIPTION: Command to run a script that visualizes the turtle in RViz for ROS1 Noetic. This should be run in another terminal.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/turtlesim/README.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\npixi run -e noetic viz\n```\n\n----------------------------------------\n\nTITLE: Dependabot Configuration for GitHub Actions\nDESCRIPTION: Configuration for GitHub's Dependabot to automatically update action versions. This is recommended since Pixi is not yet stable and API changes may occur between minor versions.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/ci/github_actions.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2\nupdates:\n  - package-ecosystem: github-actions\n    directory: /\n    schedule:\n      interval: monthly # (1)!\n    groups:\n      dependencies:\n        patterns:\n          - \"*\"\n```\n\n----------------------------------------\n\nTITLE: TOML Configuration for Python Installation\nDESCRIPTION: This TOML snippet displays the resulting manifest entry after installing Python with a version constraint.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/global_tools/manifest.md#2025-04-23_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[envs.vim]\nchannels = [\"conda-forge\"]\ndependencies = { python = \"<3.12\" }\n# ...\n```\n\n----------------------------------------\n\nTITLE: Basic Pixi Global Expose Command Usage\nDESCRIPTION: Shows the basic command structure for using the pixi global expose functionality.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/global/expose.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi global expose <COMMAND>\n```\n\n----------------------------------------\n\nTITLE: Using the 'pixi workspace platform list' Command in Bash\nDESCRIPTION: This command is used to list all platforms defined in the Pixi workspace file. It doesn't require any additional arguments and provides an overview of the configured platforms for the project.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/workspace/platform/list.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi workspace platform list\n```\n\n----------------------------------------\n\nTITLE: Using the Pixi Task List Command\nDESCRIPTION: This snippet shows the basic usage of the 'pixi task list' command. It demonstrates how to invoke the command with optional arguments.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/task/list.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi task list [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Pixi on Windows\nDESCRIPTION: PowerShell command to remove the Pixi binary from a Windows system, which is the first step in uninstalling Pixi.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/README.md#2025-04-23_snippet_16\n\nLANGUAGE: powershell\nCODE:\n```\n$PIXI_BIN = \"$Env:LocalAppData\\pixi\\bin\\pixi\"; Remove-Item -Path $PIXI_BIN\n```\n\n----------------------------------------\n\nTITLE: Importing Scikit-learn Datasets in Python\nDESCRIPTION: This snippet imports the datasets module from scikit-learn, which will be used to load the digits dataset.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/jupyterlab/Image_Browsing.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sklearn import datasets\n```\n\n----------------------------------------\n\nTITLE: Adding Cargo Dependency (git2) with Pixi in Shell\nDESCRIPTION: Uses `pixi run` to execute `cargo add git2`. This adds the `git2` crate as a dependency to the Rust project's `Cargo.toml` file while running within the Pixi-managed environment.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/tutorials/rust.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\npixi run cargo add git2\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for cpp_math\nDESCRIPTION: Sets the minimum required CMake version range (3.20 to 3.27) and declares the project name as 'cpp_math'. This is the standard starting point for a CMake project.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/source_files/pixi_workspaces/pixi_build/cpp/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20...3.27)\nproject(cpp_math)\n```\n\n----------------------------------------\n\nTITLE: Injecting additional packages with pixi-pack\nDESCRIPTION: Command to inject additional local packages into the environment during the packing process.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/deployment/pixi_pack.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npixi-pack pack --inject local-package-1.0.0-hbefa133_0.conda --manifest-pack pixi.toml\n```\n\n----------------------------------------\n\nTITLE: Example Directory Layout for Detached Environments (Shell Tree Output)\nDESCRIPTION: This shell code displays an example filesystem structure for Pixi detached environments stored in a custom global directory. It shows how project and global environments are separated and the relationship between folders. This representation is for documentation clarity and does not require any dependencies.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_configuration.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n/opt/pixi/envs\n├── pixi-6837172896226367631\n│   └── envs\n└── NAME_OF_PROJECT-HASH_OF_ORIGINAL_PATH\n    ├── envs # the runnable environments\n    └── solve-group-envs # If there are solve groups\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Starship to Find Python in Pixi Environments\nDESCRIPTION: Configuration for the Starship prompt to correctly locate Python executables in Pixi environments. This configuration sets up fallback paths to ensure Starship can always find the right Python binary.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/third_party/starship.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[python]\n# customize python binary path for pixi\npython_binary = [\n  # this is the python from PATH if in a pixi shell\n  # (assuming you don't have python on your global PATH)\n  \"python\",\n  # fall back to pixi's python if it's available\n  \".pixi/envs/default/bin/python\",\n]\n```\n\n----------------------------------------\n\nTITLE: Installing the Compiled Python Module and Related Files in CMake\nDESCRIPTION: This `install` command defines rules for installing the build artifacts. It installs the compiled Python module target (`${PROJECT_NAME}`) to the Python site-packages directory (`${PYTHON_SITE_PACKAGES}`) determined earlier. It also exports the target information (`EXPORT ${PROJECT_NAME}Targets`) for potential use by other CMake projects and specifies standard installation locations for archive libraries (`CMAKE_INSTALL_LIBDIR`) and runtime executables (`BINDIR`), although these might not be strictly necessary for a typical Python module.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/source_files/pixi_workspaces/pixi_build/advanced_cpp/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ninstall( # (6)!\n    TARGETS ${PROJECT_NAME}\n    EXPORT ${PROJECT_NAME}Targets\n    LIBRARY DESTINATION ${PYTHON_SITE_PACKAGES}\n    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n    RUNTIME DESTINATION ${BINDIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying Pixi Home Environment Variable\nDESCRIPTION: Shows the environment variable PIXI_HOME, which defines the directory where Pixi stores its global data. The default value is the user's home directory followed by '/.pixi'.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/environment_variables.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPIXI_HOME\n```\n\n----------------------------------------\n\nTITLE: Configuring Trampoline JSON for Pixi Global Install\nDESCRIPTION: JSON configuration used by the trampoline binary to set environment variables and run executables installed by pixi global install. It specifies the full path to the executable, PATH additions, and environment variables to set.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/trampoline/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    // Full path to the executable\n    \"exe\": \"/Users/wolfv/.pixi/envs/conda-smithy/bin/conda-smithy\",\n    // One or more path segments to prepend to the PATH environment variable\n    \"path\": \"/Users/wolfv/.pixi/envs/conda-smithy/bin\",\n    // One or more environment variables to set\n    \"env\": {\n        \"CONDA_PREFIX\": \"/Users/wolfv/.pixi/envs/conda-smithy\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Channel-Specific Dependencies Logic Flowchart\nDESCRIPTION: Mermaid flowchart illustrating the logic used to exclude all other channels when a dependency specifies a specific channel. The decision process involves identifying channel-specific dependencies and then excluding all other channels for those packages.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/advanced/channel_logic.md#2025-04-23_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A[Start] --> B[Given a Dependency]\n    B --> C{Channel Specific Dependency?}\n    C -->|Yes| D[Exclude All Other Channels for This Package]\n    C -->|No| E{Any Other Dependencies?}\n    E -->|Yes| B\n    E -->|No| F[End]\n    D --> E\n```\n\n----------------------------------------\n\nTITLE: Defining Task with Changed Input/Output Paths in Pixi Configuration\nDESCRIPTION: Example of a breaking change in task definition where input and output paths are now relative to the project root instead of the task's working directory.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/CHANGELOG.md#2025-04-23_snippet_15\n\nLANGUAGE: toml\nCODE:\n```\ntask = { cmd = \"task to run\", cwd = \"folder\", inputs = \"input.txt\", output = \"output.txt\"}\n```\n\n----------------------------------------\n\nTITLE: Updating Pixi to a specific version\nDESCRIPTION: This command updates Pixi to a specific version using its built-in self-update feature with the --version flag.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/advanced/installation.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npixi self-update --version x.y.z\n```\n\n----------------------------------------\n\nTITLE: Building Pixi with Cargo\nDESCRIPTION: Command to build Pixi using Cargo with the optimized 'dist' profile for binary size. Requires Rust and Cargo as compile-time dependencies.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/misc/packaging.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo build --locked --profile dist\n```\n\n----------------------------------------\n\nTITLE: Loading Digits Dataset from Scikit-learn in Python\nDESCRIPTION: This code loads the digits dataset from scikit-learn into the 'digits' variable.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/jupyterlab/Image_Browsing.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndigits = datasets.load_digits()\n```\n\n----------------------------------------\n\nTITLE: Specifying Path to License File (TOML)\nDESCRIPTION: Illustrates how to reference a license file with the license-file key. The path should be relative to the workspace root and typically points to a .md or .txt file containing license text. This field is optional.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_manifest.md#2025-04-23_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\nlicense-file = \"LICENSE.md\"\n\n```\n\n----------------------------------------\n\nTITLE: Executing Custom Pixi Build Task in Shell\nDESCRIPTION: Runs the custom 'build' task defined in `pixi.toml` using the `pixi run` command. This executes the underlying `cargo build` command within the Pixi environment.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/tutorials/rust.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npixi run build\n```\n\n----------------------------------------\n\nTITLE: Expected Directory Structure after Pixi Initialization\nDESCRIPTION: Illustrates the typical file and directory structure created within `my_ros2_project` after running `pixi init`. It includes git-related files (`.gitattributes`, `.gitignore`) and the Pixi manifest file (`pixi.toml`).\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/tutorials/ros2.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmy_ros2_project\n├── .gitattributes\n├── .gitignore\n└── pixi.toml\n```\n\n----------------------------------------\n\nTITLE: Defining Package Section in Pixi Configuration (TOML)\nDESCRIPTION: Example of defining the package section in a Pixi configuration file. This section is used when the 'pixi-build' preview feature is enabled.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_manifest.md#2025-04-23_snippet_38\n\nLANGUAGE: toml\nCODE:\n```\n--8<-- \"docs/source_files/pixi_tomls/simple_pixi_build.toml:package\"\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Backend Channel in pixi.toml (TOML)\nDESCRIPTION: This TOML snippet, introduced in version 0.41.4, shows how to configure pixi to use a custom S3 bucket as a package channel. It specifies the S3 channel URL (`s3://my-bucket/custom-channel`) within the `[project]` section and provides necessary S3 connection options (endpoint URL, region, path style) under a corresponding `[project.s3-options.<bucket-name>]` section.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n# pixi.toml\n[project]\nchannels = [\"s3://my-bucket/custom-channel\"]\n\n[project.s3-options.my-bucket]\nendpoint-url = \"https://my-s3-host\"\nregion = \"us-east-1\"\nforce-path-style = false\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies in Pixi TOML Configuration\nDESCRIPTION: This snippet shows the dependencies section of the pixi.toml file, which includes Python and cpp_math as dependencies.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/build/variants.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n--8<-- \"docs/source_files/pixi_workspaces/pixi_build/workspace_variants/pixi.toml:dependencies\"\n```\n\n----------------------------------------\n\nTITLE: Error Message for Mismatching Linux Version in Bash\nDESCRIPTION: Shows an example error message when the current system's Linux version doesn't meet the workspace requirements.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/workspace/system_requirements.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n× The current system has a mismatching virtual package. The workspace requires '__linux' to be at least version '4.18' but the system has version '4.12.14'\n```\n\n----------------------------------------\n\nTITLE: Visualizing Lock File Generation Process (Mermaid)\nDESCRIPTION: This Mermaid diagram illustrates the process of generating a lock file in Pixi. It shows the steps from installation initiation to package installation, including the solve step and lock file generation.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/workspace/lockfile.md#2025-04-23_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    A[Install] --> B[Solve]\n    B --> C[Generate and write lock file]\n    C --> D[Install Packages]\n```\n\n----------------------------------------\n\nTITLE: Analyzing Lorenz System Trajectories in Python\nDESCRIPTION: This section computes and visualizes statistics of the Lorenz system trajectories. It calculates the average positions across different trajectories and creates histograms to show the distribution of these averages.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/jupyterlab/LorenzDifferentialEquations.ipynb#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nxyz_avg = x_t.mean(axis=1)\n```\n\nLANGUAGE: python\nCODE:\n```\nxyz_avg.shape\n```\n\nLANGUAGE: python\nCODE:\n```\nplt.hist(xyz_avg[:,0])\nplt.title('Average $x(t)$');\n```\n\nLANGUAGE: python\nCODE:\n```\nplt.hist(xyz_avg[:,1])\nplt.title('Average $y(t)$');\n```\n\n----------------------------------------\n\nTITLE: Using the Pixi Global Command\nDESCRIPTION: This snippet shows the basic usage syntax for the 'pixi global' command. It demonstrates how to invoke the command with subcommands.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/global.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi global <COMMAND>\n```\n\n----------------------------------------\n\nTITLE: Starting ROS2 Humble Turtlesim\nDESCRIPTION: Command to start the ROS2 Humble turtlesim example using Pixi. This should be run in one terminal.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/turtlesim/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npixi run start\n```\n\n----------------------------------------\n\nTITLE: Creating Project Structure in Shell\nDESCRIPTION: Shell code showing the directory structure of a simple Python package with src-layout, containing a single Python file and the pyproject.toml metadata file.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/build/python.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n├── src # (1)!\n│   └── python_rich\n│       └── __init__.py\n└── pyproject.toml\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependency Versions in Poetry (TOML)\nDESCRIPTION: Provides example version constraints for dependencies in Poetry projects. Supports caret (^), tilde (~), and wildcard (*) specifiers, enabling flexible or strict version pinning in 'pyproject.toml'.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/switching_from/poetry.md#2025-04-23_snippet_17\n\nLANGUAGE: toml\nCODE:\n```\nnumpy = \"^1.2.3\"\n```\n\nLANGUAGE: toml\nCODE:\n```\nnumpy = \"~1.2.3\"\n```\n\nLANGUAGE: toml\nCODE:\n```\nnumpy = \"*\"\n```\n\n----------------------------------------\n\nTITLE: Running Pixi Task with Overwritten Environment Variable\nDESCRIPTION: Demonstrates how to overwrite an environment variable defined in the pixi.toml file when running a Pixi task from the command line.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/workspace/advanced_tasks.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nARGUMENT=world pixi run echo\n```\n\n----------------------------------------\n\nTITLE: Creating Pixi Task for Cleaning Build Artifacts in Shell\nDESCRIPTION: Defines a custom task named 'clean' in `pixi.toml` using `pixi task add`. This task provides a shortcut for removing build artifacts using the `cargo clean` command within the Pixi environment.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/tutorials/rust.md#2025-04-23_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\npixi task add clean \"cargo clean\"\n```\n\n----------------------------------------\n\nTITLE: Updated Project Structure with Pixi\nDESCRIPTION: Shell code showing the directory structure after initializing the Pixi project, now including the pixi.toml configuration file and .gitignore.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/build/python.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n├── src\n│   └── python_rich\n│       └── __init__.py\n├── .gitignore\n├── pixi.toml\n└── pyproject.toml\n```\n\n----------------------------------------\n\nTITLE: Caching downloaded packages with pixi-pack\nDESCRIPTION: Command to enable caching of downloaded packages to speed up subsequent pack operations.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/deployment/pixi_pack.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npixi-pack pack --use-cache ~/.pixi-pack/cache\n```\n\n----------------------------------------\n\nTITLE: Dockerfile Configuration for Secret Authentication in Pixi\nDESCRIPTION: This Dockerfile snippet shows how to access and use a secret during the build process to authenticate with a private repository. It mounts the secret, checks if it exists, and then uses it to log in to a private Pixi repository.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/editor/vscode.md#2025-04-23_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\n# ...\nRUN --mount=type=secret,id=prefix_dev_token,uid=1000 \\\n    test -s /run/secrets/prefix_dev_token \\\n    && pixi auth login --token \"$(cat /run/secrets/prefix_dev_token)\" https://repo.prefix.dev\n```\n\n----------------------------------------\n\nTITLE: Referencing Documentation URL (TOML)\nDESCRIPTION: Shows use of the documentation key for referencing online project documentation. Should be a URL (http/https) to hosted docs or resources. Used for metadata enrichment.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_manifest.md#2025-04-23_snippet_14\n\nLANGUAGE: toml\nCODE:\n```\ndocumentation = \"https://example.com/myworkspace/docs\"\n\n```\n\n----------------------------------------\n\nTITLE: Displaying XDG Cache Home Environment Variable\nDESCRIPTION: Shows the environment variable XDG_CACHE_HOME, which is used to determine the cache directory when PIXI_CACHE_DIR and RATTLER_CACHE_DIR are not set.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/environment_variables.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nXDG_CACHE_HOME\n```\n\n----------------------------------------\n\nTITLE: Configuring PPC64LE Microarchitecture Level Package in YAML\nDESCRIPTION: This YAML configuration defines a conda package for PPC64LE microarchitecture level 8. It includes build specifications, run requirements, and metadata about the package's purpose and limitations.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/crates/pixi_build_frontend/test-data/conda-render/microarch-level.txt#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npackage:\n  name: ppc64le-microarch-level\n  version: '8'\nbuild:\n  noarch: generic\n  number: 2\n  run_exports:\n    strong:\n      - _ppc64le-microarch-level >=8\n  string: '2'\nrequirements:\n  build: []\n  run:\n    - __unix\nabout:\n  description: 'Use the meta-package ppc64le-microarch-level in requirements/build\n    in conda\n\n    recipes to set up the compiler flags and set up the virtual package\n\n    requirements in the run requirements.\n\n\n    When building packages on CI, level=4 will not be guaranteed, so\n\n    you can only use level<=3 to build.\n\n\n    The run_exports only has a lower bound and therefore a level=2\n\n    build can be installed on a level=3 user system. A tighter bound\n\n    is not added because we want to be able to test both level=2 and\n\n    level=3 on a CI machine with level=3.\n\n    Therefore in order to prioritise the highest level, use the build\n\n    number to prioritise the level.\n\n\n    Only supported on Linux and macOS.\n\n    '\n  home: https://github.com/conda-forge/microarch-level-feedstock\n  license: BSD-3-Clause\n  license_file: LICENSE.txt\n  summary: Meta package to build conda recipes with microarchitecture levels\nextra:\n  copy_test_source_files: true\n  feedstock-name: microarch-level\n  final: true\n  parent_recipe:\n    name: microarch-level-split\n    path: F:\\projects\\microarch-level-feedstock\\recipe\n    version: '8'\n  recipe-maintainers:\n    - isuruf\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for Lorenz System Analysis in Python\nDESCRIPTION: This snippet imports necessary libraries from IPython, NumPy, Matplotlib, and SciPy for analyzing and visualizing the Lorenz system. It sets up the environment for interactive plotting and numerical computations.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/jupyterlab/LorenzDifferentialEquations.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%matplotlib inline\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import interact, interactive\nfrom IPython.display import clear_output, display, HTML\n```\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nfrom scipy import integrate\n\nfrom matplotlib import pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib.colors import cnames\nfrom matplotlib import animation\n```\n\n----------------------------------------\n\nTITLE: Creating a New Environment with Poetry (Shell)\nDESCRIPTION: Demonstrates the command to initialize a new virtual environment using Poetry. This requires Poetry to be installed and available in your shell environment. The parameter 'myenv' specifies the new environment's name or directory, and the command outputs a structured Poetry project scaffold.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/switching_from/poetry.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npoetry new myenv\n```\n\n----------------------------------------\n\nTITLE: Defining Package Details in Pixi Lock File (YAML)\nDESCRIPTION: This YAML snippet shows the detailed structure for defining a package in a Pixi lock file. It includes package metadata, dependencies, constraints, and other relevant information.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/workspace/lockfile.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- kind: conda\n  name: python\n  version: 3.12.2\n  build: h9f0c242_0_cpython\n  subdir: osx-64\n  url: https://conda.anaconda.org/conda-forge/osx-64/python-3.12.2-h9f0c242_0_cpython.conda\n  sha256: 7647ac06c3798a182a4bcb1ff58864f1ef81eb3acea6971295304c23e43252fb\n  md5: 0179b8007ba008cf5bec11f3b3853902\n  depends:\n    - bzip2 >=1.0.8,<2.0a0\n    - libexpat >=2.5.0,<3.0a0\n    - libffi >=3.4,<4.0a0\n    - libsqlite >=3.45.1,<4.0a0\n    - libzlib >=1.2.13,<1.3.0a0\n    - ncurses >=6.4,<7.0a0\n    - openssl >=3.2.1,<4.0a0\n    - readline >=8.2,<9.0a0\n    - tk >=8.6.13,<8.7.0a0\n    - tzdata\n    - xz >=5.2.6,<6.0a0\n  constrains:\n    - python_abi 3.12.* *_cp312\n  license: Python-2.0\n  size: 14596811\n  timestamp: 1708118065292\n```\n\n----------------------------------------\n\nTITLE: Example Output: Package Installed from PyPI - Shell\nDESCRIPTION: Shows the output of the 'pixi list pygments' command when the 'pygments' package is installed from PyPI. This output table lists the key metadata fields for the installed package and can be used to verify the installation method. No additional dependencies are required; this is raw command output serving as reference.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/tutorial.md#2025-04-23_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\nPackage          Version       Build               Size       Kind   Source\\npygments         2.17.2                            4.1 MiB    pypi   pygments-2.17.2-py3-none-any.http.whl\n```\n\n----------------------------------------\n\nTITLE: Running Factorial Calculation with Python Engine\nDESCRIPTION: This snippet shows how to run the factorial calculation using the Python engine, which does not depend on compiling the C library. It calculates the factorial of 10 using pure Python.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/ctypes-factorial/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nPS C:\\Users\\a\\Desktop\\code\\pixi\\examples\\ctypes-factorial> pixi run factorial\n2023-11-11@21:34:24.741955|INFO|__main__.<module>:66|calculating factorial of 10 using pure Python...\n2023-11-11@21:34:24.741955|INFO|__main__.<module>:77|10! ≈ 3.628800e6\n```\n\n----------------------------------------\n\nTITLE: Using 'pixi lock' Command in Bash\nDESCRIPTION: This snippet shows the basic usage of the 'pixi lock' command. It can be used with optional arguments to customize its behavior.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/lock.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi lock [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Creating Pixi Alias in Linux and macOS\nDESCRIPTION: Shell command to create an alias for the pixi command on Linux and macOS systems. This allows users to rename the pixi command to something else if desired.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/misc/FAQ.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nalias not_pixi=\"pixi\"\n```\n\n----------------------------------------\n\nTITLE: Channel Priority Resolution Logic Flowchart\nDESCRIPTION: Mermaid flowchart explaining how channel priority is implemented in the solver. It shows how the solver loops through channels in priority order and excludes packages from lower-priority channels if they're found in higher-priority ones.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/advanced/channel_logic.md#2025-04-23_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A[Start] --> B[Given a Dependency]\n    B --> C{Loop Over Channels}\n    C --> D{Package in This Channel?}\n    D -->|No| C\n    D -->|Yes| E{\"This the first channel\n     for this package?\"}\n    E -->|Yes| F[Include Package in Candidates]\n    E -->|No| G[Exclude Package from Candidates]\n    F --> H{Any Other Channels?}\n    G --> H\n    H -->|Yes| C\n    H -->|No| I{Any Other Dependencies?}\n    I -->|No| J[End]\n    I -->|Yes| B\n```\n\n----------------------------------------\n\nTITLE: AWS S3 Public Bucket Policy\nDESCRIPTION: JSON policy for setting up public read access to an AWS S3 bucket. Grants GetObject and ListBucket permissions to allow public access to the bucket's contents.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/deployment/s3.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"PublicReadGetObject\",\n            \"Effect\": \"Allow\",\n            \"Principal\": \"*\",\n            \"Action\": \"s3:GetObject\",\n            \"Resource\": \"arn:aws:s3:::my-public-bucket/*\"\n        },\n        {\n            \"Sid\": \"PublicReadListBucket\",\n            \"Effect\": \"Allow\",\n            \"Principal\": \"*\",\n            \"Action\": \"s3:ListBucket\",\n            \"Resource\": \"arn:aws:s3:::my-public-bucket\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using the pixi config edit command\nDESCRIPTION: Basic usage syntax for the pixi config edit command. This command allows editing of configuration files using either a specified editor or the default editor set through environment variables.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/config/edit.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi config edit [OPTIONS] [EDITOR]\n```\n\n----------------------------------------\n\nTITLE: Example of Cached Activation Environment Structure - Bash\nDESCRIPTION: Demonstrates, using bash CLI, the structure of cached environment activations with Pixi. Outputs show the directory layout under '.pixi/activation-env-v0/' and the content of a cached JSON file, including an environment hash and variable mappings. Inputs: none; outputs: format of activation environment cache. Limitations: only illustrative and depends on Pixi's cache implementation.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/pixi_configuration.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n> tree .pixi/activation-env-v0/\n.pixi/activation-env-v0/\n├── activation_default.json\n└── activation_lint.json\n\n> cat  .pixi/activation-env-v0/activation_lint.json\n{\"hash\":\"8d8344e0751d377a\",\"environment_variables\":{<ENVIRONMENT_VARIABLES_USED_IN_ACTIVATION>}}\n```\n\n----------------------------------------\n\nTITLE: TOML Configuration for Custom Executable Exposure\nDESCRIPTION: This TOML snippet displays the resulting manifest entry after installing a package with a custom executable name.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/global_tools/manifest.md#2025-04-23_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\n[envs.bat]\nchannels = [\"https://prefix.dev/conda-forge\"]\ndependencies = { bat = \"*\" }\nexposed = { bird = \"bat\" }\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Pixi List Performance Improvement in Shell\nDESCRIPTION: This shell output presents benchmark results comparing the execution time of `pixi list --no-install` between pixi version 0.40.1 and previous versions (0.40.0, 0.39.5, 0.39.4) on Linux (musl) and Windows. It demonstrates a significant performance improvement in version 0.40.1, attributed to the use of faster allocators, particularly on Linux musl.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/CHANGELOG.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n# Linux musl\nSummary\n  pixi-0.40.1 list --no-install ran\n   12.65 ± 0.46 times faster than pixi-0.40.0 list --no-install\n\n# Windows\n  pixi-0.40.1 list --no-install ran\n    1.66 ± 0.07 times faster than pixi-0.40.0 list --no-install\n    1.67 ± 0.09 times faster than pixi-0.39.5 list --no-install\n    2.10 ± 0.09 times faster than pixi-0.39.4 list --no-install\n```\n\n----------------------------------------\n\nTITLE: Setting up Elvish Autocompletion for Pixi\nDESCRIPTION: Configuration for enabling Pixi command autocompletion in Elvish shell. This should be added to the Elvish rc file.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/README.md#2025-04-23_snippet_10\n\nLANGUAGE: elv\nCODE:\n```\n# ~/.elvish/rc.elv\n\neval (pixi completion --shell elvish | slurp)\n```\n\n----------------------------------------\n\nTITLE: Exposing Nested Executables in Pixi\nDESCRIPTION: Example command showing how to expose an executable located in a nested directory structure, using dotnet as an example where the binary is in a subdirectory.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/global_tools/concepts.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npixi global install dotnet --expose dotnet=dotnet\\dotnet\n```\n\n----------------------------------------\n\nTITLE: Resolving PyTorch Platform Tag Mismatch Error in Pixi\nDESCRIPTION: Example error output from Pixi showing a platform tag mismatch during PyTorch dependency resolution. This happens when the requested PyTorch version (e.g., a specific CUDA build like `+cu124`) is not available for the target operating system (e.g., trying to install a Linux/Windows CUDA build on macOS). The solution is to use the correct PyPI index URL (`cpu` or specific `cu` version) corresponding to the target platform and desired hardware acceleration.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/pytorch.md#2025-04-23_snippet_19\n\nLANGUAGE: plaintext\nCODE:\n```\n├─▶ failed to resolve pypi dependencies\n╰─▶ Because only the following versions of torch are available:\n    torch<=2.5.1\n    torch==2.5.1+cu124\nand torch>=2.5.1 has no wheels with a matching platform tag, we can conclude that torch>=2.5.1,<2.5.1+cu124 cannot be used.\nAnd because you require torch>=2.5.1, we can conclude that your requirements are unsatisfiable.\n```\n\n----------------------------------------\n\nTITLE: Finding Conda Shim Path on Windows\nDESCRIPTION: Command to get the full path of the conda.bat shim executable on Windows systems, which is needed when configuring PyCharm.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/editor/jetbrains.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npixi run 'echo $CONDA_PREFIX\\\\libexec\\\\conda.bat'\n```\n\n----------------------------------------\n\nTITLE: Using 'pixi workspace requires-pixi verify' Command in Bash\nDESCRIPTION: This command is used to verify the minimum Pixi version requirement for a workspace. It checks if the installed Pixi version meets the specified minimum version in the project configuration.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/workspace/requires-pixi/verify.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi workspace requires-pixi verify\n```\n\n----------------------------------------\n\nTITLE: Generated TOML Configuration for Ansible Package\nDESCRIPTION: The resulting TOML manifest entry when globally installing the ansible package, showing how the binary is automatically exposed even though it comes from a dependency package.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/global_tools/concepts.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[envs.ansible]\nchannels = [\"conda-forge\"]\ndependencies = { ansible = \"*\" }\nexposed = { ansible = \"ansible\" } # (1)!\n```\n\n----------------------------------------\n\nTITLE: Running the Default Task with pixi in Bash\nDESCRIPTION: This command executes the 'start' task defined in the current pixi project's configuration. It's typically used to launch the main application or default entry point of the example project. Requires `pixi` to be installed and the command to be run from within the project directory.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi run start\n```\n\n----------------------------------------\n\nTITLE: Adding Breaking Change Comments in Rust Code\nDESCRIPTION: Example showing how to annotate code with breaking change comments using the BREAK: prefix to indicate future breaking changes and their remediation.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/CONTRIBUTING.md#2025-04-23_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n// an enum to sort by size or name\n#[derive(clap::ValueEnum, Clone, Debug, Serialize)]\npub enum SortBy {\n    Size,\n    Name,\n    // BREAK: remove the alias\n    #[value(alias = \"type\")]\n    Kind,\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PyTorch from Legacy PyTorch Channel in pyproject.toml\nDESCRIPTION: Configuration for installing PyTorch from the legacy PyTorch channel in pyproject.toml. This method depends on Anaconda's non-free main channel and may lead to conflicts when mixed with conda-forge.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/pytorch.md#2025-04-23_snippet_13\n\nLANGUAGE: toml\nCODE:\n```\n--8<-- \"docs/source_files/pyproject_tomls/pytorch-from-pytorch-channel.toml:minimal\"\n```\n\n----------------------------------------\n\nTITLE: Creating an Interactive Widget for Polynomial Factoring\nDESCRIPTION: This snippet creates an interactive widget using the 'interact' function, allowing users to factor polynomials of degree 2 to 40 using the 'factorit' function.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/jupyterlab/Factoring.ipynb#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ninteract(factorit, n=(2,40));\n```\n\n----------------------------------------\n\nTITLE: Using the pixi clean command in CLI\nDESCRIPTION: The basic usage syntax for the pixi clean command. This command is used to cleanup environments and can be run with various options or subcommands.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/clean.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi clean [OPTIONS] [COMMAND]\n```\n\n----------------------------------------\n\nTITLE: Illustrating Build Failure due to Missing System Dependencies in Shell\nDESCRIPTION: Displays sample error output encountered when attempting to build the Rust project (`pixi run build`) after adding the `git2` crate. The errors indicate missing system-level dependencies required by `git2`, specifically OpenSSL development files and `pkg-config`.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/tutorials/rust.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\npixi run build\n...\nCould not find directory of OpenSSL installation, and this `-sys` crate cannot\nproceed without this knowledge. If OpenSSL is installed and this crate had\ntrouble finding it,  you can set the `OPENSSL_DIR` environment variable for the\ncompilation process.\n\nMake sure you also have the development packages of openssl installed.\nFor example, `libssl-dev` on Ubuntu or `openssl-devel` on Fedora.\n\nIf you're in a situation where you think the directory *should* be found\nautomatically, please open a bug at https://github.com/sfackler/rust-openssl\nand include information about your system as well as this message.\n\n$HOST = x86_64-unknown-linux-gnu\n$TARGET = x86_64-unknown-linux-gnu\nopenssl-sys = 0.9.102\n\n\nIt looks like you're compiling on Linux and also targeting Linux. Currently this\nrequires the `pkg-config` utility to find OpenSSL but unfortunately `pkg-config`\ncould not be found. If you have OpenSSL installed you can likely fix this by\ninstalling `pkg-config`.\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring ReadTheDocs YAML for Pixi Project\nDESCRIPTION: This YAML configuration extends the ReadTheDocs build process. It installs native apt packages, sets up a conda environment with mambaforge, prepares a Pixi environment, and configures build jobs.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/readthedocs-extend/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# docs/.readthedocs.yaml\nversion: 2\n\nbuild:\n  os: ubuntu-22.04\n  apt_packages:\n    - libgl1-mesa-glx\n    - libglib2.0-0\n  tools:\n    python: mambaforge-4.10\n  jobs:\n    pre_create_environment:\n      - pip download pixi --no-deps\n      - unzip pixi-*.whl\n      - mv pixi-*/pixi .\n      - rm -rf pixi-*\n    post_system_dependencies:\n      - curl -LO https://github.com/prefix-dev/pixi/releases/latest/download/pixi-$(uname -s)-$(uname -m).tar.gz\n      - tar xvf pixi-*.tar.gz\n      - ./pixi run rtd-build\n\nconda:\n  environment: environment.yml\n```\n\n----------------------------------------\n\nTITLE: Deprecated Field Error Example in Shell\nDESCRIPTION: Example showing error message for deprecated 'depends_on' field usage, recommending the new 'depends-on' format.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/CHANGELOG.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nError:\n  × field 'depends_on' is deprecated, 'depends-on' has replaced it\n    ╭─[pixi.toml:22:51]\n 21 │ install = \"cargo install --path . --locked\"\n 22 │ install-as = { cmd = \"python scripts/install.py\", depends_on = [\n    ·                                                   ─────┬────\n    ·                                                        ╰── replace this with 'depends-on'\n 23 │   \"build-release\",\n    ╰────\n```\n\n----------------------------------------\n\nTITLE: Example of pixi config prepend usage\nDESCRIPTION: A practical example showing how to prepend 'bioconda' to the 'default-channels' configuration list in pixi.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/config/prepend.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npixi config prepend default-channels bioconda\n```\n\n----------------------------------------\n\nTITLE: Modifying C++ Package Manifest\nDESCRIPTION: Shows the changes needed in the 'cpp_math' package's 'pixi.toml' file to remove workspace-specific configurations.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/build/workspace.md#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n-[workspace]\n-channels = [\n-  \"https://prefix.dev/pixi-build-backends\",\n-  \"https://prefix.dev/conda-forge\",\n-]\n-platforms = [\"osx-arm64\", \"osx-64\", \"linux-64\", \"win-64\"]\n-preview = [\"pixi-build\"]\n-\n-[dependencies]\n-cpp_math = { path = \".\" }\n-\n-[tasks]\n-start = \"python -c 'import cpp_math as b; print(b.add(1, 2))'\"\n```\n\n----------------------------------------\n\nTITLE: Determining Python Site-Packages Directory in CMake\nDESCRIPTION: Uses CMake's `execute_process` to run a Python command that retrieves the standard site-packages directory path using `sysconfig.get_path('purelib')`. The path is stored in the `PYTHON_SITE_PACKAGES` variable, typically used for installing the built Python module.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/source_files/pixi_workspaces/pixi_build/cpp/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nexecute_process(\n    COMMAND ${Python_EXECUTABLE} -c \"import sysconfig; print(sysconfig.get_path('purelib'))\"\n    OUTPUT_VARIABLE PYTHON_SITE_PACKAGES\n    OUTPUT_STRIP_TRAILING_WHITESPACE\n) # (3)!\n```\n\n----------------------------------------\n\nTITLE: Resolving PyTorch ABI Tag Mismatch Error in Pixi\nDESCRIPTION: Example error output from Pixi indicating an ABI (Application Binary Interface) tag mismatch during PyTorch dependency resolution. This typically occurs when the Python version used is incompatible with the available PyTorch wheels on PyPI. The solution involves checking Python compatibility (e.g., using Python 3.12 or earlier for PyTorch as of the document date) or adjusting the `requires-python` setting.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/pytorch.md#2025-04-23_snippet_18\n\nLANGUAGE: plaintext\nCODE:\n```\n├─▶ failed to resolve pypi dependencies\n╰─▶ Because only the following versions of torch are available:\n      torch<=2.5.1\n      torch==2.5.1+cpu\n  and torch==2.5.1 has no wheels with a matching Python ABI tag, we can conclude that torch>=2.5.1,<2.5.1+cpu cannot be used.\n  And because torch==2.5.1+cpu has no wheels with a matching platform tag and you require torch>=2.5.1, we can conclude that your requirements are\n  unsatisfiable.\n```\n\n----------------------------------------\n\nTITLE: Creating a Symbol for the Variable\nDESCRIPTION: This snippet creates a SymPy Symbol object for the variable 'x', which will be used in the polynomial expressions.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/jupyterlab/Factoring.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nx = Symbol('x')\n```\n\n----------------------------------------\n\nTITLE: Adding Pixi Badge to Markdown\nDESCRIPTION: This snippet demonstrates how to add a Pixi badge to a markdown file, which links to the Pixi website and displays the current version.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/misc/Community.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Pixi Badge](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/prefix-dev/pixi/main/assets/badge/v0.json)](https://pixi.sh)\n```\n\n----------------------------------------\n\nTITLE: Setting up Pixi autocompletion for Elvish shell\nDESCRIPTION: This command sets up autocompletion for Pixi in Elvish shells. It should be added to the Elvish configuration file.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/advanced/installation.md#2025-04-23_snippet_17\n\nLANGUAGE: elv\nCODE:\n```\neval (pixi completion --shell elvish | slurp)\n```\n\n----------------------------------------\n\nTITLE: Colorizing UI Output with Console Style in Rust\nDESCRIPTION: Example of how to use the console::style function to add colors to terminal output, following Pixi's color guidelines for different UI elements.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse console::style;\nprintln!(\"{} {}\", style(\"Hello\").green(), style(\"world\").red());\n```\n\n----------------------------------------\n\nTITLE: Listing Package Versions for Python 3.12 Environment\nDESCRIPTION: This shell command and its output display the package versions used in the Python 3.12 environment, highlighting the different build of cpp_math.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/build/variants.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ pixi list --environment py312\nPackage            Version     Build               Size       Kind   Source\npython             3.12.8      h9e4cc4f_1_cpython  30.1 MiB   conda  python\ncpp_math    0.1.0       py312h2078e5b_0                conda  cpp_math\npython_rich       0.1.0       pyhbf21a9e_0                   conda  python_rich\n```\n\n----------------------------------------\n\nTITLE: Using Pixi Remove Command in Shell\nDESCRIPTION: Shows the basic usage syntax for the 'pixi remove' command. This command is used to remove one or more dependencies from a Pixi workspace.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/remove.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npixi remove [OPTIONS] <SPEC>...\n```\n\n----------------------------------------\n\nTITLE: Resulting TOML Configuration for Snakemake Installation\nDESCRIPTION: This TOML snippet shows the resulting manifest entry after installing snakemake globally with specified channels.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/global_tools/manifest.md#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[envs.snakemake]\nchannels = [\"conda-forge\", \"bioconda\"]\ndependencies = { snakemake = \"*\" }\nexposed = { snakemake = \"snakemake\" }\n```\n\n----------------------------------------\n\nTITLE: Finding Nanobind Package Configuration in CMake\nDESCRIPTION: Locates and loads the nanobind CMake package configuration files using `find_package` in CONFIG mode. This makes nanobind's CMake functions and variables available. It likely relies on the `nanobind_ROOT` variable being set correctly in a previous step to help locate the configuration. The `REQUIRED` flag ensures the build stops if nanobind cannot be configured.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/source_files/pixi_workspaces/pixi_build/cpp/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(nanobind CONFIG REQUIRED) # (4)!\n```\n\n----------------------------------------\n\nTITLE: Global Option for Pixi Workspace System Requirements in Markdown\nDESCRIPTION: This snippet defines a global option for the 'pixi workspace system-requirements' command. It specifies the '--manifest-path' option, which allows users to set the path to the manifest file or workspace directory.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/workspace/system-requirements.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- <a id=\"arg---manifest-path\" href=\"#arg---manifest-path\">`--manifest-path <MANIFEST_PATH>`</a>\n:  The path to `pixi.toml`, `pyproject.toml`, or the workspace directory\n```\n\n----------------------------------------\n\nTITLE: Example of unsetting a configuration value\nDESCRIPTION: Example demonstrating how to unset the 'default-channels' configuration value in pixi.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/config/unset.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npixi config unset default-channels\n```\n\n----------------------------------------\n\nTITLE: Using the 'pixi global shortcut' Command in Bash\nDESCRIPTION: This snippet demonstrates the basic usage syntax for the 'pixi global shortcut' command. It shows that the command requires additional subcommands to perform specific actions.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/global/shortcut.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi global shortcut <COMMAND>\n```\n\n----------------------------------------\n\nTITLE: Using Pixi CLI to Set Workspace Version\nDESCRIPTION: This command sets the workspace version in Pixi. It requires a VERSION argument which specifies the new workspace version to be set. The command is part of the Pixi CLI's workspace management functionality.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/workspace/version/set.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi workspace version set <VERSION>\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions with Pixi S3 Authentication\nDESCRIPTION: GitHub Actions workflow that sets up Pixi with S3 authentication. Uses temporary AWS credentials from OIDC authentication for secure S3 access.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/deployment/s3.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  ci:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v4\n\n      # temporary credentials via OIDC\n      - name: Log in to AWS\n        uses: aws-actions/configure-aws-credentials@v4\n        id: aws\n        with:\n          role-to-assume: arn:aws:iam::123456789012:role/github-poweruser\n          aws-region: eu-central-1\n\n      - name: Set up pixi\n        # AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY are set by aws-actions/configure-aws-credentials\n        uses: prefix-dev/setup-pixi@v0.8.3\n        with:\n          auth-s3-access-key-id: ${{ steps.aws.outputs.aws-access-key-id }}\n          auth-s3-secret-access-key: ${{ steps.aws.outputs.aws-secret-access-key }}\n          auth-s3-session-token: ${{ steps.aws.outputs.aws-session-token }}\n          auth-host: s3://my-s3-bucket\n```\n\n----------------------------------------\n\nTITLE: Installing Pixi on Arch Linux with Pacman\nDESCRIPTION: Command to install Pixi from the official Arch Linux extra repository using the pacman package manager.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/README.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\npacman -S pixi\n```\n\n----------------------------------------\n\nTITLE: Finding nanobind Package Configuration in CMake\nDESCRIPTION: This `find_package` command searches for the nanobind configuration files. It uses the `CONFIG` mode, which typically looks for `nanobind-config.cmake` or `nanobindConfig.cmake`. CMake implicitly uses the `nanobind_ROOT` variable (set in a previous step) as a hint to find the package. `REQUIRED` ensures the build fails if nanobind cannot be configured, making its CMake functions available for use.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/source_files/pixi_workspaces/pixi_build/advanced_cpp/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(nanobind CONFIG REQUIRED) # (4)!\n```\n\n----------------------------------------\n\nTITLE: Global option for pixi workspace requires-pixi command\nDESCRIPTION: Defines the global option '--manifest-path' for the 'pixi workspace requires-pixi' command. This option allows specifying the path to the project's configuration file or workspace directory.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/workspace/requires-pixi.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- <a id=\"arg---manifest-path\" href=\"#arg---manifest-path\">`--manifest-path <MANIFEST_PATH>`</a>\n:  The path to `pixi.toml`, `pyproject.toml`, or the workspace directory\n```\n\n----------------------------------------\n\nTITLE: Usage of Deprecated 'pixi global upgrade' Command\nDESCRIPTION: Shows the usage syntax for the deprecated 'pixi global upgrade' command. This command was used to upgrade specific packages installed globally, but has been replaced by 'pixi global update'.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/global/upgrade.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi global upgrade [OPTIONS] [SPECS]...\n```\n\n----------------------------------------\n\nTITLE: Version-Specific Conda Dependency\nDESCRIPTION: The entry in pyproject.toml for a version-specific conda package.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/python/tutorial.md#2025-04-23_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[tool.pixi.dependencies]\nblack = \"24.*\"\n```\n\n----------------------------------------\n\nTITLE: Creating and running self-extracting binaries on Windows\nDESCRIPTION: PowerShell commands to create and execute a self-extracting binary containing the packed environment on Windows.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/deployment/pixi_pack.md#2025-04-23_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nPS > pixi-pack pack --create-executable\nPS > ls\nenvironment.ps1\nPS > .\\environment.ps1\nPS > ls\nenv/\nactivate.sh\nenvironment.ps1\n```\n\n----------------------------------------\n\nTITLE: Setting Pixi Configuration Values Command Syntax\nDESCRIPTION: Basic command syntax for setting configuration values in Pixi. Takes a required KEY argument and an optional VALUE argument, with options for specifying the configuration scope (local, global, system).\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/config/set.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi config set [OPTIONS] <KEY> [VALUE]\n```\n\n----------------------------------------\n\nTITLE: Importing SymPy Functions\nDESCRIPTION: This snippet imports the necessary functions (Symbol, Eq, factor) from the SymPy library for symbolic mathematics operations.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/jupyterlab/Factoring.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sympy import Symbol, Eq, factor\n```\n\n----------------------------------------\n\nTITLE: Usage of 'pixi workspace platform add' Command\nDESCRIPTION: Demonstrates the basic usage syntax for the 'pixi workspace platform add' command. It shows how to invoke the command with optional arguments and options.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/reference/cli/pixi/workspace/platform/add.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixi workspace platform add [OPTIONS] <PLATFORM>...\n```\n\n----------------------------------------\n\nTITLE: Defining the Factoring Function\nDESCRIPTION: This snippet defines a function 'factorit' that takes an integer 'n' as input and returns an equation showing the factored form of x^n - 1 using SymPy's factor function.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/jupyterlab/Factoring.ipynb#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef factorit(n):\n    return Eq(x**n-1, factor(x**n-1))\n```\n\n----------------------------------------\n\nTITLE: Executing Camera Calibration Script with Pixi and OpenCV\nDESCRIPTION: This command initiates a camera calibration script using Pixi. It requires a checkerboard pattern for calibration and provides instructions for capturing calibration images and viewing results.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/opencv/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npixi run calibrate\n```\n\n----------------------------------------\n\nTITLE: Factoring a Specific Polynomial\nDESCRIPTION: This snippet demonstrates the use of the 'factorit' function to factor the polynomial x^12 - 1.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/jupyterlab/Factoring.ipynb#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfactorit(12)\n```\n\n----------------------------------------\n\nTITLE: Creating Scatterplot with ggplot2 in R\nDESCRIPTION: Example R code demonstrating the use of ggplot2 package to create a scatterplot of fuel efficiency vs weight using the mtcars dataset.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/integration/editor/r_studio.md#2025-04-23_snippet_2\n\nLANGUAGE: R\nCODE:\n```\n# Load the ggplot2 package\nlibrary(ggplot2)\n\n# Load the built-in 'mtcars' dataset\ndata <- mtcars\n\n# Create a scatterplot of 'mpg' vs 'wt'\nggplot(data, aes(x = wt, y = mpg)) +\n  geom_point() +\n  labs(x = \"Weight (1000 lbs)\", y = \"Miles per Gallon\") +\n  ggtitle(\"Fuel Efficiency vs. Weight\")\n```\n\n----------------------------------------\n\nTITLE: Finding Python Interpreter and Development Libraries in CMake\nDESCRIPTION: This snippet uses the `find_package` command in CMake to locate a specific version (3.8) of Python. It requires both the Interpreter component (to execute Python scripts during the build) and the Development.Module component (which includes headers and libraries needed for compiling Python C extensions). The `REQUIRED` keyword ensures that CMake will stop with an error if Python 3.8 with the specified components cannot be found.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/source_files/pixi_workspaces/pixi_build/advanced_cpp/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Python 3.8 COMPONENTS Interpreter Development.Module REQUIRED) # (1)!\n```\n\n----------------------------------------\n\nTITLE: Configuring x86_64 Microarchitecture Level Package in YAML\nDESCRIPTION: This YAML configuration defines a conda package for x86_64 microarchitecture level 1. It specifies build requirements, run dependencies, and includes information about the package's purpose and usage in conda recipes.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/crates/pixi_build_frontend/test-data/conda-render/microarch-level.txt#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npackage:\n  name: _x86_64-microarch-level\n  version: '1'\nbuild:\n  noarch: generic\n  number: 2\n  string: 2_x86_64\nrequirements:\n  build: []\n  run:\n    - __archspec 1=x86_64\nabout:\n  description: 'The meta-package _x86_64-microarch-level enforces the microarchitecture\n    in the\n\n    user system.\n\n\n    Note that a user would need the archspec conda package installed\n\n    in the base environment where conda/mamba is run from.\n\n\n    See x86_64-microarch-level for using this in conda recipes\n\n    '\n  home: https://github.com/conda-forge/microarch-level-feedstock\n  license: BSD-3-Clause\n  license_file: LICENSE.txt\n  summary: Meta package to build conda recipes with microarchitecture levels\nextra:\n  copy_test_source_files: true\n  feedstock-name: microarch-level\n  final: true\n  parent_recipe:\n    name: microarch-level-split\n    path: F:\\projects\\microarch-level-feedstock\\recipe\n    version: '1'\n  recipe-maintainers:\n    - isuruf\n```\n\n----------------------------------------\n\nTITLE: Running Factorial Calculation with Ctypes and Pure Python\nDESCRIPTION: This snippet demonstrates running the factorial calculation using both ctypes and pure Python implementations. It shows the execution time difference between the two approaches.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/ctypes-factorial/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nPS C:\\Users\\a\\Desktop\\code\\pixi\\examples\\ctypes-factorial> pixi run start\n2023-11-11@21:30:24.650235|INFO|__main__.<module>:69|calculating factorial of 12345678 using ctypes...\n2023-11-11@21:30:25.124916|INFO|__main__.<module>:77|12345678! ≈ 1.457260e82187904\n2023-11-11@21:30:25.356799|INFO|__main__.<module>:66|calculating factorial of 12345678 using pure Python...\n2023-11-11@21:30:32.065728|INFO|__main__.<module>:77|12345678! ≈ 1.457260e82187904\n```\n\n----------------------------------------\n\nTITLE: Installing Pixi on Unsupported Platform\nDESCRIPTION: Example shell output when attempting to install Pixi on a platform not configured in the project. It demonstrates the warning message and suggests how to add support for the current platform.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/docs/workspace/multi_platform_configuration.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n❯ pixi install\n  × the project is not configured for your current platform\n   ╭─[pixi.toml:6:1]\n 6 │ channels = [\"conda-forge\"]\n 7 │ platforms = [\"osx-64\", \"osx-arm64\", \"win-64\"]\n   ·             ────────────────┬────────────────\n   ·                             ╰── add 'linux-64' here\n 8 │\n   ╰────\n  help: The project needs to be configured to support your platform (linux-64).\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Lorenz System Explorer in Python\nDESCRIPTION: This code creates an interactive widget using IPython's interactive function. It allows users to explore how the Lorenz system trajectories change as various parameters are adjusted in real-time.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/jupyterlab/LorenzDifferentialEquations.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nw = interactive(solve_lorenz, angle=(0.,360.), max_time=(0.1, 4.0), \n                N=(0,50), sigma=(0.0,50.0), rho=(0.0,50.0))\ndisplay(w)\n```\n\n----------------------------------------\n\nTITLE: Running Tasks in Different Environments with depends-on in TOML\nDESCRIPTION: Example demonstrating how to run tasks in specific environments using the depends-on key with the environment parameter in Pixi 0.46.0. This allows executing the same task across multiple Python versions.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[tasks]\n# Using the shortened composition of tasks\ntest-all = [\n  { task = \"test\", environment = \"py311\" },\n  { task = \"test\", environment = \"py312\" },\n]\n```\n\n----------------------------------------\n\nTITLE: Performance Metrics in Shell\nDESCRIPTION: Benchmark results showing performance improvements in solve times between Pixi versions.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/CHANGELOG.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n- Average Solve Time: 'pixi v0.39.5' was 1.68 times faster than 'pixi v0.39.4'\n- Median Solve Time: 'pixi v0.39.5' was 1.33 times faster than 'pixi v0.39.4'\n- 25th Percentile: 'pixi v0.39.5' was 1.22 times faster than 'pixi v0.39.4'\n- 75th Percentile: 'pixi v0.39.5' was 2.28 times faster than 'pixi v0.39.4'\n```\n\n----------------------------------------\n\nTITLE: Defining Task with Changed Input File Globbing in Pixi Configuration\nDESCRIPTION: Example of a breaking change in task definition where input file globbing now only searches in the project root instead of all subdirectories.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/CHANGELOG.md#2025-04-23_snippet_16\n\nLANGUAGE: toml\nCODE:\n```\ntask = { cmd = \"task to run\", inputs = \"input.txt\"}\n```\n\n----------------------------------------\n\nTITLE: Manifest Error Example in Shell\nDESCRIPTION: Example showing improved error messaging for invalid index-strategy values in pixi.toml configuration.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/CHANGELOG.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n         × Expected one of 'first-index', 'unsafe-first-match', 'unsafe-best-match'\n          ╭─[pixi.toml:2:27]\n        1 │\n        2 │         index-strategy = \"UnsafeFirstMatch\"\n          ·                           ────────────────\n        3 │\n          ╰────\n         help: Did you mean 'unsafe-first-match'?\n```\n\n----------------------------------------\n\nTITLE: Importing Matplotlib for Visualization in Python\nDESCRIPTION: This snippet imports matplotlib and configures it for inline display in Jupyter notebooks.\nSOURCE: https://github.com/prefix-dev/pixi/blob/main/examples/jupyterlab/Image_Browsing.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%matplotlib inline\nimport matplotlib.pyplot as plt\n```"
  }
]