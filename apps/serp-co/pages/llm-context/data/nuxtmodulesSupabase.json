[
  {
    "owner": "nuxt-modules",
    "repo": "supabase",
    "content": "TITLE: Implementing Login Page with Supabase OTP in Vue\nDESCRIPTION: This code snippet demonstrates how to create a login page using Supabase's One-Time Password (OTP) authentication method in a Vue component. It uses the useSupabaseClient composable to access Supabase methods and handles email input for OTP sign-in.\nSOURCE: https://github.com/nuxt-modules/supabase/blob/main/docs/content/3.authentication.md#2025-04-17_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst supabase = useSupabaseClient()\nconst email = ref('')\n\nconst signInWithOtp = async () => {\n  const { error } = await supabase.auth.signInWithOtp({\n    email: email.value,\n    options: {\n      emailRedirectTo: 'http://localhost:3000/confirm',\n    }\n  })\n  if (error) console.log(error)\n}\n</script>\n<template>\n  <div>\n    <button @click=\"signInWithOtp\">\n      Sign In with E-Mail\n    </button>\n    <input\n      v-model=\"email\"\n      type=\"email\"\n    />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Supabase in Vue using OAuth and Sign Out\nDESCRIPTION: This snippet demonstrates how to use the useSupabaseClient composable to implement OAuth sign-in with GitHub and sign out functionality in a Vue component.\nSOURCE: https://github.com/nuxt-modules/supabase/blob/main/docs/content/4.usage/composables/useSupabaseClient.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<script setup lang=\"ts\">\nconst supabase = useSupabaseClient()\n\nconst signInWithOAuth = async () => {\n  const { error } = await supabase.auth.signInWithOAuth({\n    provider: 'github',\n    options: {\n      redirectTo: 'http://localhost:3000/confirm',\n    },\n  })\n  if (error) console.log(error)\n}\n\nconst signOut = async () => {\n  const { error } = await supabase.auth.signOut()\n  if (error) console.log(error)\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Confirmation Page for Supabase Authentication in Vue\nDESCRIPTION: This code snippet shows how to implement a confirmation page that handles the Supabase authentication callback. It uses the useSupabaseUser composable to watch for user state changes and redirects to the protected page once the user is authenticated.\nSOURCE: https://github.com/nuxt-modules/supabase/blob/main/docs/content/3.authentication.md#2025-04-17_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst user = useSupabaseUser()\n\nwatch(user, () => {\n  if (user.value) {\n      // Redirect to protected page\n      return navigateTo('/')\n  }\n}, { immediate: true })\n</script>\n\n<template>\n  <div>Waiting for login...</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Auth Middleware in Nuxt\nDESCRIPTION: Shows how to create a custom authentication middleware that checks for a logged-in user and redirects to the login page if not authenticated.\nSOURCE: https://github.com/nuxt-modules/supabase/blob/main/docs/content/4.usage/composables/useSupabaseUser.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtRouteMiddleware((to, _from) => {\n  const user = useSupabaseUser()\n\n  if (!user.value) {\n    return navigateTo('/login')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Authenticated User Data with SSR Support\nDESCRIPTION: This snippet demonstrates how to fetch authenticated user data with SSR support in a Vue component. It uses useFetch with custom headers to include the necessary cookies for authentication.\nSOURCE: https://github.com/nuxt-modules/supabase/blob/main/docs/content/4.usage/services/4.serverSupabaseUser.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = ref(null)\n\nconst { data } = await useFetch('/api/me', {\n  headers: useRequestHeaders(['cookie'])\n})\n\nuser.value = data\n```\n\n----------------------------------------\n\nTITLE: Implementing Realtime Subscriptions with Supabase in Vue\nDESCRIPTION: This snippet demonstrates how to set up realtime subscriptions using Supabase in a Vue component, including subscribing to changes and cleaning up the subscription on component unmount.\nSOURCE: https://github.com/nuxt-modules/supabase/blob/main/docs/content/4.usage/composables/useSupabaseClient.md#2025-04-17_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport type { RealtimeChannel } from '@supabase/supabase-js'\n\nconst client = useSupabaseClient()\n\nlet realtimeChannel: RealtimeChannel\n\n// Fetch collaborators and get the refresh method provided by useAsyncData\nconst { data: collaborators, refresh: refreshCollaborators } = await useAsyncData('collaborators', async () => {\n  const { data } = await client.from('collaborators').select('name')\n  return data\n})\n\n// Once page is mounted, listen to changes on the `collaborators` table and refresh collaborators when receiving event\nonMounted(() => {\n  // Real time listener for new workouts\n  realtimeChannel = client.channel('public:collaborators').on(\n    'postgres_changes',\n    { event: '*', schema: 'public', table: 'collaborators' },\n    () => refreshCollaborators()\n  )\n\n  realtimeChannel.subscribe()\n})\n\n  // Don't forget to unsubscribe when user left the page\nonUnmounted(() => {\n  client.removeChannel(realtimeChannel)\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Supabase API Request in Nuxt Server Route\nDESCRIPTION: This snippet demonstrates how to use serverSupabaseClient in a Nuxt server route to fetch data from a Supabase table. It imports the function, creates a client, and queries the 'libraries' table.\nSOURCE: https://github.com/nuxt-modules/supabase/blob/main/docs/content/4.usage/services/1.serverSupabaseClient.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serverSupabaseClient } from '#supabase/server'\n\nexport default eventHandler(async (event) => {\n  const client = await serverSupabaseClient(event)\n\n  const { data } = await client.from('libraries').select('*')\n\n  return { libraries: data }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing User Redirect After Login with useSupabaseCookieRedirect in Vue\nDESCRIPTION: This snippet demonstrates how to use the useSupabaseCookieRedirect composable to implement user redirection after login. It watches for changes in the user state and redirects to a saved path or home when the user is authenticated.\nSOURCE: https://github.com/nuxt-modules/supabase/blob/main/docs/content/4.usage/composables/useSupabaseCookieRedirect.md#2025-04-17_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst user = useSupabaseUser()\nconst redirectInfo = useSupabaseCookieRedirect()\n\nwatch(user, () => {\n  if (user.value) {\n    // Get the saved path and clear it from the cookie\n    const path = redirectInfo.pluck()\n    // Redirect to the saved path, or fallback to home\n    return navigateTo(path || '/')\n  }\n}, { immediate: true })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Fetching Data from Supabase in Vue using useAsyncData\nDESCRIPTION: This snippet shows how to use the useSupabaseClient composable along with Nuxt 3's useAsyncData to fetch data from a Supabase database table.\nSOURCE: https://github.com/nuxt-modules/supabase/blob/main/docs/content/4.usage/composables/useSupabaseClient.md#2025-04-17_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst client = useSupabaseClient()\n\nconst { data: restaurant } = await useAsyncData('restaurant', async () => {\n  const { data } = await client.from('restaurants').select('name, location').eq('name', 'My Restaurant Name').single()\n\n  return data\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing serverSupabaseServiceRole in Nuxt Server Route\nDESCRIPTION: This snippet demonstrates how to use serverSupabaseServiceRole in a Nuxt server route to bypass Row Level Security and fetch data from a protected table. It requires the SUPABASE_SERVICE_KEY to be set in the .env file.\nSOURCE: https://github.com/nuxt-modules/supabase/blob/main/docs/content/4.usage/services/2.serverSupabaseServiceRole.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serverSupabaseServiceRole } from '#supabase/server'\n\nexport default eventHandler(async (event) => {\n  const client = serverSupabaseServiceRole(event)\n\n  const { data } = await client.from('rls-protected-table').select()\n\n  return { sensitiveData: data }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Auth Middleware in Nuxt\nDESCRIPTION: Shows how to create a custom authentication middleware that checks for a valid session and redirects to the login page if not authenticated.\nSOURCE: https://github.com/nuxt-modules/supabase/blob/main/docs/content/4.usage/composables/useSupabaseSession.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtRouteMiddleware((to, _from) => {\n  const session = useSupabaseSession()\n\n  if (!session.value) {\n    return navigateTo('/login')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing serverSupabaseUser in Nuxt Server Route\nDESCRIPTION: This snippet demonstrates how to use serverSupabaseUser in a Nuxt server route to retrieve the authenticated Supabase user. It imports the function from '#supabase/server' and uses it within a defineEventHandler.\nSOURCE: https://github.com/nuxt-modules/supabase/blob/main/docs/content/4.usage/services/4.serverSupabaseUser.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serverSupabaseUser } from '#supabase/server'\n\nexport default defineEventHandler(async (event) => {\n  return await serverSupabaseUser(event)\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Redirect Path After Supabase Authentication in Vue\nDESCRIPTION: This code snippet demonstrates how to handle redirection to the initially requested route after successful login. It uses the useSupabaseCookieRedirect composable to retrieve the saved path from a cookie and redirects the user accordingly.\nSOURCE: https://github.com/nuxt-modules/supabase/blob/main/docs/content/3.authentication.md#2025-04-17_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst user = useSupabaseUser()\nconst redirectInfo = useSupabaseCookieRedirect()\n\nwatch(user, () => {\n  if (user.value) {\n    // Get redirect path, and clear it from the cookie\n    const path = redirectInfo.pluck()\n    // Redirect to the saved path, or fallback to home\n    return navigateTo(path || '/') \n  }\n}, { immediate: true })\n</script>\n\n<template>\n  <div>Waiting for login...</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Auto-importing Supabase User in Vue Component\nDESCRIPTION: Demonstrates how to use the useSupabaseUser composable to access the logged-in user in a Vue component setup script.\nSOURCE: https://github.com/nuxt-modules/supabase/blob/main/docs/content/4.usage/composables/useSupabaseUser.md#2025-04-17_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst user = useSupabaseUser()\n</script>\n```\n\n----------------------------------------\n\nTITLE: SSR-Compatible Data Fetching in Nuxt Vue Component\nDESCRIPTION: This snippet illustrates how to fetch data from a server route during server-side rendering (SSR) in Nuxt. It uses useFetch and includes necessary headers to pass along authentication tokens.\nSOURCE: https://github.com/nuxt-modules/supabase/blob/main/docs/content/4.usage/services/1.serverSupabaseClient.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data: { libraries }} = await useFetch('/api/libraries', {\n  headers: useRequestHeaders(['cookie'])\n})\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript with Supabase Client in Vue\nDESCRIPTION: This snippet shows how to use TypeScript with the Supabase client in a Vue component by manually passing database types to the useSupabaseClient composable.\nSOURCE: https://github.com/nuxt-modules/supabase/blob/main/docs/content/4.usage/composables/useSupabaseClient.md#2025-04-17_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport type { Database } from '~/types'\nconst client = useSupabaseClient<Database>()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Fetching Supabase Session with SSR Considerations\nDESCRIPTION: This snippet demonstrates how to fetch the Supabase session while considering Server-Side Rendering (SSR). It uses useFetch with request headers to ensure proper cookie handling for SSR scenarios.\nSOURCE: https://github.com/nuxt-modules/supabase/blob/main/docs/content/4.usage/services/3.serverSupabaseSession.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst session = ref(null)\n\nconst { data } = await useFetch('/api/session', {\n  headers: useRequestHeaders(['cookie'])\n})\n\nsession.value = data\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase Options in Nuxt Config\nDESCRIPTION: Example of setting up Supabase module options in the Nuxt configuration file\nSOURCE: https://github.com/nuxt-modules/supabase/blob/main/docs/content/2.get-started.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  // ...\n  supabase: {\n    // Options\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Supabase Environment Variables\nDESCRIPTION: Required environment variables for Supabase URL and API key configuration\nSOURCE: https://github.com/nuxt-modules/supabase/blob/main/docs/content/2.get-started.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nSUPABASE_URL=\"https://example.supabase.co\"\nSUPABASE_KEY=\"<your_key>\"\n```\n\n----------------------------------------\n\nTITLE: Fetching Sensitive Data from Client-Side in Nuxt\nDESCRIPTION: This snippet shows how to call the server-side API route that uses serverSupabaseServiceRole from a Vue component in Nuxt. It uses the useFetch composable to make the API request.\nSOURCE: https://github.com/nuxt-modules/supabase/blob/main/docs/content/4.usage/services/2.serverSupabaseServiceRole.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst fetchSensitiveData = async () => {\n  const { sensitiveData } = await useFetch('/api/bypass-rls')\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Usage of useSupabaseCookieRedirect in TypeScript\nDESCRIPTION: This snippet shows how to manually set and read the redirect path using the useSupabaseCookieRedirect composable. It demonstrates saving a specific path, reading the current path without clearing it, and getting the path while clearing it from the cookie.\nSOURCE: https://github.com/nuxt-modules/supabase/blob/main/docs/content/4.usage/composables/useSupabaseCookieRedirect.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst redirectInfo = useSupabaseCookieRedirect()\n\n// Save a specific path\nredirectInfo.path.value = '/dashboard'\n\n// Read the current path without clearing it\nconst currentPath = redirectInfo.path.value\n\n// Get the path and clear it\nconst path = redirectInfo.pluck()\n```\n\n----------------------------------------\n\nTITLE: Implementing serverSupabaseSession in Nuxt Server Route\nDESCRIPTION: This snippet demonstrates how to use serverSupabaseSession in a Nuxt server route. It imports the function from '#supabase/server' and uses it within an event handler to return the session.\nSOURCE: https://github.com/nuxt-modules/supabase/blob/main/docs/content/4.usage/services/3.serverSupabaseSession.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serverSupabaseSession } from '#supabase/server'\n\nexport default defineEventHandler(async (event) => {\n  return await serverSupabaseSession(event)\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Authenticated User Data in Vue Component\nDESCRIPTION: This snippet shows how to call the server route from a Vue component to fetch the authenticated user data. It uses the $fetch function to make an API call to the '/api/me' endpoint.\nSOURCE: https://github.com/nuxt-modules/supabase/blob/main/docs/content/4.usage/services/4.serverSupabaseUser.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = ref(null)\n\nconst fetchMe = async () => {\n   user.value = await $fetch('/api/me')\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data from Nuxt API Route in Vue Component\nDESCRIPTION: This code shows how to call the server-side API route from a Vue component using the $fetch function. It demonstrates client-side data fetching in Nuxt.\nSOURCE: https://github.com/nuxt-modules/supabase/blob/main/docs/content/4.usage/services/1.serverSupabaseClient.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst fetchLibrary = async () => {\n  const { libraries } = await $fetch('/api/libraries')\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Supabase Session in Vue Component\nDESCRIPTION: Demonstrates how to use the useSupabaseSession composable to access the user's session in a Vue component setup script.\nSOURCE: https://github.com/nuxt-modules/supabase/blob/main/docs/content/4.usage/composables/useSupabaseSession.md#2025-04-17_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst session = useSupabaseSession()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Fetching Supabase Session in Vue Component\nDESCRIPTION: This code shows how to fetch the Supabase session from the client-side in a Vue component. It uses the $fetch function to call the server route and store the result in a reactive reference.\nSOURCE: https://github.com/nuxt-modules/supabase/blob/main/docs/content/4.usage/services/3.serverSupabaseSession.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst session = ref(null)\n\nconst fetchSession = async () => {\n   session.value = await $fetch('/api/session')\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase Module with Nuxi\nDESCRIPTION: Command to add @nuxtjs/supabase as a dev dependency to a Nuxt project using npx\nSOURCE: https://github.com/nuxt-modules/supabase/blob/main/docs/content/2.get-started.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi@latest module add supabase\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase Module in Nuxt Config\nDESCRIPTION: Adding @nuxtjs/supabase to the modules array in Nuxt configuration file\nSOURCE: https://github.com/nuxt-modules/supabase/blob/main/docs/content/2.get-started.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@nuxtjs/supabase'],\n})\n```\n\n----------------------------------------\n\nTITLE: Default Redirect Options Configuration\nDESCRIPTION: Default configuration for authentication redirects and route protection\nSOURCE: https://github.com/nuxt-modules/supabase/blob/main/docs/content/2.get-started.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nredirectOptions: {\n  login: '/login',\n  callback: '/confirm',\n  include: undefined,\n  exclude: [],\n  saveRedirectToCookie: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Auth Middleware to a Nuxt Page\nDESCRIPTION: Demonstrates how to apply the custom auth middleware to a specific page in a Nuxt application using definePageMeta.\nSOURCE: https://github.com/nuxt-modules/supabase/blob/main/docs/content/4.usage/composables/useSupabaseUser.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndefinePageMeta({\n  middleware: 'auth'\n})\n```\n\n----------------------------------------\n\nTITLE: Applying Auth Middleware to a Nuxt Page\nDESCRIPTION: Illustrates how to apply the custom auth middleware to a specific page in a Nuxt application using definePageMeta.\nSOURCE: https://github.com/nuxt-modules/supabase/blob/main/docs/content/4.usage/composables/useSupabaseSession.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndefinePageMeta({\n  middleware: 'auth'\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Supabase Environment Variables\nDESCRIPTION: Environment variables configuration for Supabase project URL and API key.\nSOURCE: https://github.com/nuxt-modules/supabase/blob/main/demo/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nSUPABASE_URL=\"https://example.supabase.com\"\nSUPABASE_KEY=\"<your_key>\"\n```\n\n----------------------------------------\n\nTITLE: Version 1.5.0 Changelog Entry in Markdown\nDESCRIPTION: Documents the changes in version 1.5.0, including bug fixes for documentation prerendering and new features for authentication client flexibility.\nSOURCE: https://github.com/nuxt-modules/supabase/blob/main/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# [1.5.0](https://github.com/nuxt-modules/supabase/compare/v1.4.6...v1.5.0) (2025-03-04)\n\n\n### Bug Fixes\n\n* **docs:** prerendering ([2fb91f3](https://github.com/nuxt-modules/supabase/commit/2fb91f37a549148b2cecefe625a12ed57e1bf66a))\n\n\n### Features\n\n* **auth:** improve client flexibility & allow overriding cookie options ([#463](https://github.com/nuxt-modules/supabase/issues/463)) ([254cbdb](https://github.com/nuxt-modules/supabase/commit/254cbdb1a44f9cb40f9057d03ef93bd73020009d))\n```\n\n----------------------------------------\n\nTITLE: Version 1.4.6 Changelog Entry in Markdown\nDESCRIPTION: Details the bug fix for passing H3Event into useRuntimeConfig in version 1.4.6.\nSOURCE: https://github.com/nuxt-modules/supabase/blob/main/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.4.6](https://github.com/nuxt-community/supabase-module/compare/v1.4.5...v1.4.6) (2025-01-20)\n\n\n### Bug Fixes\n\n* **serverSupabaseServiceRole:** Pass H3Event into useRuntimeConfig ([#450](https://github.com/nuxt-community/supabase-module/issues/450)) ([2de1c08](https://github.com/nuxt-community/supabase-module/commit/2de1c081e414c8b1b47fe5075ae3be6fbb585080))\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Package Managers\nDESCRIPTION: Commands for installing project dependencies using different package managers (npm, pnpm, yarn, and bun).\nSOURCE: https://github.com/nuxt-modules/supabase/blob/main/docs/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm install\n\n# pnpm\npnpm install\n\n# yarn\nyarn install\n\n# bun\nbun install\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server with Package Managers\nDESCRIPTION: Commands for starting the development server on http://localhost:3000 using different package managers.\nSOURCE: https://github.com/nuxt-modules/supabase/blob/main/docs/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run dev\n\n# pnpm\npnpm run dev\n\n# yarn\nyarn dev\n\n# bun\nbun run dev\n```\n\n----------------------------------------\n\nTITLE: Building for Production with Package Managers\nDESCRIPTION: Commands for building the application for production using different package managers.\nSOURCE: https://github.com/nuxt-modules/supabase/blob/main/docs/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run build\n\n# pnpm\npnpm run build\n\n# yarn\nyarn build\n\n# bun\nbun run build\n```\n\n----------------------------------------\n\nTITLE: Previewing Production Build with Package Managers\nDESCRIPTION: Commands for locally previewing the production build using different package managers.\nSOURCE: https://github.com/nuxt-modules/supabase/blob/main/docs/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run preview\n\n# pnpm\npnpm run preview\n\n# yarn\nyarn preview\n\n# bun\nbun run preview\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt Studio Integration\nDESCRIPTION: Commands for adding the @nuxthq/studio dependency to your project using different package managers.\nSOURCE: https://github.com/nuxt-modules/supabase/blob/main/docs/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm install --save-dev @nuxthq/studio\n\n# pnpm\npnpm add -D @nuxthq/studio\n\n# yarn\nyarn add -D @nuxthq/studio\n\n# bun\nbun add -d @nuxthq/studio\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt Studio Module\nDESCRIPTION: TypeScript configuration for adding the Nuxt Studio module to your Nuxt project in the nuxt.config.ts file.\nSOURCE: https://github.com/nuxt-modules/supabase/blob/main/docs/README.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  ...\n  modules: [\n    ...\n    '@nuxthq/studio'\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Displaying Releases Component in Markdown\nDESCRIPTION: This code snippet uses a custom 'releases' component to render the changelog entries. The component is likely defined elsewhere in the project to handle the formatting and display of release information.\nSOURCE: https://github.com/nuxt-modules/supabase/blob/main/docs/content/6.changelog.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n::releases\n::\n```\n\n----------------------------------------\n\nTITLE: Configuring Volta Board Token for Supabase Module\nDESCRIPTION: Configuration block for initializing a Volta kanban board with project tracking settings for the Nuxt Supabase module, including status columns and filtering options.\nSOURCE: https://github.com/nuxt-modules/supabase/blob/main/docs/content/7.roadmap.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntoken: eyJzdGF0dXNlcyI6WyJ0cmlhZ2UiLCJiYWNrbG9nIiwidG9kbyIsImluX3Byb2dyZXNzIiwiX3Byb2dyZXNzIiwiaW5fcmV2aWV3IiwiZG9uZSIsInJlbGVhc2VkIiwiY2FuY2VsbGVkIl0sImZpbHRlcnMiOnt9LCJvd25lciI6Im51eHQtbW9kdWxlcyIsIm5hbWUiOiJzdXBhYmFzZSJ9\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM\nDESCRIPTION: Command to install project dependencies using PNPM package manager.\nSOURCE: https://github.com/nuxt-modules/supabase/blob/main/demo/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the Nuxt development server on localhost:3000.\nSOURCE: https://github.com/nuxt-modules/supabase/blob/main/demo/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Building for Production\nDESCRIPTION: Command to build the Nuxt application for production deployment.\nSOURCE: https://github.com/nuxt-modules/supabase/blob/main/demo/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```"
  }
]