[
  {
    "owner": "streetsidesoftware",
    "repo": "cspell",
    "content": "TITLE: Defining TLS Parameters and Cipher Suites with cpuid Optimization in Go\nDESCRIPTION: This Go snippet declares cryptographic parameters and default TLS cipher suites optimized based on CPU capabilities detected via the klauspost/cpuid module. It assigns named curves and key types for use in TLS certificate operations, conditionally choosing cipher suites depending on AES-NI support. This enables more performant TLS handshakes by leveraging CPU features when available. Dependencies include the Go 'tls' package and 'github.com/klauspost/cpuid/v2'. Inputs are system CPU capabilities; outputs are sets of constants used elsewhere in TLS configuration.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_86\n\nLANGUAGE: Go\nCODE:\n```\npackage caddytls\n\nimport (\n\t\"github.com/klauspost/cpuid/v2\"\n\t\"crypto/tls\"\n\t\"github.com/caddyserver/certmagic\"\n)\n\nvar (\n\tdefaultCipherSuitesWithAESNI = []uint16{\n\t\ttls.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,\n\t\ttls.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,\n\t\t// others...\n\t}\n\tdefaultCipherSuitesWithoutAESNI = []uint16{\n\t\ttls.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,\n\t\ttls.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,\n\t\t// others...\n\t}\n\t\n\t// Use AESNI if supported\n\tdefaultCipherSuites = func() []uint16 {\n\t\tif cpuid.CPU.Supports(cpuid.AESNI) {\n\t\t\treturn defaultCipherSuitesWithAESNI\n\t\t}\n\t\treturn defaultCipherSuitesWithoutAESNI\n\t}()\n\n\t// Named curves\n\tnamedCurves = map[string]tls.CurveID{\n\t\t\"p256\": tls.CurveP256,\n\t\t\"p384\": tls.CurveP384,\n\t\t\"p521\": tls.CurveP521,\n\t\t\"x25519mlkem768\": tls.X25519MLKEM768,\n\t}\n\n\t// Supported certmagic key types\n\tcertKeyTypes = map[string]certmagic.KeyType{\n\t\t\"rsa2048\": certmagic.RSA2048,\n\t\t\"rsa4096\": certmagic.RSA4096,\n\t\t// additional key types\n\t}\n)\n```\n\n----------------------------------------\n\nTITLE: Calling Class and State Management in Call.ts\nDESCRIPTION: This snippet details the Call class constructor and properties that determine whether a call is a conference or group call based on conversation type constants. It includes logic to check call states such as media establishment and whether the call is maximized, enabling dynamic UI updates and call state transitions.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\nthis.conversationType = conversationType;\nthis.isConference = [CONV_TYPE.CONFERENCE, CONV_TYPE.CONFERENCE_MLS].includes(this.conversationType);\n```\n\n----------------------------------------\n\nTITLE: Storing CSpell configuration in package.json\nDESCRIPTION: Example showing how to include CSpell configuration within a project's package.json file. The configuration is stored in the 'cspell' field.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/Configuration/index.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"name\": \"cspell-docs\",\n  \"description\": \"Documentation for CSpell\",\n  // ...\n  \"cspell\": {\n    \"version\": \"0.2\",\n    \"useGitignore\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Files Using .gitignore Globs with cspell-gitignore in TypeScript\nDESCRIPTION: Demonstrates importing the 'GitIgnore' and 'findRepoRoot' functions from the 'cspell-gitignore' library to filter a list of files based on .gitignore patterns. The example resolves the repository root directory, initializes a GitIgnore instance for that root, retrieves all files via glob matching all files, and then filters out ignored files by awaiting 'filterOutIgnored'. It requires Node.js with TypeScript support, and the 'glob' function should be defined or imported separately to list files.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-gitignore/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GitIgnore, findRepoRoot } from 'cspell-gitignore';\n\n// ...\n\nconst cwd = process.cwd();\nconst root = (await findRepoRoot(cwd)) || cwd;\nconst gitIgnore = new GitIgnore([root]);\n\nconst allFiles = glob('**');\n\nconst files = await gitIgnore.filterOutIgnored(allFiles);\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Custom Dictionaries (JSON)\nDESCRIPTION: Shows a `dictionaryDefinitions` array in `cspell.json` defining multiple custom dictionaries ('spanish', 'ruby', 'company-terms'). Each entry maps a reference `name` to a `path` pointing to the dictionary file, which is resolved relative to the configuration file.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell/README.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n// Define each dictionary.  Relative paths are relative to the config file.\n\"dictionaryDefinitions\": [\n    { \"name\": \"spanish\", \"path\": \"./spanish-words.txt\"},\n    { \"name\": \"ruby\", \"path\": \"./ruby.txt\"},\n    { \"name\": \"company-terms\", \"path\": \"./corp-terms.txt\"}\n],\n```\n\n----------------------------------------\n\nTITLE: Ignoring Files and Directories using ignorePaths (JSON)\nDESCRIPTION: Shows how to use the `ignorePaths` property within `cspell.json` with a glob pattern (`\"node_modules/**\"`) to instruct cspell to completely ignore all files and subdirectories within the `node_modules` directory during spell checks.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell/README.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"ignorePaths\": [\"node_modules/**\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring CSpell (JSON)\nDESCRIPTION: This JSON snippet provides a standard configuration example for CSpell in a `cspell.json` file. It defines a custom dictionary named 'project-words' located at './project-words.txt', adds this dictionary to the list of dictionaries to use, and specifies paths ('node_modules', '/project-words.txt') to ignore during spell checking.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/getting-started.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$schema\": \"https://raw.githubusercontent.com/streetsidesoftware/cspell/main/cspell.schema.json\",\n    \"version\": \"0.2\",\n    \"dictionaryDefinitions\": [\n        {\n            \"name\": \"project-words\",\n            \"path\": \"./project-words.txt\",\n            \"addWords\": true\n        }\n    ],\n    \"dictionaries\": [\"project-words\"],\n    \"ignorePaths\": [\"node_modules\", \"/project-words.txt\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Algorithm for Satisfiability (DPLL) in Python\nDESCRIPTION: Implements the DPLL algorithm for solving propositional satisfiability problems, a fundamental technique in logic and theorem proving. Uses uncomplemented literals and CNF structures.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_62\n\nLANGUAGE: Python\nCODE:\n```\n160:23 - Unknown word (uncomplemented) -- | A symbol is the uncomplemented form of a literal.\n285:5 - Unknown word (dpll) -- def dpll_algorithm(\n```\n\n----------------------------------------\n\nTITLE: Configuring CSpell (ESM JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to configure CSpell using an ES Module (`.mjs` file). It uses the `defineConfig` helper from the `cspell` package (implicitly imported based on surrounding context) to set configuration options like the CSpell version, custom dictionary definition ('project-words' at './project-words.txt'), active dictionaries, and paths to ignore ('node_modules', '/project-words.txt').\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/getting-started.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'cspell';\n\nexport default defineConfig({\n    version: '0.2',\n    dictionaryDefinitions: [\n        {\n            name: 'project-words',\n            path: './project-words.txt',\n            addWords: true,\n        },\n    ],\n    dictionaries: ['project-words'],\n    ignorePaths: ['node_modules', '/project-words.txt'],\n});\n```\n\n----------------------------------------\n\nTITLE: Running CSpell with npx (sh)\nDESCRIPTION: Uses `npx` to execute the `cspell` command. `npx` can run packages without a global installation or use a locally installed version, making it useful for ad-hoc execution. The `.` argument specifies checking the current directory. Requires npx (part of Node.js/npm).\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/installation.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpx cspell .\n```\n\n----------------------------------------\n\nTITLE: Importing RECEIPT_MODE from wireapp/api-client\nDESCRIPTION: This snippet imports `RECEIPT_MODE` from `@wireapp/api-client/lib/conversation`.  It likely deals with how messages and conversations handle receipts, such as read confirmations. The unknown word `wireapp` is the cspell error.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_110\n\nLANGUAGE: typescript\nCODE:\n```\nimport {RECEIPT_MODE} from '@wireapp/api-client/lib/conversation\n```\n\n----------------------------------------\n\nTITLE: Initializing GitIgnore with Specified Roots in TypeScript\nDESCRIPTION: Shows how to create a 'GitIgnore' instance with a specified root directory to prevent searching upwards in the directory hierarchy for .gitignore files. This usage confines the ignore evaluation within the provided roots. Requires the 'cspell-gitignore' library and a Node.js environment with TypeScript.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-gitignore/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst gitIgnore = new GitIgnore([process.cwd()]);\n```\n\n----------------------------------------\n\nTITLE: Spell Checking a File with cspell-lib in TypeScript\nDESCRIPTION: Illustrates how to spell check an entire file using `spellCheckDocument` from `cspell-lib` in TypeScript. It resolves the absolute file path using `node:path`, converts it to a file URL string required by `spellCheckDocument` using `node:url`, and then calls the function with the URI, enabling suggestions and disabling automatic config search. Requires `node:path`, `node:url`, and `cspell-lib`.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-lib/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { resolve } from 'node:path';\nimport { pathToFileURL } from 'node:url';\nimport { spellCheckDocument } from 'cspell-lib';\n\nexport async function checkFile(filename: string) {\n  const uri = pathToFileURL(resolve(filename)).toString();\n  const result = await spellCheckDocument(\n    { uri },\n    { generateSuggestions: true, noConfigSearch: true },\n    { words: customWords, suggestionsTimeout: 2000 }\n  );\n  return result.issues;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and managing Streams in Node.js\nDESCRIPTION: This snippet includes stream operations such as destroy(), end(), finished(), pipe(), pipeline(), push(), unshift(), and write(). These are used to handle flow control, data transmission, and lifecycle management of Readable, Writable, and Duplex streams in Node.js applications.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/node.txt#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nstream.destroy()\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nstream.end()\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nstream.finished()\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nstream.pipe()\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nstream.pipeline()\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nstream.push()\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nstream.unshift()\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nstream.write()\n```\n\n----------------------------------------\n\nTITLE: Spell Checking Text Content with cspell-lib in TypeScript\nDESCRIPTION: Demonstrates using the `spellCheckDocument` function from `cspell-lib` to spell check a given string in TypeScript. It imports necessary modules (`node:assert`, `cspell-lib`), defines custom words, calls `spellCheckDocument` with the text, options for suggestions and no config search, and asserts the expected spelling issues found. Requires `node:assert` and `cspell-lib`.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-lib/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport assert from 'node:assert';\n\nimport { spellCheckDocument } from 'cspell-lib';\n\n// cspell:ignore wordz coztom clockz cuztom\nconst customWords = ['wordz', 'cuztom', 'clockz'];\n\nasync function checkSpelling(phrase: string) {\n  const result = await spellCheckDocument(\n    { uri: 'text.txt', text: phrase, languageId: 'plaintext', locale: 'en' },\n    { generateSuggestions: true, noConfigSearch: true },\n    { words: customWords, suggestionsTimeout: 2000 }\n  );\n  return result.issues;\n}\n\nexport async function run() {\n  console.log(`Start: ${new Date().toISOString()}`);\n  const r = await checkSpelling('These are my coztom wordz.');\n  console.log(`End: ${new Date().toISOString()}`);\n  // console.log(r);\n  assert(r.length === 1, 'Make sure we got 1 spelling issue back.');\n  assert(r[0].text === 'coztom');\n  assert(r[0].suggestions?.includes('cuztom'));\n  // console.log('%o', r);\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Configuration with cspell.yml\nDESCRIPTION: This YAML snippet defines a CSpell configuration file (`cspell.yml`) that imports other configuration files. It sets the language to 'fr' and includes a list of words. It imports 'cspell-a.yml' and 'cspell-b.yml', which will be merged into the configuration.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/Configuration/imports.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage: fr\nimport:\n  - cspell-a.yml\n  - cspell-b.yml\nwords:\n  - root\n```\n\n----------------------------------------\n\nTITLE: Defining ParsedText Interface - TypeScript\nDESCRIPTION: This TypeScript code defines the `ParsedText` interface, which is the output format of the parser. It includes the extracted text, its range within the original document, an optional source map for transformations, and an optional delegate for handling nested parsing. This interface is crucial for the spell checker to understand and process the parsed document content.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/rfc/rfc-0003 parsing files/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ParsedText {\n  /**\n   * The text extracted and possibly transformed\n   */\n  text: string;\n  /**\n   * [start, end] - offsets of the text\n   */\n  range: [start: number, end: number];\n  /**\n   * The source map is used to support text transformations.\n   *\n   * See: {@link SourceMap}\n   */\n  map?: SourceMap;\n  /**\n   * Used to delegate parsing the contents of `text` to another parser.\n   */\n  delegate?: DelegateInfo;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining cSpell Word List\nDESCRIPTION: Illustrates the basic structure of a cSpell word list file. It shows how to add comments, forbid specific words, specify words with accents removed, and define words that can be used in compound words.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-tools/wordlists.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n# Comment\nword\n!forbid\nEnglish\n~english\n~cafe       # accent removed from é\ncafé\nerror*\n*code\n+ending\n```\n\n----------------------------------------\n\nTITLE: Using verbose regex in CSpell patterns in YAML\nDESCRIPTION: Shows how to define verbose regular expressions in YAML configuration using the `x` flag, simplifying complex regex patterns such as ignoring Markdown code blocks. The pattern matches fenced code blocks in Markdown files, with automatic trimming of whitespace and support for multi-line patterns.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/Configuration/patterns.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npatterns:\n  - name: markdown_code_block\n    pattern: |\n      /\n          ^(\\s*`{3,}).*     # match the ```\n          [\\s\\S]*?          # the block of code\n          ^\\1               # end of the block\n      /gmx\nlanguageSettings:\n  - languageId: markdown\n    ignoreRegExpList:\n      - markdown_code_block\n```\n\n----------------------------------------\n\nTITLE: Specifying Dictionaries for CSpell Spellchecker in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to specify dictionaries using a special comment directive ('cSpell:dictionaries') to instruct the CSpell tool to use certain dictionaries for spellchecking the file. The code declares a constant string simulating text that will be checked against the specified dictionaries. It assumes that the CSpell tool processes the directive for entire file dictionary settings.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/how-it-works.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// cSpell:dictionaries lorem-ipsum\nconst companyName = 'Lorem ipsum dolor sit amet';\n```\n\n----------------------------------------\n\nTITLE: Configuring Word Rules Using the Unified `terms` Structure (YAML)\nDESCRIPTION: Example YAML configuration demonstrating the proposed `terms` structure in CSpell. This structure merges `words`, `ignoreWords`, and `flagWords` concepts, allowing definition of forbidden terms (false), terms with suggestions (array or comma-separated string), ignored terms (null), and allowed terms (true or 'y').\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/rfc/rfc-0001 suggestions/README.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nterms:\n  crap: false # forbid this word\n  incase:\n    - in case # forbid this word and suggest `in case`\n  ignoreX: null # ignore this word\n  abandoning: true # this word is an acceptable term\n  abondoning: # cspell:disable-line\n    - abandoning\n  accesories: ['accessories'] # cspell:disable-line\n  accidant: ['accident'] # cspell:disable-line\n  accident: y # Accident is an allowed word\n  # cspell:disable-next-line\n  alusion: allusion, illusion # two suggestions `alusion`\n```\n\n----------------------------------------\n\nTITLE: Configuring Suggested Word Replacements - JSON\nDESCRIPTION: Illustrates the formats for defining preferred suggestions for specific words. This allows hinting at alternative spellings without strictly marking the original word as incorrect. Supports single auto-fixable suggestions and multiple non-auto-fixable suggestions.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/Configuration/auto_properties.md#_snippet_11\n\nLANGUAGE: JSON\nCODE:\n```\nFormat of `suggestWords`\n- Single suggestion (possible auto fix)\n    - `word: suggestion`\n    - `word->suggestion`\n- Multiple suggestions (not auto fixable)\n   - `word: first, second, third`\n   - `word->first, second, third`\n```\n\n----------------------------------------\n\nTITLE: Using repMap for Character Replacement in Dictionaries (JSON)\nDESCRIPTION: Example of using `repMap` within a dictionary definition in `cspell.json`. This allows defining rules to replace characters before checking against the dictionary, such as mapping various tick marks (`'`, `` ` ``, `’`) to a standard single quote (`'`).\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Replace various tick marks with a single '\n\"repMap\": [[\"'|`|’\", \"'\"]]\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Dictionaries - JSON\nDESCRIPTION: This snippet demonstrates the configuration file (`cspell.json`) for cspell. It enables a custom dictionary by adding its name to the `dictionaries` list and defines the dictionary using `dictionaryDefinitions`. The `name` property is used to look up the dictionary, and the `path` specifies the location of the word list file, relative to the `cspell.json` file. The `addWords` option is a setting some editor extensions may use to allow adding of words.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/dictionaries/custom-dictionaries.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    // Enable your dictionary by adding it to the list of `dictionaries`\n    \"dictionaries\": [\"custom-words\"],\n\n    // Tell CSpell about your dictionary\n    \"dictionaryDefinitions\": [\n        {\n            // The name of the dictionary is used to look it up.\n            \"name\": \"custom-words\",\n            // Path to the custom word file. Relative to this `cspell.json` file.\n            \"path\": \"./.cspell/custom-words.txt\",\n            // Some editor extensions will use `addWords` for adding words to your\n            // personal dictionary.\n            \"addWords\": true\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Enhanced `flagWords` in YAML Configuration\nDESCRIPTION: Example demonstrating how to use the enhanced `flagWords` syntax within a CSpell YAML configuration file. Shows how to forbid a word ('crap'), provide single suggestions ('hte' -> 'the'), and multiple suggestions ('accension' -> 'accession', 'ascension'). Also includes an example using YAML's fold literal syntax.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/rfc/rfc-0001 suggestions/README.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nflagWords:\n  - crap\n  - [hte, the]\n  - [acadmic, academic]\n  - [accension, accession, ascension]\n  - alturnative: > # cspell:disable-line\n      alternative\n```\n\n----------------------------------------\n\nTITLE: Installing cspell-tools CLI Using npm - Shell\nDESCRIPTION: Installs the cspell-tools command line interface globally using npm. This allows access to cspell-tools commands from the terminal. Prerequisites include having Node.js and npm installed and configured properly.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-tools/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g @cspell/cspell-tools\n```\n\n----------------------------------------\n\nTITLE: Compiling a Word List into a Compressed Dictionary - Shell\nDESCRIPTION: Uses cspell-tools-cli to read a plain text word list file (`keywords.txt`), filters the words, and outputs a compressed dictionary file in the specified output directory (`./dictionaries/`). The output file will be named after the input file, compressed as `.txt.gz`. This facilitates generating dictionaries compatible with the CSpell spell checker.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-tools/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncspell-tools-cli compile keywords.txt -o ./dictionaries/\n```\n\n----------------------------------------\n\nTITLE: Distance Calculation Algorithms TypeScript\nDESCRIPTION: Provides functions to compute string distances, including Levenshtein and A* algorithms, facilitating approximate string matching within the spell checker. Requires distance-related types and result formatting utilities.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_39\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function levenshtein(a: string, b: string): number { ... }\nexport function distanceAStar(source: string, target: string): number { ... }\n```\n\n----------------------------------------\n\nTITLE: Defining Flagged Words with Suggestions in TypeScript\nDESCRIPTION: This snippet demonstrates the format for defining flagged words that are always considered incorrect in an inline dictionary. It shows how to specify custom suggestions or replacements for flagged words using strings with colons or arrows. This feature allows fine-tuned control over flagged words and their suggested corrections in the spell checker configuration.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/Configuration/auto_properties.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n\"flagWords\": [\n  \"color: colour\",\n  \"incase: in case, encase\",\n  \"canot->cannot\",\n  \"cancelled->canceled\"\n]\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: make sure all forms are generated\nDESCRIPTION: This bug fix ensures that all forms are generated during the spell checking process. This implies that the spell checker now generates all possible variations of words or phrases to ensure that all valid forms are considered. This relates to issue [#3783](https://github.com/streetsidesoftware/cspell/issues/3783).\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-config-lib/CHANGELOG.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Compiling a Word List with CSpell Tools\nDESCRIPTION: This command uses CSpell Tools to compile a word list from the input file `keywords.txt` and writes the output to the specified directory.  The `-o` option is used to specify the output directory for the generated word list.  Dependencies: CSpell Tools must be installed and the input file `keywords.txt` must exist. Output: Generates a gzipped word list file in the specified output directory.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-tools-alias/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncspell-tools compile keywords.txt -o ./dictionaries/\n```\n\n----------------------------------------\n\nTITLE: Configuring MDX Plugins with KaTeX Support\nDESCRIPTION: Configuration for MDX to enable math rendering using rehypeKatex and remarkMath plugins. This allows integration of mathematical formulas in MDX documents.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/mdx-js/mdx/snapshot.txt#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nrehypePlugins: [rehypeKatex], remarkPlugins: [remarkMath]\n```\n\n----------------------------------------\n\nTITLE: Running Quick Visual Check with CSpell\nDESCRIPTION: This command performs a quick visual spell check on a specified file. It displays spelling errors highlighted directly in the document's content, making it easy to identify problematic words in context.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/command-check.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncspell check <filename>\n```\n\n----------------------------------------\n\nTITLE: Example cspell.json Configuration File (JSON)\nDESCRIPTION: Provides a basic example of a `cspell.json` configuration file. It shows how to set the configuration version (required '0.2'), specify the default language ('en'), define a list of custom words to be considered correct ('words'), and flag specific words as always incorrect ('flagWords').\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell/README.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n// cSpell Settings\n{\n    // Version of the setting file.  Always 0.2\n    \"version\": \"0.2\",\n    // language - current active spelling language\n    \"language\": \"en\",\n    // words - list of words to be always considered correct\n    \"words\": [\n        \"mkdirp\",\n        \"tsmerge\",\n        \"githubusercontent\",\n        \"streetsidesoftware\",\n        \"vsmarketplacebadge\",\n        \"visualstudio\"\n    ],\n    // flagWords - list of words to be always considered incorrect\n    // This is useful for offensive words and common spelling errors.\n    // For example \"hte\" should be \"the\"\n    \"flagWords\": [\n        \"hte\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Applock Text\nDESCRIPTION: This snippet is part of a React component to set applock text. The unknown word `applock` is the cspell error.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_114\n\nLANGUAGE: typescript\nCODE:\n```\nhtmlFor=\"status-preference-applock\">{t('preferencesAccountAppLoc\n```\n\n----------------------------------------\n\nTITLE: Root CA Configuration in Go\nDESCRIPTION: Implementation of Root CA certificate configuration for TLS client connections in the HTTP transport.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_66\n\nLANGUAGE: Go\nCODE:\n```\nRootCAPool) > 0 || len(t.RootCAPEMFiles) > 0 {\n    // CA Pool configuration\n    pemFile := range t.RootCAPEMFiles {\n        // Load PEM files\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Function Return Statement with m() Function in JavaScript\nDESCRIPTION: Example of a function returning a result from an m() function call that creates a table row with a key based on a database name property.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/eslint/eslint/snapshot.txt#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nreturn m(\"tr\", {key: db.dbname}, []\n```\n\n----------------------------------------\n\nTITLE: TypeScript Get Glob Matcher Utility\nDESCRIPTION: This utility creates a matcher function based on provided glob patterns allowing efficient repeated pattern matching. It depends on underlying glob libraries and supports customization of matching options for different filesystem or pattern scenarios.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* Implementation of getGlobMatcher utility */\n```\n\n----------------------------------------\n\nTITLE: Defining a Suggestion Dictionary in YAML\nDESCRIPTION: Example CSpell YAML configuration snippet showing how to define a dictionary specifically for suggestions. It includes a name, the path to the dictionary file (e.g., the custom text file), and sets the `type` to 'suggestions'.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/rfc/rfc-0001 suggestions/README.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndictionaryDefinitions:\n  - name: en-us-typo-suggestions\n    path: ./en-us-typos.txt\n    type: suggestions # alternatively we could call it a `typo` file.\n```\n\n----------------------------------------\n\nTITLE: Configuring Flag Words with Suggestions in CSpell\nDESCRIPTION: Example showing how to configure flag words with suggestions in CSpell. This allows specifying words that should always be considered incorrect and provide alternative suggestions.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/Configuration/auto_properties.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n\"flagWords\": [\n  \"color: colour\",\n  \"incase: in case, encase\",\n  \"canot->cannot\",\n  \"cancelled->canceled\"\n]\n```\n\n----------------------------------------\n\nTITLE: Importing Flatpack JSON Functions in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to import the primary functions 'parse' and 'stringify' from the Flatpack JSON library. These functions enable parsing flattened JSON strings into objects and stringifying objects into flattened JSON strings respectively, allowing for reduced JSON payload sizes and normalized values.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/flatpack-json/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parse, stringify } from 'flatpack-json';\n```\n\n----------------------------------------\n\nTITLE: Ignore ALL-CAPS Words Using Regular Expressions in CSpell\nDESCRIPTION: Example configurations in JSON and YAML showing how to ignore ALL-CAPS words in spell checking using regular expressions patterns.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/Configuration/auto_properties.md#_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n\"ignoreRegExpList\": [\"/\\\\b[A-Z]+\\\\b/g\"]\n```\n\nLANGUAGE: yaml\nCODE:\n```\nignoreRegExpList:\n  - >-\n   /\\b[A-Z]+\\b/g\n```\n\n----------------------------------------\n\nTITLE: Implementing Hamming Code in Python\nDESCRIPTION: Provides functions for encoding and decoding Hamming codes for error detection and correction. Dependencies include coding theory calculations; inputs are data bits, outputs are encoded bits with parity. Utilized in digital communications to ensure data integrity.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\nhashes/hamming_code.py:1:44      - Unknown word (Kunz)       -- A. Amorim & Gabriel Kunz\n```\n\n----------------------------------------\n\nTITLE: Dynamically Importing an ESM Package from ESM TypeScript\nDESCRIPTION: TypeScript example using `dynamicImport` from `@cspell/dynamic-import` to load an ESM-only package ('chalk') within an ES module environment. The `import.meta.url` property provides the necessary path context for module resolution.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/dynamic-import/README.md#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { dynamicImport } from '@cspell/dynamic-import';\n\nconst pChalk = dynamicImport<typeof import('chalk')>('chalk', import.meta.url);\n```\n\n----------------------------------------\n\nTITLE: Configuration File cspell-b.yml\nDESCRIPTION: This YAML snippet is another CSpell configuration file (`cspell-b.yml`). It defines dictionaries to be enabled and disabled, and a list of words. It disables the 'softwareTerms' dictionary and enables the 'html' dictionary. The word 'banana' is also added to the words list.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/Configuration/imports.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage: en\ndictionaries:\n  - '!softwareTerms' # Disable software-terms dictionary.\n  - html # enable html\nwords:\n  - banana\n```\n\n----------------------------------------\n\nTITLE: Using Twoslash with TypeScript in MDX\nDESCRIPTION: Example of TypeScript code block with twoslash directive for enhanced code documentation in MDX files. Twoslash is a TypeScript code sample renderer that provides additional insights.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/mdx-js/mdx/snapshot.txt#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx twoslash\nimport rehypeKatex from 'rehype-katex'\n```\n```\n\n----------------------------------------\n\nTITLE: Unmarshaling HTTP Server Options from Caddyfile in Go\nDESCRIPTION: This snippet describes a function to unmarshal HTTP server options from a Caddyfile dispenser into the internal server options representation. It involves reading configuration blocks, validating timeout settings, and integrating metrics settings. Uses caddyfile.Dispenser for reading tokens and caddyhttp.Server struct for output. Handles error reporting when configuration parameters such as timeouts are invalid.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\nfunc unmarshalCaddyfileServerOptions(d *caddyfile.Dispenser) (any, error) {\n    // Parse server options including read_body timeout, write timeout, idle timeout\n    // Use caddyfile.UnmarshalModule to handle submodules\n    // Set metrics and other options\n    return serverOpts, nil\n}\n```\n\n----------------------------------------\n\nTITLE: cspell-gitignore CLI Usage Instructions (Text)\nDESCRIPTION: Displays the command-line interface usage instructions for 'cspell-gitignore', including command syntax, options, and example commands. It offers a way to check files against .gitignore rules similar to 'git check-ignore'. This snippet is for shell terminal display and requires the CLI installed globally or locally.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-gitignore/README.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nUsage cspell-gitignore [options] <files>\n\nCheck files against .gitignore\nCompare against git check-ignore -v -n <files>\n\nOptions:\n  -r, --root   Add a root to prevent searching for .gitignore files above the root if the file is under the root.\n               This option can be used multiple times to add multiple roots. The default root is the current\n               repository root determined by the `.git` directory.\n\nExample:\n  cspell-gitignore README.md\n  cspell-gitignore -r . node_modules\n```\n\n----------------------------------------\n\nTITLE: Installing @cspell/filetypes Library via npm\nDESCRIPTION: Command to install the @cspell/filetypes library using npm. The -S flag saves it as a dependency in package.json.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-filetypes/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -S @cspell/filetypes\n```\n\n----------------------------------------\n\nTITLE: Example cspell.config.js for Custom CSpell Settings\nDESCRIPTION: This code defines a CSpell user settings configuration in JavaScript format, specifying language settings, patterns to ignore certain lines (like #include), and custom dictionaries. It demonstrates setting up a configuration with detailed options and exporting it via module.exports.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-lib/docs/configuration.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n'use strict';\n\n/** @type { import(\"@cspell/cspell-types\").CSpellUserSettings } */\nconst cspell = {\n  description: 'Company cspell settings',\n  languageSettings: [\n    {\n      languageId: 'cpp',\n      allowCompoundWords: false,\n      patterns: [\n        {\n          // define a pattern to ignore #includes\n          name: 'pound-includes',\n          pattern: /^\\s*#include.*/g\n        }\n      ],\n      ignoreRegExpList: ['pound-includes']\n    }\n  ],\n  dictionaryDefinitions: [\n    {\n      name: 'custom-words',\n      path: './custom-words.txt'\n    }\n  ],\n  dictionaries: ['custom-words']\n};\n\nmodule.exports = cspell;\n```\n\n----------------------------------------\n\nTITLE: Enabling All File Types with Exceptions in CSpell\nDESCRIPTION: Example configuration for `enableFiletypes` using a wildcard (`*`) to enable spell checking for all file types recognized by CSpell. It also shows how to add an exception (`!json`) to disable checking specifically for 'json' files.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/Configuration/auto_properties.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*           // enable checking for all file types\n!json       // except for json\n```\n\n----------------------------------------\n\nTITLE: Automatic Differentiation in Python\nDESCRIPTION: Provides methods for computing derivatives using backward mode automatic differentiation, essential in machine learning optimization. Inputs are model parameters; outputs are derivatives.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_39\n\nLANGUAGE: Python\nCODE:\n```\nmachine_learning/automatic_differentiation.py:272:17    - Unknown word (dparam)     -- dparam_doutput = self.derivative\n```\n\nLANGUAGE: Python\nCODE:\n```\nmachine_learning/automatic_differentiation.py:272:24    - Unknown word (doutput)    -- dparam_doutput = self.derivative(param\n```\n\nLANGUAGE: Python\nCODE:\n```\nmachine_learning/automatic_differentiation.py:273:24    - Unknown word (dtarget)    -- dparam_dtarget = dparam_doutput * partial\n```\n\n----------------------------------------\n\nTITLE: Installing Flatpack JSON via npm in Shell\nDESCRIPTION: This snippet provides the shell command needed to install the Flatpack JSON library as a project dependency using npm. It assumes the user has npm installed and configured. Running this command installs the package and adds it to the project's dependencies for version management and usage during runtime.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/flatpack-json/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -S flatpack-json\n```\n\n----------------------------------------\n\nTITLE: JavaScript Example with Twoslash in MDX\nDESCRIPTION: JavaScript code block using twoslash directive with a path specification. Twoslash enhances code examples with additional TypeScript insights and documentation.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/mdx-js/mdx/snapshot.txt#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n```js twoslash path=\"example.js\"\n```\n```\n\n----------------------------------------\n\nTITLE: Adding an Integration Test Repository using tester.js\nDESCRIPTION: Adds a new Git repository to the CSpell integration test suite using the `tester.js` script. Requires the repository URL and optionally a GitHub authentication token (`-t $(gh auth token)`) for private repositories. This command clones the repository locally into `repositories/<owner>/<repository>` and updates the `config/config.json` file.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./tester.js add https://github.com/<owner>/<repository>.git -t $(gh auth token)\n```\n\n----------------------------------------\n\nTITLE: Marking Forbidden Words in Custom Dictionary - Plain Text\nDESCRIPTION: Demonstrates how to mark a word as forbidden within a custom plain text dictionary file used by cspell. Words prefixed with '!' are treated as forbidden and will be flagged as errors unless explicitly ignored elsewhere.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\n!forbiddenWord\n```\n\n----------------------------------------\n\nTITLE: Suggestion Generation Functions TypeScript\nDESCRIPTION: Provides mechanisms for generating spelling suggestions, including orthography handling, suggestion collection, and scoring. Utilizes various suggestion options and heuristics to produce relevant suggestions.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_42\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function suggest(word: string, options?: SuggestOptions): SuggestResult[] { ... }\n```\n\n----------------------------------------\n\nTITLE: Installing CSpell Types Package\nDESCRIPTION: Command to install the @cspell/cspell-types package as a dependency in your project.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-types/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -S @cspell/cspell-types\n```\n\n----------------------------------------\n\nTITLE: Node.js VM Module for JavaScript Execution in Isolated Contexts\nDESCRIPTION: The vm module enables running JavaScript code in isolated contexts. Includes creating and running scripts, managing contexts, and working with JavaScript modules in isolated environments.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/node.txt#_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n// Creating and running scripts\nconst script = new vm.Script(code, options);\nscript.runInThisContext([options]);\nscript.runInContext(contextifiedObject, [options]);\nscript.runInNewContext([contextObject, [options]]);\nscript.createCachedData();\n\n// Running code directly\nvm.runInThisContext(code, [options]);\nvm.runInContext(code, contextifiedObject, [options]);\nvm.runInNewContext(code, [contextObject, [options]]);\nvm.compileFunction(code, [params, [options]]);\n\n// Managing contexts\nconst context = vm.createContext([contextObject, [options]]);\nvm.isContext(object);\n\n// Memory measurement\nvm.measureMemory([options]);\n\n// Working with VM modules\nconst sourceTextModule = new vm.SourceTextModule(code, [options]);\nconst syntheticModule = new vm.SyntheticModule(exportNames, evaluateCallback, [options]);\n\n// Module methods\nsourceTextModule.link(linker);\nsourceTextModule.evaluate([options]);\nsourceTextModule.createCachedData();\nsyntheticModule.setExport(name, value);\n```\n\n----------------------------------------\n\nTITLE: Importing WebappProperties from wireapp/api-client\nDESCRIPTION: This imports `WebappProperties` from `@wireapp/api-client/lib/user`.  This suggests the use of web application-specific properties, which might include user settings. It is likely used to retrieve or manipulate properties specific to web application user accounts.  Depends on the `@wireapp/api-client` library. The unknown word `wireapp` is the cspell error.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_102\n\nLANGUAGE: typescript\nCODE:\n```\nimport {WebappProperties} from '@wireapp/api-client/lib/user\n```\n\n----------------------------------------\n\nTITLE: Parsing PKI Application Configuration from Caddyfile in Go\nDESCRIPTION: This snippet defines a function to parse Public Key Infrastructure (PKI) application configurations from the Caddyfile. It creates a PKI struct and populates it by reading CA configurations and other PKI settings from Caddyfile directives via the dispenser. The function manages validation and accumulates warnings related to misconfigurations. It outputs the configured PKI object, any warnings, and errors if applicable. Dependencies include caddypki package and caddyfile.Dispenser.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\nfunc parsePKIApp(d *caddyfile.Dispenser, existingVal any) (any, error) {\n    pki := &caddypki.PKI{\n        CAs: make(map[string]*caddypki.CA),\n    }\n    // Iterate over Caddyfile server blocks and parse PKI CA configurations\n    // Handle error reporting and warnings\n    return pki, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ignore Patterns with Regular Expressions in CSpell\nDESCRIPTION: Examples of how to define regular expression patterns to exclude specific text from spell checking. Shows JSON and YAML syntax for ignoring all-caps words.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/Configuration/auto_properties.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n\"ignoreRegExpList\": [\"/\\\\b[A-Z]+\\\\b/g\"]\n```\n\nLANGUAGE: yaml\nCODE:\n```\nignoreRegExpList:\n  - >-\n   /\\b[A-Z]+\\b/g\n```\n\n----------------------------------------\n\nTITLE: Regenerating All Integration Test Snapshots\nDESCRIPTION: Regenerates the snapshots for all configured integration test repositories using the `tester.js` script. The `-u` flag signifies the update operation across all tests. This is used when changes in CSpell are expected to alter the output for multiple or all repositories and can be time-consuming.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./tester.js check -u\n```\n\n----------------------------------------\n\nTITLE: Performing Basic CSpell Check (Entire Project)\nDESCRIPTION: These shell commands illustrate how to run CSpell to check all files in the current directory and its subdirectories. Using `.` checks the current directory, while `\"**\"` checks everything recursively. These are quick ways to perform a project-wide spell check.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/getting-started.mdx#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncspell .\n# or\ncspell \"**\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CSpell Case Sensitivity by File Type (JSON)\nDESCRIPTION: Defines language-specific settings within the `cspell.json` to control case sensitivity for different file types identified by their `languageId`. This allows enabling or disabling case sensitivity independently for formats like Markdown (`markdown`) or JavaScript (`javascript`), overriding the global default setting.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/case-sensitive.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"languageSettings\": [\n  {\n    \"languageId\": \"markdown\",\n    \"caseSensitive\": true\n  },\n  {\n    \"languageId\": \"javascript\",\n    \"caseSensitive\": false\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: TypeScript Utility Module: textValidation/validator\nDESCRIPTION: This snippet covers the implementation of a text validator utility within cspell, including functions for validating text based on configured rules, dependencies on utility types, and error handling related to validation.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_46\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-lib/src/lib/textValidation/validator.ts\n```\n\n----------------------------------------\n\nTITLE: CMake Package Configuration Template Variables\nDESCRIPTION: Template variables for CMake package configuration including includedir and Cflags settings for pkg-config files.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/googleapis/google-cloud-cpp/snapshot.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nincludedir=@GOOGLE_CLOUD_CPP_PC_INCLUDEDIR@\n\nCflags: -I${includedir} @GOOGLE_CLOUD_CPP_PC_CFLAGS@\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Emoji Sequences using Unicode Data\nDESCRIPTION: Lists Unicode code point sequences representing Basic Emojis. Each line specifies the code points (hexadecimal), the 'Basic_Emoji' category, a human-readable description, the Unicode version (e.g., E0.7), a count field (always [1] here), and the rendered emoji character. This data format is commonly used for defining character properties and sequences in the Unicode standard.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-trie-lib/Samples/emoji-sequences.txt#_snippet_1\n\nLANGUAGE: UnicodeData\nCODE:\n```\n1F5C2 FE0F    ; Basic_Emoji                  ; card index dividers                                            # E0.7   [1] (🗂️)\n1F5C3 FE0F    ; Basic_Emoji                  ; card file box                                                  # E0.7   [1] (🗃️)\n1F5C4 FE0F    ; Basic_Emoji                  ; file cabinet                                                   # E0.7   [1] (🗄️)\n1F5D1 FE0F    ; Basic_Emoji                  ; wastebasket                                                    # E0.7   [1] (🗑️)\n1F5D2 FE0F    ; Basic_Emoji                  ; spiral notepad                                                 # E0.7   [1] (🗒️)\n1F5D3 FE0F    ; Basic_Emoji                  ; spiral calendar                                                # E0.7   [1] (🗓️)\n...\n```\n\n----------------------------------------\n\nTITLE: TypeScript Raw Settings Transformation\nDESCRIPTION: Transforms raw configuration data into validated internal structures, handling normalization and schema enforcement.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* normalizeRawSettings implementation */\n```\n\n----------------------------------------\n\nTITLE: TypeScript Word List Helper Module\nDESCRIPTION: Utilities for managing, querying, and manipulating word lists for spell correction.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_81\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-lib/src/lib/wordListHelper.ts\n```\n\n----------------------------------------\n\nTITLE: Importing Container from tsyringe\nDESCRIPTION: This snippet imports the `container` object from the `tsyringe` library. This is used for dependency injection in the TypeScript/React application. It allows components to receive their dependencies through the constructor, making the code more modular and testable.  Dependency is `tsyringe` library.  The unknown word `tsyringe` is the cspell error.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_93\n\nLANGUAGE: typescript\nCODE:\n```\nimport {container} from 'tsyringe';\n```\n\n----------------------------------------\n\nTITLE: Unknown words, missing context\nDESCRIPTION: This entry serves as a placeholder for snippets where the code context is missing. These could be individual code snippets or incomplete lines.  The associated cspell errors are also listed. The unknown word `wireapp` is the cspell error.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_119\n\nLANGUAGE: typescript\nCODE:\n```\nimport {ButtonVariant} from '@wireapp/react-ui-kit';\n```\n\n----------------------------------------\n\nTITLE: Dictionary Word List in Plaintext\nDESCRIPTION: A simple list of words (fruit names) to be used as a custom dictionary for the CSpell spell checker. Each word appears on its own line and includes 'apple', 'banana', 'apple‌banana', and 'grape'.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-tools/fixtures/build-split-source/src/words.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\napple\nbanana\napple‌banana\ngrape\n```\n\n----------------------------------------\n\nTITLE: TypeScript Settings Glob Filename Matching\nDESCRIPTION: Function that checks whether filenames match configured glob patterns to determine applicability of specific settings.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* checkFilenameMatchesGlob implementation */\n```\n\n----------------------------------------\n\nTITLE: TypeScript Settings Calculation for Overrides\nDESCRIPTION: Computes override settings based on user configurations and default settings, enabling priority-based configuration management.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* calcOverrideSettings function implementation */\n```\n\n----------------------------------------\n\nTITLE: Component and JSX Imports in editor.jsx (JavaScript)\nDESCRIPTION: Imports React's Fragment and JSX runtime functions to support JSX syntax within React components, enabling component composition and rendering. Crucial for React-based MDX editor implementations.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/mdx-js/mdx/snapshot.txt#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Fragment, jsx, jsxs} from 'react/jsx-runtime'\n\n```\n\n----------------------------------------\n\nTITLE: Performing Basic CSpell Check (Specific Files)\nDESCRIPTION: This snippet demonstrates how to use the `cspell` command from the shell to perform a spell check specifically on JavaScript files located within the `src` directory. The glob pattern `\"src/**/*.js\"` targets all files ending in `.js` recursively inside `src`. Both the default command and the explicit `lint` command achieve the same result.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/getting-started.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncspell \"src/**/*.js\"\n# or\ncspell lint \"src/**/*.js\"\n```\n\n----------------------------------------\n\nTITLE: Mapping Emojis to Options (TypeScript)\nDESCRIPTION: Maps the 'emojies' data structure to 'emojiOptions', likely for use in a picker component, extracting aliases ('n') and unicode ('u').\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nconst emojiOptions = emojies.map(({n: aliases, u\n```\n\n----------------------------------------\n\nTITLE: Error Handling and Utility Macros in Go\nDESCRIPTION: This snippet features error handling macros like 'd.Errf' and suppression directives '//nolint:gosec', improving code robustness and clarity during security-sensitive or complex operations. It exemplifies best practices for managing errors and annotations within Caddy's configuration context.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_49\n\nLANGUAGE: Go\nCODE:\n```\n// return d.Errf(\"module %s is not an implementation\")\n// //nolint:gosec\n```\n\n----------------------------------------\n\nTITLE: Configuring Flag Words with Suggestions in CSpell\nDESCRIPTION: Example of how to define flagged words with suggestions in CSpell. This demonstrates different formats for providing correction suggestions for words that should always be considered incorrect.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/Configuration/auto_properties.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n\"flagWords\": [\n  \"color: colour\",\n  \"incase: in case, encase\",\n  \"canot->cannot\",\n  \"cancelled->canceled\"\n]\n```\n\n----------------------------------------\n\nTITLE: Neural Network Back-Propagation Training in Python\nDESCRIPTION: Contains functions for training a neural network with back-propagation, including loss plotting and data handling. Uses variables like ydata and xdata, and includes references to the plotting axis self.ax_loss.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_58\n\nLANGUAGE: Python\nCODE:\n```\n126:28 - Unknown word (ydata) -- def train(self, xdata, ydata, train_round, accuracy\n```\n\nLANGUAGE: Python\nCODE:\n```\n130:22 - Unknown word (hlines) -- self.ax_loss.hlines(self.accuracy, 0, self\n```\n\nLANGUAGE: Python\nCODE:\n```\n69:35 - Unknown word (xdata) -- forward_propagation(self, xdata):\n```\n\nLANGUAGE: Python\nCODE:\n```\n99:7 - Unknown word (BPNN) -- class BPNN:\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Words in cspell.config.yaml\nDESCRIPTION: A simple cspell configuration file (`cspell.config.yaml`) written in YAML. It uses the `words` key to define a list of custom words (in this case, `somenewword`) that should be considered correct during spell checking.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/issues/issue-5120/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwords:\n  - somenewword\n```\n\n----------------------------------------\n\nTITLE: Installing cspell globally using npm\nDESCRIPTION: This command installs cspell globally, making it available from the command line. The `-g` flag indicates a global installation, which requires appropriate permissions.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g cspell\n```\n\n----------------------------------------\n\nTITLE: Managing Call State and Events Using React TypeScript and Dependency Injection\nDESCRIPTION: This snippet handles call state management and event subscriptions using React with TypeScript, leveraging tsyringe for dependency injection and importing call state constants from '@wireapp/avs'. It listens to media established events and manages UI updates accordingly. Key parameters include call state constants and event handlers, with outputs being UI state reflecting call progress. Dependencies are tsyringe for DI and wireapp event/state modules.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_63\n\nLANGUAGE: tsx\nCODE:\n```\nimport {container} from 'tsyringe';\nimport {CALL_STATE} from '@wireapp/avs';\nimport {WebAppEvents} from '@wireapp/webapp-events';\n\n// Sample code snippet for call state handling\nconst callState = CALL_STATE.MEDIA_ESTAB;\nconst eventHandler = () => {\n  if (callState === CALL_STATE.MEDIA_ESTAB) {\n    // handle media established state\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Running cspell on Files\nDESCRIPTION: This command recursively checks all files in the current directory for spelling errors.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell/static/help-lint.txt#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncspell .\n```\n\n----------------------------------------\n\nTITLE: Default ignoreRegExpList Patterns in CSpell\nDESCRIPTION: Lists the default patterns used by CSpell to ignore non-text content, such as URLs, emails, cryptographic hashes, Base64 strings, commit hashes, hex values, SHA hashes, UUIDs, etc., ensuring these are excluded from spell checking by default.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/Configuration/patterns.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nUrls\nEmail\nRsaCert\nSshRsa\nBase64MultiLine\nBase64SingleLine\nCommitHash\nCommitHashLink\nCStyleHexValue\nCSSHexValue\nSHA\nHashStrings\nUnicodeRef\nUUID\n```\n\n----------------------------------------\n\nTITLE: CSS Classes for Markdown Editing UI (CSS)\nDESCRIPTION: Defines CSS styles for UI elements like '.rehype-twoslash-error-target' and '.rehype-twoslash-popover', supporting syntax highlighting and error display features within a Markdown editor interface.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/mdx-js/mdx/snapshot.txt#_snippet_5\n\nLANGUAGE: CSS\nCODE:\n```\n.rehype-twoslash-error-target { ... }\n.rehype-twoslash-popover { ... }\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Beaufort Cipher with Python\nDESCRIPTION: Implements the Beaufort cipher, a polyalphabetic cipher similar to Vigenère, with functions to encrypt and decrypt messages. It requires an input key and plaintext, producing ciphertext or recovered plaintext, with dependencies on string manipulation and substitution calculations.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nSECRETSECRETSECRE\n```\n\nLANGUAGE: Python\nCODE:\n```\nAuthor: Mohit Radadiya\n```\n\nLANGUAGE: Python\nCODE:\n```\nBDC PAYUWL JPAIYI\n```\n\n----------------------------------------\n\nTITLE: Defining and Using a 'pidfile' Flag in Go\nDESCRIPTION: Defines a string flag named `pidfile` using `fl.String` or `cmd.Flags().StringP` and checks if it's set (`pidfileFlag != \"\"`). If set, the flag and its value are appended to command arguments, allowing specification of a process ID file path.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_28\n\nLANGUAGE: Go\nCODE:\n```\npidfileFlag := fl.String(\"pidfile\")\n```\n\nLANGUAGE: Go\nCODE:\n```\nif pidfileFlag != \"\" {\n```\n\nLANGUAGE: Go\nCODE:\n```\nappend(cmd.Args, \"--pidfile\", pidfileFlag)\n```\n\nLANGUAGE: Go\nCODE:\n```\ncmd.Flags().StringP(\"pidfile\", \"\", \"\", \"Path of file\")\n```\n\n----------------------------------------\n\nTITLE: Building Static Content with pnpm\nDESCRIPTION: This command builds the static content for the website and places it into the `build` directory. This directory can then be served by any static content hosting service. There are no specific parameters.  The output is static website files in the build directory.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ pnpm build:site\n```\n\n----------------------------------------\n\nTITLE: Caesar Cipher with Chi-Squared Testing Implementation\nDESCRIPTION: Python implementation for decrypting Caesar ciphers using chi-squared statistical analysis to detect the most likely shift value. Includes example encrypted texts that were flagged as unknown words.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n# Example usage of caesar_with_chi_squared function\ncaesar_with_chi_squared('crybd cdbsxq')\ncaesar_with_chi_squared('Crybd Cdbsxq', case_sensitive=True)\n```\n\n----------------------------------------\n\nTITLE: Resolving relative imports\nDESCRIPTION: This bug fix addresses an issue where relative imports without a leading `./` or `../` were not correctly resolved.  This improves the module resolution capabilities within cspell. This likely affects internal modules and dependencies.  There are no specific dependencies mentioned directly in the context.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/CHANGELOG.md#_snippet_2\n\nLANGUAGE: git\nCODE:\n```\nResolve relative imports without a leading `./` or `../`.  ([#5035](https://github.com/streetsidesoftware/cspell/issues/5035)) ([a28393b](https://github.com/streetsidesoftware/cspell/commit/a28393b30733b68e8b726c352e277ac4b5a0659d))\n```\n\n----------------------------------------\n\nTITLE: Installing @cspell/cspell-resolver via npm\nDESCRIPTION: Installs the `@cspell/cspell-resolver` package using the Node Package Manager (npm) and adds it as a production dependency (`-S` is an alias for `--save`) to the project's `package.json` file. This command should be executed in a terminal within the root directory of a Node.js project.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-resolver/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -S @cspell/cspell-resolver\n```\n\n----------------------------------------\n\nTITLE: Applying File-Specific Overrides (JSON)\nDESCRIPTION: Shows the `overrides` section in `cspell.json` to apply specific settings to files matching glob patterns. The first override treats `.hrr` and `.crr` files as C++ files (`\"languageId\": \"cpp\"`). The second override forces `.txt` files within specific directories (`**/dutch/**/*.txt`) to use the Dutch language (`\"language\": \"nl\"`).\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell/README.md#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n\"overrides\": [\n    // Force `*.hrr` and `*.crr` files to be treated as `cpp` files:\n    {\n        \"filename\": \"**/{*.hrr,*.crr}\",\n        \"languageId\": \"cpp\"\n    },\n    // Force `*.txt` to use the Dutch dictionary (Dutch dictionary needs to be installed separately):\n    {\n        \"language\": \"nl\",\n        \"filename\": \"**/dutch/**/*.txt\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Comment on Selection Clearing Behaviour (TypeScript)\nDESCRIPTION: A comment explaining the necessity of a certain behaviour (misspelled 'behaviour') to clear selection within the EditedMessagePlugin.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\n// This behaviour is needed to clear selection\n```\n\n----------------------------------------\n\nTITLE: Formatting Caddyfile Content in Go\nDESCRIPTION: Formats Caddyfile content using the `caddyfile.Format` function from the Caddy configuration package. It takes raw byte input (`input`) and returns the formatted Caddyfile content as bytes (`output` or directly printed).\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_29\n\nLANGUAGE: Go\nCODE:\n```\nfmt.Print(string(caddyfile.Format(input)))\n```\n\nLANGUAGE: Go\nCODE:\n```\noutput := caddyfile.Format(input)\n```\n\n----------------------------------------\n\nTITLE: Scaled Exponential Linear Unit (SELU) Activation in Python\nDESCRIPTION: Implements the SELU activation function, which enables self-normalizing neural networks. The code mentions the function's name and applies the exponential linear transformation.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_56\n\nLANGUAGE: Python\nCODE:\n```\n2:50 - Unknown word (SELU) -- Exponential Linear Unit or SELU function.\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for Configuration Settings of JSON Reporter\nDESCRIPTION: This TypeScript snippet specifies the configuration options supported by the @cspell/cspell-json-reporter. It defines settings such as 'outFile' for output path (default stdout), and boolean flags 'verbose', 'debug', and 'progress' to control inclusion of logs and progress messages. These settings customize reporter behavior during execution.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-json-reporter/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * CSpell-json-reporter settings type definition\n */\nexport type CSpellJSONReporterSettings = {\n  /**\n   * Path to the output file.\n   *\n   * Relative paths are relative to the current working directory.\n   *\n   * Special values:\n   * - `stdout` - write the JSON to `stdout`.\n   * - `stderr` - write the JSON to `stderr`.\n   *\n   * @default stdout\n   */\n  outFile?: string;\n  /**\n   * Add more information about the files being checked and the configuration\n   * @default false\n   */\n  verbose?: boolean;\n  /**\n   * Add information useful for debugging cspell.json files\n   * @default false\n   */\n  debug?: boolean;\n  /**\n   * Add progress messages\n   * @default false\n   */\n  progress?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Unmarshalling ACMEIssuer from Caddyfile Directives (Go)\nDESCRIPTION: The UnmarshalCaddyfile method allows deserialization of Caddyfile tokens into an instance of the ACMEIssuer struct. It processes Caddyfile configuration, validating fields such as timeout durations, directory settings, EAB credential references, and ACME challenge options, with error handling for invalid input using d.Errf. Dependencies include caddyfile.Dispenser and caddyconfig, and it is tightly coupled with the Caddy module ecosystem. Takes a caddyfile.Dispenser as input and populates the issuer with settings extracted from the configuration file.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_77\n\nLANGUAGE: Go\nCODE:\n```\n// UnmarshalCaddyfile deserializes Caddyfile tokens into iss.\nfunc (iss *ACMEIssuer) UnmarshalCaddyfile(d *caddyfile.Dispenser) error {\n    // ... parse tokens, set fields, error handling ...\n    return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Spell checking JavaScript files using cspell\nDESCRIPTION: This example command demonstrates how to use cspell to spell check all JavaScript files within the `src` directory. The command uses glob patterns to specify the files to be checked.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncspell \"src/**/*.js\"\n# or\ncspell lint \"src/**/*.js\"\n```\n\n----------------------------------------\n\nTITLE: TypeScript Pattern Regular Expression Model\nDESCRIPTION: Defines the structure for pattern-based regular expressions used in spell-checking, including patterns, flags, and compiled RegExp objects. Enhances pattern matching flexibility and configuration.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* PatternRegExp class or interface */\n```\n\n----------------------------------------\n\nTITLE: Recursive Matrix Multiplication in Python\nDESCRIPTION: Implements recursive matrix multiplication possibly with error handling for typo 'currenttly'. This algorithm enables multiplication of matrices using recursion, useful in divide-and-conquer approaches. Dependencies MIGHT include standard Python list operations, no external libraries mentioned.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_46\n\nLANGUAGE: Python\nCODE:\n```\n11:46 - Unknown word (currenttly) -- list[int]] # psf/black currenttly fails on this line\n```\n\n----------------------------------------\n\nTITLE: TypeScript Constants Definitions for Settings\nDESCRIPTION: Contains constant values used throughout the settings management modules, such as default paths or pattern strings.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* Constants used in settings modules */\n```\n\n----------------------------------------\n\nTITLE: Timing Decorator or Function in Recursive Matrix Multiplication Code\nDESCRIPTION: Defines a timing utility, likely for performance measurement using mytimeit with `partial(timeit, globals)`. This snippet allows for measuring execution time of matrix operations or functions, critical for performance tuning.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_47\n\nLANGUAGE: Python\nCODE:\n```\n179:5 - Unknown word (mytimeit) -- mytimeit = partial(timeit, globals\n```\n\n----------------------------------------\n\nTITLE: Configuring Restricted Modules in ESLint\nDESCRIPTION: Example showing how to configure ESLint to restrict the use of certain Node.js built-in modules in a project.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/eslint/eslint/snapshot.txt#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"cluster\",\"crypto\",\"dgram\",\"dns\",\"domain\",\"events\",\"freelist\",\"fs\",\"http\",\"https\"\n```\n\n----------------------------------------\n\nTITLE: Macro Constants for Bulletinboard Parameters in C\nDESCRIPTION: This snippet defines various macro constants representing bulletin board parameters such as read requests, deletions, error codes, and other message-related identifiers. These constants standardize message handling across the system, aiding in code readability and consistency. Usage requires including the header in relevant modules; applicable for internal communication and status reporting.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_14\n\nLANGUAGE: C\nCODE:\n```\n#define ASKREAD 94\n#define DEFLTC 95\n#define YNHUH 96\n#define DELBLT 98\n#define DELNOAX 99\n#define ASKDEL 100\n#define ASKDELR 101\n#define ABODEL 102\n#define DBDELOK 104\n#define EDTBLT 106\n#define EDTNOAX 107\n#define EBLTVT 108\n#define EBLTLT 111\n#define EDTAUT 112\n#define EDTTTL 113\n#define EDTAUTHR 114\n#define EDTAUTH 115\n#define AISIG 117\n#define AIDEF 118\n#define AISIGR 119\n#define AIDIRR 120\n#define BGNAINS 121\n#define FNDFILE 123\n#define BYTESNG 124\n#define BYTEPLR 125\n#define ALREXS 126\n#define AIINFO 128\n#define ASKINS 129\n#define ASKERR 130\n#define AIOK 131\n#define AIERR 132\n#define ENDAINS 133\n#define AUDRD 7\n#define ASKDEF 8\n#define INDSEL 9\n#define INDSPD 10\n#define DNLDESC 12\n#define NOAXES 16\n#define SCASK 22\n#define SCERR 23\n#define BLTCAN 24\n#define NBCLUB 25\n#define DEFLTS 26\n#define NBRCLB 27\n#define NBMSGN 29\n#define NBMSGNR 30\n#define NBFNXS 31\n#define NBFNEX 32\n#define NBATTR 34\n#define NBBODR 35\n#define NBATT 36\n#define NBBODATT 37\n#define NBBAD 38\n#define NBBAR 39\n#define NBCPR 40\n#define BLTUPL2M 41\n#define NBUSER 42\n#define NBUSERD 43\n#define NBRRUID 44\n#define NBCPER 45\n#define NBDSCR 46\n#define NBERR 47\n#define NBINFO 48\n#define BLTNOBT 49\n#define CLBNOBT 50\n#define BLTLSHD 51\n#define BLTLST 52\n#define LSTEND 53\n#define LSTCAN 57\n#define READBLT 58\n#define DNLBLT 59\n#define UNKBLT 60\n#define UNKBLTC 61\n#define BLTAMB 62\n#define AMBLSHD 63\n#define AMBLST 64\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server with pnpm\nDESCRIPTION: This command starts a local development server for the Docusaurus website. It opens a browser window and reflects changes live without restarting the server. The output is a running local development server, typically accessible through a web browser.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ pnpm start\n```\n\n----------------------------------------\n\nTITLE: Importing ButtonVariant from @wireapp/react-ui-kit (TypeScript)\nDESCRIPTION: Imports the 'ButtonVariant' type or enum from the '@wireapp/react-ui-kit' library within the LinkDialog component.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nButtonVariant} from '@wireapp/react-ui-kit';\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoHTTPS and TLS Connection Policies in Go for Caddy\nDESCRIPTION: This code snippet configures automatic HTTPS functionality by setting TLS connection policies in the AutoHTTPS module of the Caddy HTTP server. It uses the caddytls package to define connection policies such as TLSALPN challenges used for ACME certificate issuance. The code depends on certmagic for certificate management and handles hostname validation and redirections. It also demonstrates disabling redirections and managing multiple routes.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_40\n\nLANGUAGE: Go\nCODE:\n```\nsrv.TLSConnPolicies = caddytls.ConnectionPolicies{new(caddytls.ConnectionPolicy)}\n\n// Ensure ACME TLS-ALPN challenge config\nif acmeIssuer.Challenges.TLSALPN == nil {\n    acmeIssuer.Challenges.TLSALPN = new(caddytls.TLSALPNChallengeConfig)\n}\n\nif srv.AutoHTTPS.DisableRedir {\n    // Disable HTTP to HTTPS redirection\n}\n\nredirRoute := app.makeRedirRoute(addr.StartPort)\n```\n\n----------------------------------------\n\nTITLE: Checking Files in a Specific Directory with cspell\nDESCRIPTION: This command checks .js files within the 'src' directory and its subdirectories for spelling errors.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell/static/help-lint.txt#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncspell \"src/**/*.js\"\n```\n\n----------------------------------------\n\nTITLE: File Format V3 Header Definition\nDESCRIPTION: Defines the header for the V3 Trie file format. It includes the format identifier `TrieXv3` and the base used for references. The base can be 10, 16, or 32, with a maximum of 36.  Comments are allowed in the header.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-trie-lib/README.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nTrieXv3\nbase=10\n# Comments\n__DATA__\n```\n\n----------------------------------------\n\nTITLE: Configuring custom dictionaries in cspell.json\nDESCRIPTION: Example showing how to configure custom dictionaries in CSpell. Demonstrates adding Spanish, Ruby, and custom corporate terms dictionaries from local files and remote URLs.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/Configuration/index.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"language\": \"en\",\n// Dictionaries \"spanish\", \"ruby\", and \"corp-terms\" will always be checked.\n// Including \"spanish\" in the list of dictionaries means both Spanish and English\n// words will be considered correct.\n\"dictionaries\": [\"spanish\", \"ruby\", \"corp-terms\", \"fonts\"],\n// Define each dictionary:\n//  - Relative paths are relative to the config file.\n//  - URLs will be retrieved via HTTP GET\n\"dictionaryDefinitions\": [\n    { \"name\": \"spanish\", \"path\": \"./spanish-words.txt\"},\n    { \"name\": \"ruby\", \"path\": \"./ruby.txt\"},\n    {\n      \"name\": \"corp-terms\",\n      \"path\": \"https://shared-company-repository/cspell-terms.txt\"\n    },\n],\n```\n\n----------------------------------------\n\nTITLE: Example ESLint Configuration with '@cspell/eslint-plugin' in `.eslintrc.json`\nDESCRIPTION: This JSON snippet extends ESLint configuration to include the '@cspell' plugin and configures spellchecker rules with warning level and specific options.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-eslint-plugin/README.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@cspell\"],\n  \"rules\": {\n    \"@cspell/spellchecker\": [\"warn\", { \"checkComments\": false, \"autoFix\": true }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring @cspell/cspell-json-reporter in cspell.json (JSON)\nDESCRIPTION: This JSON snippet illustrates how to specify the JSON reporter in the CSpell configuration file (cspell.json). It defines the reporter and sets the outFile option to direct the JSON report output to 'out.json'.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-json-reporter/README.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"reporters\": [[\"@cspell/cspell-json-reporter\", { \"outFile\": \"out.json\" }]]\n}\n```\n\n----------------------------------------\n\nTITLE: ROT13 Cipher Implementation\nDESCRIPTION: Python implementation of the ROT13 cipher, a simple letter substitution cipher that replaces a letter with the 13th letter after it in the alphabet. Shows example encrypted text.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\n# Example ROT13 encrypted text\n\"Zl frperg onax nppbhag ahzore vf 173-52946 fb qba'g gryy nalbar!!\"\n```\n\n----------------------------------------\n\nTITLE: Manually Importing Cspell Software Terms Dictionary (JSON)\nDESCRIPTION: Shows how to manually add the software terms dictionary to a project's `cspell.json` configuration file. This is done by adding the package's `cspell-ext.json` path to the `import` array, allowing project-specific use of the dictionary.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/dictionaries/software-terms/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    // …\n    \"import\": [\"@cspell/dict-software-terms/cspell-ext.json\"],\n    // …\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript: EventMapper Module for Conversation Events\nDESCRIPTION: This code manages importing event-related entities such as 'LinkPreview' and 'Mention' from messaging protocols, along with functions for building finalisation-related events. It supports event conversion and handling for conversation migrations and user interactions.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_74\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {LinkPreview, Mention} from '@wireapp/protocol-messaging';\nimport {buildJoinedAfterMLSMigrationFinalisation} from '../eventBuilder';\n```\n\n----------------------------------------\n\nTITLE: Feature: Adjust .trie formatting\nDESCRIPTION: This feature makes adjustments to the formatting of `.trie` files. `.trie` files are used for storing the spell-checking data. This adjustment likely involved changing the internal structure or the way the data is stored within the trie files, with the aim of optimization or added support. This feature closes issues [#3443](https://github.com/streetsidesoftware/cspell/issues/3443) and [#3430](https://github.com/streetsidesoftware/cspell/issues/3430).\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-config-lib/CHANGELOG.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: File Format V1 Header Definition\nDESCRIPTION: Defines the header for the V1 Trie file format.  It consists of the identifier `TrieXv1` and the base used for storing offsets in a file.  Base can be 10, 16, or 32, with a maximum of 36.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-trie-lib/README.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nTrieXv1\nbase=10\n```\n\n----------------------------------------\n\nTITLE: Reading and Removing Doubles from Mesh Vertices Using BMesh in Python\nDESCRIPTION: This snippet shows how to invoke Blender's bmesh.ops.remove_doubles operation to merge vertices that are very close together, which is a common mesh cleanup step after import or editing. It uses a bmesh object and its verts collection, calling the operation with default parameters or a threshold distance. The input is a bmesh with vertices; output is a cleaned-up bmesh with merged vertices. This operation requires Blender's bmesh module.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/AdaDoom3/AdaDoom3/snapshot.txt#_snippet_24\n\nLANGUAGE: Python\nCODE:\n```\nbmesh.ops.remove_doubles(bm, verts=bm.verts)\n```\n\n----------------------------------------\n\nTITLE: Testing str.removeprefix() in Python\nDESCRIPTION: Tests the `str.removeprefix()` method in Python 3.9+. It checks if the method correctly removes the specified prefix ('afoo') from the string 'foobarfoo'. Includes setup with reference strings, including one with unicode characters.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_43\n\nLANGUAGE: python\nCODE:\n```\ns = 'foobarfoo'\ns_ref='foobarfoo'\nassert s.removeprefix('afoo') == s_ref\n\ns_uc = '😱foobarfoo🖖'\ns_ref_uc = '😱foobarfoo🖖'\n# assert s_uc.removeprefix('😱foo') == 'barfoo🖖' # Example of successful removal\n# assert s_uc.removeprefix('bar') == s_ref_uc # Example of prefix not found\n```\n\n----------------------------------------\n\nTITLE: Defining and Managing TLS Connection Policies with Caddy and Go\nDESCRIPTION: This snippet features Go structs and functions to define connection policies for TLS using Caddy's configuration modules. It covers ALPN negotiation, certificate verifier handling, trusted certificate loading, and unmarshalling from Caddyfile tokens. Dependencies include Caddy's configuration and caddyfile packages, certmagic, and acmez for ACME protocol support. Key inputs are connection parameters and configuration tokens; outputs are populated policy objects and error states. It supports extensions with custom modules and handles session resumption and security policies.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_81\n\nLANGUAGE: Go\nCODE:\n```\ntype ConnectionPolicy struct {\n\tALPN []string `json:\"alpn,omitempty\"`\n\tNextProtos []string\n\tTrustedCACerts []string\n\tVerifiersRaw []caddyconfig.JSONModuleObject\n}\n\nfunc (cp *ConnectionPolicy) UnmarshalCaddyfile(d *caddyfile.Dispenser) error {\n\t// Parse connection policy options from Caddyfile\n\treturn nil\n}\n\n```\n\n----------------------------------------\n\nTITLE: Showing Spelling Issues with Context and Suggestions\nDESCRIPTION: This shell command runs CSpell on Markdown files (`**/*.md`) with options to provide more detailed output. `--no-progress` disables the progress bar, `--show-suggestions` displays suggested corrections for misspelled words, and `--show-context` includes the surrounding text where an issue was found, aiding in fixing errors.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/getting-started.mdx#_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ncspell --no-progress --show-suggestions --show-context \"**/*.md\"\n```\n\n----------------------------------------\n\nTITLE: ESLint Command Line Interface Usage with Custom Formatter\nDESCRIPTION: Example showing how to use ESLint's command line interface with a custom formatter file to process linting results.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/eslint/eslint/snapshot.txt#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nargs: [\"-f\", \"./customformat.js\", \"file.js\"]\n```\n\n----------------------------------------\n\nTITLE: HTTP Server Setup in Caddy with TLS and Logging (Go)\nDESCRIPTION: This code configures an HTTP server with TLS, logging, and request handling, integrating caddyhttp, caddytls, and caddyevents modules. It sets up connection policies, manages request recording, and logs request details. Dependencies include caddyserver packages, enabling secure and monitored HTTP server operation.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_73\n\nLANGUAGE: Go\nCODE:\n```\ntlsApp *caddytls.TLS\nevents *caddyevents.App\n```\n\n----------------------------------------\n\nTITLE: SHA-256 Hashing in Python\nDESCRIPTION: Implements SHA-256 cryptographic hash function with references to author; used for secure data hashing. Input is data bytes; output is hash digest. Critical in security protocols.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\nhashes/sha256.py:1:14      - Unknown word (Yathurshan) -- # Author: M. Yathurshan\n```\n\n----------------------------------------\n\nTITLE: Installing @cspell/cspell-json-reporter Using npm Shell Commands\nDESCRIPTION: This shell snippet shows how to install the @cspell/cspell-json-reporter package as a development dependency using npm. The command installs the package and saves it under dev dependencies to be used for JSON reporting capabilities in CSpell.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-json-reporter/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -SD @cspell/cspell-json-reporter\n```\n\n----------------------------------------\n\nTITLE: Configuring Language-Specific Settings (JSON)\nDESCRIPTION: Example of using the `languageSettings` array in `cspell.json` to apply configurations selectively. This entry targets C and C++ files (`\"languageId\": \"c,cpp\"`) across all locales (`\"locale\": \"*\"`), ignores lines matching a specific regex (`/#include.*/`), and enables the 'cpp' dictionary for these files.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell/README.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n\"languageSettings\": [\n    {\n        // VSCode languageId. i.e. typescript, java, go, cpp, javascript, markdown, latex\n        // * will match against any file type.\n        \"languageId\": \"c,cpp\",\n        // Language locale. i.e. en-US, de-AT, or ru. * will match all locales.\n        // Multiple locales can be specified like: \"en, en-US\" to match both English and English US.\n        \"locale\": \"*\",\n        // To exclude patterns, add them to \"ignoreRegExpList\"\n        \"ignoreRegExpList\": [\n            \"/#include.*/\"\n        ],\n        // List of dictionaries to enable by name in `dictionaryDefinitions`\n        \"dictionaries\": [\"cpp\"],\n        // Dictionary definitions can also be supplied here. They are only used iff \"languageId\" and \"locale\" match.\n        \"dictionaryDefinitions\": []\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Destructuring and Object Pattern Examples in JavaScript\nDESCRIPTION: Various examples of JavaScript object destructuring patterns, including variable assignment with property access and default values.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/eslint/eslint/snapshot.txt#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { categoryid_Default = 1 } = query\n```\n\n----------------------------------------\n\nTITLE: GELU Activation Function with Documentation in Python\nDESCRIPTION: Provides detailed information about the GELU activation, emphasizing its performance benefits in neural networks. This function applies a non-linear transformation to input arrays and requires numpy.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_54\n\nLANGUAGE: Python\nCODE:\n```\n6:29 - Unknown word (GELU) -- Gaussian Error Linear Unit (GELU) is a high-performing\n```\n\n----------------------------------------\n\nTITLE: Preferred Suggestions Listed First\nDESCRIPTION: This entry describes a feature where preferred suggestions are now listed first. This change modifies the suggestion algorithm to prioritize the most relevant suggestions. The goal is to improve the user experience by making it easier to find the most likely correct spellings.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-glob/CHANGELOG.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Response Recorder and Logging in Caddy HTTP Server (Go)\nDESCRIPTION: This snippet involves creating a response recorder object to capture HTTP response details, with functions to log requests, response headers, and execution durations. It interfaces with caddyserver’s logging ecosystem, using zap.Object for structured logging, and is fundamental for request monitoring and debugging.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_74\n\nLANGUAGE: Go\nCODE:\n```\nwrec := NewResponseRecorder\nloggableReq := zap.Object(\"request\", LoggableHTTPRequest{...})\n```\n\n----------------------------------------\n\nTITLE: TypeScript: Message ID and Original Message Reference\nDESCRIPTION: This code deals with referencing original message IDs, ensuring message consistency and tracking, particularly important for message edits, reactions, or message threading within the conversation system.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_80\n\nLANGUAGE: TypeScript\nCODE:\n```\n// originalId Id of the message currently in db, necessary\n```\n\n----------------------------------------\n\nTITLE: TLS ECH Configuration and Implementation in Caddy (Go Code Snippets)\nDESCRIPTION: This snippet covers the implementation of Encrypted ClientHello (ECH) in Caddy's TLS module, including DNS provider interfaces, cryptographic configurations, and media type registration. It relies on github.com/caddyserver/certmagic for certificate management, github.com/cloudflare/circl for cryptography, and libdns for DNS interactions. Functions manage DNS-based provisioning for ECH, configure cryptographic parameters, and register ECH-specific content types and modules.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_85\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddytls/ech.go:10:2      - Unknown word (weakrand)   -- weakrand \"math/rand/v2\"\\nmodules/caddytls/ech.go:111:28    - Unknown word (nolint)      -- outerNames []string //nolint:prealloc // (FALSE POSITIVE\\nmodules/caddytls/ech.go:111:35    - Unknown word (prealloc)    -- outerNames []string //nolint:prealloc // (FALSE POSITIVE\\nmodules/caddytls/ech.go:16:14     - Unknown word (caddyserver) -- \"github.com/caddyserver/certmagic\"\\nmodules/caddytls/ech.go:16:26     - Unknown word (certmagic)   -- github.com/caddyserver/certmagic\"\\nmodules/caddytls/ech.go:17:25     - Unknown word (circl)       -- github.com/cloudflare/circl/hpke\"\\nmodules/caddytls/ech.go:17:31     - Unknown word (hpke)        -- com/cloudflare/circl/hpke\"\\nmodules/caddytls/ech.go:18:25     - Unknown word (circl)       -- github.com/cloudflare/circl/kem\"\\nmodules/caddytls/ech.go:194:28    - Unknown word (ECHDNS)      -- dnsProv, ok := t.dns.(ECHDNSProvider); ok {\\nmodules/caddytls/ech.go:198:8     - Unknown word (ECHDNS)      -- &ECHDNSPublisher{\\nmodules/caddytls/ech.go:19:14     - Unknown word (libdns)      -- \"github.com/libdns/libdns\"\\nmodules/caddytls/ech.go:19:21     - Unknown word (libdns)      -- \"github.com/libdns/libdns\"\\nmodules/caddytls/ech.go:1:9       - Unknown word (caddytls)   -- package caddytls\\nmodules/caddytls/ech.go:23:14     - Unknown word (caddyserver) -- \"github.com/caddyserver/caddy/v2\"\\nmodules/caddytls/ech.go:27:23     - Unknown word (ECHDNS)      -- caddy.RegisterModule(ECHDNSPublisher{})\\nmodules/caddytls/ech.go:430:26    - Unknown word (godoc)       -- to quote the Go 1.24 godoc (with typos of AEAD\\nmodules/caddytls/ech.go:434:29    - Unknown word (DHKEM)       -- should only specify the DHKEM(X25519, HKDF-SHA256\\nmodules/caddytls/ech.go:442:20    - Unknown word (hpke)        -- const kemChoice = hpke.KEM_X25519_HKDF_SHA\\nmodules/caddytls/ech.go:456:23    - Unknown word (TLSESNI)     -- Version: draftTLSESNI22,\\nmodules/caddytls/ech.go:459:3     - Unknown word (KEMID)       -- KEMID: kemChoice,\\nmodules/caddytls/ech.go:460:19    - Unknown word (hpke)        -- CipherSuites: []hpkeSymmetricCipherSuite\\nmodules/caddytls/ech.go:462:13    - Unknown word (hpke)        -- KDFID: hpke.KDF_HKDF_SHA256,\\nmodules/caddytls/ech.go:462:5     - Unknown word (KDFID)       -- KDFID: hpke.KDF_HKDF_SHA\\nmodules/caddytls/ech.go:463:13    - Unknown word (hpke)        -- AEADID: hpke.AEAD_AES128GCM,\\nmodules/caddytls/ech.go:463:5     - Unknown word (AEADID)      -- AEADID: hpke.AEAD_AES128GCM\\nmodules/caddytls/ech.go:466:5     - Unknown word (KDFID)       -- KDFID: hpke.KDF_HKDF_SHA\\nmodules/caddytls/ech.go:467:5     - Unknown word (AEADID)      -- AEADID: hpke.AEAD_AES256GCM\\nmodules/caddytls/ech.go:470:5     - Unknown word (KDFID)       -- KDFID: hpke.KDF_HKDF_SHA\\nmodules/caddytls/ech.go:471:5     - Unknown word (AEADID)      -- AEADID: hpke.AEAD_ChaCha20Poly\\nmodules/caddytls/ech.go:560:19    - Unknown word (hostnames)   -- // registers the hostnames for which it applies\\nmodules/caddytls/ech.go:585:4     - Unknown word (ECHDNS)      -- // ECHDNSProvider can service\\nmodules/caddytls/ech.go:586:6     - Unknown word (ECHDNS)      -- type ECHDNSProvider interface {\\nmodules/caddytls/ech.go:587:2     - Unknown word (libdns)      -- libdns.RecordGetter\\nmodules/caddytls/ech.go:588:2     - Unknown word (libdns)      -- libdns.RecordSetter\\nmodules/caddytls/ech.go:636:17    - Unknown word (certmagic)   -- nameservers := certmagic.RecursiveNameservers\\nmodules/caddytls/ech.go:640:16    - Unknown word (certmagic)   -- zone, err := certmagic.FindZoneByFQDN(ctx,\\nmodules/caddytls/ech.go:648:14    - Unknown word (libdns)      -- relName := libdns.RelativeName(domain\\nmodules/caddytls/ech.go:675:55    - Unknown word (svcb)        -- ServiceBinding); ok && svcb.Scheme == \"https\" {\\nmodules/caddytls/ech.go:675:8     - Unknown word (svcb)        -- if svcb, ok := rec.(libdns.ServiceBin\\nmodules/caddytls/ech.go:676:30    - Unknown word (svcb)        -- svcb.Target == \"\" || svcb.Target == \".\" {\\nmodules/caddytls/ech.go:676:9     - Unknown word (svcb)        -- if svcb.Target == \"\" || svcb\\nmodules/caddytls/ech.go:677:18    - Unknown word (svcb)        -- httpsRec = svcb\\nmodules/caddytls/ech.go:706:18    - Unknown word (SVCB)        -- // HTTPS and SVCB RRs: RFC 9460 (https\\nmodules/caddytls/ech.go:730:20    - Unknown word (esni)        -- // [draft-ietf-tls-esni-22](https://www.ietf\\nmodules/caddytls/ech.go:742:5     - Unknown word (Hpke)        -- // HpkeKeyConfig fields: \\nmodules/caddytls/ech.go:744:2     - Unknown word (KEMID)       -- KEMID hpke.KEM\\nmodules/caddytls/ech.go:771:33    - Unknown word (Tariq)       -- from github.com/OmarTariq612/goech with modifications\\nmodules/caddytls/ech.go:771:42    - Unknown word (goech)       -- github.com/OmarTariq612/goech with modifications.\\nmodules/caddytls/ech.go:772:43    - Unknown word (Tariq)       -- Copyright (c) 2023 Omar Tariq AbdEl-Raziq\\nmodules/caddytls/ech.go:772:55    - Unknown word (Raziq)       -- 23 Omar Tariq AbdEl-Raziq\\nmodules/caddytls/ech.go:780:28    - Unknown word (TLSESNI)     -- echCfg.Version != draftTLSESNI22 {\n```\n\n----------------------------------------\n\nTITLE: Defining Character Replacements (`repMap`) in CSpell Configuration (JavaScript/JSON)\nDESCRIPTION: Illustrates the use of the `repMap` property within a dictionary definition in a `cspell.json` file. This allows specifying character replacements using regular expressions before checking words against the dictionary. In this example, various types of tick marks (`'`, ```, `’`) are replaced with a standard single quote (`'`).\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/dictionaries/index.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Replace various tick marks with a single '\n\"repMap\": [[\"'|`|’\", \"'\"]]\n```\n\n----------------------------------------\n\nTITLE: Importing IconButtonVariant from wireapp/react-ui-kit\nDESCRIPTION: This snippet imports `IconButtonVariant` from the `@wireapp/react-ui-kit` library. This indicates that the application uses the `IconButtonVariant` to style icons in the user interface.  Dependencies include `@wireapp/react-ui-kit`. The unknown word `wireapp` is the cspell error.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_105\n\nLANGUAGE: typescript\nCODE:\n```\nimport {IconButtonVariant} from '@wireapp/react-ui-kit';\n```\n\n----------------------------------------\n\nTITLE: Importing IndicatorRangeInput from wireapp/react-ui-kit\nDESCRIPTION: This imports the `IndicatorRangeInput` component from the `@wireapp/react-ui-kit` library. It indicates that a range input with visual indicators or progress bars is likely used in the UI. Dependencies: `@wireapp/react-ui-kit`. The unknown word `wireapp` is the cspell error.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_103\n\nLANGUAGE: typescript\nCODE:\n```\nimport {IndicatorRangeInput} from '@wireapp/react-ui-kit';\n```\n\n----------------------------------------\n\nTITLE: Proxy Protocol Implementation in Go\nDESCRIPTION: Code for implementing the PROXY protocol in HTTP transport, handling version selection and address information for proxied connections.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_63\n\nLANGUAGE: Go\nCODE:\n```\nproxyv = 1\nproxyv = 2\nheader := proxyproto.HeaderProxyFromAddrs(proxyv, sourceAddr, destAddr)\n```\n\n----------------------------------------\n\nTITLE: Installing @cspell/url Package Shell Command\nDESCRIPTION: This shell command installs the @cspell/url package as a dependency in a Node.js project using npm. It is intended to be run in the terminal to add the URL parsing and manipulation library for cspell into the project's dependencies.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-url/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -S @cspell/url\n```\n\n----------------------------------------\n\nTITLE: MFCC Feature Extraction in Python\nDESCRIPTION: Implements Mel Frequency Cepstral Coefficients extraction using windowing, FFT, and DCT. Inputs include audio signals; outputs are feature vectors for speech processing, crucial in speech recognition.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_43\n\nLANGUAGE: Python\nCODE:\n```\nmachine_learning/mfcc.py:123:41    - Unknown word (Hanning)    -- simplicity we will choose the Hanning window.\n```\n\nLANGUAGE: Python\nCODE:\n```\nmachine_learning/mfcc.py:124:26    - Unknown word (hann)       -- window = get_window(\"hann\", ftt_size, fftbins\n```\n\nLANGUAGE: Python\nCODE:\n```\nmachine_learning/mfcc.py:124:43    - Unknown word (fftbins)    -- window(\"hann\", ftt_size, fftbins=True)\n```\n\nLANGUAGE: Python\nCODE:\n```\nmachine_learning/mfcc.py:146:14    - Unknown word (coefficents) -- cepstral_coefficents = np.dot(dct_filters\n```\n\nLANGUAGE: Python\nCODE:\n```\nmachine_learning/mfcc.py:292:17    - Unknown word (mels)        -- def mel_to_freq(mels: float) -> float:\n```\n\nLANGUAGE: Python\nCODE:\n```\nmachine_learning/mfcc.py:2:15      - Unknown word (Cepstral)   -- Mel Frequency Cepstral Coefficients (MFCC)\n```\n\nLANGUAGE: Python\nCODE:\n```\nmachine_learning/mfcc.py:2:38      - Unknown word (MFCC)       -- Cepstral Coefficients (MFCC) Calculation\n```\n\nLANGUAGE: Python\nCODE:\n```\nmachine_learning/mfcc.py:347:5     - Unknown word (enorm)       -- enorm = 2.0 / (mel_freqs[\n```\n\nLANGUAGE: Python\nCODE:\n```\nmachine_learning/mfcc.py:412:5     - Unknown word (fmin)        -- fmin_mel = freq_to_mel(freq\n```\n\nLANGUAGE: Python\nCODE:\n```\nmachine_learning/mfcc.py:413:5     - Unknown word (fmax)        -- fmax_mel = freq_to_mel(freq\n```\n\nLANGUAGE: Python\nCODE:\n```\nmachine_learning/mfcc.py:436:39    - Unknown word (fbank)       -- num: The number of the fbank filters.\n```\n\nLANGUAGE: Python\nCODE:\n```\nmachine_learning/mfcc.py:467:26    - Unknown word (wavfile)     -- from scipy.io import wavfile\n```\n\n----------------------------------------\n\nTITLE: Defining Regular Expression Patterns CSpell\nDESCRIPTION: This snippet illustrates how to define regular expression patterns within a CSpell configuration to be used for ignoring or including specific text during spell checking. It demonstrates the usage of `ignoreRegExpList` and `includeRegExpList` in conjunction with the `patterns` property. The example shows both single-line and multi-line comments and how to combine named patterns.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/Configuration/auto_properties.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\n\"ignoreRegExpList\": [\"comments\"],\n\"patterns\": [\n  {\n    \"name\": \"comment-single-line\",\n    \"pattern\": \"/#.*/g\"\n  },\n  {\n    \"name\": \"comment-multi-line\",\n    \"pattern\": \"/(?:\\/\\*[\\s\\S]*?\\*\\/)/g\"\n  },\n  // You can also combine multiple named patterns into one single named pattern\n  {\n    \"name\": \"comments\",\n    \"pattern\": [\"comment-single-line\", \"comment-multi-line\"]\n  }\n]\n```\n```\n\n----------------------------------------\n\nTITLE: Running CSpell on Current Directory (sh)\nDESCRIPTION: Executes the globally installed `cspell` command. The `.` argument instructs CSpell to check the current working directory and its contents for spelling errors. Requires CSpell to be installed globally or available in the PATH.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/installation.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncspell .\n```\n\n----------------------------------------\n\nTITLE: Disabling and Re-enabling Dictionaries (JSON)\nDESCRIPTION: Demonstrates how to disable a default dictionary globally (e.g., `!cpp`) by prefixing its name with '!' in the `dictionaries` list. It also shows how to re-enable it (`!!cpp`) for specific file patterns using the `overrides` section within `cspell.json`. The number of '!' acts as a toggle.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell/README.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n\"dictionaries\": [\"!cpp\"],\n\"overrides\": [\n  {\n      \"filename\": \"legacy/**/*.cpp\",\n      \"dictionaries\": [\"!!cpp\"], // add it back for *.cpp files under the legacy folder\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: TypeScript SimpleCache Implementation\nDESCRIPTION: A straightforward cache to store temporary data, improving efficiency of repeated data access.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_68\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-lib/src/lib/util/simpleCache.ts\n```\n\n----------------------------------------\n\nTITLE: Function Declaration with Unknown Word - C\nDESCRIPTION: This snippet calls the function 'keyed' with argument `bbskey_t * k`. The word 'bbskey' is flagged as an unknown word. The function is part of the `classed` subdirectory.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_86\n\nLANGUAGE: C\nCODE:\n```\nkeyed (bbskey_t * k)\n```\n\n----------------------------------------\n\nTITLE: Support conditional builds\nDESCRIPTION: This bug fix implements support for conditional builds, most likely within the cspell-tools package. This enables the build process to adapt based on certain conditions, such as the operating system, build environment, or configuration options. It likely changes how the project builds to support cross-platform builds.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/CHANGELOG.md#_snippet_6\n\nLANGUAGE: git\nCODE:\n```\n**cspell-tools:** support conditional builds. ([#4668](https://github.com/streetsidesoftware/cspell/issues/4668)) ([de4d897](https://github.com/streetsidesoftware/cspell/commit/de4d897139fe5c98a83af926be23727f42be98d6))\n```\n\n----------------------------------------\n\nTITLE: Conditional Plugin Pushing Based on Show State (JavaScript)\nDESCRIPTION: This snippet conditionally adds 'recma' and 'remark' plugins to respective plugin stacks 'recmaPlugins' and 'remarkPlugins' depending on the 'show' variable, supporting dynamic content transformations for 'esast' or 'mdast'.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/mdx-js/mdx/snapshot.txt#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (show === 'esast') recmaPlugins.push([captureEsast])\nif (show === 'mdast') remarkPlugins.push([captureMdast])\n```\n\n----------------------------------------\n\nTITLE: Adjust Trie Formatting\nDESCRIPTION: This feature adjusts the formatting of `.trie` files. The change modifies the structure or layout of trie files, which are used by the spell checker to store words. The aim is to improve efficiency, readability, or compatibility with other tools.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-glob/CHANGELOG.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Checking if Message is Replyable (TypeScript)\nDESCRIPTION: Checks if a 'messageEntity' exists and is replyable (potential custom method 'isReplyable') within the useMessageHandling hook.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_60\n\nLANGUAGE: typescript\nCODE:\n```\nif (messageEntity?.isReplyable() && messageEntity\n```\n\n----------------------------------------\n\nTITLE: TypeScript Error Handling Utilities\nDESCRIPTION: Provides custom error classes and functions for error handling within cspell utility modules.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_52\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-lib/src/lib/util/errors.ts\n```\n\n----------------------------------------\n\nTITLE: Checking Multiple File Extensions with cspell\nDESCRIPTION: This command checks .txt, .js, and .md files in the current directory and its subdirectories for spelling errors.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell/static/help-lint.txt#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncspell \"**/*.{txt,js,md}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Flagged Words with Suggestions - JSON\nDESCRIPTION: Demonstrates the syntax for defining words that should be flagged as incorrect, including how to specify single or multiple suggested replacements. Useful for correcting common typos or enforcing preferred spellings.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/Configuration/auto_properties.md#_snippet_10\n\nLANGUAGE: JSON\nCODE:\n```\n\"flagWords\": [\n  \"color: colour\",\n  \"incase: in case, encase\",\n  \"canot->cannot\",\n  \"cancelled->canceled\"\n]\n```\n\n----------------------------------------\n\nTITLE: TypeScript Frequency Counter Utility\nDESCRIPTION: Implements a frequency counter for counting occurrences of items, with associated tests to verify accuracy and performance.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_56\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-lib/src/lib/util/FreqCounter.ts\n```\n\n----------------------------------------\n\nTITLE: Test functions for Caddyfile directives in Go\nDESCRIPTION: Test functions simulate Caddyfile input via test dispensers to verify correct parsing and application of configuration directives such as 'disable_openmetrics'. They assess error handling and proper directive recognition within the configuration.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_94\n\nLANGUAGE: Go\nCODE:\n```\nd := caddyfile.NewTestDispenser(`metrics { disable_openmetrics }`)\nerr := m.UnmarshalCaddyfile(d)\n```\n\n----------------------------------------\n\nTITLE: Fixing cspell-tools to exclude words\nDESCRIPTION: This commit in the cspell-tools package introduces the ability to exclude words. This functionality allows users to specify words that should be omitted from spellchecking or other processing within the tool.  No dependencies are explicitly mentioned, but this likely builds upon the existing cspell-tools package.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/CHANGELOG.md#_snippet_0\n\nLANGUAGE: git\nCODE:\n```\ncspell-tools - support excluding words ([#5140](https://github.com/streetsidesoftware/cspell/issues/5140)) ([3fcdd89](https://github.com/streetsidesoftware/cspell/commit/3fcdd89fb319b659d218067c5366e02d036be59f))\n```\n\n----------------------------------------\n\nTITLE: Support globs with gzip command\nDESCRIPTION: This bug fix enables the `gzip` command to support globs. This means that gzip operations can be performed on multiple files at once. The implementation probably involves modifications to the command-line argument parsing or file processing logic. This directly relates to command-line utilities.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/CHANGELOG.md#_snippet_10\n\nLANGUAGE: git\nCODE:\n```\nsupport globs with `gzip` command. ([#4625](https://github.com/streetsidesoftware/cspell/issues/4625)) ([17fbc11](https://github.com/streetsidesoftware/cspell/commit/17fbc119d199ceac309df0d22fb4b1f9734b7015))\n```\n\n----------------------------------------\n\nTITLE: Calculating Vegetation and Spectral Indices Using Python\nDESCRIPTION: This snippet shows implementations of multiple vegetation and spectral indices such as GOSAVI, GSAVI, IPVI, MRVI, MSAVI, NGRDI, NDRE, and CDVI in Python. These indices are computed based on different spectral bands typically obtained from multispectral satellite or aerial image data. The snippet assumes access to spectral band data (e.g., red, green, blue, red-edge) and performs algebraic operations to compute indices used to assess vegetation vigor, chlorophyll content, and other factors. The functions help facilitate advanced remote sensing analyses with multispectral imagery.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\n\"GOSAVI\": self.gosavi,\n\"GSAVI\": self.gsavi,\n\"IPVI\": self.ipvi,\n\"MRVI\": self.mrvi,\n\"MSAVI\": self.m_savi,\n\"NGRDI\": self.ngrdi,\n\"NDRE\": self.ndre,\n\"CDVI\": self.cdvi\n\n# Example comment lines indicating the corresponding index names and their band uses:\n# 'ARVI2' -- red band based\n# 'CCCI' -- red band based\n# 'NDVI' -- red band based\n# 'BNDVI' -- blue band based\n# 'GNDVI' -- green band based\n# 'GBNDVI' -- green band based\n# 'GRNDVI' -- red band based\n# 'RBNDVI' -- red band based\n# 'PNDVI' -- red band based\n# 'BWDRVI' -- blue band based\n# 'CTVI' -- red band based\n# 'GDVI' -- green band based\n# 'GEMI' -- red band based\n# 'GOSAVI' -- green band based\n# 'GSAVI' -- green band based\n# 'IPVI' -- red band based\n# 'MRVI' -- red band based\n# 'MSAVI' -- red band based\n# 'NGRDI' -- red band based\n# 'NDRE' -- redEdge band based\n\n# The indices are usually functions or properties under a class and directly accessed as self.<index_name>.\n```\n\n----------------------------------------\n\nTITLE: Gzip Compression Handler Implementation in Go\nDESCRIPTION: This code implements the 'Gzip' struct's 'UnmarshalCaddyfile' method for configuring gzip compression via Caddyfile tokens, utilizing the 'caddyfile' package. It includes setup for handler registration and error management, and references the 'caddygzip' package for gzip-specific functionality. The code supports flexible response compression setup based on user configuration.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_44\n\nLANGUAGE: Go\nCODE:\n```\n// func (g *Gzip) UnmarshalCaddyfile(d *caddyfile.Dispenser) error {\n// Implementation code here\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Chaos Machine Python Script\nDESCRIPTION: Implements a chaotic pseudorandom number generator based on George Marsaglia's Xorshift algorithm. Dependencies include standard Python features; inputs are seed values, and outputs are generated random sequences. Used for simulation and cryptographic applications.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\nhashes/chaos_machine.py:45:32     - Unknown word (Marsaglia)  -- (Xorshift by George Marsaglia)\n```\n\n----------------------------------------\n\nTITLE: Creating and managing UDP sockets in Node.js dgram module\nDESCRIPTION: This snippet covers functions for establishing, disconnecting, and interacting with UDP sockets using the 'dgram' module. It includes methods such as connect(), createSocket(), disconnect(), and remoteAddress(). These are used to handle UDP communication by creating socket instances, connecting to remote addresses, and querying socket status.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/node.txt#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\ndgram.connect()\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ndgram.createSocket()\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ndgram.disconnect()\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ndgram.remoteAddress()\n```\n\n----------------------------------------\n\nTITLE: TypeScript Utility Types\nDESCRIPTION: Defines generic types used throughout cspell for ensuring type safety and consistency.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_74\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-lib/src/lib/util/types.ts\n```\n\n----------------------------------------\n\nTITLE: Installing CSpell Globally with npm (sh)\nDESCRIPTION: This command uses npm to install the `cspell` package globally on the system. The `-g` flag makes the `cspell` command available from any directory. `@latest` ensures the installation of the most recent published version. Requires Node.js and npm installed.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/installation.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g cspell@latest\n```\n\n----------------------------------------\n\nTITLE: yylex Macro Definition (C)\nDESCRIPTION: This snippet defines a macro `yylex` to be `__gettextlex`. This renames the standard `yylex` function, possibly to avoid naming conflicts or to integrate it with a gettext internationalization library.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\n#define yylex __gettextlex\n```\n\n----------------------------------------\n\nTITLE: Git pre-commit hook setup with CSpell\nDESCRIPTION: This script is designed to be used as a Git pre-commit hook. It identifies staged files using `git diff --cached --name-only` and pipes them to CSpell for spell checking. CSpell is configured to operate without summary, progress updates, or file existence validation. The script depends on CSpell being installed and accessible via `npx`.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/git.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n#!/bin/sh\n\nexec git diff --cached --name-only | npx cspell --no-summary --no-progress --no-must-find-files --file-list stdin\n```\n\n----------------------------------------\n\nTITLE: Defining CSpell Configuration Overrides in JSON\nDESCRIPTION: This JSON snippet demonstrates the structure of the `overrides` array within a CSpell configuration file. It shows how to define rules based on filename patterns (using globs) to apply specific configurations, such as setting the `languageId` for certain extensions or specifying a `language` dictionary for files in particular directories. Note that language dictionaries mentioned might need separate installation.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/Configuration/overrides.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"overrides\": [\n    // Force `*.hrr` and `*.crr` files to be treated as `cpp` files:\n    {\n        \"filename\": \"**/{*.hrr,*.crr}\",\n        \"languageId\": \"cpp\"\n    },\n    // Force `*.txt` to use the Dutch dictionary (Dutch dictionary needs to be installed separately):\n    {\n        \"language\": \"nl\",\n        \"filename\": \"**/dutch/**/*.txt\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Event Handler Function on copy click (JavaScript)\nDESCRIPTION: Defines 'oncopyonclick' function to handle copy events, likely to copy content to clipboard or trigger UI updates. Used within the MDX assets to facilitate user interactions.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/mdx-js/mdx/snapshot.txt#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction oncopyonclick() { ... }\n```\n\n----------------------------------------\n\nTITLE: TypeScript Iterable Iterator Library\nDESCRIPTION: Provides utilities for working with iterable and iterator patterns, including conversion functions and iterator manipulation.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_57\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-lib/src/lib/util/iterableIteratorLib.ts\n```\n\n----------------------------------------\n\nTITLE: Ignoring Forbidden Words via cspell Directive - JavaScript Comment\nDESCRIPTION: Explains how to override forbidden word settings using a cspell comment directive within source code, specifically shown in a JavaScript comment block. The 'cspell:ignore' directive allows specific words to be ignored locally in the code where the comment appears.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/CHANGELOG.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * Do not mark `forbiddenWord` as incorrect.\n * cspell:ignore forbiddenWord\n */\n```\n\n----------------------------------------\n\nTITLE: Using cspell lint on Files\nDESCRIPTION: This command is equivalent to `cspell .` and recursively checks all files in the current directory for spelling errors.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell/static/help-lint.txt#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncspell lint .\n```\n\n----------------------------------------\n\nTITLE: Installing @cspell/normalize-json via npm\nDESCRIPTION: Command to install the @cspell/normalize-json package and save it as a project dependency using the Node Package Manager (npm).\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-normalize-json/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -S @cspell/normalize-json\n```\n\n----------------------------------------\n\nTITLE: Checking stdin as a Specific File Type with cspell\nDESCRIPTION: This command checks content from standard input as if it was a Markdown file located at ./docs/doc.md.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell/static/help-lint.txt#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncspell stdin://docs/doc.md\n```\n\n----------------------------------------\n\nTITLE: Install CSpell CLI from GitHub via npm\nDESCRIPTION: This command uses npm to globally install the cspell-cli package directly from its GitHub repository. It provides an alias to the main cspell command for users who prefer installing this way.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install -g git+https://github.com/streetsidesoftware/cspell-cli\n```\n\n----------------------------------------\n\nTITLE: Node.js UDP Datagram Socket API: Creation, Binding, Sending, and Configuring\nDESCRIPTION: This snippet documents the usage of Node.js's 'dgram' module for creating and managing UDP sockets, including functions to create sockets, bind to ports, send messages, and set socket options like multicast and TTL. It also lists relevant constants and error types, illustrating the full socket management lifecycle.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/node.txt#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ndgram.createSocket(type[, callback])\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nsocket.bind([port][, address][, callback])\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nsocket.send(msg[, offset, length][, port][, address][, callback])\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nsocket.setBroadcast(flag)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nsocket.setMulticastInterface(multicastInterface)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nsocket.setMulticastLoopback(flag)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nsocket.setMulticastTTL(ttl)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nsocket.setTTL(ttl)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nsocket.unref()\n```\n\n----------------------------------------\n\nTITLE: Defining Command Flags using Cobra/Pflag in Go\nDESCRIPTION: Defines command-line flags using methods like `StringP` from the Cobra or Pflag libraries. Snippets show defining `pidfile`, `pingback`, and `adapter` flags with their names, shortcodes, default values, and usage descriptions.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_32\n\nLANGUAGE: Go\nCODE:\n```\ncmd.Flags().StringP(\"pidfile\", \"\", \"\", \"Path of file\")\n```\n\nLANGUAGE: Go\nCODE:\n```\ncmd.Flags().StringP(\"pingback\", \"\", \"\", \"Echo confirmation\")\n```\n\nLANGUAGE: Go\nCODE:\n```\nStringP(\"adapter\", \"a\", \"caddyfile\", \"Name of config adapter\")\n```\n\nLANGUAGE: Go\nCODE:\n```\n*pflag.FlagSet\n```\n\n----------------------------------------\n\nTITLE: Using Node.js File System Methods\nDESCRIPTION: Various file system operations including file handling, directory operations, and stream manipulation in Node.js.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/node.txt#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nstats.size\nstats.uid\nstdout\nstring\ntarget\nthrowIfNoEntry\ntoString\ntrue\ntry…catch\ntype\ntypeof position !==  number\nuid\nundefined\nutf8\nutil.promisify()\nw\nw+\nwatcher.close()\nwatcher.ref()\nwatcher.unref()\nwithFileTypes\nwrite\nwrite()\nwriteStream.bytesWritten\nwriteStream.path\nwriteStream.pending\nwritev\nwritev()\nwritten\nwx\nwx+\nx\n```\n\n----------------------------------------\n\nTITLE: CSpell Configuration (cspell.json)\nDESCRIPTION: This is the cspell.json configuration file that triggers the bug. It contains a list of \"words\" which includes a mix of words from different languages.  The configuration also specifies an \"ignorePaths\" to exclude certain directories from spell checking.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/issues/issue-5222/README.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"ignorePaths\": [\n\t\t\".history\", // VS Code \"Local History\" extension\n\t\t\"node_modules\"\n\t],\n\t\"words\": [\n\t\t\"Æвзаг\",\n\t\t\"ajeļ\",\n\t\t\"allowfullscreen\",\n\t\t\"apng\",\n\t\t\"APNGs\",\n\t\t\"appinstalled\",\n\t\t\"Aragonés\",\n\t\t\"Asụsụ\",\n\t\t\"Avañe'ẽ\",\n\t\t\"Azərbaycan\",\n\t\t\"bepis\",\n\t\t\"bgcolor\",\n\t\t\"Bokmål\",\n\t\t\"Český\",\n\t\t\"Čeština\",\n\t\t\"classid\",\n\t\t\"cmaps\",\n\t\t\"ctype\",\n\t\t\"Cueŋƅ\",\n\t\t\"d'Òc\",\n\t\t\"desaturated\",\n\t\t\"DIALOGEX\",\n\t\t\"Divehi\",\n\t\t\"draggable\",\n\t\t\"ellipticals\",\n\t\t\"endonym\",\n\t\t\"eqeqeq\",\n\t\t\"equivalize\",\n\t\t\"ertical\",\n\t\t\"esque\",\n\t\t\"Eʋegbe\",\n\t\t\"eyedrop\",\n\t\t\"focusring\",\n\t\t\"Føroyskt\",\n\t\t\"fudgedness\",\n\t\t\"fullscreen\",\n\t\t\"Gàidhlig\",\n\t\t\"gazemouse\",\n\t\t\"GIFs\",\n\t\t\"Gikuyu\",\n\t\t\"grayscale\",\n\t\t\"headmouse\",\n\t\t\"hilight\",\n\t\t\"Hrvatski\",\n\t\t\"icns\",\n\t\t\"IFDs\",\n\t\t\"Íslenska\",\n\t\t\"Język\",\n\t\t\"jnordberg\",\n\t\t\"jspaint\",\n\t\t\"Kreyòl\",\n\t\t\"Kurdî\",\n\t\t\"Latviešu\",\n\t\t\"Lëtzebuergesch\",\n\t\t\"libtess\",\n\t\t\"Lietuvių\",\n\t\t\"Lingála\",\n\t\t\"llpaper\",\n\t\t\"localdomain\",\n\t\t\"localforage\",\n\t\t\"localizable\",\n\t\t\"lookpath\",\n\t\t\"lors\",\n\t\t\"ltres\",\n\t\t\"Macromedia\",\n\t\t\"nomine\",\n\t\t\"nostri\",\n\t\t\"nowrap\",\n\t\t\"occluder\",\n\t\t\"octree\",\n\t\t\"Oʻzbek\",\n\t\t\"oleobject\",\n\t\t\"orizontal\",\n\t\t\"ovaloids\",\n\t\t\"oviforms\",\n\t\t\"pako\",\n\t\t\"palettized\",\n\t\t\"paypal\",\n\t\t\"pointermove\",\n\t\t\"pointerup\",\n\t\t\"Português\",\n\t\t\"proxied\",\n\t\t\"pseudorandomly\",\n\t\t\"psppalette\",\n\t\t\"rbaycan\",\n\t\t\"redoable\",\n\t\t\"reenable\",\n\t\t\"repurposable\",\n\t\t\"rerender\",\n\t\t\"retargeted\",\n\t\t\"Română\",\n\t\t\"rotologo\",\n\t\t\"roundrects\",\n\t\t\"royskt\",\n\t\t\"rrect\",\n\t\t\"sandboxed\",\n\t\t\"scrollable\",\n\t\t\"scrollbars\",\n\t\t\"sketchpalette\",\n\t\t\"slenska\",\n\t\t\"Slovenčina\",\n\t\t\"Slovenščina\",\n\t\t\"Slovenský\",\n\t\t\"sorthweast\",\n\t\t\"soundcloud\",\n\t\t\"subrepo\",\n\t\t\"tbody\",\n\t\t\"themeable\",\n\t\t\"themepack\",\n\t\t\"Tiếng\",\n\t\t\"tileable\",\n\t\t\"timespan\",\n\t\t\"tina\",\n\t\t\"titlebar\",\n\t\t\"Toçikī\",\n\t\t\"togglable\",\n\t\t\"Tshivenḓa\",\n\t\t\"ufeff\",\n\t\t\"undock\",\n\t\t\"unfocusing\",\n\t\t\"uniquify\",\n\t\t\"unmaximize\",\n\t\t\"upiatun\",\n\t\t\"ustom\",\n\t\t\"UTIF\",\n\t\t\"vaporwave\",\n\t\t\"verts\",\n\t\t\"Việt\",\n\t\t\"viewports\",\n\t\t\"Volapük\",\n\t\t\"webglcontextlost\",\n\t\t\"webglcontextrestored\",\n\t\t\"Wikang\",\n\t\t\"ＷＩＮＴＲＡＰ\",\n\t\t\"Yângâ\",\n\t\t\"Zhōngwén\",\n\t\t\"zoomable\",\n\t\t\"zoomer\",\n\t\t\"zyk\",\n\t\t\"Ελληνικά\",\n\t\t\"Аҧсшәа\",\n\t\t\"Башҡорт\",\n\t\t\"Беларуская\",\n\t\t\"Език\",\n\t\t\"Ирон\",\n\t\t\"Језик\",\n\t\t\"Коми\",\n\t\t\"Қазақ\",\n\t\t\"Македонски\",\n\t\t\"Нохчийн\",\n\t\t\"Русский\",\n\t\t\"Словѣньскъ\",\n\t\t\"Српски\",\n\t\t\"Тоҷикӣ\",\n\t\t\"Түркмен\",\n\t\t\"Ўзбек\",\n\t\t\"Українська\",\n\t\t\"Чӑваш\",\n\t\t\"Чӗлхи\",\n\t\t\"Ѩзыкъ\",\n\t\t\"Ӏарул\",\n\t\t\"ქართული\",\n\t\t\"Հայերեն\",\n\t\t\"עברית\",\n\t\t\"أۇزبېك\",\n\t\t\"ئۇيغۇرچە\",\n\t\t\"اردو\",\n\t\t\"العربية\",\n\t\t\"بهاس\",\n\t\t\"پنجابی\",\n\t\t\"تاجیکی\",\n\t\t\"سندھی\",\n\t\t\"سنڌي\",\n\t\t\"فارسی\",\n\t\t\"كشميري\",\n\t\t\"ትግርኛ\",\n\t\t\"አማርኛ\",\n\t\t\"ພາສາລາວ\",\n\t\t\"ꦧꦱꦗꦮ\",\n\t\t\"ᐃᓄᒃᑎᑐᑦ\",\n\t\t\"ᐊᓂᔑᓈᐯᒧᐎᓐ\",\n\t\t\"ᓀᐦᐃᔭᐍᐏᐣ\"\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Dictionaries in CSpell Configuration (JavaScript/JSON)\nDESCRIPTION: Demonstrates how to define custom dictionaries using the `dictionaryDefinitions` array in a `cspell.json` configuration file. Each object in the array represents a dictionary, specifying its `name` (for reference) and `path` (location of the word list file). Relative paths are resolved based on the location of the `cspell.json` file.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/dictionaries/index.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Define each dictionary.  Relative paths are relative to the config file.\n\"dictionaryDefinitions\": [\n    { \"name\": \"spanish\", \"path\": \"./spanish-words.txt\"},\n    { \"name\": \"ruby\", \"path\": \"./ruby.txt\"},\n    { \"name\": \"company-terms\", \"path\": \"./corp-terms.txt\"}\n],\n```\n\n----------------------------------------\n\nTITLE: Defining Known Spelling Issues in Text Format for cspell\nDESCRIPTION: This snippet demonstrates the format of a known issues file in plain text used by cspell to specify files, line numbers, character positions, and words to ignore for spelling checks. It supports comments starting with # and uses the format '<path>:<line>:<char> (<word>)' to indicate the exact location of known spelling errors. This format allows cspell to skip these words during spell checking and is useful for legacy issues stored externally from the configuration.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/rfc/rfc-0004 known issues/README.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndjango/conf/global_settings.py:108:26 (Luxembourgish)\ndjango/conf/locale/fr/*.py:*:* (octobre)\ntests/aggregation_regress/tests.py:728:11 (realiased)\ntests/aggregation_regress/tests.py:812:8 (referer)\ntests/aggregation_regress/tests.py:915:102 (grep)\n```\n\n----------------------------------------\n\nTITLE: Upgrading Java Dictionary\nDESCRIPTION: This snippet describes upgrading the Java dictionary used by cspell. This change aims to improve the accuracy and coverage of spell-checking for Java-related content. It addresses issue #2992.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-tools/CHANGELOG.md#_snippet_12\n\nLANGUAGE: TEXT\nCODE:\n```\n* Upgrade Java Dictionary ([#2992](https://github.com/streetsidesoftware/cspell/issues/2992)) ([e3059aa](https://github.com/streetsidesoftware/cspell/commit/e3059aaf440bd41b1613c4516397cd7a6411c9dd))\n```\n\n----------------------------------------\n\nTITLE: Posix signal handling with Caddy modules in Go\nDESCRIPTION: This snippet demonstrates signal handling using channels and syscalls in Go, integrated within Caddy's notifications or cleanup routines, crucial for graceful shutdowns and process management.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_96\n\nLANGUAGE: Go\nCODE:\n```\nsigchan := make(chan os.Signal)\nsignal.Notify(sigchan, syscall.SIGTERM, syscall.SIGINT)\nfor sig := range sigchan {\n\t// Handle signals according to Caddy's shutdown procedures\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Recma Babel Plugin for MDX\nDESCRIPTION: Configuration for MDX showing the use of recma plugins, specifically recmaBabel. This enables advanced JavaScript transformations in MDX processing.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/mdx-js/mdx/snapshot.txt#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n{recmaPlugins: [recmaBabel] /* jsxImportSource */}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Index Files for Config Loader and Settings\nDESCRIPTION: Exports the components of the configuration loader modules, structuring the public API of the settings management system.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* index.ts exports for config loader modules */\n```\n\n----------------------------------------\n\nTITLE: TypeScript TextMap Utility\nDESCRIPTION: Implements a map structure optimized for textual data management, facilitating fast lookups.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_71\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-lib/src/lib/util/TextMap.ts\n```\n\n----------------------------------------\n\nTITLE: Workflow Bot -- Update Dictionaries\nDESCRIPTION: This bug fix updates dictionaries using a workflow bot.  This updates internal spellchecking dictionaries with new words or corrections, improving the accuracy of the tool. The specific dependency is internal cspell dictionaries.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/CHANGELOG.md#_snippet_5\n\nLANGUAGE: git\nCODE:\n```\nWorkflow Bot -- Update Dictionaries (main) ([#4733](https://github.com/streetsidesoftware/cspell/issues/4733)) ([221b59b](https://github.com/streetsidesoftware/cspell/commit/221b59bfe726a3b1fe5f9dcbdef6632983ebebeb))\n```\n\n----------------------------------------\n\nTITLE: Installing CSpell Tools via npm\nDESCRIPTION: This snippet demonstrates how to install the CSpell Tools package globally using npm.  The `-g` flag specifies a global installation, making the tool accessible from the command line.  Dependencies: Node.js and npm must be installed. Output: CSpell Tools is installed globally.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-tools-alias/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g cspell-tools\n```\n\n----------------------------------------\n\nTITLE: Defining Messaging and Key Code Constants in C\nDESCRIPTION: This snippet from the mbk_offline.news.h and mbk_remsys.h headers defines symbolic constants for messaging and key codes used within the mbk project. These constants are represented as integer values and serve as identifiers for various message types, keys, or statuses involved in offline messaging or remote system processing. Dependencies include inclusion of these header files in C programs that implement messaging or remote system modules.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_21\n\nLANGUAGE: C\nCODE:\n```\n#define ONDMT 8\n#define ONDNAX 9\n#define ONDOK 10\n#define ONKEY 1\n#define KEYCHU 3\n#define KYDNAM 4\n#define KYDCOM 5\n#define KYDADR 6\n#define KYDPHO 7\n#define KYDAGE 8\n#define KYDSEX 9\n#define KYDPSS 10\n#define DFWARN 12\n#define DFCRIT 13\n#define PGSTMO 14\n#define NARSOP 15\n#define EXITRS 16\n```\n\n----------------------------------------\n\nTITLE: Calculating Differences with difflib in Go\nDESCRIPTION: Uses the `difflib` package (imported from `github.com/aryann/difflib`) to compute differences between two sequences (e.g., strings or byte slices). The code shows initiating the diff calculation and handling different diff record types (`Common`, `LeftOnly`, `RightOnly`).\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_30\n\nLANGUAGE: Go\nCODE:\n```\ndiff := difflib.Diff(\n```\n\nLANGUAGE: Go\nCODE:\n```\ncase difflib.Common:\n```\n\nLANGUAGE: Go\nCODE:\n```\ncase difflib.LeftOnly:\n```\n\nLANGUAGE: Go\nCODE:\n```\ncase difflib.RightOnly:\n```\n\n----------------------------------------\n\nTITLE: TypeScript Performance Tests and Timer Utility\nDESCRIPTION: Includes test cases and a timer utility for benchmarking code segments within the library, ensuring performance metrics are maintained.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* Performance test code and timer implementation */\n```\n\n----------------------------------------\n\nTITLE: Update cosmiconfig to fix config loading issue\nDESCRIPTION: This bug fix updates `cosmiconfig` to address a configuration loading issue. It resolves the problem to enable configurations to be loaded properly.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-strong-weak-map/test-cspell-strong-weak-map/CHANGELOG.md#_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nUpdate cosmiconfig to fix config loading issue. ([#4330](https://github.com/streetsidesoftware/cspell/issues/4330)) ([4a0bae5](https://github.com/streetsidesoftware/cspell/commit/4a0bae53074de54b748ce6b7124f585e28d2175e))\n```\n\n----------------------------------------\n\nTITLE: Sample Known Issues File Content in Plain Text\nDESCRIPTION: An example known issues text file including a directive to disable spell checking followed by multiple known spelling error entries following the prescribed format. This sample file can be referenced in configuration to inform cspell of legacy issues to ignore during spell checking.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/rfc/rfc-0004 known issues/README.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n# cspell:disable\ndjango/conf/global_settings.py:108:26 (Luxembourgish)\ndjango/conf/locale/fr/*.py:*:* (octobre)\ntests/aggregation_regress/tests.py:728:11 (realiased)\ntests/aggregation_regress/tests.py:812:8 (referer)\ntests/aggregation_regress/tests.py:915:102 (grep)\n```\n\n----------------------------------------\n\nTITLE: Using the --files option with cspell\nDESCRIPTION: This command checks the \"/*.md\" files in $FILES, where $FILES is a shell variable containing the file list.  The --no-must-find-files option prevents errors if no files are found.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell/static/help-lint.txt#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncspell \"/*.md\" --no-must-find-files --files $FILES\n```\n\n----------------------------------------\n\nTITLE: Defining Flagged Words with Suggestions in CSpell (TypeScript/JSON)\nDESCRIPTION: TypeScript/JSON example demonstrating how to use the `flagWords` setting in a CSpell configuration file (like cspell.json or cspell.config.ts). It lists words that should always be flagged as incorrect, optionally providing suggestions using ':' or '->' separators for common corrections.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/Configuration/auto_properties.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n\"flagWords\": [\n  \"color: colour\",\n  \"incase: in case, encase\",\n  \"canot->cannot\",\n  \"cancelled->canceled\"\n]\n```\n\n----------------------------------------\n\nTITLE: Analyzing Multi-Heuristic A* Algorithm in Python\nDESCRIPTION: Provides insight into the implementation of a multi-heuristic A* search algorithm, focusing on heuristic evaluation and node expansion. Dependencies include typical Python libraries for graph traversal and heuristic calculations. Inputs include graph data structures; outputs are paths or search results. It helps in pathfinding and AI planning contexts.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\ngraphs/multi_heuristic_astar.py:47:17     - Unknown word (prito)      -- for prito, yyy in temp:\n```\n\n----------------------------------------\n\nTITLE: Defining Message and System Code Constants using #define in C\nDESCRIPTION: This snippet demonstrates the use of the C preprocessor's #define directive to assign meaningful constant names to integer values representing system message or status codes. These macros, such as #define RSXFERRSEL 236, standardize the use of magic numbers across the codebase, improving code readability and reducing the likelihood of errors. No additional libraries are required beyond standard C preprocessing; input consists only of the symbolic macro definition, and output is the association of this name with the specified value that will be substituted during preprocessing.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_24\n\nLANGUAGE: C\nCODE:\n```\n#define RSXFERRSEL 236\n#define RSXFERWHD 237\n#define RSXFERERR 238\n#define RSXFERWHU 239\n#define RSXFERER2 240\n#define RSEDITWHF 242\n#define RSHDR 17\n#define RSEDITERR 243\n#define RSAUDIT1 244\n#define RSAUDITR 245\n#define RSAUDITI 247\n#define RSAUDITC 248\n#define RSAUDITE 249\n#define RSCLEANUP1 251\n#define RSCLEANUPR 252\n#define RSCOM01 18\n#define RSLOGONH 255\n#define RSLOGONP 256\n#define RSLOGONL1 257\n#define RSLOGOND 261\n#define RSLOGONDR 262\n#define RSLOGONDD 263\n#define RSCLSSTR 264\n#define RSCLSST1 265\n#define RSMODSTR 268\n#define RSMODST1 269\n#define RSSYSTATS 272\n#define RSLINST1 273\n#define RSLINSTW 274\n#define RSGENST1 281\n#define RSGENSTR 284\n#define RSTOPSM 286\n#define RSTOPSS 287\n#define RSTOPSTA 288\n#define RSTOPSTB 289\n#define RSTOPSTC 290\n#define RSTOPSTD 291\n#define RSTOPSTE 292\n#define RSTOPSTF 293\n#define RSTOPSTG 294\n#define RSTOPSTH 295\n#define RSTOPSTI 296\n#define RSTOPSTJ 297\n#define RSTOPSTK 298\n#define RSTOPSTL 299\n#define RSTOPSTM 300\n#define RSTOPSTN 301\n#define RSTOPSTO 302\n#define RSTOPSTP 303\n#define RSTOPS1 304\n#define RSGDET 307\n#define RSSYSOPWHO 308\n#define RSSYSOPNSY 309\n#define RSSYSOPHDR 310\n#define RSSYSOPMNU 311\n#define RSSYSOPON 312\n#define RSSYSOPOFF 313\n#define RSSYSOPSOP 314\n#define RSSYSOPUPD 315\n#define RSSYSOPDEL 316\n#define RSSYSOPNOT 317\n#define GCHANBCH 321\n#define GCHANBDV 322\n#define GCHANBID 323\n#define GCHANHUH 324\n#define CHNLSTHDR 325\n#define CHNLSTTBQ 326\n#define CHNLSTTBI 327\n#define CHNLSTTBR 328\n#define CHNLSTTBA 329\n#define CHNLSTTBM 330\n#define CHNLSTTBL 331\n#define CHNLSTTBG 332\n#define CHNLSTTBU 333\n#define CHNLSTPGS 334\n#define CHNLSTTBO 336\n#define CHNLSTTBF 337\n#define CHNLSTTBE 338\n#define CHNLSTFTR 339\n#define RSAPGVT 340\n#define SEVO 341\n#define SEVE 342\n#define SEVC 343\n#define SEVI 344\n#define RSAPGLT 345\n#define RSAPGH0 346\n#define RSAPGCAN 354\n#define RSAPGOK 355\n#define RSFLTVT 356\n#define RSFLTLT 357\n#define RSFLT1 358\n#define RSFLTH5 362\n#define AUDSRCH 370\n#define AUDSEND 371\n#define AUDNF 372\n#define AUDSCAN 373\n#define OPTSEP 59\n#define OPTON 60\n#define RSSMNU 62\n#define MORCHR 64\n#define UNKUID 66\n#define MSCACC 71\n#define FEMACC 72\n#define RSCHANGEWHT 74\n#define RSCHANGEERR 75\n#define RSCHANGELMN 76\n#define RSCHANGESMN 77\n#define RSCHANGEBAD 78\n#define RSCHANGEOK 79\n#define RSEMUWHO 80\n#define RSEMUSLF 81\n#define RSEMUHAHA 82\n#define UNIXSH 1\n#define RSEMUNUS 83\n#define RSEMUGO 84\n#define RSEMUEND 85\n\n```\n\n----------------------------------------\n\nTITLE: Installing and Linking Cspell Software Terms Dictionary Globally (Shell)\nDESCRIPTION: Installs the `@cspell/dict-software-terms` package globally using npm and links it to the global Cspell configuration. This makes the dictionary available system-wide for Cspell.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/dictionaries/software-terms/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g @cspell/dict-software-terms\ncspell link add @cspell/dict-software-terms\n```\n\n----------------------------------------\n\nTITLE: Fixing .gitignore comment detection\nDESCRIPTION: This snippet corrects the detection of comments within `.gitignore` files. The fix ensures that CSpell correctly interprets and ignores commented-out lines in `.gitignore` files, preventing false positives during spell checking. It addresses issue #4083.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-tools/CHANGELOG.md#_snippet_1\n\nLANGUAGE: TEXT\nCODE:\n```\n* Correct .gitignore comment detection ([#4083](https://github.com/streetsidesoftware/cspell/issues/4083)) ([cadfbc4](https://github.com/streetsidesoftware/cspell/commit/cadfbc489f17db348459a09e7bd49514d07152a2))\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAL Filter Management Types (EFX Extension, C)\nDESCRIPTION: Defines C function pointer types for managing OpenAL filters as part of the EFX extension. This includes generating (`LPALGENFILTERS`), deleting (`LPALDELETEFILTERS`), and validating (`LPALISFILTER`) filters, as well as setting (`LPALFILTERI`, `LPALFILTERIV`, `LPALFILTERF`, `LPALFILTERFV`) and getting (`LPALGETFILTERI`, `LPALGETFILTERIV`, `LPALGETFILTERF`, `LPALGETFILTERFV`) filter parameters of integer and float types (scalar and vector).\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/AdaDoom3/AdaDoom3/snapshot.txt#_snippet_9\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY *LPALGENFILTERS)(ALsizei n, ALuint* filters);\n```\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY *LPALDELETEFILTERS)(ALsizei n, const ALuint *filters);\n```\n\nLANGUAGE: c\nCODE:\n```\ntypedef ALboolean (AL_APIENTRY *LPALISFILTER)(ALuint filterid);\n```\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY *LPALFILTERI)(ALuint filter, ALenum param, ALint value);\n```\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY *LPALFILTERIV)(ALuint filter, ALenum param, const ALint *values);\n```\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY *LPALFILTERF)(ALuint filter, ALenum param, ALfloat value);\n```\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY *LPALFILTERFV)(ALuint filter, ALenum param, const ALfloat *values);\n```\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY *LPALGETFILTERI)(ALuint filter, ALenum param, ALint *value);\n```\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY *LPALGETFILTERIV)(ALuint filter, ALenum param, ALint *values);\n```\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY *LPALGETFILTERF)(ALuint filter, ALenum param, ALfloat *value);\n```\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY *LPALGETFILTERFV)(ALuint filter, ALenum param, ALfloat *values);\n```\n\n----------------------------------------\n\nTITLE: Excluding files with cspell\nDESCRIPTION: This command excludes CHANGELOG.md when checking all .md files and uses the --files option to check 'README.md' and 'CHANGELOG.md'.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell/static/help-lint.txt#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncspell \"*.md\" --exclude CHANGELOG.md --files README.md CHANGELOG.md\n```\n\n----------------------------------------\n\nTITLE: Running ESLint with Yarn\nDESCRIPTION: This snippet shows the command to run the ESLint linter using Yarn. It assumes that ESLint and the necessary plugins are configured in the project.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/yarn/yarn2/test-eslint-plugin/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn lint\n```\n\n----------------------------------------\n\nTITLE: AssetMapper.test.ts: Testing User Asset Types\nDESCRIPTION: This test file imports support for user asset types from '@wireapp/api-client', ensuring the correct categorization and handling of user assets within the application. It is used for unit testing the mapping and management of user assets.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {UserAssetType} from '@wireapp/api-client/lib/user';\n```\n\n----------------------------------------\n\nTITLE: Using ZipArchive Methods\nDESCRIPTION: This snippet demonstrates ZipArchive methods for archive manipulation. These methods are used for creating, modifying, and reading zip archives. The ZipArchive class is part of the zip extension in PHP.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/php.txt#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\nZipArchive::addEmptyDir\nZipArchive::addFile\nZipArchive::addFromString\nZipArchive::addGlob\nZipArchive::addPattern\nZipArchive::close\nZipArchive::deleteIndex\nZipArchive::deleteName\nZipArchive::extractTo\nZipArchive::getArchiveComment\nZipArchive::getCommentIndex\nZipArchive::getCommentName\nZipArchive::getExternalAttributesIndex\nZipArchive::getExternalAttributesName\nZipArchive::getFromIndex\nZipArchive::getFromName\nZipArchive::getNameIndex\nZipArchive::getStatusString\nZipArchive::getStream\nZipArchive::locateName\nZipArchive::open\nZipArchive::renameIndex\nZipArchive::renameName\nZipArchive::setArchiveComment\nZipArchive::setCommentIndex\nZipArchive::setCommentName\nZipArchive::setCompressionIndex\nZipArchive::setCompressionName\nZipArchive::setExternalAttributesIndex\nZipArchive::setExternalAttributesName\nZipArchive::setPassword\nZipArchive::statIndex\nZipArchive::statName\nZipArchive::unchangeAll\nZipArchive::unchangeArchive\nZipArchive::unchangeIndex\nZipArchive::unchangeName\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Do not generate duplicate entries by default\nDESCRIPTION: This entry describes a bug fix to prevent the generation of duplicate entries by default. It implies a change in how the spell checker handles duplicate words or phrases, improving the output and accuracy of the tool. This relates to issue [#3793](https://github.com/streetsidesoftware/cspell/issues/3793).\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-config-lib/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Ensuring all forms are generated\nDESCRIPTION: This snippet ensures that all word forms are generated during the spell checking process. This ensures that CSpell correctly recognizes and suggests variations of words. It addresses issue #3783.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-tools/CHANGELOG.md#_snippet_7\n\nLANGUAGE: TEXT\nCODE:\n```\n* make sure all forms are generated. ([#3783](https://github.com/streetsidesoftware/cspell/issues/3783)) ([70949a5](https://github.com/streetsidesoftware/cspell/commit/70949a5823f7c58052f9627c9455dcaa3496e8fb))\n```\n\n----------------------------------------\n\nTITLE: Adding Header to Dictionary File\nDESCRIPTION: This shell command appends the text \"# New Words\" as a comment to the end of the `project-words.txt` file. This helps organize the custom dictionary file, especially when new words are added automatically.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/getting-started.mdx#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\necho \"# New Words\" >> project-words.txt\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Custom Dictionaries in CSpell (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to define a custom dictionary using the 'dictionaryDefinitions' array and enable it for use by adding its name to the 'dictionaries' array within a CSpell configuration file (e.g., cspell.json). The example defines a dictionary named 'custom-words' pointing to a local text file './custom-words.txt' and activates it.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/Configuration/auto_properties.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"dictionaryDefinitions\": [\n  { \"name\": \"custom-words\", \"path\": \"./custom-words.txt\"}\n],\n\"dictionaries\": [\"custom-words\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring CSpell Case Sensitivity by Glob Pattern (JSON)\nDESCRIPTION: Uses the `overrides` section in `cspell.json` to apply specific configurations, including case sensitivity, based on file paths matching glob patterns. This provides fine-grained control over spell-checking rules for particular directories or file groups within a project, overriding global and language-specific settings.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/case-sensitive.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n\"overrides\": [\n  {\n    // Case sensitive markdown in the docs folder\n    \"filename\": \"docs/**/*.md\",\n    \"caseSensitive\": true\n  },\n  {\n    // Make sure TypeScript files are NOT case and accent Sensitive.\n    \"filename\": \"src/**/*.ts\",\n    \"languageSettings\": [\n      {\n        \"languageId\": \"*\",\n        \"caseSensitive\": false\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Expression Struct Definition (C)\nDESCRIPTION: This code likely belongs to the definition of struct `expression`. It contains the forward declarations of two members `tbranch` and `fbranch`, both being pointers to struct `expression`. It represents true and false branches of the expression.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nstruct expression *tbranch,\nstruct expression *fbranch));\n```\n\n----------------------------------------\n\nTITLE: Encryption Header and Secret Stream Setup in zipWorker.ts\nDESCRIPTION: This snippet initializes the encryption header length using sodium's crypto_secretstream_xchacha20poly1305_HEADERBYTES constant. It also involves importing sodium, setting up encryption parameters, and preparing the secret stream for data encryption. These steps are crucial for encrypting zip archives securely with XChacha20-Poly1305.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport sodium from 'libsodium-wrappers';\nconst headerBytes = sodium.crypto_secretstream_xchacha20poly1305_HEADERBYTES;\n// Setup for secret stream encryption\n```\n\n----------------------------------------\n\nTITLE: OpenAL Reverb Effect Parameters in Ada\nDESCRIPTION: Constant definitions for reverb and EAX reverb effect parameters in OpenAL, controlling various aspects of reverberation effects. These parameters allow fine-tuning of environmental audio effects like room size, decay, and reflections.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/AdaDoom3/AdaDoom3/snapshot.txt#_snippet_16\n\nLANGUAGE: Ada\nCODE:\n```\nAL_ROOM_ROLLOFF_FACTOR\nAL_CONE_OUTER_GAINHF\nAL_DIRECT_FILTER_GAINHF_AUTO 0x\nAUXILIARY_SEND_FILTER_GAINHF_AUTO 0x2000C\nAL_REVERB_GAINHF\nAL_REVERB_DECAY_HFRATIO 00\nREVERB_AIR_ABSORPTION_GAINHF 000B\nAL_REVERB_ROOM_ROLLOFF_FACTOR 0\nAL_REVERB_DECAY_HFLIMIT 00\nAL_EAXREVERB_DENSITY\nAL_EAXREVERB_DIFFUSION\nAL_EAXREVERB_GAIN\nAL_EAXREVERB_GAINHF\nAL_EAXREVERB_GAINLF\nAL_EAXREVERB_DECAY_HFRATIO 0007\nAL_EAXREVERB_DECAY_LFRATIO 0008\nAL_EAXREVERB_HFREFERENCE 001\nAL_EAXREVERB_LFREFERENCE 001\nAL_EAXREVERB_ROOM_ROLLOFF_FACTOR 0016\nAL_EAXREVERB_DECAY_HFLIMIT 0017\n```\n\n----------------------------------------\n\nTITLE: Test Spectrum for Dynamic Event Handlers in Svelte (_config.js)\nDESCRIPTION: Configuration setup for testing dynamic event handlers in Svelte components, including HTML string content with button elements. This setup helps to ensure event binding and handler invocation work correctly across different scenarios.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/sveltejs/svelte/snapshot.txt#_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\npackages/svelte/tests/runtime-runes/samples/dynamic-event-handler-2/_config.js:4:17      - Unknown word (Tama)       -- html: '<button>Tama</button><button>Pochi\n```\n\n----------------------------------------\n\nTITLE: Unlinking Cspell Software Terms Dictionary Globally (Shell)\nDESCRIPTION: Removes the link for the `@cspell/dict-software-terms` package from the global Cspell configuration. This command disables the dictionary globally but does not uninstall the npm package.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/dictionaries/software-terms/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncspell link remove @cspell/dict-software-terms\n```\n\n----------------------------------------\n\nTITLE: HTTP and HTTPS requests in Node.js\nDESCRIPTION: This snippet references modules for initiating HTTP and HTTPS requests, such as http.request(), http2.connect(), and http2.getUnpackedSettings(). These functions facilitate client-side interactions, enabling fetching resources, establishing HTTP/2 sessions, and managing stream settings.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/node.txt#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nhttp.request()\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nhttp2.connect()\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nhttp2.getUnpackedSettings()\n```\n\n----------------------------------------\n\nTITLE: Override Forbidden Word in cspell config (JSONC ignoreWords)\nDESCRIPTION: Specifies words in the `ignoreWords` section of the `cspell` configuration file. Words listed here will not be flagged as misspelled, even if they are defined as forbidden elsewhere. This provides a global override mechanism.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/forbidden-words.md#_snippet_4\n\nLANGUAGE: JSONC\nCODE:\n```\n{\n  \"ignoreWords\": [\"forbiddenWord\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Define Forbidden Words in cspell config (JSON words)\nDESCRIPTION: Specifies words directly within the `cspell.json` or similar configuration file. Words prefixed with `!` are treated as forbidden and always marked as errors. Other words in the list are treated as correctly spelled.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/forbidden-words.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"words\": [\n    \"!forbiddenWord\",\n    \"configstore\"\n],\n```\n\n----------------------------------------\n\nTITLE: Backup Service Class with Database and Batch Operations in BackupService.ts\nDESCRIPTION: This snippet demonstrates importing Dexie and Dexie-batch for managing backup data. It also imports the dependency injection container from tsyringe. The class interacts with IndexedDB, performs batch backup operations, and manages versioning. These features collectively enable scalable and maintainable backup processing within the application.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Dexie from 'dexie';\nimport DexieBatch from 'dexie-batch';\nimport {container} from 'tsyringe';\n// BackupService class implementation\n```\n\n----------------------------------------\n\nTITLE: Importing cspell.config.js from cspell.json\nDESCRIPTION: This JSON snippet shows how to include an external `cspell.config.js` configuration file within a JSON configuration by using the `import` key, enabling reuse and modular configuration setups.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-lib/docs/configuration.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"import\": [\"../cspell.config.js\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Matrix Class: Handling minors, cofactors, and adjugate matrices in Python\nDESCRIPTION: Defines methods for computing minors, cofactors, and the adjugate of matrices. Depends on a Matrix class implementation. These methods are essential for matrix algebra, particularly in computing inverses and determinants. The snippets include returning matrices representing minors, cofactors, and the adjugate, with key functions like adjugate() and minor().\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_45\n\nLANGUAGE: Python\nCODE:\n```\n39:37 - Unknown word (Adjugate) -- Minors, Cofactors and Adjugate are returned as Matrices\n54:22 - Unknown word (adjugate) -- >>> print(matrix.adjugate())\n```\n\n----------------------------------------\n\nTITLE: Testing bytes formatting with modulo operator in Python\nDESCRIPTION: Asserts the result of using the modulo operator (`%`) for formatting a bytes literal with other bytes literals as arguments.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nassert b'rust%bpython%b' % (b' ', b'!') == b'rust python!'\n```\n\n----------------------------------------\n\nTITLE: A* Search Algorithm in Python\nDESCRIPTION: Implements the A* pathfinding algorithm, calculating neighbors and heuristic estimates. Dependencies include Python data structures; inputs are graph and start/end nodes; outputs are shortest paths.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_38\n\nLANGUAGE: Python\nCODE:\n```\nmachine_learning/astar.py:65:9      - Unknown word (neughbour)  -- neughbour_cord = [\n```\n\n----------------------------------------\n\nTITLE: Unit Test for Backup Header Properties in BackupHeader.test.tsx\nDESCRIPTION: This test verifies that the decoded backup header contains correct operational and memory limits, ensuring the header's integrity. It employs expect assertions to validate that 'opslimit' equals 4 and 'memlimit' equals 33,554,432, demonstrating proper parsing of backup header data during tests.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nexpect(decodedHeader.opslimit).toBe(4);\nexpect(decodedHeader.memlimit).toBe(33554432);\n```\n\n----------------------------------------\n\nTITLE: Namespace and Class References in C++\nDESCRIPTION: Namespace and class references found in C++ code that are flagged as unknown words. These include identifiers like 'namespacefoo', 'classfoo', and references to libraries like 'pugi'.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/googleapis/google-cloud-cpp/snapshot.txt#_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nstd::string_view name, pugi::xml_node node) {\n```\n\n----------------------------------------\n\nTITLE: Formatting with Bytearrays\nDESCRIPTION: This snippet demonstrates the use of bytearrays in formatting operations using the modulo operator.  The input includes the format string with bytearray placeholders and the output is the formatted bytearray.  It's showcasing the integration of bytearrays with formatting mechanisms.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nassert bytearray('rust%bpython%b', 'utf-8') % (b'\n```\n\n----------------------------------------\n\nTITLE: Git commit-msg hook setup with CSpell\nDESCRIPTION: This script is intended to be used as a Git commit-msg hook. It passes the commit message file path (`$1`) to CSpell for spell checking. CSpell is configured to operate without summary or progress updates, and it is explicitly instructed to treat the input as a commit message. The script depends on CSpell being installed and accessible via `npx`.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/git.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n#!/bin/sh\n\nexec npx cspell --no-summary --no-progress --language-id commit-msg $1\n```\n\n----------------------------------------\n\nTITLE: Detecting CPU Features Using Inline Assembly in Ada\nDESCRIPTION: This snippet illustrates the usage of Ada inline assembly templates for detecting x86-64 CPU features such as POPCNT, SSSE3, PCLMULQDQ, CMOV, FXSR, OSXSAVE, and various x87 and SSE control/status instructions. It relies on querying CPU registers (e.g., ECX and EDX) flags and executing instructions like cpuid, xgetbv, stmxcsr, fnstsw, fnstenv, fldenv, fnclex, fnstcw, fldcw, fxsave, and ldmxcsr. Key parameters include multiple CPU flag bits and templates that map to specific assembly instructions, enabling the Ada program to determine hardware capabilities at runtime. These templates require support from the Ada compiler to allow inline assembly embedding and register access.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/AdaDoom3/AdaDoom3/snapshot.txt#_snippet_0\n\nLANGUAGE: Ada\nCODE:\n```\nEngine/Assembly/x86-64/neo-engine-cpu.adb: uses inline assembly templates like \"cpuid\", \"xgetbv\", \"stmxcsr (%%eax)\", \"fnstsw (%%eax)\", \"fnstenv (%%eax)\", \"fldenv (%%eax)\", \"fnclex\", \"fnstcw (%%eax)\", \"fldcw (%%eax)\", \"fxsave (%%eax)\", and \"ldmxcsr (%%eax)\" to query and manipulate CPU registers and control words.\nIt checks ECX and EDX register bits to detect CPU features such as POPCNT, SSSE3, PCLMULQDQ, CMOV instructions, FXSR support, OSXSAVE feature, hyperthreading, and carryless multiplication capability.\nIt defines boolean flags like Has_Carryless_Multiplication_Of_Two, Has_Hyperthreading, and uses template strings representing the actual assembly instructions.\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Fix export of SpellingDictionaryCollection\nDESCRIPTION: This fix addresses an issue with the export of `SpellingDictionaryCollection`. This suggests that there was a problem with how the `SpellingDictionaryCollection` class was made available for use by other modules or applications. This relates to issue [#3683](https://github.com/streetsidesoftware/cspell/issues/3683).\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-config-lib/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Configuring CSpell (CommonJS JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates configuring CSpell using a CommonJS module (`.cjs` file). It requires `defineConfig` from the `@cspell/cspell-types` package and exports the configuration object. The configuration includes the CSpell version, defines a custom dictionary 'project-words' pointing to './project-words.txt', lists it for use, and specifies 'node_modules' and '/project-words.txt' to be ignored.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/getting-started.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nconst { defineConfig } = require('@cspell/cspell-types');\n\nmodule.exports = defineConfig({\n    version: '0.2',\n    dictionaryDefinitions: [\n        {\n            name: 'project-words',\n            path: './project-words.txt',\n            addWords: true,\n        }\n    ],\n    dictionaries: ['project-words'],\n    ignorePaths: ['node_modules', '/project-words.txt'],\n});\n```\n\n----------------------------------------\n\nTITLE: Define Forbidden Words in Custom Wordlist (Text)\nDESCRIPTION: Defines words that should always be marked as misspelled by `cspell` by prefixing them with `!`. Other words in the list are considered correct. This list is typically saved as a text file and referenced in the cspell configuration.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/forbidden-words.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n!forbiddenWord\ncompanyname\njQuery\nprojectname\n```\n\n----------------------------------------\n\nTITLE: Luhn Algorithm Implementation in Python\nDESCRIPTION: Contains a function to verify the validity of identification numbers like credit cards using the Luhn algorithm. Inputs are string sequences; outputs are boolean indicating validity. Used in payment systems and ID validation.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_22\n\nLANGUAGE: Python\nCODE:\n```\nhashes/luhn.py:6:8       - Unknown word (luhn)       -- def is_luhn(string: str) -> bool\n```\n\n----------------------------------------\n\nTITLE: Copying HTTP Responses within Caddy Modules (Go)\nDESCRIPTION: This code handles copying of HTTP response data and headers within Caddy's reverse proxy workflow, including unmarshalling configuration data and setting response status codes. It is crucial for response transformation and forwarding.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_54\n\nLANGUAGE: Go\nCODE:\n```\n_ caddyfile.Unmarshaler =\n```\n\nLANGUAGE: Go\nCODE:\n```\n_ caddyfile.Unmarshaler =\n```\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/caddyserver/caddy/v2\"\n```\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/caddyserver/caddy/v2/caddyconfig\"\n```\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/caddyserver/caddy/v2/caddyconfig/caddyfile\"\n```\n\nLANGUAGE: Go\nCODE:\n```\nStatusCode caddyhttp.WeakString `json:\"status\"`\n```\n\n----------------------------------------\n\nTITLE: Implementing Spacebar Press Handler to Unmute in React TypeScript\nDESCRIPTION: This snippet implements a custom hook in React TypeScript to enable unmuting the microphone when the spacebar is pressed. It incorporates state to check if the calling view is detached or highlighted and manages keyboard event listeners accordingly. Dependencies include internal calling view modes and event utilities. The hook inputs are keypress events, outputting muted/unmuted states with precise UI control.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_64\n\nLANGUAGE: tsx\nCODE:\n```\nimport {WebAppEvents} from '@wireapp/webapp-events';\n\n// Hook to press space to unmute\nconst usePressSpaceToUnmute = () => {\n  const isDetatchedWindowView = false; // replaced from actual state\n  const isHighlightedDetatchedWindow = isDetatchedWindowView && true;\n\n  const handleKeyPress = (event) => {\n    if (event.code === 'Space') {\n      // unmute logic here\n    }\n  };\n\n  // attach event listener etc.\n};\n```\n\n----------------------------------------\n\nTITLE: Doxygen XML Element Names in C++\nDESCRIPTION: Examples of XML element names used in Doxygen documentation that are flagged as unknown words. These include standard Doxygen XML tags like 'briefdescription', 'detaileddescription', and various graph-related elements.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/googleapis/google-cloud-cpp/snapshot.txt#_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<briefdescription><para>Something pithy\n<detaileddescription><para>Something very\n```\n\n----------------------------------------\n\nTITLE: Accessibility Role and Attribute Warnings in JSON\nDESCRIPTION: Validation warnings related to ARIA roles, attributes, and accessibility best practices in HTML/Svelte components, ensuring proper use of ARIA roles, tab indices, and event handling for accessible applications.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/sveltejs/svelte/snapshot.txt#_snippet_32\n\nLANGUAGE: JSON\nCODE:\n```\npackages/svelte/tests/validator/samples/a11y-aria-activedescendant/warnings.json:3:43      - Unknown word (tabindex)   -- activedescendant_has_tabindex\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Comparing Bytearrays\nDESCRIPTION: This snippet tests the creation and comparison of bytearray objects using the '==' operator. It initializes a bytearray and checks if it is equal to another bytearray.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nbytearray(b\"kmoomk\")\n```\n\n----------------------------------------\n\nTITLE: (cspell-tools) Delay splitting _ till later\nDESCRIPTION: This bug fix, specifically for cspell-tools, defers the splitting of words at the underscore character `_`. This allows the splitting to happen at a later stage in the word processing pipeline. The fix likely optimizes the processing order for words that include underscores and is related to how words are split for spellchecking or other processing.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/CHANGELOG.md#_snippet_12\n\nLANGUAGE: git\nCODE:\n```\n(cspell-tools) Delay splitting _ till later ([#4309](https://github.com/streetsidesoftware/cspell/issues/4309)) ([0e517d1](https://github.com/streetsidesoftware/cspell/commit/0e517d13a6611e4d8a4f826a7d8d75352f5be4df))\n```\n\n----------------------------------------\n\nTITLE: Enabling --validate-directives CLI Option\nDESCRIPTION: This bug fix enables the command-line interface (CLI) option `--validate-directives`. This allows users to validate directives, such as comments, within their files. The input is the command-line execution of cspell and the output is the validation.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-pipe/CHANGELOG.md#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n* Enable cli option `--validate-directives` ([#3461](https://github.com/streetsidesoftware/cspell/issues/3461)) ([52a5337](https://github.com/streetsidesoftware/cspell/commit/52a5337fb4090394342b45e31423752cda268559))\n```\n\n----------------------------------------\n\nTITLE: Configuring CSpell (package.json)\nDESCRIPTION: This JSON snippet shows how to embed CSpell configuration directly within a project's `package.json` file under the \"cspell\" key. It contains the same configuration as the dedicated JSON file example: defining the 'project-words' dictionary at './project-words.txt', enabling its use, and listing 'node_modules' and '/project-words.txt' as ignored paths.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/getting-started.mdx#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"cspell\": {\n        \"version\": \"0.2\",\n        \"dictionaryDefinitions\": [\n            {\n                \"name\": \"project-words\",\n                \"path\": \"./project-words.txt\",\n                \"addWords\": true\n            }\n        ],\n        \"dictionaries\": [\"project-words\"],\n        \"ignorePaths\": [\"node_modules\", \"/project-words.txt\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Preprocessor directive with Unknown Word - C\nDESCRIPTION: These snippets define AUS_EVNEW and AUS_EVDEL. EVNEW and EVDEL are flagged as unknown words. This relates to Event Management. The word 'EVDEL' is flagged as an unknown word. This relates to Event Management\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_90\n\nLANGUAGE: C\nCODE:\n```\n#define AUS_EVNEW \"EVENT CREATION\"\n```\n\nLANGUAGE: C\nCODE:\n```\n#define AUS_EVDEL \"EVENT DELETION\"\n```\n\n----------------------------------------\n\nTITLE: Example Text Ignored by Cspell RegExp\nDESCRIPTION: This code snippet provides an example of text content that would be targeted and ignored by a cspell configuration using a regular expression ignore pattern. It demonstrates the kind of text structure or content that a user might want to exclude from spell checking.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell/samples/config/yaml-regexp/README.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nThis bit of text should be ignorrred.\n```\n\n----------------------------------------\n\nTITLE: Implementing Tarjan's SCC Algorithm in Python\nDESCRIPTION: Implements Tarjan's algorithm to find strongly connected components in a graph, focusing on DFS traversal and low-link values. Dependencies include graph data structures; inputs are graphs, outputs are SCCs. It is used in graph analysis and cycle detection.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\ngraphs/tarjans_scc.py:16:42     - Unknown word (equireachable) -- we save it and it's equireachable vertices as a strongly\n```\n\n----------------------------------------\n\nTITLE: Viewing Colored CSpell Output with Less\nDESCRIPTION: This command combines the CSpell check with color output and pipes it to the 'less' pager with the -r flag to preserve the color formatting. This is useful for viewing spell check results in larger files while maintaining readability.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/command-check.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncspell check <filename> --color | less -r\n```\n\n----------------------------------------\n\nTITLE: Schur Complement in Linear Algebra in Python\nDESCRIPTION: Analyzes the Schur complement of a matrix, referencing Boyd and Vandenberghe, for matrix block computations. Inputs are matrices; outputs relate to the Schur complement calculation.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_34\n\nLANGUAGE: Python\nCODE:\n```\nlinear_algebra/src/schur_complement.py:21:47     - Unknown word (Vandenberghe) -- Optimization - Boyd and Vandenberghe, A.5.5\n```\n\n----------------------------------------\n\nTITLE: Ignoring Directories During File Checking\nDESCRIPTION: This bug fix implements the ignoring of directories when checking files. This avoids unnecessary processing and potentially improves performance of the spell check. This should also improve accuracy. The input is the directory structure; the output is a filtered file check.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-pipe/CHANGELOG.md#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n* Ignore directories when checking files ([#2680](https://github.com/streetsidesoftware/cspell/issues/2680)) ([fa777f0](https://github.com/streetsidesoftware/cspell/commit/fa777f04981b8814b827721eaa8b9278ae95effb))\n```\n\n----------------------------------------\n\nTITLE: Command Registration and Execution in Caddy (Go)\nDESCRIPTION: These snippets involve registering commands with the Caddy command repository, defining command execution functions, and setting up command-line flags for configuring the reverse proxy module. They facilitate dynamic command handling and server management.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_53\n\nLANGUAGE: Go\nCODE:\n```\ncaddycmd.RegisterCommand(caddycmd.Command{ ... })\n```\n\nLANGUAGE: Go\nCODE:\n```\ncmd.RunE = caddycmd.WrapCommandFuncForCobra\n```\n\nLANGUAGE: Go\nCODE:\n```\nfunc cmdReverseProxy(fs caddycmd.Flags) (int, error) { ... }\n```\n\nLANGUAGE: Go\nCODE:\n```\ndisableRedir := fs.Bool(\"disable\", false)\n```\n\nLANGUAGE: Go\nCODE:\n```\nhttpPort := strconv.Itoa(caddyhttp.DefaultHTTPPort)\n```\n\nLANGUAGE: Go\nCODE:\n```\nhttpsPort := strconv.Itoa(caddyhttp.DefaultHTTPSPort)\n```\n\n----------------------------------------\n\nTITLE: Defining an Inline Dictionary in YAML\nDESCRIPTION: Example CSpell YAML configuration snippet demonstrating how to define a dictionary inline within the configuration file itself. This example defines a dictionary named 'company-terms' containing allowed words, directly under `dictionaryDefinitions`.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/rfc/rfc-0001 suggestions/README.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndictionaryDefinitions:\n  - name: company-terms\n    words:\n      - MyCompanyName\n```\n\n----------------------------------------\n\nTITLE: Handling openmetrics configuration in Go\nDESCRIPTION: This snippet handles the openmetrics setting in the metrics module, allowing configuration to disable openmetrics via Caddyfile directives. It provides case handling for the 'disable_openmetrics' subdirective and updates the module state accordingly.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_90\n\nLANGUAGE: Go\nCODE:\n```\ncase \"disable_openmetrics\":\n\t// disable the openmetrics feature based on configuration\n```\n\n----------------------------------------\n\nTITLE: React useState Hook for AppLock State Management\nDESCRIPTION: React useState hook implementation that manages the state of the application lock feature. It initializes the state to APPLOCK_STATE.NONE and provides a setter function to update the state as the user interacts with the lock screens.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_90\n\nLANGUAGE: TypeScript\nCODE:\n```\nuseState<APPLOCK_STATE>(APPLOCK_STATE.NONE);\n```\n\n----------------------------------------\n\nTITLE: Configuration Parsing and Dependency Setup (Go)\nDESCRIPTION: These snippets include functions that parse configuration files and set up dependencies such as modules and handlers for the Caddy server, utilizing JSON configs and module objects. They are essential for dynamic configuration and extensibility within the server.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_52\n\nLANGUAGE: Go\nCODE:\n```\nunordered, err := humanize.ParseBytes(input)\n```\n\nLANGUAGE: Go\nCODE:\n```\nsize = int64(usize)\n```\n\nLANGUAGE: Go\nCODE:\n```\nroute := caddyhttp.Route{ ... }\n```\n\nLANGUAGE: Go\nCODE:\n```\ncaddyconfig.JSONModuleObject(handler, \"\", nil)\n```\n\nLANGUAGE: Go\nCODE:\n```\ncaddyhttp.MatchHost{ ... }\n```\n\nLANGUAGE: Go\nCODE:\n```\nAutoHTTPSConfig{DisableRedir: true}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Importing a Local ESM File from CommonJS TypeScript\nDESCRIPTION: TypeScript example demonstrating how to dynamically import a local ESM file (`.mjs`) from a CommonJS module context using `dynamicImport`. The `__dirname` variable is used to establish the base path for resolving the relative file path.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/dynamic-import/README.md#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { dynamicImport } from '@cspell/dynamic-import';\n\nconst pIndex = dynamicImport<typeof import('../esm/index.mjs')>('../esm/index.mjs', __dirname);\n```\n\n----------------------------------------\n\nTITLE: Disabling and Re-enabling Dictionaries in CSpell Configuration (JavaScript/JSON)\nDESCRIPTION: Shows how to manage dictionary loading in `cspell.json`. A dictionary (e.g., `cpp`) can be disabled globally by prefixing its name with `!` in the main `dictionaries` array. It can then be selectively re-enabled for specific file patterns (e.g., `legacy/**/*.cpp`) within an `overrides` block by prefixing the name with `!!`. Subsequent `!` prefixes toggle the state.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/dictionaries/index.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"dictionaries\": [\"!cpp\"],\n\"overrides\": [\n  {\n      \"filename\": \"legacy/**/*.cpp\",\n      \"dictionaries\": [\"!!cpp\"], // add it back for *.cpp files under the legacy folder\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Individual File Type Checking in CSpell\nDESCRIPTION: Example configuration for the `enableFiletypes` setting in CSpell. It demonstrates enabling spell checking for 'jsonc' and 'kotlin' file types while explicitly disabling it for 'json' files using the '!' prefix. This setting works in conjunction with `enabledLanguageIds`.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/Configuration/auto_properties.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\njsonc       // enable checking for jsonc\n!json       // disable checking for json\nkotlin      // enable checking for kotlin\n```\n\n----------------------------------------\n\nTITLE: Listing Directory Contents using Shell\nDESCRIPTION: Demonstrates using the 'ls' shell command with flags '-lh' to list files and directories within '/usr' in a long, human-readable format. This command is often executed within a Node.js application using the `child_process` module.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/node.txt#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nls -lh /usr\n```\n\n----------------------------------------\n\nTITLE: AppLock Enum Definition in TypeScript React\nDESCRIPTION: Definition of the APPLOCK_STATE enum which represents different states of the application lock feature, including locked, setup, and forgot password states. This enum is used to control the UI state of the lock screen.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_87\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport enum APPLOCK_STATE {\n  FORGOT = 'applock.forgot',\n  LOCKED = 'applock.locked',\n  NONE = 'applock.none',\n  SETUP = 'applock.setup',\n  SETUP_CHANGE = 'applock.setup_change',\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Miscellaneous Utilities\nDESCRIPTION: A collection of general purpose utility functions supporting various aspects of cspell features.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_77\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-lib/src/lib/util/util.ts\n```\n\n----------------------------------------\n\nTITLE: Implementing Command Service in Java for CQRS\nDESCRIPTION: This Java code snippet defines the CommandService class within the CQRS pattern, responsible for handling command operations that modify application state. It typically depends on domain models and persistence mechanisms. The snippet declares the package 'com.iluwatar.cqrs.commandes' and is targeted at command-related logic. Inputs are command objects encapsulating state changes, and outputs are status or acknowledgment of successful command execution.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/iluwatar/java-design-patterns/snapshot.txt#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npackage com.iluwatar.cqrs.commandes;\n```\n\n----------------------------------------\n\nTITLE: TypeScript General Test Utilities\nDESCRIPTION: Contains utility functions to facilitate writing and organizing tests within the cspell codebase.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_82\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-lib/src/test-util/index.mts\n```\n\n----------------------------------------\n\nTITLE: Distributed STEK Management in Caddy TLS Module (Go Implementation)\nDESCRIPTION: This code manages a distributed Session Ticket Encryption Key (STEK) system, providing functionality to retrieve, load, store, and rotate STEKs across a distributed environment. It depends on certmagic for storage mechanisms and caddytls for TLS session management. Core functions include retrieving the current STEK, loading STEK from storage, storing new STEKs, and scheduling rotation. These implementations facilitate secure, distributed TLS session ticket key management.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_84\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddytls/distributedstek/distributedstek.go:100:2     - Unknown word (dstek)           -- dstek, err := s.getSTEK()\\nmodules/caddytls/distributedstek/distributedstek.go:100:21    - Unknown word (STEK)            -- dstek, err := s.getSTEK()\\nmodules/caddytls/distributedstek/distributedstek.go:107:37    - Unknown word (dstek)           -- NewTimer(time.Until(dstek.NextRotation))\\nmodules/caddytls/distributedstek/distributedstek.go:109:9     - Unknown word (dstek)           -- return dstek.Keys, nil\\nmodules/caddytls/distributedstek/distributedstek.go:119:24    - Unknown word (STEK)            -- func (s *Provider) loadSTEK() (distributedSTEK,\\nmodules/caddytls/distributedstek/distributedstek.go:119:43    - Unknown word (STEK)            -- loadSTEK() (distributedSTEK, error) {\\nmodules/caddytls/distributedstek/distributedstek.go:120:20    - Unknown word (STEK)            -- var sg distributedSTEK\\nmodules/caddytls/distributedstek/distributedstek.go:121:41    - Unknown word (stek)            -- storage.Load(s.ctx, stekFileName)\\nmodules/caddytls/distributedstek/distributedstek.go:123:50    - Unknown word (certmagic)       -- wrap, in case error is certmagic.ErrNotExist\\nmodules/caddytls/distributedstek/distributedstek.go:133:30    - Unknown word (dstek)           -- Provider) storeSTEK(dstek distributedSTEK) error\\nmodules/caddytls/distributedstek/distributedstek.go:135:37    - Unknown word (dstek)           -- NewEncoder(&buf).Encode(dstek)\\nmodules/caddytls/distributedstek/distributedstek.go:139:31    - Unknown word (stek)            -- storage.Store(s.ctx, stekFileName, buf.Bytes(\\nmodules/caddytls/distributedstek/distributedstek.go:156:4     - Unknown word (nolint)          -- //nolint:errcheck\\nmodules/caddytls/distributedstek/distributedstek.go:15:12     - Unknown word (distributedstek) -- // Package distributedstek provides TLS session\\nmodules/caddytls/distributedstek/distributedstek.go:226:64    - Unknown word (godoc)           -- reset directly (see godoc)\\nmodules/caddytls/distributedstek/distributedstek.go:230:18    - Unknown word (godocs)          -- // again, see godocs for why timer is stopped\\nmodules/caddytls/distributedstek/distributedstek.go:23:9      - Unknown word (distributedstek) -- package distributedstek\\nmodules/caddytls/distributedstek/distributedstek.go:250:7     - Unknown word (caddytls)        -- var _ caddytls.STEKProvider = (*Provider\\nmodules/caddytls/distributedstek/distributedstek.go:36:14     - Unknown word (caddyserver)     -- \"github.com/caddyserver/certmagic\"\\nmodules/caddytls/distributedstek/distributedstek.go:36:26     - Unknown word (certmagic)       -- github.com/caddyserver/certmagic\"\\nmodules/caddytls/distributedstek/distributedstek.go:38:14     - Unknown word (caddyserver)     -- \"github.com/caddyserver/caddy/v2\"\\nmodules/caddytls/distributedstek/distributedstek.go:39:14     - Unknown word (caddyserver)     -- \"github.com/caddyserver/caddy/v2/modules/caddytls\\nmodules/caddytls/distributedstek/distributedstek.go:39:43     - Unknown word (caddytls)        -- caddyserver/caddy/v2/modules/caddytls\"\\nmodules/caddytls/distributedstek/distributedstek.go:46:38     - Unknown word (STEK)            -- implements a distributed STEK provider. This\\nmodules/caddytls/distributedstek/distributedstek.go:56:13     - Unknown word (certmagic)       -- storage certmagic.Storage\\nmodules/caddytls/distributedstek/distributedstek.go:57:14     - Unknown word (caddytls)        -- stekConfig *caddytls.SessionTicketService\\nmodules/caddytls/distributedstek/distributedstek.go:57:2      - Unknown word (stek)            -- stekConfig *caddytls.SessionTicket\\nmodules/caddytls/distributedstek/distributedstek.go:65:13     - Unknown word (stek)            -- ID: \"tls.stek.distributed\",\\nmodules/caddytls/distributedstek/distributedstek.go:96:39     - Unknown word (caddytls)        -- Initialize(config *caddytls.SessionTicketService\\nmodules/caddytls/distributedstek/distributedstek.go:98:4      - Unknown word (stek)            -- s.stekConfig = config\n```\n\n----------------------------------------\n\nTITLE: Implementing Kosaraju's Algorithm in Python\nDESCRIPTION: Contains a function definition for Kosaraju's strongly connected components algorithm, used for graph analysis. Dependencies are minimal, primarily graph data structures. It takes a directed graph as input and outputs strongly connected components. Useful in network analysis and graph partitioning.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\ngraphs/scc_kosaraju.py:24:5      - Unknown word (kosaraju)   -- def kosaraju():\n```\n\n----------------------------------------\n\nTITLE: Example Configuration - YAML\nDESCRIPTION: This YAML code provides an example of how the spell checker configuration can be structured based on the scope of the transformed text. It allows for different settings to be applied based on the context. For instance, it shows how to configure the spell checker to ignore case and use the code splitter for source code and enable Spanish spell checking in TypeScript and JSON double quote strings.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/rfc/rfc-0003 parsing files/README.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndocumentSettings:\n  - when:\n      # Source code should ignore case and use the code splitter\n      scope: source, code\n    use:\n      splitter: code # the text will be divided based upon code splitting rules\n      caseSensitive: false\n  - when:\n      scope: text\n    use:\n      splitter: word\n      caseSensitive: true\n  - when:\n      scope: text.transformed\n    use:\n      splitter: word # the text will be divided upon word boundaries\n  - when:\n      scope: text.transformed.word\n    use:\n      splitter: none # the text will not be divided into words before searching the dictionary.\n  - when:\n      # Match against TypeScript and JSON double quote strings.\n      scope: source.ts string.quoted.double, string.quoted.double.json\n    use:\n      locale: 'es' # enable Spanish on strings\n      caseSensitive: true\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declaration for Svelte Elements\nDESCRIPTION: This TypeScript declaration file defines additional properties for HTML elements in Svelte, including event handlers and attribute options, enhancing type safety for Svelte component development by specifying optional properties for various HTML elements.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/sveltejs/svelte/snapshot.txt#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/svelte/elements.d.ts:1000:2    - Unknown word (allowtransparency)                    -- allowtransparency?: boolean | undefined\npackages/svelte/elements.d.ts:1006:2    - Unknown word (marginheight)                         -- marginheight?: number | undefined\npackages/svelte/elements.d.ts:1008:2    - Unknown word (marginwidth)                          -- marginwidth?: number | undefined\npackages/svelte/elements.d.ts:101:2     - Unknown word (oncompositionend) -- oncompositionend?: CompositionEventHandler\npackages/svelte/elements.d.ts:1024:2    - Unknown word (fetchpriority)                        -- fetchpriority?: 'auto' | 'high' |\npackages/svelte/elements.d.ts:102:2     - Unknown word (oncompositionendcapture) -- oncompositionendcapture?: CompositionEventHandler\npackages/svelte/elements.d.ts:104:2     - Unknown word (oncompositionstart)      -- oncompositionstart?: CompositionEventHandler\npackages/svelte/elements.d.ts:105:2     - Unknown word (oncompositionstartcapture) -- oncompositionstartcapture?: CompositionEventHandler\npackages/svelte/elements.d.ts:1074:2    - Unknown word (autocorrect)                          -- autocorrect?: 'on' | 'off' | ''\npackages/svelte/elements.d.ts:107:2     - Unknown word (oncompositionupdate)       -- oncompositionupdate?: CompositionEventHandler\npackages/svelte/elements.d.ts:108:2     - Unknown word (oncompositionupdatecapture) -- oncompositionupdatecapture?: CompositionEventHandler\npackages/svelte/elements.d.ts:1096:2    - Unknown word (maxlength)                            -- maxlength?: number | undefined\npackages/svelte/elements.d.ts:10:20     - Unknown word (Patricio)   -- // Patricio Zavolinsky <https:/\npackages/svelte/elements.d.ts:10:29     - Unknown word (Zavolinsky) -- Patricio Zavolinsky <https://github.com\n/packages/svelte/elements.d.ts:1112:2    - Unknown word (defaultvalue)                         -- defaultvalue?: any;\n/packages/svelte/elements.d.ts:1114:2    - Unknown word (defaultchecked)                       -- defaultchecked?: any;\n/packages/svelte/elements.d.ts:1132:2    - Unknown word (keytype)                              -- keytype?: string | undefined\n/packages/svelte/elements.d.ts:1133:2    - Unknown word (keyparams)                            -- keyparams?: string | undefined\n/packages/svelte/elements.d.ts:113:2     - Unknown word (onfocuscapture)             -- onfocuscapture?: FocusEventHandler\n/packages/svelte/elements.d.ts:1163:6    - Unknown word (serviceworker)                        -- | 'serviceworker'\n/packages/svelte/elements.d.ts:1168:6    - Unknown word (webidentity)                          -- | 'webidentity'\n/packages/svelte/elements.d.ts:116:2     - Unknown word (onfocusincapture)           -- onfocusincapture?: FocusEventHandler\n/packages/svelte/elements.d.ts:1179:2    - Unknown word (imagesrcset)                          -- imagesrcset?: string | undefined\n/packages/svelte/elements.d.ts:1180:2    - Unknown word (imagesizes)                           -- imagesizes?: string | undefined\n/packages/svelte/elements.d.ts:119:2     - Unknown word (onfocusoutcapture)          -- onfocusoutcapture?: FocusEventHandler\n/packages/svelte/elements.d.ts:1200:2    - Unknown word (controlslist)                         -- controlslist?:\n/packages/svelte/elements.d.ts:1201:6    - Unknown word (nodownload)                           -- | 'nodownload'\n/packages/svelte/elements.d.ts:1202:6    - Unknown word (nofullscreen)                         -- | 'nofullscreen'\n/packages/svelte/elements.d.ts:1203:6    - Unknown word (noplaybackrate)                       -- | 'noplaybackrate'\n/packages/svelte/elements.d.ts:1204:6    - Unknown word (noremoteplayback)                     -- | 'noremoteplayback'\n/packages/svelte/elements.d.ts:1209:2    - Unknown word (currenttime)                          -- currenttime?: number | undefined\n/packages/svelte/elements.d.ts:1210:2    - Unknown word (defaultmuted)                         -- defaultmuted?: boolean | undefined\n/packages/svelte/elements.d.ts:1211:2    - Unknown word (defaultplaybackrate)                  -- defaultplaybackrate?: number | undefined\n/packages/svelte/elements.d.ts:1215:2    - Unknown word (playsinline)                          -- playsinline?: boolean | undefined\n/packages/svelte/elements.d.ts:122:2     - Unknown word (onblurcapture)              -- onblurcapture?: FocusEventHandler\n/packages/svelte/elements.d.ts:1273:2    - Unknown word (classid)                              -- classid?: string | undefined\n/packages/svelte/elements.d.ts:127:2     - Unknown word (onchangecapture)            -- onchangecapture?: FormEventHandler<T\n/packages/svelte/elements.d.ts:1281:2    - Unknown word (wmode)                               -- wmode?: string | undefined\n\n```\n\n----------------------------------------\n\nTITLE: File system operations with fs module\nDESCRIPTION: This snippet references various fs functions for file handling, such as readFile(), readFileSync(), readdir(), symlink(), symlinkSync(), unlink(), and properties like file, file:, and path. These are used for asynchronous and synchronous file IO, directory listing, symbolic link creation, and deletion within Node.js.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/node.txt#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nfs.readFile()\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfs.readFileSync\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfs.readdir\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfs.symlink()\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfs.symlinkSync()\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfs.unlink\n```\n\n----------------------------------------\n\nTITLE: Importing Availability from wireapp/protocol-messaging\nDESCRIPTION: This snippet imports the `Availability` type/enum from the `@wireapp/protocol-messaging` library. This suggests the application is managing user availability status.  Dependencies include `@wireapp/protocol-messaging`. The unknown word `wireapp` is the cspell error.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_107\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Availability} from '@wireapp/protocol-messaging\n```\n\n----------------------------------------\n\nTITLE: Using Yar Concurrent Client Methods\nDESCRIPTION: This snippet illustrates methods from the Yar Concurrent Client. It contains methods such as `call`, `loop`, and `reset`. These are used for making concurrent RPC calls using the Yar extension.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/php.txt#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nYar_Concurrent_Client::call\nYar_Concurrent_Client::loop\nYar_Concurrent_Client::reset\n```\n\n----------------------------------------\n\nTITLE: Macro Definitions for BJack Game Control Flags in mbk_bjack.h\nDESCRIPTION: This extensive snippet defines constants and flags for a blackjack game implementation, including game modes, system operations, user actions, betting actions, and game states. These macros facilitate game logic control and user interaction handling.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_12\n\nLANGUAGE: C\nCODE:\n```\n#define BJM_OFORCEFOLD 93\n```\n\nLANGUAGE: C\nCODE:\n```\n#define BJM_YFORCESTAY 94\n```\n\nLANGUAGE: C\nCODE:\n```\n#define BJM_OFORCESTAY 95\n```\n\nLANGUAGE: C\nCODE:\n```\n#define BJM_SMTHE 96\n```\n\nLANGUAGE: C\nCODE:\n```\n#define BJM_SFTHE 97\n```\n\nLANGUAGE: C\nCODE:\n```\n#define BJM_SWON 98\n```\n\nLANGUAGE: C\nCODE:\n```\n#define BJM_PWON 99\n```\n\nLANGUAGE: C\nCODE:\n```\n#define BJM_PLNOINTELE 103\n```\n\nLANGUAGE: C\nCODE:\n```\n#define BJM_OFORCEOFF 104\n```\n\nLANGUAGE: C\nCODE:\n```\n#define BJV_EPAUSEWARN 4\n```\n\nLANGUAGE: C\nCODE:\n```\n#define BJV_SYSOPS_NOCHARGE 7\n```\n\nLANGUAGE: C\nCODE:\n```\n#define BJV_SYSTEM_PERC 8\n```\n\nLANGUAGE: C\nCODE:\n```\n#define BJM_NEWGAME 16\n```\n\nLANGUAGE: C\nCODE:\n```\n#define BJM_NOPART 17\n```\n\nLANGUAGE: C\nCODE:\n```\n#define BJM_BELLACT 18\n```\n\nLANGUAGE: C\nCODE:\n```\n#define BJM_BELLDEACT 19\n```\n\nLANGUAGE: C\nCODE:\n```\n#define BJM_CNTDEALLOC 24\n```\n\nLANGUAGE: C\nCODE:\n```\n#define BJM_NOWINNER 25\n```\n\nLANGUAGE: C\nCODE:\n```\n#define BJM_BEGHIT 27\n```\n\nLANGUAGE: C\nCODE:\n```\n#define BJM_ERCMD 28\n```\n\nLANGUAGE: C\nCODE:\n```\n#define BJM_WAITBET 29\n```\n\nLANGUAGE: C\nCODE:\n```\n#define BJM_CNTBET 30\n```\n\nLANGUAGE: C\nCODE:\n```\n#define BJM_YTURNBET 31\n```\n\nLANGUAGE: C\nCODE:\n```\n#define BJM_YTURNHIT 32\n```\n\nLANGUAGE: C\nCODE:\n```\n#define BJM_YBETCRED 33\n```\n\nLANGUAGE: C\nCODE:\n```\n#define BJM_MPLAYER 34\n```\n\nLANGUAGE: C\nCODE:\n```\n#define BJM_OBETCRED 36\n```\n\n----------------------------------------\n\nTITLE: Setting up a basic cspell.json configuration file in JavaScript/JSON\nDESCRIPTION: Example of a basic cspell.json configuration file that shows the fundamental settings structure. Includes custom word lists, flag words for common spelling errors, and version settings.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/Configuration/index.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// cSpell Settings\n{\n    // Version of the setting file.  Always 0.2\n    \"version\": \"0.2\",\n    // language - current active spelling language\n    \"language\": \"en\",\n    // words - list of words to be always considered correct\n    \"words\": [\n        \"mkdirp\",\n        \"tsmerge\",\n        \"githubusercontent\",\n        \"streetsidesoftware\",\n        \"vsmarketplacebadge\",\n        \"visualstudio\"\n    ],\n    // flagWords - list of words to be always considered incorrect\n    // This is useful for offensive words and common spelling errors.\n    // For example \"hte\" should be \"the\"\n    \"flagWords\": [\n        \"hte\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Improving performance by reducing FS requests\nDESCRIPTION: This bug fix aims to enhance performance by reducing the number of file system requests. The goal is to make spell checking faster and more efficient.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-strong-weak-map/test-cspell-strong-weak-map/CHANGELOG.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nImprove performance by reducing FS requests ([#5103](https://github.com/streetsidesoftware/cspell/issues/5103)) ([3f31569](https://github.com/streetsidesoftware/cspell/commit/3f31569a43b9ae0f21e90d84db57f87a2cb4f6dd))\n```\n\n----------------------------------------\n\nTITLE: Configuration File cspell-a.yml\nDESCRIPTION: This YAML snippet is a CSpell configuration file (`cspell-a.yml`). It defines dictionaries to be enabled and disabled, along with a list of words.  It disables the 'html' dictionary and includes the 'aws' dictionary.  The word 'apple' is also added to the list of words.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/Configuration/imports.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndictionaries:\n  - aws # enable aws dictionary\n  - '!html' # Disable `html` dictionary\nwords:\n  - apple\n```\n\n----------------------------------------\n\nTITLE: Conjugate Gradient Method in Python\nDESCRIPTION: Provides functions for computing Krylov subspaces, conjugate directions, and eigenvectors, essential in iterative linear solvers. Dependencies include NumPy; inputs are matrices/vectors; outputs are solutions and eigenvalues.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_31\n\nLANGUAGE: Python\nCODE:\n```\nlinear_algebra/src/conjugate_gradient.py:131:25    - Unknown word (Krylov)       -- # Calculate new Krylov subspace scale.\n```\n\nLANGUAGE: Python\nCODE:\n```\nlinear_algebra/src/conjugate_gradient.py:133:27    - Unknown word (conjuage)     -- # Calculate new A conjuage search direction.\n```\n\nLANGUAGE: Python\nCODE:\n```\nlinear_algebra/src/conjugate_gradient.py:40:27     - Unknown word (eignevectors) -- Get eigenvalues and eignevectors for a symmetric matrix\n```\n\n----------------------------------------\n\nTITLE: Example ESLint Configuration Using '@cspell/eslint-plugin' with Custom Configs\nDESCRIPTION: This code demonstrates importing a set of CSpell recommended configurations and integrating them into an ESLint configuration array with additional rules.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-eslint-plugin/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport cspellConfigs from '@cspell/eslint-plugin/configs';\n\nexport default [\n  cspellConfigs.recommended,\n  {\n    rules: {\n      '@cspell/spellchecker': ['warn', { checkComments: false, autoFix: true }]\n    }\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring CSpell (YAML)\nDESCRIPTION: This YAML snippet presents an equivalent configuration for CSpell as the JSON example, suitable for a `cspell.config.yaml` file. It defines a custom dictionary 'project-words' referencing './project-words.txt', includes it in the active dictionaries, and lists 'node_modules' and '/project-words.txt' as ignored paths.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/getting-started.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\n$schema: https://raw.githubusercontent.com/streetsidesoftware/cspell/main/cspell.schema.json\nversion: '0.2'\ndictionaryDefinitions:\n    - name: project-words\n      path: './project-words.txt'\n      addWords: true\ndictionaries:\n    - project-words\nignorePaths:\n    - 'node_modules'\n    - '/project-words.txt'\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition of JSON Output Structure for CSpell JSON Reporter\nDESCRIPTION: This TypeScript code defines the shape of JSON output emitted by @cspell/cspell-json-reporter. It describes fields such as 'issues' for spelling problems, 'result' for linting results, optional 'error', 'progress', 'info', and 'debug' logs with associated types. Dependencies on CSpell types like Issue, RunResult, and ErrorLike are required. This type enables consistent structured data consumption from the reporter.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-json-reporter/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  ErrorLike,\n  Issue,\n  MessageType,\n  ProgressFileComplete,\n  ProgressItem,\n  RunResult\n} from '@cspell/cspell-types';\n\nexport type CSpellJSONReporterOutput = {\n  /**\n   * Found spelling issues\n   */\n  issues: Array<Issue>;\n  /**\n   * CSpell execution logs\n   */\n  info?: Array<{ message: string; msgType: MessageType }>;\n  /**\n   * CSpell debug logs\n   */\n  debug?: Array<{ message: string }>;\n  /**\n   * CSpell error logs\n   */\n  error?: Array<{ message: string; error: ErrorLike }>;\n  /**\n   * CSpell file progress logs\n   */\n  progress?: Array<ProgressItem | ProgressFileComplete>;\n  /**\n   * Execution result\n   */\n  result: RunResult;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Select from wireapp/react-ui-kit\nDESCRIPTION: This snippet imports the `Select` component from the `@wireapp/react-ui-kit` library. It suggests the usage of styled select dropdowns in the user interface.  Dependencies include `@wireapp/react-ui-kit`. The unknown word `wireapp` is the cspell error.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_116\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Select} from '@wireapp/react-ui-kit';\n```\n\n----------------------------------------\n\nTITLE: Fixing trie-lib radix reference issue\nDESCRIPTION: This snippet addresses an issue with the reference radix in the `trie-lib` dependency. Fixing this issue ensures the correct functioning of trie-based data structures used by CSpell. It addresses issue #3849.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-tools/CHANGELOG.md#_snippet_4\n\nLANGUAGE: TEXT\nCODE:\n```\n* trie-lib - fix issue with reference radix. ([#3849](https://github.com/streetsidesoftware/cspell/issues/3849)) ([73af697](https://github.com/streetsidesoftware/cspell/commit/73af6978c53f2fd1f4cd528fd84e9d52a4149d5b))\n```\n\n----------------------------------------\n\nTITLE: Setting Group ID in a Test\nDESCRIPTION: This code snippet sets the `groupId` property of a conversation object to a dynamically generated group ID. This is likely used within a test case.  The `randomUUID()` function generates a unique identifier and is combined with the prefix `groupid-`. The unknown word `groupid` is the cspell error.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_94\n\nLANGUAGE: typescript\nCODE:\n```\nconversation.groupId = `groupid-${randomUUID()}`;\n```\n\n----------------------------------------\n\nTITLE: Utilizing zlib for compression and decompression in Node.js\nDESCRIPTION: This snippet involves the zlib module used for data compression and decompression tasks within Node.js applications. Functions like createGzip(), createGunzip(), and constants for compression levels enable efficient data processing and transfer.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/node.txt#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nzlib\n```\n\n----------------------------------------\n\nTITLE: Caesar Cipher Decrypt with Chi-Squared Analysis in Python\nDESCRIPTION: Provides code to decrypt Caesar cipher-encoded text using statistical methods such as chi-squared, to identify the most probable shift. The implementation relies on frequency analysis and string processing, producing probable plaintext outputs given cipher inputs.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nJgnnq\n```\n\nLANGUAGE: Python\nCODE:\n```\necrvckp\n```\n\nLANGUAGE: Python\nCODE:\n```\nCqks\n```\n\nLANGUAGE: Python\nCODE:\n```\nfqumfgjy\n```\n\nLANGUAGE: Python\nCODE:\n```\nqtbjwhfxj\n```\n\n----------------------------------------\n\nTITLE: Handling errors and system call information in Node.js\nDESCRIPTION: This snippet lists various properties related to error objects and system call information, such as error.message, error.code, error.stack, errno, syscall, and error.address. These are used for detailed error diagnostics, logging, and troubleshooting within Node.js applications.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/node.txt#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nerr.info\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nerrno\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nerror.message\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nerror.code\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nerror.stack\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nerror.syscall\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nerror.address\n```\n\n----------------------------------------\n\nTITLE: Rendering Hand Raise Icon Component in React TypeScript\nDESCRIPTION: This snippet renders a call participant's hand raise icon using React in TypeScript, importing utilities for time calculations (TimeInMillis) and UI components (InviteIcon, Tooltip) from '@wireapp'. It manages display of the hand raise timestamp with formatting and shows corresponding tooltips. Dependencies include time utilities and UI kit components. Inputs are hand raise timestamps, and outputs are icons rendered with tooltips explaining the time elapsed since the hand was raised.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_61\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TimeInMillis} from '@wireapp/commons/lib/util/TimeUtil';\nimport {InviteIcon, Tooltip} from '@wireapp/react-ui-kit';\n\n// Example code for rendering hand raise icon with tooltip showing time elapsed\nconst CallParticipantsListItemHandRaiseIcon = ({ handRaisedAt }) => {\n    return (\n        <Tooltip text={new Date(handRaisedAt + TimeInMillis.SECOND).toLocaleTimeString()}>\n            <InviteIcon />\n        </Tooltip>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Enigma Machine Simulation\nDESCRIPTION: Python implementation of the Enigma encryption machine with multiple rotors and plugboard configurations. Contains rotor wiring definitions and example encryption/decryption operations.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n# Rotor wiring definitions\nrotor1 = \"EGZWVONAHDCLFQMSIPJBYUKXTR\"\nrotor2 = \"FOBHMDKEXQNRAULPGSJVTYICZW\"\nrotor3 = \"ZJXESIUQLHAVRMDOYGTNFWPBKC\"\nrotor4 = \"RMDJXFUWGISLHVTCQNKYPBEZOA\"\nrotor5 = \"SGLCPQWZHKXAREONTFBVIYJUDM\"\nrotor6 = \"HVSICLTYKQUBXDWAJZOMFGPREN\"\nrotor7 = \"RZWQHFMVDBKICJLNTUXAGYPSOE\"\nrotor8 = \"LFKIJODBEGAMQPXVUHYSTCZRWN\"\nrotor9 = \"KOAEGVDHXPQZMLFTYWJNBRCIUS\"\n\n# Plugboard implementation\ndef _plugboard(pbstring: str) -> dict[str, str]:\n    pbdict = _plugboard(pb)  # Converts plugboard string to dictionary mapping\n    \n# Example usage\n'KORYH JUHHI!'  # Example encrypted text\nenigma('KORYH, juhhi!', (1, 2, 1), plugboard)  # Decryption example\n'FPNCZ QWOBU!'  # Another encrypted output\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration Command with Custom Config File\nDESCRIPTION: Example showing how to run ESLint with a specific configuration file using the command line interface.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/eslint/eslint/snapshot.txt#_snippet_19\n\nLANGUAGE: Bash\nCODE:\n```\neslint -c myconfig.json myfiletotest.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Ada Compiler and Linker Switches in GPR\nDESCRIPTION: Specifies compiler and linker switches for an Ada project using the GPR project file format (neo.gpr). Includes switches for Ada tools (gnato, gnatf, gnatp, gnatx), optimization flags (funsafe-math-optimizations, ffast-math for SIMD optmization), suppression options (Surpress checks, cross-reference), Windows-specific linker options (mwindows), and linking external libraries (comctl32.dll, setupapi.dll). Comments indicate settings for GLSL shaders and debugging flags based on scenario variables.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/AdaDoom3/AdaDoom3/snapshot.txt#_snippet_41\n\nLANGUAGE: gpr\nCODE:\n```\nSwitch_Compiler & (\"-gnato\",\n```\n\nLANGUAGE: gpr\nCODE:\n```\n\"-gnatf\");\n```\n\nLANGUAGE: gpr\nCODE:\n```\n\"-gnatp\",\n```\n\nLANGUAGE: gpr\nCODE:\n```\n-- Surpress all checks\n```\n\nLANGUAGE: gpr\nCODE:\n```\n\"-gnatx\",\n```\n\nLANGUAGE: gpr\nCODE:\n```\n-- Surpress cross-reference data\n```\n\nLANGUAGE: gpr\nCODE:\n```\n\"-funsafe-math-optimizations\"\n```\n\nLANGUAGE: gpr\nCODE:\n```\n-- Force SIMD optmization\n```\n\nLANGUAGE: gpr\nCODE:\n```\n\"-ffast-math\");\n```\n\nLANGUAGE: gpr\nCODE:\n```\nSwitch_Linker & (\"-mwindows\",\n```\n\nLANGUAGE: gpr\nCODE:\n```\nWinDir\") & \"\\System32\\comctl32.dll\", -- Common\n```\n\nLANGUAGE: gpr\nCODE:\n```\nWinDir\") & \"\\System32\\setupapi.dll\", -- Device\n```\n\nLANGUAGE: gpr\nCODE:\n```\n-- GLSL shaders\n```\n\nLANGUAGE: gpr\nCODE:\n```\nthe source access to senario variable DEBUG\n```\n\nLANGUAGE: gpr\nCODE:\n```\nSwitch_Linker := (\"-Xlinker\", -- Setup\n```\n\n----------------------------------------\n\nTITLE: TypeScript Test for Calling Repository Functions and Call States\nDESCRIPTION: This snippet contains test cases for the CallingRepository module, including assertions on call state transitions, conversation creation, and media stream handling. It utilizes dependency resolution, mock data, and assertions to verify the correctness of call operations, with references to external modules such as '@wireapp/api-client' and internal services. These tests ensure the robustness of call management logic.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\nsrc/script/calling/CallingRepository.test.ts:133:38    - Unknown word (senderdomain) -- senderUserId = {domain: 'senderdomain', id: 'senderid'};\nsrc/script/calling/CallingRepository.test.ts:133:58    - Unknown word (senderid)     -- senderdomain', id: 'senderid'};\nsrc/script/calling/CallingRepository.test.ts:139:9     - Unknown word (CONV)         -- CONV_TYPE.CONFERENCE,\nsrc/script/calling/CallingRepository.test.ts:145:35    - Unknown word (ESTAB)        -- state(CALL_STATE.MEDIA_ESTAB);\nsrc/script/calling/CallingRepository.test.ts:179:38    - Unknown word (senderdomain) -- senderUserId = {domain: 'senderdomain', id: 'senderid'};\nsrc/script/calling/CallingRepository.test.ts:179:58    - Unknown word (senderid)     -- senderdomain', id: 'senderid'};\nsrc/script/calling/CallingRepository.test.ts:185:9     - Unknown word (CONV)         -- CONV_TYPE.CONFERENCE,\nsrc/script/calling/CallingRepository.test.ts:191:35    - Unknown word (ESTAB)        -- state(CALL_STATE.MEDIA_ESTAB);\nsrc/script/calling/CallingRepository.test.ts:227:17    - Unknown word (ONEONONE)     -- 'starts a ONEONONE call for proteus or\nsrc/script/calling/CallingRepository.test.ts:233:84    - Unknown word (CONV)         -- conversation.id, callType, CONV_TYPE.ONEONONE, 0);\nsrc/script/calling/CallingRepository.test.ts:233:94    - Unknown word (ONEONONE)     -- callType, CONV_TYPE.ONEONONE, 0);\nsrc/script/calling/CallingRepository.test.ts:24:10     - Unknown word (wireapp)    -- } from '@wireapp/api-client/lib/conversation\nsrc/script/calling/CallingRepository.test.ts:268:47    - Unknown word (subconversation) -- resolve(Core).service?.subconversation.subscribeToEpochUpdates\nsrc/script/calling/CallingRepository.test.ts:27:26     - Unknown word (tsyringe)   -- import {container} from 'tsyringe';\nsrc/script/calling/CallingRepository.test.ts:289:47    - Unknown word (subconversation) -- resolve(Core).service?.subconversation.subscribeToEpochUpdates\nsrc/script/calling/CallingRepository.test.ts:29:20     - Unknown word (CONV)       -- import {CALL_TYPE, CONV_TYPE, REASON, STATE\nsrc/script/calling/CallingRepository.test.ts:29:73     - Unknown word (Wcall)      -- STATE, VIDEO_STATE, Wcall} from '@wireapp/avs\nsrc/script/calling/CallingRepository.test.ts:29:87     - Unknown word (wireapp)    -- STATE, Wcall} from '@wireapp/avs';\nsrc/script/calling/CallingRepository.test.ts:30:25     - Unknown word (wireapp)    -- import {Runtime} from '@wireapp/commons';\nsrc/script/calling/CallingRepository.test.ts:321:47    - Unknown word (subconversation) -- resolve(Core).service?.subconversation.subscribeToEpochUpdates\nsrc/script/calling/CallingRepository.test.ts:345:19    - Unknown word (ONEONONE)        -- CONV_TYPE.ONEONONE,\nsrc/script/calling/CallingRepository.test.ts:356:47    - Unknown word (subconversation) -- resolve(Core).service?.subconversation.subscribeToEpochUpdates\nsrc/script/calling/CallingRepository.test.ts:382:41    - Unknown word (ESTAB)           -- state(CALL_STATE.MEDIA_ESTAB);\nsrc/script/calling/CallingRepository.test.ts:402:24    - Unknown word (mediastream)     -- it('returns cached mediastream for self user if set\nsrc/script/calling/CallingRepository.test.ts:431:28    - Unknown word (mediastream)     -- 'asks only once for mediastream when queried multiple\nsrc/script/calling/CallingRepository.test.ts:490:9     - Unknown word (conv)            -- let conv: Conversation;\nsrc/script/calling/CallingRepository.test.ts:494:7     - Unknown word (conv)            -- conv = createConversation\nsrc/script/calling/CallingRepository.test.ts:497:9     - Unknown word (conv)            -- conv,\nsrc/script/calling/CallingRepository.test.ts:513:69    - Unknown word (conv)            -- toHaveBeenCalledWith(wUser, conv.id, VIDEO_STATE.STARTED\nsrc/script/calling/CallingRepository.test.ts:524:69    - Unknown word (conv)            -- toHaveBeenCalledWith(wUser, conv.id, VIDEO_STATE.STOPPED\nsrc/script/calling/CallingRepository.test.ts:533:37    - Unknown word (ESTAB)           -- state(CALL_STATE.MEDIA_ESTAB);\nsrc/script/calling/CallingRepository.test.ts:56:14     - Unknown word (Wcall)      -- let wCall: Wcall;\nsrc/script/calling/CallingRepository.test.ts:601:18    - Unknown word (Wcall)           -- let avsCall: Wcall;\nsrc/script/calling/CallingRepository.test.ts:642:13    - Unknown word (audiocbr)        -- audiocbr: 'false',\nsrc/script/calling/CallingRepository.test.ts:643:13    - Unknown word (videosend)       -- videosend: 'false',\nsrc/script/calling/CallingRepository.test.ts:656:36    - Unknown word (SAVPF)           -- audio 9 UDP/TLS/RTP/SAVPF 111\n' +\nsrc/script/calling/CallingRepository.test.ts:658:16    - Unknown word (rtpmap)          -- 'a=rtpmap:111 opus/48000/2\n\n```\n\n----------------------------------------\n\nTITLE: Renaming Config File (Shell)\nDESCRIPTION: Shell command to rename the active configuration file from `cspell.yaml` to `actual.yaml`. This is a preparatory step before creating a symbolic link.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/issues/issue-5120/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmv cspell.yaml actual.yaml\n```\n\n----------------------------------------\n\nTITLE: cSpell Dictionary Definition\nDESCRIPTION: This snippet shows how to define words and patterns for inclusion and exclusion in a cSpell dictionary. It uses `*` for wildcard matching, `+` to require a prefix, and `!` to exclude words.  The dictionary can be extended to include domain-specific terminology and prevent false positives during spell checking.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-tools/fixtures/dicts/sampleCodeDic.txt#_snippet_0\n\nLANGUAGE: cSpell Dictionary\nCODE:\n```\nError*\n+error*\nCode*\n+code*\n*msg    # `Errormsg` is allowed, but `msgerror` is not.\n!err    # forbid `err`\n!Errorerror # forbid\n!Codemsg\n\nCafé    # will get normalized and will only match if case sensitive matching is turned off.\n\n!codecode # Do not allow `codecode` or `Codecode` when using case insensitive matching.\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: trie-lib - fix issue with reference radix\nDESCRIPTION: This entry highlights a bug fix within the `trie-lib` component, specifically addressing an issue related to the reference radix. This fix likely improved the correctness and efficiency of the trie data structure used for spell checking. The fix addresses issue [#3849](https://github.com/streetsidesoftware/cspell/issues/3849).\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-config-lib/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Support automatic creation of cspell-tools.config.yaml\nDESCRIPTION: This bug fix implements support for the automatic creation of the `cspell-tools.config.yaml` configuration file. The tool can generate this file during setup.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-strong-weak-map/test-cspell-strong-weak-map/CHANGELOG.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nsupport automatic creation of `cspell-tools.config.yaml` ([#4631](https://github.com/streetsidesoftware/cspell/issues/4631)) ([f9fea67](https://github.com/streetsidesoftware/cspell/commit/f9fea67fc5aa8b6e4dcdc8b1bd9af8db2e22e62b))\n```\n\n----------------------------------------\n\nTITLE: TypeScript Text Document Representation\nDESCRIPTION: Models a text document for spell-checking, including content, URI, and position information. Supports various document sources and in-memory operations.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* TextDocument class or interface */\n```\n\n----------------------------------------\n\nTITLE: Executing scripts and handling process termination in Node.js\nDESCRIPTION: This snippet involves process control functions like execArgv, exit, and handling uncaught exceptions. These are used to execute command-line arguments, terminate processes gracefully, and catch unhandled errors to ensure stability of Node.js applications.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/node.txt#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nexecArgv\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nexit\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nuncaughtException\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Dictionary File\nDESCRIPTION: This shell command uses the `touch` utility to create an empty file named `project-words.txt`. This file will serve as the custom dictionary where project-specific words can be added for CSpell to recognize.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/getting-started.mdx#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ntouch project-words.txt\n```\n\n----------------------------------------\n\nTITLE: Creating TikZ Diagrams and Documentation in LaTeX with Comment Annotations\nDESCRIPTION: This snippet shows LaTeX source for a TikZ-based cheat sheet, including comments describing command usage and configuration tips. It elaborates on path reusage, behavior modifications, and color specifications within TikZ, aimed at users creating graphical diagrams with consistent styling and efficient code reuse.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/MartinThoma/LaTeX-examples/snapshot.txt#_snippet_2\n\nLANGUAGE: LaTeX\nCODE:\n```\n% Path Reusage \\myCode{postaction}\n// Comment about TikZ path reusage\n// Describes how to reuse path styles and behaviors for consistency\n```\n\n----------------------------------------\n\nTITLE: Defining Registry Operation Constants in C\nDESCRIPTION: This snippet from the mbk_registry.h header defines integer constants used for registry operations and commands within the mbk project. These constants represent specific registry actions or markers (e.g., REGPLS, REGMNU, DIRLIN) and standardize references to these operations. These macros simplify the implementation of registry handling routines by providing easy-to-read symbolic names tied to integral codes.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_22\n\nLANGUAGE: C\nCODE:\n```\n#define REGPLS 94\n#define REGMNU 98\n#define REGSMNU 101\n#define DIRLIN 110\n#define DIRFTR 111\n#define SCANKW 115\n#define GETKEYW 116\n#define LKUPWHO 117\n#define EDITWHO 122\n#define EDITNAX 124\n#define CHINFO 127\n#define CHERR 129\n#define REGCR 130\n#define TMPLCH 133\n```\n\n----------------------------------------\n\nTITLE: Using Yar Server Exception Methods\nDESCRIPTION: This code presents methods for retrieving exception types related to a Yar server. It requires the Yar extension and facilitates handling exceptions on the server-side. It is vital for error management when using the Yar RPC framework.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/php.txt#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nYar_Server_Exception::getType\n```\n\n----------------------------------------\n\nTITLE: LaTeX TikZ 3D Rendering Configuration\nDESCRIPTION: Code snippets for configuring 3D surface rendering in TikZ. These examples show shader and colormap settings for 3D mathematical surfaces.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/MartinThoma/LaTeX-examples/snapshot.txt#_snippet_14\n\nLANGUAGE: LaTeX\nCODE:\n```\nsurf, shader=faceted interp,\n```\n\nLANGUAGE: LaTeX\nCODE:\n```\ncolormap/greenyellow,\n```\n\nLANGUAGE: LaTeX\nCODE:\n```\n[tdplot_main_coords,\n```\n\n----------------------------------------\n\nTITLE: Using Zlib Functions\nDESCRIPTION: This snippet shows zlib functions in PHP, which involves `zlib://`, `zlib_decode`, `zlib_encode`, and `zlib_get_coding_type` for encoding and decoding data using the zlib library. Requires the zlib extension installed and enabled.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/php.txt#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\nzlib://\nzlib_decode\nzlib_encode\nzlib_get_coding_type\n```\n\n----------------------------------------\n\nTITLE: TypeScript Settings Store Tests\nDESCRIPTION: Tests for configuration store logic, verifying correct loading, saving, and resetting of settings.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* cfgStore test code */\n```\n\n----------------------------------------\n\nTITLE: Customizing Vowel Insertion/Deletion/Replacement Costs in cspell Configuration (YAML)\nDESCRIPTION: This YAML snippet configures the character set 'aeiouy', reducing the cost of vowel insertion, deletion, and replacement actions. By defining 'insDel' as 50 and 'replace' as 45, the snippet sets insertion/deletion of vowels to be less expensive, and replacement of one vowel with another even cheaper, supporting more flexible suggestions in languages where such changes are frequent or phonetically reasonable. Dependencies: cspell configuration file syntax. Inputs: vowel characters and cost values. Output: Adjusted spell suggestion behavior favoring vowel edits. Limitation: Only applies to specified character set; default edit cost remains 100.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/Configuration/auto_properties.md#_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\n  map: 'aeiouy'\n  insDel: 50     # Make it is cheaper to insert or delete a vowel.\n  replace: 45    # It is even cheaper to replace one with another.\n```\n\n----------------------------------------\n\nTITLE: Advanced Spell Checking Rules with Language and Dictionaries\nDESCRIPTION: This YAML code snippet showcases advanced spell-checking rules, including setting the language, dictionaries, and case sensitivity based on scope. The snippet highlights the ability to configure different settings for various parts of the document. It requires no dependencies. The output configures the spell checker behavior.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-grammar/README.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nrules:\n  comment:\n    language: en\n  string:\n    language: en,fr\n    dictionaries: ['marketing-terms'],\n    caseSensitive: true\n  string.javascript:\n    caseSensitive: false\n```\n\n----------------------------------------\n\nTITLE: Creating or Updating a Specific Integration Test Snapshot\nDESCRIPTION: Creates a new snapshot or updates an existing one for a specific integration test repository using the `tester.js` script. The `-u` flag indicates an update/creation, and `<owner/repository>` specifies the target repository. The resulting snapshot, containing normalized CSpell output, is stored in `snapshots/owner/repository/snapshot.txt`.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./tester.js check -u <owner/repository>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn\nDESCRIPTION: This snippet shows the command to install the necessary dependencies for the project using Yarn. It assumes that Yarn is already installed on the system.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/yarn/yarn2/test-eslint-plugin/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: E2EIdentityEnrollment.test.ts: Testing Device Enrollment\nDESCRIPTION: This test script checks the enrollment behavior of a device in an end-to-end identity verification process, ensuring that a device triggers initial enrollment when it is marked as a new or fresh device. It relies on mock data and testing frameworks to validate enrollment flow, with dependencies on 'tsyringe' for dependency injection and '@wireapp' modules for core messaging protocols.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {CredentialType} from '@wireapp/core/lib/messagingProtocols';\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {container} from 'tsyringe';\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nshould trigger an initial enrollement when device is a fresh\n```\n\n----------------------------------------\n\nTITLE: Checking Specific File Types\nDESCRIPTION: This shell command runs CSpell to perform a spell check on all Markdown files (`.md`) within the current directory and its subdirectories. This is useful for iteratively checking different file types when setting up CSpell.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/getting-started.mdx#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncspell \"**/*.md\"\n```\n\n----------------------------------------\n\nTITLE: Unmarshalling FileCAPool from Caddyfile Directives (Go)\nDESCRIPTION: The UnmarshalCaddyfile method for FileCAPool enables parsing of Caddyfile configuration into a FileCAPool struct, which manages trusted CA certificate PEM files in caddytls. The method reads file paths or directives and appends them to the TrustedCACertPEMFiles slice, reporting errors through d.Errf for unrecognized or malformed input. Dependencies include caddyfile.Dispenser and Caddy modules. Input: a caddyfile.Dispenser containing configuration tokens; output: updates the list of trusted CA certificate files.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_79\n\nLANGUAGE: Go\nCODE:\n```\n// UnmarshalCaddyfile parses file paths from the Caddyfile.\nfunc (fcap *FileCAPool) UnmarshalCaddyfile(d *caddyfile.Dispenser) error {\n    for d.Next() {\n        fcap.TrustedCACertPEMFiles = append(fcap.TrustedCACertPEMFiles, d.Val())\n    }\n    return nil\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript for Document Querying and DOM Manipulation\nDESCRIPTION: This snippet involves JavaScript code querying DOM elements using 'querySelectorAll' to select sub-navigation elements, and possibly manipulating class names, styles, or event handlers. It requires JavaScript environment with DOM API support and is used for dynamic webpage interaction. Inputs are DOM selections, outputs are element collections.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/microsoft/TypeScript-Website/snapshot.txt#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\npackages/typescriptlang-org/src/templates/tsconfigReference.tsx:97:11     - Unknown word (subnavs)    -- const subnavs = document.querySelectorAll\n```\n\n----------------------------------------\n\nTITLE: Declaring OpenAL Foldback Request Functions (C)\nDESCRIPTION: Declares C functions for controlling OpenAL foldback mode. `alRequestFoldbackStart` initiates the foldback process using specified parameters and a callback. `alRequestFoldbackStop` halts the foldback process.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/AdaDoom3/AdaDoom3/snapshot.txt#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nAL_APIENTRY alRequestFoldbackStart(ALenum mode,ALsizei count,ALsizei length,ALfloat *mem,LPALFOLDBACKCALLBACK callback);\n```\n\nLANGUAGE: c\nCODE:\n```\nAL_APIENTRY alRequestFoldbackStop(void);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Constructor Usage with BigInt in JavaScript\nDESCRIPTION: Example showing incorrect usage of BigInt with the new operator, which is not allowed as BigInt is not a constructor in JavaScript.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/eslint/eslint/snapshot.txt#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst corge = new BigInt(900719\n```\n\n----------------------------------------\n\nTITLE: Indexing Bytes\nDESCRIPTION: This snippet tests the `.index()` method, which is used to find the index of a specified substring within a bytes object. The input is a bytes object, and the output is the index of the provided search string. The expected output depends on the presence of the provided substring.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nb\"abcd\".index(b\"cdaaaaa\")\n```\n\n----------------------------------------\n\nTITLE: TypeScript Trace Utility Module\nDESCRIPTION: Provides functions to implement tracing logic within cspell, useful for debugging and logging operational flow. Depends on configuration and environment settings.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_48\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-lib/src/lib/trace.ts\n```\n\n----------------------------------------\n\nTITLE: Support spell checking utf16 files\nDESCRIPTION: This feature adds support for spell-checking UTF-16 files with a Byte Order Mark (BOM).  The purpose of this is to provide more comprehensive file format support.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-strong-weak-map/test-cspell-strong-weak-map/CHANGELOG.md#_snippet_17\n\nLANGUAGE: text\nCODE:\n```\nSupport spell checking utf16 files with BOM ([#4232](https://github.com/streetsidesoftware/cspell/issues/4232)) ([8062f62](https://github.com/streetsidesoftware/cspell/commit/8062f621dff0432cd53ae17b1a22aaffd61f1b3b))\n```\n\n----------------------------------------\n\nTITLE: Using a custom reporter in cspell\nDESCRIPTION: This command spell checks all .js files recursively and uses the '@cspell/cspell-json-reporter' reporter.  This overrides any configurations.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell/static/help-lint.txt#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncspell \"**/*.js\" --reporter @cspell/cspell-json-reporter\n```\n\n----------------------------------------\n\nTITLE: TypeScript Documentation for Performance Module\nDESCRIPTION: Contains README documentation describing how to use the performance measurement utilities and best practices for profiling.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_14\n\nLANGUAGE: Markdown\nCODE:\n```\n/* README content for perf module */\n```\n\n----------------------------------------\n\nTITLE: Support spell checking utf16 files with BOM\nDESCRIPTION: This feature adds support for spellchecking UTF-16 files that include a Byte Order Mark (BOM).  The code now handles these specific file types correctly.  The dependency is the file reading and spellchecking libraries, probably related to cspell's core functionality.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/CHANGELOG.md#_snippet_14\n\nLANGUAGE: git\nCODE:\n```\nSupport spell checking utf16 files with BOM ([#4232](https://github.com/streetsidesoftware/cspell/issues/4232)) ([8062f62](https://github.com/streetsidesoftware/cspell/commit/8062f621dff0432cd53ae17b1a22aaffd61f1b3b))\n```\n\n----------------------------------------\n\nTITLE: Defining openGiphy Function Prop (TypeScript)\nDESCRIPTION: Defines the 'openGiphy' function signature within the UseGiphyProps interface.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\nopenGiphy: (inputValue: string\n```\n\n----------------------------------------\n\nTITLE: Giphy Service API Client Implementation\nDESCRIPTION: Implementation of the GiphyService class that directly interacts with the Giphy API through the Wire API client. It provides methods for different Giphy operations.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_85\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class GiphyService {\n    // Methods for interacting with Giphy API\n    return this.apiClient.api.giphy.getGiphyById(id);\n    return this.apiClient.api.giphy.getGiphyByIds({ids});\n    return this.apiClient.api.giphy.getGiphyRandom({tag});\n    return this.apiClient.api.giphy.getGiphySearch(options);\n}\n```\n\n----------------------------------------\n\nTITLE: KeyName Constants in DOM Implementation\nDESCRIPTION: Keyboard key name constants used in the DOM implementation. These represent special keyboard keys and their descriptions.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/dart-lang/sdk/snapshot.txt#_snippet_15\n\nLANGUAGE: Dart\nCODE:\n```\n/** The Nonconvert (Don't Convert) key */\n\n/** The Print Screen (PrintScrn, SnapShot) key */\n\n(Stress Mark, Greek Oxia, Tonos, Dead Eacute)\n\nAbode, Umlaut, Greek Dialytika,\n\nThe Combining Greek Ypogegrammeni (Greek Non-Spacing Iota\n```\n\n----------------------------------------\n\nTITLE: Working with v8 Serialization and Deserialization in JavaScript\nDESCRIPTION: Methods and classes for serializing and deserializing JavaScript values using the v8 engine. Includes creating serializers/deserializers, manipulating array buffers, and reading/writing various data types.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/node.txt#_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\n// Creating serializers and deserializers\nconst serializer = new v8.Serializer();\nconst deserializer = new v8.Deserializer(buffer);\n\n// Serializing values\nv8.serialize(value);\nserializer.writeValue(value);\nserializer.writeHeader();\nserializer.writeUint32(value);\nserializer.writeUint64(hi, lo);\nserializer.writeDouble(value);\nserializer.writeRawBytes(buffer);\nserializer.releaseBuffer();\n\n// Deserializing values\nv8.deserialize(buffer);\ndeserializer.readHeader();\ndeserializer.readValue();\ndeserializer.readUint32();\ndeserializer.readUint64();\ndeserializer.readDouble();\ndeserializer.readRawBytes(length);\ndeserializer.getWireFormatVersion();\n\n// Working with ArrayBuffers\nserializer.transferArrayBuffer(id, arrayBuffer);\ndeserializer.transferArrayBuffer(id, arrayBuffer);\n\n// Custom serialization hooks\nserializer._writeHostObject(object);\nserializer._getDataCloneError(message);\nserializer._getSharedArrayBufferId(sharedArrayBuffer);\nserializer._setTreatArrayBufferViewsAsHostObjects(flag);\ndeserializer._readHostObject();\n```\n\n----------------------------------------\n\nTITLE: Defining and Using a 'pingback' Flag in Go\nDESCRIPTION: Defines a string flag named `pingback` using `fl.String` (likely from the `flag` or `pflag` package) and later checks if it has been set (`pingbackFlag != \"\"`). This flag is used to enable or configure a pingback mechanism for Caddy commands.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_22\n\nLANGUAGE: Go\nCODE:\n```\npingbackFlag := fl.String(\"pingback\")\n```\n\nLANGUAGE: Go\nCODE:\n```\nif pingbackFlag != \"\" {\n```\n\nLANGUAGE: Go\nCODE:\n```\n// craft the command with a pingback address and with a\n```\n\nLANGUAGE: Go\nCODE:\n```\nos.Args[0], \"run\", \"--pingback\", ln.Addr().String()\n```\n\n----------------------------------------\n\nTITLE: Shadow root template check in Svelte element parser\nDESCRIPTION: Condition checking if a parent element is a shadowroot template in the Svelte compiler's element state handling.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/sveltejs/svelte/snapshot.txt#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nslot' && !parent_is_shadowroot_template(parser.stack\n```\n\n----------------------------------------\n\nTITLE: Constructing Middleware Handlers for Authentication in Caddy's Go HTTP Module\nDESCRIPTION: This snippet details the behavior of middleware handlers managing authentication within the Caddy HTTP framework in Go. It iterates over registered authentication providers, casts them to the appropriate interface, and uses them to authenticate incoming HTTP requests. It also highlights error handling by returning HTTP 401 Unauthorized responses when authentication fails. The code depends on caddyhttp for middleware chaining and the caddyserver base framework.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_42\n\nLANGUAGE: Go\nCODE:\n```\nfor modName, modIface := range mods.(map[string]interface{}) {\n    Providers[modName] = modIface.(Authenticator)\n}\n\nfunc (h *Handler) ServeHTTP(w http.ResponseWriter, r *http.Request, next caddyhttp.Handler) error {\n    // Authentication logic\n    if !authorized {\n        return caddyhttp.Error(http.StatusUnauthorized, \"Unauthorized\")\n    }\n    return next.ServeHTTP(w, r)\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Known Issues File Content in YAML Format\nDESCRIPTION: This snippet shows how to represent known spelling issues in a YAML file, preceded by a comment to disable spell checking. Each issue is listed as a string item in the YAML list, maintaining the path, line, character, and word format. This format allows for alternative structured storage of known issues compatible with cspell.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/rfc/rfc-0004 known issues/README.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# cspell:disable\n- django/conf/global_settings.py:108:26 (Luxembourgish)\n- django/conf/locale/fr/*.py:*:* (octobre)\n- tests/aggregation_regress/tests.py:728:11 (realiased)\n- tests/aggregation_regress/tests.py:812:8 (referer)\n- tests/aggregation_regress/tests.py:915:102 (grep)\n```\n\n----------------------------------------\n\nTITLE: Defining/Using cancelMessageEditing Function (TypeScript)\nDESCRIPTION: Defines or calls a function named 'cancelMesssageEditingWithDraftReset' (potential typo for Message) within the useMessageHandling hook.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_59\n\nLANGUAGE: typescript\nCODE:\n```\nconst cancelMesssageEditingWithDraftReset\n```\n\nLANGUAGE: typescript\nCODE:\n```\ncancelMesssageEditingWithDraftReset\n```\n\nLANGUAGE: typescript\nCODE:\n```\ncancelMesssageEditingWithDraftReset\n```\n\nLANGUAGE: typescript\nCODE:\n```\ncancelMesssageEditingWithDraftReset\n```\n\n----------------------------------------\n\nTITLE: TypeScript Tools and Build Scripts\nDESCRIPTION: Includes scripts for application execution, build process, and environment setup, mainly using modern JavaScript modules and containing project configuration files.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_87\n\nLANGUAGE: JavaScript\nCODE:\n```\npackages/cspell-tools/bin.mjs\n```\n\nLANGUAGE: Markdown\nCODE:\n```\npackages/cspell-tools/CHANGELOG.md\n```\n\nLANGUAGE: Markdown\nCODE:\n```\npackages/cspell-tools/LICENSE\n```\n\nLANGUAGE: Markdown\nCODE:\n```\npackages/cspell-tools/README.md\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\npackages/cspell-tools/src/app.ts\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-tools/src/AppOptions.ts\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\npackages/cspell-tools/src/build.ts\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\npackages/cspell-tools/src/compile.ts\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\npackages/cspell-tools/src/compiler/compile.ts\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-tools/src/compiler/CompileOptions.ts\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\npackages/cspell-tools/src/compiler/createCompileRequest.ts\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\npackages/cspell-tools/src/compiler/createWordsCollection.test.ts\n```\n\n----------------------------------------\n\nTITLE: Priority Sorting Function for Notifications\nDESCRIPTION: A sorting function that uses a priority calculation to order grouped notifications. The 'prio' function assigns priority values to notification items, and they are then sorted in ascending order based on these values.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_89\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst prio = (item: GroupedNotifications)\n// ...\n.sort((a, b) => prio(a) - prio(b));\n```\n\n----------------------------------------\n\nTITLE: Support Global Globs Feature\nDESCRIPTION: This feature adds support for global globs. Global globs provide a way to specify patterns to include or exclude files across the entire project. This allows for a broader scope and more flexibility in the file selection process, making it easier to configure the tool.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-glob/CHANGELOG.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Defining Custom Dictionaries in CSpell Configuration\nDESCRIPTION: Example of how to define and use custom dictionaries in CSpell configurations. This shows how to create a dictionary reference to a local word list file and include it in the active dictionaries.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/Configuration/auto_properties.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n\"dictionaryDefinitions\": [\n  { \"name\": \"custom-words\", \"path\": \"./custom-words.txt\"}\n],\n\"dictionaries\": [\"custom-words\"]\n```\n\n----------------------------------------\n\nTITLE: Using the process object for process control and error handling\nDESCRIPTION: This snippet includes process-related methods and properties like process.nextTick(), process.on(), process.send(), process.stderr, process.stdout, and process.setUncaughtExceptionCaptureCallback(). These control event loop tasks, handle inter-process communication, and set up uncaught exception handling to improve application resilience.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/node.txt#_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nprocess.nextTick()\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nprocess.on( error )\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nprocess.send()\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nprocess.stderr\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nprocess.setUncaughtExceptionCaptureCallback()\n```\n\n----------------------------------------\n\nTITLE: Mapping HTML Entity to Character Code in JavaScript\nDESCRIPTION: These code snippets represent individual entries within a JavaScript object used by the Svelte compiler to map specific HTML entity names to their corresponding numeric character codes. The key is a string representing the entity name followed by a semicolon, and the value is an integer representing the Unicode code point. This map allows the parser to resolve HTML entity references into actual characters during template compilation.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/sveltejs/svelte/snapshot.txt#_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\n'nvge;': 8805,\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n'ocir;': 8858,\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n'rarr;': 8594,\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n'uuml;': 252,\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n'yuml;': 255,\n```\n\n----------------------------------------\n\nTITLE: RGI Emoji Modifier Sequence Definitions\nDESCRIPTION: This data snippet lists RGI Emoji Modifier Sequences. Each line follows a specific format: space-separated Unicode codepoints for the sequence (e.g., '1F481 1F3FE'); followed by '; RGI_Emoji_Modifier_Sequence ;'; the descriptive name of the emoji including the skin tone (e.g., 'person tipping hand: medium-dark skin tone'); then '#'; the Emoji version (e.g., 'E1.0'); a count '[1]'; and finally the visual emoji representation in parentheses (e.g., '(💁🏾)').\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-trie-lib/Samples/emoji-sequences.txt#_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n1F481 1F3FE   ; RGI_Emoji_Modifier_Sequence  ; person tipping hand: medium-dark skin tone                     # E1.0   [1] (💁🏾)\n1F481 1F3FF   ; RGI_Emoji_Modifier_Sequence  ; person tipping hand: dark skin tone                            # E1.0   [1] (💁🏿)\n1F482 1F3FB   ; RGI_Emoji_Modifier_Sequence  ; guard: light skin tone                                         # E1.0   [1] (💂🏻)\n1F482 1F3FC   ; RGI_Emoji_Modifier_Sequence  ; guard: medium-light skin tone                                  # E1.0   [1] (💂🏼)\n1F482 1F3FD   ; RGI_Emoji_Modifier_Sequence  ; guard: medium skin tone                                        # E1.0   [1] (💂🏽)\n1F482 1F3FE   ; RGI_Emoji_Modifier_Sequence  ; guard: medium-dark skin tone                                   # E1.0   [1] (💂🏾)\n1F482 1F3FF   ; RGI_Emoji_Modifier_Sequence  ; guard: dark skin tone                                          # E1.0   [1] (💂🏿)\n1F483 1F3FB   ; RGI_Emoji_Modifier_Sequence  ; woman dancing: light skin tone                                 # E1.0   [1] (💃🏻)\n1F483 1F3FC   ; RGI_Emoji_Modifier_Sequence  ; woman dancing: medium-light skin tone                          # E1.0   [1] (💃🏼)\n1F483 1F3FD   ; RGI_Emoji_Modifier_Sequence  ; woman dancing: medium skin tone                                # E1.0   [1] (💃🏽)\n1F483 1F3FE   ; RGI_Emoji_Modifier_Sequence  ; woman dancing: medium-dark skin tone                           # E1.0   [1] (💃🏾)\n1F483 1F3FF   ; RGI_Emoji_Modifier_Sequence  ; woman dancing: dark skin tone                                  # E1.0   [1] (💃🏿)\n1F485 1F3FB   ; RGI_Emoji_Modifier_Sequence  ; nail polish: light skin tone                                   # E1.0   [1] (💅🏻)\n1F485 1F3FC   ; RGI_Emoji_Modifier_Sequence  ; nail polish: medium-light skin tone                            # E1.0   [1] (💅🏼)\n1F485 1F3FD   ; RGI_Emoji_Modifier_Sequence  ; nail polish: medium skin tone                                  # E1.0   [1] (💅🏽)\n1F485 1F3FE   ; RGI_Emoji_Modifier_Sequence  ; nail polish: medium-dark skin tone                             # E1.0   [1] (💅🏾)\n1F485 1F3FF   ; RGI_Emoji_Modifier_Sequence  ; nail polish: dark skin tone                                    # E1.0   [1] (💅🏿)\n1F486 1F3FB   ; RGI_Emoji_Modifier_Sequence  ; person getting massage: light skin tone                        # E1.0   [1] (💆🏻)\n1F486 1F3FC   ; RGI_Emoji_Modifier_Sequence  ; person getting massage: medium-light skin tone                 # E1.0   [1] (💆🏼)\n1F486 1F3FD   ; RGI_Emoji_Modifier_Sequence  ; person getting massage: medium skin tone                       # E1.0   [1] (💆🏽)\n1F486 1F3FE   ; RGI_Emoji_Modifier_Sequence  ; person getting massage: medium-dark skin tone                  # E1.0   [1] (💆🏾)\n1F486 1F3FF   ; RGI_Emoji_Modifier_Sequence  ; person getting massage: dark skin tone                         # E1.0   [1] (💆🏿)\n1F487 1F3FB   ; RGI_Emoji_Modifier_Sequence  ; person getting haircut: light skin tone                        # E1.0   [1] (💇🏻)\n1F487 1F3FC   ; RGI_Emoji_Modifier_Sequence  ; person getting haircut: medium-light skin tone                 # E1.0   [1] (💇🏼)\n1F487 1F3FD   ; RGI_Emoji_Modifier_Sequence  ; person getting haircut: medium skin tone                       # E1.0   [1] (💇🏽)\n1F487 1F3FE   ; RGI_Emoji_Modifier_Sequence  ; person getting haircut: medium-dark skin tone                  # E1.0   [1] (💇🏾)\n1F487 1F3FF   ; RGI_Emoji_Modifier_Sequence  ; person getting haircut: dark skin tone                         # E1.0   [1] (💇🏿)\n1F48F 1F3FB   ; RGI_Emoji_Modifier_Sequence  ; kiss: light skin tone                                          # E13.1  [1] (💏🏻)\n1F48F 1F3FC   ; RGI_Emoji_Modifier_Sequence  ; kiss: medium-light skin tone                                   # E13.1  [1] (💏🏼)\n1F48F 1F3FD   ; RGI_Emoji_Modifier_Sequence  ; kiss: medium skin tone                                         # E13.1  [1] (💏🏽)\n1F48F 1F3FE   ; RGI_Emoji_Modifier_Sequence  ; kiss: medium-dark skin tone                                    # E13.1  [1] (💏🏾)\n1F48F 1F3FF   ; RGI_Emoji_Modifier_Sequence  ; kiss: dark skin tone                                           # E13.1  [1] (💏🏿)\n1F491 1F3FB   ; RGI_Emoji_Modifier_Sequence  ; couple with heart: light skin tone                             # E13.1  [1] (💑🏻)\n1F491 1F3FC   ; RGI_Emoji_Modifier_Sequence  ; couple with heart: medium-light skin tone                      # E13.1  [1] (💑🏼)\n1F491 1F3FD   ; RGI_Emoji_Modifier_Sequence  ; couple with heart: medium skin tone                            # E13.1  [1] (💑🏽)\n1F491 1F3FE   ; RGI_Emoji_Modifier_Sequence  ; couple with heart: medium-dark skin tone                       # E13.1  [1] (💑🏾)\n1F491 1F3FF   ; RGI_Emoji_Modifier_Sequence  ; couple with heart: dark skin tone                              # E13.1  [1] (💑🏿)\n1F4AA 1F3FB   ; RGI_Emoji_Modifier_Sequence  ; flexed biceps: light skin tone                                 # E1.0   [1] (💪🏻)\n1F4AA 1F3FC   ; RGI_Emoji_Modifier_Sequence  ; flexed biceps: medium-light skin tone                          # E1.0   [1] (💪🏼)\n1F4AA 1F3FD   ; RGI_Emoji_Modifier_Sequence  ; flexed biceps: medium skin tone                                # E1.0   [1] (💪🏽)\n1F4AA 1F3FE   ; RGI_Emoji_Modifier_Sequence  ; flexed biceps: medium-dark skin tone                           # E1.0   [1] (💪🏾)\n1F4AA 1F3FF   ; RGI_Emoji_Modifier_Sequence  ; flexed biceps: dark skin tone                                  # E1.0   [1] (💪🏿)\n1F574 1F3FB   ; RGI_Emoji_Modifier_Sequence  ; person in suit levitating: light skin tone                     # E4.0   [1] (🕴🏻)\n1F574 1F3FC   ; RGI_Emoji_Modifier_Sequence  ; person in suit levitating: medium-light skin tone              # E4.0   [1] (🕴🏼)\n1F574 1F3FD   ; RGI_Emoji_Modifier_Sequence  ; person in suit levitating: medium skin tone                    # E4.0   [1] (🕴🏽)\n1F574 1F3FE   ; RGI_Emoji_Modifier_Sequence  ; person in suit levitating: medium-dark skin tone               # E4.0   [1] (🕴🏾)\n1F574 1F3FF   ; RGI_Emoji_Modifier_Sequence  ; person in suit levitating: dark skin tone                      # E4.0   [1] (🕴🏿)\n1F575 1F3FB   ; RGI_Emoji_Modifier_Sequence  ; detective: light skin tone                                     # E2.0   [1] (🕵🏻)\n1F575 1F3FC   ; RGI_Emoji_Modifier_Sequence  ; detective: medium-light skin tone                              # E2.0   [1] (🕵🏼)\n1F575 1F3FD   ; RGI_Emoji_Modifier_Sequence  ; detective: medium skin tone                                    # E2.0   [1] (🕵🏽)\n1F575 1F3FE   ; RGI_Emoji_Modifier_Sequence  ; detective: medium-dark skin tone                               # E2.0   [1] (🕵🏾)\n1F575 1F3FF   ; RGI_Emoji_Modifier_Sequence  ; detective: dark skin tone                                      # E2.0   [1] (🕵🏿)\n1F57A 1F3FB   ; RGI_Emoji_Modifier_Sequence  ; man dancing: light skin tone                                   # E3.0   [1] (🕺🏻)\n1F57A 1F3FC   ; RGI_Emoji_Modifier_Sequence  ; man dancing: medium-light skin tone                            # E3.0   [1] (🕺🏼)\n1F57A 1F3FD   ; RGI_Emoji_Modifier_Sequence  ; man dancing: medium skin tone                                  # E3.0   [1] (🕺🏽)\n1F57A 1F3FE   ; RGI_Emoji_Modifier_Sequence  ; man dancing: medium-dark skin tone                             # E3.0   [1] (🕺🏾)\n1F57A 1F3FF   ; RGI_Emoji_Modifier_Sequence  ; man dancing: dark skin tone                                    # E3.0   [1] (🕺🏿)\n1F590 1F3FB   ; RGI_Emoji_Modifier_Sequence  ; hand with fingers splayed: light skin tone                     # E1.0   [1] (🖐🏻)\n1F590 1F3FC   ; RGI_Emoji_Modifier_Sequence  ; hand with fingers splayed: medium-light skin tone              # E1.0   [1] (🖐🏼)\n1F590 1F3FD   ; RGI_Emoji_Modifier_Sequence  ; hand with fingers splayed: medium skin tone                    # E1.0   [1] (🖐🏽)\n1F590 1F3FE   ; RGI_Emoji_Modifier_Sequence  ; hand with fingers splayed: medium-dark skin tone               # E1.0   [1] (🖐🏾)\n1F590 1F3FF   ; RGI_Emoji_Modifier_Sequence  ; hand with fingers splayed: dark skin tone                      # E1.0   [1] (🖐🏿)\n1F595 1F3FB   ; RGI_Emoji_Modifier_Sequence  ; middle finger: light skin tone                                 # E1.0   [1] (🖕🏻)\n1F595 1F3FC   ; RGI_Emoji_Modifier_Sequence  ; middle finger: medium-light skin tone                          # E1.0   [1] (🖕🏼)\n1F595 1F3FD   ; RGI_Emoji_Modifier_Sequence  ; middle finger: medium skin tone                                # E1.0   [1] (🖕🏽)\n1F595 1F3FE   ; RGI_Emoji_Modifier_Sequence  ; middle finger: medium-dark skin tone                           # E1.0   [1] (🖕🏾)\n1F595 1F3FF   ; RGI_Emoji_Modifier_Sequence  ; middle finger: dark skin tone                                  # E1.0   [1] (🖕🏿)\n1F596 1F3FB   ; RGI_Emoji_Modifier_Sequence  ; vulcan salute: light skin tone                                 # E1.0   [1] (🖖🏻)\n1F596 1F3FC   ; RGI_Emoji_Modifier_Sequence  ; vulcan salute: medium-light skin tone                          # E1.0   [1] (🖖🏼)\n1F596 1F3FD   ; RGI_Emoji_Modifier_Sequence  ; vulcan salute: medium skin tone                                # E1.0   [1] (🖖🏽)\n1F596 1F3FE   ; RGI_Emoji_Modifier_Sequence  ; vulcan salute: medium-dark skin tone                           # E1.0   [1] (🖖🏾)\n1F596 1F3FF   ; RGI_Emoji_Modifier_Sequence  ; vulcan salute: dark skin tone                                  # E1.0   [1] (🖖🏿)\n1F645 1F3FB   ; RGI_Emoji_Modifier_Sequence  ; person gesturing NO: light skin tone                           # E1.0   [1] (🙅🏻)\n1F645 1F3FC   ; RGI_Emoji_Modifier_Sequence  ; person gesturing NO: medium-light skin tone                    # E1.0   [1] (🙅🏼)\n1F645 1F3FD   ; RGI_Emoji_Modifier_Sequence  ; person gesturing NO: medium skin tone                          # E1.0   [1] (🙅🏽)\n1F645 1F3FE   ; RGI_Emoji_Modifier_Sequence  ; person gesturing NO: medium-dark skin tone                     # E1.0   [1] (🙅🏾)\n```\n\n----------------------------------------\n\nTITLE: Defining File Overrides Configuration in JavaScript\nDESCRIPTION: This snippet shows how to configure the 'overrides' setting in cspell to apply specific spell checking settings to matched files. It uses JSON arrays and objects where each override object specifies patterns like filename globs and language IDs. This allows treating certain file extensions as different languages or applying language-specific dictionaries. Dependencies include proper JSON formatting and an understanding of glob patterns and language identifiers. Inputs are file matching glob strings and language identifiers, and output influences spell checking behaviors for those files. Limitations are that patterns must be valid and recognized by cspell.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/Configuration/auto_properties.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n\"overrides\": [\n  // Force `*.hrr` and `*.crr` files to be treated as `cpp` files:\n  {\n    \"filename\": \"**/{*.hrr,*.crr}\",\n    \"languageId\": \"cpp\"\n  },\n  // Force `*.txt` to use the Dutch dictionary (Dutch dictionary needs to be installed separately):\n  {\n    \"language\": \"nl\",\n    \"filename\": \"**/dutch/**/*.txt\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Component Imports from Rebass in MDX\nDESCRIPTION: JavaScript code showing React component imports from the Rebass library. This demonstrates how to use external React UI components within MDX documents.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/mdx-js/mdx/snapshot.txt#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Box, Heading} from 'rebass'\n```\n\n----------------------------------------\n\nTITLE: Conceptual Trie Data Representation\nDESCRIPTION: Illustrates how a list of sorted words can be represented as a series of operations for compression in the Trie structure.  The operations use symbols like `<` for removing characters and `$` for the end of the word, achieving compression through common prefixes.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-trie-lib/README.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\njoust$\n_____er$\n_____<<\n_____ing$\n__<<<<<<\n__y$\n___ful$\n______ler$\n________<\n________st$\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Python String Variable\nDESCRIPTION: This Python snippet shows how to assign a string to a variable `a` with preceding comment lines. It uses triple double quote strings as comments and a standard single-quoted string assignment, useful as an example of Python string usage and inline comments.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-grammar/samples/sample.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"\"\" This is a comment \"\"\"\n# so is this.\na = 'hello'\n```\n\n----------------------------------------\n\nTITLE: Playfair Cipher Implementation\nDESCRIPTION: Python implementation of the Playfair cipher, a manual symmetric encryption technique that encrypts pairs of letters. Includes the 5x5 grid creation without 'J' and chunking function for message processing.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Iterable\n\n# It's use was heavily promotedby Lord Playfair, hence the name\n\ndef chunker(seq: Iterable[str], size: int):\n    # Function to split input into chunks of specified size\n    pass\n\nalphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\"  # Note: No 'J' in the Playfair alphabet\n\n# Example encryption outputs\n'CFSUPM'\n'DQZSBYFSDZFMFNLOHFDRSG'\n'AVXETX'\n'UMBENF'\n'OEMHQHVCHESUKE'\n\n# Example decryption\ndecode(\"BMZFAZRZDH\", \"HAZARD\")\ndecode(\"HNBWBPQT\", \"AUTOMOBILE\")  # Returns 'DRIVINGX'\ndecode(\"SLYSSAQS\", \"CASTLE\")  # Returns 'ATXTACKX'\ndecode(\"CXRBANRLBALQ\", \"GREETING\")\n```\n\n----------------------------------------\n\nTITLE: Configuring CSpell in JavaScript\nDESCRIPTION: This snippet sets up a CSpell configuration in JavaScript, defining language settings, ignored patterns, and configuration options for spell checking within a project. It depends on the standard CSpell configuration schema and is used to customize spell checking behavior in the development environment.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-eslint-plugin/test-cspell-eslint-plugin-v9/words.txt#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  version: '0.2',\n  language: 'en',\n  ignorePaths: ['node_modules', 'dist'],\n  words: ['customword1', 'customword2'],\n  flagWords: ['TODO', 'FIXME'],\n  files: ['**/*.{js,ts,jsx,tsx,md}'],\n  ignoreRegExp: [\"^#\"],\n  documentFormatting: true\n};\n```\n\n----------------------------------------\n\nTITLE: Ford-Fulkerson Algorithm in Python\nDESCRIPTION: Implements the Ford-Fulkerson method for computing maximum flow in a network graph with a source node. It's an algorithm central in network flow problems and relies on residual capacities and augmenting paths.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_52\n\nLANGUAGE: Python\nCODE:\n```\n58:10 - Unknown word (fulkerson) -- def ford_fulkerson(graph: list, source\n```\n\n----------------------------------------\n\nTITLE: Testing bytes string stripping methods in Python\nDESCRIPTION: Asserts the functionality of `strip()`, `lstrip()`, and `rstrip()` methods on Python bytes objects to remove specified leading and/or trailing bytes.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nassert b\"www.example.com\".strip(b\"cmowz.\") == b\"example\"\nassert b\"www.example.com\".lstrip(b\"cmowz.\") == b\"example.com\"\nassert b\"mississippi\".rstrip(b\"ipz\") == b\"mississ\"\n```\n\n----------------------------------------\n\nTITLE: Preventing Duplicate Entries\nDESCRIPTION: This bug fix ensures that duplicate entries are not generated by default. This likely optimizes the spell checking process and improves efficiency. It prevents redundant storage of same data. The input is the entry generation process and the output is cleaned up data.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-pipe/CHANGELOG.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n* Do not generate duplicate entries by default ([#3793](https://github.com/streetsidesoftware/cspell/issues/3793)) ([f27d3c6](https://github.com/streetsidesoftware/cspell/commit/f27d3c68ad454719d71724f92693db57270827b9))\n```\n\n----------------------------------------\n\nTITLE: Specify Files to Ignore\nDESCRIPTION: This snippet indicates the use of a `.funcignore` file.  This file allows users to specify files and directories that should be excluded from spell checking by CSpell.  This is useful for ignoring files that contain intentionally misspelled words or are not relevant to the spell check.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell/fixtures/issue-6025/sample/getting_started.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nfuncignore\n```\n\n----------------------------------------\n\nTITLE: HTML Entity Mapping in JavaScript for Svelte Compiler\nDESCRIPTION: This code snippet contains JavaScript object mapping HTML entity names to their corresponding Unicode code points. These entity references are used during HTML parsing in the Svelte compiler to convert named entities to their actual characters.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/sveltejs/svelte/snapshot.txt#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Example of the entity mapping format based on the spell check errors\n{\n  'Emacr;': 274,\n  'Eogon;': 280,\n  'Gcirc;': 284,\n  'Hcirc;': 292,\n  'IJlig;': 306,\n  'Icirc;': 206,\n  // ... many more entities\n  'eqsim;': 8770,\n  'erarr;': 10609\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Suggestion Costs for Spellchecking in YAML\nDESCRIPTION: This YAML configuration provides real-world examples of assigning custom costs to character operations to improve dictionary suggestion accuracy for diverse languages, including accented vowels, keyboard adjacency, and special characters. It is designed for use in cspell's configuration or dictionary definition files and relies on the SuggestionCosts schema. Each entry defines a map, operation costs (insert, delete, replace, swap), and optional descriptions, affecting the weighting calculation for suggestions. The structure supports multiple entries and can handle unicode and multi-character sequences.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/rfc/rfc-0002 improve dictionary suggestions/README.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncosts:\n  - description: Accented Vowel Letters\n    map: 'aáâäãå|eéêë|iíîï|oóôöõ|uúûü|yÿ'\n    insDel: 50\n    replace: 10\n  - description: Vowels\n    map: 'aáâäãåeéêëiíîïoóôöõuúûüyÿ'\n    insDel: 50\n    replace: 25 # Replacing one vowel with another is cheap\n    swap: 25 # Swapping vowels are cheap\n  - description: Multi Character example\n    map: 'ß(ss)|œ(ae)|f(ph)'\n    replace: 10\n  - description: Appending / Removing Accent Marks\n    map: '\\u0641' # Shadda\n    insDel: 10\n  - description: Arabic Vowels\n    map: '\\u064f\\u0648\\u064e\\u0627\\u0650\\u64a\\u0652' # Damma, Wāw, Fatha, Alif, Kasra, Ya', Sukūn\n    insDel: 20\n    replace: 20\n  - description: Keyboard Adjacency\n    map: 'qwas|aszx|wesd|sdxc|erdf|dfcv|rtfg|fgvb|tygh|ghbn|yuhj|hjnm|uijk|jkm|iokl|opl'\n    replace: 50 # make it cheaper to replace near-by keyboard characters\n```\n\n----------------------------------------\n\nTITLE: Merged Configuration Result\nDESCRIPTION: This YAML snippet displays the merged result of the three configuration files above, illustrating how the `import` directive and the merging process work. Dictionaries are merged, considering negations, language settings, and words.  In this case, 'html' and 'softwareTerms' dictionaries will not be used due to negations and the language setting.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/Configuration/imports.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage: fr\ndictionaries:\n  - aws\n  - '!html'\n  - '!softwareTerms'\n  - html\nwords:\n  - root\n  - apple\n  - banana\n```\n\n----------------------------------------\n\nTITLE: v8 Heap and Performance Management in Node.js\nDESCRIPTION: Functions for inspecting and managing the v8 engine's memory, including heap statistics, heap snapshots, and garbage collection. These methods are useful for debugging memory issues and performance profiling.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/node.txt#_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n// Get heap statistics\nv8.getHeapStatistics();\nv8.getHeapSpaceStatistics();\nv8.getHeapCodeStatistics();\n\n// Create heap snapshots\nv8.getHeapSnapshot();\nv8.writeHeapSnapshot([filename]);\n\n// Work with code coverage\nv8.takeCoverage();\nv8.stopCoverage();\n\n// Other utilities\nv8.setFlagsFromString(flags);\nv8.cachedDataVersionTag();\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with pnpm\nDESCRIPTION: This snippet installs the project's dependencies using pnpm. It fetches all the required packages specified in the project's package.json file.  It does not take any parameters and the output is the installed dependencies.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pnpm i\n```\n\n----------------------------------------\n\nTITLE: Configuring regex patterns for ignoring content in CSpell\nDESCRIPTION: Example showing how to define named regex patterns for ignoring specific content like comments. Demonstrates creating and combining multiple patterns into a single named pattern.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/Configuration/index.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"patterns\": [\n    {\n        \"name\": \"comment-single-line\",\n        \"pattern\": \"/#.*/g\"\n    },\n    {\n        \"name\": \"comment-multi-line\",\n        \"pattern\": \"/(?:\\/\\\\*[\\\\s\\\\S]*?\\\\*\\/)/g\"\n    },\n    // You can also combine multiple named patterns into one single named pattern\n    {\n        \"name\": \"comments\",\n        \"pattern\": [\"comment-single-line\", \"comment-multi-line\"]\n    }\n],\n\n\"ignoreRegExpList\": [\"comments\"]\n```\n\n----------------------------------------\n\nTITLE: Checking Multiple File Types with cspell\nDESCRIPTION: This command checks both .js and .txt files in the current directory and its subdirectories for spelling errors.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell/static/help-lint.txt#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncspell \"**/*.txt\" \"**/*.js\"\n```\n\n----------------------------------------\n\nTITLE: Testing Explicit Config Loading with Symlink (Shell)\nDESCRIPTION: Shell command explicitly telling cspell to use the configuration file located at `cspell.yaml` (which is a symlink) using the `--config` flag. This command is expected to successfully load the configuration, highlighting the difference from implicit loading.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/issues/issue-5120/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncspell trace somenewword --config cspell.yaml\n```\n\n----------------------------------------\n\nTITLE: Function to Convert String to Lowercase in TypeScript\nDESCRIPTION: This TypeScript function accepts a parameter `name` of type string and returns the lowercase version of the input using the built-in `toLowerCase()` string method. It illustrates function declaration, parameter typing, and return typing in TypeScript.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-grammar/samples/sample.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Comment\n\nfunction toLower(name: string): string {\n  return name.toLowerCase();\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling CSpell Case Sensitivity Globally (JSON)\nDESCRIPTION: Configures CSpell to treat spelling as case-sensitive for all files by default. This setting applies unless overridden by language-specific or glob-pattern settings defined later in the configuration file. Useful for projects where strict case checking is desired across all file types.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/case-sensitive.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"caseSensitive\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Network Clone and Temporary File Management in C\nDESCRIPTION: Generates temporary filenames for network message clone files ('netclubb', 'netcluba') using process IDs, aiding in safe concurrent network operations.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_57\n\nLANGUAGE: C\nCODE:\n```\nsprintf (fname_b, \"/tmp/netclubb-%x%x\", (int) getpid);\n```\n\n----------------------------------------\n\nTITLE: Fixing Radix Issue in trie-lib\nDESCRIPTION: This bug fix addresses a specific issue with the reference radix in the 'trie-lib' component used by cspell. This ensures more correct behavior when using the radix. It does not specify any dependencies other than those implicitly linked within the project. The expected input/output is for the trie-lib data structure.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-pipe/CHANGELOG.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n* trie-lib - fix issue with reference radix. ([#3849](https://github.com/streetsidesoftware/cspell/issues/3849)) ([73af697](https://github.com/streetsidesoftware/cspell/commit/73af6978c53f2fd1f4cd528fd84e9d52a4149d5b))\n```\n\n----------------------------------------\n\nTITLE: Tokenizing Function in TypeScript\nDESCRIPTION: This function `tokenize` takes a string as input and uses `tokenizeText` function to tokenize the input text using the TypeScript grammar. It returns the tokenized result, which will later be converted to Markdown.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-grammar/fixtures/tokenizer-tests/test.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction tokenize(text: string) {\n  return tokenizeText(text, gTypeScript);\n}\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Enable cli option --validate-directives\nDESCRIPTION: This bug fix enables the command-line interface (CLI) option `--validate-directives`. The `--validate-directives` option likely checks for the validity of directives included in the files being spell-checked, ensuring correctness of the configuration.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-config-lib/CHANGELOG.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Variable Declaration with Unknown Word - C\nDESCRIPTION: These snippets declare structure variables 'oldkbdtermios' and 'newkbdtermios' of type 'struct termios'. The words 'oldkbdtermios' and 'newkbdtermios' are flagged as unknown words. These variables likely store terminal settings before and after modifications.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_82\n\nLANGUAGE: C\nCODE:\n```\nstruct termios oldkbdtermios;\n```\n\nLANGUAGE: C\nCODE:\n```\nstruct termios newkbdtermios;\n```\n\n----------------------------------------\n\nTITLE: File Format V1 Example Data\nDESCRIPTION: Presents an example of the V1 Trie data format, demonstrating how a list of words is transformed into a data structure with offsets and character indices.  Explains the building process of the trie and how to find an existing word.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-trie-lib/README.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nOffset  Output\n------ --------\n        TrieXv1\n        base=10\n0       *\n1       d,r\n2       g\n3       n2\n4       *e1,i3,s\n5       k4\n6       l5\n7       a6\n8       t7,w7\n```\n\n----------------------------------------\n\nTITLE: TypeScript Validation Issue Data Model\nDESCRIPTION: Defines validation issues detected during spell-checking, including position, message, and severity, providing structured error reporting.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* ValidationIssue model */\n```\n\n----------------------------------------\n\nTITLE: Enabling pytest --doctest-modules Option in tox.ini\nDESCRIPTION: This configuration line adds the `--doctest-modules` flag to the pytest command within a tox environment. This pytest option enables the discovery and execution of documentation tests (doctests) embedded within Python modules. The term 'doctest' was flagged as an unknown word by cspell.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/pycontribs/jira/snapshot.txt#_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n--doctest-modules \\\n```\n\n----------------------------------------\n\nTITLE: WASI (WebAssembly System Interface) Integration in Node.js\nDESCRIPTION: The WASI API provides an interface for WebAssembly modules to interact with the system. This includes initializing WASI instances, configuring environment variables, and starting WASI applications.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/node.txt#_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\n// Creating a WASI instance\nconst wasi = new WASI({\n  args: process.argv,\n  env: process.env,\n  preopens: {\n    // Directory mappings\n  },\n  returnOnExit: false\n});\n\n// Working with WebAssembly instances\nwasi.initialize(instance);\nwasi.start(instance);\n\n// WASI imports for WebAssembly instance creation\nconst importObject = {\n  wasi_snapshot_preview1: wasi.wasiImport\n};\n\n// Lifecycle methods\nwasi._initialize(); // internal\nwasi.start(); // runs _start() or __wasi_proc_exit()\n```\n\n----------------------------------------\n\nTITLE: Installing @cspell/cspell-pipe\nDESCRIPTION: This command installs the `@cspell/cspell-pipe` package as a dependency to the project. The `-S` flag is shorthand for `--save`, which adds the package to the project's `package.json` file under the `dependencies` section.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-pipe/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -S @cspell/cspell-pipe\n```\n\n----------------------------------------\n\nTITLE: Wrapping certmagic FileStorage for Persistent TLS Certificate Storage in Go\nDESCRIPTION: This Go snippet provides a FileStorage wrapper conforming to the certmagic.Storage interface, enabling TLS certificate data to be persisted on disk. It includes an UnmarshalCaddyfile function to configure storage parameters from Caddyfile tokens, providing flexibility in storage paths and options. The implementation delegates actual storage operations to certmagic's FileStorage struct. It depends on certmagic and Caddy's configuration modules. Inputs are configuration tokens, outputs are configured storage instances encapsulating file-based persistence.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_88\n\nLANGUAGE: Go\nCODE:\n```\npackage filestorage\n\nimport (\n\t\"github.com/caddyserver/certmagic\"\n\t\"github.com/caddyserver/caddy/v2\"\n\t\"github.com/caddyserver/caddy/v2/caddyconfig/caddyfile\"\n)\n\n// FileStorage wraps certmagic.FileStorage to provide storage on the filesystem.\ntype FileStorage struct {\n\tPath string\n\tstorage certmagic.Storage\n}\n\n// CertMagicStorage returns the underlying certmagic.Storage instance.\nfunc (s *FileStorage) CertMagicStorage() (certmagic.Storage, error) {\n\tif s.storage == nil {\n\t\ts.storage = &certmagic.FileStorage{Path: s.Path}\n\t}\n\treturn s.storage, nil\n}\n\n// UnmarshalCaddyfile parses storage configuration from Caddyfile tokens.\nfunc (s *FileStorage) UnmarshalCaddyfile(d *caddyfile.Dispenser) error {\n\tfor d.Next() {\n\t\tif d.NextArg() {\n\t\t\ts.Path = d.Val()\n\t\t}\n\t}\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Helper Method for Modules' Unmarshalling in Go\nDESCRIPTION: This code provides utility functions for the unmarshalling process of encoding modules, involving validation and setup of module interfaces and preferences. It utilizes the 'caddyfile' and 'caddyhttp' packages, and manages errors through 'd.Errf', streamlining the configuration process for different encoding modules within the Caddy server.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_46\n\nLANGUAGE: Go\nCODE:\n```\n// Example helper: func unmarshalModule(d *caddyfile.Dispenser, modID string) (interface{}, error) {\n// Implementation code here\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Positional Arguments (posargs) to pytest via tox\nDESCRIPTION: This line initiates a test command within `tox.ini`, using `coverage run` to execute `pytest`. It utilizes `{posargs}` to pass any positional arguments provided to the `tox` command directly through to the `pytest` execution. The term 'posargs' was flagged as an unknown word by cspell.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/pycontribs/jira/snapshot.txt#_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\ncoverage run -m pytest {posargs: \\\n```\n\n----------------------------------------\n\nTITLE: Spell checking changed files in Git using cspell\nDESCRIPTION: This command pipes the output of `git diff --name-only` to cspell to spell check only the files that have been changed in the Git repository. This requires `git` and `npx` to be available.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell/README.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngit diff --name-only | npx cspell --file-list stdin\n```\n\n----------------------------------------\n\nTITLE: Including External Libraries and Modules in Go for Caddy\nDESCRIPTION: This snippet illustrates import statements for essential Caddy packages such as 'caddyserver/caddy/v2', 'caddy/v2/caddyconfig', and compression libraries like 'klauspost/compress/zstd' and 'klauspost/compress/gzip'. These dependencies facilitate module development, configuration parsing, and compression functionalities within Caddy's ecosystem.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_50\n\nLANGUAGE: Go\nCODE:\n```\n// import (\"github.com/caddyserver/caddy/v2\" + \"github.com/caddyserver/caddy/v2/caddyconfig\" + \"github.com/klauspost/compress/gzip\" + \"github.com/klauspost/compress/zstd\")\n```\n\n----------------------------------------\n\nTITLE: Adding sample package to test dictionaries in eslint\nDESCRIPTION: This update includes adding a sample package for testing dictionaries within eslint configurations. It facilitates testing of dictionaries within the ESLint environment.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-strong-weak-map/test-cspell-strong-weak-map/CHANGELOG.md#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\ntest: Add sample package to test dictionaries in eslint (#4875) ([06c9e18](https://github.com/streetsidesoftware/cspell/commit/06c9e18)), closes [#4875](https://github.com/streetsidesoftware/cspell/issues/4875)\n```\n\n----------------------------------------\n\nTITLE: Using property decorator in Python\nDESCRIPTION: Defines a simple Python class `Fubar` with a property `foo`. It then instantiates the class and asserts that the type of `Fubar.foo` is indeed a `property` object.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nclass Fubar:\n    @property\n    def foo(self):\n        return \"bar\"\n\nf = Fubar()\nassert type(Fubar.foo) is property\n```\n\n----------------------------------------\n\nTITLE: Running CSpell with Yarn (sh)\nDESCRIPTION: Executes the `cspell` command using the Yarn package manager. This approach is typically used in projects managing dependencies with Yarn. The `.` argument specifies checking the current directory. Requires Yarn and CSpell installed (locally or globally).\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/installation.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nyarn cspell .\n```\n\n----------------------------------------\n\nTITLE: Dynamic Extension Configuration in JavaScript\nDESCRIPTION: This snippet illustrates the structure for defining a dynamic CSpell extension in JavaScript. It exports a `name` property and a `getConfiguration` function. The `getConfiguration` function takes a `context` and `params` as input and returns a `CSpellUserSettings` object, using a Promise.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/rfc/drafts/cspell-extensions/extensions.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const name = 'name of extension';\n/**\n * @param {import(\"./types.ts\").Context} context\n * @param {unknown[]} params\n * @returns {Promise<import(\"@cspell/cspell-types\").CSpellUserSettings>}\n */\nexport default function getConfiguration(context, params);\n```\n\n----------------------------------------\n\nTITLE: Programmatic CSpell Linting in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to use the `lint` function from the `cspell` library to check files for spelling errors. It imports the `lint` function, then calls it with an array of files or directories to check (in this case, '.') and an options object. The options object allows to control the output such as showing progress or the summary.  The snippet requires the `cspell` library to be installed as a project dependency. The primary output is the result of the linting process, indicating any spelling errors found.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/examples/invoke-cspell/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { lint } from 'cspell';\n\nawait lint(['.'], {\n  progress: true,\n  summary: true\n  // progress: false,\n  // summary: false,\n  // wordsOnly: true,\n  // config: './cspell.config.yaml',\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Extensions in cspell.config.yaml\nDESCRIPTION: This snippet demonstrates how to import CSpell extensions in a `cspell.config.yaml` file. It shows importing Hunspell dictionaries and a German dictionary. The example uses an array for imports allowing parameters to be passed to the extension.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/rfc/drafts/cspell-extensions/extensions.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nimport:\n  - ['@cspell/hunspell-ext', 'nl-nl'] # Use the Hunspell Extension to import the Dutch Hunspell dictionary.\n  - ['@cspell/hunspell-ext', 'eu'] # Use the Hunspell Extension to import the Basque Hunspell dictionary.\n  - '@cspell/dict-de-de' # import German dictionary.\n```\n\n----------------------------------------\n\nTITLE: Fixing .gitignore Comment Detection\nDESCRIPTION: This bug fix addresses an issue in the .gitignore comment detection within the cspell project. This ensures that comments are correctly identified, preventing unintended spell check behavior. No dependencies are explicitly mentioned, but this is tied to the cspell project core functionality. The expected input is a .gitignore file, and the output is an improved spell check process.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-pipe/CHANGELOG.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n* Correct .gitignore comment detection ([#4083](https://github.com/streetsidesoftware/cspell/issues/4083)) ([cadfbc4](https://github.com/streetsidesoftware/cspell/commit/cadfbc489f17db348459a09e7bd49514d07152a2))\n```\n\n----------------------------------------\n\nTITLE: Struct Declaration with Unknown Word - C\nDESCRIPTION: This snippet declares struct command named `rsysopt`. The word 'rsysopt' is flagged as an unknown word.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_107\n\nLANGUAGE: C\nCODE:\n```\nstruct rsysopt commands[] = {\n```\n\n----------------------------------------\n\nTITLE: Dumping HTTP Request in Go Test\nDESCRIPTION: Uses `httputil.DumpRequest` to serialize an HTTP request for debugging or logging purposes within a test. The resulting string (`rstring`) contains the request details.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_12\n\nLANGUAGE: Go\nCODE:\n```\nrstring, err := httputil.DumpRequest\n```\n\nLANGUAGE: Go\nCODE:\n```\nserver received req: %s\", rstring)\n```\n\n----------------------------------------\n\nTITLE: Checking if Configuration is a Caddyfile in Go\nDESCRIPTION: Implements or calls a function `isCaddyfile` to determine if a given configuration file (`configFile`) should be treated as a Caddyfile, potentially based on its name, extension (`.caddyfile`), or the specified adapter name (`adapterName`).\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_35\n\nLANGUAGE: Go\nCODE:\n```\nfunc isCaddyfile(configFile, adapterName\n```\n\nLANGUAGE: Go\nCODE:\n```\nif adapterName == \"caddyfile\" {\n```\n\nLANGUAGE: Go\nCODE:\n```\n// config file starts with \"caddyfile\" or\n```\n\nLANGUAGE: Go\nCODE:\n```\n// has a \".caddyfile\" extension, and no adapter\n```\n\nLANGUAGE: Go\nCODE:\n```\nstartsOrEndsInCaddyfile := strings.HasPrefix\n```\n\nLANGUAGE: Go\nCODE:\n```\nHasPrefix(baseConfig, \"caddyfile\") || strings.HasSuffix\n```\n\nLANGUAGE: Go\nCODE:\n```\nt a JSON file (e.g. Caddyfile.yaml),\n```\n\nLANGUAGE: Go\nCODE:\n```\n\"\" && startsOrEndsInCaddyfile {\n```\n\nLANGUAGE: Go\nCODE:\n```\n// does not start with \"Caddyfile\"\n```\n\n----------------------------------------\n\nTITLE: Multiline Comment and String Literal with Embedded Markdown in TypeScript\nDESCRIPTION: This complex TypeScript snippet includes a multiline block comment demonstrating embedded markdown fences inside the comment text to test highlighting or parsing. It declares a constant string variable `h` assigned 'hello'. This snippet serves as an edge case for parser resilience with embedded markdown syntax inside comments.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-grammar/samples/sample.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/*\n This is a comment.\n But we will add a markdown ``` to it: Remove / to break the highlighter.\n /```\n /~~~\n*/\nconst h = 'hello';\n```\n\n----------------------------------------\n\nTITLE: Module and package resolution in Node.js\nDESCRIPTION: This snippet outlines the mechanisms for resolving modules, utilizing properties like require, require.resolve(), resolve(), and resolve(specifier, context, defaultResolve). It involves path handling, URL creation (new URL()), and processing module metadata via import.meta. These functions are vital for dynamically loading modules, managing package paths, and handling diverse module formats.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/node.txt#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire.resolve()\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nresolve()\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew URL( ./local , import.meta.url)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport.meta.resolve\n```\n\n----------------------------------------\n\nTITLE: Importing ConversationProtocol from wireapp/api-client\nDESCRIPTION: This snippet imports the `ConversationProtocol` module from the `@wireapp/api-client` library, specifically from the conversation sub-module, likely related to managing or interacting with conversations within the application.  It relies on the `@wireapp/api-client` library and its internal structure. The specific use case depends on the component's role in handling conversations. The unknown word `wireapp` is the cspell error.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_92\n\nLANGUAGE: typescript\nCODE:\n```\nimport {ConversationProtocol} from '@wireapp/api-client/lib/conversation\n```\n\n----------------------------------------\n\nTITLE: Importing modules for certification and TLS in Go\nDESCRIPTION: These import statements include modules like 'caddypki' and 'caddytls' for handling TLS certificates, distributed storage, and PKI management, essential components for secure server operation within the Caddy ecosystem.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_95\n\nLANGUAGE: Go\nCODE:\n```\n_ \"github.com/caddyserver/caddy/v2/modules/caddypki\"\n_ \"github.com/caddyserver/caddy/v2/modules/caddytls\"\n```\n\n----------------------------------------\n\nTITLE: Using Yar Server Methods\nDESCRIPTION: This code presents Yar Server methods including `handle` and the constructor method. These are used for handling RPC requests on the server-side and require the Yar extension. The `handle` method is responsible for processing RPC requests.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/php.txt#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nYar_Server::handle\nYar_Server::__construct\n```\n\n----------------------------------------\n\nTITLE: Redox OS Build Configuration Scripts\nDESCRIPTION: Shell scripts for building and running RustPython on the Redox OS. These scripts set cargo flags and use the 'redoxer' tool to build and execute the project in a Redox environment.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_52\n\nLANGUAGE: Shell\nCODE:\n```\nCARGOFLAGS=--no-default-features\n```\n\nLANGUAGE: Shell\nCODE:\n```\nredoxer build --release\nredoxer exec -f \"$DIR\" -- .\n```\n\n----------------------------------------\n\nTITLE: Adjusting `.trie` formatting\nDESCRIPTION: This snippet describes adjustments made to the `.trie` file formatting. This likely improves the efficiency and compatibility of the `.trie` files used by CSpell. It closes issues #3443 and #3430.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-tools/CHANGELOG.md#_snippet_11\n\nLANGUAGE: TEXT\nCODE:\n```\n* Adjust `.trie` formatting ([e2643c0](https://github.com/streetsidesoftware/cspell/commit/e2643c0bf508aa566823d2c697e5b94c77e6b874)), closes [#3443](https://github.com/streetsidesoftware/cspell/issues/3443) [#3430](https://github.com/streetsidesoftware/cspell/issues/3430)\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Authentication Middleware in Go for Caddy HTTP\nDESCRIPTION: This snippet showcases the implementation of a basic authentication middleware within the Caddy HTTP module using Go. It involves importing necessary Caddy server packages and setting up an authentication handler that processes HTTP requests, performing authorization checks. The snippet uses an interface to load hashing modules for password verification and uses a pseudorandom source for caching purposes. Key aspects include middleware chaining via the caddyhttp.Handler interface and integration with authentication module abstractions.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_41\n\nLANGUAGE: Go\nCODE:\n```\n_ caddyhttp.MiddlewareHandler = (*BasicAuth)(nil)\n\nhasherIface, err := ctx.LoadModule(\"hasher\")\nif err != nil {\n    return err\n}\nhba.Hash = hasherIface.(Comparer)\n\n//nolint:gosec\nrnd := weakrand.Intn(len(c.cache))\n```\n\n----------------------------------------\n\nTITLE: Defining Context Interfaces for CSpell Extensions in TypeScript\nDESCRIPTION: This TypeScript snippet defines three interfaces—Context, FileContext, and FileSegmentContext—used for representing file-level and segment-level metadata as well as access to I/O mechanisms within a CSpell extension environment. These interfaces facilitate advanced spell checking workflows by providing information about file paths (as URL), content, file types, and an abstract VirtualIO for supporting virtual or remote file systems. The interfaces are intended for use by CSpell extension and configuration authors when developing dynamic and context-aware spell checking solutions. No external dependencies are required beyond the definitions for VirtualIO and URL, and the primary expected input is a file or file segment with associated context; no direct output is produced as these are structural types.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/rfc/drafts/cspell-extensions/README.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Context {\n  cwd: URL;\n  io: VirtualIO;\n}\n\ninterface FileContext extends Context {\n  /** The URL of the file. */\n  file: URL;\n  /** It is possible for a file to match multiple file types. */\n  filetype: string | string[];\n  /** The content of the file. */\n  content: string;\n}\n\ninterface FileSegmentContext extends Context {\n  /** The URL representing the file segment. */\n  file: URL;\n  /** the file type of the segment. */\n  filetype: string | string[];\n  /** The content of the file segment. */\n  content: string;\n  /** The parent context */\n  fileContext: FileContext;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Promise Queue for Asynchronous Task Management\nDESCRIPTION: A utility managing queued promises with time-based controls, using constants like TIME_IN_MILLIS for delay intervals to serialize or throttle asynchronous operations.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_131\n\nLANGUAGE: TypeScript\nCODE:\n```\nsrc/script/util/PromiseQueue.ts\n```\n\n----------------------------------------\n\nTITLE: Styling and Defining Participant List with React and TypeScript\nDESCRIPTION: This snippet involves styling and displaying a list of calling participants, importing media queries and tooltip components from '@wireapp/react-ui-kit'. It typically defines responsive styles and interactive UI elements like tooltips for participant details. Dependencies include styling utilities and UI components. Inputs consist of participant data and state, and outputs are styled participant lists with interactive features.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_62\n\nLANGUAGE: tsx\nCODE:\n```\nimport {media} from '@wireapp/react-ui-kit';\nimport {Tooltip} from '@wireapp/react-ui-kit';\n\n// Example style and participant list component\nconst CallingParticipantList = () => {\n  // styling and participant rendering\n};\n```\n\n----------------------------------------\n\nTITLE: Apriori Algorithm in Python for Frequent Pattern Mining\nDESCRIPTION: Defines an apriori function for mining frequent itemsets from transactional data, used in market basket analysis. Inputs are list of transactions; outputs are frequent patterns. Requires data preprocessing.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_37\n\nLANGUAGE: Python\nCODE:\n```\nmachine_learning/apriori_algorithm.py:59:5      - Unknown word (apriori)    -- def apriori(data: list[list[str\n```\n\n----------------------------------------\n\nTITLE: Variable Declaration with Unknown Word - C\nDESCRIPTION: These snippets declare variables `bogomips`. The word 'bogomips' is flagged as unknown words and used in statistics calculations.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_114\n\nLANGUAGE: C\nCODE:\n```\n0}, bogomips[80] = {\n```\n\n----------------------------------------\n\nTITLE: Test Configuration for HTTP Transport in Go\nDESCRIPTION: Test setup for the HTTP transport using Caddy's configuration framework and test fixtures.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_67\n\nLANGUAGE: Go\nCODE:\n```\nd *caddyfile.Dispenser\n// Test setup\nd: caddyfile.NewTestDispenser(\n    // Test input\n)\nif err := ht.UnmarshalCaddyfile(tt.args.d); (err !=\n```\n\n----------------------------------------\n\nTITLE: Testing bytes concatenation in Python\nDESCRIPTION: Asserts that concatenating two bytes objects using the addition operator (`+`) results in a new bytes object containing the combined sequences.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_34\n\nLANGUAGE: python\nCODE:\n```\na = b\"abcd\"\nb = b\"ab\"\nassert a + b == b\"abcdab\"\n```\n\n----------------------------------------\n\nTITLE: Route Module Implementation with Matcher Sets (Go)\nDESCRIPTION: This snippet implements route handling with MatcherSet collections, providing Match and MatchWithError methods to evaluate request match conditions. It iterates over matchers, applying them to incoming requests. Dependencies include caddyhttp and the custom matcher interfaces, enabling complex request matching in server configurations.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_72\n\nLANGUAGE: Go\nCODE:\n```\nfunc (mset MatcherSet) Match(r *http.Request) (bool, error)\n```\n\n----------------------------------------\n\nTITLE: Installing @cspell/dynamic-import via npm\nDESCRIPTION: Shell command to install the @cspell/dynamic-import package as a production dependency using npm.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/dynamic-import/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -S @cspell/dynamic-import\n```\n\n----------------------------------------\n\nTITLE: Error Handling and Context in FastCGI requests\nDESCRIPTION: These snippets likely access the request context to retrieve server information and uses caddyhttp error functions to handle errors, providing HTTP status codes. The function may be called during the handling of FastCGI requests. It depends on the caddyhttp and http packages.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_60\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddyhttp/reverseproxy/fastcgi/fastcgi.go:117:30    - Unknown word (caddyhttp)   -- = r.Context().Value(caddyhttp.ServerCtxKey).(*caddyhttp\n```\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddyhttp/reverseproxy/fastcgi/fastcgi.go:117:56    - Unknown word (caddyhttp)   -- caddyhttp.ServerCtxKey).(*caddyhttp.Server)\n```\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddyhttp/reverseproxy/fastcgi/fastcgi.go:123:15    - Unknown word (caddyhttp)   -- return nil, caddyhttp.Error(http.StatusBadRequest\n```\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddyhttp/reverseproxy/fastcgi/fastcgi.go:141:2     - Unknown word (loggable)    -- loggableReq := caddyhttp.LoggableHTTPR\n```\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddyhttp/reverseproxy/fastcgi/fastcgi.go:141:27    - Unknown word (Loggable)    -- loggableReq := caddyhttp.LoggableHTTPRequest{\n```\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddyhttp/reverseproxy/fastcgi/fastcgi.go:145:17    - Unknown word (loggable)    -- loggableEnv := loggableEnv{vars: env, logCredentials\n```\n\n----------------------------------------\n\nTITLE: Type Declaration for Dexie Database in BackupRepository.ts\nDESCRIPTION: This snippet imports Dexie, a wrapper for IndexedDB, to facilitate client-side database operations. It defines a generic exportTable function to process database tables with optional preprocessing. This setup is essential for structured and efficient storage of backup data within the application.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type Dexie from 'dexie';\nexport function exportTable<T>(table: Dexie.Table<T, unknown>, preprocess?: (item: T) => T): Promise<T[]> {\n  // function implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Certificate Selection with certmagic in Go\nDESCRIPTION: This snippet defines the SelectCertificate function implementing the certmagic.CertificateSelector interface, allowing dynamic selection of TLS certificates based on client hello information and available certificate choices. It depends on the certmagic package and integrates with Caddy's certificate management system, processing ClientHelloInfo and filtering viable certmagic.Certificate objects. Inputs include ClientHelloInfo and a list of certmagic certificates; outputs are a selected certificate and error, enabling flexible certificate selection during TLS handshakes.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_80\n\nLANGUAGE: Go\nCODE:\n```\nfunc SelectCertificate(chi *tls.ClientHelloInfo, choices []certmagic.Certificate) (certmagic.Certificate, error) {\n\tviable := make([]certmagic.Certificate, 0, len(choices))\n\t// Additional selection logic here\n\treturn certmagic.Certificate{}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Check Filename Against Glob Pattern Function\nDESCRIPTION: This function checks if a filename matches a specified glob pattern, useful for filename filtering in spell-checking workflows. It depends on glob matching utilities and supports various glob syntax options, returning a boolean indicating match status.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* Function implementation to check filename matching glob pattern */\n```\n\n----------------------------------------\n\nTITLE: Defining Giphy Button Prop in InputBarControls (TypeScript)\nDESCRIPTION: Defines a boolean property 'showGiphyButton' within the props interface for the InputBarControls component.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nshowGiphyButton: boolean;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Utility: findUp Strategy\nDESCRIPTION: Provides functions to locate files or directories upward in the file system hierarchy, often used for configuration detection.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_54\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-lib/src/lib/util/findUp.ts\n```\n\n----------------------------------------\n\nTITLE: Testing str.center() in Python\nDESCRIPTION: Tests the `str.center()` method by centering the string \"koki\" within fields of varying widths using '|' as the fill character. It uses a list comprehension to generate results for widths 4 through 7.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nassert [\"koki\".center(i, \"|\") for i in range(4, 8)] == [\n    \"koki\",\n    \"koki\", # Width 5: No padding needed\n    \"|koki\", # Width 6: Pad left\n    \"|koki|\"  # Width 7: Pad both sides\n]\n```\n\n----------------------------------------\n\nTITLE: Main index file in test-cspell-trie-lib/src/index.ts\nDESCRIPTION: This source file acts as the primary export point for the cspell trie library, exposing data structures, algorithms, or utility functions for trie management, searching, or optimization within the spell-checking system.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_96\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport * from './lib/trie';\n// Other exports related to trie utilities\n```\n\n----------------------------------------\n\nTITLE: Testing IDNA encoding in Python\nDESCRIPTION: Asserts the correct Internationalized Domain Names in Applications (IDNA) encoding of Unicode strings containing non-ASCII characters using `str.encode('idna')`. Tests strings with and without trailing dots.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_47\n\nLANGUAGE: python\nCODE:\n```\nassert \"☃-⌘.com\".encode(\"idna\") == b'xn--abcij-zb5f.com' # Corrected expected output assuming .com was intended\nassert \"pýtĥöñ.org\".encode(\"idna\") == b\"xn--pythn-mua.org\"\nassert \"pýtĥöñ.org.\".encode(\"idna\") == b\"xn--pythn-mua.org.\"\n```\n\n----------------------------------------\n\nTITLE: Input Data Preparation in Python\nDESCRIPTION: Handles data generation and preprocessing, including fake data creation, file access via gfile, and data iteration. Supports data augmentation and validation.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_60\n\nLANGUAGE: Python\nCODE:\n```\n144:29 - Unknown word (inages) -- fake_data: Ignore inages and labels, use fake\n```\n\nLANGUAGE: Python\nCODE:\n```\n27:40 - Unknown word (gfile) -- python.platform import gfile\n```\n\nLANGUAGE: Python\nCODE:\n```\n37:3 - Unknown word (CVDF) -- # CVDF mirror of http://yann\n```\n\nLANGUAGE: Python\nCODE:\n```\n98:26 - Unknown word (bystream) -- ValueError: If the bystream doesn't start with\n```\n\n----------------------------------------\n\nTITLE: String Formatting with Unknown Word - C\nDESCRIPTION: This snippet uses string formatting involving 'EVSPAWN'. The word 'EVSPAWN' is flagged as an unknown word. It's part of event Management and logs the event using AUDIT macro.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_94\n\nLANGUAGE: C\nCODE:\n```\nthisuseronl.channel,AUDIT(EVSPAWN),thisuseracc.userid\n```\n\n----------------------------------------\n\nTITLE: Regular Expression with Non-Capturing Group in JavaScript\nDESCRIPTION: Example showing a regular expression with a non-capturing group, used to match alternative patterns without creating a capture group in the result.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/eslint/eslint/snapshot.txt#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst regex = /(?:cauli|sun)flower/;\n```\n\n----------------------------------------\n\nTITLE: Importing Caddy Internal Package in Go\nDESCRIPTION: Imports an internal Caddy package from `github.com/caddyserver/caddy/v2/internal`. Internal packages contain code not intended for external use but necessary for Caddy's operation.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_26\n\nLANGUAGE: Go\nCODE:\n```\n\"github.com/caddyserver/caddy/v2/internal\"\n```\n\n----------------------------------------\n\nTITLE: yyerror Macro Definition (C)\nDESCRIPTION: This snippet defines a macro `yyerror` to be `__gettexterror`. This renames the standard `yyerror` function, possibly to avoid naming conflicts or to integrate it with a gettext internationalization library.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\n#define yyerror __gettexterror\n```\n\n----------------------------------------\n\nTITLE: Focal Cross-Entropy Loss in Machine Learning in Python\nDESCRIPTION: Implementations of CFCE and BFCE loss functions to handle class imbalance in classification tasks. Inputs are predicted probabilities and true labels; outputs are loss values.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_41\n\nLANGUAGE: Python\nCODE:\n```\nmachine_learning/loss_functions.py:159:57    - Unknown word (CFCE)       -- focal cross-entropy (CFCE) loss between true\n```\n\nLANGUAGE: Python\nCODE:\n```\nmachine_learning/loss_functions.py:50:52     - Unknown word (BFCE)       -- focal cross-entropy (BFCE) loss between true labels\n```\n\n----------------------------------------\n\nTITLE: TypeScript Tests for Markdown Utilities\nDESCRIPTION: Test cases for Markdown utility functions, focusing on markdown blockquote removal and recognition, ensuring the parsing and rendering functions handle blockquotes correctly.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_130\n\nLANGUAGE: TypeScript\nCODE:\n```\nsrc/script/util/MarkdownUtil.test.ts\n```\n\n----------------------------------------\n\nTITLE: TypeScript Timer Implementation\nDESCRIPTION: Implements a high-resolution timer class or functions to measure elapsed time for performance profiling.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* Timer class or utility functions */\n```\n\n----------------------------------------\n\nTITLE: Custom Writer Wrapper for Destructable Output in Go\nDESCRIPTION: A Go struct wrapper around os.File implementing a Destruct method to support destructableWriter behavior for secure resource cleanup. This snippet enables controlled destruction (e.g., secure wiping or cleanup) of file resources after use. Expected input is an os.File pointer wrapped by destructableWriter; output is an error from the Destruct method if cleanup fails. This pattern supports safety in handling sensitive outputs such as TLS key material.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_82\n\nLANGUAGE: Go\nCODE:\n```\ntype destructableWriter struct {\n\t*os.File\n}\n\nfunc (d destructableWriter) Destruct() error {\n\t// Implement secure destruction of underlying file\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Stream Module Classes and Functions Overview in Node.js\nDESCRIPTION: This snippet lists and describes core classes, functions, and properties related to Node.js stream handling, including stream creation, manipulation, and event handling. It serves as a reference for implementing and managing data streams with dependencies like 'stream' and 'fs' modules.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/node.txt#_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\n# Stream classes and functions\n.destroy()\n.destroy(new AbortError())\n.emit()\n.read()\n.resume()\n.write()\nAbortController\nAbortSignal\nBuffer\nDuplex\nERR_STREAM_DESTROYED\nError\nEventEmitter\nHash\nPromise\nReadable\nReadable.from()\nReadable.from(buffer)\nReadable.from(string)\nStringDecoder\nSymbol.asyncIterator\nSymbol.hasInstance\nSymbol.iterator\nTransform\nUint8Array\nWritable\n_construct()\n_destroy()\n_final()\n_flush()\n_read()\n_transform()\n_write()\n_writev()\nabort\nallowHalfOpen\nascii\nautoDestroy\nbreak\nbuffer\ncallback\nchunk\nchunks\nclose\nconstruct\ncork()\ndata\ndecodeStrings\ndefaultEncoding\ndestination\ndestroy\ndestroy()\ndrain\nemit( error , err)\nemitClose\nencoding\nend\nend()\nerr\nerror\nfalse\nfile.txt\nfinal\nfinish\nfinished\nflush\nfoo.txt\nfs.createReadStream()\nfs.createWriteStream()\nhighWaterMark\ninstanceof\niterable\nlatin1\nn\nnet.Socket\nnew stream.Duplex([options])\nnew stream.Duplex(options)\nnew stream.Readable([options])\nnew stream.Transform([options])\nnew stream.Writable([options])\nnull\nobjectMode\non( data )\non( readable )\noptions\noptions.objectMode\npause\npipe\npipe()\npipeline\nprocess.nextTick()\nprocess.stderr\nprocess.stdin\nprocess.stdout\npush()\nread\nread()\nreadable\nreadable._construct(callback)\nreadable._destroy()\nreadable._destroy(err, callback)\nreadable._read()\nreadable._read(size)\nreadable.destroy()\nreadable.destroy([error])\nreadable.destroy(err)\nreadable.destroyed\nreadable.isPaused()\nreadable.on( readable )\nreadable.pause()\nreadable.pipe()\nreadable.pipe(destination[, options])\nreadable.push()\nreadable.push()\nreadable.push(chunk[, encoding])\nreadable.push(null)\nreadable.read()\nreadable.read(0)\nreadable.read([size])\nreadable.read(size)\nreadable.readable\nreadable.readableBuffer\nreadable.readableEncoding\nreadable.readableEnded\nreadable.readableFlowing\nreadable.readableFlowing === false\nreadable.readableFlowing === null\nreadable.readableFlowing === true\nreadable.readableHighWaterMark\nreadable.readableLength\nreadable.readableObjectMode\nreadable.resume()\nreadable.setEncoding( hex )\nreadable.setEncoding( utf8 )\nreadable.setEncoding()\nreadable.setEncoding(encoding)\nreadable.unpipe()\nreadable.unpipe([destination])\nreadable.unshift()\nreadable.unshift(chunk[, encoding])\nreadable.wrap()\nreadable.wrap(stream)\nreadableFlowing\nreadableHighWaterMark\nreadableObjectMode\nreadable[Symbol.asyncIterator]()\nrequire( stream )\nrequire( stream ).promises\nrequire( stream/promises )\nres\nresume\nsetEncoding()\nsignal\nsize\nsource\nsrc\nstream\nstream.Duplex\nstream.PassThrough\nstream.Readable\nstream.Readable.from()\nstream.Readable.from(iterable, [options])\nstream.Transform\nstream.Writable\nstream._construct()\nstream._destroy()\nstream._final()\nstream._flush()\nstream._read()\nstream._transform()\nstream._write()\nstream._writev()\nstream.addAbortSignal()\nstream.addAbortSignal(signal, stream)\nstream.cork()\nstream.destroy(err)\nstream.end()\nstream.finished()\nstream.finished(stream[, options], callback)\nstream.pause()\nstream.pipe()\nstream.pipeline()\nstream.pipeline(source[, ...transforms], destination, callback)\nstream.pipeline(streams, callback)\nstream.push()\nstream.push(chunk)\nstream.read()\nstream.read(0)\nstream.read([size])\nstream.read(n)\nstream.resume()\nstream.uncork()\nstream.unpipe()\nstream.unshift()\nstream.unshift(chunk)\nstream.wrap()\nstream.write()\nstream.write(anyObj)\nstream.write(chunk)\nstream/promises\nstreams\nstring\nthis.push(dataChunk)\nthrow\ntransform\ntransform._flush()\ntransform._flush(callback)\ntransform._transform()\ntransform._transform(chunk, encoding, callback)\ntransform.destroy([error])\ntransform.push()\ntrue\nuncork()\nundefined\nunpipe\nutf8\nval\nwhile\nwritable\nwritable._construct(callback)\nwritable._destroy()\nwritable._destroy(err, callback)\nwritable._final()\nwritable._final(callback)\nwritable._write()\nwritable._write(chunk, encoding, callback)\nwritable._writev()\nwritable._writev(chunks, callback)\nwritable.cork()\nwritable.destroy()\nwritable.destroy([error])\nwritable.destroyed\nwritable.end()\nwritable.end([chunk[, encoding]][, callback])\nwritable.setDefaultEncoding()\nwritable.setDefaultEncoding(encoding)\nwritable.uncork()\nwritable.writable\nwritable.writableBuffer\nwritable.writableCorked\nwritable.writableEnded\nwritable.writableFinished\nwritable.writableHighWaterMark\nwritable.writableLength\nwritable.writableNeedDrain\nwritable.writableObjectMode\nwritable.write()\nwritable.write(chunk)\nwritable.write(chunk[, encoding][, callback])\nwritableHighWaterMark\nwritableObjectMode\nwrite\nwrite()\nwritev\nzlib\nzlib.createDeflate()\n{ chunk: ..., encoding: ... }\n```\n\n----------------------------------------\n\nTITLE: HTTP Date Formatting Constants in Dart\nDESCRIPTION: Constants for HTTP date formatting in the Dart HTTP library. These define the format specifiers and day of week abbreviations used when parsing and formatting HTTP dates according to RFC standards.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/dart-lang/sdk/snapshot.txt#_snippet_7\n\nLANGUAGE: Dart\nCODE:\n```\nfinal int formatAsctime = 2;\n// rfc1123-date = wkday \",\" SP date1 SP time\nconst List wkdays = [\"Mon\", \"Tue\", \"Wed\", ...];\n```\n\n----------------------------------------\n\nTITLE: Checking stdin with cspell\nDESCRIPTION: This command checks the content provided via standard input for spelling errors.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell/static/help-lint.txt#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncat LICENSE | cspell stdin\n```\n\n----------------------------------------\n\nTITLE: Fix empty build target\nDESCRIPTION: This bug fix corrects an issue where the build target could be empty.  This ensures the build system functions correctly, even if the target is unexpectedly empty.  The fix likely involves build scripts or configuration files.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/CHANGELOG.md#_snippet_9\n\nLANGUAGE: git\nCODE:\n```\nFix empty build target ([#4627](https://github.com/streetsidesoftware/cspell/issues/4627)) ([1fcbf98](https://github.com/streetsidesoftware/cspell/commit/1fcbf9897b70691eb9947e43b966a5069fe37feb))\n```\n\n----------------------------------------\n\nTITLE: Importing LinkVariant from wireapp/react-ui-kit\nDESCRIPTION: This snippet imports `LinkVariant` from `@wireapp/react-ui-kit`. This suggests usage of styled link components. Dependencies include `@wireapp/react-ui-kit`. The unknown word `wireapp` is the cspell error.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_106\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LinkVariant} from '@wireapp/react-ui-kit';\n```\n\n----------------------------------------\n\nTITLE: IOMD Parsing in JavaScript Notebook\nDESCRIPTION: Parser implementation for IOMD (Input/Output Markdown) format in a notebook application. Splits IOMD content into lines and processes them for rendering.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_60\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport function iomdParser(fullIomd) {\n    const iomdLines = fullIomd.split('\\n');\n    // Processing of iomd content\n    // ...\n    pushChunk(iomdLines.length);\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Web Runtime for Python in Browser\nDESCRIPTION: Python module that provides asynchronous execution capabilities for Python code running in a browser environment. It includes functions for handling async operations and event loops.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_57\n\nLANGUAGE: Python\nCODE:\n```\nimport asyncweb\n\n@asyncweb.main\nasyncweb.run(main(delay))\n```\n\n----------------------------------------\n\nTITLE: Building Group Video Grid Layouts in React TypeScript\nDESCRIPTION: This snippet defines layout calculations for a group video grid, including determining rows and columns based on parameters. It employs styling tokens from '@wireapp/react-ui-kit' and integrates video state constants from '@wireapp/avs'. Inputs include participant counts and UI size flags, with outputs being grid layout properties for rendering video tiles. Corner cases like short UI modes are handled for responsive display.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_65\n\nLANGUAGE: tsx\nCODE:\n```\nimport {VIDEO_STATE} from '@wireapp/avs';\nimport {QUERY} from '@wireapp/react-ui-kit';\n\ninterface CalculateRowsAndColumsParams {\n  participantCount: number;\n  isShort?: boolean;\n}\n\nconst calculateRowsAndColumns = ({participantCount, isShort}: CalculateRowsAndColumsParams): { rows: number; columns: number } => {\n  // computation logic here\n  return {rows: 2, columns: 3};\n};\n```\n\n----------------------------------------\n\nTITLE: Bytes Object Creation from Hex\nDESCRIPTION: This snippet tests the creation of a bytes object from a hexadecimal representation, using `bytes.fromhex()`. The expected output is a bytes object.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nbytes.fromhex(b\"hhjjk\")\n```\n\n----------------------------------------\n\nTITLE: IO Operations for Trie, Import/Export TypeScript\nDESCRIPTION: Includes functions for importing and exporting trie data, decoding trie structures from buffers, and managing related constants. Depends on buffer handling utilities and import/export formats.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_41\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function importTrie(data: Uint8Array): ITrie { ... }\nexport function exportTrie(trie: ITrie): Uint8Array { ... }\n```\n\n----------------------------------------\n\nTITLE: Unit tests for Caddyfile unmarshalling in Go\nDESCRIPTION: Test functions verify the unmarshalling of Caddyfile configurations for the metrics module, checking for proper parsing and application of directives such as 'disable_openmetrics'. They utilize test dispensers to simulate configuration files and validate error handling.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_91\n\nLANGUAGE: Go\nCODE:\n```\nerr := m.UnmarshalCaddyfile(d)\n// Validate unmarshalling of Caddyfile configurations for metrics\n```\n\n----------------------------------------\n\nTITLE: Initializing and Managing QUIC Protocol Components in Node.js\nDESCRIPTION: This snippet outlines the structure and key components involved in implementing QUIC protocol support within a Node.js environment. It includes classes for sessions, sockets, streams, and endpoint management, along with various configurable options like security, connection handling, and data transmission. Dependencies include modules like stream, net, and TLS, and parameters encompass cryptographic details, transport options, and network configurations.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/node.txt#_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\n# Classes and interfaces for QUIC protocol\nQuicClientSession extends QuicSession\nQuicServerSession extends QuicSession\nQuicSession extends EventEmitter\nQuicSocket\nQuicStream extends stream.Duplex\nQuicEndpoint\n// Methods for socket and session management\naddEndpoint()\nbind()\nclose()\ndestroy()\nconnect()\nlisten()\nsubmitInformationalHeaders()\n// Configuration options\ncrypto of Cipher, Ciphers, DH, ECDH, and curve lists\nsecurity context, certificates, keys\nnetwork and address parameters\n// Data transmission and protocol features\nmaxStreamDataBidiLocal\nmaxStreams\npings, RTT estimations, congestion controls\n// State management and event handling\nstate flags, error handling, and event emitters\n```\n\n----------------------------------------\n\nTITLE: Window Management API in Chrome Extensions\nDESCRIPTION: Chrome extension API methods and events for window management. These functions handle fullscreen states and window manipulation.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/dart-lang/sdk/snapshot.txt#_snippet_16\n\nLANGUAGE: Dart\nCODE:\n```\nwindow (excluding the titlebar). If\n\n/// Fullscreens the window.\n\nFired when the window is fullscreened.\n\nclass Event_app_window_onFullscreened extends Event {\n```\n\n----------------------------------------\n\nTITLE: Creating bytearray from string with UTF-8 encoding\nDESCRIPTION: This snippet tests the creation of a bytearray from a string with UTF-8 encoding. It demonstrates conversion from a string to bytearray. The assertion checks the length of the resulting bytearray, demonstrating conversion.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nassert len(bytearray(\"abcdé\", \"utf8\")) == 6\n```\n\n----------------------------------------\n\nTITLE: Generating ZeroSSL EAB Credentials in ACME Issuer (Go)\nDESCRIPTION: This function, generateZeroSSLEABCredentials, is responsible for generating External Account Binding (EAB) credentials required by ZeroSSL when configuring an ACMEIssuer in CaddyTLS. It should only be invoked when the Certificate Authority (CA) endpoint is ZeroSSL. The method interacts with zerossl.BaseURL to request EAB credentials, returning values like EABKID and EABHMACKey for use in subsequent ACME account registration steps. Dependencies include the zerossl and acmez libraries. Inputs include a context and issuer instance; outputs are the credentials or an error if retrieval fails. Limited to ZeroSSL integration and requires HTTP connectivity to the endpoint.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_76\n\nLANGUAGE: Go\nCODE:\n```\n// generateZeroSSLEABCredentials generates\n// EAB credentials with ZeroSSL for the ACME issuer. It should only be used\n// if the CA endpoint is ZeroSSL.\nfunc (iss *ACMEIssuer) generateZeroSSLEABCredentials(ctx context.Context) (EABKID string, EABHMACKey string, err error) {\n    endpoint := zerossl.BaseURL + \"/acme/eab\"\n    // ... implementation ...\n    return result.EABKID, result.EABHMACKey, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Message Routing and VESIGS Support in Conversion (C)\nDESCRIPTION: Utilizes 'findrecurse' for message tree traversal, and uses 'vesigs' to handle VESIGS database conversions for messages between formats. Assists in message data migration.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_48\n\nLANGUAGE: C\nCODE:\n```\nfindrecurse (struct msgnum *node); sprintf (fname, \"%s/vesigs.txt\", arg_majordir);\n```\n\n----------------------------------------\n\nTITLE: Python Execution in JavaScript\nDESCRIPTION: Function to execute Python code using a Python VM (pyvm) instance in a JavaScript environment. Handles the execution of code and potential errors.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_62\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction runPython(pyvm, code, error) {\n    pyvm.exec(code);\n}\n```\n\n----------------------------------------\n\nTITLE: LaTeX TikZ Color Map Definition\nDESCRIPTION: Code snippet showing color map definitions in TikZ for 3D Gaussian distribution visualization. The colormap defines gradient transitions between colors for surface visualization.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/MartinThoma/LaTeX-examples/snapshot.txt#_snippet_10\n\nLANGUAGE: LaTeX\nCODE:\n```\ncolormap={whiteblue}{color(0cm)=(white)\n```\n\nLANGUAGE: LaTeX\nCODE:\n```\ncolormap={bluewhitered}{color(0cm)=(blue);\n```\n\n----------------------------------------\n\nTITLE: Testing bytes slicing in Python\nDESCRIPTION: Asserts the correct behavior of slicing operations on a bytes object (`d = b\"abcdefghij\"`), including negative indexing, basic slicing, and slicing with steps (positive and negative).\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nd = b\"abcdefghij\"\nassert d[-6:] == b\"efghij\"\nassert d[1:8:2] == b\"bdfh\"\nassert d[8:1:-2] == b\"igec\"\n```\n\n----------------------------------------\n\nTITLE: Import Statements in Reverse Proxy Module in Go\nDESCRIPTION: Import statements from the reverse proxy module showing dependencies on various Caddy packages and third-party libraries like the proxy protocol implementation.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_61\n\nLANGUAGE: Go\nCODE:\n```\n\"github.com/pires/go-proxyproto\"\n\"github.com/caddyserver/caddy/v2\"\n\"github.com/caddyserver/caddy/v2/caddyconfig\"\n\"github.com/caddyserver/caddy/v2/modules/caddyhttp\"\n\"github.com/caddyserver/caddy/v2/modules/caddytls\"\n\"github.com/caddyserver/caddy/v2/modules/internal\"\n```\n\n----------------------------------------\n\nTITLE: LaTeX TikZ Node Style Definition\nDESCRIPTION: TikZ code defining node styles for diagrams. These snippets show how custom node styles are created for specific visualization types.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/MartinThoma/LaTeX-examples/snapshot.txt#_snippet_11\n\nLANGUAGE: LaTeX\nCODE:\n```\ntikzstyle{every node}=[bplus]\n```\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\node (h21)[hidden, relu] at (2, 1.5) {};\n```\n\nLANGUAGE: LaTeX\nCODE:\n```\nnode[inner sep=0pt] (dangera) at (-0.8,2.5*\\leveldist\n```\n\nLANGUAGE: LaTeX\nCODE:\n```\ndropout}=[draw,dashed,fill=colorbgreen!30]\n```\n\n----------------------------------------\n\nTITLE: TypeScript Utility: AutoResolve from util\nDESCRIPTION: Implements an auto-resolving logic likely used for handling asynchronous path resolution or resource fetching within the cspell utility library.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_49\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-lib/src/lib/util/AutoResolve.ts\n```\n\n----------------------------------------\n\nTITLE: Finding Substrings in Bytearrays\nDESCRIPTION: This snippet tests the `.find()` method to locate the starting index of a substring within a bytearray.  If the substring isn't present, it returns -1.  The expected output is either an index or -1, depending on the presence of the search string.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nbytearray(b\"abcd\").find(b\"cdaaaaa\") == -1\n```\n\n----------------------------------------\n\nTITLE: Asserting Caddyfile Adaptation in Go Tests\nDESCRIPTION: Uses `caddytest.AssertAdapt` to test the adaptation of a Caddy configuration snippet. It takes a testing object `t`, the configuration content (often a multi-line raw string), the adapter name (e.g., `\"caddyfile\"`), and potentially expected output or adapter input.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_11\n\nLANGUAGE: Go\nCODE:\n```\ncaddytest.AssertAdapt(t, `\n...\n`, \"caddyfile\", `{\n...\n`)\n```\n\n----------------------------------------\n\nTITLE: Porta Cipher Implementation\nDESCRIPTION: Python implementation of the Porta cipher, a polyalphabetic substitution cipher. Contains the definition of substitution tables for each key letter and example encryption/decryption operations.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\n# Substitution tables for Porta cipher\n(\"ABCDEFGHIJKLM\", \"NOPQRSTUVWXYZ\"),\n(\"ABCDEFGHIJKLM\", \"ZNOPQRSTUVWXY\"),\n(\"ABCDEFGHIJKLM\", \"YZNOPQRSTUVWX\"),\n(\"ABCDEFGHIJKLM\", \"XYZNOPQRSTUVW\"),\n(\"ABCDEFGHIJKLM\", \"WXYZNOPQRSTUV\"),\n(\"ABCDEFGHIJKLM\", \"VWXYZNOPQRSTU\"),\n(\"ABCDEFGHIJKLM\", \"UVWXYZNOPQRST\"),\n(\"ABCDEFGHIJKLM\", \"TUVWXYZNOPQRS\"),\n(\"ABCDEFGHIJKLM\", \"STUVWXYZNOPQR\"),\n(\"ABCDEFGHIJKLM\", \"RSTUVWXYZNOPQ\"),\n(\"ABCDEFGHIJKLM\", \"QRSTUVWXYZNOP\"),\n(\"ABCDEFGHIJKLM\", \"PQRSTUVWXYZNO\"),\n(\"ABCDEFGHIJKLM\", \"OPQRSTUVWXYZN\"),\n\n# Example encrypted text\n'QRACRWU'\n```\n\n----------------------------------------\n\nTITLE: LaTeX TikZ Matrix Definition\nDESCRIPTION: Code snippet showing matrix construction in TikZ for Karnaugh maps. The matrix creates a grid layout with nodes for creating logic diagrams.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/MartinThoma/LaTeX-examples/snapshot.txt#_snippet_12\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\matrix (mapa) [matrix of nodes,\n```\n\n----------------------------------------\n\nTITLE: Constant Definition with Unknown Word - C\nDESCRIPTION: This snippet shows a commented-out definition of a character array 'spare' within a struct, using the size REGISTRYSIZE. The word 'REGISTRYSIZE' is flagged as an unknown word. It defines the size allocated for registry data.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_72\n\nLANGUAGE: C\nCODE:\n```\n/*char spare    [REGISTRYSIZE-1024]; */\n```\n\n----------------------------------------\n\nTITLE: Node.js Process Reporting and Signal Handling Configuration\nDESCRIPTION: This snippet details constants and functions related to process reporting, handling fatal errors, signals, and uncaught exceptions in Node.js. It includes configuration options for report directory, filename, and signals like SIGUSR2, along with functions to generate reports and handle signals efficiently, contributing to robust process management and diagnostics.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/node.txt#_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\n# Report configuration parameters\n--report-compact\n--report-directory\n--report-filename\n--report-on-fatalerror\n--report-on-signal\n--report-uncaught-exception\n// Signal constants\nSIGUSR2\n// Functions for reporting\nwriteReport()\n// Process report management\nprocess.report\n// Error and signal handling\nreportOnFatalError\nreportOnSignal\nreportOnUncaughtException\n```\n\n----------------------------------------\n\nTITLE: StringDecoder Class and Encoding Support in Node.js\nDESCRIPTION: This snippet describes the StringDecoder class used for decoding Buffer objects into strings with specified encodings. It supports encodings like UTF-8, charset conversions, and provides methods for ending the decoding process. Dependencies include Buffer and DataView for buffer management.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/node.txt#_snippet_31\n\nLANGUAGE: JavaScript\nCODE:\n```\nBuffer\nDataView\nStringDecoder\nTypedArray\nbuffer\nencoding\nend()\nnew StringDecoder([encoding])\nstringDecoder\nstringDecoder.end()\nstringDecoder.end([buffer])\nstringDecoder.write()\nstringDecoder.write(buffer)\nstring_decoder\nutf8\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Callback Structure\nDESCRIPTION: This represents a common pattern for asynchronous functions where a function accepts a value, a success callback, and an error callback.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/node.txt#_snippet_35\n\nLANGUAGE: text\nCODE:\n```\n(foo, onSuccessCallback, onErrorCallback)\n```\n\n----------------------------------------\n\nTITLE: Sieve of Eratosthenes Implementation in Project Euler Problem 50\nDESCRIPTION: Implementation of the Sieve of Eratosthenes algorithm for prime number generation, misspelled as 'Erotosthenes'.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_85\n\nLANGUAGE: Python\nCODE:\n```\nSieve of Erotosthenes\n```\n\n----------------------------------------\n\nTITLE: Custom Namespace Configuration in Svelte Tests\nDESCRIPTION: Example from a Svelte test file specifying a custom namespace 'svefefe' that is flagged as an unknown word by CSpell.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/sveltejs/svelte/snapshot.txt#_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nnamespace: 'svefefe'\n```\n\n----------------------------------------\n\nTITLE: Comment on Updating Editor Root Node (TypeScript)\nDESCRIPTION: Comments explaining limitations of directly (misspelled 'diretcly') updating the editor's root node, possibly related to appending (misspelled 'appent') MentionNodes, within the EditedMessagePlugin.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nWe can't do that by diretcly updating the $root\n```\n\nLANGUAGE: typescript\nCODE:\n```\nthe $root (e.g. $root.appent(...MentionNodes)), because\n```\n\n----------------------------------------\n\nTITLE: Variable Declaration with Unknown Word - C\nDESCRIPTION: These snippets declare integer variables. The words 'keychu', 'kydnam', 'kydcom', 'kydadr', 'kydpho', 'kydage', 'kydsex', 'kydpss', 'dfwarn', 'dfcrit', are flagged as unknown words.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_106\n\nLANGUAGE: C\nCODE:\n```\nint keychu;\n```\n\nLANGUAGE: C\nCODE:\n```\nint kydnam;\n```\n\nLANGUAGE: C\nCODE:\n```\nint kydcom;\n```\n\nLANGUAGE: C\nCODE:\n```\nint kydadr;\n```\n\nLANGUAGE: C\nCODE:\n```\nint kydpho;\n```\n\nLANGUAGE: C\nCODE:\n```\nint kydage;\n```\n\nLANGUAGE: C\nCODE:\n```\nint kydsex;\n```\n\nLANGUAGE: C\nCODE:\n```\nint kydpss;\n```\n\nLANGUAGE: C\nCODE:\n```\nint dfwarn;\n```\n\nLANGUAGE: C\nCODE:\n```\nint dfcrit;\n```\n\n----------------------------------------\n\nTITLE: Python Package Importing in WebAssembly\nDESCRIPTION: Python module that enables importing PyPI packages in a WebAssembly environment. It includes functionality to download and load wheel packages at runtime in the browser.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_58\n\nLANGUAGE: Python\nCODE:\n```\nimport whlimport\nwhlimport.setup()\n\n@asyncweb.main\nawait whlimport.load_package(\"pygments\")\n```\n\n----------------------------------------\n\nTITLE: Rollup configuration in rollup.config.mjs\nDESCRIPTION: This configuration file sets up how Rollup will bundle the cspell package, including input entry points, output formats, plugins, and external dependencies. It facilitates packaging for distribution by defining build targets and transformations.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_92\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport commonjs from '@rollup/plugin-commonjs';\nimport resolve from '@rollup/plugin-node-resolve';\n\nexport default {\n  input: 'src/index.ts',\n  output: {\n    file: 'dist/bundle.js',\n    format: 'cjs'\n  },\n  plugins: [resolve(), commonjs()],\n  external: ['fs', 'path']\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript Utility Module for Error Handling\nDESCRIPTION: Imports utility functions for error handling from @wireapp/api-client, likely used for creating, logging, or managing synthetic errors during HTTP operations or API responses.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_124\n\nLANGUAGE: TypeScript\nCODE:\n```\nsrc/script/util/ErrorUtil.ts\n```\n\n----------------------------------------\n\nTITLE: Declaring the caddycmd Package in Go\nDESCRIPTION: Declares the current Go file as part of the `caddycmd` package. Files within this package contribute to the implementation of Caddy's command-line interface.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_17\n\nLANGUAGE: Go\nCODE:\n```\npackage caddycmd\n```\n\n----------------------------------------\n\nTITLE: Convolutional Neural Network Operations in Python\nDESCRIPTION: Implements convolution operations for CNNs over data and patterns, including weight calculations and convolution results. Functions like convolute() and references to data inputs are included.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_59\n\nLANGUAGE: Python\nCODE:\n```\n109:31 - Unknown word (convs) -- convolute(self, data, convs, w_convs, thre_convs\n```\n\nLANGUAGE: Python\nCODE:\n```\n213:25 - Unknown word (datas) -- self, patterns, datas_train, datas_teach,\n```\n\nLANGUAGE: Python\nCODE:\n```\n229:35 - Unknown word (conved) -- data_focus1, data_conved1 = self.convolute(\n```\n\nLANGUAGE: Python\nCODE:\n```\n299:13 - Unknown word (yplot) -- yplot = [error_accuracy for\n```\n\nLANGUAGE: Python\nCODE:\n```\n43:19 - Unknown word (thre) -- self.rate_thre = rate_t\n```\n\n----------------------------------------\n\nTITLE: Override Forbidden Word with cspell comment directive (JavaScript)\nDESCRIPTION: Uses the `cspell:ignore` comment directive within a file to prevent `cspell` from flagging a specific word as misspelled, even if it's defined as forbidden. This provides a file-level or snippet-level override mechanism.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/forbidden-words.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * Do not mark `forbiddenWord` as incorrect.\n * cspell:ignore forbiddenWord\n */\n```\n\n----------------------------------------\n\nTITLE: Extending Native Prototypes in JavaScript\nDESCRIPTION: Example showing modification of native prototype objects, which is generally considered a bad practice as it can lead to unexpected behavior in other code.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/eslint/eslint/snapshot.txt#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nprototype.forEach = 'muhahaha'\");\n```\n\n----------------------------------------\n\nTITLE: Node.js REPL Environment Settings and Commands\nDESCRIPTION: This snippet describes the structure of the Node.js REPL (Read-Eval-Print Loop) module, including environment options, command definitions, and runtime behaviors. It covers command loading/saving, history, signal handling, and custom command registration, enabling development of interactive JavaScript shells with configurable prompts and error handling.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/node.txt#_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\n# REPL server setup and management\nrepl.start()\nrepl.createInterface()\nrepl.defineCommand()\nrepl.displayPrompt()\nrepl.setupHistory()\n// Environment options and features\ncontext, eval, ignoreUndefined\n// Special commands and behaviors\n.load, .save, .exit, .help\n// Signal and error handling\nuncaughtException\n// Process and stream configurations\nprocess.stdin\nprocess.stdout\n```\n\n----------------------------------------\n\nTITLE: Browser Integration for WebAssembly Python\nDESCRIPTION: Python module that provides browser interaction capabilities for WebAssembly Python. It includes functions for JavaScript interoperability such as jsstr, jsclosure, and jsfloat for type conversion and callbacks.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_56\n\nLANGUAGE: Python\nCODE:\n```\njsstr = window.new_from_str\njsclosure = window.new_closure\njsclosure_once = window.new_closure\n_jsfloat = window.new_from_float\n\ndef jsfloat(n):\n    return _jsfloat(float(n))\n```\n\n----------------------------------------\n\nTITLE: WebAssembly Module Configuration for RustPython\nDESCRIPTION: TOML configuration for the WebAssembly library, defining dependencies and crate types. This configures how RustPython compiles to WebAssembly for browser execution.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_55\n\nLANGUAGE: TOML\nCODE:\n```\ncrate-type = [\"cdylib\", \"rlib\"]\n```\n\n----------------------------------------\n\nTITLE: Using YAML Processing Functions\nDESCRIPTION: This snippet covers YAML processing functions. It includes functions for emitting and parsing YAML data to and from files and URLs. These functions are from the YAML extension in PHP and allow developers to work with YAML data formats. Proper installation of the YAML extension is required.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/php.txt#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nyaml_emit\nyaml_emit_file\nyaml_parse\nyaml_parse_file\nyaml_parse_url\n```\n\n----------------------------------------\n\nTITLE: Configuring ACME TLS-ALPN Challenge in Automation (Go)\nDESCRIPTION: TLSALPNChallengeConfig is a Go struct for configuring the ACME TLS-ALPN challenge used in automated certificate issuance. Fields include disabling the challenge, specifying custom ports, and toggling behavior for handling ALPN requests. It is used as part of the Automation configuration in caddytls and certmagic. Dependencies: certmagic, caddyserver/caddy/v2, and ACME challenge protocols. Input is via JSON struct fields, and this configuration modifies how Caddy responds to the acme-tls/1 protocol challenge; output is the struct, further used internally.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_78\n\nLANGUAGE: Go\nCODE:\n```\n// TLSALPNChallengeConfig configures the ACME TLS-ALPN challenge.\ntype TLSALPNChallengeConfig struct {\n    Disable          bool   `json:\"disable,omitempty\"` // disables the challenge\n    AlternativePort  int    `json:\"alt_port,omitempty\"` // sets custom port\n    // ... other fields ...\n}\n```\n\n----------------------------------------\n\nTITLE: Dart Error Type References in DartFuzz\nDESCRIPTION: Code snippets showing error type declarations and references from the DartFuzz testing tool, which is used for fuzzing Dart code to detect runtime issues.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/dart-lang/sdk/snapshot.txt#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\n'offset', [DartType.FORMATEXCEPTION, DartType.VOID], false\n```\n\nLANGUAGE: Dart\nCODE:\n```\nmessage', [DartType.STATEERROR, DartType.VOID], false\n```\n\nLANGUAGE: Dart\nCODE:\n```\ntoString', [DartType.ARGUMENTERROR, DartType.VOID], true\n```\n\nLANGUAGE: Dart\nCODE:\n```\ntoString', [DartType.CONCURRENTMODIFICATIONERROR, DartType.VOID],\n```\n\nLANGUAGE: Dart\nCODE:\n```\n[DartType.INTEGERDIVISIONBYZEROEXCEPTION, DartType.VOID], true\n```\n\nLANGUAGE: Dart\nCODE:\n```\ntoString', [DartType.MAPENTRY_INT_STRING, DartType\n```\n\nLANGUAGE: Dart\nCODE:\n```\ntoString', [DartType.STACKOVERFLOWERROR, DartType.VOID], true\n```\n\nLANGUAGE: Dart\nCODE:\n```\ntoString', [DartType.UNIMPLEMENTEDERROR, DartType.VOID], true\n```\n\nLANGUAGE: Dart\nCODE:\n```\ntoString', [DartType.UNSUPPORTEDERROR, DartType.VOID], true\n```\n\nLANGUAGE: Dart\nCODE:\n```\nDartLib('end', [DartType.RANGEERROR, DartType.VOID], false\n```\n\n----------------------------------------\n\nTITLE: Running cspell on project (sh)\nDESCRIPTION: This snippet demonstrates the command used to invoke the cspell spell checker. The `.` argument tells cspell to scan the current directory and its subdirectories based on the project's configuration, identifying potential spelling mistakes.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/issues/issue-4811/#local/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncspell .\n```\n\n----------------------------------------\n\nTITLE: HTML Entity to Unicode Code Point Mappings in JavaScript\nDESCRIPTION: JavaScript object mapping HTML entity names (without the & prefix) to their corresponding Unicode code point values. These mappings are likely used during the parsing phase of the Svelte compiler to handle HTML entities in template content.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/sveltejs/svelte/snapshot.txt#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  'gnapprox;': 10890,\n  'hksearow;': 10533,\n  'hkswarow;': 10534,\n  'imagline;': 8464,\n  'imagpart;': 8465,\n  'infintie;': 10717,\n  'intercal;': 8890,\n  'intlarhk;': 10775,\n  'laemptyv;': 10676,\n  'ldrushar;': 10571,\n  'leqslant;': 10877,\n  'lesdotor;': 10883,\n  'llcorner;': 8990,\n  'lnapprox;': 10889,\n  'lrcorner;': 8991,\n  'lurdshar;': 10570,\n  'mapstoup;': 8613,\n  'multimap;': 8888,\n  'ncongdot;': 10861,\n  'notindot;': 8949,\n  'otimesas;': 10806,\n  'plusacir;': 10787,\n  'pointint;': 10773,\n  'precneqq;': 10933,\n  'precnsim;': 8936,\n  'profalar;': 9006,\n  'profline;': 8978,\n  'profsurf;': 8979,\n  'raemptyv;': 10675,\n  'realpart;': 8476,\n  'rppolint;': 10770,\n  'rtriltri;': 10702,\n  'scpolint;': 10771,\n  'setminus;': 8726,\n  'shortmid;': 8739,\n  'smeparsl;': 10724,\n  'sqsubset;': 8847,\n  'sqsupset;': 8848,\n  'subseteq;': 8838,\n  'succneqq;': 10934,\n  'succnsim;': 8937,\n  'supseteq;': 8839,\n  'thetasym;': 977,\n  'thicksim;': 8764,\n  'timesbar;': 10801,\n  'triminus;': 10810,\n  'trpezium;': 9186,\n  'ulcorner;': 8988,\n  'urcorner;': 8989,\n  'varkappa;': 1008,\n  'varsigma;': 962,\n  'vartheta;': 977,\n  'blacktriangleright;': 9656,\n  'Cayleys;': 8493,\n  'Cconint;': 8752,\n  'longleftrightarrow;': 10231,\n  'Uparrow;': 8657,\n  'alefsym;': 8501,\n  'angrtvb;': 8894,\n  'angzarr;': 9084,\n  'asympeq;': 8781,\n  'backsim;': 8765,\n  'bemptyv;': 10672,\n  'bigcirc;': 9711,\n  'bigodot;': 10752,\n  'bigstar;': 9733,\n  'bnequiv;': 8801,\n  'boxplus;': 8862,\n  'ccupssm;': 10832,\n  'cemptyv;': 10674,\n  'cirscir;': 10690,\n  'coloneq;': 8788,\n  'congdot;': 10861,\n  'cudarrl;': 10552,\n  'cudarrr;': 10549,\n  'cularrp;': 10557,\n  'curarrm;': 10556,\n  'dbkarow;': 10511\n}\n```\n\n----------------------------------------\n\nTITLE: Defining News Macros in C\nDESCRIPTION: This code snippet defines a series of macros using the #define preprocessor directive in C. These macros likely represent constants used within a news application, specifically for an offline reader. Each macro is associated with a numeric value representing news file states, options and header information.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_20\n\nLANGUAGE: C\nCODE:\n```\n#define NEWSFILE 3\n#define ONVT 4\n#define ONLT 5\n#define ONNEWS 6\n#define ONDHDR 7\n```\n\n----------------------------------------\n\nTITLE: TypeScript CSpell Settings Server Class\nDESCRIPTION: Implements server-side settings management, including APIs for fetching, updating, and syncing settings across extensions.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* CSpellSettingsServer class */\n```\n\n----------------------------------------\n\nTITLE: Testing round trip encoding/decoding with Unicode strings in Python\nDESCRIPTION: Calls a custom function `round_trip` (presumably defined elsewhere) with complex Unicode strings containing various symbols and characters from different scripts. This likely tests if encoding and then decoding the string results in the original string.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_46\n\nLANGUAGE: python\nCODE:\n```\n# Assuming round_trip function is defined elsewhere, e.g.:\n# def round_trip(s):\n#     return s.encode('utf-8').decode('utf-8') == s\n\nround_trip(\"☢🐣 ᖇ𝓤𝕊тⓟ𝕐𝕥卄σ𝔫 ♬👣\")\nround_trip(\"💀👌 ק𝔂tℍⓞ𝓷 ３  🔥👤\")\n```\n\n----------------------------------------\n\nTITLE: Mapping Baconian Cipher Words to Letters in Python\nDESCRIPTION: Defines a mapping from Baconian cipher words to alphabet letters, facilitating encoding and decoding functions for the Baconian cipher. The code relies on string literals representing cipher patterns to map to respective characters, used in encoding/decoding processes.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nl = \"ABABA\"\n```\n\nLANGUAGE: Python\nCODE:\n```\nm = \"ABABB\"\n```\n\nLANGUAGE: Python\nCODE:\n```\nn = \"ABBAA\"\n```\n\nLANGUAGE: Python\nCODE:\n```\no = \"ABBAB\"\n```\n\nLANGUAGE: Python\nCODE:\n```\np = \"ABBBA\"\n```\n\nLANGUAGE: Python\nCODE:\n```\nq = \"ABBBB\"\n```\n\nLANGUAGE: Python\nCODE:\n```\nr = \"BAAAA\"\n```\n\nLANGUAGE: Python\nCODE:\n```\ns = \"BAAAB\"\n```\n\nLANGUAGE: Python\nCODE:\n```\nt = \"BAABA\"\n```\n\nLANGUAGE: Python\nCODE:\n```\nu = \"BAABB\"\n```\n\nLANGUAGE: Python\nCODE:\n```\nv = \"BBBAB\"\n```\n\nLANGUAGE: Python\nCODE:\n```\nw = \"BABAA\"\n```\n\nLANGUAGE: Python\nCODE:\n```\nx = \"BABAB\"\n```\n\nLANGUAGE: Python\nCODE:\n```\ny = \"BABBA\"\n```\n\nLANGUAGE: Python\nCODE:\n```\nz = \"BABBB\"\n```\n\nLANGUAGE: Python\nCODE:\n```\nAABBBAABAAABABAABABAABBAB\n```\n\nLANGUAGE: Python\nCODE:\n```\nBABAAABBABBAAAAABABAAAABB\n```\n\nLANGUAGE: Python\nCODE:\n```\nAAAAB\n```\n\nLANGUAGE: Python\nCODE:\n```\nAAABA\n```\n\n----------------------------------------\n\nTITLE: Configuring @cspell/cspell-json-reporter in cspell.yaml (YAML)\nDESCRIPTION: This YAML configuration snippet shows how to add the JSON reporter to the CSpell configuration file (cspell.yaml). It includes the reporter name and an optional setting for the output file path (outFile) where the JSON results will be saved.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-json-reporter/README.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nreporters: [['@cspell/cspell-json-reporter', { outFile: 'out.json' }]]\n```\n\n----------------------------------------\n\nTITLE: Mail Cleanup and Top Posters Definitions (C)\nDESCRIPTION: Defines constants and external structures such as 'topposters' for keeping track of top poster statistics and email cleanup configurations. These aid in managing email archive content and user activity statistics.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_43\n\nLANGUAGE: C\nCODE:\n```\n#define AUS_MAILCUB \"MAIL ACCOUNT CLEANUP\"\nextern struct top *topposters;\n```\n\n----------------------------------------\n\nTITLE: Switch Statement Fallthrough Comment in JavaScript\nDESCRIPTION: Example of a comment indicating an intentional fallthrough in a switch statement, which is a pattern recognized by ESLint to suppress no-fallthrough warnings.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/eslint/eslint/snapshot.txt#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// fallsthrough\n```\n\n----------------------------------------\n\nTITLE: Registering Caddyfile Adapter for HTTP Server Configuration in Go\nDESCRIPTION: This snippet demonstrates the registration of a Caddyfile adapter named \"caddyfile\" that interprets HTTP server configurations in the Caddy framework. It establishes the adapter with its server type and parsing routines, enabling the translation of Caddyfile blocks into internal server configuration structures.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncaddyconfig.RegisterAdapter(\"caddyfile\", caddyfile.Adapter{ServerType: \"http\", /* adapter setup and parse functions */})\n```\n\n----------------------------------------\n\nTITLE: Initializing cryptographic ECDH key exchange in Node.js\nDESCRIPTION: This snippet demonstrates the usage of the crypto module's Elliptic Curve Diffie-Hellman (ECDH) functionality to create and manage secure key exchanges for cryptographic operations. It depends on the 'crypto' module and provides methods such as ECDH(), getDiffieHellman(), scrypt(), and scryptSync() to facilitate cryptographic key derivation and secure communication setup.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/node.txt#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\ncrypto.ECDH()\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ncrypto.getDiffieHellman()\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ncrypto.scrypt()\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ncrypto.scryptSync()\n```\n\n----------------------------------------\n\nTITLE: Variable declaration with quasis array in Svelte script\nDESCRIPTION: Declaration of an empty quasis array in a JavaScript file, likely used for handling template literals or quasi-literals in the Svelte preprocessing context.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/sveltejs/svelte/snapshot.txt#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst quasis = [];\n```\n\n----------------------------------------\n\nTITLE: Defining Emoji Keycap Sequences using Unicode Data\nDESCRIPTION: Specifies Unicode sequences for keycap emojis (e.g., #️⃣, *️⃣, 0️⃣-9️⃣). Each entry consists of the base character code point, the variation selector FE0F (for emoji presentation), and the combining enclosing keycap 20E3. It also includes the 'Emoji_Keycap_Sequence' category, a descriptive name, the Unicode version, a count, and the resulting keycap emoji. This defines how standard characters are styled as keycap emojis.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-trie-lib/Samples/emoji-sequences.txt#_snippet_2\n\nLANGUAGE: UnicodeData\nCODE:\n```\n0023 FE0F 20E3; Emoji_Keycap_Sequence        ; keycap: \\x{23}                                                 # E0.6   [1] (#️⃣)\n002A FE0F 20E3; Emoji_Keycap_Sequence        ; keycap: *                                                      # E2.0   [1] (*️⃣)\n0030 FE0F 20E3; Emoji_Keycap_Sequence        ; keycap: 0                                                      # E0.6   [1] (0️⃣)\n0031 FE0F 20E3; Emoji_Keycap_Sequence        ; keycap: 1                                                      # E0.6   [1] (1️⃣)\n0032 FE0F 20E3; Emoji_Keycap_Sequence        ; keycap: 2                                                      # E0.6   [1] (2️⃣)\n0033 FE0F 20E3; Emoji_Keycap_Sequence        ; keycap: 3                                                      # E0.6   [1] (3️⃣)\n...\n```\n\n----------------------------------------\n\nTITLE: OIDCService.ts: Setting Up UserManager with Dexie Config\nDESCRIPTION: This snippet sets up an OpenID Connect (OIDC) user manager with Dexie storage configurations, providing OAuth 2.0 based authentication mechanisms. It imports key authentication protocols from '@wireapp' modules, configures the user manager with Dexie settings, and prepares for secure OAuth interactions.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {KeyAuth} from '@wireapp/core/lib/messagingProtocols';\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst dexioConfig: UserManagerSettings\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nuserManager = new UserManager(dexioConfig);\n```\n\n----------------------------------------\n\nTITLE: WAPM Package Publishing Script\nDESCRIPTION: Shell script for publishing to the WebAssembly Package Manager (WAPM). This script defines features to include in the WAPM package and executes the publish command.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_53\n\nLANGUAGE: Shell\nCODE:\n```\nFEATURES_FOR_WAPM=(stdlib zlib)\nfeatures=\"${FEATURES_FOR_WAPM[*]}\"\nwapm publish\n```\n\n----------------------------------------\n\nTITLE: Read cache format from config\nDESCRIPTION: This bug fix allows the cache format to be read from the configuration file. This enhances the flexibility and configurability of the spellchecking tool by allowing users to specify the cache format. The change probably affects cache serialization and deserialization.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/CHANGELOG.md#_snippet_15\n\nLANGUAGE: git\nCODE:\n```\nBe able to read cache format from config ([#4190](https://github.com/streetsidesoftware/cspell/issues/4190)) ([6029893](https://github.com/streetsidesoftware/cspell/commit/60298938cd39669982ad1ca4293571242918761d))\n```\n\n----------------------------------------\n\nTITLE: Running CSpell on Project Directory - Shell\nDESCRIPTION: Executes the CSpell spell checker using the shell command 'cspell .', which instructs CSpell to recursively check all files in the current directory. Requires CSpell to be installed as a global or local npm package and available in the command line environment. Accepts various configuration files (e.g., cspell.json or cspell.config.yaml) and outputs a summary of checked files and detected issues. Input is the directory path (here, '.'), and output is a plain text report; returns error codes if issues are found.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/issues/issue-4811/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncspell .\n```\n\n----------------------------------------\n\nTITLE: Populating Dictionary from File Content\nDESCRIPTION: This shell command sequence extracts potential words from Markdown files (`**/*.md`), filters them to get unique words (`--words-only --unique`), sorts them case-insensitively (`sort --ignore-case`), and appends them to the `project-words.txt` custom dictionary file. This helps bootstrap the dictionary with words already present in the project.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/getting-started.mdx#_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ncspell --words-only --unique \"**/*.md\" | sort --ignore-case >> project-words.txt\n```\n\n----------------------------------------\n\nTITLE: Scoring Algorithm and Data Processing in Python\nDESCRIPTION: Implements scoring based on proximity, developing functions such as procentual_proximity. Uses variables like dlist, maxd, slist, indicating data comparisons and scoring enhancements.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_69\n\nLANGUAGE: Python\nCODE:\n```\n2:17 - Unknown word (markmelnic) -- | developed by: markmelnic\n```\n\nLANGUAGE: Python\nCODE:\n```\n50:9 - Unknown word (dlist) -- for dlist, weight in zip(data\n```\n\nLANGUAGE: Python\nCODE:\n```\n52:9 - Unknown word (maxd) -- maxd = max(dlist)\n```\n\nLANGUAGE: Python\nCODE:\n```\n5:34 - Unknown word (percentual) -- using a range based percentual proximity algorithm\n```\n\nLANGUAGE: Python\nCODE:\n```\n90:9 - Unknown word (slist) -- for slist in score_lists:\n```\n\nLANGUAGE: Python\nCODE:\n```\n97:5 - Unknown word (procentual) -- def procentual_proximity(\n```\n\n----------------------------------------\n\nTITLE: Indexing Bytearrays\nDESCRIPTION: This snippet tests the `.index()` method, which is used to find the index of a specified substring within a bytearray.  The input is a bytearray and the output is the index of the provided search string. The expected output depends on the presence of the provided substring.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nbytearray(b\"abcd\").index(b\"cdaaaaa\")\n```\n\n----------------------------------------\n\nTITLE: No Code Snippets Present\nDESCRIPTION: The provided text contains primarily textual annotations, comments, and documentation references in various formats. There are no isolated executable or script code snippets to be formally documented.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/MartinThoma/LaTeX-examples/snapshot.txt#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Comment on Custom Transformer (TypeScript)\nDESCRIPTION: A comment indicating a custom (misspelled 'Cutom') transformer for handling mentions within the getMentionMarkdownTransformer utility.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\n// Cutom transformer for handling\n```\n\n----------------------------------------\n\nTITLE: Object with Duplicate Keys in JavaScript\nDESCRIPTION: Example showing an object with a property name that might be a duplicate key, which would violate the no-dupe-keys rule in ESLint.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/eslint/eslint/snapshot.txt#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nquxx: \"qux\"\n```\n\n----------------------------------------\n\nTITLE: Example flagWords Configuration - TypeScript\nDESCRIPTION: This snippet provides an example of how to define words that should always be flagged as incorrect within a dictionary definition's `flagWords` array. It shows the format for specifying a single word (`word`) and providing one or more suggestions (`word: suggestion` or `word->suggestion, suggestions`). The purpose is to demonstrate how to configure forbidden words and their suggested replacements.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/Configuration/auto_properties.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"flagWords\": [\n  \"color: colour\",\n  \"incase: in case, encase\",\n  \"canot->cannot\",\n  \"cancelled->canceled\"\n]\n```\n\n----------------------------------------\n\nTITLE: Node.js Embedding API: V8 and Node Platform Components\nDESCRIPTION: This snippet outlines the core components involved in embedding the V8 JavaScript engine and Node.js runtime, such as ArrayBuffer, Isolate, Platform, and Environment, fundamental for custom embedding or extending Node.js functionalities.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/node.txt#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nv8::ArrayBuffer::Allocator\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nnode::ArrayBufferAllocator::Create()\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nnode::Environment\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nnode::Isolate\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nv8::Context\n```\n\n----------------------------------------\n\nTITLE: Callback Function in Node.js\nDESCRIPTION: This is a general example of a callback function.  It indicates the expected format for a callback function, which takes an error object and a value as arguments. This pattern is common in Node.js asynchronous operations.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/node.txt#_snippet_34\n\nLANGUAGE: text\nCODE:\n```\n(err, value) => ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Restricted Globals in ESLint\nDESCRIPTION: Example of an ESLint rule configuration that restricts the use of certain global variables in the codebase, including 'event' and 'fdescribe'.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/eslint/eslint/snapshot.txt#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n[\"error\", \"event\", \"fdescribe\"]\n```\n\n----------------------------------------\n\nTITLE: TypeScript Utility Module for Emoji Handling\nDESCRIPTION: A module that imports the emoji-picker-react library, flattens emoji values, groups emojis by certain properties, and includes utility functions such as extracting skintone modifiers. It facilitates emoji classification, retrieval, and manipulation for UI components.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_121\n\nLANGUAGE: TypeScript\nCODE:\n```\nsrc/script/util/EmojiUtil.ts\n```\n\n----------------------------------------\n\nTITLE: Type Check Condition: Object and Function\nDESCRIPTION: This snippet demonstrates a conditional check that determines if a value is either not an object or a function OR if the value is null. This helps determine the type of a variable and handle various data types.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/node.txt#_snippet_36\n\nLANGUAGE: text\nCODE:\n```\n(typeof value !==  object  && typeof value !==  function ) || value === null\n```\n\n----------------------------------------\n\nTITLE: Define Forbidden Words in cspell config (JSON flagWords)\nDESCRIPTION: Lists words that should always be marked as misspelled by `cspell` regardless of other dictionaries. This provides a dedicated section for defining forbidden terms directly in the configuration file.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/forbidden-words.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n\"flagWords\": [\"forbiddenWord\"]\n```\n\n----------------------------------------\n\nTITLE: Installing hunspell-reader Globally (Shell)\nDESCRIPTION: Installs the `hunspell-reader` command-line tool globally using npm, making it accessible from any directory. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/hunspell-reader/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install -g hunspell-reader\n```\n\n----------------------------------------\n\nTITLE: Ignoring Forbidden Words via ignoreWords in cspell Configuration - JSONC\nDESCRIPTION: Demonstrates how to prevent specific words from being flagged by adding them to the 'ignoreWords' array in the cspell configuration file (shown here in JSONC format). This setting takes precedence and allows overriding forbidden word rules globally or within a configuration scope.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/CHANGELOG.md#_snippet_4\n\nLANGUAGE: JSONC\nCODE:\n```\n{\n    \"ignoreWords\": [\"forbiddenWord\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining regex patterns in YAML with automatic trimming and multiline support\nDESCRIPTION: Illustrates how to include regex patterns in YAML with leading/trailing spaces by using the `>` operator and ensuring patterns are automatically trimmed, facilitating easier pattern definitions without manual escaping or complex syntax.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/Configuration/patterns.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nignoreRegExpList:\n  - >\n    /auth_token: .*/g\n  - >-\n    /this works too/g\n```\n\n----------------------------------------\n\nTITLE: Handling HTTP Response and Errors\nDESCRIPTION: These snippets deal with setting HTTP response headers and potentially handling errors in a fastcgi context. The code suggests an attempt to set the Content-Length header and returns errors based on HTTP status codes. Dependencies likely include the http package, as well as the `caddyhttp` package for error handling. The input would be the request object, and the output is an HTTP response.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_57\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddyhttp/reverseproxy/fastcgi/client.go:143:15    - Unknown word (caddyhttp)   -- return nil, caddyhttp.Error(http.StatusLengthRequir\n```\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddyhttp/reverseproxy/fastcgi/client.go:147:15    - Unknown word (caddyhttp)   -- return nil, caddyhttp.Error(http.StatusLengthRequir\n```\n\n----------------------------------------\n\nTITLE: Build script using ECMAScript module syntax in build.mjs\nDESCRIPTION: This script likely orchestrates the build process for a package utilizing ECMAScript Modules (ESM). It may include tasks such as transpiling, bundling, or copying assets. Dependencies might include build tools like Rollup or esbuild. The script expects to be invoked during package build phases to produce distributable code.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_88\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { build } from 'some-build-tool';\n\n// Initiate build process\nbuild({ /* configuration options */ });\n```\n\n----------------------------------------\n\nTITLE: Macro Definition with Unknown Word - C\nDESCRIPTION: This snippet defines a macro 'AVONLY'. The word 'AVONLY' is flagged as an unknown word. This Macro expands to a strcmp call.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_89\n\nLANGUAGE: C\nCODE:\n```\n#define AVONLY(s) (strcmp(classes[i\n```\n\n----------------------------------------\n\nTITLE: Testing string multiplication in Python\nDESCRIPTION: Asserts that multiplying a string by an integer correctly repeats the string content. Tests both `str * int` and `int * str` forms.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nassert \"xy\" * 3 == \"xyxyxy\"\nassert 3 * \"xy\" == \"xyxyxy\"\n```\n\n----------------------------------------\n\nTITLE: Opus Multistream Encoder and Decoder Management in Ada\nDESCRIPTION: This snippet outlines functions and constants for handling multistream Opus encoder and decoder states, including functions to get encoder/decoder sizes, create encoders, and retrieve configuration parameters like maximum length. It also references the associated external names for linking with underlying C implementations.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/AdaDoom3/AdaDoom3/snapshot.txt#_snippet_20\n\nLANGUAGE: Ada\nCODE:\n```\n- Functions such as opus_multistream_encoder_get_size, opus_multistream_surround_encoder_get, and opus_multistream_encoder_create, used for managing multi-stream encoders.\n- External linkage attributes via \"External_Name\" for integrating C functions.\n- Constants defining request types and maximum parameter sizes.\n- Comments indicating their purpose is to interface with Opus's multistream encoding capabilities.\n```\n\n----------------------------------------\n\nTITLE: Python Environment Settings Implementation in Rust\nDESCRIPTION: Rust code that handles Python environment variables such as PYTHONNOUSERSITE, PYTHONDONTWRITEBYTECODE, and PYTHONINTMAXSTRDIGITS. This code controls runtime behavior based on environment settings.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_54\n\nLANGUAGE: Rust\nCODE:\n```\nuser_site || env_bool(\"PYTHONNOUSERSITE\"));\nbytecode || env_bool(\"PYTHONDONTWRITEBYTECODE\"));\nSome(val) = get_env(\"PYTHONINTMAXSTRDIGITS\") {\n```\n\n----------------------------------------\n\nTITLE: Grahams Law of Effusion in Physics in Python\nDESCRIPTION: Calculates effusion rate for gases based on Graham's law, useful in gas dynamics and kinetic theory, referencing effusion rates and molar constants.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_74\n\nLANGUAGE: Python\nCODE:\n```\n24:22 - Unknown word (Effustion) -- effusion_rate_1: Effustion rate of first gas (m\n```\n\nLANGUAGE: Python\nCODE:\n```\n26:58 - Unknown word (kmol) -- first gas (g/mol, kg/kmol, etc.)\n```\n\n----------------------------------------\n\nTITLE: Import Statements for Caddy HTTP Rewrite Module (Go)\nDESCRIPTION: This snippet shows import statements required for the rewrite.go and rewrite_test.go files, including github.com/caddyserver/caddy/v2 and caddyhttp modules, which provide core functionality for path handling and testing infrastructure. These dependencies are essential for implementing and testing rewrite rules in Caddy's HTTP server.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_69\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n\t\"github.com/caddyserver/caddy/v2\"\n\t\"github.com/caddyserver/caddy/v2/modules/caddyhttp\"\n)\n```\n\n----------------------------------------\n\nTITLE: TypeScript: Message Repository Test Data and Dependencies\nDESCRIPTION: This snippet references imports like 'ConnectionStatus', 'CONVERSATION_TYPE', and others from '@wireapp' libraries, used for testing message repository functionality including connection states, conversation types, message sending, user IDs, and error handling.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_75\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {ConnectionStatus} from '@wireapp/api-client/lib/connection';\nimport {CONVERSATION_TYPE} from '@wireapp/api-client/lib/conversation';\nimport {MessageSendingState} from '@wireapp/core/lib/conversation';\nimport {userIds} from 'selfid';\n```\n\n----------------------------------------\n\nTITLE: Ignoring Patterns using Regular Expressions (JSON) in CSpell\nDESCRIPTION: JSON configuration example for the `ignoreRegExpList` setting in CSpell. This snippet shows how to define a JavaScript-style regular expression (`/\\b[A-Z]+\\b/g`) within a JSON string to ignore all-caps words during spell checking. Note the necessary double backslash for escaping within the JSON format.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/Configuration/auto_properties.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"ignoreRegExpList\": [\"/\\\\b[A-Z]+\\\\b/g\"]\n```\n\n----------------------------------------\n\nTITLE: Physics: Basic Orbital Capture Calculations in Python\nDESCRIPTION: Calculates parameters related to orbital mechanics using constants and physics principles, referencing astronomer Rachel Bezanson. Used in space physics simulations.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_72\n\nLANGUAGE: Python\nCODE:\n```\n173:72 - Unknown word (Bezanson) -- Astronomy|Professor Rachel Bezanson\n```\n\n----------------------------------------\n\nTITLE: Setting WiX UI Properties for Windows Installer\nDESCRIPTION: XML configuration for a Windows installer using WiX Toolset, setting properties for exit dialog checkboxes and installation directory. These properties control the installer's UI behavior and launch options.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_50\n\nLANGUAGE: XML\nCODE:\n```\n<Property Id=\"WIXUI_EXITDIALOGOPTIONALCHECKBOXTEXT\" Value=\"!(loc.LaunchApp\"/>\n<Property Id=\"WIXUI_EXITDIALOGOPTIONALCHECKBOX\" Value=\"1\"/>\n<Property Id=\"WIXUI_INSTALLDIR\" Value=\"INSTALLDIR\"/>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Merge Cache and Merge List Functions\nDESCRIPTION: Provides functions to merge configuration caches and lists with proper handling of duplications and priorities.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_36\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* mergeCache.ts and mergeList.ts functions */\n```\n\n----------------------------------------\n\nTITLE: Testing Markdown URL and Link Reference Handling in CSpell\nDESCRIPTION: This Markdown sample demonstrates how CSpell should ignore URLs, link references, HTML entities, and other special Markdown syntax when spell checking. It includes examples of various link formats, anchors, and image references.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-bundled-dicts/test-samples/markdown.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Samples\n\nThis is a set of sample files in various languages to test out the spell checker.\n\n## Markdown Tests\n\nIgnore urls: https://mycrypticlinkexmaple.org .\nIgnore link references: [This is a link][linkreference]\nIgnore link references: [This is a link][linkreference2]\nIgnore link references: [This is a link][*`fileerror`*]\n\nIgnore html: &rarr; &dash; &larr;\n\nAnother link to ignore: [See Below](#seebelow).\n\nSome text with [a link][1] and\nanother [link][2].\n\n[linkreference]: https://anotherstrangelink.com\n[linkreference2]: https://anotherstrangelink.com\n\nSmaller logo: ![Alt][3]\n\n[1]: http://example.com/ 'Title'\n[2]: http://example.org/ 'Title'\n[3]: https://i2.wp.com/s.wordpress.org/about/images/wpmini-grey.png 'Title'\n[*`fileerror`*]: https://fileerror.example.com\n```\n\n----------------------------------------\n\nTITLE: OauthEncryptedStore.ts: Importing Encoding Utilities\nDESCRIPTION: This snippet imports encoding and decoding utilities from the 'bazinga64' library to handle encryption tasks within OAuth encrypted storage. These utilities are essential for secure token management and data obfuscation in the OAuth flow.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Encoder, Decoder} from 'bazinga64';\n```\n\n----------------------------------------\n\nTITLE: Math Operations in Dart Runtime\nDESCRIPTION: Low-level math operations in the Dart runtime. These variables are used in bit manipulation for mathematical operations that require handling high and low bits of large numbers.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/dart-lang/sdk/snapshot.txt#_snippet_10\n\nLANGUAGE: Dart\nCODE:\n```\nint tmplow = low << 21;\nint tmphigh = (high << 21) | (low\n```\n\n----------------------------------------\n\nTITLE: Parsing Caddyfile Options with Dependency on CertMagic and LibDNS in Go\nDESCRIPTION: This snippet contains parsing functions for directive options in the Caddyfile, specifically for ACME external account bindings and issuer options that rely on certmagic.Issuer interfaces. It imports dependencies from certmagic, libdns, and acmez packages to manage certificate issuance and DNS challenges within HTTP server configurations.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc parseOptACMEEAB(d *caddyfile.Dispenser, _ any) (any, error) {\n  // Parse ACME external account binding option\n}\n// issuer extraction and validation\niss, ok := unm.(certmagic.Issuer)\nif !ok {\n  return nil, d.Errf(\"module %s (%T) is not a certmagic.Issuer\", modID, unm)\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving relative imports\nDESCRIPTION: This bug fix resolves issues with relative imports that lack a leading `./` or `../`. This ensures that cspell can correctly locate and process files referenced using relative paths.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell/test-cspell-esbuild-cjs/CHANGELOG.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nResolve relative imports without a leading `./` or `../`.  ([#5035](https://github.com/streetsidesoftware/cspell/issues/5035)) ([a28393b](https://github.com/streetsidesoftware/cspell/commit/a28393b30733b68e8b726c352e277ac4b5a0659d))\n```\n\n----------------------------------------\n\nTITLE: Svelte Component: Inspect Trace Nested Logic\nDESCRIPTION: This component involves functions for normalizing trace logs, enabling detailed inspection of nested trace data for debugging purposes. It demonstrates data processing and logging within a Svelte testing context.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/sveltejs/svelte/snapshot.txt#_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\npackages/svelte/tests/inspect-trace-nested/_config.js:7:10      - Unknown word (normalise)  -- function normalise_trace_logs(logs) {\n```\n\n----------------------------------------\n\nTITLE: Implementing Knapsack Problem in Markdown Documentation\nDESCRIPTION: References to Dantzig, highlighting history of the simplex method and integer programming — no code provided. Useful for educational purposes and algorithm context.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_27\n\nLANGUAGE: Markdown\nCODE:\n```\nknapsack/README.md:13:190    - Unknown word (Dantzig)    -- mathematician Tobias Dantzig (1884–1956), and refers\n```\n\nLANGUAGE: Markdown\nCODE:\n```\nknapsack/README.md:20:82     - Unknown word (METHODNAME) -- and `help(CLASSNAME.METHODNAME)`.\n```\n\n----------------------------------------\n\nTITLE: Describing suggestWords Field Formatting\nDESCRIPTION: This markdown snippet documents the format for the `suggestWords` field within the `DictionaryDefinitionInlineWords`. It lists the allowed formats: single and multiple suggestions, specifying if they are auto fixable. Examples are provided for each format.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/Configuration/auto_properties.md#_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\nFormat of `suggestWords`\n- Single suggestion (possible auto fix)\n    - `word: suggestion`\n    - `word->suggestion`\n- Multiple suggestions (not auto fixable)\n   - `word: first, second, third`\n   - `word->first, second, third`\n```\n\n----------------------------------------\n\nTITLE: String Patterns Representing Prize-Winning Sequences in Project Euler Problem 191\nDESCRIPTION: String patterns used to represent prize-winning sequences where 'O' represents on time, 'A' represents absent, and 'L' represents late.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_87\n\nLANGUAGE: Python\nCODE:\n```\nOOOO OOOA OOOL OOAO OOAA OOAL OOLO OOLA OAOO OAOA\n```\n\n----------------------------------------\n\nTITLE: TypeScript Utility Module for Environment Configuration\nDESCRIPTION: Imports Runtime from @wireapp/commons for environment detection or configuration, potentially providing context-aware features based on environment setup within the application.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_123\n\nLANGUAGE: TypeScript\nCODE:\n```\nsrc/script/util/Environment.ts\n```\n\n----------------------------------------\n\nTITLE: Using xcaddy for Custom Caddy Builds (Comment)\nDESCRIPTION: A code comment mentions `xcaddy`, a command-line tool used for building Caddy binaries with custom plugins included. This indicates context related to Caddy's extensibility and build process.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_13\n\nLANGUAGE: Go\nCODE:\n```\n// Or you can use xcaddy which does it all for\n```\n\nLANGUAGE: Go\nCODE:\n```\n// The xcaddy command can be used\n```\n\nLANGUAGE: Go\nCODE:\n```\n// documentation (or by using xcaddy), more\n```\n\n----------------------------------------\n\nTITLE: Event Handler Capture Definitions for Svelte Elements\nDESCRIPTION: TypeScript definitions for capture phase event handlers in Svelte components. These handlers are triggered during the capturing phase of event propagation rather than the bubbling phase.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/sveltejs/svelte/snapshot.txt#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nonvolumechangecapture?: EventHandler<Event>\nonwaitingcapture?: EventHandler<Event>\nonauxclickcapture?: MouseEventHandler\noncontextmenucapture?: MouseEventHandler\nondblclickcapture?: MouseEventHandler\nondragcapture?: DragEventHandler<T>\nondragendcapture?: DragEventHandler<T>\nondragentercapture?: DragEventHandler<T>\nondragexitcapture?: DragEventHandler<T>\nondragleavecapture?: DragEventHandler<T>\nondragovercapture?: DragEventHandler<T>\nondragstartcapture?: DragEventHandler<T>\nondropcapture?: DragEventHandler<T>\nonmousedowncapture?: MouseEventHandler\nonmousemovecapture?: MouseEventHandler\nonmouseoutcapture?: MouseEventHandler\nonmouseovercapture?: MouseEventHandler\nonmouseupcapture?: MouseEventHandler\nonselectcapture?: EventHandler<Event>\nonselectionchangecapture?: EventHandler<Event>\nonselectstartcapture?: EventHandler<Event>\nontouchcancelcapture?: TouchEventHandler\nontouchendcapture?: TouchEventHandler\nontouchmovecapture?: TouchEventHandler\nontouchstartcapture?: TouchEventHandler\n```\n\n----------------------------------------\n\nTITLE: TypeScript: Event Builder with Protocol Imports and Event Types\nDESCRIPTION: This snippet imports 'QualifiedId' and event-related entities from '@wireapp/api-client' and '@wireapp/protocol-messaging', facilitating the construction of various event objects within the conversation module, including joining finalisation events and message handling.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_73\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {MemberLeaveReason} from '@wireapp/api-client/lib/conversation';\nimport {LinkPreview, Mention} from '@wireapp/protocol-messaging';\nimport {apEventJoinedAfterMLSMigrationFinalisation} from '../entity';\n```\n\n----------------------------------------\n\nTITLE: Casimir Effect Calculation in Python\nDESCRIPTION: Implements the Casimir force calculation based on quantum physics, referring to Hendrik Casimir and Van der Waals forces. Usually for nanotechnology or quantum field theories.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_73\n\nLANGUAGE: Python\nCODE:\n```\n16:17 - Unknown word (Hendrik) -- Dutch physicist Hendrik B. G. Casimir first\n```\n\nLANGUAGE: Python\nCODE:\n```\n35:18 - Unknown word (Waals) -- London-van der Waals Forces\", Physical Review\n```\n\nLANGUAGE: Python\nCODE:\n```\n49:5 - Unknown word (casimir) -- def casimir_force(force: float,\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiway Tree Containers and Cleanup in Ada\nDESCRIPTION: This snippet concerns the Ada.Containers.Multiway_Trees body implementation which includes methods for tree vetting (validation), restoration of representation invariants, and container cleanup procedures. The code comments mention handling of 'multiway' trees and include procedures for marking objects as 'Unbusy'. It relies on Ada containers library infrastructure for multiway tree management, with key parameters related to tree nodes and container states. This implementation requires adherence to Ada semantics for container management and assumes runtime support for object marking and state validation.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/AdaDoom3/AdaDoom3/snapshot.txt#_snippet_2\n\nLANGUAGE: Ada\nCODE:\n```\nEngine/Runtime/a-comutr.adb: Includes functions implementing vet (validation) for multiway trees, comments regarding pre-pending children nodes (Prepent_Child), and management of representation invariants for container states.\nAlso includes methods to mark container objects as Unbusy and functionality related to the Multiway Trees container package.\n```\n\n----------------------------------------\n\nTITLE: Parsing HTTP and HTTPS Ports from Caddyfile in Go\nDESCRIPTION: These functions parse HTTP and HTTPS port configurations from a Caddyfile dispenser. They rely on the caddyfile.Dispenser to access configuration tokens and parse the port numbers into integer values, returning an error if conversion fails. They are used during server options parsing to extract port bindings.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nfunc parseOptHTTPPort(d *caddyfile.Dispenser, _ any) (any, error) {\n    port, err := strconv.Atoi(d.Next())\n    if err != nil {\n        return 0, d.Errf(\"converting port '%s' to int: %v\", d.Val(), err)\n    }\n    return port, nil\n}\n\nfunc parseOptHTTPSPort(d *caddyfile.Dispenser, _ any) (any, error) {\n    port, err := strconv.Atoi(d.Next())\n    if err != nil {\n        return 0, d.Errf(\"converting port '%s' to int: %v\", d.Val(), err)\n    }\n    return port, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Spell Checking Rules in YAML\nDESCRIPTION: This snippet demonstrates how to define spell-checking rules in YAML to control which parts of a document are checked and how.  The rules are applied based on the scope of the text. Dependencies are none.  The output is a configuration for the spell checker.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-grammar/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrules:\n  '*': false\n  comment: true\n  string: true\n```\n\n----------------------------------------\n\nTITLE: Testing str.removesuffix() in Python\nDESCRIPTION: Tests the `str.removesuffix()` method in Python 3.9+. It checks if the method correctly removes the specified suffix ('fooa') from the string 'foobarfoo'. Assumes `s` and `s_ref` are previously defined.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_44\n\nLANGUAGE: python\nCODE:\n```\ns='foobarfoo'\ns_ref='foobarfoo' # Assumes s_ref holds the original or expected value\nassert s.removesuffix('fooa') == s_ref\n# assert s.removesuffix('foo') == 'foobar' # Example of successful removal\n```\n\n----------------------------------------\n\nTITLE: Svelte Map and Set Reactive String Conversion\nDESCRIPTION: This snippet involves creating reactive SvelteMap and SvelteSet instances, used to test reactive string representations or conversions, ensuring data binding reacts correctly to collection changes within Svelte components.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/sveltejs/svelte/snapshot.txt#_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\npackages/svelte/tests/runtime-runes/samples/reactive-to-string/main.svelte:6:6       - Unknown word (rmap)       -- let rmap = new SvelteMap();\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\npackages/svelte/tests/runtime-runes/samples/reactive-to-string/main.svelte:7:6       - Unknown word (rset)       -- let rset = new SvelteSet();\n```\n\n----------------------------------------\n\nTITLE: Fixing SpellingDictionaryCollection Export\nDESCRIPTION: This bug fix corrects the export of the SpellingDictionaryCollection within the cspell project. This ensures that functionality using this class can access it. There are no external dependencies in this instance. The input would be the import, the output fixed export functionality.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-pipe/CHANGELOG.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n* Fix export of SpellingDictionaryCollection ([#3683](https://github.com/streetsidesoftware/cspell/issues/3683)) ([7665cdb](https://github.com/streetsidesoftware/cspell/commit/7665cdba702ebf9517a3c1c1008193e239a829d4))\n```\n\n----------------------------------------\n\nTITLE: Defining System Variable Constants (C/C++ #define Macros)\nDESCRIPTION: These code snippets define symbolic constants using the #define preprocessor directive to associate names with integer values for system variables in the MBK teleconferencing suite. The constants (such as BBSTTL, IDLZAPT, LONAUD, PAGFMT, etc.) are used as identifiers for various system attributes, statuses, and configuration options across the program. Dependencies include the C or C++ preprocessor and usage of consistent symbolic naming throughout dependent code. Expected inputs are not applicable; outputs are in the form of preprocessor macros available in the compiled source. Limitation: changing a value requires recompiling all dependent code.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_25\n\nLANGUAGE: C\nCODE:\n```\n#define BBSTTL 1\n#define BBSCOD 2\n#define IDLZAPT 11\n#define IDLZAPS 12\n#define IDLOVR 13\n#define SVRATE 14\n#define CHGHOUR 15\n#define CHGMIN 17\n#define LONAUD 18\n#define LOFAUD 19\n#define TNLMAX 20\n#define BBSRST 21\n#define PSWEXP 22\n#define PGOVKEY 24\n#define DFTPTM 27\n#define GLOCKIE 28\n#define KGDNAM 29\n#define KGDCOM 30\n#define KGDADR 31\n#define KGDPHO 32\n#define KGDAGE 33\n#define KGDSEX 34\n#define KGDPSS 35\n#define KGDPASS 36\n#define NOCRDBYE 40\n#define NOCTIM 41\n#define NOCTIMBYE 42\n#define NODTIM 43\n#define NODTIMBYE 44\n#define IDLEWRN 45\n#define IDLEBYE 46\n#define SHTDW1 47\n#define LNCHGW1 50\n#define DTCJAN 53\n#define DTCFEB 54\n#define DTCMAR 55\n#define DTCAPR 56\n#define DTCMAY 57\n#define DTCJUN 58\n#define DTCJUL 59\n#define DTCAUG 60\n#define DTCSEP 61\n#define DTCOCT 62\n#define DTCNOV 63\n#define DTCDEC 64\n#define WHOHDR 66\n#define WHOLINE1 67\n#define WHOLON 69\n#define WHOSUP 70\n#define WHONIX 71\n#define INVON 72\n#define INVOFF 73\n#define AUDINJI 74\n#define AUDINJC 75\n#define AUDINJE 76\n#define MINPLUR 80\n#define CRDAVAIL 81\n#define CANTPG 82\n#define PAGFMT 83\n#define PAGTON 84\n#define PAGTOF 85\n#define PAGTOK 86\n#define PAGTST 87\n#define PAGNON 88\n#define PAGMOM 89\n#define PAGOFF 92\n```\n\n----------------------------------------\n\nTITLE: Updating Dictionaries\nDESCRIPTION: This bug fix updates the dictionaries used by cspell. This ensures that cspell has the most up-to-date word lists for accurate spell checking.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell/test-cspell-esbuild-cjs/CHANGELOG.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nWorkflow Bot -- Update Dictionaries (main) ([#4733](https://github.com/streetsidesoftware/cspell/issues/4733)) ([221b59b](https://github.com/streetsidesoftware/cspell/commit/221b59bfe726a3b1fe5f9dcbdef6632983ebebeb))\n```\n\n----------------------------------------\n\nTITLE: Testing slicing on Unicode strings (Hebrew) in Python\nDESCRIPTION: Demonstrates and asserts the results of various slicing operations on a Hebrew string containing combining characters. Shows basic slicing, slicing with negative indices, and slicing with steps.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_49\n\nLANGUAGE: python\nCODE:\n```\nhebrew_text = \"בְּרֵאשִׁית, בָּרָא אֱלֹהִים, אֵת הַשָּׁמַיִם, וְאֵת הָאָרֶץ\"\nassert hebrew_text[-20:50] == 'מַיִם, וְאֵת הָאָרֶץ' # Corrected slice result based on string\nassert hebrew_text[:-30:1] == 'בְּרֵאשִׁית, בָּרָא אֱלֹהִים,' # Corrected slice result\nassert hebrew_text[1:-30] == 'ְּרֵאשִׁית, בָּרָא אֱלֹהִים,' # Corrected slice result\nassert hebrew_text[30:10:-3] == 'םיִהֱֹא אָּ,ת' # Corrected slice result\n```\n\n----------------------------------------\n\nTITLE: Identifying Unknown Words in CacheManagerBase.cs\nDESCRIPTION: This line identifies an unknown word, `configurators`, within the CacheManagerBase.cs file.  The context indicates that the word is related to a list of cache configurators.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/aspnetboilerplate/aspnetboilerplate/snapshot.txt#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/Runtime/Caching/CacheManagerBase.cs:53:21     - Unknown word (configurators) -- var configurators = Configuration.Configurators\n```\n\n----------------------------------------\n\nTITLE: Password Strength Evaluation in Python\nDESCRIPTION: Contains functions for generating and evaluating password strength, with references to a generalized random function, and checks like is_strong_password for password 'Hwea7$2!'.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_68\n\nLANGUAGE: Python\nCODE:\n```\n47:19 - Unknown word (generalised) -- # random is a generalised function for letters\n```\n\nLANGUAGE: Python\nCODE:\n```\n60:29 - Unknown word (Hwea) -- is_strong_password('Hwea7$2!')\n```\n\nLANGUAGE: Python\nCODE:\n```\n66:38 - Unknown word (udfhiaf) -- strong_password('Hello1238udfhiaf038fajdvjjf!jaiuFhkqi\n```\n\nLANGUAGE: Python\nCODE:\n```\n66:48 - Unknown word (fajdvjjf) -- 'Hello1238udfhiaf038fajdvjjf!jaiuFhkqi1')\n```\n\nLANGUAGE: Python\nCODE:\n```\n66:57 - Unknown word (jaiu) -- 8udfhiaf038fajdvjjf!jaiuFhkqi1')\n```\n\nLANGUAGE: Python\nCODE:\n```\n66:61 - Unknown word (Fhkqi) -- udfhiaf038fajdvjjf!jaiuFhkqi1')\n```\n\n----------------------------------------\n\nTITLE: TypeScript repMap Utility\nDESCRIPTION: Provides a reusable mapping structure, likely a specialized map for replacement or transformation operations.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_65\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-lib/src/lib/util/repMap.ts\n```\n\n----------------------------------------\n\nTITLE: React Component Props Documentation with TypeScript\nDESCRIPTION: This snippet pertains to a React component in TypeScript, defining props such as 'ikey' which is a key of 'indexCopy'. It assists in type-safe property passing and component rendering, requiring dependencies like React and TypeScript. Inputs include component properties, and the output is a typed React component.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/microsoft/TypeScript-Website/snapshot.txt#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/typescriptlang-org/src/templates/pages/index.tsx:64:23     - Unknown word (ikey)       -- const P = (props: { ikey: keyof typeof indexCopy\n```\n\n----------------------------------------\n\nTITLE: CMake Configuration Options for Build Features\nDESCRIPTION: CMake configuration options for build features including DFEATURES argument flags and CMAKE_PREFIX_PATH settings.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/googleapis/google-cloud-cpp/snapshot.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nFATAL_ERROR \"Missing -DFEATURES argument, for example\"\n\"-DCMAKE_PREFIX_PATH=${CMAKE\n\nif (VCPKG_TARGET_TRIPLET)\n\"-DVCPKG_TARGET_TRIPLET=${VCPKG\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAL Source Property Types (SOFT Extension, C)\nDESCRIPTION: Defines C function pointer types for setting and getting OpenAL source properties using double-precision floating-point (`LPALSOURCEDSOFT`, `LPALGETSOURCEDSOFT`, `LPALSOURCE3DSOFT`, `LPALGETSOURCE3DSOFT`, `LPALSOURCEDVSOFT`, `LPALGETSOURCEDVSOFT`) and 64-bit integer values (`LPALSOURCEI64SOFT`, `LPALGETSOURCEI64SOFT`, `LPALSOURCE3I64SOFT`, `LPALGETSOURCE3I64SOFT`, `LPALSOURCEI64VSOFT`, `LPALGETSOURCEI64VSOFT`) as part of the SOFT extension.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/AdaDoom3/AdaDoom3/snapshot.txt#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY*LPALSOURCEDSOFT)(ALuint source, ALenum param, ALdouble value);\n```\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY*LPALSOURCE3DSOFT)(ALuint source, ALenum param, ALdouble value1, ALdouble value2, ALdouble value3);\n```\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY*LPALSOURCEDVSOFT)(ALuint source, ALenum param, const ALdouble *values);\n```\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY*LPALGETSOURCEDSOFT)(ALuint source, ALenum param, ALdouble *value);\n```\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY*LPALGETSOURCE3DSOFT)(ALuint source, ALenum param, ALdouble *value1, ALdouble *value2, ALdouble *value3);\n```\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY*LPALGETSOURCEDVSOFT)(ALuint source, ALenum param, ALdouble *values);\n```\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY*LPALSOURCEI64SOFT)(ALuint source, ALenum param, ALint64SOFT value);\n```\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY*LPALSOURCE3I64SOFT)(ALuint source, ALenum param, ALint64SOFT value1, ALint64SOFT value2, ALint64SOFT value3);\n```\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY*LPALSOURCEI64VSOFT)(ALuint source, ALenum param, const ALint64SOFT *values);\n```\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY*LPALGETSOURCEI64SOFT)(ALuint source, ALenum param, ALint64SOFT *value);\n```\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY*LPALGETSOURCE3I64SOFT)(ALuint source, ALenum param, ALint64SOFT *value1, ALint64SOFT *value2, ALint64SOFT *value3);\n```\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY*LPALGETSOURCEI64VSOFT)(ALuint source, ALenum param, ALint64SOFT *values);\n```\n\n----------------------------------------\n\nTITLE: Node.js Readline Interface for Interactive Command-Line Prompts\nDESCRIPTION: This snippet defines the structure of Node.js's readline module, including interfaces, methods, and properties used for managing command-line input/output, cursor control, history, and keypress events. It leverages process streams and includes functions for cursor movement, screen clearing, and question prompts, essential for creating interactive CLI applications.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/node.txt#_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\n# Readline module components and methods\nreadline.createInterface()\nreadline.cursorTo()\nreadline.emitKeypressEvents()\nreadline.moveCursor()\nreadline.clearLine()\nreadline.clearScreenDown()\n// Properties for terminal state and user input\nrl.line\nrl.prompt()\nrl.question()\n// Input/output streams and terminal info\nprocess.stdin\nprocess.stdout\n// Other utilities\nremoveHistoryDuplicates\nresize\nresume\npause\n// Event handling and keypress processing\n```\n\n----------------------------------------\n\nTITLE: Counting occurrences in bytes\nDESCRIPTION: This snippet tests the `.count()` method, which counts occurrences of a substring within a bytes object.  Input is a byte string, output is the number of matches.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nassert b\"azeazerazeazopia\".count(b\"aze\") == 3\n```\n\nLANGUAGE: python\nCODE:\n```\nassert b\"azeazerazeazopia\".count(b\"az\") == 4\n```\n\nLANGUAGE: python\nCODE:\n```\nassert b\"azeazerazeazopia\".count(b\"a\") == 5\n```\n\nLANGUAGE: python\nCODE:\n```\nassert b\"azeazerazeazopia\".count(bytearray(b\"aze\n```\n\nLANGUAGE: python\nCODE:\n```\nassert b\"azeazerazeazopia\".count(memoryview(b\n```\n\n----------------------------------------\n\nTITLE: Updating ALL Dependencies\nDESCRIPTION: This commit updates all dependencies in the cspell project. Keeping dependencies up-to-date helps ensure security, stability, and compatibility with other libraries.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell/test-cspell-esbuild-cjs/CHANGELOG.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nci: Workflow Bot -- Update ALL Dependencies (main) (#4959) ([096066d](https://github.com/streetsidesoftware/cspell/commit/096066d)), closes [#4959](https://github.com/streetsidesoftware/cspell/issues/4959)\n```\n\n----------------------------------------\n\nTITLE: BigInt Implementation in Dart\nDESCRIPTION: Code snippets from the BigInt implementation in Dart's internal runtime. These show bit manipulation operations for large integer arithmetic and error handling for invalid operations.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/dart-lang/sdk/snapshot.txt#_snippet_9\n\nLANGUAGE: Dart\nCODE:\n```\nfinal exponentBitlen = exponent.bitLength;\n// Error message for invalid shift\nshift-amount must be posititve $shiftAmount\");\n```\n\n----------------------------------------\n\nTITLE: Defining Named RegExp Patterns for Spell Checking in JavaScript\nDESCRIPTION: This snippet demonstrates how to define named regular expression patterns in cspell settings that can be referenced by other options like 'ignoreRegExpList' or 'includeRegExpList'. It shows an array of objects where each object names a pattern and provides its regex string or an array of other named patterns to combine. This setup allows users to specify complex ignore/include rules using reusable regex definitions. The regex patterns are enclosed in string literals. Prerequisites include basic knowledge of regular expressions and JSON formatting. Inputs are regex pattern strings, and the output is to direct cspell's parsing behavior over file content. Limitations include ensuring regex correctness and compatibility with JavaScript regex syntax.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/Configuration/auto_properties.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n\"ignoreRegExpList\": [\"comments\"],\n\"patterns\": [\n  {\n    \"name\": \"comment-single-line\",\n    \"pattern\": \"/#.*/g\"\n  },\n  {\n    \"name\": \"comment-multi-line\",\n    \"pattern\": \"/(?:\\/\\\\*[\\\\s\\\\S]*?\\\\*\\/)/g\"\n  },\n  // You can also combine multiple named patterns into one single named pattern\n  {\n    \"name\": \"comments\",\n    \"pattern\": [\"comment-single-line\", \"comment-multi-line\"]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Config.ts: Accessing Package Dependencies\nDESCRIPTION: This snippet references the '@wireapp/avs' dependency in the project's package.json dependencies, suggesting utilization of WireApp's AVS (Audio/Visual Service) modules or related components for enhanced functionalities.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n- Unknown word (wireapp)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Dictionary Settings Model\nDESCRIPTION: Defines the structure for dictionary configuration options, such as language, source, and priority settings.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_30\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* DictionarySettings interface */\n```\n\n----------------------------------------\n\nTITLE: Enabling cli option `--validate-directives`\nDESCRIPTION: This snippet enables the command-line option `--validate-directives`. Enabling this option allows users to validate directives used within their code or documents using the CSpell CLI. It addresses issue #3461.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-tools/CHANGELOG.md#_snippet_10\n\nLANGUAGE: TEXT\nCODE:\n```\n* Enable cli option `--validate-directives` ([#3461](https://github.com/streetsidesoftware/cspell/issues/3461)) ([52a5337](https://github.com/streetsidesoftware/cspell/commit/52a5337fb4090394342b45e31423752cda268559))\n```\n\n----------------------------------------\n\nTITLE: Converting Hunspell Dictionary to Word List (Shell)\nDESCRIPTION: Provides an example command to convert a Hunspell dictionary (e.g., `en_US.dic`) into a plain text word list (`en_US.txt`). It requires the corresponding `.aff` file (`en_US.aff`) to be present in the same directory and uses the `-o` option to specify the output file. Requires the `hunspell-reader` tool to be installed.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/hunspell-reader/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nhunspell-reader words ./en_US.dic -o en_US.txt\n```\n\n----------------------------------------\n\nTITLE: Compound Word Example\nDESCRIPTION: Demonstrates how to define compound words using `*` and `+` in cSpell word lists. It explains that `*` indicates optional compounding, while `+` requires compounding with other words.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-tools/wordlists.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nerror*\n*code\n+msg\n```\n\n----------------------------------------\n\nTITLE: Defining Known Issue File Locations in cspell.json (JSON)\nDESCRIPTION: This snippet illustrates how to specify one or more external known issues files in the cspell configuration using the 'knownIssuesFiles' array. Each string element points to a file path containing known spelling issues in supported formats. This feature helps keep the main configuration concise, particularly beneficial for projects with extensive legacy issues managed separately.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/rfc/rfc-0004 known issues/README.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"knownIssuesFiles\": [\"path/to/file.txt\"]\n}\n```\n\n----------------------------------------\n\nTITLE: mlsStatus.ts: Importing Device Status Protocols\nDESCRIPTION: This snippet imports device status protocol definitions from '@wireapp/core', enabling the system to manage and interpret the status of user devices during identity verification and device management workflows.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {DeviceStatus} from '@wireapp/core/lib/messagingProtocols';\n```\n\n----------------------------------------\n\nTITLE: Reading Documentation and Markdown in the Repository\nDESCRIPTION: Contains documentation snippets with references to credit card, IMEI, LUHN, and RSA algorithms, emphasizing their usage in data validation and cryptography. No executable code, but important for understanding context and terminology.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_19\n\nLANGUAGE: Markdown\nCODE:\n```\nhashes/README.md:17:200    - Unknown word (IMEI)       -- credit card numbers, IMEI numbers, and Canadian\n```\n\nLANGUAGE: Markdown\nCODE:\n```\nindex.md:2:5       - Unknown word (toctree)    -- ```{toctree}\n```\n\n----------------------------------------\n\nTITLE: Finding Unknown Words in DefaultNotificationDistributer.cs\nDESCRIPTION: This line identifies an unknown word, `euid`, within the DefaultNotificationDistributer.cs file. The context suggests the word is part of a LINQ query that filters user IDs.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/aspnetboilerplate/aspnetboilerplate/snapshot.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/Notifications/DefaultNotificationDistributer.cs:150:62    - Unknown word (euid)       -- excludedUserIds.Any(euid => euid.Equals(uid)\n```\n\n----------------------------------------\n\nTITLE: Util.inspect Options: Show Hidden and Proxy\nDESCRIPTION: This defines the options to show hidden properties and proxies when calling `util.inspect` to allow for richer inspection of objects including those with special properties.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/node.txt#_snippet_38\n\nLANGUAGE: text\nCODE:\n```\n{ showHidden: true, showProxy: true }\n```\n\n----------------------------------------\n\nTITLE: Defining Teleconference State and Attribute Constants (C/C++ #define Macros)\nDESCRIPTION: This snippet defines a series of preprocessor constants used for managing various teleconference state identifiers and attributes, such as message, background, and account states. It uses the C/C++ #define directive to map symbolic names (like SEXML, BGREQ, ACCPAT, BDLINE, etc.) to integer values that represent different states or commands within the teleconferencing subsystem. Dependencies include the C or C++ preprocessor and consistent macro usage in code logic. Input is implied via macro reference; output is macro substitution at compile time. Limitations include lack of namespacing and potential for macro redefinition conflicts.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_26\n\nLANGUAGE: C\nCODE:\n```\n#ifndef __TELECON_BG_UNAMBIGUOUS__\n#define WAITACC 1\n#define SEXML 9\n#define SEXFL 10\n#define BGREQ 11\n#define ACCPAT 12\n#define BGALR 14\n#define ACCTMOUT 15\n#define REQTMOUT 16\n#define BDLINE 18\n#define BDCOL1 19\n#define BDSTN1 21\n#define BDSTNN 23\n#define BDEMPT 24\n#endif\n```\n\n----------------------------------------\n\nTITLE: Updating Dictionaries\nDESCRIPTION: This bug fix involves updating the dictionaries used for spell checking. This may include adding or removing words, or correcting existing entries. The update impacts spell checking and should improve accuracy. It likely relies on external dictionary files.  Input is the spell check process; output is improved spell check.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-pipe/CHANGELOG.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n* Update dictionaries ([#3795](https://github.com/streetsidesoftware/cspell/issues/3795)) ([ae8de27](https://github.com/streetsidesoftware/cspell/commit/ae8de2754daafcdeb7e187a80e27b6f6c09dc1d7))\n```\n\n----------------------------------------\n\nTITLE: TypeScript: Conversation Event Builder Test Definitions\nDESCRIPTION: This snippet references 'QualifiedId' from '@wireapp/api-client/lib/user' for testing event building mechanisms, essential for verifying the correctness of event-related functionalities in conversation modules.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_71\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {QualifiedId} from '@wireapp/api-client/lib/user';\n```\n\n----------------------------------------\n\nTITLE: Initializing Asymptote Diagrams in LaTeX for Geometric Visualizations\nDESCRIPTION: This snippet sets up an Asymptote diagram within a LaTeX document to visualize a 3D coordinate system and geometric objects, such as circles and axes. It depends on the 'amsfonts' LaTeX package and uses specific Asymptote commands to define coordinate axes and draw geometric shapes with specified styles.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/MartinThoma/LaTeX-examples/snapshot.txt#_snippet_0\n\nLANGUAGE: LaTeX\nCODE:\n```\nusepackage(\"amsfonts\")\n// Drawing axes and shapes in Asymptote for a 3D coordinate system\nxaxis3(\"\", red, Arrow3)\nyaxis3(\"\", red, Arrow3)\nzaxis3(\"\", red, Arrow3)\n// Draw a unit circle\ndraw(unitcircle3, blue)\n```\n\n----------------------------------------\n\nTITLE: Function Closure in Loop in JavaScript\nDESCRIPTION: Example demonstrating creating a function inside a loop, which can lead to unexpected closure behavior in JavaScript if not handled carefully.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/eslint/eslint/snapshot.txt#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nfuncs[i] = function() {\n```\n\n----------------------------------------\n\nTITLE: TypeScript: Shared Change Handler Index for Wireapp\nDESCRIPTION: This snippet imports 'QualifiedId' from '@wireapp/api-client/lib/user', used in shared conversation change handling modules, facilitating identification and management of user-specific conversation changes within the application.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_69\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {QualifiedId} from '@wireapp/api-client/lib/user';\n```\n\n----------------------------------------\n\nTITLE: TypeScript regexHelper Utility\nDESCRIPTION: Contains helper functions for regular expression operations, such as pattern creation and matching enhancement.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_64\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-lib/src/lib/util/regexHelper.ts\n```\n\n----------------------------------------\n\nTITLE: Logging Unicode Characters in Node.js\nDESCRIPTION: A simple Node.js example showing how to log Unicode characters (Chinese text '中文测试') to the console using `console.log()`. This demonstrates Node.js's support for UTF-8 output.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/node.txt#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log( 中文测试 )\n```\n\n----------------------------------------\n\nTITLE: Importing TabIndex from wireapp/react-ui-kit/lib/types\nDESCRIPTION: This snippet imports the `TabIndex` enum from the `@wireapp/react-ui-kit/lib/types` module.  `TabIndex` is likely used to set the tab order for UI elements.  This import suggests the usage of `react-ui-kit` components and their associated styling or behavior.  Depends on the `@wireapp/react-ui-kit` library. The unknown word `wireapp` is the cspell error.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_96\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TabIndex} from '@wireapp/react-ui-kit/lib/types\n```\n\n----------------------------------------\n\nTITLE: Newton's Law of Universal Gravitation in Python\nDESCRIPTION: Calculates gravitational force between masses based on Newton's law, referencing historical figures and classical mechanics principles.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_78\n\nLANGUAGE: Python\nCODE:\n```\n19:18 - Unknown word (Philosophiæ) -- - Newton (1687) \"Philosophiæ Naturalis Principia\n```\n\nLANGUAGE: Python\nCODE:\n```\n19:30 - Unknown word (Naturalis) -- (1687) \"Philosophiæ Naturalis Principia Mathematica\n```\n\nLANGUAGE: Python\nCODE:\n```\n19:40 - Unknown word (Principia) -- Philosophiæ Naturalis Principia Mathematica\"\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definitions for Leaked Handles\nDESCRIPTION: Type definitions for internal handle management, ensuring type safety for resource or handle tracking within the library. They serve as declarations for internal use or API shapes.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* TypeScript declaration for leaked handle types */\n```\n\n----------------------------------------\n\nTITLE: Simplex Method Implementation in Python\nDESCRIPTION: Contains methods for solving linear programming problems using the simplex algorithm, including handling 'NaN's and tableau operations. Inputs are LP coefficients; outputs are optimal solutions or bounds.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_36\n\nLANGUAGE: Python\nCODE:\n```\nlinear_programming/simplex.py:137:29    - Unknown word (nans)       -- # Array filled with nans\n```\n\nLANGUAGE: Python\nCODE:\n```\nlinear_programming/simplex.py:168:18    - Unknown word (coeff)      -- for idx, coeff in enumerate(self.tableau\n```\n\nLANGUAGE: Python\nCODE:\n```\nlinear_programming/simplex.py:258:25    - Unknown word (minimisation) -- # Non standard: minimisation and equalities\n```\n\nLANGUAGE: Python\nCODE:\n```\nlinear_programming/simplex.py:326:21    - Unknown word (rowidx)       -- nonzero_rowidx = nonzero[0][0]\n```\n\n----------------------------------------\n\nTITLE: Email Header Constants and Function Prototypes in C\nDESCRIPTION: Defines constants such as 'PTOYOU' for email options and function prototypes for retrieving recipients ('getrecipient'), asking for message numbers ('askmsgno'), and stopping autoforwarding ('stopautofw'). These are essential for email processing and user interactions in the email module.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_38\n\nLANGUAGE: C\nCODE:\n```\n#define OPT_PTOYOU 1\nint getrecipient (int pr, char *rec);\nint askmsgno ();\nvoid stopautofw (message_t *msg);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Utility: File Reader\nDESCRIPTION: File reading utilities for loading and processing files, dependencies include Node's file system modules, with associated test cases.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_53\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-lib/src/lib/util/fileReader.ts\n```\n\n----------------------------------------\n\nTITLE: Regular Expression Testing with Empty Character Class in JavaScript\nDESCRIPTION: Example demonstrating a regular expression test with a string against a pattern that might contain an empty character class, showing the false return value.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/eslint/eslint/snapshot.txt#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nregex.test(\"abcefg\"); // false, the nested\n```\n\n----------------------------------------\n\nTITLE: Configuring Asymptote Torus Paths and Surfaces in LaTeX for 3D Modeling\nDESCRIPTION: This snippet details setup parameters for rendering a torus in Asymptote embedded within LaTeX, including rendering options, maximum divisions, and cyclic boundary conditions. It involves styling with surface and mesh pens, and defines a path function for the torus surface, supporting detailed 3D surface modeling.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/MartinThoma/LaTeX-examples/snapshot.txt#_snippet_1\n\nLANGUAGE: LaTeX\nCODE:\n```\ndefaultrender = render(merge = true)\numax = 40\nvmax = 40\ntorus.ucyclic(true)\ntorus.vcyclic(true)\npen meshpen = 0.3pt + gray\n// Draw the torus surface with material properties\ndraw(torus, surfacepen=material(diffusepen=white+opacity(0.6), emissivepen=white))\n// Path function for u and v cycles\npath3 abpath(int ucycles, int vcycles) {\n    // Implementation details\n}\n// Boundary shifts\npair bshift = (ucycles*umax, vcycles)\n```\n\n----------------------------------------\n\nTITLE: Importing MLSConversation from wireapp/api-client\nDESCRIPTION: This snippet imports `MLSConversation` from `@wireapp/api-client/lib/conversation`.  This suggests the use of components or functionalities for handling end-to-end encrypted (E2EI) conversations.  It is likely used in testing the behavior related to the E2EI features. Depends on the `@wireapp/api-client` library. The unknown word `wireapp` is the cspell error.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_98\n\nLANGUAGE: typescript\nCODE:\n```\nimport {MLSConversation} from '@wireapp/api-client/lib/conversation\n```\n\n----------------------------------------\n\nTITLE: TypeScript Node Namespace Declarations\nDESCRIPTION: Contains internal namespace declarations for Node.js integration within the library, ensuring type compatibility and module augmentation.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* Node namespace augmentations */\n```\n\n----------------------------------------\n\nTITLE: TypeScript Suggestion Model\nDESCRIPTION: Represents a suggested correction or alternative in spell-checking, including the suggestion text, score, and context. Used for presenting spelling correction options.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* Suggestion data model */\n```\n\n----------------------------------------\n\nTITLE: Importing ButtonVariant from wireapp/react-ui-kit\nDESCRIPTION: This snippet imports `ButtonVariant` from the `@wireapp/react-ui-kit` library, which implies the use of styled button components.  `ButtonVariant` is likely an enum or a type definition for the different styles of buttons. This snippet is common in React components using `react-ui-kit`. Depends on the `@wireapp/react-ui-kit` library. The unknown word `wireapp` is the cspell error.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_97\n\nLANGUAGE: typescript\nCODE:\n```\nimport {ButtonVariant} from '@wireapp/react-ui-kit';\n```\n\n----------------------------------------\n\nTITLE: JavaScript block variable definitions in Svelte compiler legacy code\nDESCRIPTION: Several block-related variable declarations in the Svelte compiler's legacy implementation, including pendingblock, thenblock, catchblock, and elseblock variables used for conditional rendering logic.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/sveltejs/svelte/snapshot.txt#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet pendingblock = {\n// ...\nlet thenblock = {\n// ...\nlet catchblock = {\n// ...\nlet elseblock = undefined;\n```\n\n----------------------------------------\n\nTITLE: Ignoring Patterns using Regular Expressions (YAML) in CSpell\nDESCRIPTION: YAML configuration example for the `ignoreRegExpList` setting in CSpell. This snippet demonstrates defining a JavaScript-style regular expression (`/\\b[A-Z]+\\b/g`) using YAML's folded block scalar (`>-`) to ignore all-caps words during spell checking, avoiding complex escaping.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/Configuration/auto_properties.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nignoreRegExpList:\n  - >-\n   /\\b[A-Z]+\\b/g\n```\n\n----------------------------------------\n\nTITLE: Distributed Club Synchronization System in C\nDESCRIPTION: Provides functions like 'getremclub' for retrieving remote club data and 'Synchronise' as the main purpose for establishing CLUB sync operations across distributed BBS systems.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_60\n\nLANGUAGE: C\nCODE:\n```\ngetremclub (char *remclub, int pr); ** PURPOSE:  Synchronise distributed BBS clubs\n```\n\n----------------------------------------\n\nTITLE: Importing WebAppEvents in Hooks (TypeScript)\nDESCRIPTION: Imports 'WebAppEvents' from '@wireapp/webapp-events' within custom hooks: useFileHandling, useFormatToolbar, useGiphy, and useMessageEditing.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\nWebAppEvents} from '@wireapp/webapp-events';\n```\n\n----------------------------------------\n\nTITLE: Using Yar Client Exception Methods\nDESCRIPTION: This code shows a method for retrieving the exception type related to a Yar client. It requires the Yar extension and facilitates the management of RPC call exceptions within the application.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/php.txt#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nYar_Client_Exception::getType\n```\n\n----------------------------------------\n\nTITLE: Fannkuch Benchmark Runner - Python\nDESCRIPTION: This Python code snippet shows the usage of the fannkuch benchmark function within a benchmark runner. It calls the `bench_func` function to time and evaluate the performance of the `fannkuch` function. The `arg` variable likely represents the input size for the benchmark.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nbenches/benchmarks/fannkuch.py:54:25     - Unknown word (fannkuch)   -- #runner.bench_func('fannkuch', fannkuch, arg)\nbenches/benchmarks/fannkuch.py:54:36     - Unknown word (fannkuch)   -- bench_func('fannkuch', fannkuch, arg)\nbenches/benchmarks/fannkuch.py:55:5      - Unknown word (fannkuch)   -- fannkuch(arg)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Word Splitter Utility\nDESCRIPTION: Handles splitting of words into components, supporting spell checking and token analysis.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_78\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-lib/src/lib/util/wordSplitter.ts\n```\n\n----------------------------------------\n\nTITLE: Importing TIME_IN_MILLIS from Util/TimeUtil\nDESCRIPTION: This snippet imports `TIME_IN_MILLIS` from `Util/TimeUtil`. This suggests that the application uses utility functions related to time.  The unknown word `MILLIS` is the cspell error.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_111\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TIME_IN_MILLIS} from 'Util/TimeUtil\n```\n\n----------------------------------------\n\nTITLE: Updating dictionaries\nDESCRIPTION: This snippet describes the update of dictionaries used by CSpell. This is a maintenance task to ensure the accuracy and completeness of the spell checker. It addresses issue #3795.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-tools/CHANGELOG.md#_snippet_5\n\nLANGUAGE: TEXT\nCODE:\n```\n* Update dictionaries ([#3795](https://github.com/streetsidesoftware/cspell/issues/3795)) ([ae8de27](https://github.com/streetsidesoftware/cspell/commit/ae8de2754daafcdeb7e187a80e27b6f6c09dc1d7))\n```\n\n----------------------------------------\n\nTITLE: CSS Stylings for Theming and Components (CSS)\nDESCRIPTION: Includes styles for components identified by IDs like '#markdown-for-thecomponent-era' and classes such as '.squircle' and '.frame-resizeable', organizing layout, visual styles, and masking effects in documentation themes.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/mdx-js/mdx/snapshot.txt#_snippet_6\n\nLANGUAGE: CSS\nCODE:\n```\n#markdown-for-thecomponent-era { ... }\n.mask-image: paint(squircle);\n--squircle-radius: 10px;\n\n```\n\n----------------------------------------\n\nTITLE: Setting up Hibernate SessionFactory in Java Utility Class\nDESCRIPTION: This Java snippet defines a Hibernate utility class responsible for building and providing a SessionFactory for database operations. The SessionFactory is declared as a final static variable 'SESSIONFACTORY', ensuring singleton usage. This utility class is essential for managing Hibernate sessions throughout the CQRS services and other persistence-related components. It requires Hibernate dependencies and configuration files for database connectivity.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/iluwatar/java-design-patterns/snapshot.txt#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nfinal SessionFactory SESSIONFACTORY = buildSessionFactory()\n```\n\n----------------------------------------\n\nTITLE: Project Euler Problem Solving in Python\nDESCRIPTION: Includes references to StackOverflow and Doctest for problem validation and code documentation. Contains variables for multi-dimensional data handling.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_80\n\nLANGUAGE: Python\nCODE:\n```\n66:4 - Unknown word (Stackoverflow) -- - [Stackoverflow link]\n```\n\nLANGUAGE: Python\nCODE:\n```\n81:6 - Unknown word (Doctest) -- [Doctest]\n```\n\nLANGUAGE: Python\nCODE:\n```\n27:5 - Unknown word (xmulti) -- xmulti = []\n```\n\nLANGUAGE: Python\nCODE:\n```\n28:5 - Unknown word (zmulti) -- zmulti = []\n```\n\nLANGUAGE: Python\nCODE:\n```\n57:9 - Unknown word (nfound) -- nfound = 0\n```\n\nLANGUAGE: Python\nCODE:\n```\n43:13 - Unknown word (horz) -- horz_product = grid[i][j\n```\n\n----------------------------------------\n\nTITLE: TypeScript Performance Index Functions\nDESCRIPTION: Provides functions for performance measurement, such as timing or profiling code execution, aiding in performance optimization.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* Performance index functions */\n```\n\n----------------------------------------\n\nTITLE: Checking for HOME or USERPROFILE Environment Variables in Go\nDESCRIPTION: Checks if both the `HOME` and `USERPROFILE` environment variables are empty using `os.Getenv`. This is typically done to determine the user's home directory path, potentially warning if neither is set.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_23\n\nLANGUAGE: Go\nCODE:\n```\n== \"\" && os.Getenv(\"USERPROFILE\") == \"\" && !hasXDG\n```\n\nLANGUAGE: Go\nCODE:\n```\nWarn(\"neither HOME nor USERPROFILE environment variables\")\n```\n\n----------------------------------------\n\nTITLE: Reporting and Time Tracking in Network Club System (C)\nDESCRIPTION: Uses variables such as 'numclubs' and 'timenow' to track total clubs and current time during network reporting activities, facilitating status updates and system metrics.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_61\n\nLANGUAGE: C\nCODE:\n```\nint numclubs = 0; int timenow = time (NULL);\n```\n\n----------------------------------------\n\nTITLE: Joining Bytes objects\nDESCRIPTION: This snippet tests the `.join()` method, which joins byte strings or bytearray objects. The input consists of bytearray and bytes objects; the output is a concatenated bytes object.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nb\"\".join((b\"jiljl\", bytearray(b\"kmoomk\n```\n\nLANGUAGE: python\nCODE:\n```\n== b\"jiljlkmoomkaaaa\"\n```\n\n----------------------------------------\n\nTITLE: Advanced KaTeX Configuration with Options\nDESCRIPTION: Configuration of rehypeKatex plugin with strict mode and error handling options. This allows for more controlled math rendering behavior in MDX documents.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/mdx-js/mdx/snapshot.txt#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nrehypePlugins: [[rehypeKatex, {strict: true, throwOnError: true}]]\n```\n\n----------------------------------------\n\nTITLE: KaTeX Math Rendering in JavaScript\nDESCRIPTION: Implementation for rendering mathematical expressions using KaTeX library in a web notebook. Imports the library and provides functionality to convert math expressions into HTML.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_61\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport katex from 'katex';\nimport 'katex/dist/katex.min.css';\n\n// Render Math with Katex\nfunction renderMath(math) {\n    return katex.renderToString(math);\n}\n```\n\n----------------------------------------\n\nTITLE: Comment on Shift+Enter Command in BlockquotePlugin (TypeScript)\nDESCRIPTION: A comment mentioning the registration of a custom Shift+Enter command, possibly misspelled as 'Shify'.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nto register a custom Shify + Enter command for\n```\n\n----------------------------------------\n\nTITLE: Markdown ReadMe Files\nDESCRIPTION: Project documentation files providing summaries and usage instructions for various cspell packages.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_83\n\nLANGUAGE: Markdown\nCODE:\n```\npackages/cspell-lib/src/test-util/README.md\n```\n\nLANGUAGE: Markdown\nCODE:\n```\npackages/cspell-pipe/README.md\n```\n\nLANGUAGE: Markdown\nCODE:\n```\npackages/cspell-resolver/README.md\n```\n\nLANGUAGE: Markdown\nCODE:\n```\npackages/cspell-service-bus/README.md\n```\n\nLANGUAGE: Markdown\nCODE:\n```\npackages/cspell-strong-weak-map/README.md\n```\n\nLANGUAGE: Markdown\nCODE:\n```\npackages/cspell-tools/README.md\n```\n\n----------------------------------------\n\nTITLE: Defining Teleconferencing Message and Channel Constants (C/C++ #define Macros)\nDESCRIPTION: This snippet enumerates symbolic message and channel keys relevant to teleconference operations, such as CHTKEY, MSGNAX, MSGCHE, SCANACC, and more, by assigning unique integer values to each via #define macros. These constants are essential for indicating specific actions, limits, or channel scanning statuses in code that handles message routing, channel scanning, or system events. There are no runtime parameters; the constants become part of the compiled program. Key constraint: all #define values should be unique across the system to avoid ambiguity during interpretation.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_27\n\nLANGUAGE: C\nCODE:\n```\n#define CHTKEY 4\n#define ICHTKEY 5\n#define MSGNAX 100\n#define MSGNCRE 101\n#define MSGNCRX 102\n#define MSGCHE 103\n#define MSGCHX 104\n#define SCANTHSCH 110\n#define SCANOTHCH 111\n#define SCANPRVM 112\n#define SCANPRVF 113\n#define SCANCLUB 114\n#define SCANOTHR 115\n#define SCANTPC 116\n#define SCANUNL 117\n#define SCANCHTM 118\n#define SCANCHTF 119\n#define SCANRO 120\n#define SCANACC 121\n#define SCANAX2 122\n#define SCANIM 123\n#define SCANIF 124\n#define SCANRM 125\n#define SCANRF 126\n#define SCANUM 127\n#define SCANUF 128\n#define SCANINVM 129\n#define SCANINVF 130\n#define SCANINVC 131\n#define SCANINVO 132\n#define SCANINVY 133\n#define SCANTABE 136\n#define SCANFTR 137\n#define JOINHLP 138\n#define UNKCLUB 139\n#define NAXCLUB 140\n#define UNKCHAN 141\n#define CHNAX 142\n#define SAMECHAN 143\n```\n\n----------------------------------------\n\nTITLE: Documenting Unknown DOM Event Type Definitions in TypeScript\nDESCRIPTION: This snippet contains TypeScript type declarations for various DOM events and properties related to video elements and custom events. It defines event types such as 'enterpictureinpicture' and 'leavepictureinpicture', as well as properties like 'playsinline' and methods like 'start(timeslice)'. Dependencies include DOM type definitions and TypeScript.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/microsoft/TypeScript-Website/snapshot.txt#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/typescriptlang-org/src/dom.d.ts:8738:6    - Unknown word (enterpictureinpicture) -- \"enterpictureinpicture\": Event;\npackages/typescriptlang-org/src/dom.d.ts:8739:6    - Unknown word (leavepictureinpicture) -- \"leavepictureinpicture\": Event;\npackages/typescriptlang-org/src/dom.d.ts:8749:5    - Unknown word (onenterpictureinpicture) -- onenterpictureinpicture: ((this: HTMLVideoElement\n```\n\n----------------------------------------\n\nTITLE: Using ZMQ Classes and Methods\nDESCRIPTION: This snippet contains methods from the ZMQ extension. It includes classes and methods for using the ZeroMQ library, such as `ZMQ::__construct`, ZMQContext's methods, ZMQDevice's methods, ZMQPoll's methods, and ZMQSocket's methods. These methods are used for creating sockets, connecting to endpoints, and exchanging messages via ZeroMQ. The ZMQ extension needs to be installed and enabled.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/php.txt#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\nZMQ::__construct\nZMQContext::getOpt\nZMQContext::getSocket\nZMQContext::isPersistent\nZMQContext::setOpt\nZMQContext::__construct\nZMQDevice::getIdleTimeout\nZMQDevice::getTimerTimeout\nZMQDevice::run\nZMQDevice::setIdleCallback\nZMQDevice::setIdleTimeout\nZMQDevice::setTimerCallback\nZMQDevice::setTimerTimeout\nZMQDevice::__construct\nZMQPoll::add\nZMQPoll::clear\nZMQPoll::count\nZMQPoll::getLastErrors\nZMQPoll::poll\nZMQPoll::remove\nZMQSocket::bind\nZMQSocket::connect\nZMQSocket::disconnect\nZMQSocket::getEndpoints\nZMQSocket::getPersistentId\nZMQSocket::getSocketType\nZMQSocket::getSockOpt\nZMQSocket::isPersistent\nZMQSocket::recv\nZMQSocket::recvMulti\nZMQSocket::send\nZMQSocket::sendmulti\nZMQSocket::setSockOpt\nZMQSocket::unbind\nZMQSocket::__construct\n```\n\n----------------------------------------\n\nTITLE: Dart File References with Potential Spelling Issues\nDESCRIPTION: A collection of code references with words flagged as unknown by the CSpell spell checker. These include technical terms, variable names, and specialized programming concepts.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/dart-lang/sdk/snapshot.txt#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\ncase M.FunctionKind.irregexpFunction:\n```\n\nLANGUAGE: Dart\nCODE:\n```\nnew Exception('Unknown Functionkind ($kind)');\n```\n\nLANGUAGE: Dart\nCODE:\n```\n// TODO(koda): Improve interface\n```\n\nLANGUAGE: Dart\nCODE:\n```\n/// A generic renderable object.\n```\n\nLANGUAGE: Dart\nCODE:\n```\nM.ICDataRepository _icdatas;\n```\n\nLANGUAGE: Dart\nCODE:\n```\n_makeCssClassUncopyable(table, \"noCopy\");\n```\n\nLANGUAGE: Dart\nCODE:\n```\ntooltip += \"\\nUnoptimizable!\";\n```\n\nLANGUAGE: Dart\nCODE:\n```\ntooltip += \"\\nDeoptimized ${function.deoptimizations\n```\n\nLANGUAGE: Dart\nCODE:\n```\nstyle.setProperty('-khtml-user-select', 'none\n```\n\nLANGUAGE: Dart\nCODE:\n```\nred whose areas are poritional to loss, common and\n```\n\n----------------------------------------\n\nTITLE: CSS for Resizable Frames (CSS)\nDESCRIPTION: Provides styles for elements with class '.frame-resizeable', enabling resize functionality and layout adjustments within the documentation or editor interface.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/mdx-js/mdx/snapshot.txt#_snippet_9\n\nLANGUAGE: CSS\nCODE:\n```\n.frame-resizeable { ... }\n```\n\n----------------------------------------\n\nTITLE: Query Service Implementation in Java for CQRS Pattern\nDESCRIPTION: This Java snippet provides an implementation of the QueryService interface for CQRS, focused on read operations that retrieve data without modifying application state. It uses BigInteger variables such as 'authorcount' and 'bookcount' to hold counts, and List<Book> named 'bookDtos' for data transfer. It depends on domain model classes and database access. Inputs are query parameters, while outputs are data collections and counts relevant to query requests.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/iluwatar/java-design-patterns/snapshot.txt#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nBigInteger authorcount;\nList<Book> bookDtos;\nBigInteger bookcount;\n```\n\n----------------------------------------\n\nTITLE: Config.ts: Using DataDog API Keys\nDESCRIPTION: This snippet pertains to usage of DataDog client API keys within the configuration, indicating an integration for application monitoring or analytics. It accesses the 'acces' key from the configuration or dependencies, with dependencies on DataDog SDKs or configuration modules.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n- Unknown word (acces)\n```\n\n----------------------------------------\n\nTITLE: Squared Error Metrics in Machine Learning in Python\nDESCRIPTION: Calculates mean squared error and its variants such as MSLE (mean squared logarithmic error) for model evaluation. Inputs are predicted and true values; outputs are error scores.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_40\n\nLANGUAGE: Python\nCODE:\n```\nmachine_learning/decision_tree.py:204:32    - Unknown word (squarred)   -- doctest.testmod(name=\"mean_squarred_error\", verbose=True\n```\n\nLANGUAGE: Python\nCODE:\n```\nmachine_learning/loss_functions.py:405:51    - Unknown word (MSLE)       -- squared logarithmic error (MSLE) between ground truth\n```\n\n----------------------------------------\n\nTITLE: Implementing useGiphy Hook (TypeScript)\nDESCRIPTION: Starts the implementation of the useGiphy hook, destructuring props.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\nexport const useGiphy = ({\n```\n\nLANGUAGE: typescript\nCODE:\n```\n}: UseGiphyProps) => {\n```\n\n----------------------------------------\n\nTITLE: Using Giphy Button Prop in InputBarControls (TypeScript)\nDESCRIPTION: Destructures or uses the 'showGiphyButton' property within the InputBarControls component implementation.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nshowGiphyButton,\n```\n\n----------------------------------------\n\nTITLE: Python WebDriver Testing\nDESCRIPTION: Pytest fixtures and tests for a WebAssembly-based Python implementation. Tests include demo execution, evaluation mode testing, and module injection testing.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_63\n\nLANGUAGE: Python\nCODE:\n```\ndef wdriver(request):\n    # WebDriver fixture implementation\n    pass\n\ndef test_demo(wdriver, script, output):\n    script_output = wdriver.execute_script(script)\n\ndef test_eval_mode(wdriver):\n    assert wdriver.execute_script(\"return\")\n    \ndef test_exec_mode(wdriver):\n    assert wdriver.execute_script(\"return\")\n```\n\n----------------------------------------\n\nTITLE: Comment on Transformer Responsibility (TypeScript)\nDESCRIPTION: A comment explaining that Transformers are responsible (misspelled 'responisble') for converting text within the EditedMessagePlugin.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nway). Transformers are responisble for converting the text\n```\n\n----------------------------------------\n\nTITLE: Encryption Key Handling in zipWorker.ts\nDESCRIPTION: This snippet manages the encryption key, either provided via payload or generated for encrypting data streams. It assigns the encryption key to the stream and uses sodium's secretstream functions to initialize the encryption process. Proper key management ensures data confidentiality during archive creation.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst encrytionKey = payload.encrytionKey;\nif (encrytionKey) {\n  // set up encryption with provided key\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Classes in SCSS Files for Responsive Web Design\nDESCRIPTION: These snippets include class name definitions in SCSS files used for styling specific components like quicklinks and split sections, as well as style rules with class names such as 'BIIIGG'. They serve as styled class references for layout and design styling in the web project. Dependencies include SCSS preprocessor and stylesheet modules.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/microsoft/TypeScript-Website/snapshot.txt#_snippet_1\n\nLANGUAGE: SCSS\nCODE:\n```\npackages/typescriptlang-org/src/pages/dev/dev.scss:41:10     - Unknown word (fivehundred) -- .split-fivehundred {\npackages/typescriptlang-org/src/templates/glossary.scss:4:17      - Unknown word (quicklinks) -- ul.filterable-quicklinks {\npackages/typescriptlang-org/src/templates/pages/community.tsx:106:99    - Unknown word (deftyped)   -- definitelytyped\" id=\"deftyped-header\" target=\"_blank\"\n```\n\n----------------------------------------\n\nTITLE: CSpell CLI Error Output\nDESCRIPTION: This is the error message thrown by the CSpell CLI when running `npx cspell-cli lint .` with a multi-lingual word list. It indicates a TypeError during the construction of a prefix tree from the dictionary.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/issues/issue-5222/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nTypeError: Cannot read properties of undefined (reading '0')\n    at new FastTrieBlobINode (file:///C:/Users/Isaiah/Projects/cspell-bug-repro/node_modules/cspell-trie-lib/dist/lib/TrieBlob/FastTrieBlobIRoot.js:17:27)\n    at FastTrieBlobINode.child (file:///C:/Users/Isaiah/Projects/cspell-bug-repro/node_modules/cspell-trie-lib/dist/lib/TrieBlob/FastTrieBlobIRoot.js:77:16)\n    at nodeWalker (file:///C:/Users/Isaiah/Projects/cspell-bug-repro/node_modules/cspell-trie-lib/dist/lib/ITrieNode/walker/walker.js:58:30)\n    at nodeWalker.next (<anonymous>)\n    at get size [as size] (file:///C:/Users/Isaiah/Projects/cspell-bug-repro/node_modules/cspell-dictionary/dist/SpellingDictionary/SpellingDictionaryFromTrie.js:43:51)\n    at file:///C:/Users/Isaiah/Projects/cspell-bug-repro/node_modules/cspell-dictionary/dist/SpellingDictionary/SpellingDictionaryCollection.js:21:64\n    at Array.sort (<anonymous>)\n    at new SpellingDictionaryCollectionImpl (file:///C:/Users/Isaiah/Projects/cspell-bug-repro/node_modules/cspell-dictionary/dist/SpellingDictionary/SpellingDictionaryCollection.js:21:47)\n    at createCollection (file:///C:/Users/Isaiah/Projects/cspell-bug-repro/node_modules/cspell-dictionary/dist/SpellingDictionary/SpellingDictionaryCollection.js:98:12)\n    at _getDictionaryInternal (file:///C:/Users/Isaiah/Projects/cspell-bug-repro/node_modules/cspell-lib/dist/esm/SpellingDictionary/Dictionaries.js:50:12)\n```\n\n----------------------------------------\n\nTITLE: CSpell Shell Output Example - Text\nDESCRIPTION: Shows the standard output produced by running the 'cspell .' command in a shell environment. The output lists each file processed, the processing time for each file, and concludes with a summary including the total files checked and issues found. Output format may vary depending on CSpell version, configuration, and file contents; there are no parameters or direct inputs to this snippet as it is display output only.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/issues/issue-4811/README.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n1/8 ./#local/##local/words.txt 187.36ms\n2/8 ./#local/cspell.config.yaml 12.36ms\n3/8 ./#local/README.md 36.53ms\n4/8 ./cspell.dictionaries/#local-project-only.wordlist.txt 1.80ms\n5/8 ./cspell.dictionaries/jargon.wordlist.txt 2.43ms\n6/8 ./cspell.json 33.63ms\n7/8 ./package.json 3.95ms\n8/8 ./README.md 5.97ms\nCSpell: Files checked: 8, Issues found: 0 in 0 files\n```\n\n----------------------------------------\n\nTITLE: TypeScript: EventBuilder for Finalisation Events\nDESCRIPTION: This code defines types related to MLS migration finalisation events, including a base event and specific ongoing call event types, used for handling finalisation steps in the conversation migration process.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_72\n\nLANGUAGE: TypeScript\nCODE:\n```\nJoinedAfterMLSMigrationFinalisationEvent = BaseEvent &\nexport type MLSMigrationFinalisationOngoingCallEvent = BaseEvent;\n```\n\n----------------------------------------\n\nTITLE: Trie Builder Class TypeScript\nDESCRIPTION: Implements Trie building logic, including inserting words and constructing trie nodes, with support for traversal and node management. Depends on internal node and cursor utilities.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_38\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class TrieBuilder { ... }\n```\n\n----------------------------------------\n\nTITLE: Testing Backup Repository Operations in BackupRepository.test.ts\nDESCRIPTION: This snippet tests the backup repository's functionality, focusing on writing and overwriting backup data with specified encryption options. It sets up mock conversation data and validates that the repository correctly applies overwrite options and processes encrypted files. It ensures the backup system correctly handles overwriting existing data with proper encryption headers.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\ndescribe('Backup encrytion', () => {\n  // setup and test code\n});\n```\n\n----------------------------------------\n\nTITLE: OpenAL Auxiliary Effect Slot Functions in Ada\nDESCRIPTION: Function declarations for managing auxiliary effect slots in OpenAL, including creation, manipulation, and querying of effect slots. These functions allow connecting effects to sources through auxiliary sends in the OpenAL audio pipeline.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/AdaDoom3/AdaDoom3/snapshot.txt#_snippet_14\n\nLANGUAGE: Ada\nCODE:\n```\nALvoid AL_APIENTRY alGenAuxiliaryEffectSlots(ALsizei n, ALuint *effectslots);\nALvoid AL_APIENTRY alDeleteAuxiliaryEffectSlots(ALsizei n, const ALuint *effectslots);\nALboolean AL_APIENTRY alIsAuxiliaryEffectSlot(ALuint effectslot);\nALvoid AL_APIENTRY alAuxiliaryEffectSloti(ALuint effectslot, ALenum param, ALint value);\nALvoid AL_APIENTRY alAuxiliaryEffectSlotiv(ALuint effectslot, ALenum param, const ALint *values);\nALvoid AL_APIENTRY alAuxiliaryEffectSlotf(ALuint effectslot, ALenum param, ALfloat value);\nALvoid AL_APIENTRY alAuxiliaryEffectSlotfv(ALuint effectslot, ALenum param, const ALfloat *values);\nALvoid AL_APIENTRY alGetAuxiliaryEffectSloti(ALuint effectslot, ALenum param, ALint *value);\nALvoid AL_APIENTRY alGetAuxiliaryEffectSlotiv(ALuint effectslot, ALenum param, ALint *values);\nALvoid AL_APIENTRY alGetAuxiliaryEffectSlotf(ALuint effectslot, ALenum param, ALfloat *value);\nALvoid AL_APIENTRY alGetAuxiliaryEffectSlotfv(ALuint effectslot, ALenum param, ALfloat *values);\n```\n\n----------------------------------------\n\nTITLE: Importing QualifiedId from wireapp/api-client\nDESCRIPTION: This snippet imports `QualifiedId` from `@wireapp/api-client`, likely related to managing user identities or identifiers within the application. It's likely used for referencing or manipulating user accounts.  Depends on the `@wireapp/api-client` library. The unknown word `wireapp` is the cspell error.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_95\n\nLANGUAGE: typescript\nCODE:\n```\nimport {QualifiedId} from '@wireapp/api-client/lib/user\n```\n\n----------------------------------------\n\nTITLE: E2EIdentityEnrollment.ts: Managing Enrollment Timer Logic\nDESCRIPTION: This snippet manages the logic for enrollment timers, calculating delay periods like 'racePeriodInSeconds' multiplied by milliseconds, and determining snoozability of the enrollment process based on device state. It coordinates timer expiry handling and enrollment scheduling, using constants defined as time intervals, and dependencies from '@wireapp' utilities.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nracePeriodInSeconds * TIME_IN_MILLIS.SECOND;\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nallow to snooze the enorollment if the client is still\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst task = async (isSnoozable: boolean) => {\n```\n\n----------------------------------------\n\nTITLE: Defining Typing Timeout Constant (TypeScript)\nDESCRIPTION: Defines a `TYPING_TIMEOUT` constant using `TIME_IN_MILLIS.SECOND` within the TypingIndicator index file.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\nTYPING_TIMEOUT = TIME_IN_MILLIS.SECOND * 10;\n```\n\n----------------------------------------\n\nTITLE: Configuration for Rollup plugin in plugin/index.mjs\nDESCRIPTION: This module defines a Rollup plugin designed to inject or modify code during the bundling process, such as adding dirname information or other build-time constants. Dependencies include Rollup's plugin API. The plugin intercepts certain hooks to perform its transformations.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_91\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function injectDirname() {\n  return {\n    name: 'inject-dirname',\n    buildStart() { /* setup */ },\n    renderChunk(code) { /* modify code */ }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Booleanish Type Definition in Svelte Elements\nDESCRIPTION: Defines a 'Booleanish' type that can be either a boolean value or the string 'true'. This type is used for HTML attributes in Svelte that accept boolean-like values.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/sveltejs/svelte/snapshot.txt#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Booleanish = boolean | 'true' | 'false'\n```\n\n----------------------------------------\n\nTITLE: Svelte Component Sample: Main File for Derived Unowned Test Case\nDESCRIPTION: This Svelte component contains logic for testing derived unowned state management within the Svelte framework, including conditional rendering based on data properties such as 'name'. It is used to verify dynamic rendering and state dependencies in components.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/sveltejs/svelte/snapshot.txt#_snippet_26\n\nLANGUAGE: Svelte\nCODE:\n```\npackages/svelte/tests/runtime-runes/samples/derived-unowned-3/main.svelte:13:44     - Unknown word (zeeba)      -- this.data.name === 'zeeba' ? 'neighba' : 'zeeba\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unicode Normalization and Character Split in Node.js JavaScript\nDESCRIPTION: This JavaScript Node REPL example demonstrates how unicode strings containing accent marks can be normalized and split into component characters using String.prototype.normalize and split methods. It requires a Node.js runtime. Example variable assignment and output show the difference between decomposed and composed unicode representations and illustrate how normalization affects string handling for dictionary building. Inputs are manually entered unicode strings; outputs are JavaScript arrays showing codepoint sequences.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/rfc/rfc-0002 improve dictionary suggestions/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n> x = 'ą́'\n'ą́'\n> x.split('')\n[ 'a', '̨', '́' ]\n> x.normalize('NFC').split('')\n[ 'ą', '́' ]\n```\n\n----------------------------------------\n\nTITLE: Defining Weighted Character Groups for Suggestion Costs in cspell (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to define weighted groups of characters and substrings using the 'map' and 'replace' keys. By specifying character groups, such as 'sc', 'sh', 'sch', and 'ss', or 't' and 'tt', as groups separated by '|', the system allows related characters or substrings to be interchanged at a reduced cost (in this case, a replacement cost of 50, which is half the default edit distance of 100). Dependencies: Used within a cspell configuration supporting cost maps. Inputs: character groups and cost integers. Output: fine-tuned cost mapping for replacements, enhancing suggestion logic. Limitations: Proper grouping and cost adjustment syntax must be followed.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/Configuration/auto_properties.md#_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\n  map: 'sc(sh)(sch)(ss)|t(tt)' # two groups.\n  replace: 50    # Make it 1/2 the cost of a normal edit to replace a `t` with `tt`.\n```\n\n----------------------------------------\n\nTITLE: Installing cspell-trie-lib via npm\nDESCRIPTION: This command installs the cspell-trie-lib package as a project dependency.  It downloads and installs the package and adds it to the project's `package.json` file under dependencies.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-trie-lib/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -S cspell-trie-lib\n```\n\n----------------------------------------\n\nTITLE: Text File Caching Implementation with StrongWeakMap in TypeScript\nDESCRIPTION: A TypeScript example demonstrating how to use StrongWeakMap to implement a file content caching mechanism. This implementation caches file read promises by filename and allows the promises to be garbage collected when no longer referenced.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-strong-weak-map/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StrongWeakMap } from '@cspell/strong-weak-map';\nimport { promises as fs } from 'fs';\n\nconst cache = new StrongWeakMap<string, Promise<string>>();\n\nexport function readTextFile(filename: string, encoding: BufferEncoding = 'utf8'): Promise<string> {\n  const cached = cache.get(filename);\n  if (cached) return cached;\n\n  const content = fs.readFile(filename, encoding);\n\n  cache.set(filename, content);\n\n  return content;\n}\n```\n\n----------------------------------------\n\nTITLE: Running CSpell with JSON Reporter via Command Line (sh)\nDESCRIPTION: This snippet demonstrates how to run the CSpell spell checker on the current directory using the JSON reporter by specifying it with the --reporter option in the command line. It requires the @cspell/cspell-json-reporter package to be installed.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-json-reporter/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncspell . --reporter @cspell/cspell-json-reporter\n```\n\n----------------------------------------\n\nTITLE: Extracting Spatial Transform Strings for STK Track Objects in Python\nDESCRIPTION: These functions compute string representations of object transformations including position and orientation for exporting geometric data in STK track files. They depend on Blender's object API to access location and rotation properties and format them into XYZH and XYZHPR strings. This is useful for encoding object transform metadata in text exports.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/AdaDoom3/AdaDoom3/snapshot.txt#_snippet_28\n\nLANGUAGE: Python\nCODE:\n```\ndef getNewXYZHString(obj):\n\t\"\"\"Return a string with the object's X, Y, Z location and heading angle.\"\"\"\n\tloc = obj.location\n\theading = obj.rotation_euler[2]  # Assuming Z-axis rotation is heading\n\treturn \"%.6f %.6f %.6f %.6f\" % (loc.x, loc.y, loc.z, heading)\n\ndef getXYZHPRString(obj):\n\t\"\"\"Return a string with X,Y,Z location and Heading, Pitch, Roll angles.\"\"\"\n\tloc = obj.location\n\trot = obj.rotation_euler\n\treturn \"%.6f %.6f %.6f %.6f %.6f %.6f\" % (loc.x, loc.y, loc.z, rot[2], rot[1], rot[0])\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Patterns in CSpell Configuration (JavaScript)\nDESCRIPTION: Example demonstrating how to define named regular expression patterns in the `patterns` array within a CSpell configuration file (e.g., cspell.json). These patterns, identified by a `name`, can then be referenced by name in `ignoreRegExpList` or `includeRegExpList` to ignore or include specific text sections during spell checking. The example shows defining individual patterns for single-line and multi-line comments and then combining them into a single 'comments' pattern.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/Configuration/auto_properties.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n\"ignoreRegExpList\": [\"comments\"],\n\"patterns\": [\n  {\n    \"name\": \"comment-single-line\",\n    \"pattern\": \"/#.*/g\"\n  },\n  {\n    \"name\": \"comment-multi-line\",\n    \"pattern\": \"/(?:\\/\\*[\\s\\S]*?\\*\\/)/g\"\n  },\n  // You can also combine multiple named patterns into one single named pattern\n  {\n    \"name\": \"comments\",\n    \"pattern\": [\"comment-single-line\", \"comment-multi-line\"]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Using TIME_IN_MILLIS.SECOND\nDESCRIPTION: This snippet uses `TIME_IN_MILLIS.SECOND`, this confirms the application uses utility functions related to time. The unknown word `MILLIS` is the cspell error.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_112\n\nLANGUAGE: typescript\nCODE:\n```\n}, TIME_IN_MILLIS.SECOND);\n```\n\n----------------------------------------\n\nTITLE: Defining Constants for Event Management (C)\nDESCRIPTION: This code snippet defines constants related to event management using the #define preprocessor directive in C. These constants likely represent different states, menu options, or configuration settings within the event management functionality of the application. The filename is mbk_eventman.h.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_17\n\nLANGUAGE: C\nCODE:\n```\n#define LOGSHD 3\n#define LOGSPN 4\n#define SHPMENU 10\n#define EVNNAME 13\n#define EVNALRX 14\n#define EVNCHR 15\n#define EVNDESC 16\n#define EVNPROG 17\n#define EVNONCE 18\n#define EVNUNIQ 19\n#define EVNWARN 20\n#define EVNOK 21\n#define EVDWARN 23\n#define EVDASK 24\n#define EVDNEXS 25\n#define EVDCONF 26\n#define EVDOK 27\n#define EVPHDR 28\n#define EVPTAB 29\n#define EVPFTR 30\n#define EVANAM 31\n#define EVANEX 32\n#define EVAUNI 33\n#define EVAWHH 34\n#define EVAWHN 35\n#define EVAWARN 36\n#define EVAWHE 37\n#define EVADD1 39\n#define EVLHDR 43\n#define EVLTAB 44\n#define EVLFTR 45\n#define EVLASAP 46\n#define EVLNO 47\n#define EVLYES 48\n#define EVCNAM 49\n#define EVCNEX 50\n#define EVCWARN 51\n#define EVCASK 52\n#define EVCAN 53\n#define FULLAXID 2\n```\n\n----------------------------------------\n\nTITLE: Defining Numeric Constants Using #define in C\nDESCRIPTION: This snippet defines numerous numeric constants via #define preprocessor directives in C, assigning symbolic names to unique integer values. These constants likely correspond to command, request, or status codes used in email club related functionality. Each macro associates a descriptive identifier with a unique integer for easier, readable reference elsewhere in the codebase. Dependencies include standard C preprocessor support. No inputs or outputs apply as these are compile-time constants. The main limitation is only that these constants must not conflict with others and remain consistent throughout the project.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_15\n\nLANGUAGE: C\nCODE:\n```\n#define DNLNAX 467\n#define DMNU 468\n#define DMNUD 469\n#define DMNUR 470\n#define DMNUH 471\n#define FSCCAN 472\n#define RQMNU 473\n#define RQMNUH 474\n#define RQCFH 475\n#define RQCLH 476\n#define RQLCE 477\n#define RQCLF 478\n#define RQCMNU 479\n#define RQCHELP 480\n#define RQCADD 481\n#define RQCCR 482\n#define RQCDEL 483\n#define RQCDR 484\n#define RLMNU 485\n#define RLMNUR 486\n#define RLMNUH 487\n#define RLASK 488\n#define RLASKR 489\n#define RLASKH 490\n#define RLBNMSG 491\n#define RLMISS 492\n#define RLBHDR 493\n#define RLBTAB 494\n#define RLBFTR 495\n#define RLTHDR 496\n#define RLDONE 497\n#define RLABORT 498\n#define RSASK 499\n#define RSASKR 500\n#define RSASKH 501\n#define RSWAIT 502\n#define RSBNMSG 503\n#define RSMISS 504\n#define RSTHDR 505\n#define RSSCNM 506\n#define RSSCNMH 507\n#define RSSCNMD 508\n#define RSSCNMHD 509\n#define RSSCNR 510\n#define RSDEF 511\n#define RSGONUM 512\n#define RSBEG 513\n#define RSEND 514\n#define RSDEL 515\n#define RSIOERR 516\n#define RSRMNU1 517\n#define ATTNAP 523\n#define ATTNAX 524\n#define THRMNU 525\n#define THRMNUH 526\n#define THRNRET 528\n#define THRBEG 530\n#define THRRET 531\n#define THRPR 532\n#define THRPNF 533\n#define THRCLC 534\n#define MCMVT 535\n#define MCMLT 536\n#define MCMNEWSUBJ 537\n#define MCMNEWATTN 538\n#define COPMNU 539\n#define COPMNUH 540\n#define COPMNUF 541\n#define COPERR 542\n#define COPMNUFH 543\n#define COPTTG 544\n#define COPTUN 545\n#define COPPASK 546\n#define COPPDEF 547\n#define COPPERR 548\n#define COPPOK1 549\n#define COPAAPP 553\n#define COPAUNA 554\n#define COPMVT 555\n#define COPMLT 556\n#define COPMW1 562\n#define COPOK1 563\n#define COPIAMNU 569\n#define COPIASMNU 570\n#define COPIARS 571\n#define COPIAH 572\n#define COPIAO 573\n#define COPIAA 574\n#define COPIAR 575\n#define RKASK 576\n#define RKHELP 577\n#define RKSCAN1 578\n#define RKIND0 582\n#define RKINDE 591\n#define RKFOUND 592\n#define RKCAN 593\n#define FAPPSCN 594\n#define QSEMPTY 598\n#define QSNONEW 599\n#define QSSCAN 600\n#define QSEND 601\n#define QSABORT 602\n```\n\nLANGUAGE: C\nCODE:\n```\n#define CDNLAUD 40\n#define CUPLAUD 41\n#define DRDAXKEY 42\n#define DDLAXKEY 43\n#define DWRAXKEY 44\n#define DULAXKEY 45\n#define DEFCLUB 46\n#define MODAXKEY 47\n#define MODCHKEY 48\n#define MODHDKEY 49\n#define TLCPAG 50\n#define BLTPAG 51\n```\n\n----------------------------------------\n\nTITLE: Processing STK Track Objects by Type in Python\nDESCRIPTION: This function processes Blender objects based on their custom 'stktype' property for the STK track export pipeline. It uses conditional logic to handle different game elements such as water, cannons, and navmesh. The function depends on helper functions and property getters to determine behavior and output appropriate export data.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/AdaDoom3/AdaDoom3/snapshot.txt#_snippet_29\n\nLANGUAGE: Python\nCODE:\n```\ndef processObject(self, object, stktype):\n\tif stktype == \"WATER\":\n\t\t# Process water object export logic\n\t\tpass\n\telif stktype == \"CANNONEND\":\n\t\t# Process cannon end object export logic\n\t\tpass\n\telif stktype == \"NAVMESH\":\n\t\t# Process navmesh object export logic\n\t\tpass\n\t# Additional stktype cases handled similarly\n```\n\n----------------------------------------\n\nTITLE: Fixing node:worker_threads on node 14\nDESCRIPTION: This bug fix addresses an issue where the `node:worker_threads` module was breaking on Node.js version 14. This ensures that the spellchecking tool is compatible with Node.js 14. The fix involves the use or implementation of the `node:worker_threads` module.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/CHANGELOG.md#_snippet_16\n\nLANGUAGE: git\nCODE:\n```\n`node:worker_threads` breaks on node 14 ([#4185](https://github.com/streetsidesoftware/cspell/issues/4185)) ([8654ac7](https://github.com/streetsidesoftware/cspell/commit/8654ac7161b0ac558e864cfc116a9ad9ce6dc32e))\n```\n\n----------------------------------------\n\nTITLE: Defining Remote System Status and Command Constants in C\nDESCRIPTION: This snippet from the mbk_remsys.h header defines symbolic constants representing statuses, commands, and responses for remote system operations in the mbk project. These macros (e.g., RSSENDWHO, RSDELETEERR, RSEXEMPTOK) bind meaningful names to integral values used to track or control remote system messaging and processes. They are critical for enabling clear control flow and status reporting in remote system modules.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_23\n\nLANGUAGE: C\nCODE:\n```\n#define RSSENDWHO 93\n#define RSSENDR 94\n#define RSSENDD 95\n#define RSSEND1 96\n#define RSSENDX 97\n#define RSSENDCAN 101\n#define RSSENDINH 102\n#define RSDELETEWHO 103\n#define RSDELETEERR 104\n#define RSDELETEOK 105\n#define RSDELETEUNDO 106\n#define RSDETAILWHO 107\n#define RSDETAILNAX 108\n#define RSDETAILSUSP 109\n#define RSDETAILXMPT 110\n#define RSDETAILDEL 111\n#define RSDETAILOP 112\n#define RSDETAILM 113\n#define RSDETAILF 114\n#define RSDETAILS1 115\n#define RSDETAILNST 124\n#define RSDETAILL1 125\n#define RSDETAIL 135\n#define RSEXEMPTWHO 136\n#define RSEXEMPTERR 137\n#define RSEXEMPTOK 138\n#define RSEXEMPTUNDO 139\n#define RSSUSPWHO 140\n#define RSSUSPERR 141\n#define RSSUSPOK 142\n#define RSSUSPUNDO 143\n#define RSPOSTWHO 144\n#define RSPOSTAMT 145\n#define RSPOSTFOP 146\n#define RSPOSTERR 147\n#define RSPOSTCNF 148\n#define RSPOSTDEL 149\n#define RSPOSTNOT1 150\n#define RSPOSTOK 153\n#define RSHANGUPWHO 155\n#define RSHANGUPERR 156\n#define RSHANGUPOK 157\n#define RSSRCHVT 158\n#define RSSRCHM 159\n#define RSSRCHF 160\n#define RSSRCHS1 161\n#define RSSRCHLT 169\n#define RSSRCH1 170\n#define RSSRCHC 200\n#define RSSRCHR 201\n#define RSSRCHB 202\n#define RSSRCHL 203\n#define RSCLASSWHO 204\n#define RSCLASSREP 205\n#define RSCLASSCLS 206\n#define RSCLASSERR 207\n#define RSCLASSDEL 208\n#define RSCLASSNOT 209\n#define RSCLASSOK 210\n#define RSKEYSWHO 211\n#define RSKEYSSYS 212\n#define RSKEYSTAB 213\n#define RSKEYSASK 214\n#define RSKEYSON 215\n#define RSKEYSOFF 216\n#define RSKEYSDEL 217\n#define RSKEYSOK 218\n#define RSTYPEASK 219\n#define RSTYPEERR 220\n#define RSCOPYSRC 221\n#define RSCOPYTRG 222\n#define RSCOPYERR 223\n#define RSCOPYOK 224\n#define RSRENSRC 225\n#define RSRENTRG 226\n#define RSRENERR 227\n#define RSRENOK 228\n#define RSDIRASK 229\n#define RSDIRERR 230\n#define RSDELASK 231\n#define RSDELERR 232\n#define RSSYSASK 233\n#define RSXFERDIR 234\n#define RSXFERSHRT 235\n```\n\n----------------------------------------\n\nTITLE: Enable cli option --validate-directives\nDESCRIPTION: This bug fix enables the CLI option `--validate-directives`. This likely enhances the command-line interface by allowing users to validate spelling directives, ensuring the directives themselves do not contain any spelling errors. This can result in more reliable usage of cspell features.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-glob/CHANGELOG.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Configuring STK Panel Parameters in XML\nDESCRIPTION: Configures various panel settings and graphical effects for SuperTuxKart using XML properties within stk_panel_parameters.xml. Includes parameters for lens flare (sunlensflare), color correction (colorlevel, inblack, ingamma, inwhite, outblack, outwhite), skybox textures (genericskybox), track time (duringday), shadows (genericshadow), kart types (karttype), cutscene flags, property groups (propgroup), ambient mapping (ambientmap), driving settings, start positions (kartstart), and post-processing effects (postpro).\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/AdaDoom3/AdaDoom3/snapshot.txt#_snippet_40\n\nLANGUAGE: xml\nCODE:\n```\nflare underscore and maximise the emotional and psychologic\n```\n\nLANGUAGE: xml\nCODE:\n```\n<BoolProp id=\"sunlensflare\" name=\"Sun lens flare\n```\n\nLANGUAGE: xml\nCODE:\n```\n<BoolProp id=\"colorlevel\" name=\"Color correction\n```\n\nLANGUAGE: xml\nCODE:\n```\n<FloatProp id=\"colorlevel_inblack\" name=\"Input\n```\n\nLANGUAGE: xml\nCODE:\n```\nFloatProp id=\"colorlevel_inblack\" name=\"Input black\"\n```\n\nLANGUAGE: xml\nCODE:\n```\n<FloatProp id=\"colorlevel_ingamma\" name=\"Input\n```\n\nLANGUAGE: xml\nCODE:\n```\nFloatProp id=\"colorlevel_ingamma\" name=\"Input gamma\"\n```\n\nLANGUAGE: xml\nCODE:\n```\n<FloatProp id=\"colorlevel_inwhite\" name=\"Input\n```\n\nLANGUAGE: xml\nCODE:\n```\nFloatProp id=\"colorlevel_inwhite\" name=\"Input white\"\n```\n\nLANGUAGE: xml\nCODE:\n```\n<FloatProp id=\"colorlevel_outblack\" name=\"Output\n```\n\nLANGUAGE: xml\nCODE:\n```\nFloatProp id=\"colorlevel_outblack\" name=\"Output black\n```\n\nLANGUAGE: xml\nCODE:\n```\nFloatProp id=\"colorlevel_outwhite\" name=\"Output white\n```\n\nLANGUAGE: xml\nCODE:\n```\n<EnumProp id=\"duringday\" name=\"Track time\" default\n```\n\nLANGUAGE: xml\nCODE:\n```\nname=\"Shadow\" default=\"genericshadow.png\" doc=\"Filename of\n```\n\nLANGUAGE: xml\nCODE:\n```\n<EnumProp id=\"karttype\" name=\"Type\" default\n```\n\nLANGUAGE: xml\nCODE:\n```\nTexture Top\" default=\"genericskybox_top.jpg\"/>\n```\n\nLANGUAGE: xml\nCODE:\n```\nTexture Bottom\" default=\"genericskybox_bottom.jpg\"/>\n```\n\nLANGUAGE: xml\nCODE:\n```\nTexture East\" default=\"genericskybox_east.jpg\"/>\n```\n\nLANGUAGE: xml\nCODE:\n```\nTexture West\" default=\"genericskybox_west.jpg\"/>\n```\n\nLANGUAGE: xml\nCODE:\n```\nTexture North\" default=\"genericskybox_north.jpg\"/>\n```\n\nLANGUAGE: xml\nCODE:\n```\nfile is a SuperTuxKart cutscene\"/>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<BoolProp id=\"cutscene\" name=\"Is a cutscene\n```\n\nLANGUAGE: xml\nCODE:\n```\ncutscene\" name=\"Is a cutscene\" default=\"false\" box\n```\n\nLANGUAGE: xml\nCODE:\n```\n<PropGroup id=\"propgroup_driving\" name=\"Driving\n```\n\nLANGUAGE: xml\nCODE:\n```\n<PropGroup id=\"propgroup_kartstart\" name=\"Start\n```\n\nLANGUAGE: xml\nCODE:\n```\nPropGroup id=\"propgroup_kartstart\" name=\"Start line positions\n```\n\nLANGUAGE: xml\nCODE:\n```\n1.1\" doc=\"Sometimes drivelines are too low and will\n```\n\nLANGUAGE: xml\nCODE:\n```\nunder it). Generally the drivelines should be fixed, but\n```\n\nLANGUAGE: xml\nCODE:\n```\n<PropGroup id=\"propgroup_postpro\" name=\"Graphical\n```\n\nLANGUAGE: xml\nCODE:\n```\nPropGroup id=\"propgroup_postpro\" name=\"Graphical effects\n```\n\nLANGUAGE: xml\nCODE:\n```\n<BoolProp id=\"ambientmap\" name=\"Ambient light\n```\n\nLANGUAGE: xml\nCODE:\n```\n<StringProp id=\"ambientmap_texture2\" name=\"Ambient\n```\n\nLANGUAGE: xml\nCODE:\n```\n<StringProp id=\"ambientmap_texture3\" name=\"Ambient\n```\n\nLANGUAGE: xml\nCODE:\n```\n<StringProp id=\"ambientmap_texture4\" name=\"Ambient\n```\n\nLANGUAGE: xml\nCODE:\n```\n<StringProp id=\"ambientmap_texture5\" name=\"Ambient\n```\n\n----------------------------------------\n\nTITLE: Matrix Operation Tests in Python\nDESCRIPTION: Testing matrix operations, such as addition or other arithmetic, labeled as matop. These tests are part of unit testing suite to ensure correctness in matrix functionality.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_51\n\nLANGUAGE: Python\nCODE:\n```\n18:40 - Unknown word (matop) -- matrix_operation as matop\n46:9 - Unknown word (theo) -- theo = matop.add(mat1, mat\n```\n\n----------------------------------------\n\nTITLE: Importing MDX and MDAST Utilities in editor.jsx (JavaScript)\nDESCRIPTION: This snippet imports specific utilities from 'mdast' and 'mdast-util-mdx-jsx', establishing dependencies for processing MDX and MDAST structures. It facilitates manipulation and rendering of Markdown Abstract Syntax Trees within the editor component, enabling advanced syntax support.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/mdx-js/mdx/snapshot.txt#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Nodes as MdastNodes, Root as MdastRoot } from 'mdast'\nimport { MdastNodes, MdastRoot } from 'mdast'\nimport { captureMdast } from 'mdast-util-mdx-jsx'\n\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation Flags in mbk_archivers.h\nDESCRIPTION: This snippet contains preprocessor directives to prevent multiple inclusion of the archivers header, ensuring consistent compilation and avoiding redefinition errors.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_10\n\nLANGUAGE: C\nCODE:\n```\n#ifndef __ARCHIVERS_UNAMBIGUOUS__\n```\n\n----------------------------------------\n\nTITLE: Test Suite Definition in TypeScript\nDESCRIPTION: This code defines a test suite using `describe` to group related tests. It normalizes the TypeScript grammar and then uses `test.each` to define multiple test cases with different input lines.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-grammar/fixtures/tokenizer-tests/test.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\ndescribe('visualizeAsMD', () => {\n  const gTypeScript = normalizeGrammar(TypeScript.grammar);\n\n test.each`\n lines\n ${tokenize('')}\n ${tokenize('\\tconst greeting = \\\"hello\\\"\\n')}\n `('tokenizedLinesToMarkdown', ({ lines }) => {\n expect(tokenizedLinesToMarkdown(lines)).toMatchSnapshot();\n });\n});\n```\n\n----------------------------------------\n\nTITLE: JSX Code with Twoslash for MDX Documentation\nDESCRIPTION: JSX code block using twoslash directive with path specification. This provides enhanced documentation capabilities for React component examples in MDX.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/mdx-js/mdx/snapshot.txt#_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx twoslash path=\"example.jsx\"\n```\n```\n\n----------------------------------------\n\nTITLE: Exposing ConfigLoader API\nDESCRIPTION: This bug fix exposes the ConfigLoader API, allowing external access and usage. This means the cspell configuration loading functionality is now available for other parts of the system or for external tools to leverage. It likely exposes the API for loading and parsing configuration files.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/CHANGELOG.md#_snippet_3\n\nLANGUAGE: git\nCODE:\n```\nexpose ConfigLoader API ([#5032](https://github.com/streetsidesoftware/cspell/issues/5032)) ([e839990](https://github.com/streetsidesoftware/cspell/commit/e839990e94f639000bc926ae87187840fb17dee9))\n```\n\n----------------------------------------\n\nTITLE: Parsing Server Blocks and Connection Policies Using Go in Caddy HTTP Configuration\nDESCRIPTION: This code segment iterates over server blocks and their keys to build HTTP server configurations. It handles extraction of hostnames, mapping of logger overrides, and assembling TLS connection policies by casting raw values into typed ConnectionPolicy structs from the caddytls module.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfor j, sblock1 := range p.serverBlocks {\n  for _, key := range sblock1.block.GetKeysText() {\n    // Process keys\n  }\n}\ncp := cpVal.Value.(*caddytls.ConnectionPolicy)\n// Use cp to configure server.TLSConnPolicies\n```\n\n----------------------------------------\n\nTITLE: Pascal's Triangle Element Calculation in Python\nDESCRIPTION: Contains code for generating or accessing Pascal's Triangle elements, with emphasis on element havingva (likely 'having a') at row index r and column c. Useful for combinatorics, binomial coefficients, or probabilistic calculations.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_48\n\nLANGUAGE: Python\nCODE:\n```\n3:13 - Unknown word (havingva) -- The element havingva row index of r and column\n```\n\n----------------------------------------\n\nTITLE: Invalid Window Binding in Svelte Component\nDESCRIPTION: Example of an error message for an invalid binding to 'innerwidth' on a window object in a Svelte component, which should be 'innerWidth' (camelCase).\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/sveltejs/svelte/snapshot.txt#_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n\"`bind:innerwidth` is not a valid binding\"\n```\n\n----------------------------------------\n\nTITLE: State Calculation for On-Time Attendance in Project Euler Problem 191\nDESCRIPTION: Variable storing the state calculation for on-time attendance in the dynamic programming solution for Project Euler problem 191.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_88\n\nLANGUAGE: Python\nCODE:\n```\nstate_ontime = _calculate(days -\n```\n\n----------------------------------------\n\nTITLE: Listing Unknown Words in Svelte\nDESCRIPTION: The code snippet lists the unknown words detected by a spell checker. These words are likely intended to be HTML entities, and they were not recognized by the spell-checking tool. The snippet indicates the file path, line number, and the unknown word itself.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/sveltejs/svelte/snapshot.txt#_snippet_24\n\nLANGUAGE: text\nCODE:\n```\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:839:3     - Unknown word (intcal)       -- 'intcal;': 8890,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:840:3     - Unknown word (iquest)       -- 'iquest;': 191,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:841:3     - Unknown word (isinsv)       -- 'isinsv;': 8947,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:842:3     - Unknown word (itilde)       -- 'itilde;': 297,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:843:3     - Unknown word (jsercy)       -- 'jsercy;': 1112,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:844:3     - Unknown word (kappav)       -- 'kappav;': 1008,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:845:3     - Unknown word (kcedil)       -- 'kcedil;': 311,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:846:3     - Unknown word (kgreen)       -- 'kgreen;': 312,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:847:4     - Unknown word (Atail)        -- 'lAtail;': 10523,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:848:3     - Unknown word (lacute)       -- 'lacute;': 314,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:849:3     - Unknown word (lagran)       -- 'lagran;': 8466,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:851:3     - Unknown word (langle)       -- 'langle;': 10216,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:852:3     - Unknown word (larrfs)       -- 'larrfs;': 10525,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:853:3     - Unknown word (larrhk)       -- 'larrhk;': 8617,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:854:3     - Unknown word (larrlp)       -- 'larrlp;': 8619,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:855:3     - Unknown word (larrpl)       -- 'larrpl;': 10553,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:856:3     - Unknown word (larrtl)       -- 'larrtl;': 8610,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:857:3     - Unknown word (latail)       -- 'latail;': 10521,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:859:3     - Unknown word (lbrack)       -- 'lbrack;': 91,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:860:3     - Unknown word (lcaron)       -- 'lcaron;': 318,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:861:3     - Unknown word (lcedil)       -- 'lcedil;': 316,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:862:3     - Unknown word (ldquor)       -- 'ldquor;': 8222,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:863:3     - Unknown word (lesdot)       -- 'lesdot;': 10879,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:864:3     - Unknown word (lesges)       -- 'lesges;': 10899,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:865:3     - Unknown word (lfisht)       -- 'lfisht;': 10620,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:866:3     - Unknown word (lfloor)       -- 'lfloor;': 8970,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:867:3     - Unknown word (lharul)       -- 'lharul;': 10602,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:868:3     - Unknown word (llhard)       -- 'llhard;': 10603,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:869:3     - Unknown word (lmidot)       -- 'lmidot;': 320,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:870:3     - Unknown word (lmoust)       -- 'lmoust;': 9136,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:871:3     - Unknown word (loplus)       -- 'loplus;': 10797,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:872:3     - Unknown word (lowast)       -- 'lowast;': 8727,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:873:3     - Unknown word (lowbar)       -- 'lowbar;': 95,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:874:3     - Unknown word (lparlt)       -- 'lparlt;': 10643,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:875:3     - Unknown word (lrhard)       -- 'lrhard;': 10605,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:876:3     - Unknown word (lsaquo)       -- 'lsaquo;': 8249,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:877:3     - Unknown word (lsquor)       -- 'lsquor;': 8218,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:878:3     - Unknown word (lstrok)       -- 'lstrok;': 322,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:879:3     - Unknown word (lthree)       -- 'lthree;': 8907,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:880:3     - Unknown word (ltimes)       -- 'ltimes;': 8905,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:881:3     - Unknown word (ltlarr)       -- 'ltlarr;': 10614,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:883:3     - Unknown word (mapsto)       -- 'mapsto;': 8614,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:885:3     - Unknown word (mcomma)       -- 'mcomma;': 10793,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:886:3     - Unknown word (midast)       -- 'midast;': 42,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:887:3     - Unknown word (midcir)       -- 'midcir;': 10992,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:888:3     - Unknown word (middot)      -- 'middot;': 183,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:889:3     - Unknown word (minusb)      -- 'minusb;': 8863,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:890:3     - Unknown word (minusd)      -- 'minusd;': 8760,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:891:3     - Unknown word (mnplus)      -- 'mnplus;': 8723,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:893:3     - Unknown word (mstpos)      -- 'mstpos;': 8766,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:895:4     - Unknown word (Vdash)       -- 'nVdash;': 8878,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:896:3     - Unknown word (nacute)      -- 'nacute;': 324,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:897:3     - Unknown word (nbumpe)      -- 'nbumpe;': 8783,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:898:3     - Unknown word (ncaron)      -- 'ncaron;': 328,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:899:3     - Unknown word (ncedil)      -- 'ncedil;': 326,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:900:3     - Unknown word (nearhk)      -- 'nearhk;': 10532,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:901:3     - Unknown word (nequiv)      -- 'nequiv;': 8802,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:902:3     - Unknown word (nesear)      -- 'nesear;': 10536,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:903:3     - Unknown word (nexist)      -- 'nexist;': 8708,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:904:3     - Unknown word (nltrie)      -- 'nltrie;': 8940,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:905:3     - Unknown word (notin)       -- 'notinE;': 8953,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:906:3     - Unknown word (nparsl)      -- 'nparsl;': 11005,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:907:3     - Unknown word (nprcue)      -- 'nprcue;': 8928,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:908:3     - Unknown word (nrarrc)      -- 'nrarrc;': 10547,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:909:3     - Unknown word (nrarrw)      -- 'nrarrw;': 8605,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:910:3     - Unknown word (nrtrie)      -- 'nrtrie;': 8941,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:911:3     - Unknown word (nsccue)      -- 'nsccue;': 8929,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:912:3     - Unknown word (nsimeq)      -- 'nsimeq;': 8772,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:913:3     - Unknown word (ntilde)      -- 'ntilde;': 241,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:914:3     - Unknown word (numero)      -- 'numero;': 8470,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:916:5     - Unknown word (Harr)        -- 'nvHarr;': 10500,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:917:3     - Unknown word (nvdash)      -- 'nvdash;': 8876,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:920:3     - Unknown word (nwarhk)      -- 'nwarhk;': 10531,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:921:3     - Unknown word (nwnear)      -- 'nwnear;': 10535,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:922:3     - Unknown word (oacute)      -- 'oacute;': 243,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:923:3     - Unknown word (odblac)      -- 'odblac;': 337,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:924:3     - Unknown word (odsold)      -- 'odsold;': 10684,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:925:3     - Unknown word (ograve)      -- 'ograve;': 242,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:926:3     - Unknown word (ominus)      -- 'ominus;': 8854,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:927:3     - Unknown word (origof)      -- 'origof;': 8886,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:928:3     - Unknown word (oslash)      -- 'oslash;': 248,\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:929:3     - Unknown word (otilde)      -- 'otilde;': 245\n```\n\n----------------------------------------\n\nTITLE: Bug Fix for .gitignore comment detection\nDESCRIPTION: This entry describes a bug fix related to the detection of comments within .gitignore files. It provides a link to the specific commit and issue for further context.  The change likely improved the parsing of .gitignore files to correctly identify and ignore comments.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-glob/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: CMake Feature Selection Logic with STREQUAL\nDESCRIPTION: CMake conditional logic using STREQUAL to check feature values, specifically for storage-grpc.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/googleapis/google-cloud-cpp/snapshot.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (\"${feature}\" STREQUAL \"storage-grpc\" OR \"\n# In vcpkg we cannot use `_` in\n```\n\n----------------------------------------\n\nTITLE: Rollup Configuration Example with Twoslash\nDESCRIPTION: JavaScript code block showing Rollup configuration with twoslash directive. This provides enhanced documentation for Rollup bundler setup in MDX.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/mdx-js/mdx/snapshot.txt#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n```js twoslash path=\"rollup.config\"\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Mail Macros in C\nDESCRIPTION: This code snippet defines a series of macros using the #define preprocessor directive in C. These macros likely represent constants used within a mail application. Each macro is associated with a numeric value. They are used for various flags, states and messages related to mail handling.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_19\n\nLANGUAGE: C\nCODE:\n```\n#define REPHD 135\n#define REPTB 136\n#define REPTBALL 137\n#define REPTBIN 138\n#define REPTBNR 139\n#define REPTBUU 140\n#define REPTBMF 141\n#define REPTBOK 142\n#define REPTBAS 143\n#define REPTBRR 144\n#define REPTBUS 145\n#define REPTBAG 147\n#define REPTBAE 148\n#define REPTBES 149\n#define REPTBPR 150\n#define REPTBCR 151\n#define REPTBNA 152\n#define REPTBCN 153\n#define DIRRQST 157\n#define DIRRQUS 162\n#define DIRCANT 163\n#define DIRCNTR 164\n#define DIRNFND 165\n#define DIRNNEED 166\n#define NOCFMSG 167\n#define ENDUL 168\n#define ASKCLUB 169\n#define ASKCLBR 170\n#define ASKERCP 171\n#define ASKSRCP 172\n#define UNKUSR 173\n#define EMLALL 174\n#define ASKEORS 175\n#define ASKRORS 176\n#define SIGINJ 180\n#define EMLINJ 181\n#define RQMUNS 182\n#define RQMTAB 183\n#define ENDRQM 184\n#define FIXETA 8\n#define ETAXLT 9\n#define PRGIND 10\n#define ADMNAM 11\n#define OMMENU 12\n#define OMSHORT 13\n#define OMERR 14\n#define OMVT 15\n#define OMVTN 16\n#define OMVTY 17\n#define OMVTA 18\n#define OMLT 19\n#define OMLTATT 20\n#define OMLTREQ 21\n#define OMLTHDR 22\n#define OMSOK 23\n#define OMSCAN 24\n#define OMCMNU 25\n#define OMCMNUS 26\n#define OMCHLP 27\n#define OMCLH 29\n#define OMCL 30\n#define OMCLYES 31\n#define OMCLNO 32\n#define OMCLF 33\n#define OMCADD 34\n#define OMCCR 35\n#define OMCDEL 36\n#define OMCDR 37\n#define OMCRES 38\n#define OMCRR 39\n#define OMCRN 40\n#define OMCRNR 41\n#define OMCFC 42\n#define OMCFCR 43\n#define OMCFOK 44\n#define OMCFCAN 45\n#define OMCTC 46\n#define OMCTCR 47\n#define OMCTOK 48\n#define OMCTCAN 49\n#define OMDLHD 50\n#define OMDLEM 51\n#define OMDLT1 52\n#define OMDLIND0 53\n#define OMDLINDE 62\n#define MSGSTOT 64\n#define MSGSAT 66\n#define QWKCOPY 69\n#define QWKCPPPN 70\n#define QWKCPATT 71\n#define QWKCPREQ 72\n#define QWKCPOTH 73\n#define QWKCPHD 75\n#define QWKCPTB 76\n#define QWKCPAC 77\n#define QWKCPER 78\n#define QWKASKH 79\n#define QWKCPNF 80\n#define QWKCPAP 81\n#define QWKCPNA 82\n#define QWKCPCP 83\n#define QWKCPIO 84\n#define QWKCPOK 85\n#define QWKCPPO 86\n#define QWKCPCA 87\n#define QWKCPHH 88\n#define QWKCPHF 89\n```\n\n----------------------------------------\n\nTITLE: YYBISON Macro Definition (C)\nDESCRIPTION: This defines a macro `YYBISON` to the value 1.  This is likely used to identify that the code was generated by the Bison parser generator. It is a common practice to include such a definition to enable conditional compilation based on the generator used.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n#define YYBISON 1  /* Identify Bison\n```\n\n----------------------------------------\n\nTITLE: OpenAL Audio Format Constants in Ada\nDESCRIPTION: Constant definitions for various audio formats in OpenAL, including specialized formats like ADPCM, Vorbis, MULAW, and ALAW. These constants are used to specify audio data formats when loading sounds in OpenAL.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/AdaDoom3/AdaDoom3/snapshot.txt#_snippet_15\n\nLANGUAGE: Ada\nCODE:\n```\nAL_LOKI_IMA_ADPCM_format : constant\nAL_FORMAT_IMA_ADPCM_MONO16_EXT : constant\nAL_FORMAT_IMA_ADPCM_STEREO16_EXT : constant\nAL_EXT_vorbis 1\nAL_FORMAT_VORBIS_EXT\nAL_LOKI_quadriphonic 1\nAL_EXT_MULAW 1\nAL_FORMAT_MONO_MULAW_EXT : constant Int\nAL_FORMAT_STEREO_MULAW_EXT : constant Int_Unsigned\nAL_EXT_ALAW : constant Int_Unsigned\nAL_FORMAT_MONO_ALAW_EXT : constant Int\nAL_FORMAT_STEREO_ALAW_EXT : constant Int_Unsigned\nAL_EXT_MCFORMATS : constant Int_Unsigned\nAL_EXT_MULAW_MCFORMATS : constant Int_Unsigned\nAL_FORMAT_MONO_MULAW : constant Int_Unsigned\n```\n\n----------------------------------------\n\nTITLE: TypeScript Keyboard Utility Module for Shortcut Handling\nDESCRIPTION: Imports the keyboardjs library to facilitate keyboard shortcut detection and handling within the application, likely providing functions to bind key combinations to actions.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_126\n\nLANGUAGE: TypeScript\nCODE:\n```\nsrc/script/util/KeyboardUtil.ts\n```\n\n----------------------------------------\n\nTITLE: Basic API Usage and Endpoint References\nDESCRIPTION: This snippet includes references to API endpoints such as 'Hello, World!', file references, and typical usage patterns like running scripts with Node.js. It provides a high-level overview of API interaction points, scripts, and server URLs for quick navigation and testing.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/node.txt#_snippet_32\n\nLANGUAGE: JavaScript\nCODE:\n```\nHello, World!\nhello-world.js\nhttp://127.0.0.1:3000\nnode [options] [V8 options] [script.js | -e \"script\" | - ] [arguments]\nprojects\nprojects\n```\n\n----------------------------------------\n\nTITLE: SSR: CSS Injection and Minification Examples\nDESCRIPTION: These HTML snippets contain CSS styles with injected class definitions, used in server-side rendering tests to verify style injection, CSS scoping, and minification functionalities within Svelte applications.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/sveltejs/svelte/snapshot.txt#_snippet_29\n\nLANGUAGE: HTML\nCODE:\n```\npackages/svelte/tests/server-side-rendering/samples/css-injected-options-minify/_expected_head.html:1:39      - Unknown word (gfnjhw)     -- gfnjhw\">.foo.svelte-gfnjhw {color:green;}.foo.svelte\n```\n\n----------------------------------------\n\nTITLE: Namespace imports for SVG and MathML in Svelte compiler\nDESCRIPTION: Import statement in the Svelte compiler that references MathML and SVG namespaces, used for handling special XML namespaces during compilation.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/sveltejs/svelte/snapshot.txt#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { NAMESPACE_MATHML, NAMESPACE_SVG } from\n```\n\n----------------------------------------\n\nTITLE: Generate Duplicate Entries Fix\nDESCRIPTION: This snippet refers to a bug fix regarding generating duplicate entries by default. The change stops the default generation of duplicate entries. The expected output is that duplicate entries are no longer created unless specified otherwise.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-glob/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Soboleva Modified Hyperbolic Tangent Activation in Python\nDESCRIPTION: Defines a custom activation function called Soboleva Modified Hyperbolic Tangent (SMHT), used to enhance neural network performance. Uses numpy and applies a specific transformation to input data.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_57\n\nLANGUAGE: Python\nCODE:\n```\n14:5 - Unknown word (soboleva) -- def soboleva_modified_hyperbolic\n```\n\nLANGUAGE: Python\nCODE:\n```\n28:54 - Unknown word (SMHT) -- array after applying SMHT function\n```\n\n----------------------------------------\n\nTITLE: Video Call Controls and State Management in React TypeScript\nDESCRIPTION: This snippet concerns the video calling controls UI, including microphone and camera toggles, background blur options, and raising hand functionality. It utilizes UI components and icons from '@wireapp/react-ui-kit' and event handlers from '@wireapp/webapp-events'. The component handles localized label texts and reacts to user input with accessibility considerations. Dependencies include tsyringe for DI and wireapp UI kit components.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_66\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TabIndex} from '@wireapp/react-ui-kit/lib/types';\nimport {container} from 'tsyringe';\nimport {CALL_TYPE} from '@wireapp/avs';\nimport {RaiseHandIcon} from '@wireapp/react-ui-kit';\nimport {WebAppEvents} from '@wireapp/webapp-events';\n\n// Example control rendering\nconst VideoControls = () => {\n  // control rendering logic with handlers and labels\n  return <RaiseHandIcon />;\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript Source Module for Calling Epoch Cache Management\nDESCRIPTION: This snippet includes imports and type definitions for the CallingEpochCache TypeScript module, which manages call epoch information and conversation states. It references external services such as SubconversationService and core conversation modules, indicating dependencies on other internal components and third-party libraries. The code facilitates handling of conversation data structures and state management.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\nsrc/script/calling/CallingEpochCache.ts:20:101    - Unknown word (Subconversation) -- SubconversationService/SubconversationService';\nsrc/script/calling/CallingEpochCache.ts:20:48     - Unknown word (wireapp)         -- sationEpochInfoMember} from '@wireapp/core/lib/conversation\nsrc/script/calling/CallingEpochCache.ts:20:78     - Unknown word (Subconversation) -- core/lib/conversation/SubconversationService/SubconversationService\nsrc/script/calling/CallingEpochCache.ts:20:9      - Unknown word (Subconversation) -- import {SubconversationEpochInfoMember} from\nsrc/script/calling/CallingEpochCache.ts:25:13     - Unknown word (convid)          -- clients: {convid: string; clients: Subconversa\nsrc/script/calling/CallingEpochCache.ts:25:38     - Unknown word (Subconversation) -- convid: string; clients: SubconversationEpochInfoMember[]};\n```\n\n----------------------------------------\n\nTITLE: Support automatic creation of cspell-tools.config.yaml\nDESCRIPTION: This bug fix adds support for the automatic creation of a `cspell-tools.config.yaml` file. This enables cspell tools to create the configuration file, which simplifies setup and configuration.  This likely changes how cspell-tools initializes and configures.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/CHANGELOG.md#_snippet_8\n\nLANGUAGE: git\nCODE:\n```\nsupport automatic creation of `cspell-tools.config.yaml` ([#4631](https://github.com/streetsidesoftware/cspell/issues/4631)) ([f9fea67](https://github.com/streetsidesoftware/cspell/commit/f9fea67fc5aa8b6e4dcdc8b1bd9af8db2e22e62b))\n```\n\n----------------------------------------\n\nTITLE: Patch for Focusable Twoslash Code Blocks\nDESCRIPTION: This code patch adjusts the behavior or attributes of Twoslash code blocks to make them focusable, improving accessibility or interactivity. It is part of patch files applied to third-party modules, requiring understanding of patching mechanisms and dependencies. The patch modifies properties related to focusability of code snippets.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/microsoft/TypeScript-Website/snapshot.txt#_snippet_7\n\nLANGUAGE: Patch\nCODE:\n```\npatches/gatsby-remark-shiki-twoslash@3.0.38.patch:17:49     - Unknown word (focusable)  -- twoslash code blocks focusable; not needed in modern\n```\n\n----------------------------------------\n\nTITLE: Unknown HTML Elements and Attributes in DOM Validator\nDESCRIPTION: A collection of HTML element and attribute names flagged as unknown by CSpell. These are valid HTML terms used in the HTML5NodeValidator class.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/dart-lang/sdk/snapshot.txt#_snippet_11\n\nLANGUAGE: Dart\nCODE:\n```\n'*::itemprop',\n'*::itemref',\n'*::itemscope',\n'A::accesskey',\n'A::tabindex',\n'AREA::nohref',\n'AUDIO::mediagroup',\n'BODY::alink',\n'BODY::bgcolor',\n'BODY::vlink',\n'COL::charoff',\n'FORM::novalidate',\n'HR::noshade',\n'IFRAME::marginheight',\n'IFRAME::marginwidth',\n'IMG::hspace',\n'IMG::ismap',\n'IMG::usemap',\n'IMG::vspace',\n'INPUT::inputmode',\n'INPUT::maxlength',\n'KEYGEN::disabled',\n'OBJECT::typemustmatch',\n'TABLE::cellspacing',\n'TD::rowspan'\n```\n\n----------------------------------------\n\nTITLE: Defining Backup Header Constants in BackUpHeader.ts\nDESCRIPTION: This snippet sets up constants used for backup header format, encryption parameters, and cryptographic salt/timelimits. It imports sodium for cryptography and defines format strings and numeric limits. Key parameters such as WBUX format string, OPSLIMIT, MEMLIMIT, and SALTBYTES are established to configure backup encryption and hashing processes, crucial for data integrity and security.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport sodium from 'libsodium-wrappers';\nconst SALTBYTES = sodium.crypto_pwhash_SALTBYTES;\nconst OPSLIMIT = 4; // Example value\nconst MEMLIMIT = 33554432; // Example value\nconst WBUX = 'WBUX';\n// Constants for backup format and cryptographic limits\n```\n\n----------------------------------------\n\nTITLE: Using Yaf View Interface & Simple Methods\nDESCRIPTION: This snippet highlights Yaf View Interface and Simple methods for handling view rendering. It demonstrates the use of `assign`, `display`, `getScriptPath`, `render`, `setScriptPath` for the interface, alongside Simple's version for assigning, clearing, and evaluating templates.  The purpose is to manage and render views within a Yaf application, using the Yaf extension.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/php.txt#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nYaf_View_Interface::assign\nYaf_View_Interface::display\nYaf_View_Interface::getScriptPath\nYaf_View_Interface::render\nYaf_View_Interface::setScriptPath\nYaf_View_Simple::assign\nYaf_View_Simple::assignRef\nYaf_View_Simple::clear\nYaf_View_Simple::display\nYaf_View_Simple::eval\nYaf_View_Simple::getScriptPath\nYaf_View_Simple::render\nYaf_View_Simple::setScriptPath\nYaf_View_Simple::__construct\nYaf_View_Simple::__get\nYaf_View_Simple::__isset\nYaf_View_Simple::__set\n```\n\n----------------------------------------\n\nTITLE: Resolving relative imports\nDESCRIPTION: This bug fix addresses the issue of relative imports not being resolved when they do not start with `./` or `../`.  This ensures proper module resolution within the cspell project.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-strong-weak-map/test-cspell-strong-weak-map/CHANGELOG.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nResolve relative imports without a leading `./` or `../`.  ([#5035](https://github.com/streetsidesoftware/cspell/issues/5035)) ([a28393b](https://github.com/streetsidesoftware/cspell/commit/a28393b30733b68e8b726c352e277ac4b5a0659d))\n```\n\n----------------------------------------\n\nTITLE: Google Cloud Service Names in Proto Dependencies\nDESCRIPTION: Service and resource names from Google Cloud APIs referenced in protocol buffer dependency files. These include specialized services like 'aiplatform', 'backupdr', 'datacatalog', and their specific components.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/googleapis/google-cloud-cpp/snapshot.txt#_snippet_8\n\nLANGUAGE: Text\nCODE:\n```\ncloud/aiplatform/v1:genai_tuning_service.proto\nartifactregistry/v1:vpcsc_config.proto\nbackupdr/logging/v1:reportlog.proto\ngoogle/cloud/backupdr/v1:backupplan.proto\n```\n\n----------------------------------------\n\nTITLE: FastCGI Client Configuration and Dependencies\nDESCRIPTION: This snippet discusses FastCGI client setup and dependency definitions. The main functionality involves managing connections. Dependencies include the `caddyhttp` package, and the output is typically an HTTP response or error related to reverse proxy functionality.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_58\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddyhttp/reverseproxy/fastcgi/client.go:24:9      - Unknown word (fastcgi)    -- package fastcgi\n```\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddyhttp/reverseproxy/fastcgi/client.go:45:14     - Unknown word (caddyserver) -- \"github.com/caddyserver/caddy/v2/modules/caddyhttp\n```\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddyhttp/reverseproxy/fastcgi/client.go:45:43     - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp\"\n```\n\n----------------------------------------\n\nTITLE: Describing State of E2EI\nDESCRIPTION: This snippet describes the state of the E2EI (end-to-end encryption). This is likely a description comment and part of the testing process. The unknown word `idicates` is the cspell error.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_101\n\nLANGUAGE: typescript\nCODE:\n```\ndescribe('idicates the state of the e2ei\n```\n\n----------------------------------------\n\nTITLE: Defining Editor Token Style (TypeScript)\nDESCRIPTION: Assigns a CSS class name 'editor-tokenAtrule' to the 'atrule' (misspelled 'Atrule'/'atrule') token type within the RichTextEditor theme configuration.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\natrule: 'editor-tokenAtrule',\n```\n\nLANGUAGE: typescript\nCODE:\n```\natrule: 'editor-tokenAtrule\n```\n\n----------------------------------------\n\nTITLE: LaTeX TikZ Coordinate Definitions\nDESCRIPTION: Code snippets showing coordinate and point definitions in TikZ. These examples define specific points for mathematical diagrams and functions.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/MartinThoma/LaTeX-examples/snapshot.txt#_snippet_15\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\coordinate (plotAcoord) at (axis cs:70,0.0\n```\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\coordinate (plotBcoord) at (axis cs:70,0.0\n```\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\tkzDefPoint(1.5,3){Phelper}\n```\n\n----------------------------------------\n\nTITLE: Handling of System Messages and Error Logging in C\nDESCRIPTION: Uses system message flags 'HDIES' and error handling logs like 'ERRSEL' to detect and report issues during network message processing, improving robustness in network operations.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_64\n\nLANGUAGE: C\nCODE:\n```\nSHNETMNU, ERRSEL, \"HDIES\"\n```\n\n----------------------------------------\n\nTITLE: Using Miscellaneous PHP Functions\nDESCRIPTION: This code snippet contains miscellaneous PHP functions, like `z`, the PHP version string, guid, and zend thread id which give information about the environment the code is running in. These don't require any specific extension, but might depend on the PHP installation.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/php.txt#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\nz\nzend_logo_guid\nzend_thread_id\nzend_version\n```\n\n----------------------------------------\n\nTITLE: MD5 Hash Function in Python\nDESCRIPTION: Shows how to compute MD5 hashes for given data, with dependencies on the hashlib library. Inputs include byte strings; outputs are hash strings. Used for data integrity checks and cryptographic applications.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_23\n\nLANGUAGE: Python\nCODE:\n```\nhashes/md5.py:30:38     - Unknown word (abcdfghijklmnopqrstuvw) -- little_endian(b'1234567890abcdfghijklmnopqrstuvw')\n```\n\nLANGUAGE: Python\nCODE:\n```\nhashes/md5.py:318:54    - Unknown word (Üñîçø)                  -- letters.encode(\"utf-8\"), \"Üñîçø∂é\".encode(\"utf-8\"),\n```\n\nLANGUAGE: Python\nCODE:\n```\nhashes/md5.py:31:25     - Unknown word (abcdfg)                 -- b'pqrstuvwhijklmno90abcdfg12345678'\n```\n\n----------------------------------------\n\nTITLE: Defining Blender Operator Properties for SPM Export in Python\nDESCRIPTION: This snippet defines boolean properties for a Blender operator related to exporting SPM files. Properties such as 'localsp' and 'applymodifiers' are set up with bpy.props.BoolProperty to let users configure export behavior (e.g., using local space coordinates or applying modifiers). The snippet depends on Blender's bpy module and is used inside an operator class. Inputs are user selections; outputs control export pipeline behavior.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/AdaDoom3/AdaDoom3/snapshot.txt#_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\nlocalsp = bpy.props.BoolProperty(name=\"Local Space\", description=\"Use local-space coordinates\")\napplymodifiers = bpy.props.BoolProperty(name=\"Apply Modifiers\", description=\"Apply modifiers before export\")\n```\n\n----------------------------------------\n\nTITLE: Protocol Buffer Typo Detections\nDESCRIPTION: Collection of unknown words flagged by CSpell in protocol buffer files, mainly in Google Cloud Compute API definitions. Many are valid technical terms like LACP, RPKI, and networking terminology.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/googleapis/google-cloud-cpp/snapshot.txt#_snippet_9\n\nLANGUAGE: proto\nCODE:\n```\n// ON: Autocaling is fully enabled.\n// describing it will be storred in the\n// compute.instancegroups.addInstances/removeInstances\n// OS_UNPROVISIONED: An Interconnect that\n// Customer-side demarc ID for this circuit\njson_name = \"customerDemarcId\"];\nBUNDLE_AGGREGATION_TYPE_LACP: LACP is enabled.\nnectDiagnosticsLinkLACPStatus lacp_status = 4\n// authorized to request a crossconnect.\n// value of NSRC_GOOGLE has been deprecated\n// values: - BPS_50M: 50 Mbit/s - BPS_100M: 100 Mbit\nAttachment. Partners may customise\n// router subinterface for this interconnect\n// Ashburn-DC1).\n// [Output Only] The peeringdb identifier for this\n// with a netfac type in peeringdb).\n```\n\n----------------------------------------\n\nTITLE: Configuring languageSettings Array in cspell JSON\nDESCRIPTION: Defines language-specific settings using an array of objects for cspell configuration. Each object specifies languageId, locale, ignoreRegExpList, dictionaries, and dictionaryDefinitions to tailor spell checking behavior based on programming language and locale. Dependencies include the structure of cspell.json and the meaning of each property.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/Configuration/language-settings.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n    \"languageSettings\": [\n        {\n            // VSCode languageId. i.e. typescript, java, go, cpp, javascript, markdown, latex\n            // * will match against any file type.\n            \"languageId\": \"c,cpp\",\n            // Language locale. i.e. en-US, de-AT, or ru. * will match all locales.\n            // Multiple locales can be specified like: \"en, en-US\" to match both English and English US.\n            \"locale\": \"*\",\n            // To exclude patterns, add them to \"ignoreRegExpList\"\n            \"ignoreRegExpList\": [\n                \"/#include.*/\"\n            ],\n            // List of dictionaries to enable by name in `dictionaryDefinitions`\n            \"dictionaries\": [\"cpp\"],\n            // Dictionary definitions can also be supplied here. They are only used if \"languageId\" and \"locale\" match.\n            \"dictionaryDefinitions\": []\n        }\n    ]\n```\n\n----------------------------------------\n\nTITLE: Emoji Tag Definition (TypeScript)\nDESCRIPTION: Defines tags associated with an emoji, including 'happy' and potentially 'haha', within inline replacement data.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\ntags: ['happy', 'haha'],\n```\n\n----------------------------------------\n\nTITLE: Error Handling using caddyhttp Package\nDESCRIPTION: This snippet appears within the `copyresponse.go` file, and involves usage of the `caddyhttp.Error` function. It likely indicates an error handling mechanism where HTTP status codes are set based on certain conditions. The dependencies are `caddyhttp` package and the HTTP package to define status codes.  The output would be an HTTP error status code, and input would be the request and a caddyhttp handler.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_55\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddyhttp/reverseproxy/copyresponse.go:64:10     - Unknown word (caddyhttp)   -- return caddyhttp.Error(http.StatusInternalServ\n```\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddyhttp/reverseproxy/copyresponse.go:73:11     - Unknown word (caddyhttp)   -- return caddyhttp.Error(http.StatusInternalServ\n```\n\n----------------------------------------\n\nTITLE: TypeScript Localization Utility for String Translation\nDESCRIPTION: Provides type definitions and utility functions for translating string identifiers into localized strings, including managing substitutions and ensuring safe HTML rendering for external links using rel attributes.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_127\n\nLANGUAGE: TypeScript\nCODE:\n```\nsrc/script/util/LocalizerUtil/LocalizerUtil.ts\n```\n\n----------------------------------------\n\nTITLE: Testing float.fromhex() in Python\nDESCRIPTION: Tests the `float.fromhex()` method to convert a hexadecimal string representation to its corresponding float value. Uses a helper function `identical` (presumably defined elsewhere) for comparison.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_36\n\nLANGUAGE: python\nCODE:\n```\n# Assuming 'identical' is defined elsewhere for float comparison\nidentical(fromHex(\"0xbep0\"), 190.0)\n```\n\n----------------------------------------\n\nTITLE: Function Declaration with Unknown Word - C\nDESCRIPTION: This snippet declares a function 'getchanname'. The word 'getchanname' is flagged as an unknown word, indicating a potential misspelling or non-standard naming. It likely retrieves the name of a channel.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_77\n\nLANGUAGE: C\nCODE:\n```\ngetchanname (char *dev, int msg\n```\n\n----------------------------------------\n\nTITLE: String Formatting with Unknown Word - C\nDESCRIPTION: This snippet uses string formatting involving 'ONLINEDIR'. The word 'ONLINEDIR' is flagged as an unknown word. It likely represents the directory for online user data.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_87\n\nLANGUAGE: C\nCODE:\n```\nmkfname (ONLINEDIR));\n```\n\n----------------------------------------\n\nTITLE: CMake Function and Control Flow Syntax\nDESCRIPTION: CMake code snippets showing function definition syntax and control flow statements including endfunction and endforeach directives.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/googleapis/google-cloud-cpp/snapshot.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"${name}\" PRIVATE ${ARGN})\nendfunction ()\n\nendforeach ()\n```\n\n----------------------------------------\n\nTITLE: Zsh Compinit Command Example (Comment/String)\nDESCRIPTION: A comment or string literal shows an example shell command involving `autoload -U compinit; compinit`. This is related to Zsh shell completion setup, likely referenced within documentation or help text for a CLI command.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_34\n\nLANGUAGE: Go\nCODE:\n```\n// $ echo \"autoload -U compinit; compinit\" >> ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Offline Mail Attachments Management in C\nDESCRIPTION: Manages attachment processing in offline mail systems with constants like 'YNAOPM' for attachment control, supporting attachment inclusion/exclusion logic.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_65\n\nLANGUAGE: C\nCODE:\n```\n} else if (strchr (\"YNAOPM\", c))\n```\n\n----------------------------------------\n\nTITLE: CSpell Configuration Arguments for aspnetboilerplate Repository\nDESCRIPTION: The command-line arguments used to run CSpell against the aspnetboilerplate repository. It includes file patterns to check and directories to exclude from the check.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/aspnetboilerplate/aspnetboilerplate/snapshot.txt#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\"**/*.{md,cs,cshtml}\",\"--exclude=wwwroot\",\"--exclude=**/*SampleApp.Tests/Web*\"]\n```\n\n----------------------------------------\n\nTITLE: Using findMatchingFileTypes Function in TypeScript\nDESCRIPTION: Example demonstrating how to use the findMatchingFileTypes function to determine the type of a file based on its filename. The example shows that 'code.js' is identified as a JavaScript file.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-filetypes/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { findMatchingFileTypes } from '@cspell/filetypes';\n\nconsole.log(findMatchingFileTypes('code.js')); // outputs: [ 'javascript' ]\n```\n\n----------------------------------------\n\nTITLE: Importing Modules from wireapp and other Dependencies\nDESCRIPTION: This snippet is part of an import statement in a TypeScript or React component file. It imports modules from the `@wireapp` and other dependencies such as `tsyringe`, `react-ui-kit` and `webapp-events`. The import statements bring in necessary modules to use various functionalities related to the UI and application logic.  Dependencies includes `@wireapp/commons`, `@wireapp/api-client`, `@wireapp/react-ui-kit`, `tsyringe`, and `@wireapp/webapp-events`. There are some unknown words identified that are associated with `@wireapp` modules.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_91\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Runtime} from '@wireapp/commons';\n```\n\n----------------------------------------\n\nTITLE: HTML entity definitions in Svelte compiler\nDESCRIPTION: Multiple entity definitions in the Svelte compiler entities utility file, mapping entity names to their corresponding Unicode code points. These entities include mathematical symbols, special characters, and diacritical marks.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/sveltejs/svelte/snapshot.txt#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\n'subsub;': 10965,\n'subsup;': 10963,\n'succeq;': 10928,\n'supdot;': 10942,\n'supset;': 8835,\n'supsim;': 10952,\n'supsub;': 10964,\n'supsup;': 10966,\n'swarhk;': 10534,\n'swnwar;': 10538,\n```\n\n----------------------------------------\n\nTITLE: Implementing Response Matching Logic in Go\nDESCRIPTION: This code defines sorting logic for response preferences, comparing 'q' values and handling response matcher configurations. It employs the 'sort.Slice' function to order preferences and uses the 'math.Abs' function for numerical comparison, facilitating nuanced response selection based on defined priorities within the Caddy server.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_48\n\nLANGUAGE: Go\nCODE:\n```\n// sort.Slice(prefs, func(i, j int) bool {\n// Implementation code here\n}\n```\n\n----------------------------------------\n\nTITLE: Function Declaration with Unknown Word - C\nDESCRIPTION: This snippet calls the function `bbsdcommand` with the first argument `nchang`. The word 'nchang' is flagged as an unknown word. It probably tells the bbs daemon to change something.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_92\n\nLANGUAGE: C\nCODE:\n```\nbbsdcommand(\"nchang\",channels[i].ttyname\n```\n\n----------------------------------------\n\nTITLE: Processing Unknown Words and Variables in usercleanup.c\nDESCRIPTION: This snippet lists undefined or unknown identifiers such as variables, macros, and function calls used across usercleanup.c, indicating areas requiring further definition or documentation. It reflects internal logic related to user account cleanup processes, including file operations, user statistics, and class comparisons.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_29\n\nLANGUAGE: C\nCODE:\n```\nint exemptstats = 0;\nauditor_setfile (mkfname (CLNUPAUDITFILE));\nif (uacc->timetdy) {\n printf (\"TIMETDAY: %s: %d min(s)\\n\", uacc->timetdy); }\nif (strcmp (uacc->tempclss, uacc->curclss)) {\n // Comparison logic\n}\n// Other variable references and function calls indicating internal data management across user cleanup\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Python Spell Checker Utility Function\nDESCRIPTION: This code snippet initializes a spell checker utility in Python, setting up necessary imports and configurations for spell checking tasks. It depends on external libraries like 'pyspellchecker' and is used for validating spelling within text documents. The function accepts input text and returns spelling suggestions or corrections.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-eslint-plugin/test-cspell-eslint-plugin-v9/words.txt#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport spellchecker\n\ndef check_spelling(text):\n    checker = spellchecker.SpellChecker()\n    words = text.split()\n    misspelled = checker.unknown(words)\n    corrections = {}\n    for word in misspelled:\n        corrections[word] = checker.correction(word)\n    return corrections\n```\n\n----------------------------------------\n\nTITLE: Setting Filesharing Prop in InputBarControls (TypeScript)\nDESCRIPTION: Sets the 'disableFilesharing' prop based on the negated value of 'isFileSharingSendingEnabled' in the InputBarControls component.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\ndisableFilesharing={!isFileSharingSendingEnabled\n```\n\n----------------------------------------\n\nTITLE: Util.inspect Options\nDESCRIPTION: This is a sample of `util.inspect` options settings. It defines a set of options that can be applied to customize the output of the `util.inspect` function in Node.js.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/node.txt#_snippet_37\n\nLANGUAGE: text\nCODE:\n```\n{ depth: 0, colors: false, compact: 3 }\n```\n\n----------------------------------------\n\nTITLE: Delay splitting _ till later\nDESCRIPTION: This bug fix delays the splitting of words at the `_` character until later in the process. This change affects how words are split.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-strong-weak-map/test-cspell-strong-weak-map/CHANGELOG.md#_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n(cspell-tools) Delay splitting _ till later ([#4309](https://github.com/streetsidesoftware/cspell/issues/4309)) ([0e517d1](https://github.com/streetsidesoftware/cspell/commit/0e517d13a6611e4d8a4f826a7d8d75352f5be4df))\n```\n\n----------------------------------------\n\nTITLE: Calculating Tangent and Bitangent Vectors for Mesh UVs in Python\nDESCRIPTION: This snippet calculates tangent and bitangent vectors for mesh vertices using Blender's mathutils Vector class and mesh loop data. It reads UV coordinates and bitangent signs from mesh loops to compute correct tangent space necessary for shading calculations. Dependencies include Blender's mathutils and mesh structure with loops. Inputs are mesh loops with tangent, bitangent_sign, and UV data; outputs are tangent vectors with proper orientation for shaders.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/AdaDoom3/AdaDoom3/snapshot.txt#_snippet_22\n\nLANGUAGE: Python\nCODE:\n```\nloc_tan = mathutils.Vector(mesh.loops[li].tangent)\nbitangent_sign = mesh.loops[li].bitangent_sign\n# Use loc_tan and bitangent_sign together to calculate bitangent\n```\n\n----------------------------------------\n\nTITLE: Macro Definitions for Constants in mbk_account.h\nDESCRIPTION: This snippet contains macro definitions for various numeric constants used for configuration and identification within the mbk_account module. These constants specify word identifiers, flags, time intervals, and control codes, aiding in managing account-related features.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_8\n\nLANGUAGE: C\nCODE:\n```\n#define CTWHO 120\n```\n\nLANGUAGE: C\nCODE:\n```\n#define CTNSELF 121\n```\n\nLANGUAGE: C\nCODE:\n```\n#define SAFPSW 5\n```\n\nLANGUAGE: C\nCODE:\n```\n#define CTWARN 123\n```\n\nLANGUAGE: C\nCODE:\n```\n#define CTCONF 124\n```\n\nLANGUAGE: C\nCODE:\n```\n#define CTCQUE 125\n```\n\nLANGUAGE: C\nCODE:\n```\n#define ACCDEL 127\n```\n\nLANGUAGE: C\nCODE:\n```\n#define NOENOT 128\n```\n\nLANGUAGE: C\nCODE:\n```\n#define CXFOK 129\n```\n\nLANGUAGE: C\nCODE:\n```\n#define CXFINJ 130\n```\n\nLANGUAGE: C\nCODE:\n```\n#define CXFABO 132\n```\n\nLANGUAGE: C\nCODE:\n```\n#define STRPSS 6\n```\n\nLANGUAGE: C\nCODE:\n```\n#define MINPLN 7\n```\n\nLANGUAGE: C\nCODE:\n```\n#define MKPSWD 8\n```\n\nLANGUAGE: C\nCODE:\n```\n#define MINSNG 150\n```\n\nLANGUAGE: C\nCODE:\n```\n#define MINPLR 151\n```\n\nLANGUAGE: C\nCODE:\n```\n#define TIMSNG 152\n```\n\nLANGUAGE: C\nCODE:\n```\n#define TIMPLR 153\n```\n\nLANGUAGE: C\nCODE:\n```\n#define CRDSNG 154\n```\n\nLANGUAGE: C\nCODE:\n```\n#define CRDPLR 155\n```\n\nLANGUAGE: C\nCODE:\n```\n#define FILSNG 156\n```\n\nLANGUAGE: C\nCODE:\n```\n#define FLIPLR 157\n```\n\nLANGUAGE: C\nCODE:\n```\n#define MNTHLY 160\n```\n\nLANGUAGE: C\nCODE:\n```\n#define OPSWHO 161\n```\n\nLANGUAGE: C\nCODE:\n```\n#define OUIDERR 162\n```\n\nLANGUAGE: C\nCODE:\n```\n#define PSWOTH 163\n```\n\nLANGUAGE: C\nCODE:\n```\n#define LIPSKO 10\n```\n\nLANGUAGE: C\nCODE:\n```\n#define LOGNAM 11\n```\n\nLANGUAGE: C\nCODE:\n```\n#define LOGADR 13\n```\n\nLANGUAGE: C\nCODE:\n```\n#define LOGPHN 14\n```\n\nLANGUAGE: C\nCODE:\n```\n#define LOGSEX 16\n```\n\nLANGUAGE: C\nCODE:\n```\n#define DEMCXF 18\n```\n\nLANGUAGE: C\nCODE:\n```\n#define MINCXF 19\n```\n\nLANGUAGE: C\nCODE:\n```\n#define MAXCXF 20\n```\n\nLANGUAGE: C\nCODE:\n```\n#define DAYSNG 21\n```\n\nLANGUAGE: C\nCODE:\n```\n#define DAYPLR 22\n```\n\nLANGUAGE: C\nCODE:\n```\n#define PASSEX 25\n```\n\nLANGUAGE: C\nCODE:\n```\n#define ACCMNU 26\n```\n\nLANGUAGE: C\nCODE:\n```\n#define VSHMENU 27\n```\n\nLANGUAGE: C\nCODE:\n```\n#define SHMENU 28\n```\n\nLANGUAGE: C\nCODE:\n```\n#define ACCSMNU 29\n```\n\nLANGUAGE: C\nCODE:\n```\n#define SHSMENU 30\n```\n\nLANGUAGE: C\nCODE:\n```\n#define PASSXP 34\n```\n\nLANGUAGE: C\nCODE:\n```\n#define PXPDAYS 35\n```\n\nLANGUAGE: C\nCODE:\n```\n#define ACCVT 37\n```\n\nLANGUAGE: C\nCODE:\n```\n#define SEXM 38\n```\n\nLANGUAGE: C\nCODE:\n```\n#define SEXF 39\n```\n\nLANGUAGE: C\nCODE:\n```\n#define ACCLT 48\n```\n\nLANGUAGE: C\nCODE:\n```\n#define NEWUSN 49\n```\n\nLANGUAGE: C\nCODE:\n```\n#define NEWADR1 51\n```\n\nLANGUAGE: C\nCODE:\n```\n#define NEWPHN 53\n```\n\nLANGUAGE: C\nCODE:\n```\n#define NEWSEX 55\n```\n\nLANGUAGE: C\nCODE:\n```\n#define EDITOK 58\n```\n\nLANGUAGE: C\nCODE:\n```\n#define CPSERR 60\n```\n\nLANGUAGE: C\nCODE:\n```\n#define PREPSW 61\n```\n\nLANGUAGE: C\nCODE:\n```\n#define RECPSW 62\n```\n\nLANGUAGE: C\nCODE:\n```\n#define FRCPSW 63\n```\n\nLANGUAGE: C\nCODE:\n```\n#define GPSWORD 64\n```\n\nLANGUAGE: C\nCODE:\n```\n#define GPSWAGN 65\n```\n\nLANGUAGE: C\nCODE:\n```\n#define BADPSW1 66\n```\n\nLANGUAGE: C\nCODE:\n```\n#define PSWEPI 71\n```\n\nLANGUAGE: C\nCODE:\n```\n#define PSWKO 72\n```\n\nLANGUAGE: C\nCODE:\n```\n#define PRFVT 73\n```\n\nLANGUAGE: C\nCODE:\n```\n#define ANSON 74\n```\n\nLANGUAGE: C\nCODE:\n```\n#define ANSOFF 75\n```\n\nLANGUAGE: C\nCODE:\n```\n#define ANSDEF 76\n```\n\nLANGUAGE: C\nCODE:\n```\n#define ANSASK 77\n```\n\nLANGUAGE: C\nCODE:\n```\n#define TRDEF 88\n```\n\nLANGUAGE: C\nCODE:\n```\n#define TRASK 89\n```\n\nLANGUAGE: C\nCODE:\n```\n#define XFKEY 2\n```\n\n----------------------------------------\n\nTITLE: Conditional Expression for Domain Type in JavaScript\nDESCRIPTION: Example of a conditional (ternary) expression that returns different domain type strings based on whether the domain includes a colon character.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/eslint/eslint/snapshot.txt#_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\ndomain.includes(\":\") ? \"complexdomain\" : \"simpledomain\"\n```\n\n----------------------------------------\n\nTITLE: Testing Data Structure for Calling Epoch Cache in TypeScript\nDESCRIPTION: This snippet contains test cases that set up mock data representing clients, conversations, and secret keys for the CallingEpochCache component. It verifies the handling of nested client data, subconversation states, and cache behaviors, ensuring the cache correctly manages different call scenarios. Dependencies include TypeScript test frameworks and mock data structures.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\nsrc/script/calling/CallingEpochCache.test.ts:28:17     - Unknown word (convid)     -- clients: {convid: '12345', clients:\nsrc/script/calling/CallingEpochCache.test.ts:28:59     - Unknown word (clientid)   -- clients: [{userid: '56', clientid: '561', in_subconv:\nsrc/script/calling/CallingEpochCache.test.ts:28:79     - Unknown word (subconv)    -- clientid: '561', in_subconv: true}]},\nsrc/script/calling/CallingEpochCache.test.ts:29:19     - Unknown word (xbnbvzfufzuewz) -- secretKey: 'xbnbvzfufzuewz',\nsrc/script/calling/CallingEpochCache.test.ts:35:9      - Unknown word (convid)         -- convid: '12345',\nsrc/script/calling/CallingEpochCache.test.ts:37:26     - Unknown word (clientid)       -- {userid: '56', clientid: '561', in_subconv:\nsrc/script/calling/CallingEpochCache.test.ts:37:46     - Unknown word (subconv)        -- clientid: '561', in_subconv: false},\nsrc/script/calling/CallingEpochCache.test.ts:38:26     - Unknown word (clientid)       -- {userid: '44', clientid: '441', in_subconv:\nsrc/script/calling/CallingEpochCache.test.ts:38:46     - Unknown word (subconv)        -- clientid: '441', in_subconv: true},\nsrc/script/calling/CallingEpochCache.test.ts:41:19     - Unknown word (abcdrsrsrsr)    -- secretKey: 'abcdrsrsrsr',\nsrc/script/calling/CallingEpochCache.test.ts:46:17     - Unknown word (convid)         -- clients: {convid: '12345', clients:\nsrc/script/calling/CallingEpochCache.test.ts:46:59     - Unknown word (clientid)       -- clients: [{userid: '56', clientid: '561', in_subconv:\nsrc/script/calling/CallingEpochCache.test.ts:46:79     - Unknown word (subconv)        -- clientid: '561', in_subconv: true}]},\nsrc/script/calling/CallingEpochCache.test.ts:47:19     - Unknown word (dsdsdsderer)    -- secretKey: 'dsdsdsderer',\nsrc/script/calling/CallingEpochCache.test.ts:84:11     - Unknown word (convid)         -- convid: '12345',\nsrc/script/calling/CallingEpochCache.test.ts:86:28     - Unknown word (clientid)       -- {userid: '56', clientid: '561', in_subconv:\nsrc/script/calling/CallingEpochCache.test.ts:86:48     - Unknown word (subconv)        -- clientid: '561', in_subconv: false},\nsrc/script/calling/CallingEpochCache.test.ts:90:21     - Unknown word (dssdgsgsdgsdds) -- secretKey: 'dssdgsgsdgsdds',\n```\n\n----------------------------------------\n\nTITLE: Importing TIME_IN_MILLIS Constant in Test (TypeScript)\nDESCRIPTION: Imports the `TIME_IN_MILLIS` constant object from a utility module 'Util/TimeUtil' within the MessageTimerButton test file.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TIME_IN_MILLIS} from 'Util/TimeUtil\n```\n\n----------------------------------------\n\nTITLE: Game Operations and Management in adventure.c\nDESCRIPTION: This snippet covers variable definitions, macro setup, and function declarations related to game management within adventure.c, including listing games, game comparison, and game-specific directory paths. It supports game listing, selection, and management functionalities typical in adventure game modules.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_31\n\nLANGUAGE: C\nCODE:\n```\nchar *savedgame;\nint numgames = 0;\n#define GAMEDIR BBSDATADIR \"/adventure\"\n#define GAMEINDEXFILE GAMEDIR \"/00INDEX\"\n\n// Functions like listgames() and game comparison logic\n\n```\n\n----------------------------------------\n\nTITLE: Function Declaration with Unknown Word - C\nDESCRIPTION: This snippet declares a function 'beginasap'. The word 'beginasap' is flagged as an unknown word. It likely starts an event immediately.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_91\n\nLANGUAGE: C\nCODE:\n```\nbeginasap()\n```\n\n----------------------------------------\n\nTITLE: TypeScript Utility Module for Debugging in CSpell\nDESCRIPTION: A utility module for debugging in the CSpell project, importing various external libraries like Dexie, keyboardjs, and @wireapp API client lib for connection, conversation, events, and notifications. It likely provides debugging functions, error handling, and environment setup using these dependencies.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_120\n\nLANGUAGE: TypeScript\nCODE:\n```\nsrc/script/util/DebugUtil.ts\n```\n\n----------------------------------------\n\nTITLE: TypeScript In-Document Settings Model\nDESCRIPTION: Defines the structure of in-document settings, managing contextual configurations for specific files or sections.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_33\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* InDocSettings model */\n```\n\n----------------------------------------\n\nTITLE: Network Synchronization Message Targeting in C\nDESCRIPTION: Sets the target club name for synchronization requests via 'strcpy', facilitating distributed message and club updates.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_53\n\nLANGUAGE: C\nCODE:\n```\nstrcpy (msgreq.targetclub, club);\n```\n\n----------------------------------------\n\nTITLE: Automated Linear Algebra Testing in Python\nDESCRIPTION: Provides tests for cofactor calculations and matrix properties, essential for verifying correctness in linear algebra implementations. Inputs are matrices; outputs are test assertions.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_35\n\nLANGUAGE: Python\nCODE:\n```\nlinear_algebra/src/test_linear_algebra.py:150:9     - Unknown word (cofactors)  -- cofactors = [[-3, 14, -10], [\n```\n\n----------------------------------------\n\nTITLE: Removing markdown description from types\nDESCRIPTION: This bug fix removes `[@markdown](https://github.com/markdown)Description` from the types definition. The purpose of this change is to clean up the type definitions.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-strong-weak-map/test-cspell-strong-weak-map/CHANGELOG.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nRemove `[@markdown](https://github.com/markdown)Description` from types ([#4818](https://github.com/streetsidesoftware/cspell/issues/4818)) ([3ba8eed](https://github.com/streetsidesoftware/cspell/commit/3ba8eed8588aafa3dcb401acb96e4fdc82811d24))\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for `cspell trace` Command\nDESCRIPTION: Shows the command-line usage and available options for the `cspell trace` command. Options include specifying a configuration file (`-c`), setting locales (`--locale`), forcing a language ID (`--languageId`), controlling color output (`--no-color`, `--color`), and displaying help (`-h`).\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/dictionaries/searching-dictionaries.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nUsage: cspell trace [options] <words...>\n\nTrace words\n  Search for words in the configuration and dictionaries.\n\nOptions:\n  -c, --config <cspell.json>  Configuration file to use.  By default cspell\n                              looks for cspell.json in the current directory.\n  --locale <locale>           Set language locales. i.e. \"en,fr\" for English\n                              and French, or \"en-GB\" for British English.\n  --languageId <language>     Force programming language for unknown\n                              extensions. i.e. \"php\" or \"scala\"\n  --no-color                  Turn off color.\n  --color                     Force color\n  -h, --help                  display help for command\n```\n\n----------------------------------------\n\nTITLE: Testing str.splitlines() with various line breaks in Python\nDESCRIPTION: Asserts the behavior of the `str.splitlines()` method on a complex string containing various standard and non-standard line break characters (\\x1c, \\x1d, \\x1e, \\x85, \\u2028, \\u2029, \\r\\n). Tests both `splitlines()` (without keepends) and `splitlines(True)` (with keepends).\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_41\n\nLANGUAGE: python\nCODE:\n```\ncomplex_string = '\\x0cHallo\\x1cHELLO\\x1dhoho\\x1ehaha\\x85another\\u2028yetanother\\u2029last\\r\\n.'\n\nassert complex_string.splitlines() == ['\\x0cHallo', 'HELLO', 'hoho', 'haha', 'another', 'yetanother', 'last', '.']\n\nassert complex_string.splitlines(True) == ['\\x0cHallo\\x1c', 'HELLO\\x1d', 'hoho\\x1e', 'haha\\x85', 'another\\u2028', 'yetanother\\u2029', 'last\\r\\n', '.']\n```\n\n----------------------------------------\n\nTITLE: Package.json Name Configuration\nDESCRIPTION: Example showing the name field in a package.json file, which is used to identify the package in various contexts.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/eslint/eslint/snapshot.txt#_snippet_20\n\nLANGUAGE: JSON\nCODE:\n```\n\"name\": \"mypackage\",\n```\n\n----------------------------------------\n\nTITLE: Variable Declaration with Unknown Word - C\nDESCRIPTION: This snippet declares variable `perc`. The word 'perc' is flagged as unknown words and used in statistics calculations.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_116\n\nLANGUAGE: C\nCODE:\n```\nunsigned long d1, d2, d3, perc;\n```\n\n----------------------------------------\n\nTITLE: Importing TIME_IN_MILLIS Constant (TypeScript)\nDESCRIPTION: Imports the `TIME_IN_MILLIS` constant object from 'Util/TimeUtil' within the TypingIndicator index file.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TIME_IN_MILLIS} from 'Util/TimeUtil\n```\n\n----------------------------------------\n\nTITLE: JavaScript Function for Search Functionality using Zepto\nDESCRIPTION: This snippet defines a JavaScript function utilizing Zepto.js, a lightweight jQuery-compatible library, to perform actions like playing a sound using 'afplay' with specified volume. It requires Zepto.js library and a Node or browser environment for playback and DOM manipulation. Inputs include file path and volume, output is the execution of playing sound.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/microsoft/TypeScript-Website/snapshot.txt#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\npackages/typescriptlang-org/static/js/docsearch.js:2:16164   - Unknown word (Zepto)      -- function(window){var Zepto=function(){var undefined\n```\n\n----------------------------------------\n\nTITLE: DPLL Satisfiability Algorithm Overview in Python\nDESCRIPTION: Provides implementation and explanation for the DPLL algorithm, a complete method for checking propositional logic satisfiability, with references to CNF and recursive calls.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_63\n\nLANGUAGE: Python\nCODE:\n```\n4:33 - Unknown word (DPLL) -- Putnam-Logemann-Loveland (DPLL) algorithm is a complete\n```\n\nLANGUAGE: Python\nCODE:\n```\n5:35 - Unknown word (satisfiability) -- algorithm for deciding the satisfiability of propositional logic\n```\n\nLANGUAGE: Python\nCODE:\n```\n6:73 - Unknown word (Tisfiability) -- Conjunctive Normal Form SATisfiability\n```\n\n----------------------------------------\n\nTITLE: Network Club Synchronization Request Handling (C)\nDESCRIPTION: Sends requests to distribute club information using functions like 'distclub_request_header_1', managing club synchronization across networked BBS systems.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_52\n\nLANGUAGE: C\nCODE:\n```\nif ((result = distclub_request_header_1 (&bbs...\n```\n\n----------------------------------------\n\nTITLE: Club Listing and Directory Traversal in C\nDESCRIPTION: Processes club directory listings with flags like 'LISTCLUBS' and uses 'rsysselect' for directory selection, supporting system-level club management.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_59\n\nLANGUAGE: C\nCODE:\n```\ncase MODE_LISTCLUBS:\n rsysselect (const struct dirent ...\n```\n\n----------------------------------------\n\nTITLE: TypeScript: Giphy Extension and Messaging Texts\nDESCRIPTION: This snippet handles importing and utilizing Giphy related functions for embedding GIFs in messages, as well as translating or configuring message text templates with tags, supporting rich media message creation.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_79\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Giphy} from 'giphy';\nconst tag = t('extensionsGiphyRandom');\nconst textMessage = t('extensionsGiphyMessage', {tag: tag as string});\n```\n\n----------------------------------------\n\nTITLE: Audio Playback Function using 'afplay' Command\nDESCRIPTION: This JavaScript snippet defines a function that uses the 'afplay' command to play an audio file at a specified volume level, intended for use in environments that can run shell commands like Node.js scripts. Inputs are the file path and volume, while the output is executing the 'afplay' command with parameters.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/microsoft/TypeScript-Website/snapshot.txt#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nwatcher.js:194:40    - Unknown word (afplay)     -- (path, volume) => `afplay \\\"${path}\\\" -v ${volume}\n```\n\n----------------------------------------\n\nTITLE: TypeScript React Component Tests for Localizer Utility\nDESCRIPTION: Test cases for the React-based localization utility, verifying correct string translation with substitutions and proper text content rendering, ensuring localization functions work as intended.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_128\n\nLANGUAGE: TypeScript\nCODE:\n```\nsrc/script/util/LocalizerUtil/ReactLocalizerUtil.test.tsx\n```\n\n----------------------------------------\n\nTITLE: Pystone Benchmark Clock Time - Python\nDESCRIPTION: This Python code snippet calculates the benchmark time for the Pystone benchmark. It calculates the elapsed time and performs checks to avoid division by zero, computing loops per benchtime. The benchtime and loopsPerBenchtime values are returned.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nbenches/benchmarks/pystone.py:128:5     - Unknown word (benchtime)  -- benchtime = clock() - starttime\nbenches/benchmarks/pystone.py:129:8     - Unknown word (benchtime)  -- if benchtime == 0.0:\nbenches/benchmarks/pystone.py:130:17    - Unknown word (Benchtime)  -- loopsPerBenchtime = 0.0\nbenches/benchmarks/pystone.py:132:17    - Unknown word (Benchtime)  -- loopsPerBenchtime = (loops / benchtime\nbenches/benchmarks/pystone.py:132:38    - Unknown word (benchtime)  -- loopsPerBenchtime = (loops / benchtime)\nbenches/benchmarks/pystone.py:133:12    - Unknown word (benchtime)  -- return benchtime, loopsPerBenchtime\nbenches/benchmarks/pystone.py:133:31    - Unknown word (Benchtime)  -- return benchtime, loopsPerBenchtime\n```\n\n----------------------------------------\n\nTITLE: Implementing Bifid Cipher Encoding in Python\nDESCRIPTION: Provides a function to encode messages using the Bifid cipher by mapping characters through a Polybius square, combining row and column indices to produce ciphertext. Supports cryptographic encoding requiring lookup tables and string processing.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nqtltbdxrxlk\n```\n\n----------------------------------------\n\nTITLE: File Format V3 Data Operations\nDESCRIPTION: Defines the operators used within the V3 data format to represent Trie data.  These operators include `<` for removing one character, `<n` for removing n characters, `$` for the end of the word, `\\` for escaping characters, and `#n;` for referring to existing Trie nodes.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-trie-lib/README.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n<\n```\n\nLANGUAGE: text\nCODE:\n```\n<n\n```\n\nLANGUAGE: text\nCODE:\n```\n$\n```\n\nLANGUAGE: text\nCODE:\n```\n\\\\\n```\n\nLANGUAGE: text\nCODE:\n```\n#n;\n```\n\n----------------------------------------\n\nTITLE: Network Messaging and Compression Handling in C\nDESCRIPTION: Handles network message compression and decompression processes, with variables like 'compr' representing original message length, ensuring efficient data transfer in club synchronization.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_63\n\nLANGUAGE: C\nCODE:\n```\nnetmsg->comp_result.compr_u.compr.orig_msg_len\n```\n\n----------------------------------------\n\nTITLE: Function Declaration with Unknown Word - C\nDESCRIPTION: This snippet declares a function 'makevent'. The word 'makevent' is flagged as an unknown word. It creates a new event\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_93\n\nLANGUAGE: C\nCODE:\n```\nmakevent(char *name)\n```\n\n----------------------------------------\n\nTITLE: Processing and Formatting Date/Time in Message Conversion (C)\nDESCRIPTION: Uses macros 'tdhour', 'tdsec', and 'tdmin' to extract and format message creation date/time components for presentation or processing purposes, ensuring consistency in message data.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_50\n\nLANGUAGE: C\nCODE:\n```\n(msg.crdate) % 100, tdhour (msg.crtime), tdmin (msg.crtime), tdsec (msg.crtime);\n```\n\n----------------------------------------\n\nTITLE: Declaring Constant String in TypeScript\nDESCRIPTION: This snippet demonstrates a simple TypeScript declaration of a constant variable `a` assigned the string value 'hello'. It serves as a basic example of TS syntax and string initialization with no dependencies or parameters.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-grammar/samples/sample.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// TypeScript code\nconst a = 'hello';\n```\n\n----------------------------------------\n\nTITLE: Improve Dynamic Import README\nDESCRIPTION: This bug fix aims to improve the README.md file related to dynamic imports.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-strong-weak-map/test-cspell-strong-weak-map/CHANGELOG.md#_snippet_20\n\nLANGUAGE: text\nCODE:\n```\nimprove Dynamic Import README.md ([#4178](https://github.com/streetsidesoftware/cspell/issues/4178)) ([4ad1133](https://github.com/streetsidesoftware/cspell/commit/4ad1133e6230969e9486d7e7a158cba5c3d75d7f))\n```\n\n----------------------------------------\n\nTITLE: TypeScript Image EXIF Data Processing Utilities\nDESCRIPTION: Functions for checking and stripping EXIF metadata from JPEG images. These utilities handle binary data views, identify EXIF headers, and ensure images can be processed without embedded metadata, useful for privacy or compatibility.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_125\n\nLANGUAGE: TypeScript\nCODE:\n```\nsrc/script/util/ImageUtil.ts\n```\n\n----------------------------------------\n\nTITLE: Defining Enhanced `flagWords` Types in TypeScript\nDESCRIPTION: TypeScript type definitions for the proposed enhancement to the `flagWords` setting in CSpell. This allows specifying a simple forbidden word (string) or a tuple containing the forbidden word followed by one or more suggested replacements.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/rfc/rfc-0001 suggestions/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype FlagWordNoSuggestions = string;\ntype FlagWordWithSuggestions = [forbidWord: string, suggestion: string, ...otherSuggestions: string[]];\ntype FlagWord = FlagWordNoSuggestions | FlagWordWithSuggestions;\ntype FlagWords = FlagWord[];\n\ninterface BaseSettings {\n  // ... other fields\n  flagWords?: FlagWords;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ZeroSSL ACME Issuer with Custom Caddyfile Unmarshaling in Go\nDESCRIPTION: This Go snippet implements a custom ACME certificate issuer for ZeroSSL as part of the Caddy TLS module. It includes an UnmarshalCaddyfile function to parse ZeroSSL-specific configuration from Caddyfile tokens, validating parameters such as API keys, validity period, port number, and DNS propagation time. The issuer uses certmagic's ZeroSSLIssuer and integrates with Caddy's configuration system. Dependencies include certmagic, Caddy v2 modules, and the Caddyfile parser. Inputs are user configuration tokens; output is a configured issuer object capable of handling ZeroSSL issuance and HTTP validation.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_87\n\nLANGUAGE: Go\nCODE:\n```\npackage caddytls\n\nimport (\n\t\"github.com/caddyserver/certmagic\"\n\t\"github.com/caddyserver/caddy/v2\"\n\t\"github.com/caddyserver/caddy/v2/caddyconfig/caddyfile\"\n\t\"github.com/caddyserver/caddy/v2/caddyconfig\"\n)\n\n// ZeroSSLIssuer implements ACME certificate issuance using ZeroSSL.\ntype ZeroSSLIssuer struct {\n\tAPIKey                  string\n\tValidityDays            int\n\tPropagationTimeout      int\n\tPort                    int\n\tstorage                 certmagic.Storage\n\tissuer                  *certmagic.ZeroSSLIssuer\n}\n\n// UnmarshalCaddyfile parses the ZeroSSL issuer configuration from Caddyfile tokens.\nfunc (iss *ZeroSSLIssuer) UnmarshalCaddyfile(d *caddyfile.Dispenser) error {\n\t// Example:\n\t// zerossl <api_key> {\n\t//    validity_days 90\n\t//    propagation_timeout 60\n\t//    port 8080\n\t// }\n\n\tfor d.Next() {\n\t\tif d.NextArg() {\n\t\t\tiss.APIKey = d.Val()\n\t\t} else {\n\t\t\tfor d.NextBlock() {\n\t\t\t\tswitch d.Val() {\n\t\t\t\tcase \"validity_days\":\n\t\t\t\t\tval := d.Val()\n\t\t\t\t\t// parse and assign validity days\n\t\t\t\tcase \"port\":\n\t\t\t\t\tval := d.Val()\n\t\t\t\t\t// parse and assign port\n\t\t\t\tcase \"propagation_timeout\":\n\t\t\t\t\tval := d.Val()\n\t\t\t\t\t// parse and assign propagation timeout\n\t\t\t\tdefault:\n\t\t\t\t\treturn d.Errf(\"unrecognized zerossl issuer property: %s\", d.Val())\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t// Initialize the internal ZeroSSLIssuer with configuration.\n\tiss.issuer = &certmagic.ZeroSSLIssuer{\n\t\tAPIKey:             iss.APIKey,\n\t\tValidityDays:       iss.ValidityDays,\n\t\tPropagationTimeout: iss.PropagationTimeout,\n\t\tPort:               iss.Port,\n\t\tStorage:            iss.storage,\n\t}\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Power Iteration Method in Python\nDESCRIPTION: Implements power iteration to find dominant eigenvalues of a matrix, verifying if the matrix is complex. Dependencies include NumPy; inputs are matrices; outputs are eigenvalues and eigenvectors.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_33\n\nLANGUAGE: Python\nCODE:\n```\nlinear_algebra/src/power_iteration.py:45:15     - Unknown word (iscomplexobj) -- assert np.iscomplexobj(input_matrix) == np\n```\n\nLANGUAGE: Python\nCODE:\n```\nlinear_algebra/src/power_iteration.py:91:22     - Unknown word (triu)         -- imag_matrix = np.triu(1j * complex_input_matrix\n```\n\n----------------------------------------\n\nTITLE: Validating Suggestion Text File Format with Regexp\nDESCRIPTION: A regular expression (Perl-compatible, Unicode, multiline, global) used to validate lines in the custom text file format for suggestion dictionaries. It ensures each line correctly maps a word (typo) to one or more suggested replacement words.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/rfc/rfc-0001 suggestions/README.md#_snippet_4\n\nLANGUAGE: regexp\nCODE:\n```\n/^((?:\\p{L}\\p{M}*)+)\\s*->\\s*((?:\\p{L}\\p{M}*)+)(?:,\\s*((?:\\p{L}\\p{M}*)+))*$/gmu\n```\n\n----------------------------------------\n\nTITLE: Function Call in JavaScript Code\nDESCRIPTION: Example of a simple function call that might be flagged by ESLint rules, particularly in restricted syntax contexts.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/eslint/eslint/snapshot.txt#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\ndontMess();\n```\n\n----------------------------------------\n\nTITLE: Dynamically Importing an ESM Package from CommonJS TypeScript\nDESCRIPTION: TypeScript example using `dynamicImport` from `@cspell/dynamic-import` to load an ESM-only package ('chalk') within a CommonJS module environment. The `__dirname` variable provides the necessary path context for module resolution.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/dynamic-import/README.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { dynamicImport } from '@cspell/dynamic-import';\n\nconst pChalk = dynamicImport<typeof import('chalk')>('chalk', __dirname);\n```\n\n----------------------------------------\n\nTITLE: Reading Hunspell Words Programmatically (TypeScript)\nDESCRIPTION: Illustrates how to use the `hunspell-reader` library within a TypeScript or JavaScript project. It shows importing the `HunspellReader` class, initializing it with the paths to the `.aff` and `.dic` files, and calling the `readWords()` method. This method returns an RxJS Observable, which is then converted to an array of words using `.toArray().toPromise()`. Requires `hunspell-reader` and `rxjs` (v5.0) to be installed.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/hunspell-reader/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HunspellReader } from 'hunspell-reader';\n\nconst baseFile = 'en_US';\nconst dicFile = baseFile + '.dic';\nconst affFile = baseFile + '.aff';\n\n// Initialize the reader with the Hunspell files\nconst reader = new HunspellReader(affFile, dicFile);\n\n// Get the words as an array\nconst promiseArrayOfWords = reader.readWords().toArray().toPromise();\n```\n\n----------------------------------------\n\nTITLE: Macro Definitions for BBS Dialog Interface in mbk_bbsdialog.h\nDESCRIPTION: This snippet defines constants related to BBS dialog interface elements such as buttons and list headers. These constants support UI layout and control identification within the BBS dialog module.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_11\n\nLANGUAGE: C\nCODE:\n```\n#define FHBUTN 3\n```\n\nLANGUAGE: C\nCODE:\n```\n#define FHFTR 4\n```\n\nLANGUAGE: C\nCODE:\n```\n#define CLSLSTHDR 14\n```\n\nLANGUAGE: C\nCODE:\n```\n#define CLSLSTTAB 15\n```\n\nLANGUAGE: C\nCODE:\n```\n#define CLSLSTEND 16\n```\n\nLANGUAGE: C\nCODE:\n```\n#define LISTMHDR 18\n```\n\nLANGUAGE: C\nCODE:\n```\n#define LISTMFTR 20\n```\n\nLANGUAGE: C\nCODE:\n```\n#define TOGON 22\n```\n\nLANGUAGE: C\nCODE:\n```\n#define TOGOFF 23\n```\n\n----------------------------------------\n\nTITLE: Registering File Selector and Blender Export Operator in Python\nDESCRIPTION: This snippet registers a file selector dialog to choose SPM files for export, linking Blender's Window Manager to the operator. It uses context.window_manager.fileselect_add(self) to open file dialogs and sets up operator idnames and labels for UI integration. Requires bpy and Blender's operator system. Inputs are file paths and UI events; outputs are triggered export operations.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/AdaDoom3/AdaDoom3/snapshot.txt#_snippet_26\n\nLANGUAGE: Python\nCODE:\n```\ncontext.window_manager.fileselect_add(self)\nSPM_Export_Operator.bl_idname = \"screen.spm_export\"\nSPM_Export_Operator.bl_label = \"SPM (.spm)\"\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Custom Dictionaries (JSON)\nDESCRIPTION: Illustrates defining custom dictionaries using `dictionaryDefinitions` and enabling them alongside standard dictionaries using the `dictionaries` list within `cspell.json`. Each custom dictionary definition requires a unique `name` and a `path` (relative to the config file) pointing to the word list file.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell/README.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"language\": \"en\",\n// Dictionaries \"spanish\", \"ruby\", and \"corp-term\" will always be checked.\n// Including \"spanish\" in the list of dictionaries means both Spanish and English\n// words will be considered correct.\n\"dictionaries\": [\"spanish\", \"ruby\", \"corp-terms\", \"fonts\"],\n// Define each dictionary.  Relative paths are relative to the config file.\n\"dictionaryDefinitions\": [\n    { \"name\": \"spanish\", \"path\": \"./spanish-words.txt\"},\n    { \"name\": \"ruby\", \"path\": \"./ruby.txt\"},\n    { \"name\": \"company-terms\", \"path\": \"./corp-terms.txt\"}\n],\n```\n\n----------------------------------------\n\nTITLE: Unicode Emoji Modifier Sequences with Skin Tone Variations\nDESCRIPTION: This data defines emoji modifier sequences where emoji characters are combined with skin tone modifiers. Each line follows the format of code points, category, description, version, and visual representation.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-trie-lib/Samples/emoji-sequences.txt#_snippet_5\n\nLANGUAGE: unicode\nCODE:\n```\n1F9D1 1F3FD   ; RGI_Emoji_Modifier_Sequence  ; person: medium skin tone                                       # E5.0   [1] (🧑🏽)\n1F9D1 1F3FE   ; RGI_Emoji_Modifier_Sequence  ; person: medium-dark skin tone                                  # E5.0   [1] (🧑🏾)\n1F9D1 1F3FF   ; RGI_Emoji_Modifier_Sequence  ; person: dark skin tone                                         # E5.0   [1] (🧑🏿)\n1F9D2 1F3FB   ; RGI_Emoji_Modifier_Sequence  ; child: light skin tone                                         # E5.0   [1] (🧒🏻)\n```\n\n----------------------------------------\n\nTITLE: Unmarshalling Caddyfile Configuration for Encoding Modules in Go\nDESCRIPTION: This snippet defines the 'UnmarshalCaddyfile' method and related functions to parse Caddyfile tokens for configuring encoding handlers in the Caddy server. It initializes dependencies such as response matchers, verifies module existence, and populates encoding preferences. The code relies on 'caddyfile' and 'caddyhttp' packages and manages errors during configuration parsing.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_43\n\nLANGUAGE: Go\nCODE:\n```\n// UnmarshalCaddyfile sets up the handler from Caddyfile tokens. Syntax:\nfunc (enc *Encoder) UnmarshalCaddyfile(d *caddyfile.Dispenser) error {\n    // Implementation code here\n}\n```\n\n----------------------------------------\n\nTITLE: TLS Certificate Configuration in Go\nDESCRIPTION: Code for configuring TLS certificates in the HTTP transport for secure connections to upstream servers.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_65\n\nLANGUAGE: Go\nCODE:\n```\ntlsAppIface, err := ctx.App(\"tls\")\n// Error handling\ntlsApp := tlsAppIface.(*caddytls.TLS)\n// Certificate configuration\ncerts := caddytls.AllMatchingCertificates()\n```\n\n----------------------------------------\n\nTITLE: Add option to not auto stem during split\nDESCRIPTION: This bug fix provides an option to disable automatic stemming during the splitting process. Stemming reduces words to their root form to improve matching. This introduces flexibility, allowing users to opt-out of stemming, potentially for situations where exact matches are necessary. No dependencies are explicitly defined.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/CHANGELOG.md#_snippet_11\n\nLANGUAGE: git\nCODE:\n```\nAdd option to not auto stem during split ([#4310](https://github.com/streetsidesoftware/cspell/issues/4310)) ([23059da](https://github.com/streetsidesoftware/cspell/commit/23059dafd9ead91ef67cadf78a368e924b3436f6))\n```\n\n----------------------------------------\n\nTITLE: Simple TikZ Circuit Library with Logical Gate Nodes\nDESCRIPTION: This snippet defines a LaTeX TikZ library for creating standard logic gates, such as AND and NOT gates, with specified input styles. It enables reusability across multiple diagrams for digital circuits, requiring TikZ package extensions.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/MartinThoma/LaTeX-examples/snapshot.txt#_snippet_5\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\node[myand] (myand) { ... } // An AND gate node\n\\node[mynot, right=of myand] (mynot) { ... } // NOT gate node\n```\n\n----------------------------------------\n\nTITLE: CSpell Execution Summary Output\nDESCRIPTION: Displays the summary output of a CSpell execution against the 'bitjson/typescript-starter' repository. It reports that 20 files matching the specified patterns ('{README.md,.github/*.md,src/**/*.ts}') were checked, 0 spelling issues were found, and the process exited successfully with code 0.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/bitjson/typescript-starter/snapshot.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCSpell: Files checked: 20, Issues found: 0 in 0 files.\n exit code: 0\n```\n\n----------------------------------------\n\nTITLE: Message Path and Decompression Management (C)\nDESCRIPTION: Includes constants and variables for handling message decompression ('decompressmsged'), and path strings like 'Acrobase' for renaming clubs. Ensures proper handling of message files across conversions.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_45\n\nLANGUAGE: C\nCODE:\n```\nAcrobase ... ; fatalsys (\"Unable to move decompressmsged message.\");\n```\n\n----------------------------------------\n\nTITLE: Web Cryptography API Implementation in Node.js\nDESCRIPTION: The webcrypto module provides cryptographic functionality based on the Web Cryptography API standard. Includes various cryptographic algorithms, key management, encryption/decryption, signing, and key derivation.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/node.txt#_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\n// Accessing the API\nconst { subtle } = require('crypto').webcrypto;\n\n// Random number generation\ncrypto.getRandomValues(typedArray);\n\n// Key generation\nsubtle.generateKey(algorithm, extractable, keyUsages);\n\n// Key import/export\nsubtle.importKey(format, keyData, algorithm, extractable, keyUsages);\nsubtle.exportKey(format, key);\n\n// Encryption and decryption\nsubtle.encrypt(algorithm, key, data);\nsubtle.decrypt(algorithm, key, data);\n\n// Signing and verification\nsubtle.sign(algorithm, key, data);\nsubtle.verify(algorithm, key, signature, data);\n\n// Key derivation\nsubtle.deriveBits(algorithm, baseKey, length);\nsubtle.deriveKey(algorithm, baseKey, derivedKeyAlgorithm, extractable, keyUsages);\n\n// Digest\nsubtle.digest(algorithm, data);\n\n// Key wrapping\nsubtle.wrapKey(format, key, wrappingKey, wrapAlgo);\nsubtle.unwrapKey(format, wrappedKey, unwrappingKey, unwrapAlgo, unwrappedKeyAlgo, extractable, keyUsages);\n```\n\n----------------------------------------\n\nTITLE: Variable Declaration with Unknown Word - C\nDESCRIPTION: These snippets declare variables `opton` and `optoff`. The word 'opton', 'optoff' are flagged as unknown words.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_110\n\nLANGUAGE: C\nCODE:\n```\nchar opton[80] = { 0 }, optoff\n```\n\n----------------------------------------\n\nTITLE: Function Declaration with Unknown Word - C\nDESCRIPTION: This snippet uses parameters 'asksrc' and 'asktrg' in function cpmv. The word 'asksrc', 'asktrg' are flagged as an unknown word. They probably asks user for source and target of an action, like copy or move\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_98\n\nLANGUAGE: C\nCODE:\n```\ncpmv (int asksrc, int asktrg, int ok\n```\n\nLANGUAGE: C\nCODE:\n```\ncpmv (int asksrc, int asktrg, int ok, int err, char\n```\n\n----------------------------------------\n\nTITLE: TypeScript Templates Utility\nDESCRIPTION: Provides functions for template string processing, including substitution and formatting helpers.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_69\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-lib/src/lib/util/templates.ts\n```\n\n----------------------------------------\n\nTITLE: Demonstrating cspell-glob API (Node.js)\nDESCRIPTION: This code snippet demonstrates how to use the cspell-glob library in Node.js. It's intended to show the API for matching filenames against glob patterns, similar to .gitignore rules.  The example uses the `require` function to import the cspell-glob module for use and the comment TODO: DEMONSTRATE API signifies the area where API usage examples are meant to be placed.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-glob/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst cspellGlob = require('cspell-glob');\n\n// TODO: DEMONSTRATE API\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack Externals for Cspell Bundled Dictionaries in JavaScript\nDESCRIPTION: This snippet shows how to configure the Webpack externals array to exclude all packages matching the pattern /^@cspell\\/cspell-bundled-dicts/ from being bundled. This helps in avoiding duplication or conflicts by treating cspell bundled dictionaries as external dependencies during the bundling process with Webpack. It requires familiarity with Webpack's externals configuration option and how regular expressions function in JavaScript.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-bundled-dicts/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n  externals: [\n    /^@cspell\\/cspell-bundled-dicts/,\n  ],\n```\n\n----------------------------------------\n\nTITLE: Macro Definitions for Blackjack Game Constants in C\nDESCRIPTION: This snippet contains macro definitions representing various game states, actions, and parameters used in a blackjack game implementation. Each macro assigns a numerical value to a specific game-related concept, facilitating readable and maintainable code in C projects. Dependencies include proper inclusion of this header in relevant source files; it is primarily used for defining constants.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_13\n\nLANGUAGE: C\nCODE:\n```\n#define BJM_MINBET 37\n#define BJM_TOOLOW 40\n#define BJM_YRAISE 43\n#define BJM_ORAISE 44\n#define BJM_YCALL 47\n#define BJM_OCALL 48\n#define BJM_YFOLD 49\n#define BJM_OFOLD 50\n#define BJM_SEEPOT 51\n#define BJM_YTURN 52\n#define BJM_OTURN 53\n#define BJM_WAITHIT 59\n#define BJM_CNTHIT 60\n#define BJM_YHIT 61\n#define BJM_OHIT 62\n#define BJM_YBURN 63\n#define BJM_OBURN 64\n#define BJM_NOCARDS 65\n#define BJM_CARDSUM 66\n#define BJM_WAITSTAY 67\n#define BJM_CNTSTAY 68\n#define BJM_YSTAY 69\n#define BJM_OSTAY 72\n#define BJM_YWIN 73\n#define BJM_OWIN 74\n#define BJM_NOMOREPL 75\n#define BJM_YJOIN 76\n#define BJM_OJOIN 77\n#define BJM_NOGAME 78\n#define BJM_YGETCRED 79\n#define BJM_OGETCRED 80\n#define BJM_MULTJOIN 81\n#define BJM_YOFF 82\n#define BJV_WDOGEXP 1\n#define BJM_OOFF 83\n#define BJM_STARTNOW 88\n#define BJM_YFORCEFOLD 92\n```\n\n----------------------------------------\n\nTITLE: C Function and Variable References in Telecon Module\nDESCRIPTION: This snippet shows various function calls, variable names, and constants from the telecon module that CSpell identifies as unknown words. These are likely custom identifiers used in a chat or teleconferencing system.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_118\n\nLANGUAGE: C\nCODE:\n```\n// Channel management functions\nstrcpy(chanhdr.topic, gettopic(channel));\nwritechanhdr(channel, &chanhdr);\nleavechannel();\nkillpersonalchannel();\nleavechannels();\nsetchanax(int ax);\n\n// Chat functions\noriginatechat(othruseracc.userid);\nstartchat();\nfinishchat();\narrangecolours();\n\n// User and preference management\nsavetlcuser(thisuseracc.userid);\nstruct tlcuser temptlcu;\n\n// Channel and chat variables\nchar fname[256], rmname[256], lock[256];\nstatic int samechan;\nchar othuid[24], othsex;\nstatic char topictmp[64];\nstatic char sqtmp[24];\nstatic int squelchopt;\nchar moderator[1024], squelchee[1024];\n\n// Plugin management\nqexists();\nbecomeserver();\nexeclp(\"teleplugin\", ...)\n```\n\n----------------------------------------\n\nTITLE: Emoji Modifier Sequence Definitions in Unicode Format\nDESCRIPTION: Structured data listing of emoji modifier sequences with skin tone variations. Each line defines a unique emoji with skin tone combination, including Unicode code points, sequence type, description, Unicode emoji version, count, and the visual representation of the emoji.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-trie-lib/Samples/emoji-sequences.txt#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n1FAC5 1F3FE   ; RGI_Emoji_Modifier_Sequence  ; person with crown: medium-dark skin tone                       # E14.0  [1] (🫅🏾)\n1FAC5 1F3FF   ; RGI_Emoji_Modifier_Sequence  ; person with crown: dark skin tone                              # E14.0  [1] (🫅🏿)\n1FAF0 1F3FB   ; RGI_Emoji_Modifier_Sequence  ; hand with index finger and thumb crossed: light skin tone      # E14.0  [1] (🫰🏻)\n```\n\n----------------------------------------\n\nTITLE: Libsodium Password Hashing Mock in Jest Tests\nDESCRIPTION: Jest mock for the libsodium-wrappers library that provides password hashing functionality for the AppLock feature. It mocks the crypto_pwhash_str and crypto_pwhash_str_verify functions used for password security.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_88\n\nLANGUAGE: TypeScript\nCODE:\n```\njest.mock('libsodium-wrappers', () => ({\n  crypto_pwhash_str: (value: string),\n  crypto_pwhash_str_verify: (value1)\n}))\n```\n\n----------------------------------------\n\nTITLE: Importing tsyringe Container (TypeScript)\nDESCRIPTION: Imports the 'container' object from the 'tsyringe' dependency injection library in the MessageTimerButton component.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimport {container} from 'tsyringe';\n```\n\n----------------------------------------\n\nTITLE: Parsing and handling of FastCGI configurations in Caddyfile\nDESCRIPTION: These snippets are related to parsing the php_fastcgi directive within a Caddyfile. They describe how to define the directive, and what parameters are supported. It likely involves parsing a configuration file and converting it into internal structures for reverse proxy configuration. Prerequisites would be a Caddyfile dispenser for parsing and caddyfile package.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_56\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:107:14    - Unknown word (Errf)          -- return d.Errf(\"bad timeout value\n```\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:118:13    - Unknown word (Errf)          -- return d.Errf(\"unrecognized subdirective\n```\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:124:35    - Unknown word (fastcgi)       -- arsePHPFastCGI parses the php_fastcgi directive, which has\n```\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:129:8     - Unknown word (fastcgi)       -- // php_fastcgi localhost:7777\n```\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:140:4     - Unknown word (redir)         -- // redir @canonicalPath {path\n```\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:15:9      - Unknown word (fastcgi)    -- package fastcgi\n```\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:171:24    - Unknown word (httpcaddyfile) -- func parsePHPFastCGI(h httpcaddyfile.Helper) ([]httpcaddyfile\n```\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:171:49    - Unknown word (httpcaddyfile) -- httpcaddyfile.Helper) ([]httpcaddyfile.ConfigValue, error)\n```\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:270:28    - Unknown word (Errf)          -- return nil, dispenser.Errf(\"bad timeout value\n```\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:310:12    - Unknown word (caddyhttp)     -- routes := caddyhttp.RouteList{}\n```\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:317:6     - Unknown word (Redir)         -- dirRedir := false\n```\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:324:7     - Unknown word (Redir)         -- dirRedir = true\n```\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:333:9     - Unknown word (Redir)         -- dirRedir = true\n```\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:340:9     - Unknown word (Redir)         -- if dirRedir {\n```\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:342:4     - Unknown word (redir)         -- redirMatcherSet := caddy.ModuleMap\n```\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:34:2      - Unknown word (httpcaddyfile) -- httpcaddyfile.RegisterDirective(\"php\n```\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:34:39     - Unknown word (fastcgi)       -- RegisterDirective(\"php_fastcgi\", parsePHPFastCGI)\n```\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:354:4     - Unknown word (redir)         -- redirHandler := caddyhttp\n```\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:358:4     - Unknown word (redir)         -- redirRoute := caddyhttp.Route\n```\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:359:39    - Unknown word (redir)         -- herSetsRaw: []caddy.ModuleMap{redirMatcherSet},\n```\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:360:39    - Unknown word (caddyconfig)   -- []json.RawMessage{caddyconfig.JSONModuleObject(redirHandler\n```\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:379:38    - Unknown word (caddyconfig)   -- []json.RawMessage{caddyconfig.JSONModuleObject(rewriteHandl\n```\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:37:13     - Unknown word (Caddyfile)     -- // UnmarshalCaddyfile deserializes Caddyfile\n```\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:37:36     - Unknown word (Caddyfile)     -- marshalCaddyfile deserializes Caddyfile tokens into h.\n```\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:39:14     - Unknown word (fastcgi)       -- // transport fastcgi {\n```\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:403:27    - Unknown word (Caddyfile)     -- rpHandler.UnmarshalCaddyfile(dispenser)\n```\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:407:35    - Unknown word (Caddyfile)     -- rpHandler.FinalizeUnmarshalCaddyfile(h)\n```\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:426:12    - Unknown word (httpcaddyfile) -- return []httpcaddyfile.ConfigValue{\n```\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:49:30     - Unknown word (Caddyfile)     -- Transport) UnmarshalCaddyfile(d *caddyfile.Dispenser\n```\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:49:43     - Unknown word (caddyfile)     -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {\n```\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:87:14     - Unknown word (Errf)          -- return d.Errf(\"bad timeout value\n```\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:97:14     - Unknown word (Errf)          -- return d.Errf(\"bad timeout value\n```\n\n----------------------------------------\n\nTITLE: S-Box Application in Symmetric Encryption in Python\nDESCRIPTION: Defines a function apply_sbox that applies the substitution box (S-box) to input data for cryptography purposes. Used in encryption/decryption algorithms, operates on data and S-box structures.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_70\n\nLANGUAGE: Python\nCODE:\n```\n36:11 - Unknown word (sbox) -- def apply_sbox(s, data):\n```\n\n----------------------------------------\n\nTITLE: Adding Forbidden Words to cspell Configuration - JSON\nDESCRIPTION: Shows how to include forbidden words directly in the 'words' section of a cspell configuration file (e.g., JSON format). Words prefixed with '!' in this array will be flagged as errors during spell checking.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"words\": [\n    \"!forbiddenWord\",\n    \"configstore\"\n],\n```\n\n----------------------------------------\n\nTITLE: Test Suites for Trie and Distance Algorithms TypeScript\nDESCRIPTION: Includes various unit tests verifying the correctness of trie operations, distance calculations, and suggestion logic, ensuring reliability in various edge cases.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_44\n\nLANGUAGE: TypeScript\nCODE:\n```\ndescribe('Levenshtein Distance', () => {...})\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAL Foldback Callback Types (C)\nDESCRIPTION: Defines C function pointer types for OpenAL foldback callback mechanisms. `LPALFOLDBACKCALLBACK` defines the callback function signature itself. `LPALREQUESTFOLDBACKSTART` defines the function signature for initiating foldback, including specifying the callback. `LPALREQUESTFOLDBACKSTOP` defines the signature for stopping foldback.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/AdaDoom3/AdaDoom3/snapshot.txt#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY*LPALFOLDBACKCALLBACK)(ALenum,ALsizei);\n```\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY*LPALREQUESTFOLDBACKSTART)(ALenum,ALsizei,ALsizei,ALsizei,ALfloat*,LPALFOLDBACKCALLBACK);\n```\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY*LPALREQUESTFOLDBACKSTOP)(void);\n```\n\n----------------------------------------\n\nTITLE: Config File for Unknown Word Detection in Svelte Tests (JavaScript)\nDESCRIPTION: This configuration snippet likely sets up or logs unknown word detections during Svelte code analysis or linting, indicating specific lines and the corresponding unknown words in different test samples. It assists in identifying misspelled or unrecognized tokens in test files.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/sveltejs/svelte/snapshot.txt#_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\npackages/svelte/tests/runtime-runes/samples/clsx/_config.js:6:26      - Unknown word (owbekl)     -- div class=\"foo svelte-owbekl\"></div>\n```\n\n----------------------------------------\n\nTITLE: Test index file in test-cspell-pipe-esm/src/index.mts\nDESCRIPTION: This is the main entry point for tests of the cspell pipe in ESM format. It likely imports test suites or utility functions to execute spell-checking pipeline tests, verifying integration and functionality of the package components.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_94\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport './index.test';\n// Setup or initialization code for tests\n```\n\n----------------------------------------\n\nTITLE: Translating Bytearrays\nDESCRIPTION: This snippet tests the `.translate()` method of bytearray. This method replaces characters in the bytearray according to a translation table. The translation tables are created in other examples with `bytes.maketrans`. The input consists of the original bytearray, and the output is a translated bytearray. \nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nassert bytearray(b\"hjhtuyjyujuyj\").translate(\n```\n\nLANGUAGE: python\nCODE:\n```\nassert bytearray(b\"hjhtuyjyujuyj\").translate(\n```\n\nLANGUAGE: python\nCODE:\n```\nassert bytearray(b\"hjhtuyjyujuyj\").translate(\n```\n\n----------------------------------------\n\nTITLE: Using Yaf Route Methods\nDESCRIPTION: This code snippet shows Yaf Route methods. It encompasses methods like `assemble`, `route`, and the constructor methods for various route types (Rewrite, Simple, Static, and Supervar). These methods are used for routing requests within a Yaf-based application. The dependencies include the Yaf extension.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/php.txt#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nYaf_Route_Rewrite::assemble\nYaf_Route_Rewrite::route\nYaf_Route_Rewrite::__construct\nYaf_Route_Simple::assemble\nYaf_Route_Simple::route\nYaf_Route_Simple::__construct\nYaf_Route_Static::assemble\nYaf_Route_Static::match\nYaf_Route_Static::route\nYaf_Route_Supervar::assemble\nYaf_Route_Supervar::route\nYaf_Route_Supervar::__construct\n```\n\n----------------------------------------\n\nTITLE: TypeScript Variable Declaration: Greeting Initialization\nDESCRIPTION: This snippet features a basic TypeScript declaration assigning the string \"hello\" to a constant named greeting. It exemplifies a straightforward variable initialization with scope annotations indicating that it belongs to the 'source.ts' context and that the string literal is categorized under 'string.quoted.double.ts'. This serves as a simple demonstration of syntax highlighting for variable declarations and string literals in TypeScript.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-grammar/fixtures/tokenizer-tests/test.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n const greeting = \"hello\";\n```\n\n----------------------------------------\n\nTITLE: Subscribing/Unsubscribing to GIPHY Send Event (TypeScript)\nDESCRIPTION: Uses WebAppEvents to subscribe and unsubscribe to the 'EXTENSIONS.GIPHY.SEND' event within the useGiphy hook.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\nWebAppEvents.EXTENSIONS.GIPHY.SEND, sendGiphy);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nWebAppEvents.EXTENSIONS.GIPHY.SEND);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Event Attributes in Svelte Button Component\nDESCRIPTION: Example of a Svelte Button component with both a correct 'onclick' and an invalid 'onbar' event attribute that is flagged by CSpell.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/sveltejs/svelte/snapshot.txt#_snippet_36\n\nLANGUAGE: svelte\nCODE:\n```\n<Button onclick onbar=\"bar\">ok</Button>\n```\n\n----------------------------------------\n\nTITLE: IHave Request and Date Handling in Network Communication (C)\nDESCRIPTION: Handles 'ihavereq' structures for requesting 'I have' lists in network clubs, as well as 'ihavedates' for receipt validation during synchronization processes.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_58\n\nLANGUAGE: C\nCODE:\n```\nstruct ihave_request_t ihavereq; rem, char *loc, int ihavedate;\n```\n\n----------------------------------------\n\nTITLE: Handling Blender File Selector for User Interaction in STK Export Python Addon\nDESCRIPTION: This snippet demonstrates using Blender's window_manager.fileselect_add operator to open a file selection dialog. It's typically used in operator classes to allow users to choose file paths interactively before exporting STK track or asset files. It requires Blender's bpy module and integration within Blender's operator framework.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/AdaDoom3/AdaDoom3/snapshot.txt#_snippet_31\n\nLANGUAGE: Python\nCODE:\n```\ndef execute(self, context):\n\tcontext.window_manager.fileselect_add(self)\n\treturn {'RUNNING_MODAL'}\n```\n\n----------------------------------------\n\nTITLE: Mapping HTML Entities to Numeric Values in JavaScript\nDESCRIPTION: This JavaScript code snippet shows example key-value pairs from an object likely used within the Svelte compiler's parsing phase to map HTML entity names (like 'ndash;') to their corresponding numeric character codes. The surrounding text indicates these specific entity names were flagged as 'unknown words' by the cspell spell checker, suggesting they might need to be added to a custom dictionary or reviewed for correctness within the context of the Svelte project.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/sveltejs/svelte/snapshot.txt#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n'ndash;': 8211,\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'nearr;': 8599,\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'nedot;': 8784,\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'nesim;': 8770,\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'ngeqq;': 8807,\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'rightleftarrows;': 8644,\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'rightsquigarrow;': 8605,\n```\n\n----------------------------------------\n\nTITLE: Managing Windows System Console Appearance and Events in Ada\nDESCRIPTION: This snippet implements Windows system console management functions in Ada, including handling message procedures for convenience, querying system metrics such as frame sizes and scrollbar thumb dimensions, and processing window messages like WM_SYSCOMMAND, WM_CTLCOLORSTATIC, and WM_GETMINMAXINFO. It depends on Windows API calls such as SystemParametersInfoW, GetSystemMetrics, and usage of constants like SPI_GETNONCLIENTMETRICS, SM_CYFRAME, SM_CXFRAME, SM_CYVTHUMB, SM_CYSIZE. The code handles specific message cases including screen saver triggers and control color changes. It requires proper Windows API bindings in Ada and appropriate compilation flags like -mwindows.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/AdaDoom3/AdaDoom3/snapshot.txt#_snippet_1\n\nLANGUAGE: Ada\nCODE:\n```\nEngine/Systems/Win32/neo-engine-system-console.adb: defines message handling procedures and accesses system metrics via Windows API calls like SystemParametersInfoW (SPI_GETNONCLIENTMETRICS) and GetSystemMetrics (SM_CYFRAME, SM_CXFRAME, SM_CYVTHUMB, SM_CYSIZE).\nHandles window messages such as WM_SYSCOMMAND (including SC_SCREENSAVE), WM_CTLCOLORSTATIC, WM_CTLCOLOREDIT, and WM_GETMINMAXINFO for managing console UI behavior and appearance.\nIncludes commentary about compilation requirements (e.g., -mwindows) and uses font-related parameters such as lpszFace = \"FONT\" and font name \"Lucida Console\".\n```\n\n----------------------------------------\n\nTITLE: TypeScript Utility: Comparable Interface\nDESCRIPTION: Defines a Comparable interface enforcing comparison logic across objects, useful for sorting and ordering within cspell utilities.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_51\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-lib/src/lib/util/Comparable.ts\n```\n\n----------------------------------------\n\nTITLE: Test index file in test-cspell-service-bus-esm/src/index.mts\nDESCRIPTION: This module serves as the main entry point for testing the cspell service bus in ESM format, possibly importing test cases or mock setup routines to validate message handling, event dispatching, or protocol compliance in the service bus architecture.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_95\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport './index.test';\n// Additional test setup\n```\n\n----------------------------------------\n\nTITLE: Defining Constants for File Operations (C)\nDESCRIPTION: This code snippet defines constants related to file operations using the #define preprocessor directive in C. These constants likely represent different states, menu options, or configuration settings within the file management functionality of the application. The filename is mbk_files.h.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_18\n\nLANGUAGE: C\nCODE:\n```\n#define LIBLSTH 93\n#define LIBLSTP 94\n#define LIBLSTL 95\n#define LIBLSTF 96\n#define LIBINFOO 99\n#define DEFRKEY 3\n#define LIBINFOF 110\n#define OPRSMENU 111\n#define OPRMENU 112\n#define OPRSHORT 113\n#define OPRERR 114\n#define OPRRED 115\n#define OCREASK 119\n#define OCREEXS 120\n#define OCRE2LN 121\n#define OCRECHR 122\n#define DEFDKEY 4\n#define DEFUKEY 5\n#define OCRENST 123\n#define OCREMKD 124\n#define OADTASK 125\n#define OADTDIR 126\n#define OADTDR 127\n#define OADTCRE 129\n#define OCREVT 130\n#define OCRELT 131\n#define DEFOKEY 6\n#define OCRECNE 136\n#define OCRENAB 137\n#define OCREOK 138\n#define OEDIVT 139\n#define OEDILT 140\n#define DEFFLIM 7\n#define OEDINOP1 146\n#define OEDIREC 148\n#define OACCVT 152\n#define DEFSLIM 8\n#define OACCLT 153\n#define DEFLLIM 9\n#define OACCLTA 163\n#define OACCLTB 164\n```\n\n----------------------------------------\n\nTITLE: TypeScript Reaction Utility for User Interaction Handling\nDESCRIPTION: Handles user reactions or qualifications related to '@wireapp/api-client' user modules, likely facilitating reaction-based features or state updates in the application.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_132\n\nLANGUAGE: TypeScript\nCODE:\n```\nsrc/script/util/ReactionUtil.ts\n```\n\n----------------------------------------\n\nTITLE: Testing str.encode() with error handling in Python\nDESCRIPTION: Tests the behavior of `str.encode('ascii')` when encountering non-ASCII characters. It expects a `UnicodeEncodeError` to be raised, likely used within a testing framework's `assertRaises` context (not shown).\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_45\n\nLANGUAGE: python\nCODE:\n```\n# This snippet likely runs within a test context like:\n# self.assertRaises(UnicodeEncodeError, \"¿como estás?\".encode, \"ascii\")\n\"¿como estás?\".encode(\"ascii\") # This line itself would raise UnicodeEncodeError\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Keyframes (TypeScript)\nDESCRIPTION: Defines CSS keyframes named 'editIconKeyFrams' (potential typo for Keyframes) using a styled-components or similar library function `keyframes`.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nconst editIconKeyFrams = keyframes({\n```\n\n----------------------------------------\n\nTITLE: Invalid Global Variable Usage in Svelte Markup\nDESCRIPTION: Example of an illegal variable name 'billsyall' used with double-dollar notation in Svelte markup, which is both syntactically invalid and flagged by CSpell.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/sveltejs/svelte/snapshot.txt#_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n\"`$$billsyall` is an illegal variable\"\n```\n\n----------------------------------------\n\nTITLE: Describing flagWords Field Formatting\nDESCRIPTION: This snippet describes the format for the `flagWords` field within the `DictionaryDefinitionInlineWords`. It lists the allowed formats: single word entry and entries with suggestions. It also provides examples of the expected formats.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/Configuration/auto_properties.md#_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\nFormat of `flagWords`\n- single word entry - `word`\n- with suggestions - `word:suggestion` or `word->suggestion, suggestions`\n\nExample:\n```ts\n\"flagWords\": [\n  \"color: colour\",\n  \"incase: in case, encase\",\n  \"canot->cannot\",\n  \"cancelled->canceled\"\n]\n```\n```\n\n----------------------------------------\n\nTITLE: LaTeX Command Handlers in Dart\nDESCRIPTION: Functions and constants for handling LaTeX subsubsection commands. These are used to process and manipulate LaTeX document structure within the addlatexhash.dart file.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/dart-lang/sdk/snapshot.txt#_snippet_13\n\nLANGUAGE: Dart\nCODE:\n```\nbool isSubsubsectionCommand(String line)\n\nstatic const PENDING_IS_SUBSUBSECTION = 3;\n\nreturn 'subsec:';\n\nreturn 'subsubsec:';\n```\n\n----------------------------------------\n\nTITLE: Defining Teleconferencing Constants in C\nDESCRIPTION: This snippet includes a series of #define directives that establish a set of named integral constants used across the teleconferencing implementation in C. Each constant associates a descriptive identifier with a unique integer value, presumably for use in message parsing, event handling, or command recognition. These constants require inclusion of this header in dependent C source files and are expected to represent internally consistent identifiers within the teleconferencing framework.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_28\n\nLANGUAGE: C\nCODE:\n```\n#define UNLSTON 144\n#define UNLSTOFF 145\n#define INVHELP 146\n#define IUNKUSR 147\n#define INOKALL 148\n#define IWHYU 149\n#define IRECHE 151\n#define IRECSHE 152\n#define NPAYMX 8\n#define IRECHIS 153\n#define ISENDR 156\n#define ISNDM 157\n#define ISNFF 158\n#define INVWRN 159\n#define UNVALL 160\n#define UNVHELP 161\n#define UUNKUSR 162\n#define MAXCHT 9\n#define UNOKALL 163\n#define UWHYU 164\n#define URECHE 166\n#define URECSHE 167\n#define URECHIS 168\n#define USENDR 170\n#define USNDM 171\n#define USNFF 172\n#define UOTHER 173\n#define DISCDROP 175\n#define ROHELP 176\n#define RUNKUSR 177\n#define ROOKALL 178\n#define RWHYU 179\n#define RRECIP 180\n#define RRECHE 181\n#define RRECSHE 182\n#define AMSGCH 11\n#define RRECHIS 183\n#define RRECHER 184\n#define RJOIN 185\n#define RSENDR 186\n#define RSNDM 187\n#define RSNFF 188\n#define SQHELP 189\n#define SQNOAX 190\n#define QUNKUSR 191\n#define SQUMOD 192\n#define MSGCHG 12\n#define SQUMODM 193\n#define SQUMODF 194\n#define SQUMALE 195\n#define SQUFEM 196\n#define SQUYOU 197\n#define SQUOTHR 198\n#define USQHELP 199\n#define USQMOD 200\n#define USQYOU 201\n#define USQOTHR 202\n#define TLKSQU 203\n#define TOPNAX 204\n#define TOPCLR 205\n#define TOPM 206\n#define CHTHELP 210\n#define CHTNAX 211\n#define CHTNIN 212\n#define CHTONX 213\n#define CHTUID 214\n#define CHTSLF 215\n#define CHTM 216\n#define CHTF 217\n#define CHTALR 218\n#define CHTNOT1 219\n#define CHTWITHM 221\n#define CHTWITHF 222\n#define CHTACC 223\n#define CHTENT 224\n#define CHTFRQ 225\n#define CHTMINS 226\n#define CHTMINP 227\n#define CHTREQ 228\n#define CHTHIS 229\n#define CHTHER 230\n#define CHTROK 231\n#define CHTEXT 232\n#define CHTUNOT 233\n#define ENTCHT 234\n#define SVNOMM 237\n#define SVNOMF 238\n#define SVGENM 239\n#define SVGENF 240\n#define SVDATM 241\n#define SVDATF 242\n#define SVACCM 243\n#define SVACCF 244\n#define ACTHLP 245\n#define ACTNAX 246\n#define ACTLST 249\n#define FMTUSER 250\n#define FMTUSEC 251\n#define FMTSMPL 252\n#define FMTOTHR 253\n#define FMTALL 254\n#define FMTTRGT 255\n#define FMTSCRT 256\n#define FMTADVB 257\n#define FMTGNRC 258\n#define VERBSENT 259\n#define VERBNMT 260\n#define VERBNOBJ 261\n#define VERBUID 262\n#define VERBNAS 263\n#define STGALL1 264\n#define STGSEC1 266\n#define PINTABL1 268\n#define PINNONE 271\n#define PINNAX 272\n#define ENTRBCH 20\n```\n\n----------------------------------------\n\nTITLE: Declaring OpenAL Source Property Functions (SOFT Extension, C)\nDESCRIPTION: Declares C functions from the OpenAL SOFT extension for manipulating source properties using double-precision floating-point vectors (`alSourcedvSOFT`, `alGetSourcedvSOFT`) and 64-bit integers (`alSourcei64SOFT`).\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/AdaDoom3/AdaDoom3/snapshot.txt#_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nAL_API void AL_APIENTRY alSourcedvSOFT(ALuint source, ALenum param, const ALdouble *value);\n```\n\nLANGUAGE: c\nCODE:\n```\nAL_API void AL_APIENTRY alGetSourcedvSOFT(ALuint source, ALenum param, ALdouble *value);\n```\n\nLANGUAGE: c\nCODE:\n```\nAL_API void AL_APIENTRY alSourcei64SOFT(ALuint source, ALenum param, ALint64SOFT value);\n```\n\n----------------------------------------\n\nTITLE: JavaScript Library Initialization and Class Handling\nDESCRIPTION: This snippet encompasses multiple instances of JavaScript code dealing with library initialization such as Algolia search integration, class name handling with 'klass' and 'clazz', and utility functions for DOM element class management. Dependencies include Webpack, Node.js modules, and external JS libraries like Algolia. It consumes configuration objects and returns or manipulates DOM elements for search and class manipulation.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/microsoft/TypeScript-Website/snapshot.txt#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\npackages/typescriptlang-org/static/js/docsearch.js:2:75041   - Unknown word (Algoliasearch) -- require__(30);var createAlgoliasearch=__webpack_require__\n```\n\n----------------------------------------\n\nTITLE: Call State Class with UI State Computed Properties in CallState.ts\nDESCRIPTION: This snippet implements reactive properties that monitor UI states such as maximized view and media establishment status using Knockout's pureComputed. It facilitates responsive interface updates based on the current call's media and UI states, ensuring seamless user experience during active calls.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\nthis.isMaximisedViewActive = ko.pureComputed(() => ...);\nthis == CALL_STATE.MEDIA_ESTAB) ...;\n```\n\n----------------------------------------\n\nTITLE: TypeScript index file in cspell-lib-esm/src/index.ts\nDESCRIPTION: This file serves as the main export point for the cspell library in ESM format, exposing core functionalities, types, and utilities for consumers. It may import internal modules and re-export them for public use, ensuring typed and modular access.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_93\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport * from './lib/index';\n// Additional re-exports or type declarations\n```\n\n----------------------------------------\n\nTITLE: TypeScript: Segmentations Management within MessageRepository\nDESCRIPTION: This snippet manages 'segmentations' state, defining initial segmentation data and updating segmentations dynamically, which are then used in events like 'CONTRIBUTED' to reflect user contributions or analyses.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_77\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet segmentations: ContributedSegmentations = {\n  // initial segmentation data\n};\n// Updating segmentations and emitting events\n```\n\n----------------------------------------\n\nTITLE: Encrypting Data Stream in zipWorker.ts Using Sodium\nDESCRIPTION: This snippet demonstrates starting a new secret stream for data encryption. It initializes the stream with sodium.crypto_secretstream_xchacha20poly1305_init_push(), and employs crypto_secretstream_xchacha20poly1305_push() to encrypt data chunks, tagging message boundaries appropriately. This process safeguards archive contents against unauthorized access.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nstateAndHeader = sodium.crypto_secretstream_xchacha20poly1305_init_push(encryptionKey);\nencryptedFile = sodium.crypto_secretstream_xchacha20poly1305_push(\n  stateAndHeader.state, bytes, null, sodium.crypto_secretstream_xchacha20poly1305_TAG_MESSAGE\n);\n```\n\n----------------------------------------\n\nTITLE: Byte Array Centering - Python\nDESCRIPTION: This Python code snippet demonstrates using the `center` method on a `bytearray` object. The method pads the byte array with the specified fill character (b\"|\") until it reaches the specified length. Different lengths are tested.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nextra_tests/snippets/builtin_bytearray.py:165:21    - Unknown word (koki)       -- assert [bytearray(b\"koki\").center(i, b\"|\") for\nextra_tests/snippets/builtin_bytearray.py:166:7     - Unknown word (koki)       -- b\"koki\",\nextra_tests/snippets/builtin_bytearray.py:167:7     - Unknown word (koki)       -- b\"koki\",\nextra_tests/snippets/builtin_bytearray.py:168:8     - Unknown word (koki)       -- b\"|koki\",\nextra_tests/snippets/builtin_bytearray.py:169:8     - Unknown word (koki)       -- b\"|koki|\",\n```\n\n----------------------------------------\n\nTITLE: Organization and Original Date/Time in Network Messages (C)\nDESCRIPTION: Assigns original message dates and times ('orgdate', 'orgtime') to message headers during synchronization, preserving message metadata.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_55\n\nLANGUAGE: C\nCODE:\n```\nhdr.crdate = netmsg->orgdate; hdr.crtime = netmsg->orgtime;\n```\n\n----------------------------------------\n\nTITLE: Invalid Svelte Component Instantiation Example\nDESCRIPTION: Example of a Svelte component importing from a non-existent location, which is flagged by CSpell for the unknown word 'somewhereelse'.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/sveltejs/svelte/snapshot.txt#_snippet_34\n\nLANGUAGE: svelte\nCODE:\n```\nimport Baz from './somewhereelse';\n```\n\n----------------------------------------\n\nTITLE: Setting and Reverting Resource Limits in Go\nDESCRIPTION: Calls a function `setResourceLimits` (likely related to GOMAXPROCS) and uses `defer` to schedule a call to the returned function `undoMaxProcs`. This pattern ensures resource limits are reverted after the current function scope exits.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_21\n\nLANGUAGE: Go\nCODE:\n```\nundoMaxProcs := setResourceLimits\n```\n\nLANGUAGE: Go\nCODE:\n```\ndefer undoMaxProcs()\n```\n\n----------------------------------------\n\nTITLE: Variable Declaration with Unknown Word - C\nDESCRIPTION: This snippet declares a pointer variable 'emuq' of type 'struct emuqueue'. The word 'emuqueue' is flagged as an unknown word. It likely represents a queue structure used for terminal emulation.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_83\n\nLANGUAGE: C\nCODE:\n```\nstruct emuqueue *emuq;\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAL Auxiliary Effect Slot Types (EFX Extension, C)\nDESCRIPTION: Defines C function pointer types for managing OpenAL auxiliary effect slots as part of the EFX extension. This includes generating (`LPALGENAUXILIARYEFFECTSLOTS`), deleting (`LPALDELETEAUXILIARYEFFECTSLOTS`), and validating (`LPALISAUXILIARYEFFECTSLOT`) slots, as well as setting (`LPALAUXILIARYEFFECTSLOTI`, `LPALAUXILIARYEFFECTSLOTIV`, `LPALAUXILIARYEFFECTSLOTF`, `LPALAUXILIARYEFFECTSLOTFV`) and getting (`LPALGETAUXILIARYEFFECTSLOTI`, `LPALGETAUXILIARYEFFECTSLOTIV`, `LPALGETAUXILIARYEFFECTSLOTF`, `LPALGETAUXILIARYEFFECTSLOTFV`) slot parameters.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/AdaDoom3/AdaDoom3/snapshot.txt#_snippet_10\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY *LPALGENAUXILIARYEFFECTSLOTS)(ALsizei n, ALuint* slots);\n```\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY *LPALDELETEAUXILIARYEFFECTSLOTS)(ALsizei n, const ALuint *slots);\n```\n\nLANGUAGE: c\nCODE:\n```\ntypedef ALboolean (AL_APIENTRY *LPALISAUXILIARYEFFECTSLOT)(ALuint slotid);\n```\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY *LPALAUXILIARYEFFECTSLOTI)(ALuint slot, ALenum param, ALint value);\n```\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY *LPALAUXILIARYEFFECTSLOTIV)(ALuint slot, ALenum param, const ALint *values);\n```\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY *LPALAUXILIARYEFFECTSLOTF)(ALuint slot, ALenum param, ALfloat value);\n```\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY *LPALAUXILIARYEFFECTSLOTFV)(ALuint slot, ALenum param, const ALfloat *values);\n```\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY *LPALGETAUXILIARYEFFECTSLOTI)(ALuint slot, ALenum param, ALint *value);\n```\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY *LPALGETAUXILIARYEFFECTSLOTIV)(ALuint slot, ALenum param, ALint *values);\n```\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY *LPALGETAUXILIARYEFFECTSLOTF)(ALuint slot, ALenum param, ALfloat *value);\n```\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY *LPALGETAUXILIARYEFFECTSLOTFV)(ALuint slot, ALenum param, ALfloat *values);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Index Files for Settings\nDESCRIPTION: Aggregates and exposes settings modules for external consumption, maintaining modular structure.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_32\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* index.ts for settings modules */\n```\n\n----------------------------------------\n\nTITLE: Mail Cleanup Process Variables and Functions in C\nDESCRIPTION: Tracks status variables like 'repost', 'emldel', and 'emldelb' to manage periodic email reposts, deletions, and cleanup routines. Functions like 'emailcleanup' and 'doreindex' support routine maintenance of email archives.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_42\n\nLANGUAGE: C\nCODE:\n```\nint emldel = 0, emldelb = 0;\nvoid emailcleanup ();\nvoid doreindex ();\n```\n\n----------------------------------------\n\nTITLE: Scripting and Markup in SDK Runner HTA\nDESCRIPTION: Contains scripting (VBScript/JavaScript) and markup (HTML/SVG) within an HTML Application (runsdk.hta) used as an SDK runner or build interface. Defines constants for registry keys (HKLM) and build commands (GNATMAKE using gnatmake), configures AJAX requests (responseType='arraybuffer'), sets up JavaScript event handlers (onmouseover, onmouseout), and includes SVG icons (kind=\"videogame\").\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/AdaDoom3/AdaDoom3/snapshot.txt#_snippet_43\n\nLANGUAGE: vbscript\nCODE:\n```\nARCHITECTURE_REG_KEY = 'HKLM\\\\SYSTEM\\\\CurrentControlSet\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntools or performing scriptable actions necessary for\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar CMD_GNATMAKE = 'gnatmake -P .\\\\neo\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar CMD_GNATMAKE = 'gnatmake -P .\\\\neo.gpr';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nxhr.responseType = 'arraybuffer';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nparent.onmouseover = function() { newIcon\n```\n\nLANGUAGE: javascript\nCODE:\n```\nparent.onmouseout = function() { newIcon\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar buildCommand = CMD_GNATMAKE + ' ' +\n```\n\nLANGUAGE: html\nCODE:\n```\n<svg kind=\"videogame\" class=\"icon\" x=\"0px\n```\n\n----------------------------------------\n\nTITLE: Creating a CSpell Configuration with TypeScript Types\nDESCRIPTION: Example of using the CSpell types to create a properly typed cspell.config.js file. The configuration includes language-specific settings for cpp, a custom pattern for ignoring #include statements, and a custom dictionary definition.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-types/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\n/** @type { import(\"@cspell/cspell-types\").CSpellUserSettings } */\nconst cspell = {\n  description: 'cspell.config.js file in samples/js-config',\n  languageSettings: [\n    {\n      languageId: 'cpp',\n      allowCompoundWords: false,\n      patterns: [\n        {\n          name: 'pound-includes',\n          pattern: /^\\s*#include.*/g\n        }\n      ],\n      ignoreRegExpList: ['pound-includes']\n    }\n  ],\n  dictionaryDefinitions: [\n    {\n      name: 'custom-words',\n      path: './custom-words.txt'\n    }\n  ],\n  dictionaries: ['custom-words']\n};\n\nmodule.exports = cspell;\n```\n\n----------------------------------------\n\nTITLE: Declaring Cspell and Bundled Dictionaries Dependencies in package.json JSON\nDESCRIPTION: This snippet demonstrates how to specify 'cspell' as a development dependency and '@cspell/cspell-bundled-dicts' as a runtime dependency in a package.json file. It ensures that the cspell spell checker and its bundled dictionaries are properly installed for development and production use. The snippet requires knowledge of npm dependency management and the JSON format of package.json files.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-bundled-dicts/README.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n  \"devDependencies\": {\n    \"cspell\": \"^5\"\n  },\n  \"dependencies\": {\n    \"@cspell/cspell-bundled-dicts\": \"^5\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Compiling a Trie File with CSpell Tools\nDESCRIPTION: This command compiles a trie file from a Hunspell dictionary file. It reads the `english.dic` file, expands it based on the rules in `english.aff`, and creates a compressed trie file named `english.trie.gz`.  Dependencies: CSpell Tools must be installed, along with the relevant `.dic` and `.aff` files for a Hunspell dictionary. Output: Generates a gzipped trie file.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-tools-alias/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncspell-tools compile-trie english.dic\n```\n\n----------------------------------------\n\nTITLE: String Formatting with Unknown Word - C\nDESCRIPTION: This snippet uses string formatting involving 'BBSRUNDIR'. The word 'BBSRUNDIR' is flagged as an unknown word. It probably represents the directory for BBS (Bulletin Board System) runtime data.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_81\n\nLANGUAGE: C\nCODE:\n```\nregister-%s\", mkfname (BBSRUNDIR), tty);\n```\n\n----------------------------------------\n\nTITLE: CSS AST type definition with Atrule in Svelte style parser\nDESCRIPTION: Type annotation for CSS Abstract Syntax Tree (AST) rules in the Svelte style parser, including both regular Rule and Atrule types.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/sveltejs/svelte/snapshot.txt#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nAST.CSS.Rule | AST.CSS.Atrule>} */\n```\n\n----------------------------------------\n\nTITLE: Graham Scan Algorithm for Convex Hull in Python\nDESCRIPTION: Implements Graham scan to find the convex hull of a set of points, with variables for minimum index and y-coordinate. Used in computational geometry.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_66\n\nLANGUAGE: Python\nCODE:\n```\n119:5 - Unknown word (minidx) -- minidx = 0\n28:55 - Unknown word (miny) -- int, int], minx: int, miny: int) -> float:\n```\n\n----------------------------------------\n\nTITLE: Timers Module Functions and Usage in Node.js\nDESCRIPTION: This snippet covers Node.js timers API including setTimeout, setInterval, setImmediate, their clear counterparts, and promise-based timers. It explains required dependencies, signal handling via AbortSignal, and patterns for scheduling asynchronous tasks with optional delay and arguments.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/node.txt#_snippet_33\n\nLANGUAGE: JavaScript\nCODE:\n```\n...args\nAbortController\nAbortError\nAbortSignal\nImmediate\nPromise\nTimeout\nTypeError\ncallback\nclearImmediate()\nclearImmediate(immediate)\nclearInterval()\nclearInterval(timeout)\nclearTimeout()\nclearTimeout(timeout)\ndelay\nfalse\nimmediate\nimmediate.hasRef()\nimmediate.ref()\nimmediate.unref()\noptions\nref\nrequire( timers )\nrequire( timers/promises )\nsetImmediate()\nsetImmediate(callback[, ...args])\nsetInterval()\nsetInterval(callback[, delay[, ...args]])\nsetTimeout()\nsetTimeout(callback[, delay[, ...args]])\nsignal\ntimeout\ntimeout.hasRef()\ntimeout.ref()\ntimeout.refresh()\ntimeout.unref()\ntimeout[Symbol.toPrimitive]()\ntimer\ntimers/promises\ntimersPromises.setImmediate([value[, options]])\ntimersPromises.setTimeout([delay[, value[, options]])\ntrue\nutil.promisify()\nvalue\nworker_threads\nworker_threads\n```\n\n----------------------------------------\n\nTITLE: Bytes Object Creation\nDESCRIPTION: This snippet tests the creation of a bytes object.  It specifically targets encoding. Input is a string; the expected output is a bytes object.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nbytes(\"bla\", encoding=b\"jilj\")\n```\n\n----------------------------------------\n\nTITLE: Gamepad Event Handler Definitions for Svelte Elements\nDESCRIPTION: TypeScript definitions for gamepad-related event handlers in Svelte components. These handle connection and disconnection events for gamepads and game controllers.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/sveltejs/svelte/snapshot.txt#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n'on:gamepadconnected'?: GamepadEventHandler\nongamepadconnected?: GamepadEventHandler\n'on:gamepaddisconnected'?: GamepadEventHandler\nongamepaddisconnected?: GamepadEventHandler\n```\n\n----------------------------------------\n\nTITLE: Managing and Updating STK Asset Paths in Blender Addon Preferences with Python\nDESCRIPTION: This snippet modifies Blender's addon preferences to set the path for STK assets. It accesses user_preferences, updates the stk_assets_path, and invokes bpy.ops.wm.save_userpref() to persist changes. It assumes the 'stk_assets_path' property exists and requires Blender's bpy module.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/AdaDoom3/AdaDoom3/snapshot.txt#_snippet_32\n\nLANGUAGE: Python\nCODE:\n```\naddon_prefs = user_preferences.addons[\"stk\"].preferences\naddon_prefs.stk_assets_path = os.path.join(new_path)\nbpy.ops.wm.save_userpref()\n```\n\n----------------------------------------\n\nTITLE: Python Module Comparison Script\nDESCRIPTION: Script to compare available modules and functions between CPython and RustPython implementations. Identifies missing or differently implemented items to track implementation progress.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_64\n\nLANGUAGE: Python\nCODE:\n```\ncpymods = {gen_modules()!r}\n\nnot_implementeds = {}\n# Processing to find unimplemented methods\nnot_implementeds[name] = missing_methods\n\nrustpymods = {mod: dir_of_mod_or}\n\nfor modname, cpymod in cpymods.items():\n    rustpymod = rustpymods.get(modname)\n    if rustpymod is None:\n        # Handle missing module\n    elif isinstance(rustpymod, Exception):\n        result[\"import\"][modname] = rustpymod.__class__.__name__ + str(rustpymod)\n    else:\n        implemented_items = sorted(set(cpymod) & set(rustpymod))\n        missing_items = set(cpymod) - set(rustpymod)\n        # Compare signatures\n        rustpymod[item][\"sig\"], cpymod[item][\"sig\"]\n\nresult[\"cpython_modules\"] = cpymods\nresult[\"not_implementeds\"] = not_implementeds\n```\n\n----------------------------------------\n\nTITLE: TypeScript Pipe Utilities and Operators\nDESCRIPTION: Collection of functions and operators for composing, transforming, and controlling data streams, including testing files for each operator.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_84\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-pipe/src/async/index.ts\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-pipe/src/helpers/distribute.ts\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-pipe/src/helpers/index.ts\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-pipe/src/helpers/interleave.ts\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-pipe/src/helpers/iteratorToIterable.ts\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-pipe/src/helpers/toArray.ts\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-pipe/src/helpers/toAsyncIterable.ts\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-pipe/src/index.ts\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-pipe/src/operators/index.ts\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-pipe/src/operators/append.ts\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-pipe/src/operators/await.ts\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-pipe/src/operators/buffer.ts\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-pipe/src/operators/concatMap.ts\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-pipe/src/operators/filter.ts\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-pipe/src/operators/first.ts\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-pipe/src/operators/flatten.ts\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-pipe/src/operators/joinStrings.ts\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-pipe/src/operators/last.ts\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-pipe/src/operators/map.ts\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-pipe/src/operators/reduce.ts\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-pipe/src/operators/skip.ts\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-pipe/src/operators/take.ts\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-pipe/src/operators/tap.ts\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-pipe/src/operators/unique.ts\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-pipe/src/pipe.ts\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-pipe/src/reduce.ts\n```\n\n----------------------------------------\n\nTITLE: Parsing Download Information in Email Clubs Module (C)\nDESCRIPTION: This snippet involves parsing download-related variables such as 'dnlname' and 'dnldir' used in email club download functions. It highlights variable declarations for filename, directory, and command strings essential for file download operations. Dependencies include string buffers and command processing logic for email club downloads.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_36\n\nLANGUAGE: C\nCODE:\n```\nnameless[256], fname[256], dnlname[256], command[256];\n```\n\n----------------------------------------\n\nTITLE: Analyzing Code with CSpell - TypeScript\nDESCRIPTION: This snippet represents the output of a CSpell analysis on a TypeScript file. It specifies the number of files checked, issues found, and the exit code. A specific instance of an unknown word is highlighted, showing context within the `src/utils/base64.ts` file.  The analysis identifies \"behaviour\" as an unknown word. This uses the cspell tool.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/graphql/graphql-relay-js/snapshot.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCSpell: Files checked: 28, Issues found: 2 in 1 file.\n exit code: 1\nsrc/utils/base64.ts:66:26     - Unknown word (behaviour)  -- * Let's keep this behaviour for a time being and\n```\n\n----------------------------------------\n\nTITLE: Defining platform-specific variables in Go\nDESCRIPTION: Variables like 'home' are assigned environment variables such as 'USERPROFILE' or static paths like '/sdcard', to manage paths in cross-platform environments, especially between Windows and Linux.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_98\n\nLANGUAGE: Go\nCODE:\n```\nhome = os.Getenv(\"USERPROFILE\")\n// or\nhome = \"/sdcard\"\n```\n\n----------------------------------------\n\nTITLE: TypeScript Global Settings Tests and Models\nDESCRIPTION: Tests validating global configuration behaviors and models to ensure consistent application-wide settings.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_31\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* GlobalSettings test cases */\n```\n\n----------------------------------------\n\nTITLE: String Formatting with Unknown Word - C\nDESCRIPTION: This snippet uses string formatting involving 'demog'. The word 'demog' is flagged as an unknown word and used in statistics calculations.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_112\n\nLANGUAGE: C\nCODE:\n```\nsprintf (command, \"%s -demog\", mkfname (STATSBIN\n```\n\n----------------------------------------\n\nTITLE: Installing @cspell/strong-weak-map with npm\nDESCRIPTION: Command to install the @cspell/strong-weak-map package as a production dependency using npm.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-strong-weak-map/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -S @cspell/strong-weak-map\n```\n\n----------------------------------------\n\nTITLE: Handling Compression Results in Network Sync (C)\nDESCRIPTION: Processes compression results from network messages, accessing fields such as 'orig_msg_len' for data handling during club synchronization.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_54\n\nLANGUAGE: C\nCODE:\n```\nnetmsg->comp_result.compr_u.compr.orig_msg_len\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Correct .gitignore comment detection\nDESCRIPTION: This entry details a bug fix in the cspell project that corrects the detection of comments within .gitignore files. This directly impacts the functionality of the spell checker when analyzing files, ensuring that comments are correctly ignored. The fix was made in response to issue [#4083](https://github.com/streetsidesoftware/cspell/issues/4083).\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-config-lib/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Kullback-Leibler Divergence in Python\nDESCRIPTION: Calculates the KL divergence between two probability distributions, critical in information theory and variational inference. Inputs are distributions; output is divergence score.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_42\n\nLANGUAGE: Python\nCODE:\n```\nmachine_learning/loss_functions.py:632:14    - Unknown word (leibler)    -- def kullback_leibler_divergence(y_true: np\n```\n\nLANGUAGE: Python\nCODE:\n```\nmachine_learning/loss_functions.py:632:5     - Unknown word (kullback)   -- def kullback_leibler_divergence(y\n```\n\nLANGUAGE: Python\nCODE:\n```\nmachine_learning/loss_functions.py:634:19    - Unknown word (Kullback)   -- Calculate the Kullback-Leibler divergence\n```\n\nLANGUAGE: Python\nCODE:\n```\nmachine_learning/loss_functions.py:634:28    - Unknown word (Leibler)    -- Calculate the Kullback-Leibler divergence (KL divergence\n```\n\n----------------------------------------\n\nTITLE: Decryption Process in Symmetric Encryption in Python\nDESCRIPTION: Prints the plaintext after applying the decryption process, indicating the process of converting encrypted data back to original form, likely in an S-box-based encryption scheme.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_71\n\nLANGUAGE: Python\nCODE:\n```\n96:29 - Unknown word (decypting) -- print(\"Plain text after decypting is:\", PT)\n```\n\n----------------------------------------\n\nTITLE: Vim Editor Configuration for MultiColumn Support\nDESCRIPTION: This code snippet pertains to Vim editor setup, specifically the use of the 'multicol' package or feature to manage multi-column text layouts. It likely appears in LaTeX editing environments to facilitate multi-column document formatting.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/MartinThoma/LaTeX-examples/snapshot.txt#_snippet_3\n\nLANGUAGE: LaTeX\nCODE:\n```\n% multicol parameters\n\\usepackage{multicol}\n// Configures multi-column layout\n```\n\n----------------------------------------\n\nTITLE: Understanding URL and TextDecoder in Node.js\nDESCRIPTION: This snippet demonstrates creating URL objects with new URL(input), resolving URLs via import.meta.url, and using utility classes like util.TextDecoder. These help manage resource locations, handle URL-based data sources, and decode binary data streams during application runtime.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/node.txt#_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew URL(input)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew URL( ./local , import.meta.url)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nutil.TextDecoder\n```\n\n----------------------------------------\n\nTITLE: Quantum Fourier Transform Implementation with Qiskit\nDESCRIPTION: Implementation of Quantum Fourier Transform algorithm using the Qiskit framework for quantum computing simulations.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_89\n\nLANGUAGE: Python\nCODE:\n```\nimport qiskit\n```\n\nLANGUAGE: Python\nCODE:\n```\ntransform(number_of_qubits: int = 3) -> qiskit\n```\n\nLANGUAGE: Python\nCODE:\n```\nbackend = Aer.get_backend(\"qasm_simulator\")\n```\n\n----------------------------------------\n\nTITLE: String Literal with Unknown Word - C\nDESCRIPTION: This snippet includes the string literal 'RBNO' as an argument to a function call. The word 'RBNO' is flagged as an unknown word, but likely represents a specific code or identifier in the context of the system.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_78\n\nLANGUAGE: C\nCODE:\n```\n\"RBNO\", 0, 0))\n```\n\n----------------------------------------\n\nTITLE: Email Module Function Declarations and User Preferences in C\nDESCRIPTION: Includes function prototypes such as 'makenewqsc', 'emailwrite', and 'emailread', along with variables related to user email preferences like 'lastemailread' and 'readnow'. These manage email reading, writing, and user notification preferences, relying on struct members such as 'userid' and 'prefs'.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_37\n\nLANGUAGE: C\nCODE:\n```\nmakenewqsc (); emailwrite (); emailread ();\n```\n\n----------------------------------------\n\nTITLE: Using cspell-dictionary Module\nDESCRIPTION: This feature introduces the use of the cspell-dictionary Module. This allows a more modular and potentially easier to maintain architecture. The module can be used to load and manage dictionaries. This is a core project dependency and the output is improved dictionary management.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-pipe/CHANGELOG.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n* Use cspell-dictionary Module ([#3686](https://github.com/streetsidesoftware/cspell/issues/3686)) ([6441f4b](https://github.com/streetsidesoftware/cspell/commit/6441f4b41fe0e8b8188fa4c08999450c8958b6f0))\n```\n\n----------------------------------------\n\nTITLE: Documenting Basic Emoji Unicode Code Points\nDESCRIPTION: A structured reference list of Unicode code points for the Basic_Emoji category. Each line follows the format of code point(s), category, description, and version information with rendered emoji example in parentheses.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-trie-lib/Samples/emoji-sequences.txt#_snippet_0\n\nLANGUAGE: unicode\nCODE:\n```\n1F971         ; Basic_Emoji                  ; yawning face                                                   # E12.0  [1] (🥱)\n1F972         ; Basic_Emoji                  ; smiling face with tear                                         # E13.0  [1] (🥲)\n1F973..1F976  ; Basic_Emoji                  ; partying face..cold face                                       # E11.0  [4] (🥳..🥶)\n```\n\n----------------------------------------\n\nTITLE: Importing Modules in TypeScript\nDESCRIPTION: This code snippet imports necessary modules for the test, including `tokenizedLinesToMarkdown` for converting tokenized lines to Markdown, `TypeScript` grammar definition, `normalizeGrammar` for normalizing the grammar, and `tokenizeText` for tokenizing the input text.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-grammar/fixtures/tokenizer-tests/test.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { tokenizedLinesToMarkdown } from './visualizeAsMD';\nimport { TypeScript } from '../grammars';\nimport { normalizeGrammar } from '../parser/grammarNormalizer';\nimport { tokenizeText } from '../dist';\n```\n\n----------------------------------------\n\nTITLE: Handling events and event emitters in Node.js\nDESCRIPTION: This snippet details the usage of EventEmitter, EventTarget, and related event handling methods like addListener(), emit(), on(), once(), removeListener(), setMaxListeners(), and event name management. It includes mechanisms for managing event propagation, listener registration/removal, and error handling within Node.js event-driven architecture.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/node.txt#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nemitter.emit()\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nemitter.on()\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nemitter.once()\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nemitter.removeListener()\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\neventTarget.addEventListener(type, listener[, options])\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\neventTarget.dispatchEvent()\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\neventTarget.removeEventListener()\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nemitter.setMaxListeners()\n```\n\n----------------------------------------\n\nTITLE: Working with Node.js Global Objects and Functions\nDESCRIPTION: Reference for Node.js global objects, functions, and utilities including AbortController, timers, event handling, and process management.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/node.txt#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nAbortController\nAbortSignal\nBuffer\nEvent\nEventEmitter\nEventTarget\nMessageChannel\nMessageEvent\nMessagePort\nPromise\nTextDecoder\nTextEncoder\nURL\nURLSearchParams\nWebAssembly\n__dirname\n__filename\nabort\nabortController.abort()\nabortController.signal\nabortSignal.aborted\nabortSignal.onabort\ncallback\nclearImmediate\nclearImmediate(immediateObject)\nclearInterval\nclearInterval(intervalObject)\nclearTimeout\nclearTimeout(timeoutObject)\nconsole\nexports\nglobal\nmodule\nonce()\nprocess\nprocess.nextTick()\nqueueMicrotask()\nqueueMicrotask(callback)\nrequire()\nsetImmediate\nsetImmediate(callback[, ...args])\nsetInterval\nsetInterval(callback, delay[, ...args])\nsetTimeout\nsetTimeout(callback, delay[, ...args])\ntype\nuncaughtException\nvar something\n{ once: true }\n```\n\n----------------------------------------\n\nTITLE: Finding substrings in bytes with assertions\nDESCRIPTION: This snippet tests the `.find()` and `.rfind()` methods of a bytes object. It checks for different scenarios like missing substrings and the use of start/end arguments with the `rfind()` method. Assertions are used for result verification. The input consists of a bytes object; the output depends on the assertion.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nassert b\"abcdabcda\".find(b\"a\") == 0\n```\n\nLANGUAGE: python\nCODE:\n```\nassert b\"abcdabcda\".rfind(b\"a\") == 8\n```\n\nLANGUAGE: python\nCODE:\n```\nassert b\"abcdabcda\".rfind(b\"a\", 2, 6)\n```\n\nLANGUAGE: python\nCODE:\n```\nassert b\"abcdabcda\".rfind(b\"a\", None,\n```\n\nLANGUAGE: python\nCODE:\n```\nassert b\"abcdabcda\".rfind(b\"a\", 2, None\n```\n\n----------------------------------------\n\nTITLE: Generating All Forms\nDESCRIPTION: This bug fix makes sure all word forms are generated. This improves the coverage and accuracy of spell checking by considering different forms of words. This would input an individual word and output different variations for spell check analysis.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-pipe/CHANGELOG.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n* make sure all forms are generated. ([#3783](https://github.com/streetsidesoftware/cspell/issues/3783)) ([70949a5](https://github.com/streetsidesoftware/cspell/commit/70949a5823f7c58052f9627c9455dcaa3496e8fb))\n```\n\n----------------------------------------\n\nTITLE: Detecting Unknown Words in JavaScript\nDESCRIPTION: The provided text is a report generated by a spell checker. It identifies unknown words found in a JavaScript file (`entities.js`) related to Svelte's compiler. The spell checker flags words that aren't in its dictionary. Each line contains an unknown word, the specific line number, and its potential corresponding character entity.  There are no code snippets, just a list of unknown words.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/sveltejs/svelte/snapshot.txt#_snippet_23\n\n\n\n----------------------------------------\n\nTITLE: Exposing ConfigLoader API\nDESCRIPTION: This bug fix exposes the ConfigLoader API, making it available for external use. This allows other modules or applications to utilize the configuration loading functionality of cspell.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-strong-weak-map/test-cspell-strong-weak-map/CHANGELOG.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nexpose ConfigLoader API ([#5032](https://github.com/streetsidesoftware/cspell/issues/5032)) ([e839990](https://github.com/streetsidesoftware/cspell/commit/e839990e94f639000bc926ae87187840fb17dee9))\n```\n\n----------------------------------------\n\nTITLE: Collatz Sequence Variable in Project Euler Problem 14\nDESCRIPTION: Variable declaration for storing Collatz sequence lengths in a solution for Project Euler problem 14.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_81\n\nLANGUAGE: Python\nCODE:\n```\nCOLLATZ_SEQUENCE_LENGTHS =\n```\n\n----------------------------------------\n\nTITLE: Message Conversion and Text Translation in Email Clubs (C)\nDESCRIPTION: Contains functions like 'xlatehist' for translating message history strings, and utility functions 'msg_get' with date/time parameters such as 'getdow' and 'tdmonth'. These support message format conversions and date manipulations involved in message processing routines.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_39\n\nLANGUAGE: C\nCODE:\n```\nxlatehist (char *s)\n, msg_get (MHDAY0 + getdow (msg->crdate)));\nstrcpy (new.club, \"Philosofia\");\n```\n\n----------------------------------------\n\nTITLE: Importing WebAppEvents in InputBarControls (TypeScript)\nDESCRIPTION: Imports the WebAppEvents object from the '@wireapp/webapp-events' library within the InputBarControls component. This is likely used for handling application-level events.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nWebAppEvents} from '@wireapp/webapp-events';\n```\n\n----------------------------------------\n\nTITLE: Function Declaration with Unknown Word - C\nDESCRIPTION: This snippet declares a function 'confirmquit'. The word 'confirmquit' is flagged as an unknown word. The function is part of the `classed` subdirectory and probably asks a user if they really want to quit.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_88\n\nLANGUAGE: C\nCODE:\n```\nconfirmquit ()\n```\n\n----------------------------------------\n\nTITLE: Function Declaration with Unknown Word - C\nDESCRIPTION: This snippet declares a function 'getchkname'. The word 'getchkname' is flagged as an unknown word, suggesting a potential misspelling or unconventional naming. It likely retrieves a check name.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_80\n\nLANGUAGE: C\nCODE:\n```\ngetchkname (char *checkname, char\n```\n\n----------------------------------------\n\nTITLE: Byte Array Count - Python\nDESCRIPTION: This Python code snippet showcases the `count` method on a `bytearray` object. It counts the occurrences of a given subsequence within the byte array using bytes, bytearrays, and memoryviews as input for the subsequence. It tests multiple cases to ensure the count method works correctly.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nextra_tests/snippets/builtin_bytearray.py:261:20    - Unknown word (azeazerazeazopia) -- assert bytearray(b\"azeazerazeazopia\").count(b\"aze\") ==\nextra_tests/snippets/builtin_bytearray.py:262:20    - Unknown word (azeazerazeazopia) -- assert bytearray(b\"azeazerazeazopia\").count(b\"az\") == 4\nextra_tests/snippets/builtin_bytearray.py:263:20    - Unknown word (azeazerazeazopia) -- assert bytearray(b\"azeazerazeazopia\").count(b\"a\") == 5\nextra_tests/snippets/builtin_bytearray.py:265:20    - Unknown word (azeazerazeazopia) -- assert bytearray(b\"azeazerazeazopia\").count(bytearray(b\nextra_tests/snippets/builtin_bytearray.py:266:20    - Unknown word (azeazerazeazopia) -- assert bytearray(b\"azeazerazeazopia\").count(memoryview(b\n```\n\n----------------------------------------\n\nTITLE: Node.js DNS Module: Resolving Hostnames and IP Addresses\nDESCRIPTION: This snippet provides interfaces for performing DNS queries such as resolve, lookup, and reverse, along with resolver objects. It supports asynchronous and promise-based operations, allowing resolution of hostnames, IP addresses, and other DNS records, essential for network applications.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/node.txt#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ndns.resolve(hostname[, rrtype], callback)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ndns.lookup(hostname[, options], callback)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ndns.reverse(ip, callback)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ndns.setServers(servers)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ndns.promises.resolve4(hostname[, options])\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ndns.promises.lookup(hostname[, options])\n```\n\n----------------------------------------\n\nTITLE: Node.js Domain API for Error and Context Management\nDESCRIPTION: This snippet shows how to use the 'domain' module to handle exceptions and maintain execution context across asynchronous callbacks. Functions include creating domains, binding callbacks, and managing error propagation, useful for robust error handling in complex Node.js applications.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/node.txt#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst domain = require('domain').create()\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ndomain.add(emitter)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ndomain.run(fn[, ...args])\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ndomain.bind(callback)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ndomain.enter()\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ndomain.exit()\n```\n\n----------------------------------------\n\nTITLE: Adding file type to CSpell\nDESCRIPTION: This snippet adds `.webm` to the list of known file types for CSpell.  This ensures that CSpell correctly identifies and processes files with the `.webm` extension during spell checking. It addresses issue #4171.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-tools/CHANGELOG.md#_snippet_0\n\nLANGUAGE: TEXT\nCODE:\n```\n* Add `.webm` to know file types ([#4171](https://github.com/streetsidesoftware/cspell/issues/4171)) ([eeb9497](https://github.com/streetsidesoftware/cspell/commit/eeb9497143aa2215d857c8a872b94362c1ffe19e))\n```\n\n----------------------------------------\n\nTITLE: Feature: Use cspell-dictionary Module\nDESCRIPTION: This entry introduces the adoption of the `cspell-dictionary` module. This likely involved refactoring and integration of a dedicated dictionary management module to improve maintainability and functionality related to dictionary handling within cspell. This feature change relates to issue [#3686](https://github.com/streetsidesoftware/cspell/issues/3686).\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-config-lib/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Example cspell-gitignore CLI Command (Shell)\nDESCRIPTION: Shows an example shell command running 'cspell-gitignore' to check the 'node_modules' directory with a root specified as the current directory. The output indicates the rule and line in .gitignore causing the ignore. This snippet requires the CLI installed and a shell environment.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-gitignore/README.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ cspell-gitignore -r . node_modules\n.gitignore:58:node_modules/       node_modules\n```\n\n----------------------------------------\n\nTITLE: Google Cloud API References in Proto Files\nDESCRIPTION: References to Google Cloud API services and resources in protobuf definitions. These include service names, resource types, and specific API components from various Google Cloud services.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/googleapis/google-cloud-cpp/snapshot.txt#_snippet_7\n\nLANGUAGE: Proto\nCODE:\n```\ngoogle/api/httpbody.proto\ngoogle/iam/credentials/v1/iamcredentials.proto\ngoogle/longrunning/operations.proto\ngoogle/type/dayofweek.proto\ngoogle/type/latlng.proto\ngoogle/type/timeofday.proto\n```\n\n----------------------------------------\n\nTITLE: System-Dependent and Input/Output Operations in adventure/infoint\nDESCRIPTION: This snippet points to functions and variables involved in system-dependent routines, input processing, and text handling, including setting terminal modes, error flags, and record file handling. It shows cross-platform considerations and low-level I/O procedures.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_32\n\nLANGUAGE: C\nCODE:\n```\nvoid settermios ();\nint c, errflg = 0;\nsprintf (fname, XFERLIST, getpid ());\nerror_fatal (\"Argh, fcopy() failed. Dying\");\n// Other system-specific variables and functions\n\n```\n\n----------------------------------------\n\nTITLE: Handling unknown words and dependencies in Go\nDESCRIPTION: These snippets demonstrate recognition of external dependencies such as 'caddyserver', 'caddyfile', and 'caddyconfig', which are critical for config parsing and module registration within Caddy's extension system. They also handle conditional build tags for fuzz testing.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_93\n\nLANGUAGE: Go\nCODE:\n```\n//go:build gofuzz\n// Return hardcoded strings or handle special test cases for fuzz testing\n```\n\n----------------------------------------\n\nTITLE: Variable Declarations with Multiple Variables in JavaScript\nDESCRIPTION: Examples of different variable declaration patterns with multiple variables in a single statement, which may be flagged by ESLint's one-var rule.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/eslint/eslint/snapshot.txt#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst barfoo = 1, bazfoo = 2;\nlet fooqux, foonorf;\nlet norf;\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation of Tools and Resources\nDESCRIPTION: This markdown segment contains references to resources and tools such as TeX Live, Asymptote, and common web links. It includes annotations for documentation and communication channels, useful for technical documentation and community sharing.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/MartinThoma/LaTeX-examples/snapshot.txt#_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\n- Unknown word (texlive)\n- [tex.stackexchange.com](http://tex.stackexchange)\n```\n\n----------------------------------------\n\nTITLE: Listing API Elements\nDESCRIPTION: This snippet lists a collection of string literals representing API elements. These elements include keywords, properties, and function calls often used within the project, like \"exports\", \".code\", and \".message\". No specific dependencies are required, as it is a simple collection of strings. These elements likely pertain to error handling and object manipulation within the system. The output is simply the literal strings themselves.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/node.txt#_snippet_9\n\nLANGUAGE: none\nCODE:\n```\n\"exports\"\n\"imports\"\n${myObject.name}: ${myObject.message}\n--disable-proto=throw\n--eval\n--force-fips\n--input-type\n--print\n--without-v8-platform\n.close()\n.code\n.message\n.stack\n/absolute/path/to/file.js:line:column\n1xx\n:authority\n:method\n:path\n:scheme\n:status\n<error class name>: <error message>\nABORT_ERR\nAbortController\nAbortError\nAbortSignal\nAssertionError\nAsyncHooks\nBreakIterator\nBuffer\nBuffer.write(string, encoding, offset[, length])\nCONNECT\nClass: assert.AssertionError\nConsole\nConstructor.prototype\nContent-Length\nContext\nDH\nDataView\nEACCES\nEADDRINUSE\nEAI_NODATA\nEAI_NONAME\nECONNREFUSED\nECONNRESET\nEEXIST\nEISDIR\nEMFILE\nENOENT\nENOTDIR\nENOTEMPTY\nENOTFOUND\nEPERM\nEPIPE\nERR_*\nERR_AMBIGUOUS_ARGUMENT\nERR_ARG_NOT_ITERABLE\nERR_ASSERTION\nERR_ASYNC_CALLBACK\nERR_ASYNC_TYPE\nERR_BROTLI_COMPRESSION_FAILED\nERR_BROTLI_INVALID_PARAM\nERR_BUFFER_CONTEXT_NOT_AVAILABLE\nERR_BUFFER_OUT_OF_BOUNDS\nERR_BUFFER_TOO_LARGE\nERR_CANNOT_TRANSFER_OBJECT\nERR_CANNOT_WATCH_SIGINT\nERR_CHILD_CLOSED_BEFORE_REPLY\nERR_CHILD_PROCESS_IPC_REQUIRED\nERR_CHILD_PROCESS_STDIO_MAXBUFFER\nERR_CLOSED_MESSAGE_PORT\nERR_CONSOLE_WRITABLE_STREAM\nERR_CONSTRUCT_CALL_INVALID\nERR_CONSTRUCT_CALL_REQUIRED\nERR_CONTEXT_NOT_INITIALIZED\nERR_CPU_USAGE\nERR_CRYPTO_CUSTOM_ENGINE_NOT_SUPPORTED\nERR_CRYPTO_ECDH_INVALID_FORMAT\nERR_CRYPTO_ECDH_INVALID_PUBLIC_KEY\nERR_CRYPTO_ENGINE_UNKNOWN\nERR_CRYPTO_FIPS_FORCED\nERR_CRYPTO_FIPS_UNAVAILABLE\nERR_CRYPTO_HASH_DIGEST_NO_UTF16\nERR_CRYPTO_HASH_FINALIZED\nERR_CRYPTO_HASH_UPDATE_FAILED\nERR_CRYPTO_INCOMPATIBLE_KEY\nERR_CRYPTO_INCOMPATIBLE_KEY_OPTIONS\nERR_CRYPTO_INITIALIZATION_FAILED\nERR_CRYPTO_INVALID_AUTH_TAG\nERR_CRYPTO_INVALID_COUNTER\nERR_CRYPTO_INVALID_CURVE\nERR_CRYPTO_INVALID_DIGEST\nERR_CRYPTO_INVALID_IV\nERR_CRYPTO_INVALID_JWK\nERR_CRYPTO_INVALID_KEYLEN\nERR_CRYPTO_INVALID_KEYPAIR\nERR_CRYPTO_INVALID_KEYTYPE\nERR_CRYPTO_INVALID_KEY_OBJECT_TYPE\nERR_CRYPTO_INVALID_MESSAGELEN\nERR_CRYPTO_INVALID_SCRYPT_PARAMS\nERR_CRYPTO_INVALID_STATE\nERR_CRYPTO_INVALID_TAG_LENGTH\nERR_CRYPTO_JOB_INIT_FAILED\nERR_CRYPTO_OPERATION_FAILED\nERR_CRYPTO_PBKDF2_ERROR\nERR_CRYPTO_SCRYPT_INVALID_PARAMETER\nERR_CRYPTO_SCRYPT_NOT_SUPPORTED\nERR_CRYPTO_SIGN_KEY_REQUIRED\nERR_CRYPTO_TIMING_SAFE_EQUAL_LENGTH\nERR_CRYPTO_UNKNOWN_CIPHER\nERR_CRYPTO_UNKNOWN_DH_GROUP\nERR_CRYPTO_UNSUPPORTED_OPERATION\nERR_DIR_CLOSED\nERR_DIR_CONCURRENT_OPERATION\nERR_DLOPEN_FAILED\nERR_DNS_SET_SERVERS_FAILED\nERR_DOMAIN_CALLBACK_NOT_AVAILABLE\nERR_DOMAIN_CANNOT_SET_UNCAUGHT_EXCEPTION_CAPTURE\nERR_ENCODING_INVALID_ENCODED_DATA\nERR_ENCODING_NOT_SUPPORTED\nERR_EVAL_ESM_CANNOT_PRINT\nERR_EVENT_RECURSION\nERR_EXECUTION_ENVIRONMENT_NOT_AVAILABLE\nERR_FALSY_VALUE_REJECTION\nERR_FEATURE_UNAVAILABLE_ON_PLATFORM\nERR_FS_EISDIR\nERR_FS_FILE_TOO_LARGE\nERR_FS_INVALID_SYMLINK_TYPE\nERR_HTTP2_ALTSVC_INVALID_ORIGIN\nERR_HTTP2_ALTSVC_LENGTH\nERR_HTTP2_CONNECT_AUTHORITY\nERR_HTTP2_CONNECT_PATH\nERR_HTTP2_CONNECT_SCHEME\nERR_HTTP2_ERROR\nERR_HTTP2_FRAME_ERROR\nERR_HTTP2_GOAWAY_SESSION\nERR_HTTP2_HEADERS_AFTER_RESPOND\nERR_HTTP2_HEADERS_OBJECT\nERR_HTTP2_HEADERS_SENT\nERR_HTTP2_HEADER_REQUIRED\nERR_HTTP2_HEADER_SINGLE_VALUE\nERR_HTTP2_INFO_HEADERS_AFTER_RESPOND\nERR_HTTP2_INFO_STATUS_NOT_ALLOWED\nERR_HTTP2_INVALID_CONNECTION_HEADERS\nERR_HTTP2_INVALID_HEADER_VALUE\nERR_HTTP2_INVALID_INFO_STATUS\nERR_HTTP2_INVALID_ORIGIN\nERR_HTTP2_INVALID_PACKED_SETTINGS_LENGTH\nERR_HTTP2_INVALID_PSEUDOHEADER\nERR_HTTP2_INVALID_SESSION\nERR_HTTP2_INVALID_SETTING_VALUE\nERR_HTTP2_INVALID_STREAM\nERR_HTTP2_MAX_PENDING_SETTINGS_ACK\nERR_HTTP2_NESTED_PUSH\nERR_HTTP2_NO_MEM\nERR_HTTP2_NO_SOCKET_MANIPULATION\nERR_HTTP2_ORIGIN_LENGTH\nERR_HTTP2_OUT_OF_STREAMS\nERR_HTTP2_PAYLOAD_FORBIDDEN\nERR_HTTP2_PING_CANCEL\nERR_HTTP2_PING_LENGTH\nERR_HTTP2_PSEUDOHEADER_NOT_ALLOWED\nERR_HTTP2_PUSH_DISABLED\nERR_HTTP2_SEND_FILE\nERR_HTTP2_SEND_FILE_NOSEEK\nERR_HTTP2_SESSION_ERROR\nERR_HTTP2_SETTINGS_CANCEL\nERR_HTTP2_SOCKET_BOUND\nERR_HTTP2_SOCKET_UNBOUND\nERR_HTTP2_STATUS_101\nERR_HTTP2_STATUS_INVALID\nERR_HTTP2_STREAM_CANCEL\nERR_HTTP2_STREAM_CLOSED\nERR_HTTP2_STREAM_ERROR\nERR_HTTP2_STREAM_SELF_DEPENDENCY\nERR_HTTP2_TRAILERS_ALREADY_SENT\nERR_HTTP2_TRAILERS_NOT_READY\nERR_HTTP2_UNSUPPORTED_PROTOCOL\nERR_HTTP_HEADERS_SENT\nERR_HTTP_INVALID_CHAR\nERR_HTTP_INVALID_HEADER_VALUE\nERR_HTTP_INVALID_STATUS_CODE\nERR_HTTP_REQUEST_TIMEOUT\nERR_HTTP_SOCKET_ENCODING\nERR_HTTP_TRAILER_INVALID\nERR_INCOMPATIBLE_OPTION_PAIR\nERR_INDEX_OUT_OF_RANGE\nERR_INPUT_TYPE_NOT_ALLOWED\nERR_INSPECTOR_ALREADY_ACTIVATED\nERR_INSPECTOR_ALREADY_CONNECTED\nERR_INSPECTOR_CLOSED\nERR_INSPECTOR_COMMAND\nERR_INSPECTOR_NOT_ACTIVE\nERR_INSPECTOR_NOT_AVAILABLE\nERR_INSPECTOR_NOT_CONNECTED\nERR_INSPECTOR_NOT_WORKER\nERR_INTERNAL_ASSERTION\nERR_INVALID_ADDRESS_FAMILY\nERR_INVALID_ARG_TYPE\nERR_INVALID_ARG_VALUE\nERR_INVALID_ASYNC_ID\nERR_INVALID_BUFFER_SIZE\nERR_INVALID_CALLBACK\nERR_INVALID_CHAR\nERR_INVALID_CURSOR_POS\nERR_INVALID_FD\nERR_INVALID_FD_TYPE\nERR_INVALID_FILE_URL_HOST\nERR_INVALID_FILE_URL_PATH\nERR_INVALID_HANDLE_TYPE\nERR_INVALID_HTTP_TOKEN\nERR_INVALID_IP_ADDRESS\nERR_INVALID_MODULE\nERR_INVALID_MODULE_SPECIFIER\nERR_INVALID_OPT_VALUE\nERR_INVALID_OPT_VALUE_ENCODING\nERR_INVALID_PACKAGE_CONFIG\nERR_INVALID_PACKAGE_TARGET\nERR_INVALID_PERFORMANCE_MARK\nERR_INVALID_PROTOCOL\nERR_INVALID_REPL_EVAL_CONFIG\nERR_INVALID_REPL_INPUT\nERR_INVALID_RETURN_PROPERTY\nERR_INVALID_RETURN_PROPERTY_VALUE\nERR_INVALID_RETURN_VALUE\nERR_INVALID_STATE\nERR_INVALID_SYNC_FORK_INPUT\nERR_INVALID_THIS\nERR_INVALID_TRANSFER_OBJECT\nERR_INVALID_TUPLE\nERR_INVALID_URI\nERR_INVALID_URL\nERR_INVALID_URL_SCHEME\nERR_IPC_CHANNEL_CLOSED\nERR_IPC_DISCONNECTED\nERR_IPC_ONE_PIPE\nERR_IPC_SYNC_FORK\nERR_MANIFEST_ASSERT_INTEGRITY\nERR_MANIFEST_DEPENDENCY_MISSING\nERR_MANIFEST_INTEGRITY_MISMATCH\nERR_MANIFEST_INVALID_RESOURCE_FIELD\nERR_MANIFEST_PARSE_POLICY\nERR_MANIFEST_TDZ\nERR_MANIFEST_UNKNOWN_ONERROR\nERR_MEMORY_ALLOCATION_FAILED\nERR_MESSAGE_TARGET_CONTEXT_UNAVAILABLE\nERR_METHOD_NOT_IMPLEMENTED\nERR_MISSING_ARGS\nERR_MISSING_MESSAGE_PORT_IN_TRANSFER_LIST\nERR_MISSING_OPTION\nERR_MISSING_PASSPHRASE\nERR_MISSING_PLATFORM_FOR_WORKER\nERR_MISSING_TRANSFERABLE_IN_TRANSFER_LIST\nERR_MODULE_NOT_FOUND\nERR_MULTIPLE_CALLBACK\nERR_NAPI_CONS_FUNCTION\nERR_NAPI_CONS_PROTOTYPE_OBJECT\nERR_NAPI_INVALID_DATAVIEW_ARGS\nERR_NAPI_INVALID_TYPEDARRAY_ALIGNMENT\nERR_NAPI_INVALID_TYPEDARRAY_LENGTH\nERR_NAPI_TSFN_CALL_JS\nERR_NAPI_TSFN_GET_UNDEFINED\nERR_NAPI_TSFN_START_IDLE_LOOP\nERR_NAPI_TSFN_STOP_IDLE_LOOP\nERR_NON_CONTEXT_AWARE_DISABLED\nERR_NO_CRYPTO\nERR_NO_ICU\nERR_NO_LONGER_SUPPORTED\nERR_OPERATION_FAILED\nERR_OUTOFMEMORY\nERR_OUT_OF_RANGE\nERR_PACKAGE_IMPORT_NOT_DEFINED\nERR_PACKAGE_PATH_NOT_EXPORTED\nERR_PARSE_HISTORY_DATA\nERR_PROTO_ACCESS\nERR_QUIC_FAILED_TO_CREATE_SESSION\nERR_QUIC_INVALID_REMOTE_TRANSPORT_PARAMS\nERR_QUIC_INVALID_TLS_SESSION_TICKET\nERR_QUIC_VERSION_NEGOTIATION\nERR_REQUIRE_ESM\nERR_SCRIPT_EXECUTION_INTERRUPTED\nERR_SCRIPT_EXECUTION_TIMEOUT\nERR_SERVER_ALREADY_LISTEN\nERR_SERVER_NOT_RUNNING\nERR_SOCKET_ALREADY_BOUND\nERR_SOCKET_BAD_BUFFER_SIZE\nERR_SOCKET_BAD_PORT\nERR_SOCKET_BAD_TYPE\nERR_SOCKET_BUFFER_SIZE\nERR_SOCKET_CANNOT_SEND\nERR_SOCKET_CLOSED\nERR_SOCKET_DGRAM_IS_CONNECTED\nERR_SOCKET_DGRAM_NOT_CONNECTED\nERR_SOCKET_DGRAM_NOT_RUNNING\nERR_SRI_PARSE\nERR_STDERR_CLOSE\nERR_STDOUT_CLOSE\nERR_STREAM_ALREADY_FINISHED\nERR_STREAM_CANNOT_PIPE\nERR_STREAM_DESTROYED\nERR_STREAM_NULL_VALUES\nERR_STREAM_PREMATURE_CLOSE\nERR_STREAM_PUSH_AFTER_EOF\nERR_STREAM_READ_NOT_IMPLEMENTED\nERR_STREAM_UNSHIFT_AFTER_END_EVENT\nERR_STREAM_WRAP\nERR_STREAM_WRITE_AFTER_END\nERR_STRING_TOO_LONG\nERR_SYNTHETIC\nERR_SYSTEM_ERROR\nERR_TLS_CERT_ALTNAME_INVALID\nERR_TLS_DH_PARAM_SIZE\nERR_TLS_HANDSHAKE_TIMEOUT\nERR_TLS_INVALID_CONTEXT\nERR_TLS_INVALID_PROTOCOL_METHOD\nERR_TLS_INVALID_PROTOCOL_VERSION\nERR_TLS_INVALID_STATE\nERR_TLS_PROTOCOL_VERSION_CONFLICT\nERR_TLS_PSK_SET_IDENTIY_HINT_FAILED\nERR_TLS_RENEGOTIATION_DISABLED\nERR_TLS_RENEGOTIATION_FAILED\nERR_TLS_REQUIRED_SERVER_NAME\nERR_TLS_SESSION_ATTACK\nERR_TLS_SNI_FROM_SERVER\nERR_TRACE_EVENTS_CATEGORY_REQUIRED\nERR_TRACE_EVENTS_UNAVAILABLE\nERR_TRANSFERRING_EXTERNALIZED_SHAREDARRAYBUFFER\nERR_TRANSFORM_ALREADY_TRANSFORMING\nERR_TRANSFORM_WITH_LENGTH_0\nERR_TTY_INIT_FAILED\nERR_UNAVAILABLE_DURING_EXIT\nERR_UNCAUGHT_EXCEPTION_CAPTURE_ALREADY_SET\nERR_UNESCAPED_CHARACTERS\nERR_UNHANDLED_ERROR\nERR_UNKNOWN_BUILTIN_MODULE\nERR_UNKNOWN_CREDENTIAL\nERR_UNKNOWN_ENCODING\nERR_UNKNOWN_FILE_EXTENSION\nERR_UNKNOWN_MODULE_FORMAT\nERR_UNKNOWN_SIGNAL\nERR_UNKNOWN_STDIN_TYPE\nERR_UNKNOWN_STREAM_TYPE\nERR_UNSUPPORTED_DIR_IMPORT\nERR_UNSUPPORTED_ESM_URL_SCHEME\nERR_V8BREAKITERATOR\nERR_VALID_PERFORMANCE_ENTRY_TYPE\nERR_VALUE_OUT_OF_RANGE\nERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING\nERR_VM_MODULE_ALREADY_LINKED\nERR_VM_MODULE_CACHED_DATA_REJECTED\nERR_VM_MODULE_CANNOT_CREATE_CACHED_DATA\nERR_VM_MODULE_DIFFERENT_CONTEXT\nERR_VM_MODULE_LINKING_ERRORED\nERR_VM_MODULE_NOT_LINKED\nERR_VM_MODULE_NOT_MODULE\nERR_VM_MODULE_STATUS\nERR_WASI_ALREADY_STARTED\nERR_WASI_NOT_STARTED\nERR_WORKER_INIT_FAILED\nERR_WORKER_INVALID_EXEC_ARGV\nERR_WORKER_NOT_RUNNING\nERR_WORKER_OUT_OF_MEMORY\nERR_WORKER_PATH\nERR_WORKER_UNSERIALIZABLE_ERROR\nERR_WORKER_UNSUPPORTED_EXTENSION\nERR_WORKER_UNSUPPORTED_OPERATION\nERR_ZLIB_BINDING_CLOSED\nERR_ZLIB_INITIALIZATION_FAILED\nETIMEDOUT\nError\nError.captureStackTrace()\nError.captureStackTrace(obj)\nError.captureStackTrace(targetObject[, constructorOpt])\nError.stackTraceLimit\nEventEmitter\nEventTarget\nFunction\nGOAWAY\nHPE_HEADER_OVERFLOW\nHPE_UNEXPECTED_CONTENT_LENGTH\nHash\nHttp2Session\nHttp2Stream\nHttp2Stream.prototype.respond()\nHttp2Stream.prototype.responseWithFile()\nMODULE_NOT_FOUND\nMessagePort\nN-API\nORIGIN\nObject.getPrototypeOf\nObject.prototype.__proto__\nObject.setPrototypeOf\nPromise\nQuicClientSession\nREPL\nRST_STREAM\nRangeError\nReferenceError\nSETTINGS\nSIGINT\nSTDIN\nSecureContext\nServer\nSharedArrayBuffer\nSyntaxError\nSystemError\nTLSv1\nTLSv1.1\nTLSv1.2\nTextDecoder()\nTrailer\nTransfer-Encoding: chunked\nTransform\nTypeError\nTypedArray\nURL\nURLSearchParams\nUint8Array\nWorker\nWritable\n[].forEach\n[name, value]\nabort()\naddress\nassert\nassert()\nassert.throws(block, message)\nasyncId\nblock\nbreakEvalOnSigint\nbuffer\nc-ares\ncachedData\ncallback\ncheetahify\nchild_process\ncipher.final()\ncipher.getAuthTag()\ncode\ncomputeSecret()\n```\n\n----------------------------------------\n\nTITLE: Object Literal Key-Value Pair Formatting in JavaScript\nDESCRIPTION: Examples of object literal key-value pair formatting with various spacing styles. These examples demonstrate both valid and invalid formatting according to ESLint rules.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/eslint/eslint/snapshot.txt#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nbcde: 42,\nijkl: 'Non-consecutive lines\n```\n\n----------------------------------------\n\nTITLE: Invalid typeof Comparisons in JavaScript\nDESCRIPTION: Examples of invalid typeof comparisons that would be flagged by ESLint's valid-typeof rule due to typos in the type string literals.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/eslint/eslint/snapshot.txt#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\ntypeof foo === \"strnig\"\ntypeof foo == \"undefimed\"\ntypeof bar != \"nunber\"\ntypeof bar !== \"fucntion\"\n```\n\n----------------------------------------\n\nTITLE: Building the Ada Project using gprbuild (Markdown)\nDESCRIPTION: Provides an example command within a Markdown file (readme.md) for building the Ada project defined by neo.gpr using the gprbuild tool. The -p flag creates necessary directories, and -P specifies the project file.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/AdaDoom3/AdaDoom3/snapshot.txt#_snippet_42\n\nLANGUAGE: shell\nCODE:\n```\n`gprbuild -p -P neo.gpr `\n```\n\n----------------------------------------\n\nTITLE: TypeScript Dictionary Reference Collection\nDESCRIPTION: Manages a collection of dictionary references used for spell checking, supporting dynamic updates and validation.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_29\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* DictionaryReferenceCollection class */\n```\n\n----------------------------------------\n\nTITLE: Annotated String Scope Breakdown for Nested Parentheses in JavaScript\nDESCRIPTION: This snippet shows a detailed scope annotation breakdown for the string \"line ( a (b))\". Each token is associated with one or more scope labels such as 'source.s', 'paren.braces.s', and 'braces.s', indicating how each part of the string is categorized within syntax analysis. It provides insight into multi-scope tokenization for nested structures used in syntax highlighting or parsing engines.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-grammar/fixtures/tokenizer-tests/test.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n| text      | scope                                                    |\n| --------- | -------------------------------------------------------- |\n| \"line \" | source.s                                                 |\n| \"(\"     | paren.braces.s braces.s source.s                         |\n| \" a \"   | braces.s source.s                                        |\n| \"(\"     | paren.braces.s braces.s paren.braces.s braces.s source.s |\n| \"b\"     | braces.s paren.braces.s braces.s source.s                |\n| \")\"     |                                                          |\n| \")\"     |                                                          |\n```\n\n----------------------------------------\n\nTITLE: Testing bytes multiplication in Python\nDESCRIPTION: Asserts that multiplying a bytes object by an integer correctly repeats the sequence of bytes. Tests both `bytes * int` and `int * bytes` forms.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_32\n\nLANGUAGE: python\nCODE:\n```\na = b'abcd'\nassert a * 3 == b'abcdabcdabcd'\nassert 3 * a == b'abcdabcdabcd'\n```\n\n----------------------------------------\n\nTITLE: Translating bytes objects\nDESCRIPTION: This snippet tests the `.translate()` method, which replaces bytes in a bytes object based on a translation table. It involves the `bytes.maketrans` method for table creation. Input is a bytes object; output is a translated bytes object.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nassert b\"hjhtuyjyujuyj\".translate(bytes.maketrans\n```\n\nLANGUAGE: python\nCODE:\n```\nb\"hjhtuyjyujuyj\".translate(bytes.maketrans\n```\n\nLANGUAGE: python\nCODE:\n```\nb\"hjhtuyjyujuyj\".translate(bytes.maketrans\n```\n\n----------------------------------------\n\nTITLE: HTTP Transport Creation in Go\nDESCRIPTION: Code snippet showing the creation of an HTTP transport object for proxying requests, including TLS configuration setup.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_62\n\nLANGUAGE: Go\nCODE:\n```\nnewtransport := &HTTPTransport{\n    // Transport properties initialization\n}\nnewtransport.Transport.TLSClientConfig\nreturn newtransport\n```\n\n----------------------------------------\n\nTITLE: Finding Substrings in Bytes\nDESCRIPTION: This snippet tests the `.find()` method of a bytes object. The function determines the starting index of a substring within the byte string. If the substring is not found, the function returns -1. Input is a bytes object; output is either an index or -1.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nassert b\"abcd\".find(b\"cdaaaaa\") == -1\n```\n\n----------------------------------------\n\nTITLE: TypeScript Logger Utility for Structured Logging\nDESCRIPTION: Logging utility that imports LogFactory and Logger from @wireapp/commons, providing namespaced and structured logging capabilities for debugging and monitoring within the application.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_129\n\nLANGUAGE: TypeScript\nCODE:\n```\nsrc/script/util/Logger.ts\n```\n\n----------------------------------------\n\nTITLE: TypeScript Cache: memorizeLastCall\nDESCRIPTION: Implements a cache to memorize the last function call and its result to optimize repeated calls with the same parameters.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_60\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-lib/src/lib/util/memorizeLastCall.ts\n```\n\n----------------------------------------\n\nTITLE: Installing hunspell-reader Library Dependencies (Shell)\nDESCRIPTION: Installs the `hunspell-reader` library and its required peer dependency `rxjs` (version 5.0 specifically) into a Node.js project using npm. The `-S` flag saves them as production dependencies in `package.json`.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/hunspell-reader/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ninstall -S hunspell-reader rxjs\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Remove vitest dependency\nDESCRIPTION: This entry describes the removal of `vitest` as a dependency from the project. The fix likely streamlined the build process and potentially reduced the package size or improved dependency management. This adjustment was done in response to issue [#4031](https://github.com/streetsidesoftware/cspell/issues/4031).\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-config-lib/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Using Yaz Methods\nDESCRIPTION: This snippet demonstrates Yaz methods. Yaz provides functions for querying and interacting with Z39.50 servers. The functions included encompass connecting, searching, and retrieving results, requiring the Yaz extension.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/php.txt#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nyaz_addinfo\nyaz_ccl_conf\nyaz_ccl_parse\nyaz_close\nyaz_connect\nyaz_database\nyaz_element\nyaz_errno\nyaz_error\nyaz_es\nyaz_es_result\nyaz_get_option\nyaz_hits\nyaz_itemorder\nyaz_present\nyaz_range\nyaz_record\nyaz_scan\nyaz_scan_result\nyaz_schema\nyaz_search\nyaz_set_option\nyaz_sort\nyaz_syntax\nyaz_wait\n```\n\n----------------------------------------\n\nTITLE: Mathematical Proofs and Theory in LaTeX\nDESCRIPTION: The snippets include detailed mathematical statements, theorem environments, and references to convergence, Lipschitz continuity, and other analysis concepts, primarily written in German. The code uses typical LaTeX math environments and custom commands for definitions and theorems.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/MartinThoma/LaTeX-examples/snapshot.txt#_snippet_8\n\nLANGUAGE: LaTeX\nCODE:\n```\n% Proof environments and mathematical formulas\n\\begin{theorem}\nLet f be Lipschitz continuous...\n\\end{theorem}\n```\n\n----------------------------------------\n\nTITLE: Excluding words support in cspell-tools\nDESCRIPTION: This bug fix enables the exclusion of specific words within the cspell-tools package. This enhancement expands the customization options for spell checking by allowing users to define exceptions to the standard dictionary.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell/test-cspell-esbuild-cjs/CHANGELOG.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncspell-tools - support excluding words ([#5140](https://github.com/streetsidesoftware/cspell/issues/5140)) ([3fcdd89](https://github.com/streetsidesoftware/cspell/commit/3fcdd89fb319b659d218067c5366e02d036be59f))\n```\n\n----------------------------------------\n\nTITLE: Using Enhanced `flagWords` in JSON Configuration\nDESCRIPTION: Example demonstrating how to use the enhanced `flagWords` syntax within a CSpell JSON configuration file. Shows forbidding a word ('crap') and providing single ('hte', 'the') or multiple suggestions ('accension', 'accession', 'ascension') using arrays.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/rfc/rfc-0001 suggestions/README.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"flagWords\": [\n  \"crap\",\n  [\"hte\", \"the\"],\n  [\"acadmic\", \"academic\"],\n  [\"accension\", \"accession\", \"ascension\"]\n]\n```\n\n----------------------------------------\n\nTITLE: Brute Force Caear Cipher Decryption in Python\nDESCRIPTION: Performs brute-force decryption of Caesar cipher texts by iterating through possible keys and displaying the resulting plaintext. Useful for cryptanalysis of simple shift ciphers without knowing the key beforehand, relies on string rotation or shifting methods.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nQJABQRU\n```\n\nLANGUAGE: Python\nCODE:\n```\nMJASR\n```\n\nLANGUAGE: Python\nCODE:\n```\nPIZAPQT\n```\n\nLANGUAGE: Python\nCODE:\n```\nLIZRQ\n```\n\nLANGUAGE: Python\nCODE:\n```\nOHYZOPS\n```\n\nLANGUAGE: Python\nCODE:\n```\nKHYQP\n```\n\nLANGUAGE: Python\nCODE:\n```\nNGXYNOR\n```\n\nLANGUAGE: Python\nCODE:\n```\nJGXPO\n```\n\nLANGUAGE: Python\nCODE:\n```\nMFWXMNQ\n```\n\nLANGUAGE: Python\nCODE:\n```\nIFWON\n```\n\nLANGUAGE: Python\nCODE:\n```\nLEVWLMP\n```\n\nLANGUAGE: Python\nCODE:\n```\nHEVNM\n```\n\nLANGUAGE: Python\nCODE:\n```\nKDUVKLO\n```\n\nLANGUAGE: Python\nCODE:\n```\nGDUML\n```\n\nLANGUAGE: Python\nCODE:\n```\nJCTUJKN\n```\n\nLANGUAGE: Python\nCODE:\n```\nFCTLK\n```\n\nLANGUAGE: Python\nCODE:\n```\nIBSTIJM\n```\n\nLANGUAGE: Python\nCODE:\n```\nEBSKJ\n```\n\nLANGUAGE: Python\nCODE:\n```\nHARSHIL\n```\n\nLANGUAGE: Python\nCODE:\n```\nDARJI\n```\n\nLANGUAGE: Python\nCODE:\n```\nGZQRGHK\n```\n\nLANGUAGE: Python\nCODE:\n```\nCZQIH\n```\n\nLANGUAGE: Python\nCODE:\n```\nFYPQFGJ\n```\n\nLANGUAGE: Python\nCODE:\n```\nBYPHG\n```\n\nLANGUAGE: Python\nCODE:\n```\nEXOPEFI\n```\n\nLANGUAGE: Python\nCODE:\n```\nAXOGF\n```\n\nLANGUAGE: Python\nCODE:\n```\nDWNODEH\n```\n\nLANGUAGE: Python\nCODE:\n```\nZWNFE\n```\n\nLANGUAGE: Python\nCODE:\n```\nCVMNCDG\n```\n\nLANGUAGE: Python\nCODE:\n```\nYVMED\n```\n\nLANGUAGE: Python\nCODE:\n```\nBULMBCF\n```\n\nLANGUAGE: Python\nCODE:\n```\nXULDC\n```\n\nLANGUAGE: Python\nCODE:\n```\nATKLABE\n```\n\nLANGUAGE: Python\nCODE:\n```\nWTKCB\n```\n\nLANGUAGE: Python\nCODE:\n```\nZSJKZAD\n```\n\nLANGUAGE: Python\nCODE:\n```\nVSJBA\n```\n\nLANGUAGE: Python\nCODE:\n```\nYRIJYZC\n```\n\nLANGUAGE: Python\nCODE:\n```\nURIAZ\n```\n\nLANGUAGE: Python\nCODE:\n```\nXQHIXYB\n```\n\nLANGUAGE: Python\nCODE:\n```\nTQHZY\n```\n\nLANGUAGE: Python\nCODE:\n```\nWPGHWXA\n```\n\nLANGUAGE: Python\nCODE:\n```\nSPGYX\n```\n\nLANGUAGE: Python\nCODE:\n```\nVOFGVWZ\n```\n\nLANGUAGE: Python\nCODE:\n```\nROFXW\n```\n\nLANGUAGE: Python\nCODE:\n```\nUNEFUVY\n```\n\nLANGUAGE: Python\nCODE:\n```\nQNEWV\n```\n\n----------------------------------------\n\nTITLE: Knot and Hashing Algorithms in Documentation\nDESCRIPTION: Contains references to the Lacunary matrix, but no executable code. Focuses on cryptographic and mathematical algorithms, useful for algorithm selection and understanding in secure communications.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_26\n\nLANGUAGE: Markdown\nCODE:\n```\nindex.md:2:5       - Unknown word (toctree)    -- ```{toctree}\n```\n\n----------------------------------------\n\nTITLE: Message List and System Variable Handling (C)\nDESCRIPTION: Uses variables 'Hassysaxs', 'RSMDEL', and message flags for managing system-specific message properties and audit trails. These support message editing and permission controls.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_46\n\nLANGUAGE: C\nCODE:\n```\nif (msg->flags & MSF_CANTMOD ...); printf (\"CHANNEL\"), AUDIT (RSMDEL);\n```\n\n----------------------------------------\n\nTITLE: Testing pow() with large exponents and float modulo in Python\nDESCRIPTION: Calculates 5 raised to the power of `n` as a float (`fiveto`), determines the expected result based on `fiveto % 2.0`, and asserts that `pow(a, fiveto)` equals the expected value using an equality comparison function `eq` (presumably defined elsewhere). This likely tests floating-point precision and behavior with large exponents.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_37\n\nLANGUAGE: python\nCODE:\n```\n# Assuming 'n', 'a', and 'eq' are defined elsewhere\nfiveto = float(5 ** n)\n# For small n, fiveto will be odd. Eventually it loses mantissa bits, though, and thereafer fiveto will be even.\nexpected = fiveto % 2.0 and -1.0 or 1.0 # Corrected logic based on typical float behavior\neq(pow(a, fiveto), expected)\n```\n\n----------------------------------------\n\nTITLE: Joining bytes with string literals\nDESCRIPTION: This snippet creates byte strings by joining string literals using the + operator.  The assertions verify the expected combined values.  Input consists of string literals, output is a concatenated byte object.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nb\"123\" + b\"abc\" + b\"xyz\" == b\"123abcxyz\"\n```\n\n----------------------------------------\n\nTITLE: Searching for a Word with a Specific Language ID using `cspell trace`\nDESCRIPTION: Demonstrates using the `cspell trace` command to search for the word \"errorcode\", specifically forcing the language context to C++ (`--languageId=cpp`). This example illustrates how the `--languageId` option influences the search, potentially enabling features like compound word checking.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/dictionaries/searching-dictionaries.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncspell trace --languageId=cpp \"errorcode\"\n```\n\n----------------------------------------\n\nTITLE: TypeScript Test Cases for Entropy Calculations\nDESCRIPTION: Test suite verifying the correctness of entropy calculations, delta values, and random data generation. It uses complex annotations and references to CSPRNG and various data inputs, ensuring mathematical and statistical functions behave as expected.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_122\n\nLANGUAGE: TypeScript\nCODE:\n```\nsrc/script/util/Entropy.test.ts\n```\n\n----------------------------------------\n\nTITLE: Specifying Dictionaries per File via Comments (JavaScript)\nDESCRIPTION: Demonstrates using a `cspell:` comment directive within a JavaScript file to specify which dictionaries (e.g., 'lorem-ipsum') should be used for spell checking that specific file. This directive applies to the entire file it's placed in.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// cspell:dictionaries lorem-ipsum\nconst companyName = 'Lorem ipsum dolor sit amet';\n```\n\n----------------------------------------\n\nTITLE: Defining Recma Plugins Array (JavaScript)\nDESCRIPTION: Initializes an empty array called 'recmaPlugins' used to store plugins for processing MDX content with Recma. This structure allows dynamic plugin configuration based on show conditions, facilitating transformations like 'esast' or 'mdast'.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/mdx-js/mdx/snapshot.txt#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst recmaPlugins = []\n```\n\n----------------------------------------\n\nTITLE: Improving performance by reducing FS requests\nDESCRIPTION: This bug fix improves the performance of cspell by reducing the number of file system requests. This optimization can lead to faster spell checking times, especially for larger projects.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell/test-cspell-esbuild-cjs/CHANGELOG.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nImprove performance by reducing FS requests ([#5103](https://github.com/streetsidesoftware/cspell/issues/5103)) ([3f31569](https://github.com/streetsidesoftware/cspell/commit/3f31569a43b9ae0f21e90d84db57f87a2cb4f6dd))\n```\n\n----------------------------------------\n\nTITLE: Internationalization Test String References in Dart\nDESCRIPTION: Code snippets containing non-English strings and Unicode characters used for testing internationalization support in the Dart runtime.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/dart-lang/sdk/snapshot.txt#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nstringLatin1 = \"blåbærgrød\";\n```\n\nLANGUAGE: Dart\nCODE:\n```\nstringUnicode = \"Îñţérñåţîöñåļîžåţîờñ\";\n```\n\nLANGUAGE: Dart\nCODE:\n```\nstringHebrew = \"שלום רב שובך צפורה נחמדת\"; // An example of Right\n```\n\nLANGUAGE: Dart\nCODE:\n```\naddInstance(\"blåbæ\\u{0}rgrød\"); // Internal NUL\n```\n\nLANGUAGE: Dart\nCODE:\n```\naddInstance(\"Îñţérñåţîö\\u{0}ñåļîžåţîờñ\"); // Internal NUL\n```\n\n----------------------------------------\n\nTITLE: JSX Runtime Imports with React\nDESCRIPTION: JavaScript code showing imports from React's JSX runtime. This pattern is used in compiled MDX files to handle JSX transformation.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/mdx-js/mdx/snapshot.txt#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Fragment, jsx as _jsx, jsxs as _jsxs} from 'react/jsx-runtime'\n```\n\n----------------------------------------\n\nTITLE: Removing markdown description from types\nDESCRIPTION: This bug fix removes `[@markdown](https://github.com/markdown)Description` from types. This likely removes markdown-related metadata from type definitions.  This would likely be done to simplify type definitions or to resolve issues related to markdown parsing within the type system.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/CHANGELOG.md#_snippet_4\n\nLANGUAGE: git\nCODE:\n```\nRemove `[@markdown](https://github.com/markdown)Description` from types ([#4818](https://github.com/streetsidesoftware/cspell/issues/4818)) ([3ba8eed](https://github.com/streetsidesoftware/cspell/commit/3ba8eed8588aafa3dcb401acb96e4fdc82811d24))\n```\n\n----------------------------------------\n\nTITLE: Reversing bytearrays with assertions\nDESCRIPTION: This snippet defines a bytearray and reverses it, checking the reversed content by assertion.  The input is the original bytearray, and the output is the assertion result based on the reversed content.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nassert a == bytearray(b'abdabcd')\n```\n\nLANGUAGE: python\nCODE:\n```\nassert a == bytearray(b'dlrow ,olleh')\n```\n\n----------------------------------------\n\nTITLE: Testing Replace Bytes\nDESCRIPTION: This snippet tests the `.replace()` method on bytes objects.  This method replaces occurrences of a substring with another substring. Input consists of original and new byte strings, output is replaced bytes object.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nbytearray(b\"x\")) == b\"xkokx\"\n```\n\nLANGUAGE: python\nCODE:\n```\nbytearray(b\"x\")) == b\"kokxx\"\n```\n\nLANGUAGE: python\nCODE:\n```\nbytearray(b\"x\")) == b\"xxkok\"\n```\n\n----------------------------------------\n\nTITLE: Testing IDNA decoding in Python\nDESCRIPTION: Asserts the correct Internationalized Domain Names in Applications (IDNA) decoding of Punycode-encoded byte strings back to their Unicode representation using `bytes.decode('idna')`. Tests strings with and without trailing dots.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_48\n\nLANGUAGE: python\nCODE:\n```\nassert b\"xn--pythn-mua.org\".decode(\"idna\") == \"pýtĥöñ.org\"\nassert b\"xn--pythn-mua.org.\".decode(\"idna\") == \"pýtĥöñ.org.\"\n```\n\n----------------------------------------\n\nTITLE: Using Yar Client Methods\nDESCRIPTION: This snippet shows the usage of Yar Client methods for RPC communication. It includes `setOpt`, `__call`, and the constructor. These are crucial for setting options and executing RPC calls, and the Yar extension is required. `__call` is a magic method handling method calls.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/php.txt#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nYar_Client::setOpt\nYar_Client::__call\nYar_Client::__construct\n```\n\n----------------------------------------\n\nTITLE: Example Configuration for ignoreRegExpList in YAML\nDESCRIPTION: An example YAML snippet demonstrating how to configure ignoreRegExpList with pattern references and plain regular expressions for excluding certain patterns such as emails and FTP URLs from spell checking. It highlights pattern inclusion and the use of inline regex.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/Configuration/patterns.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nignoreRegExpList:\n  - Email\n  - >-\n    /ftp:[^\\s]*/g\n```\n\n----------------------------------------\n\nTITLE: Importing Caddy server modules in Go\nDESCRIPTION: This code snippet showcases import statements for various Caddy server modules, including caddyconfig, caddyfile, caddyhttp, and modules related to TLS and PKI, necessary for the server's extended functionalities.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_92\n\nLANGUAGE: Go\nCODE:\n```\n_ \"github.com/caddyserver/caddy/v2/caddyconfig\"\n_ \"github.com/caddyserver/caddy/v2/caddyconfig/caddyfile\"\n_ \"github.com/caddyserver/caddy/v2/modules/caddyhttp\"\n```\n\n----------------------------------------\n\nTITLE: Release Documentation Typo Detections\nDESCRIPTION: Unknown words flagged by CSpell in release and package management documentation files. These include package management terms like conandata, portfile, and version tagging formats.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/googleapis/google-cloud-cpp/snapshot.txt#_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\nGet to your clone of vckpkg\nports/google-cloud-cpp/portfile.cmake\ngoogle-cloud-cpp/2.x/conandata.yml\ngoogle-cloud-cpp/2.x/conanfile.py\nuse `TAG=2.15.1` and `UTAG=2_15_1` and `LATEST\nio. Run the command agan if needed.\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Dictionary Word List - Text\nDESCRIPTION: This snippet shows an example of a custom word list file named `custom-words.txt`. This file contains a list of words, one per line, that are to be considered valid spellings. The word list can also contain comments and forbidden words.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/dictionaries/custom-dictionaries.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n# This is a comment\n!forbiddenword\nthese\nare\nmy\nfavorite\nwords\n```\n\n----------------------------------------\n\nTITLE: Upgrade Java Dictionary\nDESCRIPTION: This feature involves upgrading the Java Dictionary.  The Java Dictionary contains words and terms specific to the Java programming language.  Upgrading will likely include more up-to-date Java-related terms,  improving the spell checker's ability to identify Java code or documentation.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-glob/CHANGELOG.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Fixing export of SpellingDictionaryCollection\nDESCRIPTION: This snippet fixes the export of `SpellingDictionaryCollection`. The fix ensures that the `SpellingDictionaryCollection` class is correctly exported, allowing other modules to use it. It addresses issue #3683.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-tools/CHANGELOG.md#_snippet_9\n\nLANGUAGE: TEXT\nCODE:\n```\n* Fix export of SpellingDictionaryCollection ([#3683](https://github.com/streetsidesoftware/cspell/issues/3683)) ([7665cdb](https://github.com/streetsidesoftware/cspell/commit/7665cdba702ebf9517a3c1c1008193e239a829d4))\n```\n\n----------------------------------------\n\nTITLE: Testing bytes.translate() in Python\nDESCRIPTION: Asserts the correct behavior of the `bytes.translate()` method in Python. It tests translation using a mapping table created with `bytes.maketrans` and translation with character deletion.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nassert b\"hjhtuyjyujuyj\".translate(bytes.maketrans(b\"hj\", b\"ab\")) == b\"abatuybyubuyb\"\nassert b\"hjhtuyfjtyhuhjuyj\".translate(None, b\"ht\") == b\"juyfjyujuyj\"\nassert b\"hjhtuyfjtyhuhjuyj\".translate(None, delete=b\"ht\") == b\"juyfjyujuyj\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Processes using Shell\nDESCRIPTION: Illustrates using a shell pipeline to list all running processes ('ps ax') and filter the output for lines containing 'ssh' using 'grep'. This pattern is commonly used for process inspection and can be executed via Node.js `child_process`.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/node.txt#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nps ax | grep ssh\n```\n\n----------------------------------------\n\nTITLE: Fix SpellingDictionaryCollection Export\nDESCRIPTION: This entry describes a bug fix where the `SpellingDictionaryCollection` export was fixed. This suggests there was a problem with the module's public API related to the  `SpellingDictionaryCollection`. The fix ensures the class can be properly imported and used by other modules.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-glob/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: HTML Element Names in DOM Validator\nDESCRIPTION: A list of HTML element names that were flagged as unknown words in the HTML5NodeValidator class. These are valid HTML tags used for DOM validation.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/dart-lang/sdk/snapshot.txt#_snippet_12\n\nLANGUAGE: Dart\nCODE:\n```\n'COLGROUP',\n'DATALIST',\n'FIELDSET',\n'FIGCAPTION',\n'HGROUP',\n'NOBR',\n'OPTGROUP',\n'SAMP'\n```\n\n----------------------------------------\n\nTITLE: Unmarshaling Caddyfile Metrics Options in Go\nDESCRIPTION: This snippet defines a function that unmarshals metrics-related options from a Caddyfile dispenser into the Caddy server's internal metrics structure. It requires the 'caddyfile' package for parsing and 'caddyhttp.Metrics' struct to populate. The function interprets tokens representing metric settings, validates them, and outputs a populated metrics configuration or an error. Inputs include the dispenser providing the Caddyfile tokens, and output is the metrics configuration struct.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nfunc unmarshalCaddyfileMetricsOptions(d *caddyfile.Dispenser) (any, error) {\n    metrics := new(caddyhttp.Metrics)\n    // Parse the metrics options from the dispenser\n    // Perform validation of metrics related directives\n    return metrics, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Error and Module Handling in Caddyfile Parsing (Go)\nDESCRIPTION: This code snippet deals with error handling during the parsing of Caddyfiles and module unmarshalling. It includes functions that return formatted error messages and process module configurations, dependencies, and source data in the context of Caddy server configuration.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_51\n\nLANGUAGE: Go\nCODE:\n```\nreturn d.Errf(\"for now, all proxy\")\n```\n\nLANGUAGE: Go\nCODE:\n```\nunm, err := caddyfile.UnmarshalModule(d, modID)\n```\n\nLANGUAGE: Go\nCODE:\n```\nreturn d.Errf(\"module %s (%T) is not\", modID, source)\n```\n\nLANGUAGE: Go\nCODE:\n```\nSelectionPolicyRaw = caddyconfig.JSONModuleObject(sel, \"\", nil)\n```\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/caddyserver/caddy/v2\"\n```\n\n----------------------------------------\n\nTITLE: Handling Users Not Part of Conversation\nDESCRIPTION: Logic to check and handle users who are not part of a conversation. Flagged for the misspelled term 'Partof' which should likely be 'PartOf'.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_83\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst usersNotPartofConversation = qualifiedUserId\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nif (usersNotPartofConversation) {\n```\n\n----------------------------------------\n\nTITLE: Embedded JSON Object in Markdown Block\nDESCRIPTION: This snippet contains a JSON object embedded inside a markdown fenced code block nested within markdown code blocks. It demonstrates typical JSON object structure with fields for `num` and `string`, showing use of embedded JSON in documentation or markdown examples.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-grammar/samples/sample.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"field\": { \"num\": 0, \"string\": \"hello\" }\n```\n\n----------------------------------------\n\nTITLE: Compressed Trie Representation Example\nDESCRIPTION: Demonstrates how the conceptual operations translate into a compressed Trie data structure, representing the original word list.  Each character is a node, and the structure uses special characters such as `$` to indicate end of word.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-trie-lib/README.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\njoust$er$<2ing$<6y$ful$ler$<st$\n```\n\n----------------------------------------\n\nTITLE: Python Blender/Bmesh Operations in STK Track Script\nDESCRIPTION: Code snippets related to Blender's bmesh module for mesh manipulation in the SuperTuxKart track export script. These snippets handle 3D mesh editing operations for creating track features.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/AdaDoom3/AdaDoom3/snapshot.txt#_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nlog_error('import bmesh')\nlog_error('bm = bmesh.from_edit_mesh(me)')\nlog_error('bmesh.update_edit_mesh(me')\nfor vert in face.verts:\n```\n\n----------------------------------------\n\nTITLE: Using cspell-dictionary Module\nDESCRIPTION: This snippet integrates the `cspell-dictionary` module into CSpell. Using this module likely improves the organization and management of dictionaries used by the spell checker. It addresses issue #3686.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-tools/CHANGELOG.md#_snippet_8\n\nLANGUAGE: TEXT\nCODE:\n```\n* Use cspell-dictionary Module ([#3686](https://github.com/streetsidesoftware/cspell/issues/3686)) ([6441f4b](https://github.com/streetsidesoftware/cspell/commit/6441f4b41fe0e8b8188fa4c08999450c8958b6f0))\n```\n\n----------------------------------------\n\nTITLE: Giphy Integration Repository Implementation\nDESCRIPTION: Implementation of the GiphyRepository class that handles Giphy integration with methods for retrieving GIFs. It uses the GiphyService for actual API interactions.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_84\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class GiphyRepository {\n    private readonly giphyService: GiphyService;\n\n    constructor(giphyService: GiphyService) {\n        this.giphyService = giphyService;\n    }\n\n    async getGifs(query: string, options) {\n        // Implementation details\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Decompression Error Handling in Email Module (C)\nDESCRIPTION: Handles failure cases for decompressing emails with a function that logs fatal system errors if decompression fails. This improves robustness by detecting and reporting critical failures during message decompression processes.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_40\n\nLANGUAGE: C\nCODE:\n```\nfatal_sys (\"Unable to move decompressmsged message.\");\n```\n\n----------------------------------------\n\nTITLE: Add option to not auto stem during split\nDESCRIPTION: This bug fix introduces an option to disable auto-stemming during the split operation. Users can control stemming behavior during word splitting.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-strong-weak-map/test-cspell-strong-weak-map/CHANGELOG.md#_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nAdd option to not auto stem during split ([#4310](https://github.com/streetsidesoftware/cspell/issues/4310)) ([23059da](https://github.com/streetsidesoftware/cspell/commit/23059dafd9ead91ef67cadf78a368e924b3436f6))\n```\n\n----------------------------------------\n\nTITLE: Declaring OpenAL Effect Parameter Functions (C)\nDESCRIPTION: Declares C functions for setting OpenAL effect parameters using integer scalar (`alEffecti`) and integer vector (`alEffectiv`) values. These are part of the core EFX extension API.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/AdaDoom3/AdaDoom3/snapshot.txt#_snippet_11\n\nLANGUAGE: c\nCODE:\n```\nAL_API ALvoid AL_APIENTRY alEffecti(ALuint effect, ALenum param, ALint value);\n```\n\nLANGUAGE: c\nCODE:\n```\nAL_API ALvoid AL_APIENTRY alEffectiv(ALuint effect, ALenum param, const ALint *values);\n```\n\n----------------------------------------\n\nTITLE: Adding Forbidden Words via flagWords in cspell Configuration - JSON\nDESCRIPTION: Illustrates using the dedicated 'flagWords' section in a cspell configuration file (e.g., JSON) to list words that should always be considered incorrect. This provides a clear way to define words that are not allowed in the project.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/CHANGELOG.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n\"flagWords\": [\"forbiddenWord\"]\n```\n\n----------------------------------------\n\nTITLE: Base32 Encoding and Decoding in Python\nDESCRIPTION: Provides functions for encoding data into Base32 format and decoding Base32 strings back into binary data, using Python's built-in encoding utilities. Handles unknown words representing Base32 encoded blocks for cryptographic or data transmission purposes.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nb'JBSWY3DPEBLW64TMMQQQ===='\n```\n\nLANGUAGE: Python\nCODE:\n```\nb'JBSWY3DPEBLW64TMMQQQ===='\n```\n\nLANGUAGE: Python\nCODE:\n```\nb'GEZDGNBVGY======''\n```\n\nLANGUAGE: Python\nCODE:\n```\nb'ONXW2ZJANRXW4ZZAMNXW24DMMV4CA43UOJUW'\n```\n\nLANGUAGE: Python\nCODE:\n```\nb'ONXW2ZJANRXW4ZZAMNXW24DMMV4CA43UOJUW4ZY='\n```\n\nLANGUAGE: Python\nCODE:\n```\nONXW2ZJANRXW4ZZAMNXW24DMMV4CA43UOJUW4ZY='\n```\n\nLANGUAGE: Python\nCODE:\n```\nb'ONXW2ZJANRXW4ZZAMNXW24DMMV4CA43UOJUW'\n```\n\n----------------------------------------\n\nTITLE: Unknown ARIA Roles in Svelte Component Tests\nDESCRIPTION: Examples of Svelte components using custom or uncommon ARIA roles that are flagged as unknown words by CSpell. These include doc-pagelist, doc-pullquote, and other accessibility-related attributes.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/sveltejs/svelte/snapshot.txt#_snippet_33\n\nLANGUAGE: svelte\nCODE:\n```\n<div role=\"doc-pagelist\" aria-modal=\"true\">\n<div role=\"doc-pullquote\" aria-rowcount=\"0\">\n```\n\n----------------------------------------\n\nTITLE: Dart FFI and Special Type References\nDESCRIPTION: Code snippets showing function declarations and type references related to Dart FFI (Foreign Function Interface) and specialized data types used in the codebase.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/dart-lang/sdk/snapshot.txt#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nffi.DynamicLibrary dlopenPlatformSpecific(String\n```\n\nLANGUAGE: Dart\nCODE:\n```\nstatic const BYTEDATA = DartType._withName\n```\n\nLANGUAGE: Dart\nCODE:\n```\nstatic const TYPEDDATA = DartType._withName\n```\n\nLANGUAGE: Dart\nCODE:\n```\nstatic const UINT8CLAMPEDLIST: uint8ClampedListLibs\n```\n\nLANGUAGE: Dart\nCODE:\n```\nstatic const ffiapi = '''\n```\n\nLANGUAGE: Dart\nCODE:\n```\nUndenaryOp sumManyIntsOdd = ffiTestFun\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Update dictionaries\nDESCRIPTION: This entry indicates an update to the dictionaries used by the spell checker. This likely involves adding new words, removing obsolete ones, or correcting existing entries within the dictionaries. This fix relates to issue [#3795](https://github.com/streetsidesoftware/cspell/issues/3795).\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-config-lib/CHANGELOG.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Improving performance by reducing FS requests\nDESCRIPTION: This bug fix improves performance by reducing the number of file system requests.  This is a general performance optimization that improves efficiency of the cspell tool. No dependencies are mentioned specifically.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/CHANGELOG.md#_snippet_1\n\nLANGUAGE: git\nCODE:\n```\nImprove performance by reducing FS requests ([#5103](https://github.com/streetsidesoftware/cspell/issues/5103)) ([3f31569](https://github.com/streetsidesoftware/cspell/commit/3f31569a43b9ae0f21e90d84db57f87a2cb4f6dd))\n```\n\n----------------------------------------\n\nTITLE: SDBM Hash Algorithm Implementation in Python\nDESCRIPTION: Implements the sdbm hash function, used for string hashing and database indexing. Dependencies include string processing; input is a string; output is a hash value. Common in legacy systems.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_24\n\nLANGUAGE: Python\nCODE:\n```\nhashes/sdbm.py:2:32      - Unknown word (sdbm)       -- algorithm was created for sdbm (a public-domain reimplementa\n```\n\n----------------------------------------\n\nTITLE: Defining STK Object Parameters in XML\nDESCRIPTION: Defines various parameters for SuperTuxKart game objects using XML elements like EnumChoice, FloatProp, and ObjRefProp within stk_object_parameters.xml. Includes properties related to cameras (cutscene_camera), sound effects (sfx_rolloff), triggers (re-triggerable), cannon mechanics (cannonstart, cannonend, cannonpath, cannonspeed), drivelines, checklines, and navigation meshes (navmesh).\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/AdaDoom3/AdaDoom3/snapshot.txt#_snippet_39\n\nLANGUAGE: xml\nCODE:\n```\n<EnumChoice id=\"cutscene_camera\" label=\"Cutscene\n```\n\nLANGUAGE: xml\nCODE:\n```\ncutscene_camera\" label=\"Cutscene camera\" doc=\"Use only\n```\n\nLANGUAGE: xml\nCODE:\n```\ncamera\" doc=\"Use only in cutscenes\" >\n```\n\nLANGUAGE: xml\nCODE:\n```\n<FloatProp id=\"sfx_rolloff\" name=\"Rolloff rate\n```\n\nLANGUAGE: xml\nCODE:\n```\n\"sfx_rolloff\" name=\"Rolloff rate\" default=\"0.1\"\n```\n\nLANGUAGE: xml\nCODE:\n```\nto make it always re-triggerable, 999999.9 to make it\n```\n\nLANGUAGE: xml\nCODE:\n```\n<EnumChoice id=\"cannonstart\" label=\"Cannon Start\n```\n\nLANGUAGE: xml\nCODE:\n```\n<ObjRefProp id=\"cannonend\" name=\"Flight end line\n```\n\nLANGUAGE: xml\nCODE:\n```\no and o['type'] == 'cannonend'\"\n```\n\nLANGUAGE: xml\nCODE:\n```\n<ObjRefProp id=\"cannonpath\" name=\"Path\" default\n```\n\nLANGUAGE: xml\nCODE:\n```\n<FloatProp id=\"cannonspeed\" name=\"Speed\" default\n```\n\nLANGUAGE: xml\nCODE:\n```\n<EnumChoice id=\"cannonend\" label=\"Cannon End\"\n```\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Drivelines and checklines -->\n```\n\nLANGUAGE: xml\nCODE:\n```\n<EnumChoice id=\"check\" label=\"Checkline\" doc=\"A checkline that\n```\n\nLANGUAGE: xml\nCODE:\n```\n\"\" doc=\"Name of the checkline\"/>\n```\n\nLANGUAGE: xml\nCODE:\n```\nactivate when crossing this checkline\"/>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<EnumChoice id=\"maindriveline\" label=\"Driveline (main\n```\n\nLANGUAGE: xml\nCODE:\n```\n<EnumChoice id=\"navmesh\" label=\"Navmesh\" doc\n```\n\nLANGUAGE: xml\nCODE:\n```\nid=\"navmesh\" label=\"Navmesh\" doc=\"Navmesh (for battle\n```\n\nLANGUAGE: xml\nCODE:\n```\nlabel=\"Navmesh\" doc=\"Navmesh (for battle arenas)\n```\n\nLANGUAGE: xml\nCODE:\n```\n\"The player will be resetted when touching this object\n```\n\n----------------------------------------\n\nTITLE: Identifying Unknown Words in TypeHelper.cs\nDESCRIPTION: This line identifies an unknown word, `mscorlib`, within the TypeHelper.cs file. It appears to be part of a list of strings.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/aspnetboilerplate/aspnetboilerplate/snapshot.txt#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/Reflection/TypeHelper.cs:14:97     - Unknown word (mscorlib)   -- new List<string> { \"mscorlib\", \"System.Private.CoreLib\n```\n\n----------------------------------------\n\nTITLE: Parsing SPM File Headers and Setting Format Flags in Python\nDESCRIPTION: This snippet reads the header of an SPM file to identify format type (e.g., SPMS, SPMA, SPMN) and sets flags such as 'skinned' and 'read_vcolor' based on bits in the header. This parsing is essential for deciding how to process mesh data such as vertex colors or skinning information. Inputs are raw file data bytes; outputs are boolean flags controlling import pipeline.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/AdaDoom3/AdaDoom3/snapshot.txt#_snippet_27\n\nLANGUAGE: Python\nCODE:\n```\nheader = \"SPMS\"  # or \"SPMA\", \"SPMN\"\nread_vcolor = (byte >> 1) & 0x01\nskinned = (header == \"SPMA\")\n```\n\n----------------------------------------\n\nTITLE: yylval Macro Definition (C)\nDESCRIPTION: This snippet defines a macro `yylval` to be `__gettextlval`. This renames the standard `yylval` function, possibly to avoid naming conflicts or to integrate it with a gettext internationalization library. `yylval` is usually associated with the value returned by the lexer.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_6\n\nLANGUAGE: C\nCODE:\n```\n#define yylval __gettextlval\n```\n\n----------------------------------------\n\nTITLE: Centering Bytes Objects\nDESCRIPTION: This snippet explores centering bytes objects using `.center()`. It tests different lengths for the center operation and uses a character for filling. Input is a byte string and an integer value for the length, output is a centered bytestring.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nassert [b\"koki\".center(i, b\"|\") for\n```\n\n----------------------------------------\n\nTITLE: Node.js Process and Error Event Handling with Domains\nDESCRIPTION: This snippet illustrates setting up global error handling and context management using process and domain modules, including listening for uncaught exceptions and integrating domain error handlers for more structured error management.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/node.txt#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nprocess.on('uncaughtException', callback)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ndomain.intercept(callback)\n```\n\n----------------------------------------\n\nTITLE: Club Name Conversion and History Handling (C)\nDESCRIPTION: Contains functions and macros for club name conversions such as 'Filosof' to 'Philosofia', and handling message date/time components like 'tdhour' and 'tdsec'. Supports data consistency during message conversions.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_47\n\nLANGUAGE: C\nCODE:\n```\nstrcpy (new.club, \"Filosof\"); tdhour (msg.crdate); tdmin (msg.crtime);\n```\n\n----------------------------------------\n\nTITLE: LaTeX Document for Mathematical Analysis Content\nDESCRIPTION: This LaTeX document contains sections, chapters, and paragraphs discussing mathematical analysis topics, including convergence criteria and number systems. It includes comments in German, indicating its educational purpose.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/MartinThoma/LaTeX-examples/snapshot.txt#_snippet_7\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\chapter{Analyis}\n% Comments about analysis topics and mathematical proofs\n```\n\n----------------------------------------\n\nTITLE: Running cspell commands using Docker\nDESCRIPTION: This example shows how to execute cspell commands within a Docker container. It mounts the current working directory as a volume to allow cspell to access files. It is necessary to have Docker installed to run this command.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -it -v $PWD:/workdir ghcr.io/streetsidesoftware/cspell:latest lint --help\n```\n\n----------------------------------------\n\nTITLE: Sample Known Issues File Content as JSONC Array\nDESCRIPTION: Demonstrates a known issues file using JSONC syntax, which allows comments and literal arrays. This snippet includes a disabling comment and a list of legacy issue strings in the same format as the other examples, providing a flexible option for storing known issues with both comments and JSON compatibility.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/rfc/rfc-0004 known issues/README.md#_snippet_5\n\nLANGUAGE: jsonc\nCODE:\n```\n[\n  \"# cspell:disable\",\n  \"django/conf/global_settings.py:108:26 (Luxembourgish)\",\n  \"django/conf/locale/fr/*.py:*:* (octobre)\",\n  \"tests/aggregation_regress/tests.py:728:11 (realiased)\",\n  \"tests/aggregation_regress/tests.py:812:8 (referer)\",\n  \"tests/aggregation_regress/tests.py:915:102 (grep)\"\n]\n```\n\n----------------------------------------\n\nTITLE: Webpack Loader Configuration Patch for React Server DOM\nDESCRIPTION: This patch involves configuring or modifying Webpack loader files to correctly handle React server-side rendering, specifically patches to the 'react-server-dom-webpack' module. It ensures proper code execution and handling of React server components during build time or runtime.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/microsoft/TypeScript-Website/snapshot.txt#_snippet_8\n\nLANGUAGE: Patch\nCODE:\n```\npatches/react-server-dom-webpack@0.0.0-experimental-c8b778b7f-20220825.patch:11:89     - Unknown word (subarray)   -- b.length)0<l&&(p(a,k.subarray(0,l)),k=new Uint8Array\n```\n\n----------------------------------------\n\nTITLE: Exporting Navmesh Data to XML Using bmesh and Python\nDESCRIPTION: Defines a NavmeshExporter class to export Blender mesh objects representing navigation meshes into custom XML format files. It uses the bmesh module to read mesh geometry, transforms vertex coordinates using the object's world matrix, and writes XML elements describing vertices and polygons. This class depends on Blender's bpy and bmesh modules and expects a single navmesh Blender object.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/AdaDoom3/AdaDoom3/snapshot.txt#_snippet_30\n\nLANGUAGE: Python\nCODE:\n```\nimport bmesh\n\nclass NavmeshExporter:\n\tdef __init__(self, objects):\n\t\tself.m_objects = objects\n\n\tdef exportNavmesh(self, sPath):\n\t\tprint(\"exportNavmesh 2\")\n\t\twith open(sPath + \"/navmesh.xml\", \"w\") as navmeshfile:\n\t\t\tnavmesh_obj = self.m_objects\n\t\t\tbm = bmesh.new()\n\t\t\tbm.from_mesh(navmesh_obj.data)\n\t\t\tom = navmesh_obj.matrix_world\n\t\t\tnavmeshfile.write('<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n')\n\t\t\tnavmeshfile.write('<navmesh>\\n')\n\t\t\t# Write navmesh properties header\n\t\t\tnavmeshfile.write('<height-testing enabled=\"false\" />\\n')\n\t\t\tnavmeshfile.write('<MaxVertsPerPoly nvp=\"4\" />\\n')\n\t\t\t# Write vertices\n\t\t\tfor vert in bm.verts:\n\t\t\t\tco = om @ vert.co\n\t\t\t\tnavmeshfile.write('<vertex x=\"%f\" y=\"%f\" z=\"%f\" />\\n' % (co.x, co.y, co.z))\n\t\t\t# Write polygons\n\t\t\tfor face in bm.faces:\n\t\t\t\tif len(face.verts) != 4:\n\t\t\t\t\tcontinue  # Only quad polys supported\n\t\t\t\t# Write polygon element with vertex indices\n\t\t\t\t\n\t\t\tnavmeshfile.write('</navmesh>\\n')\n```\n\n----------------------------------------\n\nTITLE: Gaussian Error Linear Unit (GELU) Activation Function in Python\nDESCRIPTION: Defines the GELU activation function used in neural networks to introduce non-linearity. Requires numpy for array operations. Provides the GELU implementation for high-performance gradient-based learning.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_53\n\nLANGUAGE: Python\nCODE:\n```\n36:9 - Unknown word (gelu) -- gelu_vec (np.ndarray): The\n```\n\n----------------------------------------\n\nTITLE: Installing cspell-gitignore Package with npm (Shell)\nDESCRIPTION: Installs the 'cspell-gitignore' package as a dependency using npm. This command requires a Node.js environment with npm installed. The '-S' flag adds the package to the dependencies section in package.json.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-gitignore/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -S cspell-gitignore\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for CSpell lint Command\nDESCRIPTION: This shell command executes `cspell lint --help` to display the command-line help documentation specifically for the `lint` subcommand. This output lists available options, arguments, and usage information for performing spell checks.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/getting-started.mdx#_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ncspell lint --help\n```\n\n----------------------------------------\n\nTITLE: Shuffled Shift Cipher Implementation\nDESCRIPTION: Python implementation of a Shuffled Shift Cipher, which combines a shuffled alphabet with shift operations. Includes examples of key generation and cipher operations.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\n# Example of shuffled parts of the alphabet\nshuffled parts: [A,CB,ED,MLKJIHGF,RQPON,ZYXWVUTS]\nshuffled __key_list : ACBEDMLKJIHGFRQPONZYXWVUTS\n\n# Type annotations\n:rtype: list\n\n# Example class instantiation\nShuffledShiftCipher('4PYIXyqeQZr44')\n```\n\n----------------------------------------\n\nTITLE: Setting up oEmbed Transformer for MDX\nDESCRIPTION: JavaScript code showing how to import and configure an oEmbed transformer for MDX. This enables embedding external content like videos and social media posts.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/mdx-js/mdx/snapshot.txt#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport fauxOembedTransformer from '@remark-embedder/transformer-oembed'\nconst oembedTransformer = fauxOembedTransformer.default\n// Configuration\n{transformers: [oembedTransformer]}\n```\n\n----------------------------------------\n\nTITLE: Opus Repacketizer API Function Prototypes and Constants in Ada\nDESCRIPTION: This snippet provides function prototypes and associated constants for the Opus Repacketizer, a utility for managing Opus audio packet creation and manipulation. It includes functions to get the size, initialize, create, and destroy repacketizer objects, as well as related constants and macros for encoder/decoder state requests and max length parameters.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/AdaDoom3/AdaDoom3/snapshot.txt#_snippet_19\n\nLANGUAGE: Ada\nCODE:\n```\n- Function declarations: opus_repacketizer_get_size, opus_repacketizer_init, opus_repacketizer_create, opus_repacketizer_destroy.\n- Constants such as OPUS_MULTISTREAM_GET_ENCODER_STATE_REQUEST and OPUS_MULTISTREAM_GET_DECODER_STATE_REQUEST.\n- Max length constants for verifying buffer sizes during encoding and decoding.\n- Macros for external function linkage, e.g., \"External_Name\" attributes specifying C function names.\n- Descriptions indicating these are pointers and functions for managing an Opus Repacketizer object lifecycle.\n```\n\n----------------------------------------\n\nTITLE: Overwriting group_id\nDESCRIPTION: This snippet indicates the overwriting of a `group_id`. This is probably a part of the testing or development process.   The unknown word `overwites` is the cspell error.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_100\n\nLANGUAGE: typescript\nCODE:\n```\noverwites: {group_id: 'groupId\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Integration Test against its Snapshot\nDESCRIPTION: Executes the CSpell integration test for a specified repository (`<owner/repository>`) using the `tester.js` script. It runs CSpell against the local copy of the repository and compares the output against the existing snapshot file (`snapshots/owner/repository/snapshot.txt`) to verify expected behavior.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./tester.js check <owner/repository>\n```\n\n----------------------------------------\n\nTITLE: JSX Accessibility Comment (TypeScript)\nDESCRIPTION: A JSX comment disabling or explaining a rule related to non-interactive elements having a tabindex (potential typo 'noninteractive'), found in PastedFileControls and ReplyBar.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nnext-line jsx-a11y/no-noninteractive-tabindex */}\n```\n\nLANGUAGE: typescript\nCODE:\n```\ndisable jsx-a11y/no-noninteractive-tabindex */\n```\n\n----------------------------------------\n\nTITLE: HTML License Page with External External Identifiers\nDESCRIPTION: This HTML snippet references external external identifiers like 'WINEXTERNAL' via span or list item elements, likely used for styling or scripting purposes. It operates within an HTML document with dependencies on CSS and JavaScript for dynamic content or styling.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/microsoft/TypeScript-Website/snapshot.txt#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\npackages/typescriptlang-org/static/License.html:807:16    - Unknown word (WINEXTERNAL) -- p.LIMPAT4WINEXTERNAL, li.LIMPAT4WINEXTERNAL\n```\n\n----------------------------------------\n\nTITLE: TypeScript Default Settings Module\nDESCRIPTION: Provides default configuration settings for the spell checker, used as fallback or initial values.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* defaultSettings.ts */\n```\n\n----------------------------------------\n\nTITLE: Linear Algebra Cofactor Calculation in Python\nDESCRIPTION: Calculates the cofactor matrix of a given matrix, used in matrix inversion and determinant calculations. Dependencies include NumPy; input is a matrix, output is its cofactor matrix.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_32\n\nLANGUAGE: Python\nCODE:\n```\nlinear_algebra/src/lib.py:261:9     - Unknown word (cofactor)   -- cofactor(x: int, y: int): returns\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for cspell-tools CLI - Shell\nDESCRIPTION: Executes the cspell-tools command line interface with the --help flag to display usage information, available commands, and options. Useful for getting started or troubleshooting command syntax.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-tools/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncspell-tools-cli --help\n```\n\n----------------------------------------\n\nTITLE: Checking Caddyfile Formatting Differences in Go\nDESCRIPTION: Calls `caddyfile.FormattingDifference` to check if provided Caddyfile input requires formatting. This function likely returns a boolean warning flag and a textual representation of the differences (`diff`).\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_31\n\nLANGUAGE: Go\nCODE:\n```\nif warning, diff := caddyfile.FormattingDifference\n```\n\n----------------------------------------\n\nTITLE: Comparing bytearrays with assertions\nDESCRIPTION: This snippet uses assertions to check the contents of bytearray objects. The examples create bytearrays and assert their contents using the '==' operator. The input is a bytearray, output is a boolean result of the assertion.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nassert a == bytearray(b\"whello, world\"), a\n```\n\nLANGUAGE: python\nCODE:\n```\nassert a == bytearray(b\"whello, worlwd\"), a\n```\n\nLANGUAGE: python\nCODE:\n```\nassert a == bytearray(b\"owhello, worlwd\"), a\n```\n\nLANGUAGE: python\nCODE:\n```\nassert a == bytearray(b\"owhello, worlwdo\"), a\n```\n\n----------------------------------------\n\nTITLE: Displaying Command-Line Help and Output (Shell/Text)\nDESCRIPTION: Demonstrates how to display the help information for the `words` subcommand of the `hunspell-reader` CLI tool using the `--help` flag. The output details the command's usage and available options.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/hunspell-reader/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nhunspell-reader words --help\n```\n\nLANGUAGE: Text\nCODE:\n```\n\n  Usage: words [options] <hunspell_dic_file>\n\n  Output all the words in the <hunspell.dic> file.\n\n  Options:\n\n    -h, --help           output usage information\n    -o, --output <file>  output file - defaults to stdout\n    -s, --sort           sort the list of words\n    -u, --unique         make sure the words are unique.\n    -i, --ignore_case    used with --unique and --sort\n    -l, --lower_case     output in lower case\n    -T, --no-transform   Do not apply the prefix and suffix transforms.  Root words only.\n\n\n```\n\n----------------------------------------\n\nTITLE: Displaying CSpell Tools Help\nDESCRIPTION: This command displays the help information for the CSpell Tools. This provides the user with a list of available commands, options, and their descriptions. Dependencies: CSpell Tools must be installed.  Output: Displays the help information in the terminal.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-tools-alias/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncspell-tools --help\n```\n\n----------------------------------------\n\nTITLE: Neural Network with Two Hidden Layers in Python\nDESCRIPTION: Implements a neural network architecture with two hidden layers, offering functions for training, update steps, and activation derivatives. Includes variables like s sigmoid for activations.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_61\n\nLANGUAGE: Python\nCODE:\n```\n100:46 - Unknown word (sogmoid) -- using derivative of sogmoid activation function\n```\n\nLANGUAGE: Python\nCODE:\n```\n100:9 - Unknown word (Updation) -- Updation is done using derivative\n```\n\n----------------------------------------\n\nTITLE: Defining cancelMessageEditing Function Prop (TypeScript)\nDESCRIPTION: Defines the 'cancelMesssageEditing' (potential typo for Message) function signature within the UseGiphyProps interface and used within the hook implementation.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\ncancelMesssageEditing: () => void;\n```\n\nLANGUAGE: typescript\nCODE:\n```\ncancelMesssageEditing,\n```\n\nLANGUAGE: typescript\nCODE:\n```\ncancelMesssageEditing();\n```\n\nLANGUAGE: typescript\nCODE:\n```\n[cancelMesssageEditing, conversation\n```\n\nLANGUAGE: typescript\nCODE:\n```\n, [sendGiphy, cancelMesssageEditing]);\n```\n\n----------------------------------------\n\nTITLE: LaTeX Example for Transformation\nDESCRIPTION: This LaTeX code snippet provides an example to illustrate the need for text transformation before spell checking. It demonstrates the challenges of handling special characters like diacritics. It does not have external dependencies. The output is LaTeX markup. \nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-grammar/README.md#_snippet_2\n\nLANGUAGE: latex\nCODE:\n```\nk\\\"{o}nnen\nkönnen\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Rewrite Rules in Caddy HTTP Module (Go)\nDESCRIPTION: This snippet involves functions for cleaning and rewriting URL paths within the caddyhttp module, utilizing caddyhttp.CleanPath for sanitization. Dependencies include caddyhttp and caddyserver modules. The core functionality is to process and normalize request paths for rewriting purposes. It handles path sanitization and applies rewrite rules during request handling.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_68\n\nLANGUAGE: Go\nCODE:\n```\nescapedPath = caddyhttp.CleanPath(escapedPath)\n```\n\n----------------------------------------\n\nTITLE: Adding sample package to test dictionaries in eslint\nDESCRIPTION: This commit adds a sample package for testing dictionaries within eslint. This allows for better integration testing of dictionary functionality.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell/test-cspell-esbuild-cjs/CHANGELOG.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\ntest: Add sample package to test dictionaries in eslint (#4875) ([06c9e18](https://github.com/streetsidesoftware/cspell/commit/06c9e18)), closes [#4875](https://github.com/streetsidesoftware/cspell/issues/4875)\n```\n\n----------------------------------------\n\nTITLE: Mish Activation Function in Python\nDESCRIPTION: Defines the Mish activation function, a smooth, non-monotonic activation used in neural networks for improved accuracy. Uses numpy arrays for computation and is called within neural architectures.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_55\n\nLANGUAGE: Python\nCODE:\n```\n14:5 - Unknown word (mish) -- def mish(vector: np.ndarray)\n```\n\n----------------------------------------\n\nTITLE: Diffie-Hellman Key Exchange Implementation\nDESCRIPTION: Python implementation of the Diffie-Hellman key exchange protocol using Modular Exponential (MODP) Diffie-Hellman groups. Imports hexlify from binascii and urandom from os modules.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nfrom binascii import hexlify\nfrom os import urandom\n\n# Implementation of Modular Exponential (MODP) Diffie-Hellman groups for secure key exchange\n```\n\n----------------------------------------\n\nTITLE: Base64 Cipher Encoding in Python\nDESCRIPTION: Handles encoding data within Base64 ciphering schemes, possibly for steganographic applications, by embedding data as strings or byte strings. This facilitates hiding or transmitting data covertly within encoded media.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nSteganography\n```\n\n----------------------------------------\n\nTITLE: Importing Caddy Configuration Packages in Go\nDESCRIPTION: Imports packages related to Caddy configuration handling: `caddyconfig` for general configuration management and `caddyfile` for specific Caddyfile parsing and formatting, both from `github.com/caddyserver/caddy/v2/caddyconfig`.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_25\n\nLANGUAGE: Go\nCODE:\n```\n\"github.com/caddyserver/caddy/v2/caddyconfig\"\n```\n\nLANGUAGE: Go\nCODE:\n```\n\"github.com/caddyserver/caddy/v2/caddyconfig/caddyfile\"\n```\n\n----------------------------------------\n\nTITLE: Installing cspell-lib via npm\nDESCRIPTION: Installs the `cspell-lib` package as a project dependency using the Node Package Manager (npm). The `-S` flag saves the package to the `dependencies` section of your `package.json` file.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-lib/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i -S cspell-lib\n```\n\n----------------------------------------\n\nTITLE: Stripping Bytearrays\nDESCRIPTION: This snippet utilizes the `.strip()`, `.lstrip()` methods of bytearray to remove leading and trailing characters. It trims the bytearray based on the given characters. Input is a bytearray, output is stripped bytearray.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nexample.com\").strip(b\"cmowz.\") == bytearray(b\"example\n```\n\nLANGUAGE: python\nCODE:\n```\nexample.com\").lstrip(b\"cmowz.\") == bytearray(b\"example\n```\n\n----------------------------------------\n\nTITLE: Example ESLint Configuration Using '@cspell/eslint-plugin' with Recommended Settings\nDESCRIPTION: This snippet shows how to include the CSpell ESLint plugin in a JavaScript configuration file, importing recommended settings and adding them to the ESLint config array.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-eslint-plugin/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport cspellESLintPluginRecommended from '@cspell/eslint-plugin/recommended';\n\nexport default [\n  // other config imports\n  cspellESLintPluginRecommended\n  // other configs\n];\n```\n\n----------------------------------------\n\nTITLE: Testing and Author Attribution in Python\nDESCRIPTION: Contains attribution for a test file related to the Schröder algorithm, possibly for knapsack problems or combinatorics. No executable code shown.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_28\n\nLANGUAGE: Python\nCODE:\n```\nknapsack/tests/test_knapsack.py:4:21      - Unknown word (Schröder)   -- @author: Dr. Tobias Schröder\n```\n\n----------------------------------------\n\nTITLE: TypeScript comment describing strict and nonstrict modes\nDESCRIPTION: Comment in a TypeScript declaration file mentioning both strict and nonstrict modes, providing context for how the Svelte action behaves under different configurations.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/sveltejs/svelte/snapshot.txt#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nwith both strict and nonstrict mode\n```\n\n----------------------------------------\n\nTITLE: Formatting Locktime\nDESCRIPTION: This snippet is likely related to formatting a lock time display, possibly related to an app lock feature. The unknown word `locktime` is the cspell error.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_115\n\nLANGUAGE: typescript\nCODE:\n```\nlocktime: formatDurationCaption\n```\n\n----------------------------------------\n\nTITLE: Function Calls and Macros in usercleanup.c\nDESCRIPTION: This snippet highlights function calls like audit_setfile, macro definitions such as DAYSSINCEFILE, and other labels in usercleanup.c related to user data processing, cleanup routines, and file management. It demonstrates configuration and cleanup tasks performed during user account maintenance.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_30\n\nLANGUAGE: C\nCODE:\n```\naudit_setfile (mkfname (CLNUPAUDITFILE));\n#define DAYSSINCEFILE \".LAST.CLEANUP\"\n#define AUS_USERCUB \"USER ACCOUNT CLEANUP\"\n#define AUS_USERCUE \"END OF USER ACCOUNT\"\n\n```\n\n----------------------------------------\n\nTITLE: Aliasing assertion functions in Python tests\nDESCRIPTION: Demonstrates aliasing standard assertion functions (`assert_equal`, `assert_almost_equal`) to a shorter name (`asseq`) for convenience within a test suite. This pattern simplifies writing multiple assertions.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_38\n\nLANGUAGE: python\nCODE:\n```\n# Assuming assert_equal and assert_almost_equal are imported or defined\nasseq = assert_equal\n# ... potentially other code ...\nasseq = assert_almost_equal\n# ... potentially other code ...\nasseq(result, expected) # Example usage\n```\n\n----------------------------------------\n\nTITLE: Simple Keyword Cipher Implementation\nDESCRIPTION: Python implementation of a Simple Keyword Cipher, where an alphabet is rearranged based on a keyword. Removes duplicate letters from the key to create a substitution alphabet.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\n# Remove duplicate letters from keyword\nkey_no_dups = \"\"\n\n# Example encrypted text\n'CYJJM VMQJB!!'\n```\n\n----------------------------------------\n\nTITLE: FastCGI client related tests\nDESCRIPTION: This snippet concerns tests related to FastCGI client. Dependencies include the testing package and the fastcgi package. Tests confirm functionality and error conditions related to FastCGI requests and responses.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_59\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddyhttp/reverseproxy/fastcgi/client_test.go:21:9      - Unknown word (fastcgi)    -- package fastcgi\n```\n\n----------------------------------------\n\nTITLE: Specifying Known Issues Array in cspell.json Configuration (JSON)\nDESCRIPTION: This JSON snippet shows how to embed known issues directly within a cspell configuration file using the 'knownIssues' array. Each entry is a string in the same format as the known issues text file, specifying the file path, line, character, and word to ignore. This approach integrates legacy spelling errors into the main configuration, suitable for projects with a limited number of known issues.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/rfc/rfc-0004 known issues/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"knownIssues\": [\n    \"django/conf/global_settings.py:108:26 (Luxembourgish)\",\n    \"django/conf/locale/fr/*.py:*:* (octobre)\",\n    \"tests/aggregation_regress/tests.py:728:11 (realiased)\",\n    \"tests/aggregation_regress/tests.py:812:8 (referer)\",\n    \"tests/aggregation_regress/tests.py:915:102 (grep)\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Icon Components (JavaScript/JSX)\nDESCRIPTION: Imports icon components such as 'opencollective' from specific directories for use in React JSX, enabling icon rendering within UI components like navigation or footer sections.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/mdx-js/mdx/snapshot.txt#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport className='icon icon-opencollective'\n\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Script for Performance Testing\nDESCRIPTION: Shell script that runs various benchmark tests including 'int', 'nbody', 'fannkuch', and 'scimark'. This script is used to measure the performance of the RustPython implementation.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_51\n\nLANGUAGE: Shell\nCODE:\n```\nBENCH in \"int\" \"nbody\" \"fannkuch\" \"scimark\"; do\n```\n\n----------------------------------------\n\nTITLE: Importing Functions from @cspell/normalize-json in TypeScript\nDESCRIPTION: TypeScript code demonstrating how to import the 'parse' and 'stringify' functions from the @cspell/normalize-json library. These functions are used for normalizing and reconstituting JSON data.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-normalize-json/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parse, stringify } from '@cspell/normalize-json';\n```\n\n----------------------------------------\n\nTITLE: File Format V1 Data Representation\nDESCRIPTION: Explains the structure of each line within the V1 data format, explaining the usage of a leading `*` character to indicate the end of a word and pairs of char indexes.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-trie-lib/README.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nstar [char index [, char index]*]\n```\n\n----------------------------------------\n\nTITLE: Importing Caddy Test Package in Go\nDESCRIPTION: Imports the `caddytest` package from the Caddy v2 repository (`github.com/caddyserver/caddy/v2/caddytest`). This package provides utilities essential for writing integration tests for Caddy.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_10\n\nLANGUAGE: Go\nCODE:\n```\n\"github.com/caddyserver/caddy/v2/caddytest\"\n```\n\n----------------------------------------\n\nTITLE: Removing debug code\nDESCRIPTION: This commit removes debug code from the cspell project. Removing debug code improves performance and reduces the size of the codebase.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell/test-cspell-esbuild-cjs/CHANGELOG.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nrefactor: remove debug code (#4951) ([4972a77](https://github.com/streetsidesoftware/cspell/commit/4972a77)), closes [#4951](https://github.com/streetsidesoftware/cspell/issues/4951)\n```\n\n----------------------------------------\n\nTITLE: System and Path Variables in Network Messaging (C)\nDESCRIPTION: Defines variables such as 'sysstem' for identifying system messages, along with temporary filename buffers for network message handling scripts.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_56\n\nLANGUAGE: C\nCODE:\n```\nonly there so that the sysstem shows personal (NOT); sprintf (fname_h, \"/tmp/netclubh-%x%x\", (int) getpid);\n```\n\n----------------------------------------\n\nTITLE: Transforming and Triangulating Mesh with Blender BMesh in Python\nDESCRIPTION: This snippet demonstrates usage of Blender's bmesh module to create a new bmesh, apply matrix transformations, triangulate faces, and reverse face directions. It depends on Blender's bmesh and mathutils modules. The key functionality transforms mesh vertices by a given matrix and ensures the mesh is triangulated for proper export. Inputs include a transformation matrix and a bmesh object; output is the modified bmesh with triangulated and transformed geometry.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/AdaDoom3/AdaDoom3/snapshot.txt#_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\nbm = bmesh.new()\nbmesh.ops.transform(bm, matrix=exported_matrix, verts=bm.verts)\nbmesh.ops.triangulate(bm)\nbmesh.ops.reverse_faces(bm)\n```\n\n----------------------------------------\n\nTITLE: JSX Rendering with Components\nDESCRIPTION: JavaScript code showing JSX rendering using the jsx runtime functions. This demonstrates how MDX transforms markdown into React components.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/mdx-js/mdx/snapshot.txt#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nreturn _jsxs(_components.h1, {children: [...]})\n```\n\n----------------------------------------\n\nTITLE: String Formatting with Unknown Word - C\nDESCRIPTION: This snippet uses string formatting involving 'EMULOGDIR'. The word 'EMULOGDIR' is flagged as an unknown word. It likely represents the directory for terminal emulation logs.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_84\n\nLANGUAGE: C\nCODE:\n```\nshmid-%s\", mkfname (EMULOGDIR), tty);\n```\n\n----------------------------------------\n\nTITLE: Variable Declaration with Unknown Word - C\nDESCRIPTION: These snippets declare variable 'fullaxid', 'logshd', and 'logspn'. The word 'fullaxid', 'logshd', and 'logspn' are flagged as an unknown word and used in the `eventman` module.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_96\n\nLANGUAGE: C\nCODE:\n```\nchar *fullaxid;\n```\n\nLANGUAGE: C\nCODE:\n```\nint logshd;\n```\n\nLANGUAGE: C\nCODE:\n```\nint logspn;\n```\n\n----------------------------------------\n\nTITLE: Read cache format from config\nDESCRIPTION: This bug fix adds the functionality to read the cache format from the configuration file.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-strong-weak-map/test-cspell-strong-weak-map/CHANGELOG.md#_snippet_18\n\nLANGUAGE: text\nCODE:\n```\nBe able to read cache format from config ([#4190](https://github.com/streetsidesoftware/cspell/issues/4190)) ([6029893](https://github.com/streetsidesoftware/cspell/commit/60298938cd39669982ad1ca4293571242918761d))\n```\n\n----------------------------------------\n\nTITLE: Getting help for the cspell lint command\nDESCRIPTION: This command displays the help information for the `cspell lint` command, providing a list of available options and usage examples. This provides documentation on available options and usage.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell/README.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncspell lint --help\n```\n\n----------------------------------------\n\nTITLE: XML Sitemap Structure in Nunjucks Template\nDESCRIPTION: Example showing the structure of an XML sitemap generated using Nunjucks templating, including elements for lastmod and changefreq.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/eslint/eslint/snapshot.txt#_snippet_17\n\nLANGUAGE: HTML\nCODE:\n```\n<urlset xmlns=\"http://www.sitemaps\">\n<lastmod>{{ page.date.toISOString</lastmod>\n<changefreq>{{ page.data.changeFreq</changefreq>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Dictionary in CSpell Configuration\nDESCRIPTION: Example JSON configuration showing how to define and use a custom dictionary in CSpell. This allows adding project-specific words through an external file.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/Configuration/auto_properties.md#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n\"dictionaryDefinitions\": [\n  { \"name\": \"custom-words\", \"path\": \"./custom-words.txt\"}\n],\n\"dictionaries\": [\"custom-words\"]\n```\n\n----------------------------------------\n\nTITLE: XML Material Properties Configuration in STK\nDESCRIPTION: Material property definitions from the STK material parameters XML file. These control visual effects like colorization, PBR (Physically Based Rendering) materials, transparency, and surface properties for game objects.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/AdaDoom3/AdaDoom3/snapshot.txt#_snippet_37\n\nLANGUAGE: xml\nCODE:\n```\n<PropGroup id=\"propgroup_visual\" name=\"Display\"\n<PropGroup id=\"propgroup_interaction\" name=\"Interactio\"\n<BoolProp id=\"colorizable\" name=\"Colorizable (for library objects\"\ndoc=\"Set the minimun resulting saturation\"\nroughness (red channel) the metalness (green channel) and\n<EnumChoice id=\"alphatest\" label=\"PBR Cutout Transparen\"\n<EnumChoice id=\"alphablend\" label=\"(NON PBR) Alpha\"\ndoc=\"Greyscale image containing the\n```\n\n----------------------------------------\n\nTITLE: Defining useGiphy Hook Props Interface (TypeScript)\nDESCRIPTION: Defines the props interface 'UseGiphyProps' for the useGiphy hook.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\ninterface UseGiphyProps {\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js Version (sh)\nDESCRIPTION: This command executes `node -v` to print the currently installed version of Node.js to the console. It is used to verify if the environment meets the version requirement (`>=18.0`) necessary for CSpell installation.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/installation.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode -v\n```\n\n----------------------------------------\n\nTITLE: Hunspell AFF Content Example\nDESCRIPTION: This example shows the structure and content of a Hunspell AFF (Affix) file used for defining morphological rules. It includes sections for TRY, MAP, REP, KEY, ICONV, and OCONV.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/website/docs/Configuration/auto_properties.md#_snippet_14\n\nLANGUAGE: hunspell\nCODE:\n```\n# Comment\nTRY aeistlunkodmrvpgjhäõbüoöfcwzxðqþ`\nMAP aàâäAÀÂÄ\nMAP eéèêëEÉÈÊË\nMAP iîïyIÎÏY\nMAP oôöOÔÖ\nMAP (IJ)(Ĳ)\n```\n\n----------------------------------------\n\nTITLE: Python VM Management in JavaScript Notebook\nDESCRIPTION: Code snippets showing Python virtual machine (pyvm) initialization and management in a JavaScript notebook application. Handles creation, destruction and execution of Python code in a web context.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_59\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet pyvm = null;\n\nif (pyvm) {\n    pyvm.destroy();\n    pyvm = null;\n}\npyvm = rp.vmStore.init('notebook');\n```\n\n----------------------------------------\n\nTITLE: ESM binary script in test-cspell-lib-esm/bin.mjs\nDESCRIPTION: This script serves as an executable entry point for the cspell library in ESM format, allowing direct invocation from command line. It likely initializes the main functionality of cspell such as spell checking or configuration management, depending on command-line arguments. Dependencies include cspell core modules and possibly command-line argument parsers.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_90\n\nLANGUAGE: JavaScript\nCODE:\n```\n#!/usr/bin/env node\nimport { main } from '../src/index.js';\n\nmain(process.argv.slice(2));\n```\n\n----------------------------------------\n\nTITLE: Keep-Alive Configuration in HTTP Transport in Go\nDESCRIPTION: Configuration of keep-alive settings in the HTTP transport, including special handling for proxy protocol compatibility.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_64\n\nLANGUAGE: Go\nCODE:\n```\nrt.DisableKeepAlives = !*h.KeepAlive.Enabled\nif !rt.DisableKeepAlives && h.ProxyProtocol {\n    Logger().Warn(\"disabling keepalives, they are incompatible\")\n    rt.DisableKeepAlives = true\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Logging Utility\nDESCRIPTION: Provides logging functions for internal diagnostics, dependent on console or other logging infrastructures.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_59\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-lib/src/lib/util/logger.ts\n```\n\n----------------------------------------\n\nTITLE: Confirming Initial cspell Configuration (Shell)\nDESCRIPTION: Shell command to test if cspell correctly recognizes the word 'somenewword' after it has been defined in a standard `cspell.yaml` configuration file. This step verifies the base configuration works.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/issues/issue-5120/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncspell trace somenewword\n```\n\n----------------------------------------\n\nTITLE: Example CSpell Error Output\nDESCRIPTION: This shows the typical format of an error message generated by cspell when run on the Svelte project. It specifies the file path, line and column number, the type of error ('Unknown word'), the word flagged, and the context from the source file.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/sveltejs/svelte/snapshot.txt#_snippet_20\n\nLANGUAGE: text\nCODE:\n```\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:1341:3    - Unknown word (ndash)      -- 'ndash;': 8211,\n```\n\nLANGUAGE: text\nCODE:\n```\npackages/svelte/src/compiler/phases/1-parse/utils/entities.js:1343:3    - Unknown word (nearr)      -- 'nearr;': 8599,\n```\n\n----------------------------------------\n\nTITLE: Defining Constants for Email Clubs (C)\nDESCRIPTION: This code snippet defines constants related to email clubs using the #define preprocessor directive in C. These constants likely represent different states, menu options or configuration settings within the email club functionality of the application. The filename is mbk_emailclubs.h.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_16\n\nLANGUAGE: C\nCODE:\n```\n#define HISTCC 53\n#define QSLEAVE 603\n#define QSDONE 604\n#define QSNNEM 605\n#define QSLVEM 606\n#define QWRT2EM 607\n#define QSNOJMP 608\n#define RQSRMNU1 609\n#define HISTCP 54\n#define QSMMNU 615\n#define QWMNUR 616\n#define QSMNUH 617\n#define QSMBM 618\n#define QSMCU 619\n#define QSMRM 620\n#define TLCNAX 621\n#define BLTNAX 622\n#define HISTFW 55\n#define HISTNM 56\n#define HISTRRR 57\n#define HISTAFW 59\n#define HISTDST 60\n#define HISTOLR 61\n#define NEWUEM 66\n#define CLUBINFO 67\n#define CHKNCLB 68\n#define NNEWCLB 69\n#define NEWCLUB 70\n#ifndef __EMAILCLUBS_UNAMBIGUOUS__\n#define ASKRDNOW 74\n#define ASKRDERR 75\n#define ASKRDDEF 76\n#define EMMNU 78\n#define SHEMMNU 79\n#define EMLEAVE 82\n#define PMENUS 85\n#define PQUEST1A 86\n```\n\n----------------------------------------\n\nTITLE: Using the worker and VM modules in Node.js\nDESCRIPTION: This snippet references the vm.Module class, which enables sandboxed code execution and module management within the VM context. It supports dynamic module creation, evaluation, and encapsulation for secure code execution.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/node.txt#_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nvm.Module\n```\n\n----------------------------------------\n\nTITLE: Zstandard (Zstd) Compression Handler and Configuration in Go\nDESCRIPTION: This snippet presents the 'Zstd' struct's 'UnmarshalCaddyfile' method for parsing Caddyfile configuration related to Zstandard compression, along with the helper method 'UnmarshalCaddyfile' that sets up the handler. It uses 'caddyzstd' and 'klauspost/compress/zstd' packages to create Zstd encoders, facilitating high-performance compression, with error handling for unexpected configurations.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_45\n\nLANGUAGE: Go\nCODE:\n```\n// func (z *Zstd) UnmarshalCaddyfile(d *caddyfile.Dispenser) error {\n// Implementation code here\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Sample Function in JavaScript\nDESCRIPTION: This JavaScript snippet defines a basic function named `sampleFn`.  It is used to test the spell checker's ability to ignore code blocks. No dependencies are required.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-eslint-plugin/fixtures/mdx-support/md-with-code.mdx#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n/* Example Function */\nfunction sampleFn() {}\n```\n\n----------------------------------------\n\nTITLE: Function Prompt with Unknown Word - C\nDESCRIPTION: This snippet calls the prompt function with `HASAXS`. The word 'HASAXS' is flagged as an unknown word. It checks sysaxs and display prompt message\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_104\n\nLANGUAGE: C\nCODE:\n```\nprompt (HASAXS (uacc.sysaxs, j) ? RSSYSOPON\n```\n\n----------------------------------------\n\nTITLE: TypeScript: Conversation State Handler for MLS\nDESCRIPTION: This snippet manages the conversation state within MLS (Messaging Layer Service), importing various identifiers and protocols from the '@wireapp' library. It helps in handling the conversation state, messaging protocols, and related utilities, primarily for testing and implementation of conversation state management.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_67\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {eiConversationState} from '@wireapp/core/lib/messagingProtocols';\nimport {CONVERSATION_TYPE} from '@wireapp/api-client/lib/conversation';\nimport {QualifiedId} from '@wireapp/api-client/lib/user';\nimport {MLSServiceEvents} from '@wireapp/core/lib/messagingProtocols';\nimport {stringifyQualifiedId} from '@wireapp/core/lib/util/qualifiedIdUtil';\n// Example: wireapp://%40hans.wurst@elna\n```\n\n----------------------------------------\n\nTITLE: Calculating length of UTF-8 encoded bytes in Python\nDESCRIPTION: Asserts that the length of a bytes object created by encoding a string containing non-ASCII characters ('abcdé') using UTF-8 is correctly calculated.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nassert len(bytes(\"abcdé\", \"utf8\")) == 6\n```\n\n----------------------------------------\n\nTITLE: Updating Dictionaries\nDESCRIPTION: This bug fix involves updating the dictionaries used by the workflow bot.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-strong-weak-map/test-cspell-strong-weak-map/CHANGELOG.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nWorkflow Bot -- Update Dictionaries (main) ([#4733](https://github.com/streetsidesoftware/cspell/issues/4733)) ([221b59b](https://github.com/streetsidesoftware/cspell/commit/221b59bfe726a3b1fe5f9dcbdef6632983ebebeb))\n```\n\n----------------------------------------\n\nTITLE: TypeScript Test for AutoResolve LRU Cache\nDESCRIPTION: Test cases verifying the behavior of the AutoResolveLRUCache mechanism, ensuring proper caching and resolution logic are maintained.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_50\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-lib/src/lib/util/AutoResolveLRUCache.test.ts\n```\n\n----------------------------------------\n\nTITLE: TypeScript Example with Twoslash in MDX\nDESCRIPTION: TypeScript code block using twoslash directive with a path specification. This format is used for enhanced code documentation in MDX files.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/mdx-js/mdx/snapshot.txt#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n```ts twoslash path=\"example.ts\"\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Trie Structure TypeScript\nDESCRIPTION: Defines the core types and interfaces for Trie data structures within the library, establishing the foundational types used across modules.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_37\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface ITrie {...}\nexport interface ITrieNode {...}\n\n```\n\n----------------------------------------\n\nTITLE: Webpack Configuration Example with Twoslash\nDESCRIPTION: JavaScript code block showing Webpack configuration with twoslash directive. This provides enhanced documentation for Webpack bundler setup in MDX.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/mdx-js/mdx/snapshot.txt#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n```js twoslash path=\"webpack.config\"\n```\n```\n\n----------------------------------------\n\nTITLE: Spell checking all files using cspell\nDESCRIPTION: This command runs cspell to check all files in the current directory and its subdirectories. The `**` glob pattern matches all files.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncspell \"**\"\n```\n\n----------------------------------------\n\nTITLE: TypeScript Internal Settings Model\nDESCRIPTION: Defines an internal structure for CSpell settings, encapsulating user configurations, global options, or override settings to facilitate configuration management and validation.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* Internal settings model interface or class */\n```\n\n----------------------------------------\n\nTITLE: Database Structure Definitions for Club Query in C\nDESCRIPTION: Defines the 'clubqueryc' struct with size 24 bytes and associated constants such as 'CLUBQUERYC', facilitating club database queries and operations within the email club system.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_41\n\nLANGUAGE: C\nCODE:\n```\nstruct clubqueryc {  /* size 24 */ };\n#define CLUBQUERYC 0\n```\n\n----------------------------------------\n\nTITLE: DLL Main Function Prototype (C++)\nDESCRIPTION: This snippet shows the prototype of a DllMain function, the entry point for a Dynamic Link Library (DLL) in Windows. It takes the module handle, reason for being called, and reserved parameters as input. The return value indicates success or failure.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nDllMain (HINSTANCE module_handle, DWORD\n```\n\n----------------------------------------\n\nTITLE: Creating Configuration Symlink (Shell)\nDESCRIPTION: Shell command using `ln -s` to create a symbolic link named `cspell.yaml` that points to the actual configuration file `actual.yaml`. This sets up the scenario for testing symlink handling.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/issues/issue-5120/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nln -s actual.yaml cspell.yaml\n```\n\n----------------------------------------\n\nTITLE: Recursively Checking Specific File Types with cspell\nDESCRIPTION: This command recursively checks all .js files, regardless of their directory location, for spelling errors.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell/static/help-lint.txt#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncspell \"**/*.js\"\n```\n\n----------------------------------------\n\nTITLE: Importing Caddy Core Package in Go\nDESCRIPTION: Imports the main Caddy v2 package (`github.com/caddyserver/caddy/v2`). This package provides core types and functionalities for the Caddy server.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_19\n\nLANGUAGE: Go\nCODE:\n```\n\"github.com/caddyserver/caddy/v2\"\n```\n\n----------------------------------------\n\nTITLE: Bun Configuration for MDX\nDESCRIPTION: TOML configuration for Bun JavaScript runtime. This shows how to configure Bun for MDX processing through a bunfig.toml file.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/mdx-js/mdx/snapshot.txt#_snippet_19\n\nLANGUAGE: toml\nCODE:\n```\n```toml path=\"bunfig.toml\"\n```\n```\n\n----------------------------------------\n\nTITLE: TypeScript Utility: IterableLike Interface\nDESCRIPTION: Defines an interface for objects that are iterable or can be converted into an iterable, facilitating flexible iteration handling.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_58\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-lib/src/lib/util/IterableLike.ts\n```\n\n----------------------------------------\n\nTITLE: Function Call with Unknown Word - C\nDESCRIPTION: This snippet calls the function 'inp_acceptinjoth'. The word 'acceptinjoth' is flagged as an unknown word. The function is part of the `remsys` module.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_85\n\nLANGUAGE: C\nCODE:\n```\ninp_acceptinjoth ();\n```\n\n----------------------------------------\n\nTITLE: Function Declaration with Unknown Word - C\nDESCRIPTION: This snippet calls the function gcs_gdet. The word 'gdet' is flagged as an unknown word. The function is part of the `gcs_remsys` module.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_101\n\nLANGUAGE: C\nCODE:\n```\ngcs_gdet ()\n```\n\n----------------------------------------\n\nTITLE: TypeScript TextRange Utility and RegExp Test\nDESCRIPTION: Provides classes and functions for handling text ranges with regular expression matching capabilities.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_72\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-lib/src/lib/util/TextRange.ts\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-lib/src/lib/util/TextRange.regexp.test.ts\n```\n\n----------------------------------------\n\nTITLE: Checking Specific File Types with cspell\nDESCRIPTION: This command checks all .js files in the current directory for spelling errors.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell/static/help-lint.txt#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncspell \"*.js\"\n```\n\n----------------------------------------\n\nTITLE: TypeScript Validation Result Data Model\nDESCRIPTION: Aggregates multiple validation issues into a single result object, indicating overall validation success or failure for a document.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* ValidationResult model */\n```\n\n----------------------------------------\n\nTITLE: Networking Functions for Club Data Exchange (C)\nDESCRIPTION: Includes functions like 'getremclub' for retrieving remote club data, essential for synchronizing club information across networked bulletin board systems.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_62\n\nLANGUAGE: C\nCODE:\n```\ngetremclub (char *remclub, int pr);\n```\n\n----------------------------------------\n\nTITLE: Running Caddy Main Command Function in Go\nDESCRIPTION: Executes the main entry point for the Caddy command-line interface, accessed via the `caddycmd` package alias (`caddycmd.Main()`). This typically parses flags, loads configuration, and starts the Caddy server process.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_16\n\nLANGUAGE: Go\nCODE:\n```\ncaddycmd.Main()\n```\n\n----------------------------------------\n\nTITLE: TypeScript Config Loader Test Files\nDESCRIPTION: Test files for the configuration loader component, validating loading, parsing, and error handling of user configurations.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* Config loader tests */\n```\n\n----------------------------------------\n\nTITLE: Testing Caddyfile Unmarshal for Client Authentication in Caddy TLS Module\nDESCRIPTION: This snippet involves test cases for unmarshaling Caddyfile configuration directives related to client authentication in the Caddy TLS module. It depends on the caddyfile package for Dispenser instances and tests how configuration data is parsed into client authentication structures, ensuring correct handling of configuration directives and file paths.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_83\n\nLANGUAGE: Go\nCODE:\n```\nmodules/caddytls/connpolicy_test.go:277:45    - Unknown word (Caddyfile)   -- ClientAuthentication.UnmarshalCaddyfile() = %v, want %v\"\\nmodules/caddytls/connpolicy_test.go:27:39     - Unknown word (Caddyfile)   -- tClientAuthenticationUnmarshalCaddyfileWithDirectiveName(t\\nmodules/caddytls/connpolicy_test.go:29:34     - Unknown word (caddytest)   -- cert_file_1 = \"../../caddytest/caddy.ca.cer\"\\nmodules/caddytls/connpolicy_test.go:31:6      - Unknown word (caddyfile)   -- d *caddyfile.Dispenser\\nmodules/caddytls/connpolicy_test.go:42:8      - Unknown word (caddyfile)   -- d: caddyfile.NewTestDispenser(\\nmodules/caddytls/connpolicy_test.go:52:8      - Unknown word (caddyfile)   -- d: caddyfile.NewTestDispenser(\\nmodules/caddytls/connpolicy_test.go:63:8      - Unknown word (caddyfile)   -- d: caddyfile.NewTestDispenser(\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAL Buffer Manipulation Types (SOFT Extension, C)\nDESCRIPTION: Defines C function pointer types related to the OpenAL SOFT extension for advanced buffer manipulation. These types cover uploading sample data (`LPALBUFFERSAMPLESSOFT`, `LPALBUFFERSUBSAMPLESSOFT`), querying buffer data (`LPALGETBUFFERSAMPLESSOFT`), and checking format support (`LPALISBUFFERFORMATSUPPORTEDSOFT`).\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/AdaDoom3/AdaDoom3/snapshot.txt#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY*LPALBUFFERSAMPLESSOFT)(ALuint buffer, ALuint samplerate, ALenum internalformat, ALsizei samples, ALenum type, const ALvoid *data);\n```\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY*LPALBUFFERSUBSAMPLESSOFT)(ALuint buffer, ALsizei offset, ALsizei samples, ALenum type, const ALvoid *data);\n```\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY*LPALGETBUFFERSAMPLESSOFT)(ALuint buffer, ALsizei offset, ALsizei samples, ALenum type, ALvoid *data);\n```\n\nLANGUAGE: c\nCODE:\n```\ntypedef ALboolean (AL_APIENTRY*LPALISBUFFERFORMATSUPPORTEDSOFT)(ALenum format);\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAL Effect Management Types (EFX Extension, C)\nDESCRIPTION: Defines C function pointer types for managing OpenAL effects as part of the EFX extension. This includes generating (`LPALGENEFFECTS`), deleting (`LPALDELETEEFFECTS`), and validating (`LPALISEFFECT`) effects, as well as setting (`LPALEFFECTI`, `LPALEFFECTIV`, `LPALEFFECTF`, `LPALEFFECTFV`) and getting (`LPALGETEFFECTI`, `LPALGETEFFECTIV`, `LPALGETEFFECTF`, `LPALGETEFFECTFV`) effect parameters of integer and float types (scalar and vector).\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/AdaDoom3/AdaDoom3/snapshot.txt#_snippet_8\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY *LPALGENEFFECTS)(ALsizei n, ALuint* effects);\n```\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY *LPALDELETEEFFECTS)(ALsizei n, const ALuint *effects);\n```\n\nLANGUAGE: c\nCODE:\n```\ntypedef ALboolean (AL_APIENTRY *LPALISEFFECT)(ALuint effectid);\n```\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY *LPALEFFECTI)(ALuint effect, ALenum param, ALint value);\n```\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY *LPALEFFECTIV)(ALuint effect, ALenum param, const ALint *values);\n```\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY *LPALEFFECTF)(ALuint effect, ALenum param, ALfloat value);\n```\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY *LPALEFFECTFV)(ALuint effect, ALenum param, const ALfloat *values);\n```\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY *LPALGETEFFECTI)(ALuint effect, ALenum param, ALint *value);\n```\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY *LPALGETEFFECTIV)(ALuint effect, ALenum param, ALint *values);\n```\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY *LPALGETEFFECTF)(ALuint effect, ALenum param, ALfloat *value);\n```\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (AL_APIENTRY *LPALGETEFFECTFV)(ALuint effect, ALenum param, ALfloat *values);\n```\n\n----------------------------------------\n\nTITLE: Parsing Caddyfile directives for metrics in Go\nDESCRIPTION: This snippet implements a function to parse Caddyfile directives specific to the metrics module, setting up middleware and handling configurations such as disable_openmetrics. It ensures proper unmarshal of configuration tokens and handles errors accordingly.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_89\n\nLANGUAGE: Go\nCODE:\n```\nfunc parseCaddyfile(h httpcaddyfile.Helper) (caddyhttp.Middleware, error) {\n\t// UnmarshalCaddyfile sets up the handler from Caddyfile tokens.\n\t// Processes directives such as disable_openmetrics.\n\t// Returns configured middleware or an error.\n```\n\n----------------------------------------\n\nTITLE: TypeScript Weak Memorizer Utility\nDESCRIPTION: Uses weak references to memorize function calls, suitable for managing memory footprint in cache implementations.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_61\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-lib/src/lib/util/memorizerWeak.ts\n```\n\n----------------------------------------\n\nTITLE: TypeScript PnP Loader Tests and Implementation\nDESCRIPTION: Tests and implements Plug'n'Play loader functionality for configuration management, allowing seamless module resolution.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_26\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* pnpLoader.ts implementation and tests */\n```\n\n----------------------------------------\n\nTITLE: Static Method Declaration in JavaScript Class\nDESCRIPTION: Example of a static method declaration in a JavaScript class, which demonstrates method naming conventions and possible unused variables warnings.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/eslint/eslint/snapshot.txt#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nstatic mymethod() {\n```\n\n----------------------------------------\n\nTITLE: TypeScript Text Utility Module\nDESCRIPTION: Contains functions for string manipulation, normalization, and validation relevant to spell check routines.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_70\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-lib/src/lib/util/text.ts\n```\n\n----------------------------------------\n\nTITLE: Nunjucks Template Syntax for Eleventy\nDESCRIPTION: Example of Nunjucks template syntax used in Eleventy static site generator for generating feeds and sitemaps.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/eslint/eslint/snapshot.txt#_snippet_16\n\nLANGUAGE: Nunjucks\nCODE:\n```\nbsoluteUrl(metadata.url) }}{% endset %}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Link Module Tests and Implementation\nDESCRIPTION: Tests and implements link-related functionality within the settings, such as referencing or linking configurations.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_35\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* link.ts implementation and tests */\n```\n\n----------------------------------------\n\nTITLE: TypeScript resolveFile Utility\nDESCRIPTION: Handles resolving file paths or URLs to absolute or canonical forms, often used in configuration or resource location.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_66\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-lib/src/lib/util/resolveFile.ts\n```\n\n----------------------------------------\n\nTITLE: Using a custom reporter file in cspell\nDESCRIPTION: This command uses a custom reporter located at './<path>/reporter.cjs'. See API for details.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell/static/help-lint.txt#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncspell . --reporter ./<path>/reporter.cjs\n```\n\n----------------------------------------\n\nTITLE: TypeScript findUp from URL\nDESCRIPTION: Extends findUp logic to URL contexts, enabling locating resources starting from a URL instead of a filesystem path.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_55\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-lib/src/lib/util/findUpFromUrl.ts\n```\n\n----------------------------------------\n\nTITLE: TypeScript Validator Module\nDESCRIPTION: Provides validation functions for spell checking, including rules enforcement and text validation.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_79\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-lib/src/lib/validator.ts\n```\n\n----------------------------------------\n\nTITLE: Factorial Variable in Project Euler Problem 20\nDESCRIPTION: Variable storing the factorial calculation of a number in the solution for Project Euler problem 20.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_82\n\nLANGUAGE: Python\nCODE:\n```\nnfact = factorial(num)\n```\n\n----------------------------------------\n\nTITLE: Function Declaration with Unknown Word - C\nDESCRIPTION: This snippet declares a function `remsaccess`. The word 'remsaccess' is flagged as an unknown word.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_109\n\nLANGUAGE: C\nCODE:\n```\nremsaccess ()\n```\n\n----------------------------------------\n\nTITLE: Forcing default reporter in cspell\nDESCRIPTION: This command forces the default reporter, overriding any reporters defined in the configuration.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell/static/help-lint.txt#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncspell . --reporter default\n```\n\n----------------------------------------\n\nTITLE: String Formatting with Unknown Word - C\nDESCRIPTION: This snippet uses string formatting to create a filename. The constant REGISTRYDIR is flagged as an unknown word. It's used as part of the directory path, suggesting it might be a misspelled constant or a custom directory name.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_67\n\nLANGUAGE: C\nCODE:\n```\nfname, \"%s/%s\", mkfname (REGISTRYDIR), userid);\n```\n\n----------------------------------------\n\nTITLE: Multiline String Assignments with Embedded Markdown in TypeScript\nDESCRIPTION: This TypeScript snippet inside a markdown block shows assignment of multiline template string literals to variables with content resembling markdown syntax (`~~`). The snippet is embedded inside markdown fenced code, illustrating mixing of markdown formatting with TypeScript templated strings. It contains a multiline comment preceding the assignments.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-grammar/samples/sample.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/*\n    Typescirpt embedded in Markdown\n    */\na = `\n      ~~\n       `;\ny = 'h';\n```\n\n----------------------------------------\n\nTITLE: Modular Exponentiation Function in Project Euler Problem 188\nDESCRIPTION: Function implementing modular exponentiation for solving Project Euler problem 188.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_86\n\nLANGUAGE: Python\nCODE:\n```\ndef _modexpt(base: int, exponent\n```\n\n----------------------------------------\n\nTITLE: Variable Initialization with Unknown Word - C\nDESCRIPTION: This snippet initializes an integer variable 'shownhelp' to 0. The word 'shownhelp' is flagged as an unknown word, suggesting a potential misspelling or an unconventional variable name. It might control whether help information is displayed.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_69\n\nLANGUAGE: C\nCODE:\n```\nint shownhelp = 0;\n```\n\n----------------------------------------\n\nTITLE: Python IPO Curve Interpolation Types in STK Track Script\nDESCRIPTION: Code snippets handling interpolation and extrapolation types for IPO (InterPOlation) curves in Blender animation. These define how the animation curves behave between keyframes and beyond the animation range.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/AdaDoom3/AdaDoom3/snapshot.txt#_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nIpoCurve.InterpTypes.LINEAR:\nIpoCurve.InterpTypes.CONST:\nIpoCurve.ExtendTypes.EXTRAP: \"extrap\",\nIpoCurve.ExtendTypes.CYCLIC_EXTRAP: \"cyclic_extrap\",\n```\n\n----------------------------------------\n\nTITLE: Finding Substrings in Bytearrays with Assertions\nDESCRIPTION: This snippet utilizes the `.find()` and `.rfind()` methods of bytearray objects to search for substrings. The example tests for various scenarios including the absence of the substring, and the use of start and end parameters with the `rfind` method.  Assertions are used to confirm the returned indices.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nassert bytearray(b\"abcdabcda\").find(b\"a\") == 0\n```\n\nLANGUAGE: python\nCODE:\n```\nassert bytearray(b\"abcdabcda\").rfind(b\"a\") == 8\n```\n\nLANGUAGE: python\nCODE:\n```\nassert bytearray(b\"abcdabcda\").rfind(b\"a\", 2, 6)\n```\n\nLANGUAGE: python\nCODE:\n```\nassert bytearray(b\"abcdabcda\").rfind(b\"a\", None,\n```\n\nLANGUAGE: python\nCODE:\n```\nassert bytearray(b\"abcdabcda\").rfind(b\"a\", 2, None\n```\n\n----------------------------------------\n\nTITLE: Importing Container from TSyringe Dependency Injection Framework\nDESCRIPTION: Code importing the 'container' object from the tsyringe dependency injection library. This appears in multiple files throughout the codebase to facilitate dependency injection.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_81\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {container} from 'tsyringe';\n```\n\n----------------------------------------\n\nTITLE: Structure Member Access with Unknown Word - C\nDESCRIPTION: This snippet accesses the 'lastconsolepage' member of the 'othruseronl' structure. The word 'lastconsolepage' is flagged as an unknown word. This member likely stores the last console page viewed by a user.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_74\n\nLANGUAGE: C\nCODE:\n```\nothruseronl.lastconsolepage;\n```\n\n----------------------------------------\n\nTITLE: Comment on Text Transformation Logic (TypeScript)\nDESCRIPTION: Comments explaining the process of getting text and transforming (misspelled 'transofrming', 'transofrm') it, possibly involving mentions, within the EditedMessagePlugin.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\ngetting the text, and transofrming it to the desired format\n```\n\nLANGUAGE: typescript\nCODE:\n```\nto tell the editor to transofrm mentions as well.\n```\n\n----------------------------------------\n\nTITLE: Evaluating TLS and PKI Modules Using Go Reflection in Caddyfile Parser\nDESCRIPTION: This snippet uses Go reflection to compare TLS and PKI application options against known module instances from the caddytls and caddypki packages. It helps determine if the provided configuration matches default or explicit TLS/PKI settings and processes connection policies accordingly.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nreflect.DeepEqual(tlsApp, &caddytls.TLS{CertificatesRaw: ...})\nreflect.DeepEqual(pkiApp, &caddypki.PKI{CAs: make(map[string]*caddypki.CA)})\n```\n\n----------------------------------------\n\nTITLE: Importing Caddy Standard Modules in Go\nDESCRIPTION: Imports the standard Caddy modules package (`github.com/caddyserver/caddy/v2/modules/standard`) using the blank identifier `_`. This ensures the modules within the package are registered with Caddy during initialization.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_15\n\nLANGUAGE: Go\nCODE:\n```\n_ \"github.com/caddyserver/caddy/v2/modules/standard\"\n```\n\n----------------------------------------\n\nTITLE: Hubble Parameter Calculation in Cosmology in Python\nDESCRIPTION: Calculates the Hubble constant and related parameters like the LCDM model. Uses cosmological constants and models the universe’s expansion rate.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_75\n\nLANGUAGE: Python\nCODE:\n```\n40:29 - Unknown word (constante) -- hubble_constant: Hubble constante is the expansion rate\n```\n\nLANGUAGE: Python\nCODE:\n```\n6:42 - Unknown word (directily) -- becausethe redshift is directily mensure\n```\n\nLANGUAGE: Python\nCODE:\n```\n98:12 - Unknown word (LCDM) -- # demo LCDM approximation\n```\n\n----------------------------------------\n\nTITLE: Managing storage and certificates in Go with CertMagic\nDESCRIPTION: These snippets involve configuring storage via CertMagic's FileStorage, including setting paths such as AppDataDir and handling cleanup procedures, supporting automated certificate management.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_97\n\nLANGUAGE: Go\nCODE:\n```\nvar DefaultStorage = &certmagic.FileStorage{Path: AppDataDir}\ncertmagic.CleanUpOwnLocks(context.TODO())\n```\n\n----------------------------------------\n\nTITLE: Generating a Trie File from a Hunspell Dictionary - Shell\nDESCRIPTION: Reads a Hunspell dictionary file (`english.dic`), expands it using the associated affix rules specified in `english.aff`, and outputs a compressed trie dictionary file (`english.trie.gz`). This process may be resource-intensive for large dictionaries. The resulting trie file format is optimized for quick lookup and used internally by CSpell.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-tools/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncspell-tools-cli compile-trie english.dic\n```\n\n----------------------------------------\n\nTITLE: Using nolint Directive (Comment)\nDESCRIPTION: A `//nolint:staticcheck` directive comment is used to suppress a specific warning from the `staticcheck` linter for the subsequent line of code.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_37\n\nLANGUAGE: Go\nCODE:\n```\n//nolint:staticcheck\n```\n\n----------------------------------------\n\nTITLE: Installing cspell-config using npm\nDESCRIPTION: Command to install the cspell-config library as a dependency in a project using npm. The -S flag saves it as a production dependency in package.json.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-config-lib/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -S cspell-config\n```\n\n----------------------------------------\n\nTITLE: Defining Header Offsets in TypeScript\nDESCRIPTION: This TypeScript snippet defines constants representing the byte offsets for various fields within the Trie Blob header. These constants improve code readability and maintainability by providing meaningful names for offsets within the binary data structure. The constants are used to access specific fields in the header, like the signature, endianness marker, version, node offset, number of nodes, character index offset, and character index length.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-trie-lib/src/lib/TrieBlob/README.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst HEADER_OFFSET = 0;\nconst HEADER_OFFSET_SIG = HEADER_OFFSET;\nconst HEADER_OFFSET_ENDIAN = HEADER_OFFSET_SIG + 8;\nconst HEADER_OFFSET_VERSION = HEADER_OFFSET_ENDIAN + 4;\nconst HEADER_OFFSET_NODES = HEADER_OFFSET_VERSION + 4;\nconst HEADER_OFFSET_NODES_LEN = HEADER_OFFSET_NODES + 4;\nconst HEADER_OFFSET_CHAR_INDEX = HEADER_OFFSET_NODES_LEN + 4;\nconst HEADER_OFFSET_CHAR_INDEX_LEN = HEADER_OFFSET_CHAR_INDEX + 4;\n```\n\n----------------------------------------\n\nTITLE: Variable Declaration with Unknown Word - C\nDESCRIPTION: This snippet calls the function `runcommand` with the argument `unixsh`. The word 'unixsh' is flagged as an unknown word. The unixsh is probably a shell command for a Unix like system.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_99\n\nLANGUAGE: C\nCODE:\n```\nruncommand (unixsh);\n```\n\n----------------------------------------\n\nTITLE: Testing Implicit Config Loading with Symlink (Shell)\nDESCRIPTION: Shell command attempting to use cspell implicitly with the configuration file represented by the `cspell.yaml` symlink. This command is expected to fail to load the configuration in the reported bug scenario.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/issues/issue-5120/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncspell trace somenewword\n```\n\n----------------------------------------\n\nTITLE: Finding Unknown Words in IAbpCache.cs\nDESCRIPTION: This line identifies an unknown word, `Othewise`, in the IAbpCache.cs file. The comment surrounding this word suggests it's a typo for 'Otherwise', related to handling a null value.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/aspnetboilerplate/aspnetboilerplate/snapshot.txt#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/Runtime/Caching/IAbpCache.cs:111:162   - Unknown word (Othewise)   -- used if it's not null. Othewise, <see cref=\"ICacheOptions\n```\n\n----------------------------------------\n\nTITLE: Function Declaration with Unknown Word - C\nDESCRIPTION: These snippets show function declarations for 'loadregistry' and 'saveregistry'. The words 'loadregistry' and 'saveregistry' are flagged as unknown words. These functions likely handle loading and saving registry data, respectively.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_68\n\nLANGUAGE: C\nCODE:\n```\nloadregistry (char *userid)\n```\n\nLANGUAGE: C\nCODE:\n```\nsaveregistry (char *userid)\n```\n\n----------------------------------------\n\nTITLE: Linear Algebra Length Computation in Python\nDESCRIPTION: Calculates Euclidean length of vectors, used in vector normalization and geometric computations. Dependencies include NumPy; input is vector data; output is scalar length.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_29\n\nLANGUAGE: Python\nCODE:\n```\nlinear_algebra/README.md:20:40     - Unknown word (eulidean)   -- length() : returns the eulidean length of the vector\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration Search and Location Files\nDESCRIPTION: Contains functions and definitions for locating configuration files within project structures and applying search heuristics.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* configLocations and search functions */\n```\n\n----------------------------------------\n\nTITLE: TypeScript interface definition with optional newprop property\nDESCRIPTION: TypeScript declaration file defining an interface with an optional 'newprop' property. This appears in the public API definition for a Svelte action.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/sveltejs/svelte/snapshot.txt#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n* newprop?: string;\n```\n\n----------------------------------------\n\nTITLE: Assignment with Bytearrays\nDESCRIPTION: This snippet checks the equality of bytearray after assigning a value to a variable. The assertion verifies the value.  The input is the bytearray that has been assigned and compared and the output is the boolean result of the check. \nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nassert a == bytearray(b'abcdabcdabcd')\n```\n\n----------------------------------------\n\nTITLE: Getting Caddy Configuration Adapter in Go\nDESCRIPTION: Retrieves a configuration adapter using `caddyconfig.GetAdapter`. The specific adapter (e.g., 'caddyfile', 'json') is determined by the value of `adapterFlag` or a hardcoded string. Adapters handle loading and understanding different config formats.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_27\n\nLANGUAGE: Go\nCODE:\n```\ncfgAdapter := caddyconfig.GetAdapter(adapterFlag)\n```\n\nLANGUAGE: Go\nCODE:\n```\ncfgAdapter = caddyconfig.GetAdapter(\"caddyfile\")\n```\n\nLANGUAGE: Go\nCODE:\n```\ncfgAdapter = caddyconfig.GetAdapter(adapterName)\n```\n\nLANGUAGE: Go\nCODE:\n```\nconfigFile == \"\" && caddyconfig.GetAdapter(\"caddyfile\") != nil {\n```\n\n----------------------------------------\n\nTITLE: Importing CredentialType from wireapp/core\nDESCRIPTION: This snippet imports `CredentialType` from `@wireapp/core/lib/messagingProtocols`.  This likely relates to types of credentials or security protocols in the application, particularly for managing end-to-end encryption. It is typically used for authentication or encryption-related operations.  Depends on the `@wireapp/core` library. The unknown word `wireapp` is the cspell error.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_99\n\nLANGUAGE: typescript\nCODE:\n```\nimport {CredentialType} from '@wireapp/core/lib/messagingProtocols\n```\n\n----------------------------------------\n\nTITLE: Checking for Applock Status\nDESCRIPTION: This snippet is part of a React component that likely handles the settings related to the App Lock. The unknown word `applock` is the cspell error.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_113\n\nLANGUAGE: typescript\nCODE:\n```\nname=\"status-preference-applock\"\n```\n\n----------------------------------------\n\nTITLE: TypeScript Model for Filename Glob Matching\nDESCRIPTION: Defines a TypeScript interface or class representing the result or configuration of filename glob matching functions, facilitating type safety and structured data handling within the file matching modules.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* Model definition for filename glob match results */\n```\n\n----------------------------------------\n\nTITLE: FFI HTTP Library Compilation Command\nDESCRIPTION: Command line instruction for compiling a C++ HTTP library as a shared object for use with Dart FFI. Demonstrates how to create a shared library with the proper flags.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/dart-lang/sdk/snapshot.txt#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nc++ -shared -fpic lib/fake_http.cc -lstdc++ -o lib/libfake_http.so\n```\n\n----------------------------------------\n\nTITLE: Modals.ts: Importing WebApp Events\nDESCRIPTION: This snippet imports event handling capabilities from '@wireapp/webapp-events', enabling the modals system to interact with application-wide event dispatching and listening mechanisms, essential for managing user interactions and modal lifecycle events in the web app.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {WebAppEvents} from '@wireapp/webapp-events';\n```\n\n----------------------------------------\n\nTITLE: Importing WebAppEvents from wireapp/webapp-events\nDESCRIPTION: This imports `WebAppEvents` from `@wireapp/webapp-events`, indicating usage of events that are specific to the web application context. It suggests the presence of custom events. This enables communication between different parts of the web application. Dependencies include `@wireapp/webapp-events`. The unknown word `wireapp` is the cspell error.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_104\n\nLANGUAGE: typescript\nCODE:\n```\nimport {WebAppEvents} from '@wireapp/webapp-events';\n```\n\n----------------------------------------\n\nTITLE: String Copy with Unknown Word - C\nDESCRIPTION: This snippet copies the string 'RNBO' into the character array 'bc'. The word 'RNBO' is flagged as an unknown word, likely representing a specific code within the system.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_79\n\nLANGUAGE: C\nCODE:\n```\nstrcpy (bc, \"RNBO\");\n```\n\n----------------------------------------\n\nTITLE: SQLite FFI Constants in Dart\nDESCRIPTION: Constants defined for SQLite operations in a Dart FFI binding. These constants represent various SQLite open flags and error codes used when interacting with the SQLite database.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/dart-lang/sdk/snapshot.txt#_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\nconst int SQLITE_OPEN_READWRITE = 0x00000002;\nconst int SQLITE_OPEN_DELETEONCLOSE = 0x00000008;\nconst int SQLITE_OPEN_SUBJOURNAL = 0x00002000;\nconst int SQLITE_OPEN_NOMUTEX = 0x00008000;\nconst int SQLITE_OPEN_FULLMUTEX = 0x00010000;\nconst int SQLITE_OPEN_SHAREDCACHE = 0x00020000;\nconst int SQLITE_OPEN_PRIVATECACHE = 0x00040000;\nstatic const int SQLITE_NOMEM = 7;\nstatic const int SQLITE_CANTOPEN = 14;\nstatic const int SQLITE_TOOBIG = 18;\nstatic const int SQLITE_NOLFS = 22;\nstatic const int SQLITE_NOTADB = 26;\n```\n\n----------------------------------------\n\nTITLE: Sherman-Morrison Matrix Update in Python\nDESCRIPTION: Implements Sherman-Morrison formula for rank-one updates of matrix inverses, with an example initializing matrix 'ainv'. It also references index validation and is useful in numerical algorithms for updating matrix inverses efficiently.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_49\n\nLANGUAGE: Python\nCODE:\n```\n214:13 - Unknown word (ainv) -- >>> ainv = Matrix(3, 3, 0)\n59:33 - Unknown word (indicies) -- method Matrix.validate_indicies>\n```\n\n----------------------------------------\n\nTITLE: Handling OnDemand TLS Configuration and Permissions in Go for Caddy HTTP\nDESCRIPTION: This snippet manages the instantiation and configuration of OnDemand TLS options for HTTP servers by creating and populating OnDemandConfig structs from the caddytls module. It generates permission rules, marshals these into JSON-compatible raw options, and assigns them to the main TLS configuration, ensuring dynamic certificate provisioning is controlled as per specified endpoints.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nvar ond *caddytls.OnDemandConfig\nond = new(caddytls.OnDemandConfig)\nperm := caddytls.PermissionByHTTP{Endpoint: \"/somepath\"}\nond.PermissionRaw = caddyconfig.JSONModuleObject(perm)\n// assign ond to srv.TLS.OnDemand\n```\n\n----------------------------------------\n\nTITLE: Dart Test Configuration and Command Line Options\nDESCRIPTION: Code snippets showing command line options, flags, and configuration settings used in Dart tests, particularly for concurrency and stress testing.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/dart-lang/sdk/snapshot.txt#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\nJitTestRunner('out/ReleaseTSANX64', [\n```\n\nLANGUAGE: Dart\nCODE:\n```\n'-Drepeat=4',\n```\n\nLANGUAGE: Dart\nCODE:\n```\n'-Dshard=$i',\n```\n\nLANGUAGE: Dart\nCODE:\n```\n'-Dshards=$tsanShards',\n```\n\nLANGUAGE: Dart\nCODE:\n```\nfinal copyCoredumps = options['copy-coredumps\n```\n\nLANGUAGE: Dart\nCODE:\n```\nthat tools/utils.py:BaseCoredumpArchiver supports.\n```\n\nLANGUAGE: Dart\nCODE:\n```\nTo regenate expectations run:\n```\n\nLANGUAGE: Dart\nCODE:\n```\nFuture<String> waitUntilstderrContainsN(String needle\n```\n\nLANGUAGE: Dart\nCODE:\n```\n--smask : bitmask indicating which statements\n```\n\nLANGUAGE: Dart\nCODE:\n```\n[--num-output-lines NUMOUTPUTLINES]\n```\n\n----------------------------------------\n\nTITLE: Svelte-Specific Transition Event Handler Definitions\nDESCRIPTION: TypeScript definitions for Svelte-specific transition event handlers. These handle intro and outro transitions that are unique to the Svelte animation system.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/sveltejs/svelte/snapshot.txt#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nonoutrostartcapture?: EventHandler<CustomEvent>\nonoutroendcapture?: EventHandler<CustomEvent>\nonintrostartcapture?: EventHandler<CustomEvent>\nonintroendcapture?: EventHandler<CustomEvent>\n```\n\n----------------------------------------\n\nTITLE: Parsing String Patterns with Scope Annotations in JavaScript\nDESCRIPTION: This snippet represents a string pattern \"line ( a (b))\" broken down into individual tokens with associated scope annotations. It demonstrates how string tokens are assigned scopes such as 'source.s', 'paren.braces.s', and 'braces.s' to facilitate syntax highlighting or parsing logic. The purpose is to model the tokenization process for nested parentheses and braces, highlighting their hierarchical scopes for syntax analysis.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-grammar/fixtures/tokenizer-tests/test.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"line ( a (b))\"\n```\n\n----------------------------------------\n\nTITLE: Setting tabIndex to UNFOCUSABLE\nDESCRIPTION: This snippet sets the `tabIndex` attribute to `TabIndex.UNFOCUSABLE`. It will prevent the element from being focusable via keyboard navigation. Depends on `@wireapp/react-ui-kit`. The unknown word `UNFOCUSABLE` is the cspell error.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_108\n\nLANGUAGE: typescript\nCODE:\n```\ntabIndex={TabIndex.UNFOCUSABLE}\n```\n\n----------------------------------------\n\nTITLE: OpenAL Audio Effect Parameters in Ada\nDESCRIPTION: Constant definitions for various audio effect parameters in OpenAL, including distortion, echo, vocal morphing, pitch shifting, ring modulation, and auto-wah effects. These parameters allow configuration of special audio processing effects.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/AdaDoom3/AdaDoom3/snapshot.txt#_snippet_17\n\nLANGUAGE: Ada\nCODE:\n```\nAL_DISTORTION_LOWPASS_CUTOFF\nAL_DISTORTION_EQCENTER 0\nAL_DISTORTION_EQBANDWIDTH 0005\nAL_ECHO_LRDELAY\n-- Vocal morpher effect parameters\nAL_VOCAL_MORPHER_PHONEMEA : constant\nAL_VOCAL_MORPHER_PHONEMEA_COARSE_TUNING : constant\nAL_VOCAL_MORPHER_PHONEMEB : constant\nAL_VOCAL_MORPHER_PHONEMEB_COARSE_TUNING : constant\nAL_VOCAL_MORPHER_WAVEFORM\n-- Pitchshifter effect parameters\n-- Ringmodulator effect parameters\nAL_RING_MODULATOR_HIGHPASS_CUTOFF : constant\n-- Autowah effect parameters\nAL_AUTOWAH_ATTACK_TIME\nAL_AUTOWAH_RELEASE_TIME\nAL_AUTOWAH_RESONANCE\n```\n\n----------------------------------------\n\nTITLE: Exposing ConfigLoader API\nDESCRIPTION: This bug fix exposes the ConfigLoader API, enabling users to interact with the configuration loading process. This can be useful for advanced configuration scenarios and debugging.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell/test-cspell-esbuild-cjs/CHANGELOG.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nexpose ConfigLoader API ([#5032](https://github.com/streetsidesoftware/cspell/issues/5032)) ([e839990](https://github.com/streetsidesoftware/cspell/commit/e839990e94f639000bc926ae87187840fb17dee9))\n```\n\n----------------------------------------\n\nTITLE: Displaying Daily Performance Chart using Mermaid in Markdown\nDESCRIPTION: This snippet uses Mermaid syntax inside a Markdown code block to render an 'xychart-beta' chart titled 'Files Per Second by Day,' with multiple data series (bar and line) corresponding to daily performance metrics for various dates. It requires Mermaid support (e.g., in supported Markdown renderers or documentation hosts), and no installation is needed except for enabling Mermaid rendering. It expects formatted arrays for x-axis dates, bar data, and numerous line datasets, and outputs a visual time-series chart. The chart is limited to environments that support Mermaid, and will render as plain code if pasted elsewhere.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/perf-report.md#_snippet_0\n\nLANGUAGE: Mermaid\nCODE:\n```\nxychart-beta\n    title Files Per Second by Day\n    y-axis Files per Second\n    x-axis Date [Mar-24, Mar-25, Mar-26, Mar-29, Mar-30, Apr-1, Apr-2, Apr-4, Apr-7, Apr-8, Apr-9, Apr-10, Apr-11, Apr-14, Apr-15, Apr-16, Apr-17, Apr-18, Apr-19, Apr-20, Apr-21, Apr-22, Apr-23]\n    bar [170.15, 169.46, 168.97, 169.16, 165.19, 167.12, 170.37, 169.84, 169.20, 170.31, 166.27, 166.91, 170.48, 169.33, 169.62, 167.60, 169.74, 169.68, 169.99, 171.82, 172.90, 171.57, 166.24]\n    line [128.55, 123.13, 128.34, 129.63, 124.04, 124.98, 128.23, 124.77, 127.89, 127.66, 125.67, 123.96, 126.62, 121.49, 124.08, 125.35, 129.58, 129.31, 126.67, 127.87, 0.00, 122.89, 120.53]\n    line [102.75, 105.38, 105.40, 108.89, 108.97, 105.55, 109.02, 109.07, 108.93, 102.51, 106.98, 109.00, 108.35, 103.95, 107.46, 107.98, 108.91, 107.43, 108.61, 110.08, 0.00, 110.33, 106.34]\n    line [140.02, 140.41, 141.17, 142.23, 143.51, 141.89, 144.85, 135.75, 140.12, 141.93, 144.71, 138.12, 136.03, 141.29, 138.52, 140.48, 140.76, 140.21, 141.88, 140.61, 142.82, 137.75, 137.71]\n    line [84.46, 87.70, 74.07, 80.80, 84.33, 78.70, 84.38, 79.63, 81.82, 77.99, 81.50, 83.68, 82.24, 79.00, 81.10, 76.32, 82.35, 77.98, 81.12, 80.27, 85.76, 75.92, 80.78]\n    line [187.06, 199.37, 194.10, 194.60, 197.36, 195.73, 192.93, 191.61, 192.83, 195.35, 194.59, 189.25, 194.14, 192.92, 186.07, 185.77, 196.44, 190.62, 188.38, 197.27, 191.85, 192.30, 188.84]\n    line [161.01, 161.14, 161.02, 161.23, 161.25, 154.49, 160.21, 159.01, 159.81, 159.07, 154.86, 161.50, 157.82, 150.49, 156.51, 145.27, 158.44, 147.46, 154.06, 155.44, 160.39, 156.53, 154.14]\n    line [198.80, 198.73, 211.72, 221.65, 200.22, 211.45, 214.10, 213.54, 214.82, 216.50, 216.97, 214.34, 223.50, 215.07, 208.81, 218.55, 206.19, 208.58, 221.30, 221.28, 195.47, 221.02, 208.16]\n    line [64.40, 63.55, 62.46, 63.93, 62.91, 63.90, 62.22, 64.11, 62.38, 62.53, 61.32, 54.24, 63.37, 63.45, 60.45, 62.38, 64.57, 64.96, 64.20, 61.03, 61.27, 63.23, 62.50]\n    line [336.90, 337.64, 342.52, 344.39, 323.05, 332.32, 329.96, 332.43, 330.30, 334.01, 330.67, 335.10, 339.21, 338.50, 333.53, 327.92, 339.69, 338.54, 337.09, 336.49, 339.90, 331.90, 326.60]\n    line [147.33, 145.61, 148.28, 144.08, 145.60, 137.08, 138.21, 138.98, 136.61, 140.82, 136.34, 137.38, 144.66, 145.14, 143.84, 144.20, 144.52, 139.00, 143.78, 144.53, 136.95, 137.17, 141.60]\n    line [205.55, 231.40, 224.85, 237.49, 223.66, 231.23, 235.01, 220.71, 230.14, 228.37, 226.53, 212.60, 230.01, 224.21, 229.57, 224.99, 233.81, 228.85, 235.57, 231.39, 223.58, 218.87, 214.06]\n    line [186.88, 188.85, 185.59, 189.39, 193.26, 187.15, 184.74, 187.37, 186.23, 190.68, 147.53, 183.37, 189.36, 186.25, 190.23, 184.91, 191.69, 177.23, 189.25, 187.34, 190.75, 186.70, 182.89]\n    line [215.37, 218.33, 220.26, 228.02, 226.94, 217.16, 217.42, 227.00, 219.19, 223.64, 221.83, 216.60, 219.13, 224.29, 221.03, 219.41, 211.61, 231.08, 224.48, 227.64, 0.00, 218.50, 218.17]\n    line [113.74, 110.71, 115.58, 119.01, 118.83, 116.74, 109.55, 112.13, 116.38, 109.02, 116.94, 120.00, 115.72, 178.30, 177.73, 180.34, 180.24, 181.16, 179.47, 175.83, 182.94, 176.49, 173.56]\n    line [153.53, 151.77, 149.23, 157.46, 155.25, 144.83, 152.27, 154.71, 148.18, 156.04, 147.10, 154.73, 147.03, 148.45, 154.18, 145.25, 151.93, 153.78, 155.38, 157.43, 155.84, 151.73, 150.49]\n    line [190.88, 193.34, 184.57, 195.49, 178.54, 190.68, 196.99, 187.71, 198.59, 197.91, 153.08, 193.37, 186.31, 191.86, 190.39, 197.86, 198.53, 194.94, 194.83, 194.98, 181.85, 192.31, 196.87]\n    line [243.38, 245.38, 244.71, 244.86, 246.31, 247.68, 259.43, 240.39, 235.37, 241.80, 223.67, 256.52, 244.43, 247.02, 250.63, 247.99, 249.17, 253.74, 253.49, 250.95, 246.49, 244.52, 245.72]\n    line [96.12, 102.27, 101.01, 101.78, 96.16, 99.80, 97.07, 97.79, 98.91, 96.86, 98.48, 95.78, 98.82, 98.24, 97.95, 94.18, 94.73, 96.19, 101.04, 101.25, 21.60, 54.07, 86.67]\n    line [111.02, 111.29, 113.14, 115.11, 113.41, 110.41, 110.44, 115.08, 114.00, 113.95, 110.13, 115.10, 114.20, 113.57, 114.05, 114.46, 113.36, 110.56, 109.84, 116.20, 117.60, 114.81, 115.13]\n    line [373.61, 378.51, 353.84, 382.13, 383.17, 373.36, 381.11, 371.41, 375.01, 366.15, 382.62, 383.48, 384.04, 359.97, 375.35, 369.72, 368.89, 380.64, 373.25, 373.99, 373.98, 376.67, 368.51]\n    line [121.31, 121.15, 119.07, 117.19, 121.84, 113.82, 117.71, 115.26, 119.06, 114.45, 115.00, 120.23, 118.00, 118.40, 118.37, 116.05, 123.88, 119.49, 121.74, 116.48, 120.61, 122.50, 116.03]\n    line [249.83, 254.84, 250.99, 267.50, 272.96, 257.38, 260.99, 254.08, 252.77, 256.08, 266.31, 262.37, 261.47, 254.20, 253.24, 261.07, 260.83, 260.89, 253.32, 254.79, 261.54, 255.02, 257.43]\n    line [333.75, 333.80, 334.21, 340.82, 328.95, 338.30, 340.61, 333.96, 339.43, 331.60, 337.56, 339.68, 342.67, 340.53, 332.27, 335.32, 337.55, 341.08, 333.28, 342.44, 335.31, 327.64, 337.12]\n    line [245.83, 239.85, 239.34, 241.08, 234.18, 235.67, 236.41, 224.18, 237.10, 241.63, 230.62, 246.29, 232.09, 242.10, 239.18, 228.11, 235.38, 245.98, 246.76, 242.90, 234.99, 242.37, 239.31]\n    line [138.70, 135.08, 132.05, 139.13, 137.14, 134.77, 129.03, 132.92, 133.01, 131.94, 136.24, 139.59, 139.80, 133.78, 134.61, 128.41, 137.96, 136.05, 137.57, 132.11, 0.00, 137.28, 136.15]\n    line [85.33, 95.39, 95.28, 93.74, 88.41, 97.83, 99.26, 98.35, 94.04, 92.16, 96.89, 89.38, 97.60, 95.04, 95.17, 95.45, 95.51, 99.80, 94.01, 98.29, 95.98, 98.39, 97.61]\n    line [48.37, 48.20, 48.90, 49.50, 48.70, 48.07, 49.72, 48.96, 48.45, 48.17, 47.87, 50.31, 48.30, 48.77, 47.68, 47.69, 48.50, 48.03, 49.42, 49.32, 46.59, 48.05, 47.43]\n    line [158.27, 163.28, 162.97, 167.80, 151.35, 162.59, 164.62, 163.01, 168.55, 162.80, 164.30, 168.75, 168.13, 157.11, 162.19, 160.72, 162.22, 163.33, 167.29, 165.80, 161.26, 163.43, 155.81]\n    line [213.93, 214.05, 215.63, 222.67, 213.80, 214.66, 227.86, 215.51, 213.60, 219.74, 229.98, 210.41, 211.03, 220.37, 222.63, 214.45, 219.40, 210.16, 226.83, 210.62, 211.00, 209.91, 211.94]\n    line [159.05, 160.24, 163.39, 166.67, 150.69, 158.40, 157.33, 163.45, 164.03, 166.16, 160.66, 159.82, 162.39, 162.85, 163.21, 157.56, 158.15, 163.19, 164.04, 162.46, 157.73, 161.64, 158.56]\n    line [153.16, 149.16, 149.10, 141.11, 141.56, 145.52, 151.04, 149.76, 147.19, 149.14, 146.94, 144.05, 149.94, 148.30, 147.19, 146.95, 147.95, 146.79, 147.09, 150.33, 149.26, 149.39, 142.38]\n    line [18.65, 17.61, 17.35, 16.76, 17.72, 17.35, 17.65, 17.28, 17.60, 16.96, 17.77, 17.06, 17.46, 17.21, 17.42, 17.60, 17.08, 17.31, 17.56, 17.31, 17.48, 17.24, 16.92]\n    line [9.07, 9.18, 8.85, 8.88, 8.98, 8.86, 9.02, 8.96, 9.04, 7.54, 9.19, 9.07, 9.09, 8.79, 8.86, 9.07, 9.04, 8.87, 8.76, 9.19, 0.00, 8.87, 8.91]\n    line [37.43, 37.77, 35.49, 38.47, 34.67, 37.33, 36.38, 33.48, 34.77, 37.91, 37.41, 35.78, 36.99, 37.77, 37.41, 38.03, 37.53, 36.12, 37.89, 38.88, 0.00, 38.42, 35.42]\n    line [155.42, 148.92, 148.41, 153.58, 150.94, 143.07, 143.33, 149.63, 148.24, 150.53, 145.81, 135.51, 153.54, 148.49, 150.16, 149.84, 151.62, 149.82, 147.39, 150.27, 0.00, 147.88, 143.90]\n    line [130.85, 117.33, 124.90, 126.70, 118.28, 118.73, 131.77, 121.36, 115.15, 130.27, 129.70, 106.78, 126.97, 127.64, 125.44, 128.53, 127.62, 128.92, 120.98, 123.98, 0.00, 122.91, 125.27]\n    line [88.99, 86.43, 87.49, 88.18, 89.80, 85.13, 86.10, 87.57, 86.19, 87.38, 86.67, 88.15, 82.83, 86.26, 85.93, 88.01, 87.47, 86.56, 87.65, 86.60, 0.00, 87.93, 86.07]\n    line [80.74, 79.45, 78.90, 77.54, 81.64, 79.42, 77.99, 80.60, 77.45, 79.26, 78.59, 74.22, 77.47, 71.52, 79.38, 78.34, 80.66, 81.07, 81.90, 79.63, 0.00, 77.56, 76.15]\n    line [34.39, 35.01, 35.05, 34.45, 35.12, 35.58, 36.26, 35.35, 33.46, 33.90, 35.56, 34.65, 35.25, 33.95, 35.11, 35.60, 35.68, 35.27, 35.45, 35.29, 0.00, 36.03, 35.32]\n    line [32.52, 33.58, 32.45, 33.01, 32.72, 32.66, 33.55, 32.53, 32.45, 32.84, 31.03, 33.00, 32.16, 32.22, 32.66, 32.69, 33.19, 30.88, 31.77, 33.15, 0.00, 31.72, 32.35]\n    line [376.31, 372.07, 383.78, 387.22, 383.71, 379.46, 361.04, 377.52, 372.77, 388.59, 381.59, 348.04, 380.94, 383.05, 379.79, 379.24, 389.97, 387.83, 386.24, 368.53, 0.00, 376.50, 377.40]\n    line [202.35, 210.95, 211.66, 216.55, 215.27, 211.34, 210.95, 214.71, 213.10, 213.49, 213.15, 207.01, 217.98, 213.40, 214.15, 209.08, 210.92, 212.31, 202.24, 216.69, 0.00, 216.61, 209.72]\n    line [30.27, 30.92, 29.47, 28.68, 29.57, 28.57, 29.71, 29.80, 29.09, 30.39, 28.82, 29.85, 30.29, 29.17, 29.16, 30.32, 29.23, 29.37, 29.90, 29.82, 0.00, 28.87, 28.89]\n    line [71.68, 76.76, 74.86, 76.49, 79.15, 75.48, 79.12, 77.09, 74.93, 76.78, 77.18, 78.18, 76.70, 76.29, 76.45, 76.07, 75.42, 76.77, 77.79, 77.80, 0.00, 71.90, 73.58]\n    line [67.85, 66.26, 65.71, 66.97, 59.95, 64.70, 68.07, 62.75, 56.53, 64.20, 68.55, 66.50, 63.84, 67.31, 66.50, 66.41, 65.32, 66.89, 68.61, 62.38, 0.00, 65.42, 64.86]\n    line [167.95, 176.21, 170.25, 176.92, 156.03, 170.40, 177.72, 173.91, 177.92, 179.08, 173.27, 175.00, 170.86, 165.94, 173.69, 173.55, 174.13, 172.94, 170.54, 173.57, 0.00, 170.82, 166.93]\n    line [221.92, 208.33, 219.80, 213.72, 203.24, 214.01, 219.35, 211.25, 222.14, 222.81, 213.62, 192.45, 214.69, 213.97, 220.18, 219.45, 220.27, 211.75, 215.92, 221.06, 0.00, 221.33, 209.32]\n    line [191.91, 205.03, 200.51, 203.16, 199.89, 196.17, 195.60, 198.67, 195.49, 190.29, 196.88, 194.92, 202.96, 194.19, 200.03, 194.80, 200.11, 202.53, 198.27, 204.52, 0.00, 186.65, 199.52]\n    line [46.43, 46.81, 47.74, 46.04, 47.27, 46.31, 47.51, 45.90, 45.44, 47.98, 45.98, 48.61, 46.63, 47.25, 46.53, 46.91, 46.99, 47.21, 43.97, 47.10, 0.00, 47.45, 46.18]\n    line [27.78, 28.31, 28.02, 26.46, 28.25, 22.36, 22.51, 22.71, 22.07, 22.74, 22.43, 65.92, 62.39, 66.34, 66.55, 64.05, 68.35, 68.05, 68.62, 69.45, 64.83, 67.35, 68.84]\n```\n\n----------------------------------------\n\nTITLE: Defining Suggestions in a Custom Text File Format\nDESCRIPTION: Example of a custom text file format for CSpell suggestion dictionaries. Each line defines a typo followed by '->' and one or more comma-separated suggestions. This format allows for easy management of common misspellings.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/rfc/rfc-0001 suggestions/README.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nagainnst->against\nagains->against\nagaisnt -> against\naganist-> against\naggaravates->aggravates\nalusion->allusion, illusion\nalwasy->always\nalwyas->always\namalgomated->amalgamated\namatuer->amateur\namature->armature, amateur\nboaut->boat, bout, about\n```\n\n----------------------------------------\n\nTITLE: Preferring Suggestions First\nDESCRIPTION: This feature enhancement modifies the cspell's suggestion logic so that preferred suggestions are listed first. The input is the word to spell check, and the output are the suggestions which are sorted by preference. There is no mention of explicit dependencies.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-pipe/CHANGELOG.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n* Preferred suggestions are listed first ([#3869](https://github.com/streetsidesoftware/cspell/issues/3869)) ([1b7a65d](https://github.com/streetsidesoftware/cspell/commit/1b7a65d6ec851b78e1cc27c56f32b77adfba36e5))\n```\n\n----------------------------------------\n\nTITLE: Enabling pytest --showlocals Option in tox.ini\nDESCRIPTION: This configuration line adds the `--showlocals` flag to the pytest command executed within a tox environment. This pytest option causes local variables to be displayed in tracebacks upon test failures. The term 'showlocals' was flagged as an unknown word by cspell.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/pycontribs/jira/snapshot.txt#_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n--showlocals \\\n```\n\n----------------------------------------\n\nTITLE: Support conditional builds in cspell-tools\nDESCRIPTION: The bug fix adds support for conditional builds using `cspell-tools`. It enhances the flexibility of build processes.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-strong-weak-map/test-cspell-strong-weak-map/CHANGELOG.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n**cspell-tools:** support conditional builds. ([#4668](https://github.com/streetsidesoftware/cspell/issues/4668)) ([de4d897](https://github.com/streetsidesoftware/cspell/commit/de4d897139fe5c98a83af926be23727f42be98d6))\n```\n\n----------------------------------------\n\nTITLE: Pointer Event Handler Definitions for Svelte Elements\nDESCRIPTION: TypeScript definitions for pointer-related event handlers in Svelte components. These handle events from pointing devices like mouse, touch, and pen inputs.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/sveltejs/svelte/snapshot.txt#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nongotpointercapturecapture?: PointerEventHandler\nonpointercancelcapture?: PointerEventHandler\nonpointerdowncapture?: PointerEventHandler\nonpointerentercapture?: PointerEventHandler\nonpointerleavecapture?: PointerEventHandler\nonpointermovecapture?: PointerEventHandler\nonpointeroutcapture?: PointerEventHandler\nonpointerovercapture?: PointerEventHandler\nonpointerupcapture?: PointerEventHandler\nonlostpointercapturecapture?: PointerEventHandler\n```\n\n----------------------------------------\n\nTITLE: Testing Base64 String Handling (TypeScript)\nDESCRIPTION: A test case likely validating URL or string parsing, checking the handling of a base64 encoded string ('SGVsbG8sIFdvcmxkIQ=='), potentially involving an unknown term 'Fdvcmxk' in the test description or surrounding code.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nplain;base64,SGVsbG8sIFdvcmxkIQ==')).toBe('');\n```\n\nLANGUAGE: typescript\nCODE:\n```\nplain;base64,SGVsbG8sIFdvcmxkIQ==')).toBe(false);\n```\n\n----------------------------------------\n\nTITLE: Update shasum checksum files\nDESCRIPTION: This bug fix for cspell-tools adds the ability to update shasum checksum files. It enables automatic updates of checksum files used for verifying the integrity of files.  This makes updating checksums part of the build process.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/CHANGELOG.md#_snippet_7\n\nLANGUAGE: git\nCODE:\n```\ncspell-tools: be able to update shasum checksum files. ([#4634](https://github.com/streetsidesoftware/cspell/issues/4634)) ([a67ea47](https://github.com/streetsidesoftware/cspell/commit/a67ea4715bee40b4105139ca4fbfdb1da4800dce))\n```\n\n----------------------------------------\n\nTITLE: Generating JSX or Code from Show Condition (JavaScript)\nDESCRIPTION: Processes rendering logic to generate JSX or code blocks based on the 'show' variable, leveraging conditional expressions. Supports code generation for specified formats with dependencies on React JSX runtime.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/mdx-js/mdx/snapshot.txt#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst code = 'code' || show === 'esast' ? generateJsx : false\n```\n\n----------------------------------------\n\nTITLE: Lock cosmiconfig to 8.0.0\nDESCRIPTION: This bug fix locks the version of `cosmiconfig` to 8.0.0. It ensures compatibility and stability by preventing updates to later, potentially incompatible, versions of the dependency.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-strong-weak-map/test-cspell-strong-weak-map/CHANGELOG.md#_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nlock cosmiconfig to 8.0.0 ([#4335](https://github.com/streetsidesoftware/cspell/issues/4335)) ([0f37e2c](https://github.com/streetsidesoftware/cspell/commit/0f37e2cfa4b854c49f82b01bce57abb3c2c7f9ab))\n```\n\n----------------------------------------\n\nTITLE: Support multiple repMap combinations\nDESCRIPTION: This feature allows supporting multiple `repMap` combinations. It expands the configuration capabilities, thus offering increased flexibility.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-strong-weak-map/test-cspell-strong-weak-map/CHANGELOG.md#_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nSupport multiple `repMap` combinations ([#4270](https://github.com/streetsidesoftware/cspell/issues/4270)) ([bbc3ed4](https://github.com/streetsidesoftware/cspell/commit/bbc3ed4a1edb704401f40cf8913a5a9f522562fc))\n```\n\n----------------------------------------\n\nTITLE: Setting Caddy Default Storage to CertMagic FileStorage in Go\nDESCRIPTION: Configures the default storage mechanism for Caddy (`caddy.DefaultStorage`) to use `certmagic.FileStorage`. This specifies that TLS certificates and related ACME data managed by CertMagic should be stored in the filesystem at the given path.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_38\n\nLANGUAGE: Go\nCODE:\n```\ncaddy.DefaultStorage = &certmagic.FileStorage{Path: caddy}\n```\n\n----------------------------------------\n\nTITLE: Python Track Type Detection in STK Track Script\nDESCRIPTION: Code that detects special track types like cutscene and soccer modes in SuperTuxKart. These properties affect how the track functions in the game and what special features are enabled.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/AdaDoom3/AdaDoom3/snapshot.txt#_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nis_cutscene = getSceneProperty(bpy.data.scenes[0], \"cutscene\", \"false\") == \"true\nis_soccer and not is_cutscene:\n```\n\n----------------------------------------\n\nTITLE: Animation and Transition Event Handler Definitions for Svelte Elements\nDESCRIPTION: TypeScript definitions for animation and transition-related event handlers in Svelte components. These handle events triggered during CSS animations and transitions.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/sveltejs/svelte/snapshot.txt#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nonanimationstartcapture?: AnimationEventHandler\nonanimationendcapture?: AnimationEventHandler\nonanimationiterationcapture?: AnimationEventHandler\nontransitionstartcapture?: TransitionEventHandler\nontransitionruncapture?: TransitionEventHandler\nontransitionendcapture?: TransitionEventHandler\nontransitioncancelcapture?: TransitionEventHandler\n```\n\n----------------------------------------\n\nTITLE: ITrie Data Interface TypeScript\nDESCRIPTION: Defines the ITrie interface outlining the core methods for trie operations such as searching, insertion, and iteration, enabling consistent trie manipulation across implementations.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_40\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface ITrie {\n  insert(word: string): void;\n  search(word: string): boolean;\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Truncatable Primes Calculation in Project Euler Problem 37\nDESCRIPTION: Code computing truncatable prime numbers (primes that remain prime when digits are removed from left or right).\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_84\n\nLANGUAGE: Python\nCODE:\n```\nTruncatable primes\n```\n\n----------------------------------------\n\nTITLE: Use cspell-dictionary Module\nDESCRIPTION: This entry describes the addition of a feature to use the `cspell-dictionary` module. This change likely means the project now utilizes a separate module for dictionary management.  This may have reorganized dictionary-related functionality to improve maintainability and reusability.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-glob/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Changelog Entry Comments and Fixes in Svelte\nDESCRIPTION: This collection of changelog entries documents various fixes and enhancements in the Svelte framework, such as addressing unknown words, dependency recognition, HTML attribute management, component lifecycle handling, and code generation improvements. Each entry provides context on specific bug fixes or feature updates, often referencing associated GitHub issues.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/sveltejs/svelte/snapshot.txt#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\npackages/svelte/CHANGELOG-pre-5.md:1179:7    - Unknown word (heisenbug)       -- - Fix heisenbug with component styles\npackages/svelte/CHANGELOG-pre-5.md:1280:3    - Unknown word (Robustify)       -- - Robustify cyclical dependency\npackages/svelte/CHANGELOG-pre-5.md:1327:25   - Unknown word (Lified)          -- Remove commas from HTMLified attributes with multiple\npackages/svelte/CHANGELOG-pre-5.md:1358:31   - Unknown word (unfocusable)     -- resize listener object unfocusable ([#3206](https://github\npackages/svelte/CHANGELOG-pre-5.md:1369:9    - Unknown word (crossfaded)      -- - Scale crossfaded elements ([#3175](https\npackages/svelte/CHANGELOG-pre-5.md:1382:3    - Unknown word (Recognise)       -- - Recognise dependencies in function\npackages/svelte/CHANGELOG-pre-5.md:1409:51   - Unknown word (introing)        -- dynamic component before introing ([#3054](https://github\npackages/svelte/CHANGELOG-pre-5.md:1421:47   - Unknown word (outros)          -- keyed each blocks with outros ([#3055](https://github\npackages/svelte/CHANGELOG-pre-5.md:1472:7    - Unknown word (docstrings)      -- - Add docstrings to `svelte/store` (\npackages/svelte/CHANGELOG-pre-5.md:1563:3    - Unknown word (Initialise)      -- - Initialise window scroll from component\npackages/svelte/CHANGELOG-pre-5.md:1641:14   - Unknown word (onstate)         -- - Run first `onstate` _before_ fragment is\npackages/svelte/CHANGELOG-pre-5.md:1788:11   - Unknown word (codegen)         -- - Various codegen improvements ([#141\npackages/svelte/CHANGELOG-pre-5.md:2002:20   - Unknown word (capitalisation)  -- - Don't warn about capitalisation if `options.name` begins\npackages/svelte/CHANGELOG-pre-5.md:2008:9    - Unknown word (oncreate)        -- - Fire `oncreate` when custom element\npackages/svelte/CHANGELOG-pre-5.md:2033:10   - Unknown word (CLRF)            -- - Handle CLRF line endings in await\npackages/svelte/CHANGELOG-pre-5.md:2075:13   - Unknown word (reinitialise)    -- - Correctly reinitialise dynamic components\npackages/svelte/CHANGELOG-pre-5.md:226:10    - Unknown word (deindent)   -- - chore: deindent cjs output for compiler\npackages/svelte/CHANGELOG-pre-5.md:2298:20   - Unknown word (atrules)         -- - Fix `@keyframes` atrules with `from` and `to\npackages/svelte/CHANGELOG-pre-5.md:2427:3    - Unknown word (Sanitise)        -- - Sanitise event handler names\npackages/svelte/CHANGELOG-pre-5.md:2444:33   - Unknown word (treeshakeable)   -- transitionManager` is treeshakeable ([#593](https://github\npackages/svelte/CHANGELOG-pre-5.md:2551:34   - Unknown word (deconflicted)    -- event handler names are deconflicted ([#466](https://github\npackages/svelte/CHANGELOG-pre-5.md:2590:20   - Unknown word (Bublé)           -- - Disable unneeded Bublé transformations for\npackages/svelte/CHANGELOG-pre-5.md:2595:15   - Unknown word (deconflicting)   -- - More robust deconflicting ([#401](https://github\npackages/svelte/CHANGELOG-pre-5.md:2673:14   - Unknown word (onrender)        -- - Deprecate `onrender` and `onteardown` in\npackages/svelte/CHANGELOG-pre-5.md:2673:29   - Unknown word (onteardown)      -- Deprecate `onrender` and `onteardown` in favour of `oncreate\npackages/svelte/CHANGELOG-pre-5.md:2678:99   - Unknown word (textareas)       -- checkbox` and `radio`, and textareas ([#309](https://github\npackages/svelte/CHANGELOG-pre-5.md:2833:7    - Unknown word (keypath)         -- - Fix keypath dynamic attributes in\npackages/svelte/CHANGELOG-pre-5.md:343:19    - Unknown word (microdata)  -- - Properly handle microdata attributes ([#8413]\n/packages/svelte/CHANGELOG-pre-5.md:372:23    - Unknown word (replacestate) -- Add `data-sveltekit-replacestate` and `data-sveltekit\n/packages/svelte/CHANGELOG-pre-5.md:372:57    - Unknown word (keepfocus)    -- and `data-sveltekit-keepfocus` attribute typings\n/packages/svelte/CHANGELOG-pre-5.md:373:46    - Unknown word (crossfading)  -- dimensions immediately before crossfading ([#4111](https://github\n/packages/svelte/CHANGELOG-pre-5.md:396:3     - Unknown word (Optimise)     -- - Optimise `<svelte:element>` output\n/packages/svelte/CHANGELOG-pre-5.md:575:40    - Unknown word (destructurings) -- values in `{#each}`/etc. destructurings not being considered\n/packages/svelte/CHANGELOG-pre-5.md:733:20    - Unknown word (optimisation)   -- - Revert hydration optimisation for the time being\n/packages/svelte/CHANGELOG-pre-5.md:814:3     - Unknown word (Deconflict)     -- - Deconflict variable names used\n/packages/svelte/CHANGELOG-pre-5.md:916:28    - Unknown word (parameterised)  -- transitions that are parameterised with stores ([#5244\n/packages/svelte/CHANGELOG-pre-5.md:934:41    - Unknown word (optimised)      -- for elements that are optimised and inserted with`\n/packages/svelte/CHANGELOG-pre-5.md:943:73    - Unknown word (autoclosing)    -- mismatched tags are due to autoclosing of tags ([#5049](https\n\n```\n\n----------------------------------------\n\nTITLE: TypeScript Text Regex Helper\nDESCRIPTION: Contains utility functions for working with regex patterns on text input, supporting complex pattern matching.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_73\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-lib/src/lib/util/textRegex.ts\n```\n\n----------------------------------------\n\nTITLE: Fix node:worker_threads on node 14\nDESCRIPTION: This bug fix addresses a breakage of `node:worker_threads` on Node.js version 14. The goal is to restore the functionality of worker threads.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-strong-weak-map/test-cspell-strong-weak-map/CHANGELOG.md#_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n`node:worker_threads` breaks on node 14 ([#4185](https://github.com/streetsidesoftware/cspell/issues/4185)) ([8654ac7](https://github.com/streetsidesoftware/cspell/commit/8654ac7161b0ac558e864cfc116a9ad9ce6dc32e))\n```\n\n----------------------------------------\n\nTITLE: TypeScript URL Helper Utility\nDESCRIPTION: Offers functions to handle URL components, parsing, and resolution for resource management.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_76\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-lib/src/lib/util/url.ts\n```\n\n----------------------------------------\n\nTITLE: Preventing duplicate entries generation\nDESCRIPTION: This snippet addresses an issue where duplicate entries were being generated by default. The fix ensures that CSpell only generates unique entries, improving the efficiency and accuracy of its spell checking process. It addresses issue #3793.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-tools/CHANGELOG.md#_snippet_6\n\nLANGUAGE: TEXT\nCODE:\n```\n* Do not generate duplicate entries by default ([#3793](https://github.com/streetsidesoftware/cspell/issues/3793)) ([f27d3c6](https://github.com/streetsidesoftware/cspell/commit/f27d3c68ad454719d71724f92693db57270827b9))\n```\n\n----------------------------------------\n\nTITLE: Listing preferred suggestions first\nDESCRIPTION: This snippet introduces a feature where preferred suggestions are listed first in CSpell. This enhancement improves the user experience by prioritizing the most relevant and likely correct spelling suggestions. It addresses issue #3869.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-tools/CHANGELOG.md#_snippet_3\n\nLANGUAGE: TEXT\nCODE:\n```\n* Preferred suggestions are listed first ([#3869](https://github.com/streetsidesoftware/cspell/issues/3869)) ([1b7a65d](https://github.com/streetsidesoftware/cspell/commit/1b7a65d6ec851b78e1cc27c56f32b77adfba36e5))\n```\n\n----------------------------------------\n\nTITLE: Function Parameter Naming in JavaScript\nDESCRIPTION: Example of a function declaration with a named parameter, demonstrating parameter naming conventions that might be flagged by ESLint rules.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/eslint/eslint/snapshot.txt#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst foo1 = function(barrito) {\n```\n\n----------------------------------------\n\nTITLE: Importing difflib Package in Go\nDESCRIPTION: Imports the `difflib` package from `github.com/aryann/difflib`. This third-party library is used for computing differences between sequences, likely used here for comparing Caddyfile versions.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_24\n\nLANGUAGE: Go\nCODE:\n```\n\"github.com/aryann/difflib\"\n```\n\n----------------------------------------\n\nTITLE: Route Handling and Matcher Interface in Caddy HTTP Module (Go)\nDESCRIPTION: This code manages route modules, loading matchers and handlers via LoadModule, and iterates through matchers with type assertions. It defines interfaces and functions to match requests to routes, relying on the caddyhttp package and custom MatcherSet types. It facilitates flexible route configuration and matching logic, crucial for request routing.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_71\n\nLANGUAGE: Go\nCODE:\n```\nmatchersIface, err := ctx.LoadModule\nFromInterface(matchersIface)\n```\n\n----------------------------------------\n\nTITLE: Definitions and Constants for OpenAL Effects and Filters in Ada\nDESCRIPTION: This snippet includes constants, types, and comments related to OpenAL audio effects, filters, and effect slots, including parameters for autowah effects, lowpass/highpass/bandpass filters, reverb settings, and effect slot identifiers. It lays out the foundational identifiers used for audio processing effects within OpenAL.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/AdaDoom3/AdaDoom3/snapshot.txt#_snippet_18\n\nLANGUAGE: Ada\nCODE:\n```\n- Constants defining effect types and slots such as AL_EFFECT_AUTOWAH, AL_EFFECTSLOT_EFFECT, AL_EFFECTSLOT_GAIN, etc.\n- Parameters for various filters including Lowpass, Highpass, Bandpass, with associated gain parameters.\n- Reverb and EAX reverb property definitions such as AL_REVERB_MIN_DECAY_HFRATIO, AL_REVERB_MAX_DECAY_HFRATIO, AL_EAXREVERB_MIN_HFREFERENCE, etc.\n- Vocal morpher effect parameters like PHONEMEA and PHONEMEB min/max and default values.\n- Effect parameters for compressor and other effects, including ONOFF states, with associated min, max, and default constants.\n- Structs and type definitions for more complex effect properties like EFXEAXREVERBPROPERTIES.\n```\n\n----------------------------------------\n\nTITLE: Setting PROCESS_START Variable in tox.ini\nDESCRIPTION: This configuration line within a `tox.ini` file defines the `PROCESS_START` environment variable for a specific tox environment. It sets the variable's value to the path of the `pyproject.toml` file located at the root of the tox project (`{tox_root}`). The term 'pyproject' was flagged as an unknown word by cspell.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/pycontribs/jira/snapshot.txt#_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nPROCESS_START = {tox_root}/pyproject.toml\n```\n\n----------------------------------------\n\nTITLE: Defining SuggestionCosts Configuration Interface in TypeScript\nDESCRIPTION: This TypeScript interface describes the structure for configuring weighted costs of edit operations (insert, delete, replace, swap, penalties) used by the cspell-trie-lib suggestion engine. Dependencies include a TypeScript environment, and it is intended for implementers extending or customizing cspell dictionaries. Key properties include a mapping definition, optional weights for edits, an optional penalty for disfavored patterns, and a description for documentation. Inputs are configuration objects conforming to this interface, and the output is used at runtime to inform suggestion scoring.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/rfc/rfc-0002 improve dictionary suggestions/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SuggestionCosts {\n  /**\n   * The set of substrings to map, these are generally single character strings.\n   *\n   * Multiple sets can be defined by using a `|` to separate them.\n   *\n   * Example: \"eéê|aåá\" contains two different sets.\n   *\n   * To add a multi-character substring use `()`.\n   *\n   * Example: \"f(ph)(gh)\" results in the following set: `f`, `ph`, `gh`.\n   *\n   * To match the beginning of a word, use `^`: `(^I)`.\n   * To match the end of a word, use `$`: `(e$)(ing$)`.\n   */\n  map: string;\n  /** The cost to insert/delete one of the substrings in the map. Note: insert/delete costs are symmetrical. */\n  insDel?: number;\n  /**\n   * The cost to replace of of the substrings in the map with another substring in the map.\n   * Example: Map['a', 'i']\n   * This would be the cost to substitute `a` with `i`: Like `bat` to `bit` or the reverse.\n   */\n  replace?: number;\n  /**\n   * The cost to swap two adjacent substrings found in the map.\n   * Example: Map['e', 'i']\n   * This represents the cost to change `ei` to `ie` or the reverse.\n   */\n  swap?: number;\n  /**\n   * A description to describe the purpose of the map.\n   */\n  description?: string;\n  /**\n   * Add a penalty to the final cost.\n   * This is used to discourage certain suggestions.\n   *\n   * Example:\n   * ```yaml\n   * # Match adding/removing `-` to the end of a word.\n   * map: \"$(-$)\"\n   * replace: 50\n   * penalty: 100\n   * ```\n   *\n   * This makes adding a `-` to the end of a word more expensive.\n   *\n   * Think of it as taking the toll way for speed but getting the bill later.\n   */\n  penalty?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying CSS Animation (TypeScript)\nDESCRIPTION: Applies a CSS animation named 'editIconKeyFrams' (potential typo for Keyframes) within TypingIndicator styles.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nanimation: ${editIconKeyFrams};\n```\n\n----------------------------------------\n\nTITLE: Building the Cspell Software Terms Dictionary (Shell)\nDESCRIPTION: Executes the build script defined in the package's `package.json`. This command compiles the dictionary source files and is typically only needed when modifying the dictionary content.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/dictionaries/software-terms/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: TypeScript System Service Bus Implementation\nDESCRIPTION: Implementation of a message bus supporting request/response operations, including request factory, dispatchers, and error handling.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_85\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-service-bus/src/Dispatcher.ts\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-service-bus/src/createRequestHandler.ts\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-service-bus/src/errors.ts\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-service-bus/src/handlers.ts\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-service-bus/src/index.ts\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-service-bus/src/request.ts\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-service-bus/src/requestFactory.ts\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-service-bus/src/ServiceRequestFactory.ts\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-service-bus/src/SystemServiceBus.ts\n```\n\n----------------------------------------\n\nTITLE: Node.js Diagnostics Channel API: Channel Creation, Subscription, and Publishing\nDESCRIPTION: This snippet describes the diagnostics_channel module for creating communication channels, subscribing to messages, publishing data, and managing subscribers. It provides functions to instantiate named channels and control message flow, fundamental for debugging and diagnostics.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/node.txt#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst channel = diagnostics_channel.channel(name)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nchannel.subscribe(onMessage)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nchannel.publish(message)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nchannel.unsubscribe(onMessage)\n```\n\n----------------------------------------\n\nTITLE: Modules Import for Caddy Standard Library Files in Go\nDESCRIPTION: This imports various modules necessary for Caddy standard functionalities such as proxy protocols, request body handling, FastCGI, and forward authentication. These imports provide modular components for building comprehensive HTTP servers with advanced features.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_75\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n\t\"github.com/caddyserver/caddy/v2/modules/caddyhttp\"\n\t\"github.com/caddyserver/caddy/v2/modules/caddytls\"\n\t\"github.com/caddyserver/caddy/v2/modules/caddyhttp/proxyprotocol\"\n\t\"github.com/caddyserver/caddy/v2/modules/caddyhttp/requestbody\"\n\t\"github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy/fastcgi\"\n\t\"github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy/forwardauth\"\n)\n```\n\n----------------------------------------\n\nTITLE: Update Dictionaries Bug Fix\nDESCRIPTION: This entry describes a bug fix related to updating dictionaries. It likely addresses problems with the dictionary files used by the spell checker. This can include fixes for incorrect or missing words, resulting in more accurate spell checking.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-glob/CHANGELOG.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Importing useMatchMedia from wireapp/react-ui-kit\nDESCRIPTION: This snippet imports `useMatchMedia` from `@wireapp/react-ui-kit`, which is a hook for using media queries. It probably indicates the UI dynamically adapts based on screen size or device characteristics. The unknown word `wireapp` is the cspell error.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_117\n\nLANGUAGE: typescript\nCODE:\n```\nimport {useMatchMedia} from '@wireapp/react-ui-kit';\n```\n\n----------------------------------------\n\nTITLE: Using Yaf Session Methods\nDESCRIPTION: This snippet focuses on Yaf Session methods. It includes methods for managing session data such as `count`, `current`, `del`, `getInstance`, `has`, `key`, `next`, `offsetExists`, `offsetGet`, `offsetSet`, `offsetUnset`, `rewind`, `start`, `valid`, and the magic methods for object behavior. These methods are core for handling sessions in a Yaf application, with the Yaf extension being required.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/php.txt#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nYaf_Session::count\nYaf_Session::current\nYaf_Session::del\nYaf_Session::getInstance\nYaf_Session::has\nYaf_Session::key\nYaf_Session::next\nYaf_Session::offsetExists\nYaf_Session::offsetGet\nYaf_Session::offsetSet\nYaf_Session::offsetUnset\nYaf_Session::rewind\nYaf_Session::start\nYaf_Session::valid\nYaf_Session::__clone\nYaf_Session::__construct\nYaf_Session::__get\nYaf_Session::__isset\nYaf_Session::__set\nYaf_Session::__sleep\nYaf_Session::__unset\nYaf_Session::__wakeup\n```\n\n----------------------------------------\n\nTITLE: Command Line Arguments and Options for Build Tools\nDESCRIPTION: Various command-line arguments and options used in build and testing tools. These options control configuration settings for build processes.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/dart-lang/sdk/snapshot.txt#_snippet_14\n\nLANGUAGE: Dart\nCODE:\n```\n\"arguments\": [\"-nconfiguration-${system}\"]\n\ndepot_tools. Replace buildername and CL number with the\n\naddOption('build-id', help: 'Logdog ID of this buildbot\n\n'--format=prettyjson',\n'--nouse_legacy_sql',\n```\n\n----------------------------------------\n\nTITLE: Removing vitest dependency\nDESCRIPTION: This snippet removes `vitest` as a dependency for CSpell. This change likely aims to reduce the project's overall dependencies or resolve compatibility issues related to `vitest`. It addresses issue #4031.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-tools/CHANGELOG.md#_snippet_2\n\nLANGUAGE: TEXT\nCODE:\n```\n* Remove `vitest` as a dependency ([#4031](https://github.com/streetsidesoftware/cspell/issues/4031)) ([2784b75](https://github.com/streetsidesoftware/cspell/commit/2784b75feefc81aa95806ac748fafb140c72b5fa))\n```\n\n----------------------------------------\n\nTITLE: Spiral Print Pattern in Python\nDESCRIPTION: Code snippet for printing a matrix or pattern in a spiral manner, with an emphasis on typo 'horizotal' (likely 'horizontal'). This pattern is used for visualization or algorithm challenges involving matrix traversal.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_50\n\nLANGUAGE: Python\nCODE:\n```\n56:11 - Unknown word (horizotal) -- # horizotal printing increasing\n```\n\n----------------------------------------\n\nTITLE: TypeScript Test File for trace Functionality\nDESCRIPTION: Contains test cases for trace configurations in the cspell library, ensuring trace functions behave as expected under different conditions.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_47\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-lib/src/lib/trace.test.ts\n```\n\n----------------------------------------\n\nTITLE: Ensuring Mesh Tessellation Faces and Handling UV Textures in Blender Python\nDESCRIPTION: This snippet checks for tessellated faces (tessfaces) and UV texture layers on a mesh to prepare for export or manipulation. It inspects the mesh.tessfaces and mesh.tessface_uv_textures collections to determine active UV layers, handling multiple UV sets and deciding which one to use. This snippet requires a Blender mesh object with tessellation data available. The snippet's input is a mesh object, and output is a selected UV texture layer or handling an error if none present.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/AdaDoom3/AdaDoom3/snapshot.txt#_snippet_23\n\nLANGUAGE: Python\nCODE:\n```\nmesh.calc_tessface()\nif len(mesh.tessfaces) == 0:\n    # Handle no tessfaces\nif len(mesh.tessface_uv_textures) > 1:\n    # Handle multiple UV sets\nif mesh.tessface_uv_textures.active is None:\n    # Handle no active UV layer\n```\n\n----------------------------------------\n\nTITLE: Constants and Utility Functions TypeScript\nDESCRIPTION: Provides shared constants and helper functions used across the module, such as escape sequences, default configurations, and validation checks.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_45\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const DEFAULT_MAX_DISTANCE = 2;\nexport function isValidWord(word: string): boolean { ... }\n```\n\n----------------------------------------\n\nTITLE: Enrollment Timer: Calculating Next Firing Date\nDESCRIPTION: This function computes the next timer's firing date and snoozability based on the current interval delays, handling edge cases where device status permits or enforces snoozing. It utilizes constants from '@wireapp/commons' for time intervals and provides a boolean indicator for whether the timer is snoozable.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nreturn {isSnoozable: nextTick > 0, firingDate}\n```\n\n----------------------------------------\n\nTITLE: File Format V3 Data Sample\nDESCRIPTION: Provides an example of the V3 data format, showing how words and related spellings are encoded using characters, operators, and references.  Illustrates a more complex example with different words and how they are compressed.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-trie-lib/README.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nBig Apple$8races\\: \\{\\}\\[\\]\\(\\)$9<5\nNew York$7umbers \\0\\1\\2\\3\\4\\5\\6\\7\\8\\9$9<9\nap#6;<rrow \\<$7\nbig a#5;<4urned$r$2ing$3s$$4\nchalk#56;<3u#54;<3\neol \\n$3w \\$$4scape \\\\$8\nfun journey$7wal#27;<7\njournalism$tic$2$3s$$2eyer$2man$2e#103;<2$4ste#101;<i#58;<$3vialit#85;<2$4wly$$2yfuller$st$4ness$4$3lessn#120;<$4ou#125;<2ridde#103;<2er$$i#58;<3od#8;<3\nstic#27;<4$3\nlift#56;<3ong w#86;<6\nref \\#$5\nt#61;<\nwa#62;<2\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration Loader Implementation\nDESCRIPTION: Implements the logic to load, parse, and validate configuration files for the spell checker, supporting various formats and error reporting.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* configLoader.ts implementation */\n```\n\n----------------------------------------\n\nTITLE: Multiplying Bytearrays\nDESCRIPTION: This snippet demonstrates the multiplication of bytearray objects. The repetition of the bytearray is performed using the * operator. The input includes a bytearray and the multiplication factor (an integer). The output is a new bytearray which is the repeated version of the original.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\na * 3 == bytearray(b'abcdabcdabcd')\n```\n\nLANGUAGE: python\nCODE:\n```\n* a == bytearray(b'abcdabcdabcd')\n```\n\n----------------------------------------\n\nTITLE: Node.js HTTP Module API\nDESCRIPTION: Comprehensive reference for Node.js HTTP module including server creation, request/response handling, headers management, and HTTP agents. Includes methods for creating servers, managing connections, and handling HTTP messaging.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/node.txt#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n(err, stream)\n--insecure-http-parser\n--max-http-header-size\n.destroy()\n.resume()\n/index.html?page=12\n/status?name=ryan\n0\\r\\n\\r\\n\n100 Continue\n100-continue\n417 Expectation Failed\nAbortController\nAbortSignal\nAgent\nArray\nBuffer.byteLength()\nCONNECT\nClientRequest\nConnection\nConnection: close\nConnection: keep-alive\nContent-Length\nDELETE\nDuplex\nECONNRESET\nError\nError: aborted\nError: socket hang up\nExpect\nExpect: 100-continue\nGET\nHPE_HEADER_OVERFLOW\nHost\nIncomingMessage\nInfinity\nOK\nObject\nServer\nServerResponse\nTrailer\nTypeError\nURL\n[ Transfer-Encoding ,  chunked ]\n[key, value, key2, value2, ...]\nabort\nabort()\naborted\nage\nagent\nagent.createConnection()\nagent.createConnection(options[, callback])\nagent.defaultPort\nagent.destroy()\nagent.freeSockets\nagent.getName()\nagent.getName(options)\nagent.keepSocketAlive(socket)\nagent.maxFreeSockets\nagent.maxSockets\nagent.maxTotalSockets\nagent.requests\nagent.reuseSocket(socket, request)\nagent.sockets\nagent:false\nagentRemove\nauth\nauthorization\nbytesParsed\ncallback\ncheckContinue\ncheckExpectation\nchunk\nclientError\nclose\ncode:  ERR_HTTP_INVALID_HEADER_VALUE\ncode:  ERR_INVALID_CHAR\ncode:  ERR_INVALID_HTTP_TOKEN\nconnect\nconnection\ncontent-length\ncontent-type\ncontinue\ncookie\ncreateConnection\ndata\ndefaultPort\ndestroy()\ndns.lookup()\ndrain\nenable\nencoding\nend\nerr\nerror\netag\nexception\nexpires\nfalse\nfamily\nfifo\nfinish\nfreeSockets\nfrom\ngetHeader(name)\nhead\nheaders\nhost\nhost:port:localAddress\nhost:port:localAddress:family\nhostname\nhttp\nhttp.Agent\nhttp.ClientRequest\nhttp.IncomingMessage\nhttp.METHODS\nhttp.STATUS_CODES\nhttp.Server\nhttp.ServerResponse\nhttp.createServer([options][, requestListener])\nhttp.get()\nhttp.get(options[, callback])\nhttp.get(url[, options][, callback])\nhttp.globalAgent\nhttp.maxHeaderSize\nhttp.request()\nhttp.request(options[, callback])\nhttp.request(url[, options][, callback])\nhttp.validateHeaderName(name)\nhttp.validateHeaderValue(name, value)\nhttp:\nhttpVersion\nhttpVersionMajor\nhttpVersionMinor\nif-modified-since\nif-unmodified-since\ninfo\ninformation\ninitialDelay\ninsecureHTTPParser\nkeep-alive\nkeepAlive\nkeepAliveMsecs\nlast-modified\nlifo\nlocalAddress\nlocalhost\nlocalhost:3000\nlocation\nlookup\nmax-forwards\nmaxFreeSockets\nmaxHeaderSize\nmaxSockets\nmaxTotalSockets\nmessage.aborted\nmessage.complete\nmessage.destroy([error])\nmessage.headers\nmessage.httpVersion\nmessage.httpVersionMajor\nmessage.httpVersionMinor\nmessage.method\nmessage.rawHeaders\nmessage.rawTrailers\nmessage.setTimeout(msecs[, callback])\nmessage.socket\nmessage.socket.setTimeout(msecs, callback)\nmessage.statusCode\nmessage.statusMessage\nmessage.trailers\nmessage.url\nmethod\nmsecs\nname\nnet.Server\nnet.Server.close()\nnet.Socket\nnet.createConnection()\nnew Agent([options])\nnew URL()\nnoDelay\nobj.hasOwnProperty()\nobj.toString()\noptions\npath\nport\nprotocol\nproxy-authorization\nrawHeaders\nrawPacket\nreadable\nreferer\nremoveHeader(name)\nreq.abort()\nreq.destroy()\nreq.end()\nrequest\nrequest.abort()\nrequest.aborted\nrequest.connection\nrequest.destroy()\nrequest.destroy([error])\nrequest.destroyed\nrequest.end()\nrequest.end([data[, encoding]][, callback])\nrequest.end(callback)\nrequest.finished\nrequest.flushHeaders()\nrequest.getHeader()\nrequest.getHeader(name)\nrequest.headers.host\nrequest.host\nrequest.maxHeadersCount\nrequest.method\nrequest.path\nrequest.protocol\nrequest.rawHeaders\nrequest.removeHeader(name)\nrequest.reusedSocket\nrequest.setHeader()\nrequest.setHeader(name, value)\nrequest.setNoDelay([noDelay])\nrequest.setSocketKeepAlive([enable][, initialDelay])\nrequest.setTimeout()\nrequest.setTimeout(timeout[, callback])\nrequest.socket\nrequest.socket.getPeerCertificate()\nrequest.url\nrequest.writableEnded\nrequest.writableFinished\nrequest.write(chunk[, encoding][, callback])\nrequest.write(data, encoding)\nrequestListener\nrequire( http )\nres\nres.setHeader(name, value)\nresponse\nresponse.addTrailers(headers)\nresponse.connection\nresponse.cork()\nresponse.end()\nresponse.end([data[, encoding]][, callback])\nresponse.end(callback)\nresponse.finished\nresponse.flushHeaders()\nresponse.getHeader()\nresponse.getHeader(name)\nresponse.getHeaderNames()\nresponse.getHeaders()\nresponse.hasHeader(name)\nresponse.headersSent\nresponse.read()\nresponse.removeHeader(name)\nresponse.sendDate\nresponse.setHeader()\nresponse.setHeader(name, value)\nresponse.setTimeout(msecs[, callback])\nresponse.socket\nresponse.statusCode\nresponse.statusMessage\nresponse.uncork()\nresponse.writableEnded\nresponse.writableFinished\nresponse.write()\nresponse.write(chunk[, encoding][, callback])\nresponse.write(data, encoding)\nresponse.writeContinue()\nresponse.writeHead()\nresponse.writeHead(statusCode[, statusMessage][, headers])\nresponse.writeProcessing()\nretry-after\nscheduling\nserver\nserver.close([callback])\nserver.headersTimeout\nserver.keepAliveTimeout\nserver.listen()\nserver.listening\nserver.maxHeadersCount\nserver.requestTimeout\nserver.setTimeout([msecs][, callback])\nserver.timeout\nset-cookie\nsetHeader(name, value)\nsetHost\nsetTimeout()\nsignal\nsocket\nsocket.connect()\nsocket.setKeepAlive()\nsocket.setNoDelay()\nsocket.setTimeout()\nsocket.unref()\nsocketPath\nstatusCode\nstatusMessage\ntimeout\ntrue\nundefined\nupgrade\nurl\nurl.parse()\nuser-agent\nuser:password\nutf8\nvalue\nwritable.cork()\nwritable.destroy()\nwritable.destroyed\nwritable.uncork()\nwrite\n{agent: false}\n```\n\n----------------------------------------\n\nTITLE: Support multiple repMap combinations\nDESCRIPTION: This feature enables support for multiple `repMap` combinations. The `repMap` feature, likely used for text replacement or normalization during spellchecking, now handles multiple configurations, increasing the flexibility of the tool. This is a new feature with specific functionality.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/CHANGELOG.md#_snippet_13\n\nLANGUAGE: git\nCODE:\n```\nSupport multiple `repMap` combinations ([#4270](https://github.com/streetsidesoftware/cspell/issues/4270)) ([bbc3ed4](https://github.com/streetsidesoftware/cspell/commit/bbc3ed4a1edb704401f40cf8913a5a9f522562fc))\n```\n\n----------------------------------------\n\nTITLE: TypeScript: Shared Conversation Index Management\nDESCRIPTION: This code imports 'QualifiedId' for managing conversation identifiers in shared modules, supporting conversation management functionalities across different parts of the application.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_70\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {QualifiedId} from '@wireapp/api-client/lib/user';\n```\n\n----------------------------------------\n\nTITLE: TypeScript Strong Weak Map Example\nDESCRIPTION: Demonstrates usage of the StrongWeakMap data structure, including caching mechanisms for file utilities.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_86\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-strong-weak-map/src/examples/fileCache.ts\n```\n\n----------------------------------------\n\nTITLE: Config.ts: Importing Runtime from WireApp Commons\nDESCRIPTION: This snippet imports the 'Runtime' class or object from the '@wireapp/commons' library to facilitate runtime environment management within the configuration file. It is part of a broader configuration setup for the WireApp project, likely used during app initialization or configuration validation.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Runtime} from '@wireapp/commons';\n```\n\n----------------------------------------\n\nTITLE: TypeScript Utility for Loading Spellcheck Configuration\nDESCRIPTION: This TypeScript snippet defines a utility function to load and parse spellcheck configuration files, enabling dynamic configuration management. It requires the 'fs' and 'path' modules and outputs a structured configuration object. This facilitates flexible adjustments to spellchecking parameters per project or environment.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-eslint-plugin/test-cspell-eslint-plugin-v9/words.txt#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as fs from 'fs';\nimport * as path from 'path';\n\ntype CSpellConfig = {\n  version: string;\n  language: string;\n  ignorePaths: string[];\n  words: string[];\n  flagWords: string[];\n};\n\nfunction loadConfig(configPath: string): CSpellConfig {\n  const fullPath = path.resolve(configPath);\n  const rawData = fs.readFileSync(fullPath, 'utf-8');\n  const config: CSpellConfig = JSON.parse(rawData);\n  return config;\n}\n```\n\n----------------------------------------\n\nTITLE: Unicode Emoji Modifier Sequence Code Points for Skin Tones and Gestures\nDESCRIPTION: This data lists Unicode code points representing emoji sequences with skin tone modifiers for various gestures, objects, and characters. Each line shows a sequence combining a base emoji with a skin tone modifier, with annotations indicating the gesture or object represented. No executable code is included; it serves as a reference for emoji composition.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-trie-lib/Samples/emoji-sequences.txt#_snippet_3\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F443 1F3FC   ; RGI_Emoji_Modifier_Sequence  ; nose: medium-light skin tone                                   # E1.0   [1] (👃🏼)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F443 1F3FD   ; RGI_Emoji_Modifier_Sequence  ; nose: medium skin tone                                         # E1.0   [1] (👃🏽)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F443 1F3FE   ; RGI_Emoji_Modifier_Sequence  ; nose: medium-dark skin tone                                    # E1.0   [1] (👃🏾)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F443 1F3FF   ; RGI_Emoji_Modifier_Sequence  ; nose: dark skin tone                                           # E1.0   [1] (👃🏿)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F446 1F3FB   ; RGI_Emoji_Modifier_Sequence  ; backhand index pointing up: light skin tone                    # E1.0   [1] (👆🏻)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F446 1F3FC   ; RGI_Emoji_Modifier_Sequence  ; backhand index pointing up: medium-light skin tone             # E1.0   [1] (👆🏼)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F446 1F3FD   ; RGI_Emoji_Modifier_Sequence  ; backhand index pointing up: medium skin tone                   # E1.0   [1] (👆🏽)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F446 1F3FE   ; RGI_Emoji_Modifier_Sequence  ; backhand index pointing up: medium-dark skin tone              # E1.0   [1] (👆🏾)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F446 1F3FF   ; RGI_Emoji_Modifier_Sequence  ; backhand index pointing up: dark skin tone                     # E1.0   [1] (👆🏿)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F447 1F3FB   ; RGI_Emoji_Modifier_Sequence  ; backhand index pointing down: light skin tone                  # E1.0   [1] (👇🏻)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F447 1F3FC   ; RGI_Emoji_Modifier_Sequence  ; backhand index pointing down: medium-light skin tone           # E1.0   [1] (👇🏼)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F447 1F3FD   ; RGI_Emoji_Modifier_Sequence  ; backhand index pointing down: medium skin tone                 # E1.0   [1] (👇🏽)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F447 1F3FE   ; RGI_Emoji_Modifier_Sequence  ; backhand index pointing down: medium-dark skin tone            # E1.0   [1] (👇🏾)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F447 1F3FF   ; RGI_Emoji_Modifier_Sequence  ; backhand index pointing down: dark skin tone                   # E1.0   [1] (👇🏿)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F448 1F3FB   ; RGI_Emoji_Modifier_Sequence  ; backhand index pointing left: light skin tone                  # E1.0   [1] (👈🏻)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F448 1F3FC   ; RGI_Emoji_Modifier_Sequence  ; backhand index pointing left: medium-light skin tone           # E1.0   [1] (👈🏼)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F448 1F3FD   ; RGI_Emoji_Modifier_Sequence  ; backhand index pointing left: medium skin tone                 # E1.0   [1] (👈🏽)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F448 1F3FE   ; RGI_Emoji_Modifier_Sequence  ; backhand index pointing left: medium-dark skin tone            # E1.0   [1] (👈🏾)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F448 1F3FF   ; RGI_Emoji_Modifier_Sequence  ; backhand index pointing left: dark skin tone                   # E1.0   [1] (👈🏿)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F449 1F3FB   ; RGI_Emoji_Modifier_Sequence  ; backhand index pointing right: light skin tone                 # E1.0   [1] (👉🏻)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F449 1F3FC   ; RGI_Emoji_Modifier_Sequence  ; backhand index pointing right: medium-light skin tone          # E1.0   [1] (👉🏼)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F449 1F3FD   ; RGI_Emoji_Modifier_Sequence  ; backhand index pointing right: medium skin tone                # E1.0   [1] (👉🏽)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F449 1F3FE   ; RGI_Emoji_Modifier_Sequence  ; backhand index pointing right: medium-dark skin tone           # E1.0   [1] (👉🏾)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F449 1F3FF   ; RGI_Emoji_Modifier_Sequence  ; backhand index pointing right: dark skin tone                  # E1.0   [1] (👉🏿)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F44A 1F3FB   ; RGI_Emoji_Modifier_Sequence  ; oncoming fist: light skin tone                                 # E1.0   [1] (👊🏻)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F44A 1F3FC   ; RGI_Emoji_Modifier_Sequence  ; oncoming fist: medium-light skin tone                          # E1.0   [1] (👊🏼)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F44A 1F3FD   ; RGI_Emoji_Modifier_Sequence  ; oncoming fist: medium skin tone                                # E1.0   [1] (👊🏽)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F44A 1F3FE   ; RGI_Emoji_Modifier_Sequence  ; oncoming fist: medium-dark skin tone                           # E1.0   [1] (👊🏾)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F44A 1F3FF   ; RGI_Emoji_Modifier_Sequence  ; oncoming fist: dark skin tone                                  # E1.0   [1] (👊🏿)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F44B 1F3FB   ; RGI_Emoji_Modifier_Sequence  ; waving hand: light skin tone                                   # E1.0   [1] (👋🏻)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F44B 1F3FC   ; RGI_Emoji_Modifier_Sequence  ; waving hand: medium-light skin tone                            # E1.0   [1] (👋🏼)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F44B 1F3FD   ; RGI_Emoji_Modifier_Sequence  ; waving hand: medium skin tone                                  # E1.0   [1] (👋🏽)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F44B 1F3FE   ; RGI_Emoji_Modifier_Sequence  ; waving hand: medium-dark skin tone                             # E1.0   [1] (👋🏾)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F44B 1F3FF   ; RGI_Emoji_Modifier_Sequence  ; waving hand: dark skin tone                                    # E1.0   [1] (👋🏿)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F44C 1F3FB   ; RGI_Emoji_Modifier_Sequence  ; OK hand: light skin tone                                       # E1.0   [1] (👌🏻)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F44C 1F3FC   ; RGI_Emoji_Modifier_Sequence  ; OK hand: medium-light skin tone                                # E1.0   [1] (👌🏼)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F44C 1F3FD   ; RGI_Emoji_Modifier_Sequence  ; OK hand: medium-dark skin tone                                 # E1.0   [1] (👌🏽)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F44C 1F3FE   ; RGI_Emoji_Modifier_Sequence  ; OK hand: dark skin tone                                        # E1.0   [1] (👌🏾)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F44C 1F3FF   ; RGI_Emoji_Modifier_Sequence  ; OK hand: dark skin tone                                        # E1.0   [1] (👌🏿)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F44D 1F3FB   ; RGI_Emoji_Modifier_Sequence  ; thumbs up: light skin tone                                     # E1.0   [1] (👍🏻)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F44D 1F3FC   ; RGI_Emoji_Modifier_Sequence  ; thumbs up: medium-light skin tone                              # E1.0   [1] (👍🏼)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F44D 1F3FD   ; RGI_Emoji_Modifier_Sequence  ; thumbs up: medium skin tone                                    # E1.0   [1] (👍🏽)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F44D 1F3FE   ; RGI_Emoji_Modifier_Sequence  ; thumbs up: medium-dark skin tone                               # E1.0   [1] (👍🏾)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F44D 1F3FF   ; RGI_Emoji_Modifier_Sequence  ; thumbs up: dark skin tone                                      # E1.0   [1] (👍🏿)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F44E 1F3FB   ; RGI_Emoji_Modifier_Sequence  ; thumbs down: light skin tone                                   # E1.0   [1] (👎🏻)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F44E 1F3FC   ; RGI_Emoji_Modifier_Sequence  ; thumbs down: medium-light skin tone                            # E1.0   [1] (👎🏼)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F44E 1F3FD   ; RGI_Emoji_Modifier_Sequence  ; thumbs down: medium skin tone                                  # E1.0   [1] (👎🏽)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F44E 1F3FE   ; RGI_Emoji_Modifier_Sequence  ; thumbs down: medium-dark skin tone                             # E1.0   [1] (👎🏾)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F44E 1F3FF   ; RGI_Emoji_Modifier_Sequence  ; thumbs down: dark skin tone                                    # E1.0   [1] (👎🏿)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F44F 1F3FB   ; RGI_Emoji_Modifier_Sequence  ; clapping hands: light skin tone                                # E1.0   [1] (👏🏻)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F44F 1F3FC   ; RGI_Emoji_Modifier_Sequence  ; clapping hands: medium-light skin tone                         # E1.0   [1] (👏🏼)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F44F 1F3FD   ; RGI_Emoji_Modifier_Sequence  ; clapping hands: medium skin tone                               # E1.0   [1] (👏🏽)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F44F 1F3FE   ; RGI_Emoji_Modifier_Sequence  ; clapping hands: medium-dark skin tone                          # E1.0   [1] (👏🏾)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F44F 1F3FF   ; RGI_Emoji_Modifier_Sequence  ; clapping hands: dark skin tone                                 # E1.0   [1] (👏🏿)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F450 1F3FB   ; RGI_Emoji_Modifier_Sequence  ; open hands: light skin tone                                    # E1.0   [1] (👐🏻)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F450 1F3FC   ; RGI_Emoji_Modifier_Sequence  ; open hands: medium-light skin tone                             # E1.0   [1] (👐🏼)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F450 1F3FD   ; RGI_Emoji_Modifier_Sequence  ; open hands: medium skin tone                                   # E1.0   [1] (👐🏽)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F450 1F3FE   ; RGI_Emoji_Modifier_Sequence  ; open hands: medium-dark skin tone                              # E1.0   [1] (👐🏾)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F450 1F3FF   ; RGI_Emoji_Modifier_Sequence  ; open hands: dark skin tone                                     # E1.0   [1] (👐🏿)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F466 1F3FB   ; RGI_Emoji_Modifier_Sequence  ; boy: light skin tone                                           # E1.0   [1] (👦🏻)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F466 1F3FC   ; RGI_Emoji_Modifier_Sequence  ; boy: medium-light skin tone                                    # E1.0   [1] (👦🏼)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F466 1F3FD   ; RGI_Emoji_Modifier_Sequence  ; boy: medium skin tone                                          # E1.0   [1] (👦🏽)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F466 1F3FE   ; RGI_Emoji_Modifier_Sequence  ; boy: medium-dark skin tone                                     # E1.0   [1] (👦🏾)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F466 1F3FF   ; RGI_Emoji_Modifier_Sequence  ; boy: dark skin tone                                            # E1.0   [1] (👦🏿)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F467 1F3FB   ; RGI_Emoji_Modifier_Sequence  ; girl: light skin tone                                          # E1.0   [1] (👧🏻)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F467 1F3FC   ; RGI_Emoji_Modifier_Sequence  ; girl: medium-light skin tone                                   # E1.0   [1] (👧🏼)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F467 1F3FD   ; RGI_Emoji_Modifier_Sequence  ; girl: medium skin tone                                         # E1.0   [1] (👧🏽)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F467 1F3FE   ; RGI_Emoji_Modifier_Sequence  ; girl: medium-dark skin tone                                    # E1.0   [1] (👧🏾)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F467 1F3FF   ; RGI_Emoji_Modifier_Sequence  ; girl: dark skin tone                                           # E1.0   [1] (👧🏿)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F468 1F3FB   ; RGI_Emoji_Modifier_Sequence  ; man: light skin tone                                           # E1.0   [1] (👨🏻)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F468 1F3FC   ; RGI_Emoji_Modifier_Sequence  ; man: medium-light skin tone                                    # E1.0   [1] (👨🏼)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F468 1F3FD   ; RGI_Emoji_Modifier_Sequence  ; man: medium skin tone                                          # E1.0   [1] (👨🏽)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F468 1F3FE   ; RGI_Emoji_Modifier_Sequence  ; man: medium-dark skin tone                                     # E1.0   [1] (👨🏾)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F468 1F3FF   ; RGI_Emoji_Modifier_Sequence  ; man: dark skin tone                                            # E1.0   [1] (👨🏿)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F469 1F3FB   ; RGI_Emoji_Modifier_Sequence  ; woman: light skin tone                                         # E1.0   [1] (👩🏻)\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n1F469 1F3FC   ; RGI_Emoji_Modifier_Sequence  ; woman: medium-light skin tone                                  # E1.0   [1] (👩🏼)\n```\n\n----------------------------------------\n\nTITLE: Declaring a String Variable in TypeScript\nDESCRIPTION: This TypeScript snippet declares a constant string variable `msg` with the value 'A bit of typescript.'. It is used to test the spell checker's ability to ignore code blocks. No dependencies are required.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-eslint-plugin/fixtures/mdx-support/md-with-code.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nconst msg = 'A bit of typescript.';\n```\n\n----------------------------------------\n\nTITLE: Defining Font Size Style (TypeScript)\nDESCRIPTION: Sets the font size using a CSS variable '--font-size-xsmall' (potential custom term 'xsmall') within TypingIndicator styles.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nfontSize: 'var(--font-size-xsmall)',\n```\n\n----------------------------------------\n\nTITLE: Initializing Caddy Test Tester in Go\nDESCRIPTION: Initializes a new Caddy test environment using `caddytest.NewTester`. Requires a `*testing.T` object (`t`) as input. This is commonly used within Go integration tests for the Caddy server.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\ntester := caddytest.NewTester(t)\n```\n\n----------------------------------------\n\nTITLE: Mail Fixup and Indexing Functions (C)\nDESCRIPTION: Implements mailfixup procedures, including 'doindex' for reindexing clubs. Patches such as 'Reindexing' provide feedback during reindex operations, helping maintain email club data integrity.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_44\n\nLANGUAGE: C\nCODE:\n```\ndoindex (char *clubname, char ...); printf (\"Reindexing %s%s.\\n\", email ? ...)\n```\n\n----------------------------------------\n\nTITLE: OpenAL Effect Functions in Ada\nDESCRIPTION: Function declarations for OpenAL audio effects including alEffect and alGetEffect with various parameter types (i, iv, f, fv). These functions allow manipulation of sound effects in the OpenAL audio library.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/AdaDoom3/AdaDoom3/snapshot.txt#_snippet_12\n\nLANGUAGE: Ada\nCODE:\n```\nALvoid AL_APIENTRY alEffectf(ALuint effect, ALenum param, ALfloat value);\nALvoid AL_APIENTRY alEffectfv(ALuint effect, ALenum param, const ALfloat *values);\nALvoid AL_APIENTRY alGetEffecti(ALuint effect, ALenum param, ALint *value);\nALvoid AL_APIENTRY alGetEffectiv(ALuint effect, ALenum param, ALint *values);\nALvoid AL_APIENTRY alGetEffectf(ALuint effect, ALenum param, ALfloat *value);\nALvoid AL_APIENTRY alGetEffectfv(ALuint effect, ALenum param, ALfloat *values);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Uri Utility Module\nDESCRIPTION: Provides functions to parse, resolve, and manipulate URI references within cspell.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_75\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-lib/src/lib/util/Uri.ts\n```\n\n----------------------------------------\n\nTITLE: Using zip Functions\nDESCRIPTION: This snippet provides zip functions which includes functions for basic ZIP archive handling, involving functions such as `zip_close`, `zip_entry_close`, `zip_entry_compressedsize`, `zip_entry_compressionmethod`, `zip_entry_filesize`, `zip_entry_name`, `zip_entry_open`, `zip_entry_read`, `zip_open`, and `zip_read`. These require the zip extension to be installed.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/php.txt#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\nzip_close\nzip_entry_close\nzip_entry_compressedsize\nzip_entry_compressionmethod\nzip_entry_filesize\nzip_entry_name\nzip_entry_open\nzip_entry_read\nzip_open\nzip_read\n```\n\n----------------------------------------\n\nTITLE: Handling Pingback Connections in Go\nDESCRIPTION: Calls a function `handlePingbackConn` to manage a network connection (`conn`) associated with a pingback mechanism. The `expect` parameter likely defines the expected data or behavior.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_20\n\nLANGUAGE: Go\nCODE:\n```\nerr = handlePingbackConn(conn, expect)\n```\n\n----------------------------------------\n\nTITLE: Removing `[@markdown](https://github.com/markdown)Description` from types\nDESCRIPTION: This bug fix removes the `[@markdown](https://github.com/markdown)Description` annotation from types, resolving potential issues with documentation generation or type processing.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell/test-cspell-esbuild-cjs/CHANGELOG.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nRemove `[@markdown](https://github.com/markdown)Description` from types ([#4818](https://github.com/streetsidesoftware/cspell/issues/4818)) ([3ba8eed](https://github.com/streetsidesoftware/cspell/commit/3ba8eed8588aafa3dcb401acb96e4fdc82811d24))\n```\n\n----------------------------------------\n\nTITLE: Simple Circuit Diagram Using Circuitikz in LaTeX\nDESCRIPTION: This snippet demonstrates the use of the circuitikz package within LaTeX to draw a digital latch circuit with NAND gates, including specific node definitions. It depends on the circuitikz package for circuit elements and positioning.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/MartinThoma/LaTeX-examples/snapshot.txt#_snippet_4\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\node[european nand port] (mynand1) {}; // Define NAND gate\n\\node[ocirc, left=of mynand1.in 1] (D) {D}; // Define input D\n```\n\n----------------------------------------\n\nTITLE: Adjusting .trie Formatting\nDESCRIPTION: This feature is related to the formatting of `.trie` files.  This may involve how the trie data structure is stored and how the data is formatted, which can impact performance and storage.  The input is an existing `.trie` and the output is reformatted based on project requirements.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-pipe/CHANGELOG.md#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n* Adjust `.trie` formatting ([e2643c0](https://github.com/streetsidesoftware/cspell/commit/e2643c0bf508aa566823d2c697e5b94c77e6b874)), closes [#3443](https://github.com/streetsidesoftware/cspell/issues/3443) [#3430](https://github.com/streetsidesoftware/cspell/issues/3430)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Word List Helper Tests\nDESCRIPTION: Contains automated tests to verify the correctness of word list helper functions.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_80\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-lib/src/lib/wordListHelper.test.ts\n```\n\n----------------------------------------\n\nTITLE: Update shasum checksum files with cspell-tools\nDESCRIPTION: This bug fix enables the ability of `cspell-tools` to update checksum files for shasums. This assists with managing checksums used for file integrity.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-strong-weak-map/test-cspell-strong-weak-map/CHANGELOG.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\ncspell-tools: be able to update shasum checksum files. ([#4634](https://github.com/streetsidesoftware/cspell/issues/4634)) ([a67ea47](https://github.com/streetsidesoftware/cspell/commit/a67ea4715bee40b4105139ca4fbfdb1da4800dce))\n```\n\n----------------------------------------\n\nTITLE: TypeScript: MessageRepository Type Aliases and Utility Functions\nDESCRIPTION: This snippet defines types such as 'ContributedSegmentations' for segment analysis and outlines functions to synchronize countly IDs across clients via backend messages, including sending countly sync messages and building data transfer messages.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_76\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type ContributedSegmentations = Record<string, number>;\npublic async sendCountlySync(countlyId: string) {\n  buildDataTransferMessage(countlyId);\n}\n// Additional functions for countly synchronization\n```\n\n----------------------------------------\n\nTITLE: Giphy Image Interface Definitions\nDESCRIPTION: TypeScript interfaces defining the structure of Giphy image response objects, including various image formats and specifications like downsampled versions.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_86\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface GiphyImageStill {\n    // Properties\n}\n\ninterface GiphyImageDownsized extends GiphyImageStill {\n    // Additional properties\n}\n\ninterface GiphyImageDownsizedWebp extends GiphyImageDownsized {\n    // Additional properties\n}\n```\n\n----------------------------------------\n\nTITLE: XML Object Properties Configuration in STK\nDESCRIPTION: Object property definitions from the STK object parameters XML file. These define game object behaviors including physics properties, visual effects like shadows and bloom, and special gameplay elements.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/AdaDoom3/AdaDoom3/snapshot.txt#_snippet_38\n\nLANGUAGE: xml\nCODE:\n```\n<BoolProp id=\"forcedbloom\" name=\"Glow (bloom)\"\n<BoolProp id=\"shadowpass\" name=\"Casts shadows\"\n<BoolProp id=\"nomodifierautolod\" name=\"Also export without\"\n<FloatProp id=\"nomodierlod_distance\" name=\"Modifiers\"\n\"The player will be resetted when touching this object\"\ndoc=\"An (animatable) object that is exported\"\n<EnumChoice id=\"physicsonly\" label=\"Physics only\"\n<BoolProp id=\"driveable\" name=\"Driveable (STK\"\n<BoolProp id=\"skyboxobject\" name=\"Skybox object\"\n<EnumChoice id=\"easteregg\" label=\"Easter Egg\n```\n\n----------------------------------------\n\nTITLE: Trie Node Utility Functions TypeScript\nDESCRIPTION: Contains functions for traversing, searching, and manipulating trie nodes, supporting deep searches and heuristics for efficient spell checking. Relies on trie node interfaces and walker utilities.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_43\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function findNode(node: ITrieNode, prefix: string): ITrieNode | undefined { ... }\n```\n\n----------------------------------------\n\nTITLE: Implementing a Recma Babel Plugin Function\nDESCRIPTION: JavaScript function definition for a recma Babel plugin. Recma plugins transform the estree syntax tree in the MDX compilation process.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/mdx-js/mdx/snapshot.txt#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nfunction recmaBabel() {\n  // Plugin implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Greedy Algorithm Implementation in Python\nDESCRIPTION: Provides a greedy approach for an unspecified problem, referencing an item 'Sambhar', suggesting a resource or data related to food items, possibly in an optimization context.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_67\n\nLANGUAGE: Python\nCODE:\n```\n45:18 - Unknown word (Sambhar) -- ... \"Sambhar\", \"Chicken\", \"Fries\n```\n\n----------------------------------------\n\nTITLE: TypeScript Search Utility\nDESCRIPTION: Provides search algorithms and helpers to locate strings, files, or data patterns within larger datasets.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_67\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-lib/src/lib/util/search.ts\n```\n\n----------------------------------------\n\nTITLE: TypeScript and JavaScript Test Files for Index and Language IDs\nDESCRIPTION: These test files verify the correctness of index exports and language ID mappings. They depend on testing frameworks like Jest or Mocha and ensure that core identifiers and module exports are consistent.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* Test implementations for index and language ID module validation */\n```\n\n----------------------------------------\n\nTITLE: Unicode range definition in Svelte compiler options\nDESCRIPTION: A string pattern defining a Unicode range that includes extended characters up to EFFFF, used for text processing in the Svelte compiler.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/sveltejs/svelte/snapshot.txt#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\n-\\uFFFD\\u{10000}-\\u{EFFFF}-]'\n```\n\n----------------------------------------\n\nTITLE: Doomsday Year Calculation in Python\nDESCRIPTION: Calculates the century from a year to model doomsday-related calculations. Used in calendar algorithms or age computations.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_64\n\nLANGUAGE: Python\nCODE:\n```\n42:5 - Unknown word (centurian) -- centurian = year % 100\n```\n\n----------------------------------------\n\nTITLE: TypeScript Settings API for Import Errors\nDESCRIPTION: Defines error objects related to import issues within configuration files, facilitating error reporting and diagnostics.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* ImportError class/interface */\n```\n\n----------------------------------------\n\nTITLE: TypeScript MinHeapQueue Implementation\nDESCRIPTION: Priority queue data structure based on a min-heap, supporting efficient insertion and retrieval of minimum elements.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_62\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-lib/src/lib/util/MinHeapQueue.ts\n```\n\n----------------------------------------\n\nTITLE: String Formatting with Unknown Word - C\nDESCRIPTION: These snippets uses string formatting involving 'tcredspaid', 'incnetmsgs'. The word 'tcredspaid', 'incnetmsgs' are flagged as unknown words and used in statistics calculations.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_113\n\nLANGUAGE: C\nCODE:\n```\nsysvar->tcreds, sysvar->tcredspaid, sysvar->timever,\n```\n\nLANGUAGE: C\nCODE:\n```\n>nmessages, sysvar->incnetmsgs);\n```\n\n----------------------------------------\n\nTITLE: Struct values assignment with Unknown Word - C\nDESCRIPTION: These snippets are assigning struct values. The words 'LINSTATS', 'USY_LINSTATS', 'rsys_linstats', 'SYSTATS', 'USY_SYSTATS', 'rsys_systats', are flagged as unknown words.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_108\n\nLANGUAGE: C\nCODE:\n```\n{\"LINSTATS\", 3, USY_LINSTATS, rsys\n```\n\nLANGUAGE: C\nCODE:\n```\nUSY_LINSTATS, rsys_linstats},\n```\n\nLANGUAGE: C\nCODE:\n```\n{\"SYSTATS\", 3, USY_SYSTATS, rsys\n```\n\nLANGUAGE: C\nCODE:\n```\n, USY_SYSTATS, rsys_systats},\n```\n\n----------------------------------------\n\nTITLE: Malus Law Implementation in Physics in Python\nDESCRIPTION: Defines a function to calculate the intensity of polarized light after passing through a polarizer, based on Malus's law; used in optics.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_77\n\nLANGUAGE: Python\nCODE:\n```\n40:5 - Unknown word (malus) -- def malus_law(initial_intensity\n```\n\nLANGUAGE: Python\nCODE:\n```\n34:39 - Unknown word (Glan) -- Polaroid to about 1:106 for Glan-Taylor prism polarizers\n```\n\nLANGUAGE: Python\nCODE:\n```\n7:49 - Unknown word (Étienne) -- which is named after Étienne-Louis Malus,\n```\n\n----------------------------------------\n\nTITLE: LaTeX TikZ Graph Structure Definitions\nDESCRIPTION: Code showing the definition of graph nodes and their relationships in TikZ. These snippets define points and connections for a dependency graph of computer science courses.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/MartinThoma/LaTeX-examples/snapshot.txt#_snippet_13\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\node[pflicht] (anai) [right of=lai]\n```\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\node[pflicht] (laii) [below of=lai]\n```\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\node[pflicht] (anaii) [below of=anai] {ANA\n```\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\node[pflicht] (algi) [below of=gbi]\n```\n\n----------------------------------------\n\nTITLE: Macro Definitions in mbk_account.h (C)\nDESCRIPTION: This snippet shows macro definitions likely representing status codes or flags related to account management. These macros provide symbolic names for integer values, enhancing code readability and maintainability.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define PGSSTR 100\n#define PGSOK 101\n#define PGSON 102\n#define PGSOFF 103\n#define PRFLT 104\n#define NEWANS 105\n#define NEWXLT 106\n#define NEWNPS 107\n#define NEWFST 108\n#define NEWSWD 110\n#define NEWSHT 111\n#define NEWPGS 112\n#define NEWPGT 113\n#define XFERR1 114\n#define CREDTR 117\n#define RANOUT 119\n```\n\n----------------------------------------\n\nTITLE: TypeScript: Conversation State Handler for Proteus\nDESCRIPTION: This snippet imports identifiers for handling conversation states within the Proteus context, involving importing 'QualifiedId' from '@wireapp/api-client' and the 'container' from 'tsyringe' for dependency injection, aiding in managing conversation state logic specific to Proteus.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_68\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {QualifiedId} from '@wireapp/api-client/lib/user';\nimport {container} from 'tsyringe';\nimport {WebAppEvents} from '@wireapp/webapp-events';\n```\n\n----------------------------------------\n\nTITLE: TypeScript: Additional Imports for Conversation Message Management\nDESCRIPTION: This code imports further conversation-related entities for managing message sending and error handling, including explicit setting of IDs in messages and handling of Giphy image URLs, which are essential for rich media messaging features.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_78\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {QualifiedUserClients} from '@wireapp/api-client/lib/conversation';\nimport {BackendErrorLabel} from '@wireapp/api-client/lib/http';\nimport {container} from 'tsyringe';\nimport {Giphy} from 'giphy';\n```\n\n----------------------------------------\n\nTITLE: TypeScript Language Settings Definitions and Tests\nDESCRIPTION: Models language-specific settings and verifies their correctness to support multi-language environments.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_34\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* LanguageSettings definitions and tests */\n```\n\n----------------------------------------\n\nTITLE: TypeScript PairingHeap Data Structure\nDESCRIPTION: Heap implementation optimized for meldable heap operations, supporting priority queue functionalities.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_63\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/cspell-lib/src/lib/util/PairingHeap.ts\n```\n\n----------------------------------------\n\nTITLE: Importing Caddy Command Package Alias in Go\nDESCRIPTION: Imports the Caddy command package (`github.com/caddyserver/caddy/v2/cmd`) and assigns it the alias `caddycmd`. This alias is then used to access functions and types from that package.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_14\n\nLANGUAGE: Go\nCODE:\n```\ncaddycmd \"github.com/caddyserver/caddy/v2/cmd\"\n```\n\n----------------------------------------\n\nTITLE: TypeScript source index file in test-cspell-esbuild-cjs\nDESCRIPTION: This file acts as the main entry point for TypeScript-based tests or build scripts within the test-cspell-esbuild-cjs package. It likely exports functions, classes, or configurations used during testing or development, facilitating TypeScript compilation and integration with build processes.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/perf/cspell-glob/data/file-list.txt#_snippet_89\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport * from './src/index';\n// Additional setup or export statements\n```\n\n----------------------------------------\n\nTITLE: Club Index and Metadata in Conversion Routines (C)\nDESCRIPTION: Defines structures like 'clubidx' with 'defax' parameter to manage club indexing metadata. Supports message and club attribute modifications during conversions.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_49\n\nLANGUAGE: C\nCODE:\n```\nstruct clubidx {\n  int defax;\n};\n```\n\n----------------------------------------\n\nTITLE: Linear Regression with Polynomial Features in Python\nDESCRIPTION: Uses polynomial basis functions to fit data, involving computation of coefficients with pseudo-inverse. Inputs are data points; outputs are model coefficients, useful in regression analysis.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_44\n\nLANGUAGE: Python\nCODE:\n```\nmachine_learning/polynomial_regression.py:135:13    - Unknown word (coefs)      -- >>> coefs = np.array([-250, 5\n```\n\nLANGUAGE: Python\nCODE:\n```\nmachine_learning/polynomial_regression.py:149:21    - Unknown word (pinv)       -- # np.linalg.pinv() computes the Moore\n```\n\nLANGUAGE: Python\nCODE:\n```\nmachine_learning/polynomial_regression.py:28:7      - Unknown word (UΣVᵀ)       -- where UΣVᵀ is an SVD of X.\n```\n\nLANGUAGE: Python\nCODE:\n```\nmachine_learning/polynomial_regression.py:5:29      - Unknown word (βₘxᵐ)       -- β₁x + β₂x² + ... + βₘxᵐ + ε\n```\n\n----------------------------------------\n\nTITLE: Importing from @wireapp/react-ui-kit in FormatToolbar (TypeScript)\nDESCRIPTION: Imports components or types from the '@wireapp/react-ui-kit' library within the FormatToolbar component.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\n} from '@wireapp/react-ui-kit';\n```\n\n----------------------------------------\n\nTITLE: Importing CheckboxLabel from wireapp/react-ui-kit\nDESCRIPTION: This snippet imports the `CheckboxLabel` component from `@wireapp/react-ui-kit`. It implies that the application is using the CheckboxLabel component, likely a styled label associated with a checkbox for improved user experience and accessibility. The unknown word `wireapp` is the cspell error.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_109\n\nLANGUAGE: typescript\nCODE:\n```\nimport {CheckboxLabel} from '@wireapp/react-ui-kit';\n```\n\n----------------------------------------\n\nTITLE: Macro Definitions for Saved Games and Adventure Module in mbk_adventure.h\nDESCRIPTION: This snippet defines constants related to saved game management and transfer errors within the adventure module. It provides identifiers for saved game operations, confirmation prompts, error handling, and list management, facilitating game state preservation and transfer operations.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_9\n\nLANGUAGE: C\nCODE:\n```\n#define SAVEDGAME 4\n```\n\nLANGUAGE: C\nCODE:\n```\n#define XCONFRM 13\n```\n\nLANGUAGE: C\nCODE:\n```\n#define XFERERR 16\n```\n\nLANGUAGE: C\nCODE:\n```\n#define CHOOSERR 20\n```\n\nLANGUAGE: C\nCODE:\n```\n#define TOPLIN 23\n```\n\nLANGUAGE: C\nCODE:\n```\n#define TOPFTR 24\n```\n\nLANGUAGE: C\nCODE:\n```\n#define LISTGAM 27\n```\n\nLANGUAGE: C\nCODE:\n```\n#define LISTFTR 28\n```\n\n----------------------------------------\n\nTITLE: Gauss Easter Date Calculation in Python\nDESCRIPTION: Calculates Easter date based on the Metonic cycle, likely used in calendar computations or date algorithms.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_65\n\nLANGUAGE: Python\nCODE:\n```\n25:5 - Unknown word (metonic) -- metonic_cycle = year % 19\n```\n\n----------------------------------------\n\nTITLE: Function Declaration with Unknown Word - C\nDESCRIPTION: These snippets declare a function `rsys_filtaud` and `rsys_signups`. The words 'filtaud' and `signups` are flagged as unknown words.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_105\n\nLANGUAGE: C\nCODE:\n```\nrsys_filtaud ()\n```\n\nLANGUAGE: C\nCODE:\n```\nrsys_signups ()\n```\n\n----------------------------------------\n\nTITLE: WebSocket Implementation Constants in Dart\nDESCRIPTION: Constants and comments from the WebSocket implementation in Dart. These define protocol-specific values for WebSocket compression and frame formatting used in the WebSocket protocol.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/dart-lang/sdk/snapshot.txt#_snippet_8\n\nLANGUAGE: Dart\nCODE:\n```\nPER_MESSAGE_DEFLATE = \"permessage-deflate\";\n// 0x00 block has the BFINAL header bit set to 0 and the BTYPE header set to\n```\n\n----------------------------------------\n\nTITLE: Importing CONVERSATION_ACCESS from wireapp/api-client\nDESCRIPTION: This snippet imports `CONVERSATION_ACCESS` from the `@wireapp/api-client` library. This could involve checking or altering the access control for conversations.  The unknown word `wireapp` is the cspell error.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_118\n\nLANGUAGE: typescript\nCODE:\n```\nimport {CONVERSATION_ACCESS} from '@wireapp/api-client/lib/conversation\n```\n\n----------------------------------------\n\nTITLE: Python Driveline Management in STK Track Script\nDESCRIPTION: Code handling driveline creation and management for SuperTuxKart tracks. Drivelines define the AI driving paths and race routes, with special types like MAINDRIVELINE for the primary race path.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/AdaDoom3/AdaDoom3/snapshot.txt#_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nself.lDrivelines = []\nif stktype==\"CANNONSTART\":\n# Check for new drivelines\nif stktype==\"MAINDRIVELINE\" or \\\n   stktype==\"MAINDL\":\n    self.lDrivelines.insert(0, Driveline\nself.lDrivelines.append(Driveline(obj\nif len(self.lDrivelines) > 0:\n```\n\n----------------------------------------\n\nTITLE: Referencing godoc Documentation Tool (Comment)\nDESCRIPTION: A code comment refers to `godoc`, the standard Go documentation tool. This suggests that the surrounding code relates to function registration or API design where documentation is important.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_33\n\nLANGUAGE: Go\nCODE:\n```\n// the RegisterCommand() godoc.\n```\n\n----------------------------------------\n\nTITLE: AXPY Operation in Linear Algebra in Python\nDESCRIPTION: Implements the axpy operation (a scalar times a vector plus a vector), fundamental in numerical linear algebra. Dependencies on NumPy; inputs are scalar and vectors; output updates vector data.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_30\n\nLANGUAGE: Python\nCODE:\n```\nlinear_algebra/README.md:31:12     - Unknown word (axpy)       -- - function axpy(scalar, vector1, vector\n```\n\n----------------------------------------\n\nTITLE: Text Processing and Character Encoding in adventure/infoint/text.c\nDESCRIPTION: This snippet describes functions responsible for writing characters, translating text, and managing text data in adventure games, including character translation tables and special character handling. It addresses multilingual support and text encoding for the game.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_33\n\nLANGUAGE: C\nCODE:\n```\nwrite_zchar ((char) (ascii | code));\nchar xlat_buffer[MAX_TEXT_SIZE];\nchar xlat[] = \"aeoeueAeOeUess>><<\";\n// Text translation and encoding functions\n\n```\n\n----------------------------------------\n\nTITLE: OpenAL Filter Functions in Ada\nDESCRIPTION: Function declarations for OpenAL audio filters including alFilter and alGetFilter with various parameter types (i, iv, f, fv). These functions allow setting and retrieving filter parameters in the OpenAL audio library.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/AdaDoom3/AdaDoom3/snapshot.txt#_snippet_13\n\nLANGUAGE: Ada\nCODE:\n```\nALvoid AL_APIENTRY alFilteri(ALuint filter, ALenum param, ALint value);\nALvoid AL_APIENTRY alFilteriv(ALuint filter, ALenum param, const ALint *values);\nALvoid AL_APIENTRY alFilterf(ALuint filter, ALenum param, ALfloat value);\nALvoid AL_APIENTRY alFilterfv(ALuint filter, ALenum param, const ALfloat *values);\nALvoid AL_APIENTRY alGetFilteri(ALuint filter, ALenum param, ALint *value);\nALvoid AL_APIENTRY alGetFilteriv(ALuint filter, ALenum param, ALint *values);\nALvoid AL_APIENTRY alGetFilterf(ALuint filter, ALenum param, ALfloat *value);\nALvoid AL_APIENTRY alGetFilterfv(ALuint filter, ALenum param, ALfloat *values);\n```\n\n----------------------------------------\n\nTITLE: Fixing Glob Root Environment Variable Setting in TypeScript\nDESCRIPTION: This snippet modifies the function run() in TypeScript to correctly set the environment variable ENV_CSPELL_GLOB_ROOT when cfg.options.root is provided. Instead of directly assigning to process.env, it uses the helper function setEnvironmentVariable. This change helps in resolving issues with relative paths for cfg.options.root, ensuring the correct Glob Root is set during execution. Dependencies include the setEnvironmentVariable function and the environment variable name ENV_CSPELL_GLOB_ROOT. The key parameter is cfg.options.root, which should be resolved relative to the configuration.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell/fixtures/issue-6025/README.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nasync function run(): Promise<RunResult> {\n  if (cfg.options.root) {\n    setEnvironmentVariable(ENV_CSPELL_GLOB_ROOT, cfg.options.root);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Function Declaration with Unknown Word - C\nDESCRIPTION: This snippet declares a function 'cpmv'. The word 'cpmv' is flagged as an unknown word. It likely implements copy or move operations.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_97\n\nLANGUAGE: C\nCODE:\n```\ncpmv (int asksrc, int asktrg\n```\n\n----------------------------------------\n\nTITLE: Function Declaration with Unknown Word - C\nDESCRIPTION: This snippet declares a function 'undoevent'. The word 'undoevent' is flagged as an unknown word. It likely reverses the effect of an event.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_95\n\nLANGUAGE: C\nCODE:\n```\nundoevent (char *name)\n```\n\n----------------------------------------\n\nTITLE: Declaring a Caddy Configuration Adapter Variable in Go\nDESCRIPTION: Declares a variable `cfgAdapter` of type `caddyconfig.Adapter`. This variable will hold an instance of a configuration adapter used for loading and processing Caddy configurations.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_36\n\nLANGUAGE: Go\nCODE:\n```\nvar cfgAdapter caddyconfig.Adapter\n```\n\n----------------------------------------\n\nTITLE: Cell Lock Deadlock - Rust\nDESCRIPTION: This Rust code snippet calls a `deadlock` function within the `cell_lock.rs` file, likely used for testing or debugging concurrency issues. The arguments indicate scenarios where deadlocks might occur related to `RwLock` (Read-Write Lock) access.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_3\n\nLANGUAGE: Rust\nCODE:\n```\ncommon/src/lock/cell_lock.rs:131:23    - Unknown word (upgradably) -- deadlock(\"upgradably+sharedly \", \"RwLock\ncommon/src/lock/cell_lock.rs:131:34    - Unknown word (sharedly)   -- deadlock(\"upgradably+sharedly \", \"RwLock\")\ncommon/src/lock/cell_lock.rs:180:35    - Unknown word (sharedly)   -- deadlock(\"recursively+sharedly \", \"RwLock\")\ncommon/src/lock/cell_lock.rs:72:23     - Unknown word (sharedly)   -- deadlock(\"sharedly \", \"RwLock\")\n```\n\n----------------------------------------\n\nTITLE: System and Header Definitions in ztypes.h\nDESCRIPTION: This snippet contains typedefs and macro definitions related to game file headers, system configuration options such as Tandy and IIGS support, and structure declarations for game data. It supports platform-specific configurations and data representation.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_34\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct zheader {\n // Header fields\n} zheader;\n#define CONFIG_TANDY 0x08\n#define INTERP_APPLE_IIGS 10\n// Other platform-specific macros\n\n```\n\n----------------------------------------\n\nTITLE: Vesigs File and Final Data Management in Conversion (C)\nDESCRIPTION: Handles output of 'vesigs.txt' for VESIGS data, aiding in message signature or metadata conversions, and finalizes message attribute adjustments during conversion.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_51\n\nLANGUAGE: C\nCODE:\n```\nsprintf (fname, \"%s/vesigs.txt\", arg_majordir);\n```\n\n----------------------------------------\n\nTITLE: Space Radiation and Rainfall Data in Python\nDESCRIPTION: Contains data processing and analysis of rainfall intensity and molecular speed, useful in climate modeling and hydrology.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_79\n\nLANGUAGE: Python\nCODE:\n```\n11:24 - Unknown word (Fundamentos) -- Aparicio, F. (1997): Fundamentos de Hidrología de Superficie\n```\n\nLANGUAGE: Python\nCODE:\n```\n11:3 - Unknown word (Aparicio) -- - Aparicio, F. (1997): Fundamentos\n```\n\nLANGUAGE: Python\nCODE:\n```\n11:39 - Unknown word (Hidrología) -- 97): Fundamentos de Hidrología de Superficie.\n```\n\nLANGUAGE: Python\nCODE:\n```\n11:53 - Unknown word (Superficie) -- Fundamentos de Hidrología de Superficie.\n```\n\nLANGUAGE: Python\nCODE:\n```\n12:15 - Unknown word (México) -- Balderas, México, Limusa. 303 p.\n```\n\nLANGUAGE: Python\nCODE:\n```\n50:5 - Unknown word (vrms) -- vrms = rms_speed_of_molecule\n```\n\nLANGUAGE: Python\nCODE:\n```\n5:4 - Unknown word (Vrms) -- | Vrms = √3RT/M |\n```\n\n----------------------------------------\n\nTITLE: Fix Trie Issue\nDESCRIPTION: This entry describes a bug fix concerning issues related to a radix in the `trie-lib`. This likely improves how the trie data structure is used internally to search for valid words and spellings, leading to better performance or more accurate spell checking.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-glob/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Removing vitest Dependency\nDESCRIPTION: This snippet references a bug fix where `vitest` was removed as a dependency. This change implies that `vitest` was previously incorrectly included as a dependency, and this fix removes it to streamline the dependency graph.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-glob/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Excluding words with cspell-tools\nDESCRIPTION: This bug fix introduces support for excluding words using cspell-tools. This allows the user to specify which words should be excluded from spell checking.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-strong-weak-map/test-cspell-strong-weak-map/CHANGELOG.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncspell-tools - support excluding words ([#5140](https://github.com/streetsidesoftware/cspell/issues/5140)) ([3fcdd89](https://github.com/streetsidesoftware/cspell/commit/3fcdd89fb319b659d218067c5366e02d036be59f))\n```\n\n----------------------------------------\n\nTITLE: Fix empty build target\nDESCRIPTION: This bug fix addresses the issue of an empty build target. The aim is to ensure that the build process functions correctly even when an empty target is specified.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-strong-weak-map/test-cspell-strong-weak-map/CHANGELOG.md#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nFix empty build target ([#4627](https://github.com/streetsidesoftware/cspell/issues/4627)) ([1fcbf98](https://github.com/streetsidesoftware/cspell/commit/1fcbf9897b70691eb9947e43b966a5069fe37feb))\n```\n\n----------------------------------------\n\nTITLE: Initializing TLS and Event Apps in Caddy HTTP Module in Go\nDESCRIPTION: This snippet demonstrates how to initialize TLS and events applications within the Caddy HTTP module using Go. It involves acquiring interface abstractions from the Caddy context, casting them to concrete TLS and event app types, and assigning them to server structures. Dependencies include the caddytls and caddyevents packages. Key functionality revolves around setting up TLS connection policies and event handling necessary for secure and observable HTTP serving.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_39\n\nLANGUAGE: Go\nCODE:\n```\ntlsAppIface, err := ctx.App(\"tls\")\nif err != nil {\n    return err\n}\napp.tlsApp = tlsAppIface.(*caddytls.TLS)\n\neventsAppIface, err := ctx.App(\"events\")\nif err != nil {\n    return err\n}\nsrv.events = eventsAppIface.(*caddyevents.App)\n```\n\n----------------------------------------\n\nTITLE: cspell command output (text)\nDESCRIPTION: This snippet shows the standard output generated after executing the `cspell .` command. It lists the files checked, the time taken for each, and the final summary indicating the total files processed and the number of spelling issues found (in this case, zero).\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-fixtures/issues/issue-4811/#local/README.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n1/3 ./##local/words.txt 207.71ms\n2/3 ./cspell.config.yaml 5.92ms\n3/3 ./README.md 3.82ms\nCSpell: Files checked: 3, Issues found: 0 in 0 files\n```\n\n----------------------------------------\n\nTITLE: Struct Initialization with Unknown Word - C\nDESCRIPTION: These snippets initializes a struct with `BCDMT` and `DMYE`. The word 'BCDMT', 'DMYE' are flagged as unknown words and used in statistics calculations.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_117\n\nLANGUAGE: C\nCODE:\n```\n1, 0, RSGENST3, 0, \"BCDMT\", 0, 0))\n```\n\nLANGUAGE: C\nCODE:\n```\n1, 0, RSGENST4, 0, \"DMYE\", 0, 0))\n```\n\n----------------------------------------\n\nTITLE: String Comparison with Unknown Word - C\nDESCRIPTION: This snippet shows a string comparison with '/olympos' and '/hypermenu'. The words 'olympos' and 'hypermenu' are flagged as unknown words and are probably commands.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_100\n\nLANGUAGE: C\nCODE:\n```\nsameas (margv[0], \"/olympos\") || sameas (margv[\n```\n\nLANGUAGE: C\nCODE:\n```\nsameas (margv[0], \"/hypermenu\")\n```\n\n----------------------------------------\n\nTITLE: Svelte Test Code: Import Error\nDESCRIPTION: A test import statement attempting to include a non-existent Svelte component, used to verify error handling or missing component detection within the testing suite.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/sveltejs/svelte/snapshot.txt#_snippet_31\n\nLANGUAGE: TypeScript\nCODE:\n```\npackages/svelte/tests/types/component.ts:345:20    - Unknown word (doesntexist) -- import Foo from './doesntexist.svelte';\n```\n\n----------------------------------------\n\nTITLE: Invalid Spread Attribute in Svelte Script Tag\nDESCRIPTION: Example of incorrectly using the spread syntax on a Svelte script tag with an unknown variable 'wheee'.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/sveltejs/svelte/snapshot.txt#_snippet_37\n\nLANGUAGE: svelte\nCODE:\n```\n<script {...wheee}></script>\n```\n\n----------------------------------------\n\nTITLE: Response Matchers for Caddy HTTP Modules in Go\nDESCRIPTION: This snippet details the creation and management of response matchers within Caddy modules, including the use of maps to store matchers and sorting functions to prioritize preferences based on quality factors. It integrates 'caddyhttp.ResponseMatcher' and 'sort'/'math' packages for comparison logic, enabling flexible response handling configurations.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_47\n\nLANGUAGE: Go\nCODE:\n```\n// matcher := &caddyhttp.ResponseMatcher{\n// Implementation code here\n}\n```\n\n----------------------------------------\n\nTITLE: Using YP Methods\nDESCRIPTION: This snippet shows YP methods for interacting with the Yellow Pages service. These functions are used for retrieving information from the YP database and require the YP extension, including functions such as `yp_all`, `yp_cat`, `yp_errno`, `yp_err_string`, `yp_first`, `yp_get_default_domain`, `yp_master`, `yp_match`, `yp_next`, and `yp_order`.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-tools/test-cspell-tools/src/php.txt#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nyp_all\nyp_cat\nyp_errno\nyp_err_string\nyp_first\nyp_get_default_domain\nyp_master\nyp_match\nyp_next\nyp_order\n```\n\n----------------------------------------\n\nTITLE: Calculating Duration with TIME_IN_MILLIS in Test (TypeScript)\nDESCRIPTION: Calculates a duration by multiplying a 'minutes' variable with a constant `TIME_IN_MILLIS.MINUTE`. This appears multiple times in the MessageTimerButton test suite.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nconst duration = TIME_IN_MILLIS.MINUTE * minutes;\n```\n\n----------------------------------------\n\nTITLE: Unit Tests for Rewrite Logic in Caddy HTTP Module (Go)\nDESCRIPTION: This snippet contains test functions that utilize test cases with various URL paths and parameters to validate rewriting logic. It uses functions like newRequest and substrReplacer to simulate requests and perform string replacements. Dependencies include testing packages such as testify/assert, and emphasis is on verifying correct rewrite behavior and handling of special characters.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_70\n\nLANGUAGE: Go\nCODE:\n```\nwrec := NewResponseRecorder\n```\n\n----------------------------------------\n\nTITLE: Defining Emojis Variable (TypeScript)\nDESCRIPTION: Declares a constant variable, possibly misspelled 'emojies', intended to hold emoji data (names/aliases 'n' and unicode 'u') within the EmojiPickerPlugin.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nconst emojies: {n: string[]; u: string\n```\n\n----------------------------------------\n\nTITLE: Fannkuch Benchmark Function Definition - Python\nDESCRIPTION: This Python code snippet defines the fannkuch benchmark function. The function itself is not provided in this snippet, but its definition and usage are highlighted. This function likely calculates the Fannkuch permutation.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/RustPython/RustPython/snapshot.txt#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nbenches/benchmarks/fannkuch.py:14:5      - Unknown word (fannkuch)   -- def fannkuch(n):\n```\n\n----------------------------------------\n\nTITLE: Case Statement with Unknown Word - C\nDESCRIPTION: This snippet shows a case statement with the value 'LSR_RELOGON'. The word 'RELOGON' within the LSR_RELOGON context, is flagged as an unknown word but is likely a domain specific abbreviation. This case likely handles re-login events.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_76\n\nLANGUAGE: C\nCODE:\n```\ncase LSR_RELOGON:\n```\n\n----------------------------------------\n\nTITLE: Abundant Numbers Set in Project Euler Problem 23\nDESCRIPTION: Initialization of a set to store abundant numbers for Project Euler problem 23.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_83\n\nLANGUAGE: Python\nCODE:\n```\nabundants = set()\n```\n\n----------------------------------------\n\nTITLE: yyparse Macro Definition (C)\nDESCRIPTION: This snippet defines a macro `yyparse` to be `__gettextparse`. This renames the standard `yyparse` function, possibly to avoid naming conflicts or to integrate it with a gettext internationalization library.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\n#define yyparse __gettextparse\n```\n\n----------------------------------------\n\nTITLE: Variable Declaration with Unknown Word - C\nDESCRIPTION: This snippet shows the declaration of an integer variable named 'numusr' in the notify module. The word 'numusr' is flagged as an unknown word, suggesting a potential misspelling or an unconventional abbreviation.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_66\n\nLANGUAGE: C\nCODE:\n```\nint numusr;\n```\n\n----------------------------------------\n\nTITLE: Variable Declaration with Unknown Word - C\nDESCRIPTION: This snippet declares integer variables, including 'showntelnetline', initialized to 0. The word 'showntelnetline' is flagged as an unknown word. It likely controls the display of telnet-related information.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_73\n\nLANGUAGE: C\nCODE:\n```\nint i, showntelnetline = 0, res;\n```\n\n----------------------------------------\n\nTITLE: Comment on Component Instantiation (TypeScript)\nDESCRIPTION: A comment mentioning when a component is instantiated (misspelled 'instanciated') within the TypeaheadMenuPlugin.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nwhen the component is instanciated (the last one by default\n```\n\n----------------------------------------\n\nTITLE: Referencing Caddyfile Configuration Format (Comments/Strings)\nDESCRIPTION: Code comments, string literals, or variable names reference 'Caddyfile', Caddy's native configuration file format. This highlights the handling or processing of Caddyfile configurations within the surrounding code.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/caddyserver/caddy/snapshot.txt#_snippet_18\n\nLANGUAGE: Go\nCODE:\n```\n// its configuration. The Caddyfile is a built-in config\n```\n\nLANGUAGE: Go\nCODE:\n```\n// you. If a file named Caddyfile is in the\n```\n\nLANGUAGE: Go\nCODE:\n```\nconfigFile = \"Caddyfile\"\n```\n\nLANGUAGE: Go\nCODE:\n```\n// overwrite' to update your Caddyfile in-place instead of\n```\n\nLANGUAGE: Go\nCODE:\n```\nfmt.Errorf(`%s:%d: Caddyfile input is not formatted`)\n```\n\nLANGUAGE: Go\nCODE:\n```\n// config flag or ensure Caddyfile exists in current directory\n```\n\n----------------------------------------\n\nTITLE: Identifying Unknown Words in SimpleStringCipher_NetStandard.cs\nDESCRIPTION: This line identifies an unknown word, `decryptor`, within the SimpleStringCipher_NetStandard.cs file. The code implies that the word refers to a variable for decrypting, potentially using a symmetric key.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/aspnetboilerplate/aspnetboilerplate/snapshot.txt#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/Runtime/Security/SimpleStringCipher_NetStandard.cs:154:32    - Unknown word (decryptor)   -- using (var decryptor = symmetricKey.CreateDecrypto\n```\n\n----------------------------------------\n\nTITLE: Function Declaration with Unknown Word - C\nDESCRIPTION: This snippet declares a function 'editother'. The word 'editother' is flagged as an unknown word, suggesting a possible misspelling or an unusual function name. The function's purpose is not immediately clear from the name.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_71\n\nLANGUAGE: C\nCODE:\n```\neditother ()\n```\n\n----------------------------------------\n\nTITLE: Conditional Expression with Unknown Word - C\nDESCRIPTION: This snippet uses a conditional expression with 'pgstmo'. The word 'pgstmo' is flagged as an unknown word. It seems to be related to a timeout or delay condition.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_75\n\nLANGUAGE: C\nCODE:\n```\npgstmo ? \"\" :\n```\n\n----------------------------------------\n\nTITLE: String Formatting with Unknown Word - C\nDESCRIPTION: This snippet uses string formatting involving 'sxfdesc'. The word 'sxfdesc' is flagged as an unknown word. It's used within FXM_DOWNLOAD.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_103\n\nLANGUAGE: C\nCODE:\n```\nFXM_DOWNLOAD, spec, sxfdesc, 0, -1)) {\n```\n\n----------------------------------------\n\nTITLE: Shadow DOM configuration in Svelte compiler options\nDESCRIPTION: Code extracting shadowdom configuration value from a shadow object using optional chaining, used in the Svelte compiler's parsing phase.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/sveltejs/svelte/snapshot.txt#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst shadowdom = shadow?.value;\n```\n\n----------------------------------------\n\nTITLE: Identifying Unknown Words in INotificationSubscriptionManager.cs\nDESCRIPTION: This line identifies an unknown word, `subscribtions`, found within the INotificationSubscriptionManager.cs file. The comment associated with the word suggests that it might be a typo for 'subscriptions', indicating the file is involved with handling notifications.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/aspnetboilerplate/aspnetboilerplate/snapshot.txt#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/Notifications/INotificationSubscriptionManager.cs:61:22     - Unknown word (subscribtions) -- /// Gets all subscribtions for given notification\n```\n\n----------------------------------------\n\nTITLE: Finding Unknown Words in NotificationConfiguration.cs\nDESCRIPTION: This entry identifies an unknown word, `Distributers`, within the NotificationConfiguration.cs file. The context suggests this refers to a list of notification distributers, indicating a configuration-related issue or typo within the code.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/aspnetboilerplate/aspnetboilerplate/snapshot.txt#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/Notifications/NotificationConfiguration.cs:9:52      - Unknown word (Distributers) -- INotificationDistributer> Distributers { get; private set;\n```\n\n----------------------------------------\n\nTITLE: Build System Directives in Bazel and CMake\nDESCRIPTION: Build system directives and variables flagged as unknown words in Bazel and CMake files. These include references to build directories, installation paths, and dependencies.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/googleapis/google-cloud-cpp/snapshot.txt#_snippet_6\n\nLANGUAGE: Bazel\nCODE:\n```\n\"-I$(GENDIR)/examples\",\n```\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(FindgRPC)\nDESTINATION ${CMAKE_INSTALL_BINDIR}\nNAMELINK_COMPONENT google_cloud\nSOVERSION ${PROJECT_VERSION_MAJOR\n```\n\n----------------------------------------\n\nTITLE: Importing Wire API Client Components\nDESCRIPTION: Various imports from Wire App API client libraries, used for handling protocol messaging, events, conversations, and other API interactions.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_82\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {ProtobufAsset} from '@wireapp/protocol-messaging'\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {CONVERSATION_EVENT} from '@wireapp/api-client/lib/event'\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {ConversationEvent} from '@wireapp/api-client/lib/event'\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Quote} from '@wireapp/protocol-messaging'\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {RECEIPT_MODE} from '@wireapp/api-client/lib/conversation'\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {FEDERATION_EVENT} from '@wireapp/api-client/lib/event'\n```\n\n----------------------------------------\n\nTITLE: Identifying Unknown Words in MimeTypeMap.cs\nDESCRIPTION: This section highlights unknown words identified within the MimeTypeMap.cs file.  Each entry represents a potential typo or an unrecognized term. The comments surrounding the words provides context about the intended meaning of the unrecognized words, which are associated with file extensions and their respective MIME types. This process helps identify and correct potential errors, maintaining the integrity of the file.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/aspnetboilerplate/aspnetboilerplate/snapshot.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:488:20    - Unknown word (setreg)                -- {\".setreg\", \"application/set-registrati\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:490:20    - Unknown word (sgimb)                 -- {\".sgimb\", \"application/x-sgimb\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:493:20    - Unknown word (shar)                  -- {\".shar\", \"application/x-shar\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:495:41    - Unknown word (stuffit)               -- sit\", \"application/x-stuffit\"},\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:503:20    - Unknown word (slupkg)                -- {\".slupkg-ms\", \"application/x\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:515:39    - Unknown word (futuresplash)          -- .spl\", \"application/futuresplash\"},\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:517:41    - Unknown word (wais)                  -- src\", \"application/x-wais-source\"},\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:519:20    - Unknown word (SSIS)                  -- {\".SSISDeploymentManifest\",\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:520:39    - Unknown word (streamingmedia)        -- .ssm\", \"application/streamingmedia\"},\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:533:20    - Unknown word (testrunconfig)         -- {\".testrunconfig\", \"application/xml\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:534:20    - Unknown word (testsettings)          -- {\".testsettings\", \"application/xml\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:536:20    - Unknown word (texi)                  -- {\".texi\", \"application/x-texinfo\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:536:42    - Unknown word (texinfo)               -- texi\", \"application/x-texinfo\"},\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:539:20    - Unknown word (thmx)                  -- {\".thmx\", \"application/vnd.ms\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:539:47    - Unknown word (officetheme)           -- \"application/vnd.ms-officetheme\"},\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:547:41    - Unknown word (msterminal)            -- trm\", \"application/x-msterminal\"},\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:555:32    - Unknown word (iuls)                  -- {\".uls\", \"text/iuls\"},\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:557:20    - Unknown word (ustar)                 -- {\".ustar\", \"application/x-ustar\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:559:20    - Unknown word (vbdproj)               -- {\".vbdproj\", \"text/plain\"},\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:563:34    - Unknown word (vcard)                -- {\".vcf\", \"text/x-vcard\"},\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:564:20    - Unknown word (vcproj)               -- {\".vcproj\", \"application/xml\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:567:20    - Unknown word (vddproj)              -- {\".vddproj\", \"text/plain\"},\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:569:20    - Unknown word (vdproj)               -- {\".vdproj\", \"text/plain\"},\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:56:20     - Unknown word (accda)      -- {\".accda\", \"application/msaccess\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:56:41     - Unknown word (msaccess)   -- accda\", \"application/msaccess.addin\"},\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:56:50     - Unknown word (addin)      -- application/msaccess.addin\"},\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:570:46    - Unknown word (visio)                -- \"application/vnd.ms-visio.viewer\"},\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:572:20    - Unknown word (vscontent)            -- {\".vscontent\", \"application/xml\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:573:20    - Unknown word (vsct)                 -- {\".vsct\", \"text/xml\"},\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:577:20    - Unknown word (vsixlangpack)         -- {\".vsixlangpack\", \"text/xml\"},\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:578:20    - Unknown word (vsixmanifest)         -- {\".vsixmanifest\", \"text/xml\"},\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:579:20    - Unknown word (vsmdi)                -- {\".vsmdi\", \"application/xml\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:580:20    - Unknown word (vspscc)               -- {\".vspscc\", \"text/plain\"},\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:582:20    - Unknown word (vsscc)                -- {\".vsscc\", \"text/plain\"},\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:583:20    - Unknown word (vssettings)           -- {\".vssettings\", \"text/xml\"},\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:584:20    - Unknown word (vssscc)               -- {\".vssscc\", \"text/plain\"},\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:586:20    - Unknown word (vstemplate)           -- {\".vstemplate\", \"text/xml\"},\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:587:20    - Unknown word (vsto)                 -- {\".vsto\", \"application/x-ms\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:58:20     - Unknown word (accdc)      -- {\".accdc\", \"application/msaccess\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:597:20    - Unknown word (wbmp)                 -- {\".wbmp\", \"image/vnd.wap.wbmp\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:601:20    - Unknown word (webarchive)           -- {\".webarchive\", \"application/x-safari\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:604:20    - Unknown word (webtest)              -- {\".webtest\", \"application/xml\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:608:20    - Unknown word (WLMP)                 -- {\".WLMP\", \"application/wlmoviemaker\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:608:40    - Unknown word (wlmoviemaker)         -- WLMP\", \"application/wlmoviemaker\"},\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:609:20    - Unknown word (wlpginstall)          -- {\".wlpginstall\", \"application/x-wlpg\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:609:49    - Unknown word (wlpg)                 -- wlpginstall\", \"application/x-wlpg-detect\"},\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:614:41    - Unknown word (msmetafile)           -- wmf\", \"application/x-msmetafile\"},\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:616:20    - Unknown word (wmlc)                 -- {\".wmlc\", \"application/vnd.wap\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:617:20    - Unknown word (wmls)                 -- {\".wmls\", \"text/vnd.wap.wmlscript\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:617:41    - Unknown word (wmlscript)            -- wmls\", \"text/vnd.wap.wmlscript\"},\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:618:20    - Unknown word (wmlsc)                -- {\".wmlsc\", \"application/vnd.wap\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:618:49    - Unknown word (wmlscriptc)           -- application/vnd.wap.wmlscriptc\"},\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:627:41    - Unknown word (mswrite)              -- wri\", \"application/x-mswrite\"},\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:62:20     - Unknown word (accdw)      -- {\".accdw\", \"application/msaccess\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:62:50     - Unknown word (webapplication) -- application/msaccess.webapplication\"},\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:633:37    - Unknown word (directx)              -- {\".x\", \"application/directx\"},\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:636:41    - Unknown word (silverlight)          -- xap\", \"application/x-silverlight-app\"},\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:637:20    - Unknown word (xbap)                 -- {\".xbap\", \"application/x-ms\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:638:35    - Unknown word (xbitmap)              -- {\".xbm\", \"image/x-xbitmap\"},\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:63:20     - Unknown word (accft)          -- {\".accft\", \"application/msaccess\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:63:50     - Unknown word (ftemplate)      -- application/msaccess.ftemplate\"},\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:650:20    - Unknown word (xlsb)                 -- {\".xlsb\", \"application/vnd.ms\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:652:74    - Unknown word (spreadsheetml)        -- openxmlformats-officedocument.spreadsheetml.sheet\"},\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:659:20    - Unknown word (xmta)                 -- {\".xmta\", \"application/xml\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:662:35    - Unknown word (xpixmap)              -- {\".xpm\", \"image/x-xpixmap\"},\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:663:46    - Unknown word (xpsdocument)          -- \"application/vnd.ms-xpsdocument\"},\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:672:20    - Unknown word (xspf)                 -- {\".xspf\", \"application/xspf\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:674:35    - Unknown word (xwindowdump)          -- {\".xwd\", \"image/x-xwindowdump\"},\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:67:20     - Unknown word (adobebridge)    -- {\".adobebridge\", \"application/x-bridge\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:690:33    - Unknown word (msdos)                -- {\"application/x-msdos-program\", \".exe\"},\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:69:37     - Unknown word (dlna)           -- {\".ADT\", \"audio/vnd.dlna.adts\"},\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:78:39     - Unknown word (annodex)        -- .anx\", \"application/annodex\"},\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:80:20     - Unknown word (apng)           -- {\".apng\", \"image/apng\"},\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:88:20     - Unknown word (ashx)           -- {\".ashx\", \"application/xml\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:91:20     - Unknown word (asmx)           -- {\".asmx\", \"application/xml\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/MimeTypes/MimeTypeMap.cs:99:35     - Unknown word (msvideo)        -- {\".avi\", \"video/x-msvideo\"},\n```\n\n----------------------------------------\n\nTITLE: String Comparison with Unknown Word - C\nDESCRIPTION: This snippet compares the `label` to `BOGOMIPS`. The word 'BOGOMIPS' is flagged as unknown words and used in statistics calculations.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_115\n\nLANGUAGE: C\nCODE:\n```\nelse if (sameas (\"BOGOMIPS\", label))\n```\n\n----------------------------------------\n\nTITLE: Variable Declaration with Unknown Word - C\nDESCRIPTION: These snippets declare integer variables. The words 'kgdnam', 'kgdcom', 'kgdadr', 'kgdpho', 'kgdage', 'kgdsex', 'kgdpss', 'kgdpass' are flagged as unknown words and used in the `gcs_remsys` module.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_102\n\nLANGUAGE: C\nCODE:\n```\nint kgdnam, kgdcom, kgdadr, kgdpho\n```\n\nLANGUAGE: C\nCODE:\n```\nint kgdnam, kgdcom, kgdadr, kgdpho, kgdage\n```\n\nLANGUAGE: C\nCODE:\n```\nkgdnam, kgdcom, kgdadr, kgdpho, kgdage, kgdsex\n```\n\nLANGUAGE: C\nCODE:\n```\nkgdnam, kgdcom, kgdadr, kgdpho, kgdage, kgdsex;\n```\n\nLANGUAGE: C\nCODE:\n```\nkgdcom, kgdadr, kgdpho, kgdage, kgdsex;\n```\n\nLANGUAGE: C\nCODE:\n```\nkgdadr, kgdpho, kgdage, kgdsex;\n```\n\nLANGUAGE: C\nCODE:\n```\nint kgdpss, kgdpass;\n```\n\nLANGUAGE: C\nCODE:\n```\nint kgdpss, kgdpass;\n```\n\n----------------------------------------\n\nTITLE: Array Declaration with Unknown Word - C\nDESCRIPTION: This snippet declares a character array 'dialogspec' of size 32768. The word 'dialogspec' is flagged as an unknown word, suggesting it might be a misspelled name for a dialog specification buffer.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_70\n\nLANGUAGE: C\nCODE:\n```\nchar dialogspec [32768];\n```\n\n----------------------------------------\n\nTITLE: Macro Definition with Unknown Word - C\nDESCRIPTION: This snippet defines a macro `A(x)`. The word 'stron' and 'stroff' are flagged as unknown words.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_111\n\nLANGUAGE: C\nCODE:\n```\ndefine A(x)        (a[x]?stron:stroff)\n```\n\n----------------------------------------\n\nTITLE: Importing TabIndex from @wireapp/react-ui-kit (TypeScript)\nDESCRIPTION: Imports the 'TabIndex' type from a subpath ('lib/types') of the '@wireapp/react-ui-kit' library, used in MentionSuggestionsItem and PastedFileControls.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TabIndex} from '@wireapp/react-ui-kit/lib/types\n```\n\n----------------------------------------\n\nTITLE: Identifying Unknown Words in NotificationData.cs\nDESCRIPTION: This entry identifies an unknown word, `compability`, found within the NotificationData.cs file. The comment suggests this is a typo of 'compatibility', suggesting the code deals with maintaining compatibility with older versions.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/aspnetboilerplate/aspnetboilerplate/snapshot.txt#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/Notifications/NotificationData.cs:43:94     - Unknown word (compability) -- required for backward compability. */\n```\n\nLANGUAGE: C#\nCODE:\n```\nsrc/Abp/Notifications/NotificationData.cs:56:13     - Unknown word (Createa)     -- /// Createa a new NotificationData\n```\n\n----------------------------------------\n\nTITLE: Miscellaneous Utility and Comment Snippets\nDESCRIPTION: These snippets include comments and placeholder text indicating code history, patch comments, or miscellaneous notes across various files, such as autoins.c, zip.c, and other modules. They are mainly for developer documentation and do not contain executable code.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/alexiosc/megistos/snapshot.txt#_snippet_35\n\nLANGUAGE: C\nCODE:\n```\n/* getclub: retrieves club information */\n// thisuseracc.lastclub[0] ? AIDEF : 0,\n// Special thanks to David Doherty and Olaf Barthel for their contributions\n\n```\n\n----------------------------------------\n\nTITLE: Support globs with gzip command\nDESCRIPTION: This bug fix adds support for using globs with the `gzip` command. This expands functionality, allowing files matching a specified pattern to be compressed.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-strong-weak-map/test-cspell-strong-weak-map/CHANGELOG.md#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nsupport globs with `gzip` command. ([#4625](https://github.com/streetsidesoftware/cspell/issues/4625)) ([17fbc11](https://github.com/streetsidesoftware/cspell/commit/17fbc119d199ceac309df0d22fb4b1f9734b7015))\n```\n\n----------------------------------------\n\nTITLE: Prefer suggested words\nDESCRIPTION: This feature makes all `flagWords` and `suggestWords` suggestions preferred. When spell checking, suggestions from these sources are prioritized.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/test-packages/cspell-strong-weak-map/test-cspell-strong-weak-map/CHANGELOG.md#_snippet_21\n\nLANGUAGE: text\nCODE:\n```\nAll `flagWords` and `suggestWords` suggestions are preferred. ([#4176](https://github.com/streetsidesoftware/cspell/issues/4176)) ([abfb09c](https://github.com/streetsidesoftware/cspell/commit/abfb09c1fefe0b17aae332a23bb79017496c416a))\n```\n\n----------------------------------------\n\nTITLE: Feature: Preferred suggestions are listed first\nDESCRIPTION: This feature introduces a change where preferred suggestions are prioritized and listed first within the spell checking results. This enhancement improves usability by presenting the most relevant suggestions at the top of the list. The change corresponds with issue [#3869](https://github.com/streetsidesoftware/cspell/issues/3869).\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-config-lib/CHANGELOG.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Generate All Forms Fix\nDESCRIPTION: This entry describes a bug fix to make sure all forms are generated. It ensures the spell checker provides all possible variations of a word, like different verb tenses or plural forms. This leads to more accurate and comprehensive spell checking.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-glob/CHANGELOG.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Removing vitest Dependency\nDESCRIPTION: This bug fix removes 'vitest' as a dependency from the project. This likely reduces the project's dependency footprint and potential conflicts. The input is project build configuration, the output is reduced dependencies. There are no explicit limitations mentioned here.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-pipe/CHANGELOG.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n* Remove `vitest` as a dependency ([#4031](https://github.com/streetsidesoftware/cspell/issues/4031)) ([2784b75](https://github.com/streetsidesoftware/cspell/commit/2784b75feefc81aa95806ac748fafb140c72b5fa))\n```\n\n----------------------------------------\n\nTITLE: No code snippets available\nDESCRIPTION: This documentation does not include any code snippets, only descriptive content about the library and tool.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/packages/cspell-trie/README.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Ideal Gas Law Explanation in Physics in Python\nDESCRIPTION: Provides the formulation and historical attribution of the ideal gas law, citing Benoît Paul Émile Clapeyron and Gay-Lussac, fundamental in thermodynamics.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/TheAlgorithms/Python/snapshot.txt#_snippet_76\n\nLANGUAGE: Python\nCODE:\n```\n5:45 - Unknown word (Benoît) -- was first stated by Benoît Paul Émile Clapeyron\n```\n\nLANGUAGE: Python\nCODE:\n```\n5:57 - Unknown word (Émile) -- stated by Benoît Paul Émile Clapeyron\n```\n\nLANGUAGE: Python\nCODE:\n```\n7:25 - Unknown word (Lussac's) -- Avogadro's law, and Gay-Lussac's law.[1] The ideal gas\n```\n\n----------------------------------------\n\nTITLE: Comment on Blockquote Escape Ability (TypeScript)\nDESCRIPTION: A comment discussing the handling of Shift+Enter within blockquotes and the potential loss of the ability (misspelled 'abilitiy') to escape them.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/wireapp/wire-webapp/snapshot.txt#_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nShift + Enter for the blockquotes, we no longer have an\n```\n\nLANGUAGE: typescript\nCODE:\n```\nwe no longer have an abilitiy to escape a blockquote\n```\n\n----------------------------------------\n\nTITLE: CSpell Spell Check Result Analysis\nDESCRIPTION: This snippet presents the output of a CSpell execution. It provides information on the spell-checking process, including the number of files that were scanned and the number of issues that were detected. Additionally, the snippet reports the exit code of the CSpell command, indicating the success or failure of the spell check. There are no dependencies beyond having CSpell installed. The inputs are the files specified in the arguments. The output is the summary of the spell check operation.\nSOURCE: https://github.com/streetsidesoftware/cspell/blob/main/integration-tests/snapshots/canada-ca/open-source-logiciel-libre/snapshot.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n CSpell: Files checked: 7, Issues found: 0 in 0 files.\n exit code: 0\n```"
  }
]