[
  {
    "owner": "bobbyiliev",
    "repo": "introduction-to-sql",
    "content": "TITLE: Describing Table Structure in SQL\nDESCRIPTION: Shows how to view the structure of a table using the DESCRIBE command, displaying column names, data types, and constraints.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/003-creating-tables.md#2025-04-23_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nDESCRIBE users;\n```\n\n----------------------------------------\n\nTITLE: Basic SELECT Queries\nDESCRIPTION: Examples of basic SELECT statements including selecting all columns and pattern matching\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/005-select.md#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM users;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM users WHERE username LIKE '%y';\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM users WHERE username LIKE '_e%';\n```\n\n----------------------------------------\n\nTITLE: Selecting Data from Table in SQL\nDESCRIPTION: Demonstrates how to retrieve the username column from a users table. This basic SELECT statement specifies the column to retrieve and the table to query.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/004-basic-syntax.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT username FROM users;\n```\n\n----------------------------------------\n\nTITLE: Aggregate Functions\nDESCRIPTION: Examples of using aggregate functions like COUNT, MIN, MAX, AVG, and SUM\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/005-select.md#2025-04-23_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*) FROM users;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT MIN(id) FROM users;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT MAX(id) FROM users;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT AVG(id) FROM users;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT SUM(id) FROM users;\n```\n\n----------------------------------------\n\nTITLE: Performing a CROSS JOIN in SQL\nDESCRIPTION: This snippet demonstrates a CROSS JOIN between the 'users' and 'posts' tables. It combines every row from the 'users' table with every row from the 'posts' table, resulting in a Cartesian product.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/011-join.md#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM users CROSS JOIN posts;\n```\n\n----------------------------------------\n\nTITLE: Selecting Data from a Table in SQL\nDESCRIPTION: Demonstrates how to use the SELECT statement to retrieve data from a table. This example selects the username column from the users table.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/de/content/004-basic-syntax.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT username FROM users;\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Primary Key\nDESCRIPTION: SQL command to create a table with an auto-incrementing primary key, ensuring each record has a unique identifier.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/003-creating-tables.md#2025-04-23_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE users\n(\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    username VARCHAR(255) NOT NULL,\n    about TEXT,\n    birthday DATE,\n    active BOOL\n);\n```\n\n----------------------------------------\n\nTITLE: Executing an INNER JOIN in SQL\nDESCRIPTION: This snippet shows how to perform an INNER JOIN between the 'users' and 'posts' tables. It matches users with their associated posts based on the condition 'users.id = posts.user_id'.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/011-join.md#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM users\nINNER JOIN posts\nON users.id = posts.user_id;\n```\n\n----------------------------------------\n\nTITLE: Selecting Data Using Subquery in SQL\nDESCRIPTION: This SQL query selects all columns from the CUSTOMERS table where the ID is in the result of a subquery. The subquery returns IDs of customers with a salary greater than 4500.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/013-sub-queries.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM CUSTOMERS\nWHERE ID IN (\n    SELECT ID\n    FROM CUSTOMERS\n    WHERE SALARY > 4500\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Database and Table Structure\nDESCRIPTION: Initial setup creating a database, switching to it, and creating a users table with various columns\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/005-select.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE sql_demo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nUSE sql_demo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE users\n(\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    username VARCHAR(255) NOT NULL,\n    about TEXT,\n    email VARCHAR(255),\n    birthday DATE,\n    active BOOL\n);\n```\n\n----------------------------------------\n\nTITLE: Using AND Operator with WHERE Clause\nDESCRIPTION: SQL query demonstrating how to combine multiple conditions using the AND operator to filter data more specifically.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/006-where.md#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM users WHERE username='bobby' AND active=true;\n```\n\n----------------------------------------\n\nTITLE: Combining Results with SQL UNION Clause\nDESCRIPTION: This SQL query combines results from two SELECT statements using the UNION clause. It joins the customers and orders tables using LEFT JOIN and RIGHT JOIN, then combines the results without duplicates.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/014-unions.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, name, amount, date\n   FROM customer\n   LEFT JOIN orders\n   ON customers.id = orders.customer_id\nUNION\n   SELECT id, name, amount, date\n   FROM customer\n   RIGHT JOIN orders\n   ON customers.id = orders.customer_id\n```\n\n----------------------------------------\n\nTITLE: Basic SQL WHERE Clause Syntax\nDESCRIPTION: The basic syntax for using a WHERE clause in SQL to filter data from a table based on specific conditions.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/006-where.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT column_name FROM table_name WHERE column=some_value;\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Records with a Single SQL Statement\nDESCRIPTION: Demonstrates how to insert multiple user records with a single INSERT statement by specifying multiple value sets. This is more efficient than executing multiple separate INSERT statements.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/008-insert.md#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO users\n  (username, email, active)\nVALUES\n  ('user1', 'user1@devdojo.com', true),\n  ('user2', 'user2@devdojo.com', true),\n  ('user3', 'user3@devdojo.com', true),\n  ('user4', 'user4@devdojo.com', true),\n  ('user5', 'user5@devdojo.com', true);\n```\n\n----------------------------------------\n\nTITLE: Inserting Sample Data into Users and Posts Tables in SQL\nDESCRIPTION: This snippet shows how to insert sample data into the 'users' and 'posts' tables. It creates four users and five posts, establishing relationships between users and their posts.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/011-join.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO users\n  ( username )\nVALUES\n  ('bobby'),\n  ('devdojo'),\n  ('tony'),\n  ('greisi');\n\nINSERT INTO posts\n  ( user_id, title )\nVALUES\n  ('1', 'Hello World!'),\n  ('2', 'Getting started with SQL'),\n  ('3', 'SQL is awesome'),\n  ('2', 'MySQL is up!'),\n  ('1', 'SQL - structured query language');\n```\n\n----------------------------------------\n\nTITLE: Implementing String Functions in MySQL\nDESCRIPTION: Examples of MySQL string functions including LENGTH, UPPER, LOWER, LTRIM, RTRIM, TRIM, LEFT, RIGHT, SUBSTRING, LOCATE, REPLACE, and CONCAT. These functions manipulate and analyze string data in various ways.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/018-essential-mysql-functions.md#2025-04-23_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT LENGTH('sky')\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT UPPER('sky')\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT LOWER('sky)\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT LTRIM('    sky')\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT RTRIM('sky    ')\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT TRIM('   sky  ')\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT LEFT('Kindergarten', 4)\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT RIGHT('Kindergarten', 6)\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT SUBSTRING('Kindergarten', 3, 5)\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT LOCATE('n','Kindergarten') -- LOCATE returns the first occurrence of a character or character string, if found, otherwise it returns 0\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT REPLACE('Kindergarten', 'garten', 'garden')\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT CONCAT('first', 'last')\n```\n\n----------------------------------------\n\nTITLE: Creating Database and Tables for JOIN Examples in SQL\nDESCRIPTION: This snippet demonstrates how to create a new database called 'demo_joins' and two tables: 'users' and 'posts'. The 'users' table has 'id' and 'username' columns, while the 'posts' table has 'id', 'user_id', and 'title' columns.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/011-join.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE demo_joins;\n\nUSE demo_joins;\n\nCREATE TABLE users\n(\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    username VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE posts\n(\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    user_id INT,\n    title VARCHAR(255) NOT NULL\n);\n```\n\n----------------------------------------\n\nTITLE: Sorting Results with ORDER BY in SQL\nDESCRIPTION: A SELECT query that retrieves user data and sorts it alphabetically by username in ascending order using the ORDER BY clause.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/007-order-and-group-by.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, username FROM users ORDER BY username;\n```\n\n----------------------------------------\n\nTITLE: SQL COUNT Function with GROUP BY Example\nDESCRIPTION: Counts the total number of items purchased by each customer and groups the results by customer name.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/017-having-clause_aggregate-functions.md#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(item) AS Total_Items, customer_name\nFROM purchase\nGROUP BY customer_name;\n```\n\n----------------------------------------\n\nTITLE: Performing a LEFT JOIN in SQL\nDESCRIPTION: This snippet demonstrates a LEFT JOIN between the 'users' and 'posts' tables. It retrieves all users, including those without associated posts, and displays NULL for missing post data.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/011-join.md#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM users\nLEFT JOIN posts\nON users.id = posts.user_id;\n```\n\n----------------------------------------\n\nTITLE: Using LIKE Operator for Pattern Matching\nDESCRIPTION: SQL query demonstrating how to use the LIKE operator with wildcard patterns to find usernames containing a specific character.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/006-where.md#2025-04-23_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM users WHERE username LIKE '%y%';\n```\n\n----------------------------------------\n\nTITLE: SQL HAVING Clause Basic Syntax\nDESCRIPTION: The basic syntax for using the HAVING clause in SQL queries. The HAVING clause filters group results based on specified conditions and must follow the GROUP BY clause.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/017-having-clause_aggregate-functions.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT column_name(s)\nFROM table_name\nWHERE condition\nGROUP BY column_name(s)\nHAVING condition\nORDER BY column_name(s);\n```\n\n----------------------------------------\n\nTITLE: SQL AVG Function with GROUP BY Example\nDESCRIPTION: Calculates the average price of purchases for each customer and groups the results by customer name.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/017-having-clause_aggregate-functions.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT AVG(price) AS Avg_Purchase, customer_name\nFROM purchase\nGROUP BY customer_name;\n```\n\n----------------------------------------\n\nTITLE: Selecting Data with Database Specification\nDESCRIPTION: SQL query demonstrating how to select data from a table by explicitly specifying the database name.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/003-creating-tables.md#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT username FROM demo_db.users;\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Columns in SQL\nDESCRIPTION: Shows how to retrieve only the username and email columns from the users table. This SELECT statement specifies exactly which columns to include in the result set.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/004-basic-syntax.md#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT username, email FROM users;\n```\n\n----------------------------------------\n\nTITLE: Updating a Single Column in SQL\nDESCRIPTION: This snippet demonstrates how to update a single column for a specific record in a SQL database. It uses the UPDATE statement with a WHERE clause to target a specific user by ID.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/009-update.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE users SET username='bobbyiliev' WHERE id=1;\n```\n\n----------------------------------------\n\nTITLE: SQL SUM Function with GROUP BY Example\nDESCRIPTION: Calculates the total sum of prices for each customer's purchases and groups the results by customer name.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/017-having-clause_aggregate-functions.md#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT SUM(price) AS Total_Bill, customer_name\nFROM purchase\nGROUP BY customer_name;\n```\n\n----------------------------------------\n\nTITLE: Inserting Data from Another Table Using SQL INSERT with SELECT\nDESCRIPTION: Shows how to insert records into the users table by selecting data from the prospect_users table with a condition. This technique allows for efficient batch insertions from existing data.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/008-insert.md#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO users (username, email, active)\nSELECT username, email, active\nFROM prospect_users\nWHERE active=true;\n```\n\n----------------------------------------\n\nTITLE: Selecting All Columns from a Table in SQL\nDESCRIPTION: Illustrates how to use the SELECT statement with a wildcard (*) to retrieve all columns from a table. This example selects all data from the users table.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/de/content/004-basic-syntax.md#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM users;\n```\n\n----------------------------------------\n\nTITLE: LEFT JOIN with WHERE Condition\nDESCRIPTION: Demonstrates filtering in WHERE clause to find posts containing 'SQL' along with user data.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/011-join.md#2025-04-23_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT users.*, posts.*\nFROM users\nLEFT JOIN posts\nON posts.user_id = users.id\nWHERE posts.title LIKE '%SQL%';\n```\n\n----------------------------------------\n\nTITLE: Basic RIGHT JOIN Query\nDESCRIPTION: Demonstrates a basic RIGHT JOIN between users and posts tables, showing all posts including those without matching users.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/011-join.md#2025-04-23_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM users\nRIGHT JOIN posts\nON users.id = posts.user_id;\n```\n\n----------------------------------------\n\nTITLE: Deleting Data Using Subquery in SQL\nDESCRIPTION: This SQL query deletes records from the CUSTOMERS table where the AGE is present in the result of a subquery. The subquery selects ages greater than or equal to 27 from a backup table.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/013-sub-queries.md#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM CUSTOMERS\nWHERE AGE IN (\n    SELECT AGE\n    FROM CUSTOMERS_BKP\n    WHERE AGE >= 27\n);\n```\n\n----------------------------------------\n\nTITLE: Selecting Unique Usernames with DISTINCT\nDESCRIPTION: SQL query using the DISTINCT keyword to select only unique username values from the users table, eliminating duplicates from the result set.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/005-select.md#2025-04-23_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT DISTINCT username FROM users;\n```\n\n----------------------------------------\n\nTITLE: Using IS Operator for NULL Values\nDESCRIPTION: SQL query demonstrating how to check for NULL values using the IS operator, as the equals operator doesn't work for NULL checks.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/006-where.md#2025-04-23_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM users WHERE about IS NULL;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Numeric Functions in MySQL\nDESCRIPTION: Examples of MySQL numeric functions including ROUND, TRUNCATE, CEILING, FLOOR, ABS, and RAND. These functions perform operations like rounding, truncation, and absolute value calculation on numeric data.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/018-essential-mysql-functions.md#2025-04-23_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT ROUND(5.73)\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT ROUND(5.73, 1)\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT TRUNCATE(5.7582, 2)\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT CEILING(5.2)\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT FLOOR(5.7)\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT ABS(-5.2)\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT RAND() -- Generates a random floating point number b/w 0 & 1\n```\n\n----------------------------------------\n\nTITLE: SQL HAVING with AVG and ORDER BY Example\nDESCRIPTION: Calculates average purchase price for each customer, filters to show only averages greater than 550, and orders results by customer name in descending order.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/017-having-clause_aggregate-functions.md#2025-04-23_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT customer_name, AVG(price) AS Average_Purchase\nFROM purchase\nGROUP BY customer_name\nHAVING AVG(price) > 550\nORDER BY customer_name DESC;\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Column Index with Primary Field Order\nDESCRIPTION: SQL command to create a composite index optimized for queries involving both birthday and active status columns.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/003-creating-tables.md#2025-04-23_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX users_multi_idx ON users(birthday, active);\n```\n\n----------------------------------------\n\nTITLE: Basic SQL INSERT Statement Syntax\nDESCRIPTION: Demonstrates the fundamental syntax for inserting data into a database table using SQL. Shows the structure with column names and corresponding values.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/008-insert.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO table_name\n  (column_name_1,column_name_2,column_name_n)\nVALUES\n  ('value_1', 'value_2', 'value_3');\n```\n\n----------------------------------------\n\nTITLE: Calculating Dates and Times in MySQL\nDESCRIPTION: Examples of MySQL date and time calculation functions including DATE_ADD, DATE_SUB, DATEDIFF, and TIME_TO_SEC. These functions perform operations like adding intervals to dates, finding differences between dates, and converting time to seconds.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/018-essential-mysql-functions.md#2025-04-23_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT DATE_ADD(NOW(), INTERVAL 1 DAY) --return tomorrows date and time\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT DATE_ADD(NOW(), INTERVAL -1 YEAR)\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT DATE_SUB(NOW(), INTERVAL 1 YEAR)\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT DATEDIFF('2021-09-08 09:00', '2021-07-07 17:00') -- It will return the difference in number of days, time won't be considered\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT TIME_TO_SEC('09:00') - TIME_TO_SEC('09:02')\n```\n\n----------------------------------------\n\nTITLE: Deleting Specific Rows in SQL\nDESCRIPTION: This snippet demonstrates how to delete a specific row from the 'users' table where the id equals 5. It includes the expected output showing one affected row.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/010-delete.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM users WHERE id=5;\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with NOT NULL Constraint\nDESCRIPTION: SQL command to create a table with a NOT NULL constraint on the username column, making it a required field.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/003-creating-tables.md#2025-04-23_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE users\n(\n    id INT,\n    username VARCHAR(255) NOT NULL,\n    about TEXT,\n    birthday DATE,\n    active BOOL\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic SQL Table\nDESCRIPTION: SQL command to create a 'users' table with various column types including integer, varchar, text, date, and boolean fields.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/003-creating-tables.md#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE users\n(\n    id INT,\n    username VARCHAR(255),\n    about TEXT,\n    birthday DATE,\n    active BOOL\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Data Using Subquery in SQL\nDESCRIPTION: This SQL query updates the SALARY in the CUSTOMERS table by multiplying it by 0.25 for customers whose AGE is present in the result of a subquery. The subquery selects ages greater than or equal to 27 from a backup table.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/013-sub-queries.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE CUSTOMERS\nSET SALARY = SALARY * 0.25\nWHERE AGE IN (\n    SELECT AGE\n    FROM CUSTOMERS_BKP\n    WHERE AGE >= 27\n);\n```\n\n----------------------------------------\n\nTITLE: Dropping Column with ALTER TABLE in SQL\nDESCRIPTION: Shows the syntax for removing a column from a table using the ALTER TABLE DROP COLUMN command. This operation permanently deletes the column and its data.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/003-creating-tables.md#2025-04-23_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE table_name DROP COLUMN column_name;\n```\n\n----------------------------------------\n\nTITLE: Showing Triggers in SQL Database\nDESCRIPTION: This SQL command displays all triggers present in a specified database. It's useful for reviewing existing triggers in a database.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/019-triggers-in-sql.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nshow triggers in database_name;\n```\n\n----------------------------------------\n\nTITLE: Creating Table using DDL CREATE Command\nDESCRIPTION: Example of creating a new table named 'Persons' with columns for PersonID, names, address, and city using the CREATE TABLE command.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/012-sql-commnad-categories.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE Persons (\n    PersonID int,\n    LastName varchar(255),\n    FirstName varchar(255),\n    Address varchar(255),\n    City varchar(255)\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Results with SQL UNION ALL Clause\nDESCRIPTION: This SQL query combines results from two SELECT statements using the UNION ALL clause. It joins the customers and orders tables using LEFT JOIN and RIGHT JOIN, then combines the results including duplicates.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/014-unions.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, name, amount, date\n   FROM customers\n   LEFT JOIN orders\n   ON customers.id = order.customer_id\nUNION ALL\n   SELECT id, name, amount, date\n   FROM customers\n   RIGHT JOIN orders\n   ON customers.id = orders.customer_id;\n```\n\n----------------------------------------\n\nTITLE: Using BETWEEN Operator for Range Queries\nDESCRIPTION: SQL query demonstrating how to use the BETWEEN operator to select values within a specified inclusive range.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/006-where.md#2025-04-23_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM users WHERE id BETWEEN 3 AND 6;\n```\n\n----------------------------------------\n\nTITLE: Equivalent RIGHT JOIN Query\nDESCRIPTION: Demonstrates the same query rewritten using RIGHT JOIN by swapping the table order.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/011-join.md#2025-04-23_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSELECT users.*, posts.*\nFROM users\nRIGHT JOIN posts \nON posts.user_id = users.id;\n```\n\n----------------------------------------\n\nTITLE: Deleting All Rows in SQL\nDESCRIPTION: This example shows the dangerous operation of deleting all rows from a table by omitting the WHERE clause. The output indicates the number of affected rows.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/010-delete.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM users;\n```\n\n----------------------------------------\n\nTITLE: Updating Records Using Another Table in SQL\nDESCRIPTION: This snippet shows how to update records in one table using data from another table. It updates the 'about' field in the 'users' table using the corresponding 'about' field from the 'prospect_users' table, matching records by username.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/009-update.md#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nupdate users, prospect_users\nset users.about = prospect_users.about\nwhere prospect_users.username = users.username;\n```\n\n----------------------------------------\n\nTITLE: Creating a Single-Column Index\nDESCRIPTION: SQL command to create an index on the birthday column to optimize queries filtering or sorting by this field.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/003-creating-tables.md#2025-04-23_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX birthday_idx ON users(birthday);\n```\n\n----------------------------------------\n\nTITLE: SELECT Formatting and Column Selection\nDESCRIPTION: Different ways to format SELECT output and select specific columns\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/005-select.md#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM users \\G\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT username,active FROM users;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 'Sunil' as username;\n```\n\n----------------------------------------\n\nTITLE: Updating Data using DML UPDATE Command\nDESCRIPTION: Example of updating existing records in the Customers table based on a WHERE condition.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/012-sql-commnad-categories.md#2025-04-23_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE Customers\nSET ContactName='Alfred Schmidt', City='Frankfurt'\nWHERE CustomerID = 1;\n```\n\n----------------------------------------\n\nTITLE: Deleting Records Based on Another Table in SQL\nDESCRIPTION: This advanced example demonstrates how to delete records from one table based on conditions in another table. It deletes users whose corresponding prospect users have been disabled (not active).\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/010-delete.md#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ndelete users\nfrom users, prospect_users\nwhere users.username = prospect_users.username\nand NOT prospect_users.active\n```\n\n----------------------------------------\n\nTITLE: SQL HAVING Clause with COUNT Example\nDESCRIPTION: Uses the HAVING clause to filter class groups with more than 2 students after counting students in each class.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/017-having-clause_aggregate-functions.md#2025-04-23_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(class) AS strength, class\nFROM Students\nGROUP BY class\nHAVING COUNT(class) > 2;\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into a Table in SQL\nDESCRIPTION: Shows how to use the INSERT statement to add new data to a table. This example inserts a new user into the users table with a username, email, and active status.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/de/content/004-basic-syntax.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO users (username, email, active)\nVALUES ('bobby', 'bobby@bobbyiliev.com', true);\n```\n\n----------------------------------------\n\nTITLE: SQL MAX Function with GROUP BY Example\nDESCRIPTION: Finds the highest price of purchase for each customer and groups the results by customer name.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/017-having-clause_aggregate-functions.md#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT MAX(price) AS Highest_Purchase, customer_name\nFROM purchase\nGROUP BY customer_name;\n```\n\n----------------------------------------\n\nTITLE: Renaming Column using ALTER Command\nDESCRIPTION: Example of renaming a column in an existing table using the ALTER TABLE RENAME COLUMN command.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/012-sql-commnad-categories.md#2025-04-23_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE Persons\nRENAME COLUMN Age TO Year;\n```\n\n----------------------------------------\n\nTITLE: Inserting a Single User Record into a Table\nDESCRIPTION: Example of inserting a single user record into the 'users' table with username, email, and active status. Demonstrates practical application of the INSERT statement.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/008-insert.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO users\n  (username, email, active)\nVALUES\n  ('greisi', 'g@devdojo.com', true);\n```\n\n----------------------------------------\n\nTITLE: LEFT JOIN Example\nDESCRIPTION: Shows a LEFT JOIN query that can be converted to an equivalent RIGHT JOIN.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/011-join.md#2025-04-23_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT users.*, posts.*\nFROM posts\nLEFT JOIN users \nON posts.user_id = users.id;\n```\n\n----------------------------------------\n\nTITLE: Formatting Dates and Times in MySQL\nDESCRIPTION: Examples of MySQL date and time formatting functions using DATE_FORMAT and TIME_FORMAT. These functions allow customization of date and time output formats using various format specifiers.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/018-essential-mysql-functions.md#2025-04-23_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT DATE_FORMAT(NOW(), '%M %D %Y')\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT DATE_FORMAT(NOW(), '%m %d %y')\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT DATE_FORMAT(NOW(), '%m %D %y')\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT TIME_FORMAT(NOW(), '%H %i %p')\n```\n\n----------------------------------------\n\nTITLE: Selecting All Usernames Including Duplicates\nDESCRIPTION: Basic SQL query to select all username entries from the users table, showing duplicate values in the result set.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/005-select.md#2025-04-23_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT username FROM users;\n```\n\n----------------------------------------\n\nTITLE: Creating a Trigger in SQL\nDESCRIPTION: This snippet shows the general syntax for creating a trigger in SQL. It specifies when the trigger fires (before or after an event), the type of event (insert, update, delete), the associated table, and whether it's a row-level or column-level trigger.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/019-triggers-in-sql.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate trigger [trigger_name] \n[before | after]  \n{insert | update | delete}  \non [table_name]  \n[for each row | for each column]  \n[trigger_body] \n```\n\n----------------------------------------\n\nTITLE: LEFT JOIN with JOIN Condition\nDESCRIPTION: Shows how moving the filtering condition to the JOIN clause affects the result set.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/011-join.md#2025-04-23_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT users.*, posts.*\nFROM users\nLEFT JOIN posts \nON posts.user_id = users.id\n   AND posts.title LIKE '%SQL%';\n```\n\n----------------------------------------\n\nTITLE: Filtering Active Users with WHERE Clause\nDESCRIPTION: SQL query to retrieve distinct usernames, emails, and active status from a users table where the active column is true.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/006-where.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT DISTINCT username, email, activem FROM users WHERE active=true;\n```\n\n----------------------------------------\n\nTITLE: SQL MIN Function with GROUP BY Example\nDESCRIPTION: Finds the lowest price of purchase for each customer and groups the results by customer name.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/017-having-clause_aggregate-functions.md#2025-04-23_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT MIN(price) AS Lowest_Purchase, customer_name\nFROM purchase\nGROUP BY customer_name;\n```\n\n----------------------------------------\n\nTITLE: RIGHT JOIN with WHERE Clause\nDESCRIPTION: Shows how to filter RIGHT JOIN results using a WHERE clause to show only posts by a specific user.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/011-join.md#2025-04-23_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM users \nRIGHT JOIN posts\nON users.id = posts.user_id\nWHERE username = 'bobby';\n```\n\n----------------------------------------\n\nTITLE: Truncating Table in SQL\nDESCRIPTION: Demonstrates how to delete all data from a table while keeping the table structure intact using the TRUNCATE TABLE command.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/003-creating-tables.md#2025-04-23_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nTRUNCATE TABLE table_name;\n```\n\n----------------------------------------\n\nTITLE: SQL SELECT Query to Verify Inserted Data\nDESCRIPTION: SELECT query run by an administrator to confirm that the data inserted by the user with limited privileges was successfully added to the purchase table.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/021-DCL-commands.md#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM purchase;\n```\n\n----------------------------------------\n\nTITLE: Inserting Sample Data\nDESCRIPTION: Inserting multiple user records into the users table with basic information\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/005-select.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO users\n  ( username, email, active )\nVALUES\n  ('bobby', 'b@devdojo.com', true),\n  ('devdojo', 'd@devdojo.com', false),\n  ('tony', 't@devdojo.com', true);\n```\n\n----------------------------------------\n\nTITLE: SQL HAVING Clause with MIN Function Example\nDESCRIPTION: Filters customer groups to only show those whose minimum purchase price is greater than 10.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/017-having-clause_aggregate-functions.md#2025-04-23_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT customer_name, MIN(price) AS MIN_PURCHASE\nFROM purchase\nGROUP BY customer_name\nHAVING MIN(price) > 10;\n```\n\n----------------------------------------\n\nTITLE: Arithmetic Operations and LIMIT Clause\nDESCRIPTION: Examples of using arithmetic operations in SELECT and limiting result sets\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/005-select.md#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT username, active*5 as new_active FROM users;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM users LIMIT 1;\n```\n\n----------------------------------------\n\nTITLE: Using Date and Time Functions in MySQL\nDESCRIPTION: Examples of MySQL date and time functions including NOW, CURDATE, CURTIME, MONTH, YEAR, HOUR, and DAYTIME. These functions retrieve various components of the current date and time or extract specific parts from a given date.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/018-essential-mysql-functions.md#2025-04-23_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT NOW()\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT CURDATE()\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT CURTIME()\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT MONTH(NOW())\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT YEAR(NOW())\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT HOUR(NOW())\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT DAYTIME(NOW())\n```\n\n----------------------------------------\n\nTITLE: Creating a Trigger for Book Insertion Logging\nDESCRIPTION: This SQL command creates a trigger named 'addstatement' that fires after a new book is inserted into the 'books' table. It logs the insertion by adding a record to the 'bookrecord' table with details of the new book.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/019-triggers-in-sql.md#2025-04-23_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ncreate trigger library.addstatement\nafter insert \non library.books\nfor each row\ninsert into library.bookrecord(bookid,statement) values (NEW.book_id,concat('New book named ',NEW.book_name,\"  added at \",curdate()));\n```\n\n----------------------------------------\n\nTITLE: Deleting Data using DML DELETE Command\nDESCRIPTION: Example of removing specific records from the Customers table based on a WHERE condition.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/012-sql-commnad-categories.md#2025-04-23_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM Customers WHERE CustomerName='Alfreds Futterkiste';\n```\n\n----------------------------------------\n\nTITLE: Securing MySQL Installation\nDESCRIPTION: Command to run the MySQL secure installation script which helps set up a secure password and other security settings.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/002-install-mysql.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo mysql_secure_installation\n```\n\n----------------------------------------\n\nTITLE: Aggregating Requests by Route in SQL\nDESCRIPTION: This SQL query performs further aggregation on the materialized view, grouping requests by URL and summing the count for each. It orders the results by the total count in descending order.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/101-learn-materialize.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT url, SUM(count) as total FROM aggregated_logs GROUP BY 1 ORDER BY 2 DESC;\n```\n\n----------------------------------------\n\nTITLE: Filtering Grouped Results with HAVING in SQL\nDESCRIPTION: A SELECT query that groups users by username, counts occurrences, and then filters the groups to show only usernames that appear more than once using the HAVING clause.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/007-order-and-group-by.md#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(username), username\nFROM users\nGROUP BY username\nHAVING COUNT(username) > 1;\n```\n\n----------------------------------------\n\nTITLE: SQL HAVING with SUM and WHERE LIKE Example\nDESCRIPTION: Combines WHERE clause with LIKE pattern matching for customer names starting with 'S', groups by customer name, and filters for total purchases greater than 1000.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/017-having-clause_aggregate-functions.md#2025-04-23_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT customer_name, SUM(price) AS Total_Purchase\nFROM purchase\nWHERE customer_name\nLIKE \"S%\"\nGROUP BY customer_name\nHAVING SUM(price) > 1000;\n```\n\n----------------------------------------\n\nTITLE: Renaming a SQL Table\nDESCRIPTION: SQL command to rename a table from 'user2' to 'user3' using the ALTER TABLE statement.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/003-creating-tables.md#2025-04-23_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE user2 RENAME TO user3 \n```\n\n----------------------------------------\n\nTITLE: Grouping and Counting with GROUP BY in SQL\nDESCRIPTION: A SELECT query that counts the occurrences of each username in the users table by grouping identical usernames with GROUP BY and applying the COUNT function.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/007-order-and-group-by.md#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(username), username FROM users GROUP BY username;\n```\n\n----------------------------------------\n\nTITLE: Using OR Operator with WHERE Clause\nDESCRIPTION: SQL query demonstrating how to use the OR operator to retrieve records that match either of two specified conditions.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/006-where.md#2025-04-23_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM users WHERE username='bobby' OR active=false;\n```\n\n----------------------------------------\n\nTITLE: Selecting Data using DQL SELECT Command\nDESCRIPTION: Example of retrieving all data from a table using the SELECT statement.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/012-sql-commnad-categories.md#2025-04-23_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM table_name;\n```\n\n----------------------------------------\n\nTITLE: Creating and Executing Stored Procedures\nDESCRIPTION: Examples of creating and executing stored procedures in SQL.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/012-sql-commnad-categories.md#2025-04-23_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nCREATE PROCEDURE procedure_name\nAS sql_statement\nGO;\n\nEXEC procedure_name;\n```\n\n----------------------------------------\n\nTITLE: Dropping a Trigger in SQL\nDESCRIPTION: This SQL command removes a specified trigger from the database. It's used when a trigger is no longer needed or needs to be replaced.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/019-triggers-in-sql.md#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ndrop trigger trigger_name;\n```\n\n----------------------------------------\n\nTITLE: Dropping Table using DDL DROP Command\nDESCRIPTION: Example of removing a table from the database using the DROP TABLE command.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/012-sql-commnad-categories.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nDROP TABLE table_name;\n```\n\n----------------------------------------\n\nTITLE: Table Locking using DML LOCK Command\nDESCRIPTION: Example of controlling table access concurrency using LOCK and UNLOCK commands.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/012-sql-commnad-categories.md#2025-04-23_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nLOCK TABLES table_name [READ | WRITE]\n--------------------------------------\nUNLOCK TABLES;\n```\n\n----------------------------------------\n\nTITLE: Inserting a New Book into Library Database\nDESCRIPTION: This SQL command inserts a new book titled 'Harry Potter and the Goblet of fire' into the 'books' table. It demonstrates how the trigger created earlier would be activated.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/019-triggers-in-sql.md#2025-04-23_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\ninsert into library.books(book_name) values (\"Harry Potter and the Goblet of fire\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Table from Existing Table\nDESCRIPTION: SQL command to create a new table ('users2') by copying the structure and data from an existing table ('users').\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/003-creating-tables.md#2025-04-23_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE users2 AS\n(\n    SELECT * FROM users\n);\n\n```\n\n----------------------------------------\n\nTITLE: Updating a Specific Record in SQL\nDESCRIPTION: This example demonstrates updating a specific record by using a WHERE clause with the UPDATE statement. It changes the 'about' column for a user with a specific ID.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/009-update.md#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE users SET about='Hello World :)' WHERE id=2;\n```\n\n----------------------------------------\n\nTITLE: SQL SELECT Query for Viewing Purchase Table Data\nDESCRIPTION: Basic SQL SELECT query to retrieve all columns and rows from the purchase table, showing item information with prices and customer names.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/021-DCL-commands.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM purchase;\n```\n\n----------------------------------------\n\nTITLE: SQL GRANT Command for Giving Insert Privileges\nDESCRIPTION: DCL command that grants INSERT privileges on the purchase table to the user 'Sanskriti' connecting from localhost. This allows the user to add new records to the table.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/021-DCL-commands.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nGRANT INSERT ON purchase TO 'Sanskriti'@'localhost';\n```\n\n----------------------------------------\n\nTITLE: Rolling Back to Savepoint\nDESCRIPTION: Command to rollback changes to a specific savepoint.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/020-TCL-commands.md#2025-04-23_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nROLLBACK to sv_update;\n```\n\n----------------------------------------\n\nTITLE: SQL SELECT Query When User Has Insufficient Privileges\nDESCRIPTION: This SELECT query demonstrates what happens when a user without SELECT privileges attempts to view table data. The query fails with an access denied error.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/021-DCL-commands.md#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM purchase;\n```\n\n----------------------------------------\n\nTITLE: Inserting Duplicate User Data in SQL\nDESCRIPTION: SQL insert statement that adds duplicate user records to demonstrate the need for DISTINCT operations.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/005-select.md#2025-04-23_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO users\n  ( username, email, active )\nVALUES\n  ('bobby', 'b@devdojo.com', true),\n  ('devdojo', 'd@devdojo.com', false),\n  ('tony', 't@devdojo.com', true);\n```\n\n----------------------------------------\n\nTITLE: Querying Aggregated Logs from Materialized View in SQL\nDESCRIPTION: This SQL query selects all columns from the aggregated_logs materialized view, which contains summarized statistics of nginx log data including IP address, request type, URL, status code, and count.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/101-learn-materialize.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM aggregated_logs;\n\n   ipaddress    | request |           url            | statuscode | count\n----------------+---------+--------------------------+------------+-------\n 127.0.0.1      | GET     | /materialize             |        404 |   200\n```\n\n----------------------------------------\n\nTITLE: Creating SAVEPOINT in SQL\nDESCRIPTION: Syntax for creating a savepoint to temporarily save transaction state.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/020-TCL-commands.md#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSAVEPOINT savepoint-name;\n```\n\n----------------------------------------\n\nTITLE: SQL INSERT Statement with Granted Privileges\nDESCRIPTION: INSERT statement that adds a new record to the purchase table, which succeeds because the user has been granted INSERT privileges on this table.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/021-DCL-commands.md#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO purchase values(\"Laptop\", 100000, \"Sanskriti\");\n```\n\n----------------------------------------\n\nTITLE: Basic COMMIT Command in SQL\nDESCRIPTION: Basic syntax for the COMMIT command which makes database transactions permanent.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/020-TCL-commands.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCOMMIT;\n```\n\n----------------------------------------\n\nTITLE: Using IN Operator for Multiple Values\nDESCRIPTION: SQL query showing how to use the IN operator to match against a list of values, simplifying multiple OR conditions.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/006-where.md#2025-04-23_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM users WHERE username IN ('bobby', 'devdojo');\n```\n\n----------------------------------------\n\nTITLE: Updating Price in Purchase Table\nDESCRIPTION: Example of updating a price value in the purchase table.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/020-TCL-commands.md#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE purchase SET price = 20 WHERE item = \"Pen\";\n```\n\n----------------------------------------\n\nTITLE: Exporting a Single MySQL Database with mysqldump\nDESCRIPTION: This command exports a single MySQL database to an SQL file. It uses mysqldump with username and password prompts, and includes the current date in the filename.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/100-mysqldump.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmysqldump -u your_username -p your_database_name > your_database_name-$(date +%F).sql\n```\n\n----------------------------------------\n\nTITLE: Filtering by Username with WHERE Clause\nDESCRIPTION: SQL query to retrieve user information filtered by a specific username using the WHERE clause.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/006-where.md#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT username, email, active FROM users WHERE username='bobby';\n```\n\n----------------------------------------\n\nTITLE: Updating Data in a Table in SQL\nDESCRIPTION: Shows how to use the UPDATE statement to modify existing data in a table. This example updates the username of a user with a specific ID in the users table.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/de/content/004-basic-syntax.md#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE users SET username='bobbyiliev' WHERE id=1;\n```\n\n----------------------------------------\n\nTITLE: Multiple Single-Record INSERT Statements\nDESCRIPTION: Shows multiple separate INSERT statements for adding five different user records. This approach is less efficient than using a single statement with multiple value sets.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/008-insert.md#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO users (username, email, active) VALUES ('user1', 'user1@devdojo.com', true);\nINSERT INTO users (username, email, active) VALUES ('user1', 'user2@devdojo.com', true);\nINSERT INTO users (username, email, active) VALUES ('user1', 'user3@devdojo.com', true);\nINSERT INTO users (username, email, active) VALUES ('user1', 'user4@devdojo.com', true);\nINSERT INTO users (username, email, active) VALUES ('user1', 'user5@devdojo.com', true);\n```\n\n----------------------------------------\n\nTITLE: Using IS NOT Operator for Non-NULL Values\nDESCRIPTION: SQL query showing how to find records where a field is not NULL using the IS NOT operator.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/006-where.md#2025-04-23_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM users WHERE about IS NOT NULL;\n```\n\n----------------------------------------\n\nTITLE: Deleting Data from a Table in SQL\nDESCRIPTION: Illustrates how to use the DELETE statement to remove data from a table. This example deletes a user with a specific ID from the users table.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/de/content/004-basic-syntax.md#2025-04-23_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM users WHERE id=1;\n```\n\n----------------------------------------\n\nTITLE: Installing MySQL Server and Client on Ubuntu\nDESCRIPTION: Command to install both the MySQL server and client packages on Ubuntu.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/002-install-mysql.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install mysql-server mysql-client\n```\n\n----------------------------------------\n\nTITLE: ROLLBACK Command with Savepoint\nDESCRIPTION: Syntax for the ROLLBACK command to restore database to a specific savepoint.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/020-TCL-commands.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nROLLBACK TO savepoint-name;\n```\n\n----------------------------------------\n\nTITLE: Sorting Results in Descending Order with ORDER BY in SQL\nDESCRIPTION: A SELECT query that retrieves user data and sorts it alphabetically by username in descending order using the ORDER BY clause with the DESC keyword.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/007-order-and-group-by.md#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, username FROM users ORDER BY username DESC;\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into Table in SQL\nDESCRIPTION: Shows how to insert a new user record into the users table. This INSERT statement specifies the table, columns to populate, and the values to insert into those columns.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/004-basic-syntax.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO users (username, email, active)\nVALUES ('bobby', 'bobby@bobbyiliev.com', true);\n```\n\n----------------------------------------\n\nTITLE: WHERE Clause with AND Operator Returning Empty Set\nDESCRIPTION: SQL query showing a condition that returns an empty set because no records match both conditions in the AND statement.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/006-where.md#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM users WHERE username='bobby' AND active=false;\n```\n\n----------------------------------------\n\nTITLE: Adding Column with ALTER TABLE in SQL\nDESCRIPTION: Demonstrates how to add a new email column of type VARCHAR(255) to an existing users table using the ALTER TABLE command.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/003-creating-tables.md#2025-04-23_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE users ADD email VARCHAR(255);\n```\n\n----------------------------------------\n\nTITLE: Inserting Test Data for RIGHT JOIN Example\nDESCRIPTION: Inserts a post with a non-existent user ID to demonstrate RIGHT JOIN behavior with unmatched records.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/011-join.md#2025-04-23_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO posts\n  ( user_id, title )\nVALUES\n  ('123', 'No user post!');\n```\n\n----------------------------------------\n\nTITLE: MySQL Client Configuration for Automated Backups\nDESCRIPTION: This configuration file (.my.cnf) stores MySQL credentials for automated backups. It should be placed in the user's home directory with secure permissions.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/100-mysqldump.md#2025-04-23_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[client]\nuser=your_mysql_user\npassword=your_mysql_password\n```\n\n----------------------------------------\n\nTITLE: Updating Price with New Value\nDESCRIPTION: Example of updating the price to 30 for a specific item.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/020-TCL-commands.md#2025-04-23_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE purchase SET price = 30 WHERE item = \"Pen\";\n```\n\n----------------------------------------\n\nTITLE: Inserting Data using DML INSERT Command\nDESCRIPTION: Example of inserting a new record into the Customers table with specific column values.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/012-sql-commnad-categories.md#2025-04-23_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO Customers\n  (CustomerName, ContactName, Address, City, PostalCode, Country)\nVALUES\n  ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway');\n```\n\n----------------------------------------\n\nTITLE: Selecting All Records from Bookrecord Table\nDESCRIPTION: This SQL query selects all records from the 'bookrecord' table in the 'library' database. It's used to display the structure and content of the bookrecord table.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/019-triggers-in-sql.md#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSelect * from library.bookrecord;\n```\n\n----------------------------------------\n\nTITLE: Creating Named Savepoint\nDESCRIPTION: Creating a savepoint named sv_update.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/020-TCL-commands.md#2025-04-23_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSAVEPOINT  sv_update;\n```\n\n----------------------------------------\n\nTITLE: Truncating Table using DDL TRUNCATE Command\nDESCRIPTION: Example of removing all records from a table while maintaining its structure using the TRUNCATE TABLE command.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/012-sql-commnad-categories.md#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nTRUNCATE TABLE Persons;\n```\n\n----------------------------------------\n\nTITLE: Truncating Sellers Table Example in SQL\nDESCRIPTION: Shows a practical example of using TRUNCATE TABLE command on a Sellers table to remove all its data while preserving the table structure.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/003-creating-tables.md#2025-04-23_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nTRUNCATE TABLE Sellers;\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Configuration File\nDESCRIPTION: Command to create a .my.cnf configuration file in the user's home directory for MySQL authentication.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/002-install-mysql.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ntouch ~/.my.cnf\n```\n\n----------------------------------------\n\nTITLE: Selecting All Records\nDESCRIPTION: Query to select all records from the purchase table.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/020-TCL-commands.md#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM purchase;\n```\n\n----------------------------------------\n\nTITLE: Altering Table Structure using DDL ALTER Command\nDESCRIPTION: Example of modifying an existing table structure by adding a new column using the ALTER TABLE command.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/012-sql-commnad-categories.md#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE Persons\nADD Age int;\n```\n\n----------------------------------------\n\nTITLE: SQL REVOKE Command for Removing Privileges\nDESCRIPTION: DCL command that revokes the previously granted INSERT privilege from the user 'Sanskriti', preventing them from adding more records to the purchase table.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/021-DCL-commands.md#2025-04-23_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nREVOKE INSERT ON purchase FROM 'Sanskriti'@'localhost';\n```\n\n----------------------------------------\n\nTITLE: Switching to a Specific Database in MySQL\nDESCRIPTION: SQL command to select and use a specific database (demo) in MySQL.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/002-install-mysql.md#2025-04-23_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nUSE demo;\n```\n\n----------------------------------------\n\nTITLE: Updating Data in SQL\nDESCRIPTION: Demonstrates how to update the username for a specific user record. This UPDATE statement uses a WHERE clause to target only the record with id=1.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/004-basic-syntax.md#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE users SET username='bobbyiliev' WHERE id=1;\n```\n\n----------------------------------------\n\nTITLE: Starting New Transaction\nDESCRIPTION: Command to initiate a new transaction.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/020-TCL-commands.md#2025-04-23_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSTART TRANSACTION;\n```\n\n----------------------------------------\n\nTITLE: Updating apt Repository on Ubuntu\nDESCRIPTION: Command to update the apt package repository on Ubuntu before installing MySQL.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/002-install-mysql.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update -y\n```\n\n----------------------------------------\n\nTITLE: Selecting a Database for Use\nDESCRIPTION: SQL command to switch to a specific database ('demo_db') for subsequent operations.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/003-creating-tables.md#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nUSE demo_db;\n```\n\n----------------------------------------\n\nTITLE: Deleting Data in SQL\nDESCRIPTION: Shows how to delete a specific user record from the database. This DELETE statement uses a WHERE clause to specify which record to remove based on the id.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/004-basic-syntax.md#2025-04-23_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM users WHERE id=1;\n```\n\n----------------------------------------\n\nTITLE: Using Multi-line Comments in SQL\nDESCRIPTION: Shows how to add multi-line comments to SQL statements. This comment style allows for more detailed explanations that span multiple lines.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/004-basic-syntax.md#2025-04-23_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\n/*\nGet all of the users\nfrom your database\n*/\nSELECT * FROM users;\n```\n\n----------------------------------------\n\nTITLE: Selecting All Books from Library Database\nDESCRIPTION: This SQL query selects all records from the 'books' table in the 'library' database. It's used to display the structure and content of the books table.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/019-triggers-in-sql.md#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSelect * from library.books;\n```\n\n----------------------------------------\n\nTITLE: Updating All Records in a SQL Table\nDESCRIPTION: This snippet shows how to update all records in a table without using a WHERE clause. It sets the 'about' column for all users to a default value.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/009-update.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE users SET about='404 bio not found';\n```\n\n----------------------------------------\n\nTITLE: Using SQL Comments\nDESCRIPTION: Example of using SQL comments to document queries and temporarily disable code execution.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/012-sql-commnad-categories.md#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n--SELECT * FROM Customers;\nSELECT * FROM Persons;\n```\n\n----------------------------------------\n\nTITLE: Using Inline Comments in SQL\nDESCRIPTION: Demonstrates how to add an inline comment to a SQL statement. Comments help document the purpose of SQL commands and are ignored during execution.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/004-basic-syntax.md#2025-04-23_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM users; -- Get all users\n```\n\n----------------------------------------\n\nTITLE: Creating a SQL Database\nDESCRIPTION: SQL command to create a new database named 'demo_db'. This database will serve as a container for tables.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/003-creating-tables.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE demo_db;\n```\n\n----------------------------------------\n\nTITLE: Displaying Users Table Structure in SQL\nDESCRIPTION: This snippet shows the structure of a Users table in SQL format. It demonstrates the table layout with columns for id, username, name, and active status, along with sample data entries.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/001-databases.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n+----+----------+---------------+--------+\n| id | username | name          | active |\n+----+----------+---------------+--------+\n| 1  |    bobby | Bobby Iliev   |   true |\n| 2  |    grisi | Greisi I.     |   true |\n| 3  |  devdojo | Dev Dojo      |  false |\n+----+----------+---------------+--------+\n```\n\n----------------------------------------\n\nTITLE: Adding Single-Line Comments in SQL\nDESCRIPTION: Demonstrates how to add single-line comments in SQL using the -- syntax. This example shows a comment alongside a SELECT statement.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/de/content/004-basic-syntax.md#2025-04-23_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM users; -- Erhalte alle Benutzer\n```\n\n----------------------------------------\n\nTITLE: Selecting All Columns in SQL\nDESCRIPTION: Demonstrates how to retrieve all columns from the users table using the asterisk wildcard. This returns complete records for all users in the table.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/004-basic-syntax.md#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM users;\n```\n\n----------------------------------------\n\nTITLE: Securing MySQL Installation on Mac\nDESCRIPTION: Command to run the MySQL secure installation script on macOS to set up security settings.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/002-install-mysql.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmysql_secure_installation\n```\n\n----------------------------------------\n\nTITLE: Watching Real-time Updates of Aggregated Logs in Bash\nDESCRIPTION: This bash command uses the watch utility to repeatedly execute a psql query every second, displaying the results of selecting all data from the aggregated_logs materialized view in real-time.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/101-learn-materialize.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwatch -n1 \"psql -c 'select * from aggregated_logs' -U materialize -h localhost -p 6875 materialize\"\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Columns from a Table in SQL\nDESCRIPTION: Demonstrates how to use the SELECT statement to retrieve specific columns from a table. This example selects the username and email columns from the users table.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/de/content/004-basic-syntax.md#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT username, email FROM users;\n```\n\n----------------------------------------\n\nTITLE: Installing MySQL on Mac using Homebrew\nDESCRIPTION: Command to install MySQL on macOS using the Homebrew package manager.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/002-install-mysql.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbrew install mysql\n```\n\n----------------------------------------\n\nTITLE: Accessing MySQL via Command Line\nDESCRIPTION: Command to access MySQL as the root user through the command line interface, prompting for a password.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/002-install-mysql.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmysql -u root -p\n```\n\n----------------------------------------\n\nTITLE: Basic SELECT Query without Ordering in SQL\nDESCRIPTION: A simple SELECT statement retrieving the id and username columns from the users table without any specified ordering. By default, results are sorted by the primary key (id).\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/007-order-and-group-by.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, username FROM users;\n```\n\n----------------------------------------\n\nTITLE: Starting MySQL Service on Mac\nDESCRIPTION: Command to start the MySQL service on macOS after installation via Homebrew.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/002-install-mysql.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbrew services start mysql\n```\n\n----------------------------------------\n\nTITLE: MySQL Client Configuration for Passwordless Login\nDESCRIPTION: Configuration content for the .my.cnf file that stores MySQL credentials to allow passwordless login.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/002-install-mysql.md#2025-04-23_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\n[client]\nuser=YOUR_MYSQL_USERNAME\npassword=YOUR_MYSQL_PASSWORD\n```\n\n----------------------------------------\n\nTITLE: Dropping a SQL Table\nDESCRIPTION: SQL command to completely remove a table ('users') from the database.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/003-creating-tables.md#2025-04-23_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nDROP TABLE users;\n```\n\n----------------------------------------\n\nTITLE: Stopping MySQL Service on Mac\nDESCRIPTION: Command to stop the MySQL service on macOS when needed.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/002-install-mysql.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbrew services stop mysql\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL Client in Bash\nDESCRIPTION: This bash command installs the PostgreSQL client (psql) using apt package manager, which is required for connecting to and querying the Materialize database.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/101-learn-materialize.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install postgresql-client\n```\n\n----------------------------------------\n\nTITLE: Showing All Tables in Database\nDESCRIPTION: SQL command to display all tables in the currently selected database.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/003-creating-tables.md#2025-04-23_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLES;\n```\n\n----------------------------------------\n\nTITLE: Setting Secure Permissions for MySQL Configuration File\nDESCRIPTION: Command to set secure file permissions (read/write for owner only) on the MySQL configuration file.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/002-install-mysql.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nchmod 600 ~/.my.cnf\n```\n\n----------------------------------------\n\nTITLE: Checking MySQL Service Status on Ubuntu\nDESCRIPTION: Command to verify if the MySQL service is running on an Ubuntu system.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/002-install-mysql.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl status mysql.service\n```\n\n----------------------------------------\n\nTITLE: Cron Job for Automated MySQL Database Backups\nDESCRIPTION: This cron job entry automates the backup of a MySQL database twice daily at 10 AM and 10 PM using mysqldump.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/100-mysqldump.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n0 10,22 * * * /usr/bin/mysqldump -u your_username -p your_database_name > your_database_name-$(date +%F).sql\n```\n\n----------------------------------------\n\nTITLE: Checking MySQL Process List\nDESCRIPTION: Command to view all open MySQL connections using the mysqladmin utility.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/002-install-mysql.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nmysqladmin proc\n```\n\n----------------------------------------\n\nTITLE: Displaying GitHub Repository Badges in Markdown\nDESCRIPTION: This snippet shows how to use Markdown to display various badges for a GitHub repository, including stars, forks, contributors, and license information.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n<div align=\"center\">\n    <p>\n\t    <a name=\"stars\"><img src=\"https://img.shields.io/github/stars/bobbyiliev/introduction-to-sql?style=for-the-badge\"></a>\n\t    <a name=\"forks\"><img src=\"https://img.shields.io/github/forks/bobbyiliev/introduction-to-sql?logoColor=green&style=for-the-badge\"></a>\n\t    <a name=\"contributions\"><img src=\"https://img.shields.io/github/contributors/bobbyiliev/introduction-to-sql?logoColor=green&style=for-the-badge\"></a>\n\t    <a name=\"madeWith\"><img src=\"https://img.shields.io/badge/Made%20with-Markdown-1f425f.svg?style=for-the-badge\"></a>\n\t    <a name=\"license\"><img src=\"https://img.shields.io/github/license/bobbyiliev/introduction-to-sql?style=for-the-badge\"></a>\n    </p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Generating Nginx Logs with Curl in Bash\nDESCRIPTION: This bash script uses a for loop to send 2000 HTTP GET requests to a local nginx server, generating log entries that will be processed by Materialize and reflected in the aggregated_logs view.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/101-learn-materialize.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfor i in {1..2000} ; do curl -s 'localhost/materialize/demo-page-2' > /dev/null ; echo $i ; done\n```\n\n----------------------------------------\n\nTITLE: Adding Multi-Line Comments in SQL\nDESCRIPTION: Shows how to add multi-line comments in SQL using the /* */ syntax. This example includes a multi-line comment before a SELECT statement.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/de/content/004-basic-syntax.md#2025-04-23_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\n/*\n Erhalte alle Nutzer\n aus der Datenbank\n*/\nSELECT * FROM users;\n```\n\n----------------------------------------\n\nTITLE: Adding a 'Buy Me a Coffee' Button in Markdown\nDESCRIPTION: This snippet shows how to include a 'Buy Me a Coffee' button using Markdown, which links to the author's donation page for supporter contributions.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n<a href=\"https://www.buymeacoffee.com/bobbyiliev\" target=\"_blank\"><img src=\"https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png\" alt=\"Buy Me A Coffee\" style=\"height: 41px !important;width: 174px !important;box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;\" ></a>\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Example for eBook Project\nDESCRIPTION: Shows the organizational structure for eBook files including translations, assets, content, and exports. Each language version follows this structure with language code directories.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nebook/\n  ├── en/\n  │   ├── assets/\n  │   ├── content/\n  │   └── export/\n  └── {LANG}/\n      ├── assets/\n      ├── content/\n      └── export/\n```\n\n----------------------------------------\n\nTITLE: Creating a 'Deploy to DigitalOcean' Button in Markdown\nDESCRIPTION: This snippet demonstrates how to create a 'Deploy to DigitalOcean' button using Markdown, which allows users to easily deploy the project to DigitalOcean's App Platform.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n[![Deploy to DO](https://mp-assets1.sfo2.digitaloceanspaces.com/deploy-to-do/do-btn-blue.svg)](https://cloud.digitalocean.com/apps/new?repo=https://github.com/bobbyiliev/introduction-to-sql/tree/main)\n```\n\n----------------------------------------\n\nTITLE: Exiting MySQL Command Line Interface\nDESCRIPTION: Command to exit from the MySQL command line interface and return to the system shell.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/002-install-mysql.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nexit;\n```\n\n----------------------------------------\n\nTITLE: Bash Script for Exporting Multiple MySQL Databases\nDESCRIPTION: This bash script exports all MySQL databases except system databases. It creates separate gzipped SQL files for each database in a specified backup directory.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/100-mysqldump.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n##\n# Get a list of all databases except the system databases that are not needed\n##\nDATABASES=$(echo \"show databases;\" | mysql | grep -Ev \"(Database|information_schema|mysql|performance_schema)\")\n\nDATE=$(date +%d%m%Y)\nTIME=$(date +%s)\nBACKUP_DIR=/home/your_user/backup\n\n##\n# Create Backup Directory\n##\n\nif [ ! -d ${BACKUP_DIR} ]; then\n  mkdir -p ${BACKUP_DIR} \nfi\n\n##\n# Backup all databases\n##\n\nfor DB in $DATABASES;\ndo\n    mysqldump --single-transaction --skip-lock-tables $DB | gzip > ${BACKUP_DIR}/$DATE-$DB.sql.gz\ndone\n```\n\n----------------------------------------\n\nTITLE: SQL INSERT Statement After Privileges Revoked\nDESCRIPTION: This INSERT statement demonstrates what happens when a user attempts to add data after their INSERT privileges have been revoked. The operation fails with a permission error.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/021-DCL-commands.md#2025-04-23_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO purchase values(\"Laptop\", 100000, \"Sanskriti\");\n```\n\n----------------------------------------\n\nTITLE: Accessing MySQL Server\nDESCRIPTION: Command to access the MySQL server with root privileges, prompting for password authentication.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/003-creating-tables.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmysql -u root -p\n```\n\n----------------------------------------\n\nTITLE: Monitoring MySQL Connections in Real-time\nDESCRIPTION: Command that combines watch with mysqladmin to provide near real-time monitoring of MySQL connections.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/002-install-mysql.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nwatch -n1 mysqladmin proc\n```\n\n----------------------------------------\n\nTITLE: Opening MySQL Configuration File for Editing\nDESCRIPTION: Command to open the MySQL configuration file with the nano text editor for modification.\nSOURCE: https://github.com/bobbyiliev/introduction-to-sql/blob/main/ebook/en/content/002-install-mysql.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnano ~/.my.cnf\n```"
  }
]