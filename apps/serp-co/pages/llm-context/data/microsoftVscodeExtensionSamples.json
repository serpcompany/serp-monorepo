[
  {
    "owner": "microsoft",
    "repo": "vscode-extension-samples",
    "content": "TITLE: Undoing Last Command with `u`\nDESCRIPTION: This snippet demonstrates how to undo the last command executed using the `u` command. This is a fundamental command for correcting mistakes.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\nu\n```\n\n----------------------------------------\n\nTITLE: Creating Decoration Type with CSS Styling - Typescript\nDESCRIPTION: This snippet demonstrates how to create a `TextEditorDecorationType` using `vscode.window.createTextEditorDecorationType`. The `DecorationRenderOptions` object allows specifying CSS properties for styling the decoration in both light and dark themes.  The border, overview ruler color and lane, and light/dark theme colors are defined.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/decorator-sample/USAGE.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst smallNumberDecorationType = vscode.window.createTextEditorDecorationType({\n    borderWidth: '1px',\n    borderStyle: 'solid',\n    overviewRulerColor: 'blue',\n    overviewRulerLane: vscode.OverviewRulerLane.Right,\n    light: {\n        // this color will be used in light color themes\n        borderColor: 'darkblue'\n    },\n    dark: {\n        // this color will be used in dark color themes\n        borderColor: 'lightblue'\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Semantic Token Color Customizations in VS Code\nDESCRIPTION: This JSONC snippet configures semantic token color customizations in VS Code. It enables semantic highlighting for all themes and defines rules for styling static elements (foreground: red, bold font) and types (foreground: green). This configuration applies when the `sample/sample.semanticLanguage` file is opened.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/semantic-tokens-sample/README.md#_snippet_0\n\nLANGUAGE: JSONC\nCODE:\n```\n\"editor.semanticTokenColorCustomizations\": {\n\t\"enabled\": true, // enable for all themes\n\t\"rules\": {\n\t\t\"*.static\": {\n\t\t\t\"foreground\": \"#ff0000\",\n\t\t\t\"fontStyle\": \"bold\"\n\t\t},\n\t\t\"type\": {\n\t\t\t\"foreground\": \"#00aa00\"\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SourceControlResourceState in JavaScript\nDESCRIPTION: This snippet demonstrates how to create `vscode.SourceControlResourceState` for every changed document when the document text differs from the version originally checked out from the repository. The `resourceUri` property points to the changed document, and the `command` property defines the action to show changes using the built-in `vscode.diff` command.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/source-control-sample/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    resourceUri: doc.uri,\n    command: {\n        title: \"Show changes\",\n        command: \"vscode.diff\",\n        arguments: [repositoryUri, doc.uri, `Checked-out version â†” Local changes`],\n        tooltip: \"Diff your changes\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Activation Events in JSON\nDESCRIPTION: This JSON snippet defines the activation events for the source control extension.  The extension is activated when a workspace contains a `.jsfiddle` file.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/source-control-sample/README.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n    \"activationEvents\": [\n        \"workspaceContains:.jsfiddle\"\n    ],\n```\n\n----------------------------------------\n\nTITLE: Define Build Scripts using npm in package.json\nDESCRIPTION: This JSON snippet configures npm scripts for compiling, type checking, and watching the project using esbuild and the TypeScript compiler (tsc). The \"compile\" script runs type checking and then executes esbuild. The \"watch\" script runs esbuild and tsc in parallel using npm-run-all.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/esbuild-sample/README.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"scripts\": {\n        \"compile\": \"npm run check-types && node esbuild.js\",\n        \"check-types\": \"tsc --noEmit\",\n        \"watch\": \"npm-run-all -p watch:*\",\n        \"watch:esbuild\": \"node esbuild.js --watch\",\n        \"watch:tsc\": \"tsc --noEmit --watch --project tsconfig.json\",\n        \"vscode:prepublish\": \"npm run package\",\n        \"package\": \"npm run check-types && node esbuild.js --production\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Control View Commands in JSON\nDESCRIPTION: This JSON snippet configures commands in the title of the source control view pane, including commit, discard, and refresh actions. The `when` clause ensures these commands are only visible when the `scmProvider` is `jsfiddle`. The 'browse' command shows under the [dot dot dot] button because it's missing the \"group\": \"navigation\" placement specification.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/source-control-sample/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"contributes\": {\n    \"commands\": [\n        ...\n    ],\n    \"menus\": {\n        \"scm/title\": [\n            {\n                \"command\": \"extension.source-control.commit\",\n                \"group\": \"navigation\",\n                \"when\": \"scmProvider == jsfiddle\"\n            },\n            {\n                \"command\": \"extension.source-control.discard\",\n                \"group\": \"navigation\",\n                \"when\": \"scmProvider == jsfiddle\"\n            },\n            {\n                \"command\": \"extension.source-control.refresh\",\n                \"group\": \"navigation\",\n                \"when\": \"scmProvider == jsfiddle\"\n            },\n            {\n                \"command\": \"extension.source-control.browse\",\n                \"when\": \"scmProvider == jsfiddle\"\n            }\n        ]\n    }\n},\n```\n\n----------------------------------------\n\nTITLE: Workspace Configuration with custom URI scheme\nDESCRIPTION: This JSON snippet configures a VS Code workspace to include a folder using the 'datei://' scheme. The 'uri' property specifies the full absolute path to a folder on disk that will be accessed through the custom file system provider.  This allows VS Code to interact with the folder using the defined file system provider.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/nodefs-provider-sample/README.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"folders\": [\n        {\n            \"uri\": \"datei://<full absolute path to folder on disk>\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Original Resource URI in JavaScript\nDESCRIPTION: This JavaScript snippet shows how the repository URI is determined using `this.fiddleRepository.provideOriginalResource(doc.uri, null)`.  This is needed for quick diff and rendering the regular diff.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/source-control-sample/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nthis.fiddleRepository.provideOriginalResource(doc.uri, null)\n```\n\n----------------------------------------\n\nTITLE: Contributing Item Context Actions - JSON\nDESCRIPTION: This JSON snippet shows how to contribute actions to a tree item's context menu using the `menus` extension point with the `view/item/context` location.  The `when` clause utilizes `viewItem` to target specific tree item context values.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/tree-view-sample/USAGE.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"menus\": {\n       \"view/item/context\": [\n           {\n                \"command\": \"nodeDependencies.deleteEntry\",\n                \"when\": \"view == nodeDependencies && viewItem == dependency\"\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Log Output in VS Code settings\nDESCRIPTION: This snippet demonstrates how to configure the language server to output logs in JSON format with verbose verbosity. It shows the necessary settings to be added in VS Code's settings.json file to enable JSON logging for the `languageServerExample` extension.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/lsp-log-streaming-sample/README.md#_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n\"languageServerExample.trace.server\": {\n  \"format\": \"json\", // or \"text\"\n  \"verbosity\": \"verbose\" // or \"off\" | \"messages\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TreeView - TypeScript\nDESCRIPTION: This TypeScript snippet shows how to create a `TreeView` programmatically, allowing for UI operations on the view. It utilizes `vscode.window.createTreeView` with a view ID and a `treeDataProvider` instance.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/tree-view-sample/USAGE.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nvscode.window.createTreeView('ftpExplorer', {\n\ttreeDataProvider: new FtpTreeDataProvider(),\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Status Bar Controls to Source Control in JavaScript\nDESCRIPTION: This JavaScript snippet adds a custom control to the status bar for the source control.  The command allows the user to checkout another version of a fiddle.  The status bar controls typically need to be refreshed every time a new version/branch is checked-out.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/source-control-sample/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nthis.jsFiddleScm.statusBarCommands = [\n    {\n        \"command\": \"extension.source-control.checkout\",\n        \"title\": `â†• ${this.fiddle.slug} #${this.fiddle.version} / ${this.latestFiddleVersion}`,\n        \"tooltip\": \"Checkout another version of this fiddle.\",\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Customizing Large Number Background Color in VS Code\nDESCRIPTION: This snippet demonstrates how to customize the background color of the large number decoration in the VS Code extension sample. It involves adding a configuration entry to the `workbench.colorCustomizations` setting in the user settings.json file. This allows users to override the default color defined by the extension, providing personalized customization.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/decorator-sample/README.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"workbench.colorCustomizations\": {\n        \"myextension.largeNumberBackground\": \"#ff00ff\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying GitHub Issues Object with IPython in Python\nDESCRIPTION: This code snippet shows how to use the IPython display function to display a custom GitHubIssues object. It defines a dataclass for GitHubIssue and a custom JSON encoder to handle dataclasses. The GitHubIssues class overrides the _repr_mimebundle_ method to specify different representations for 'text/plain', 'text/html', and 'x-application/github-issues' mimetypes.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/notebook-renderer-sample/sample/sample.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\nfrom dataclasses import dataclass, is_dataclass, asdict\nimport json\nfrom IPython import display\n\n@dataclass\nclass GitHubIssue:\n    url: str\n    title: str\n    body: str\n\nissues = [GitHubIssue(\"https://github.com/project/repo/issue/123\", \"Bug A\", \"Bug A description...\"),\n    GitHubIssue(\"https://github.com/project/repo/issue/456\", \"Bug B\", \"Bug B description...\")]\n\nclass DataClassJSONEncoder(json.JSONEncoder):\n    \"\"\" Overrides the json serialization of dataclasses \"\"\"\n    def default(s, o):\n        if is_dataclass(o):\n            return asdict(o)\n        return super().default(o)\n\nclass GitHubIssues(object):\n    def __init__(self, issues: List[GitHubIssue]):\n        self.issues = issues\n\n    def json_dump(self) -> str:\n        return json.dumps(self.issues, cls=DataClassJSONEncoder)\n\n    def _repr_mimebundle_(self, include, exclude):\n        return {\n            \"text/plain\": \"[plain]\\n\" + \"\\n\".join([i.url for i in self.issues]),\n            \"text/html\": \"<h1>[html]</h1>\" + \"\".join(['<li>' + i.title + '</li>' for i in self.issues]),\n            \"x-application/github-issues\": self.json_dump(),\n        }\n\ndisplay.display(GitHubIssues(issues))\n```\n\n----------------------------------------\n\nTITLE: Time Delay Loop in Python\nDESCRIPTION: This snippet demonstrates a simple loop that pauses execution for 0.1 seconds in each iteration using the `time.sleep()` function from the `time` module. The loop iterates 10 times, introducing a total delay of 1 second.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/notebook-format-code-action-sample/nb-after.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport time\n\nfor i in range(10):\n    time.sleep(0.1)\n```\n\n----------------------------------------\n\nTITLE: Get Current Working Directory in Python\nDESCRIPTION: This snippet retrieves the current working directory using the `os.getcwd()` function from the `os` module and prints it to the console. It requires the `os` module to be imported. The output is the absolute path of the current directory.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/notebook-format-code-action-sample/nb-after.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncurrent_dir = os.getcwd()\nprint(\"Current working directory:\", current_dir)\n```\n\n----------------------------------------\n\nTITLE: Importing the OS Module in Python\nDESCRIPTION: This snippet imports the `os` module in Python. The `os` module provides a way of using operating system dependent functionality.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/notebook-format-code-action-sample/nb-before.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\n```\n\n----------------------------------------\n\nTITLE: Setting Options in Vim\nDESCRIPTION: This snippet demonstrates how to set options within Vim using the `:set` command. It shows examples of enabling and disabling options such as 'ignorecase', 'incsearch', and 'hlsearch', which control search behavior.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_56\n\nLANGUAGE: vim\nCODE:\n```\n:set xxx\n```\n\nLANGUAGE: vim\nCODE:\n```\n:set ic\n```\n\nLANGUAGE: vim\nCODE:\n```\n:set ignorecase\n```\n\nLANGUAGE: vim\nCODE:\n```\n:set is\n```\n\nLANGUAGE: vim\nCODE:\n```\n:set incsearch\n```\n\nLANGUAGE: vim\nCODE:\n```\n:set hls\n```\n\nLANGUAGE: vim\nCODE:\n```\n:set hlsearch\n```\n\nLANGUAGE: vim\nCODE:\n```\n:set noic\n```\n\n----------------------------------------\n\nTITLE: Creating a Vim Startup Script (vimrc)\nDESCRIPTION: This code shows the steps to create a `.vimrc` file for customizing Vim settings.  It involves editing the file, reading in an example configuration, and saving the changes. The location of the file depends on the operating system (Unix or Windows).\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_58\n\nLANGUAGE: vim\nCODE:\n```\n:e ~/.vimrc\n```\n\nLANGUAGE: vim\nCODE:\n```\n:e $VIM/_vimrc\n```\n\nLANGUAGE: vim\nCODE:\n```\n:r $VIMRUNTIME/vimrc_example.vim\n```\n\nLANGUAGE: vim\nCODE:\n```\n:w\n```\n\nLANGUAGE: vim\nCODE:\n```\n:help vimrc-intro\n```\n\n----------------------------------------\n\nTITLE: Matching Parentheses with `%`\nDESCRIPTION: This snippet shows how to jump to the matching parenthesis, bracket, or brace using the `%` command. This is very helpful for debugging code.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_19\n\nLANGUAGE: vim\nCODE:\n```\n%\n```\n\n----------------------------------------\n\nTITLE: Displaying GitHub Issues with Mimetypes using IPython in Python\nDESCRIPTION: This code snippet demonstrates how to use the IPython display function to display GitHub issue data with specified mimetypes. It defines a list of issue dictionaries and uses json.dumps to serialize the data for 'x-application/github-issues' and 'application/json' mimetypes. It constructs simple HTML and plain text representations as well.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/notebook-renderer-sample/sample/sample.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython import display\nimport json\n\nissues = [{\n        \"url\": \"https://github.com/project/repo/issue/123\",\n        \"title\": \"Bug A\",\n        \"body\": \"Bug A description...\"\n    },\n    {\n        \"url\": \"https://github.com/project/repo/issue/456\",\n        \"title\": \"Bug B\",\n        \"body\": \"Bug B description...\"\n    }]\n\ndisplay.display({\n    \"x-application/github-issues\": json.dumps(issues),\n    \"application/json\": json.dumps(issues, indent=2),\n    \"text/html\": \"<h1>[html] \" + \", \".join([i[\"title\"] for i in issues]) + \"</h1>\",\n    \"text/plain\": \"[plain] \" + \", \".join([i[\"url\"] for i in issues]),\n}, raw=True)\n```\n\n----------------------------------------\n\nTITLE: Set Highlight Search and Incremental Search Options in Vim\nDESCRIPTION: This snippet shows how to set the 'hlsearch' (highlight search results) and 'incsearch' (incremental search) options using the ':set hls is' command.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_53\n\nLANGUAGE: vim\nCODE:\n```\n:set hls is\n```\n\n----------------------------------------\n\nTITLE: Creating Range Array with Regular Expressions - Typescript\nDESCRIPTION: This code snippet shows how to create an array of `DecorationOptions` by using a regular expression to find numbers in the active editor's text.  It iterates through the matches, creates a `Range` object for each match, and adds a hover message. It filters to decorate numbers with length less than 3.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/decorator-sample/USAGE.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst regEx = /\\d+/g;\n\nconst text = activeEditor.document.getText();\nconst smallNumbers: vscode.DecorationOptions[] = [];\n\nlet match;\n\nwhile (match = regEx.exec(text)) {\n    const startPos = activeEditor.document.positionAt(match.index);\n    const endPos = activeEditor.document.positionAt(match.index + match[0].length);\n\n    const decoration = { range: new vscode.Range(startPos, endPos), hoverMessage: 'Number **' + match[0] + '**' };\n    if (match[0].length < 3) {\n        smallNumbers.push(decoration);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Set Ignore Case Option in Vim\nDESCRIPTION: This snippet shows how to set the 'ignorecase' option (ic) to ignore case during searches using the ':set ic' command.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_52\n\nLANGUAGE: vim\nCODE:\n```\n:set ic\n```\n\n----------------------------------------\n\nTITLE: Yank (Copy) Highlighted Text in Vim\nDESCRIPTION: This snippet shows how to copy highlighted (visually selected) text using the 'y' command.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_48\n\nLANGUAGE: vim\nCODE:\n```\ny\n```\n\n----------------------------------------\n\nTITLE: Search Forward for Phrase in Vim\nDESCRIPTION: This snippet demonstrates how to search forward for a specific phrase in Vim.  Type '/' followed by the phrase to initiate the search.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_27\n\nLANGUAGE: vim\nCODE:\n```\n/phrase\n```\n\n----------------------------------------\n\nTITLE: Contributing View Actions - JSON\nDESCRIPTION: This JSON snippet illustrates how to contribute actions to the view's title using the `menus` extension point with the `view/title` location. It defines a command, its title, icon paths, and a `when` clause to control visibility based on the active view.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/tree-view-sample/USAGE.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"commands\": [\n        {\n            \"command\": \"nodeDependencies.refreshEntry\",\n            \"title\": \"Refresh\",\n            \"icon\": {\n                \"light\": \"resources/light/refresh.svg\",\n                \"dark\": \"resources/dark/refresh.svg\"\n            }\n        }\n    ],\n    \"menus\": {\n        \"view/title\": [\n            {\n                \"command\": \"nodeDependencies.refreshEntry\",\n                \"when\": \"view == nodeDependencies\",\n                \"group\": \"navigation\"\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Forward with `/`\nDESCRIPTION: This snippet shows how to search forward in the file for a specific phrase using the `/` command followed by the phrase and pressing ENTER. The `n` command finds the next occurrence and `N` searches in the reverse direction.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_16\n\nLANGUAGE: vim\nCODE:\n```\n/\n```\n\nLANGUAGE: vim\nCODE:\n```\nn\n```\n\nLANGUAGE: vim\nCODE:\n```\nN\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Source Control Provider in JavaScript\nDESCRIPTION: This snippet creates a custom source control provider associated with a workspace folder. It creates a source control resource group to display local file changes and registers a `quickDiffProvider` to map documents between the remote repository and the local folder. It uses the VS Code API to interact with the source control system.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/source-control-sample/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nthis.jsFiddleScm = vscode.scm.createSourceControl('jsfiddle', 'JSFiddle #' + fiddle.slug, workspaceFolder.uri);\nthis.changedResources = this.jsFiddleScm.createResourceGroup('workingTree', 'Changes');\nthis.fiddleRepository = new FiddleRepository(workspaceFolder, fiddle.slug);\nthis.jsFiddleScm.quickDiffProvider = this.fiddleRepository;\n```\n\n----------------------------------------\n\nTITLE: Execute External Command in Vim\nDESCRIPTION: This snippet explains how to execute an external command from within Vim by typing ':!' followed by the command.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_35\n\nLANGUAGE: vim\nCODE:\n```\n:!command\n```\n\n----------------------------------------\n\nTITLE: Retrieve File Contents in Vim\nDESCRIPTION: This snippet explains how to insert the contents of a file below the current cursor position using the ':r FILENAME' command.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_42\n\nLANGUAGE: vim\nCODE:\n```\n:r FILENAME\n```\n\n----------------------------------------\n\nTITLE: Substitute Text Globally in File with Confirmation in Vim\nDESCRIPTION: This snippet shows how to substitute every occurrence of 'old' with 'new' in the entire file, prompting for confirmation before each substitution. ':s' is the substitute command, '%' means the whole file, 'g' applies the substitution to all occurrences on a line, and 'c' asks for confirmation.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_23\n\nLANGUAGE: vim\nCODE:\n```\n:%s/old/new/gc\n```\n\n----------------------------------------\n\nTITLE: Contributing Views - JSON\nDESCRIPTION: This JSON snippet shows how to contribute a view to a specific location (e.g., `tree-view`) using the `views` extension point. It defines the `id`, `name`, and `when` clause for the view.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/tree-view-sample/USAGE.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"viewsContainers\": {\n        \"activitybar\": [\n            {\n                \"id\": \"package-explorer\",\n                \"title\": \"Package Explorer\",\n                \"icon\": \"media/dep.svg\"\n            }\n        ]\n    },\n    \"views\": {\n        \"tree-view\": [\n            {\n                \"id\": \"nodeDependencies\",\n                \"name\": \"Node Dependencies\",\n                \"when\": \"workspaceHasPackageJSON\"\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Project Structure\nDESCRIPTION: This snippet shows the project structure, including the client and server directories. The client contains the extension's entry point (extension.ts), and the server contains the language server's entry point (sampleServer.ts). The package.json file is the extension manifest.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/lsp-user-input-sample/README.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n.\nâ”œâ”€â”€ client // Language Client\nâ”‚   â”œâ”€â”€ src\nâ”‚   â”‚   â””â”€â”€ extension.ts // Language Client entry point\nâ”œâ”€â”€ package.json // The extension manifest.\nâ””â”€â”€ server // Language Server\n    â””â”€â”€ src\n        â””â”€â”€ sampleServer.ts // Language Server entry point\n```\n\n----------------------------------------\n\nTITLE: Substitute Text Globally in Vim\nDESCRIPTION: This snippet demonstrates how to replace all occurrences of 'thee' with a corrected version in a line using Vim's substitution command.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_21\n\nLANGUAGE: vim\nCODE:\n```\ns/thee/the/g\n```\n\n----------------------------------------\n\nTITLE: Configuring Language Server Trace Settings\nDESCRIPTION: This code snippet demonstrates how to configure trace settings for a language server within the VS Code settings.json file. Specifically, it enables JSON formatting and verbose logging for the 'languageServerExample' extension, enabling detailed debugging information to be streamed to a tool like LSP Inspector.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/lsp-log-streaming-sample/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"languageServerExample.trace.server\": {\n  \"format\": \"json\",\n  \"verbosity\": \"verbose\"\n}\n```\n\n----------------------------------------\n\nTITLE: Contributing Views Containers - JSON\nDESCRIPTION: This JSON snippet demonstrates how to contribute a view container to the activity bar using the `viewsContainers` extension point. It defines the `id`, `title`, and `icon` for the new view container.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/tree-view-sample/USAGE.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"viewsContainers\": {\n        \"activitybar\": [\n            {\n                \"id\": \"package-explorer\",\n                \"title\": \"Package Explorer\",\n                \"icon\": \"media/dep.svg\"\n            }\n        ]\n    },\n    \"views\": {\n        \"tree-view\": [\n            {\n                \"id\": \"nodeDependencies\",\n                \"name\": \"Node Dependencies\",\n                \"when\": \"workspaceHasPackageJSON\"\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Decorations on the Editor - Typescript\nDESCRIPTION: This snippet applies the created decoration type and range array to the active editor using the `setDecorations` method. It takes the decoration type and either a `Range` array or a `DecorationOptions` array as arguments. If the same `TextEditorDecorationType` is used again, it will overwrite the previous set of decorations.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/decorator-sample/USAGE.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nactiveEditor.setDecorations(smallNumberDecorationType, smallNumbers);\n```\n\n----------------------------------------\n\nTITLE: Project Structure\nDESCRIPTION: This snippet shows the structure of the LSP web extension example, including the client and server directories with their respective entry points written in Typescript.  The `package.json` file defines the extension manifest.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/lsp-web-extension-sample/README.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n.\nâ”œâ”€â”€ client // Language Client\nâ”‚   â”œâ”€â”€ src\nâ”‚   â”‚   â””â”€â”€ browserClientMain.ts // Language Client entry point\nâ”œâ”€â”€ package.json // The extension manifest.\nâ””â”€â”€ server // Language Server\n    â””â”€â”€ src\n        â””â”€â”€ browserServerMain.ts // Language Server entry point\n```\n\n----------------------------------------\n\nTITLE: Generating Pseudolocalization Files (l10n-dev)\nDESCRIPTION: This shell command uses `@vscode/l10n-dev` to generate pseudolocalization files (`package.nls.qps-ploc.json` and `bundle.l10n.qps-ploc.json`) based on the original `bundle.l10n.json` and `package.nls.json` files. This is useful for testing localization without translating to a real language.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/l10n-sample/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx @vscode/l10n-dev generate-pseudo -o ./l10n/ ./l10n/bundle.l10n.json ./package.nls.json\n```\n\n----------------------------------------\n\nTITLE: Substitute Text Between Line Numbers in Vim\nDESCRIPTION: This snippet describes how to substitute text between specific line numbers in Vim. '#,#' represents the range of line numbers to apply the substitution to.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_22\n\nLANGUAGE: vim\nCODE:\n```\n:#,#s/old/new/g\n```\n\n----------------------------------------\n\nTITLE: Changing to End of Line with `c$`\nDESCRIPTION: This snippet shows how to change from the cursor position to the end of the line using the `c$` command. After typing `c$`, the user enters Insert mode to type the replacement text.  Pressing ESC returns to Normal mode.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_13\n\nLANGUAGE: vim\nCODE:\n```\nc$\n```\n\n----------------------------------------\n\nTITLE: Defining Tests in Markdown\nDESCRIPTION: This snippet demonstrates how to define tests within a Markdown file using headings as test groups and assertions within each group as individual tests.  The test runner will evaluate these assertions.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/test-provider-sample/README.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Easy Math\n\n2 + 2 = 4 // this test will pass\n2 + 2 = 5 // this test will fail\n\n# Harder Math\n\n230230 + 5819123 = 6049353\n```\n\n----------------------------------------\n\nTITLE: Generating XLF Files (l10n-dev)\nDESCRIPTION: This shell command uses `@vscode/l10n-dev` to generate an XLF file (`l10n-sample.xlf`) from the `bundle.l10n.json` and `package.nls.json` files. XLF files are often used for professional translation workflows.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/l10n-sample/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpx @vscode/l10n-dev generate-xlf -o ./l10n-sample.xlf ./l10n/bundle.l10n.json ./package.nls.json\n```\n\n----------------------------------------\n\nTITLE: Example Text for Call Hierarchy Provider Test\nDESCRIPTION: This text is used to test the Call Hierarchy Provider. It defines a simple food pyramid model using subject-verb-object syntax. It should be saved in a `.txt` file to be used with the extension.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/call-hierarchy-sample/README.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCoyote eats deer.\nDeer eats plants.\nCoyote eats lizard.\nLizard eats bird.\nLizard eats frog.\nLizard eats butterfly.\nBird eats seeds.\nFrog eats insects.\nButterfly eats fruit.\n```\n\n----------------------------------------\n\nTITLE: vscode.l10n.t Function Signatures\nDESCRIPTION: These TypeScript function signatures define the different ways to use `vscode.l10n.t()` to mark strings as needing translation in VS Code extensions. They include options for arguments, comments, and placeholders.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/l10n-sample/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction t(message: string, ...args: Array<string | number>): string;\nfunction t(message: string, args: Record<string, any>): string;\nfunction t(options: { message: string; args?: Array<string | number> | Record<string, any>; comment: string[] }): string;\n```\n\n----------------------------------------\n\nTITLE: Localization property in extension manifest (package.json)\nDESCRIPTION: This JSON snippet demonstrates how to configure the `l10n` property in the extension's `package.json` file.  This property tells VS Code where to find the localized strings for the extension.  It must be a relative path to the root of the extension.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/l10n-sample/README.md#_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    // example\n    \"main\": \"./out/extension.js\",\n    // ...\n    \"l10n\": \"./l10n\"\n}\n```\n\n----------------------------------------\n\nTITLE: Find Next Occurrence in Vim\nDESCRIPTION: This snippet shows how to find the next occurrence of the previously searched phrase in the same direction using the 'n' command.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_29\n\nLANGUAGE: vim\nCODE:\n```\nn\n```\n\n----------------------------------------\n\nTITLE: Exporting Localizable Strings (l10n-dev)\nDESCRIPTION: This shell command uses `@vscode/l10n-dev` to export localizable strings from the `src` directory and generate a `bundle.l10n.json` file in the `l10n` directory. This file contains all the strings that are localizable in the extension.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/l10n-sample/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx @vscode/l10n-dev export -o ./l10n ./src\n```\n\n----------------------------------------\n\nTITLE: Time Delay Loop in Python\nDESCRIPTION: This snippet demonstrates a simple loop that iterates 10 times, pausing for 0.1 seconds in each iteration. It uses the `time` module for the `sleep` function, which introduces a delay in the program's execution.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/notebook-format-code-action-sample/nb-before.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport time\n\nfor i in range(10):\n    time.sleep(0.1)\n```\n\n----------------------------------------\n\nTITLE: Substitute All Occurrences in Line in Vim\nDESCRIPTION: This snippet shows how to substitute all occurrences of 'old' with 'new' on a line using the ':s/old/new/g' command.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_32\n\nLANGUAGE: vim\nCODE:\n```\n:s/old/new/g\n```\n\n----------------------------------------\n\nTITLE: Accessing Vim Help\nDESCRIPTION: This shows how to access Vim's built-in help system using the `:help` command. It includes examples of accessing help on specific topics like commands (e.g., 'w'), control key combinations (e.g., 'c_CTRL-D'), and indexes.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_57\n\nLANGUAGE: vim\nCODE:\n```\n:help\n```\n\nLANGUAGE: vim\nCODE:\n```\n:help w\n```\n\nLANGUAGE: vim\nCODE:\n```\n:help c_CTRL-D\n```\n\nLANGUAGE: vim\nCODE:\n```\n:help insert-index\n```\n\nLANGUAGE: vim\nCODE:\n```\n:help user-manual\n```\n\nLANGUAGE: vim\nCODE:\n```\n:q\n```\n\n----------------------------------------\n\nTITLE: Command Line Completion in Vim\nDESCRIPTION: This demonstrates how to use command-line completion in Vim with CTRL-D and <TAB>. It covers setting the `nocp` option, listing files, typing the start of a command, and using CTRL-D and <TAB> to complete commands and filenames.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_59\n\nLANGUAGE: vim\nCODE:\n```\n:set nocp\n```\n\nLANGUAGE: vim\nCODE:\n```\n:!ls\n```\n\nLANGUAGE: vim\nCODE:\n```\n:!dir\n```\n\nLANGUAGE: vim\nCODE:\n```\n:e\n```\n\nLANGUAGE: vim\nCODE:\n```\n:edit FIL\n```\n\n----------------------------------------\n\nTITLE: Substitute Text Between Line Numbers in Vim (Alternate)\nDESCRIPTION: This snippet describes how to substitute text between specific line numbers in Vim. '#,#' represents the range of line numbers to apply the substitution to.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_33\n\nLANGUAGE: vim\nCODE:\n```\n:#,#s/old/new/g\n```\n\n----------------------------------------\n\nTITLE: Declaring a Constant in TypeScript\nDESCRIPTION: This TypeScript snippet declares a constant variable 'a' and assigns it the integer value 12. It demonstrates basic variable declaration and assignment in TypeScript within the context of a VS Code extension sample.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/getting-started-sample/media/linux.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst a = 12;\n```\n\n----------------------------------------\n\nTITLE: Registering TreeDataProvider - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to register a `TreeDataProvider` to populate data in a view. It uses `vscode.window.registerTreeDataProvider` and provides the view ID and the data provider instance.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/tree-view-sample/USAGE.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nvscode.window.registerTreeDataProvider('nodeDependencies', new DepNodeProvider());\n```\n\n----------------------------------------\n\nTITLE: Declaring a Constant in TypeScript\nDESCRIPTION: This TypeScript code snippet declares a constant variable 'a' and initializes it with the value 12.  It demonstrates basic variable declaration syntax in TypeScript.  No external dependencies are required.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/getting-started-sample/media/mac.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst a = 12;\n```\n\n----------------------------------------\n\nTITLE: Moving Back and Forth with CTRL-O and CTRL-I\nDESCRIPTION: This snippet shows how to move back to a previous cursor position using CTRL-O and forward using CTRL-I. This allows navigation through a history of cursor locations.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_18\n\nLANGUAGE: vim\nCODE:\n```\nCTRL-O\n```\n\nLANGUAGE: vim\nCODE:\n```\nCTRL-I\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Lines with `dd` and Count\nDESCRIPTION: This snippet shows how to delete multiple lines using the `numberdd` command. The number indicates how many lines to delete starting from the current line.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\n2dd\n```\n\n----------------------------------------\n\nTITLE: Repeating a Motion with a Number\nDESCRIPTION: This snippet shows how to repeat a motion command multiple times by prepending it with a number.  In this case, `2w` moves the cursor two words forward.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_8\n\nLANGUAGE: vim\nCODE:\n```\n2w\n```\n\n----------------------------------------\n\nTITLE: Putting Deleted Text with `p`\nDESCRIPTION: This snippet shows how to paste previously deleted text after the cursor position using the `p` command. If a whole line was deleted, it is pasted below the current line.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_10\n\nLANGUAGE: vim\nCODE:\n```\np\n```\n\n----------------------------------------\n\nTITLE: Get Current Working Directory in Python\nDESCRIPTION: This snippet retrieves and prints the current working directory using the `os` module. It uses the `os.getcwd()` function to get the current working directory as a string, then prints this string to the console.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/notebook-format-code-action-sample/nb-before.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncurrent_dir = os.getcwd()\nprint(\"Current working directory:\", current_dir)\n```\n\n----------------------------------------\n\nTITLE: Write Selected Lines to File in Vim\nDESCRIPTION: This snippet shows how to save the Visually selected lines to a file. First, select the lines with 'v' motion, then type ':w FILENAME'.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_41\n\nLANGUAGE: vim\nCODE:\n```\nv motion :w FILENAME\n```\n\n----------------------------------------\n\nTITLE: Fixing an Entire Line with `U`\nDESCRIPTION: This snippet shows how to revert all changes made to the current line using the `U` command. This restores the line to its original state.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_4\n\nLANGUAGE: vim\nCODE:\n```\nU\n```\n\n----------------------------------------\n\nTITLE: Put (Paste) Text in Vim\nDESCRIPTION: This snippet shows how to paste previously yanked (copied) text using the 'p' command.  The text will be inserted after the cursor position.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_49\n\nLANGUAGE: vim\nCODE:\n```\np\n```\n\n----------------------------------------\n\nTITLE: Searching Backward with `?`\nDESCRIPTION: This snippet shows how to search backward in the file for a specific phrase using the `?` command followed by the phrase and pressing ENTER.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_17\n\nLANGUAGE: vim\nCODE:\n```\n?\n```\n\n----------------------------------------\n\nTITLE: Constant Declaration TypeScript\nDESCRIPTION: Declares a constant variable 'a' and assigns it the integer value 12. This demonstrates basic variable assignment in TypeScript.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/getting-started-sample/media/windows.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst a = 12;\n```\n\n----------------------------------------\n\nTITLE: Open Line Below Cursor in Vim\nDESCRIPTION: This snippet shows how to open a new line below the cursor and enter Insert mode using the 'o' command.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_44\n\nLANGUAGE: vim\nCODE:\n```\no\n```\n\n----------------------------------------\n\nTITLE: Substitute All Occurrences in File in Vim\nDESCRIPTION: This snippet shows how to substitute every occurrence of 'old' with 'new' in the entire file using the ':%s/old/new/g' command.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_34\n\nLANGUAGE: vim\nCODE:\n```\n:%s/old/new/g\n```\n\n----------------------------------------\n\nTITLE: Disable Ignore Case Option in Vim\nDESCRIPTION: This snippet shows how to disable the 'ignorecase' option (ic) to perform case-sensitive searches using the ':set noic' command.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_54\n\nLANGUAGE: vim\nCODE:\n```\n:set noic\n```\n\n----------------------------------------\n\nTITLE: List Directory in Vim (Unix)\nDESCRIPTION: This snippet shows how to list the current directory's contents using the 'ls' command executed from within Vim.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_36\n\nLANGUAGE: vim\nCODE:\n```\n:!ls\n```\n\n----------------------------------------\n\nTITLE: Append Text After Cursor in Vim\nDESCRIPTION: This snippet shows how to enter Insert mode and append text after the current cursor position using the 'a' command.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_46\n\nLANGUAGE: vim\nCODE:\n```\na\n```\n\n----------------------------------------\n\nTITLE: List Directory in Vim (MS-DOS)\nDESCRIPTION: This snippet shows how to list the current directory's contents using the 'dir' command executed from within Vim.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_37\n\nLANGUAGE: vim\nCODE:\n```\n:!dir\n```\n\n----------------------------------------\n\nTITLE: Read External Command Output in Vim\nDESCRIPTION: This snippet demonstrates how to read the output of an external command and insert it below the cursor position using ':r !command'.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_43\n\nLANGUAGE: vim\nCODE:\n```\n:r !command\n```\n\n----------------------------------------\n\nTITLE: Write File in Vim\nDESCRIPTION: This snippet describes how to save the current Vim file to disk with a specified name using the ':w FILENAME' command.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_38\n\nLANGUAGE: vim\nCODE:\n```\n:w FILENAME\n```\n\n----------------------------------------\n\nTITLE: Deleting to Next Word with `dw`\nDESCRIPTION: This snippet shows how to delete from the cursor position up to the beginning of the next word using the `dw` command.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_6\n\nLANGUAGE: vim\nCODE:\n```\ndw\n```\n\n----------------------------------------\n\nTITLE: Open Line Above Cursor in Vim\nDESCRIPTION: This snippet shows how to open a new line above the cursor and enter Insert mode using the 'O' command.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_45\n\nLANGUAGE: vim\nCODE:\n```\nO\n```\n\n----------------------------------------\n\nTITLE: Changing to End of Word with `ce`\nDESCRIPTION: This snippet shows how to change from the cursor position to the end of the word. After typing `ce`, the user enters Insert mode to type the replacement text. Pressing ESC returns to Normal mode.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_12\n\nLANGUAGE: vim\nCODE:\n```\nce\n```\n\n----------------------------------------\n\nTITLE: Delete File in Vim (MS-DOS)\nDESCRIPTION: This snippet shows how to delete a file using the 'del' command executed from within Vim in an MS-DOS environment.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_39\n\nLANGUAGE: vim\nCODE:\n```\n:!del FILENAME\n```\n\n----------------------------------------\n\nTITLE: Substitute First Occurrence in Line in Vim\nDESCRIPTION: This snippet shows how to substitute the first occurrence of 'old' with 'new' on a line using the ':s/old/new' command.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_31\n\nLANGUAGE: vim\nCODE:\n```\n:s/old/new\n```\n\n----------------------------------------\n\nTITLE: Search Backward for Phrase in Vim\nDESCRIPTION: This snippet demonstrates how to search backward for a specific phrase in Vim.  Type '?' followed by the phrase to initiate the search.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_28\n\nLANGUAGE: vim\nCODE:\n```\n?phrase\n```\n\n----------------------------------------\n\nTITLE: Moving to Start of Line with `0`\nDESCRIPTION: This snippet shows how to move the cursor to the beginning of the current line using the `0` command.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_9\n\nLANGUAGE: vim\nCODE:\n```\n0\n```\n\n----------------------------------------\n\nTITLE: Deleting to End of Line with `d$`\nDESCRIPTION: This snippet shows how to delete from the cursor position to the end of the line using the `d$` command.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_7\n\nLANGUAGE: vim\nCODE:\n```\nd$\n```\n\n----------------------------------------\n\nTITLE: Yank (Copy) One Word in Vim\nDESCRIPTION: This snippet demonstrates how to copy a single word using the 'yw' command.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_50\n\nLANGUAGE: vim\nCODE:\n```\nyw\n```\n\n----------------------------------------\n\nTITLE: Remove Highlighting of Matches in Vim\nDESCRIPTION: This snippet shows how to remove the highlighting of search matches using the ':nohlsearch' command.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_55\n\nLANGUAGE: vim\nCODE:\n```\n:nohlsearch\n```\n\n----------------------------------------\n\nTITLE: Move Cursor to End of File in Vim\nDESCRIPTION: This snippet describes how to move the cursor to the end of the file using the 'G' command.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_24\n\nLANGUAGE: vim\nCODE:\n```\nG\n```\n\n----------------------------------------\n\nTITLE: Move Cursor to Specific Line Number in Vim\nDESCRIPTION: This snippet demonstrates how to move the cursor to a specific line number using the number followed by 'G'.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_25\n\nLANGUAGE: vim\nCODE:\n```\nnumber G\n```\n\n----------------------------------------\n\nTITLE: Moving to a Specific Line with `G`\nDESCRIPTION: This snippet demonstrates how to move the cursor to a specific line number. Typing `G` moves to the end of the file. Typing `gg` moves to the start of the file. Typing a number followed by `G` moves to that line number.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_15\n\nLANGUAGE: vim\nCODE:\n```\nG\n```\n\nLANGUAGE: vim\nCODE:\n```\ngg\n```\n\n----------------------------------------\n\nTITLE: Deleting a Line with `dd`\nDESCRIPTION: This snippet shows how to delete an entire line using the `dd` command.  This is a shortcut for deleting a line.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\ndd\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Words with `d` and Count\nDESCRIPTION: This snippet demonstrates deleting multiple words using the `d` command followed by a number and the `w` motion. The number specifies how many words to delete.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\nd   number   motion\n```\n\n----------------------------------------\n\nTITLE: Replacing Character with `r`\nDESCRIPTION: This snippet shows how to replace the character under the cursor with a new character using the `r` command followed by the desired character.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_11\n\nLANGUAGE: vim\nCODE:\n```\nrx\n```\n\n----------------------------------------\n\nTITLE: Substituting Text with `:s/old/new/g`\nDESCRIPTION: This snippet demonstrates how to substitute one string for another within a line using the `:s/old/new/g` command. The `g` flag replaces all occurrences in the line, otherwise only the first occurrence is replaced.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_20\n\nLANGUAGE: vim\nCODE:\n```\n:s/old/new/g\n```\n\nLANGUAGE: vim\nCODE:\n```\n:s/thee/the <ENTER>\n```\n\nLANGUAGE: vim\nCODE:\n```\n:s/thee/the/g\n```\n\n----------------------------------------\n\nTITLE: Search in Vim\nDESCRIPTION: This snippet shows the basic command to search for a pattern in vim. This can be used to find a string of text inside a file.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_51\n\nLANGUAGE: vim\nCODE:\n```\n/ignore\n```\n\n----------------------------------------\n\nTITLE: Move Cursor to First Line in Vim\nDESCRIPTION: This snippet shows how to move the cursor to the first line of the file using the 'gg' command.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_26\n\nLANGUAGE: vim\nCODE:\n```\ngg\n```\n\n----------------------------------------\n\nTITLE: Find Next Occurrence in Opposite Direction in Vim\nDESCRIPTION: This snippet shows how to find the next occurrence of the previously searched phrase in the opposite direction using the 'N' command.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_30\n\nLANGUAGE: vim\nCODE:\n```\nN\n```\n\n----------------------------------------\n\nTITLE: Redoing Commands with CTRL-R\nDESCRIPTION: This snippet demonstrates how to redo previously undone commands using CTRL-R. It essentially undoes the undo operations.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_5\n\nLANGUAGE: vim\nCODE:\n```\nCTRL-R\n```\n\n----------------------------------------\n\nTITLE: Replace Multiple Characters in Vim\nDESCRIPTION: This snippet explains how to replace multiple characters by entering Replace mode with the 'R' command.  Each typed character will overwrite an existing character.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_47\n\nLANGUAGE: vim\nCODE:\n```\nR\n```\n\n----------------------------------------\n\nTITLE: Remove File in Vim (Unix)\nDESCRIPTION: This snippet demonstrates how to remove a file using the 'rm' command executed from within Vim in a Unix environment.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_40\n\nLANGUAGE: vim\nCODE:\n```\n:!rm FILENAME\n```\n\n----------------------------------------\n\nTITLE: Declaring a Constant Variable in TypeScript\nDESCRIPTION: This TypeScript snippet declares a constant variable 'a' and initializes it with the value 12. Constants are immutable, meaning their value cannot be changed after initialization.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/getting-started-sample/media/web.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst a = 12;\n```\n\n----------------------------------------\n\nTITLE: Showing File Status with CTRL-G\nDESCRIPTION: This snippet demonstrates how to display the file name and cursor position within the file by pressing CTRL-G. This is useful for determining your location in a large file.\nSOURCE: https://github.com/microsoft/vscode-extension-samples/blob/main/vim-sample/vimtutor.txt#_snippet_14\n\nLANGUAGE: vim\nCODE:\n```\nCTRL-G\n```"
  }
]