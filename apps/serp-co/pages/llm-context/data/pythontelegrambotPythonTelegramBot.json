[
  {
    "owner": "python-telegram-bot",
    "repo": "python-telegram-bot",
    "content": "TITLE: Implementing Nested Conversation Bot with python-telegram-bot (Python)\nDESCRIPTION: This snippet demonstrates the implementation of a chatbot using the python-telegram-bot library that supports nested conversations. It requires python-telegram-bot as a dependency, and the script showcases conversation handlers, states, and context management for managing multi-level dialogues. Inputs include user messages and commands; outputs are dynamic bot responses based on the conversation flow. The example is suitable for use as a basis for complex, stateful bots but may require adaptation to specific use cases and conversation structures.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/examples.nestedconversationbot.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../../examples/nestedconversationbot.py\n   :language: python\n   :linenos:\n```\n\n----------------------------------------\n\nTITLE: Implementing Inline Keyboard Functionality with python-telegram-bot in Python\nDESCRIPTION: This snippet demonstrates the setup and usage of inline keyboards in a Telegram bot using the python-telegram-bot library. It showcases the creation of InlineKeyboardMarkup, attaching the inline keyboard to messages, and handling button press callbacks. Prerequisites include the installation of python-telegram-bot, a Telegram Bot API token, and basic familiarity with asynchronous Python programming; key parameters are the defined buttons, callback data, and response logic. Expected inputs are user-pressed inline keyboard buttons, and outputs are corresponding bot responses. The example is limited to showcasing fundamental inline keyboard features and may require adaptation for production-scale error handling and security.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/examples.inlinekeyboard.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport logging\nfrom telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update\nfrom telegram.ext import ApplicationBuilder, CallbackQueryHandler, CommandHandler, ContextTypes\n\nlogging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)\n\nasync def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:\n    keyboard = [\n        [InlineKeyboardButton(\"Option 1\", callback_data='1'),\n         InlineKeyboardButton(\"Option 2\", callback_data='2')]\n    ]\n    reply_markup = InlineKeyboardMarkup(keyboard)\n    await update.message.reply_text('Please choose:', reply_markup=reply_markup)\n\nasync def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:\n    query = update.callback_query\n    await query.answer()\n    await query.edit_message_text(text=f\"Selected option: {query.data}\")\n\nasync def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:\n    await update.message.reply_text(\"Use /start to test this bot.\")\n\nif __name__ == '__main__':\n    application = ApplicationBuilder().token('YOUR TOKEN HERE').build()\n    application.add_handler(CommandHandler('start', start))\n    application.add_handler(CallbackQueryHandler(button))\n    application.add_handler(CommandHandler('help', help_command))\n    application.run_polling()\n\n```\n\n----------------------------------------\n\nTITLE: Python Telegram Bot Conversation Script\nDESCRIPTION: This script implements a conversational Telegram bot using the python-telegram-bot library. It manages interactions with users, processes commands or messages, and maintains conversation states to enable multi-step interactions.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/examples.conversationbot2.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndefining the conversation handlers, message processing functions, and setting up the updater and dispatcher for the bot, enabling it to respond to user inputs and manage conversation states.\n```\n\n----------------------------------------\n\nTITLE: Implementing Deep Linking with Python Telegram Bot\nDESCRIPTION: This Python code snippet demonstrates how to use the python-telegram-bot library to create and handle deep linking functionality. It requires the python-telegram-bot package to be installed. It creates a bot, defines a handler for the /start command, which processes any deep linking parameters provided in the start command's query. It extracts the payload and handles the different possible values to perform specific actions, such as sending a greeting based on the payload. The bot then starts polling for incoming updates.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/examples.deeplinking.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n``deeplinking.py``\n==================\n\n.. literalinclude:: ../../examples/deeplinking.py\n   :language: python\n   :linenos:\n```\n\n----------------------------------------\n\nTITLE: Graceful shutdown of telegram-telegram-bot application from handlers\nDESCRIPTION: This snippet explains how to gracefully stop the telegram bot application during runtime, especially within a handler, job, or error callback. It recommends calling the 'stop_running' method of the Application class to ensure clean termination, allowing the event loop to be managed manually if needed.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/inclusions/application_run_tip.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\napplication.stop_running()  # Call this method within handlers or callbacks to gracefully shut down the bot\n```\n\n----------------------------------------\n\nTITLE: Setting Up Error Handler in python-telegram-bot Using Python\nDESCRIPTION: This snippet demonstrates registering an error handler in a python-telegram-bot bot. It captures exceptions raised during updates, logs the error details, and notifies the user or developer upon failures. The implementation requires the python-telegram-bot library and handlers for update and error management. The error handler takes an Update and Context as parameters and operates asynchronously or synchronously depending on the usage, ensuring robust error reporting in bot workflows.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/examples.errorhandlerbot.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom telegram.ext import Updater, CommandHandler, CallbackContext\nimport logging\nfrom telegram import Update\n\nlogging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\ndef error_handler(update: Update, context: CallbackContext) -> None:\n    \"\"\"Log the error and send a message to notify about the error.\"\"\"\n    logger.error(msg=\"Exception while handling an update:\", exc_info=context.error)\n    if update and update.effective_message:\n        update.effective_message.reply_text('An error occurred while processing your request.')\n\ndef main():\n    updater = Updater(\"YOUR_TOKEN_HERE\")\n    dp = updater.dispatcher\n    \n    dp.add_error_handler(error_handler)\n\n    updater.start_polling()\n    updater.idle()\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: inlinekeyboard2.py Example Script (Python)\nDESCRIPTION: This Python script, referenced via literalinclude, demonstrates building a Telegram bot that uses inline keyboards for user interaction. It likely covers command handling, keyboard creation with `InlineKeyboardButton` and `InlineKeyboardMarkup`, and processing `CallbackQuery` updates when buttons are pressed.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/examples.inlinekeyboard2.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: State Diagram of Conversation Bot\nDESCRIPTION: A Mermaid diagram visualizing the state transitions of the conversation bot. It maps out various states and events triggering transitions, providing a clear overview of the bot's control flow during interactions.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/examples.conversationbot2.rst#_snippet_1\n\nLANGUAGE: Mermaid\nCODE:\n```\ngraph TD\n    state1 -->|Message received| state2\n    state2 -->|User inputs| state3\n    state3 -->|End| state1\n    \n```\n\n----------------------------------------\n\nTITLE: Chat Member Bot Implementation\nDESCRIPTION: This Python snippet showcases the implementation of a chat member bot using the python-telegram-bot library. It demonstrates how to interact with chat members within a Telegram bot context. The code uses `literalinclude` to directly embed the python code from `../../examples/chatmemberbot.py` and displays line numbers.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/examples.chatmemberbot.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../../examples/chatmemberbot.py\n   :language: python\n   :linenos:\n```\n\n----------------------------------------\n\nTITLE: Raw API Wrapper Example - Python\nDESCRIPTION: This Python code snippet demonstrates how to use the raw API wrapper from the python-telegram-bot library to interact with the Telegram Bot API. It likely involves sending and receiving messages, handling updates, and managing the bot's interaction with Telegram. The example utilizes the raw, \"bare-metal\" API wrapper, which gives direct access to the Telegram Bot API, but also requires more manual handling of details such as encoding and error handling.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/examples.rawapibot.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n``rawapibot.py``\n```\n\n----------------------------------------\n\nTITLE: Sphinx Autoclass Directive for ConversationHandler\nDESCRIPTION: This reStructuredText snippet uses the Sphinx `autoclass` directive to automatically generate documentation for the `telegram.ext.ConversationHandler` class. The `:members:` option includes documentation for all members of the class, and `:show-inheritance:` displays the class's inheritance hierarchy.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.ext.conversationhandler.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: telegram.ext.ConversationHandler\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Implementing Echo Bot with python-telegram-bot - Python\nDESCRIPTION: This Python code implements a simple echo bot using the python-telegram-bot library. It's designed to receive messages from users on Telegram and then immediately send those same messages back to them, thereby echoing their input. The code utilizes the library to set up a bot, define a handler for incoming messages, and ensure proper bot operation via polling or webhook.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/examples.echobot.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\nfrom telegram import Update\nfrom telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes\n\n# Enable logging\nlogging.basicConfig(\n    format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\", level=logging.INFO\n)\n# set higher logging level for httpx to avoid all the DEBUG logs\n# logging.getLogger(\"httpx\").setLevel(logging.WARNING)\n\nlogger = logging.getLogger(__name__)\n\n\nasync def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:\n    \"\"\"Send a welcome message when the command /start is issued.\"\"\"\n    await update.message.reply_text(f\"Hi! I am EchoBot, I will echo your messages. {update.message.text}\")\n\n\nasync def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:\n    \"\"\"Send a message when the command /help is issued.\"\"\"\n    await update.message.reply_text(\"Help!\")\n\n\nasync def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:\n    \"\"\"Echo the user message.\"\"\"\n    await update.message.reply_text(f\"Echo: {update.message.text}\")\n\n\ndef main() -> None:\n    \"\"\"Run the bot.\"\"\"\n    # Replace with your bot token\n    token = \"YOUR_BOT_TOKEN\"\n    application = Application.builder().token(token).build()\n\n    # on different commands - answer in Telegram\n    application.add_handler(CommandHandler(\"start\", start))\n    application.add_handler(CommandHandler(\"help\", help_command))\n\n    # on non command i.e message - echo the message on Telegram\n    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))\n\n    # Run the bot until the user presses Ctrl-C\n    application.run_polling()\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Including the Inline Bot Python Example (`rst`)\nDESCRIPTION: This reStructuredText (`rst`) snippet uses the `literalinclude` directive to display the contents of the Python file `../../examples/inlinebot.py` with line numbers. The referenced Python script provides a working example of a Telegram inline bot using the `python-telegram-bot` library, showing how to handle inline queries and respond accordingly.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/examples.inlinebot.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. literalinclude:: ../../examples/inlinebot.py\n   :language: python\n   :linenos:\n```\n\n----------------------------------------\n\nTITLE: Using CallbackQueryHandler in python-telegram-bot\nDESCRIPTION: The CallbackQueryHandler is used to handle callback queries from Telegram users. It allows you to respond to actions triggered by inline keyboard buttons or other elements that generate callback queries. The handler processes the callback query data to perform actions such as updating the bot's messages or triggering other functions. It takes the `telegram.ext.CallbackQueryHandler` class and its members.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.ext.callbackqueryhandler.rst#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Handling KeyboardInterrupt and SystemExit for Graceful Shutdown in Python Telegram Bot\nDESCRIPTION: This snippet explains how the application will terminate upon receiving KeyboardInterrupt or SystemExit signals. It highlights that while manually raising these exceptions can shut down the application, using the Application.stop_running method results in a cleaner shutdown process. It also notes that on Unix systems, the app can terminate when specific signals are received.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/substitutions/application.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. |app_run_shutdown| replace:: The app will shut down when :exc:`KeyboardInterrupt` or :exc:`SystemExit` is raised. This also works from within handlers, error handlers and jobs. However, using :meth:`~telegram.ext.Application.stop_running` will give a somewhat cleaner shutdown behavior than manually raising those exceptions. On unix, the app will also shut down on receiving the signals specified by\n```\n\n----------------------------------------\n\nTITLE: Implementing a Telegram Payment Bot in Python\nDESCRIPTION: This code snippet demonstrates creating a Telegram bot that facilitates payments using the python-telegram-bot library. It includes setup for sending invoices, handling payment callbacks, and confirming transactions, with dependencies on the python-telegram-bot package and necessary Telegram API credentials.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/examples.paymentbot.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport telegram\n\n# Initialize bot with your token\ndef main():\n    bot = telegram.Bot(token='YOUR_BOT_TOKEN')\n    \n    # Send an invoice to a user\n    bot.send_invoice(chat_id=USER_CHAT_ID,\n                     title='Product Purchase',\n                     description='Buy a product',\n                     payload='payload_id',\n                     provider_token='PROVIDER_TOKEN',\n                     start_parameter='start',\n                     currency='USD',\n                     prices=[{'label': 'Total', 'amount': 1000}])\n    \n    # Implement callback handlers for successful payment\n    # ...\n    \nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Generating InlineKeyboardButton Documentation with Sphinx\nDESCRIPTION: This snippet utilizes the Sphinx `autoclass` directive to automatically generate documentation for the `telegram.InlineKeyboardButton` class. It specifies the class using `:autoclass:` and includes options like `:members:` to show class members and `:show-inheritance:` to display the inheritance hierarchy. This approach simplifies the documentation process by directly extracting information from the Python code.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.inlinekeyboardbutton.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: telegram.InlineKeyboardButton\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Generating KeyboardButton Documentation with Sphinx\nDESCRIPTION: This reStructuredText snippet uses the Sphinx `autoclass` directive to automatically generate documentation for the `telegram.KeyboardButton` class. The `:members:` option ensures all public members are included, and `:show-inheritance:` displays the class's inheritance chain.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.keyboardbutton.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: telegram.KeyboardButton\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Autodoc Directive for telegram.Update\nDESCRIPTION: This reStructuredText snippet uses the Sphinx `autoclass` directive to automatically generate documentation for the Python class `telegram.Update`. The `:members:` option ensures all public members are included, and `:show-inheritance:` displays the base classes.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.update.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: telegram.Update\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Defining BaseUpdateProcessor documentation with reStructuredText directives\nDESCRIPTION: A reStructuredText definition for documenting the BaseUpdateProcessor class from the telegram.ext module. It uses the autoclass directive to automatically generate class documentation including all members and inheritance information.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.ext.baseupdateprocessor.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: telegram.ext.BaseUpdateProcessor\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting WebAppInfo Class using Autoclass - Python\nDESCRIPTION: This snippet uses the `autoclass` directive from Sphinx to automatically document the `telegram.WebAppInfo` class. The `:members:` option includes all class members, and `:show-inheritance:` shows inheritance information. This approach generates comprehensive documentation directly from the class definition. Requires the python-telegram-bot library and Sphinx with the autodoc extension.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.webappinfo.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: telegram.WebAppInfo\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for telegram.WebAppData with Sphinx\nDESCRIPTION: This Sphinx directive uses `autoclass` to automatically generate documentation for the `telegram.WebAppData` class. The `:members:` option includes documentation for all public members of the class, and `:show-inheritance:` displays the class's inheritance diagram. This directive is used within a reStructuredText (`.rst`) file processed by Sphinx.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.webappdata.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: telegram.WebAppData\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documentation for telegram.ext.ApplicationBuilder class\nDESCRIPTION: This snippet provides auto-generated documentation for the ApplicationBuilder class in the telegram.ext module, including its members and methods. It explains that this class is used to construct and configure Telegram bot applications programmatically, facilitating the setup of bot handlers, polling, and webhook configurations. Dependencies include the telegram.ext module from the python-telegram-bot library. It does not include executable code but serves as a reference for understanding the class's structure and capabilities.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.ext.applicationbuilder.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: telegram.ext.ApplicationBuilder\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Autodoc for ChosenInlineResult Class\nDESCRIPTION: This snippet uses the Sphinx `autoclass` directive in reStructuredText format to automatically generate documentation for the `telegram.ChosenInlineResult` Python class. The `:members:` option includes documentation for all public members of the class, and `:show-inheritance:` displays the class's inheritance hierarchy.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.choseninlineresult.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: telegram.ChosenInlineResult\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Class Documentation for telegram.InlineQueryResultGif\nDESCRIPTION: This class represents an inline query result that returns a GIF in the Telegram Bot API. It includes autogenerated member documentation and inheritance details, serving as a reference for developers to understand the class structure and usage.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.inlinequeryresultgif.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: telegram.InlineQueryResultGif\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for InlineQueryResultCachedVoice using autoclass\nDESCRIPTION: This Sphinx directive uses the 'autoclass' feature to automatically pull documentation from the specified Python class, 'telegram.InlineQueryResultCachedVoice'. The ':members:' option includes documentation for all class members, and ':show-inheritance:' displays the class's inheritance hierarchy. This requires the Sphinx environment and the autodoc extension to be configured.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.inlinequeryresultcachedvoice.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: telegram.InlineQueryResultCachedVoice\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting InlineQueryResultsButton Class - Python\nDESCRIPTION: This snippet uses the `autoclass` directive to generate documentation for the `telegram.InlineQueryResultsButton` class. It specifies the members, and displays the inheritance hierarchy of the class. No specific code snippet to analyze here, but the text explains the usage of Sphinx and autoclass. This requires the python-telegram-bot library to be installed and properly setup for documentation generation using a tool like Sphinx.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.inlinequeryresultsbutton.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: telegram.InlineQueryResultsButton\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: reStructuredText Autodoc Configuration for Telegram Contact Class\nDESCRIPTION: This snippet configures Sphinx autodoc to generate documentation for the telegram.Contact class, including all members and inheritance information. It's written in reStructuredText format used for Python documentation generation.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.contact.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: telegram.Contact\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Class Documentation for telegram.UserProfilePhotos\nDESCRIPTION: This section uses Sphinx directives to automatically generate documentation for the telegram.UserProfilePhotos class, listing all its members and showing inheritance details. It serves as a reference for understanding the class's structure and available functionalities.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.userprofilephotos.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: telegram.UserProfilePhotos\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for telegram.PassportElementErrorFile using Sphinx Autoclass\nDESCRIPTION: This reStructuredText snippet employs the Sphinx `autoclass` directive to automatically pull documentation from the Python source code for the `telegram.PassportElementErrorFile` class. The `:members:` option ensures that all public members (methods, attributes) are documented, and `:show-inheritance:` includes information about the class's parent classes.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.passportelementerrorfile.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: telegram.PassportElementErrorFile\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Implementing a Telegram Passport Bot in Python\nDESCRIPTION: This Python code initializes and runs a Telegram Passport bot using the python-telegram-bot library. It demonstrates handling updates, managing passport data authorization, and communicating securely with Telegram APIs. Dependencies include python-telegram-bot and required Telegram bot credentials. Input is typically update data from Telegram; output includes user interactions and passport handling, with attention to security and privacy of sensitive data.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/examples.passportbot.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../../examples/passportbot.py\n   :language: python\n   :linenos:\n```\n\n----------------------------------------\n\nTITLE: Class Documentation for telegram.UserChatBoosts\nDESCRIPTION: This snippet describes the UserChatBoosts class in the telegram module, which is added in version 20.8. It indicates that the class members are automatically documented and that inheritance hierarchy is shown. The class likely manages or interacts with user chat boost data within the API's context.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.userchatboosts.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass telegram.UserChatBoosts\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Importing and Using the Invoice Class in RST Documentation\nDESCRIPTION: This RST (reStructuredText) snippet configures the automatic documentation generation for the telegram.Invoice class. It uses Sphinx's autoclass directive to include class documentation with all members and inheritance information.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.invoice.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nInvoice\n=======\n\n.. autoclass:: telegram.Invoice\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting LabeledPrice Class using Sphinx - Python\nDESCRIPTION: This snippet uses Sphinx's `autoclass` directive to automatically generate documentation for the `telegram.LabeledPrice` class. It specifies the class to document and uses `:members:` to include all class members (attributes and methods) and `:show-inheritance:` to show the inheritance hierarchy. This approach simplifies the documentation process by automatically extracting information from the class definition.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.labeledprice.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: telegram.LabeledPrice\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring autoclass documentation for telegram.Voice in reStructuredText\nDESCRIPTION: Sphinx documentation directive that configures how the telegram.Voice class should be documented. It includes all members of the class and shows inheritance information, specifically including inherited members from TelegramObject.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.voice.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: telegram.Voice\n    :members:\n    :show-inheritance:\n    :inherited-members: TelegramObject\n```\n\n----------------------------------------\n\nTITLE: Sphinx documentation directive for BotCommandScopeDefault class\nDESCRIPTION: This reStructuredText code defines a documentation page for the BotCommandScopeDefault class using Sphinx. It includes directives to automatically document all class members and show its inheritance hierarchy.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.botcommandscopedefault.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nBotCommandScopeDefault\n======================\n\n.. autoclass:: telegram.BotCommandScopeDefault\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Class Definition and Member Documentation for telegram.Gifts in Python\nDESCRIPTION: This snippet documents the 'telegram.Gifts' class, including its members and inheritance hierarchy, using autodoc directives for automatic documentation generation. It serves as a reference for developers to understand the structure and available members of the class.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.gifts.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: telegram.Gifts\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Defining GiveawayCreated class documentation with reStructuredText\nDESCRIPTION: A reStructuredText directive that generates documentation for the telegram.GiveawayCreated class. The directive includes all class members and shows inheritance information.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.giveawaycreated.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: telegram.GiveawayCreated\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Defining AffiliateInfo Class Documentation with reStructuredText\nDESCRIPTION: This code snippet defines the documentation for the AffiliateInfo class using reStructuredText directives. It employs the autoclass directive to automatically generate documentation from the class implementation, including all its members and showing inheritance relationships.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.affiliateinfo.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nAffiliateInfo\n=============\n\n.. autoclass:: telegram.AffiliateInfo\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Sphinx autodoc directive for TransactionPartner class\nDESCRIPTION: Sphinx reStructuredText directive that automatically generates documentation for the TransactionPartner class from the python-telegram-bot library, showing all members, inheritance information, and members inherited from TelegramObject.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.transactionpartner.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: telegram.TransactionPartner\n    :members:\n    :show-inheritance:\n    :inherited-members: TelegramObject\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation for telegram.IdDocumentData\nDESCRIPTION: ReStructuredText directive that generates automatic documentation for the IdDocumentData class in the telegram module, displaying all its members and inheritance hierarchy.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.iddocumentdata.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nIdDocumentData\n==============\n\n.. autoclass:: telegram.IdDocumentData\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Running Pytest Tests in Parallel\nDESCRIPTION: This command runs the tests in parallel using the pytest-xdist plugin.  The `-n auto` flag automatically detects the number of CPU cores. `--dist=loadgroup` ensures tests with the same `xdist_group` marker run on the same core to avoid race conditions. Requires pytest-xdist.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/tests/README.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ pytest -n auto --dist=loadgroup\n```\n\n----------------------------------------\n\nTITLE: Defining DataCredentials Documentation with reStructuredText\nDESCRIPTION: This snippet defines the documentation structure for the telegram.DataCredentials class using reStructuredText format with autoclass directive to generate comprehensive documentation including all members and inheritance hierarchy.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.datacredentials.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nDataCredentials\n===============\n\n.. autoclass:: telegram.DataCredentials\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: BackgroundTypeChatTheme Documentation Definition in reStructuredText\nDESCRIPTION: Documentation structure for the BackgroundTypeChatTheme class that was added in version 21.2. The directive includes showing all members and inheritance information through autoclass directive.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.backgroundtypechattheme.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nBackgroundTypeChatTheme\n=======================\n\n.. versionadded:: 21.2\n\n.. autoclass:: telegram.BackgroundTypeChatTheme\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for Official Tests\nDESCRIPTION: This command sets the `TEST_OFFICIAL` environment variable to `true`, enabling the execution of official tests. This is necessary to validate API changes. The tests can be run by calling `pytest tests/test_official/test_official.py`.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/tests/README.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ export TEST_OFFICIAL=true\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for BasePersistence Class using Sphinx Autoclass\nDESCRIPTION: This snippet uses the Sphinx `autoclass` directive in reStructuredText (rst) to automatically generate documentation for the `telegram.ext.BasePersistence` Python class. The `:members:` option includes documentation for all public members of the class, and `:show-inheritance:` displays the class's inheritance hierarchy.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.ext.basepersistence.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: telegram.ext.BasePersistence\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Running Failed Pytest Tests in Isolation\nDESCRIPTION: This command re-runs only the tests that failed in the previous pytest run. The `--lf` flag is used to select the last failed tests.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/tests/README.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ pytest --lf\n```\n\n----------------------------------------\n\nTITLE: Class definition and member overview of telegram.ext.BaseRateLimiter\nDESCRIPTION: This snippet provides an overview of the BaseRateLimiter class, including its inheritance hierarchy, member functions, and properties necessary for implementing custom rate limiting logic in a Telegram bot. It serves as a reference for understanding the class structure and available functionalities.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.ext.baseratelimiter.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass BaseRateLimiter:\n    \"\"\"Base class for rate limiting in telegram.ext module.\"\"\"\n    def __init__(self):\n        pass\n    \n    def acquire(self, key):\n        \"\"\"Attempt to acquire a permit for the given key.\"\"\"\n        pass\n    \n    def release(self, key):\n        \"\"\"Release a permit for the given key.\"\"\"\n        pass\n    \n    def check(self, key):\n        \"\"\"Check if the given key can proceed.\"\"\"\n        pass\n    \n    # Additional members and methods may be included here\n    \n```\n\n----------------------------------------\n\nTITLE: Defining and documenting the PollHandler class in the Telegram bot framework\nDESCRIPTION: This snippet relates to the PollHandler class from the telegram.ext module, which handles polling updates within a Telegram bot. It likely manages registering handlers, processing poll updates, and integrating with the bot's event system to respond to poll-related activities.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.ext.pollhandler.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass telegram.ext.PollHandler\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Understanding telegram.ChatMemberMember Class and Its Members\nDESCRIPTION: This section documents the telegram.ChatMemberMember class, outlining its purpose as a class representing a chat member in Telegram, and detailing its members and inheritance. The class provides properties related to a chat member's status and details within a chat. Dependencies include the telegram module from python-telegram-bot library. The class's members are documented for developers to utilize this class effectively in their applications.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.chatmembermember.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass telegram.ChatMemberMember\n    \"\"\"Represents a chat member with specific status.\"\"\"\n    # Members and their purpose are documented with the class.\n    pass\n```\n\n----------------------------------------\n\nTITLE: Documenting the telegram.ext.TypeHandler class in Python\nDESCRIPTION: This documentation describes the telegram.ext.TypeHandler class, which is used within the python-telegram-bot library to handle specific types of Telegram updates. It includes information about its inheritance, members, and use cases, emphasizing its role in processing update data. No executable code is provided; only class metadata and structure are described.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.ext.typehandler.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: telegram.ext.TypeHandler\n    :members:\n    :show-inheritance:\n\n```\n\n----------------------------------------\n\nTITLE: Defining the ChatAdministratorRights class in Python Telegram Bot\nDESCRIPTION: This class encapsulates the rights and permissions of a chat administrator within the Telegram API. It includes various attributes indicating the admin's capabilities, such as managing chat messages, members, and other advanced permissions. The class is part of the telegram module and is automatically generated with members and inheritance shown, allowing bots to handle administrator permissions effectively.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.chatadministratorrights.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass telegram.ChatAdministratorRights:\n    \"\"\"Represents the rights of a chat administrator.\n\n    .. versionadded:: 20.0\n    \n    .. autoclass:: telegram.ChatAdministratorRights\n        :members:\n        :show-inheritance:\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Documenting telegram.InputMediaVideo Class Definition\nDESCRIPTION: Automated documentation of the telegram.InputMediaVideo class, highlighting its members and inheritance in the python-telegram-bot library. This class represents video media to be sent via Telegram bots and extends the InputMedia class, providing specific attributes for video files.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.inputmediavideo.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: telegram.InputMediaVideo\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Creating a Telegram Passport Bot HTML Integration Page\nDESCRIPTION: This HTML file provides a frontend page that interacts with the Telegram Passport bot, enabling users to initiate or manage passport authorization flows. It may include sample buttons, layouts, or JavaScript integration for interacting with the Telegram Web API. The page expects to be served in a web environment, requires valid Telegram bot setup, and should be tailored to match security constraints for handling sensitive user data.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/examples.passportbot.rst#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n.. literalinclude:: ../../examples/passportbot.html\n   :language: html\n   :linenos:\n```\n\n----------------------------------------\n\nTITLE: Defining ChatBoostHandler class in python-telegram-bot\nDESCRIPTION: This code snippet introduces the ChatBoostHandler class as part of the telegram.ext module, highlighting its addition in version 20.8. It demonstrates class documentation, inheritance, and member annotations, essential for integrating custom handlers within a Telegram bot framework.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.ext.chatboosthandler.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass ChatBoostHandler(telegram.ext.BaseHandler):\n    \"\"\"A handler for chat boost events in Telegram.\"\"\"\n    \n    # Class implementation details would go here\n    \n    # This class was added in version 20.8\n    pass\n```\n\n----------------------------------------\n\nTITLE: Embedding a Mermaid State Diagram with Sphinx `mermaid` Directive\nDESCRIPTION: This ReStructuredText snippet utilizes the Sphinx `mermaid` directive (likely provided by the `sphinxcontrib-mermaid` extension) to render a state diagram defined in the external file `../../examples/conversationbot.mmd`. This visually represents the conversation flow described in the accompanying Python code.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/examples.conversationbot.rst#_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. mermaid:: ../../examples/conversationbot.mmd\n```\n\n----------------------------------------\n\nTITLE: Documenting MessageHandler Class with reStructuredText\nDESCRIPTION: reStructuredText directive for generating API documentation for the MessageHandler class from the telegram.ext module. It includes configuration to display all class members and inheritance information.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.ext.messagehandler.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: telegram.ext.MessageHandler\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Class Definition and Member Documentation of telegram.ext.ExtBot in Python\nDESCRIPTION: This snippet documents the ExtBot class within the telegram.ext module, including its inheritance structure and its member methods. It serves as a reference for developers to understand the class's API and usage. There are no executable code snippets, only class metadata.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.ext.extbot.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: telegram.ext.ExtBot\n    :show-inheritance:\n    :members: insert_callback_data, defaults, rate_limiter, initialize, shutdown, callback_data_cache\n```\n\n----------------------------------------\n\nTITLE: Including External Python Code with Sphinx `literalinclude`\nDESCRIPTION: This ReStructuredText snippet uses the Sphinx `literalinclude` directive to embed the full content of the Python example file `../../examples/conversationbot.py` into the documentation. The `:language: python` option specifies syntax highlighting, and `:linenos:` adds line numbers to the included code.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/examples.conversationbot.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. literalinclude:: ../../examples/conversationbot.py\n   :language: python\n   :linenos:\n```\n\n----------------------------------------\n\nTITLE: Inspecting InputLocationMessageContent Class - Python\nDESCRIPTION: This code snippet utilizes the `autoclass` directive from Sphinx to document the `InputLocationMessageContent` class. It leverages the `members` option to display all class members (methods, attributes). The `show-inheritance` option showcases the class's inheritance hierarchy. This facilitates detailed inspection of the class structure, its functionalities, and its relationships with parent classes. No explicit parameters are required as the directive processes information based on the specified class name and options. The output is formatted documentation suitable for developers to understand the class details. It relies on Sphinx and the `python-telegram-bot` library for documentation generation.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.inputlocationmessagecontent.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: telegram.InputLocationMessageContent\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: InputFile Class Documentation Directive in RST\nDESCRIPTION: ReStructuredText directive that generates documentation for the telegram.InputFile class, including all its members and inheritance hierarchy. This is typically used in Sphinx documentation systems.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.inputfile.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: telegram.InputFile\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Referencing CommandHandler class in reStructuredText (RST)\nDESCRIPTION: This RST directive instructs Sphinx to automatically generate class documentation for the telegram.ext.CommandHandler class, showing all its members and inheritance hierarchy.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.ext.commandhandler.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: telegram.ext.CommandHandler\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting InlineQuery Class using autodoc - Python\nDESCRIPTION: This code snippet utilizes the Sphinx autodoc feature to automatically generate documentation for the `telegram.InlineQuery` class. It includes the `telegram.InlineQuery` class from the telegram module. It lists all members of the class and shows its inheritance.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.inlinequery.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: telegram.InlineQuery\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Auto-documenting ChatMemberRestricted Class (Sphinx)\nDESCRIPTION: This Sphinx directive automatically generates documentation for the Python class `telegram.ChatMemberRestricted`. The `:members:` option includes documentation for all class members, and `:show-inheritance:` displays the class's inheritance hierarchy.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.chatmemberrestricted.rst#_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: telegram.ChatMemberRestricted\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting ChosenInlineResultHandler using Sphinx\nDESCRIPTION: This snippet uses the Sphinx autodoc feature (`autoclass`) to generate documentation for the `telegram.ext.ChosenInlineResultHandler` class. It specifies that the class members and inheritance should be displayed. This is used within a documentation file to automatically create documentation from the source code.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.ext.choseninlineresulthandler.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: telegram.ext.ChosenInlineResultHandler\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Defining PollAnswer Documentation with reStructuredText\nDESCRIPTION: This snippet uses reStructuredText format to set up automatic documentation for the telegram.PollAnswer class, including all its members and inheritance hierarchy.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.pollanswer.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nPollAnswer\n==========\n\n.. autoclass:: telegram.PollAnswer\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Class Definition and Documentation for telegram.BotCommandScopeAllPrivateChats\nDESCRIPTION: This code snippet defines the telegram.BotCommandScopeAllPrivateChats class with associated documentation, including members and inheritance details. It serves to illustrate the class's role in representing command scope for all private chats in Telegram bots, providing metadata for auto-generation tools and developers.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.botcommandscopeallprivatechats.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass telegram.BotCommandScopeAllPrivateChats:\n    \"\"\"Autogenerated class for representing command scope for all private chats in Telegram bots.\"\"\"\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting Filters Module using Sphinx in Python\nDESCRIPTION: This snippet uses Sphinx directives like `:automodule:` to automatically generate documentation for the `telegram.ext.filters` module. The directives specify inherited members, display inheritance, and the order of members. This facilitates automated generation of API documentation, based on the source code, ensuring the documentation reflects changes to the code base.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.ext.filters.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. :bysource: since e.g filters.CHAT is much above filters.Chat() in the docs when it shouldn't.\n   The classes in `filters.py` are sorted alphabetically such that :bysource: still is readable\n\n.. automodule:: telegram.ext.filters\n    :inherited-members: BaseFilter, MessageFilter, UpdateFilter, object\n    :members:\n    :show-inheritance:\n    :member-order: bysource\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for CallbackDataCache Class\nDESCRIPTION: This Sphinx directive (`autoclass`) automatically generates documentation for the `telegram.ext.CallbackDataCache` class. The `:members:` option ensures all public members are documented, and `:show-inheritance:` displays the class's inheritance hierarchy. This requires the `python-telegram-bot` library to be installed and accessible in the Sphinx build environment.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.ext.callbackdatacache.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: telegram.ext.CallbackDataCache\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting ShippingOption Class with Autodoc - Python\nDESCRIPTION: This snippet utilizes Sphinx's `autoclass` directive to document the `telegram.ShippingOption` class. It retrieves information about the class, including its members (methods, attributes, etc.) and inheritance information. The `telegram.ShippingOption` class is likely part of the python-telegram-bot library.  No specific inputs are required for this documentation generation, and the output is Sphinx-formatted documentation.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.shippingoption.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: telegram.ShippingOption\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation for telegram.BotCommandScopeChatAdministrators\nDESCRIPTION: This reStructuredText directive creates an auto-generated documentation section for the BotCommandScopeChatAdministrators class from the Telegram Bot API, showing all members and inheritance relationships.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.botcommandscopechatadministrators.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: telegram.BotCommandScopeChatAdministrators\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Autodoc Directive for telegram.ShippingQuery\nDESCRIPTION: This snippet uses the Sphinx `autoclass` directive in reStructuredText to automatically pull documentation from the `telegram.ShippingQuery` Python class. The `:members:` option includes documentation for all public members of the class, and `:show-inheritance:` displays the base classes from which `ShippingQuery` inherits.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.shippingquery.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: telegram.ShippingQuery\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Class Definition for telegram.ext.InvalidCallbackData\nDESCRIPTION: This snippet defines the InvalidCallbackData class within the telegram.ext module, which inherits from the base exception class and is used to indicate invalid callback data errors in the Telegram bot framework. It includes class members and inheritance details expected from the autoclass directive.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.ext.invalidcallbackdata.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: telegram.ext.InvalidCallbackData\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting ForumTopicEdited Class - Python\nDESCRIPTION: This section documents the `telegram.ForumTopicEdited` class, using Sphinx's `autoclass` directive.  It includes all members of the class, and presents its inheritance structure.  The directive extracts this information directly from the source code.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.forumtopicedited.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: telegram.ForumTopicEdited\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Autoclass Documentation for telegram.ForumTopicReopened\nDESCRIPTION: This snippet automatically generates documentation for the telegram.ForumTopicReopened class, including displaying all its members and inheritance hierarchy. It serves as a reference for developers to understand the class structure and available methods or properties.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.forumtopicreopened.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: telegram.ForumTopicReopened\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting InlineQueryResultVideo using autoclass\nDESCRIPTION: This snippet uses the `autoclass` directive from Sphinx's autodoc extension to automatically document the `InlineQueryResultVideo` class. It extracts information such as members and inheritance details.  This assumes the `python-telegram-bot` library is installed and that Sphinx is configured with the autodoc extension.  No input is directly provided, but the output consists of generated documentation based on the class definition.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.inlinequeryresultvideo.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: telegram.InlineQueryResultVideo\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting PreCheckoutQueryHandler in python-telegram-bot\nDESCRIPTION: This snippet uses Sphinx's `autoclass` directive to document the `PreCheckoutQueryHandler` class from the `telegram.ext` module within the `python-telegram-bot` library. This automatically generates documentation by inspecting the class's source code. It shows the members and the inheritance relationship.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.ext.precheckoutqueryhandler.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: telegram.ext.PreCheckoutQueryHandler\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting ChatBoostUpdated Class - Python\nDESCRIPTION: This snippet documents the `ChatBoostUpdated` class, which is part of the python-telegram-bot library.  It uses the `autoclass` directive to automatically generate documentation for the class, including its members and inheritance information. The `:members:` option specifies that all class members should be documented and `:show-inheritance:` displays the inheritance hierarchy. This requires the python-telegram-bot library to be installed and the appropriate Sphinx configuration for auto-documentation to be set up.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.chatboostupdated.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. versionadded:: 20.8\n\n.. autoclass:: telegram.ChatBoostUpdated\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting InlineQueryResultAudio Class with Sphinx\nDESCRIPTION: This code snippet uses the Sphinx `autoclass` directive to automatically generate documentation for the `telegram.InlineQueryResultAudio` class. It includes all the class members and displays the inheritance hierarchy. This documentation is generated by Sphinx, and no direct code snippet is provided within this file.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.inlinequeryresultaudio.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: telegram.InlineQueryResultAudio\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Using Sphinx autoclass for telegram.BusinessOpeningHours\nDESCRIPTION: This reStructuredText snippet employs the Sphinx `autoclass` directive to automatically generate documentation from the source code of the `telegram.BusinessOpeningHours` Python class. The `:members:` option ensures all public members are included, and `:show-inheritance:` displays the class's inheritance hierarchy. This requires the Sphinx environment to have the `autodoc` extension enabled and access to the `telegram` package.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.businessopeninghours.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: telegram.BusinessOpeningHours\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting PassportData Class with Sphinx in Python\nDESCRIPTION: This code snippet uses the `autoclass` directive within a Sphinx documentation file to automatically generate documentation for the `telegram.PassportData` class.  It specifies that the class members and inheritance should be shown in the generated documentation.  This relies on the python-telegram-bot library and Sphinx for the documentation generation. The output is a set of documents describing the specified class.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.passportdata.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: telegram.PassportData\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for InlineQueryResultGame\nDESCRIPTION: This reStructuredText directive instructs Sphinx to automatically generate documentation for the `telegram.InlineQueryResultGame` Python class. The `:members:` option includes documentation for all public members of the class, and `:show-inheritance:` displays its inheritance hierarchy.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.inlinequeryresultgame.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: telegram.InlineQueryResultGame\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Defining the PassportElementErrorDataField class in Python\nDESCRIPTION: This code snippet shows the class definition for telegram.PassportElementErrorDataField, including its methods and properties. It illustrates how the class inherits from a base class and documents its members for handling errors related to passport data fields. Dependencies include the telegram module, and the snippet is used to instantiate error objects with specific data field error details.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.passportelementerrordatafield.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass PassportElementErrorDataField(TelegramObject):\n    \"\"\"Represents an error associated with a specific data field in a passport element.\"\"\"\n    def __init__(self, source=None, type=None, field_name=None, data_hash=None, message=None):\n        \"\"\"Initializes the error object with relevant details.\n\n        Args:\n            source (str): The source of the error.\n            type (str): Type of the passport element.\n            field_name (str): Name of the data field.\n            data_hash (str): Hash of the data field.\n            message (str): Error message.\"\"\"\n        self.source = source\n        self.type = type\n        self.field_name = field_name\n        self.data_hash = data_hash\n        self.message = message\n```\n\n----------------------------------------\n\nTITLE: Auto-generated class documentation for telegram.CallbackQuery\nDESCRIPTION: Provides an overview of the telegram.CallbackQuery class, including its members and inheritance hierarchy, generated using autodoc directives in reStructuredText.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.callbackquery.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: telegram.CallbackQuery\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Defining the SecureValue Class in Python Telegram Bot\nDESCRIPTION: This snippet represents the documentation generated for the telegram.SecureValue class, including its members and inheritance details. It serves as class-level documentation and does not contain executable code. The class manages secure value data within the telegram bot API context.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.securevalue.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: telegram.SecureValue\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting FileCredentials Class - Python\nDESCRIPTION: This snippet defines the `FileCredentials` class and generates documentation for it. It uses the Sphinx `autoclass` directive with the `telegram.FileCredentials` class. The `:members:` option includes documentation for all class members, while `:show-inheritance:` displays the class inheritance hierarchy.  This process depends on Sphinx and the python-telegram-bot library's structure.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.filecredentials.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: telegram.FileCredentials\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation for TransactionPartnerOther class in python-telegram-bot\nDESCRIPTION: ReStructuredText directive for generating documentation for the TransactionPartnerOther class in the python-telegram-bot library. The directive includes options to show all members, inheritance information, and inherited members from the TransactionPartner parent class.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.transactionpartnerother.rst#_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: telegram.TransactionPartnerOther\n    :members:\n    :show-inheritance:\n    :inherited-members: TransactionPartner\n```\n\n----------------------------------------\n\nTITLE: Documenting BackgroundFill Class in reStructuredText for Python Telegram Bot\nDESCRIPTION: A reStructuredText documentation snippet that documents the BackgroundFill class for the python-telegram-bot library. It includes a version notice indicating the class was added in version 21.2, and instructs Sphinx to generate class documentation with all members shown.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.backgroundfill.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nBackgroundFill\n==============\n\n.. versionadded:: 21.2\n\n.. autoclass:: telegram.BackgroundFill\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting telegram.warnings Module with reStructuredText\nDESCRIPTION: This snippet uses the `automodule` directive from reStructuredText to automatically document the `telegram.warnings` module. It specifies that all members of the module should be included using `:members:` and also shows the inheritance structure using `:show-inheritance:`.  This is a standard practice for generating API documentation.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.warnings.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: telegram.warnings\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation for telegram.Birthdate Class\nDESCRIPTION: A ReStructuredText directive that generates documentation for the Birthdate class from the telegram module, including all its members and inheritance information.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.birthdate.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: telegram.Birthdate\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: RestructuredText Documentation for Telegram's InputPaidMedia Class\nDESCRIPTION: A RestructuredText directive that generates documentation for the InputPaidMedia class from the telegram module, showing all class members and inheritance hierarchy.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.inputpaidmedia.rst#_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: telegram.InputPaidMedia\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Sphinx autoclass directive for telegram.ChatLocation in ReStructuredText\nDESCRIPTION: A Sphinx documentation directive that automatically generates documentation for the telegram.ChatLocation class, including all its members and inheritance hierarchy. This directive is used in the python-telegram-bot project documentation.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.chatlocation.rst#_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: telegram.ChatLocation\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting BaseRequest Class - Python\nDESCRIPTION: This snippet uses the Sphinx `autoclass` directive to document the `BaseRequest` class. It specifies the class to document and uses the `:members:` option to include all of the class's methods and attributes. The `:show-inheritance:` option displays the class's inheritance hierarchy. The output will be rendered as HTML.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.request.baserequest.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: telegram.request.BaseRequest\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Class Definition for telegram.ChatBoostSourcePremium\nDESCRIPTION: This snippet defines the ChatBoostSourcePremium class within the telegram module, indicating it is a class introduced in version 20.8. It includes members and inheritance details, serving as an interface or data structure used within the library for premium chat boost sources.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.chatboostsourcepremium.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass telegram.ChatBoostSourcePremium:\n    \"\"\"Represents a premium chat boost source.\n\n    .. versionadded:: 20.8\n\n    .. autoclass:: telegram.ChatBoostSourcePremium\n        :members:\n        :show-inheritance:\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining CopyTextButton Documentation with reStructuredText\nDESCRIPTION: reStructuredText directive to generate documentation for the CopyTextButton class from the telegram module, showing all class members and inheritance information.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.copytextbutton.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nCopyTextButton\n==============\n\n.. autoclass:: telegram.CopyTextButton\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting RevenueWithdrawalStateSucceeded Class - Python\nDESCRIPTION: This snippet utilizes the `autoclass` directive from Sphinx to automatically generate documentation for the `telegram.RevenueWithdrawalStateSucceeded` class. It specifies the class name, includes the members, shows inheritance, and lists inherited members from the `TelegramObject` class. This allows for generating documentation for the class by inspecting the source code.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.revenuewithdrawalstatesucceeded.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nRevenueWithdrawalStateSucceeded\n===============================\n\n.. autoclass:: telegram.RevenueWithdrawalStateSucceeded\n    :members:\n    :show-inheritance:\n    :inherited-members: TelegramObject\n```\n\n----------------------------------------\n\nTITLE: Defining Sphinx autoclass directive for GeneralForumTopicUnhidden in reStructuredText\nDESCRIPTION: Sphinx directive that automatically generates documentation for the GeneralForumTopicUnhidden class from the telegram module, including all its members and inheritance information.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.generalforumtopicunhidden.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: telegram.GeneralForumTopicUnhidden\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting InlineQueryResultVoice Class - Python\nDESCRIPTION: This code snippet utilizes the `autoclass` directive from Sphinx, a documentation generator, to include detailed information about the `telegram.InlineQueryResultVoice` class. The `:members:` option will document all methods and attributes of the class, and `:show-inheritance:` option lists the inheritance hierarchy.  This requires the `python-telegram-bot` package and Sphinx with autodoc to be installed and configured. The output is a rendered documentation page with class details.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.inlinequeryresultvoice.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: telegram.InlineQueryResultVoice\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting ChatBoostAdded Class - Python\nDESCRIPTION: This snippet uses `autoclass` to automatically generate documentation for the `telegram.ChatBoostAdded` class. It displays the class members and its inheritance structure. This is a common pattern in documentation generation for Python libraries.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.chatboostadded.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: telegram.ChatBoostAdded\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documentation for telegram.VideoChatEnded Class\nDESCRIPTION: This snippet uses Sphinx directives to document the telegram.VideoChatEnded class, displaying its members and inheritance details. It serves as reference documentation for developers implementing or extending video chat end event handling in Python Telegram bots.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.videochatended.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: telegram.VideoChatEnded\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Autodoc Directive for telegram.CallbackGame\nDESCRIPTION: This reStructuredText snippet uses the Sphinx `autoclass` directive to automatically pull documentation from the `telegram.CallbackGame` Python class. The `:members:` option ensures all public members are included, and `:show-inheritance:` displays the class's inheritance tree.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.callbackgame.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: telegram.CallbackGame\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Defining telegram.BotCommandScopeChat Class\nDESCRIPTION: This snippet indicates the documentation of the telegram.BotCommandScopeChat class, including its members and inheritance structure. The class is part of the Telegram Bot API package used to define the scope of bot commands within a specific chat. Dependencies include the core 'telegram' module, and it utilizes class inheritance to extend from a base scope class.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.botcommandscopechat.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: telegram.BotCommandScopeChat\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting EncryptedPassportElement in Python\nDESCRIPTION: This snippet uses Sphinx's `autoclass` directive to automatically document the `telegram.EncryptedPassportElement` class. It includes information about the class members (attributes and methods) and shows its inheritance hierarchy.  This is crucial for developers to understand the class's structure and usage within the telegram bot framework.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.encryptedpassportelement.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: telegram.EncryptedPassportElement\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Defining the InputMediaAnimation Class in Python Telegram Bot\nDESCRIPTION: This snippet defines the InputMediaAnimation class, which is part of the telegram module. It includes class members and inheritance details, serving as a representation of animation media input for Telegram bot API. Dependencies include the telegram package, and it is intended for use in creating and manipulating animation media objects for messages. The class likely supports attributes like media file, caption, etc., and inherits from a base InputMedia class.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.inputmediaanimation.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass InputMediaAnimation:\n    \"\"\"Represents an animation media input for Telegram bot API.\"\"\"\n    # members and inheritance details here\n    pass\n```\n\n----------------------------------------\n\nTITLE: Autogenerating Documentation for telegram.ChatMemberLeft (RST/Python)\nDESCRIPTION: This Sphinx directive automatically generates documentation for the `telegram.ChatMemberLeft` Python class. The `:members:` option ensures all public members of the class are included, and `:show-inheritance:` displays the class's inheritance hierarchy. This directive relies on the Sphinx autodoc extension and the availability of the `python-telegram-bot` library in the Python environment.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.chatmemberleft.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: telegram.ChatMemberLeft\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Class Definition of telegram.KeyboardButtonRequestChat\nDESCRIPTION: This snippet describes the class telegram.KeyboardButtonRequestChat, which encapsulates the properties required to create a chat request button in a Telegram bot interface. It includes all class members and inheritance details, serving as an API reference.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.keyboardbuttonrequestchat.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass telegram.KeyboardButtonRequestChat:\n    \"\"\"Selector class for a request chat button in inline keyboards.\"\"\"\n    # members and inheritance details are typically included here\n```\n\n----------------------------------------\n\nTITLE: Documenting telegram.Game Class Using reStructuredText\nDESCRIPTION: This snippet uses the Sphinx autodoc directive '.. autoclass::' to include documentation of the telegram.Game class, showing all members and inheritance hierarchy. It relies on Sphinx tooling to parse and extract class documentation from source code comments or docstrings. The directive includes parameters ':members:' to list all class members and ':show-inheritance:' to display base classes.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.game.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: telegram.Game\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting ExternalReplyInfo Class with Sphinx in Python\nDESCRIPTION: This snippet utilizes the Sphinx documentation generator with the `autoclass` directive to document the `telegram.ExternalReplyInfo` class. The `:members:` option specifies that all members of the class should be documented. The `:show-inheritance:` option indicates that the inheritance hierarchy should be displayed.  No dependencies are directly specified within the code snippet, however Sphinx and python-telegram-bot are required for successful use of the autoclass directive.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.externalreplyinfo.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: telegram.ExternalReplyInfo\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Autodoc Directive for InlineQueryResultArticle\nDESCRIPTION: This reStructuredText directive instructs Sphinx to automatically document the `telegram.InlineQueryResultArticle` class. The `:members:` option ensures all public members of the class are included, and `:show-inheritance:` displays its inheritance hierarchy.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.inlinequeryresultarticle.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: telegram.InlineQueryResultArticle\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Defining the 'telegram.ForumTopicClosed' class with members and inheritance in Python\nDESCRIPTION: This snippet uses autodoc directives to document the 'telegram.ForumTopicClosed' class, detailing its members and inheritance structure. It clarifies that the class is part of the telegram namespace and is intended for inclusion in generated documentation, helping developers understand its role in telegram's bot API handling.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.forumtopicclosed.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: telegram.ForumTopicClosed\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Autodoc for telegram.StickerSet Class\nDESCRIPTION: Automatically generated documentation section for the 'telegram.StickerSet' class, highlighting its members and inheritance. No explicit code snippets provided.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.stickerset.rst#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Defining Sphinx Documentation for telegram.ChatJoinRequest Class\nDESCRIPTION: A reStructuredText directive that instructs Sphinx to automatically generate documentation for the ChatJoinRequest class, including all its members and inheritance hierarchy.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.chatjoinrequest.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: telegram.ChatJoinRequest\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Defining MessageId Documentation with reStructuredText\nDESCRIPTION: A reStructuredText directive that automatically generates documentation for the telegram.MessageId class. It displays all class members and shows inheritance information.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.messageid.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: telegram.MessageId\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting ReplyParameters Class - RST\nDESCRIPTION: This snippet uses the `autoclass` directive in reStructuredText (RST) to document the `telegram.ReplyParameters` class. It displays the class members and inheritance details. The `:members:` option includes all members of the class, and `:show-inheritance:` displays the inheritance hierarchy.  No code dependencies are required for this directive to function within a documentation system like Sphinx.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.replyparameters.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: telegram.ReplyParameters\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting MaskPosition Class using Sphinx - Python\nDESCRIPTION: This snippet uses the Sphinx autodoc feature to generate documentation for the `telegram.MaskPosition` class. The `autoclass` directive takes the class name and optionally specifies members to include and whether to show inheritance. This is a common pattern in Python projects that use Sphinx for documentation generation.  No dependencies are explicitly specified within the snippet, but it relies on the Sphinx library and the `telegram` library.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.maskposition.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: telegram.MaskPosition\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Defining ReactionCount documentation with reStructuredText\nDESCRIPTION: Documentation definition for the ReactionCount class using Sphinx autoclass directive to generate API documentation that includes all members and inheritance information.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.reactioncount.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nReactionCount\n=============\n\n.. autoclass:: telegram.ReactionCount\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting InlineQueryResultCachedAudio Class - Python\nDESCRIPTION: This code snippet uses the Sphinx autodoc directive (`autoclass`) to automatically generate documentation for the `telegram.InlineQueryResultCachedAudio` class.  It includes member details and displays the inheritance structure, providing an overview of the class's functionality and its relation to other classes.  It doesn't take parameters directly as it's a documentation generation tool.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.inlinequeryresultcachedaudio.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: telegram.InlineQueryResultCachedAudio\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting HTTPXRequest Class using Sphinx\nDESCRIPTION: This snippet uses the Sphinx documentation generator to create documentation for the `HTTPXRequest` class.  It utilizes the `autoclass` directive to automatically include information about class members and inheritance. The directive takes the class name as an argument and renders detailed documentation about the class, including its methods, attributes, and inherited properties.  This approach promotes code reusability by avoiding manual documentation and ensures documentation is automatically updated when the class definition changes.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.request.httpxrequest.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nHTTPXRequest\n============\n\n.. autoclass:: telegram.request.HTTPXRequest\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting GeneralForumTopicHidden Class - Python\nDESCRIPTION: This snippet uses the Sphinx autodoc extension to generate documentation for the `GeneralForumTopicHidden` class. It leverages the `autoclass` directive to extract information about the class's members and inheritance structure directly from the Python source code. The `:members:` option instructs autodoc to document all public members of the class, while `:show-inheritance:` includes the inheritance hierarchy in the generated documentation. This is crucial for users of the library to understand how this class works and how it relates to other classes.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.generalforumtopichidden.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: telegram.GeneralForumTopicHidden\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Autodoc for telegram.Animation\nDESCRIPTION: Uses the reStructuredText `autoclass` directive from Sphinx to automatically generate documentation for the `telegram.Animation` Python class. The `:members:` option includes all public members of the class, `:show-inheritance:` displays the base classes, and `:inherited-members: TelegramObject` explicitly includes members inherited from the `TelegramObject` base class.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.animation.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: telegram.Animation\n    :members:\n    :show-inheritance:\n    :inherited-members: TelegramObject\n```\n\n----------------------------------------\n\nTITLE: Documenting the Video Class using Sphinx\nDESCRIPTION: This reStructuredText snippet uses the Sphinx `autoclass` directive to document the `telegram.Video` class. It specifies that the members of the class and its inherited members from `TelegramObject` and `_BaseThumbedMedium` should be included in the documentation.  The :members: option lists all the methods and attributes of the `Video` class, and :show-inheritance: and :inherited-members: options show the inheritance relationship and inherited members, respectively. There are no specific code parameters or inputs as this is a directive to a documentation generator. The expected output is formatted documentation based on the class definition and its inheritance.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.video.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: telegram.Video\n    :members:\n    :show-inheritance:\n    :inherited-members: TelegramObject\n```\n\n----------------------------------------\n\nTITLE: Documenting BackgroundFillFreeformGradient Class in Python\nDESCRIPTION: This snippet uses Sphinx's `autoclass` directive to automatically generate documentation for the `telegram.BackgroundFillFreeformGradient` class. It includes the `:members:` option to show all class members and `:show-inheritance:` to display the inheritance hierarchy.  This relies on the python-telegram-bot library being installed and accessible.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.backgroundfillfreeformgradient.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. versionadded:: 21.2\n\n.. autoclass:: telegram.BackgroundFillFreeformGradient\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Auto-Generated Documentation for telegram.WebhookInfo Class\nDESCRIPTION: This snippet documents the telegram.WebhookInfo class using autodoc directives, listing its members and showing inheritance information. It helps users understand the class structure and available members within the library.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.webhookinfo.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: telegram.WebhookInfo\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documentation for PreparedInlineMessage using autoclass\nDESCRIPTION: This snippet showcases the usage of the `autoclass` directive from Sphinx to generate documentation for the `PreparedInlineMessage` class in the python-telegram-bot library. It specifies the class to document (`telegram.PreparedInlineMessage`), and includes options to display its members and inheritance hierarchy. This leverages Sphinx's autodoc functionality to parse the class definition and generate the documentation automatically. This does not require any custom code.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.preparedinlinemessage.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: telegram.PreparedInlineMessage\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Running the Entire Test Suite with Pytest\nDESCRIPTION: This command runs the complete pytest suite for the Python Telegram Bot library. This includes tests that require a connection to Telegram servers, which can take a considerable amount of time to complete. Make sure pytest and other dependencies are installed as specified in `pyproject.toml`.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/tests/README.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pytest\n```\n\n----------------------------------------\n\nTITLE: Python Development Requirements File for python-telegram-bot\nDESCRIPTION: A pip requirements file specifying development dependencies for the python-telegram-bot project. It includes packages for testing, building releases, parsing documentation, and timezone handling.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/requirements-unit-tests.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e .\n\n# required for building the wheels for releases\nbuild\n\n# For the test suite\npytest==8.3.5\n\n# needed because pytest doesn't come with native support for coroutines as tests\npytest-asyncio==0.21.2\n\n# xdist runs tests in parallel\npytest-xdist==3.6.1\n\n# Used for flaky tests (flaky decorator)\nflaky>=3.8.1\n\n# used in test_official for parsing tg docs\nbeautifulsoup4\n\n# For testing with timezones. Might not be needed on all systems, but to ensure that unit tests\n# run correctly on all systems, we include it here.\ntzdata\n```\n\n----------------------------------------\n\nTITLE: Running Pytest Tests Without Network Requests\nDESCRIPTION: This command executes only the tests that do not require a connection to the Telegram servers, allowing for faster test execution.  It utilizes pytest markers to filter the tests.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/tests/README.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pytest -m no_req\n```\n\n----------------------------------------\n\nTITLE: Running Pytest Tests Requiring Network Requests\nDESCRIPTION: This command runs only the tests that require a connection to the Telegram servers. It utilizes pytest markers to select these specific tests.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/tests/README.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pytest -m req\n```\n\n----------------------------------------\n\nTITLE: Running Pytest Tests with Dev Marker\nDESCRIPTION: This command executes tests marked with the `@pytest.mark.dev` marker. It allows running a specific subset of tests during development.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/tests/README.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ pytest -m dev\n```\n\n----------------------------------------\n\nTITLE: Embedding Telegram Video using HTML in Documentation\nDESCRIPTION: This snippet shows how to embed a Telegram video in documentation using raw HTML tags. The video is centered, autoplays on loop, and is muted by default.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/inclusions/menu_button_command_video.rst#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<center><video height=\"300px\" loop autoplay muted><source src=\"https://core.telegram.org/file/464001555/10fbd/jvTuV2Ke7WQ.1916669.mp4/a056de323645db409d\" type=\"video/mp4\"></video></center>\n```\n\n----------------------------------------\n\nTITLE: Hiding Content Start with Raw HTML in Sphinx\nDESCRIPTION: Uses a Sphinx `raw:: html` directive to insert an opening HTML `div` tag styled with `display: none`. This is used to hide the subsequent content ('Hidden Headline') from rendering, potentially as a workaround to adjust sidebar display in the Furo theme.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/index.rst#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div style=\"display: none\">\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText toctree for Rate Limiting Documentation\nDESCRIPTION: A toctree directive that organizes the rate limiting documentation into a structured hierarchy, linking to the base rate limiter and the asynchronous rate limiter implementation pages.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/telegram.ext.rate-limiting-tree.rst#_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    :titlesonly:\n\n    telegram.ext.baseratelimiter\n    telegram.ext.aioratelimiter\n```\n\n----------------------------------------\n\nTITLE: Hiding Content End with Raw HTML in Sphinx\nDESCRIPTION: Uses a Sphinx `raw:: html` directive to insert a closing HTML `</div>` tag. This complements a preceding opening tag to complete the block of hidden content within the reStructuredText document.\nSOURCE: https://github.com/python-telegram-bot/python-telegram-bot/blob/master/docs/source/index.rst#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n</div>\n```"
  }
]