[
  {
    "owner": "sequelize",
    "repo": "website",
    "content": "TITLE: Ordering and Grouping in Sequelize\nDESCRIPTION: Shows various ways to implement ORDER BY clauses in Sequelize queries, including ordering by columns, functions, and associated models.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-querying-basics.md#2025-04-09_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nSubtask.findAll({\n  order: [\n    ['title', 'DESC'],\n    sequelize.fn('max', sequelize.col('age')),\n    [sequelize.fn('max', sequelize.col('age')), 'DESC'],\n    [sequelize.fn('otherfunction', sequelize.col('col1'), 12, 'lalala'), 'DESC'],\n    [Task, 'createdAt', 'DESC'],\n    [Task, Project, 'createdAt', 'DESC'],\n    ['Task', 'createdAt', 'DESC'],\n    ['Task', 'Project', 'createdAt', 'DESC'],\n    [Subtask.associations.Task, 'createdAt', 'DESC'],\n    [Subtask.associations.Task, Task.associations.Project, 'createdAt', 'DESC'],\n    [{ model: Task, as: 'Task' }, 'createdAt', 'DESC'],\n    [{ model: Task, as: 'Task' }, { model: Project, as: 'Project' }, 'createdAt', 'DESC']\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Sequelize v7 in TypeScript\nDESCRIPTION: This snippet demonstrates how to import Sequelize, define a User model, create a database connection, synchronize the model with the database, and create a new user. It uses TypeScript with decorators for model definition.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/index.mdx#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Sequelize,\n  Model,\n  DataTypes,\n  InferAttributes,\n  InferCreationAttributes,\n} from '@sequelize/core';\nimport { Attribute } from '@sequelize/core/decorators-legacy';\nimport { SqliteDialect } from '@sequelize/sqlite3';\n\nclass User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n  @Attribute(DataTypes.STRING)\n  declare username: string | null;\n\n  @Attribute(DataTypes.DATE)\n  declare birthday: Date | null;\n}\n\nconst sequelize = new Sequelize({\n  dialect: SqliteDialect,\n  models: [User],\n});\n\nawait sequelize.sync();\n\nconst jane = await User.create({\n  username: 'janedoe',\n  birthday: new Date(1980, 6, 20),\n});\n\nconsole.log(jane.toJSON());\n```\n\n----------------------------------------\n\nTITLE: Connecting to SQLite Database with Sequelize\nDESCRIPTION: Example of creating a Sequelize instance to connect to a SQLite database. It imports the necessary modules and initializes a connection with minimal configuration.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/getting-started.mdx#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Sequelize } from '@sequelize/core';\nimport { SqliteDialect } from '@sequelize/sqlite3';\n\nconst sequelize = new Sequelize({\n  dialect: SqliteDialect,\n});\n```\n\n----------------------------------------\n\nTITLE: Establishing Database Connection with Sequelize\nDESCRIPTION: Examples of different ways to establish database connections using Sequelize, including URI connection and parameter-based connection for various database dialects\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/getting-started.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Sequelize } = require('sequelize');\n\n// Option 1: Passing a connection URI\nconst sequelize = new Sequelize('sqlite::memory:') // Example for sqlite\nconst sequelize = new Sequelize('postgres://user:pass@example.com:5432/dbname') // Example for postgres\n\n// Option 2: Passing parameters separately (sqlite)\nconst sequelize = new Sequelize({\n  dialect: 'sqlite',\n  storage: 'path/to/database.sqlite'\n});\n\n// Option 3: Passing parameters separately (other dialects)\nconst sequelize = new Sequelize('database', 'username', 'password', {\n  host: 'localhost',\n  dialect: /* one of 'mysql' | 'postgres' | 'sqlite' | 'mariadb' | 'mssql' | 'db2' | 'snowflake' | 'oracle' */\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Limits and Pagination with Sequelize\nDESCRIPTION: Demonstrates how to use limit and offset options for pagination in Sequelize queries. These options control how many records to fetch and how many to skip.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-querying-basics.md#2025-04-09_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// Fetch 10 instances/rows\nProject.findAll({ limit: 10 });\n\n// Skip 8 instances/rows\nProject.findAll({ offset: 8 });\n\n// Skip 5 instances and fetch the 5 after that\nProject.findAll({ offset: 5, limit: 5 });\n```\n\n----------------------------------------\n\nTITLE: Defining a User Model with Decorators in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a User model in Sequelize using TypeScript and decorators. It includes attributes for id, firstName, and lastName with their respective data types and constraints.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/defining-models.mdx#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Sequelize,\n  DataTypes,\n  Model,\n  InferAttributes,\n  InferCreationAttributes,\n  CreationOptional,\n} from '@sequelize/core';\nimport { Attribute, PrimaryKey, AutoIncrement, NotNull } from '@sequelize/core/decorators-legacy';\nimport { SqliteDialect } from '@sequelize/sqlite3';\n\nconst sequelize = new Sequelize({ dialect: SqliteDialect });\n\nexport class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n  @Attribute(DataTypes.INTEGER)\n  @PrimaryKey\n  @AutoIncrement\n  declare id: CreationOptional<number>;\n\n  @Attribute(DataTypes.STRING)\n  @NotNull\n  declare firstName: string;\n\n  @Attribute(DataTypes.STRING)\n  declare lastName: string | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Records with Model.create() in Sequelize\nDESCRIPTION: Example of creating a new user record in the database using Sequelize's Model.create() method, which is a shorthand for building and saving an instance in one step.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-querying-basics.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a new user\nconst jane = await User.create({ firstName: 'Jane', lastName: 'Doe' });\nconsole.log(\"Jane's auto-generated ID:\", jane.id);\n```\n\n----------------------------------------\n\nTITLE: Finding or Creating a User in Sequelize with JavaScript\nDESCRIPTION: This snippet demonstrates the use of the findOrCreate method to either find an existing user or create a new one if not found. It shows how to set up the where and defaults options, and how to handle the returned values.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-querying-finders.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst [user, created] = await User.findOrCreate({\n  where: { username: 'sdepold' },\n  defaults: {\n    job: 'Technical Lead JavaScript',\n  },\n});\nconsole.log(user.username); // 'sdepold'\nconsole.log(user.job); // This may or may not be 'Technical Lead JavaScript'\nconsole.log(created); // The boolean indicating whether this instance was just created\nif (created) {\n  console.log(user.job); // This will certainly be 'Technical Lead JavaScript'\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Sequelize v7 in JavaScript\nDESCRIPTION: This snippet shows how to use Sequelize v7 in JavaScript. It covers importing Sequelize, defining a User model, creating a database connection, synchronizing the model, and creating a new user. It uses decorators for model attributes.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/index.mdx#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Sequelize, Model, DataTypes } from '@sequelize/core';\nimport { Attribute } from '@sequelize/core/decorators-legacy';\nimport { SqliteDialect } from '@sequelize/sqlite3';\n\nclass User extends Model {\n  @Attribute(DataTypes.STRING)\n  username;\n\n  @Attribute(DataTypes.DATE)\n  birthday;\n}\n\nconst sequelize = new Sequelize({\n  dialect: SqliteDialect,\n  models: [User],\n});\n\nawait sequelize.sync();\n\nconst jane = await User.create({\n  username: 'janedoe',\n  birthday: new Date(1980, 6, 20),\n});\n\nconsole.log(jane.toJSON());\n```\n\n----------------------------------------\n\nTITLE: Creating Records with Model.create() in Sequelize\nDESCRIPTION: Example of creating a new user record in the database using Sequelize's Model.create() method, which is a shorthand for building and saving an instance in one step.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-querying-basics.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a new user\nconst jane = await User.create({ firstName: 'Jane', lastName: 'Doe' });\nconsole.log(\"Jane's auto-generated ID:\", jane.id);\n```\n\n----------------------------------------\n\nTITLE: Creating a Sequelize Model and Instance in JavaScript\nDESCRIPTION: This example demonstrates how to set up Sequelize with an in-memory SQLite database, define a User model with username and birthday fields, and create a new user instance. It shows the basic pattern of initializing Sequelize, defining models, and performing CRUD operations.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/index.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Sequelize, Model, DataTypes } = require('sequelize');\nconst sequelize = new Sequelize('sqlite::memory:');\n\nclass User extends Model {}\nUser.init(\n  {\n    username: DataTypes.STRING,\n    birthday: DataTypes.DATE,\n  },\n  { sequelize, modelName: 'user' },\n);\n\n(async () => {\n  await sequelize.sync();\n  const jane = await User.create({\n    username: 'janedoe',\n    birthday: new Date(1980, 6, 20),\n  });\n  console.log(jane.toJSON());\n})();\n```\n\n----------------------------------------\n\nTITLE: Basic WHERE Clause in Sequelize\nDESCRIPTION: Simple example of using the where option to filter query results based on equality conditions, which Sequelize automatically converts to SQL WHERE clauses.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-querying-basics.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nPost.findAll({\n  where: {\n    authorId: 2,\n  },\n});\n// SELECT * FROM post WHERE authorId = 2;\n```\n\n----------------------------------------\n\nTITLE: Importing and Initializing Sequelize v7 with SQLite\nDESCRIPTION: Demonstrates how to import and initialize Sequelize v7 using the new scoped package names and separate dialect import.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/upgrade.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Sequelize } from '@sequelize/core';\nimport { SqliteDialect } from '@sequelize/sqlite3';\n\nconst sequelize = new Sequelize({ dialect: SqliteDialect });\n\nawait sequelize.authenticate();\n```\n\n----------------------------------------\n\nTITLE: Installing Sequelize via npm/yarn\nDESCRIPTION: Command to install Sequelize v7 (alpha release) using npm. The instruction notes this is specifically for v7, with a reference to v6 documentation if needed.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/getting-started.mdx#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# This will install Sequelize 7, the latest alpha release of Sequelize\nnpm i @sequelize/core@alpha\n```\n\n----------------------------------------\n\nTITLE: Changing Columns in SQLite using Query Interface in Sequelize\nDESCRIPTION: This snippet demonstrates the workaround Sequelize uses to change columns in SQLite, which doesn't support direct column alterations. It creates a backup table, transfers data, and recreates the original table with the new schema.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/query-interface.md#2025-04-09_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Assuming we have a table in SQLite created as follows:\nqueryInterface.createTable('Person', {\n  name: DataTypes.STRING,\n  isBetaMember: {\n    type: DataTypes.BOOLEAN,\n    defaultValue: false,\n    allowNull: false,\n  },\n  petName: DataTypes.STRING,\n  foo: DataTypes.INTEGER,\n});\n\n// And we change a column:\nqueryInterface.changeColumn('Person', 'foo', {\n  type: DataTypes.FLOAT,\n  defaultValue: 3.14,\n  allowNull: false,\n});\n```\n\nLANGUAGE: SQL\nCODE:\n```\nPRAGMA TABLE_INFO(`Person`);\n\nCREATE TABLE IF NOT EXISTS `Person_backup` (\n  `name` VARCHAR(255),\n  `isBetaMember` TINYINT(1) NOT NULL DEFAULT 0,\n  `foo` FLOAT NOT NULL DEFAULT '3.14',\n  `petName` VARCHAR(255)\n);\n\nINSERT INTO `Person_backup`\n  SELECT\n    `name`,\n    `isBetaMember`,\n    `foo`,\n    `petName`\n  FROM `Person`;\n\nDROP TABLE `Person`;\n\nCREATE TABLE IF NOT EXISTS `Person` (\n  `name` VARCHAR(255),\n  `isBetaMember` TINYINT(1) NOT NULL DEFAULT 0,\n  `foo` FLOAT NOT NULL DEFAULT '3.14',\n  `petName` VARCHAR(255)\n);\n\nINSERT INTO `Person`\n  SELECT\n    `name`,\n    `isBetaMember`,\n    `foo`,\n    `petName`\n  FROM `Person_backup`;\n\nDROP TABLE `Person_backup`;\n```\n\n----------------------------------------\n\nTITLE: Implementing Unmanaged Transactions in Sequelize\nDESCRIPTION: This snippet demonstrates how to use unmanaged transactions in Sequelize, where the user manually commits or rolls back the transaction. It shows creating a user record and adding a sibling within the same transaction.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/transactions.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// First, we start a transaction from your connection and save it into a variable\nconst t = await sequelize.transaction();\n\ntry {\n  // Then, we do some calls passing this transaction as an option:\n\n  const user = await User.create(\n    {\n      firstName: 'Bart',\n      lastName: 'Simpson',\n    },\n    { transaction: t },\n  );\n\n  await user.addSibling(\n    {\n      firstName: 'Lisa',\n      lastName: 'Simpson',\n    },\n    { transaction: t },\n  );\n\n  // If the execution reaches this line, no errors were thrown.\n  // We commit the transaction.\n  await t.commit();\n} catch (error) {\n  // If the execution reaches this line, an error was thrown.\n  // We rollback the transaction.\n  await t.rollback();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UUID Data Type with Auto-generation in Sequelize\nDESCRIPTION: This snippet demonstrates how to define a UUID data type in Sequelize with automatic value generation using UUIDV1 or UUIDV4.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-basics.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  type: DataTypes.UUID,\n  defaultValue: DataTypes.UUIDV4 // Or DataTypes.UUIDV1\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Methods to Sequelize Models\nDESCRIPTION: This snippet illustrates how to add custom instance and class-level methods to Sequelize models in both TypeScript and JavaScript.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/defining-models.mdx#2025-04-09_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Model, InferCreationAttributes, InferAttributes } from '@sequelize/core';\nimport { SqliteDialect } from '@sequelize/sqlite3';\nimport { Attribute, NotNull } from '@sequelize/core/decorators-legacy';\n\nclass User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n  @Attribute(DataTypes.STRING)\n  @NotNull\n  declare firstname: string;\n\n  @Attribute(DataTypes.STRING)\n  @NotNull\n  declare lastname: string;\n\n  instanceLevelMethod() {\n    return 'bar';\n  }\n\n  getFullname() {\n    return [this.firstname, this.lastname].join(' ');\n  }\n\n  static classLevelMethod() {\n    return 'foo';\n  }\n}\n\nconst sequelize = new Sequelize({\n  dialect: SqliteDialect,\n  models: [User],\n});\n\nconsole.log(User.classLevelMethod()); // 'foo'\nconst user = User.build({ firstname: 'Jane', lastname: 'Doe' });\nconsole.log(user.instanceLevelMethod()); // 'bar'\nconsole.log(user.getFullname()); // 'Jane Doe'\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Model } from '@sequelize/core';\nimport { SqliteDialect } from '@sequelize/sqlite3';\nimport { Attribute, NotNull } from '@sequelize/core/decorators-legacy';\n\nclass User extends Model {\n  @Attribute(DataTypes.STRING)\n  @NotNull\n  firstname;\n\n  @Attribute(DataTypes.STRING)\n  @NotNull\n  lastname;\n\n  instanceLevelMethod() {\n    return 'bar';\n  }\n\n  getFullname() {\n    return [this.firstname, this.lastname].join(' ');\n  }\n\n  static classLevelMethod() {\n    return 'foo';\n  }\n}\n\nconst sequelize = new Sequelize({\n  dialect: SqliteDialect,\n  models: [User],\n});\n\nconsole.log(User.classLevelMethod()); // 'foo'\nconst user = User.build({ firstname: 'Jane', lastname: 'Doe' });\nconsole.log(user.instanceLevelMethod()); // 'bar'\nconsole.log(user.getFullname()); // 'Jane Doe'\n```\n\n----------------------------------------\n\nTITLE: Creating Associated Records with Sequelize create()\nDESCRIPTION: Shows how to create a main record along with its associated records in a single operation using the include option with create(). This example creates a User with an associated Address.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/insert.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait User.create(\n  {\n    name: 'Mary Read',\n    address: {\n      city: 'Nassau',\n      country: 'Bahamas',\n    },\n  },\n  {\n    include: ['address'],\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Sequelize Connection Pool for AWS Lambda\nDESCRIPTION: This code snippet demonstrates how to properly configure Sequelize connection pooling for AWS Lambda. It sets up a reusable Sequelize instance with appropriate pool settings, handles connection management across invocations, and ensures proper cleanup.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/aws-lambda.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Sequelize } = require('@sequelize/core');\n\nlet sequelize = null;\n\nasync function loadSequelize() {\n  const sequelize = new Sequelize({\n    // (...)\n    pool: {\n      max: 2,\n      min: 0,\n      idle: 0,\n      acquire: 3000,\n      evict: CURRENT_LAMBDA_FUNCTION_TIMEOUT,\n    },\n  });\n\n  // or `sequelize.sync()`\n  await sequelize.authenticate();\n\n  return sequelize;\n}\n\nmodule.exports.handler = async function (event, callback) {\n  if (!sequelize) {\n    sequelize = await loadSequelize();\n  } else {\n    sequelize.connectionManager.initPools();\n\n    if (sequelize.connectionManager.hasOwnProperty('getConnection')) {\n      delete sequelize.connectionManager.getConnection;\n    }\n  }\n\n  try {\n    return await doSomethingWithSequelize(sequelize);\n  } finally {\n    await sequelize.connectionManager.close();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Testing Database Connection\nDESCRIPTION: Example showing how to test database connection using the authenticate() method\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/getting-started.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n  await sequelize.authenticate();\n  console.log('Connection has been established successfully.');\n} catch (error) {\n  console.error('Unable to connect to the database:', error);\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Managed Transaction in Sequelize with TypeScript\nDESCRIPTION: Demonstrates how to use a managed transaction in Sequelize. The transaction automatically handles commit and rollback based on the success or failure of the callback function.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/transactions.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  const result = await sequelize.transaction(async () => {\n    // both of these queries will run in the transaction\n    const user = await User.create({\n      firstName: 'Abraham',\n      lastName: 'Lincoln',\n    });\n\n    await user.setShooter({\n      firstName: 'John',\n      lastName: 'Boothe',\n    });\n\n    return user;\n  });\n\n  // If the execution reaches this line, the transaction has been committed successfully\n  // `result` is whatever was returned from the transaction callback (the `user`, in this case)\n} catch {\n  // If the execution reaches this line, an error occurred.\n  // The transaction has already been rolled back automatically by Sequelize!\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Explicit Model Name to Prevent Minification Issues (TypeScript)\nDESCRIPTION: This snippet demonstrates how to explicitly set the modelName option in Sequelize to prevent issues caused by code minification changing class names.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/advanced.mdx#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Table({ modelName: 'User' })\nexport class User extends Model {}\n```\n\n----------------------------------------\n\nTITLE: Creating Many-to-Many Association in Sequelize\nDESCRIPTION: Shows how to define a many-to-many relationship between Movie and Actor models using a junction table. Includes examples of automatic and manual junction model creation.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/assocs.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst Movie = sequelize.define('Movie', { name: DataTypes.STRING });\nconst Actor = sequelize.define('Actor', { name: DataTypes.STRING });\nMovie.belongsToMany(Actor, { through: 'ActorMovies' });\nActor.belongsToMany(Movie, { through: 'ActorMovies' });\n```\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS \"ActorMovies\" (\n  \"createdAt\" TIMESTAMP WITH TIME ZONE NOT NULL,\n  \"updatedAt\" TIMESTAMP WITH TIME ZONE NOT NULL,\n  \"MovieId\" INTEGER REFERENCES \"Movies\" (\"id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  \"ActorId\" INTEGER REFERENCES \"Actors\" (\"id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  PRIMARY KEY (\"MovieId\",\"ActorId\")\n);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst Movie = sequelize.define('Movie', { name: DataTypes.STRING });\nconst Actor = sequelize.define('Actor', { name: DataTypes.STRING });\nconst ActorMovies = sequelize.define('ActorMovies', {\n  MovieId: {\n    type: DataTypes.INTEGER,\n    references: {\n      model: Movie, // 'Movies' would also work\n      key: 'id',\n    },\n  },\n  ActorId: {\n    type: DataTypes.INTEGER,\n    references: {\n      model: Actor, // 'Actors' would also work\n      key: 'id',\n    },\n  },\n});\nMovie.belongsToMany(Actor, { through: ActorMovies });\nActor.belongsToMany(Movie, { through: ActorMovies });\n```\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS \"ActorMovies\" (\n  \"MovieId\" INTEGER NOT NULL REFERENCES \"Movies\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  \"ActorId\" INTEGER NOT NULL REFERENCES \"Actors\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  \"createdAt\" TIMESTAMP WITH TIME ZONE NOT NULL,\n  \"updatedAt\" TIMESTAMP WITH TIME ZONE NOT NULL,\n  UNIQUE (\"MovieId\", \"ActorId\"),     -- Note: Sequelize generated this UNIQUE constraint but\n  PRIMARY KEY (\"MovieId\",\"ActorId\")  -- it is irrelevant since it's also a PRIMARY KEY\n);\n```\n\n----------------------------------------\n\nTITLE: Finding Multiple Records with findAll in Sequelize\nDESCRIPTION: Demonstrates how to use the findAll method to retrieve all users with the first name 'John'. This method returns an array of model instances matching the query criteria.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/select-methods.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await User.findAll({\n  where: {\n    firstName: 'John',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations with Sequelize CLI\nDESCRIPTION: Command to execute database migrations using Sequelize CLI with yarn\nSOURCE: https://github.com/sequelize/website/blob/main/docs/cli.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nyarn sequelize-cli db:migrate\n```\n\n----------------------------------------\n\nTITLE: Excluding Attributes in Sequelize Queries\nDESCRIPTION: Example showing how to exclude specific attributes from query results using the exclude option within attributes, which is useful for omitting sensitive or unnecessary fields.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-querying-basics.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nModel.findAll({\n  attributes: { exclude: ['baz'] },\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\n-- Assuming all columns are 'id', 'foo', 'bar', 'baz' and 'qux'\nSELECT id, foo, bar, qux FROM ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Sequelize with MySQL Connection\nDESCRIPTION: This code snippet demonstrates how to initialize a Sequelize instance with MySQL connection parameters. It imports the necessary classes and configures the connection with database credentials, host, and port information.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/databases/mysql.mdx#2025-04-09_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { Sequelize } from '@sequelize/core';\nimport { MySqlDialect } from '@sequelize/mysql';\n\nconst sequelize = new Sequelize({\n  dialect: MySqlDialect,\n  database: 'mydb',\n  user: 'myuser',\n  password: 'mypass',\n  host: 'localhost',\n  port: 3306,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Sequelize Model Using TypeScript Class Extension\nDESCRIPTION: Example of extending Model class in TypeScript with type inference and attribute definitions. Shows how to define a User model with id, firstName, and lastName fields using the Model.init() method.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/legacy-model-definitions.mdx#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Sequelize,\n  DataTypes,\n  Model,\n  InferAttributes,\n  InferCreationAttributes,\n  CreationOptional,\n} from '@sequelize/core';\nimport { SqliteDialect } from '@sequelize/sqlite3';\n\nconst sequelize = new Sequelize({ dialect: SqliteDialect });\n\nclass User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n  declare id: CreationOptional<number>;\n  declare firstName: string;\n  declare lastName: string | null;\n}\n\nUser.init(\n  {\n    id: {\n      type: DataTypes.INTEGER,\n      autoIncrement: true,\n      primaryKey: true,\n    },\n    firstName: {\n      type: DataTypes.STRING,\n      allowNull: false,\n    },\n    lastName: {\n      type: DataTypes.STRING,\n    },\n  },\n  {\n    sequelize,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Sequelize Model with Basic Validations\nDESCRIPTION: Basic setup of a Sequelize User model with username unique constraint and password validation using regex pattern matching.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/validations-and-constraints.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Sequelize, Op, Model, DataTypes } = require('sequelize');\nconst sequelize = new Sequelize('sqlite::memory:');\n\nconst User = sequelize.define('user', {\n  username: {\n    type: DataTypes.TEXT,\n    allowNull: false,\n    unique: true,\n  },\n  hashedPassword: {\n    type: DataTypes.STRING(64),\n    validate: {\n      is: /^[0-9a-f]{64}$/i,\n    },\n  },\n});\n\n(async () => {\n  await sequelize.sync({ force: true });\n  // Code here\n})();\n```\n\n----------------------------------------\n\nTITLE: Basic Model Definition with TypeScript Attributes\nDESCRIPTION: Shows the traditional way of defining Sequelize models with TypeScript using explicit UserAttributes and UserCreationAttributes types.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/typescript.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Model, Optional } from 'sequelize';\n\ntype UserAttributes = {\n  id: number;\n  name: string;\n  // other attributes...\n};\n\ntype UserCreationAttributes = Optional<UserAttributes, 'id'>;\n\nclass User extends Model<UserAttributes, UserCreationAttributes> {\n  declare id: number;\n  declare name: string;\n  // other attributes...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Transactions with Sequelize Model Methods\nDESCRIPTION: This code demonstrates how to use transactions with common Sequelize model methods like create and findAll. It shows the correct way to pass the transaction option to different query methods.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/transactions.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nawait User.create({ name: 'Foo Bar' }, { transaction: t });\n\nawait User.findAll({\n  where: {\n    name: 'Foo Bar',\n  },\n  transaction: t,\n});\n```\n\n----------------------------------------\n\nTITLE: Finding Record by Primary Key with findByPk in Sequelize\nDESCRIPTION: Shows how to use the findByPk method to retrieve a single record by its primary key. Returns the model instance or null if no match is found.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/select-methods.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst project: Project | null = await Project.findByPk(123);\n```\n\n----------------------------------------\n\nTITLE: Finding Single Record with findOne in Sequelize\nDESCRIPTION: Shows how to use the findOne method to retrieve the first entry matching specific criteria. This returns either a single model instance or null if no match is found.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/select-methods.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst project = await Project.findOne({ where: { title: 'My Title' } });\nif (project === null) {\n  console.log('Not found!');\n} else {\n  console.log(project instanceof Project); // true\n  console.log(project.title); // 'My Title'\n}\n```\n\n----------------------------------------\n\nTITLE: Using findOrCreate() Method in Sequelize\nDESCRIPTION: Demonstrates the usage of findOrCreate() method which creates a new record if it doesn't exist, or returns the existing one if found. It returns both the instance and a boolean indicating whether it was created.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/insert.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst [user, created] = await User.findOrCreate({\n  where: { username: 'sdepold' },\n  defaults: {\n    job: 'Technical Lead JavaScript',\n  },\n});\n\nconsole.log(user.username);\nconsole.log(user.job);\nconsole.log(created);\nif (created) {\n  console.log(user.job);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Bind Parameters in Sequelize Queries (JavaScript)\nDESCRIPTION: Shows how to use bind parameters in Sequelize queries, including positional and named bind parameters, as well as in other querying methods.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/raw-queries.mdx#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { QueryTypes } from '@sequelize/core';\n\n// This query use positional bind parameters\nawait sequelize.query('SELECT * FROM projects WHERE status = $1', {\n  bind: ['active'],\n  type: QueryTypes.SELECT,\n});\n\n// This query uses named bind parameters\nawait sequelize.query('SELECT * FROM projects WHERE status = $status', {\n  bind: { status: 'active' },\n  type: QueryTypes.SELECT,\n});\n\n// Bind parameters are also available in other querying methods\nawait Project.findAll({\n  where: {\n    status: sql`$status`,\n  },\n  bind: { status: 'active' },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging in Sequelize\nDESCRIPTION: Examples of different logging configuration options for Sequelize. Shows how to disable logging, log to console, or use a custom logging function to integrate with logging tools.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/getting-started.mdx#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst sequelize = new Sequelize({\n  dialect: SqliteDialect,\n\n  // Disables logging (default)\n  logging: false,\n\n  // Sends the logging output to the console\n  logging: console.log,\n\n  // You can also use an arbitrary function, which can be used to send logs to a logging tool\n  logging: (...msg) => console.log(msg),\n});\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Operator Examples in Sequelize\nDESCRIPTION: Extensive example showing the various operators available in Sequelize for creating complex query conditions, including comparison, pattern matching, and array operators.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-querying-basics.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Op } = require(\"sequelize\");\nPost.findAll({\n  where: {\n    [Op.and]: [{ a: 5 }, { b: 6 }],            // (a = 5) AND (b = 6)\n    [Op.or]: [{ a: 5 }, { b: 6 }],             // (a = 5) OR (b = 6)\n    someAttribute: {\n      // Basics\n      [Op.eq]: 3,                              // = 3\n      [Op.ne]: 20,                             // != 20\n      [Op.is]: null,                           // IS NULL\n      [Op.not]: true,                          // IS NOT TRUE\n      [Op.or]: [5, 6],                         // (someAttribute = 5) OR (someAttribute = 6)\n\n      // Using dialect specific column identifiers (PG in the following example):\n      [Op.col]: 'user.organization_id',        // = \"user\".\"organization_id\"\n\n      // Number comparisons\n      [Op.gt]: 6,                              // > 6\n      [Op.gte]: 6,                             // >= 6\n      [Op.lt]: 10,                             // < 10\n      [Op.lte]: 10,                            // <= 10\n      [Op.between]: [6, 10],                   // BETWEEN 6 AND 10\n      [Op.notBetween]: [11, 15],               // NOT BETWEEN 11 AND 15\n\n      // Other operators\n\n      [Op.all]: sequelize.literal('SELECT 1'), // > ALL (SELECT 1)\n\n      [Op.in]: [1, 2],                         // IN [1, 2]\n      [Op.notIn]: [1, 2],                      // NOT IN [1, 2]\n\n      [Op.like]: '%hat',                       // LIKE '%hat'\n      [Op.notLike]: '%hat',                    // NOT LIKE '%hat'\n      [Op.startsWith]: 'hat',                  // LIKE 'hat%'\n      [Op.endsWith]: 'hat',                    // LIKE '%hat'\n      [Op.substring]: 'hat',                   // LIKE '%hat%'\n      [Op.iLike]: '%hat',                      // ILIKE '%hat' (case insensitive) (PG only)\n      [Op.notILike]: '%hat',                   // NOT ILIKE '%hat'  (PG only)\n      [Op.regexp]: '^[h|a|t]',                 // REGEXP/~ '^[h|a|t]' (MySQL/PG only)\n      [Op.notRegexp]: '^[h|a|t]',              // NOT REGEXP/!~ '^[h|a|t]' (MySQL/PG only)\n      [Op.iRegexp]: '^[h|a|t]',                // ~* '^[h|a|t]' (PG only)\n      [Op.notIRegexp]: '^[h|a|t]',             // !~* '^[h|a|t]' (PG only)\n\n      [Op.any]: [2, 3],                        // ANY (ARRAY[2, 3]::INTEGER[]) (PG only)\n      [Op.match]: Sequelize.fn('to_tsquery', 'fat & rat') // match text search for strings 'fat' and 'rat' (PG only)\n\n      // In Postgres, Op.like/Op.iLike/Op.notLike can be combined to Op.any:\n      [Op.like]: { [Op.any]: ['cat', 'hat'] }  // LIKE ANY (ARRAY['cat', 'hat'])\n\n      // There are more postgres-only range operators, see below\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Association Remover in Sequelize TypeScript\nDESCRIPTION: Shows implementation of removeX methods for removing single or multiple associations. Includes both singular and plural versions with support for instance and primary key-based removal.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/belongs-to-many.md#2025-04-09_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  BelongsToManyRemoveAssociationMixin,\n  BelongsToManyRemoveAssociationsMixin,\n} from '@sequelize/core';\n\nclass Author extends Model<InferAttributes<Author>, InferCreationAttributes<Author>> {\n  @BelongsToMany(() => Book, { through: 'BookAuthor' })\n  declare books?: NonAttribute<Book[]>;\n\n  declare removeBook: BelongsToManyRemoveAssociationMixin<\n    Book,\n    Book['id']\n  >;\n\n  declare removeBooks: BelongsToManyRemoveAssociationsMixin<\n    Book,\n    Book['id']\n  >;\n}\n\nconst author = await Author.findByPk(1);\nconst [book1, book2, book3] = await Book.findAll({ limit: 3 });\n\nawait author.removeBook(book1);\n\nawait author.removeBooks([book1, book2]);\n\nawait author.removeBook(1);\nawait author.removeBooks([1, 2, 3]);\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual Attribute in Sequelize Model (TypeScript)\nDESCRIPTION: This snippet illustrates how to create a virtual attribute 'fullName' in a Sequelize User model. The virtual attribute combines 'firstName' and 'lastName' attributes.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/getters-setters-virtuals.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DataTypes } from '@sequelize/core';\n\nclass User extends Model {\n  @Attribute(DataTypes.STRING)\n  @NotNull\n  declare firstName: string;\n\n  @Attribute(DataTypes.STRING)\n  @NotNull\n  declare lastName: string;\n\n  @Attribute(DataTypes.VIRTUAL(DataTypes.STRING, ['firstName', 'lastName']))\n  get fullName(): string {\n    return `${this.firstName} ${this.lastName}`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Monitoring Connection Pool Acquisition Time\nDESCRIPTION: Implementation of pool monitoring using Sequelize hooks to track connection acquisition time. Uses WeakMap to store timing data and logs the elapsed time for each connection acquisition.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/connection-pool.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst acquireAttempts = new WeakMap();\n\nsequelize.hooks.addListener('beforePoolAcquire', options => {\n  acquireAttempts.set(options, Date.now());\n});\n\nsequelize.hooks.addListener('afterPoolAcquire', _connection, options => {\n  const elapsedTime = Date.now() - acquireAttempts.get(options);\n  console.log(`Connection acquired in ${elapsedTime}ms`);\n});\n```\n\n----------------------------------------\n\nTITLE: Automated Attribute Typing with TypeScript in Sequelize Models\nDESCRIPTION: This code snippet demonstrates how to use InferAttributes and InferCreationAttributes generics to automatically infer types from model properties. It shows how to define a User model with typed attributes using decorators, and explains the CreationOptional type for marking attributes that are optional during creation.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/model-typing.mdx#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Attribute, PrimaryKey, AutoIncrement, NotNull } from '@sequelize/core/decorators-legacy';\nimport { Model, InferAttributes, InferCreationAttributes, CreationOptional } from '@sequelize/core';\n\n// order of InferAttributes & InferCreationAttributes is important.\nexport class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n  @Attribute(DataTypes.INTEGER)\n  @PrimaryKey\n  @AutoIncrement\n  // 'CreationOptional' is a special type that marks the attribute as optional\n  // when creating an instance of the model (such as using Model.create()).\n  declare id: CreationOptional<number>;\n\n  @Attribute(DataTypes.STRING)\n  @NotNull\n  declare name: string;\n}\n\n// TypeScript will now be able to catch errors such as this typo:\n// error-next-line\nawait User.create({ nAme: 'john' });\n```\n\n----------------------------------------\n\nTITLE: Basic Model Synchronization in Sequelize\nDESCRIPTION: Demonstrates how to synchronize a single model with the database using force option, which recreates the table.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/model-synchronization.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait User.sync({ force: true });\nconsole.log('The table for the User model was just (re)created!');\n```\n\n----------------------------------------\n\nTITLE: Querying Nested JSON Properties with Sequelize\nDESCRIPTION: Demonstrates how to query nested JSON properties using the dot notation in Sequelize. This example searches for users with a specific country in their JSON address field.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/json.mdx#2025-04-09_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nUser.findAll({\n  where: {\n    'jsonAttribute.address.country': 'Belgium',\n  },\n});\n```\n\nLANGUAGE: SQL\nCODE:\n```\n-- postgres\n\"jsonAttribute\"#>ARRAY['address','country'] = '\"Belgium\"';\n\n-- mysql & friends\nJSON_EXTRACT(`jsonAttribute`, '$.address.country') = '\"Belgium\"';\n```\n\n----------------------------------------\n\nTITLE: Configuring Sequelize Connection Pool\nDESCRIPTION: Example of configuring the connection pool options when initializing Sequelize. Shows how to set maximum and minimum pool size, connection acquisition timeout, and idle connection timeout.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/connection-pool.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst sequelize = new Sequelize({\n  // ...\n  pool: {\n    max: 5,\n    min: 0,\n    acquire: 30000,\n    idle: 10000,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Dropping Single Table in Sequelize\nDESCRIPTION: Demonstrates how to drop a single table associated with a model using the drop() method.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/model-synchronization.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait User.drop();\nconsole.log('User table dropped!');\n```\n\n----------------------------------------\n\nTITLE: Lazy-loading Comments from Articles in a Polymorphic Association with Sequelize\nDESCRIPTION: This code snippet shows how to lazy-load comments from an article in a polymorphic association. After retrieving the article, the getComments method is used to fetch only the comments that belong to this specific article.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/polymorphic-associations.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst article = await Article.findOne();\n\n// this will only include the comments that belong to this article\nconst comments = await article.getComments();\n```\n\n----------------------------------------\n\nTITLE: Increment/Decrement Values in Sequelize\nDESCRIPTION: Demonstrates how to safely increment or decrement numeric values using increment() and decrement() methods.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/update.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst jane = await User.create({ name: 'Jane', age: 100 });\nconst incrementResult = await jane.increment('age', { by: 2 });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst jane = await User.create({ name: 'Jane', age: 100, cash: 5000 });\nawait jane.increment({\n  age: 2,\n  cash: 100,\n});\n\n// If the values are incremented by the same amount, you can use this other syntax as well:\nawait jane.increment(['age', 'cash'], { by: 2 });\n```\n\n----------------------------------------\n\nTITLE: Installing Sequelize CLI\nDESCRIPTION: Command to install the Sequelize Command Line Interface as a development dependency.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/migrations.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nnpm install --save-dev sequelize-cli\n```\n\n----------------------------------------\n\nTITLE: Defining HasMany Association in Sequelize with TypeScript\nDESCRIPTION: This code demonstrates how to define a One-To-Many relationship between Post and Comment models using the HasMany decorator. The Post model has many comments, while a Comment belongs to a single Post.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/has-many.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Model,\n  DataTypes,\n  InferAttributes,\n  InferCreationAttributes,\n  CreationOptional,\n  NonAttribute,\n} from '@sequelize/core';\nimport {\n  PrimaryKey,\n  Attribute,\n  AutoIncrement,\n  NotNull,\n  HasMany,\n  BelongsTo,\n} from '@sequelize/core/decorators-legacy';\n\nclass Post extends Model<InferAttributes<Post>, InferCreationAttributes<Post>> {\n  @Attribute(DataTypes.INTEGER)\n  @AutoIncrement\n  @PrimaryKey\n  declare id: CreationOptional<number>;\n\n  // highlight-start\n  @HasMany(() => Comment, /* foreign key */ 'postId')\n  declare comments?: NonAttribute<Comment[]>;\n  // highlight-end\n}\n\nclass Comment extends Model<InferAttributes<Comment>, InferCreationAttributes<Comment>> {\n  @Attribute(DataTypes.INTEGER)\n  @AutoIncrement\n  @PrimaryKey\n  declare id: CreationOptional<number>;\n\n  // highlight-start\n  // This is the foreign key\n  @Attribute(DataTypes.INTEGER)\n  @NotNull\n  declare postId: number;\n  // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronizing All Models in Sequelize\nDESCRIPTION: Shows how to synchronize all models at once using sequelize.sync() with force option.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/model-synchronization.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait sequelize.sync({ force: true });\nconsole.log('All models were synchronized successfully.');\n```\n\n----------------------------------------\n\nTITLE: Defining Composite Primary Keys in Sequelize Models\nDESCRIPTION: This snippet shows how to create composite primary keys in Sequelize models using the @PrimaryKey decorator on multiple attributes for both TypeScript and JavaScript.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/defining-models.mdx#2025-04-09_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DataTypes, Model, InferAttributes, InferCreationAttributes } from '@sequelize/core';\nimport { Attribute, PrimaryKey } from '@sequelize/core/decorators-legacy';\n\nclass UserRole extends Model<InferAttributes<UserRole>, InferCreationAttributes<UserRole>> {\n  @Attribute(DataTypes.INTEGER)\n  @PrimaryKey\n  declare userId: number;\n\n  @Attribute(DataTypes.INTEGER)\n  @PrimaryKey\n  declare roleId: number;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DataTypes, Model } from '@sequelize/core';\nimport { Attribute, PrimaryKey } from '@sequelize/core/decorators-legacy';\n\nclass UserRole extends Model {\n  @Attribute(DataTypes.INTEGER)\n  @PrimaryKey\n  userId;\n\n  @Attribute(DataTypes.INTEGER)\n  @PrimaryKey\n  roleId;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Replacements in Sequelize Queries (JavaScript)\nDESCRIPTION: Demonstrates different ways to use replacements in Sequelize queries, including positional, named, and sql tag replacements.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/raw-queries.mdx#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { QueryTypes } from '@sequelize/core';\n\n// This query uses positional replacements\nawait sequelize.query('SELECT * FROM projects WHERE status = ?', {\n  replacements: ['active'],\n});\n\n// This query uses named replacements\nawait sequelize.query('SELECT * FROM projects WHERE status = :status', {\n  replacements: { status: 'active' },\n});\n\n// This query use replacements added by the sql tag\nawait sequelize.query(sql`SELECT * FROM projects WHERE status = ${'active'}`);\n\n// Replacements are also available in other querying methods\nawait Project.findAll({\n  where: {\n    status: sql`:status`,\n  },\n  replacements: { status: 'active' },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring maxPreparedStatements in Sequelize Constructor (TypeScript)\nDESCRIPTION: This snippet demonstrates how to set the maxPreparedStatements option in the Sequelize constructor to avoid exceeding the MySQL server's max_prepared_stmt_count limit. This configuration helps prevent errors related to creating too many prepared statements.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/faq.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst sequelize = new Sequelize({\n  // ...\n  dialectOptions: {\n    maxPreparedStatements: 100,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Database Schema for Sequelize Models\nDESCRIPTION: This example demonstrates how to specify a database schema for a Sequelize model using the @Table decorator and how to set a default schema for all models.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/defining-models.mdx#2025-04-09_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Model } from '@sequelize/core';\nimport { Table } from '@sequelize/core/decorators-legacy';\n\n@Table({ schema: 'public' })\nexport class User extends Model {}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Model, Sequelize } from '@sequelize/core';\nimport { SqliteDialect } from '@sequelize/sqlite3';\n\nclass User extends Model {}\n\nconst sequelize = new Sequelize({\n  dialect: SqliteDialect,\n  schema: 'public',\n  models: [User],\n});\n```\n\n----------------------------------------\n\nTITLE: Where Clause with Primary Key in Sequelize 7\nDESCRIPTION: In Sequelize 7, the 'where' option no longer accepts primitives as implicit primary key comparisons. Use findByPk or explicitly specify the attribute to compare against.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/upgrade.md#2025-04-09_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nUser.findAll({\n  where: 1,\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM users WHERE id = 1\n```\n\nLANGUAGE: typescript\nCODE:\n```\nUser.findAll({\n  where: {\n    id: 1,\n  },\n});\n\n// or\n\nUser.findByPk(1);\n```\n\n----------------------------------------\n\nTITLE: Using Association Getter Method in BelongsToMany Relationship\nDESCRIPTION: This snippet demonstrates how to declare and use the association getter method generated by a BelongsToMany association. It shows the TypeScript type for the getter method and an example of how to use it to fetch associated models.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/belongs-to-many.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BelongsToManyGetAssociationsMixin } from '@sequelize/core';\n\nclass Author extends Model<InferAttributes<Author>, InferCreationAttributes<Author>> {\n  @BelongsToMany(() => Book, { through: 'BookAuthor' })\n  declare books?: NonAttribute<Book[]>;\n\n  declare getBooks: BelongsToManyGetAssociationsMixin<Book>;\n}\n\n// ...\n\nconst author = await Author.findByPk(1);\n\nconst books: Book[] = await author.getBooks();\n```\n\n----------------------------------------\n\nTITLE: Importing Sequelize Data Types\nDESCRIPTION: This snippet shows how to import the built-in data types from Sequelize.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-basics.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst { DataTypes } = require('sequelize'); // Import the built-in data types\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL dialect package for Sequelize\nDESCRIPTION: Command to install the PostgreSQL dialect package for Sequelize using npm or yarn.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/databases/postgres.mdx#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @sequelize/postgres\n```\n\n----------------------------------------\n\nTITLE: Customizing Junction Table in BelongsToMany Association\nDESCRIPTION: This code snippet shows how to customize the junction table in a BelongsToMany association by defining a separate model for the junction table. It demonstrates how to declare foreign keys in the junction model.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/belongs-to-many.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Model, InferAttributes, InferCreationAttributes, NonAttribute } from '@sequelize/core';\nimport { BelongsToMany } from '@sequelize/core/decorators-legacy';\n\nclass Person extends Model<InferAttributes<Person>, InferCreationAttributes<Person>> {\n  @BelongsToMany(() => Toot, {\n    through: () => LikedToot,\n  })\n  declare likedToots?: NonAttribute<Toot[]>;\n}\n\nclass LikedToot extends Model<InferAttributes<LikedToot>, InferCreationAttributes<LikedToot>> {\n  declare likerId: number;\n  declare likedTootId: number;\n}\n\nclass Toot extends Model<InferAttributes<Toot>, InferCreationAttributes<Toot>> {}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Database Configuration\nDESCRIPTION: Environment-specific database configuration with SSL and dialect options\nSOURCE: https://github.com/sequelize/website/blob/main/docs/cli.md#2025-04-09_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('fs');\n\nmodule.exports = {\n  development: {\n    username: 'database_dev',\n    password: 'database_dev',\n    database: 'database_dev',\n    host: '127.0.0.1',\n    port: 3306,\n    dialect: 'mysql',\n    dialectOptions: {\n      bigNumberStrings: true\n    }\n  },\n  test: {\n    username: process.env.CI_DB_USERNAME,\n    password: process.env.CI_DB_PASSWORD,\n    database: process.env.CI_DB_NAME,\n    host: '127.0.0.1',\n    port: 3306,\n    dialect: 'mysql',\n    dialectOptions: {\n      bigNumberStrings: true\n    }\n  },\n  production: {\n    username: process.env.PROD_DB_USERNAME,\n    password: process.env.PROD_DB_PASSWORD,\n    database: process.env.PROD_DB_NAME,\n    host: process.env.PROD_DB_HOSTNAME,\n    port: process.env.PROD_DB_PORT,\n    dialect: 'mysql',\n    dialectOptions: {\n      bigNumberStrings: true,\n      ssl: {\n        ca: fs.readFileSync(__dirname + '/mysql-ca-main.crt')\n      }\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Junction Table Attributes in Many-to-Many Eager Loading\nDESCRIPTION: Demonstrates how to specify which attributes to fetch from the junction table when eager loading a Many-to-Many relationship, using the 'attributes' option inside the 'through' configuration.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/eager-loading.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nFoo.findAll({\n  include: [\n    {\n      model: Bar,\n      through: {\n        attributes: [\n          /* list the wanted attributes here */\n        ],\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values in Sequelize Models\nDESCRIPTION: This snippet demonstrates how to set default values for model attributes using the @Default decorator in both TypeScript and JavaScript.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/defining-models.mdx#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  DataTypes,\n  Model,\n  InferAttributes,\n  InferCreationAttributes,\n  CreationOptional,\n} from '@sequelize/core';\nimport { Attribute, NotNull, Default } from '@sequelize/core/decorators-legacy';\n\nclass User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n  @Attribute(DataTypes.STRING)\n  @NotNull\n  @Default('John')\n  declare firstName: CreationOptional<string>;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DataTypes, Model } from '@sequelize/core';\nimport { Attribute, NotNull, Default } from '@sequelize/core/decorators-legacy';\n\nclass User extends Model {\n  @Attribute(DataTypes.STRING)\n  @NotNull\n  @Default('John')\n  firstName;\n}\n```\n\n----------------------------------------\n\nTITLE: Using SQL Tag for Raw Queries in Sequelize (TypeScript)\nDESCRIPTION: Demonstrates how to use the 'sql' tag to write raw SQL queries in Sequelize, with automatic variable escaping to prevent SQL injection.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/raw-queries.mdx#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sql } from '@sequelize/core';\n\nconst id = 5;\n\nawait sequelize.query(sql`SELECT * FROM users WHERE id = ${id}`);\n```\n\n----------------------------------------\n\nTITLE: Model Definition with Foreign Keys\nDESCRIPTION: Demonstrates how to properly type foreign key attributes in TypeScript models using the ForeignKey utility type.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/typescript.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Model, InferAttributes, InferCreationAttributes, DataTypes, ForeignKey } from 'sequelize';\n\nclass Project extends Model<InferAttributes<Project>, InferCreationAttributes<Project>> {\n  id: number;\n  userId: ForeignKey<number>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User and Profile Models in Sequelize\nDESCRIPTION: This snippet demonstrates how to define two Sequelize models: User and Profile. These models will be used to establish a Many-to-Many relationship.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/advanced-many-to-many.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst User = sequelize.define(\n  'user',\n  {\n    username: DataTypes.STRING,\n    points: DataTypes.INTEGER,\n  },\n  { timestamps: false },\n);\nconst Profile = sequelize.define(\n  'profile',\n  {\n    name: DataTypes.STRING,\n  },\n  { timestamps: false },\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Unmanaged Transactions in Sequelize with JavaScript\nDESCRIPTION: Demonstrates the use of unmanaged transactions in Sequelize, where the developer is responsible for manually committing or rolling back the transaction. This approach offers more control but requires careful error handling.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/transactions.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// First, we start a transaction and save it into a variable\nconst transaction = await sequelize.startUnmanagedTransaction();\n\ntry {\n  // Then, we do some calls passing this transaction as an option:\n\n  const user = await User.create(\n    {\n      firstName: 'Bart',\n      lastName: 'Simpson',\n    },\n    { transaction },\n  );\n\n  await user.addSibling(\n    {\n      firstName: 'Lisa',\n      lastName: 'Simpson',\n    },\n    { transaction },\n  );\n\n  // If the execution reaches this line, no errors were thrown.\n  // We commit the transaction.\n  await t.commit();\n} catch (error) {\n  // If the execution reaches this line, an error was thrown.\n  // We rollback the transaction.\n  await t.rollback();\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Model Instance\nDESCRIPTION: Shows how to update a model instance by changing its properties and calling save(). Also demonstrates using the set() method to update multiple fields at once.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-instances.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst jane = await User.create({ name: 'Jane' });\nconsole.log(jane.name); // \"Jane\"\njane.name = 'Ada';\n// the name is still \"Jane\" in the database\nawait jane.save();\n// Now the name was updated to \"Ada\" in the database!\n\njane.set({\n  name: 'Ada',\n  favoriteColor: 'blue',\n});\n// As above, the database still has \"Jane\" and \"green\"\nawait jane.save();\n// The database now has \"Ada\" and \"blue\" for name and favorite color\n```\n\n----------------------------------------\n\nTITLE: Configuring Read Replication in Sequelize with MySQL\nDESCRIPTION: This snippet demonstrates how to set up read replication in Sequelize using MySQL. It configures multiple read replicas and a single write server, along with connection pooling options. The code shows how to specify different credentials for each replica and inherit common settings.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/read-replication.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MySqlDialect } from '@sequelize/mysql';\n\nconst sequelize = new Sequelize({\n  dialect: MySqlDialect,\n  // Note: connection options that are not specified in \"replication\" will be inherited from the top level options\n  port: 3306,\n  database: 'database',\n  replication: {\n    read: [\n      {\n        host: '8.8.8.8',\n        user: 'read-1-username',\n        password: process.env.READ_DB_1_PW,\n      },\n      {\n        host: '9.9.9.9',\n        user: 'read-2-username',\n        password: process.env.READ_DB_2_PW,\n      },\n    ],\n    write: {\n      host: '1.1.1.1',\n      user: 'write-username',\n      password: process.env.WRITE_DB_PW,\n    },\n  },\n  pool: {\n    // If you want to override the options used for the read/write pool you can do so here\n    max: 20,\n    idle: 30000,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Sequelize Models\nDESCRIPTION: This snippet demonstrates how to initialize Sequelize models by passing them to the Sequelize constructor. It shows both manual initialization and dynamic loading using importModels.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/defining-models.mdx#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Sequelize } from '@sequelize/core';\nimport { SqliteDialect } from '@sequelize/sqlite3';\nimport { User } from './models/user.model.js';\n\nexport const sequelize = new Sequelize({\n  dialect: SqliteDialect,\n  // add all your models here\n  models: [User],\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Sequelize, importModels } from '@sequelize/core';\nimport { SqliteDialect } from '@sequelize/sqlite3';\nimport { fileURLToPath } from 'node:url';\nimport { dirname } from 'node:path';\n\nconst __dirname = dirname(fileURLToPath(import.meta.url));\n\nexport const sequelize = new Sequelize({\n  dialect: SqliteDialect,\n  // this will load all model classes found in files matching this glob pattern.\n  models: await importModels(__dirname + '/**/*.model.{ts,js}'),\n});\n```\n\n----------------------------------------\n\nTITLE: Filtered Eager Loading in Sequelize\nDESCRIPTION: Demonstrates filtering associated models during eager loading using where conditions and handling nested relationships.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/eager-loading.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nUser.findAll({\n  include: {\n    model: Tool,\n    as: 'Instruments',\n    where: {\n      size: {\n        [Op.ne]: 'small',\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining ENUM Data Type in Sequelize Models\nDESCRIPTION: Shows how to use the ENUM data type in Sequelize, which allows only specific values from a predefined list. Only supported in PostgreSQL, MariaDB, and MySQL dialects.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/data-types.mdx#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nDataTypes.ENUM('foo', 'bar'); // An ENUM with allowed values 'foo' and 'bar'\n```\n\n----------------------------------------\n\nTITLE: Defining Paranoid Model in TypeScript\nDESCRIPTION: Shows how to define a paranoid model using TypeScript decorators in Sequelize. The model includes a deletedAt attribute marked with @DeletedAt decorator to enable soft-deletion functionality.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/paranoid.mdx#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InferCreationAttributes, InferAttributes, Model } from '@sequelize/core';\nimport { DeletedAt } from '@sequelize/core/decorators-legacy';\n\nclass User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n  @DeletedAt\n  declare deletedAt: Date | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Sequelize and Defining a User Model\nDESCRIPTION: Sets up a Sequelize instance with SQLite in-memory database and defines a User model with various fields. This serves as the base setup for subsequent examples.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-instances.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Sequelize, Model, DataTypes } = require('sequelize');\nconst sequelize = new Sequelize('sqlite::memory:');\n\nconst User = sequelize.define('user', {\n  name: DataTypes.TEXT,\n  favoriteColor: {\n    type: DataTypes.TEXT,\n    defaultValue: 'green',\n  },\n  age: DataTypes.INTEGER,\n  cash: DataTypes.INTEGER,\n});\n\n(async () => {\n  await sequelize.sync({ force: true });\n  // Code here\n})();\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Timestamp Attributes in Sequelize Model\nDESCRIPTION: Shows how to properly type the auto-generated timestamp attributes in a Sequelize model using TypeScript.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/auto-timestamps.mdx#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InferCreationAttributes, InferAttributes, Model, CreationOptional } from '@sequelize/core';\n\nclass User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n  declare createdAt: CreationOptional<Date>;\n  declare updatedAt: CreationOptional<Date>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Read-Only Transactions for Read Replicas (TypeScript)\nDESCRIPTION: Demonstrates how to create read-only transactions that are directed to read replicas instead of the primary database server. This helps distribute database load.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/transactions.md#2025-04-09_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nawait sequelize.transaction(\n  {\n    readOnly: true,\n  },\n  async t => {\n    // Your code\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: OR Operator in Sequelize WHERE Clauses\nDESCRIPTION: Example showing how to use the Op.or operator to create OR conditions in Sequelize queries, allowing for more complex filtering logic.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-querying-basics.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Op } = require('sequelize');\nPost.findAll({\n  where: {\n    [Op.or]: [{ authorId: 12 }, { authorId: 13 }],\n  },\n});\n// SELECT * FROM post WHERE authorId = 12 OR authorId = 13;\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic SQL Default Values in Sequelize Models\nDESCRIPTION: This snippet demonstrates how to use SQL functions as default values in Sequelize models using the sql.fn method. It shows the implementation for both TypeScript and JavaScript.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/defining-models.mdx#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  DataTypes,\n  Model,\n  sql,\n  InferAttributes,\n  InferCreationAttributes,\n  CreationOptional,\n} from '@sequelize/core';\nimport { Attribute, Default } from '@sequelize/core/decorators-legacy';\n\nclass User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n  @Attribute(DataTypes.FLOAT)\n  @Default(sql.fn('random'))\n  declare randomNumber: CreationOptional<number>;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DataTypes, Model, sql } from '@sequelize/core';\nimport { Attribute, Default } from '@sequelize/core/decorators-legacy';\n\nclass User extends Model {\n  @Attribute(DataTypes.FLOAT)\n  @Default(sql.fn('random'))\n  randomNumber;\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Table Creation Migration\nDESCRIPTION: Migration example showing how to create a simple table with basic columns.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/cli.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { DataTypes } = require('@sequelize/core');\n\nmodule.exports = {\n  up: (queryInterface, Sequelize) => {\n    return queryInterface.createTable('Person', {\n      name: DataTypes.STRING,\n      isBetaMember: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n        allowNull: false,\n      },\n    });\n  },\n  down: (queryInterface, Sequelize) => {\n    return queryInterface.dropTable('Person');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using sql.jsonPath for JSON Property Extraction\nDESCRIPTION: The sql.jsonPath function extracts JSON properties from JSON values in a database-agnostic way. It supports nested object and array access using a combination of strings and numbers in the path array.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/raw-queries.mdx#2025-04-09_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nsequelize.query(sql`\n  SELECT ${sql.jsonPath(sql.identifier('data'), ['addresses', 0, 'country'])} AS country\n  FROM users\n`);\n```\n\nLANGUAGE: sql\nCODE:\n```\n-- postgres\nSELECT data#>ARRAY['addresses', '0', 'country'] AS country FROM users\n-- other dialects\nSELECT JSON_EXTRACT(data, '$.addresses[0].country') AS country FROM users\n```\n\n----------------------------------------\n\nTITLE: Importing Sequelize DataTypes\nDESCRIPTION: Shows how to import the built-in data types from the Sequelize core module. This import is required to access and use any of Sequelize's data types in your models.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/data-types.mdx#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Import the built-in data types\nimport { DataTypes } from '@sequelize/core';\n```\n\n----------------------------------------\n\nTITLE: Implementing Concrete Table Inheritance in Sequelize with TypeScript\nDESCRIPTION: Demonstrates how to implement Concrete Table Inheritance in Sequelize by creating an abstract Player model and extending it with Footballer, Cricketer, and Bowler models. Shows proper model definition with decorators and type inference.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/inheritance.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Model, InferAttributes, InferCreationAttributes } from '@sequelize/core';\nimport { Attribute, Default, PrimaryKey, NotNull } from '@sequelize/core/decorators-legacy';\nimport { SqliteDialect } from '@sequelize/sqlite3';\n\n@Table.Abstract\nclass Player<M extends Player = Player> extends Model<\n  InferAttributes<M>,\n  InferCreationAttributes<M>\n> {\n  @Attribute(DataTypes.STRING)\n  @NotNull\n  declare name: string;\n}\n\nclass Footballer extends Player<Footballer> {\n  @Attribute(DataTypes.STRING)\n  @NotNull\n  declare club: string;\n}\n\nclass Cricketer<M extends Cricketer = Cricketer> extends Player<M> {\n  @Attribute(DataTypes.INTEGER)\n  @NotNull\n  declare battingAverage: number;\n}\n\nclass Bowler extends Cricketer<Bowler> {\n  @Attribute(DataTypes.INTEGER)\n  @NotNull\n  declare bowlingAverage: number;\n}\n\nconst sequelize = new Sequelize({\n  dialect: SqliteDialect,\n  models: [Footballer, Cricketer],\n});\n```\n\n----------------------------------------\n\nTITLE: Using Concurrent Transactions in Sequelize\nDESCRIPTION: Shows how to use concurrent transactions by starting multiple transactions simultaneously and specifying which transaction each query should use. This example creates two users in different transactions.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/transactions.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nsequelize.transaction(t1 => {\n  return sequelize.transaction({ nestMode: TransactionNestMode.separate }, t2 => {\n    // Queries in this block will use the transaction t2 by default,\n    // but you can specify which transaction must be used\n    // by using the `transaction` option.\n    return Promise.all([\n      // runs query in transaction t1\n      User.create({ name: 'Mallory' }, { transaction: t1 }),\n      // runs query in transaction t2 (the default)\n      User.create({ name: 'Mallory' }, { transaction: t2 }),\n    ]);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Association Creator Method for BelongsTo in TypeScript\nDESCRIPTION: Example demonstrating how to use the creator method added by BelongsTo association to create a new associated model and automatically set the relationship, though this approach is noted as inefficient.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/belongs-to.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BelongsToCreateAssociationMixin } from '@sequelize/core';\n\nclass Comment extends Model {\n  @BelongsTo(() => Post, 'postId')\n  declare post?: NonAttribute<Post>;\n\n  // highlight-start\n  declare createPost: BelongsToCreateAssociationMixin<Post>;\n  // highlight-end\n}\n\nconst comment = await Comment.create({ content: 'This is a comment' });\n\n// highlight-start\nconst post = await comment.createPost({\n  title: 'New Post',\n  content: 'This is a new post',\n});\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Connection in Sequelize\nDESCRIPTION: Example of creating a Sequelize instance with MySQL dialect and custom connection options. The dialectOptions parameter allows passing options directly to the mysql2 connector.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/dialect-specific-things.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst sequelize = new Sequelize('database', 'username', 'password', {\n  dialect: 'mysql',\n  dialectOptions: {\n    // Your mysql2 options here\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Default Date Value with DataTypes.NOW in Sequelize\nDESCRIPTION: Demonstrates how to use the DataTypes.NOW default value for date fields in Sequelize models. This creates a timestamp using the appropriate native SQL function for your database dialect.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/data-types.mdx#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nMyModel.init({\n  myDate: {\n    type: DataTypes.DATE,\n    defaultValue: DataTypes.NOW,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Models with Unique Fields for hasOne and hasMany Associations in Sequelize\nDESCRIPTION: This snippet defines Foo, Bar, and Baz models with unique constraints on specific fields to support custom association references for hasOne and hasMany relationships.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/assocs.md#2025-04-09_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst Foo = sequelize.define(\n  'foo',\n  {\n    name: { type: DataTypes.TEXT, unique: true },\n  },\n  { timestamps: false },\n);\nconst Bar = sequelize.define(\n  'bar',\n  {\n    title: { type: DataTypes.TEXT, unique: true },\n  },\n  { timestamps: false },\n);\nconst Baz = sequelize.define('baz', { summary: DataTypes.TEXT }, { timestamps: false });\n```\n\n----------------------------------------\n\nTITLE: Adding Check Constraint Using QueryInterface in Sequelize\nDESCRIPTION: Example showing how to add a check constraint to a User model after table creation using the QueryInterface. The constraint ensures email addresses end with '@sequelizejs.com'.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/validations-and-constraints.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Sequelize, Model, InferAttributes, InferCreationAttributes } from '@sequelize/core';\nimport { NotNull, Attribute, AfterSync } from '@sequelize/core/decorators-legacy';\nimport { SqliteDialect } from '@sequelize/sqlite3';\n\nclass User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n  @Attribute(DataTypes.STRING)\n  @NotNull\n  declare email: string;\n\n  @AfterSync\n  static async onSync() {\n    await this.sequelize.queryInterface.addConstraint(this.table, {\n      fields: ['email'],\n      type: 'check',\n      where: {\n        email: {\n          [Op.like]: '%@sequelizejs.com',\n        },\n      },\n    });\n  }\n}\n\nconst sequelize = new Sequelize({\n  dialect: SqliteDialect,\n  models: [User],\n});\n\nawait sequelize.sync();\n```\n\n----------------------------------------\n\nTITLE: Defining BelongsTo Association for One-To-One Relationship in TypeScript\nDESCRIPTION: Example showing how to create a BelongsTo association between DrivingLicense and Person models, implementing a One-To-One relationship where a license belongs to a person.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/belongs-to.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Model,\n  DataTypes,\n  InferAttributes,\n  InferCreationAttributes,\n  CreationOptional,\n  NonAttribute,\n} from '@sequelize/core';\nimport {\n  PrimaryKey,\n  Attribute,\n  AutoIncrement,\n  NotNull,\n  HasOne,\n  BelongsTo,\n} from '@sequelize/core/decorators-legacy';\n\nclass Person extends Model<InferAttributes<Person>, InferCreationAttributes<Person>> {\n  @Attribute(DataTypes.INTEGER)\n  @AutoIncrement\n  @PrimaryKey\n  declare id: CreationOptional<number>;\n}\n\nclass DrivingLicense extends Model<\n  InferAttributes<DrivingLicense>,\n  InferCreationAttributes<DrivingLicense>\n> {\n  @Attribute(DataTypes.INTEGER)\n  @AutoIncrement\n  @PrimaryKey\n  declare id: CreationOptional<number>;\n\n  // highlight-start\n  @BelongsTo(() => Person, /* foreign key */ 'ownerId')\n  declare owner?: NonAttribute<Person>;\n\n  // This is the foreign key\n  @Attribute(DataTypes.INTEGER)\n  @NotNull\n  declare ownerId: number;\n  // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Using sql.where for Generating SQL Conditions\nDESCRIPTION: The sql.where function generates SQL conditions from JavaScript objects, using the same syntax as the 'where' option in findAll. It can also be used to create conditions with non-attribute left operands.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/raw-queries.mdx#2025-04-09_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst where = {\n  status: 'active',\n  funding: 'funded',\n};\n\nawait sequelize.query(sql`SELECT * FROM projects WHERE ${sql.where(where)}`);\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM projects WHERE status = 'active' AND funding = 'funded'\n```\n\nLANGUAGE: typescript\nCODE:\n```\nPost.findAll({\n  where: sql.where(new Date('2012-01-01'), Op.between, [\n    sql.attribute('createdAt'),\n    sql.attribute('publishedAt'),\n  ]),\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\n-- The left operand is a literal value, and the right operands are column names\n-- Something that is not possible to do with the POJO where syntax.\nSELECT * FROM \"projects\" WHERE '2012-01-01' BETWEEN \"createdAt\" AND \"publishedAt\"\n```\n\n----------------------------------------\n\nTITLE: Defining UUID Field with Automatic Generation in Sequelize Models\nDESCRIPTION: Shows how to create a UUID field with automatic value generation in Sequelize models. Uses sql.uuidV4 (or sql.uuidV1) as the default value to generate UUIDs automatically.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/data-types.mdx#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nMyModel.init({\n  myUuid: {\n    type: DataTypes.UUID.V4,\n    defaultValue: sql.uuidV4, // Or sql.uuidV1\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Default Values in Sequelize Models\nDESCRIPTION: This snippet shows how to set dynamic default values for model attributes using functions and built-in defaults like DataTypes.NOW in both TypeScript and JavaScript.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/defining-models.mdx#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport uniqid from 'uniqid';\nimport {\n  DataTypes,\n  Model,\n  InferAttributes,\n  InferCreationAttributes,\n  CreationOptional,\n} from '@sequelize/core';\nimport { Attribute, NotNull, Default, PrimaryKey } from '@sequelize/core/decorators-legacy';\n\nclass User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n  @PrimaryKey\n  @Attribute(DataTypes.STRING(18))\n  @Default(() => uniqid())\n  declare id: CreationOptional<string>;\n\n  @Attribute(DataTypes.DATE)\n  @NotNull\n  @Default(DataTypes.NOW)\n  declare registeredAt: CreationOptional<Date>;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport uniqid from 'uniqid';\nimport { DataTypes, Model } from '@sequelize/core';\nimport { Attribute, NotNull, Default, PrimaryKey } from '@sequelize/core/decorators-legacy';\n\nclass User extends Model {\n  @PrimaryKey\n  @Attribute(DataTypes.STRING(18))\n  @Default(() => uniqid())\n  id;\n\n  @Attribute(DataTypes.DATE)\n  @NotNull\n  @Default(DataTypes.NOW)\n  registeredAt;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Raw SQL in Sequelize findAll Method (TypeScript)\nDESCRIPTION: Shows how to incorporate raw SQL into the 'where' clause of a Sequelize findAll query using the 'sql' tag.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/raw-queries.mdx#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sql } from '@sequelize/core';\n\nconst id = 5;\n\nconst users = await User.findAll({\n  where: sql`id = ${id}`,\n});\n```\n\n----------------------------------------\n\nTITLE: Sequelize Query with Subquery for Counting Reactions\nDESCRIPTION: This Sequelize query uses the 'attributes' option with 'sequelize.literal' to include a subquery that counts 'Laugh' reactions for each post. It demonstrates how to integrate raw SQL within a Sequelize query.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/sub-queries.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPost.findAll({\n  attributes: {\n    include: [\n      [\n        sequelize.literal(`(\n                    SELECT COUNT(*)\n                    FROM reactions AS reaction\n                    WHERE\n                        reaction.postId = post.id\n                        AND\n                        reaction.type = \"Laugh\"\n                )`),\n        'laughReactionsCount',\n      ],\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Connection in Sequelize\nDESCRIPTION: Example of creating a Sequelize instance with PostgreSQL dialect and custom connection options. The dialectOptions parameter allows configuring PostgreSQL-specific settings like SSL, statement timeout, and client encoding.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/dialect-specific-things.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst sequelize = new Sequelize('database', 'username', 'password', {\n  dialect: 'postgres',\n  dialectOptions: {\n    // Your pg options here\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom SOMETYPE Datatype in Sequelize\nDESCRIPTION: This snippet demonstrates how to create a custom datatype called 'SOMETYPE' in Sequelize. It includes the implementation of required methods like toSql, validate, _sanitize, _stringify, and parse. The new datatype is then added to Sequelize's DataTypes object.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/extending-data-types.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Sequelize, DataTypes, Utils } = require('Sequelize');\ncreateTheNewDataType();\nconst sequelize = new Sequelize('sqlite::memory:');\n\nfunction createTheNewDataType() {\n  class SOMETYPE extends DataTypes.ABSTRACT {\n    // Mandatory: complete definition of the new type in the database\n    toSql() {\n      return 'INTEGER(11) UNSIGNED ZEROFILL';\n    }\n\n    // Optional: validator function\n    validate(value, options) {\n      return typeof value === 'number' && !Number.isNaN(value);\n    }\n\n    // Optional: sanitizer\n    _sanitize(value) {\n      // Force all numbers to be positive\n      return value < 0 ? 0 : Math.round(value);\n    }\n\n    // Optional: value stringifier before sending to database\n    _stringify(value) {\n      return value.toString();\n    }\n\n    // Optional: parser for values received from the database\n    static parse(value) {\n      return Number.parseInt(value);\n    }\n  }\n\n  // Mandatory: set the type key\n  SOMETYPE.prototype.key = SOMETYPE.key = 'SOMETYPE';\n\n  // Mandatory: add the new type to DataTypes. Optionally wrap it on `Utils.classToInvokable` to\n  // be able to use this datatype directly without having to call `new` on it.\n  DataTypes.SOMETYPE = Utils.classToInvokable(SOMETYPE);\n\n  // Optional: disable escaping after stringifier. Do this at your own risk, since this opens opportunity for SQL injections.\n  // DataTypes.SOMETYPE.escape = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Nullability Validation in Sequelize Model\nDESCRIPTION: Example showing how to create a User model with custom validation logic using TypeScript decorators. The model implements a custom validator that only allows name to be null when age is 10.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/validations-and-constraints.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Model, DataTypes } from '@sequelize/core';\nimport { Attribute, NotNull } from '@sequelize/core/decorators-legacy';\nimport { IsEmail } from '@sequelize/validator.js';\n\nclass User extends Model {\n  @Attribute(DataTypes.STRING)\n  declare name: string | null;\n\n  @Attribute(DataTypes.INTEGER)\n  declare age: number;\n\n  @ModelValidator\n  onValidate() {\n    if (this.name === null && this.age !== 10) {\n      throw new Error(\"name can't be null unless age is 10\");\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sequelize CLI with .sequelizerc\nDESCRIPTION: Example .sequelizerc file that customizes paths for configuration, models, seeders, and migrations. Uses Node.js path module to resolve directory paths relative to the project root.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/migrations.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// .sequelizerc\n\nconst path = require('path');\n\nmodule.exports = {\n  config: path.resolve('config', 'database.json'),\n  'models-path': path.resolve('db', 'models'),\n  'seeders-path': path.resolve('db', 'seeders'),\n  'migrations-path': path.resolve('db', 'migrations'),\n};\n```\n\n----------------------------------------\n\nTITLE: Installing MS SQL Dialect Package for Sequelize\nDESCRIPTION: Command to install the @sequelize/mssql dialect package required for using Sequelize with Microsoft SQL Server.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/databases/mssql.mdx#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @sequelize/mssql\n```\n\n----------------------------------------\n\nTITLE: Including All Associated Models in Sequelize\nDESCRIPTION: Shows how to include all associated models using the 'all' and 'nested' options, which can load all direct associations or recursively load nested associations as well.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/eager-loading.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// Fetch all models associated with User\nUser.findAll({ include: { all: true } });\n\n// Fetch all models associated with User and their nested associations (recursively)\nUser.findAll({ include: { all: true, nested: true } });\n```\n\n----------------------------------------\n\nTITLE: Defining Array DataTypes in PostgreSQL with Sequelize\nDESCRIPTION: Demonstrates how to define array data types in PostgreSQL using Sequelize's DataTypes.ARRAY. Arrays can be used with various primitive data types and can even be nested for multi-dimensional arrays.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/data-types.mdx#2025-04-09_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Defines an array of DataTypes.SOMETHING.\nDataTypes.ARRAY(/* DataTypes.SOMETHING */);\n\n// VARCHAR(255)[]\nDataTypes.ARRAY(DataTypes.STRING);\n\n// VARCHAR(255)[][]\nDataTypes.ARRAY(DataTypes.ARRAY(DataTypes.STRING));\n```\n\n----------------------------------------\n\nTITLE: Finding and Counting Projects in Sequelize with JavaScript\nDESCRIPTION: This snippet shows how to use the findAndCountAll method to retrieve a limited number of records and get the total count of matching records. It demonstrates setting up a where clause with a LIKE operator, and using offset and limit for pagination.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-querying-finders.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { count, rows } = await Project.findAndCountAll({\n  where: {\n    title: {\n      [Op.like]: 'foo%',\n    },\n  },\n  offset: 10,\n  limit: 2,\n});\nconsole.log(count);\nconsole.log(rows);\n```\n\n----------------------------------------\n\nTITLE: Querying Soft-Deleted Records in Sequelize\nDESCRIPTION: Demonstrates how to query records including or excluding soft-deleted entries using the paranoid option in find methods.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/paranoid.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nawait Post.findByPk(123); // This will return `null` if the record of id 123 is soft-deleted\nawait Post.findByPk(123, { paranoid: false }); // This will retrieve the record\n\nawait Post.findAll({\n  where: { foo: 'bar' },\n}); // This will not retrieve soft-deleted records\n\nawait Post.findAll({\n  where: { foo: 'bar' },\n  paranoid: false,\n}); // This will also retrieve soft-deleted records\n```\n\n----------------------------------------\n\nTITLE: Using Isolation Levels in Sequelize Transactions (JavaScript)\nDESCRIPTION: Shows how to import and use isolation level constants in Sequelize. These constants represent the standard SQL isolation levels that can be applied to transactions.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/transactions.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { IsolationLevel } from '@sequelize/core';\n\n// The following are valid isolation levels:\nIsolationLevel.READ_UNCOMMITTED;\nIsolationLevel.READ_COMMITTED;\nIsolationLevel.REPEATABLE_READ;\nIsolationLevel.SERIALIZABLE;\n```\n\n----------------------------------------\n\nTITLE: Basic Raw Query with Metadata in Sequelize\nDESCRIPTION: Demonstrates executing a basic UPDATE query and accessing both results and metadata. The query returns an array of results and metadata object containing affected rows count.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/raw-queries.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst [results, metadata] = await sequelize.query('UPDATE users SET y = 42 WHERE x = 12');\n```\n\n----------------------------------------\n\nTITLE: Customizing Inverse Association in BelongsToMany Relationship\nDESCRIPTION: This example demonstrates how to customize the inverse association in a BelongsToMany relationship using the 'inverse' option. It shows how to specify a custom name for the inverse association.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/belongs-to-many.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Model, InferAttributes, InferCreationAttributes, NonAttribute } from '@sequelize/core';\nimport { BelongsToMany } from '@sequelize/core/decorators-legacy';\n\nclass Person extends Model<InferAttributes<Person>, InferCreationAttributes<Person>> {\n  @BelongsToMany(() => Toot, {\n    through: 'LikedToot',\n    inverse: {\n      as: 'likers',\n    },\n  })\n  declare likedToots?: NonAttribute<Toot[]>;\n}\n\nclass Toot extends Model<InferAttributes<Toot>, InferCreationAttributes<Toot>> {\n  declare likers?: NonAttribute<Person[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Aggregation Functions in Sequelize Queries\nDESCRIPTION: Example of using aggregation functions like COUNT in Sequelize queries with sequelize.fn(), which must include an alias to access the result from the model instance.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-querying-basics.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nModel.findAll({\n  attributes: ['foo', [sequelize.fn('COUNT', sequelize.col('hats')), 'n_hats'], 'bar'],\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT foo, COUNT(hats) AS n_hats, bar FROM ...\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Setter in Sequelize Model (TypeScript)\nDESCRIPTION: This example shows how to define a custom setter for a 'username' attribute in a Sequelize User model. The setter converts the input value to uppercase before storing it.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/getters-setters-virtuals.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass User extends Model {\n  @Attribute(DataTypes.STRING)\n  @NotNull\n  set username(value: string) {\n    this.setDataValue('username', value.toUpperCase());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Sequelize Model Scopes\nDESCRIPTION: Example showing how to define default and custom scopes in a Sequelize model definition, including static scopes and dynamic scopes with parameters.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/scopes.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass Project extends Model {}\nProject.init(\n  {\n    // Attributes\n  },\n  {\n    defaultScope: {\n      where: {\n        active: true,\n      },\n    },\n    scopes: {\n      deleted: {\n        where: {\n          deleted: true,\n        },\n      },\n      activeUsers: {\n        include: [{ model: User, where: { active: true } }],\n      },\n      random() {\n        return {\n          where: {\n            someNumber: Math.random(),\n          },\n        };\n      },\n      accessLevel(value) {\n        return {\n          where: {\n            accessLevel: {\n              [Op.gte]: value,\n            },\n          },\n        };\n      },\n      sequelize,\n      modelName: 'project',\n    },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Including Soft Deleted Records in Eager Loading\nDESCRIPTION: Demonstrates how to include soft-deleted records when eager loading by setting the 'paranoid' option to false in the include configuration.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/eager-loading.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nUser.findAll({\n  include: [\n    {\n      model: Tool,\n      as: 'Instruments',\n      where: { size: { [Op.ne]: 'small' } },\n      paranoid: false,\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Email Validation Using @sequelize/validator.js\nDESCRIPTION: Shows how to use the @sequelize/validator.js package to validate email addresses using the built-in IsEmail validator.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/validations-and-constraints.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Model, DataTypes } from '@sequelize/core';\nimport { Attribute, NotNull } from '@sequelize/core/decorators-legacy';\nimport { IsEmail } from '@sequelize/validator.js';\n\nclass User extends Model {\n  @Attribute(DataTypes.STRING)\n  @NotNull\n  @IsEmail\n  declare email: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Transaction-based Migration\nDESCRIPTION: Migration using transactions to perform multiple database changes atomically.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/cli.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { DataTypes } = require('@sequelize/core');\n\nmodule.exports = {\n  up: (queryInterface, Sequelize) => {\n    return queryInterface.sequelize.transaction(transaction => {\n      return Promise.all([\n        queryInterface.addColumn(\n          'Person',\n          'petName',\n          {\n            type: DataTypes.STRING,\n          },\n          { transaction },\n        ),\n        queryInterface.addColumn(\n          'Person',\n          'favoriteColor',\n          {\n            type: DataTypes.STRING,\n          },\n          { transaction },\n        ),\n      ]);\n    });\n  },\n  down: (queryInterface, Sequelize) => {\n    return queryInterface.sequelize.transaction(transaction => {\n      return Promise.all([\n        queryInterface.removeColumn('Person', 'petName', { transaction }),\n        queryInterface.removeColumn('Person', 'favoriteColor', { transaction }),\n      ]);\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Model Association with Scope Example\nDESCRIPTION: Example demonstrating how to define model associations with scopes for a complex data relationship between Foo, Bar, Baz, and Qux models.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/scopes.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst Foo = sequelize.define('Foo', { name: DataTypes.STRING });\nconst Bar = sequelize.define('Bar', { name: DataTypes.STRING });\nconst Baz = sequelize.define('Baz', { name: DataTypes.STRING });\nconst Qux = sequelize.define('Qux', { name: DataTypes.STRING });\nFoo.hasMany(Bar, { foreignKey: 'fooId' });\nBar.hasMany(Baz, { foreignKey: 'barId' });\nBaz.hasMany(Qux, { foreignKey: 'bazId' });\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Transaction Isolation Level in Sequelize\nDESCRIPTION: This snippet shows how to set a global default isolation level for all transactions by configuring it in the Sequelize constructor options. This applies the specified isolation level to all transactions unless overridden.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/transactions.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Sequelize, Transaction } = require('sequelize');\n\nconst sequelize = new Sequelize('sqlite::memory:', {\n  isolationLevel: Transaction.ISOLATION_LEVELS.SERIALIZABLE,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Model Instance using create()\nDESCRIPTION: Shows how to create and save a model instance in one step using the create() method. This is a shortcut that combines the functionality of build() and save().\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-instances.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst jane = await User.create({ name: 'Jane' });\n// Jane exists in the database now!\nconsole.log(jane instanceof User); // true\nconsole.log(jane.name); // \"Jane\"\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple HasOne Associations in Sequelize (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create multiple HasOne associations to the same model in Sequelize, using the 'inverse' option to specify the inverse association name. This prevents Sequelize from attempting to use the same inverse association for both associations.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/faq.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Person extends Model<InferAttributes<Person>, InferCreationAttributes<Person>> {\n  @HasOne(() => DrivingLicense, {\n    foreignKey: 'ownerId',\n    // highlight-start\n    inverse: {\n      as: 'owner',\n    },\n    // highlight-end\n  })\n  declare currentDrivingLicense?: NonAttribute<DrivingLicense>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Data Type in Sequelize Model Definition\nDESCRIPTION: Shows how to use a custom data type (MyDateType) when defining a Sequelize model. The example defines a User model with a birthday field using the custom type.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/extending-data-types.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MyDateType } from './custom-types.js';\n\nconst sequelize = new Sequelize(/* options */);\n\nconst User = sequelize.define(\n  'User',\n  {\n    birthday: {\n      // highlight-next-line\n      type: MyDateType,\n    },\n  },\n  { timestamps: false, noPrimaryKey: true, underscored: true },\n);\n\nawait User.sync();\n```\n\n----------------------------------------\n\nTITLE: Using HasMany Getter Method in Sequelize\nDESCRIPTION: This example shows how to declare and use the automatically generated getter method for a HasMany association. The method allows you to fetch all Comment models associated with a Post.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/has-many.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HasManyGetAssociationsMixin } from '@sequelize/core';\n\nclass Post extends Model<InferAttributes<Post>, InferCreationAttributes<Post>> {\n  @HasMany(() => Comment, 'postId')\n  declare comments?: NonAttribute<Comment[]>;\n\n  // highlight-start\n  declare getComments: HasManyGetAssociationsMixin<Comment>;\n  // highlight-end\n}\n\n// ...\n\nconst post = await Post.findByPk(1);\n\n// highlight-start\nconst comments: Comment[] = await post.getComments();\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Customizing Foreign Keys in BelongsToMany Association\nDESCRIPTION: This example shows how to customize the foreign key names in a BelongsToMany association using the 'foreignKey' and 'otherKey' options. It also demonstrates how to specify which attributes these foreign keys reference using 'sourceKey' and 'targetKey'.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/belongs-to-many.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass Person extends Model<InferAttributes<Person>, InferCreationAttributes<Person>> {\n  @BelongsToMany(() => Toot, {\n    through: 'LikedToot',\n    inverse: {\n      as: 'likers',\n    },\n    foreignKey: 'personId',\n    otherKey: 'tootId',\n    sourceKey: 'id',\n    targetKey: 'id',\n  })\n  declare likedToots?: NonAttribute<Toot[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Query Type Specification\nDESCRIPTION: Shows how to specify query types and handle results without metadata using QueryTypes.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/raw-queries.mdx#2025-04-09_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { QueryTypes } from '@sequelize/core';\nconst users = await sequelize.query('SELECT * FROM `users`', {\n  type: QueryTypes.SELECT,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Built-in and Custom Validators in Sequelize\nDESCRIPTION: Comprehensive example showing various built-in validators from validator.js and custom validation implementations including regex, email, URL, and numeric validations.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/validations-and-constraints.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsequelize.define('foo', {\n  bar: {\n    type: DataTypes.STRING,\n    validate: {\n      is: /^[a-z]+$/i,          // matches this RegExp\n      is: [\"^[a-z]+$\",'i'],     // same as above, but constructing the RegExp from a string\n      not: /^[a-z]+$/i,         // does not match this RegExp\n      not: [\"^[a-z]+$\",'i'],    // same as above, but constructing the RegExp from a string\n      isEmail: true,            // checks for email format (foo@bar.com)\n      isUrl: true,              // checks for url format (https://foo.com)\n      isIP: true,               // checks for IPv4 (129.89.23.1) or IPv6 format\n      isIPv4: true,             // checks for IPv4 (129.89.23.1)\n      isIPv6: true,             // checks for IPv6 format\n      isAlpha: true,            // will only allow letters\n      isAlphanumeric: true,     // will only allow alphanumeric characters, so \"_abc\" will fail\n      isNumeric: true,          // will only allow numbers\n      isInt: true,              // checks for valid integers\n      isFloat: true,            // checks for valid floating point numbers\n      isDecimal: true,          // checks for any numbers\n      isLowercase: true,        // checks for lowercase\n      isUppercase: true,        // checks for uppercase\n      notNull: true,            // won't allow null\n      isNull: true,             // only allows null\n      notEmpty: true,           // don't allow empty strings\n      equals: 'specific value', // only allow a specific value\n      contains: 'foo',          // force specific substrings\n      notIn: [['foo', 'bar']],  // check the value is not one of these\n      isIn: [['foo', 'bar']],   // check the value is one of these\n      notContains: 'bar',       // don't allow specific substrings\n      len: [2,10],              // only allow values with length between 2 and 10\n      isUUID: 4,                // only allow uuids\n      isDate: true,             // only allow date strings\n      isAfter: \"2011-11-05\",    // only allow date strings after a specific date\n      isBefore: \"2011-11-05\",   // only allow date strings before a specific date\n      max: 23,                  // only allow values <= 23\n      min: 23,                  // only allow values >= 23\n      isCreditCard: true,       // check for valid credit card numbers\n\n      // Examples of custom validators:\n      isEven(value) {\n        if (parseInt(value) % 2 !== 0) {\n          throw new Error('Only even values are allowed!');\n        }\n      }\n      isGreaterThanOtherField(value) {\n        if (parseInt(value) <= parseInt(this.otherField)) {\n          throw new Error('Bar must be greater than otherField.');\n        }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Async/Await with Manual Transactions in Sequelize Migrations\nDESCRIPTION: Migration using async/await syntax to add a column and create a unique index with manually-managed transactions. Error handling with try/catch ensures proper rollback on failure.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/migrations.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async up(queryInterface, Sequelize) {\n    const transaction = await queryInterface.sequelize.transaction();\n    try {\n      await queryInterface.addColumn(\n        'Person',\n        'petName',\n        {\n          type: Sequelize.DataTypes.STRING,\n        },\n        { transaction },\n      );\n      await queryInterface.addIndex('Person', 'petName', {\n        fields: 'petName',\n        unique: true,\n        transaction,\n      });\n      await transaction.commit();\n    } catch (err) {\n      await transaction.rollback();\n      throw err;\n    }\n  },\n  async down(queryInterface, Sequelize) {\n    const transaction = await queryInterface.sequelize.transaction();\n    try {\n      await queryInterface.removeColumn('Person', 'petName', { transaction });\n      await transaction.commit();\n    } catch (err) {\n      await transaction.rollback();\n      throw err;\n    }\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Empty OR and NOT Operators Behavior in Sequelize 7\nDESCRIPTION: Shows how empty OR and NOT operators now result in their conditions being completely ignored rather than producing '0=1' conditions as in Sequelize 6, simplifying generated SQL.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/upgrade.md#2025-04-09_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nUser.findAll({\n  where: or([]),\n});\n\nUser.findAll({\n  where: not({}),\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"users\"\n```\n\n----------------------------------------\n\nTITLE: Basic Table Name Pluralization in Sequelize\nDESCRIPTION: Demonstrates default table name pluralization behavior in Sequelize where model names are automatically pluralized for table names.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/naming-strategies.mdx#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Model, Sequelize } from '@sequelize/core';\nimport { SqliteDialect } from '@sequelize/sqlite3';\n\nclass User extends Model {}\n\nconst sequelize = new Sequelize({\n  dialect: SqliteDialect,\n  models: [User],\n});\n\nconsole.log(User.table.tableName);\n// → Users\n```\n\n----------------------------------------\n\nTITLE: Customizing Timestamp Fields in Sequelize Model\nDESCRIPTION: This code demonstrates how to customize the timestamp fields in a Sequelize model, including disabling createdAt and renaming updatedAt.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-basics.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclass Foo extends Model {}\nFoo.init(\n  {\n    /* attributes */\n  },\n  {\n    sequelize,\n\n    // don't forget to enable timestamps!\n    timestamps: true,\n\n    // I don't want createdAt\n    createdAt: false,\n\n    // I want updatedAt to actually be called updateTimestamp\n    updatedAt: 'updateTimestamp',\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Through Table Attributes in Many-to-Many Queries\nDESCRIPTION: Example of selecting only specific attributes from the through table when performing eager loading on a Many-to-Many relationship. This uses the through.attributes option to control which fields are included.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/advanced-many-to-many.md#2025-04-09_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nUser.findOne({\n  include: {\n    model: Profile,\n    through: {\n      attributes: ['selfGranted'],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Reloading a Model Instance\nDESCRIPTION: Shows how to reload a model instance from the database using the reload() method, which fetches the latest data from the database.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-instances.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst jane = await User.create({ name: 'Jane' });\nconsole.log(jane.name); // \"Jane\"\njane.name = 'Ada';\n// the name is still \"Jane\" in the database\nawait jane.reload();\nconsole.log(jane.name); // \"Jane\"\n```\n\n----------------------------------------\n\nTITLE: Snake Case Table Names Configuration\nDESCRIPTION: Shows how to configure Sequelize to use snake_case for table names using the underscored option at the model level.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/naming-strategies.mdx#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Model, Sequelize } from '@sequelize/core';\nimport { Table } from '@sequelize/core/decorators-legacy';\nimport { SqliteDialect } from '@sequelize/sqlite3';\n\n@Table({\n  underscored: true,\n})\nclass User extends Model {}\n\nconst sequelize = new Sequelize({\n  dialect: SqliteDialect,\n  models: [User],\n});\n\nconsole.log(User.table.tableName);\n// → users\n```\n\n----------------------------------------\n\nTITLE: Using HasMany Adder Methods in Sequelize\nDESCRIPTION: This example shows how to declare and use the adder methods for a HasMany association. These methods allow you to add one or more Comment models to a Post without removing existing associations.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/has-many.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HasManyAddAssociationMixin, HasManyAddAssociationsMixin } from '@sequelize/core';\n\nclass Post extends Model<InferAttributes<Post>, InferCreationAttributes<Post>> {\n  @HasMany(() => Comment, 'postId')\n  declare comments?: NonAttribute<Comment[]>;\n\n  // highlight-start\n  declare addComment: HasManyAddAssociationMixin<\n    Comment,\n    /* this is the type of the primary key of the target */\n    Comment['id']\n  >;\n\n  declare addComments: HasManyAddAssociationsMixin<\n    Comment,\n    /* this is the type of the primary key of the target */\n    Comment['id']\n  >;\n  // highlight-end\n}\n\n// ...\n\nconst post = await Post.findByPk(1);\nconst [comment1, comment2, comment3] = await Comment.findAll({ limit: 3 });\n\n// highlight-start\n// Add a single comment, without removing existing ones\nawait post.addComment(comment1);\n\n// Add multiple comments, without removing existing ones\nawait post.addComments([comment1, comment2]);\n\n// You can also use the primary key of the newly associated model as a way to identify it\n// without having to fetch it first.\nawait post.addComment(1);\nawait post.addComments([1, 2, 3]);\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Disabling CLS and Manually Managing Transactions in Sequelize\nDESCRIPTION: Illustrates how to disable Continuation Local Storage (CLS) for transactions and manually pass the transaction object to queries. This approach requires explicit transaction management for each query.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/transactions.md#2025-04-09_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst sequelize = new Sequelize({\n  // ... credentials\n  disableClsTransactions: true,\n});\n\nconst result = await sequelize.transaction(async transaction => {\n  return User.create(\n    {\n      firstName: 'Abraham',\n      lastName: 'Lincoln',\n    },\n    {\n      // You must specify this option when disableClsTransactions is true, or\n      // this query will run outside of the transaction\n      // highlight-next-line\n      transaction,\n    },\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Conditional Null Validation in Sequelize Models\nDESCRIPTION: Implementation of conditional null validation in Sequelize models using custom validators and age-based conditions.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/validations-and-constraints.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass User extends Model {}\nUser.init(\n  {\n    age: Sequelize.INTEGER,\n    name: {\n      type: DataTypes.STRING,\n      allowNull: true,\n      validate: {\n        customValidator(value) {\n          if (value === null && this.age !== 10) {\n            throw new Error(\"name can't be null unless age is 10\");\n          }\n        },\n      },\n    },\n  },\n  { sequelize },\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Attribute Validation in Sequelize\nDESCRIPTION: Demonstrates how to implement a custom attribute validator using the @ValidateAttribute decorator. The validator ensures that the name field is not empty.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/validations-and-constraints.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Model, DataTypes } from '@sequelize/core';\nimport { Attribute, NotNull, ValidateAttribute } from '@sequelize/core/decorators-legacy';\n\nclass User extends Model {\n  @Attribute(DataTypes.STRING)\n  @NotNull\n  @ValidateAttribute((value: unknown, user: User, attributeName: string) => {\n    if (name.length === 0) {\n      throw new Error('Name cannot be empty');\n    }\n  })\n  declare name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Incrementing and Decrementing Values with Sequelize\nDESCRIPTION: Shows how to use the increment() utility method to increase or decrease numeric values in the database. Demonstrates both positive and negative increments.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-querying-basics.md#2025-04-09_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nawait User.increment({ age: 5 }, { where: { id: 1 } }); // Will increase age to 15\nawait User.increment({ age: -5 }, { where: { id: 1 } }); // Will decrease age to 5\n```\n\n----------------------------------------\n\nTITLE: Proper Association Configuration with Explicit Foreign Keys\nDESCRIPTION: Corrected example showing how to properly define associations with custom aliases by explicitly specifying the same foreign key name in both association definitions to avoid duplicate columns.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/naming-strategies.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Fixed example\nInvoice.belongsTo(Subscription, {\n  as: 'TheSubscription',\n  foreignKey: 'subscription_id',\n});\nSubscription.hasMany(Invoice, { foreignKey: 'subscription_id' });\n```\n\n----------------------------------------\n\nTITLE: Defining Scopes in Sequelize Model (JavaScript)\nDESCRIPTION: Demonstrates how to define various types of scopes, including default scope, object scopes, and function scopes in a Sequelize model definition.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/scopes.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass Project extends Model {}\nProject.init(\n  {\n    // Attributes\n  },\n  {\n    defaultScope: {\n      where: {\n        active: true,\n      },\n    },\n    scopes: {\n      deleted: {\n        where: {\n          deleted: true,\n        },\n      },\n      activeUsers: {\n        include: [{ model: User, where: { active: true } }],\n      },\n      random() {\n        return {\n          where: {\n            someNumber: Math.random(),\n          },\n        };\n      },\n      accessLevel(value) {\n        return {\n          where: {\n            accessLevel: {\n              [Op.gte]: value,\n            },\n          },\n        };\n      },\n      sequelize,\n      modelName: 'project',\n    },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Row with Model#save in Sequelize\nDESCRIPTION: Demonstrates how to update a database record using the save() method after modifying model instance attributes.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/update.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst jane = await User.create({ name: 'Jane' });\n// the user is currently named \"Jane\" in the database\njane.name = 'Ada';\n// the name is still \"Jane\" in the database\nawait jane.save();\n// Now their name has been updated to \"Ada\" in the database!\n```\n\n----------------------------------------\n\nTITLE: Using HasMany Remover Methods in Sequelize\nDESCRIPTION: This snippet demonstrates how to declare and use the remover methods for a HasMany association. These methods allow you to remove one or more Comment models from a Post without affecting other associations.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/has-many.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HasManyRemoveAssociationMixin, HasManyRemoveAssociationsMixin } from '@sequelize/core';\n\nclass Post extends Model<InferAttributes<Post>, InferCreationAttributes<Post>> {\n  @HasMany(() => Comment, 'postId')\n  declare comments?: NonAttribute<Comment[]>;\n\n  // highlight-start\n  declare removeComment: HasManyRemoveAssociationMixin<\n    Comment,\n    /* this is the type of the primary key of the target */\n    Comment['id']\n  >;\n\n  declare removeComments: HasManyRemoveAssociationsMixin<\n    Comment,\n    /* this is the type of the primary key of the target */\n    Comment['id']\n  >;\n  // highlight-end\n}\n\n// ...\n\nconst post = await Post.findByPk(1);\nconst [comment1, comment2, comment3] = await Comment.findAll({ limit: 3 });\n\n// highlight-start\n// Remove a single comment, without removing existing ones\nawait post.removeComment(comment1);\n\n// Remove multiple comments, without removing existing ones\nawait post.removeComments([comment1, comment2]);\n\n// You can also use the primary key of the newly associated model as a way to identify it\n// without having to fetch it first.\nawait post.removeComment(1);\nawait post.removeComments([1, 2, 3]);\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Bulk Creation of Records with Sequelize bulkCreate()\nDESCRIPTION: Shows how to create multiple records at once using the bulkCreate() method. This method accepts an array of objects and inserts them all with a single query.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/insert.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst captains = await Captain.bulkCreate([{ name: 'Jack Sparrow' }, { name: 'Davy Jones' }]);\n\nconsole.log(captains.length);\nconsole.log(captains[0] instanceof Captain);\nconsole.log(captains[0].name);\nconsole.log(captains[0].id);\n```\n\n----------------------------------------\n\nTITLE: Typing Range DataTypes with TypeScript in Sequelize\nDESCRIPTION: Demonstrates how to properly type range data types when using TypeScript with Sequelize. The example uses the Range generic type provided by Sequelize to ensure type safety.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/data-types.mdx#2025-04-09_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Model, InferAttributes, Range } from '@sequelize/core';\n\nclass User extends Model<InferAttributes<User>> {\n  declare myDateRange: Range<Date>;\n}\n\nUser.init({\n  myDateRange: {\n    type: DataTypes.RANGE(DataTypes.DATE),\n    allowNull: false,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Alternative Placement of Logical Operators in Sequelize\nDESCRIPTION: Demonstrates two equivalent ways to use logical operators in Sequelize - at the attribute level or at the value level.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/operators.mdx#2025-04-09_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Op } from '@sequelize/core';\n\nPost.findAll({\n  where: {\n    // highlight-start\n    [Op.or]: [{ authorId: 12 }, { authorId: 24 }],\n    // highlight-end\n  },\n});\n\nPost.findAll({\n  where: {\n    // highlight-start\n    authorId: {\n      [Op.or]: [12, 24],\n    },\n    // highlight-end\n  },\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"posts\" WHERE \"authorId\" = 12 OR \"authorId\" = 24;\n```\n\n----------------------------------------\n\nTITLE: Soft-Deleting Records in Sequelize\nDESCRIPTION: Demonstrates how to perform soft-deletion using the destroy method. This sets the deletedAt timestamp instead of removing the record.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/paranoid.mdx#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait Post.destroy({\n  where: {\n    id: 1,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Timestamps Globally in Sequelize Configuration\nDESCRIPTION: Demonstrates how to disable auto-generated timestamps globally when initializing Sequelize instance.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/auto-timestamps.mdx#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass User extends Model {}\n\nconst sequelize = new Sequelize({\n  dialect: SqliteDialect,\n  define: {\n    timestamps: false,\n  },\n  models: [User],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Post and Reaction Models in Sequelize with TypeScript\nDESCRIPTION: Demonstrates how to define two Sequelize models (Post and Reaction) with a One-to-Many relationship using TypeScript and decorators. The code creates a Post model with content field and a Reaction model with type and postId fields, along with proper associations.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/sub-queries.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Sequelize,\n  Model,\n  DataTypes,\n  InferCreationAttributes,\n  InferAttributes,\n} from '@sequelize/core';\nimport {\n  Attribute,\n  AutoIncrement,\n  PrimaryKey,\n  NotNull,\n  HasMany,\n} from '@sequelize/decorators-legacy';\nimport { SqliteDialect } from '@sequelize/sqlite3';\n\nclass Post extends Model<InferAttributes<Post>, InferCreationAttributes<Post>> {\n  @PrimaryKey\n  @Attribute(DataTypes.INTEGER)\n  @AutoIncrement\n  declare id: number;\n\n  @Attribute(DataTypes.STRING)\n  @NotNull\n  declare content: string;\n\n  @HasMany(() => Reaction, 'postId')\n  declare reactions?: NonAttribute<Reaction[]>;\n}\n\nenum ReactionType {\n  Like = 'Like',\n  Angry = 'Angry',\n  Laugh = 'Laugh',\n  Sad = 'Sad',\n}\n\nclass Reaction extends Model {\n  @PrimaryKey\n  @Attribute(DataTypes.INTEGER)\n  @AutoIncrement\n  declare id: number;\n\n  @Attribute(DataTypes.ENUM(Object.keys(ReactionType)))\n  @NotNull\n  declare type: ReactionType;\n\n  @Attribute(DataTypes.INTEGER)\n  @NotNull\n  declare postId: number;\n}\n\nconst sequelize = new Sequelize({\n  dialect: SqliteDialect,\n  storage: ':memory:',\n  models: [Post, Reaction],\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Global Database Engine Option in Sequelize (JavaScript)\nDESCRIPTION: This snippet demonstrates how to set the database engine option globally for all models in Sequelize using the define option of the Sequelize constructor.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/advanced.mdx#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst sequelize = new Sequelize({\n  /* options */\n  define: { engine: 'MYISAM' },\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Foreign Key Configuration\nDESCRIPTION: Demonstrates different ways to customize foreign key names and properties in Sequelize associations using UUID data type.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/assocs.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { DataTypes } = require('Sequelize');\n\nFoo.hasOne(Bar, {\n  foreignKey: {\n    // name: 'myFooId'\n    type: DataTypes.UUID,\n  },\n});\nBar.belongsTo(Foo);\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values in Sequelize Model\nDESCRIPTION: These examples show how to set default values for columns in a Sequelize model, including using special values like DataTypes.NOW.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-basics.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nsequelize.define('User', {\n  name: {\n    type: DataTypes.STRING,\n    defaultValue: 'John Doe',\n  },\n});\n\nsequelize.define('Foo', {\n  bar: {\n    type: DataTypes.DATETIME,\n    defaultValue: DataTypes.NOW,\n    // This way, the current date/time will be used to populate this column (at the moment of insertion)\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Performing Bulk Deletion with where Clause in Sequelize\nDESCRIPTION: Shows how to delete multiple records that match specific criteria using the destroy() method with a where clause to filter which records should be deleted.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/delete.md#2025-04-09_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// Delete everyone named \"Jane\"\nawait User.destroy({\n  where: {\n    firstName: 'Jane',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing hooks for cascade deletes in Sequelize with TypeScript\nDESCRIPTION: Shows how to enable hooks for cascade deletes by setting the hooks option to true when defining associations. This example uses TypeScript decorators to define a HasMany association with hooks enabled.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/hooks.mdx#2025-04-09_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Model } from '@sequelize/core';\nimport { HasMany, BeforeDestroy } from '@sequelize/core/decorators-legacy';\n\nclass User extends Model {\n  // This \"hooks\" option will cause the \"beforeDestroy\" and \"afterDestroy\"\n  @HasMany(() => Post, { hooks: true })\n  declare posts: Post[];\n}\n\nclass Post extends Model {\n  @BeforeDestroy\n  static logDestroy() {\n    console.log('Post has been destroyed');\n  }\n}\n\nconst sequelize = new Sequelize({\n  /* options */\n  models: [User, Post],\n});\n\nawait sequelize.sync({ force: true });\n\nconst user = await User.create();\nconst post = await Post.create({ userId: user.id });\n\n// this will log \"Post has been destroyed\"\nawait user.destroy();\n```\n\n----------------------------------------\n\nTITLE: Querying with Range Strict Left Operator in Sequelize\nDESCRIPTION: Using Op.strictLeft to find records where all values in a range field are less than any value in the specified range. This is equivalent to PostgreSQL's << operator for ranges.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/operators.mdx#2025-04-09_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nEvent.findAll({\n  where: {\n    occursDuring: {\n      [Op.strictLeft]: [new Date('2019-01-01'), new Date('2023-01-01')],\n    },\n  },\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"events\" WHERE \"occursDuring\" << '[2019-01-01, 2023-01-01)';\n```\n\n----------------------------------------\n\nTITLE: Soft Deletion in Sequelize\nDESCRIPTION: Demonstrates how to perform a soft deletion using the destroy method. This will update the deletedAt timestamp rather than removing the record.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/paranoid.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait Post.destroy({\n  where: {\n    id: 1,\n  },\n});\n// UPDATE \"posts\" SET \"deletedAt\"=[timestamp] WHERE \"deletedAt\" IS NULL AND \"id\" = 1\n```\n\n----------------------------------------\n\nTITLE: Restoring Soft-Deleted Records\nDESCRIPTION: Shows how to restore soft-deleted records using both instance and static restore methods.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/paranoid.mdx#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst post = await Post.create({ title: 'test' });\nconsole.log(post instanceof Post); // true\nawait post.destroy();\nconsole.log('soft-deleted!');\nawait post.restore();\nconsole.log('restored!');\n\nawait Post.restore({\n  where: {\n    likes: {\n      [Op.gt]: 100,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Sequelize Model using sequelize.define\nDESCRIPTION: Demonstrates how to define a User model with firstName and lastName fields using the sequelize.define method. The model automatically maps to a 'Users' table in the database.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-basics.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Sequelize, DataTypes } = require('sequelize');\nconst sequelize = new Sequelize('sqlite::memory:');\n\nconst User = sequelize.define(\n  'User',\n  {\n    // Model attributes are defined here\n    firstName: {\n      type: DataTypes.STRING,\n      allowNull: false,\n    },\n    lastName: {\n      type: DataTypes.STRING,\n      // allowNull defaults to true\n    },\n  },\n  {\n    // Other model options go here\n  },\n);\n\n// `sequelize.define` also returns the model\nconsole.log(User === sequelize.models.User); // true\n```\n\n----------------------------------------\n\nTITLE: Using Order Inside Include with Separate Option\nDESCRIPTION: Demonstrates how to use the 'order' option inside the include configuration when the 'separate' option is set to true, which only works for has-many relationships.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/eager-loading.md#2025-04-09_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// This only works for `separate: true` (which in turn\n// only works for has-many relationships).\nUser.findAll({\n  include: {\n    model: Post,\n    separate: true,\n    order: [['createdAt', 'DESC']],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Association Options Configuration\nDESCRIPTION: Shows how to pass options to association definitions. Demonstrates the syntax for all four association types with optional configuration parameters.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/assocs.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nA.hasOne(B, {\n  /* options */\n});\nA.belongsTo(B, {\n  /* options */\n});\nA.hasMany(B, {\n  /* options */\n});\nA.belongsToMany(B, { through: 'C' /* options */ });\n```\n\n----------------------------------------\n\nTITLE: Deferring Specific Constraints in PostgreSQL Transactions (TypeScript)\nDESCRIPTION: Shows how to defer specific named constraints in a PostgreSQL transaction by providing an array of constraint names to the constraintChecking option.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/transactions.md#2025-04-09_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConstraintChecking } from '@sequelize/core';\n\nawait sequelize.transaction(\n  {\n    constraintChecking: ConstraintChecking.DEFERRED(['project_owner_fk']),\n  },\n  async t => {\n    // Your code\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Manually Passing Parent Transaction in Nested Transactions\nDESCRIPTION: Illustrates how to manually pass the parent transaction object to a child transaction when CLS is disabled. This ensures the child transaction is aware of the parent transaction context.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/transactions.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait sequelize.transaction(async parentTransaction => {\n  // a transaction has been created here\n\n  await sequelize.transaction(\n    {\n      nestMode: TransactionNestMode.savepoint,\n      // highlight-next-line\n      transaction: parentTransaction,\n    },\n    async childTransaction => {\n      // a save point has been created here\n    },\n  );\n\n  // the save point has been released (or rolled back if the above block threw an error)\n});\n\n// the transaction has been committed (or rolled back if the above block threw an error)\n```\n\n----------------------------------------\n\nTITLE: Customizing Foreign Key Names in Many-to-Many Relationships\nDESCRIPTION: Example of customizing foreign key names in a Many-to-Many relationship using foreignKey and otherKey options. This allows replacing the default naming convention Sequelize uses for foreign keys.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/advanced-many-to-many.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nProduct.belongsToMany(Category, {\n  through: 'product_categories',\n  foreignKey: 'objectId', // replaces `productId`\n  otherKey: 'typeId', // replaces `categoryId`\n});\nCategory.belongsToMany(Product, {\n  through: 'product_categories',\n  foreignKey: 'typeId', // replaces `categoryId`\n  otherKey: 'objectId', // replaces `productId`\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Transaction Object in Sequelize\nDESCRIPTION: Shows how to access the current transaction object within a transaction callback. This can be useful for passing the transaction to other functions or for debugging purposes.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/transactions.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await sequelize.transaction(async transaction => {\n  // true\n  console.log(sequelize.getCurrentClsTransaction() === transaction);\n});\n```\n\n----------------------------------------\n\nTITLE: Querying with Adjacent Ranges Operator in Sequelize\nDESCRIPTION: Using Op.adjacent to find records where a range field is adjacent to the specified range with no gaps or overlaps. This is equivalent to PostgreSQL's -|- operator for ranges.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/operators.mdx#2025-04-09_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nEvent.findAll({\n  where: {\n    occursDuring: {\n      [Op.adjacent]: [new Date('2019-01-01'), new Date('2023-01-01')],\n    },\n  },\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"events\" WHERE \"occursDuring\" -|- '[2019-01-01, 2023-01-01)';\n```\n\n----------------------------------------\n\nTITLE: Hard Deletion in Sequelize\nDESCRIPTION: Shows how to perform a hard deletion on a paranoid model using force: true option. This will actually delete the record from the database.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/paranoid.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait Post.destroy({\n  where: {\n    id: 1,\n  },\n  force: true,\n});\n// DELETE FROM \"posts\" WHERE \"id\" = 1\n```\n\n----------------------------------------\n\nTITLE: Defining BelongsTo Association for One-To-Many Relationship in TypeScript\nDESCRIPTION: Example showing how to create a BelongsTo association between Comment and Post models, implementing the relationship from the 'many' side (comments) to the 'one' side (post).\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/belongs-to.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Model,\n  DataTypes,\n  InferAttributes,\n  InferCreationAttributes,\n  CreationOptional,\n  NonAttribute,\n} from '@sequelize/core';\nimport {\n  PrimaryKey,\n  Attribute,\n  AutoIncrement,\n  NotNull,\n  BelongsTo,\n} from '@sequelize/core/decorators-legacy';\n\nclass Post extends Model<InferAttributes<Post>, InferCreationAttributes<Post>> {\n  @Attribute(DataTypes.INTEGER)\n  @AutoIncrement\n  @PrimaryKey\n  declare id: CreationOptional<number>;\n}\n\nclass Comment extends Model<InferAttributes<Comment>, InferCreationAttributes<Comment>> {\n  @Attribute(DataTypes.INTEGER)\n  @AutoIncrement\n  @PrimaryKey\n  declare id: CreationOptional<number>;\n\n  // highlight-start\n  @BelongsTo(() => Post, 'postId')\n  declare post?: NonAttribute<Post>;\n\n  // This is the foreign key\n  @Attribute(DataTypes.INTEGER)\n  @NotNull\n  declare postId: number;\n  // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sequelize Connection Pool in AWS Lambda\nDESCRIPTION: Example showing how to configure Sequelize connection pooling with minimum and maximum pool size set to 1. This configuration aims to prevent Lambda containers from overwhelming the database server, though it comes with several limitations and issues.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/aws-lambda.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Sequelize } = require('sequelize');\n\nconst sequelize = new Sequelize(/* (...) */, {\n  // (...)\n  pool: { min: 1, max: 1 }\n});\n```\n\n----------------------------------------\n\nTITLE: Array Data Types in PostgreSQL\nDESCRIPTION: Examples of defining array data types in PostgreSQL, including nested arrays and various element types.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/other-data-types.mdx#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nDataTypes.ARRAY(/* DataTypes.SOMETHING */);\n\n// VARCHAR(255)[]\nDataTypes.ARRAY(DataTypes.STRING);\n// VARCHAR(255)[][]\nDataTypes.ARRAY(DataTypes.ARRAY(DataTypes.STRING));\n```\n\n----------------------------------------\n\nTITLE: Nested Eager Loading in Sequelize\nDESCRIPTION: Demonstrates how to use nested eager loading to load all related models of a related model, creating multiple levels of associated data in the results.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/eager-loading.md#2025-04-09_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst users = await User.findAll({\n  include: {\n    model: Tool,\n    as: 'Instruments',\n    include: {\n      model: Teacher,\n      include: [\n        /* etc */\n      ],\n    },\n  },\n});\nconsole.log(JSON.stringify(users, null, 2));\n```\n\n----------------------------------------\n\nTITLE: Casting JSON Values in Sequelize Queries\nDESCRIPTION: Shows how to cast JSON values to specific types in Sequelize queries using the '::' syntax. This example casts the 'age' field to an integer for comparison.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/json.mdx#2025-04-09_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nUser.findAll({\n  where: {\n    'jsonAttribute.age::integer': { [Op.gt]: 18 },\n  },\n});\n```\n\nLANGUAGE: SQL\nCODE:\n```\n-- postgres\nCAST(\"jsonAttribute\"->'age' AS integer) > 18;\n\n-- mysql & friends\nCAST(`jsonAttribute`->\"$.age\" AS signed) > 18;\n```\n\n----------------------------------------\n\nTITLE: Creating Self-Referencing BelongsToMany Association in Sequelize (TypeScript)\nDESCRIPTION: This code snippet shows how to create a self-referencing BelongsToMany association in Sequelize, using the Person model as an example. It demonstrates the use of the 'inverse' option to specify the inverse association name for a parent/children relationship.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/faq.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Person extends Model<InferAttributes<Person>, InferCreationAttributes<Person>> {\n  @BelongsToMany(() => Person, {\n    // highlight-start\n    inverse: {\n      as: 'parents',\n    },\n    // highlight-end\n  })\n  declare children?: NonAttribute<Person[]>;\n  declare parents?: NonAttribute<Person[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Inverse Association for BelongsTo in TypeScript\nDESCRIPTION: Example demonstrating how to configure the inverse association for a BelongsTo relationship, specifying whether it should be a HasOne or HasMany association on the target model.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/belongs-to.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass Post extends Model<InferAttributes<Post>, InferCreationAttributes<Post>> {\n  @Attribute(DataTypes.INTEGER)\n  @AutoIncrement\n  @PrimaryKey\n  declare id: CreationOptional<number>;\n\n  // highlight-start\n  /** Declared by {@link Comment#post} */\n  declare comments?: Comment[];\n  // highlight-end\n}\n\nclass Comment extends Model<InferAttributes<Comment>, InferCreationAttributes<Comment>> {\n  @Attribute(DataTypes.INTEGER)\n  @AutoIncrement\n  @PrimaryKey\n  declare id: CreationOptional<number>;\n\n  @BelongsTo(() => Post, {\n    foreignKey: 'postId',\n    // highlight-start\n    inverse: {\n      as: 'comments',\n      // Either 'hasOne' or 'hasMany'\n      type: 'hasMany',\n    },\n    // highlight-end\n  })\n  declare post?: NonAttribute<Post>;\n\n  // This is the foreign key\n  @Attribute(DataTypes.INTEGER)\n  @NotNull\n  declare postId: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Foreign Key Target in BelongsTo Association in TypeScript\nDESCRIPTION: Example showing how to customize which attribute the foreign key references on the target model using the targetKey option.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/belongs-to.md#2025-04-09_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nclass Comment extends Model {\n  declare id: CreationOptional<number>;\n\n  @BelongsTo(() => Post, {\n    foreignKey: 'postId',\n    // highlight-next-line\n    // The foreign key will reference the 'id' attribute of the Post model\n    targetKey: 'id',\n  })\n  declare post?: NonAttribute<Post>;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying with JSONB Contains Operator in Sequelize\nDESCRIPTION: Using Op.contains with JSONB to find records where a JSONB field contains the specified JSONB value. This is equivalent to PostgreSQL's @> operator for JSONB.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/operators.mdx#2025-04-09_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nPost.findAll({\n  where: {\n    meta: { [Op.contains]: { keywords: 'orm, javascript, sequelize' } },\n  },\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"posts\" WHERE \"meta\" @> '{\"keywords\": \"orm, javascript, sequelize\"}';\n```\n\n----------------------------------------\n\nTITLE: Instance Methods for Deletion in Sequelize\nDESCRIPTION: Demonstrates using instance methods for both soft and hard deletion of records. Shows how to create a post and then delete it using instance methods.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/paranoid.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst post = await Post.create({ title: 'test' });\nconsole.log(post instanceof Post); // true\nawait post.destroy(); // Would just set the `deletedAt` flag\nawait post.destroy({ force: true }); // Would really delete the record\n```\n\n----------------------------------------\n\nTITLE: Defining Inverse Association\nDESCRIPTION: Example showing how to configure the inverse BelongsTo association using the inverse option in the HasOne decorator.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/has-one.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Model,\n  DataTypes,\n  InferAttributes,\n  InferCreationAttributes,\n  CreationOptional,\n  NonAttribute,\n} from '@sequelize/core';\nimport {\n  PrimaryKey,\n  Attribute,\n  AutoIncrement,\n  NotNull,\n  HasOne,\n  BelongsTo,\n} from '@sequelize/core/decorators-legacy';\n\nclass Person extends Model<InferAttributes<Person>, InferCreationAttributes<Person>> {\n  @Attribute(DataTypes.INTEGER)\n  @AutoIncrement\n  @PrimaryKey\n  declare id: CreationOptional<number>;\n\n  @HasOne(() => DrivingLicense, {\n    foreignKey: 'ownerId',\n    inverse: {\n      as: 'owner',\n    },\n  })\n  declare drivingLicense?: NonAttribute<DrivingLicense>;\n}\n\nclass DrivingLicense extends Model<\n  InferAttributes<DrivingLicense>,\n  InferCreationAttributes<DrivingLicense>\n> {\n  @Attribute(DataTypes.INTEGER)\n  @AutoIncrement\n  @PrimaryKey\n  declare id: CreationOptional<number>;\n\n  /** Defined by {@link Person.drivingLicense} */\n  declare owner?: NonAttribute<Person>;\n\n  @Attribute(DataTypes.INTEGER)\n  @NotNull\n  declare ownerId: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for Through Table with Default Foreign Keys\nDESCRIPTION: SQL generated by Sequelize for the through table in a Many-to-Many relationship using default foreign key naming conventions. Shows how Sequelize creates foreign keys based on model names.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/advanced-many-to-many.md#2025-04-09_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS `product_categories` (\n  `createdAt` DATETIME NOT NULL,\n  `updatedAt` DATETIME NOT NULL,\n  `productId` INTEGER NOT NULL REFERENCES `products` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,\n  `categoryId` INTEGER NOT NULL REFERENCES `categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,\n  PRIMARY KEY (`productId`, `categoryId`)\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Numeric Options in Sequelize for MySQL\nDESCRIPTION: Demonstrates how to combine numeric options in Sequelize to create a specific integer column type in MySQL. This example shows the creation of an INTEGER column with a display width of 1, unsigned, and zero-filled.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/data-types.mdx#2025-04-09_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nDataTypes.INTEGER(1).UNSIGNED.ZEROFILL\n```\n\n----------------------------------------\n\nTITLE: Ordering Eager Loaded Associations in Sequelize\nDESCRIPTION: Demonstrates how to apply ORDER clauses to eager loaded models using the top-level 'order' option with augmented arrays that specify the nested model sorting path.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/eager-loading.md#2025-04-09_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nCompany.findAll({\n  include: Division,\n  order: [\n    // We start the order array with the model we want to sort\n    [Division, 'name', 'ASC'],\n  ],\n});\nCompany.findAll({\n  include: Division,\n  order: [[Division, 'name', 'DESC']],\n});\nCompany.findAll({\n  // If the include uses an alias...\n  include: { model: Division, as: 'Div' },\n  order: [\n    // ...we use the same syntax from the include\n    // in the beginning of the order array\n    [{ model: Division, as: 'Div' }, 'name', 'DESC'],\n  ],\n});\n\nCompany.findAll({\n  // If we have includes nested in several levels...\n  include: {\n    model: Division,\n    include: Department,\n  },\n  order: [\n    // ... we replicate the include chain of interest\n    // at the beginning of the order array\n    [Division, Department, 'name', 'DESC'],\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Instance Validation Hooks\nDESCRIPTION: This example demonstrates using the beforeCreate hook to validate user access levels before storing data. The hook throws an error if a user without appropriate privileges attempts to set a high access level.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/hooks.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nUser.beforeCreate(user => {\n  if (user.accessLevel > 10 && user.username !== 'Boss') {\n    throw new Error(\"You can't grant this user an access level above 10!\");\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Aggregation Methods in Sequelize (max, min, sum)\nDESCRIPTION: Demonstrates how to use Sequelize's max(), min(), and sum() utility methods for aggregation. These methods can be used with optional where clauses to filter the data being aggregated.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-querying-basics.md#2025-04-09_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nawait User.max('age'); // 40\nawait User.max('age', { where: { age: { [Op.lt]: 20 } } }); // 10\nawait User.min('age'); // 5\nawait User.min('age', { where: { age: { [Op.gt]: 5 } } }); // 10\nawait User.sum('age'); // 55\nawait User.sum('age', { where: { age: { [Op.gt]: 5 } } }); // 50\n```\n\n----------------------------------------\n\nTITLE: Configuring Sequelize with DB2 for IBM i Dialect\nDESCRIPTION: TypeScript example showing how to initialize Sequelize with the DB2 for IBM i dialect. This demonstrates the basic configuration including connection string and timeout settings.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/databases/ibmi.mdx#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Sequelize } from '@sequelize/core';\nimport { IbmiDialect } from '@sequelize/db2-ibmi';\n\nconst sequelize = new Sequelize({\n  dialect: IbmiDialect,\n  odbcConnectionString: 'DSN=MYDSN;UID=myuser;PWD=mypassword',\n  connectionTimeout: 60,\n});\n```\n\n----------------------------------------\n\nTITLE: Querying with Array Contains Operator in Sequelize\nDESCRIPTION: Using Op.contains to find records where an array field contains all specified values. This operator is equivalent to PostgreSQL's @> operator for arrays.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/operators.mdx#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nPost.findAll({\n  where: {\n    tags: { [Op.contains]: ['popular', 'trending'] },\n  },\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"posts\" WHERE \"tags\" @> ARRAY['popular', 'trending'];\n```\n\n----------------------------------------\n\nTITLE: Manual Attribute Typing for Sequelize Models in TypeScript\nDESCRIPTION: This snippet illustrates the manual approach to defining attribute types for Sequelize models. It shows how to create separate UserAttributes and UserCreationAttributes types, using PartialBy utility to make the ID optional during creation while maintaining strong typing.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/model-typing.mdx#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Model } from '@sequelize/core';\nimport type { PartialBy } from '@sequelize/utils';\n\ntype UserAttributes = {\n  id: number;\n  name: string;\n};\n\n// we're telling the Model that 'id' is optional\n// when creating an instance of the model (such as using Model.create()).\ntype UserCreationAttributes = PartialBy<UserAttributes, 'id'>;\n\nclass User extends Model<UserAttributes, UserCreationAttributes> {\n  @Attribute(DataTypes.INTEGER)\n  @PrimaryKey\n  @AutoIncrement\n  declare id: number;\n\n  @Attribute(DataTypes.STRING)\n  @NotNull\n  declare string: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Using HasManyCreateAssociationMixin Type in Sequelize TypeScript\nDESCRIPTION: This snippet explains how to properly type the createX association method in TypeScript using the HasManyCreateAssociationMixin generic type. By specifying the foreign key name in the second generic parameter, TypeScript is informed that this field doesn't need to be included in creation attributes.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/has-many.md#2025-04-09_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nHasManyCreateAssociationMixin<Comment, 'postId'> ^ Here;\n```\n\n----------------------------------------\n\nTITLE: Using DataTypes.DATE with String Input in Sequelize v7\nDESCRIPTION: Shows how to use string date inputs with DataTypes.DATE in Sequelize v7. The example demonstrates that Sequelize now parses date strings into Date objects, allowing for direct use of ISO date strings in queries.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/upgrade.md#2025-04-09_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst MyModel = sequelize.define('MyModel', {\n  date: DataTypes.DATE,\n});\n\nawait MyModel.findOne({ where: { date: '2022-11-06T00:00:00Z' } });\n```\n\n----------------------------------------\n\nTITLE: Combining Numeric Options in MySQL\nDESCRIPTION: Example of combining numeric type options like UNSIGNED and ZEROFILL with FLOAT data type in MySQL\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/data-types.mdx#2025-04-09_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nDataTypes.FLOAT(1, 2).UNSIGNED.ZEROFILL\n```\n\n----------------------------------------\n\nTITLE: Custom NotNull Validation Message in Sequelize\nDESCRIPTION: Example of customizing the allowNull error message using the notNull validator in a Sequelize model.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/validations-and-constraints.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass User extends Model {}\nUser.init(\n  {\n    name: {\n      type: DataTypes.STRING,\n      allowNull: false,\n      validate: {\n        notNull: {\n          msg: 'Please enter your name',\n        },\n      },\n    },\n  },\n  { sequelize },\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Models for Super Many-to-Many Relationship in Sequelize\nDESCRIPTION: This snippet defines the User, Profile, and Grant models used to demonstrate the Super Many-to-Many relationship concept in Sequelize.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/advanced-many-to-many.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst User = sequelize.define(\n  'user',\n  {\n    username: DataTypes.STRING,\n    points: DataTypes.INTEGER,\n  },\n  { timestamps: false },\n);\n\nconst Profile = sequelize.define(\n  'profile',\n  {\n    name: DataTypes.STRING,\n  },\n  { timestamps: false },\n);\n\nconst Grant = sequelize.define(\n  'grant',\n  {\n    id: {\n      type: DataTypes.INTEGER,\n      primaryKey: true,\n      autoIncrement: true,\n      allowNull: false,\n    },\n    selfGranted: DataTypes.BOOLEAN,\n  },\n  { timestamps: false },\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Self-Referential Many-to-Many Relationships in Sequelize\nDESCRIPTION: Example of creating a self-referential Many-to-Many relationship where a model is associated with itself. This creates a junction table to store the relationships between instances of the same model.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/advanced-many-to-many.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nPerson.belongsToMany(Person, { as: 'Children', through: 'PersonChildren' });\n// This will create the table PersonChildren which stores the ids of the objects.\n```\n\n----------------------------------------\n\nTITLE: Unquoting JSON Values in Sequelize Queries\nDESCRIPTION: Demonstrates how to unquote JSON values in Sequelize queries using the ':unquote' modifier. This is useful for comparing unquoted string values from JSON fields.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/json.mdx#2025-04-09_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nUser.findAll({\n  where: {\n    'jsonAddress.country:unquote': 'Belgium',\n  },\n});\n```\n\nLANGUAGE: SQL\nCODE:\n```\n-- postgres (the ->> operator extracts & unquotes)\n\"jsonAddress\"->>'country' = 'Belgium';\n\n-- mysql & friends\nJSON_UNQUOTE(JSON_EXTRACT(`jsonAddress`, '$.country')) = 'Belgium';\n```\n\n----------------------------------------\n\nTITLE: Implementing Serialization and Deserialization for Custom Data Type\nDESCRIPTION: Shows how to implement methods for serializing and deserializing values when interacting with the database. This includes parsing database values, preparing values for binding, and escaping values for raw SQL.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/extending-data-types.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DataTypes, StringifyOptions } from '@sequelize/core';\n\nexport class MyDateType extends DataTypes.ABSTRACT<Date> {\n  // [...] truncated example\n\n  parseDatabaseValue(value: unknown): Date {\n    assert(typeof value === 'string', 'Expected to receive a string from the database');\n\n    return new Date(value);\n  }\n\n  toBindableValue(value: Date): unknown {\n    return value.toISOString();\n  }\n\n  escape(value: Date, options: StringifyOptions): string {\n    return options.dialect.escapeString(value.toISOString());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Nested Object Changes in Sequelize\nDESCRIPTION: Shows incorrect and correct ways to handle changes to nested objects when using save(). Includes example of using Model#changed.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/update.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst jane = await User.create({ name: 'Jane', role: ['admin'] });\n\n// `save` will not be able to detect this change, because `role` was mutated\n// error-next-line\njane.role.push('admin');\n\nawait jane.save();\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst jane = await User.create({ name: 'Jane', role: ['admin'] });\n\n// `save` will be able to detect this change, because `role` has been replaced\n// success-next-line\njane.role = [...jane.role, 'admin'];\n\nawait jane.save();\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst jane = await User.create({ name: 'Jane', role: ['admin'] });\n\njane.role.push('admin');\n// this makes `save` aware that `role` has changed\n// success-next-line\njane.changed('role', true);\n\nawait jane.save();\n```\n\n----------------------------------------\n\nTITLE: Global Table Name Freezing\nDESCRIPTION: Demonstrates how to globally prevent table name pluralization using Sequelize constructor options.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/naming-strategies.mdx#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Model, Sequelize } from '@sequelize/core';\nimport { SqliteDialect } from '@sequelize/sqlite3';\n\nclass User extends Model {}\n\nconst sequelize = new Sequelize({\n  dialect: SqliteDialect,\n  define: {\n    freezeTableName: true,\n  },\n  models: [User],\n});\n\nconsole.log(User.table.tableName);\n// → User\n```\n\n----------------------------------------\n\nTITLE: Implementing HasMany Association Scopes in Sequelize\nDESCRIPTION: Demonstrates how to create a HasMany association with a scope to filter restaurants by status. Shows the implementation of both regular and scoped associations between City and Restaurant models.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/association-scopes.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass City extends Model {\n  @Attribute(DataTypes.STRING)\n  name;\n\n  /** this association returns all restaurants */\n  @HasMany(() => Restaurant, 'cityId')\n  restaurants;\n\n  /** this association only returns open restaurants */\n  @HasMany(() => Restaurant, {\n    foreignKey: 'cityId',\n    scope: { status: 'open' },\n  })\n  openRestaurants;\n}\n\nclass Restaurant extends Model {\n  @Attribute(DataTypes.STRING)\n  status;\n}\n\nconst city = await City.findByPk(1);\n\n// this will return all restaurants\nconst restaurants = await city.getRestaurants();\n\n// this will return only open restaurants\nconst openRestaurants = await city.getOpenRestaurants();\n```\n\n----------------------------------------\n\nTITLE: Setting Transaction Isolation Level (TypeScript)\nDESCRIPTION: Demonstrates how to set a specific isolation level when starting a transaction. This allows you to control the transaction's behavior regarding concurrent operations.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/transactions.md#2025-04-09_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IsolationLevel } from '@sequelize/core';\n\nawait sequelize.transaction(\n  {\n    isolationLevel: IsolationLevel.SERIALIZABLE,\n  },\n  async t => {\n    // Your code\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: JSON Operations in MSSQL\nDESCRIPTION: Shows how to work with JSON stored as strings in MSSQL using built-in JSON functions for validation and value extraction.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/other-data-types.mdx#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nawait User.findAll({\n  where: sequelize.where(sequelize.fn('ISJSON', sequelize.col('userDetails')), 1),\n});\n\nawait User.findAll({\n  attributes: [\n    [sequelize.fn('JSON_VALUE', sequelize.col('userDetails'), '$.address.Line1'), 'address line 1'],\n  ],\n});\n\nawait User.findAll({\n  where: sequelize.where(\n    sequelize.fn('JSON_VALUE', sequelize.col('userDetails'), '$.address.Line1'),\n    '14, Foo Street',\n  ),\n});\n\nawait User.findAll({\n  attributes: [\n    [sequelize.fn('JSON_QUERY', sequelize.col('userDetails'), '$.address'), 'full address'],\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Tables with Foreign Keys in Sequelize Migrations\nDESCRIPTION: Migration that creates a table with a foreign key reference to another table. The references object specifies the target table, schema, and key to reference.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/migrations.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  up: (queryInterface, Sequelize) => {\n    return queryInterface.createTable('Person', {\n      name: Sequelize.DataTypes.STRING,\n      isBetaMember: {\n        type: Sequelize.DataTypes.BOOLEAN,\n        defaultValue: false,\n        allowNull: false,\n      },\n      userId: {\n        type: Sequelize.DataTypes.INTEGER,\n        references: {\n          model: {\n            tableName: 'users',\n            schema: 'schema',\n          },\n          key: 'id',\n        },\n        allowNull: false,\n      },\n    });\n  },\n  down: (queryInterface, Sequelize) => {\n    return queryInterface.dropTable('Person');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Complex Scope Definition with Includes\nDESCRIPTION: Example showing how to define complex scopes with nested includes and various constraints on associated models.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/scopes.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nFoo.addScope('includeEverything', {\n  include: {\n    model: Bar,\n    include: [\n      {\n        model: Baz,\n        include: Qux,\n      },\n    ],\n  },\n});\n\nFoo.addScope('limitedBars', {\n  include: [\n    {\n      model: Bar,\n      limit: 2,\n    },\n  ],\n});\n\nFoo.addScope('limitedBazs', {\n  include: [\n    {\n      model: Bar,\n      include: [\n        {\n          model: Baz,\n          limit: 2,\n        },\n      ],\n    },\n  ],\n});\n\nFoo.addScope('excludeBazName', {\n  include: [\n    {\n      model: Bar,\n      include: [\n        {\n          model: Baz,\n          attributes: {\n            exclude: ['name'],\n          },\n        },\n      ],\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Using Modified Data Type in Sequelize Model\nDESCRIPTION: Demonstrates how to use a modified data type (MyStringType) in a Sequelize model definition. The example defines a User model with a firstName field using the custom type.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/extending-data-types.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MyStringType } from './custom-types.js';\n\nconst sequelize = new Sequelize(/* options */);\n\nconst User = sequelize.define(\n  'User',\n  {\n    firstName: {\n      // highlight-next-line\n      type: MyStringType,\n    },\n  },\n  { timestamps: false, noPrimaryKey: true, underscored: true },\n);\n\nawait User.sync();\n```\n\n----------------------------------------\n\nTITLE: Configuring Oracle Database Connection in Sequelize\nDESCRIPTION: Example of creating a Sequelize instance to connect to an Oracle database using the node-oracledb connector. The configuration specifies host, port, and service name for the connection.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/dialect-specific-things.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst sequelize = new Sequelize('servicename', 'username', 'password', {\n  dialect: 'oracle',\n  host: 'hostname',\n  port: 'port number', //optional\n});\n```\n\n----------------------------------------\n\nTITLE: Instance-level Deletion Operations\nDESCRIPTION: Demonstrates both soft and hard deletion using instance methods on a model instance.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/paranoid.mdx#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst post = await Post.create({ title: 'test' });\nconsole.log(post instanceof Post); // true\nawait post.destroy(); // Would just set the `deletedAt` flag\nawait post.destroy({ force: true }); // Would really delete the record\n```\n\n----------------------------------------\n\nTITLE: Model-Level Validation in Sequelize\nDESCRIPTION: Example of implementing model-level validation using the @ModelValidator decorator to ensure coordinate pairs are either both present or both null.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/validations-and-constraints.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass Place extends Model {\n  @Attribute(DataTypes.INTEGER)\n  declare latitude: number | null;\n\n  @Attribute(DataTypes.INTEGER)\n  declare longitude: number | null;\n\n  @ModelValidator\n  validateCoords() {\n    if ((this.latitude === null) !== (this.longitude === null)) {\n      throw new Error('Either both latitude and longitude, or neither!');\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Sequelize Models with Underscored Option\nDESCRIPTION: Example showing how to define Sequelize models with the underscored option enabled. When true, this option converts all attribute fields to snake_case format in the database while keeping camelCase in JavaScript.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/naming-strategies.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst User = sequelize.define(\n  'user',\n  { username: Sequelize.STRING },\n  {\n    underscored: true,\n  },\n);\nconst Task = sequelize.define(\n  'task',\n  { title: Sequelize.STRING },\n  {\n    underscored: true,\n  },\n);\nUser.hasMany(Task);\nTask.belongsTo(User);\n```\n\n----------------------------------------\n\nTITLE: Safely Accessing the Parent Model from a Comment in a Polymorphic Association\nDESCRIPTION: This code demonstrates how to safely access the parent model (article or video) from a comment in a polymorphic association. It includes an example of filtering by targetModel when eager-loading, and checking the targetModel type when lazy-loading to avoid data integrity issues.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/polymorphic-associations.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst comment = await Comment.findOne({\n  include: ['article'],\n  where: {\n    // highlight-next-line\n    targetModel: 'article',\n  },\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst comment = await Comment.findOne();\n\n// highlight-start\nif (comment.targetModel === 'article') {\n  const article = await comment.getArticle();\n} else {\n  const video = await comment.getVideo();\n}\n```\n\n----------------------------------------\n\nTITLE: Using Op.all and Op.any Operators in Sequelize Queries (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the Op.all operator to check that a title contains both 'cat' and 'dog' words using case-insensitive LIKE.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/operators.mdx#2025-04-09_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Op } from '@sequelize/core';\n\nPost.findAll({\n  where: {\n    title: {\n      // highlight-start\n      // this will check that the title contains both the word \"cat\" and \"dog\"\n      [Op.iLike]: {\n        [Op.all]: ['%cat%', '%dog%'],\n      },\n      // highlight-end\n    },\n  },\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"posts\" WHERE \"title\" ILIKE ALL (ARRAY['%cat%', '%dog%']::TEXT[]);\n```\n\n----------------------------------------\n\nTITLE: Output with Limited Through Table Attributes in Many-to-Many Query\nDESCRIPTION: JSON output when selecting only specific attributes from the through table in a Many-to-Many relationship. Shows the result of using through.attributes to limit which fields are included.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/advanced-many-to-many.md#2025-04-09_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 4,\n  \"username\": \"p4dm3\",\n  \"points\": 1000,\n  \"profiles\": [\n    {\n      \"id\": 6,\n      \"name\": \"queen\",\n      \"grant\": {\n        \"selfGranted\": false\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple Operations with Transactions in Sequelize Migrations\nDESCRIPTION: Migration that performs multiple operations (adding columns) within a transaction to ensure atomicity. The transaction ensures all operations succeed or are rolled back together.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/migrations.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  up: (queryInterface, Sequelize) => {\n    return queryInterface.sequelize.transaction(t => {\n      return Promise.all([\n        queryInterface.addColumn(\n          'Person',\n          'petName',\n          {\n            type: Sequelize.DataTypes.STRING,\n          },\n          { transaction: t },\n        ),\n        queryInterface.addColumn(\n          'Person',\n          'favoriteColor',\n          {\n            type: Sequelize.DataTypes.STRING,\n          },\n          { transaction: t },\n        ),\n      ]);\n    });\n  },\n  down: (queryInterface, Sequelize) => {\n    return queryInterface.sequelize.transaction(t => {\n      return Promise.all([\n        queryInterface.removeColumn('Person', 'petName', { transaction: t }),\n        queryInterface.removeColumn('Person', 'favoriteColor', {\n          transaction: t,\n        }),\n      ]);\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Automatic Transaction Usage with CLS Enabled\nDESCRIPTION: This snippet shows how with CLS enabled, queries automatically use the current transaction context without explicitly passing the transaction object. The user creation query automatically uses the transaction from the CLS namespace.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/transactions.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nsequelize.transaction(t1 => {\n  // With CLS enabled, the user will be created inside the transaction\n  return User.create({ name: 'Alice' });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Range Values in PostgreSQL with Sequelize\nDESCRIPTION: Demonstrates different ways to supply range values in Sequelize, including controlling bound inclusion/exclusion. The examples show how to create date ranges with different bound configurations.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/data-types.mdx#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// defaults to inclusive lower bound, exclusive upper bound\nconst range = [new Date(Date.UTC(2016, 0, 1)), new Date(Date.UTC(2016, 1, 1))];\n// '[\"2016-01-01 00:00:00+00:00\", \"2016-02-01 00:00:00+00:00\")'\n\n// control inclusion\nconst range = [\n  { value: new Date(Date.UTC(2016, 0, 1)), inclusive: false },\n  { value: new Date(Date.UTC(2016, 1, 1)), inclusive: true },\n];\n// '(\"2016-01-01 00:00:00+00:00\", \"2016-02-01 00:00:00+00:00\"]'\n\n// composite form\nconst range = [\n  { value: new Date(Date.UTC(2016, 0, 1)), inclusive: false },\n  new Date(Date.UTC(2016, 1, 1)),\n];\n// '(\"2016-01-01 00:00:00+00:00\", \"2016-02-01 00:00:00+00:00\")'\n\nconst Timeline = sequelize.define('Timeline', {\n  range: DataTypes.RANGE(DataTypes.DATE),\n});\n\nawait Timeline.create({ range });\n```\n\n----------------------------------------\n\nTITLE: Querying with Array Overlap Operator in Sequelize\nDESCRIPTION: Using Op.overlap to find records where an array field has at least one value in common with the specified array. This is equivalent to PostgreSQL's && operator for arrays.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/operators.mdx#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nPost.findAll({\n  where: {\n    tags: { [Op.overlap]: ['popular', 'trending'] },\n  },\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"posts\" WHERE \"tags\" && ARRAY['popular', 'trending'];\n```\n\n----------------------------------------\n\nTITLE: Querying with Range Contains Operator for Single Value in Sequelize\nDESCRIPTION: Using Op.contains with range types to check if a range field contains a single value. This operator is equivalent to PostgreSQL's @> operator for ranges.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/operators.mdx#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nPost.findAll({\n  where: {\n    // publishedDuring is a range of dates\n    // This checks if a single date is present in the range\n    publishedDuring: { [Op.contains]: new Date() },\n  },\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"posts\" WHERE \"publishedDuring\" @> '2020-01-01';\n```\n\n----------------------------------------\n\nTITLE: Enabling Optimistic Locking with @Version Decorator in JavaScript\nDESCRIPTION: This snippet shows how to enable optimistic locking in a Sequelize model using JavaScript. It uses the @Version decorator to mark the version attribute, which will be used as the version count for optimistic locking.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/optimistic-locking.mdx#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Model } from '@sequelize/core';\nimport { Version } from '@sequelize/core/decorators-legacy';\n\nclass User extends Model {\n  @Version\n  version;\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Singulars and Plurals with Custom Association Aliases\nDESCRIPTION: Example showing how to define custom singular and plural forms for association aliases. This is useful for internationalization or when standard English inflection rules don't apply.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/naming-strategies.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nProject.belongsToMany(User, {\n  as: {\n    singular: 'líder',\n    plural: 'líderes',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom SQL Operators in Sequelize\nDESCRIPTION: Shows how to create a custom LIKE operator that supports escaping special LIKE characters using the sql tag for raw queries.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/operators.mdx#2025-04-09_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Literal, sql, Expression } from '@sequelize/core';\n\nfunction like(value: Expression, pattern: string, escape: string): Literal {\n  return sql`${value} LIKE ${pattern} ESCAPE ${escape}`;\n}\n\nPost.findAll({\n  where: [{ authorId: 12 }, like(sql.attribute('title'), 'Inflation is above 10\\\\%', '\\\\')],\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"posts\" WHERE \"authorId\" = 12 AND \"title\" LIKE 'Inflation is above 10\\%' ESCAPE '\\';\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract Models in Sequelize\nDESCRIPTION: Shows how to define an abstract model using the @Table.Abstract decorator, which prevents the model from being registered and creating a table in the database.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/inheritance.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Table.Abstract\nabstract class BaseModel extends Model {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Through Table Attributes in Many-to-Many Queries\nDESCRIPTION: Example of excluding all through table attributes when performing eager loading on a Many-to-Many relationship. This uses an empty attributes array to remove the nested through model object.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/advanced-many-to-many.md#2025-04-09_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nUser.findOne({\n  include: {\n    model: Profile,\n    through: {\n      attributes: [],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Super Many-to-Many Relationship in Sequelize\nDESCRIPTION: This code demonstrates how to implement a Super Many-to-Many relationship in Sequelize, combining both Many-to-Many and One-to-Many associations for maximum flexibility in querying.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/advanced-many-to-many.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// The Super Many-to-Many relationship\nUser.belongsToMany(Profile, { through: Grant });\nProfile.belongsToMany(User, { through: Grant });\nUser.hasMany(Grant);\nGrant.belongsTo(User);\nProfile.hasMany(Grant);\nGrant.belongsTo(Profile);\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Timestamp Hooks with Sequelize.define\nDESCRIPTION: This example demonstrates defining custom timestamp behavior for models using hooks within the sequelize.define method. The hooks customize the format of createdAt and updatedAt timestamps.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/hooks.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst User = sequelize.define(\n  'User',\n  {},\n  {\n    tableName: 'users',\n    hooks: {\n      beforeCreate: (record, options) => {\n        record.dataValues.createdAt = new Date()\n          .toISOString()\n          .replace(/T/, ' ')\n          .replace(/\\..+/g, '');\n        record.dataValues.updatedAt = new Date()\n          .toISOString()\n          .replace(/T/, ' ')\n          .replace(/\\..+/g, '');\n      },\n      beforeUpdate: (record, options) => {\n        record.dataValues.updatedAt = new Date()\n          .toISOString()\n          .replace(/T/, ' ')\n          .replace(/\\..+/g, '');\n      },\n    },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Querying with JSONB All Keys Exist Operator in Sequelize\nDESCRIPTION: Using Op.allKeysExist to find records where a JSONB field contains all of the specified keys. This is equivalent to PostgreSQL's ?& operator for JSONB.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/operators.mdx#2025-04-09_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nPost.findAll({\n  where: {\n    meta: { [Op.allKeysExist]: ['keywords', 'description'] },\n  },\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"posts\" WHERE \"meta\" ?& ARRAY['keywords', 'description'];\n```\n\n----------------------------------------\n\nTITLE: Creating Conditional Unique Indexes in Sequelize Migrations\nDESCRIPTION: Migration that creates a table and adds a conditional unique index composed of multiple fields. The where clause creates a partial index that applies uniqueness only to records matching the condition.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/migrations.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  up: (queryInterface, Sequelize) => {\n    queryInterface\n      .createTable('Person', {\n        name: Sequelize.DataTypes.STRING,\n        bool: {\n          type: Sequelize.DataTypes.BOOLEAN,\n          defaultValue: false,\n        },\n      })\n      .then((queryInterface, Sequelize) => {\n        queryInterface.addIndex('Person', ['name', 'bool'], {\n          indicesType: 'UNIQUE',\n          where: { bool: 'true' },\n        });\n      });\n  },\n  down: (queryInterface, Sequelize) => {\n    return queryInterface.dropTable('Person');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Querying with TSQuery Matching Operator in Sequelize\nDESCRIPTION: Using Op.match with a tsvector field to perform full text search. This operator requires a built tsquery object and is equivalent to PostgreSQL's @@ operator for text search.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/operators.mdx#2025-04-09_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sql } from '@sequelize/core';\n\nDocument.findAll({\n  where: {\n    // in this example, it is assumed that this attribute has been previously populated using\n    // postgres' to_tsvector function.\n    searchTsVector: {\n      [Op.match]: sql`to_tsquery('english', 'cat & rat')`,\n    },\n  },\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"documents\" WHERE \"searchTsVector\" @@ to_tsquery('english', 'cat & rat');\n```\n\n----------------------------------------\n\nTITLE: Hard-Deleting Records in Paranoid Models\nDESCRIPTION: Shows how to force a hard-deletion in paranoid models by using the force option with the destroy method.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/paranoid.mdx#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait Post.destroy({\n  where: {\n    id: 1,\n  },\n  force: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Potential Foreign Key Conflict with Association Aliases\nDESCRIPTION: Example demonstrating a potential mistake when using aliases in associations without explicitly specifying foreign keys. This can lead to duplicate foreign key columns with different names.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/naming-strategies.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Example of possible mistake\nInvoice.belongsTo(Subscription, { as: 'TheSubscription' });\nSubscription.hasMany(Invoice);\n```\n\n----------------------------------------\n\nTITLE: Using JSON Operators on Nested Properties in Sequelize\nDESCRIPTION: Shows how to use JSON operators like Op.anyKeyExists on nested properties in Sequelize queries. This example checks for the existence of specific keys in a JSON object.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/json.mdx#2025-04-09_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nUser.findAll({\n  where: {\n    'jsonAttribute.address': { [Op.anyKeyExists]: ['country', 'street'] },\n  },\n});\n```\n\nLANGUAGE: SQL\nCODE:\n```\n-- anyKeyExists is only available in postgres\n\"jsonAttribute\"->'address' ?| ARRAY['country','street'];\n```\n\n----------------------------------------\n\nTITLE: Configuring Read Replication in Sequelize with MySQL\nDESCRIPTION: This code demonstrates how to set up a Sequelize instance with read replication. It configures multiple read replica servers and a single write server, along with connection pool settings. The configuration separates read and write operations, directing them to appropriate servers.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/read-replication.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst sequelize = new Sequelize('database', null, null, {\n  dialect: 'mysql',\n  port: 3306,\n  replication: {\n    read: [\n      {\n        host: '8.8.8.8',\n        username: 'read-1-username',\n        password: process.env.READ_DB_1_PW,\n      },\n      {\n        host: '9.9.9.9',\n        username: 'read-2-username',\n        password: process.env.READ_DB_2_PW,\n      },\n    ],\n    write: {\n      host: '1.1.1.1',\n      username: 'write-username',\n      password: process.env.WRITE_DB_PW,\n    },\n  },\n  pool: {\n    // If you want to override the options used for the read/write pool you can do so here\n    max: 20,\n    idle: 30000,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for Scoped Association Query\nDESCRIPTION: Shows the SQL query generated by Sequelize when using a scoped association to fetch open restaurants.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/association-scopes.md#2025-04-09_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM `restaurants` WHERE `restaurants`.`status` = 'open' AND `restaurants`.`cityId` = 1;\n```\n\n----------------------------------------\n\nTITLE: Configuring Sequelize Connection Pool in JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize a Sequelize instance with a custom connection pool configuration. It sets the maximum and minimum number of connections, as well as acquire and idle timeouts.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/connection-pool.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst sequelize = new Sequelize(/* ... */, {\n  // ...\n  pool: {\n    max: 5,\n    min: 0,\n    acquire: 30000,\n    idle: 10000\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Intermediate Associations in BelongsToMany\nDESCRIPTION: This snippet illustrates how to customize the names of intermediate associations created by a BelongsToMany relationship. It uses the 'throughAssociations' option to specify custom names for the four intermediate associations.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/belongs-to-many.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass Person extends Model<InferAttributes<Person>, InferCreationAttributes<Person>> {\n  @BelongsToMany(() => Toot, {\n    through: 'LikedToot',\n    inverse: {\n      as: 'likers',\n    },\n    throughAssociations: {\n      fromSource: 'likedTootsLikers',\n      toSource: 'liker',\n      fromTarget: 'likersLikedToots',\n      toTarget: 'likedToot',\n    },\n  })\n  declare likedToots?: NonAttribute<Toot[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Scopes in Sequelize (JavaScript)\nDESCRIPTION: Demonstrates how to apply and merge multiple scopes, including the default scope, and how scope merging behaves with different options.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/scopes.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// These two are equivalent\nawait Project.scope('deleted', 'activeUsers').findAll();\nawait Project.scope(['deleted', 'activeUsers']).findAll();\n\n// Applying default scope with other scopes\nawait Project.scope('defaultScope', 'deleted').findAll();\n\n// Merging scopes with finder options\nProject.scope('deleted').findAll({\n  where: {\n    firstName: 'john',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Implicit AND in Sequelize Object Conditions\nDESCRIPTION: Shows how multiple properties within a single where object are implicitly joined with AND operator in Sequelize queries.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/operators.mdx#2025-04-09_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nPost.findAll({\n  where: {\n    authorId: 12,\n    status: 'active',\n  },\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"posts\" WHERE \"authorId\" = 12 AND \"status\" = 'active';\n```\n\n----------------------------------------\n\nTITLE: Nesting Objects Inside Op.or in Sequelize\nDESCRIPTION: Illustrates how nesting objects inside Op.or applies OR operator only at one level of nesting at a time, with nested properties being joined with AND.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/operators.mdx#2025-04-09_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Op } from '@sequelize/core';\n\nPost.findAll({\n  where: {\n    [Op.or]: [\n      // highlight-start\n      // These properties will be joined with `AND`\n      {\n        authorId: 12,\n        status: 'active',\n      },\n      // highlight-end\n      {\n        commentCount: 12,\n      },\n    ],\n  },\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"posts\" WHERE (\"authorId\" = 12 AND \"status\" = 'active') OR \"commentCount\" = 12;\n```\n\n----------------------------------------\n\nTITLE: Freezing Table Names\nDESCRIPTION: Shows how to prevent table name pluralization by using the freezeTableName option at the model level.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/naming-strategies.mdx#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SqliteDialect } from '@sequelize/sqlite3';\nimport { Model, Sequelize } from '@sequelize/core';\nimport { Table } from '@sequelize/core/decorators-legacy';\n\n@Table({\n  freezeTableName: true,\n})\nclass User extends Model {}\n\nconst sequelize = new Sequelize({\n  dialect: SqliteDialect,\n  models: [User],\n});\n\nconsole.log(User.table.tableName);\n// → User\n```\n\n----------------------------------------\n\nTITLE: Visualizing One-to-Many Relationship with Mermaid\nDESCRIPTION: Mermaid diagram demonstrating a One-to-Many relationship between people and cities tables, where one city can have multiple people born in it.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/basics.md#2025-04-09_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n  people ||--o{ cities : birthplace\n```\n\n----------------------------------------\n\nTITLE: Using sql.list for Array Handling in SQL Queries\nDESCRIPTION: The sql.list function is used to treat an array as an SQL list instead of an SQL array. This is useful for IN clauses and similar constructs. It's important to ensure the array contains at least one value to avoid invalid SQL.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/raw-queries.mdx#2025-04-09_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst statuses = ['active', 'pending'];\n\nawait sequelize.query(sql`SELECT * FROM projects WHERE status = ANY(${statuses})`);\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM projects WHERE status = ANY(ARRAY['active', 'pending'])\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst statuses = ['active', 'pending'];\n\nawait sequelize.query(sql`SELECT * FROM projects WHERE status IN ${sql.list(statuses)}`);\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM projects WHERE status IN ('active', 'pending')\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL via Unix Socket\nDESCRIPTION: Example of connecting to PostgreSQL using a Unix socket path instead of a hostname and port. This approach is useful for local connections on Unix-based systems.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/databases/postgres.mdx#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst sequelize = new Sequelize({\n  dialect: PostgresDialect,\n  host: '/var/run/postgresql',\n});\n```\n\n----------------------------------------\n\nTITLE: MySQL Warning Configuration Options\nDESCRIPTION: Documentation for the showWarnings option which controls whether MySQL query warnings are sent to the logging callback.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/databases/mysql.mdx#2025-04-09_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Option         | Description                                                                                                              |\n| -------------- | ------------------------------------------------------------------------------------------------------------------------ |\n| `showWarnings` | If `true`, warnings produced during the execution of a query will be sent to the `logging` callback. Default is `false`. |\n```\n\n----------------------------------------\n\nTITLE: Creating a Table using Query Interface in Sequelize\nDESCRIPTION: This snippet demonstrates how to create a table named 'Person' using the Query Interface. It defines two columns: 'name' as a string and 'isBetaMember' as a boolean with a default value.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/query-interface.md#2025-04-09_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nqueryInterface.createTable('Person', {\n  name: DataTypes.STRING,\n  isBetaMember: {\n    type: DataTypes.BOOLEAN,\n    defaultValue: false,\n    allowNull: false,\n  },\n});\n```\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE IF NOT EXISTS `Person` (\n  `name` VARCHAR(255),\n  `isBetaMember` TINYINT(1) NOT NULL DEFAULT 0\n);\n```\n\n----------------------------------------\n\nTITLE: Using findAndCountAll with Include Option in Sequelize\nDESCRIPTION: Demonstrates using findAndCountAll with the include option to count users who have a profile. Only required includes impact the count result.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/select-methods.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nUser.findAndCountAll({\n  include: [{ model: Profile, required: true }],\n  limit: 3,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Inheritance-based Polymorphic Associations in Sequelize with TypeScript\nDESCRIPTION: This code demonstrates creating a polymorphic association using model inheritance. It defines an abstract base model (AbstractComment) with common fields, and then creates concrete models (ArticleComment and VideoComment) that extend it. This approach supports foreign keys and allows for model-specific attributes.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/polymorphic-associations.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// This is the base model, which defines the common fields between all comments.\n@AbstractModel\nabstract class AbstractComment<Attributes, CreationAttributes> extends Model<\n  Attributes,\n  CreationAttributes\n> {\n  declare id: number;\n\n  @Attributes(DataTypes.STRING)\n  @NotNull\n  declare content: string;\n\n  @Attributes(DataTypes.INTEGER)\n  @NotNull\n  declare targetId: number;\n}\n\n// This is the model for comments on articles.\nclass ArticleComment extends AbstractComment<\n  InferAttributes<ArticleComment>,\n  InferCreationAttributes<ArticleComment>\n> {\n  @BelongsTo(() => Article, 'targetId')\n  declare target?: Article;\n}\n\n// This is the model for comments on videos.\nclass VideoComment extends AbstractComment<\n  InferAttributes<VideoComment>,\n  InferCreationAttributes<VideoComment>\n> {\n  @BelongsTo(() => Video, 'targetId')\n  declare target?: Video;\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing JavaScript-based UUID Generation in PostgreSQL\nDESCRIPTION: Example of forcing Sequelize to generate UUIDs in JavaScript rather than using native database functions. Useful when the uuid-ossp extension is not available in PostgreSQL.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/data-types.mdx#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nMyModel.init({\n  myUuid: {\n    type: DataTypes.UUID.V1,\n    defaultValue: sql.uuidV1.asJavaScript,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Single-model Multiple Foreign Key Polymorphic Associations in Sequelize\nDESCRIPTION: This code demonstrates creating a polymorphic association using a single model with multiple foreign keys. It defines a Comment model with two nullable foreign keys (articleId and videoId), allowing comments to be associated with either articles or videos.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/polymorphic-associations.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Comment extends Model<InferAttributes<Comment>, InferCreationAttributes<Comment>> {\n  declare id: number;\n\n  @Attributes(DataTypes.STRING)\n  @NotNull\n  declare content: string;\n\n  @Attributes(DataTypes.INTEGER)\n  declare articleId: number | null;\n\n  @BelongsTo(() => Article, 'articleId')\n  declare article?: Article;\n\n  @Attributes(DataTypes.INTEGER)\n  declare videoId: number | null;\n\n  @BelongsTo(() => Video, 'videoId')\n  declare video?: Video;\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Column Name Configuration\nDESCRIPTION: Shows how to manually specify a column name using the ColumnName decorator.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/naming-strategies.mdx#2025-04-09_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DataTypes, Model, InferAttributes, InferCreationAttributes } from '@sequelize/core';\nimport { Attribute, ColumnName } from '@sequelize/core/decorators-legacy';\n\nclass User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n  @Attribute(DataTypes.STRING)\n  @ColumnName('first_name')\n  declare firstName: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Association Setter Method for BelongsTo in TypeScript\nDESCRIPTION: Example showing how to use the setter method added by BelongsTo association to associate a model with another model, either by providing the model instance or the foreign key value.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/belongs-to.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BelongsToSetAssociationMixin } from '@sequelize/core';\n\nclass Comment extends Model {\n  @BelongsTo(() => Post, 'postId')\n  declare post?: NonAttribute<Post>;\n\n  // highlight-start\n  declare setPost: BelongsToSetAssociationMixin<Post, /* Foreign Key Type */ Comment['postId']>;\n  // highlight-end\n}\n\nconst comment = await Comment.findByPk(1);\nconst post = await Post.findByPk(1);\nawait comment.setPost(post);\n\n// Or, if you already have the foreign key\nawait comment.setPost(1);\n```\n\n----------------------------------------\n\nTITLE: Using SQL Tag in Different Query Modes (TypeScript)\nDESCRIPTION: Illustrates how the 'sql' tag behaves differently in 'replacement' mode (e.g., in findAll) versus 'bind parameter' mode (e.g., in update).\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/raw-queries.mdx#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst fundingStatus = 'funded';\n\nawait Project.findAll({\n  where: and({ status: 'active' }, sql`funding = ${fundingStatus}`),\n});\n\nawait Project.update(\n  { funding: 'pending' },\n  {\n    where: and({ status: 'active' }, sql`funding = ${fundingStatus}`),\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Column Names for Timestamps (TypeScript)\nDESCRIPTION: Demonstrates how to customize the database column names for timestamp attributes using the @ColumnName decorator in TypeScript.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/auto-timestamps.mdx#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Model, InferCreationAttributes, InferAttributes, CreationOptional } from '@sequelize/core';\nimport { ColumnName } from '@sequelize/core/decorators-legacy';\n\nclass User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n  @ColumnName('created_at')\n  declare createdAt: CreationOptional<Date>;\n\n  @ColumnName('updated_at')\n  declare updatedAt: CreationOptional<Date>;\n\n  @ColumnName('deleted_at')\n  declare deletedAt: Date | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Model.upsert() in Sequelize v6\nDESCRIPTION: Demonstrates the updated signature and behavior of the upsert() method in Sequelize v6, which now returns both the instance and a creation status indicator.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/upgrade.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst [instance, created] = await MyModel.upsert({});\n```\n\n----------------------------------------\n\nTITLE: Using Subqueries in Sequelize to Find Posts with Specific Reactions\nDESCRIPTION: Shows how to use a subquery with the SQL tag to find posts that have at least one reaction of a specific type. The example uses the Op.in operator with a raw SQL subquery to select posts with 'Laugh' reactions.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/sub-queries.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sql, Op } from '@sequelize/core';\n\nPost.findAll({\n  where: {\n    id: {\n      [Op.in]: sql`\n        SELECT DISTINCT \"postId\"\n        FROM \"reactions\" AS \"reaction\"\n        WHERE \"reaction\".\"type\" = 'Laugh'\n      `,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Migration Storage in Sequelize CLI\nDESCRIPTION: Configuration options for customizing how Sequelize stores migration metadata, including storage type, file path, table name, and schema settings. The example shows JSON configuration for development environment with MySQL dialect.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/migrations.md#2025-04-09_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"development\": {\n    \"username\": \"root\",\n    \"password\": null,\n    \"database\": \"database_development\",\n    \"host\": \"127.0.0.1\",\n    \"dialect\": \"mysql\",\n\n    // Use a different storage type. Default: sequelize\n    \"migrationStorage\": \"json\",\n\n    // Use a different file name. Default: sequelize-meta.json\n    \"migrationStoragePath\": \"sequelizeMeta.json\",\n\n    // Use a different table name. Default: SequelizeMeta\n    \"migrationStorageTableName\": \"sequelize_meta\",\n\n    // Use a different schema for the SequelizeMeta table\n    \"migrationStorageTableSchema\": \"custom_schema\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Paranoid Model in JavaScript\nDESCRIPTION: Shows how to define a paranoid model using JavaScript decorators in Sequelize. The model includes a deletedAt attribute marked with @DeletedAt decorator.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/paranoid.mdx#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Model } from '@sequelize/core';\nimport { DeletedAt } from '@sequelize/core/decorators-legacy';\n\nclass User extends Model {\n  @DeletedAt\n  deletedAt;\n}\n```\n\n----------------------------------------\n\nTITLE: Database Safety Check in Sequelize Sync\nDESCRIPTION: Illustrates how to use the match option as a safety check when synchronizing tables, ensuring sync only runs on databases with names matching a specific pattern.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/model-synchronization.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsequelize.sync({ force: true, match: /_test$/ });\n```\n\n----------------------------------------\n\nTITLE: Using Inverse Association for Efficient Model Creation in TypeScript\nDESCRIPTION: Alternative efficient approach for creating related models when the inverse association is defined, using the create method from the target model.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/belongs-to.md#2025-04-09_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst post = await Post.create({\n  title: 'New Post',\n  content: 'This is a new post',\n});\n\nconst comment = await post.createComment({\n  content: 'This is a comment',\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Database Seeds\nDESCRIPTION: Demo user seed file implementation showing up/down methods for data insertion and deletion\nSOURCE: https://github.com/sequelize/website/blob/main/docs/cli.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  up: (queryInterface, Sequelize) => {\n    return queryInterface.bulkInsert('Users', [{\n      firstName: 'John',\n      lastName: 'Doe',\n      email: 'example@example.com',\n      createdAt: new Date(),\n      updatedAt: new Date()\n    }]);\n  },\n  down: (queryInterface, Sequelize) => {\n    return queryInterface.bulkDelete('Users', null, {});\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Using Model#set for Multiple Field Updates\nDESCRIPTION: Shows how to update multiple fields at once using the set() method before saving changes to the database.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/update.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst jane = await User.create({ name: 'Jane' });\n\njane.set({\n  name: 'Ada',\n  favoriteColor: 'blue',\n});\n\n// both the name and the favoriteColor have been updated locally,\n// but won't be saved to the database until you call save()\n\nawait jane.save();\n```\n\n----------------------------------------\n\nTITLE: NPM Scripts Configuration for Sequelize CLI\nDESCRIPTION: Example of package.json scripts configuration for Sequelize CLI migration commands.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/migrations.md#2025-04-09_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"migrate:up\": \"npx sequelize-cli db:migrate\",\n    \"migrate:undo\": \"npx sequelize-cli db:migrate:undo\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bulk Updates in Sequelize\nDESCRIPTION: Shows how to perform bulk updates using the static Model.update() method to update multiple records that match specific criteria.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/update.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Change everyone without a last name to \"Doe\"\nawait User.update(\n  { lastName: 'Doe' },\n  {\n    where: {\n      lastName: null,\n    },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Using Op.any with Default Equality Operator in Sequelize\nDESCRIPTION: Example showing how to use Op.any operator with the default equality operator to check if authorId equals either 12 or 13.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/operators.mdx#2025-04-09_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Op } from '@sequelize/core';\n\nPost.findAll({\n  where: {\n    authorId: {\n      // highlight-start\n      // this will check that the authorId is equal to either 12 or 13\n      [Op.any]: [12, 13],\n      // highlight-end\n    },\n  },\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"posts\" WHERE \"authorId\" = ANY (ARRAY[12, 13]::INTEGER[]);\n```\n\n----------------------------------------\n\nTITLE: Using sql.uuidV4 and sql.uuidV1 for UUID Generation\nDESCRIPTION: The sql.uuidV4 and sql.uuidV1 functions generate dialect-specific UUID functions in supported dialects. They are primarily used as default values for UUID attributes but can also be used in queries.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/raw-queries.mdx#2025-04-09_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nsequelize.query(sql`INSERT INTO users (id) VALUES (${sql.uuidV4()})`);\n```\n\nLANGUAGE: sql\nCODE:\n```\n-- postgres example\nINSERT INTO users (id) VALUES (gen_random_uuid())\n```\n\n----------------------------------------\n\nTITLE: Using sql.unquote for JSON Extraction in TypeScript\nDESCRIPTION: Demonstrates how to use sql.unquote with jsonPath to extract values from JSON columns in different SQL dialects.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/raw-queries.mdx#2025-04-09_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nsequelize.query(sql`\n  SELECT ${sql.unquote(sql.jsonPath(sql.identifier('data'), ['addresses', 0, 'country']))} AS country\n  FROM users\n`);\n```\n\nLANGUAGE: sql\nCODE:\n```\n-- postgres (the #>> operator unquotes, unlike the #> operator)\nSELECT data#>>ARRAY['addresses', '0', 'country'] AS country FROM users\n-- other dialects\nSELECT JSON_UNQUOTE(JSON_EXTRACT(data, '$.addresses[0].country')) AS country FROM users\n```\n\n----------------------------------------\n\nTITLE: Customizing Timestamp Attributes with Decorators (JavaScript)\nDESCRIPTION: Shows how to rename and customize timestamp attributes using decorators in JavaScript.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/auto-timestamps.mdx#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Model } from '@sequelize/core';\nimport { CreatedAt, UpdatedAt, DeletedAt } from '@sequelize/core/decorators-legacy';\n\nclass User extends Model {\n  @CreatedAt\n  creationDate;\n\n  @UpdatedAt\n  lastUpdateDate;\n\n  @DeletedAt\n  deletionDate;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BelongsToMany Association in Sequelize with TypeScript\nDESCRIPTION: This snippet demonstrates how to define a BelongsToMany association between Person and Toot models using TypeScript decorators in Sequelize. It shows the basic structure of defining models and associations.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/belongs-to-many.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Model, InferAttributes, InferCreationAttributes, NonAttribute } from '@sequelize/core';\nimport { BelongsToMany } from '@sequelize/core/decorators-legacy';\n\nclass Person extends Model<InferAttributes<Person>, InferCreationAttributes<Person>> {\n  @BelongsToMany(() => Toot, {\n    through: 'LikedToot',\n  })\n  declare likedToots?: NonAttribute<Toot[]>;\n}\n\nclass Toot extends Model<InferAttributes<Toot>, InferCreationAttributes<Toot>> {}\n```\n\n----------------------------------------\n\nTITLE: Async/Await Migration with Manual Transaction\nDESCRIPTION: Migration using async/await syntax with manually managed transactions.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/cli.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst { DataTypes } = require('@sequelize/core');\n\nmodule.exports = {\n  async up(queryInterface) {\n    const transaction = await queryInterface.sequelize.startUnmanagedTransaction();\n    try {\n      await queryInterface.addColumn(\n        'Person',\n        'petName',\n        {\n          type: DataTypes.STRING,\n        },\n        { transaction },\n      );\n      await queryInterface.addIndex('Person', 'petName', {\n        fields: 'petName',\n        unique: true,\n        transaction,\n      });\n      await transaction.commit();\n    } catch (err) {\n      await transaction.rollback();\n      throw err;\n    }\n  },\n  async down(queryInterface) {\n    const transaction = await queryInterface.sequelize.startUnmanagedTransaction();\n    try {\n      await queryInterface.removeColumn('Person', 'petName', { transaction });\n      await transaction.commit();\n    } catch (err) {\n      await transaction.rollback();\n      throw err;\n    }\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Table Comment to Sequelize Model (TypeScript)\nDESCRIPTION: This code demonstrates how to add a comment to a table definition in Sequelize using the comment option. This feature is only available in MySQL, MariaDB and PostgreSQL.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/advanced.mdx#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Model } from '@sequelize/core';\nimport { Table } from '@sequelize/core/decorators-legacy';\n\n@Table({\n  comment: 'This is the User model',\n})\nexport class User extends Model {}\n```\n\n----------------------------------------\n\nTITLE: Deploying Sequelize Documentation Website Using SSH\nDESCRIPTION: This command deploys the website using SSH. It's useful for pushing to the 'gh-pages' branch when using GitHub Pages for hosting.\nSOURCE: https://github.com/sequelize/website/blob/main/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nUSE_SSH=true yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Saving Specific Fields in Sequelize\nDESCRIPTION: Demonstrates how to save only specific fields using the fields option with save(), useful when working with form data.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/update.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst jane = await User.create({ name: 'Jane' });\nconsole.log(jane.name); // \"Jane\"\nconsole.log(jane.favoriteColor); // \"green\"\njane.name = 'Jane II';\njane.favoriteColor = 'blue';\nawait jane.save({ fields: ['name'] });\nconsole.log(jane.name); // \"Jane II\"\nconsole.log(jane.favoriteColor); // \"blue\"\n// The above printed blue because the local object has it set to blue, but\n// in the database it is still \"green\":\nawait jane.reload();\nconsole.log(jane.name); // \"Jane II\"\nconsole.log(jane.favoriteColor); // \"green\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Connection in Sequelize\nDESCRIPTION: Example of creating a Sequelize instance with SQLite dialect, specifying a storage file path and configuring database opening mode options. The example shows how to import SQLite constants for setting specific open modes.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/dialect-specific-things.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Sequelize } from 'sequelize';\nimport SQLite from 'sqlite3';\n\nconst sequelize = new Sequelize('database', 'username', 'password', {\n  dialect: 'sqlite',\n  storage: 'path/to/database.sqlite', // or ':memory:'\n  dialectOptions: {\n    // Your sqlite3 options here\n    // for instance, this is how you can configure the database opening mode:\n    mode: SQLite.OPEN_READWRITE | SQLite.OPEN_CREATE | SQLite.OPEN_FULLMUTEX,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Multiple Conditions in Sequelize WHERE Clauses\nDESCRIPTION: Example of using multiple conditions in a where clause, which Sequelize implicitly joins with AND operators to create a combined filter condition.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-querying-basics.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nPost.findAll({\n  where: {\n    authorId: 12,\n    status: 'active',\n  },\n});\n// SELECT * FROM post WHERE authorId = 12 AND status = 'active';\n```\n\n----------------------------------------\n\nTITLE: Advanced Query Options\nDESCRIPTION: Shows various query options including logging, result formatting, and raw results.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/raw-queries.mdx#2025-04-09_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { QueryTypes } from '@sequelize/core';\nawait sequelize.query('SELECT 1', {\n  logging: console.log,\n  plain: false,\n  raw: false,\n  type: QueryTypes.SELECT,\n});\n\nconsole.log(await sequelize.query('SELECT * FROM projects', { raw: true }));\n```\n\n----------------------------------------\n\nTITLE: Using Attribute Decorators for Foreign Keys in Sequelize (TypeScript)\nDESCRIPTION: This code demonstrates how to use Attribute Decorators to customize foreign keys in Sequelize. It shows how to define a foreign key attribute with a custom column name in the DrivingLicense model.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/faq.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass Person extends Model {\n  @HasOne(() => DrivingLicense, 'ownerId')\n  declare drivingLicense?: NonAttribute<DrivingLicense>;\n}\n\nclass DrivingLicense extends Model {\n  @Attribute({\n    columnName: 'owner_id',\n  })\n  declare ownerId: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Default Primary Key in Sequelize Model (TypeScript)\nDESCRIPTION: This snippet demonstrates how to prevent Sequelize from automatically adding a primary key attribute to a model using the noPrimaryKey option in TypeScript.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/advanced.mdx#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Table({ noPrimaryKey: true })\nexport class User extends Model {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Association Checker in Sequelize TypeScript\nDESCRIPTION: Shows implementation of hasX methods for checking existing associations. Includes both singular and plural versions for checking single or multiple associations.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/belongs-to-many.md#2025-04-09_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  BelongsToManyHasAssociationMixin,\n  BelongsToManyHasAssociationsMixin,\n} from '@sequelize/core';\n\nclass Author extends Model<InferAttributes<Author>, InferCreationAttributes<Author>> {\n  @BelongsToMany(() => Book, { through: 'BookAuthor' })\n  declare books?: NonAttribute<Book[]>;\n\n  declare hasBook: BelongsToManyHasAssociationMixin<\n    Book,\n    Book['id']\n  >;\n\n  declare hasBooks: BelongsToManyHasAssociationsMixin<\n    Book,\n    Book['id']\n  >;\n}\n\nconst author = await Author.findByPk(1);\n\nconst isAssociated = await author.hasBook(book1);\n\nconst isAssociated = await author.hasBooks([book1, book2, book3]);\n\nconst isAssociated = await author.hasBooks([1, 2, 3]);\n```\n\n----------------------------------------\n\nTITLE: Generating Migration File\nDESCRIPTION: Commands to generate a new migration file using the CLI.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/cli.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# using npm\nnpx sequelize-cli migration:generate --name migration-example\n# using yarn\nyarn sequelize-cli migration:generate --name migration-example\n```\n\n----------------------------------------\n\nTITLE: Proper Schema Support for MySQL in Sequelize v7\nDESCRIPTION: Demonstrates the improved schema support for MySQL in Sequelize v7. The example shows how to define a model with a schema, which now correctly creates the table in the specified schema.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/upgrade.md#2025-04-09_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nsequelize.define(\n  'User',\n  {},\n  {\n    schema: 'my_schema',\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Querying JSON NULL Values\nDESCRIPTION: Examples of querying for JSON NULL values using different methods.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/json.mdx#2025-04-09_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nUser.findAll({\n  where: {\n    jsonAttribute: JSON_NULL,\n  },\n});\n\nUser.findAll({\n  where: {\n    jsonAttribute: { [Op.eq]: null },\n  },\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"Users\" WHERE \"jsonAttribute\" = 'null';\n```\n\n----------------------------------------\n\nTITLE: Bulk Operations in Sequelize\nDESCRIPTION: Demonstrates bulk creation operations using bulkCreate method, including validation and field filtering options.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-querying-basics.md#2025-04-09_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst captains = await Captain.bulkCreate([{ name: 'Jack Sparrow' }, { name: 'Davy Jones' }]);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nawait User.bulkCreate([{ username: 'foo' }, { username: 'bar', admin: true }], {\n  fields: ['username'],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring NULL Behavior with nullJsonStringification\nDESCRIPTION: Demonstrates how to configure global NULL handling behavior for JSON columns.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/json.mdx#2025-04-09_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nnew Sequelize({\n  /* options */\n  nullJsonStringification: 'sql',\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Permanent Hooks via Sequelize Constructor\nDESCRIPTION: An alternative way to define permanent hooks by passing them directly in the hooks option of the Sequelize constructor. These hooks will run for all models, unlike the default hooks that use the define option.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/hooks.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nnew Sequelize(..., {\n  hooks: {\n    beforeCreate() {\n      // do stuff\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Connection Options Component in Markdown\nDESCRIPTION: This code imports a markdown component called '_connection-options.md' and renders it in the current document using JSX-style syntax within markdown.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/databases/mysql.mdx#2025-04-09_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nimport ConnectionOptions from './_connection-options.md';\n\n<ConnectionOptions />\n```\n\n----------------------------------------\n\nTITLE: Configuring Sequelize Constructor for Snowflake\nDESCRIPTION: This code snippet demonstrates how to set up the Sequelize constructor to use the SnowflakeDialect. It includes configuration for the Snowflake connection, such as access URL, role, warehouse, credentials, and database name.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/databases/snowflake.mdx#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Sequelize } from '@sequelize/core';\nimport { SnowflakeDialect } from '@sequelize/snowflake';\n\nconst sequelize = new Sequelize({\n  dialect: SnowflakeDialect,\n  accessUrl: 'https://myaccount.us-east-1.snowflakecomputing.com',\n  role: 'myRole',\n  warehouse: 'myWarehouse',\n  username: 'myUserName',\n  password: 'myPassword',\n  database: 'myDatabaseName',\n});\n```\n\n----------------------------------------\n\nTITLE: Using HasMany Setter Method in Sequelize\nDESCRIPTION: This code demonstrates how to declare and use the setter method for a HasMany association. The setter method allows you to replace all associated Comment models for a Post, using either model instances or primary key values.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/has-many.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HasManySetAssociationsMixin } from '@sequelize/core';\n\nclass Post extends Model<InferAttributes<Post>, InferCreationAttributes<Post>> {\n  @HasMany(() => Comment, 'postId')\n  declare comments?: NonAttribute<Comment[]>;\n\n  // highlight-start\n  declare setComments: HasManySetAssociationsMixin<\n    Comment,\n    /* this is the type of the primary key of the target */\n    Comment['id']\n  >;\n  // highlight-end\n}\n\n// ...\n\nconst post = await Post.findByPk(1);\nconst [comment1, comment2, comment3] = await Comment.findAll({ limit: 3 });\n\n// highlight-start\n// Remove all previous associations and set the new ones\nawait post.setComments([comment1, comment2, comment3]);\n\n// You can also use the primary key of the newly associated model as a way to identify it\n// without having to fetch it first.\nawait post.setComments([1, 2, 3]);\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Registering Sequelize Instance Hooks through the Sequelize options\nDESCRIPTION: Example of registering a 'beforeDefine' hook through the options object when creating a Sequelize instance.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/hooks.mdx#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Sequelize } from '@sequelize/core';\n\nconst sequelize = new Sequelize({\n  /* options */\n  // highlight-next-line\n  hooks: {\n    beforeDefine: () => {\n      console.log('A new Model is being initialized');\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Finding Records with Count using findAndCountAll in Sequelize\nDESCRIPTION: Shows how to use findAndCountAll to retrieve both matching records and the total count. This is useful for pagination scenarios where total record count is needed.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/select-methods.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { count, rows } = await Project.findAndCountAll({\n  where: {\n    title: {\n      [Op.like]: 'foo%',\n    },\n  },\n  offset: 10,\n  limit: 2,\n});\n\nconsole.log(count);\nconsole.log(rows);\n```\n\n----------------------------------------\n\nTITLE: Basic JSON NULL Insertion in Sequelize\nDESCRIPTION: Demonstrates default behavior of inserting null into a JSON column, which stringifies it as JSON null.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/json.mdx#2025-04-09_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nUser.create({\n  jsonAttribute: null,\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO \"Users\" (\"jsonAttribute\") VALUES ('null');\n```\n\n----------------------------------------\n\nTITLE: Customizing Timestamp Attributes with Decorators (TypeScript)\nDESCRIPTION: Shows how to rename and customize timestamp attributes using decorators in TypeScript.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/auto-timestamps.mdx#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InferCreationAttributes, InferAttributes, Model, CreationOptional } from '@sequelize/core';\nimport { CreatedAt, UpdatedAt, DeletedAt } from '@sequelize/core/decorators-legacy';\n\nclass User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n  @CreatedAt\n  declare creationDate: CreationOptional<Date>;\n\n  @UpdatedAt\n  declare lastUpdateDate: CreationOptional<Date>;\n\n  @DeletedAt\n  declare deletionDate: Date | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Unsigned and Zerofill Integers in MySQL/MariaDB\nDESCRIPTION: This snippet demonstrates how to define unsigned and zerofill integers in MySQL and MariaDB using Sequelize.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-basics.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nDataTypes.INTEGER.UNSIGNED;\nDataTypes.INTEGER.ZEROFILL;\nDataTypes.INTEGER.UNSIGNED.ZEROFILL;\n// You can also specify the size i.e. INTEGER(10) instead of simply INTEGER\n// Same for BIGINT, FLOAT and DOUBLE\n```\n\n----------------------------------------\n\nTITLE: MySQL Connection Options Configuration\nDESCRIPTION: Table documenting various MySQL connection options including connectAttributes, authPlugins, debug, and stream settings. The debug option allows printing of incoming/outgoing packets to stdout with optional type filtering.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/databases/mysql.mdx#2025-04-09_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| `connectAttributes`     | _no documentation available_                                                                                                                                                                                                                                      |\n| `authPlugins`           | _no documentation available_                                                                                                                                                                                                                                      |\n| `debug`                 | This will print all incoming and outgoing packets on stdout. You can also restrict debugging to packet types by passing an array of types (strings) to debug;                                                                                                     |\n| `stream`                | _no documentation available_                                                                                                                                                                                                                                      |\n```\n\n----------------------------------------\n\nTITLE: Import Connection Options Documentation in Markdown\nDESCRIPTION: Imports a connection options documentation component and renders it in the page.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/databases/mariadb.mdx#2025-04-09_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nimport ConnectionOptions from './_connection-options.md';\n\n<ConnectionOptions />\n```\n\n----------------------------------------\n\nTITLE: Configuring Sequelize with MariaDB Dialect in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the MariaDbDialect class to configure Sequelize for connecting to a MariaDB database. It includes various connection options such as database name, user credentials, host, port, and additional settings.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/databases/mariadb.mdx#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Sequelize } from '@sequelize/core';\nimport { MariaDbDialect } from '@sequelize/mariadb';\n\nconst sequelize = new Sequelize({\n  dialect: MariaDbDialect,\n  database: 'mydb',\n  user: 'myuser',\n  password: 'mypass',\n  host: 'localhost',\n  port: 3306,\n  showWarnings: true,\n  connectTimeout: 1000,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Association Checker Methods in Sequelize TypeScript\nDESCRIPTION: This example shows how to define and use association checker methods (hasComment and hasComments) to verify if models are associated. It includes both singular and plural versions for checking single or multiple associations, using either model instances or primary key values.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/has-many.md#2025-04-09_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HasManyHasAssociationMixin, HasManyHasAssociationsMixin } from '@sequelize/core';\n\nclass Post extends Model<InferAttributes<Post>, InferCreationAttributes<Post>> {\n  @HasMany(() => Comment, 'postId')\n  declare comments?: NonAttribute<Comment[]>;\n\n  // highlight-start\n  declare hasComment: HasManyHasAssociationMixin<\n    Comment,\n    /* this is the type of the primary key of the target */\n    Comment['id']\n  >;\n\n  declare hasComments: HasManyHasAssociationsMixin<\n    Comment,\n    /* this is the type of the primary key of the target */\n    Comment['id']\n  >;\n  // highlight-end\n}\n\n// ...\n\nconst post = await Post.findByPk(1);\n\n// highlight-start\n// Returns true if the post has a comment with id 1\nconst isAssociated = await post.hasComment(comment1);\n\n// Returns true if the post is associated to all specified comments\nconst isAssociated = await post.hasComments([comment1, comment2, comment3]);\n\n// Like other association methods, you can also use the primary key of the associated model as a way to identify it\nconst isAssociated = await post.hasComments([1, 2, 3]);\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Configuring Sequelize with PostgreSQL dialect\nDESCRIPTION: Example of initializing Sequelize with PostgreSQL dialect and common connection options. It demonstrates how to set up database credentials, host, port, and additional PostgreSQL-specific options.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/databases/postgres.mdx#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Sequelize } from '@sequelize/core';\nimport { PostgresDialect } from '@sequelize/postgres';\n\nconst sequelize = new Sequelize({\n  dialect: PostgresDialect,\n  database: 'mydb',\n  user: 'myuser',\n  password: 'mypass',\n  host: 'localhost',\n  port: 5432,\n  ssl: true,\n  clientMinMessages: 'notice',\n});\n```\n\n----------------------------------------\n\nTITLE: Using the afterCommit Hook with Sequelize Transactions\nDESCRIPTION: This code demonstrates how to use the afterCommit hook with both managed and unmanaged transactions. This allows executing code after a transaction has been successfully committed, useful for post-transaction operations.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/transactions.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// Managed transaction:\nawait sequelize.transaction(async t => {\n  t.afterCommit(() => {\n    // Your logic\n  });\n});\n\n// Unmanaged transaction:\nconst t = await sequelize.transaction();\nt.afterCommit(() => {\n  // Your logic\n});\nawait t.commit();\n```\n\n----------------------------------------\n\nTITLE: Nested JSON Extraction in Sequelize Queries\nDESCRIPTION: Shows two equivalent ways to perform nested JSON extraction in Sequelize queries. This example demonstrates querying nested JSON properties using both dot notation and nested object syntax.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/json.mdx#2025-04-09_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nUser.findAll({\n  where: {\n    jsonAttribute: {\n      address: {\n        country: 'Belgium',\n        street: 'Rue de la Loi',\n      },\n      'age::integer': { [Op.gt]: 18 },\n    },\n  },\n});\n\nUser.findAll({\n  where: {\n    'jsonAttribute.address.country': 'Belgium',\n    'jsonAttribute.address.street': 'Rue de la Loi',\n    'jsonAttribute.age::integer': { [Op.gt]: 18 },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using sql.cast for Type Casting in SQL Queries\nDESCRIPTION: The sql.cast function is used to cast a value to a specified type in SQL queries. It supports both string type names and Sequelize DataTypes for casting.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/raw-queries.mdx#2025-04-09_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nUser.findAll({\n  where: sql.where(\n    // highlight-next-line\n    sql.cast(sql.attribute('createdAt'), 'text'),\n    Op.like,\n    '2012-%',\n  ),\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"users\" WHERE CAST(\"createdAt\" AS text) LIKE '2012-%'\n```\n\nLANGUAGE: typescript\nCODE:\n```\nUser.findAll({\n  where: sql.where(\n    // highlight-next-line\n    sql.cast(sql.attribute('createdAt'), DataTypes.TEXT),\n    Op.like,\n    '2012-%',\n  ),\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Connection Options in Markdown\nDESCRIPTION: Imports connection options documentation from an external markdown file and renders it using a component.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/databases/mssql.mdx#2025-04-09_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nimport ConnectionOptions from './_connection-options.md';\n\n<ConnectionOptions />\n```\n\n----------------------------------------\n\nTITLE: Configuring Inverse Association with HasMany in Sequelize\nDESCRIPTION: This snippet demonstrates how to configure the inverse BelongsTo association that is automatically created when defining a HasMany association. The inverse association allows the Comment model to reference its parent Post.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/has-many.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Model,\n  DataTypes,\n  InferAttributes,\n  InferCreationAttributes,\n  CreationOptional,\n  NonAttribute,\n} from '@sequelize/core';\nimport {\n  PrimaryKey,\n  Attribute,\n  AutoIncrement,\n  NotNull,\n  HasMany,\n  BelongsTo,\n} from '@sequelize/core/decorators-legacy';\n\nclass Post extends Model<InferAttributes<Post>, InferCreationAttributes<Post>> {\n  @Attribute(DataTypes.INTEGER)\n  @AutoIncrement\n  @PrimaryKey\n  declare id: CreationOptional<number>;\n\n  @HasMany(() => Comment, {\n    foreignKey: 'postId',\n    // highlight-start\n    inverse: {\n      as: 'post',\n    },\n    // highlight-end\n  })\n  declare comments?: NonAttribute<Comment[]>;\n}\n\nclass Comment extends Model<InferAttributes<Comment>, InferCreationAttributes<Comment>> {\n  @Attribute(DataTypes.INTEGER)\n  @AutoIncrement\n  @PrimaryKey\n  declare id: CreationOptional<number>;\n\n  // highlight-start\n  /** Defined by {@link Post.comments} */\n  declare post?: NonAttribute<Post>;\n  // highlight-end\n\n  // This is the foreign key\n  @Attribute(DataTypes.INTEGER)\n  @NotNull\n  declare postId: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Sequelize Model Using sequelize.define()\nDESCRIPTION: Example of using sequelize.define() method to create a User model with firstName and lastName attributes. This approach is internally equivalent to Model.init().\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/legacy-model-definitions.mdx#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Sequelize, DataTypes } from '@sequelize/core';\n\nconst sequelize = new Sequelize({ dialect: SqliteDialect });\n\nconst User = sequelize.define(\n  'User',\n  {\n    firstName: {\n      type: DataTypes.STRING,\n      allowNull: false,\n    },\n    lastName: {\n      type: DataTypes.STRING,\n    },\n  },\n  {}\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Sequelize with DB2 for LUW Dialect\nDESCRIPTION: Example of how to initialize a Sequelize instance with the DB2 dialect. This code demonstrates setting up the connection with database credentials, host information, and SSL configuration.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/databases/db2.mdx#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Sequelize } from '@sequelize/core';\nimport { Db2Dialect } from '@sequelize/db2';\n\nconst sequelize = new Sequelize({\n  dialect: Db2Dialect,\n  database: 'mydb',\n  user: 'myuser',\n  password: 'mypass',\n  hostname: 'localhost',\n  port: 50000,\n  ssl: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting onDelete and onUpdate Behaviors for Foreign Keys in Sequelize (TypeScript)\nDESCRIPTION: This snippet shows how to set the 'onDelete' and 'onUpdate' behaviors for foreign keys in Sequelize associations. It demonstrates setting both behaviors to 'CASCADE' for a HasOne association.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/faq.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass Person extends Model {\n  @HasOne(() => DrivingLicense, {\n    foreignKey: {\n      name: 'ownerId',\n      onDelete: 'CASCADE',\n      onUpdate: 'CASCADE',\n    },\n  })\n  declare drivingLicense?: NonAttribute<DrivingLicense>;\n}\n```\n\n----------------------------------------\n\nTITLE: Duplicate Column Example - MariaDB Query\nDESCRIPTION: Example demonstrating a SQL query that would trigger duplicate identifier handling, showing how the checkDuplicate option affects behavior.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/databases/mariadb.mdx#2025-04-09_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1 as i, 2 as i\n```\n\n----------------------------------------\n\nTITLE: Registering Static Sequelize Hooks in TypeScript\nDESCRIPTION: Example of registering a static 'beforeInit' hook on the Sequelize class that will run whenever a new Sequelize instance is created.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/hooks.mdx#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Sequelize } from '@sequelize/core';\n\nSequelize.hooks.addListener('beforeInit', () => {\n  console.log('A new sequelize instance is being created');\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Getter in Sequelize Model (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create a custom getter for a 'username' attribute in a Sequelize User model. The getter converts the username to uppercase when accessed.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/getters-setters-virtuals.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass User extends Model {\n  @Attribute(DataTypes.STRING)\n  @NotNull\n  get username(): string {\n    return this.getDataValue('username').toUpperCase();\n  }\n}\n\nconst user = User.build({ username: 'SuperUser123' });\n\n// This will call the getter\nconsole.log(user.username); // 'SUPERUSER123'\n\n// This will not call the getter\nconsole.log(user.getDataValue('username')); // 'SuperUser123'\n```\n\n----------------------------------------\n\nTITLE: Complex Nested Include Query with Super Many-to-Many Relationship in Sequelize\nDESCRIPTION: This snippet shows an example of a complex nested include query that can be performed with the Super Many-to-Many relationship setup in Sequelize.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/advanced-many-to-many.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nUser.findAll({\n  include: [\n    {\n      model: Grant,\n      include: [User, Profile],\n    },\n    {\n      model: Profile,\n      include: {\n        model: User,\n        include: {\n          model: Grant,\n          include: [User, Profile],\n        },\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Babel Support in Sequelize CLI\nDESCRIPTION: Configuration file that enables Babel support for ES6+ features in migrations and seeders. Requires babel-register to be installed as a dev dependency.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/migrations.md#2025-04-09_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// .sequelizerc\n\nrequire('babel-register');\n\nconst path = require('path');\n\nmodule.exports = {\n  config: path.resolve('config', 'config.json'),\n  'models-path': path.resolve('models'),\n  'seeders-path': path.resolve('seeders'),\n  'migrations-path': path.resolve('migrations'),\n};\n```\n\n----------------------------------------\n\nTITLE: AWS Lambda Runtime Initialization\nDESCRIPTION: Code showing how the Lambda runtime initializes and schedules the first iteration to handle invocations. This is executed when the Lambda container is first created.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/aws-lambda.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// (...)\n\nnew Runtime(client, handler, errorCallbacks).scheduleIteration();\n```\n\n----------------------------------------\n\nTITLE: Changing Database Engine for Sequelize Model (JavaScript)\nDESCRIPTION: This code shows how to change the database engine for a Sequelize model to MyISAM instead of the default InnoDB. This feature is only available in MySQL & MariaDB.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/advanced.mdx#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst Person = sequelize.define(\n  'person',\n  {\n    /* attributes */\n  },\n  {\n    engine: 'MYISAM',\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Sequelize Configuration File\nDESCRIPTION: Default configuration file (config.json) showing database connection settings for different environments.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/cli.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"development\": {\n    \"username\": \"root\",\n    \"password\": null,\n    \"database\": \"database_development\",\n    \"host\": \"127.0.0.1\",\n    \"dialect\": \"mysql\"\n  },\n  \"test\": {\n    \"username\": \"root\",\n    \"password\": null,\n    \"database\": \"database_test\",\n    \"host\": \"127.0.0.1\",\n    \"dialect\": \"mysql\"\n  },\n  \"production\": {\n    \"username\": \"root\",\n    \"password\": null,\n    \"database\": \"database_production\",\n    \"host\": \"127.0.0.1\",\n    \"dialect\": \"mysql\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Associated Data in Sequelize\nDESCRIPTION: Demonstrates lazy loading of associated data, where the ship information is fetched only when needed using the automatically generated getShip() method.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/assocs.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst awesomeCaptain = await Captain.findOne({\n  where: {\n    name: 'Jack Sparrow',\n  },\n});\n// Do stuff with the fetched captain\nconsole.log('Name:', awesomeCaptain.name);\nconsole.log('Skill Level:', awesomeCaptain.skillLevel);\n// Now we want information about his ship!\nconst hisShip = await awesomeCaptain.getShip();\n// Do stuff with the ship\nconsole.log('Ship Name:', hisShip.name);\nconsole.log('Amount of Sails:', hisShip.amountOfSails);\n```\n\n----------------------------------------\n\nTITLE: Configuring Sequelize for Amazon Redshift\nDESCRIPTION: Example of configuring Sequelize to work with Amazon Redshift, which requires setting clientMinMessages to 'ignore' since Redshift doesn't support this PostgreSQL feature.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/databases/postgres.mdx#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nnew Sequelize({\n  dialect: PostgresDialect,\n  // Your pg options here\n  clientMinMessages: 'ignore',\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Subquery Function in Sequelize\nDESCRIPTION: Demonstrates how to create a reusable function that generates a subquery condition for finding posts with specific reaction types. The function accepts a ReactionType parameter and returns a WHERE condition object that can be used in Sequelize queries.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/sub-queries.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sql, Op } from '@sequelize/core';\n\nfunction postHasReactionOfType(type: ReactionType) {\n  return {\n    id: {\n      [Op.in]: sql`\n        SELECT DISTINCT \"postId\"\n        FROM \"reactions\" AS \"reaction\"\n        WHERE \"reaction\".\"type\" = ${type}\n      `,\n    },\n  };\n}\n\nPost.findAll({\n  where: postHasReactionOfType(ReactionType.Laugh),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Foreign Key Target with sourceKey in Sequelize TypeScript\nDESCRIPTION: This example shows how to customize the attribute that a foreign key references by using the sourceKey option in a HasMany association. By default, Sequelize uses the primary key of the source model, but this can be changed to reference any attribute.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/has-many.md#2025-04-09_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nclass Post extends Model {\n  declare id: CreationOptional<number>;\n\n  @HasMany(() => Comment, {\n    foreignKey: 'postId',\n    // highlight-next-line\n    // The foreign key will reference the `id` attribute of the `Post` model\n    sourceKey: 'id',\n  })\n  declare comments?: NonAttribute<Comment[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying with Range Overlap Operator in Sequelize\nDESCRIPTION: Using Op.overlap with range types to find records where a range field has at least one value in common with the specified range. This is equivalent to PostgreSQL's && operator for ranges.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/operators.mdx#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nPost.findAll({\n  where: {\n    publishedDuring: {\n      [Op.overlap]: [new Date('2019-01-01'), new Date('2023-01-01')],\n    },\n  },\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"posts\" WHERE \"publishedDuring\" && '[2019-01-01, 2023-01-01)';\n```\n\n----------------------------------------\n\nTITLE: Removing Decorator-added Hooks in TypeScript\nDESCRIPTION: Demonstrates how hooks added by decorators can be removed using the named identifier but not by providing the callback function.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/hooks.mdx#2025-04-09_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Sequelize, Model, Hook } from '@sequelize/core';\nimport { BeforeFind } from '@sequelize/core/decorators-legacy';\n\nexport class MyModel extends Model {\n  @BeforeFind({ name: 'yourHookIdentifier' })\n  static logFindAll() {\n    console.log('findAll has been called on MyModel');\n  }\n}\n\n// This will not work\n// error-next-line\nMyModel.hooks.removeListener('beforeFind', MyModel.logFindAll);\n\n// But this will\n// success-next-line\nMyModel.hooks.removeListener('beforeFind', 'yourHookIdentifier');\n```\n\n----------------------------------------\n\nTITLE: CommonJS Import Example for Sequelize\nDESCRIPTION: Example showing the difference between importing Sequelize in ESM and CommonJS module formats. This demonstrates syntax compatibility for different project types.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/getting-started.mdx#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// how you would import Sequelize in ESM\nimport { Sequelize, Op, Model, DataTypes } from '@sequelize/core';\n\n// how you would import Sequelize in CommonJS\nconst { Sequelize, Op, Model, DataTypes } = require('@sequelize/core');\n```\n\n----------------------------------------\n\nTITLE: Undoing Database Migrations\nDESCRIPTION: Commands to revert migrations, either the most recent one or to a specific migration\nSOURCE: https://github.com/sequelize/website/blob/main/docs/cli.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# using npm\nnpx sequelize-cli db:migrate:undo\n# using yarn\nyarn sequelize-cli db:migrate:undo\n```\n\n----------------------------------------\n\nTITLE: Creating hasOne and hasMany Associations with Non-Primary Key References in Sequelize\nDESCRIPTION: This snippet demonstrates creating hasOne and hasMany associations using sourceKey to reference non-primary key fields. It shows how Foo has one Bar using Foo's name field, and Bar has many Baz using Bar's title field.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/assocs.md#2025-04-09_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nFoo.hasOne(Bar, { sourceKey: 'name', foreignKey: 'fooName' });\nBar.hasMany(Baz, { sourceKey: 'title', foreignKey: 'barTitle' });\n// [...]\nawait Bar.setFoo(\"Foo's Name Here\");\nawait Baz.addBar(\"Bar's Title Here\");\n```\n\n----------------------------------------\n\nTITLE: Using Table Hints in MS SQL Server with Sequelize\nDESCRIPTION: Demonstrates how to use table hints in MS SQL Server queries to override default query optimizer behavior. Uses the NOLOCK table hint as an example.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/dialect-specific-things.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TableHints } from '@sequelize/core';\n\nProject.findAll({\n  // adding the table hint NOLOCK\n  tableHint: TableHints.NOLOCK,\n  // this will generate the SQL 'WITH (NOLOCK)'\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Async AWS Lambda Handler in Node.js using async/await\nDESCRIPTION: This snippet shows an async AWS Lambda handler using async/await syntax. It demonstrates how to handle successful execution and error cases in an async function.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/aws-lambda.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports.handler = async function (event, context) {\n  try {\n    await doSomethingAsync();\n    return 'Hello World!'; // equivalent of: callback(null, \"Hello World!\");\n  } catch (err) {\n    // try/cath is not required, async functions always return a Promise\n    throw err; // equivalent of: callback(err);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Association Counter Method in Sequelize TypeScript\nDESCRIPTION: This snippet demonstrates how to define and use the association counter method (countComments) to count the number of associated models. The HasManyCountAssociationsMixin type is used to properly type the method.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/has-many.md#2025-04-09_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HasManyCountAssociationsMixin } from '@sequelize/core';\n\nclass Post extends Model<InferAttributes<Post>, InferCreationAttributes<Post>> {\n  @HasMany(() => Comment, 'postId')\n  declare comments?: NonAttribute<Comment[]>;\n\n  // highlight-start\n  declare countComments: HasManyCountAssociationsMixin<Comment>;\n  // highlight-end\n}\n\n// ...\n\nconst post = await Post.findByPk(1);\n\n// highlight-start\n// Returns the number of associated comments\nconst count = await post.countComments();\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Visualizing One-to-One Relationship with Mermaid\nDESCRIPTION: Mermaid diagram showing a One-to-One relationship between people and driving licenses tables, where one person can have zero or one driving license.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/basics.md#2025-04-09_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n  people ||--o| driving_licenses : drivingLicense\n```\n\n----------------------------------------\n\nTITLE: Installing MySQL Dialect Package for Sequelize\nDESCRIPTION: This command installs the MySQL dialect package for Sequelize, which is required to use Sequelize with MySQL databases.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/databases/mysql.mdx#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @sequelize/mysql\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL in Sequelize v6 (for comparison)\nDESCRIPTION: Demonstrates the previous method of connecting to PostgreSQL in Sequelize v6, for comparison with the v7 approach.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/upgrade.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Sequelize } from 'sequelize';\n\nconst sequelize = new Sequelize({\n  dialect: 'postgres',\n  database: 'database',\n  username: 'root',\n  password: 'root',\n  host: 'localhost',\n  port: 5432,\n  dialectOptions: {\n    ssl: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Connection String with Sequelize CLI\nDESCRIPTION: Examples of using the --url option to pass database connection strings in both npm and yarn environments.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/cli.md#2025-04-09_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n# using npm\nnpx sequelize-cli db:migrate --url 'mysql://root:password@mysql_host.com/database_name'\n# using yarn\nyarn sequelize-cli db:migrate --url 'mysql://root:password@mysql_host.com/database_name'\n```\n\n----------------------------------------\n\nTITLE: Creating belongsToMany Association Using Default Primary Keys in Sequelize\nDESCRIPTION: This snippet demonstrates the standard belongsToMany association using default primary keys. It creates a junction table with fooId and barId fields to track the many-to-many relationship.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/assocs.md#2025-04-09_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nFoo.belongsToMany(Bar, { through: 'foo_bar' });\n// This creates a junction table `foo_bar` with fields `fooId` and `barId`\n```\n\n----------------------------------------\n\nTITLE: Using Index Hints in MySQL/MariaDB with Sequelize\nDESCRIPTION: Shows how to use index hints in MySQL/MariaDB queries to override the default behavior of the query optimizer. Demonstrates using the USE INDEX hint with a specific index name.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/dialect-specific-things.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { IndexHints } from '@sequelize/core';\nProject.findAll({\n  indexHints: [{ type: IndexHints.USE, values: ['index_project_on_name'] }],\n  where: {\n    id: {\n      [Op.gt]: 623,\n    },\n    name: {\n      [Op.like]: 'Foo %',\n    },\n  },\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM Project USE INDEX (index_project_on_name) WHERE name LIKE 'FOO %' AND id > 623;\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Associated Records with Sequelize create()\nDESCRIPTION: Demonstrates how to create a main record with multiple associated records for HasMany or BelongsToMany associations using the include option with create().\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/insert.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait User.create(\n  {\n    name: 'Mary Read',\n    addresses: [\n      {\n        city: 'Nassau',\n        country: 'Bahamas',\n      },\n      {\n        city: 'London',\n        country: 'England',\n      },\n    ],\n  },\n  {\n    include: ['addresses'],\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Association Counter in Sequelize TypeScript\nDESCRIPTION: Demonstrates the countX method implementation for counting associated models. Shows how to define and use the association counter method.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/belongs-to-many.md#2025-04-09_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BelongsToManyCountAssociationsMixin } from '@sequelize/core';\n\nclass Author extends Model<InferAttributes<Author>, InferCreationAttributes<Author>> {\n  @BelongsToMany(() => Book, { through: 'BookAuthor' })\n  declare books?: NonAttribute<Book[]>;\n\n  declare countBooks: BelongsToManyCountAssociationsMixin<Book>;\n}\n\nconst author = await Author.findByPk(1);\n\nconst count = await author.countBooks();\n```\n\n----------------------------------------\n\nTITLE: Handling Nullable Attributes in Sequelize TypeScript Models\nDESCRIPTION: This snippet shows how nullable attributes work with InferCreationAttributes, explaining that they are automatically treated as optional during model creation without needing to use CreationOptional. It demonstrates how to define both required and nullable string fields.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/model-typing.mdx#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n  @Attribute(DataTypes.STRING)\n  @NotNull\n  declare firstName: string;\n\n  // there is no need to use CreationOptional on firstName because nullable attributes\n  // are always optional when creating an instance of the model.\n  @Attribute(DataTypes.STRING)\n  declare lastName: string | null;\n}\n\n// last name omitted, but this is still valid!\n// success-next-line\nawait User.create({ firstName: 'Zoé' });\n```\n\n----------------------------------------\n\nTITLE: Importing Internal Sequelize Code (Not Recommended)\nDESCRIPTION: Shows how to import Sequelize's internal code, which is not recommended and should only be used as a last resort.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/upgrade.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// do *not* do this unless you know what you're doing\nimport { Model } from '@sequelize/core/_non-semver-use-at-your-own-risk_/model.js';\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Methods to Sequelize Model Class\nDESCRIPTION: This example demonstrates how to add custom instance and class-level methods to a Sequelize model by extending the Model class.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-basics.md#2025-04-09_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nclass User extends Model {\n  static classLevelMethod() {\n    return 'foo';\n  }\n  instanceLevelMethod() {\n    return 'bar';\n  }\n  getFullname() {\n    return [this.firstname, this.lastname].join(' ');\n  }\n}\nUser.init(\n  {\n    firstname: Sequelize.TEXT,\n    lastname: Sequelize.TEXT,\n  },\n  { sequelize },\n);\n\nconsole.log(User.classLevelMethod()); // 'foo'\nconst user = User.build({ firstname: 'Jane', lastname: 'Doe' });\nconsole.log(user.instanceLevelMethod()); // 'bar'\nconsole.log(user.getFullname()); // 'Jane Doe'\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Null Handling in Sequelize 7\nDESCRIPTION: In Sequelize 7, null values in JSON/JSONB columns are stored as JSON 'null' instead of SQL NULL. This behavior can be configured globally or overridden per operation.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/upgrade.md#2025-04-09_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nnew Sequelize({\n  /* options */\n  nullJsonStringification: 'sql',\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SQL_NULL } from '@sequelize/core';\n\nawait User.create({\n  jsonAttribute: SQL_NULL,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Single-model Single Foreign Key Polymorphic Associations in Sequelize\nDESCRIPTION: This code demonstrates creating a polymorphic association using a single model with a discriminator column. It defines models with targetModel and targetId fields to associate comments with either articles or videos without using real foreign keys. The implementation uses association scopes to filter comments by target model type.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/polymorphic-associations.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass Comment extends Model<InferAttributes<Comment>, InferCreationAttributes<Comment>> {\n  declare id: number;\n\n  @Attributes(DataTypes.STRING)\n  @NotNull\n  declare content: string;\n\n  @Attributes(DataTypes.STRING)\n  @NotNull\n  declare targetModel: 'article' | 'video';\n\n  @Attributes(DataTypes.INTEGER)\n  @NotNull\n  declare targetId: number;\n\n  /** Defined by {@link Article#comments} */\n  declare article?: NonAttribute<Article>;\n\n  /** Defined by {@link Video#comments} */\n  declare video?: NonAttribute<Video>;\n\n  get target(): NonAttribute<Article | Video | undefined> {\n    if (this.targetModel === 'article') {\n      return this.article;\n    } else {\n      return this.video;\n    }\n  }\n}\n\nclass Video extends Model<InferAttributes<Video>, InferCreationAttributes<Video>> {\n  declare id: number;\n\n  @HasMany(() => Comment, {\n    inverse: {\n      as: 'videos',\n    },\n    foreignKey: 'targetId',\n    // highlight-start\n    // Foreign Keys must be disabled.\n    constraints: false,\n    // This scope ensures that loading the \"comments\" association only loads comments that belong to videos.\n    scope: {\n      targetModel: 'video',\n    },\n    // highlight-end\n  })\n  declare comments: Comment[];\n}\n\nclass Article extends Model<InferAttributes<Article>, InferCreationAttributes<Article>> {\n  declare id: number;\n\n  @HasMany(() => Comment, {\n    inverse: {\n      as: 'articles',\n    },\n    foreignKey: 'targetId',\n    constraints: false,\n    scope: {\n      targetModel: 'article',\n    },\n  })\n  declare comments: Comment[];\n}\n```\n\n----------------------------------------\n\nTITLE: Eager-loading Comments from Articles in a Polymorphic Association with Sequelize\nDESCRIPTION: This code snippet demonstrates how to eager-load comments when loading an article in a polymorphic association. The association scopes ensure that only comments belonging to articles are included in the result.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/polymorphic-associations.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst article = await Article.findOne({\n  // this will only include the comments that belong to articles\n  include: ['comments'],\n});\n```\n\n----------------------------------------\n\nTITLE: Combining Decimal Options in MySQL\nDESCRIPTION: Example of combining decimal type options like UNSIGNED and ZEROFILL with DECIMAL data type in MySQL\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/data-types.mdx#2025-04-09_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nDataTypes.DECIMAL(1, 2).UNSIGNED.ZEROFILL\n```\n\n----------------------------------------\n\nTITLE: Using DialectTableFilter Component in JSX\nDESCRIPTION: This code snippet demonstrates the usage of the DialectTableFilter component to wrap a table comparing UUID function support across different database systems. The table includes information for uuidV1 and uuidV4 functions.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/_fragments/_uuid-support-table.mdx#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DialectTableFilter>\n\n|          | PostgreSQL                                                                                                                                                                                                                | MariaDB                                   | MySQL                                                                                        | MSSQL                                                                                                     | SQLite | Snowflake | db2 | ibmi |\n| -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------- | -------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------- | ------ | --------- | --- | ---- |\n| `uuidV1` | [`uuid_generate_v1`](https://www.postgresql.org/docs/current/uuid-ossp.html) (requires `uuid-ossp`)                                                                                                                       | [`UUID`](https://mariadb.com/kb/en/uuid/) | [`UUID`](https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html#function_uuid) | N/A                                                                                                       | N/A    | N/A       | N/A | N/A  |\n| `uuidV4` | **pg >= v13**: [`gen_random_uuid`](https://www.postgresql.org/docs/current/functions-uuid.html) <br/>**pg &lt; v13**: [`uuid_generate_v4`](https://www.postgresql.org/docs/current/uuid-ossp.html) (requires `uuid-ossp`) | N/A                                       | N/A                                                                                          | [`NEWID`](https://learn.microsoft.com/en-us/sql/t-sql/functions/newid-transact-sql?view=sql-server-ver16) | N/A    | N/A       | N/A | N/A  |\n\n</DialectTableFilter>\n```\n\n----------------------------------------\n\nTITLE: Implementing Association Setter in Sequelize TypeScript\nDESCRIPTION: Shows how to implement and use the setX association method to replace all associated models. Demonstrates both instance and primary key-based association setting.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/belongs-to-many.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BelongsToManySetAssociationsMixin } from '@sequelize/core';\n\nclass Author extends Model<InferAttributes<Author>, InferCreationAttributes<Author>> {\n  @BelongsToMany(() => Book, { through: 'BookAuthor' })\n  declare books?: NonAttribute<Book[]>;\n\n  declare setBooks: BelongsToManySetAssociationsMixin<\n    Book,\n    Book['id']\n  >;\n}\n\nconst author = await Author.findByPk(1);\nconst [book1, book2, book3] = await Book.findAll({ limit: 3 });\n\nawait author.setBooks([book1, book2, book3]);\n\nawait author.setBooks([1, 2, 3]);\n```\n\n----------------------------------------\n\nTITLE: Global Snake Case Configuration\nDESCRIPTION: Demonstrates how to enable snake_case naming globally for all models using Sequelize constructor options.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/naming-strategies.mdx#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Model, Sequelize } from '@sequelize/core';\nimport { SqliteDialect } from '@sequelize/sqlite3';\n\nclass User extends Model {}\n\nconst sequelize = new Sequelize({\n  dialect: SqliteDialect,\n  define: {\n    underscored: true,\n  },\n  models: [User],\n});\n\nconsole.log(User.table.tableName);\n// → users\n```\n\n----------------------------------------\n\nTITLE: Modern Model Definition with InferAttributes\nDESCRIPTION: Demonstrates the newer approach using InferAttributes and InferCreationAttributes utility types to reduce boilerplate code.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/typescript.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Model, InferAttributes, InferCreationAttributes, CreationOptional } from 'sequelize';\n\nclass User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n  declare id: CreationOptional<number>;\n  declare name: string;\n  // other attributes...\n}\n```\n\n----------------------------------------\n\nTITLE: Using References Option in Sequelize 7\nDESCRIPTION: Demonstrates the changes to the 'references' option in Sequelize 7, which now distinguishes between referencing tables and models explicitly with separate 'table' and 'model' sub-options instead of overloading 'model'.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/upgrade.md#2025-04-09_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\nconst User = sequelize.define('User', {\n  countryId: {\n    type: DataTypes.INTEGER,\n    references: {\n      // This referenced the TABLE named \"countries\", not the MODEL called \"countries\".\n      model: 'countries',\n      key: 'id',\n    },\n  },\n});\n\n// After (table version)\nconst User = sequelize.define('User', {\n  countryId: {\n    type: DataTypes.INTEGER,\n    references: {\n      // It is now clear that this references the table called \"countries\"\n      table: 'countries',\n      key: 'id',\n    },\n  },\n});\n\n// After (model version)\nconst User = sequelize.define('User', {\n  countryId: {\n    type: DataTypes.INTEGER,\n    references: {\n      // It is now clear that this references the Country model, from which the table name will be inferred.\n      model: Country,\n      key: 'id',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing DataTypes - Recommended Pattern\nDESCRIPTION: Shows the recommended way of importing and using DataTypes directly from @sequelize/core.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/upgrade.md#2025-04-09_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DataTypes } from '@sequelize/core';\n\nDataTypes.STRING;\nDataTypes.INTEGER;\n```\n\n----------------------------------------\n\nTITLE: Basic One-To-One Relationship Diagram\nDESCRIPTION: Entity relationship diagram showing a One-To-One relationship between people and driving licenses.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/has-one.md#2025-04-09_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n  people ||--o| driving_licenses : drivingLicense\n```\n\n----------------------------------------\n\nTITLE: Querying Comments with Polymorphic Association in SQL\nDESCRIPTION: Shows the SQL queries generated by Sequelize when using polymorphic associations to fetch comments associated with images.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/polymorphic-associations.md#2025-04-09_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \"id\", \"title\", \"commentableType\", \"commentableId\", \"createdAt\", \"updatedAt\"\nFROM \"comments\" AS \"comment\"\nWHERE \"comment\".\"commentableType\" = 'image' AND \"comment\".\"commentableId\" = 1;\n```\n\n----------------------------------------\n\nTITLE: Defining Range DataTypes in PostgreSQL with Sequelize\nDESCRIPTION: Shows how to define range data types in PostgreSQL using Sequelize's DataTypes.RANGE. Range types can be used with various primitive data types including numeric, date, and timestamp types.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/data-types.mdx#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nDataTypes.RANGE(DataTypes.INTEGER); // int4range\nDataTypes.RANGE(DataTypes.BIGINT); // int8range\nDataTypes.RANGE(DataTypes.DATE); // tstzrange\nDataTypes.RANGE(DataTypes.DATEONLY); // daterange\nDataTypes.RANGE(DataTypes.DECIMAL); // numrange\n```\n\n----------------------------------------\n\nTITLE: Defining a User Model with Decorators in JavaScript\nDESCRIPTION: This snippet shows how to define a User model in Sequelize using JavaScript and decorators. It includes attributes for id, firstName, and lastName with their respective data types and constraints.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/defining-models.mdx#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Sequelize, DataTypes, Model } from '@sequelize/core';\nimport { Attribute, PrimaryKey, AutoIncrement, NotNull } from '@sequelize/core/decorators-legacy';\nimport { SqliteDialect } from '@sequelize/sqlite3';\n\nconst sequelize = new Sequelize({ dialect: SqliteDialect });\n\nexport class User extends Model {\n  @Attribute(DataTypes.INTEGER)\n  @PrimaryKey\n  @AutoIncrement\n  id;\n\n  @Attribute(DataTypes.STRING)\n  @NotNull\n  firstName;\n\n  @Attribute(DataTypes.STRING)\n  lastName;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HasOne Association with Decorators\nDESCRIPTION: Model definitions for Person and DrivingLicense classes showing how to establish a One-To-One relationship using Sequelize decorators.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/has-one.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Model,\n  DataTypes,\n  InferAttributes,\n  InferCreationAttributes,\n  CreationOptional,\n  NonAttribute,\n} from '@sequelize/core';\nimport {\n  PrimaryKey,\n  Attribute,\n  AutoIncrement,\n  NotNull,\n  HasOne,\n  BelongsTo,\n} from '@sequelize/core/decorators-legacy';\n\nclass Person extends Model<InferAttributes<Person>, InferCreationAttributes<Person>> {\n  @Attribute(DataTypes.INTEGER)\n  @AutoIncrement\n  @PrimaryKey\n  declare id: CreationOptional<number>;\n\n  @HasOne(() => DrivingLicense, /* foreign key */ 'ownerId')\n  declare drivingLicense?: NonAttribute<DrivingLicense>;\n}\n\nclass DrivingLicense extends Model<\n  InferAttributes<DrivingLicense>,\n  InferCreationAttributes<DrivingLicense>\n> {\n  @Attribute(DataTypes.INTEGER)\n  @AutoIncrement\n  @PrimaryKey\n  declare id: CreationOptional<number>;\n\n  @Attribute(DataTypes.INTEGER)\n  @NotNull\n  declare ownerId: number;\n}\n```\n\n----------------------------------------\n\nTITLE: BLOB Data Types in Sequelize\nDESCRIPTION: Definition of various BLOB data types supported in Sequelize, including tiny, medium, and long BLOBs.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/other-data-types.mdx#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nDataTypes.BLOB; // BLOB (bytea for PostgreSQL)\nDataTypes.BLOB('tiny'); // TINYBLOB (bytea for PostgreSQL)\nDataTypes.BLOB('medium'); // MEDIUMBLOB (bytea for PostgreSQL)\nDataTypes.BLOB('long'); // LONGBLOB (bytea for PostgreSQL)\n```\n\n----------------------------------------\n\nTITLE: Declaring Hooks in Sequelize Models\nDESCRIPTION: Three different methods to add hooks to Sequelize models: via the .init() method, via the .addHook() method, and directly using hook method names. Each approach demonstrates setting callbacks for lifecycle events.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/hooks.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Method 1 via the .init() method\nclass User extends Model {}\nUser.init(\n  {\n    username: DataTypes.STRING,\n    mood: {\n      type: DataTypes.ENUM,\n      values: ['happy', 'sad', 'neutral'],\n    },\n  },\n  {\n    hooks: {\n      beforeValidate: (user, options) => {\n        user.mood = 'happy';\n      },\n      afterValidate: (user, options) => {\n        user.username = 'Toni';\n      },\n    },\n    sequelize,\n  },\n);\n\n// Method 2 via the .addHook() method\nUser.addHook('beforeValidate', (user, options) => {\n  user.mood = 'happy';\n});\n\nUser.addHook('afterValidate', 'someCustomName', (user, options) => {\n  return Promise.reject(new Error(\"I'm afraid I can't let you do that!\"));\n});\n\n// Method 3 via the direct method\nUser.beforeCreate(async (user, options) => {\n  const hashedPassword = await hashPassword(user.password);\n  user.password = hashedPassword;\n});\n\nUser.afterValidate('myHookAfter', (user, options) => {\n  user.username = 'Toni';\n});\n```\n\n----------------------------------------\n\nTITLE: Querying with Range Strict Right Operator in Sequelize\nDESCRIPTION: Using Op.strictRight to find records where all values in a range field are greater than any value in the specified range. This is equivalent to PostgreSQL's >> operator for ranges.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/operators.mdx#2025-04-09_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nEvent.findAll({\n  where: {\n    occursDuring: {\n      [Op.strictRight]: [new Date('2019-01-01'), new Date('2023-01-01')],\n    },\n  },\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"events\" WHERE \"occursDuring\" >> '[2019-01-01, 2023-01-01)';\n```\n\n----------------------------------------\n\nTITLE: Modifying updateOnDuplicate Option in Bulk Create Hook\nDESCRIPTION: Shows how to modify the updateOnDuplicate option inside a beforeBulkCreate hook to ensure additional fields are persisted to the database during a bulk create operation with updateOnDuplicate.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/hooks.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nUser.beforeBulkCreate((users, options) => {\n  for (const user of users) {\n    if (user.isMember) {\n      user.memberSince = new Date();\n    }\n  }\n\n  // Add `memberSince` to updateOnDuplicate otherwise it won't be persisted\n  if (options.updateOnDuplicate && !options.updateOnDuplicate.includes('memberSince')) {\n    options.updateOnDuplicate.push('memberSince');\n  }\n});\n\n// Bulk updating existing users with updateOnDuplicate option\nawait Users.bulkCreate(\n  [\n    { id: 1, isMember: true },\n    { id: 2, isMember: false },\n  ],\n  {\n    updateOnDuplicate: ['isMember'],\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Delaying Save in Setter Method for BelongsTo in TypeScript\nDESCRIPTION: Example showing how to delay the save operation when using the setter method for a BelongsTo association, though this approach is noted as not particularly useful.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/belongs-to.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait comment.setPost(post, { save: false });\nawait comment.save();\n```\n\n----------------------------------------\n\nTITLE: Configuring Scoped Association for Pending Tags\nDESCRIPTION: Example of setting up a belongsToMany relationship with scopes applied to both the through model and target model to filter pending tags.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/polymorphic-associations.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nImage.belongsToMany(Tag, {\n  through: {\n    model: Tag_Taggable,\n    unique: false,\n    scope: {\n      taggableType: 'image',\n    },\n  },\n  scope: {\n    status: 'pending',\n  },\n  as: 'pendingTags',\n  foreignKey: 'taggableId',\n  constraints: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Special Range Cases in PostgreSQL with Sequelize\nDESCRIPTION: Shows how to create empty, unbounded, and infinite ranges in PostgreSQL using Sequelize. These special range formats allow representing complex range concepts in the database.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/data-types.mdx#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// empty range:\nTimeline.create({ range: [] }); // range = 'empty'\n\n// Unbounded range:\nTimeline.create({ range: [null, null] }); // range = '[,)'\n// range = '[,\"2016-01-01 00:00:00+00:00\")'\nTimeline.create({ range: [null, new Date(Date.UTC(2016, 0, 1))] });\n\n// Infinite range:\n// range = '[-infinity,\"2016-01-01 00:00:00+00:00\")'\nTimeline.create({ range: [-Infinity, new Date(Date.UTC(2016, 0, 1))] });\n```\n\n----------------------------------------\n\nTITLE: Bidirectional Association Options in Sequelize v7\nDESCRIPTION: Shows the new way to define bidirectional associations in Sequelize v7 using the 'inverse' option. This approach reduces verbosity and ensures consistency in association definitions.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/upgrade.md#2025-04-09_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nUser.belongsToMany(Country, {\n  as: 'countries',\n  inverse: { as: 'citizen' },\n});\n```\n\n----------------------------------------\n\nTITLE: Typing Model Class and Retrieving Primary Key Attributes in TypeScript with Sequelize\nDESCRIPTION: This snippet demonstrates how to use ModelStatic to type a model class and create a utility function to retrieve primary key attributes. It includes a User model definition and usage of the utility function.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/utility-types.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  ModelStatic,\n  ModelAttributeColumnOptions,\n  Model,\n  InferAttributes,\n  InferCreationAttributes,\n  CreationOptional,\n} from '@sequelize/core';\nimport { SqliteDialect } from '@sequelize/sqlite3';\n\n/**\n * Returns the list of attributes that are part of the model's primary key.\n */\nexport function getPrimaryKeyAttributes(model: ModelStatic<any>): NormalizedAttributeOptions[] {\n  const attributes: NormalizedAttributeOptions[] = [];\n\n  for (const attribute of model.modelDefinition.attributes.values()) {\n    if (attribute.primaryKey) {\n      attributes.push(attribute);\n    }\n  }\n\n  return attributes;\n}\n\nclass User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n  @Attribute(DataTypes.INTEGER)\n  @PrimaryKey\n  @AutoIncrement\n  declare id: CreationOptional<number>;\n}\n\nconst sequelize = new Sequelize({\n  dialect: SqliteDialect,\n  models: [User],\n});\n\nconst primaryAttributes = getPrimaryKeyAttributes(User);\n```\n\n----------------------------------------\n\nTITLE: Querying with Range No Extend Left Operator in Sequelize\nDESCRIPTION: Using Op.noExtendLeft to find records where all values in a range field are greater than or equal to any value in the specified range. This is equivalent to PostgreSQL's &> operator for ranges.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/operators.mdx#2025-04-09_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nEvent.findAll({\n  where: {\n    occursDuring: {\n      [Op.noExtendLeft]: [new Date('2019-01-01'), new Date('2023-01-01')],\n    },\n  },\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"events\" WHERE \"occursDuring\" &> '[2019-01-01, 2023-01-01)';\n```\n\n----------------------------------------\n\nTITLE: Using Connection String with Sequelize CLI\nDESCRIPTION: Example of using a connection string URL instead of configuration file for database connection in Sequelize CLI commands.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/migrations.md#2025-04-09_snippet_20\n\nLANGUAGE: text\nCODE:\n```\nnpx sequelize-cli db:migrate --url 'mysql://root:password@mysql_host.com/database_name'\n```\n\n----------------------------------------\n\nTITLE: Defining Numeric Data Types in Sequelize\nDESCRIPTION: This code block illustrates various numeric data types available in Sequelize, including integers, floats, and decimals.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-basics.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nDataTypes.INTEGER; // INTEGER\nDataTypes.BIGINT; // BIGINT\nDataTypes.BIGINT(11); // BIGINT(11)\n\nDataTypes.FLOAT; // FLOAT\nDataTypes.FLOAT(11); // FLOAT(11)\nDataTypes.FLOAT(11, 10); // FLOAT(11,10)\n\nDataTypes.REAL; // REAL            PostgreSQL only.\nDataTypes.REAL(11); // REAL(11)        PostgreSQL only.\nDataTypes.REAL(11, 12); // REAL(11,12)     PostgreSQL only.\n\nDataTypes.DOUBLE; // DOUBLE\nDataTypes.DOUBLE(11); // DOUBLE(11)\nDataTypes.DOUBLE(11, 10); // DOUBLE(11,10)\n\nDataTypes.DECIMAL; // DECIMAL\nDataTypes.DECIMAL(10, 2); // DECIMAL(10,2)\n```\n\n----------------------------------------\n\nTITLE: Defining Advanced Column Options in Sequelize Model\nDESCRIPTION: This extensive code block showcases various advanced column options available when defining a Sequelize model, including unique constraints, foreign keys, and comments.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-basics.md#2025-04-09_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Model, DataTypes, Deferrable } = require('sequelize');\n\nclass Foo extends Model {}\nFoo.init(\n  {\n    // instantiating will automatically set the flag to true if not set\n    flag: { type: DataTypes.BOOLEAN, allowNull: false, defaultValue: true },\n\n    // default values for dates => current time\n    myDate: { type: DataTypes.DATE, defaultValue: DataTypes.NOW },\n\n    // setting allowNull to false will add NOT NULL to the column, which means an error will be\n    // thrown from the DB when the query is executed if the column is null. If you want to check that a value\n    // is not null before querying the DB, look at the validations section below.\n    title: { type: DataTypes.STRING, allowNull: false },\n\n    // Creating two objects with the same value will throw an error. The unique property can be either a\n    // boolean, or a string. If you provide the same string for multiple columns, they will form a\n    // composite unique key.\n    uniqueOne: { type: DataTypes.STRING, unique: 'compositeIndex' },\n    uniqueTwo: { type: DataTypes.INTEGER, unique: 'compositeIndex' },\n\n    // The unique property is simply a shorthand to create a unique constraint.\n    someUnique: { type: DataTypes.STRING, unique: true },\n\n    // Go on reading for further information about primary keys\n    identifier: { type: DataTypes.STRING, primaryKey: true },\n\n    // autoIncrement can be used to create auto_incrementing integer columns\n    incrementMe: { type: DataTypes.INTEGER, autoIncrement: true },\n\n    // You can specify a custom column name via the 'field' attribute:\n    fieldWithUnderscores: {\n      type: DataTypes.STRING,\n      field: 'field_with_underscores',\n    },\n\n    // It is possible to create foreign keys:\n    bar_id: {\n      type: DataTypes.INTEGER,\n\n      references: {\n        // This is a reference to another model\n        model: Bar,\n\n        // This is the column name of the referenced model\n        key: 'id',\n\n        // With PostgreSQL, it is optionally possible to declare when to check the foreign key constraint, passing the Deferrable type.\n        deferrable: Deferrable.INITIALLY_IMMEDIATE,\n        // Options:\n        // - `Deferrable.INITIALLY_IMMEDIATE` - Immediately check the foreign key constraints\n        // - `Deferrable.INITIALLY_DEFERRED` - Defer all foreign key constraint check to the end of a transaction\n        // - `Deferrable.NOT` - Don't defer the checks at all (default) - This won't allow you to dynamically change the rule in a transaction\n      },\n    },\n\n    // Comments can only be added to columns in MySQL, MariaDB, PostgreSQL and MSSQL\n    commentMe: {\n      type: DataTypes.INTEGER,\n      comment: 'This is a column name that has a comment',\n    },\n  },\n  {\n    sequelize,\n    modelName: 'foo',\n\n    // Using `unique: true` in an attribute above is exactly the same as creating the index in the model's options:\n    indexes: [{ unique: true, fields: ['someUnique'] }],\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Association Creator in Sequelize TypeScript\nDESCRIPTION: Demonstrates the createX method for creating and automatically associating new models. Shows how to handle foreign key omission in TypeScript.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/belongs-to-many.md#2025-04-09_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BelongsToManyCreateAssociationMixin } from '@sequelize/core';\n\nclass Author extends Model<InferAttributes<Author>, InferCreationAttributes<Author>> {\n  @BelongsToMany(() => Book, { through: 'BookAuthor' })\n  declare books?: NonAttribute<Book[]>;\n\n  declare createBook: BelongsToManyCreateAssociationMixin<Book, 'postId'>;\n}\n\nconst author = await Author.findByPk(1);\n\nconst book = await author.createBook({\n  content: 'This is a book',\n});\n```\n\n----------------------------------------\n\nTITLE: Output from Association Mixin with Limited Through Table Attributes\nDESCRIPTION: JSON output when using association mixins with the joinTableAttributes option to control which through table attributes are included in the result.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/advanced-many-to-many.md#2025-04-09_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": 6,\n    \"name\": \"queen\",\n    \"grant\": {\n      \"selfGranted\": false\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Disabling Timestamps in Sequelize Model Definition\nDESCRIPTION: This snippet shows how to disable the automatic creation of createdAt and updatedAt fields in a Sequelize model.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-basics.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nsequelize.define(\n  'User',\n  {\n    // ... (attributes)\n  },\n  {\n    timestamps: false,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Sequelize Column Options\nDESCRIPTION: Comprehensive example showing various column configuration options including default values, constraints, foreign keys, and comments.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/legacy-model-definitions.mdx#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Model, DataTypes, Deferrable } from '@sequelize/core';\n\nclass Foo extends Model {}\nFoo.init(\n  {\n    flag: { type: DataTypes.BOOLEAN, allowNull: false, defaultValue: true },\n    myDate: { type: DataTypes.DATE, defaultValue: DataTypes.NOW },\n    title: { type: DataTypes.STRING, allowNull: false },\n    uniqueOne: { type: DataTypes.STRING, unique: 'compositeIndex' },\n    uniqueTwo: { type: DataTypes.INTEGER, unique: 'compositeIndex' },\n    someUnique: { type: DataTypes.STRING, unique: true },\n    identifier: { type: DataTypes.STRING, primaryKey: true },\n    incrementMe: { type: DataTypes.INTEGER, autoIncrement: true },\n    fieldWithUnderscores: {\n      type: DataTypes.STRING,\n      columnName: 'field_with_underscores',\n    },\n    bar_id: {\n      type: DataTypes.INTEGER,\n      references: {\n        model: Bar,\n        key: 'id',\n        deferrable: Deferrable.INITIALLY_IMMEDIATE,\n      },\n    },\n    commentMe: {\n      type: DataTypes.INTEGER,\n      comment: 'This is a column name that has a comment',\n    },\n  },\n  {\n    sequelize,\n    indexes: [{ unique: true, fields: ['someUnique'] }],\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Basic BelongsToMany Association Setup\nDESCRIPTION: Shows the initial setup of a BelongsToMany association between Game and Person models using a GameAuthor join table.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/association-scopes.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass GameAuthor extends Model {\n  @Attribute(DataTypes.STRING)\n  role;\n}\n\nclass Person extends Model {}\n\nclass Game extends Model {\n  /** This association will list everyone that worked on the game */\n  @BelongsToMany(() => Person, {\n    through: GameAuthor,\n  })\n  allAuthors;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Records with findAll() in Sequelize\nDESCRIPTION: Basic example of retrieving all records from a table using Sequelize's findAll() method, which performs a SELECT * query on the database.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-querying-basics.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Find all users\nconst users = await User.findAll();\nconsole.log(users.every(user => user instanceof User)); // true\nconsole.log('All users:', JSON.stringify(users, null, 2));\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM ...\n```\n\n----------------------------------------\n\nTITLE: Limiting Fields in Sequelize bulkCreate()\nDESCRIPTION: Demonstrates how to limit the fields considered during bulk creation by using the fields option. This is useful when accepting user input to prevent unwanted data insertion.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/insert.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait User.bulkCreate(\n  [\n    { username: 'foo' },\n    {\n      username: 'bar',\n      admin: true,\n    },\n  ],\n  { fields: ['username'] },\n);\n```\n\n----------------------------------------\n\nTITLE: Complex Logical Combinations with Operators in Sequelize\nDESCRIPTION: Advanced example demonstrating complex logical combinations using Op.and, Op.or, and other operators to create sophisticated query filters with nested conditions.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-querying-basics.md#2025-04-09_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Op } = require(\"sequelize\");\n\nFoo.findAll({\n  where: {\n    rank: {\n      [Op.or]: {\n        [Op.lt]: 1000,\n        [Op.eq]: null\n      }\n    },\n    // rank < 1000 OR rank IS NULL\n\n    {\n      createdAt: {\n        [Op.lt]: new Date(),\n        [Op.gt]: new Date(new Date() - 24 * 60 * 60 * 1000)\n      }\n    },\n    // createdAt < [timestamp] AND createdAt > [timestamp]\n\n    {\n      [Op.or]: [\n        {\n          title: {\n            [Op.like]: 'Boat%'\n          }\n        },\n        {\n          description: {\n            [Op.like]: '%boat%'\n          }\n        }\n      ]\n    }\n    // title LIKE 'Boat%' OR description LIKE '%boat%'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Model Attributes in TypeScript with Sequelize\nDESCRIPTION: This snippet shows how to use Attributes and CreationAttributes to access model attributes. It includes a utility function to get attribute metadata and demonstrates its usage with a User model.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/utility-types.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  ModelStatic,\n  ModelAttributeColumnOptions,\n  Model,\n  InferAttributes,\n  InferCreationAttributes,\n  CreationOptional,\n  Attributes,\n} from '@sequelize/core';\n\nexport function getAttributeMetadata<M extends Model>(\n  model: ModelStatic<M>,\n  attributeName: keyof Attributes<M>,\n): ModelAttributeColumnOptions {\n  const attribute = model.modelDefinition.attributes.get(attributeName);\n  if (attribute == null) {\n    throw new Error(`Attribute ${attributeName} does not exist on model ${model.name}`);\n  }\n\n  return attribute;\n}\n\nclass User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n  @Attribute(DataTypes.INTEGER)\n  @PrimaryKey\n  @AutoIncrement\n  declare id: CreationOptional<number>;\n}\n\nconst sequelize = new Sequelize({\n  /* options */\n  models: [User],\n});\n\n// works!\n// success-next-line\nconst idAttributeMeta = getAttributeMetadata(User, 'id');\n\n// fails because 'name' is not an attribute of User\n// error-next-line\nconst nameAttributeMeta = getAttributeMetadata(User, 'name');\n```\n\n----------------------------------------\n\nTITLE: Query Output Example\nDESCRIPTION: Sample output showing the results of querying game participants and their team assignments\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/advanced-many-to-many.md#2025-04-09_snippet_27\n\nLANGUAGE: text\nCODE:\n```\nFound game: \"Winter Showdown\"\n- Team \"The Martians\" played game \"Winter Showdown\" with the following players:\n--- s0me0ne\n--- greenhead\n- Team \"The Plutonians\" played game \"Winter Showdown\" with the following players:\n--- not_spock\n--- bowl_of_petunias\n```\n\n----------------------------------------\n\nTITLE: Querying MySQL Variables for max_connections (SQL)\nDESCRIPTION: This SQL query retrieves the value of the max_connections variable from the MySQL server. This information is used in conjunction with max_prepared_stmt_count to calculate the appropriate maxPreparedStatements setting for Sequelize.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/faq.md#2025-04-09_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSHOW VARIABLES LIKE 'max_connections';\n```\n\n----------------------------------------\n\nTITLE: Using Polymorphic Associations in JavaScript\nDESCRIPTION: Shows how to create and use polymorphic associations in Sequelize, including creating comments, checking associations, and retrieving associated objects.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/polymorphic-associations.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst image = await Image.create({ url: 'https://placekitten.com/408/287' });\nconst comment = await image.createComment({ content: 'Awesome!' });\n\nconsole.log(comment.commentableId === image.id); // true\n\n// We can also retrieve which type of commentable a comment is associated to.\n// The following prints the model name of the associated commentable instance.\nconsole.log(comment.commentableType); // \"Image\"\n\n// We can use a polymorphic method to retrieve the associated commentable, without\n// having to worry whether it's an Image or a Video.\nconst associatedCommentable = await comment.getCommentable();\n\n// In this example, `associatedCommentable` is the same thing as `image`:\nconst isDeepEqual = require('deep-equal');\nconsole.log(isDeepEqual(image, commentable)); // true\n```\n\n----------------------------------------\n\nTITLE: Defining Sequelize Model Using JavaScript Class Extension\nDESCRIPTION: JavaScript implementation of extending Model class to create a User model with firstName and lastName fields using the Model.init() method.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/legacy-model-definitions.mdx#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Sequelize, DataTypes, Model } from '@sequelize/core';\nimport { SqliteDialect } from '@sequelize/sqlite3';\n\nconst sequelize = new Sequelize({ dialect: SqliteDialect });\n\nclass User extends Model {}\n\nUser.init(\n  {\n    firstName: {\n      type: DataTypes.STRING,\n      allowNull: false,\n    },\n    lastName: {\n      type: DataTypes.STRING,\n    },\n  },\n  {\n    sequelize,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Notes on PostgreSQL-specific DataType Implementation in Markdown\nDESCRIPTION: This markdown snippet provides additional information about the implementation of GEOMETRY and GEOGRAPHY types in PostgreSQL using PostGIS extension, and the requirement for pg-hstore package when using HSTORE type.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/other-data-types.mdx#2025-04-09_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n:::note\n\nIn Postgres, the GEOMETRY and GEOGRAPHY types are implemented by [the PostGIS extension](https://postgis.net/workshops/postgis-intro/geometries.html).\n\nIn Postgres, You must install the [pg-hstore](https://www.npmjs.com/package/pg-hstore) package if you use `DataTypes.HSTORE`\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Using Scopes in Sequelize Queries (JavaScript)\nDESCRIPTION: Shows how to apply scopes when querying models, including using multiple scopes and invoking function scopes.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/scopes.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst DeletedProjects = Project.scope('deleted');\nawait DeletedProjects.findAll();\n\n// The above is equivalent to:\nawait Project.findAll({\n  where: {\n    deleted: true,\n  },\n});\n\n// Invoking function scopes\nawait Project.scope('random', { method: ['accessLevel', 19] }).findAll();\n```\n\n----------------------------------------\n\nTITLE: Finding a Project by Primary Key in Sequelize with JavaScript\nDESCRIPTION: This snippet demonstrates how to use the findByPk method to retrieve a single entry from the table using the provided primary key. It also shows how to handle the case when no project is found.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-querying-finders.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst project = await Project.findByPk(123);\nif (project === null) {\n  console.log('Not found!');\n} else {\n  console.log(project instanceof Project); // true\n  // Its primary key is 123\n}\n```\n\n----------------------------------------\n\nTITLE: Typed SELECT Query in Sequelize\nDESCRIPTION: Shows how to execute a SELECT query with specific query type to format results directly without metadata.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/raw-queries.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { QueryTypes } = require('sequelize');\nconst users = await sequelize.query('SELECT * FROM `users`', {\n  type: QueryTypes.SELECT,\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Hooks in Sequelize\nDESCRIPTION: Shows how to remove hooks by either providing the original callback function or the named identifier of the hook. Both methods are demonstrated.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/hooks.mdx#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclass Book extends Model {}\nBook.init(\n  {\n    title: DataTypes.STRING,\n  },\n  { sequelize },\n);\n\nconst myListener = (book, options) => {\n  // ...\n};\n\nBook.hooks.addListener('afterCreate', 'yourHookIdentifier', myListener);\n\n// Both of these will remove the hook:\n// success-next-line\nBook.hooks.removeListener('afterCreate', myListener);\n// success-next-line\nBook.hooks.removeListener('afterCreate', 'yourHookIdentifier');\n```\n\n----------------------------------------\n\nTITLE: JSON Path Segment Escaping in Sequelize\nDESCRIPTION: Demonstrates how to escape special characters in JSON property names when querying with Sequelize. This example shows how to query a property that contains a dot in its name.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/json.mdx#2025-04-09_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nUser.findAll({\n  where: {\n    'jsonAttribute.\"address.country\"': 'Belgium',\n  },\n});\n```\n\nLANGUAGE: SQL\nCODE:\n```\n-- postgres\n\"jsonAttribute\"->'address.country' = '\"Belgium\"';\n\n-- mysql & friends\nJSON_EXTRACT(`jsonAttribute`, '$.\"address.country\"') = '\"Belgium\"';\n```\n\n----------------------------------------\n\nTITLE: Using Op.values for Dynamic Value Arrays in Sequelize\nDESCRIPTION: Demonstrates how to use Op.values operator to specify a list of values that include computed expressions, which cannot be done with regular arrays.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/operators.mdx#2025-04-09_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Op } from '@sequelize/core';\n\nPost.findAll({\n  where: {\n    authorId: {\n      // highlight-start\n      [Op.any]: {\n        // Op.values can be used to specify a list of values that include computed values,\n        // like a column name.\n        [Op.values]: [12, sql`12 + 45`],\n      },\n      // highlight-end\n    },\n  },\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"posts\" WHERE \"authorId\" = ANY (VALUES (12), (12 + 45));\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Error Messages in Sequelize\nDESCRIPTION: Examples of implementing custom error messages for validators, including both simple and complex validation cases with arguments.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/validations-and-constraints.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nisInt: {\n  msg: 'Must be an integer number of pennies';\n}\n```\n\n----------------------------------------\n\nTITLE: Using individualHooks with Model.destroy in Sequelize\nDESCRIPTION: Demonstrates how to trigger instance hooks (beforeDestroy and afterDestroy) for each row when performing a bulk delete operation by setting the individualHooks option to true.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/hooks.mdx#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nUser.destroy({\n  where: {\n    id: [1, 2, 3],\n  },\n  individualHooks: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Eager Loading Examples in Sequelize\nDESCRIPTION: Examples demonstrating how included data is named in eager loading queries. Single associations use singular form, while multiple associations use plural form for the included data field.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/naming-strategies.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Assuming Foo.hasMany(Bar)\nconst foo = Foo.findOne({ include: Bar });\n// foo.bars will be an array\n// foo.bar will not exist since it doens't make sense\n\n// Assuming Foo.hasOne(Bar)\nconst foo = Foo.findOne({ include: Bar });\n// foo.bar will be an object (possibly null if there is no associated model)\n// foo.bars will not exist since it doens't make sense\n\n// And so on.\n```\n\n----------------------------------------\n\nTITLE: Model-Based Query in Sequelize\nDESCRIPTION: Executes a SELECT query that maps results to a predefined model, returning model instances.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/raw-queries.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst projects = await sequelize.query('SELECT * FROM projects', {\n  model: Projects,\n  mapToModel: true, // pass true here if you have any mapped fields\n});\n```\n\n----------------------------------------\n\nTITLE: Explicit Operator Usage in Sequelize WHERE Clauses\nDESCRIPTION: Example showing how to explicitly use operators like Op.eq for equality comparisons in Sequelize queries, which provides more control over query conditions.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-querying-basics.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Op } = require('sequelize');\nPost.findAll({\n  where: {\n    authorId: {\n      [Op.eq]: 2,\n    },\n  },\n});\n// SELECT * FROM post WHERE authorId = 2;\n```\n\n----------------------------------------\n\nTITLE: Nested Attribute Queries in Sequelize\nDESCRIPTION: Shows how to handle dotted attribute names in queries with and without the nest option for object structuring.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/raw-queries.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { QueryTypes } = require('sequelize');\nconst records = await sequelize.query('select 1 as `foo.bar.baz`', {\n  type: QueryTypes.SELECT,\n});\nconsole.log(JSON.stringify(records[0], null, 2));\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { QueryTypes } = require('sequelize');\nconst records = await sequelize.query('select 1 as `foo.bar.baz`', {\n  nest: true,\n  type: QueryTypes.SELECT,\n});\nconsole.log(JSON.stringify(records[0], null, 2));\n```\n\n----------------------------------------\n\nTITLE: Registering Model Hooks using Decorators in TypeScript\nDESCRIPTION: Example of using a decorator to register a 'beforeFind' hook on a Model class, which is triggered when findAll is called on MyModel.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/hooks.mdx#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Sequelize, Model, Hook } from '@sequelize/core';\nimport { BeforeFind } from '@sequelize/core/decorators-legacy';\n\nexport class MyModel extends Model {\n  // highlight-next-line\n  @BeforeFind\n  static logFindAll() {\n    console.log('findAll has been called on MyModel');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying with JSONB Any Key Exists Operator in Sequelize\nDESCRIPTION: Using Op.anyKeyExists to find records where a JSONB field contains any of the specified keys. This is equivalent to PostgreSQL's ?| operator for JSONB.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/operators.mdx#2025-04-09_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nPost.findAll({\n  where: {\n    meta: { [Op.anyKeyExists]: ['keywords', 'description'] },\n  },\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"posts\" WHERE \"meta\" ?| ARRAY['keywords', 'description'];\n```\n\n----------------------------------------\n\nTITLE: Implementing Async AWS Lambda Handler in Node.js using Promises\nDESCRIPTION: This snippet demonstrates an async AWS Lambda handler using Promises. It shows how to chain Promise-based operations and return the result.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/aws-lambda.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports.handler = function (event, context) {\n  /*\n   * must return a `Promise` to be considered an async handler\n   *\n   * an uncaught exception that prevents a `Promise` to be returned\n   * by the handler will \"downgrade\" the handler to non-async\n   */\n  return Promise.resolve()\n    .then(() => doSomethingAsync())\n    .then(() => 'Hello World!');\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Nullability in Sequelize Models\nDESCRIPTION: This snippet shows how to set nullability for model attributes using the @NotNull decorator in both TypeScript and JavaScript.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/defining-models.mdx#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DataTypes, Model, InferAttributes, InferCreationAttributes } from '@sequelize/core';\nimport { Attribute, NotNull } from '@sequelize/core/decorators-legacy';\n\nclass User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n  @Attribute(DataTypes.STRING)\n  @NotNull\n  declare firstName: string;\n\n  @Attribute(DataTypes.STRING)\n  declare lastName: string | null;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DataTypes, Model } from '@sequelize/core';\nimport { Attribute, NotNull, Default } from '@sequelize/core/decorators-legacy';\n\nclass User extends Model {\n  // This attribute is non-null\n  @Attribute(DataTypes.STRING)\n  @NotNull\n  firstName;\n\n  // This attribute is nullable\n  @Attribute(DataTypes.STRING)\n  lastName;\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Output for Custom Data Type in Sequelize\nDESCRIPTION: Displays the SQL output generated when using the custom MyDateType in a Sequelize model definition. The SQL creates a table with a TIMESTAMP column.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/extending-data-types.md#2025-04-09_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS \"users\" (\n  \"birthday\" TIMESTAMP\n);\n```\n\n----------------------------------------\n\nTITLE: Querying with Array Contained Operator in Sequelize\nDESCRIPTION: Using Op.contained to find records where an array field is fully contained within the specified array. This is equivalent to PostgreSQL's <@ operator for arrays.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/operators.mdx#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nPost.findAll({\n  where: {\n    tags: { [Op.contained]: ['popular', 'trending'] },\n  },\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"posts\" WHERE \"tags\" <@ ARRAY['popular', 'trending'];\n```\n\n----------------------------------------\n\nTITLE: Querying with Range Contained Operator in Sequelize\nDESCRIPTION: Using Op.contained to find records where a value or range is fully contained within the specified range. This is equivalent to PostgreSQL's <@ operator for ranges.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/operators.mdx#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nPost.findAll({\n  where: {\n    // The left-hand value can be a range or a single value\n    publishedAt: {\n      [Op.contained]: [new Date('2019-01-01'), new Date('2023-01-01')],\n    },\n  },\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"posts\" WHERE \"publishedAt\" <@ '[2019-01-01, 2023-01-01)';\n```\n\n----------------------------------------\n\nTITLE: Bind Parameters in Sequelize\nDESCRIPTION: Shows how to use bind parameters in queries using both numeric and named formats. Bind parameters are sent separately from the SQL query text.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/raw-queries.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { QueryTypes } = require('sequelize');\n\nawait sequelize.query(\n  'SELECT *, \"text with literal $$1 and literal $$status\" as t FROM projects WHERE status = $1',\n  {\n    bind: ['active'],\n    type: QueryTypes.SELECT,\n  },\n);\n\nawait sequelize.query(\n  'SELECT *, \"text with literal $$1 and literal $$status\" as t FROM projects WHERE status = $status',\n  {\n    bind: { status: 'active' },\n    type: QueryTypes.SELECT,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Registering Model Hooks through the Model definition options\nDESCRIPTION: Example of registering a 'beforeFind' hook through the options object when defining a Model with sequelize.define().\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/hooks.mdx#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DataTypes } from '@sequelize/core';\n\nconst MyModel = sequelize.define(\n  'MyModel',\n  {\n    name: DataTypes.STRING,\n  },\n  {\n    // highlight-next-line\n    hooks: {\n      beforeFind: () => {\n        console.log('findAll has been called on MyModel');\n      },\n    },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Many-to-Many Association Options in Sequelize\nDESCRIPTION: Demonstrates how to customize the unique key for a many-to-many association between Project and User models.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/assocs.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nProject.belongsToMany(User, {\n  through: UserProjects,\n  uniqueKey: 'my_custom_unique',\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Model Hooks through the Model definition options\nDESCRIPTION: Example of registering a 'beforeFind' hook through the options object when defining a Model with sequelize.define().\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/hooks.mdx#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DataTypes } from '@sequelize/core';\n\nconst MyModel = sequelize.define(\n  'MyModel',\n  {\n    name: DataTypes.STRING,\n  },\n  {\n    // highlight-next-line\n    hooks: {\n      beforeFind: () => {\n        console.log('findAll has been called on MyModel');\n      },\n    },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Using sql.identifier for Escaping Identifiers in JavaScript\nDESCRIPTION: The sql.identifier function is used to escape the names of identifiers like table or column names in a query. It can handle single or multiple identifiers and automatically uses the table name when given a Model class.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/raw-queries.mdx#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { sql } from '@sequelize/core';\n\nawait sequelize.query(sql`SELECT * FROM ${sql.identifier('projects')}`);\n```\n\nLANGUAGE: sql\nCODE:\n```\n-- The identifier quotes are dialect-specific, this is an example for PostgreSQL\nSELECT * FROM \"projects\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { sql } from '@sequelize/core';\n\nawait sequelize.query(sql`SELECT * FROM ${sql.identifier('public', 'users')}`);\n```\n\nLANGUAGE: sql\nCODE:\n```\n-- The identifier quotes are dialect-specific, this is an example for PostgreSQL\nSELECT * FROM \"public\".\"users\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { User, sql } from '@sequelize/core';\n\nclass User extends Model {}\n\nawait sequelize.query(sql`SELECT * FROM ${sql.identifier(User)}`);\n```\n\nLANGUAGE: sql\nCODE:\n```\n-- The identifier quotes are dialect-specific, this is an example for PostgreSQL\nSELECT * FROM \"users\"\n```\n\n----------------------------------------\n\nTITLE: Combining Getter and Setter for Content Compression in Sequelize\nDESCRIPTION: This snippet shows how to combine a getter and setter to implement content compression for a Post model in Sequelize. The content is compressed before storage and decompressed when accessed.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/getters-setters-virtuals.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { gzipSync, gunzipSync } = require('zlib');\n\nconst Post = sequelize.define('post', {\n  content: {\n    type: DataTypes.TEXT,\n    get() {\n      const storedValue = this.getDataValue('content');\n      const gzippedBuffer = Buffer.from(storedValue, 'base64');\n      const unzippedBuffer = gunzipSync(gzippedBuffer);\n      return unzippedBuffer.toString();\n    },\n    set(value) {\n      const gzippedBuffer = gzipSync(value);\n      this.setDataValue('content', gzippedBuffer.toString('base64'));\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Deep Mutations in Model Instances (Recommended Approach)\nDESCRIPTION: Shows the recommended approach for modifying nested object properties in Sequelize model instances by treating attributes as immutable and creating new object references.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/upgrade.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst instance = await MyModel.findOne();\n\n// Sequelize will detect this change\ninstance.jsonField = {\n  ...instance.jsonField,\n  jsonProperty: 12345,\n};\n\nconsole.log(instance.changed()); // true\n```\n\n----------------------------------------\n\nTITLE: Declaring Primary Key in Sequelize Model with TypeScript\nDESCRIPTION: This snippet shows how to declare the typing for the automatically added 'id' primary key attribute in a Sequelize model using TypeScript.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/defining-models.mdx#2025-04-09_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  DataTypes,\n  Model,\n  InferAttributes,\n  InferCreationAttributes,\n  CreationOptional,\n} from '@sequelize/core';\n\nclass User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n  declare id: CreationOptional<number>;\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL in Sequelize v7\nDESCRIPTION: Shows how to connect to a PostgreSQL database using Sequelize v7, highlighting the new dialect-specific options and removal of dialectOptions.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/upgrade.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Sequelize } from '@sequelize/core';\nimport { PostgresDialect } from '@sequelize/postgres';\n\nconst sequelize = new Sequelize({\n  dialect: PostgresDialect,\n  database: 'database',\n  user: 'user',\n  password: 'password',\n  host: 'localhost',\n  port: 5432,\n  ssl: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Eager Loading Associated Data in Sequelize\nDESCRIPTION: Shows how to use eager loading to fetch associated data in a single query using the include option. This example fetches the captain along with their ship information.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/assocs.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst awesomeCaptain = await Captain.findOne({\n  where: {\n    name: 'Jack Sparrow',\n  },\n  include: Ship,\n});\n// Now the ship comes with it\nconsole.log('Name:', awesomeCaptain.name);\nconsole.log('Skill Level:', awesomeCaptain.skillLevel);\nconsole.log('Ship Name:', awesomeCaptain.ship.name);\nconsole.log('Amount of Sails:', awesomeCaptain.ship.amountOfSails);\n```\n\n----------------------------------------\n\nTITLE: Markdown Formatting for Technical Terms\nDESCRIPTION: Demonstrates the correct formatting and usage of technical terms in Sequelize documentation using markdown backticks.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/terminology.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`Sequelize` vs `sequelize`\n```\n\n----------------------------------------\n\nTITLE: Defining Alias in Sequelize BelongsTo Association (JavaScript)\nDESCRIPTION: Shows how to define an alias for a belongsTo association in Sequelize. It explains the impact on eager loading and lazy loading, and demonstrates the usage of the alias in queries.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/assocs.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nShip.belongsTo(Captain, { as: 'leader' }); // This creates the `leaderId` foreign key in Ship.\n\n// Eager Loading no longer works by passing the model to `include`:\nconsole.log((await Ship.findAll({ include: Captain })).toJSON()); // Throws an error\n// Instead, you have to pass the alias:\nconsole.log((await Ship.findAll({ include: 'leader' })).toJSON());\n// Or you can pass an object specifying the model and alias:\nconsole.log(\n  (\n    await Ship.findAll({\n      include: {\n        model: Captain,\n        as: 'leader',\n      },\n    })\n  ).toJSON(),\n);\n\n// Also, instances obtain a `getLeader()` method for Lazy Loading:\nconst ship = await Ship.findOne();\nconsole.log((await ship.getLeader()).toJSON());\n```\n\n----------------------------------------\n\nTITLE: SQL Function Execution Comparison\nDESCRIPTION: Shows the comparison between old and new ways of writing SQL functions using sql.fn vs sql template literals.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/raw-queries.mdx#2025-04-09_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nsql.fn('LOWER', sql.attribute('name'));\n```\n\nLANGUAGE: typescript\nCODE:\n```\nsql`LOWER(${sql.attribute('name')})`;\n```\n\nLANGUAGE: sql\nCODE:\n```\nLOWER(\"name\")\n```\n\n----------------------------------------\n\nTITLE: Generating Migration Files with Sequelize CLI\nDESCRIPTION: Command to generate a migration skeleton file using Sequelize CLI. This creates a timestamped migration file in the migrations folder.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/migrations.md#2025-04-09_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nnpx sequelize-cli migration:generate --name migration-skeleton\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Sequelize Model Associations\nDESCRIPTION: Sets up User, Task and Tool models with their associations including a hasMany relationship with an alias.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/eager-loading.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst User = sequelize.define('user', { name: DataTypes.STRING }, { timestamps: false });\nconst Task = sequelize.define('task', { name: DataTypes.STRING }, { timestamps: false });\nconst Tool = sequelize.define(\n  'tool',\n  {\n    name: DataTypes.STRING,\n    size: DataTypes.STRING,\n  },\n  { timestamps: false },\n);\nUser.hasMany(Task);\nTask.belongsTo(User);\nUser.hasMany(Tool, { as: 'Instruments' });\n```\n\n----------------------------------------\n\nTITLE: Installing SQLite Dialect for Sequelize\nDESCRIPTION: Command to install the SQLite dialect package for Sequelize. This is the first step required to use Sequelize with SQLite databases.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/databases/sqlite.mdx#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @sequelize/sqlite3\n```\n\n----------------------------------------\n\nTITLE: SQL Generated by Sequelize with Underscored Option\nDESCRIPTION: SQL generated when calling sync() on models with the underscored option enabled. This demonstrates how Sequelize maps JavaScript camelCase attributes to snake_case column names in the database tables.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/naming-strategies.md#2025-04-09_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS \"users\" (\n  \"id\" SERIAL,\n  \"username\" VARCHAR(255),\n  \"created_at\" TIMESTAMP WITH TIME ZONE NOT NULL,\n  \"updated_at\" TIMESTAMP WITH TIME ZONE NOT NULL,\n  PRIMARY KEY (\"id\")\n);\nCREATE TABLE IF NOT EXISTS \"tasks\" (\n  \"id\" SERIAL,\n  \"title\" VARCHAR(255),\n  \"created_at\" TIMESTAMP WITH TIME ZONE NOT NULL,\n  \"updated_at\" TIMESTAMP WITH TIME ZONE NOT NULL,\n  \"user_id\" INTEGER REFERENCES \"users\" (\"id\") ON DELETE SET NULL ON UPDATE CASCADE,\n  PRIMARY KEY (\"id\")\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Sequelize with Microsoft SQL Server Dialect\nDESCRIPTION: Example of importing and using the MsSqlDialect class to configure a Sequelize instance for connecting to a Microsoft SQL Server database. Includes connection parameters like server, port, database name, and authentication options.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/databases/mssql.mdx#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Sequelize } from '@sequelize/core';\nimport { MsSqlDialect } from '@sequelize/mssql';\n\nconst sequelize = new Sequelize({\n  dialect: MsSqlDialect,\n  server: 'localhost',\n  port: 1433,\n  database: 'database',\n  authentication: {\n    type: 'default',\n    options: {\n      userName: 'username',\n      password: 'password',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Getter Methods with Options in Sequelize Associations (JavaScript)\nDESCRIPTION: Shows how to use getter methods with options in Sequelize associations. It demonstrates applying filters and selecting specific attributes when retrieving associated objects.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/assocs.md#2025-04-09_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst easyTasks = await project.getTasks({\n  where: {\n    difficulty: {\n      [Op.lte]: 5,\n    },\n  },\n});\nconst taskTitles = (\n  await project.getTasks({\n    attributes: ['title'],\n    raw: true,\n  })\n).map(task => task.title);\n```\n\n----------------------------------------\n\nTITLE: Defining Models with Unique Fields for belongsToMany Associations in Sequelize\nDESCRIPTION: This snippet defines Foo and Bar models with unique constraints on name and title fields respectively, which will be used to create custom many-to-many relationships.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/assocs.md#2025-04-09_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst Foo = sequelize.define(\n  'foo',\n  {\n    name: { type: DataTypes.TEXT, unique: true },\n  },\n  { timestamps: false },\n);\nconst Bar = sequelize.define(\n  'bar',\n  {\n    title: { type: DataTypes.TEXT, unique: true },\n  },\n  { timestamps: false },\n);\n```\n\n----------------------------------------\n\nTITLE: Querying MySQL Variables for max_prepared_stmt_count (SQL)\nDESCRIPTION: This SQL query retrieves the value of the max_prepared_stmt_count variable from the MySQL server. This information is crucial for determining the appropriate maxPreparedStatements setting in Sequelize.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/faq.md#2025-04-09_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSHOW VARIABLES LIKE 'max_prepared_stmt_count';\n```\n\n----------------------------------------\n\nTITLE: Model-Based Query Execution\nDESCRIPTION: Demonstrates how to map query results to model instances.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/raw-queries.mdx#2025-04-09_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst projects = await sequelize.query('SELECT * FROM projects', {\n  model: Projects,\n  mapToModel: true, // pass true here if you have any mapped fields\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Column Names for Timestamps (JavaScript)\nDESCRIPTION: Demonstrates how to customize the database column names for timestamp attributes using the @ColumnName decorator in JavaScript.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/auto-timestamps.mdx#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Model } from '@sequelize/core';\nimport { ColumnName } from '@sequelize/core/decorators-legacy';\n\nclass User extends Model {\n  @ColumnName('created_at')\n  createdAt;\n\n  @ColumnName('updated_at')\n  updatedAt;\n\n  @ColumnName('deleted_at')\n  deletedAt;\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Implementation with Sample Data and Queries\nDESCRIPTION: Full working example demonstrating model definitions, relationships, data creation, and querying in a game championship context\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/advanced-many-to-many.md#2025-04-09_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Sequelize, Op, Model, DataTypes } = require('sequelize');\nconst sequelize = new Sequelize('sqlite::memory:', {\n  define: { timestamps: false },\n});\nconst Player = sequelize.define('Player', { username: DataTypes.STRING });\nconst Team = sequelize.define('Team', { name: DataTypes.STRING });\nconst Game = sequelize.define('Game', { name: DataTypes.STRING });\n\nconst GameTeam = sequelize.define('GameTeam', {\n  id: {\n    type: DataTypes.INTEGER,\n    primaryKey: true,\n    autoIncrement: true,\n    allowNull: false,\n  },\n});\nTeam.belongsToMany(Game, { through: GameTeam });\nGame.belongsToMany(Team, { through: GameTeam });\nGameTeam.belongsTo(Game);\nGameTeam.belongsTo(Team);\nGame.hasMany(GameTeam);\nTeam.hasMany(GameTeam);\n\nconst PlayerGameTeam = sequelize.define('PlayerGameTeam', {\n  id: {\n    type: DataTypes.INTEGER,\n    primaryKey: true,\n    autoIncrement: true,\n    allowNull: false,\n  },\n});\nPlayer.belongsToMany(GameTeam, { through: PlayerGameTeam });\nGameTeam.belongsToMany(Player, { through: PlayerGameTeam });\nPlayerGameTeam.belongsTo(Player);\nPlayerGameTeam.belongsTo(GameTeam);\nPlayer.hasMany(PlayerGameTeam);\nGameTeam.hasMany(PlayerGameTeam);\n\n(async () => {\n  await sequelize.sync();\n  await Player.bulkCreate([\n    { username: 's0me0ne' },\n    { username: 'empty' },\n    { username: 'greenhead' },\n    { username: 'not_spock' },\n    { username: 'bowl_of_petunias' },\n  ]);\n  await Game.bulkCreate([\n    { name: 'The Big Clash' },\n    { name: 'Winter Showdown' },\n    { name: 'Summer Beatdown' },\n  ]);\n  await Team.bulkCreate([\n    { name: 'The Martians' },\n    { name: 'The Earthlings' },\n    { name: 'The Plutonians' },\n  ]);\n\n  await GameTeam.bulkCreate([\n    { GameId: 1, TeamId: 1 },\n    { GameId: 1, TeamId: 2 },\n    { GameId: 2, TeamId: 1 },\n    { GameId: 2, TeamId: 3 },\n    { GameId: 3, TeamId: 2 },\n    { GameId: 3, TeamId: 3 },\n  ]);\n\n  await PlayerGameTeam.bulkCreate([\n    { PlayerId: 1, GameTeamId: 3 },\n    { PlayerId: 3, GameTeamId: 3 },\n    { PlayerId: 4, GameTeamId: 4 },\n    { PlayerId: 5, GameTeamId: 4 },\n  ]);\n\n  const game = await Game.findOne({\n    where: {\n      name: 'Winter Showdown',\n    },\n    include: {\n      model: GameTeam,\n      include: [\n        {\n          model: Player,\n          through: { attributes: [] },\n        },\n        Team,\n      ],\n    },\n  });\n\n  console.log(`Found game: \"${game.name}\"`);\n  for (let i = 0; i < game.GameTeams.length; i++) {\n    const team = game.GameTeams[i].Team;\n    const players = game.GameTeams[i].Players;\n    console.log(`- Team \"${team.name}\" played game \"${game.name}\" with the following players:`);\n    console.log(players.map(p => `--- ${p.username}`).join('\\n'));\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Connecting to MSSQL with Domain Account using Sequelize in TypeScript\nDESCRIPTION: This code shows how to initialize a Sequelize connection to Microsoft SQL Server using NTLM authentication with a domain account. It specifies the SQL Server Express instance name and configures domain credentials for authentication.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/databases/mssql.mdx#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst sequelize = new Sequelize({\n  dialect: MsSqlDialect,\n  instanceName: 'SQLEXPRESS',\n  authentication: {\n    type: 'ntlm',\n    options: {\n      domain: 'yourDomain',\n      userName: 'username',\n      password: 'password',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Manually Defining a Reference Key in Sequelize\nDESCRIPTION: Example of manually defining a foreign key in a Sequelize model that references another model. When manually defining references, you should use the table name (plural form) rather than the model name.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/naming-strategies.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsequelize.define('foo', {\n  name: DataTypes.STRING,\n  barId: {\n    type: DataTypes.INTEGER,\n    allowNull: false,\n    references: {\n      model: 'bars',\n      key: 'id',\n    },\n    onDelete: 'CASCADE',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating belongsToMany Association with Custom Source Key in Sequelize\nDESCRIPTION: This snippet demonstrates creating a belongsToMany association with a custom sourceKey (name) for Foo and the default primary key for Bar. The junction table will contain fooName and barId fields.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/assocs.md#2025-04-09_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nFoo.belongsToMany(Bar, { through: 'foo_bar', sourceKey: 'name' });\n// This creates a junction table `foo_bar` with fields `fooName` and `barId`\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory-Based SQLite Storage with Connection Pool\nDESCRIPTION: Configuration for using SQLite with a memory-based temporary storage. This setup includes essential connection pool settings to maintain a persistent connection, as temporary storage is destroyed when the connection closes.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/databases/sqlite.mdx#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst sequelize = new Sequelize({\n  dialect: SqliteDialect,\n  storage: ':memory:', // or ''\n  pool: { max: 1, idle: Infinity, maxUses: Infinity },\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Concurrent Transactions with CLS in Sequelize\nDESCRIPTION: This code demonstrates how to work with nested transactions and specify which transaction a query should use when CLS is enabled. It shows how to override the default transaction context or specify no transaction for specific queries.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/transactions.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nsequelize.transaction(t1 => {\n  return sequelize.transaction(t2 => {\n    // With CLS enabled, queries here will by default use t2.\n    // Pass in the `transaction` option to define/alter the transaction they belong to.\n    return Promise.all([\n      User.create({ name: 'Bob' }, { transaction: null }),\n      User.create({ name: 'Mallory' }, { transaction: t1 }),\n      User.create({ name: 'John' }), // this would default to t2\n    ]);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Validation and Sanitization for Custom Data Type\nDESCRIPTION: Demonstrates how to implement validation, sanitization, and value comparison methods for a custom data type in Sequelize. These methods ensure proper data handling and storage.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/extending-data-types.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Sequelize, DataTypes, ValidationErrorItem } from '@sequelize/core';\n\nexport class MyDateType extends DataTypes.ABSTRACT<Date> {\n  toSql() {\n    return 'TIMESTAMP';\n  }\n\n  sanitize(value: unknown): unknown {\n    if (value instanceof Date) {\n      return value;\n    }\n\n    if (typeof value === 'string') {\n      return new Date(value);\n    }\n\n    throw new ValidationErrorItem('Invalid date');\n  }\n\n  validate(value: unknown): void {\n    if (!(value instanceof Date)) {\n      ValidationErrorItem.throwDataTypeValidationError('Value must be a Date object');\n    }\n\n    if (Number.isNaN(value.getTime())) {\n      ValidationErrorItem.throwDataTypeValidationError('Value is an Invalid Date');\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deferring Constraint Checks in PostgreSQL Transactions (TypeScript)\nDESCRIPTION: Demonstrates how to defer constraint checking to the end of a transaction in PostgreSQL. This allows operations that temporarily violate constraints as long as they're resolved before committing.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/transactions.md#2025-04-09_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConstraintChecking } from '@sequelize/core';\n\nawait sequelize.transaction(\n  {\n    constraintChecking: ConstraintChecking.DEFERRED,\n  },\n  async t => {\n    // Your code\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Event Loop Behavior in Reused AWS Lambda Containers\nDESCRIPTION: This snippet illustrates how the event loop behaves when a Lambda container is reused. It shows how asynchronous operations from previous invocations can affect subsequent invocations when the event loop is not emptied.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/aws-lambda.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nlet counter = 0;\n\nmodule.exports.handler = function (event, context, callback) {\n  /*\n   * The first invocation (i.e. container initialized) will:\n   * - log:\n   *   - Fast timeout invoked. Request id: 00000000-0000-0000-0000-000000000000 | Elapsed ms: 5XX\n   * - return: 1\n   *\n   * Wait 3 seconds and invoke the Lambda again. The invocation (i.e. container re-used) will:\n   * - log:\n   *   - Slow timeout invoked. Request id: 00000000-0000-0000-0000-000000000000 | Elapsed ms: 3XXX\n   *   - Fast timeout invoked. Request id: 11111111-1111-1111-1111-111111111111 | Elapsed ms: 5XX\n   * - return: 3\n   */\n  const now = Date.now();\n\n  context.callbackWaitsForEmptyEventLoop = false;\n\n  setTimeout(() => {\n    console.log(\n      'Slow timeout invoked. Request id:',\n      context.awsRequestId,\n      '| Elapsed ms:',\n      Date.now() - now,\n    );\n    counter++;\n  }, 1000);\n\n  setTimeout(() => {\n    console.log(\n      'Fast timeout invoked. Request id:',\n      context.awsRequestId,\n      '| Elapsed ms:',\n      Date.now() - now,\n    );\n    counter++;\n    callback(null, counter);\n  }, 500);\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declaration in Sequelize Model\nDESCRIPTION: Demonstrates how to properly declare TypeScript types for model attributes using the declare keyword.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-basics.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Valid\nclass User extends Model {\n  declare id: number; // this is ok! The 'declare' keyword ensures this field will not be emitted by TypeScript.\n}\n\nUser.init(\n  {\n    id: {\n      type: DataTypes.INTEGER,\n      autoIncrement: true,\n      primaryKey: true,\n    },\n  },\n  { sequelize },\n);\n\nconst user = new User({ id: 1 });\nuser.id; // 1\n```\n\n----------------------------------------\n\nTITLE: Installing Sequelize DB2 for IBM i Dialect Package\nDESCRIPTION: Command to install the required dialect package for DB2 for IBM i support in Sequelize.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/databases/ibmi.mdx#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @sequelize/db2-ibmi\n```\n\n----------------------------------------\n\nTITLE: Implementing Table Hints in MSSQL with Sequelize\nDESCRIPTION: Demonstrates how to use table hints to override default MSSQL query optimizer behavior using the NOLOCK hint.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/dialect-specific-things.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst { TableHints } = require('sequelize');\nProject.findAll({\n  // adding the table hint NOLOCK\n  tableHint: TableHints.NOLOCK,\n  // this will generate the SQL 'WITH (NOLOCK)'\n});\n```\n\n----------------------------------------\n\nTITLE: Inserting Sample Data into Posts and Reactions\nDESCRIPTION: This function creates a post with associated reactions. It's then used to insert sample data into the database for demonstration purposes.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/sub-queries.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function makePostWithReactions(content, reactionTypes) {\n  const post = await Post.create({ content });\n  await Reaction.bulkCreate(reactionTypes.map(type => ({ type, postId: post.id })));\n  return post;\n}\n\nawait makePostWithReactions('Hello World', [\n  'Like',\n  'Angry',\n  'Laugh',\n  'Like',\n  'Like',\n  'Angry',\n  'Sad',\n  'Like',\n]);\nawait makePostWithReactions('My Second Post', ['Laugh', 'Laugh', 'Like', 'Laugh']);\n```\n\n----------------------------------------\n\nTITLE: Adding Range Type Support for Custom Datatype in Sequelize\nDESCRIPTION: This snippet demonstrates how to add range type support for a custom datatype in Sequelize, specifically for PostgreSQL. It shows how to map the range type and cast type for the new datatype.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/extending-data-types.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction createTheNewDataType() {\n  // [...]\n\n  // Add postgresql range, SOMETYPE comes from DataType.SOMETYPE.key in lower case\n  DataTypes.RANGE.types.postgres.subtypes.SOMETYPE = 'SOMETYPE_range';\n  DataTypes.RANGE.types.postgres.castTypes.SOMETYPE = 'pg_new_type';\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Foreign Key References Without Constraints\nDESCRIPTION: Demonstrates how to manually define foreign key references between models without using association constraints. This approach defines relationships explicitly in the model definitions using the references property in column definitions.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/constraints-and-circularities.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass Trainer extends Model {}\nTrainer.init(\n  {\n    firstName: Sequelize.STRING,\n    lastName: Sequelize.STRING,\n  },\n  { sequelize, modelName: 'trainer' },\n);\n\n// Series will have a trainerId = Trainer.id foreign reference key\n// after we call Trainer.hasMany(series)\nclass Series extends Model {}\nSeries.init(\n  {\n    title: Sequelize.STRING,\n    subTitle: Sequelize.STRING,\n    description: Sequelize.TEXT,\n    // Set FK relationship (hasMany) with `Trainer`\n    trainerId: {\n      type: DataTypes.INTEGER,\n      references: {\n        model: Trainer,\n        key: 'id',\n      },\n    },\n  },\n  { sequelize, modelName: 'series' },\n);\n\n// Video will have seriesId = Series.id foreign reference key\n// after we call Series.hasOne(Video)\nclass Video extends Model {}\nVideo.init(\n  {\n    title: Sequelize.STRING,\n    sequence: Sequelize.INTEGER,\n    description: Sequelize.TEXT,\n    // set relationship (hasOne) with `Series`\n    seriesId: {\n      type: DataTypes.INTEGER,\n      references: {\n        model: Series, // Can be both a string representing the table name or a Sequelize model\n        key: 'id',\n      },\n    },\n  },\n  { sequelize, modelName: 'video' },\n);\n\nSeries.hasOne(Video);\nTrainer.hasMany(Series);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Data Type in Sequelize\nDESCRIPTION: Demonstrates how to create a new data type by extending DataTypes.ABSTRACT and implementing the toSql method. This example creates a MyDateType that maps to a TIMESTAMP in SQL.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/extending-data-types.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Sequelize, DataTypes } from '@sequelize/core';\n\n// All DataTypes must inherit from DataTypes.ABSTRACT.\nexport class MyDateType extends DataTypes.ABSTRACT {\n  // toSql must return the SQL that will be used in a CREATE TABLE statement.\n  toSql() {\n    return 'TIMESTAMP';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using afterCommit Hooks with Transactions (JavaScript)\nDESCRIPTION: Shows how to register afterCommit hooks that execute code after a transaction is successfully committed. Examples for both managed and unmanaged transactions are provided.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/transactions.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// Managed transaction:\nawait sequelize.transaction(async t => {\n  t.afterCommit(() => {\n    // Your logic\n  });\n});\n\n// Unmanaged transaction:\nconst t = await sequelize.startUnmanagedTransaction();\nt.afterCommit(() => {\n  // Your logic\n});\nawait t.commit();\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Transaction Mode in Sequelize with TypeScript\nDESCRIPTION: Shows how to configure the nested transaction mode using the 'nestMode' option when calling sequelize.transaction(). This example sets the mode to use savepoints.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/transactions.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait sequelize.transaction(async () => {\n  await sequelize.transaction({ nestMode: TransactionNestMode.savepoint }, async () => {});\n});\n```\n\n----------------------------------------\n\nTITLE: Simplified Aggregation with include in Sequelize\nDESCRIPTION: Example showing how to add aggregation functions to queries without listing all attributes using the include option within attributes, which is more maintainable when model attributes change.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-querying-basics.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// This is a tiresome way of getting the number of hats (along with every column)\nModel.findAll({\n  attributes: [\n    'id',\n    'foo',\n    'bar',\n    'baz',\n    'qux',\n    'hats', // We had to list all attributes...\n    [sequelize.fn('COUNT', sequelize.col('hats')), 'n_hats'], // To add the aggregation...\n  ],\n});\n\n// This is shorter, and less error prone because it still works if you add / remove attributes from your model later\nModel.findAll({\n  attributes: {\n    include: [[sequelize.fn('COUNT', sequelize.col('hats')), 'n_hats']],\n  },\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, foo, bar, baz, qux, hats, COUNT(hats) AS n_hats FROM ...\n```\n\n----------------------------------------\n\nTITLE: Installing DB2 Dialect Package for Sequelize\nDESCRIPTION: Commands to install the @sequelize/db2 dialect package needed for DB2 for LUW support in Sequelize.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/databases/db2.mdx#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @sequelize/db2\n```\n\n----------------------------------------\n\nTITLE: Raw SQL Query for Counting Laugh Reactions\nDESCRIPTION: This SQL query demonstrates how to use a subquery to count the number of 'Laugh' reactions for each post. It's a raw SQL example before showing how to achieve the same with Sequelize.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/sub-queries.md#2025-04-09_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    *,\n    (\n        SELECT COUNT(*)\n        FROM reactions AS reaction\n        WHERE\n            reaction.postId = post.id\n            AND\n            reaction.type = \"Laugh\"\n    ) AS laughReactionsCount\nFROM posts AS post\n```\n\n----------------------------------------\n\nTITLE: Connecting to MSSQL with Domain Account in Sequelize\nDESCRIPTION: Example of connecting to Microsoft SQL Server using Windows domain authentication through NTLM. This configuration specifies domain, username, and password in the authentication options structure.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/dialect-specific-things.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst sequelize = new Sequelize('database', null, null, {\n  dialect: 'mssql',\n  dialectOptions: {\n    authentication: {\n      type: 'ntlm',\n      options: {\n        domain: 'yourDomain',\n        userName: 'username',\n        password: 'password',\n      },\n    },\n    options: {\n      instanceName: 'SQLEXPRESS',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using CLS with cls-hooked in Sequelize v6\nDESCRIPTION: Example of how to implement Continuation-Local Storage (CLS) in Sequelize v6 using the cls-hooked package instead of the previous implementation.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/upgrade.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst cls = require('cls-hooked');\nconst namespace = cls.createNamespace('....');\nconst Sequelize = require('sequelize');\n\nSequelize.useCLS(namespace);\n```\n\n----------------------------------------\n\nTITLE: Handling PostgreSQL Timestamps with Custom Parser\nDESCRIPTION: Example of using the pg library's type parser to handle PostgreSQL TIMESTAMP WITHOUT TIME ZONE data type. This code sets a custom parser to convert the timestamp to a specific timezone by adding an offset.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/dialect-specific-things.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('pg').types.setTypeParser(1114, stringValue => {\n  return new Date(stringValue + '+0000');\n  // e.g., UTC offset. Use any offset that you would like.\n});\n```\n\n----------------------------------------\n\nTITLE: MySQL2 Connection Class Implementation\nDESCRIPTION: Implementation of the MySQL2 Connection class showing how it handles connections, timeouts, and errors. This code is critical to understanding the race condition as it includes the timeout mechanism that can trigger ETIMEDOUT errors.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/aws-lambda.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nclass Connection extends EventEmitter {\n  constructor(opts) {\n    // (...)\n\n    // create Socket\n    this.stream = /* (...) */;\n\n    // when data is received, clear timeout\n    this.stream.on('data', data => {\n      if (this.connectTimeout) {\n        Timers.clearTimeout(this.connectTimeout);\n        this.connectTimeout = null;\n      }\n      this.packetParser.execute(data);\n    });\n\n    // (...)\n\n    // when handshake is completed, emit the 'connect' event\n    handshakeCommand.on('end', () => {\n      this.emit('connect', handshakeCommand.handshake);\n    });\n\n    // set a timeout to trigger if no data is received on the socket\n    if (this.config.connectTimeout) {\n      const timeoutHandler = this._handleTimeoutError.bind(this);\n      this.connectTimeout = Timers.setTimeout(\n        timeoutHandler,\n        this.config.connectTimeout\n      );\n    }\n  }\n\n  // (...)\n\n  _handleTimeoutError() {\n    if (this.connectTimeout) {\n      Timers.clearTimeout(this.connectTimeout);\n      this.connectTimeout = null;\n    }\n    this.stream.destroy && this.stream.destroy();\n    const err = new Error('connect ETIMEDOUT');\n    err.errorno = 'ETIMEDOUT';\n    err.code = 'ETIMEDOUT';\n    err.syscall = 'connect';\n\n    // this will emit the 'error' event\n    this._handleNetworkError(err);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using skipLocked with Transactions in Sequelize (JavaScript)\nDESCRIPTION: Shows how to use the skipLocked option in a transaction query, which allows the query to skip rows that are locked by other transactions instead of waiting for the locks to be released.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/transactions.md#2025-04-09_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nreturn User.findAll({\n  limit: 1,\n  lock: true,\n  skipLocked: true,\n  transaction: t2,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Model Attribute Metadata Retrieval in TypeScript with Sequelize\nDESCRIPTION: A utility function that retrieves metadata for a specific attribute of a Sequelize model. The function takes a model class and attribute name as parameters and returns the column options for that attribute. It includes type safety checks and demonstrates proper usage with a User model example.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/typescript.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  ModelStatic,\n  ModelAttributeColumnOptions,\n  Model,\n  InferAttributes,\n  InferCreationAttributes,\n  CreationOptional,\n  Attributes,\n} from 'sequelize';\n\nexport function getAttributeMetadata<M extends Model>(\n  model: ModelStatic<M>,\n  attributeName: keyof Attributes<M>,\n): ModelAttributeColumnOptions {\n  const attribute = model.rawAttributes[attributeName];\n  if (attribute == null) {\n    throw new Error(`Attribute ${attributeName} does not exist on model ${model.name}`);\n  }\n\n  return attribute;\n}\n\nclass User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n  id: CreationOptional<number>;\n}\n\nUser.init(\n  {\n    id: {\n      type: DataTypes.INTEGER.UNSIGNED,\n      autoIncrement: true,\n      primaryKey: true,\n    },\n  },\n  { sequelize },\n);\n\nconst idAttributeMeta = getAttributeMetadata(User, 'id'); // works!\n\n// @ts-expect-error\nconst nameAttributeMeta = getAttributeMetadata(User, 'name'); // fails because 'name' is not an attribute of User\n```\n\n----------------------------------------\n\nTITLE: Configuring Polymorphic Associations in Sequelize\nDESCRIPTION: Demonstrates how to configure polymorphic associations in Sequelize, including model definitions, association setup, and hooks for proper loading.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/polymorphic-associations.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Helper function\nconst uppercaseFirst = str => `${str[0].toUpperCase()}${str.substr(1)}`;\n\nclass Image extends Model {}\nImage.init(\n  {\n    title: DataTypes.STRING,\n    url: DataTypes.STRING,\n  },\n  { sequelize, modelName: 'image' },\n);\n\nclass Video extends Model {}\nVideo.init(\n  {\n    title: DataTypes.STRING,\n    text: DataTypes.STRING,\n  },\n  { sequelize, modelName: 'video' },\n);\n\nclass Comment extends Model {\n  getCommentable(options) {\n    if (!this.commentableType) return Promise.resolve(null);\n    const mixinMethodName = `get${uppercaseFirst(this.commentableType)}`;\n    return this[mixinMethodName](options);\n  }\n}\nComment.init(\n  {\n    title: DataTypes.STRING,\n    commentableId: DataTypes.INTEGER,\n    commentableType: DataTypes.STRING,\n  },\n  { sequelize, modelName: 'comment' },\n);\n\nImage.hasMany(Comment, {\n  foreignKey: 'commentableId',\n  constraints: false,\n  scope: {\n    commentableType: 'image',\n  },\n});\nComment.belongsTo(Image, { foreignKey: 'commentableId', constraints: false });\n\nVideo.hasMany(Comment, {\n  foreignKey: 'commentableId',\n  constraints: false,\n  scope: {\n    commentableType: 'video',\n  },\n});\nComment.belongsTo(Video, { foreignKey: 'commentableId', constraints: false });\n\nComment.addHook('afterFind', findResult => {\n  if (!Array.isArray(findResult)) findResult = [findResult];\n  for (const instance of findResult) {\n    if (instance.commentableType === 'image' && instance.image !== undefined) {\n      instance.commentable = instance.image;\n    } else if (instance.commentableType === 'video' && instance.video !== undefined) {\n      instance.commentable = instance.video;\n    }\n    // To prevent mistakes:\n    delete instance.image;\n    delete instance.dataValues.image;\n    delete instance.video;\n    delete instance.dataValues.video;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.json Scripts for Sequelize CLI\nDESCRIPTION: Example of setting up migration scripts in package.json for easier command execution.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/cli.md#2025-04-09_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n// package.json\n\n...\n  \"scripts\": {\n    \"migrate:up\": \"npx sequelize-cli db:migrate\",\n    \"migrate:undo\": \"npx sequelize-cli db:migrate:undo\"\n  },\n...\n```\n\n----------------------------------------\n\nTITLE: Querying with JSONB Contained Operator in Sequelize\nDESCRIPTION: Using Op.contained with JSONB to find records where a JSONB field is contained within the specified JSONB value. This is equivalent to PostgreSQL's <@ operator for JSONB.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/operators.mdx#2025-04-09_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nPost.findAll({\n  where: {\n    meta: { [Op.contained]: { keywords: 'orm, javascript, sequelize' } },\n  },\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"posts\" WHERE \"meta\" <@ '{\"keywords\": \"orm, javascript, sequelize\"}';\n```\n\n----------------------------------------\n\nTITLE: Querying with Range No Extend Right Operator in Sequelize\nDESCRIPTION: Using Op.noExtendRight to find records where all values in a range field are less than or equal to any value in the specified range. This is equivalent to PostgreSQL's &< operator for ranges.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/operators.mdx#2025-04-09_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nEvent.findAll({\n  where: {\n    occursDuring: {\n      [Op.noExtendRight]: [new Date('2019-01-01'), new Date('2023-01-01')],\n    },\n  },\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"events\" WHERE \"occursDuring\" &< '[2019-01-01, 2023-01-01)';\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Association Scope in Sequelize\nDESCRIPTION: Demonstrates the setup of a One-to-Many association between Foo and Bar models with an association scope that filters bars by 'open' status.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/association-scopes.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Foo = sequelize.define('foo', { name: DataTypes.STRING });\nconst Bar = sequelize.define('bar', { status: DataTypes.STRING });\nFoo.hasMany(Bar, {\n  scope: {\n    status: 'open',\n  },\n  as: 'openBars',\n});\nawait sequelize.sync();\nconst myFoo = await Foo.create({ name: 'My Foo' });\n```\n\n----------------------------------------\n\nTITLE: Establishing a Basic Many-to-Many Relationship in Sequelize\nDESCRIPTION: This code shows the simplest way to define a Many-to-Many relationship between User and Profile models using Sequelize's belongsToMany method.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/advanced-many-to-many.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nUser.belongsToMany(Profile, { through: 'User_Profiles' });\nProfile.belongsToMany(User, { through: 'User_Profiles' });\n```\n\n----------------------------------------\n\nTITLE: Sequelize Query Method Implementation\nDESCRIPTION: Implementation of Sequelize's query method that manages database connections. This snippet shows how Sequelize obtains a connection from the pool, executes the query, and releases the connection back to the pool.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/aws-lambda.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nclass Sequelize {\n  // (...)\n\n  async query(sql, options) {\n    // (...)\n\n    const connection = await this.connectionManager.getConnection(options);\n    const query = new this.dialect.Query(connection, this, options);\n\n    try {\n      return await query.run(sql, bindParameters);\n    } finally {\n      await this.connectionManager.releaseConnection(connection);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Rollback in Managed Transactions with Sequelize\nDESCRIPTION: This snippet shows how to force a rollback in a managed transaction by manually throwing an error, even when all queries succeed. This technique allows for conditional transaction rollback based on business logic.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/transactions.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait sequelize.transaction(async t => {\n  const user = await User.create(\n    {\n      firstName: 'Abraham',\n      lastName: 'Lincoln',\n    },\n    { transaction: t },\n  );\n\n  // Woops, the query was successful but we still want to roll back!\n  // We throw an error manually, so that Sequelize handles everything automatically.\n  throw new Error();\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced Query Options in Sequelize\nDESCRIPTION: Demonstrates various query options including logging, plain results, raw formatting, and query typing.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/raw-queries.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { QueryTypes } = require('sequelize');\nawait sequelize.query('SELECT 1', {\n  logging: console.log,\n  plain: false,\n  raw: false,\n  type: QueryTypes.SELECT,\n});\n\nconsole.log(await sequelize.query('SELECT * FROM projects', { raw: true }));\n```\n\n----------------------------------------\n\nTITLE: Utility Function with ModelStatic\nDESCRIPTION: Shows how to create utility functions that work with Sequelize model classes using the ModelStatic type.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/typescript.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ModelStatic, ModelAttributeColumnOptions, Model, InferAttributes, InferCreationAttributes, CreationOptional } from 'sequelize';\n\nexport function getPrimaryKeyAttributes(model: ModelStatic<any>): ModelAttributeColumnOptions[] {\n  const attributes: ModelAttributeColumnOptions[] = [];\n\n  for (const attribute of Object.values(model.rawAttributes)) {\n    if (attribute.primaryKey) {\n      attributes.push(attribute);\n    }\n  }\n\n  return attributes;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Migrations\nDESCRIPTION: Command to execute pending migrations and update the database schema.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/cli.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# using npm\nnpx sequelize-cli db:migrate\n```\n\n----------------------------------------\n\nTITLE: Unique Association Names in Sequelize v7\nDESCRIPTION: Illustrates that defining two associations with the same name now throws an error in Sequelize v7. This change prevents inconsistencies in association handling.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/upgrade.md#2025-04-09_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nProject.belongsTo(User, { as: 'owner' });\nProject.belongsTo(User, { as: 'owner' });\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Fields to Through Model in Sequelize Many-to-Many Association\nDESCRIPTION: This code shows how to add custom fields (selfGranted) to the through model (User_Profile) in a Many-to-Many relationship between User and Profile.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/advanced-many-to-many.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst User_Profile = sequelize.define(\n  'User_Profile',\n  {\n    selfGranted: DataTypes.BOOLEAN,\n  },\n  { timestamps: false },\n);\nUser.belongsToMany(Profile, { through: User_Profile });\nProfile.belongsToMany(User, { through: User_Profile });\n```\n\n----------------------------------------\n\nTITLE: Setting Default Isolation Level Globally (TypeScript)\nDESCRIPTION: Shows how to set a default isolation level for all transactions by configuring it in the Sequelize constructor. This eliminates the need to specify it for each transaction.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/transactions.md#2025-04-09_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Sequelize, IsolationLevel } from '@sequelize/core';\n\nconst sequelize = new Sequelize({\n  /* options */\n  isolationLevel: IsolationLevel.SERIALIZABLE,\n});\n```\n\n----------------------------------------\n\nTITLE: Controlling Through Table Attributes with Mixins in Sequelize\nDESCRIPTION: Example of controlling which through table attributes are included when using association mixins (like getAssociated) instead of finder methods. This uses the joinTableAttributes option.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/advanced-many-to-many.md#2025-04-09_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nsomeUser.getProfiles({ joinTableAttributes: ['selfGranted'] });\n```\n\n----------------------------------------\n\nTITLE: Defining Transaction Isolation Levels in Sequelize\nDESCRIPTION: This snippet shows the available transaction isolation levels in Sequelize. It accesses the isolation level constants from the Transaction object, which can be used when starting a transaction to control the isolation behavior.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/transactions.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Transaction } = require('sequelize');\n\n// The following are valid isolation levels:\nTransaction.ISOLATION_LEVELS.READ_UNCOMMITTED; // \"READ UNCOMMITTED\"\nTransaction.ISOLATION_LEVELS.READ_COMMITTED; // \"READ COMMITTED\"\nTransaction.ISOLATION_LEVELS.REPEATABLE_READ; // \"REPEATABLE READ\"\nTransaction.ISOLATION_LEVELS.SERIALIZABLE; // \"SERIALIZABLE\"\n```\n\n----------------------------------------\n\nTITLE: Op.not Behavior Change in Sequelize 7\nDESCRIPTION: The Op.not operator now always produces NOT (x) syntax instead of varying between <> x or IS NOT x. Op.isNot and Op.ne should be used for specific negation types.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/upgrade.md#2025-04-09_snippet_21\n\n\n\n----------------------------------------\n\nTITLE: Registering Model Hooks using the Model's hooks property\nDESCRIPTION: Shows how to register a 'beforeFind' hook on a specific Model that will trigger whenever findAll is called on that Model.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/hooks.mdx#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Sequelize, DataTypes } from '@sequelize/core';\n\nconst sequelize = new Sequelize(/* options */);\n\nconst MyModel = sequelize.define('MyModel', {\n  name: DataTypes.STRING,\n});\n\n// highlight-next-line\nMyModel.hooks.addListener('beforeFind', () => {\n  console.log('findAll has been called on MyModel');\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Migration Structure\nDESCRIPTION: Basic skeleton of a Sequelize migration file showing up and down functions.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/cli.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  up: (queryInterface, Sequelize) => {\n    // logic for transforming into the new state\n  },\n  down: (queryInterface, Sequelize) => {\n    // logic for reverting the changes\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Index Hints in MySQL/MariaDB with Sequelize\nDESCRIPTION: Shows how to set index hints to override MySQL query optimizer behavior by specifying which indexes to use.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/dialect-specific-things.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst { IndexHints } = require('sequelize');\nProject.findAll({\n  indexHints: [{ type: IndexHints.USE, values: ['index_project_on_name'] }],\n  where: {\n    id: {\n      [Op.gt]: 623,\n    },\n    name: {\n      [Op.like]: 'Foo %',\n    },\n  },\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM Project USE INDEX (index_project_on_name) WHERE name LIKE 'FOO %' AND id > 623;\n```\n\n----------------------------------------\n\nTITLE: Comparing Attribute Escaping in Sequelize 6 vs 7\nDESCRIPTION: In Sequelize 7, all attributes in the 'attributes' option are now escaped for security reasons, unlike in v6 where some attributes had special meaning and weren't escaped.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/upgrade.md#2025-04-09_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nawait User.findAll({\n  attributes: ['*', 'a.*', ['count(id)', 'count']],\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *, \"a\".*, count(id) AS \"count\" FROM \"users\"\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \"*\", \"a.*\", \"count(id)\" AS \"count\" FROM \"users\"\n```\n\n----------------------------------------\n\nTITLE: Excluding Junction Table Attributes in Many-to-Many Eager Loading\nDESCRIPTION: Shows how to exclude all junction table attributes when eager loading a Many-to-Many relationship by providing an empty array to the 'attributes' option inside the 'through' configuration.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/eager-loading.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nFoo.findOne({\n  include: {\n    model: Bar,\n    through: {\n      attributes: [],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: JSON Output of Nested Eager Loading\nDESCRIPTION: Shows the JSON structure resulting from nested eager loading, with various types of associations (1:M, N:M, 1:1) represented in the hierarchical output.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/eager-loading.md#2025-04-09_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"name\": \"John Doe\",\n    \"id\": 1,\n    \"Instruments\": [\n      {\n        // 1:M and N:M association\n        \"name\": \"Scissor\",\n        \"id\": 1,\n        \"userId\": 1,\n        \"Teacher\": {\n          // 1:1 association\n          \"name\": \"Jimi Hendrix\"\n        }\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Transaction Isolation Level in Sequelize\nDESCRIPTION: This code demonstrates how to specify a custom isolation level when starting a managed transaction in Sequelize. It passes the isolation level option to control transaction isolation behavior.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/transactions.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Transaction } = require('sequelize');\n\nawait sequelize.transaction(\n  {\n    isolationLevel: Transaction.ISOLATION_LEVELS.SERIALIZABLE,\n  },\n  async t => {\n    // Your code\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Default Output Structure for Many-to-Many Eager Loading\nDESCRIPTION: Default JSON structure returned when eager loading a Many-to-Many relationship in Sequelize. Shows how the through table attributes are nested within the included model instances.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/advanced-many-to-many.md#2025-04-09_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n// User.findOne({ include: Profile })\n{\n  \"id\": 4,\n  \"username\": \"p4dm3\",\n  \"points\": 1000,\n  \"profiles\": [\n    {\n      \"id\": 6,\n      \"name\": \"queen\",\n      \"grant\": {\n        \"userId\": 4,\n        \"profileId\": 6,\n        \"selfGranted\": false\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Row Locks in Sequelize Transactions\nDESCRIPTION: Demonstrates how to perform a query with row locking within a Sequelize transaction. The lock option is set to true to acquire locks on retrieved rows, preventing other transactions from modifying them.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/transactions.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nreturn User.findAll({\n  limit: 1,\n  lock: true,\n  transaction: t1,\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server for Sequelize Documentation\nDESCRIPTION: This command starts a local development server and opens a browser window. Most changes are reflected live without needing to restart the server.\nSOURCE: https://github.com/sequelize/website/blob/main/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Simplified OR Operator for Same Field in Sequelize\nDESCRIPTION: Alternative syntax for using OR conditions on the same field in Sequelize, which provides a more readable structure for the common case of OR conditions on a single attribute.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-querying-basics.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Op } = require('sequelize');\nPost.destroy({\n  where: {\n    authorId: {\n      [Op.or]: [12, 13],\n    },\n  },\n});\n// DELETE FROM post WHERE authorId = 12 OR authorId = 13;\n```\n\n----------------------------------------\n\nTITLE: Implementing Tag and Junction Models with Polymorphic Associations\nDESCRIPTION: Defines Tag model with a getTaggables method and sets up the Tag_Taggable junction model with polymorphic associations between Tag, Image, and Video models. Includes configuration for foreign keys, constraints and association scopes.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/polymorphic-associations.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclass Tag extends Model {\n  async getTaggables(options) {\n    const images = await this.getImages(options);\n    const videos = await this.getVideos(options);\n    // Concat images and videos in a single array of taggables\n    return images.concat(videos);\n  }\n}\nTag.init(\n  {\n    name: DataTypes.STRING,\n  },\n  { sequelize, modelName: 'tag' },\n);\n\n// Here we define the junction model explicitly\nclass Tag_Taggable extends Model {}\nTag_Taggable.init(\n  {\n    tagId: {\n      type: DataTypes.INTEGER,\n      unique: 'tt_unique_constraint',\n    },\n    taggableId: {\n      type: DataTypes.INTEGER,\n      unique: 'tt_unique_constraint',\n      references: null,\n    },\n    taggableType: {\n      type: DataTypes.STRING,\n      unique: 'tt_unique_constraint',\n    },\n  },\n  { sequelize, modelName: 'tag_taggable' },\n);\n\nImage.belongsToMany(Tag, {\n  through: {\n    model: Tag_Taggable,\n    unique: false,\n    scope: {\n      taggableType: 'image',\n    },\n  },\n  foreignKey: 'taggableId',\n  constraints: false,\n});\nTag.belongsToMany(Image, {\n  through: {\n    model: Tag_Taggable,\n    unique: false,\n  },\n  foreignKey: 'tagId',\n  constraints: false,\n});\n\nVideo.belongsToMany(Tag, {\n  through: {\n    model: Tag_Taggable,\n    unique: false,\n    scope: {\n      taggableType: 'video',\n    },\n  },\n  foreignKey: 'taggableId',\n  constraints: false,\n});\nTag.belongsToMany(Video, {\n  through: {\n    model: Tag_Taggable,\n    unique: false,\n  },\n  foreignKey: 'tagId',\n  constraints: false,\n});\n```\n\n----------------------------------------\n\nTITLE: JSON Extraction with Unquote Modifier in Sequelize 7\nDESCRIPTION: JSON extraction in Sequelize 7 doesn't unquote values by default. The ':unquote' modifier must be used to get text values for use with text operators like LIKE.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/upgrade.md#2025-04-09_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// Sequelize 6\nUser.findAll({\n  where: {\n    jsonAttribute: {\n      firstName: {\n        [Op.like]: '%zoe%',\n      },\n    },\n  },\n});\n\n// Sequelize 7\nUser.findAll({\n  where: {\n    jsonAttribute: {\n      'firstName:unquote': {\n        [Op.like]: '%zoe%',\n      },\n    },\n  },\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nUser.findAll({\n  where: {\n    jsonAttribute: {\n      address: {\n        // This is the postgres JSONB ?& operator.\n        [Op.hasAllKeys]: ['street', 'city'],\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Indexes in Sequelize Model (JavaScript)\nDESCRIPTION: This snippet demonstrates how to define various types of indexes in a Sequelize model. It includes examples of unique, gin, partial, and BTREE indexes with different configurations such as custom operators, multi-column indexes, and ordering.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/indexes.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst User = sequelize.define(\n  'User',\n  {\n    /* attributes */\n  },\n  {\n    indexes: [\n      // Create a unique index on email\n      {\n        unique: true,\n        fields: ['email'],\n      },\n\n      // Creates a gin index on data with the jsonb_path_ops operator\n      {\n        fields: ['data'],\n        using: 'gin',\n        operator: 'jsonb_path_ops',\n      },\n\n      // By default index name will be [table]_[fields]\n      // Creates a multi column partial index\n      {\n        name: 'public_by_author',\n        fields: ['author', 'status'],\n        where: {\n          status: 'public',\n        },\n      },\n\n      // A BTREE index with an ordered field\n      {\n        name: 'title_index',\n        using: 'BTREE',\n        fields: [\n          'author',\n          {\n            name: 'title',\n            collate: 'en_US',\n            order: 'DESC',\n            length: 5,\n          },\n        ],\n      },\n    ],\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Combining afterCommit with Model Hooks in Sequelize\nDESCRIPTION: This snippet demonstrates how to combine the afterCommit hook with model hooks to perform operations only after a transaction has been committed. It shows a pattern for notifications that should only occur after data is fully committed to the database.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/transactions.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nUser.afterSave((instance, options) => {\n  if (options.transaction) {\n    // Save done within a transaction, wait until transaction is committed to\n    // notify listeners the instance has been saved\n    options.transaction.afterCommit(() => /* Notify */)\n    return;\n  }\n  // Save done outside a transaction, safe for callers to fetch the updated model\n  // Notify\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Through Model for Many-to-Many Association in Sequelize\nDESCRIPTION: This snippet demonstrates how to create a custom model (User_Profile) to be used as the through table in a Many-to-Many relationship between User and Profile.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/advanced-many-to-many.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst User_Profile = sequelize.define('User_Profile', {}, { timestamps: false });\nUser.belongsToMany(Profile, { through: User_Profile });\nProfile.belongsToMany(User, { through: User_Profile });\n```\n\n----------------------------------------\n\nTITLE: Explicit AND Operator in Sequelize WHERE Clauses\nDESCRIPTION: Example showing how to explicitly use the Op.and operator to combine multiple conditions in Sequelize queries, which is equivalent to the implicit AND behavior but more explicit.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-querying-basics.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Op } = require('sequelize');\nPost.findAll({\n  where: {\n    [Op.and]: [{ authorId: 12 }, { status: 'active' }],\n  },\n});\n// SELECT * FROM post WHERE authorId = 12 AND status = 'active';\n```\n\n----------------------------------------\n\nTITLE: Handling Deep Mutations in Model Instances (Problem Example)\nDESCRIPTION: Demonstrates the issue with deep mutations in Sequelize model instances where changes aren't automatically detected and shows a workaround using the changed() method.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/upgrade.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst instance = await MyModel.findOne();\n\n// Sequelize will not detect this change\ninstance.jsonField.jsonProperty = 12345;\n\nconsole.log(instance.changed()); // false\n\n// You can workaround this by telling Sequelize the property changed:\ninstance.changed('jsonField', true);\nconsole.log(instance.changed()); // true\n```\n\n----------------------------------------\n\nTITLE: Using JSON Functions with SQL in Sequelize 7\nDESCRIPTION: Shows the change from using raw SQL in json() functions to using the sql template tag, which provides proper value escaping to prevent SQL injection risks.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/upgrade.md#2025-04-09_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nimport { json } from 'sequelize';\n\n// This was valid in Sequelize 6\nUser.findAll({\n  where: where(json(`(\"data\"->id)`), Op.eq, id),\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sql } from '@sequelize/core';\n\n// This is valid in Sequelize 7\nUser.findAll({\n  where: sql`\"data\"->>'id' = ${id}`,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Non-async AWS Lambda Handler in Node.js\nDESCRIPTION: This snippet demonstrates a non-async AWS Lambda handler using a callback function. It shows how to handle successful execution and error cases.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/aws-lambda.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports.handler = function (event, context, callback) {\n  try {\n    doSomething();\n    callback(null, 'Hello World!'); // Lambda returns \"Hello World!\"\n  } catch (err) {\n    // try/catch is not required, uncaught exceptions invoke `callback(err)` implicitly\n    callback(err); // Lambda fails with `err`\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Comparing Event Loop Behavior in Different Lambda Handler Types\nDESCRIPTION: Examples demonstrating how different Lambda handler types behave with respect to the event loop. Shows when Lambda function execution finishes in relation to asynchronous operations for both async and non-async handlers.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/aws-lambda.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// no callback invoked\nmodule.exports.handler = function () {\n  // Lambda finishes AFTER `doSomething()` is invoked\n  setTimeout(() => doSomething(), 1000);\n};\n\n// callback invoked\nmodule.exports.handler = function (event, context, callback) {\n  // Lambda finishes AFTER `doSomething()` is invoked\n  setTimeout(() => doSomething(), 1000);\n  callback(null, 'Hello World!');\n};\n\n// callback invoked, context.callbackWaitsForEmptyEventLoop = false\nmodule.exports.handler = function (event, context, callback) {\n  // Lambda finishes BEFORE `doSomething()` is invoked\n  context.callbackWaitsForEmptyEventLoop = false;\n  setTimeout(() => doSomething(), 2000);\n  setTimeout(() => callback(null, 'Hello World!'), 1000);\n};\n\n// async/await\nmodule.exports.handler = async function () {\n  // Lambda finishes BEFORE `doSomething()` is invoked\n  setTimeout(() => doSomething(), 1000);\n  return 'Hello World!';\n};\n\n// Promise\nmodule.exports.handler = function () {\n  // Lambda finishes BEFORE `doSomething()` is invoked\n  setTimeout(() => doSomething(), 1000);\n  return Promise.resolve('Hello World!');\n};\n```\n\n----------------------------------------\n\nTITLE: AWS Lambda Runtime Initialization\nDESCRIPTION: Shows how the Lambda runtime creates a new Runtime instance and schedules the first iteration to handle invocations.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/aws-lambda.md#2025-04-09_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n// (...)\n\nnew Runtime(client, handler, errorCallbacks).scheduleIteration();\n```\n\n----------------------------------------\n\nTITLE: Testing Database Connection in Sequelize\nDESCRIPTION: Code demonstrating how to test if the database connection is working properly using Sequelize's authenticate method. It includes error handling to log success or failure.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/getting-started.mdx#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n  await sequelize.authenticate();\n  console.log('Connection has been established successfully.');\n} catch (error) {\n  console.error('Unable to connect to the database:', error);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Skip Locked Rows in Sequelize Transactions\nDESCRIPTION: Shows how to perform a query with row locking while skipping locked rows. The skipLocked option allows the query to bypass rows that are already locked by other transactions, avoiding blocking behavior.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/transactions.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nreturn User.findAll({\n  limit: 1,\n  lock: true,\n  skipLocked: true,\n  transaction: t2,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Models in Sequelize\nDESCRIPTION: Initial model definitions for Player, Team, and Game entities using Sequelize.define()\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/advanced-many-to-many.md#2025-04-09_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst Player = sequelize.define('Player', { username: DataTypes.STRING });\nconst Team = sequelize.define('Team', { name: DataTypes.STRING });\nconst Game = sequelize.define('Game', { name: DataTypes.STRING });\n```\n\n----------------------------------------\n\nTITLE: Using findAndCountAll with Where Clauses in Includes\nDESCRIPTION: Shows how adding a 'where' clause to an include automatically makes it required, affecting which records are counted in the findAndCountAll results.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/eager-loading.md#2025-04-09_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nUser.findAndCountAll({\n  include: [{ model: Profile, where: { active: true } }],\n  limit: 3,\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Content Responsibility Disclaimer in German\nDESCRIPTION: This snippet contains a disclaimer in German stating that the author takes no responsibility for outgoing links and directs users to contact the operators of those links in case of issues.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/legal.md#2025-04-09_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nIch übernehme keine Haftung für ausgehende Links.\nDaher musst du dich bei Problemen an deren Betreiber wenden!\n```\n\n----------------------------------------\n\nTITLE: MySQL2 Connection Class Implementation\nDESCRIPTION: Shows how the MySQL2 library creates connections and sets up timeout handlers, which can lead to ETIMEDOUT errors if connections take too long to establish.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/aws-lambda.md#2025-04-09_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nclass Connection extends EventEmitter {\n  constructor(opts) {\n    // (...)\n\n    // create Socket\n    this.stream = /* (...) */;\n\n    // when data is received, clear timeout\n    this.stream.on('data', data => {\n      if (this.connectTimeout) {\n        Timers.clearTimeout(this.connectTimeout);\n        this.connectTimeout = null;\n      }\n      this.packetParser.execute(data);\n    });\n\n    // (...)\n\n    // when handshake is completed, emit the 'connect' event\n    handshakeCommand.on('end', () => {\n      this.emit('connect', handshakeCommand.handshake);\n    });\n\n    // set a timeout to trigger if no data is received on the socket\n    if (this.config.connectTimeout) {\n      const timeoutHandler = this._handleTimeoutError.bind(this);\n      this.connectTimeout = Timers.setTimeout(\n        timeoutHandler,\n        this.config.connectTimeout\n      );\n    }\n  }\n\n  // (...)\n\n  _handleTimeoutError() {\n    if (this.connectTimeout) {\n      Timers.clearTimeout(this.connectTimeout);\n      this.connectTimeout = null;\n    }\n    this.stream.destroy && this.stream.destroy();\n    const err = new Error('connect ETIMEDOUT');\n    err.errorno = 'ETIMEDOUT';\n    err.code = 'ETIMEDOUT';\n    err.syscall = 'connect';\n\n    // this will emit the 'error' event\n    this._handleNetworkError(err);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Attribute Handling\nDESCRIPTION: Demonstrates handling of dotted attributes with and without the nest option.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/raw-queries.mdx#2025-04-09_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { QueryTypes } from '@sequelize/core';\nconst records = await sequelize.query('select 1 as `foo.bar.baz`', {\n  type: QueryTypes.SELECT,\n});\nconsole.log(JSON.stringify(records[0], null, 2));\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"foo.bar.baz\": 1\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { QueryTypes } from '@sequelize/core';\nconst records = await sequelize.query('select 1 as `foo.bar.baz`', {\n  nest: true,\n  type: QueryTypes.SELECT,\n});\nconsole.log(JSON.stringify(records[0], null, 2));\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"foo\": {\n    \"bar\": {\n      \"baz\": 1\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Author Information for Sequelize Library\nDESCRIPTION: This snippet provides contact details for the main author of Sequelize, including name, address, email (obfuscated), and phone number (partially obfuscated).\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/legal.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nMain author:\n\nSascha Depold\nUhlandstr. 160\n10719 Berlin\nsascha [at] depold [dot] com\n[plus] 49 152 [slash] 03878582\n```\n\n----------------------------------------\n\nTITLE: Truncating a Table in Sequelize\nDESCRIPTION: Shows how to quickly remove all rows from a specific table using the truncate() method on a model, which is faster than deleting rows individually.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/delete.md#2025-04-09_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// Truncate the table\nawait User.truncate();\n```\n\n----------------------------------------\n\nTITLE: Obtaining the Query Interface in Sequelize\nDESCRIPTION: This snippet shows how to obtain the QueryInterface instance from a Sequelize instance. It requires the Sequelize library and a configured Sequelize instance.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/query-interface.md#2025-04-09_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { Sequelize, DataTypes } = require('sequelize');\nconst sequelize = new Sequelize(/* ... */);\nconst queryInterface = sequelize.getQueryInterface();\n```\n\n----------------------------------------\n\nTITLE: Handling Hook Validation Errors in Sequelize\nDESCRIPTION: This code demonstrates how errors thrown in hooks are handled with try/catch blocks. The example shows a creation attempt that fails due to a validation rule in a beforeCreate hook.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/hooks.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n  await User.create({ username: 'Not a Boss', accessLevel: 20 });\n} catch (error) {\n  console.log(error); // You can't grant this user an access level above 10!\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Oracle Database with URL Format in Sequelize\nDESCRIPTION: Example of creating a Sequelize instance to connect to an Oracle database using the connection URL format instead of individual parameters.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/dialect-specific-things.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst sequelize = new Sequelize('oracle://user:pass@hostname:port/servicename');\n```\n\n----------------------------------------\n\nTITLE: Simplified Node.js Event Loop Implementation\nDESCRIPTION: This code snippet provides a simplified JavaScript pseudo-implementation of the Node.js event loop. It illustrates how Node.js executes scripts, handles asynchronous operations, and manages the event loop phases.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/aws-lambda.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst process = require('process');\n\nlet refs = 0;\n\nconst timersHeap = /* (...) */;\n\nconst immediates = /* (...) */;\n\nconst nextTickCallbacks = [];\n\nconst promiseCallbacksHeap = /* ... */;\n\nfunction execTicksAndPromises() {\n  while (nextTickCallbacks.length || promiseCallbacksHeap.size()) {\n    while (nextTickCallbacks.length) {\n      const callback = nextTickCallbacks.shift();\n      callback();\n    }\n\n    while (promiseCallbacksHeap.size()) {\n      const callback = promiseCallbacksHeap.pop();\n      callback();\n    }\n  }\n}\n\ntry {\n  require('./index');\n  execTicksAndPromises();\n\n  do {\n    getElapsedTimerCallbacks(timersHeap).forEach(callback => {\n      callback();\n      execTicksAndPromises();\n    });\n\n    getPendingCallbacks().forEach(callback => {\n      callback();\n      execTicksAndPromises();\n    })\n\n    const maxWait = computeWhenNextTimerElapses(timersHeap);\n    pollForEventsFromKernelOrThreadPool(maxWait, immediates).forEach(callback => {\n      callback();\n      execTicksAndPromises();\n    });\n\n    getImmediateCallbacks(immediates).forEach(callback => {\n      callback();\n      execTicksAndPromises();\n    });\n\n    getCloseCallbacks().forEach(callback => {\n      callback();\n      execTicksAndPromises();\n    });\n\n    if (refs === 0) {\n      process.emit('beforeExit');\n    }\n  } while (refs > 0);\n} catch (err) {\n  if (!process.listenerCount('uncaughtException')) {\n    console.error(err.stack);\n    process.exit(1);\n  } else {\n    process.emit('uncaughtException');\n    process.exit();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing MobileAds Component in React\nDESCRIPTION: Import statement for a MobileAds component from the site's components directory, followed by the component being used in the page.\nSOURCE: https://github.com/sequelize/website/blob/main/src/pages/releases.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { MobileAds } from '@site/src/components/mobile-ads';\n\n<MobileAds />\n```\n\n----------------------------------------\n\nTITLE: Implementing a Virtual Field for Full Name in Sequelize\nDESCRIPTION: This example demonstrates how to create a virtual field in Sequelize. It defines a 'fullName' virtual attribute that combines 'firstName' and 'lastName'.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/getters-setters-virtuals.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst User = sequelize.define('user', {\n  firstName: DataTypes.TEXT,\n  lastName: DataTypes.TEXT,\n  fullName: {\n    type: DataTypes.VIRTUAL,\n    get() {\n      return `${this.firstName} ${this.lastName}`;\n    },\n    set(value) {\n      throw new Error('Do not try to set the `fullName` value!');\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Managed Transactions in Sequelize\nDESCRIPTION: This code demonstrates the managed transaction approach in Sequelize, where commit and rollback operations are handled automatically. The transaction creates a user and sets a relationship, with Sequelize managing transaction state based on error handling.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/transactions.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n  const result = await sequelize.transaction(async t => {\n    const user = await User.create(\n      {\n        firstName: 'Abraham',\n        lastName: 'Lincoln',\n      },\n      { transaction: t },\n    );\n\n    await user.setShooter(\n      {\n        firstName: 'John',\n        lastName: 'Boothe',\n      },\n      { transaction: t },\n    );\n\n    return user;\n  });\n\n  // If the execution reaches this line, the transaction has been committed successfully\n  // `result` is whatever was returned from the transaction callback (the `user`, in this case)\n} catch (error) {\n  // If the execution reaches this line, an error occurred.\n  // The transaction has already been rolled back automatically by Sequelize!\n}\n```\n\n----------------------------------------\n\nTITLE: Shorthand Syntax for IN Operator in Sequelize\nDESCRIPTION: Example showing the shorthand syntax for the IN operator in Sequelize, where passing an array directly to where implicitly uses the Op.in operator for filtering.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-querying-basics.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nPost.findAll({\n  where: {\n    id: [1, 2, 3], // Same as using `id: { [Op.in]: [1,2,3] }`\n  },\n});\n// SELECT ... FROM \"posts\" AS \"post\" WHERE \"post\".\"id\" IN (1, 2, 3);\n```\n\n----------------------------------------\n\nTITLE: Renaming Attributes in Sequelize Queries\nDESCRIPTION: Example showing how to rename attributes in the query results using a nested array within the attributes option, similar to using AS in SQL queries.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-querying-basics.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nModel.findAll({\n  attributes: ['foo', ['bar', 'baz'], 'qux'],\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT foo, bar AS baz, qux FROM ...\n```\n\n----------------------------------------\n\nTITLE: Foreign Key Migration\nDESCRIPTION: Migration example showing how to create a table with a foreign key reference.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/cli.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst { DataTypes } = require('@sequelize/core');\n\nmodule.exports = {\n  up: queryInterface => {\n    return queryInterface.createTable('Person', {\n      name: DataTypes.STRING,\n      isBetaMember: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n        allowNull: false,\n      },\n      userId: {\n        type: DataTypes.INTEGER,\n        references: {\n          model: {\n            tableName: 'users',\n            schema: 'schema',\n          },\n          key: 'id',\n        },\n        allowNull: false,\n      },\n    });\n  },\n  down: (queryInterface, Sequelize) => {\n    return queryInterface.dropTable('Person');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Sequelize Query Method Implementation\nDESCRIPTION: Illustrates how Sequelize executes SQL queries by obtaining a connection from the pool, executing the query, and releasing the connection back to the pool.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/aws-lambda.md#2025-04-09_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nclass Sequelize {\n  // (...)\n\n  query(sql, options) {\n    // (...)\n\n    const connection = await this.connectionManager.getConnection(options);\n    const query = new this.dialect.Query(connection, this, options);\n\n    try {\n      return await query.run(sql, bindParameters);\n    } finally {\n      await this.connectionManager.releaseConnection(connection);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Static Content for Sequelize Documentation\nDESCRIPTION: This command generates static content into the 'build' directory, which can be served using any static contents hosting service.\nSOURCE: https://github.com/sequelize/website/blob/main/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Scopes with Includes (JavaScript)\nDESCRIPTION: Shows how to define scopes with complex include structures, demonstrating the power of Sequelize's scope merging capabilities.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/scopes.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nFoo.addScope('includeEverything', {\n  include: {\n    model: Bar,\n    include: [\n      {\n        model: Baz,\n        include: Qux,\n      },\n    ],\n  },\n});\n\nFoo.addScope('limitedBars', {\n  include: [\n    {\n      model: Bar,\n      limit: 2,\n    },\n  ],\n});\n\nFoo.addScope('limitedBazs', {\n  include: [\n    {\n      model: Bar,\n      include: [\n        {\n          model: Baz,\n          limit: 2,\n        },\n      ],\n    },\n  ],\n});\n\nFoo.addScope('excludeBazName', {\n  include: [\n    {\n      model: Bar,\n      include: [\n        {\n          model: Baz,\n          attributes: {\n            exclude: ['name'],\n          },\n        },\n      ],\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Counting Records with Sequelize count() Method\nDESCRIPTION: Shows how to use the count() utility method to count database records. The method can be used with or without a where clause to filter the records counted.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-querying-basics.md#2025-04-09_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(`There are ${await Project.count()} projects`);\n\nconst amount = await Project.count({\n  where: {\n    id: {\n      [Op.gt]: 25,\n    },\n  },\n});\nconsole.log(`There are ${amount} projects with an id greater than 25`);\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Attributes in Sequelize Queries\nDESCRIPTION: Example of specifying which attributes (columns) to select in a Sequelize query using the attributes option, equivalent to selecting specific columns in SQL.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-querying-basics.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nModel.findAll({\n  attributes: ['foo', 'bar'],\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT foo, bar FROM ...\n```\n\n----------------------------------------\n\nTITLE: Visualizing Many-to-Many Relationship with Mermaid\nDESCRIPTION: Mermaid diagram illustrating a Many-to-Many relationship between people and toots tables, where people can like multiple toots and toots can be liked by multiple people.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/basics.md#2025-04-09_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n  people }o--o{ toots : likedToots\n```\n\n----------------------------------------\n\nTITLE: Simplified Node.js Event Loop Implementation\nDESCRIPTION: A pseudo-implementation of the Node.js event loop in JavaScript to illustrate how Node.js executes code, handles asynchronous operations, and manages the reference counter. This helps explain why connection management is important in AWS Lambda environments.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/aws-lambda.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// see: https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/\n// see: https://www.youtube.com/watch?v=P9csgxBgaZ8\n// see: https://www.youtube.com/watch?v=PNa9OMajw9w\nconst process = require('process');\n\n/*\n * counter of pending events\n *\n * reference counter is increased for every:\n *\n * 1. scheduled timer: `setTimeout()`, `setInterval()`, etc.\n * 2. scheduled immediate: `setImmediate()`.\n * 3. syscall of non-blocking IO: `require('net').Server.listen()`, etc.\n * 4. scheduled task to the thread pool: `require('fs').WriteStream.write()`, etc.\n *\n * reference counter is decreased for every:\n *\n * 1. elapsed timer\n * 2. executed immediate\n * 3. completed non-blocking IO\n * 4. completed thread pool task\n *\n * references can be explicitly decreased by invoking `.unref()` on some\n * objects like: `require('net').Socket.unref()`\n */\nlet refs = 0;\n\n/*\n * a heap of timers, sorted by next ocurrence\n *\n * whenever `setTimeout()` or `setInterval()` is invoked, a timer gets added here\n */\nconst timersHeap = /* (...) */;\n\n/*\n * a FIFO queue of immediates\n *\n * whenever `setImmediate()` is invoked, it gets added here\n */\nconst immediates = /* (...) */;\n\n/*\n * a FIFO queue of next tick callbacks\n *\n * whenever `require('process').nextTick()` is invoked, the callback gets added here\n */\nconst nextTickCallbacks = [];\n\n/*\n * a heap of Promise-related callbacks, sorted by promise constructors callbacks first,\n * and then resolved/rejected callbacks\n *\n * whenever a new Promise instance is created via `new Promise` or a promise resolves/rejects\n * the appropriate callback (if any) gets added here\n */\nconst promiseCallbacksHeap = /* ... */;\n\nfunction execTicksAndPromises() {\n  while (nextTickCallbacks.length || promiseCallbacksHeap.size()) {\n    // execute all callbacks scheduled with `process.nextTick()`\n    while (nextTickCallbacks.length) {\n      const callback = nextTickCallbacks.shift();\n      callback();\n    }\n\n    // execute all promise-related callbacks\n    while (promiseCallbacksHeap.size()) {\n      const callback = promiseCallbacksHeap.pop();\n      callback();\n    }\n  }\n}\n\ntry {\n  // execute index.js\n  require('./index');\n  execTicksAndPromises();\n\n  do {\n    // timers phase: executes all elapsed timers\n    getElapsedTimerCallbacks(timersHeap).forEach(callback => {\n      callback();\n      execTicksAndPromises();\n    });\n\n    // pending callbacks phase: executes some system operations (like `TCP errors`) that are not\n    //                          executed in the poll phase\n    getPendingCallbacks().forEach(callback => {\n      callback();\n      execTicksAndPromises();\n    })\n\n    // poll phase: gets completed non-blocking I/O events or thread pool tasks and invokes the\n    //             corresponding callbacks; if there are none and there's no pending immediates,\n    //             it blocks waiting for events/completed tasks for a maximum of `maxWait`\n    const maxWait = computeWhenNextTimerElapses(timersHeap);\n    pollForEventsFromKernelOrThreadPool(maxWait, immediates).forEach(callback => {\n      callback();\n      execTicksAndPromises();\n    });\n\n    // check phase: execute available immediates; if an immediate callback invokes `setImmediate()`\n    //              it will be invoked on the next event loop iteration\n    getImmediateCallbacks(immediates).forEach(callback => {\n      callback();\n      execTicksAndPromises();\n    });\n\n    // close callbacks phase: execute special `.on('close')` callbacks\n    getCloseCallbacks().forEach(callback => {\n      callback();\n      execTicksAndPromises();\n    });\n\n    if (refs === 0) {\n      // listeners of this event may execute code that increments `refs`\n      process.emit('beforeExit');\n    }\n  } while (refs > 0);\n} catch (err) {\n  if (!process.listenerCount('uncaughtException')) {\n    // default behavior: print stack and exit with status code 1\n    console.error(err.stack);\n    process.exit(1);\n  } else {\n    // there are listeners: emit the event and exit using `process.exitCode || 0`\n    process.emit('uncaughtException');\n    process.exit();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Column using Query Interface in Sequelize\nDESCRIPTION: This snippet shows how to remove a column 'petName' from the 'Person' table using the Query Interface. It includes an optional query options parameter.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/query-interface.md#2025-04-09_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nqueryInterface.removeColumn('Person', 'petName', {\n  /* query options */\n});\n```\n\nLANGUAGE: SQL\nCODE:\n```\nALTER TABLE \"public\".\"Person\" DROP COLUMN \"petName\";\n```\n\n----------------------------------------\n\nTITLE: Deleting a Model Instance\nDESCRIPTION: Demonstrates how to delete a model instance from the database using the destroy() method.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-instances.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst jane = await User.create({ name: 'Jane' });\nconsole.log(jane.name); // \"Jane\"\nawait jane.destroy();\n// Now this entry was removed from the database\n```\n\n----------------------------------------\n\nTITLE: Restricting Fields in Model.create() with Sequelize\nDESCRIPTION: Example showing how to restrict which attributes can be set during record creation using the fields option, useful for security when creating database entries from user-provided data.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-querying-basics.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = await User.create(\n  {\n    username: 'alice123',\n    isAdmin: true,\n  },\n  { fields: ['username'] },\n);\n// let's assume the default of isAdmin is false\nconsole.log(user.username); // 'alice123'\nconsole.log(user.isAdmin); // false\n```\n\n----------------------------------------\n\nTITLE: Creating Associated Models in Sequelize\nDESCRIPTION: Demonstrates how to create an associated model (Bar) with a foreign key reference to another model (Foo) using standard model creation methods.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/assocs.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nBar.create({\n  name: 'My Bar',\n  fooId: 5,\n});\n```\n\n----------------------------------------\n\nTITLE: Special Range Cases in Sequelize\nDESCRIPTION: Shows how to handle special range cases including empty ranges, unbounded ranges, and infinite ranges in PostgreSQL.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/other-data-types.mdx#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nTimeline.create({ range: [] }); // empty range\nTimeline.create({ range: [null, null] }); // unbounded range\nTimeline.create({ range: [null, new Date(Date.UTC(2016, 0, 1))] });\nTimeline.create({ range: [-Infinity, new Date(Date.UTC(2016, 0, 1))] });\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Field Names in Sequelize Models\nDESCRIPTION: Demonstrates how to map model attributes to differently named database columns using the field property.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/legacy.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyModel extends Model {}\nMyModel.init(\n  {\n    userId: {\n      type: DataTypes.INTEGER,\n      field: 'user_id',\n    },\n  },\n  { sequelize },\n);\n```\n\n----------------------------------------\n\nTITLE: Incrementing and Decrementing Integer Values\nDESCRIPTION: Shows how to increment or decrement integer values of a model instance using the increment() and decrement() methods, which avoid concurrency issues.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-instances.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst jane = await User.create({ name: 'Jane', age: 100 });\nconst incrementResult = await jane.increment('age', { by: 2 });\n// Note: to increment by 1 you can omit the `by` option and just do `user.increment('age')`\n\n// In PostgreSQL, `incrementResult` will be the updated user, unless the option\n// `{ returning: false }` was set (and then it will be undefined).\n\n// In other dialects, `incrementResult` will be undefined. If you need the updated instance, you will have to call `user.reload()`.\n\nconst jane = await User.create({ name: 'Jane', age: 100, cash: 5000 });\nawait jane.increment({\n  age: 2,\n  cash: 100,\n});\n\n// If the values are incremented by the same amount, you can use this other syntax as well:\nawait jane.increment(['age', 'cash'], { by: 2 });\n```\n\n----------------------------------------\n\nTITLE: Saving Specific Fields of a Model Instance\nDESCRIPTION: Demonstrates how to save only specific fields of a model instance by passing an array of field names to the save() method.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-instances.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst jane = await User.create({ name: 'Jane' });\nconsole.log(jane.name); // \"Jane\"\nconsole.log(jane.favoriteColor); // \"green\"\njane.name = 'Jane II';\njane.favoriteColor = 'blue';\nawait jane.save({ fields: ['name'] });\nconsole.log(jane.name); // \"Jane II\"\nconsole.log(jane.favoriteColor); // \"blue\"\n// The above printed blue because the local object has it set to blue, but\n// in the database it is still \"green\":\nawait jane.reload();\nconsole.log(jane.name); // \"Jane II\"\nconsole.log(jane.favoriteColor); // \"green\"\n```\n\n----------------------------------------\n\nTITLE: Static Model Validation in Sequelize\nDESCRIPTION: Shows how to implement a static model validator that receives the model instance as a parameter for coordinate validation.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/validations-and-constraints.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass Place extends Model {\n  @Attribute(DataTypes.INTEGER)\n  declare latitude: number | null;\n\n  @Attribute(DataTypes.INTEGER)\n  declare longitude: number | null;\n\n  @ModelValidator\n  static validateCoords(place: Place) {\n    if ((place.latitude === null) !== (place.longitude === null)) {\n      throw new Error('Either both latitude and longitude, or neither!');\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Range Types in PostgreSQL with Sequelize\nDESCRIPTION: Examples of defining and using range data types in PostgreSQL, including integer, bigint, date, and decimal ranges. Shows different ways to specify range bounds and inclusion/exclusion.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/other-data-types.mdx#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nDataTypes.RANGE(DataTypes.INTEGER); // int4range\nDataTypes.RANGE(DataTypes.BIGINT); // int8range\nDataTypes.RANGE(DataTypes.DATE); // tstzrange\nDataTypes.RANGE(DataTypes.DATEONLY); // daterange\nDataTypes.RANGE(DataTypes.DECIMAL); // numrange\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Table Names in Sequelize Models\nDESCRIPTION: Shows how to specify a custom table name for a Sequelize model using the tableName option in model initialization.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/legacy.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass User extends Model {}\nUser.init(\n  {\n    // ...\n  },\n  {\n    modelName: 'user',\n    tableName: 'users',\n    sequelize,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Sequelize Model by extending Model class\nDESCRIPTION: Shows how to create a User model by extending the Sequelize Model class and using Model.init(). This approach provides more object-oriented structure to model definition.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-basics.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Sequelize, DataTypes, Model } = require('sequelize');\nconst sequelize = new Sequelize('sqlite::memory:');\n\nclass User extends Model {}\n\nUser.init(\n  {\n    // Model attributes are defined here\n    firstName: {\n      type: DataTypes.STRING,\n      allowNull: false,\n    },\n    lastName: {\n      type: DataTypes.STRING,\n      // allowNull defaults to true\n    },\n  },\n  {\n    // Other model options go here\n    sequelize, // We need to pass the connection instance\n    modelName: 'User', // We need to choose the model name\n  },\n);\n\n// the defined model is the class itself\nconsole.log(User === sequelize.models.User); // true\n```\n\n----------------------------------------\n\nTITLE: Creating a Model Instance using build() and save()\nDESCRIPTION: Demonstrates how to create a model instance using the build() method and then persist it to the database using save(). This two-step process allows for instance modification before saving.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-instances.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst jane = User.build({ name: 'Jane' });\nconsole.log(jane instanceof User); // true\nconsole.log(jane.name); // \"Jane\"\n\nawait jane.save();\nconsole.log('Jane was saved to the database!');\n```\n\n----------------------------------------\n\nTITLE: Using Implicit AND with Array of Objects in Sequelize\nDESCRIPTION: Demonstrates how an array of condition objects in the where clause are implicitly joined with AND operator in Sequelize.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/operators.mdx#2025-04-09_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nPost.findAll({\n  where: [{ authorId: 12 }, { status: 'active' }],\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"posts\" WHERE \"authorId\" = 12 AND \"status\" = 'active';\n```\n\n----------------------------------------\n\nTITLE: Logging Model Instances\nDESCRIPTION: Demonstrates the proper way to log model instances using toJSON() or JSON.stringify() to avoid clutter from Sequelize-specific properties.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-instances.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst jane = await User.create({ name: 'Jane' });\n// console.log(jane); // Don't do this\nconsole.log(jane.toJSON()); // This is good!\nconsole.log(JSON.stringify(jane, null, 4)); // This is also good!\n```\n\n----------------------------------------\n\nTITLE: Using Individual Hooks with Bulk Operations in Sequelize\nDESCRIPTION: Demonstrates how to use individual hooks with bulk operations like destroy and update by setting the individualHooks option to true. This can impact performance for large datasets.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/hooks.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nawait Model.destroy({\n  where: { accessLevel: 0 },\n  individualHooks: true,\n});\n// This will select all records that are about to be deleted and emit `beforeDestroy` and `afterDestroy` on each instance.\n\nawait Model.update(\n  { username: 'Tony' },\n  {\n    where: { accessLevel: 0 },\n    individualHooks: true,\n  },\n);\n// This will select all records that are about to be updated and emit `beforeUpdate` and `afterUpdate` on each instance.\n```\n\n----------------------------------------\n\nTITLE: Invalid Public Class Fields Usage in Sequelize Model\nDESCRIPTION: Demonstrates incorrect usage of public class fields in a Sequelize model that can cause shadowing of model attributes.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-basics.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Invalid\nclass User extends Model {\n  id; // this field will shadow sequelize's getter & setter. It should be removed.\n  otherPublicField; // this field does not shadow anything. It is fine.\n}\n\nUser.init(\n  {\n    id: {\n      type: DataTypes.INTEGER,\n      autoIncrement: true,\n      primaryKey: true,\n    },\n  },\n  { sequelize },\n);\n\nconst user = new User({ id: 1 });\nuser.id; // undefined\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Getter in Sequelize\nDESCRIPTION: This example shows how to use a custom getter in Sequelize. It builds a User instance and demonstrates the difference between accessing the raw value and the getter-modified value.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/getters-setters-virtuals.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = User.build({ username: 'SuperUser123' });\nconsole.log(user.username); // 'SUPERUSER123'\nconsole.log(user.getDataValue('username')); // 'SuperUser123'\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations\nDESCRIPTION: Command to execute pending migrations and update the database schema.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/migrations.md#2025-04-09_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nnpx sequelize-cli db:migrate\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Setter in Sequelize\nDESCRIPTION: This example demonstrates how to use a custom setter in Sequelize. It builds a User instance with a password and shows how the setter automatically hashes the password.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/getters-setters-virtuals.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = User.build({\n  username: 'someone',\n  password: 'NotSo§tr0ngP4$SW0RD!',\n});\nconsole.log(user.password); // '7cfc84b8ea898bb72462e78b4643cfccd77e9f05678ec2ce78754147ba947acc'\nconsole.log(user.getDataValue('password')); // '7cfc84b8ea898bb72462e78b4643cfccd77e9f05678ec2ce78754147ba947acc'\n```\n\n----------------------------------------\n\nTITLE: Successful Creation After Hook Validation\nDESCRIPTION: This example demonstrates a successful instance creation that passes the validation implemented in a beforeCreate hook. The user is created because the username meets the criteria for having a high access level.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/hooks.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = await User.create({ username: 'Boss', accessLevel: 20 });\nconsole.log(user); // user object with username 'Boss' and accessLevel of 20\n```\n\n----------------------------------------\n\nTITLE: Merging Complex Scopes in Sequelize Query (JavaScript)\nDESCRIPTION: Demonstrates how to merge multiple complex scopes with includes in a single Sequelize query, showcasing the deep merging capabilities.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/scopes.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait Foo.findAll({\n  include: {\n    model: Bar,\n    limit: 2,\n    include: [\n      {\n        model: Baz,\n        limit: 2,\n        attributes: {\n          exclude: ['name'],\n        },\n        include: Qux,\n      },\n    ],\n  },\n});\n\n// The above is equivalent to:\nawait Foo.scope(['includeEverything', 'limitedBars', 'limitedBazs', 'excludeBazName']).findAll();\n```\n\n----------------------------------------\n\nTITLE: Controlling Join Table Attributes in Sequelize BelongsToMany Association (JavaScript)\nDESCRIPTION: Demonstrates how to control the attributes returned from the join table in a belongsToMany association. It shows two equivalent methods: one using eager loading and another using the getter method with options.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/assocs.md#2025-04-09_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst foo = Foo.findByPk(id, {\n  include: [\n    {\n      model: Bar,\n      through: { attributes: [] },\n    },\n  ],\n});\nconsole.log(foo.bars);\n\nconst foo = Foo.findByPk(id);\nconsole.log(foo.getBars({ joinTableAttributes: [] }));\n```\n\n----------------------------------------\n\nTITLE: Using Association Getter Method for BelongsTo in TypeScript\nDESCRIPTION: Example showing how to use the getter method added by BelongsTo association to retrieve the associated model.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/belongs-to.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BelongsToGetAssociationMixin } from '@sequelize/core';\nclass Comment extends Model {\n  @BelongsTo(() => Post, 'postId')\n  declare post?: NonAttribute<Post>;\n\n  // highlight-start\n  declare getPost: BelongsToGetAssociationMixin<Post>;\n  // highlight-end\n}\n\nconst comment = await Comment.findByPk(1);\nconst post = await comment.getPost();\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-One Association for Ship and Captain Models\nDESCRIPTION: Sets up a one-to-one relationship between Ship and Captain models, allowing null values for foreign keys. This setup is used for subsequent querying examples.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/assocs.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst Ship = sequelize.define(\n  'ship',\n  {\n    name: DataTypes.TEXT,\n    crewCapacity: DataTypes.INTEGER,\n    amountOfSails: DataTypes.INTEGER,\n  },\n  { timestamps: false },\n);\nconst Captain = sequelize.define(\n  'captain',\n  {\n    name: DataTypes.TEXT,\n    skillLevel: {\n      type: DataTypes.INTEGER,\n      validate: { min: 1, max: 10 },\n    },\n  },\n  { timestamps: false },\n);\nCaptain.hasOne(Ship);\nShip.belongsTo(Captain);\n```\n\n----------------------------------------\n\nTITLE: Implementing Permanent Hooks with sequelize.addHook\nDESCRIPTION: This code demonstrates how to add permanent hooks that run for all models, regardless of whether they define their own hooks. These global hooks are always executed after any model-specific hooks.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/hooks.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nsequelize.addHook('beforeCreate', () => {\n  // Do stuff\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Sequelize Models for Posts and Reactions\nDESCRIPTION: This snippet defines two Sequelize models, Post and Reaction, and establishes a One-to-Many relationship between them. Timestamps are disabled for simplicity in subsequent examples.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/sub-queries.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Post = sequelize.define(\n  'post',\n  {\n    content: DataTypes.STRING,\n  },\n  { timestamps: false },\n);\n\nconst Reaction = sequelize.define(\n  'reaction',\n  {\n    type: DataTypes.STRING,\n  },\n  { timestamps: false },\n);\n\nPost.hasMany(Reaction);\nReaction.belongsTo(Post);\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Associations Between Same Models in Sequelize\nDESCRIPTION: This snippet demonstrates how to define multiple associations between the same models using aliases in Sequelize. It shows how to create two different relationships between Team and Game models using the aliases 'HomeTeam' and 'AwayTeam'.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/assocs.md#2025-04-09_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nTeam.hasOne(Game, { as: 'HomeTeam', foreignKey: 'homeTeamId' });\nTeam.hasOne(Game, { as: 'AwayTeam', foreignKey: 'awayTeamId' });\nGame.belongsTo(Team);\n```\n\n----------------------------------------\n\nTITLE: Registering Instance Sequelize Hooks using addListener Method\nDESCRIPTION: Demonstrates how to register a 'beforeFind' hook on a Sequelize instance that will be triggered whenever findAll is called on any model.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/hooks.mdx#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Sequelize } from '@sequelize/core';\n\nconst sequelize = new Sequelize(/* options */);\n\n// This will be called whenever findAll is called on any model.\nsequelize.hooks.addListener('beforeFind', () => {\n  console.log('findAll has been called a model');\n});\n```\n\n----------------------------------------\n\nTITLE: One-To-Many Relationship SQL Generation\nDESCRIPTION: Shows the SQL generated by Sequelize for a One-To-Many relationship between Team and Player models.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/assocs.md#2025-04-09_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS \"Teams\" (\n  /* ... */\n);\nCREATE TABLE IF NOT EXISTS \"Players\" (\n  /* ... */\n  \"TeamId\" INTEGER REFERENCES \"Teams\" (\"id\") ON DELETE SET NULL ON UPDATE CASCADE,\n  /* ... */\n);\n```\n\n----------------------------------------\n\nTITLE: Removing Hooks in Sequelize\nDESCRIPTION: This example shows how to remove named hooks from a Sequelize model. Only hooks with a specified name parameter can be removed using the removeHook method.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/hooks.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass Book extends Model {}\nBook.init(\n  {\n    title: DataTypes.STRING,\n  },\n  { sequelize },\n);\n\nBook.addHook('afterCreate', 'notifyUsers', (book, options) => {\n  // ...\n});\n\nBook.removeHook('afterCreate', 'notifyUsers');\n```\n\n----------------------------------------\n\nTITLE: JSONB Querying in PostgreSQL\nDESCRIPTION: Demonstrates different ways to query JSONB data in PostgreSQL, including nested objects, nested keys, and containment queries.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/other-data-types.mdx#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nawait Foo.findOne({\n  where: {\n    meta: {\n      video: {\n        url: {\n          [Op.ne]: null,\n        },\n      },\n    },\n  },\n});\n\nawait Foo.findOne({\n  where: {\n    'meta.audio.length': {\n      [Op.gt]: 20,\n    },\n  },\n});\n\nawait Foo.findOne({\n  where: {\n    meta: {\n      [Op.contains]: {\n        site: {\n          url: 'https://google.com',\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Special Methods in Sequelize HasMany Association (JavaScript)\nDESCRIPTION: Demonstrates the usage of special methods added to instances when a hasMany association is defined in Sequelize. It covers methods for getting, counting, checking, adding, removing, and creating associated objects.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/assocs.md#2025-04-09_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst foo = await Foo.create({ name: 'the-foo' });\nconst bar1 = await Bar.create({ name: 'some-bar' });\nconst bar2 = await Bar.create({ name: 'another-bar' });\nconsole.log(await foo.getBars()); // []\nconsole.log(await foo.countBars()); // 0\nconsole.log(await foo.hasBar(bar1)); // false\nawait foo.addBars([bar1, bar2]);\nconsole.log(await foo.countBars()); // 2\nawait foo.addBar(bar1);\nconsole.log(await foo.countBars()); // 2\nconsole.log(await foo.hasBar(bar1)); // true\nawait foo.removeBar(bar2);\nconsole.log(await foo.countBars()); // 1\nawait foo.createBar({ name: 'yet-another-bar' });\nconsole.log(await foo.countBars()); // 2\nawait foo.setBars([]); // Un-associate all previously associated bars\nconsole.log(await foo.countBars()); // 0\n```\n\n----------------------------------------\n\nTITLE: Multiple Eager Loading in Sequelize\nDESCRIPTION: Shows how to load multiple associated models at once using the 'include' option with an array of model configurations. Demonstrates both the full object syntax and shorthand syntax for includes.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/eager-loading.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nFoo.findAll({\n  include: [\n    {\n      model: Bar,\n      required: true\n    },\n    {\n      model: Baz,\n      where: /* ... */\n    },\n    Qux // Shorthand syntax for { model: Qux } also works here\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Using Custom Association References with Sequelize Models\nDESCRIPTION: This snippet shows how to use custom association references to create and query relationships. It demonstrates creating a Captain with a unique name and associating a Ship with that Captain using the name field instead of ID.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/assocs.md#2025-04-09_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nawait Captain.create({ name: 'Jack Sparrow' });\nconst ship = await Ship.create({\n  name: 'Black Pearl',\n  captainName: 'Jack Sparrow',\n});\nconsole.log((await ship.getCaptain()).name); // \"Jack Sparrow\"\n```\n\n----------------------------------------\n\nTITLE: Setting Database Engine in MySQL/MariaDB with Sequelize\nDESCRIPTION: Demonstrates how to configure the database engine for a model, specifically changing from the default InnoDB to MyISAM.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/dialect-specific-things.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst Person = sequelize.define(\n  'person',\n  {\n    /* attributes */\n  },\n  {\n    engine: 'MYISAM',\n  },\n);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst sequelize = new Sequelize(db, user, pw, {\n  define: { engine: 'MYISAM' },\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Dialect-Specific DataType Support Table in Markdown\nDESCRIPTION: This markdown snippet presents a table showing the support for miscellaneous data types across different database dialects when using Sequelize. It includes GEOMETRY, GEOGRAPHY, and HSTORE types, with links to relevant documentation.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/other-data-types.mdx#2025-04-09_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| Sequelize DataType                                                            | PostgreSQL                                                                | [MariaDB](https://mariadb.com/kb/en/geometry-types/) | [MySQL](https://dev.mysql.com/doc/refman/8.0/en/spatial-type-overview.html) | MSSQL | SQLite | Snowflake | db2 | ibmi | Oracle Database |\n| ----------------------------------------------------------------------------- | ------------------------------------------------------------------------- | ---------------------------------------------------- | --------------------------------------------------------------------------- | ----- | ------ | --------- | --- | ---- | --------------- |\n| [`GEOMETRY`](https://sequelize.org/api/v6/class/src/data-types.js~geometry)   | [`GEOMETRY`](https://postgis.net/workshops/postgis-intro/geometries.html) | `GEOMETRY`                                           | `GEOMETRY`                                                                  | ❌    | ❌     | ❌        | ❌  | ❌   | ❌              |\n| `GEOMETRY('POINT')`                                                           | `GEOMETRY(POINT)`                                                         | `POINT`                                              | `POINT`                                                                     | ❌    | ❌     | ❌        | ❌  | ❌   | ❌              |\n| `GEOMETRY('POINT', 4326)`                                                     | `GEOMETRY(POINT,4326)`                                                    | ❌                                                   | ❌                                                                          | ❌    | ❌     | ❌        | ❌  | ❌   | ❌              |\n| `GEOMETRY('POLYGON')`                                                         | `GEOMETRY(POLYGON)`                                                       | `POLYGON`                                            | `POLYGON`                                                                   | ❌    | ❌     | ❌        | ❌  | ❌   | ❌              |\n| `GEOMETRY('LINESTRING')`                                                      | `GEOMETRY(LINESTRING)`                                                    | `LINESTRING`                                         | `LINESTRING`                                                                | ❌    | ❌     | ❌        | ❌  | ❌   | ❌              |\n| [`GEOGRAPHY`](https://sequelize.org/api/v6/class/src/data-types.js~geography) | [`GEOGRAPHY`](https://postgis.net/workshops/postgis-intro/geography.html) | ❌                                                   | ❌                                                                          | ❌    | ❌     | ❌        | ❌  | ❌   | ❌              |\n| `HSTORE`                                                                      | [`HSTORE`](https://www.postgresql.org/docs/9.1/hstore.html)               | ❌                                                   | ❌                                                                          | ❌    | ❌     | ❌        | ❌  | ❌   | ❌              |\n```\n\n----------------------------------------\n\nTITLE: Defining Both Foreign Key and Alias in Sequelize BelongsTo Association (JavaScript)\nDESCRIPTION: Demonstrates how to define both a custom foreign key and an alias for a belongsTo association in Sequelize. It shows the resulting behavior for eager loading and lazy loading.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/assocs.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nShip.belongsTo(Captain, { as: 'leader', foreignKey: 'bossId' }); // This creates the `bossId` foreign key in Ship.\n\n// Since an alias was defined, eager Loading doesn't work by simply passing the model to `include`:\nconsole.log((await Ship.findAll({ include: Captain })).toJSON()); // Throws an error\n// Instead, you have to pass the alias:\nconsole.log((await Ship.findAll({ include: 'leader' })).toJSON());\n// Or you can pass an object specifying the model and alias:\nconsole.log(\n  (\n    await Ship.findAll({\n      include: {\n        model: Captain,\n        as: 'leader',\n      },\n    })\n  ).toJSON(),\n);\n\n// Also, instances obtain a `getLeader()` method for Lazy Loading:\nconst ship = await Ship.findOne();\nconsole.log((await ship.getLeader()).toJSON());\n```\n\n----------------------------------------\n\nTITLE: Casting Bind Parameters in Sequelize Queries (JavaScript)\nDESCRIPTION: Demonstrates how to cast bind parameters to specific data types in Sequelize queries when needed.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/raw-queries.mdx#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { QueryTypes } from '@sequelize/core';\n\nawait sequelize.query('SELECT * FROM projects WHERE id = CAST($1 AS int)', {\n  bind: [5],\n  type: QueryTypes.SELECT,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating belongsTo Association with Non-Primary Key References in Sequelize\nDESCRIPTION: This snippet demonstrates how to create a belongsTo association that references a non-primary key field. It establishes a relationship between Ship and Captain models where the Ship references the Captain's name instead of ID.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/assocs.md#2025-04-09_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nShip.belongsTo(Captain, { targetKey: 'name', foreignKey: 'captainName' });\n// This creates a foreign key called `captainName` in the source model (Ship)\n// which references the `name` field from the target model (Captain).\n```\n\n----------------------------------------\n\nTITLE: Registering Sequelize Instance Hooks using the hooks property\nDESCRIPTION: Shows how to register a 'beforeDefine' hook using the hooks property of the Sequelize instance, which runs when a new Model is being initialized.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/hooks.mdx#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Sequelize } from '@sequelize/core';\n\nconst sequelize = new Sequelize(/* options */);\n\n// highlight-next-line\nsequelize.hooks.addListener('beforeDefine', () => {\n  console.log('A new Model is being initialized');\n});\n```\n\n----------------------------------------\n\nTITLE: Connecting to Oracle Database with Connect String in Sequelize\nDESCRIPTION: Example of creating a Sequelize instance to connect to an Oracle database using a connect string. This method allows using an Easy Connect String, Net Service Name, or Connect Descriptor.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/dialect-specific-things.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst sequelize = new Sequelize({\n  dialect: 'oracle',\n  username: 'user',\n  password: 'password',\n  dialectOptions: {\n    connectString: 'inst1',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Sequelize Instance Hooks using the hooks property\nDESCRIPTION: Shows how to register a 'beforeDefine' hook using the hooks property of the Sequelize instance, which runs when a new Model is being initialized.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/hooks.mdx#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Sequelize } from '@sequelize/core';\n\nconst sequelize = new Sequelize(/* options */);\n\n// highlight-next-line\nsequelize.hooks.addListener('beforeDefine', () => {\n  console.log('A new Model is being initialized');\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Foreign Key in Sequelize BelongsTo Association (JavaScript)\nDESCRIPTION: Demonstrates how to directly specify a foreign key name when defining a belongsTo association in Sequelize. It also shows how to use eager loading and lazy loading with the defined association.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/assocs.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nShip.belongsTo(Captain, { foreignKey: 'bossId' }); // This creates the `bossId` foreign key in Ship.\n\n// Eager Loading is done by passing the model to `include`:\nconsole.log((await Ship.findAll({ include: Captain })).toJSON());\n// Or by providing the associated model name:\nconsole.log((await Ship.findAll({ include: 'Captain' })).toJSON());\n\n// Also, instances obtain a `getCaptain()` method for Lazy Loading:\nconst ship = await Ship.findOne();\nconsole.log((await ship.getCaptain()).toJSON());\n```\n\n----------------------------------------\n\nTITLE: Customizing Primary Key in Sequelize Models\nDESCRIPTION: This example demonstrates how to use the @PrimaryKey and @AutoIncrement decorators to customize the primary key in Sequelize models for both TypeScript and JavaScript.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/defining-models.mdx#2025-04-09_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  DataTypes,\n  Model,\n  InferAttributes,\n  InferCreationAttributes,\n  CreationOptional,\n} from '@sequelize/core';\nimport { Attribute, PrimaryKey, AutoIncrement } from '@sequelize/core/decorators-legacy';\n\nclass User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n  @Attribute(DataTypes.INTEGER)\n  @PrimaryKey\n  @AutoIncrement\n  declare internalId: CreationOptional<number>;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DataTypes, Model } from '@sequelize/core';\nimport { Attribute, PrimaryKey, AutoIncrement } from '@sequelize/core/decorators-legacy';\n\nclass User extends Model {\n  @Attribute(DataTypes.INTEGER)\n  @PrimaryKey\n  @AutoIncrement\n  internalId;\n}\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for Tag Taggables Query\nDESCRIPTION: SQL queries generated when calling tag.getTaggables() showing how multiple tables are queried and joined appropriately.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/polymorphic-associations.md#2025-04-09_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  `image`.`id`,\n  `image`.`url`,\n  `image`.`createdAt`,\n  `image`.`updatedAt`,\n  `tag_taggable`.`tagId` AS `tag_taggable.tagId`,\n  `tag_taggable`.`taggableId` AS `tag_taggable.taggableId`,\n  `tag_taggable`.`taggableType` AS `tag_taggable.taggableType`,\n  `tag_taggable`.`createdAt` AS `tag_taggable.createdAt`,\n  `tag_taggable`.`updatedAt` AS `tag_taggable.updatedAt`\nFROM `images` AS `image`\nINNER JOIN `tag_taggables` AS `tag_taggable` ON\n  `image`.`id` = `tag_taggable`.`taggableId` AND\n  `tag_taggable`.`tagId` = 1;\n\nSELECT\n  `video`.`id`,\n  `video`.`url`,\n  `video`.`createdAt`,\n  `video`.`updatedAt`,\n  `tag_taggable`.`tagId` AS `tag_taggable.tagId`,\n  `tag_taggable`.`taggableId` AS `tag_taggable.taggableId`,\n  `tag_taggable`.`taggableType` AS `tag_taggable.taggableType`,\n  `tag_taggable`.`createdAt` AS `tag_taggable.createdAt`,\n  `tag_taggable`.`updatedAt` AS `tag_taggable.updatedAt`\nFROM `videos` AS `video`\nINNER JOIN `tag_taggables` AS `tag_taggable` ON\n  `video`.`id` = `tag_taggable`.`taggableId` AND\n  `tag_taggable`.`tagId` = 1;\n```\n\n----------------------------------------\n\nTITLE: Configuring Snowflake Connection in Sequelize\nDESCRIPTION: Example of creating a Sequelize instance with experimental Snowflake dialect support. The configuration demonstrates how to specify Snowflake-specific options like account, role, warehouse, and schema.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/dialect-specific-things.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst sequelize = new Sequelize('database', null, null, {\n  dialect: 'snowflake',\n  dialectOptions: {\n    // put your snowflake account here,\n    account: 'myAccount', // my-app.us-east-1\n\n    // below option should be optional\n    role: 'myRole',\n    warehouse: 'myWarehouse',\n    schema: 'mySchema',\n  },\n  // same as other dialect\n  username: 'myUserName',\n  password: 'myPassword',\n  database: 'myDatabaseName',\n});\n```\n\n----------------------------------------\n\nTITLE: Using hooks with transactions in Sequelize\nDESCRIPTION: Demonstrates how to access and reuse the transaction object within a hook function. This ensures that database operations in hooks use the same transaction as the operation that triggered the hook.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/hooks.mdx#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nUser.hooks.addListener('afterCreate', async (user, options) => {\n  // We can use `options.transaction` to perform some other call\n  // using the same transaction of the call that triggered this hook\n  await User.update(\n    { mood: 'sad' },\n    {\n      where: {\n        id: user.id,\n      },\n      transaction: options.transaction,\n    },\n  );\n});\n\nawait sequelize.transaction(async transaction => {\n  await User.create(\n    {\n      username: 'someguy',\n      mood: 'happy',\n    },\n    {\n      transaction,\n    },\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Default Association Setup in Sequelize\nDESCRIPTION: Shows the default behavior when setting up an association between Ship and Captain models, including automatic foreign key generation and methods for eager and lazy loading.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/assocs.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst Ship = sequelize.define('ship', { name: DataTypes.TEXT }, { timestamps: false });\nconst Captain = sequelize.define('captain', { name: DataTypes.TEXT }, { timestamps: false });\n\nShip.belongsTo(Captain); // This creates the `captainId` foreign key in Ship.\n\n// Eager Loading is done by passing the model to `include`:\nconsole.log((await Ship.findAll({ include: Captain })).toJSON());\n// Or by providing the associated model name:\nconsole.log((await Ship.findAll({ include: 'captain' })).toJSON());\n\n// Also, instances obtain a `getCaptain()` method for Lazy Loading:\nconst ship = Ship.findOne();\nconsole.log((await ship.getCaptain()).toJSON());\n```\n\n----------------------------------------\n\nTITLE: Generating User Model\nDESCRIPTION: CLI commands to generate a User model with firstName, lastName and email attributes.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/cli.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# using npm\nnpx sequelize-cli model:generate --name User --attributes firstName:string,lastName:string,email:string\n# using yarn\nyarn sequelize-cli model:generate --name User --attributes firstName:string,lastName:string,email:string\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-Many Associations in JavaScript\nDESCRIPTION: Demonstrates how to define One-to-Many associations between Image/Video and Comment models in Sequelize. This is the initial setup before implementing the polymorphic association.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/polymorphic-associations.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nImage.hasMany(Comment);\nComment.belongsTo(Image);\n\nVideo.hasMany(Comment);\nComment.belongsTo(Video);\n```\n\n----------------------------------------\n\nTITLE: Configuring MariaDB Connection in Sequelize\nDESCRIPTION: Example of creating a Sequelize instance with MariaDB dialect and custom connection options. The dialectOptions parameter allows passing options like connectTimeout directly to the mariadb connector.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/dialect-specific-things.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst sequelize = new Sequelize('database', 'username', 'password', {\n  dialect: 'mariadb',\n  dialectOptions: {\n    // Your mariadb options here\n    // connectTimeout: 1000\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Default Hooks on Sequelize Constructor\nDESCRIPTION: This example shows how to define default hooks that apply to all models via the Sequelize constructor options. These hooks will be used if a model doesn't define its own hook of the same type.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/hooks.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst sequelize = new Sequelize(..., {\n  define: {\n    hooks: {\n      beforeCreate() {\n        // Do stuff\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Aliased Associations in Sequelize\nDESCRIPTION: Shows different ways to load aliased associations using the include option with model and as properties.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/eager-loading.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst users = await User.findAll({\n  include: { model: Tool, as: 'Instruments' },\n});\nconsole.log(JSON.stringify(users, null, 2));\n```\n\n----------------------------------------\n\nTITLE: Defining ENUM DataType in Sequelize v7\nDESCRIPTION: Demonstrates the new way to define ENUM values in Sequelize v7 model definitions. The 'values' property has been removed from column definitions, and ENUM values are now specified directly in the DataTypes.ENUM constructor.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/upgrade.md#2025-04-09_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nsequelize.define('MyModel', {\n  roles: {\n    type: DataTypes.ENUM(['admin', 'user']),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: JSON Output of Many-to-Many Eager Loading in Sequelize\nDESCRIPTION: Shows the JSON output from eager loading a Many-to-Many relationship, illustrating how Sequelize includes the junction table data as the 'Foo_Bar' property on each associated record.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/eager-loading.md#2025-04-09_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"name\": \"foo\",\n  \"Bars\": [\n    {\n      \"id\": 1,\n      \"name\": \"bar\",\n      \"Foo_Bar\": {\n        \"FooId\": 1,\n        \"BarId\": 1\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Generated After Resolving Circular References\nDESCRIPTION: Shows the SQL commands generated by Sequelize after resolving the circular reference with constraints: false, demonstrating how the tables are created with appropriate foreign keys.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/constraints-and-circularities.md#2025-04-09_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS \"documents\" (\n  \"id\" SERIAL,\n  \"author\" VARCHAR(255),\n  \"createdAt\" TIMESTAMP WITH TIME ZONE NOT NULL,\n  \"updatedAt\" TIMESTAMP WITH TIME ZONE NOT NULL,\n  \"currentVersionId\" INTEGER,\n  PRIMARY KEY (\"id\")\n);\n\nCREATE TABLE IF NOT EXISTS \"versions\" (\n  \"id\" SERIAL,\n  \"timestamp\" TIMESTAMP WITH TIME ZONE,\n  \"createdAt\" TIMESTAMP WITH TIME ZONE NOT NULL,\n  \"updatedAt\" TIMESTAMP WITH TIME ZONE NOT NULL,\n  \"documentId\" INTEGER REFERENCES \"documents\" (\"id\") ON DELETE\n  SET\n    NULL ON UPDATE CASCADE,\n    PRIMARY KEY (\"id\")\n);\n```\n\n----------------------------------------\n\nTITLE: Enabling Hooks for Cascade Deletes in Sequelize Associations\nDESCRIPTION: Demonstrates how to enable hooks for cascade deletes in Sequelize associations by setting the hooks option to true. This is considered legacy and has limitations.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/hooks.md#2025-04-09_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Model } from 'sequelize';\n\nconst sequelize = new Sequelize({\n  /* options */\n});\n\nclass User extends Model {}\n\nUser.init({}, { sequelize });\n\nclass Post extends Model {}\n\nPost.init({}, { sequelize });\nPost.beforeDestroy(() => {\n  console.log('Post has been destroyed');\n});\n\n// This \"hooks\" option will cause the \"beforeDestroy\" and \"afterDestroy\"\nUser.hasMany(Post, { onDelete: 'cascade', hooks: true });\n\nawait sequelize.sync({ force: true });\n\nconst user = await User.create();\nconst post = await Post.create({ userId: user.id });\n\n// this will log \"Post has been destroyed\"\nawait user.destroy();\n```\n\n----------------------------------------\n\nTITLE: Using findAndCountAll with Includes in Sequelize\nDESCRIPTION: Demonstrates how to use the findAndCountAll utility with includes, showing how the 'required' option affects which records are counted in the result.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/eager-loading.md#2025-04-09_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nUser.findAndCountAll({\n  include: [{ model: Profile, required: true }],\n  limit: 3,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Seed Storage in Sequelize CLI\nDESCRIPTION: Configuration options for customizing how Sequelize stores seeding data, including storage type, file path, and table name settings. The example shows JSON configuration for development environment with MySQL dialect.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/migrations.md#2025-04-09_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"development\": {\n    \"username\": \"root\",\n    \"password\": null,\n    \"database\": \"database_development\",\n    \"host\": \"127.0.0.1\",\n    \"dialect\": \"mysql\",\n    // Use a different storage. Default: none\n    \"seederStorage\": \"json\",\n    // Use a different file name. Default: sequelize-data.json\n    \"seederStoragePath\": \"sequelizeData.json\",\n    // Use a different table name. Default: SequelizeData\n    \"seederStorageTableName\": \"sequelize_data\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RIGHT OUTER JOIN in Sequelize Queries\nDESCRIPTION: Demonstrates how to configure RIGHT OUTER JOIN in Sequelize by using the 'right' option in association includes. This option is only available in MySQL, MariaDB, PostgreSQL, and MSSQL (not SQLite) and is only respected when 'required' is false.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/eager-loading.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nUser.findAll({\n  include: [{\n    model: Task // will create a left join\n  }]\n});\nUser.findAll({\n  include: [{\n    model: Task,\n    right: true // will create a right join\n  }]\n});\nUser.findAll({\n  include: [{\n    model: Task,\n    required: true,\n    right: true // has no effect, will create an inner join\n  }]\n});\nUser.findAll({\n  include: [{\n    model: Task,\n    where: { name: { [Op.ne]: 'empty trash' } },\n    right: true // has no effect, will create an inner join\n  }]\n});\nUser.findAll({\n  include: [{\n    model: Tool,\n    where: { name: { [Op.ne]: 'empty trash' } },\n    required: false // will create a left join\n  }]\n});\nUser.findAll({\n  include: [{\n    model: Tool,\n    where: { name: { [Op.ne]: 'empty trash' } },\n    required: false\n    right: true // will create a right join\n  }]\n});\n```\n\n----------------------------------------\n\nTITLE: Resolving Circular References with constraints: false\nDESCRIPTION: Shows how to resolve the cyclic dependency by setting 'constraints: false' on one of the associations, which prevents Sequelize from creating a foreign key constraint in the database.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/constraints-and-circularities.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nDocument.hasMany(Version);\nDocument.belongsTo(Version, {\n  as: 'Current',\n  foreignKey: 'currentVersionId',\n  constraints: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Using Hooks with Transactions in Sequelize\nDESCRIPTION: Illustrates how to properly use hooks with transactions in Sequelize. It shows how to access the transaction from the options parameter and use it in subsequent operations within the hook.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/hooks.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nUser.addHook('afterCreate', async (user, options) => {\n  // We can use `options.transaction` to perform some other call\n  // using the same transaction of the call that triggered this hook\n  await User.update(\n    { mood: 'sad' },\n    {\n      where: {\n        id: user.id,\n      },\n      transaction: options.transaction,\n    },\n  );\n});\n\nawait sequelize.transaction(async t => {\n  await User.create(\n    {\n      username: 'someguy',\n      mood: 'happy',\n    },\n    {\n      transaction: t,\n    },\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering on Junction Table in Many-to-Many Eager Loading\nDESCRIPTION: Demonstrates how to apply filters to the junction table when eager loading Many-to-Many relationships using the 'where' option inside the 'through' configuration.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/eager-loading.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nUser.findAll({\n  include: [\n    {\n      model: Project,\n      through: {\n        where: {\n          // Here, `completed` is a column present at the junction table\n          completed: true,\n        },\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Sequelize Snowflake Dialect Package\nDESCRIPTION: This command installs the @sequelize/snowflake dialect package, which is required to use Sequelize with Snowflake.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/databases/snowflake.mdx#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @sequelize/snowflake\n```\n\n----------------------------------------\n\nTITLE: Complex Where Clauses in Sequelize\nDESCRIPTION: Shows how to use nested column references in where clauses using the $nested.column$ syntax for complex filtering.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/eager-loading.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nUser.findAll({\n  where: {\n    '$Instruments.size$': { [Op.ne]: 'small' },\n  },\n  include: [\n    {\n      model: Tool,\n      as: 'Instruments',\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Lambda Function Execution Behavior with Different Handler Types\nDESCRIPTION: This snippet includes multiple Lambda handler implementations to illustrate the differences in execution behavior between non-async and async handlers, and the impact of the callbackWaitsForEmptyEventLoop setting.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/aws-lambda.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// no callback invoked\nmodule.exports.handler = function () {\n  // Lambda finishes AFTER `doSomething()` is invoked\n  setTimeout(() => doSomething(), 1000);\n};\n\n// callback invoked\nmodule.exports.handler = function (event, context, callback) {\n  // Lambda finishes AFTER `doSomething()` is invoked\n  setTimeout(() => doSomething(), 1000);\n  callback(null, 'Hello World!');\n};\n\n// callback invoked, context.callbackWaitsForEmptyEventLoop = false\nmodule.exports.handler = function (event, context, callback) {\n  // Lambda finishes BEFORE `doSomething()` is invoked\n  context.callbackWaitsForEmptyEventLoop = false;\n  setTimeout(() => doSomething(), 2000);\n  setTimeout(() => callback(null, 'Hello World!'), 1000);\n};\n\n// async/await\nmodule.exports.handler = async function () {\n  // Lambda finishes BEFORE `doSomething()` is invoked\n  setTimeout(() => doSomething(), 1000);\n  return 'Hello World!';\n};\n\n// Promise\nmodule.exports.handler = function () {\n  // Lambda finishes BEFORE `doSomething()` is invoked\n  setTimeout(() => doSomething(), 1000);\n  return Promise.resolve('Hello World!');\n};\n```\n\n----------------------------------------\n\nTITLE: Working around module loading issues with sequelize.import in Sequelize (JavaScript)\nDESCRIPTION: Demonstrates a workaround for frameworks like Meteor that overload require and might cause 'Cannot find module' errors when using sequelize.import. This approach passes the require function along with the model name.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/moved/models-definition.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// If this fails...\nconst AuthorModel = db.import('./path/to/models/project');\n\n// Try this instead!\nconst AuthorModel = db.import('project', require('./path/to/models/project'));\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Lambda Function Execution Behavior with Different Handler Types\nDESCRIPTION: This snippet includes multiple Lambda handler implementations to illustrate the differences in execution behavior between non-async and async handlers, and the impact of the callbackWaitsForEmptyEventLoop setting.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/aws-lambda.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// no callback invoked\nmodule.exports.handler = function () {\n  // Lambda finishes AFTER `doSomething()` is invoked\n  setTimeout(() => doSomething(), 1000);\n};\n\n// callback invoked\nmodule.exports.handler = function (event, context, callback) {\n  // Lambda finishes AFTER `doSomething()` is invoked\n  setTimeout(() => doSomething(), 1000);\n  callback(null, 'Hello World!');\n};\n\n// callback invoked, context.callbackWaitsForEmptyEventLoop = false\nmodule.exports.handler = function (event, context, callback) {\n  // Lambda finishes BEFORE `doSomething()` is invoked\n  context.callbackWaitsForEmptyEventLoop = false;\n  setTimeout(() => doSomething(), 2000);\n  setTimeout(() => callback(null, 'Hello World!'), 1000);\n};\n\n// async/await\nmodule.exports.handler = async function () {\n  // Lambda finishes BEFORE `doSomething()` is invoked\n  setTimeout(() => doSomething(), 1000);\n  return 'Hello World!';\n};\n\n// Promise\nmodule.exports.handler = function () {\n  // Lambda finishes BEFORE `doSomething()` is invoked\n  setTimeout(() => doSomething(), 1000);\n  return Promise.resolve('Hello World!');\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching Associated Models in Sequelize\nDESCRIPTION: Demonstrates loading tasks with their associated users using the include option, returning model instances.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/eager-loading.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst tasks = await Task.findAll({ include: User });\nconsole.log(JSON.stringify(tasks, null, 2));\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Column Type in Sequelize (TypeScript)\nDESCRIPTION: This snippet demonstrates how to define a custom column type using a raw SQL string in Sequelize. It creates a 'user' model with a 'password' field of type VARBINARY(50).\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/data-types.mdx#2025-04-09_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nUser = sequelize.define('user', {\n  password: {\n    type: 'VARBINARY(50)',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for Junction Table Filtering in Sequelize\nDESCRIPTION: Shows the SQL generated by Sequelize when filtering on junction table attributes in a Many-to-Many relationship eager loading query, illustrating how the conditions are applied to the join.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/eager-loading.md#2025-04-09_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  `User`.`id`,\n  `User`.`name`,\n  `Projects`.`id` AS `Projects.id`,\n  `Projects`.`name` AS `Projects.name`,\n  `Projects->User_Project`.`completed` AS `Projects.User_Project.completed`,\n  `Projects->User_Project`.`UserId` AS `Projects.User_Project.UserId`,\n  `Projects->User_Project`.`ProjectId` AS `Projects.User_Project.ProjectId`\nFROM `Users` AS `User`\nLEFT OUTER JOIN `User_Projects` AS `Projects->User_Project` ON\n  `User`.`id` = `Projects->User_Project`.`UserId`\nLEFT OUTER JOIN `Projects` AS `Projects` ON\n  `Projects`.`id` = `Projects->User_Project`.`ProjectId` AND\n  `Projects->User_Project`.`completed` = 1;\n```\n\n----------------------------------------\n\nTITLE: AWS Lambda Runtime Implementation\nDESCRIPTION: Implementation of the AWS Lambda Node.js runtime showing how it schedules and handles invocations. This code demonstrates how Lambda handles function execution and promise resolution, including the behavior of the event loop.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/aws-lambda.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nclass Runtime {\n  // (...)\n\n  // each iteration is executed in the event loop `check` phase\n  scheduleIteration() {\n    setImmediate(() => this.handleOnce().then(/* (...) */));\n  }\n\n  async handleOnce() {\n    // get next invocation. see: https://docs.aws.amazon.com/lambda/latest/dg/runtimes-api.html#runtimes-api-next\n    let { bodyJson, headers } = await this.client.nextInvocation();\n\n    // prepare `context` handler parameter\n    let invokeContext = new InvokeContext(headers);\n    invokeContext.updateLoggingContext();\n\n    // prepare `callback` handler parameter\n    let [callback, callbackContext] = CallbackContext.build(\n      this.client,\n      invokeContext.invokeId,\n      this.scheduleIteration.bind(this),\n    );\n\n    try {\n      // this listener is subscribed to process.on('beforeExit')\n      // so that when when `context.callbackWaitsForEmptyEventLoop === true`\n      // the Lambda execution finishes after the event loop is empty\n      this._setDefaultExitListener(invokeContext.invokeId);\n\n      // execute handler\n      const result = this.handler(\n        JSON.parse(bodyJson),\n        invokeContext.attachEnvironmentData(callbackContext),\n        callback,\n      );\n\n      // finish the execution if the handler is async\n      if (_isPromise(result)) {\n        result.then(callbackContext.succeed, callbackContext.fail).catch(callbackContext.fail);\n      }\n    } catch (err) {\n      callback(err);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using sequelize.import with callback function in Sequelize (JavaScript)\nDESCRIPTION: Shows how to use the sequelize.import method with a callback function instead of a file path. This approach allows you to directly define the model within the import call by providing a model name and a definition function.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/moved/models-definition.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsequelize.import('project', (sequelize, DataTypes) => {\n  return sequelize.define('project', {\n    name: DataTypes.STRING,\n    description: DataTypes.TEXT,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: AWS Lambda Runtime Implementation\nDESCRIPTION: Implementation of the AWS Lambda Node.js runtime showing how it schedules and handles invocations. This code demonstrates how Lambda handles function execution and promise resolution, including the behavior of the event loop.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/aws-lambda.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nclass Runtime {\n  // (...)\n\n  // each iteration is executed in the event loop `check` phase\n  scheduleIteration() {\n    setImmediate(() => this.handleOnce().then(/* (...) */));\n  }\n\n  async handleOnce() {\n    // get next invocation. see: https://docs.aws.amazon.com/lambda/latest/dg/runtimes-api.html#runtimes-api-next\n    let { bodyJson, headers } = await this.client.nextInvocation();\n\n    // prepare `context` handler parameter\n    let invokeContext = new InvokeContext(headers);\n    invokeContext.updateLoggingContext();\n\n    // prepare `callback` handler parameter\n    let [callback, callbackContext] = CallbackContext.build(\n      this.client,\n      invokeContext.invokeId,\n      this.scheduleIteration.bind(this),\n    );\n\n    try {\n      // this listener is subscribed to process.on('beforeExit')\n      // so that when when `context.callbackWaitsForEmptyEventLoop === true`\n      // the Lambda execution finishes after the event loop is empty\n      this._setDefaultExitListener(invokeContext.invokeId);\n\n      // execute handler\n      const result = this.handler(\n        JSON.parse(bodyJson),\n        invokeContext.attachEnvironmentData(callbackContext),\n        callback,\n      );\n\n      // finish the execution if the handler is async\n      if (_isPromise(result)) {\n        result.then(callbackContext.succeed, callbackContext.fail).catch(callbackContext.fail);\n      }\n    } catch (err) {\n      callback(err);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Transactions in CLS Namespace\nDESCRIPTION: This code demonstrates how concurrent transactions work with CLS, showing that different transaction callbacks maintain their own transaction context. Each transaction is accessible via the namespace within its own callback chain.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/transactions.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nsequelize.transaction(t1 => {\n  namespace.get('transaction') === t1; // true\n});\n\nsequelize.transaction(t2 => {\n  namespace.get('transaction') === t2; // true\n});\n```\n\n----------------------------------------\n\nTITLE: Grouping Data with Sequelize\nDESCRIPTION: Shows how to use the group option in Sequelize queries to group results. Group accepts a string that will be included verbatim in the SQL query.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-querying-basics.md#2025-04-09_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nProject.findAll({ group: 'name' });\n// yields 'GROUP BY name'\n```\n\n----------------------------------------\n\nTITLE: Alternative Implementation Using Standard Scopes\nDESCRIPTION: Shows how to achieve the same association scope behavior using standard Sequelize model scopes instead of association scopes.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/association-scopes.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBar.addScope('open', {\n  where: {\n    status: 'open',\n  },\n});\nFoo.hasMany(Bar);\nFoo.hasMany(Bar.scope('open'), { as: 'openBars' });\n```\n\n----------------------------------------\n\nTITLE: Restoring Soft-Deleted Records in Sequelize\nDESCRIPTION: Shows how to restore soft-deleted records using both instance and static restore methods. Includes examples of conditional restoration based on criteria.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/paranoid.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst post = await Post.create({ title: 'test' });\nconsole.log(post instanceof Post); // true\nawait post.destroy();\nconsole.log('soft-deleted!');\nawait post.restore();\nconsole.log('restored!');\n\n// Example showing the static `restore` method.\n// Restoring every soft-deleted post with more than 100 likes\nawait Post.restore({\n  where: {\n    likes: {\n      [Op.gt]: 100,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: MySQL Connection Manager Implementation in Sequelize\nDESCRIPTION: Implementation of the MySQL dialect's connect method in Sequelize, showing how it creates and manages database connections. This method uses MySQL2 to establish a connection and handles connection events.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/aws-lambda.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nclass ConnectionManager {\n  // (...)\n\n  async connect(config) {\n    // (...)\n    return await new Promise((resolve, reject) => {\n      // uses mysql2's `new Connection()`\n      const connection = this.lib.createConnection(connectionConfig);\n\n      const errorHandler = e => {\n        connection.removeListener('connect', connectHandler);\n        connection.removeListener('error', connectHandler);\n        reject(e);\n      };\n\n      const connectHandler = () => {\n        connection.removeListener('error', errorHandler);\n        resolve(connection);\n      };\n\n      connection.on('error', errorHandler);\n      connection.once('connect', connectHandler);\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sequelize Query with Subquery for Ordering\nDESCRIPTION: This Sequelize query extends the previous example by adding an 'order' clause. It demonstrates how to use a computed value from a subquery to order the results, in this case ordering posts by the number of 'Laugh' reactions in descending order.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/sub-queries.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPost.findAll({\n  attributes: {\n    include: [\n      [\n        sequelize.literal(`(\n                    SELECT COUNT(*)\n                    FROM reactions AS reaction\n                    WHERE\n                        reaction.postId = post.id\n                        AND\n                        reaction.type = \"Laugh\"\n                )`),\n        'laughReactionsCount',\n      ],\n    ],\n  },\n  order: [[sequelize.literal('laughReactionsCount'), 'DESC']],\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing JSON Array Elements in Sequelize\nDESCRIPTION: Demonstrates how to access elements of a JSON array using square bracket notation in Sequelize queries. This example queries the first element of a 'passwords' array in the 'gameData' JSON field.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/json.mdx#2025-04-09_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nUser.findAll({\n  where: {\n    'gameData.passwords[0]': 0451,\n  },\n});\n```\n\nLANGUAGE: SQL\nCODE:\n```\n-- postgres\n\"gameData\"#>ARRAY['passwords','0'] = '0451';\n\n-- mysql & friends\nJSON_EXTRACT(`gameData`, '$.passwords[0]') = '0451';\n```\n\n----------------------------------------\n\nTITLE: Generated SQL Query from Association Scope\nDESCRIPTION: Shows the SQL query automatically generated when calling myFoo.getOpenBars() with the association scope applied.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/association-scopes.md#2025-04-09_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    `id`, `status`, `createdAt`, `updatedAt`, `fooId`\nFROM `bars` AS `bar`\nWHERE `bar`.`status` = 'open' AND `bar`.`fooId` = 1;\n```\n\n----------------------------------------\n\nTITLE: Finding a Project by Title in Sequelize with JavaScript\nDESCRIPTION: This snippet shows how to use the findOne method to obtain the first entry that matches the provided query options. It demonstrates searching for a project by its title and handling the case when no project is found.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-querying-finders.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst project = await Project.findOne({ where: { title: 'My Title' } });\nif (project === null) {\n  console.log('Not found!');\n} else {\n  console.log(project instanceof Project); // true\n  console.log(project.title); // 'My Title'\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Non-async Lambda Handler with Callback in Node.js\nDESCRIPTION: Example of a non-async AWS Lambda handler that uses the callback pattern to return responses or errors. The handler executes synchronous code and uses the callback function to return results or errors.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/aws-lambda.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports.handler = function (event, context, callback) {\n  try {\n    doSomething();\n    callback(null, 'Hello World!'); // Lambda returns \"Hello World!\"\n  } catch (err) {\n    // try/catch is not required, uncaught exceptions invoke `callback(err)` implicitly\n    callback(err); // Lambda fails with `err`\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: ENUM Data Types in Sequelize\nDESCRIPTION: Shows different ways to define ENUM data types in Sequelize models, including inline values and column definitions.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/other-data-types.mdx#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nDataTypes.ENUM('foo', 'bar');\n\nsequelize.define('foo', {\n  states: {\n    type: DataTypes.ENUM,\n    values: ['active', 'pending', 'deleted'],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: ENUM Data Types in Sequelize\nDESCRIPTION: Shows different ways to define ENUM data types in Sequelize models, including inline values and column definitions.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/other-data-types.mdx#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nDataTypes.ENUM('foo', 'bar');\n\nsequelize.define('foo', {\n  states: {\n    type: DataTypes.ENUM,\n    values: ['active', 'pending', 'deleted'],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Getter for Username in Sequelize\nDESCRIPTION: This snippet demonstrates how to define a custom getter for the username field in a Sequelize model. The getter converts the username to uppercase when accessed.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/getters-setters-virtuals.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst User = sequelize.define('user', {\n  username: {\n    type: DataTypes.STRING,\n    get() {\n      const rawValue = this.getDataValue('username');\n      return rawValue ? rawValue.toUpperCase() : null;\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Player-GameTeam Super Many-to-Many Relationship\nDESCRIPTION: Creates a junction table PlayerGameTeam and establishes Super Many-to-Many relationship between Player and GameTeam models\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/advanced-many-to-many.md#2025-04-09_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst PlayerGameTeam = sequelize.define('PlayerGameTeam', {\n  id: {\n    type: DataTypes.INTEGER,\n    primaryKey: true,\n    autoIncrement: true,\n    allowNull: false,\n  },\n});\nPlayer.belongsToMany(GameTeam, { through: PlayerGameTeam });\nGameTeam.belongsToMany(Player, { through: PlayerGameTeam });\nPlayerGameTeam.belongsTo(Player);\nPlayerGameTeam.belongsTo(GameTeam);\nPlayer.hasMany(PlayerGameTeam);\nGameTeam.hasMany(PlayerGameTeam);\n```\n\n----------------------------------------\n\nTITLE: Defining Date and Time Data Types in Sequelize\nDESCRIPTION: This code block shows how to define various date and time data types in Sequelize, including support for fractional seconds.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-basics.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nDataTypes.DATE; // DATETIME for mysql / sqlite, TIMESTAMP WITH TIME ZONE for postgres\nDataTypes.DATE(6); // DATETIME(6) for mysql 5.6.4+. Fractional seconds support with up to 6 digits of precision\nDataTypes.DATEONLY; // DATE without time\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Lambda Handlers in Node.js\nDESCRIPTION: Examples of async AWS Lambda handlers using both async/await and Promise patterns. These handlers return Promises that resolve with the response value or reject with an error.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/aws-lambda.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// async/await\nmodule.exports.handler = async function (event, context) {\n  try {\n    await doSomethingAsync();\n    return 'Hello World!'; // equivalent of: callback(null, \"Hello World!\");\n  } catch (err) {\n    // try/cath is not required, async functions always return a Promise\n    throw err; // equivalent of: callback(err);\n  }\n};\n\n// Promise\nmodule.exports.handler = function (event, context) {\n  /*\n   * must return a `Promise` to be considered an async handler\n   *\n   * an uncaught exception that prevents a `Promise` to be returned\n   * by the handler will \"downgrade\" the handler to non-async\n   */\n  return Promise.resolve()\n    .then(() => doSomethingAsync())\n    .then(() => 'Hello World!');\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Sequelize Migration\nDESCRIPTION: Example migration that creates a 'Person' table with string and boolean columns. The down method drops the table to revert the changes.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/migrations.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  up: (queryInterface, Sequelize) => {\n    return queryInterface.createTable('Person', {\n      name: Sequelize.DataTypes.STRING,\n      isBetaMember: {\n        type: Sequelize.DataTypes.BOOLEAN,\n        defaultValue: false,\n        allowNull: false,\n      },\n    });\n  },\n  down: (queryInterface, Sequelize) => {\n    return queryInterface.dropTable('Person');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Changing Column Datatype using Query Interface in Sequelize\nDESCRIPTION: This snippet demonstrates how to change the datatype of a column 'foo' in the 'Person' table to FLOAT with a default value and not null constraint using the Query Interface.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/query-interface.md#2025-04-09_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nqueryInterface.changeColumn('Person', 'foo', {\n  type: DataTypes.FLOAT,\n  defaultValue: 3.14,\n  allowNull: false,\n});\n```\n\nLANGUAGE: SQL\nCODE:\n```\nALTER TABLE `Person` CHANGE `foo` `foo` FLOAT NOT NULL DEFAULT 3.14;\n```\n\n----------------------------------------\n\nTITLE: Implementing Game-Team Super Many-to-Many Relationship\nDESCRIPTION: Creates a junction table GameTeam and establishes Super Many-to-Many relationship between Game and Team models\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/advanced-many-to-many.md#2025-04-09_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst GameTeam = sequelize.define('GameTeam', {\n  id: {\n    type: DataTypes.INTEGER,\n    primaryKey: true,\n    autoIncrement: true,\n    allowNull: false,\n  },\n});\nTeam.belongsToMany(Game, { through: GameTeam });\nGame.belongsToMany(Team, { through: GameTeam });\nGameTeam.belongsTo(Game);\nGameTeam.belongsTo(Team);\nGame.hasMany(GameTeam);\nTeam.hasMany(GameTeam);\n```\n\n----------------------------------------\n\nTITLE: Defining Boolean Data Type in Sequelize\nDESCRIPTION: This snippet shows how to define a boolean data type in Sequelize.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-basics.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nDataTypes.BOOLEAN; // TINYINT(1)\n```\n\n----------------------------------------\n\nTITLE: MySQL Connection Manager Implementation in Sequelize\nDESCRIPTION: Shows how Sequelize's MySQL dialect creates new database connections by setting up event listeners for connection and error events.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/aws-lambda.md#2025-04-09_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nclass ConnectionManager {\n  // (...)\n\n  async connect(config) {\n    // (...)\n    return await new Promise((resolve, reject) => {\n      // uses mysql2's `new Connection()`\n      const connection = this.lib.createConnection(connectionConfig);\n\n      const errorHandler = e => {\n        connection.removeListener('connect', connectHandler);\n        connection.removeListener('error', connectHandler);\n        reject(e);\n      };\n\n      const connectHandler = () => {\n        connection.removeListener('error', errorHandler);\n        resolve(connection);\n      };\n\n      connection.on('error', errorHandler);\n      connection.once('connect', connectHandler);\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Seeder Implementation\nDESCRIPTION: Example seeder file showing how to insert and remove demo user data.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/migrations.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  up: (queryInterface, Sequelize) => {\n    return queryInterface.bulkInsert('Users', [{\n      firstName: 'John',\n      lastName: 'Doe',\n      email: 'example@example.com',\n      createdAt: new Date(),\n      updatedAt: new Date()\n    }]);\n  },\n  down: (queryInterface, Sequelize) => {\n    return queryInterface.bulkDelete('Users', null, {});\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Sequelize Setup for Documentation Examples\nDESCRIPTION: Sample code for setting up Sequelize with SQLite in-memory database for testing and documentation purposes\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/getting-started.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Sequelize, Op, Model, DataTypes } = require('sequelize');\nconst sequelize = new Sequelize('sqlite::memory:');\n\n// Code here! It works!\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for Through Table with Custom Foreign Keys\nDESCRIPTION: SQL generated by Sequelize for the through table in a Many-to-Many relationship with custom foreign key names. Shows the result of using foreignKey and otherKey options.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/advanced-many-to-many.md#2025-04-09_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS `product_categories` (\n  `createdAt` DATETIME NOT NULL,\n  `updatedAt` DATETIME NOT NULL,\n  `objectId` INTEGER NOT NULL REFERENCES `products` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,\n  `typeId` INTEGER NOT NULL REFERENCES `categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,\n  PRIMARY KEY (`objectId`, `typeId`)\n);\n```\n\n----------------------------------------\n\nTITLE: Valid Public Class Fields Usage in Sequelize Model\nDESCRIPTION: Shows the correct way to use public class fields in a Sequelize model without interfering with model attributes.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-basics.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Valid\nclass User extends Model {\n  otherPublicField;\n}\n\nUser.init(\n  {\n    id: {\n      type: DataTypes.INTEGER,\n      autoIncrement: true,\n      primaryKey: true,\n    },\n  },\n  { sequelize },\n);\n\nconst user = new User({ id: 1 });\nuser.id; // 1\n```\n\n----------------------------------------\n\nTITLE: Using SQL Operators with the Op Object in Sequelize 7\nDESCRIPTION: String-based operators are removed in Sequelize 7. Use the Op object for standard operators or the sql template tag for custom operators.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/upgrade.md#2025-04-09_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nsql.where(sql.attribute('name'), Op.like, 'foo');\n```\n\n----------------------------------------\n\nTITLE: Generating Model and Migration\nDESCRIPTION: Command to generate a new model and its corresponding migration file.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/migrations.md#2025-04-09_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nnpx sequelize-cli model:generate --name User --attributes firstName:string,lastName:string,email:string\n```\n\n----------------------------------------\n\nTITLE: Nested Eager Loading with Conditional Filtering\nDESCRIPTION: Shows how to perform nested eager loading with conditional filtering on nested models while still returning all parent instances by using 'required: false'.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/eager-loading.md#2025-04-09_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nUser.findAll({\n  include: [\n    {\n      model: Tool,\n      as: 'Instruments',\n      include: [\n        {\n          model: Teacher,\n          where: {\n            school: 'Woodstock Music School',\n          },\n          required: false,\n        },\n      ],\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Reloading Model Instance from Database in Sequelize\nDESCRIPTION: Shows how to use the reload instance method to refresh a model instance with the latest data from the database, discarding local changes.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/select-methods.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst jane = await User.create({ name: 'Jane' });\nconsole.log(jane.name); // \"Jane\"\njane.name = 'Ada';\n// the name is still \"Jane\" in the database\nawait jane.reload();\nconsole.log(jane.name); // \"Jane\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Setter for Password Hashing in Sequelize\nDESCRIPTION: This snippet shows how to define a custom setter for the password field in a Sequelize model. The setter hashes the password before storing it in the database.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/getters-setters-virtuals.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst User = sequelize.define('user', {\n  username: DataTypes.STRING,\n  password: {\n    type: DataTypes.STRING,\n    set(value) {\n      this.setDataValue('password', hash(value));\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Strict Auto-Timestamp & Auto-version Attributes in Sequelize 7\nDESCRIPTION: Shows how Sequelize 7 strictly enforces compatible types for automatic timestamp attributes like createdAt, updatedAt, deletedAt, and version, throwing errors instead of silently overriding incompatible configurations.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/upgrade.md#2025-04-09_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nconst User = sequelize.define('User', {\n  createdAt: {\n    // This will cause an error because sequelize expects a DATE type, not DATEONLY.\n    // error-next-line\n    type: DataTypes.DATEONLY,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Dynamic Database Configuration with Environment Variables\nDESCRIPTION: Example JavaScript configuration file for Sequelize with environment-specific settings. Uses environment variables for sensitive data and supports advanced options like SSL configuration for production.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/migrations.md#2025-04-09_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('fs');\n\nmodule.exports = {\n  development: {\n    username: 'database_dev',\n    password: 'database_dev',\n    database: 'database_dev',\n    host: '127.0.0.1',\n    port: 3306,\n    dialect: 'mysql',\n    dialectOptions: {\n      bigNumberStrings: true,\n    },\n  },\n  test: {\n    username: process.env.CI_DB_USERNAME,\n    password: process.env.CI_DB_PASSWORD,\n    database: process.env.CI_DB_NAME,\n    host: '127.0.0.1',\n    port: 3306,\n    dialect: 'mysql',\n    dialectOptions: {\n      bigNumberStrings: true,\n    },\n  },\n  production: {\n    username: process.env.PROD_DB_USERNAME,\n    password: process.env.PROD_DB_PASSWORD,\n    database: process.env.PROD_DB_NAME,\n    host: process.env.PROD_DB_HOSTNAME,\n    port: process.env.PROD_DB_PORT,\n    dialect: 'mysql',\n    dialectOptions: {\n      bigNumberStrings: true,\n      ssl: {\n        ca: fs.readFileSync(__dirname + '/mysql-ca-main.crt'),\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Mapping Custom Datatype to PostgreSQL in Sequelize\nDESCRIPTION: This snippet shows how to map a custom Sequelize datatype to a PostgreSQL-specific implementation. It includes creating a PostgreSQL-specific child datatype, mapping the datatype name, and setting up the parser function.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/extending-data-types.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction createTheNewDataType() {\n  // [...]\n\n  const PgTypes = DataTypes.postgres;\n\n  // Mandatory: map postgres datatype name\n  DataTypes.SOMETYPE.types.postgres = ['pg_new_type'];\n\n  // Mandatory: create a postgres-specific child datatype with its own parse\n  // method. The parser will be dynamically mapped to the OID of pg_new_type.\n  PgTypes.SOMETYPE = function SOMETYPE() {\n    if (!(this instanceof PgTypes.SOMETYPE)) {\n      return new PgTypes.SOMETYPE();\n    }\n    DataTypes.SOMETYPE.apply(this, arguments);\n  }\n  const util = require('util'); // Built-in Node package\n  util.inherits(PgTypes.SOMETYPE, DataTypes.SOMETYPE);\n\n  // Mandatory: create, override or reassign a postgres-specific parser\n  // PgTypes.SOMETYPE.parse = value => value;\n  PgTypes.SOMETYPE.parse = DataTypes.SOMETYPE.parse || x => x;\n\n  // Optional: add or override methods of the postgres-specific datatype\n  // like toSql, escape, validate, _stringify, _sanitize...\n\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Records with count Method in Sequelize\nDESCRIPTION: Shows how to use the count utility method to count records in the database, with optional filtering using where conditions.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/select-methods.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(`There are ${await Project.count()} projects`);\n\nconst amount = await Project.count({\n  where: {\n    id: {\n      [Op.gt]: 25,\n    },\n  },\n});\nconsole.log(`There are ${amount} projects with an id greater than 25`);\n```\n\n----------------------------------------\n\nTITLE: Creating belongsToMany Association with Custom Source and Target Keys in Sequelize\nDESCRIPTION: This snippet shows how to create a belongsToMany association using custom fields for both source and target models. It references Foo's name field and Bar's title field to create a junction table with fooName and barTitle.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/assocs.md#2025-04-09_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nFoo.belongsToMany(Bar, {\n  through: 'foo_bar',\n  sourceKey: 'name',\n  targetKey: 'title',\n});\n// This creates a junction table `foo_bar` with fields `fooName` and `barTitle`\n```\n\n----------------------------------------\n\nTITLE: Handling Reserved Attribute Names in Sequelize 7\nDESCRIPTION: Illustrates the new restrictions on attribute names that cannot use Sequelize's reserved syntax patterns like starting/ending with '$', including '.', '::' or '->' characters, which are now explicitly disallowed.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/upgrade.md#2025-04-09_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DataTypes, Model } from '@sequelize/core';\n\nclass User extends Model {\n  $myAttribute$: string;\n  'another.attribute': string;\n  'other::attribute': string;\n}\n\nUser.init(\n  {\n    // this key sets the JavaScript name.\n    // It's not allowed to start or end with $ anymore.\n    $myAttribute$: {\n      type: DataTypes.STRING,\n      columnName: '$myAttribute$',\n    },\n    // The JavaScript name is not allowed to include a dot anymore.\n    'another.attribute': {\n      type: DataTypes.STRING,\n      columnName: 'another.attribute',\n    },\n    // The JavaScript name is not allowed to include '::' anymore.\n    'other::attribute': {\n      type: DataTypes.STRING,\n      columnName: 'other::attribute',\n    },\n  },\n  { sequelize },\n);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DataTypes, Model } from '@sequelize/core';\n\nclass User extends Model {\n  myAttribute: string;\n  anotherAttribute: string;\n  otherAttribute: string;\n}\n\nUser.init(\n  {\n    myAttribute: {\n      type: DataTypes.STRING,\n      // Column names are still allowed to start & end with $\n      columnName: '$myAttribute$', // this sets the column name\n    },\n    anotherAttribute: {\n      type: DataTypes.STRING,\n      // Column names are still allowed to include dots\n      columnName: 'another.attribute',\n    },\n    otherAttribute: {\n      type: DataTypes.STRING,\n      // Column names are still allowed to include ::\n      columnName: 'other::attribute',\n    },\n  },\n  { sequelize },\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Sequelize CLI for JavaScript Configuration\nDESCRIPTION: Minimal .sequelizerc file that specifies a JavaScript configuration file instead of the default JSON format. This enables dynamic configuration generation.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/migrations.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('path');\n\nmodule.exports = {\n  config: path.resolve('config', 'config.js'),\n};\n```\n\n----------------------------------------\n\nTITLE: Working with Range Values in Sequelize\nDESCRIPTION: Demonstrates different ways to supply range values in Sequelize, including default bounds, controlled inclusion, and composite forms.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/other-data-types.mdx#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst range = [new Date(Date.UTC(2016, 0, 1)), new Date(Date.UTC(2016, 1, 1))];\n\nconst range = [\n  { value: new Date(Date.UTC(2016, 0, 1)), inclusive: false },\n  { value: new Date(Date.UTC(2016, 1, 1)), inclusive: true },\n];\n\nconst range = [\n  { value: new Date(Date.UTC(2016, 0, 1)), inclusive: false },\n  new Date(Date.UTC(2016, 1, 1)),\n];\n\nconst Timeline = sequelize.define('Timeline', {\n  range: DataTypes.RANGE(DataTypes.DATE),\n});\n\nawait Timeline.create({ range });\n```\n\n----------------------------------------\n\nTITLE: Finding Record with Composite Primary Key in Sequelize\nDESCRIPTION: Demonstrates using findByPk with a composite primary key, passing an object containing all primary key values to locate a specific record.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/select-methods.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst projectMember: ProjectMember | null = await ProjectMember.findByPk({\n  projectId: 123,\n  userId: 456,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating belongsToMany Association with Custom Target Key in Sequelize\nDESCRIPTION: This snippet shows how to create a belongsToMany association using the default primary key for Foo but a custom targetKey (title) for Bar. The junction table will contain fooId and barTitle fields.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/assocs.md#2025-04-09_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nFoo.belongsToMany(Bar, { through: 'foo_bar', targetKey: 'title' });\n// This creates a junction table `foo_bar` with fields `fooId` and `barTitle`\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL over Unix Socket in Sequelize\nDESCRIPTION: Example of creating a Sequelize instance that connects to PostgreSQL over a Unix domain socket. The socket path is specified in the host option and must start with a forward slash.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/dialect-specific-things.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst sequelize = new Sequelize('database', 'username', 'password', {\n  dialect: 'postgres',\n  host: '/path/to/socket_directory',\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Hooks Firing Order in Sequelize\nDESCRIPTION: This diagram shows the sequential firing order of the most common hooks in Sequelize. It illustrates the lifecycle from bulk operations through validation to individual CRUD operations.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/hooks.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n(1)\n  beforeBulkCreate(instances, options)\n  beforeBulkDestroy(options)\n  beforeBulkUpdate(options)\n(2)\n  beforeValidate(instance, options)\n\n[... validation happens ...]\n\n(3)\n  afterValidate(instance, options)\n  validationFailed(instance, options, error)\n(4)\n  beforeCreate(instance, options)\n  beforeDestroy(instance, options)\n  beforeUpdate(instance, options)\n  beforeSave(instance, options)\n  beforeUpsert(values, options)\n\n[... creation/update/destruction happens ...]\n\n(5)\n  afterCreate(instance, options)\n  afterDestroy(instance, options)\n  afterUpdate(instance, options)\n  afterSave(instance, options)\n  afterUpsert(created, options)\n(6)\n  afterBulkCreate(instances, options)\n  afterBulkDestroy(options)\n  afterBulkUpdate(options)\n```\n\n----------------------------------------\n\nTITLE: Using Custom SQL Operators with Template Literals\nDESCRIPTION: Custom SQL operators can be created using the sql template tag to construct expressions with proper escaping, replacing the deprecated string-based operator syntax.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/upgrade.md#2025-04-09_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Expression, Literal, sql } from '@sequelize/core';\n\nfunction myCustomLikeOperator(left: Expression, right: Expression): Literal {\n  return sql`${left} LIKE ${right}`;\n}\n\nUser.findAll({\n  where: myCustomLikeOperator(sql.attribute('firstName'), '%zoe%'),\n});\n```\n\n----------------------------------------\n\nTITLE: Using sql.attribute for Referencing Model Attributes\nDESCRIPTION: The sql.attribute function references Model attributes, mapping them to column names. It supports association reference syntax, casting syntax, and JSON extraction syntax. It's particularly useful in model methods and eager loading scenarios.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/raw-queries.mdx#2025-04-09_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nclass User extends Model {\n  @Attribute({\n    type: DataTypes.STRING,\n    columnName: 'first_name',\n  })\n  declare firstName: string;\n}\n\nUser.findAll({\n  where: sql.where(\n    // highlight-next-line\n    sql.attribute('firstName'),\n    Op.eq,\n    'John',\n  ),\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"users\" WHERE \"first_name\" = 'John'\n```\n\nLANGUAGE: typescript\nCODE:\n```\nUser.findAll({\n  include: [\n    {\n      association: User.associations.posts,\n      where: sql.where(\n        // highlight-next-line\n        sql.attribute('$user$.name'),\n        Op.eq,\n        'Zoe',\n      ),\n    },\n  ],\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nUser.findAll({\n  where: sql.where(\n    // highlight-next-line\n    sql.attribute('createdAt::text'),\n    Op.like,\n    '2012-%',\n  ),\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nUser.findAll({\n  where: sql.where(\n    // This will access the property `name` of the JSON column `data`\n    // highlight-next-line\n    sql.attribute('data.name'),\n    Op.eq,\n    'John',\n  ),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Models with Unique Constraints for Custom Associations in Sequelize\nDESCRIPTION: This snippet shows how to define Ship and Captain models with appropriate constraints for custom association fields. The Captain model includes a unique name field that will be used as a target key for association.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/assocs.md#2025-04-09_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst Ship = sequelize.define('ship', { name: DataTypes.TEXT }, { timestamps: false });\nconst Captain = sequelize.define(\n  'captain',\n  {\n    name: { type: DataTypes.TEXT, unique: true },\n  },\n  { timestamps: false },\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Redshift Connection in Sequelize\nDESCRIPTION: Example of creating a Sequelize instance for connecting to Amazon Redshift. This configuration requires setting clientMinMessages to 'ignore' since Redshift doesn't support this PostgreSQL feature.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/dialect-specific-things.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst sequelize = new Sequelize('database', 'username', 'password', {\n  dialect: 'postgres',\n  dialectOptions: {\n    // Your pg options here\n    // ...\n    clientMinMessages: 'ignore', // case insensitive\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Sequelize and Database Drivers\nDESCRIPTION: Commands for installing Sequelize and various database drivers using npm\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/getting-started.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save sequelize\n```\n\nLANGUAGE: shell\nCODE:\n```\n# One of the following:\n$ npm install --save pg pg-hstore # Postgres\n$ npm install --save mysql2\n$ npm install --save mariadb\n$ npm install --save sqlite3\n$ npm install --save tedious # Microsoft SQL Server\n$ npm install --save oracledb # Oracle Database\n```\n\n----------------------------------------\n\nTITLE: Defining Aliases for Many-to-Many Relationships in Sequelize\nDESCRIPTION: Example of defining aliases for Many-to-Many relationships and how it affects the way includes are performed in queries. This shows how to properly reference the relationship using the defined alias.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/advanced-many-to-many.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nProduct.belongsToMany(Category, {\n  as: 'groups',\n  through: 'product_categories',\n});\nCategory.belongsToMany(Product, { as: 'items', through: 'product_categories' });\n\n// [...]\n\nawait Product.findAll({ include: Category }); // This doesn't work\n\nawait Product.findAll({\n  // This works, passing the alias\n  include: {\n    model: Category,\n    as: 'groups',\n  },\n});\n\nawait Product.findAll({ include: 'groups' }); // This also works\n```\n\n----------------------------------------\n\nTITLE: Querying with Range Contains Operator for Range in Sequelize\nDESCRIPTION: Using Op.contains with range types to check if a range field fully contains another range. This verifies that the specified date range is completely contained within the publishedDuring range.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/operators.mdx#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nPost.findAll({\n  where: {\n    // publishedDuring is a range of dates\n    // This checks if a date range is fully contained within the publishedDuring range\n    publishedDuring: {\n      [Op.contains]: [new Date('2019-01-01'), new Date('2023-01-01')],\n    },\n  },\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"posts\" WHERE \"publishedDuring\" @> '[2019-01-01, 2023-01-01)';\n```\n\n----------------------------------------\n\nTITLE: Using Special Methods in Sequelize HasOne Association (JavaScript)\nDESCRIPTION: Illustrates the usage of special methods added to instances when a hasOne association is defined in Sequelize. It shows how to get, set, and create associated objects.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/assocs.md#2025-04-09_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst foo = await Foo.create({ name: 'the-foo' });\nconst bar1 = await Bar.create({ name: 'some-bar' });\nconst bar2 = await Bar.create({ name: 'another-bar' });\nconsole.log(await foo.getBar()); // null\nawait foo.setBar(bar1);\nconsole.log((await foo.getBar()).name); // 'some-bar'\nawait foo.createBar({ name: 'yet-another-bar' });\nconst newlyAssociatedBar = await foo.getBar();\nconsole.log(newlyAssociatedBar.name); // 'yet-another-bar'\nawait foo.setBar(null); // Un-associate\nconsole.log(await foo.getBar()); // null\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft SQL Server Connection in Sequelize\nDESCRIPTION: Example of creating a Sequelize instance with MSSQL dialect and custom connection options. Note that MSSQL requires options to be nested inside dialectOptions.options for configuring the tedious connector.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/dialect-specific-things.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst sequelize = new Sequelize('database', 'username', 'password', {\n  dialect: 'mssql',\n  dialectOptions: {\n    // Observe the need for this nested `options` field for MSSQL\n    options: {\n      // Your tedious options here\n      useUTC: false,\n      dateFirst: 1,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Paranoid Model in Sequelize\nDESCRIPTION: Shows how to define a Sequelize model with paranoid mode enabled. The example demonstrates setting up a Post model with paranoid true and customizing the deletedAt column name.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/paranoid.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass Post extends Model {}\nPost.init(\n  {\n    /* attributes here */\n  },\n  {\n    sequelize,\n    paranoid: true,\n\n    // If you want to give a custom name to the deletedAt column\n    deletedAt: 'destroyTime',\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Combined NULL Value Querying\nDESCRIPTION: Shows how to query for both SQL NULL and JSON null values in a single query.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/json.mdx#2025-04-09_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { or, SQL_NULL, JSON_NULL } from '@sequelize/core';\n\nUser.findAll({\n  where: {\n    jsonAttribute: or(SQL_NULL, JSON_NULL),\n  },\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"Users\" WHERE \"jsonAttribute\" IS NULL OR \"jsonAttribute\" = 'null';\n```\n\n----------------------------------------\n\nTITLE: Using Op.not Operator in Sequelize\nDESCRIPTION: Shows how to use the Op.not operator to negate conditions in a Sequelize query.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/operators.mdx#2025-04-09_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Op } from '@sequelize/core';\n\nPost.findAll({\n  where: {\n    [Op.not]: {\n      authorId: 12,\n      status: 'active',\n    },\n  },\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"posts\" WHERE NOT (\"authorId\" = 12 AND \"status\" = 'active');\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-Many Association in Sequelize\nDESCRIPTION: Demonstrates how to define a one-to-many relationship between Team and Player models, with options to customize the foreign key name and relationship constraints.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/assocs.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nTeam.hasMany(Player, {\n  foreignKey: 'clubId',\n});\nPlayer.belongsTo(Team);\n```\n\n----------------------------------------\n\nTITLE: Adding Table Comments in MySQL/MariaDB/PostgreSQL with Sequelize\nDESCRIPTION: Shows how to add comments to database tables when defining models using Sequelize.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/dialect-specific-things.md#2025-04-09_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nclass Person extends Model {}\nPerson.init(\n  {\n    /* attributes */\n  },\n  {\n    comment: \"I'm a table comment!\",\n    sequelize,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Shorthand Column Declaration in Sequelize\nDESCRIPTION: This snippet illustrates the shorthand syntax for declaring a column in a Sequelize model when only specifying the data type.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-basics.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// This:\nsequelize.define('User', {\n  name: {\n    type: DataTypes.STRING,\n  },\n});\n\n// Can be simplified to:\nsequelize.define('User', { name: DataTypes.STRING });\n```\n\n----------------------------------------\n\nTITLE: Polymorphic Eager Loading in JavaScript\nDESCRIPTION: Demonstrates how to perform polymorphic eager loading of associated commentables for comments using Sequelize.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/polymorphic-associations.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst comments = await Comment.findAll({\n  include: [Image, Video],\n});\nfor (const comment of comments) {\n  const message = `Found comment #${comment.id} with ${comment.commentableType} commentable:`;\n  console.log(message, comment.commentable.toJSON());\n}\n```\n\n----------------------------------------\n\nTITLE: Using Op.or with Array of Objects in Sequelize\nDESCRIPTION: Demonstrates how to use Op.or with an array of objects to join multiple conditions with OR operator in Sequelize.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/operators.mdx#2025-04-09_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Op } from '@sequelize/core';\n\nPost.findAll({\n  where: {\n    [Op.or]: [{ authorId: 12 }, { status: 'active' }],\n  },\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"posts\" WHERE \"authorId\" = 12 OR \"status\" = 'active';\n```\n\n----------------------------------------\n\nTITLE: One-To-One Relationship SQL Generation\nDESCRIPTION: Shows the SQL generated by Sequelize for a One-To-One relationship with foreign key constraints.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/assocs.md#2025-04-09_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS \"foos\" (\n  /* ... */\n);\nCREATE TABLE IF NOT EXISTS \"bars\" (\n  /* ... */\n  \"fooId\" INTEGER REFERENCES \"foos\" (\"id\") ON DELETE SET NULL ON UPDATE CASCADE\n  /* ... */\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Primary Keys in Sequelize Models\nDESCRIPTION: Examples of defining custom primary keys with different data types and auto-incrementing behavior.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/legacy.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass Collection extends Model {}\nCollection.init(\n  {\n    uid: {\n      type: DataTypes.INTEGER,\n      primaryKey: true,\n      autoIncrement: true, // Automatically gets converted to SERIAL for postgres\n    },\n  },\n  { sequelize },\n);\n\nclass Collection extends Model {}\nCollection.init(\n  {\n    uuid: {\n      type: DataTypes.UUID,\n      primaryKey: true,\n    },\n  },\n  { sequelize },\n);\n```\n\n----------------------------------------\n\nTITLE: Defining String Data Types in Sequelize\nDESCRIPTION: This code block demonstrates various string data types available in Sequelize, including VARCHAR and TEXT variants.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-basics.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nDataTypes.STRING; // VARCHAR(255)\nDataTypes.STRING(1234); // VARCHAR(1234)\nDataTypes.STRING.BINARY; // VARCHAR BINARY\nDataTypes.TEXT; // TEXT\nDataTypes.TEXT('tiny'); // TINYTEXT\nDataTypes.CITEXT; // CITEXT          PostgreSQL and SQLite only.\nDataTypes.TSVECTOR; // TSVECTOR        PostgreSQL only.\n```\n\n----------------------------------------\n\nTITLE: Setting Default Transaction Nest Mode in Sequelize Constructor\nDESCRIPTION: Demonstrates how to set the default transaction nest mode globally when initializing a new Sequelize instance. This affects all transactions unless overridden.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/transactions.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nnew Sequelize({\n  /* options */\n  defaultTransactionNestMode: TransactionNestMode.savepoint,\n});\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Bind Parameters in Sequelize v7\nDESCRIPTION: Demonstrates how bind parameters in SQL queries are handled differently in Sequelize v7 compared to v6, no longer requiring escaping.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/upgrade.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await this.sequelize.query(`select * from users WHERE id = '$one'`);\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for Image Tag Query\nDESCRIPTION: SQL query generated when calling image.getTags() showing how the taggableType scope is automatically applied in the WHERE clause.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/polymorphic-associations.md#2025-04-09_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  `tag`.`id`,\n  `tag`.`name`,\n  `tag`.`createdAt`,\n  `tag`.`updatedAt`,\n  `tag_taggable`.`tagId` AS `tag_taggable.tagId`,\n  `tag_taggable`.`taggableId` AS `tag_taggable.taggableId`,\n  `tag_taggable`.`taggableType` AS `tag_taggable.taggableType`,\n  `tag_taggable`.`createdAt` AS `tag_taggable.createdAt`,\n  `tag_taggable`.`updatedAt` AS `tag_taggable.updatedAt`\nFROM `tags` AS `tag`\nINNER JOIN `tag_taggables` AS `tag_taggable` ON\n  `tag`.`id` = `tag_taggable`.`tagId` AND\n  `tag_taggable`.`taggableId` = 1 AND\n  `tag_taggable`.`taggableType` = 'image';\n```\n\n----------------------------------------\n\nTITLE: Adding a Column to a Table using Query Interface in Sequelize\nDESCRIPTION: This snippet shows how to add a new column 'petName' of type STRING to the 'Person' table using the Query Interface.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/query-interface.md#2025-04-09_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nqueryInterface.addColumn('Person', 'petName', { type: DataTypes.STRING });\n```\n\nLANGUAGE: SQL\nCODE:\n```\nALTER TABLE `Person` ADD `petName` VARCHAR(255);\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for Pending Tags Query\nDESCRIPTION: SQL query generated when calling image.getPendingTags() showing how both through model and target model scopes are applied.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/polymorphic-associations.md#2025-04-09_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  `tag`.`id`,\n  `tag`.`name`,\n  `tag`.`status`,\n  `tag`.`createdAt`,\n  `tag`.`updatedAt`,\n  `tag_taggable`.`tagId` AS `tag_taggable.tagId`,\n  `tag_taggable`.`taggableId` AS `tag_taggable.taggableId`,\n  `tag_taggable`.`taggableType` AS `tag_taggable.taggableType`,\n  `tag_taggable`.`createdAt` AS `tag_taggable.createdAt`,\n  `tag_taggable`.`updatedAt` AS `tag_taggable.updatedAt`\nFROM `tags` AS `tag`\nINNER JOIN `tag_taggables` AS `tag_taggable` ON\n  `tag`.`id` = `tag_taggable`.`tagId` AND\n  `tag_taggable`.`taggableId` = 1 AND\n  `tag_taggable`.`taggableType` = 'image'\nWHERE (\n  `tag`.`status` = 'pending'\n);\n```\n\n----------------------------------------\n\nTITLE: Ordering Many-to-Many Associations by Junction Table Attributes\nDESCRIPTION: Shows how to sort many-to-many relationships by attributes in the junction table by specifying the junction model in the order path.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/eager-loading.md#2025-04-09_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nCompany.findAll({\n  include: {\n    model: Division,\n    include: Department,\n  },\n  order: [[Division, DepartmentDivision, 'name', 'ASC']],\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing DataTypes - Deprecated Pattern\nDESCRIPTION: Shows the deprecated way of accessing DataTypes through the Sequelize constructor.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/upgrade.md#2025-04-09_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Sequelize } from '@sequelize/core';\n\nSequelize.STRING;\nSequelize.INTEGER;\n```\n\n----------------------------------------\n\nTITLE: Updating Comments with Polymorphic Association in SQL\nDESCRIPTION: Shows the SQL query generated by Sequelize when updating a comment's association using polymorphic association.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/polymorphic-associations.md#2025-04-09_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE \"comments\"\nSET \"commentableId\"=1, \"commentableType\"='image', \"updatedAt\"='2018-04-17 05:38:43.948 +00:00'\nWHERE \"id\" IN (1)\n```\n\n----------------------------------------\n\nTITLE: Using Sequelize Migration Tools Reference\nDESCRIPTION: Documentation showcasing the available tools and approaches for managing database schema migrations in Sequelize, including the official CLI, Umzug, and third-party diff tools.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/migrations.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Database Schema Upgrades\n\nOnce your database has production data that should not be lost,\nyou cannot follow the `sequelize.sync` approach of dropping the databases\nand recreating them with a new schema when you need to make changes.\n\nThere are multiple possible approaches to upgrading your database schema.\nWhich one works best for you will depend on your specific requirements.\n\n## Using Migrations\n\nMigrations are a way to version control your database schema,\nallowing you to easily upgrade and downgrade your database as your application evolves.\n\nSequelize provides [`@sequelize/cli`](../cli.md), a Command Line Interface that can be used to create and run migrations.\nHead to [the `@sequelize/cli` page](../cli.md) for more information on how to write migrations.\n\nOf course, you are free to use any other migration tool:\n\n- [Umzug](https://github.com/sequelize/umzug) is a great alternative that the Sequelize CLI uses under the hood.\n- Third-party tools that can be used to help with migrations are also listed on the [Third-Party Resources](../other-topics/resources.md#migrations) page.\n\n## Using a Database Diff Tool\n\nYou can use a database diff tool to compare the current database schema with the new schema you want to apply.\nOne such tool is [pg-diff](https://michaelsogos.github.io/pg-diff/).\n\nIn this approach, you would generate a diff as part of your release process and apply it to the database.\n```\n\n----------------------------------------\n\nTITLE: Basic Raw Query Execution\nDESCRIPTION: Demonstrates basic usage of sequelize.query for executing raw SQL queries with metadata handling.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/raw-queries.mdx#2025-04-09_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst [results, metadata] = await sequelize.query('UPDATE users SET y = 42 WHERE x = 12');\n// Results will be an empty array and metadata will contain the number of affected rows.\n```\n\n----------------------------------------\n\nTITLE: Implementing Association Adder in Sequelize TypeScript\nDESCRIPTION: Demonstrates implementation of addX methods for adding single or multiple associations without removing existing ones. Includes both singular and plural versions of the method.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/belongs-to-many.md#2025-04-09_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  BelongsToManyAddAssociationMixin,\n  BelongsToManyAddAssociationsMixin,\n} from '@sequelize/core';\n\nclass Author extends Model<InferAttributes<Author>, InferCreationAttributes<Author>> {\n  @BelongsToMany(() => Book, { through: 'BookAuthor' })\n  declare books?: NonAttribute<Book[]>;\n\n  declare addBook: BelongsToManyAddAssociationMixin<\n    Book,\n    Book['id']\n  >;\n\n  declare addBooks: BelongsToManyAddAssociationsMixin<\n    Book,\n    Book['id']\n  >;\n}\n\nconst author = await Author.findByPk(1);\nconst [book1, book2, book3] = await Book.findAll({ limit: 3 });\n\nawait author.addBook(book1);\n\nawait author.addBooks([book1, book2]);\n\nawait author.addBook(1);\nawait author.addBooks([1, 2, 3]);\n```\n\n----------------------------------------\n\nTITLE: Where Option Validation in Sequelize 7\nDESCRIPTION: Shows how Sequelize 7 now throws errors when invalid values are provided to the where option, instead of silently ignoring them as in Sequelize 6, improving error detection.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/upgrade.md#2025-04-09_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nUser.findAll({\n  where: new Date(),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Comments with Polymorphic Association in SQL\nDESCRIPTION: Demonstrates the SQL query generated by Sequelize when creating a new comment associated with an image using polymorphic association.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/polymorphic-associations.md#2025-04-09_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO \"comments\" (\n  \"id\", \"title\", \"commentableType\", \"commentableId\", \"createdAt\", \"updatedAt\"\n) VALUES (\n  DEFAULT, 'Awesome!', 'image', 1,\n  '2018-04-17 05:36:40.454 +00:00', '2018-04-17 05:36:40.454 +00:00'\n) RETURNING *;\n```\n\n----------------------------------------\n\nTITLE: Initializing Sequelize Project\nDESCRIPTION: Command to bootstrap a new Sequelize project, creating the necessary folder structure.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/migrations.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nnpx sequelize-cli init\n```\n\n----------------------------------------\n\nTITLE: Using sql.col for Backwards-Compatible Column References\nDESCRIPTION: The sql.col function is a legacy method for referencing column names. It's similar to sql.identifier but handles the '*' character differently. It's recommended to use sql.attribute or sql.identifier in new code.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/raw-queries.mdx#2025-04-09_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Displaying MIT License Text for Sequelize Library\nDESCRIPTION: This snippet shows the full text of the MIT License under which Sequelize is distributed. It outlines the permissions, conditions, and limitations of using the software.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/legal.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nMIT License\n\nCopyright (c) 2014-present Sequelize contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Array Handling in Query Replacements with Sequelize 7\nDESCRIPTION: Arrays in query replacements are now treated as SQL arrays by default. The sql.list function can be used to convert arrays to SQL lists when needed.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/upgrade.md#2025-04-09_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nsequelize.query('SELECT * FROM users WHERE id = ANY(:ids)', {\n  replacements: {\n    ids: [1, 2, 3],\n  },\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM users WHERE id = ANY(ARRAY[1, 2, 3])\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sql } from '@sequelize/core';\n\nsequelize.query('SELECT * FROM users WHERE id IN :ids', {\n  replacements: {\n    ids: sql.list([1, 2, 3]),\n  },\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM users WHERE id IN (1, 2, 3)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nsequelize.query('SELECT * FROM users WHERE id IN $ids', {\n  bind: {\n    ids: sql.list([1, 2, 3]),\n  },\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\n-- The bind parameter syntax changes depending on the dialect, they are represented here as \"?\"\n-- As you can see, this produced 3 bind parameters, one for each value in the list\nSELECT * FROM users WHERE id IN (?, ?, ?)\n```\n\n----------------------------------------\n\nTITLE: Adding Primary Key to Through Table in Sequelize Many-to-Many Association\nDESCRIPTION: This code demonstrates how to add a primary key to the through table in a Many-to-Many relationship, instead of using a composite unique key.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/advanced-many-to-many.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst User_Profile = sequelize.define(\n  'User_Profile',\n  {\n    id: {\n      type: DataTypes.INTEGER,\n      primaryKey: true,\n      autoIncrement: true,\n      allowNull: false,\n    },\n    selfGranted: DataTypes.BOOLEAN,\n  },\n  { timestamps: false },\n);\nUser.belongsToMany(Profile, { through: User_Profile });\nProfile.belongsToMany(User, { through: User_Profile });\n```\n\n----------------------------------------\n\nTITLE: Sequelize Configuration File\nDESCRIPTION: Default configuration file showing database connection settings for different environments.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/migrations.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"development\": {\n    \"username\": \"root\",\n    \"password\": null,\n    \"database\": \"database_development\",\n    \"host\": \"127.0.0.1\",\n    \"dialect\": \"mysql\"\n  },\n  \"test\": {\n    \"username\": \"root\",\n    \"password\": null,\n    \"database\": \"database_test\",\n    \"host\": \"127.0.0.1\",\n    \"dialect\": \"mysql\"\n  },\n  \"production\": {\n    \"username\": \"root\",\n    \"password\": null,\n    \"database\": \"database_production\",\n    \"host\": \"127.0.0.1\",\n    \"dialect\": \"mysql\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL NULL Insertion using SQL_NULL Constant\nDESCRIPTION: Shows how to explicitly insert SQL NULL into a JSON column using the SQL_NULL constant.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/json.mdx#2025-04-09_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SQL_NULL } from '@sequelize/core';\n\nUser.create({\n  jsonAttribute: SQL_NULL,\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO \"Users\" (\"jsonAttribute\") VALUES (NULL);\n```\n\n----------------------------------------\n\nTITLE: Output Without Through Table Attributes in Many-to-Many Query\nDESCRIPTION: JSON output when excluding all through table attributes in a Many-to-Many relationship. Shows the result of using through.attributes: [] to completely remove the nested through model object.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/advanced-many-to-many.md#2025-04-09_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 4,\n  \"username\": \"p4dm3\",\n  \"points\": 1000,\n  \"profiles\": [\n    {\n      \"id\": 6,\n      \"name\": \"queen\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Association Resolution in Sequelize v7 Includes\nDESCRIPTION: Demonstrates the recommended way to specify associations in includes for Sequelize v7. The 'association' option is now preferred over using 'as' and 'model' combinations.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/upgrade.md#2025-04-09_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nawait User.findAll({\n  include: [User.associations.projects],\n});\n\nawait User.findAll({\n  include: ['projects'],\n});\n\nawait User.findAll({\n  include: [\n    {\n      association: 'projects',\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Unique Key in Sequelize Many-to-Many Association\nDESCRIPTION: This snippet shows how to customize the name of the composite unique key in a Many-to-Many relationship's through table using the uniqueKey option.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/advanced-many-to-many.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nUser.belongsToMany(Profile, {\n  through: User_Profiles,\n  uniqueKey: 'my_custom_unique',\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Seeder File\nDESCRIPTION: Command to create a new seeder file for populating the database with sample data.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/migrations.md#2025-04-09_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nnpx sequelize-cli seed:generate --name demo-user\n```\n\n----------------------------------------\n\nTITLE: Model Association with Snake Case\nDESCRIPTION: Demonstrates how to set up models with associations using snake case column naming.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/naming-strategies.mdx#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Model, NonAttribute, InferAttributes, InferCreationAttributes } from '@sequelize/core';\nimport { Table, Attribute, BelongsTo } from '@sequelize/core/decorators-legacy';\n\n@Table({ underscored: true })\nclass User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n  @Attribute(DataTypes.STRING)\n  declare username: string | null;\n}\n\n@Table({ underscored: true })\nclass Task extends Model {\n  @Attribute(DataTypes.STRING)\n  declare title: string | null;\n\n  @BelongsTo(() => User)\n  declare user: NonAttribute<User>;\n\n  declare UserId: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Circular References in Sequelize Models\nDESCRIPTION: Demonstrates a typical circular reference scenario between Document and Version models, where a Document has many Versions and also belongs to a Current Version, which results in a cyclic dependency error.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/constraints-and-circularities.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Sequelize, Model, DataTypes } = require('sequelize');\n\nclass Document extends Model {}\nDocument.init(\n  {\n    author: DataTypes.STRING,\n  },\n  { sequelize, modelName: 'document' },\n);\n\nclass Version extends Model {}\nVersion.init(\n  {\n    timestamp: DataTypes.DATE,\n  },\n  { sequelize, modelName: 'version' },\n);\n\nDocument.hasMany(Version); // This adds documentId attribute to version\nDocument.belongsTo(Version, {\n  as: 'Current',\n  foreignKey: 'currentVersionId',\n}); // This adds currentVersionId attribute to document\n```\n\n----------------------------------------\n\nTITLE: Eager-Loading Soft-Deleted Records\nDESCRIPTION: Shows how to include soft-deleted records when eager loading associations by setting the paranoid option.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/paranoid.mdx#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nUser.findAll({\n  include: [\n    {\n      association: 'projects',\n      paranoid: false,\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Many-to-Many Relationships with Nested Create Call in Sequelize\nDESCRIPTION: This code shows how to create a User with associated Profile and custom through table data in a single create call using Sequelize's include option.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/advanced-many-to-many.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst amidala = await User.create(\n  {\n    username: 'p4dm3',\n    points: 1000,\n    profiles: [\n      {\n        name: 'Queen',\n        User_Profile: {\n          selfGranted: true,\n        },\n      },\n    ],\n  },\n  {\n    include: Profile,\n  },\n);\n\nconst result = await User.findOne({\n  where: { username: 'p4dm3' },\n  include: Profile,\n});\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Migration Skeleton in JavaScript\nDESCRIPTION: The basic structure of a Sequelize migration file with up and down methods. The up method transforms the database to the new state while the down method reverts the changes.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/migrations.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  up: (queryInterface, Sequelize) => {\n    // logic for transforming into the new state\n  },\n  down: (queryInterface, Sequelize) => {\n    // logic for reverting the changes\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing DialectTableFilter Component in JSX\nDESCRIPTION: This code snippet imports the DialectTableFilter component from a local file. The component is likely used to create a filterable table for displaying dialect-specific information.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/_fragments/_uuid-support-table.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DialectTableFilter } from '@site/src/components/dialect-table-filter.tsx';\n```\n\n----------------------------------------\n\nTITLE: Using Locks in Sequelize Transactions (JavaScript)\nDESCRIPTION: Demonstrates how to perform queries with locks within a transaction, which prevents other transactions from modifying the selected rows until the current transaction completes.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/transactions.md#2025-04-09_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nreturn User.findAll({\n  limit: 1,\n  lock: true,\n  transaction: t1,\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Optimistic Locking with @Version Decorator in TypeScript\nDESCRIPTION: This snippet demonstrates how to enable optimistic locking in a Sequelize model using TypeScript. It uses the @Version decorator to mark the version attribute, which will be used as the version count for optimistic locking.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/optimistic-locking.mdx#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InferCreationAttributes, InferAttributes, Model, CreationOptional } from '@sequelize/core';\nimport { Version } from '@sequelize/core/decorators-legacy';\n\nclass User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n  @Version\n  declare version: CreationOptional<number>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Querying Many-to-Many Relationships with Custom Fields in Sequelize\nDESCRIPTION: This snippet demonstrates how to create records with Many-to-Many relationships and custom fields, and then query them using Sequelize's findOne method with includes.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/advanced-many-to-many.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst amidala = await User.create({ username: 'p4dm3', points: 1000 });\nconst queen = await Profile.create({ name: 'Queen' });\nawait amidala.addProfile(queen, { through: { selfGranted: false } });\nconst result = await User.findOne({\n  where: { username: 'p4dm3' },\n  include: Profile,\n});\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Installing Sequelize CLI\nDESCRIPTION: Commands to install the Sequelize CLI as a dev dependency using npm or yarn.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/cli.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# using npm\nnpm install --save-dev sequelize-cli\n# using yarn\nyarn add sequelize-cli --dev\n```\n\n----------------------------------------\n\nTITLE: Importing Sequelize Decorators in TypeScript\nDESCRIPTION: Demonstrates how to import the Attribute and Table decorators from Sequelize's legacy decorators module. These decorators are used for defining model attributes and tables in Sequelize using TypeScript.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/_fragments/_decorator-info.mdx#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Attribute, Table } from '@sequelize/core/decorators-legacy';\n```\n\n----------------------------------------\n\nTITLE: Creating Associated Models with HasManyCreateAssociationMixin in Sequelize TypeScript\nDESCRIPTION: This example demonstrates how to define and use the association creator method (createComment) to create a new Comment model associated with a Post. The HasManyCreateAssociationMixin type is used to properly type the method, with the second generic parameter specifying which foreign key will be automatically handled.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/has-many.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HasManyCreateAssociationMixin } from '@sequelize/core';\n\nclass Post extends Model<InferAttributes<Post>, InferCreationAttributes<Post>> {\n  @HasMany(() => Comment, 'postId')\n  declare comments?: NonAttribute<Comment[]>;\n\n  // highlight-start\n  declare createComment: HasManyCreateAssociationMixin<Comment, 'postId'>;\n  // highlight-end\n}\n\n// ...\n\nconst post = await Post.findByPk(1);\n\n// highlight-start\nconst comment = await post.createComment({\n  content: 'This is a comment',\n});\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Configuring Global noPrimaryKey Option in Sequelize (JavaScript)\nDESCRIPTION: This code shows how to configure the noPrimaryKey option globally for all models in Sequelize using JavaScript. It prevents the addition of default primary keys for every model.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/advanced.mdx#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass User extends Model {}\n\nconst sequelize = new Sequelize({\n  dialect: SqliteDialect,\n  define: {\n    noPrimaryKey: true,\n  },\n  models: [User],\n});\n```\n\n----------------------------------------\n\nTITLE: Using Attributes in Where Conditions with Sequelize 7\nDESCRIPTION: Demonstrates the change from using Model.rawAttributes in where conditions to using the new sql.attribute() syntax, improving clarity and consistency in the API.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/upgrade.md#2025-04-09_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nwhere(User.rawAttributes.firstName, Op.like, 'foo');\n```\n\nLANGUAGE: typescript\nCODE:\n```\nsql.where(sql.attribute('firstName'), Op.like, 'foo');\n```\n\n----------------------------------------\n\nTITLE: Initializing Sequelize Project\nDESCRIPTION: Commands to bootstrap a new Sequelize project structure using the CLI init command.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/cli.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# using npm\nnpx sequelize-cli init\n# using yarn\nyarn sequelize-cli init\n```\n\n----------------------------------------\n\nTITLE: Defining Singular and Plural Forms Directly on a Model\nDESCRIPTION: Example of defining custom singular and plural forms directly on a Sequelize model. This affects all associations that use this model without needing to specify aliases for each association.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/naming-strategies.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst User = sequelize.define(\n  'user',\n  {\n    /* ... */\n  },\n  {\n    name: {\n      singular: 'líder',\n      plural: 'líderes',\n    },\n  },\n);\nProject.belongsToMany(User);\n```\n\n----------------------------------------\n\nTITLE: Using sql.join for Combining SQL Fragments\nDESCRIPTION: The sql.join function is used to join multiple SQL fragments together, similar to Array.prototype.join. It can be used with identifiers, values, or other SQL fragments, and supports custom separators.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/raw-queries.mdx#2025-04-09_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst columns = [sql.identifier('name'), sql.identifier('funding')];\n\nawait sequelize.query(sql`SELECT ${sql.join(columns, ', ')} FROM projects`);\n```\n\nLANGUAGE: sql\nCODE:\n```\n-- The identifier quotes are dialect-specific, this is an example for PostgreSQL\nSELECT \"name\", \"funding\" FROM projects\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst values = ['active', 'pending'];\n\nawait sequelize.query(sql`SELECT * FROM projects WHERE status IN (${sql.join(values, ', ')})`);\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM projects WHERE status IN ('active', 'pending')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst values = ['active', 'pending'];\n\nawait sequelize.query(sql`SELECT * FROM projects WHERE status IN ${sql.join(values, sql`, `)}`);\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM projects WHERE status IN ('active', 'pending')\n```\n\n----------------------------------------\n\nTITLE: Manual Table Name Configuration\nDESCRIPTION: Shows how to manually specify a table name using the tableName option.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/models/naming-strategies.mdx#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Model } from '@sequelize/core';\nimport { Table } from '@sequelize/core/decorators-legacy';\n\n@Table({ tableName: 'users' })\nclass User extends Model {}\n```\n\n----------------------------------------\n\nTITLE: Changed Behavior of Where Clauses in Scopes\nDESCRIPTION: Shows how scope where clauses are now merged using the AND operator in Sequelize 7, instead of overwriting conditions on shared attributes as they did in Sequelize 6, leading to more intuitive query behavior.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/upgrade.md#2025-04-09_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nYourModel.addScope('scope1', {\n  where: {\n    firstName: 'bob',\n    age: {\n      [Op.gt]: 20,\n    },\n  },\n  limit: 2,\n});\nYourModel.addScope('scope2', {\n  where: {\n    age: {\n      [Op.lt]: 30,\n    },\n  },\n  limit: 10,\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nWHERE firstName = 'bob' AND age < 30 LIMIT 10\n```\n\nLANGUAGE: sql\nCODE:\n```\nWHERE firstName = 'bob' AND age > 20 AND age < 30 LIMIT 10\n```\n\n----------------------------------------\n\nTITLE: Conditional Unique Index Migration\nDESCRIPTION: Migration creating a multi-field unique index with a condition.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/cli.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst { DataTypes } = require('@sequelize/core');\n\nmodule.exports = {\n  up: queryInterface => {\n    queryInterface\n      .createTable('Person', {\n        name: DataTypes.STRING,\n        bool: {\n          type: DataTypes.BOOLEAN,\n          defaultValue: false,\n        },\n      })\n      .then((queryInterface, Sequelize) => {\n        queryInterface.addIndex('Person', ['name', 'bool'], {\n          type: 'UNIQUE',\n          where: { bool: 'true' },\n        });\n      });\n  },\n  down: queryInterface => {\n    return queryInterface.dropTable('Person');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Sequelize Model with Singular Form\nDESCRIPTION: Example of defining a Sequelize model using the singular form of a word. Sequelize automatically pluralizes the model name for the database table name.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/naming-strategies.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsequelize.define('foo', { name: DataTypes.STRING });\n```\n\n----------------------------------------\n\nTITLE: Configuring Sequelize to Use CLS Namespace\nDESCRIPTION: This snippet shows how to configure Sequelize to use a CLS namespace for transaction management. This enables automatic transaction passing to all queries within a transaction scope.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/transactions.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst Sequelize = require('sequelize');\nSequelize.useCLS(namespace);\n\nnew Sequelize(....);\n```\n\n----------------------------------------\n\nTITLE: Advanced BelongsToMany Association with Scopes\nDESCRIPTION: Demonstrates how to implement multiple scoped BelongsToMany associations to filter authors based on their roles in game development using through table scopes.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/association-scopes.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass Game extends Model {\n  /** This association will list everyone that worked on the game */\n  @BelongsToMany(() => Person, {\n    through: GameAuthor,\n    foreignKey: 'gameId',\n    otherKey: 'personId',\n  })\n  allAuthors;\n\n  /** This association will list everyone that worked on the game as a programmer */\n  @BelongsToMany(() => Person, {\n    through: {\n      model: GameAuthor,\n      foreignKey: 'gameId',\n      otherKey: 'personId',\n      scope: { role: 'programmer' },\n    },\n  })\n  programmers;\n\n  /** This association will list everyone that worked on the game as a designer */\n  @BelongsToMany(() => Person, {\n    through: {\n      model: GameAuthor,\n      foreignKey: 'gameId',\n      otherKey: 'personId',\n      scope: { role: 'designer' },\n    },\n  })\n  designers;\n}\n\nconst game = await Game.findByPk(1);\n\n// this will return all authors\nconst allAuthors = await game.getAllAuthors();\n\n// this will return only programmers\nconst programmers = await game.getProgrammers();\n\n// this will return only designers\nconst designers = await game.getDesigners();\n```\n\n----------------------------------------\n\nTITLE: Changes to Internal Model Method Calls in Sequelize 7\nDESCRIPTION: Demonstrates that overridden Model methods like findOne and findAll won't be called internally by other methods such as findByPk, making method overriding safer and more predictable.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/upgrade.md#2025-04-09_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nclass User extends Model {\n  static findOne() {\n    throw new Error('Do not call findOne');\n  }\n}\n\n// this would have thrown \"Do not call findOne\" in v6\n// but it works in v7\nUser.findByPk(1);\n```\n\n----------------------------------------\n\nTITLE: Sequelize Configuration File\nDESCRIPTION: Custom configuration file (.sequelizerc) for specifying paths and options\nSOURCE: https://github.com/sequelize/website/blob/main/docs/cli.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('path');\n\nmodule.exports = {\n  config: path.resolve('config', 'database.json'),\n  'models-path': path.resolve('db', 'models'),\n  'seeders-path': path.resolve('db', 'seeders'),\n  'migrations-path': path.resolve('db', 'migrations')\n};\n```\n\n----------------------------------------\n\nTITLE: Using sequelize.import with file path in Sequelize (JavaScript)\nDESCRIPTION: Demonstrates how to import a model definition from a separate file using the deprecated sequelize.import method with a file path. The imported model is defined in a separate file that exports a function receiving sequelize and DataTypes parameters.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/moved/models-definition.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// in your server file - e.g. app.js\nconst Project = sequelize.import(__dirname + '/path/to/models/project');\n\n// The model definition is done in /path/to/models/project.js\nmodule.exports = (sequelize, DataTypes) => {\n  return sequelize.define('project', {\n    name: DataTypes.STRING,\n    description: DataTypes.TEXT,\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Eager Loading Many-to-Many Relationships in Sequelize\nDESCRIPTION: Example of defining and eager loading a Many-to-Many relationship in Sequelize. The code demonstrates how Sequelize fetches junction table data by default when performing eager loading on models with Belongs-to-Many relationships.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/eager-loading.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst Foo = sequelize.define('Foo', { name: DataTypes.TEXT });\nconst Bar = sequelize.define('Bar', { name: DataTypes.TEXT });\nFoo.belongsToMany(Bar, { through: 'Foo_Bar' });\nBar.belongsToMany(Foo, { through: 'Foo_Bar' });\n\nawait sequelize.sync();\nconst foo = await Foo.create({ name: 'foo' });\nconst bar = await Bar.create({ name: 'bar' });\nawait foo.addBar(bar);\nconst fetchedFoo = await Foo.findOne({ include: Bar });\nconsole.log(JSON.stringify(fetchedFoo, null, 2));\n```\n\n----------------------------------------\n\nTITLE: Configuring Foreign Keys in Sequelize Associations\nDESCRIPTION: Shows how to set up custom foreign key names for different types of associations (1:1, 1:M, N:M) between models.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/legacy.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// 1:1\nOrganization.belongsTo(User, { foreignKey: 'owner_id' });\nUser.hasOne(Organization, { foreignKey: 'owner_id' });\n\n// 1:M\nProject.hasMany(Task, { foreignKey: 'tasks_pk' });\nTask.belongsTo(Project, { foreignKey: 'tasks_pk' });\n\n// N:M\nUser.belongsToMany(Role, {\n  through: 'user_has_roles',\n  foreignKey: 'user_role_user_id',\n});\nRole.belongsToMany(User, {\n  through: 'user_has_roles',\n  foreignKey: 'roles_identifier',\n});\n```\n\n----------------------------------------\n\nTITLE: Using SQL Functions for Unescaped Attributes in Sequelize 7\nDESCRIPTION: To get the v6 behavior in Sequelize 7, you must explicitly use sql helper functions like literal, col, or fn to indicate when attributes should not be escaped.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/upgrade.md#2025-04-09_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nUser.findAll({\n  attributes: [sql.col('*'), sql.col('a.*'), [sql`count(id)`, 'count']],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Seed Storage in Sequelize\nDESCRIPTION: JSON configuration example showing how to customize seed storage settings including storage type, file path, and table name for development environment.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/cli.md#2025-04-09_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"development\": {\n    \"username\": \"root\",\n    \"password\": null,\n    \"database\": \"database_development\",\n    \"host\": \"127.0.0.1\",\n    \"dialect\": \"mysql\",\n    // Use a different storage. Default: none\n    \"seederStorage\": \"json\",\n    // Use a different file name. Default: sequelize-data.json\n    \"seederStoragePath\": \"sequelizeData.json\",\n    // Use a different table name. Default: SequelizeData\n    \"seederStorageTableName\": \"sequelize_data\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using rejectOnEmpty with findOne in Sequelize\nDESCRIPTION: Demonstrates using the rejectOnEmpty option with findOne to throw an error when no matching record is found. This is useful in TypeScript to avoid redundant null checks.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/select-methods.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// project will be of type Project, not Project | null\nconst project = await Project.findOne({\n  where: { title: 'My Title' },\n  rejectOnEmpty: true,\n});\n```\n\n----------------------------------------\n\nTITLE: JSON Output Without Junction Table Attributes\nDESCRIPTION: Shows the JSON output from eager loading a Many-to-Many relationship when junction table attributes are excluded, demonstrating that the junction model property is completely omitted from the result.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/advanced-association-concepts/eager-loading.md#2025-04-09_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"name\": \"foo\",\n  \"Bars\": [\n    {\n      \"id\": 1,\n      \"name\": \"bar\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Cyclic Dependency Error in Sequelize\nDESCRIPTION: Shows the error message that occurs when a circular reference is detected between models during synchronization.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/constraints-and-circularities.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nCyclic dependency found. documents is dependent of itself. Dependency chain: documents -> versions => documents\n```\n\n----------------------------------------\n\nTITLE: Implementing Stateless AWS Lambda Function with Caching in Node.js\nDESCRIPTION: This snippet demonstrates how to implement a stateless Lambda function that uses caching for improved performance. It shows how to initialize and reuse a Sequelize instance across container invocations.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/aws-lambda.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlet sequelize = null;\n\nmodule.exports.handler = async function () {\n  /*\n   * sequelize will already be loaded if the container is re-used\n   *\n   * containers are never re-used when a Lambda function's code change\n   *\n   * while the time elapsed between Lambda invocations is used as a factor to determine whether\n   * a container is re-used, no assumptions should be made of when a container is actually re-used\n   *\n   * AWS does not publicly document the rules of container re-use \"by design\" since containers\n   * can be recycled in response to internal AWS Lambda events (e.g. a Lambda function container\n   * may be recycled even if the function is constanly invoked)\n   */\n  if (!sequelize) {\n    sequelize = await loadSequelize();\n  }\n\n  return await doSomethingWithSequelize(sequelize);\n};\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Transformed Bind Parameters in Sequelize v7\nDESCRIPTION: Shows how Sequelize v7 still transforms valid bind parameters in SQL queries to dialect-specific syntax.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/upgrade.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await this.sequelize.query(`select * from users WHERE id = $id`);\n```\n\n----------------------------------------\n\nTITLE: Installing MariaDB Dialect Package for Sequelize\nDESCRIPTION: This command installs the @sequelize/mariadb dialect package, which is required to use Sequelize with MariaDB.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/databases/mariadb.mdx#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @sequelize/mariadb\n```\n\n----------------------------------------\n\nTITLE: Using Op.or with Object Conditions in Sequelize\nDESCRIPTION: Shows how to use the Op.or operator to join multiple conditions with OR instead of the default AND operator.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/operators.mdx#2025-04-09_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Op } from '@sequelize/core';\n\nPost.findAll({\n  where: {\n    [Op.or]: {\n      authorId: 12,\n      status: 'active',\n    },\n  },\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"posts\" WHERE \"authorId\" = 12 OR \"status\" = 'active';\n```\n\n----------------------------------------\n\nTITLE: Implementing Stateless AWS Lambda Function with Caching in Node.js\nDESCRIPTION: This snippet demonstrates how to implement a stateless Lambda function that uses caching for improved performance. It shows how to initialize and reuse a Sequelize instance across container invocations.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/aws-lambda.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlet sequelize = null;\n\nmodule.exports.handler = async function () {\n  /*\n   * sequelize will already be loaded if the container is re-used\n   *\n   * containers are never re-used when a Lambda function's code change\n   *\n   * while the time elapsed between Lambda invocations is used as a factor to determine whether\n   * a container is re-used, no assumptions should be made of when a container is actually re-used\n   *\n   * AWS does not publicly document the rules of container re-use \"by design\" since containers\n   * can be recycled in response to internal AWS Lambda events (e.g. a Lambda function container\n   * may be recycled even if the function is constanly invoked)\n   */\n  if (!sequelize) {\n    sequelize = await loadSequelize();\n  }\n\n  return await doSomethingWithSequelize(sequelize);\n};\n```\n\n----------------------------------------\n\nTITLE: Model Definition with Nullable Attributes\nDESCRIPTION: Shows how to handle nullable attributes in TypeScript models without requiring CreationOptional.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/typescript.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n  declare firstName: string;\n\n  // there is no need to use CreationOptional on lastName because nullable attributes\n  // are always optional in User.create()\n  declare lastName: string | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License 2.0 Boilerplate Notice\nDESCRIPTION: This snippet provides a template for the boilerplate notice to be included when applying the Apache License 2.0 to a project. It includes placeholders for the copyright year and owner's name, as well as the standard license text and link to the full license.\nSOURCE: https://github.com/sequelize/website/blob/main/static/v5/script/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Session Variables Example - MariaDB Configuration\nDESCRIPTION: Example showing how to set session variables when establishing a database connection, specifically setting the idle_transaction_timeout.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/databases/mariadb.mdx#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsessionVariables: { idle_transaction_timeout: 10000 }\n```\n\n----------------------------------------\n\nTITLE: Using URL to Initialize Sequelize v7\nDESCRIPTION: Illustrates how to use a URL to initialize Sequelize v7, which now requires specifying the dialect class explicitly.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/upgrade.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Sequelize } from '@sequelize/core';\nimport { PostgresDialect } from '@sequelize/postgres';\n\nconst sequelize = new Sequelize({\n  // note: the dialect class must always be provided, even if you use a URL\n  dialect: PostgresDialect,\n  url: 'postgres://user:password@localhost:5432/database',\n});\n```\n\n----------------------------------------\n\nTITLE: Querying SQL NULL Values\nDESCRIPTION: Examples of querying for SQL NULL values using different methods.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/json.mdx#2025-04-09_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nUser.findAll({\n  where: {\n    jsonAttribute: SQL_NULL,\n  },\n});\n\nUser.findAll({\n  where: {\n    jsonAttribute: { [Op.is]: null },\n  },\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\n-- postgres\nSELECT * FROM \"Users\" WHERE \"jsonAttribute\" IS NULL;\n```\n\n----------------------------------------\n\nTITLE: Enabling CLS for Automatic Transaction Handling in Sequelize\nDESCRIPTION: This code demonstrates how to set up Continuation Local Storage (CLS) with Sequelize to automatically pass transaction objects to all queries within a transaction callback, eliminating the need to manually pass the transaction object.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/other-topics/transactions.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst cls = require('cls-hooked');\nconst namespace = cls.createNamespace('my-very-own-namespace');\n```\n\n----------------------------------------\n\nTITLE: Initializing Sequelize with SQLite Dialect\nDESCRIPTION: Basic configuration to set up a Sequelize instance with SQLite dialect. This example shows how to import the necessary components and create a connection to a SQLite database file.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/databases/sqlite.mdx#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Sequelize } from '@sequelize/core';\nimport { SqliteDialect } from '@sequelize/sqlite3';\n\nconst sequelize = new Sequelize({\n  dialect: SqliteDialect,\n  storage: 'sequelize.sqlite',\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Single Entity with Sequelize Model.create()\nDESCRIPTION: Demonstrates how to create a new user record using the create() method of a Sequelize model. This method saves the record to the database and returns the created instance.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/querying/insert.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst jane = await User.create({ firstName: 'Jane', lastName: 'Doe' });\nconsole.log(\"Jane's auto-generated ID:\", jane.id);\n```\n\n----------------------------------------\n\nTITLE: Modifying Existing Data Type in Sequelize\nDESCRIPTION: Illustrates how to extend an existing Sequelize data type to customize its behavior. This example modifies the STRING type to use TEXT as its SQL representation.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/extending-data-types.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Sequelize, DataTypes } from '@sequelize/core';\n\nexport class MyStringType extends DataTypes.STRING {\n  toSql() {\n    return 'TEXT';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring 301 Redirects for Sequelize Documentation\nDESCRIPTION: Series of URL redirection rules that map legacy documentation paths to their current locations on sequelize.org. Handles versioned docs (v3), latest docs, API references, and manual pages with dynamic path parameters.\nSOURCE: https://github.com/sequelize/website/blob/main/redirects/ROUTER.txt#2025-04-09_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\n301 /en/v3/ https://sequelize.org/v3/\n301 /en/v3/:foo https://sequelize.org/v3/:foo\n301 /en/v3/:foo/:bar https://sequelize.org/v3/:foo/:bar\n301 /en/v3/:foo/:bar/:baz https://sequelize.org/v3/:foo/:bar/:baz\n301 /en/v3/:foo/:bar/:baz/:quz https://sequelize.org/v3/:foo/:bar/:baz/:quz\n\n301 /en/latest https://sequelize.org/master\n301 /en/latest/ https://sequelize.org/master/\n\n301 /en/latest/docs/getting-started/ https://sequelize.org/master/manual/getting-started.html\n301 /en/latest/docs/:section/ https://sequelize.org/master/manual/:section.html\n\n301 /en/latest/api/sequelize/ https://sequelize.org/master/class/src/sequelize.js~Sequelize.html\n301 /en/latest/api/model/ https://sequelize.org/master/class/src/model.js~Model.html\n301 /en/latest/api/instance/ https://sequelize.org/master/class/src/model.js~Model.html\n301 /en/latest/api/associations/ https://sequelize.org/master/class/src/associations/base.js~Association.html\n301 /en/latest/api/associations/belongs-to/ https://sequelize.org/master/class/src/associations/belongs-to.js~BelongsTo.html\n301 /en/latest/api/associations/belongs-to-many/ https://sequelize.org/master/class/src/associations/belongs-to-.many.js~BelongsToMany.html\n301 /en/latest/api/associations/has-one/ https://sequelize.org/master/class/src/associations/has-one.js~HasOne.html\n301 /en/latest/api/associations/has-many/ https://sequelize.org/master/class/src/associations/has-many.js~HasMany.html\n301 /en/latest/api/transaction/ https://sequelize.org/master/class/src/transaction.js~Transaction.html\n301 /en/latest/api/datatypes/ https://sequelize.org/master/variable/index.html#static-variable-DataTypes\n301 /en/latest/api/deferrable/ https://sequelize.org/master/variable/index.html#static-variable-Deferrable\n301 /en/latest/api/errors/ https://sequelize.org/master/class/src/errors/base-error.js~BaseError.html\n\n301 /manual/tutorial/:section.html https://sequelize.org/master/manual/:section.html\n301 /manual/installation/:section.html https://sequelize.org/master/manual/:section.html\n301 /manual/faq/:section.html https://sequelize.org/master/manual/:section.html\n301 /manual/advanced/:section.html https://sequelize.org/master/manual/:section.html\n\n301 /:foo https://sequelize.org/master/:foo\n301 /:foo/:bar https://sequelize.org/master/:foo/:bar\n301 /:foo/:bar/:baz https://sequelize.org/master/:foo/:bar/:baz\n301 /:foo/:bar/:baz/:quz https://sequelize.org/master/:foo/:bar/:baz/:quz\n\n301 / https://sequelize.org/\n```\n\n----------------------------------------\n\nTITLE: Importing Connection Options in Markdown\nDESCRIPTION: This snippet imports a separate markdown file containing connection options. It's likely used to modularize the documentation.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/databases/snowflake.mdx#2025-04-09_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nimport ConnectionOptions from './_connection-options.md';\n\n<ConnectionOptions />\n```\n\n----------------------------------------\n\nTITLE: Mandatory One-To-One Relationship Diagram\nDESCRIPTION: Entity relationship diagram showing a mandatory One-To-One relationship between people and birth certificates.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/associations/has-one.md#2025-04-09_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n  people ||--|| birth_certificates : birthCertificate\n```\n\n----------------------------------------\n\nTITLE: Querying with Op.not Operator in Sequelize\nDESCRIPTION: Demonstrates how to use the Op.not operator in Sequelize to create complex WHERE conditions. The example shows filtering projects based on name while excluding specific IDs and descriptions.\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/core-concepts/model-querying-basics.md#2025-04-09_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nProject.findAll({\n  where: {\n    name: 'Some Project',\n    [Op.not]: [\n      { id: [1, 2, 3] },\n      {\n        description: {\n          [Op.like]: 'Hello%',\n        },\n      },\n    ],\n  },\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM `Projects`\nWHERE (\n  `Projects`.`name` = 'Some Project'\n  AND NOT (\n    `Projects`.`id` IN (1,2,3)\n    AND\n    `Projects`.`description` LIKE 'Hello%'\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sequelize Logging Options\nDESCRIPTION: Examples of different logging configurations for Sequelize operations\nSOURCE: https://github.com/sequelize/website/blob/main/versioned_docs/version-6.x.x/getting-started.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst sequelize = new Sequelize('sqlite::memory:', {\n  // Choose one of the logging options\n  logging: console.log, // Default, displays the first parameter of the log function call\n  logging: (...msg) => console.log(msg), // Displays all log function call parameters\n  logging: false, // Disables logging\n  logging: msg => logger.debug(msg), // Use custom logger (e.g. Winston or Bunyan), displays the first parameter\n  logging: logger.debug.bind(logger), // Alternative way to use custom logger, displays all messages\n});\n```\n\n----------------------------------------\n\nTITLE: Updated ConnectionManager Type Parameters in Sequelize 7\nDESCRIPTION: Shows the change in ConnectionManager's getConnection method parameter types, which now accepts 'read' or 'write' instead of 'SELECT' or any other value, aligning implementation with documentation.\nSOURCE: https://github.com/sequelize/website/blob/main/docs/other-topics/upgrade.md#2025-04-09_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n// Instead of doing this:\nsequelize.connectionManager.getConnection({ type: 'SELECT' });\n\n// Do this:\nsequelize.connectionManager.getConnection({ type: 'read' });\n```"
  }
]