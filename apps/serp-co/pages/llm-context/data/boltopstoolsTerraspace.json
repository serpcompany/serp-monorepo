[
  {
    "owner": "boltops-tools",
    "repo": "terraspace",
    "content": "TITLE: Creating a New Terraspace Module and Stack using CLI\nDESCRIPTION: This command creates a new Terraspace module named 'example' and a stack named 'demo'. The command automatically generates the directory structure and creates the essential Terraform files (main.tf, outputs.tf, variables.tf) for both the module and stack.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/new/example.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace new example\n=> Creating new module called example\n      create  app/modules/example\n      create  app/modules/example/main.tf\n      create  app/modules/example/outputs.tf\n      create  app/modules/example/variables.tf\n=> Creating new stack called demo\n      create  app/stacks/demo\n      create  app/stacks/demo/main.tf\n      create  app/stacks/demo/outputs.tf\n      create  app/stacks/demo/variables.tf\n$\n```\n\n----------------------------------------\n\nTITLE: Creating Terraspace Project with AWS Plugin and Examples\nDESCRIPTION: This command creates a new Terraspace project named 'infra' using the AWS plugin and includes example configurations. It sets up the project structure, creates modules and stacks, and installs dependencies.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/new/project.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace new project infra --plugin aws --examples\n```\n\n----------------------------------------\n\nTITLE: Terraspace Up with Saved Plan Execution\nDESCRIPTION: Shows how to execute terraspace all up command using previously saved plan files.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/all/up.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace all up --plan \":MOD_NAME.plan\"\n```\n\n----------------------------------------\n\nTITLE: Saving and Reusing Terraform Plan Files with Terraspace\nDESCRIPTION: Example of saving Terraform plan files using the '--out' option with a dynamic naming pattern, and then reusing those plan files in a subsequent 'up' command. This allows for consistent application of planned changes.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/all/plan.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace all plan --out \":MOD_NAME.plan\"\n\n$ terraspace all up --plan \":MOD_NAME.plan\"\n```\n\n----------------------------------------\n\nTITLE: Executing Terraspace All Down Command\nDESCRIPTION: This snippet demonstrates the execution of the 'terraspace all down' command, which prompts for confirmation before destroying infrastructure across multiple stacks in batches.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/all/down.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace all down\nWill run:\n   terraspace down a1 # batch 1\n   terraspace down b1 # batch 2\n   terraspace down b2 # batch 2\n   terraspace down c1 # batch 3\nAre you sure? (y/N)\n```\n\n----------------------------------------\n\nTITLE: Terraspace Infrastructure Destruction Output\nDESCRIPTION: This snippet shows the output of the Terraspace infrastructure destruction process, including batch runs, resource destruction details, and execution time. It demonstrates the parallel execution of destruction commands for multiple stacks.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/all/down.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAre you sure? (y/N) y\nBatch Run 1:\nRunning: terraspace down a1 Logs: log/down/a1.log\nterraspace down a1:  Changes to Outputs:\nterraspace down a1:  Destroy complete! Resources: 2 destroyed.\nBatch Run 2:\nRunning: terraspace down b1 Logs: log/down/b1.log\nRunning: terraspace down b2 Logs: log/down/b2.log\nterraspace down b1:  Changes to Outputs:\nterraspace down b1:  Destroy complete! Resources: 2 destroyed.\nterraspace down b2:  Changes to Outputs:\nterraspace down b2:  Destroy complete! Resources: 1 destroyed.\nBatch Run 3:\nRunning: terraspace down c1 Logs: log/down/c1.log\nterraspace down c1:  Changes to Outputs:\nterraspace down c1:  Destroy complete! Resources: 1 destroyed.\nTime took: 15s\n$\n```\n\n----------------------------------------\n\nTITLE: Deploying and Destroying Terraspace Project\nDESCRIPTION: These commands demonstrate how to deploy and destroy the created Terraspace project. They should be run from within the project directory.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/new/project.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd infra\nterraspace up demo -y   # to deploy\nterraspace down demo -y # to destroy\n```\n\n----------------------------------------\n\nTITLE: Running Terraspace Batch Refresh Command\nDESCRIPTION: Example of executing terraspace all refresh command which processes multiple stacks in batches. The command executes refresh operations on stacks c1, b1, b2, and a1 in three separate batches, displaying progress and logging information.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/all/refresh.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ terraspace all refresh\nRunning:\n   terraspace refresh c1 # batch 1\n   terraspace refresh b1 # batch 2\n   terraspace refresh b2 # batch 2\n   terraspace refresh a1 # batch 3\nBatch Run 1:\nRunning: terraspace refresh c1 Logs: log/refresh/c1.log\nBatch Run 2:\nRunning: terraspace refresh b1 Logs: log/refresh/b1.log\nRunning: terraspace refresh b2 Logs: log/refresh/b2.log\nBatch Run 3:\nRunning: terraspace refresh a1 Logs: log/refresh/a1.log\nTime took: 11s\n$\n```\n\n----------------------------------------\n\nTITLE: Executing Terraspace All Validate Command in Shell\nDESCRIPTION: This snippet shows the execution of the 'terraspace all validate' command and its output. It demonstrates how Terraspace validates multiple configurations in parallel batches, displaying progress, log locations, and validation results for each configuration.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/all/validate.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ terraspace all validate\nRunning:\n   terraspace validate c1 # batch 1\n   terraspace validate b1 # batch 2\n   terraspace validate b2 # batch 2\n   terraspace validate a1 # batch 3\nBatch Run 1:\nRunning: terraspace validate c1 Logs: log/validate/c1.log\nterraspace validate c1:  Success! The configuration is valid.\nBatch Run 2:\nRunning: terraspace validate b1 Logs: log/validate/b1.log\nRunning: terraspace validate b2 Logs: log/validate/b2.log\nterraspace validate b1:  Success! The configuration is valid.\nterraspace validate b2:  Success! The configuration is valid.\nBatch Run 3:\nRunning: terraspace validate a1 Logs: log/validate/a1.log\nterraspace validate a1:  Success! The configuration is valid.\nTime took: 13s\n$\n```\n\n----------------------------------------\n\nTITLE: Running Terraspace All Output Command in Bash\nDESCRIPTION: Example of executing the 'terraspace all output' command that processes multiple stacks (c1, b1, b2, a1) in batches based on dependencies. The command shows the execution sequence, logging locations, and outputs for each stack.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/all/output.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace all output\nRunning:\n   terraspace output c1 # batch 1\n   terraspace output b1 # batch 2\n   terraspace output b2 # batch 2\n   terraspace output a1 # batch 3\nBatch Run 1:\nRunning: terraspace output c1 Logs: log/output/c1.log\nterraspace output c1:  length = 1\nBatch Run 2:\nRunning: terraspace output b1 Logs: log/output/b1.log\nRunning: terraspace output b2 Logs: log/output/b2.log\nterraspace output b1:  length = 1\nterraspace output b1:  length2 = 1\nterraspace output b2:  length = 1\nBatch Run 3:\nRunning: terraspace output a1 Logs: log/output/a1.log\nterraspace output a1:  Warning: No outputs found\nTime took: 12s\n$\n```\n\n----------------------------------------\n\nTITLE: Running Basic Terraspace Plan Command\nDESCRIPTION: Example of running the terraspace plan command for a demo stack, showing the standard Terraform plan output including resource changes and state information.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/plan.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace plan demo\n=> terraform plan\nRefreshing Terraform state in-memory prior to plan...\nThe refreshed state will be used to calculate this plan, but will not be\npersisted to local or remote state storage.\n\nrandom_pet.this: Refreshing state... [id=fond-sheep]\nmodule.bucket.aws_s3_bucket.this: Refreshing state... [id=bucket-fond-sheep]\n\n------------------------------------------------------------------------\n\nAn execution plan has been generated and is shown below.\nResource actions are indicated with the following symbols:\n-/+ destroy and then create replacement\n...\nPlan: 2 to add, 0 to change, 2 to destroy.\n\nChanges to Outputs:\n  ~ bucket_name = \"bucket-fond-sheep\" -> (known after apply)\n\n------------------------------------------------------------------------\n\nNote: You didn't specify an \"-out\" parameter to save this plan, so Terraform\ncan't guarantee that exactly these actions will be performed if\n\"terraform apply\" is subsequently run.\n\n$\n```\n\n----------------------------------------\n\nTITLE: Executing Terraspace Up Command for Demo Stack\nDESCRIPTION: This snippet shows the execution of 'terraspace up demo' command, which builds and applies the Terraform configuration for the demo stack. It demonstrates the output, including resource creation and state changes.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/up.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace up demo\nBuilding .terraspace-cache/us-west-2/dev/stacks/demo\nBuilt in .terraspace-cache/us-west-2/dev/stacks/demo\nCurrent directory: .terraspace-cache/us-west-2/dev/stacks/demo\n=> terraform apply\n...\nPlan: 2 to add, 0 to change, 0 to destroy.\n\nChanges to Outputs:\n  + bucket_name = (known after apply)\n\nDo you want to perform these actions?\n  Terraform will perform the actions described above.\n  Only 'yes' will be accepted to approve.\n  Enter a value: yes\n\nrandom_pet.this: Creating...\nrandom_pet.this: Creation complete after 0s [id=trusty-marmoset]\nmodule.bucket.aws_s3_bucket.this: Creating...\nmodule.bucket.aws_s3_bucket.this: Creation complete after 2s [id=bucket-trusty-marmoset]\n\nApply complete! Resources: 2 added, 0 changed, 0 destroyed.\n\nOutputs:\n\nbucket_name = bucket-trusty-marmoset\nTime took: 39s\n$\n```\n\n----------------------------------------\n\nTITLE: Syncing All Stacks to Terraform Cloud\nDESCRIPTION: This example shows how to sync all stacks in a Terraspace project to Terraform Cloud workspaces. The command creates or updates workspaces, sets working directories, and configures environment and terraform variables.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/tfc/sync.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace tfc sync\nAbout to sync these project stacks with Terraform Cloud workspaces:\n\n    Stack => Workspace\n    demo => demo-dev-us-west-2\n    demo2 => demo2-dev-us-west-2\n\nA sync does the following for each workspace:\n\n  1. Create or update workspace, including the VCS settings.\n  2. Set the working dir.\n  3. Set env and terraform variables.\n\nAre you sure? (y/N) y\nSyncing to Terraform Cloud: demo => demo-dev-us-west-2\nSyncing to Terraform Cloud: demo2 => demo2-dev-us-west-2\n$\n```\n\n----------------------------------------\n\nTITLE: Syncing Specific Stack to Terraform Cloud\nDESCRIPTION: This example demonstrates syncing a single specific stack (demo) to Terraform Cloud. It follows the same process as syncing all stacks but only targets the specified stack.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/tfc/sync.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace tfc sync demo\nAbout to sync these project stacks with Terraform Cloud workspaces:\n\n    Stack => Workspace\n    demo => demo-dev-us-west-2\n\nA sync does the following for each workspace:\n\n  1. Create or update workspace, including the VCS settings.\n  2. Set the working dir.\n  3. Set env and terraform variables.\n\nAre you sure? (y/N) y\nSyncing to Terraform Cloud: demo => demo-dev-us-west-2\n$\n```\n\n----------------------------------------\n\nTITLE: Creating a New Terraspace Stack using CLI\nDESCRIPTION: This example shows how to use the Terraspace CLI to create a new stack called 'demo', which generates the basic scaffold including main.tf, outputs.tf, and variables.tf files in the app/stacks directory structure.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/new/stack.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace new stack demo\n=> Creating new stack called demo.\n      create  app/stacks/demo\n      create  app/stacks/demo/main.tf\n      create  app/stacks/demo/outputs.tf\n      create  app/stacks/demo/variables.tf\n$\n```\n\n----------------------------------------\n\nTITLE: Terraspace Parallel Deployment Execution Log\nDESCRIPTION: Displays the execution output of the terraspace all up command, showing parallel batch deployments with resource changes and timing information.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/all/up.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAre you sure? (y/N) y\nBatch Run 1:\nRunning: terraspace up c1 Logs: log/up/c1.log\nterraspace up c1:  Apply complete! Resources: 1 added, 0 changed, 0 destroyed.\nBatch Run 2:\nRunning: terraspace up b1 Logs: log/up/b1.log\nRunning: terraspace up b2 Logs: log/up/b2.log\nterraspace up b1:  Apply complete! Resources: 2 added, 0 changed, 0 destroyed.\nterraspace up b2:  Apply complete! Resources: 1 added, 0 changed, 0 destroyed.\nBatch Run 3:\nRunning: terraspace up a1 Logs: log/up/a1.log\nterraspace up a1:  Apply complete! Resources: 2 added, 0 changed, 0 destroyed.\nTime took: 25s\n```\n\n----------------------------------------\n\nTITLE: Running Terraspace Down Command for Resource Destruction in Shell\nDESCRIPTION: Example of executing 'terraspace down demo' command to destroy Terraform-managed infrastructure. The command builds a cache, executes 'terraform destroy', and successfully destroys two resources - an S3 bucket and a random pet name generator. The output shows the entire workflow including confirmation prompt and resource destruction details.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/down.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ terraspace down demo\nBuilding .terraspace-cache/us-west-2/dev/stacks/demo\nBuilt in .terraspace-cache/us-west-2/dev/stacks/demo\nCurrent directory: .terraspace-cache/us-west-2/dev/stacks/demo\n=> terraform destroy\n# ...\nPlan: 0 to add, 0 to change, 2 to destroy.\n\nChanges to Outputs:\n  - bucket_name = \"bucket-trusty-marmoset\" -> null\n\nDo you really want to destroy all resources?\n  Terraform will destroy all your managed infrastructure, as shown above.\n  There is no undo. Only 'yes' will be accepted to confirm.\n  Enter a value: yes\n\nmodule.bucket.aws_s3_bucket.this: Destroying... [id=bucket-trusty-marmoset]\nmodule.bucket.aws_s3_bucket.this: Destruction complete after 0s\nrandom_pet.this: Destroying... [id=trusty-marmoset]\nrandom_pet.this: Destruction complete after 0s\n\nDestroy complete! Resources: 2 destroyed.\nTime took: 21s\n$\n```\n\n----------------------------------------\n\nTITLE: Specifying Output Path for Terraspace Plan\nDESCRIPTION: This snippet demonstrates how to use the 'terraspace plan' command with a custom output path for the plan file. It shows the syntax for specifying the output file.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/up.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace plan demo --out \"my.plan\"\n```\n\n----------------------------------------\n\nTITLE: Saving Terraspace Plan to a File\nDESCRIPTION: Example of using the --out parameter with terraspace plan to save the plan output to a specified file for later use.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/plan.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace plan demo --out \"my.plan\"\n```\n\n----------------------------------------\n\nTITLE: Running Terraspace Build Command in Bash Shell\nDESCRIPTION: This example demonstrates running the 'terraspace build' command which builds Terraform code into a cached directory structure. The command processes infrastructure code and places it in the .terraspace-cache directory organized by region, environment, and stack name.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/build.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace build\nBuilding .terraspace-cache/us-west-2/dev/stacks/demo\nBuilt in .terraspace-cache/us-west-2/dev/stacks/demo\n$\n```\n\n----------------------------------------\n\nTITLE: Running Terraspace All Init Command\nDESCRIPTION: Example of using the 'terraspace all init' command which initializes multiple Terraform stacks in dependency-organized batches. The command builds the necessary cache and initializes stacks in the correct order (c1 → b1/b2 → a1).\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/all/init.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace all init\nBuilding one stack to build all stacks\nBuilding .terraspace-cache/us-west-2/dev/stacks/c1\nDownloading tfstate files for dependencies defined in tfvars...\nBuilt in .terraspace-cache/us-west-2/dev/stacks/c1\nRunning:\n    terraspace init c1 # batch 1\n    terraspace init b1 # batch 2\n    terraspace init b2 # batch 2\n    terraspace init a1 # batch 3\nBatch Run 1:\nRunning: terraspace init c1 Logs: log/init/c1.log\nterraspace init c1:  Terraform has been successfully initialized!\nBatch Run 2:\nRunning: terraspace init b1 Logs: log/init/b1.log\nRunning: terraspace init b2 Logs: log/init/b2.log\nterraspace init b1:  Terraform has been successfully initialized!\nterraspace init b2:  Terraform has been successfully initialized!\nBatch Run 3:\nRunning: terraspace init a1 Logs: log/init/a1.log\nterraspace init a1:  Terraform has been successfully initialized!\nTime took: 6s\n$\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Terraspace Show Command Output for Terraform Resources\nDESCRIPTION: This example shows the output of the 'terraspace show demo' command which reveals the deployed Terraform resources. The output includes a random_pet resource and an AWS S3 bucket module with its configuration details like ACL, ARN, region, and versioning settings.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/show.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace show demo\n=> terraform show\n# random_pet.this:\nresource \"random_pet\" \"this\" {\n    id        = \"fond-sheep\"\n    length    = 2\n    separator = \"-\"\n}\n\n# module.bucket.aws_s3_bucket.this:\nresource \"aws_s3_bucket\" \"this\" {\n    acl                         = \"private\"\n    arn                         = \"arn:aws:s3:::bucket-fond-sheep\"\n    bucket                      = \"bucket-fond-sheep\"\n    bucket_domain_name          = \"bucket-fond-sheep.s3.amazonaws.com\"\n    bucket_regional_domain_name = \"bucket-fond-sheep.s3.us-west-2.amazonaws.com\"\n    force_destroy               = false\n    hosted_zone_id              = \"Z3BJ6K6RIION7M\"\n    id                          = \"bucket-fond-sheep\"\n    region                      = \"us-west-2\"\n    request_payer               = \"BucketOwner\"\n    tags                        = {}\n\n    versioning {\n        enabled    = false\n        mfa_delete = false\n    }\n}\n\n\nOutputs:\n\nbucket_name = \"bucket-fond-sheep\"\n$\n```\n\n----------------------------------------\n\nTITLE: Creating a New Terraspace Plugin with CLI\nDESCRIPTION: This snippet demonstrates the use of the Terraspace CLI to create a new plugin named 'mycloud'. The command generates a complete plugin structure with various configuration files, templates, and Ruby classes.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/new/plugin.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace new plugin mycloud\n=> Creating new plugin: mycloud\n      create  terraspace_plugin_mycloud\n      create  terraspace_plugin_mycloud/.gitignore\n      create  terraspace_plugin_mycloud/.rspec\n      create  terraspace_plugin_mycloud/CHANGELOG.md\n      create  terraspace_plugin_mycloud/Gemfile\n      create  terraspace_plugin_mycloud/LICENSE.txt\n      create  terraspace_plugin_mycloud/README.md\n      create  terraspace_plugin_mycloud/Rakefile\n      create  terraspace_plugin_mycloud/bin/console\n      create  terraspace_plugin_mycloud/bin/setup\n      create  terraspace_plugin_mycloud/lib/templates/hcl/module/main.tf\n      create  terraspace_plugin_mycloud/lib/templates/hcl/module/outputs.tf\n      create  terraspace_plugin_mycloud/lib/templates/hcl/module/variables.tf\n      create  terraspace_plugin_mycloud/lib/templates/hcl/project/config/terraform/backend.tf\n      create  terraspace_plugin_mycloud/lib/templates/hcl/project/config/terraform/provider.tf\n      create  terraspace_plugin_mycloud/lib/templates/hcl/stack/main.tf\n      create  terraspace_plugin_mycloud/lib/templates/hcl/stack/outputs.tf\n      create  terraspace_plugin_mycloud/lib/templates/hcl/stack/variables.tf\n      create  terraspace_plugin_mycloud/lib/templates/ruby/module/main.rb\n      create  terraspace_plugin_mycloud/lib/templates/ruby/module/outputs.rb\n      create  terraspace_plugin_mycloud/lib/templates/ruby/module/variables.rb\n      create  terraspace_plugin_mycloud/lib/templates/ruby/project/config/terraform/backend.rb\n      create  terraspace_plugin_mycloud/lib/templates/ruby/project/config/terraform/provider.rb\n      create  terraspace_plugin_mycloud/lib/templates/ruby/stack/main.rb\n      create  terraspace_plugin_mycloud/lib/templates/ruby/stack/outputs.rb\n      create  terraspace_plugin_mycloud/lib/templates/ruby/stack/variables.rb\n      create  terraspace_plugin_mycloud/lib/templates/test/rspec/module/test/.rspec\n      create  terraspace_plugin_mycloud/lib/templates/test/rspec/module/test/Gemfile\n      create  terraspace_plugin_mycloud/lib/templates/test/rspec/module/test/spec/fixtures/stack/main.tf\n      create  terraspace_plugin_mycloud/lib/templates/test/rspec/module/test/spec/fixtures/stack/outputs.tf\n      create  terraspace_plugin_mycloud/lib/templates/test/rspec/module/test/spec/fixtures/stack/variables.tf\n      create  terraspace_plugin_mycloud/lib/templates/test/rspec/module/test/spec/main_spec.rb\n      create  terraspace_plugin_mycloud/lib/templates/test/rspec/module/test/spec/spec_helper.rb\n      create  terraspace_plugin_mycloud/lib/terraspace_plugin_mycloud.rb\n      create  terraspace_plugin_mycloud/lib/terraspace_plugin_mycloud/autoloader.rb\n      create  terraspace_plugin_mycloud/lib/terraspace_plugin_mycloud/clients.rb\n      create  terraspace_plugin_mycloud/lib/terraspace_plugin_mycloud/interfaces/backend.rb\n      create  terraspace_plugin_mycloud/lib/terraspace_plugin_mycloud/interfaces/config.rb\n      create  terraspace_plugin_mycloud/lib/terraspace_plugin_mycloud/interfaces/expander.rb\n      create  terraspace_plugin_mycloud/lib/terraspace_plugin_mycloud/interfaces/layer.rb\n      create  terraspace_plugin_mycloud/lib/terraspace_plugin_mycloud/version.rb\n      create  terraspace_plugin_mycloud/spec/spec_helper.rb\n      create  terraspace_plugin_mycloud/spec/terraspace_provider_mycloud_spec.rb\n      create  terraspace_plugin_mycloud/terraspace_plugin_mycloud.gemspec\n$\n```\n\n----------------------------------------\n\nTITLE: Running terraspace summary Command in Bash\nDESCRIPTION: Example showing the output of the terraspace summary command which downloads statefiles and displays resources. In this case, it shows a random_pet and an AWS S3 bucket resource from a demo stack.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/summary.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace summary\nSummary of resources based on backend storage statefiles\nDownloading statefiles to /tmp/terraspace/statefiles/terraform-state-111111111111-us-west-2-dev/us-west-2/dev/\nstacks/demo/terraform.tfstate\n    random_pet this: sunny-chicken\n    aws_s3_bucket this: bucket-sunny-chicken\n$\n```\n\n----------------------------------------\n\nTITLE: Executing Batch Planning with Terraspace\nDESCRIPTION: Example of using 'terraspace all plan' to execute planning operations across multiple modules in batches. The output shows the execution order, log file locations, and summarized plan results for each module.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/all/plan.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace all plan\nRunning:\n   terraspace plan c1 # batch 1\n   terraspace plan b1 # batch 2\n   terraspace plan b2 # batch 2\n   terraspace plan a1 # batch 3\nBatch Run 1:\nRunning: terraspace plan c1 Logs: log/plan/c1.log\nterraspace plan c1:  Plan: 1 to add, 0 to change, 0 to destroy.\nterraspace plan c1:  Changes to Outputs:\nBatch Run 2:\nRunning: terraspace plan b1 Logs: log/plan/b1.log\nRunning: terraspace plan b2 Logs: log/plan/b2.log\nterraspace plan b1:  Plan: 2 to add, 0 to change, 0 to destroy.\nterraspace plan b1:  Changes to Outputs:\nterraspace plan b2:  Plan: 1 to add, 0 to change, 0 to destroy.\nterraspace plan b2:  Changes to Outputs:\nBatch Run 3:\nRunning: terraspace plan a1 Logs: log/plan/a1.log\nterraspace plan a1:  Plan: 2 to add, 0 to change, 0 to destroy.\nterraspace plan a1:  Changes to Outputs:\nTime took: 11s\n$\n```\n\n----------------------------------------\n\nTITLE: Executing Terraspace Force Unlock Command\nDESCRIPTION: This command demonstrates how to use the terraspace force_unlock command to remove a state lock for a stack named 'demo' with a specific lock ID.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/force_unlock.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nterraspace force_unlock demo ab7f3469-2a5f-07b9-29c5-dec1537ec8b0\n```\n\n----------------------------------------\n\nTITLE: Executing Parallel Batch Deployment with Terraspace\nDESCRIPTION: Shows the initial terraspace all up command execution which displays the planned batch deployments and requests user confirmation before proceeding.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/all/up.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace all up\nWill run:\n   terraspace up c1 # batch 1\n   terraspace up b1 # batch 2\n   terraspace up b2 # batch 2\n   terraspace up a1 # batch 3\nAre you sure? (y/N)\n```\n\n----------------------------------------\n\nTITLE: Deploying Terraspace Infrastructure Stacks\nDESCRIPTION: Commands for deploying infrastructure stacks using Terraspace CLI. Shows both full deployment of all stacks and individual stack deployment options.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/templates/base/project/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterraspace all up\n```\n\nLANGUAGE: bash\nCODE:\n```\nterraspace up demo # where demo is app/stacks/demo\n```\n\n----------------------------------------\n\nTITLE: Executing Terraspace Force Unlock Command with Instance Option\nDESCRIPTION: This command shows how to use the terraspace force_unlock command with the instance option (-i) to specify a particular instance when removing a state lock for the 'demo' stack.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/force_unlock.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraspace force_unlock demo -i 2 ab7f3469-2a5f-07b9-29c5-dec1537ec8b0\n```\n\n----------------------------------------\n\nTITLE: Initializing Terraspace Project Stack with Terraform\nDESCRIPTION: This example demonstrates manually initializing a Terraspace 'demo' stack. The command builds the necessary resources in the .terraspace-cache directory for the us-west-2 region in the dev environment, then runs 'terraform init -get' to initialize the modules, backend, and provider plugins.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/init.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace init demo\nBuilding .terraspace-cache/us-west-2/dev/stacks/demo\nBuilt in .terraspace-cache/us-west-2/dev/stacks/demo\nCurrent directory: .terraspace-cache/us-west-2/dev/stacks/demo\n=> terraform init -get\nInitializing modules...\n\nInitializing the backend...\n\nInitializing provider plugins...\n- Using previously-installed hashicorp/aws v3.7.0\n- Using previously-installed hashicorp/random v2.3.0\n\nThe following providers do not have any version constraints in configuration,\nso the latest version was installed.\n\nTo prevent automatic upgrades to new major versions that may contain breaking\nchanges, we recommend adding version constraints in a required_providers block\nin your configuration, with the constraint strings suggested below.\n\n* hashicorp/aws: version = \"~> 3.7.0\"\n* hashicorp/random: version = \"~> 2.3.0\"\n\nTerraform has been successfully initialized!\n\nYou may now begin working with Terraform. Try running \"terraform plan\" to see\nany changes that are required for your infrastructure. All Terraform commands\nshould now work.\n\nIf you ever set or change modules or backend configuration for Terraform,\nrerun this command to reinitialize your working directory. If you forget, other\ncommands will detect it and remind you to do so if necessary.\n$\n```\n\n----------------------------------------\n\nTITLE: Basic Terraspace Taint Command Usage\nDESCRIPTION: Shows the basic syntax for using the terraspace taint command to mark an AWS EC2 instance for recreation in Terraform.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/taint.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterraspace taint ec2 aws_instance.my_instance\n```\n\n----------------------------------------\n\nTITLE: Generating Visual Dependency Graph in Terraspace\nDESCRIPTION: Command to generate a visual dependency graph of Terraform modules. The output indicates that the graph is saved as a PNG file in the .terraspace-cache/graph directory and will auto-open on macOS and Cloud9 environments.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/all/graph.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ terraspace all graph\nBuilding graph...\nGraph saved to .terraspace-cache/graph/dependencies-20200919192103.png\n$\n```\n\n----------------------------------------\n\nTITLE: Terraspace Taint Command with Output\nDESCRIPTION: Demonstrates the terraspace taint command execution with full output showing the build process, hook execution, directory change, and successful tainting confirmation message.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/taint.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace taint ec2 aws_instance.my_instance\nBuilding .terraspace-cache/us-east-1/dev/stacks/ec2\nHook: Running terraspace before build hook.\nCurrent directory: .terraspace-cache/us-east-1/dev/stacks/ec2\n => terraform taint aws_instance.my_instance\nResource instance aws_instance.my_instance has been successfully tainted.\nReleasing state lock. This may take a few moments...\n```\n\n----------------------------------------\n\nTITLE: Retrieving Terraform Outputs with Terraspace CLI\nDESCRIPTION: Example showing how to use the 'terraspace output' command to display output values from a Terraform deployment. The command retrieves and displays the 'bucket_name' output from a module named 'demo'.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/output.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace output demo\n=> terraform output\nbucket_name = bucket-fond-sheep\n$\n```\n\n----------------------------------------\n\nTITLE: Basic Terraspace Untaint Command\nDESCRIPTION: Simple example of untainting an AWS EC2 instance using the terraspace untaint command.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/untaint.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nterraspace untaint ec2 aws_instance.my_instance\n```\n\n----------------------------------------\n\nTITLE: Terraspace Bundle Management Commands\nDESCRIPTION: Collection of commands for managing Terraspace bundles including installation, lock file updates, and cache management.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/bundle.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraspace bundle install     # same as bundle\nterraspace bundle update      # Updates Terrafile.lock\nterraspace bundle purge_cache # removes /tmp terraspace bundler folder\n```\n\n----------------------------------------\n\nTITLE: Running Terraspace Validate Command for Demo Stack\nDESCRIPTION: This example demonstrates how to use the Terraspace validate command to check the syntactic validity of Terraform configuration files in a demo stack. The output shows Terraspace building the necessary files in a cache directory before running the actual terraform validate command.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/validate.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace validate demo\nBuilding .terraspace-cache/us-west-2/dev/stacks/demo\nBuilt in .terraspace-cache/us-west-2/dev/stacks/demo\nCurrent directory: .terraspace-cache/us-west-2/dev/stacks/demo\n=> terraform validate\nSuccess! The configuration is valid.\n$\n```\n\n----------------------------------------\n\nTITLE: Terraspace Untaint Command with Output\nDESCRIPTION: Complete example showing the command execution and expected output, including build process, state management, and success confirmation.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/untaint.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ terraspace untaint ec2 aws_instance.my_instance\nBuilding .terraspace-cache/us-east-1/dev/stacks/ec2\nHook: Running terraspace before build hook.\nCurrent directory: .terraspace-cache/us-east-1/dev/stacks/ec2\n => terraform untaint aws_instance.my_instance\nResource instance aws_instance.my_instance has been successfully untainted.\nReleasing state lock. This may take a few moments...\n```\n\n----------------------------------------\n\nTITLE: Syncing Multiple Specific Stacks to Terraform Cloud\nDESCRIPTION: This example shows the command format for syncing multiple specific stacks (demo and demo2) to Terraform Cloud workspaces.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/tfc/sync.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nterraspace tfc sync demo demo2\n```\n\n----------------------------------------\n\nTITLE: Basic Terraspace State Commands\nDESCRIPTION: Core state management commands available in Terraspace for interacting with Terraform state.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/state.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterraspace state list demo\nterraspace state mv demo\nterraspace state pull demo\nterraspace state push demo\nterraspace state replace demo\nterraspace state rm demo\nterraspace state show demo\n```\n\n----------------------------------------\n\nTITLE: Generating and Verifying Terraspace Shim in Bash\nDESCRIPTION: This snippet shows the command to create a new Terraspace shim and verify its proper installation in the system PATH. It includes instructions for checking that the shim is correctly found in the PATH and how to modify the PATH if needed.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/new/shim.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace new shim\nA terraspace shim as been generated at /usr/local/bin/terraspace\nPlease make sure that it is found in the $PATH.\n\nYou can double check with:\n\n    which terraspace\n\nYou should see\n\n    $ which terraspace\n    /usr/local/bin/terraspace\n\nIf you do not, please add /usr/local/bin to your PATH.\nYou can usually do so by adding this line to ~/.bash_profile and opening a new terminal to check.\n\n    export PATH=/usr/local/bin:/$PATH\n\n$\n```\n\n----------------------------------------\n\nTITLE: Terraspace State List with ID Filter\nDESCRIPTION: Example of using the --id filter option with terraspace state list command, demonstrating how arguments are passed through to the underlying Terraform command.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/state.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterraspace state list demo --id enabled-bull\nBuilding .terraspace-cache/us-west-2/dev/stacks/demo\nBuilt in .terraspace-cache/us-west-2/dev/stacks/demo\nCurrent directory: .terraspace-cache/us-west-2/dev/stacks/demo\n=> terraform state list --id enabled-bull\nrandom_pet.this\n```\n\n----------------------------------------\n\nTITLE: Running Terraspace Check Command in Bash\nDESCRIPTION: This snippet shows how to run the Terraspace check command and its typical output. The command verifies the Terraspace version, locates the Terraform binary, and displays the Terraform version.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/check.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace check\nterraspace version: 2.2.11\nterraform bin: ~/.tfenv/bin/terraform\nterraform version: 1.5.5\nYou're all set!\n```\n\n----------------------------------------\n\nTITLE: Terraspace Import Command with Output\nDESCRIPTION: Example showing the output of a terraspace import command when importing an AWS Internet Gateway. The output shows the import process and confirmation of successful import.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/import.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ terraspace import vpc module.vpc.aws_internet_gateway.this[0] igw-0fa4bec3b4b46948a\nBuilding .terraspace-cache/us-west-2/dev/stacks/vpc\nCurrent directory: .terraspace-cache/us-west-2/dev/stacks/vpc\n=> terraform import module.vpc.aws_internet_gateway.this[0] igw-0fa4bec3b4b46948a\nmodule.vpc.aws_internet_gateway.this[0]: Importing from ID \"igw-0fa4bec3b4b46948a\"...\nmodule.vpc.aws_internet_gateway.this[0]: Import prepared!\n  Prepared aws_internet_gateway for import\nmodule.vpc.aws_internet_gateway.this[0]: Refreshing state... [id=igw-0fa4bec3b4b46948a]\n\nImport successful!\n\nThe resources that were imported are shown above. These resources are now in\nyour Terraform state and will henceforth be managed by Terraform.\n```\n\n----------------------------------------\n\nTITLE: Formatting All Terraform Source Files with Terraspace\nDESCRIPTION: This command formats all Terraform source files in the Terraspace project, including modules and stacks.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/fmt.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace fmt\n```\n\n----------------------------------------\n\nTITLE: Running Terraspace Refresh Command Example\nDESCRIPTION: Example demonstrating how to run the 'terraspace refresh' command on a module named 'demo'. The output shows the command refreshing the state for a random_pet resource and an AWS S3 bucket, then displaying the outputs from the Terraform configuration.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/refresh.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace refresh demo\n=> terraform refresh\nrandom_pet.this: Refreshing state... [id=fond-sheep]\nmodule.bucket.aws_s3_bucket.this: Refreshing state... [id=bucket-fond-sheep]\n\nOutputs:\n\nbucket_name = bucket-fond-sheep\n$\n```\n\n----------------------------------------\n\nTITLE: Scoping Terraspace Formatting to Module or Stack Types\nDESCRIPTION: These commands show how to scope the formatting to either modules or stacks, useful when there are modules and stacks with the same name.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/fmt.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace fmt example -t module\n$ terraspace fmt demo -t stack\n```\n\n----------------------------------------\n\nTITLE: Running Terraspace All Providers Command in Shell\nDESCRIPTION: This example shows the execution and output of 'terraspace all providers' command which executes the providers command across multiple stacks organized in batches based on dependency order. The command displays the progress of each batch run, provider information for each stack, and provides log file locations.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/all/providers.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ terraspace all providers\nRunning:\n   terraspace providers c1 # batch 1\n   terraspace providers b1 # batch 2\n   terraspace providers b2 # batch 2\n   terraspace providers a1 # batch 3\nBatch Run 1:\nRunning: terraspace providers c1 Logs: log/providers/c1.log\nterraspace providers c1:  └── provider[registry.terraform.io/hashicorp/random]\nBatch Run 2:\nRunning: terraspace providers b1 Logs: log/providers/b1.log\nRunning: terraspace providers b2 Logs: log/providers/b2.log\nterraspace providers b1:  └── provider[registry.terraform.io/hashicorp/random]\nterraspace providers b2:  └── provider[registry.terraform.io/hashicorp/random]\nBatch Run 3:\nRunning: terraspace providers a1 Logs: log/providers/a1.log\nterraspace providers a1:  └── provider[registry.terraform.io/hashicorp/random]\nTime took: 9s\n$\n```\n\n----------------------------------------\n\nTITLE: Running the Terraspace Providers Demo Command in Bash\nDESCRIPTION: This example demonstrates executing the 'terraspace providers demo' command and shows its output. The command displays the providers required by configuration (hashicorp/random and hashicorp/aws) as well as providers required by state.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/providers.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace providers demo\n=> terraform providers\n\nProviders required by configuration:\n.\n├── provider[registry.terraform.io/hashicorp/random]\n└── module.bucket\n    └── provider[registry.terraform.io/hashicorp/aws]\n\nProviders required by state:\n\n    provider[registry.terraform.io/hashicorp/aws]\n\n    provider[registry.terraform.io/hashicorp/random]\n\n$\n```\n\n----------------------------------------\n\nTITLE: Formatting All Modules and Stacks in Terraspace\nDESCRIPTION: This command formats all modules and stacks in the Terraspace project.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/fmt.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace fmt -t all\n```\n\n----------------------------------------\n\nTITLE: Running Terraspace All Show Command with Batch Processing\nDESCRIPTION: Demonstrates the execution of terraspace all show command which processes multiple configurations in batches. Shows the command output including resource counts, output counts, log file locations, and total execution time.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/all/show.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ terraspace all show\nRunning:\n   terraspace show c1 # batch 1\n   terraspace show b1 # batch 2\n   terraspace show b2 # batch 2\n   terraspace show a1 # batch 3\nBatch Run 1:\nRunning: terraspace show c1 Logs: log/show/c1.log\nterraspace show c1: Resources: 0 Outputs: 1\nBatch Run 2:\nRunning: terraspace show b1 Logs: log/show/b1.log\nRunning: terraspace show b2 Logs: log/show/b2.log\nterraspace show b1: Resources: 0 Outputs: 2\nterraspace show b2: Resources: 0 Outputs: 1\nBatch Run 3:\nRunning: terraspace show a1 Logs: log/show/a1.log\nterraspace show a1: Resources: 0 Outputs: 0\nTime took: 12s\n$\n```\n\n----------------------------------------\n\nTITLE: Listing All Terraspace Resources\nDESCRIPTION: Shows how to list both modules and stacks in a Terraspace project using the basic list command.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/list.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ terraspace list\napp/modules/example\napp/stacks/demo\n$\n```\n\n----------------------------------------\n\nTITLE: Executing Terraspace Clean Command\nDESCRIPTION: Shows the interaction and output of running the terraspace clean all command, which removes the Terraspace cache directory, temporary files, and log files after user confirmation.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/clean/all.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ terraspace clean all\nWill remove Terraspace cache and logs.\nAre you sure? (y/N) y\nRemoved .terraspace-cache\nRemoved /tmp/terraspace\nRemoving all files in log/\nLogs removed\n$\n```\n\n----------------------------------------\n\nTITLE: Listing Only Terraspace Stacks\nDESCRIPTION: Demonstrates filtering the list to show only stack resources using the -t stack option.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/list.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ terraspace list -t stack\napp/stacks/demo\n$\n```\n\n----------------------------------------\n\nTITLE: Running Terraspace Console Command\nDESCRIPTION: Example showing the output of running terraspace console with a demo stack. The command builds the necessary cache directory, changes to the build location, and launches the Terraform console for interactive use.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/console.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace console demo\nBuilding .terraspace-cache/us-west-2/dev/stacks/demo\nBuilt in .terraspace-cache/us-west-2/dev/stacks/demo\nCurrent directory: .terraspace-cache/us-west-2/dev/stacks/demo\n=> terraform console\n>\n```\n\n----------------------------------------\n\nTITLE: Listing Default Terraform Cloud Runs with Terraspace\nDESCRIPTION: Lists pending and planned Terraform Cloud runs for a specific workspace. By default, the command shows only runs with 'pending' and 'planned' statuses in a tabular format.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/tfc/runs/list.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace tfc runs list demo\n+----------------------+---------+---------------------------------+---------------------+\n|          Id          | Status  |             Message             |     Created At      |\n+----------------------+---------+---------------------------------+---------------------+\n| run-AuTXsYU1svQEzQVg | pending | Queued manually using Terraform | 2020-09-18T11:30:41 |\n| run-LuwMibh3ebiG7KQZ | planned | test                            | 2020-09-17T23:16:36 |\n+----------------------+---------+---------------------------------+---------------------+\n$\n```\n\n----------------------------------------\n\nTITLE: Executing Terraspace Seed Command for Demo Stack\nDESCRIPTION: This shell command example demonstrates running 'terraspace seed demo' to generate tfvars files for a demo stack. The command reads variables from the cached variables.tf file and creates a corresponding dev.tfvars file in the config directory.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/seed.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ terraspace seed demo\nSeeding tfvar files for demo\nReading: .terraspace-cache/us-west-2/dev/stacks/demo/variables.tf\n      create  config/stacks/demo/tfvars/dev.tfvars\n$\n```\n\n----------------------------------------\n\nTITLE: Executing Terraspace Info Command with Table Output\nDESCRIPTION: This snippet shows how to run the 'terraspace info' command for a 'demo' stack, which displays information in a tabular format. It includes details such as build directory, cache directory, name, root, type, and type directory.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/info.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace info demo\n```\n\n----------------------------------------\n\nTITLE: Executing Terraspace TFC Destroy Command in Bash\nDESCRIPTION: This snippet demonstrates how to use the 'terraspace tfc destroy' command to delete a Terraform Cloud workspace named 'demo'. It shows the command execution, the warning message, and the confirmation prompt.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/tfc/destroy.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace tfc destroy demo\nYou are about to delete the workspace: demo-dev-us-west-2\nAll variables, settings, run history, and state history will be removed.\nThis cannot be undone.\n\nThis will NOT remove any infrastructure managed by this workspace.\nIf needed, destroy the infrastructure prior to deleting the workspace with:\n\n    terraspace down demo\n\nThis will delete the workspace: demo-dev-us-west-2.\nAre you sure? (y/N) y\nDestroying workspace demo-dev-us-west-2\n$\n```\n\n----------------------------------------\n\nTITLE: Creating Project-Level Hook in Terraspace (Shell)\nDESCRIPTION: This command creates a project-level hook in Terraspace. It generates a terraform.rb file in the config/hooks directory.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/new/hook.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ terraspace new hook --type project\n      create  config/hooks\n      create  config/hooks/terraform.rb\n```\n\n----------------------------------------\n\nTITLE: Executing Terraspace Clean Cache Command in Shell\nDESCRIPTION: This snippet shows the execution of the 'terraspace clean cache' command and its output. The command removes the '.terraspace-cache' and '/tmp/terraspace' folders after user confirmation.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/clean/cache.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ terraspace clean cache\nWill remove these folders and all their files:\n\n    .terraspace-cache\n    /tmp/terraspace\n\nAre you sure? (y/N)\nRemoved .terraspace-cache\nRemoved /tmp/terraspace\n$\n```\n\n----------------------------------------\n\nTITLE: Creating Git Pre-Push Hook with Terraspace CLI\nDESCRIPTION: This snippet demonstrates the use of the 'terraspace new git_hook' command to create a pre-push Git hook. The command creates the hook file and sets the appropriate permissions.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/new/git_hook.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ terraspace new git_hook\n      create  .git/hooks/pre-push\n       chmod  .git/hooks/pre-push\n$\n```\n\n----------------------------------------\n\nTITLE: Truncating Terraspace Log Files\nDESCRIPTION: This command truncates all log files in the log/ folder to zero bytes. This preserves the file structure but removes all content. It includes a safety confirmation prompt before truncation.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/clean/logs.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace clean logs --truncate\nWill truncate all the log files in log/ folder\nAre you sure? (y/N) y\nLogs truncated\n$\n```\n\n----------------------------------------\n\nTITLE: Generating Stack-Level Helper with Conventional Naming in Terraspace\nDESCRIPTION: This command creates a helper file for a stack named 'demo'. It generates a 'demo_helper.rb' file in the 'app/stacks/demo/config/helpers' directory, following the conventional naming pattern.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/new/helper.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace new helper demo --type stack\n      create  app/stacks/demo/config/helpers\n      create  app/stacks/demo/config/helpers/demo_helper.rb\n$\n```\n\n----------------------------------------\n\nTITLE: Listing Terraform Cloud Workspaces with Terraspace CLI\nDESCRIPTION: This shell command demonstrates how to use Terraspace to list Terraform Cloud workspaces for a specific organization. The output shows two workspaces ('demo-dev-us-west-2' and 'demo2-dev-us-west-2') associated with the 'boltops' organization.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/tfc/list.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ terraspace tfc list\nWorkspaces for boltops:\ndemo-dev-us-west-2\ndemo2-dev-us-west-2\n$\n```\n\n----------------------------------------\n\nTITLE: Controlling Timestamp Display in Logs\nDESCRIPTION: Examples of log commands with timestamp display behavior and a command to explicitly show timestamps. By default, timestamps are shown for multiple files but not for single log files.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/logs.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nterraspace logs up         # timestamps will be shown in this case\nterraspace logs up network # timestamps not be shown in this case\n```\n\n----------------------------------------\n\nTITLE: Generating Text-Based Dependency Tree in Terraspace\nDESCRIPTION: Command to generate a text-based, tree-like representation of module dependencies using the --format text option. The output shows a hierarchical structure of modules with a1 as the root, branching to b1 and b2, both connecting to c1.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/all/graph.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ terraspace all graph --format text\na1\n├── b2\n│   └── c1\n└── b1\n    └── c1\n```\n\n----------------------------------------\n\nTITLE: Forcing Timestamp Display in Logs\nDESCRIPTION: Command to explicitly enable timestamp display in logs using the --timestamps option, which is useful when viewing a single log file where timestamps are not shown by default.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/logs.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nterraspace logs up network --timestamps\n```\n\n----------------------------------------\n\nTITLE: JSON Output of Terraspace Info Command\nDESCRIPTION: This snippet shows the JSON-formatted output of the 'terraspace info' command. It contains an array of objects, each representing a piece of information about the 'demo' stack, including build directory, cache directory, name, root, type, and type directory.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/info.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"Name\": \"build_dir\",\n    \"Value\": \"stacks/demo\"\n  },\n  {\n    \"Name\": \"cache_dir\",\n    \"Value\": \".terraspace-cache/us-west-2/dev/stacks/demo\"\n  },\n  {\n    \"Name\": \"name\",\n    \"Value\": \"demo\"\n  },\n  {\n    \"Name\": \"root\",\n    \"Value\": \"app/stacks/demo\"\n  },\n  {\n    \"Name\": \"type\",\n    \"Value\": \"stack\"\n  },\n  {\n    \"Name\": \"type_dir\",\n    \"Value\": \"stacks\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Running Terraspace Test with RSpec\nDESCRIPTION: This snippet shows the output of running 'terraspace test' command. It includes the test harness build, terraform init, plan, apply, and destroy operations, as well as the RSpec test results.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/test.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace test\n=> rspec\n\nmain\nBuilding test harness...\n...\nTest harness built: /tmp/terraspace/test-harnesses/demo-harness\n=> terraspace up demo -y\nBuilding .terraspace-cache/us-west-2/test/stacks/demo\nBuilt in .terraspace-cache/us-west-2/test/stacks/demo\nCurrent directory: .terraspace-cache/us-west-2/test/stacks/demo\n=> terraform init -get >> /tmp/terraspace/log/init/demo.log\n=> terraform plan -out /tmp/terraspace/plans/demo-20200920160313.plan\n...\n=> terraform apply -auto-approve  /tmp/terraspace/plans/demo-20200920160313.plan\n...\n=> terraform destroy -auto-approve\nrandom_pet.this: Refreshing state... [id=hopelessly-outgoing-serval]\nmodule.bucket.aws_s3_bucket.this: Refreshing state... [id=bucket-hopelessly-outgoing-serval]\nmodule.bucket.aws_s3_bucket.this: Destroying... [id=bucket-hopelessly-outgoing-serval]\nmodule.bucket.aws_s3_bucket.this: Destruction complete after 0s\nrandom_pet.this: Destroying... [id=hopelessly-outgoing-serval]\nrandom_pet.this: Destruction complete after 0s\n\nDestroy complete! Resources: 2 destroyed.\nTime took: 5s\n\nFinished in 22.08 seconds (files took 0.48602 seconds to load)\n1 example, 0 failures\n$\n```\n\n----------------------------------------\n\nTITLE: Updating Single Terraspace Module\nDESCRIPTION: Commands to update a specific module in the Terraspace bundle, with an example using 'demo' module.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/bundle.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nterraspace bundle update MODULE\nterraspace bundle update demo\n```\n\n----------------------------------------\n\nTITLE: Clearing Terraspace Cache for Troubleshooting\nDESCRIPTION: Command to clean the Terraspace cache when experiencing initialization issues. This removes both the .terraspace-cache directory and temporary files in /tmp/terraspace.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/all/init.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace clean cache -y\nRemoved .terraspace-cache\nRemoved /tmp/terraspace\n```\n\n----------------------------------------\n\nTITLE: Generating Stack Test Structure in Terraspace\nDESCRIPTION: This command creates a test structure for a stack named 'example' in Terraspace. It generates various configuration and spec files in the app/stacks/example/test directory.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/new/test.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace new test example --type stack\n=> Creating stack test: example\n      create  app/stacks/example/test/.rspec\n      create  app/stacks/example/test/Gemfile\n      create  app/stacks/example/test/spec/fixtures/config/app.rb\n      create  app/stacks/example/test/spec/fixtures/config/terraform/provider.tf\n      create  app/stacks/example/test/spec/fixtures/tfvars/test.tfvars\n      create  app/stacks/example/test/spec/main_spec.rb\n      create  app/stacks/example/test/spec/spec_helper.rb\n$\n```\n\n----------------------------------------\n\nTITLE: Creating Stack-Level Hook in Terraspace (Shell)\nDESCRIPTION: This command creates a stack-level hook for a demo stack in Terraspace. It generates a terraform.rb file in the app/stacks/demo/config/hooks directory.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/new/hook.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ terraspace new hook demo --type stack\n      create  app/stacks/demo/config/hooks\n      create  app/stacks/demo/config/hooks/terraform.rb\n```\n\n----------------------------------------\n\nTITLE: Generating Module Test Structure in Terraspace\nDESCRIPTION: This command creates a test structure for a module named 'example' in Terraspace. It generates basic test files in the app/modules/example/test directory.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/new/test.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace new test example --type module\n=> Creating module test: example\n      create  app/modules/example/test/.rspec\n      create  app/modules/example/test/Gemfile\n      create  app/modules/example/test/spec/main_spec.rb\n      create  app/modules/example/test/spec/spec_helper.rb\n$\n```\n\n----------------------------------------\n\nTITLE: Creating Stack-Level Hook with Kind Option in Terraspace (Shell)\nDESCRIPTION: This command creates a stack-level hook for a demo stack with a specific kind option (terraspace) in Terraspace. It generates a terraspace.rb file in the app/stacks/demo/config/hooks directory.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/new/hook.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ terraspace new hook demo --type stack --kind terraspace\n       exist  app/stacks/demo/config/hooks\n      create  app/stacks/demo/config/hooks/terraspace.rb\n```\n\n----------------------------------------\n\nTITLE: Generating Project Test Structure in Terraspace\nDESCRIPTION: This command creates a basic test structure for a project named 'my' in Terraspace. It generates a .rspec file and a spec helper in the root directory.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/new/test.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace new test my --type project\n=> Creating test bootstrap structure\n      create  .rspec\n      create  spec/spec_helper.rb\n$\n```\n\n----------------------------------------\n\nTITLE: Viewing Specific Terraspace Logs\nDESCRIPTION: Commands to view the last 10 lines of specific log files based on action type and stack name. These examples show how to view up logs for a specific stack, all up logs, all down logs, or all logs regardless of action.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/logs.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterraspace logs up network # view up log on a specific stack\nterraspace logs up         # view all up logs\nterraspace logs down       # view all down logs\nterraspace logs            # view all logs: up, down, etc\n```\n\n----------------------------------------\n\nTITLE: Creating Module-Level Hook in Terraspace (Shell)\nDESCRIPTION: This command creates a module-level hook for an example module in Terraspace. It generates a terraform.rb file in the app/modules/example/config/hooks directory.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/new/hook.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ terraspace new hook example --type module\n      create  app/modules/example/config/hooks\n      create  app/modules/example/config/hooks/terraform.rb\n```\n\n----------------------------------------\n\nTITLE: Creating a new Terraform module with Terraspace CLI\nDESCRIPTION: This command creates a new Terraform module named 'example' in the app/modules directory. It automatically generates the standard module files: main.tf for resource definitions, outputs.tf for module outputs, and variables.tf for input variables.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/new/module.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace new module example\n=> Creating test for new module: example\n      create  app/modules/example\n      create  app/modules/example/main.tf\n      create  app/modules/example/outputs.tf\n      create  app/modules/example/variables.tf\n$\n```\n\n----------------------------------------\n\nTITLE: Terraspace Plan Output Configuration\nDESCRIPTION: Example of using terraspace all plan command with a custom output path pattern for plan files.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/all/up.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace all plan --out \":MOD_NAME.plan\"\n```\n\n----------------------------------------\n\nTITLE: Creating Project-Level Arguments in Terraspace\nDESCRIPTION: Creates a Terraform arguments configuration file at the project level. This sets up a 'terraform.rb' file in the config/args directory that can define project-wide Terraform arguments.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/new/arg.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace new arg --type project\n      create  config/args\n      create  config/args/terraform.rb\n```\n\n----------------------------------------\n\nTITLE: Executing Terraspace Info Command with JSON Output\nDESCRIPTION: This snippet demonstrates how to use the 'terraspace info' command with the '--format json' option to get the output in JSON format. It provides the same information as the table output but in a structured JSON array.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/info.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace info demo --format json\n```\n\n----------------------------------------\n\nTITLE: Creating Stack-Level Arguments in Terraspace\nDESCRIPTION: Creates a Terraform arguments configuration file for a specific stack. This command generates a 'terraform.rb' file in the stack's config/args directory for stack-specific Terraform arguments.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/new/arg.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace new arg demo --type stack\n      create  app/stacks/demo/config/args\n      create  app/stacks/demo/config/args/terraform.rb\n```\n\n----------------------------------------\n\nTITLE: Terraspace TFC Runs Prune Demo Command with Output\nDESCRIPTION: Example output from running the terraspace tfc runs prune command, showing which runs will be kept and which will be pruned. The command requires confirmation before cancelling pending runs and discarding planned runs.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/tfc/runs/prune.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace tfc runs prune demo\nWill keep:\n\n    run-9muMrjrd22vhsP4u pending test 2020-09-18T12:47:11\n\nWill prune:\n\n    run-fYTDzmKfCQf558UN pending test 2020-09-18T12:46:34\n    run-6bgSTattJGpaRn9X pending test 2020-09-18T12:46:28\n    run-jDHEtZb3vuFnuXqJ planned test 2020-09-18T12:38:35\n\nAre you sure? (y/N) y\nCancelled run-fYTDzmKfCQf558UN test\nCancelled run-6bgSTattJGpaRn9X test\nDiscarded run-jDHEtZb3vuFnuXqJ test\n$\n```\n\n----------------------------------------\n\nTITLE: Generating Module-Level Helper with Custom Naming in Terraspace\nDESCRIPTION: This command creates a custom-named helper file for a module. It generates a 'custom_helper.rb' file in the 'app/module/example/config/helpers' directory, using the explicitly specified name 'custom'.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/new/helper.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace new helper example --type module --name custom\n      create  app/module/example/config/helpers\n      create  app/module/example/config/helpers/custom_helper.rb\n$\n```\n\n----------------------------------------\n\nTITLE: Creating Module-Level Arguments in Terraspace\nDESCRIPTION: Creates a Terraform arguments configuration file for a specific module. This sets up a 'terraform.rb' file in the module's config/args directory for module-specific Terraform arguments.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/new/arg.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace new arg example --type module\n      create  app/modules/example/config/args\n      create  app/modules/example/config/args/terraform.rb\n```\n\n----------------------------------------\n\nTITLE: Using Saved Plan File with Terraspace Up\nDESCRIPTION: This snippet shows how to use a previously saved plan file with the 'terraspace up' command. It demonstrates the syntax for specifying the plan file to be used during the apply operation.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/up.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace up demo --plan \"my.plan\"\n```\n\n----------------------------------------\n\nTITLE: Generating Project-Level Custom Helper in Terraspace\nDESCRIPTION: This command creates a custom helper file at the project level. It generates a 'custom_helper.rb' file in the 'config/helpers' directory.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/new/helper.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace new helper custom --type project\n      create  config/helpers\n      create  config/helpers/custom_helper.rb\n```\n\n----------------------------------------\n\nTITLE: Using Saved Terraspace Plan File\nDESCRIPTION: Example of using a previously saved plan file with the terraspace up command to execute the planned changes.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/plan.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace up demo --plan \"my.plan\"\n```\n\n----------------------------------------\n\nTITLE: Generating Stack-Level Helper with Custom Naming in Terraspace\nDESCRIPTION: This command creates a custom-named helper file for a stack. It generates a 'custom_helper.rb' file in the 'app/stacks/demo/config/helpers' directory, using the explicitly specified name 'custom'.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/new/helper.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace new helper demo --type stack --name custom\n      create  app/stacks/demo/config/helpers\n      create  app/stacks/demo/config/helpers/custom_helper.rb\n$\n```\n\n----------------------------------------\n\nTITLE: Enabling Terraspace Auto-Completion in Shell Profile\nDESCRIPTION: Command to add to your shell profile to enable TAB auto-completion for Terraspace commands. This evaluates the completion script and makes it available in your terminal session.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/completion.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\neval $(terraspace completion_script)\n```\n\n----------------------------------------\n\nTITLE: Listing All Terraform Cloud Runs with Terraspace\nDESCRIPTION: Shows how to view all recent runs regardless of status by using the '--status all' flag. This displays runs with various statuses like planned, canceled, and discarded.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/tfc/runs/list.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace tfc runs list demo --status all\n+----------------------+-----------+--------------------------------+---------------------+\n|          Id          |  Status   |            Message             |     Created At      |\n+----------------------+-----------+--------------------------------+---------------------+\n| run-LuwMibh3ebiG7KQZ | planned   | test 3                         | 2020-09-17T23:16:36 |\n| run-z9f67TNMRamZiGMR | canceled  | test 2                         | 2020-09-17T23:15:55 |\n| run-cN3CKT5po29p35Ta | discarded | test                           | 2020-09-17T22:24:31 |\n| run-rXMd7dm3fHvVsA36 | discarded | Queued from Terraform Cloud UI | 2020-09-17T20:00:20 |\n+----------------------+-----------+--------------------------------+---------------------+\n$\n```\n\n----------------------------------------\n\nTITLE: Generating Module-Level Helper with Conventional Naming in Terraspace\nDESCRIPTION: This command creates a helper file for a module named 'example'. It generates an 'example_helper.rb' file in the 'app/module/example/config/helpers' directory, following the conventional naming pattern.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/new/helper.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace new helper example --type module\n      create  app/module/example/config/helpers\n      create  app/module/example/config/helpers/example_helper.rb\n$\n```\n\n----------------------------------------\n\nTITLE: Filtering Terraform Cloud Runs by Specific Statuses\nDESCRIPTION: Demonstrates how to filter runs by multiple specific statuses by providing a list to the '--status' option. This example filters for runs with 'canceled' and 'discarded' statuses only.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/tfc/runs/list.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace tfc runs list demo --status canceled discarded\n+----------------------+-----------+--------------------------------+---------------------+\n|          Id          |  Status   |            Message             |     Created At      |\n+----------------------+-----------+--------------------------------+---------------------+\n| run-gS2m1avc3U4j1fip | canceled  | test                           | 2020-09-17T23:15:43 |\n| run-ojwQ4r7MxuzyK3d9 | discarded | test                           | 2020-09-17T22:33:00 |\n| run-dczeLQsMc3ya4XnY | canceled  | test                           | 2020-09-17T22:32:55 |\n+----------------------+-----------+--------------------------------+---------------------+\n```\n\n----------------------------------------\n\nTITLE: Running the Terraspace Check Setup Command in Bash\nDESCRIPTION: Example of running the 'terraspace check_setup' command which checks if the installed version of Terraform is compatible with Terraspace. The command detects the Terraspace version, locates the Terraform binary, verifies its version, and confirms compatibility.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/setup.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace check_setup\nDetected Terraspace version: 0.3.3\nDetected Terraform bin: /home/ec2-user/.tfenv/bin/terraform\nDetected Terraform v0.13.2\nTerraspace requires Terraform v0.12.x and above\nYou're all set!\n$\n```\n\n----------------------------------------\n\nTITLE: Using Terraspace TFC Runs Prune Command with Demo Option\nDESCRIPTION: Basic examples showing how to use the terraspace tfc runs prune command with the demo option. The --noop flag allows for previewing what would be pruned without making actual changes.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/tfc/runs/prune.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterraspace tfc runs prune demo --noop\nterraspace tfc runs prune demo # live run\n```\n\n----------------------------------------\n\nTITLE: Basic Terraspace Completion Commands\nDESCRIPTION: Examples of the terraspace completion command which prints words for TAB auto-completion. These commands show how to get completion suggestions for different command contexts.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/completion.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterraspace completion\nterraspace completion up\nterraspace completion up name\n```\n\n----------------------------------------\n\nTITLE: Customizing Log Output Line Count\nDESCRIPTION: Command to adjust the number of log lines displayed using the -n option. By default, logs command shows the last 10 lines for each log file.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/logs.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nterraspace logs -n 2       # view last 2 lines of all logs: up, down, etc\n```\n\n----------------------------------------\n\nTITLE: Following All Terraspace Logs in Real-time\nDESCRIPTION: Command to follow all Terraspace logs in real-time as they are generated while running operations. Terraspace automatically checks for new logs every second.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/logs.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterraspace logs -f\n```\n\n----------------------------------------\n\nTITLE: Terraspace Auto-Completion Usage Examples\nDESCRIPTION: Examples demonstrating how to use TAB auto-completion with Terraspace commands. Pressing TAB at these positions will show available options based on the current context.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/completion.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nterraspace [TAB]\nterraspace up [TAB]\nterraspace up name [TAB]\nterraspace up name --[TAB]\n```\n\n----------------------------------------\n\nTITLE: Showing All Log Content\nDESCRIPTION: Command to display all log content instead of just the last few lines by using the -a option.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/logs.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nterraspace logs up -a\n```\n\n----------------------------------------\n\nTITLE: Configuring Terraspace Shell Completion in Bash\nDESCRIPTION: This command enables shell tab completion for Terraspace CLI commands. It loads the completion script dynamically by evaluating the output of the terraspace completion_script command.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/completion_script.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\neval $(terraspace completion_script)\n```\n\n----------------------------------------\n\nTITLE: Tailing Terraspace Logs\nDESCRIPTION: Commands to follow/tail logs in real-time using the -f option for different action types and stacks. These commands continuously display new log entries as they are generated.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/logs.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nterraspace logs up network -f # view up log on a specific stack\nterraspace logs up -f         # view all up logs\nterraspace logs down -f       # view all down logs\nterraspace logs -f            # view all logs: up, down, etc\n```\n\n----------------------------------------\n\nTITLE: Module Information Command\nDESCRIPTION: Command to retrieve information about a specific module in the Terraspace bundle.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/bundle.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nterraspace bundle info MODULE\n```\n\n----------------------------------------\n\nTITLE: Removing Terraspace Log Files with Command Line Example\nDESCRIPTION: This example demonstrates how to use the terraspace logs remove command to delete all files in the log directory of a Terraspace project. The command outputs a confirmation message indicating that all files in the log/ directory are being removed.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/logs/remove.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace logs remove\nRemoving all files in log/\n$\n```\n\n----------------------------------------\n\nTITLE: Truncating Log Files with Terraspace CLI\nDESCRIPTION: This example demonstrates how to use the terraspace logs truncate command to clear all log files in the log/ directory. The command provides confirmation after successful truncation.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/logs/truncate.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace logs truncate\nTruncating log files in log/\n$\n```\n\n----------------------------------------\n\nTITLE: Defining Module Dependencies in Terrafile with Ruby\nDESCRIPTION: A Terrafile configuration that demonstrates how to import Terraform modules from both GitHub repositories and the Terraform Registry. It specifies version requirements for each module using tag and version parameters.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/README.md#2025-04-16_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# GitHub repo\nmod \"s3\", source: \"boltops-tools/terraform-aws-s3\", tag: \"v0.1.0\"\n# Terraform registry\nmod \"sg\", source: \"terraform-aws-modules/security-group/aws\", version: \"3.10.0\"\n```\n\n----------------------------------------\n\nTITLE: Removing Terraspace Log Files\nDESCRIPTION: This command completely removes all log files from the log/ folder in a Terraspace project. It includes a safety confirmation prompt before deletion is performed.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/clean/logs.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace clean logs\nWill remove all the log files in log/ folder\nAre you sure? (y/N) y\nRemoving all files in log/\nLogs removed\n```\n\n----------------------------------------\n\nTITLE: Formatting Specific Module or Stack in Terraspace\nDESCRIPTION: These commands demonstrate how to format a specific stack or module using the terraspace fmt command.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/fmt.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace fmt stack1\n$ terraspace fmt module1 -t module\n```\n\n----------------------------------------\n\nTITLE: Checking Terraspace Format Without Fixing\nDESCRIPTION: These commands demonstrate how to check the format of Terraform files without making changes, using various options like -write=false, -list, and -check.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/fmt.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ terraspace fmt demo -write=false -list\n$ terraspace fmt demo -check\n$ terraspace fmt -write=false -list\n```\n\n----------------------------------------\n\nTITLE: Listing Only Terraspace Modules\nDESCRIPTION: Shows how to filter the list to display only module resources using the -t module option.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/list.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ terraspace list -t module\napp/modules/example\n$\n```\n\n----------------------------------------\n\nTITLE: Basic Terraspace Bundle Command\nDESCRIPTION: Basic command to execute Terraspace bundler operations.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/bundle.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nterraspace bundle\n```\n\n----------------------------------------\n\nTITLE: Import Module Example Command\nDESCRIPTION: Command to import an example from a module as a stack in Terraspace.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/lib/terraspace/cli/help/bundle.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nterraspace bundle example MODULE EXAMPLE\n```\n\n----------------------------------------\n\nTITLE: Installing Terraspace Ruby Gem Dependencies\nDESCRIPTION: This command installs the necessary Ruby gem dependencies for Terraspace development.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/CONTRIBUTING.md#2025-04-16_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nbundle\n```\n\n----------------------------------------\n\nTITLE: Running Terraspace Ruby Tests\nDESCRIPTION: This command runs the test suite for Terraspace using RSpec.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/CONTRIBUTING.md#2025-04-16_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nbundle exec rspec\n```\n\n----------------------------------------\n\nTITLE: Running Terraspace Ruby Console\nDESCRIPTION: This command starts an interactive Ruby console with Terraspace loaded, useful for development and debugging.\nSOURCE: https://github.com/boltops-tools/terraspace/blob/master/CONTRIBUTING.md#2025-04-16_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nbundle exec bin/console\n```"
  }
]