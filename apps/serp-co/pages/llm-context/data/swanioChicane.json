[
  {
    "owner": "swan-io",
    "repo": "chicane",
    "content": "TITLE: Implementing Chicane Router in a React TypeScript Application\nDESCRIPTION: Example of how to create and use the Chicane router in a React application. It demonstrates route definition, component usage, and type-safe route matching.\nSOURCE: https://github.com/swan-io/chicane/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createRouter } from \"@swan-io/chicane\";\nimport { match } from \"ts-pattern\";\n\nconst Router = createRouter({\n  Home: \"/\",\n  Users: \"/users\",\n  User: \"/users/:userId\",\n});\n\nconst App = () => {\n  const route = Router.useRoute([\"Home\", \"Users\", \"User\"]);\n\n  // route object is a discriminated union\n  return match(route)\n    .with({ name: \"Home\" }, () => <h1>Home</h1>)\n    .with({ name: \"Users\" }, () => <h1>Users</h1>)\n    .with({ name: \"User\" }, ({ params }) => <h1>User {params.userId}</h1>) // params are strongly typed\n    .otherwise(() => <h1>404</h1>);\n};\n```\n\n----------------------------------------\n\nTITLE: Using useRoute Hook for Route Matching in React with ts-pattern\nDESCRIPTION: This snippet demonstrates how to use the Router.useRoute hook to listen to specific routes and render appropriate components based on the current route. It uses ts-pattern's match function for exhaustive route matching with cleaner syntax than traditional switch statements.\nSOURCE: https://github.com/swan-io/chicane/blob/main/docs/docs/matching-some-routes.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// Let's start by importing our router\nimport { Header } from \"./Header\";\nimport { Home } from \"./Home\";\nimport { NotFound } from \"./NotFound\";\nimport { Router } from \"./router\";\nimport { UserArea } from \"./UserArea\";\n\nexport const App = () => {\n  // Then pass the route subset this component should listen to (the order isn't important)\n  const route = Router.useRoute([\"Home\", \"UserArea\"]);\n\n  // And then, simply make each route return its component\n  return (\n    <>\n      <Header />\n\n      {match(route)\n        .with({ name: \"Home\" }, () => <Home />)\n        .with({ name: \"UserArea\" }, () => <UserArea />)\n        .otherwise(() => (\n          <NotFound />\n        ))}\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Router with Chicane in TypeScript\nDESCRIPTION: Creates a basic router with defined routes, including parameterized routes. This setup defines home, about, user list, and user detail routes with appropriate URL patterns.\nSOURCE: https://github.com/swan-io/chicane/blob/main/docs/docs/creating-your-router.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRouter } from \"@swan-io/chicane\";\n\nexport const Router = createRouter({\n  Home: \"/\",\n  About: \"/about\",\n  UserList: \"/users\",\n  UserDetail: \"/users/:userId\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Type-Safe Link Creation with @swan-io/chicane in React\nDESCRIPTION: This snippet demonstrates how to use the Router exported from the @swan-io/chicane router file to create type-safe links in a React component. It shows both Link component usage and programmatic navigation with useNavigate.\nSOURCE: https://github.com/swan-io/chicane/blob/main/ADOPTION.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { Router } from \"./router\";\n\nconst SomePage = () => {\n  const navigate = useNavigate();\n\n  return (\n    <>\n      <Link to={Router.Home()}>Back to home page</Link>\n      <Link to={Router.Team({ teamId: \"foo\" })}>Team foo page</Link>\n      <Link to={Router.Team({ teamId: \"bar\" })}>Team bar page</Link>\n\n      <button\n        onClick={(event) => {\n          event.preventDefault();\n          navigate(Router.Teams({ created: \"baz\" }), { replace: true });\n        }}\n      >\n        Click me\n      </button>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Router with Chicane in TypeScript\nDESCRIPTION: Demonstrates how to use the createRouter function to define routes for a web application. It shows the basic structure for creating routes with different patterns.\nSOURCE: https://github.com/swan-io/chicane/blob/main/docs/docs/top-level-api.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRouter } from \"@swan-io/chicane\";\n\nexport const Router = createRouter({\n  Home: \"/\",\n  UserList: \"/users\",\n  UserDetail: \"/users/:userId\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Navigation Links with Chicane Router\nDESCRIPTION: Example showing how to implement basic navigation links using the Link component from Chicane router. Demonstrates linking to Home and Users routes using Router definitions.\nSOURCE: https://github.com/swan-io/chicane/blob/main/docs/docs/linking-to-a-route.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from \"@swan-io/chicane\";\nimport { Router } from \"./router\";\n\nconst Header = () => (\n  <div>\n    <h1>My super app</h1>\n    <Link to={Router.Home()}>Home</Link>\n    <Link to={Router.Users()}>Users</Link>\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Using the useRoute Hook for Route Matching in TypeScript\nDESCRIPTION: Shows how to use the useRoute React hook to match the current URL against a set of possible routes. The hook returns the first matching route with its parameters or undefined if no match is found.\nSOURCE: https://github.com/swan-io/chicane/blob/main/docs/docs/creating-your-router.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst route = Router.useRoute([\"UserList\", \"UserDetail\"]);\n\n// -> { name: \"UserList\", params: {} }\n//  | { name: \"UserDetail\", params: { userId: \"1\" } }\n//  | undefined\n```\n\n----------------------------------------\n\nTITLE: Route Matching with Router.useRoute in TypeScript\nDESCRIPTION: Shows how to use the Router.useRoute hook to listen to specific routes and get the matched route name and parameters. The function takes an array of route names to monitor.\nSOURCE: https://github.com/swan-io/chicane/blob/main/docs/docs/router.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst route = Router.useRoute([\"Home\", \"UserArea\"]);\n\n// then match on the route\n```\n\n----------------------------------------\n\nTITLE: Implementing Path Parameters in Routes\nDESCRIPTION: Shows how to define routes with dynamic path parameters using :paramName syntax, which results in non-nullable string parameters.\nSOURCE: https://github.com/swan-io/chicane/blob/main/docs/docs/route-pattern-syntax.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst Router = createRouter({\n  Home: \"/\",\n  UserList: \"/users\",\n  UserDetail: \"/users/:userId\",\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Query Parameters to Routes\nDESCRIPTION: Demonstrates how to define routes with optional query parameters that result in nullable string values.\nSOURCE: https://github.com/swan-io/chicane/blob/main/docs/docs/route-pattern-syntax.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst Router = createRouter({\n  Home: \"/\",\n  UserArea: \"/users/*\",\n  UserList: \"/users?:sortBy\",\n  UserDetail: \"/users/:userId\",\n});\n```\n\n----------------------------------------\n\nTITLE: Generating URLs with Router.{RouteName} in TypeScript\nDESCRIPTION: Demonstrates how to generate a URL for a specific route by calling the route's function on the Router with the required parameters. This example shows creating a URL for a user detail page.\nSOURCE: https://github.com/swan-io/chicane/blob/main/docs/docs/router.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nRouter.UserDetail({ userId: \"123\" }); // \"/users/123\"\n```\n\n----------------------------------------\n\nTITLE: Extracting Route Types with InferRoutes in @swan-io/chicane\nDESCRIPTION: This code demonstrates how to create a router using createRouter from @swan-io/chicane and extract the route types using the InferRoutes utility type. The example defines a Router with UserList and UserDetail routes, then creates type definitions for route names and parameters.\nSOURCE: https://github.com/swan-io/chicane/blob/main/docs/docs/utility-types.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createRouter, InferRoutes } from \"@swan-io/chicane\";\n\nexport const Router = createRouter({\n  UserList: \"/users\",\n  UserDetail: \"/users/:userId\",\n});\n\n// A map of route names and their associated params\ntype Routes = InferRoutes<typeof Router>;\n\nexport type RouteName = keyof Routes;\nexport type RouteParams<T extends RouteName> = Routes[T];\n```\n\n----------------------------------------\n\nTITLE: Static Route Matching with Router.getRoute in TypeScript\nDESCRIPTION: Demonstrates how to use Router.getRoute to statically check for route matches. It can check the current location or a provided URL path against a subset of routes.\nSOURCE: https://github.com/swan-io/chicane/blob/main/docs/docs/router.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst routeA = Router.getRoute([\"Home\", \"UserArea\"]);\nconst routeB = Router.getRoute([\"User\"], \"/users/1\");\n```\n\n----------------------------------------\n\nTITLE: Generating URLs from Route Definitions in TypeScript\nDESCRIPTION: Demonstrates how to call route functions to generate URLs, including passing parameters for routes that require them. Routes are fully typed to ensure all necessary parameters are provided.\nSOURCE: https://github.com/swan-io/chicane/blob/main/docs/docs/creating-your-router.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nRouter.Home(); // \"/\"\nRouter.UserDetail({ userId: \"1\" }); // \"/users/1\"\n```\n\n----------------------------------------\n\nTITLE: Using useLinkProps Hook for Custom Link Components in React\nDESCRIPTION: This snippet demonstrates how to use the useLinkProps hook to create a custom link component that handles navigation. It extracts active state and click handling while supporting custom styling for active links.\nSOURCE: https://github.com/swan-io/chicane/blob/main/docs/docs/hooks.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLinkProps } from \"@swan-io/chicane\";\n\nconst MyCustomLink = ({ to, className, activeClassName, ...props }) => {\n  const { active, onClick } = useLinkProps({ href: to, replace, target });\n\n  return (\n    <a\n      {...props}\n      onClick={onClick}\n      className={cx(className, active && activeClassName)}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Subroute Component Implementation\nDESCRIPTION: Shows how to implement a component that handles subroutes within a wildcard route area.\nSOURCE: https://github.com/swan-io/chicane/blob/main/docs/docs/route-pattern-syntax.md#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst UserArea = () => {\n  const route = Router.useRoute([\"UserList\", \"UserDetail\"]);\n\n  return match(route)\n    .with({ name: \"UserList\" }, () => <UserList />)\n    .with({ name: \"UserDetail\" }, ({ params: { userId } }) => (\n      <UserDetail userId={userId} />\n    ))\n    .otherwise(() => null);\n};\n```\n\n----------------------------------------\n\nTITLE: Navigation with Router.push in TypeScript\nDESCRIPTION: Shows how to navigate to a specific route using Router.push, which creates a new entry in the browser history. Can be called with just a route name or with route parameters.\nSOURCE: https://github.com/swan-io/chicane/blob/main/docs/docs/router.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nRouter.push(\"Home\");\nRouter.push(\"UserDetail\", { userId: \"123\" });\n```\n\n----------------------------------------\n\nTITLE: Navigation with Router.replace in TypeScript\nDESCRIPTION: Demonstrates using Router.replace to navigate to a route without creating a new browser history entry. Like push, it can be called with just a route name or with parameters.\nSOURCE: https://github.com/swan-io/chicane/blob/main/docs/docs/router.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nRouter.replace(\"Home\");\nRouter.replace(\"UserDetail\", { userId: \"123\" });\n```\n\n----------------------------------------\n\nTITLE: Using Link Component in React with TypeScript\nDESCRIPTION: This example demonstrates how to use the Link component in a React application. It shows two links: one to the home route and another to a user detail route with a dynamic userId parameter.\nSOURCE: https://github.com/swan-io/chicane/blob/main/docs/docs/components.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from \"@swan-io/chicane\";\n\nconst App = () => (\n  <>\n    <Link to={Router.Home()}>Home</Link>\n    <Link to={Router.UseDetail({ userId: \"123\" })}>User</Link>\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Link Component Props in TypeScript\nDESCRIPTION: This snippet defines the prop types for the Link component. It includes the required 'to' prop for the route, an optional 'replace' boolean, and optional styling properties for active links. It also allows any prop that the HTML <a> element accepts.\nSOURCE: https://github.com/swan-io/chicane/blob/main/docs/docs/components.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype LinkProps = {\n  to: string; // The route you're linking to (required)\n  replace?: boolean; // Replace instead of push (defaults to `false`)\n  activeClassName?: string;\n  activeStyle?: React.CSSProperties;\n  // …and any prop <a> takes\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Router File with @swan-io/chicane in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a router.ts file using @swan-io/chicane. It defines routes, creates a router instance, and exports necessary functions and paths for use with react-router-dom.\nSOURCE: https://github.com/swan-io/chicane/blob/main/ADOPTION.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRouter } from \"@swan-io/chicane\";\n\n// Here we list all our application pages\nconst routes = {\n  Home: \"/\",\n  Teams: \"/teams?:created\", // chicane supports search params declaration\n  Team: \"/teams/:teamId\",\n  NewTeam: \"/teams/new\",\n  // Note that chicane \"createGroup\" works perfectly here! (for routes nesting)\n} as const;\n\n// We avoid exporting chicane routing functions\nconst { getRoute, useRoute, push, replace, ...rest } = createRouter(routes);\n\n// We exports all the link creation functions\nexport const Router = rest;\n\n// We export paths (without search params, as react-router-dom doesn't support them)\nexport const paths = (Object.keys(routes) as (keyof typeof routes)[]).reduce(\n  (acc, key) => ({ ...acc, [key]: routes[key].replace(/[?#].*/, \"\") }),\n  {} as Record<keyof typeof routes, string>,\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Link Component with useLinkProps\nDESCRIPTION: Example of creating a custom Link component using the useLinkProps hook. Shows how to handle route activation state and click events while maintaining standard anchor functionality.\nSOURCE: https://github.com/swan-io/chicane/blob/main/docs/docs/linking-to-a-route.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLinkProps } from \"@swan-io/chicane\";\nimport cx from \"classnames\";\n\nconst Link = ({ to, replace, className, activeClassName, ...props }) => {\n  const { active, onClick } = useLinkProps({ href: to, replace });\n\n  return (\n    <a\n      {...props}\n      href={to}\n      onClick={onClick}\n      className={cx(className, active && activeClassName)}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Path Routes in Chicane Router\nDESCRIPTION: Demonstrates basic route definition with simple static paths using createRouter.\nSOURCE: https://github.com/swan-io/chicane/blob/main/docs/docs/route-pattern-syntax.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst Router = createRouter({\n  Home: \"/\",\n  UserList: \"/users\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Union Parameters in Routes\nDESCRIPTION: Demonstrates how to define routes with union parameters that restrict possible values using {value1|value2} syntax.\nSOURCE: https://github.com/swan-io/chicane/blob/main/docs/docs/route-pattern-syntax.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst Router = createRouter({\n  Home: \"/\",\n  Projects: \"/:env{live|sandbox}/projects\",\n  Users: \"/users?:statuses{invited|enabled|banned}[]\",\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Array Query Parameters\nDESCRIPTION: Shows how to specify query parameters that should be treated as arrays using the [] suffix.\nSOURCE: https://github.com/swan-io/chicane/blob/main/docs/docs/route-pattern-syntax.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst Router = createRouter({\n  Home: \"/\",\n  UserArea: \"/users/*\",\n  UserList: \"/users?:sortBy&:status[]\",\n  UserDetail: \"/users/:userId\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Wildcard Routes\nDESCRIPTION: Shows how to define wildcard routes that match multiple paths and delegate subroute handling.\nSOURCE: https://github.com/swan-io/chicane/blob/main/docs/docs/route-pattern-syntax.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst Router = createRouter({\n  Home: \"/\",\n  UserArea: \"/users/*\", // will match \"/users\" and \"/users/:userId\"\n  UserList: \"/users\",\n  UserDetail: \"/users/:userId\",\n});\n```\n\n----------------------------------------\n\nTITLE: Main App Component with Wildcard Route Handling\nDESCRIPTION: Demonstrates how to handle wildcard routes in the main App component.\nSOURCE: https://github.com/swan-io/chicane/blob/main/docs/docs/route-pattern-syntax.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst App = () => {\n  const route = Router.useRoute([\"Home\", \"UserArea\"]);\n\n  return match(route)\n    .with({ name: \"Home\" }, () => <Home />)\n    .with({ name: \"UserArea\" }, () => <UserArea />)\n    .otherwise(() => null);\n};\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Router.P in React TSX\nDESCRIPTION: Illustrates how to use Router.P with ts-pattern for declarative route matching in React components. This integration allows for type-safe pattern matching on routes and their parameters.\nSOURCE: https://github.com/swan-io/chicane/blob/main/docs/docs/router.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst Router = createRouter({\n  Home: \"/\",\n  UserArea: \"/users/*\",\n  User: \"/users/:userId\",\n});\n\nconst App = () => {\n  const route = Router.useRoute([\"Home\", \"UserArea\", \"User\"]);\n\n  return match(route)\n    .with(Router.P.Home(P._), () => <Home />)\n    .with(Router.P.UserArea(P._), () => <UserArea />)\n    .with(Router.P.User({ userId: P.select() }), (id) => <User id={id} />)\n    .otherwise(() => null);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing useFocusReset Hook for Accessible Route Navigation in React\nDESCRIPTION: This code demonstrates how to use the useFocusReset hook to improve accessibility by automatically focusing on the updated content area when routes change. The hook takes a route object and a containerRef that points to the main content area that changes with navigation.\nSOURCE: https://github.com/swan-io/chicane/blob/main/docs/docs/route-focus.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFocusReset } from \"@swan-io/chicane\";\nimport { useRef } from \"react\";\n\nexport const App = () => {\n  const route = Router.useRoute([\"Home\", \"UserArea\"]);\n  const containerRef = useRef(null);\n\n  useFocusReset({ route, containerRef });\n\n  return (\n    <>\n      <Header />\n\n      <div ref={containerRef}>\n        {match(route)\n          .with({ name: \"Home\" }, () => <Home />)\n          .with({ name: \"UserArea\" }, () => <UserArea />)\n          .otherwise(() => (\n            <NotFound />\n          ))}\n      </div>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing useFocusReset Hook for Accessibility in Route Changes\nDESCRIPTION: This example shows how to use the useFocusReset hook to improve accessibility by automatically focusing on content after route changes. It requires a reference to the container element and the current route.\nSOURCE: https://github.com/swan-io/chicane/blob/main/docs/docs/hooks.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFocusReset } from \"@swan-io/chicane\";\nimport { useRef } from \"react\";\n\nexport const App = () => {\n  const route = Router.useRoute([\"Home\", \"UserArea\"]);\n  const containerRef = useRef(null);\n\n  useFocusReset({ route, containerRef });\n\n  return (\n    <>\n      <Header />\n\n      <div ref={containerRef}>\n        {match(route)\n          .with({ name: \"Home\" }, () => <Home />)\n          .with({ name: \"UserArea\" }, () => <UserArea />)\n          .otherwise(() => (\n            <NotFound />\n          ))}\n      </div>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Tracking Location Changes with useLocation Hook in React\nDESCRIPTION: This snippet demonstrates how to use the useLocation hook to monitor and respond to navigation changes in a React application. The hook returns the current location object that updates when navigation occurs.\nSOURCE: https://github.com/swan-io/chicane/blob/main/docs/docs/hooks.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLocation } from \"@swan-io/chicane\";\n\nconst App = () => {\n  const location = useLocation();\n\n  React.useEffect(() => {\n    console.log(\"Location changed!\");\n    console.log(location);\n  }, [location]);\n\n  // …\n};\n```\n\n----------------------------------------\n\nTITLE: Preventing Navigation with useBlocker Hook in React Forms\nDESCRIPTION: This example shows how to use the useBlocker hook to prevent users from accidentally navigating away from a form with unsaved changes. It displays a confirmation dialog when navigation is attempted while editing.\nSOURCE: https://github.com/swan-io/chicane/blob/main/docs/docs/hooks.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useBlocker } from \"@swan-io/chicane\";\n\nconst App = () => {\n  const { formStatus } = useForm(/* … */);\n\n  useBlocker(\n    formStatus === \"editing\",\n    \"Are you sure you want to stop editing this profile?\",\n  );\n\n  // …\n};\n```\n\n----------------------------------------\n\nTITLE: Organizing Nested Routes with createGroup in TypeScript\nDESCRIPTION: Demonstrates how to use the createGroup helper to organize nested routes and avoid repetition. This example creates a User group of routes with a common prefix, making the router definition more maintainable.\nSOURCE: https://github.com/swan-io/chicane/blob/main/docs/docs/creating-your-router.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRouter, createGroup } from \"@swan-io/chicane\";\n\nexport const Router = createRouter({\n  Home: \"/\",\n  About: \"/about\",\n\n  ...createGroup(\"User\", \"/users\", {\n    Area: \"/*\", // UserArea: \"/users/*\"\n    List: \"/\", // UserList: \"/users\"\n    Detail: \"/:userId\", // UserDetail: \"/users/:userId\"\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Grouping Routes with createGroup in Chicane\nDESCRIPTION: Shows how to use the createGroup function to create nested routes with shared prefixes or search parameters. This example demonstrates grouping for User and Book routes with different patterns and search parameters.\nSOURCE: https://github.com/swan-io/chicane/blob/main/docs/docs/top-level-api.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRouter, createGroup } from \"@swan-io/chicane\";\n\nexport const Router = createRouter({\n  Home: \"/\",\n\n  ...createGroup(\"User\", \"/users\", {\n    Area: \"/*\", // UserArea: \"/users/*\"\n    List: \"/\", // UserList: \"/users\"\n    Detail: \"/:userId\", // UserDetail: \"/users/:userId\"\n  }),\n\n  ...createGroup(\"Book\", \"/books?:isEditor\", {\n    Area: \"/*\", // BookArea: \"/books/*?:isEditor\"\n    List: \"/?:byAuthor\", // BookList: \"/books?:isEditor&:byAuthor\"\n    Detail: \"/:bookId\", // BookDetail: \"/books/:bookId?:isEditor\"\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Updating React Router DOM Route Declarations with @swan-io/chicane Paths\nDESCRIPTION: This snippet shows how to update react-router-dom Route component declarations to use the paths exported from the @swan-io/chicane router file. It demonstrates the integration of @swan-io/chicane with react-router-dom.\nSOURCE: https://github.com/swan-io/chicane/blob/main/ADOPTION.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BrowserRouter, Route, Routes } from \"react-router-dom\";\nimport { paths } from \"./router\";\n\n<BrowserRouter>\n  <Routes>\n    {/* we use paths from router.ts */}\n    <Route path={paths.Home} element={<Home />} />\n    <Route path={paths.Teams} element={<Teams />} />\n    <Route path={paths.Team} element={<Team />} />\n    <Route path={paths.NewTeam} element={<NewTeam />} />\n  </Routes>\n</BrowserRouter>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-side Rendering with Chicane in Express\nDESCRIPTION: This snippet demonstrates how to implement server-side rendering in a React application using Chicane's ServerUrlProvider. It shows the setup of an Express route handler that renders a React app on the server by wrapping it with ServerUrlProvider and passing the original request URL.\nSOURCE: https://github.com/swan-io/chicane/blob/main/docs/docs/server-side-rendering.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ServerUrlProvider } from \"@swan-io/chicane\";\nimport express from \"express\";\nimport { renderToString } from \"react-dom/server\";\nimport { App } from \"../client/App\";\n\nconst app = express();\n\napp.use(\"*\", (req, res) => {\n  const html = renderToString(\n    <ServerUrlProvider value={req.originalUrl}>\n      <App />\n    </ServerUrlProvider>,\n  );\n\n  // …\n});\n```\n\n----------------------------------------\n\nTITLE: Using Union Parameters in Components\nDESCRIPTION: Shows how to consume union parameters in React components with type safety.\nSOURCE: https://github.com/swan-io/chicane/blob/main/docs/docs/route-pattern-syntax.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst App = () => {\n  const route = Router.useRoute([\"Projects\", \"Users\"]);\n\n  return match(route)\n    .with({ name: \"Projects\" }, ({ params: { env } }) => (\n      // env type is \"live\" | \"sandbox\"\n      <Projects env={env} />\n    ))\n    .with({ name: \"Users\" }, ({ params: { statuses } }) => (\n      // statuses type is Array<\"invited\" | \"enabled\" | \"banned\"> | undefined\n      <Users statuses={statuses} />\n    ))\n    .otherwise(() => null);\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Location Information with getLocation in TypeScript\nDESCRIPTION: Demonstrates how to use the getLocation function to retrieve the current location as a Location object with path segments, search parameters, and raw location data. The Location object provides path information as an array of segments and search parameters as a structured object.\nSOURCE: https://github.com/swan-io/chicane/blob/main/docs/docs/lower-level-api.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getLocation /*, Location */ } from \"@swan-io/chicane\";\n\ntype Location = {\n  path: string[]; // path split on `/`\n  search: Record<string, string | string[]>;\n  raw: { path: string; search: string };\n  toString(): string; // returns the imploded location\n};\n\nconst location: Location = getLocation();\nconsole.log(location.path);\n```\n\n----------------------------------------\n\nTITLE: Encoding and Decoding URL Search Parameters in TypeScript\nDESCRIPTION: Illustrates how to use encodeSearch to convert a JavaScript object into a URL query string and decodeSearch to parse a query string back into a structured object. The functions handle array values by repeating parameter names.\nSOURCE: https://github.com/swan-io/chicane/blob/main/docs/docs/lower-level-api.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { encodeSearch, decodeSearch } from \"@swan-io/chicane\";\n\nencodeSearch({ invitation: \"542022247745\", users: [\"frank\", \"chris\"] });\n// -> \"?invitation=542022247745&users=frank&users=chris\"\n\ndecodeSearch(\"?invitation=542022247745&users=frank&users=chris\");\n// -> { invitation: \"542022247745\", users: [\"frank\", \"chris\"] }\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Location Changes in TypeScript\nDESCRIPTION: Shows how to subscribe to location changes using the subscribeToLocation function. When the location changes, the provided callback function is executed with the updated Location object as its argument.\nSOURCE: https://github.com/swan-io/chicane/blob/main/docs/docs/lower-level-api.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { subscribeToLocation } from \"@swan-io/chicane\";\n\nsubscribeToLocation((location: Location) => {\n  console.log(\"Location changed!\");\n  console.log(location);\n});\n```\n\n----------------------------------------\n\nTITLE: Direct Navigation with pushUnsafe and replaceUnsafe in TypeScript\nDESCRIPTION: Demonstrates how to use the pushUnsafe and replaceUnsafe functions for direct navigation. These are low-level escape hatches that accept a single string argument, bypassing the structured approach of the Router API.\nSOURCE: https://github.com/swan-io/chicane/blob/main/docs/docs/lower-level-api.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pushUnsafe, replaceUnsafe } from \"@swan-io/chicane\";\n\npushUnsafe(\"/\");\nreplaceUnsafe(\"?name=frank\");\n```\n\n----------------------------------------\n\nTITLE: Link Component Props Interface Definition\nDESCRIPTION: TypeScript interface defining the available props for the Link component. Includes route destination, navigation behavior, styling options, and HTML anchor attributes.\nSOURCE: https://github.com/swan-io/chicane/blob/main/docs/docs/linking-to-a-route.md#2025-04-23_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\ntype LinkProps = {\n  to: string; // The route you're linking to (required)\n  replace?: boolean; // Replace instead of push (defaults to `false`)\n  activeClassName?: string;\n  activeStyle?: React.CSSProperties;\n  // …and any prop <a> takes\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Chicane Router via npm or yarn\nDESCRIPTION: Commands to install the @swan-io/chicane package using either yarn or npm package managers.\nSOURCE: https://github.com/swan-io/chicane/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add @swan-io/chicane\n# --- or ---\n$ npm install --save @swan-io/chicane\n```\n\n----------------------------------------\n\nTITLE: Installing Chicane via Yarn or NPM\nDESCRIPTION: Commands to install the Chicane router package using either Yarn or NPM package managers. This snippet shows how to add Chicane as a dependency to your React and TypeScript project.\nSOURCE: https://github.com/swan-io/chicane/blob/main/docs/docs/getting-started.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add @swan-io/chicane\n# --- or ---\n$ npm install --save @swan-io/chicane\n```\n\n----------------------------------------\n\nTITLE: Running the Chicane Router Example App\nDESCRIPTION: Commands to clone the Chicane repository, navigate to the example directory, and start the development server using either yarn or npm.\nSOURCE: https://github.com/swan-io/chicane/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git@github.com:swan-io/chicane.git\n$ cd chicane/example\n\n$ yarn install && yarn dev\n# --- or ---\n$ npm install && npm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Chicane Website (Bash)\nDESCRIPTION: This command installs the necessary dependencies for the Chicane project website using Yarn package manager.\nSOURCE: https://github.com/swan-io/chicane/blob/main/docs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server for Chicane Website (Bash)\nDESCRIPTION: This command starts a local development server for the Chicane website. It opens a browser window and supports live reloading for most changes.\nSOURCE: https://github.com/swan-io/chicane/blob/main/docs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Building Static Content for Chicane Website (Bash)\nDESCRIPTION: This command generates static content for the Chicane website into the 'build' directory. The resulting files can be served using any static content hosting service.\nSOURCE: https://github.com/swan-io/chicane/blob/main/docs/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Deploying Chicane Website Using SSH (Bash)\nDESCRIPTION: This command deploys the Chicane website using SSH. It's useful for pushing the built website to a remote server or hosting platform that supports SSH deployment.\nSOURCE: https://github.com/swan-io/chicane/blob/main/docs/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ USE_SSH=true yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Deploying Chicane Website Without SSH (Bash)\nDESCRIPTION: This command deploys the Chicane website without using SSH. It requires setting the GitHub username as an environment variable and is useful for deploying to GitHub Pages or similar platforms.\nSOURCE: https://github.com/swan-io/chicane/blob/main/docs/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ GIT_USER=<Your GitHub username> yarn deploy\n```"
  }
]