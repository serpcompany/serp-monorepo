[
  {
    "owner": "revenuecat",
    "repo": "react-native-purchases",
    "content": "TITLE: Configuring Purchases with apiKey and other options in Javascript\nDESCRIPTION: This JavaScript snippet demonstrates how to configure the Purchases SDK with an API key and other options.  It includes settings for user ID, observer mode, user defaults suite name, enabling StoreKit 2 if available, and enabling Amazon store. The `Purchases.configure` method is used to initialize the SDK with the specified parameters.\nSOURCE: https://github.com/revenuecat/react-native-purchases/blob/main/CHANGELOG.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPurchases.configure({\n    apiKey: \"key\",\n    appUserID: \"user ID\",\n    observerMode: false,\n    userDefaultsSuiteName: \"suite name\",\n    usesStoreKit2IfAvailable: true,\n    useAmazon: true\n});\n```\n\n----------------------------------------\n\nTITLE: Presenting Paywall - JavaScript\nDESCRIPTION: This JavaScript code shows how to present a paywall using the `RevenueCatUI` component. It imports the necessary modules and calls `presentPaywallIfNeeded` with an object containing the `requiredEntitlementIdentifier` parameter, specifying the entitlement required to bypass the paywall. The function returns a `PAYWALL_RESULT` indicating the outcome of the paywall presentation.\nSOURCE: https://github.com/revenuecat/react-native-purchases/blob/main/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport RevenueCatUI, { PAYWALL_RESULT } from \"../react-native-purchases-ui\";\n\nasync function presentPaywallIfNeeded() {\n    const paywallResult: PAYWALL_RESULT = await RevenueCatUI.presentPaywallIfNeeded({\n        requiredEntitlementIdentifier: \"pro\"\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Subscription Options Dart\nDESCRIPTION: This code snippet demonstrates how to filter subscription options on a StoreProduct object in Dart. It showcases filtering for base plans, retrieving the default option, and filtering for free and trial offers. These filtered options can then be used for more granular purchase control.\nSOURCE: https://github.com/revenuecat/react-native-purchases/blob/main/migrations/v6-MIGRATION.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nconst basePlan = storeProduct.subscriptionOptions?.filter((option) => { option.isBasePlan });\nconst defaultOption = storeProduct.defaultOption\nconst freeOffer = storeProduct.subscriptionOptions?.filter((option) => { !!option.freePhase });\nconst trialOffer = storeProduct.subscriptionOptions?.filter((option) => { !!option.introPhase });\n```\n\n----------------------------------------\n\nTITLE: Configuring Purchases with InApp Messages - TypeScript\nDESCRIPTION: This code snippet demonstrates how to configure the RevenueCat Purchases SDK in TypeScript, specifically setting the `shouldShowInAppMessagesAutomatically` property to `false`. This disables the automatic display of in-app messages related to grace periods and account holds on both Android and iOS platforms.\nSOURCE: https://github.com/revenuecat/react-native-purchases/blob/main/CHANGELOG.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nPurchases.configure({\n    apiKey,\n    appUserID,\n    observerMode,\n    userDefaultsSuiteName,\n    usesStoreKit2IfAvailable,\n    useAmazon,\n    shouldShowInAppMessagesAutomatically\n  });\n```\n\n----------------------------------------\n\nTITLE: Configuring Purchases for Amazon Store - Javascript\nDESCRIPTION: This snippet demonstrates how to configure the RevenueCat Purchases SDK for use with the Amazon Appstore. It uses the `Purchases.configure` method, passing the Amazon API key and setting `useAmazon` to `true`. This enables the SDK to handle in-app purchases through the Amazon store instead of the default app store.\nSOURCE: https://github.com/revenuecat/react-native-purchases/blob/main/CHANGELOG.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPurchases.configure({ apiKey: \"AMAZON_API_KEY\", useAmazon: true });\n```\n\n----------------------------------------\n\nTITLE: Configuring Purchases Completed by App\nDESCRIPTION: Illustrates how to configure the SDK to indicate that purchases are completed by the app, specifying the StoreKit version being used. `apiKey` and `appUserID` must be provided. The `type` field determines whether RevenueCat or the app completes purchases.\nSOURCE: https://github.com/revenuecat/react-native-purchases/blob/main/migrations/v8-MIGRATION.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nPurchases.configure({\n    apiKey,\n    appUserID,\n    {\n        type: PURCHASES_ARE_COMPLETED_BY_TYPE.MY_APP,\n        storeKitVersion: STOREKIT_VERSION.STOREKIT_2,\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding react-native-purchases-ui Dependency - JSON\nDESCRIPTION: This snippet demonstrates how to add the `react-native-purchases-ui` dependency to your `package.json` file.  This is a required step to utilize the RevenueCat Paywalls feature in your React Native application. Note that both `react-native-purchases` and `react-native-purchases-ui` should be at the same version.\nSOURCE: https://github.com/revenuecat/react-native-purchases/blob/main/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"dependencies\": {\n    \"react-native-purchases\": \"7.15.0\",\n    \"react-native-purchases-ui\": \"7.15.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Purchases with Parameters - JavaScript\nDESCRIPTION: This code demonstrates how to configure the RevenueCat Purchases SDK using an object containing various parameters like `apiKey`, `appUserID`, `observerMode`, `userDefaultsSuiteName`, and `useAmazon`. This replaces the previous `setUp` method.\nSOURCE: https://github.com/revenuecat/react-native-purchases/blob/main/v4_to_v5_migration_guide.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nPurchases.configure({\n    apiKey: \"key\",\n    appUserID: \"user ID\",\n    observerMode: false,\n    userDefaultsSuiteName: \"suite name\",\n    useAmazon: true\n});\n```\n\n----------------------------------------\n\nTITLE: Fastlane Bump Execution\nDESCRIPTION: Executes the `fastlane bump` command to automate the version bumping process.  This command requires a properly configured `fastlane/.env` file with a GitHub API token. It prompts for confirmation of the base branch and input of the new version number.\nSOURCE: https://github.com/revenuecat/react-native-purchases/blob/main/RELEASING.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbundle exec fastlane bump\n```\n\n----------------------------------------\n\nTITLE: Configuring Purchases Completed by App with StoreKit 1\nDESCRIPTION: Demonstrates how to configure the SDK when purchases are completed by the app using StoreKit 1. It's essential to explicitly configure the SDK to use StoreKit 1 in this case. `apiKey` and `appUserID` must be provided.\nSOURCE: https://github.com/revenuecat/react-native-purchases/blob/main/migrations/v8-MIGRATION.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nPurchases.configure({\n    apiKey,\n    appUserID,\n    {\n        type: PURCHASES_ARE_COMPLETED_BY_TYPE.MY_APP,\n        storeKitVersion: STOREKIT_VERSION.STOREKIT_1,\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring RevenueCat SDK with StoreKit Version\nDESCRIPTION: Demonstrates how to configure the RevenueCat SDK with a specific StoreKit version using the `storeKitVersion` parameter. The `apiKey` needs to be a valid RevenueCat API key. This replaces the `usesStoreKit2IfAvailable` parameter from previous versions.\nSOURCE: https://github.com/revenuecat/react-native-purchases/blob/main/migrations/v8-MIGRATION.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nPurchases.configure({\n    apiKey,\n    STOREKIT_VERSION.STOREKIT_1,\n});\n```\n\n----------------------------------------\n\nTITLE: NPM Dist Tag Add\nDESCRIPTION: This command updates the `latest` tag in NPM to point to the most recent stable version of the library. It is used after a hotfix release to ensure that the latest version tag is not accidentally pointing to the hotfix version.\nSOURCE: https://github.com/revenuecat/react-native-purchases/blob/main/RELEASING.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm dist-tag add react-native-purchases@x.x.x latest\n```\n\n----------------------------------------\n\nTITLE: Recording Purchase with StoreKit 2 on macOS\nDESCRIPTION: Shows how to record a purchase immediately after it's made when using StoreKit 2 on macOS, ensuring RevenueCat detects the purchase promptly. `productID` represents the identifier of the product purchased.\nSOURCE: https://github.com/revenuecat/react-native-purchases/blob/main/migrations/v8-MIGRATION.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait Purchases.recordPurchase(productID);\n```\n\n----------------------------------------\n\nTITLE: Enable Local Build (Android)\nDESCRIPTION: This command enables local builds for the purchases-hybrid-common library in the Android example. It facilitates on-the-fly editing of common files by including purchases-hybrid-common as a project within the example.\nSOURCE: https://github.com/revenuecat/react-native-purchases/blob/main/DEVELOPMENT.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngradle enableLocalBuild -PcommonPath=\"$HOME/Development/repos/purchases-hybrid-common/android\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Gradle Caches\nDESCRIPTION: This command deletes the Gradle caches, which can resolve issues where Android Studio is not updating packages correctly. This is a common troubleshooting step when dealing with dependency resolution problems.\nSOURCE: https://github.com/revenuecat/react-native-purchases/blob/main/TROUBLESHOOTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf $HOME/.gradle/caches/\n```\n\n----------------------------------------\n\nTITLE: Install iOS pods\nDESCRIPTION: This command navigates to the iOS directory and installs the pod files, which are dependencies managed by CocoaPods for iOS projects. This step is necessary to include platform-specific native modules.\nSOURCE: https://github.com/revenuecat/react-native-purchases/blob/main/examples/MagicWeather/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncd ios\npod install\n```\n\n----------------------------------------\n\nTITLE: Configuring Purchases for Amazon Store - JavaScript\nDESCRIPTION: This snippet shows how to configure the RevenueCat Purchases SDK for use with the Amazon Appstore by setting the `apiKey` and `useAmazon` parameters.\nSOURCE: https://github.com/revenuecat/react-native-purchases/blob/main/v4_to_v5_migration_guide.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nPurchases.configure({ apiKey: \"AMAZON_API_KEY\", useAmazon: true });\n```\n\n----------------------------------------\n\nTITLE: Install dependencies using npm\nDESCRIPTION: This command navigates to the MagicWeather directory and installs the necessary dependencies using npm. This ensures the project has all the required packages to run correctly.\nSOURCE: https://github.com/revenuecat/react-native-purchases/blob/main/examples/MagicWeather/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncd react-native-purchases/examples/MagicWeather\nnpm install\n```\n\n----------------------------------------\n\nTITLE: NPM Build Execution\nDESCRIPTION: Executes the `npm run build` command to build the react-native-purchases library. It's crucial to run this command and address any issues before proceeding with the release.\nSOURCE: https://github.com/revenuecat/react-native-purchases/blob/main/RELEASING.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Yarn Dependencies\nDESCRIPTION: This command links the local react-native-purchases package, enabling automatic updates in the purchaseTesterTypescript example during development. It ensures MagicWeather uses the latest release.\nSOURCE: https://github.com/revenuecat/react-native-purchases/blob/main/DEVELOPMENT.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn bootstrap\n```\n\n----------------------------------------\n\nTITLE: Run the app on iOS\nDESCRIPTION: This command starts the React Native application on an iOS simulator or connected device. It utilizes npm to execute the appropriate script defined in the package.json file for running the iOS app.\nSOURCE: https://github.com/revenuecat/react-native-purchases/blob/main/examples/MagicWeather/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run ios\n```\n\n----------------------------------------\n\nTITLE: Update hybrid common with Fastlane\nDESCRIPTION: This Fastlane action updates the purchases-hybrid-common version and pushes the changes to a new branch if the open_pr option is enabled. It helps manage dependencies.\nSOURCE: https://github.com/revenuecat/react-native-purchases/blob/main/fastlane/README.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\n[bundle exec] fastlane update_hybrid_common\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Purchases with Expo\nDESCRIPTION: This command installs the react-native-purchases library in an Expo project. It's the first step to integrate RevenueCat's in-app purchase functionality into a React Native application using Expo.\nSOURCE: https://github.com/revenuecat/react-native-purchases/blob/main/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ npx expo install react-native-purchases\n```\n\n----------------------------------------\n\nTITLE: Cherry-picking Commit\nDESCRIPTION: Cherry-picks a specific commit from the main branch into a release branch for hotfix releases.  This command requires the SHA of the squashed commit from main.\nSOURCE: https://github.com/revenuecat/react-native-purchases/blob/main/RELEASING.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit cherry-pick <sha_of_the_squashed_commit_in_main>\n```\n\n----------------------------------------\n\nTITLE: Run the app on Android\nDESCRIPTION: This command starts the React Native application on an Android emulator or connected device. It uses npm to execute the script defined in the package.json file for running the Android app.\nSOURCE: https://github.com/revenuecat/react-native-purchases/blob/main/examples/MagicWeather/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run android\n```\n\n----------------------------------------\n\nTITLE: Run Example App (iOS)\nDESCRIPTION: This command runs the purchaseTesterTypescript example app on a connected iOS device or simulator from the repository root.  The app will be deployed to the device or simulator.\nSOURCE: https://github.com/revenuecat/react-native-purchases/blob/main/DEVELOPMENT.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx example ios\n```\n\n----------------------------------------\n\nTITLE: Run Example App (Android)\nDESCRIPTION: This command runs the purchaseTesterTypescript example app on a connected Android device or emulator from the repository root. The app will be deployed to the device or simulator.\nSOURCE: https://github.com/revenuecat/react-native-purchases/blob/main/DEVELOPMENT.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn example android\n```\n\n----------------------------------------\n\nTITLE: Automatic bump with Fastlane\nDESCRIPTION: This Fastlane action automatically bumps the version, edits the changelog, and creates a pull request. It streamlines the versioning and release process.\nSOURCE: https://github.com/revenuecat/react-native-purchases/blob/main/fastlane/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n[bundle exec] fastlane automatic_bump\n```\n\n----------------------------------------\n\nTITLE: Update Hybrid Common Version\nDESCRIPTION: Runs a fastlane command to update the version number of the purchases-hybrid-common dependency. Requires the `version` parameter to be set to the desired version number.\nSOURCE: https://github.com/revenuecat/react-native-purchases/blob/main/RELEASING.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbundle exec fastlane update_hybrid_common version:x.x.x\n```\n\n----------------------------------------\n\nTITLE: Install Xcode command line tools\nDESCRIPTION: This command ensures that the latest version of the Xcode command line tools is installed. It is a prerequisite for using Fastlane and other development tools on macOS.\nSOURCE: https://github.com/revenuecat/react-native-purchases/blob/main/fastlane/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nxcode-select --install\n```\n\n----------------------------------------\n\nTITLE: Update PurchasesHybridCommon Version\nDESCRIPTION: This command uses Fastlane to update the version of PurchasesHybridCommon. Replace {new version} with the desired version number to update.\nSOURCE: https://github.com/revenuecat/react-native-purchases/blob/main/DEVELOPMENT.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nfastlane update_hybrid_common version:{new version}\n```\n\n----------------------------------------\n\nTITLE: Bump version with Fastlane\nDESCRIPTION: This Fastlane action bumps the version number, edits the changelog, and creates a pull request. It automates the versioning process.\nSOURCE: https://github.com/revenuecat/react-native-purchases/blob/main/fastlane/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n[bundle exec] fastlane bump\n```\n\n----------------------------------------\n\nTITLE: Update version with Fastlane\nDESCRIPTION: This Fastlane action updates the version number in all relevant files. It ensures that the version number is consistent across the project.\nSOURCE: https://github.com/revenuecat/react-native-purchases/blob/main/fastlane/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n[bundle exec] fastlane update_version\n```\n\n----------------------------------------\n\nTITLE: Create GitHub release with Fastlane\nDESCRIPTION: This Fastlane action creates a GitHub release. It automates the process of creating and publishing releases.\nSOURCE: https://github.com/revenuecat/react-native-purchases/blob/main/fastlane/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n[bundle exec] fastlane github_release\n```\n\n----------------------------------------\n\nTITLE: Tag current branch with Fastlane\nDESCRIPTION: This Fastlane action tags the current branch with the current version number. It is useful for identifying specific releases.\nSOURCE: https://github.com/revenuecat/react-native-purchases/blob/main/fastlane/README.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\n[bundle exec] fastlane tag_current_branch\n```\n\n----------------------------------------\n\nTITLE: Release with Fastlane\nDESCRIPTION: This Fastlane action creates a GitHub release and publishes react-native-purchases and react-native-purchases-ui. It automates the complete release process.\nSOURCE: https://github.com/revenuecat/react-native-purchases/blob/main/fastlane/README.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n[bundle exec] fastlane release\n```\n\n----------------------------------------\n\nTITLE: Generate docs with Fastlane\nDESCRIPTION: This Fastlane action generates documentation. It simplifies the process of creating and updating project documentation.\nSOURCE: https://github.com/revenuecat/react-native-purchases/blob/main/fastlane/README.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\n[bundle exec] fastlane generate_docs\n```\n\n----------------------------------------\n\nTITLE: Build example with Fastlane\nDESCRIPTION: This Fastlane action builds the example application. It automates the building of the example project for testing or distribution.\nSOURCE: https://github.com/revenuecat/react-native-purchases/blob/main/fastlane/README.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n[bundle exec] fastlane build_example\n```\n\n----------------------------------------\n\nTITLE: Manual Release Execution\nDESCRIPTION: This command triggers a manual release using Fastlane. This is used if the automated CircleCI release fails.\nSOURCE: https://github.com/revenuecat/react-native-purchases/blob/main/RELEASING.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbundle exec fastlane release\n```\n\n----------------------------------------\n\nTITLE: Trigger bump with Fastlane\nDESCRIPTION: This Fastlane action triggers a bump. The exact functionality depends on the Fastfile configuration.\nSOURCE: https://github.com/revenuecat/react-native-purchases/blob/main/fastlane/README.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\n[bundle exec] fastlane trigger_bump\n```"
  }
]