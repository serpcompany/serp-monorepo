[
  {
    "owner": "supabase",
    "repo": "supabase-flutter",
    "content": "TITLE: Initializing Supabase in Flutter Application\nDESCRIPTION: Code for initializing the Supabase client in a Flutter application with URL and anonymous key credentials. Also demonstrates extracting the client for later use.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/README.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:supabase_flutter/supabase_flutter.dart';\n\nvoid main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n\n  await Supabase.initialize(\n    url: SUPABASE_URL,\n    anonKey: SUPABASE_ANON_KEY,\n  );\n\n  runApp(MyApp());\n}\n\n// It's handy to then extract the Supabase client in a variable for later uses\nfinal supabase = Supabase.instance.client;\n```\n\n----------------------------------------\n\nTITLE: Enrolling and Verifying Multi-Factor Authentication in Dart\nDESCRIPTION: Demonstrates how to enroll, challenge, and verify Multi-Factor Authentication (MFA) factors using the Supabase Flutter SDK.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/gotrue/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Start the enrollment process for a new Multi-Factor Authentication (MFA) factor\nfinal res = await client.mfa\n  .enroll(issuer: 'MyFriend', friendlyName: 'MyFriendName');\n\n// Prepares a challenge used to verify that a user has access to a MFA factor.\nfinal res = await client.mfa.challenge(factorId: factorId1);\n\n// Verifies a code against a challenge.\nfinal res = await client.mfa\n        .verify(factorId: factorId1, challengeId: challengeId, code: getTOTP());\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication in Supabase Flutter\nDESCRIPTION: Demonstrates various authentication methods including email/password signup, login, magic link login, and listening to auth state changes.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/README.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal supabase = Supabase.instance.client;\n\n// Email and password sign up\nawait supabase.auth.signUp(\n  email: email,\n  password: password,\n);\n\n// Email and password login\nawait supabase.auth.signInWithPassword(\n  email: email,\n  password: password,\n);\n\n// Magic link login\nawait supabase.auth.signInWithOtp(email: 'my_email@example.com');\n\n// Listen to auth state changes\nsupabase.auth.onAuthStateChange.listen((data) {\n  final AuthChangeEvent event = data.event;\n  final Session? session = data.session;\n  // Do something when there is an auth event\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Supabase Realtime Client in Dart\nDESCRIPTION: Demonstrates how to initialize a Supabase Realtime Client, create a channel, listen to various event types including database changes, broadcasts, and presence events, and send broadcast events. This snippet showcases the new API introduced in version 1.0.0-dev.1.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/realtime_client/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal socket = RealtimeClient('ws://SUPABASE_API_ENDPOINT/realtime/v1');\nfinal channel = socket.channel('can_be_any_string');\n\n// listen to insert events on public.messages table\nchannel.on(\n    RealtimeListenTypes.postgresChanges,\n    ChannelFilter(\n      event: 'INSERT',\n      schema: 'public',\n      table: 'messages',\n    ), (payload, [ref]) {\n  print('database insert payload: $payload');\n});\n\n// listen to `location` broadcast events\nchannel.on(\n    RealtimeListenTypes.broadcast,\n    ChannelFilter(\n      event: 'location',\n    ), (payload, [ref]) {\n  print(payload);\n});\n\n// send `location` broadcast events\nchannel.send(\n  type: RealtimeListenTypes.broadcast,\n  event: 'location',\n  payload: {'lat': 1.3521, 'lng': 103.8198},\n);\n\n// listen to presence states\nchannel.on(RealtimeListenTypes.presence, ChannelFilter(event: 'sync'),\n    (payload, [ref]) {\n  print(payload);\n  print(channel.presenceState());\n});\n\n// subscribe to the above changes\nchannel.subscribe((status) async {\n  if (status == 'SUBSCRIBED') {\n    // if subscribed successfully, send presence event\n    final status = await channel.track({'user_id': myUserId});\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Performing Database Operations with Supabase\nDESCRIPTION: Examples of basic CRUD operations using Supabase's database API, including selecting data with filters and inserting new rows.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/README.md#2025-04-17_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n// Select data with filters\nfinal data = await supabase\n  .from('cities')\n  .select()\n  .eq('country_id', 1) // equals filter\n  .neq('name', 'The shire'); // does not equal filter\n\n// Insert a new row\nawait supabase\n  .from('cities')\n  .insert({'name': 'The Shire', 'country_id': 554});\n```\n\n----------------------------------------\n\nTITLE: Implementing Native Google Sign-in with Supabase\nDESCRIPTION: Demonstrates how to implement native Google Sign-in using the google_sign_in package with Supabase authentication. Handles client IDs for iOS, web platforms and token authentication.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/README.md#2025-04-17_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:google_sign_in/google_sign_in.dart';\nimport 'package:supabase_flutter/supabase_flutter.dart';\n\n...\n\nFuture<AuthResponse> _googleSignIn() async {\n  /// TODO: update the Web client ID with your own.\n  ///\n  /// Web Client ID that you registered with Google Cloud.\n  const webClientId = 'my-web.apps.googleusercontent.com';\n\n  /// TODO: update the iOS client ID with your own.\n  ///\n  /// iOS Client ID that you registered with Google Cloud.\n  const iosClientId = 'my-ios.apps.googleusercontent.com';\n\n  // Google sign in on Android will work without providing the Android\n  // Client ID registered on Google Cloud.\n\n  final GoogleSignIn googleSignIn = GoogleSignIn(\n    clientId: iosClientId,\n    serverClientId: webClientId,\n  );\n  final googleUser = await googleSignIn.signIn();\n  final googleAuth = await googleUser!.authentication;\n  final accessToken = googleAuth.accessToken;\n  final idToken = googleAuth.idToken;\n\n  if (accessToken == null) {\n    throw 'No Access Token found.';\n  }\n  if (idToken == null) {\n    throw 'No ID Token found.';\n  }\n\n  return supabase.auth.signInWithIdToken(\n    provider: OAuthProvider.google,\n    idToken: idToken,\n    accessToken: accessToken,\n  );\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Using Supabase Broadcast for Real-time Client Communication\nDESCRIPTION: Shows how to implement Supabase's Broadcast feature for real-time communication between clients. Includes subscribing to events and sending broadcast messages.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/README.md#2025-04-17_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nfinal myChannel = supabase.channel('my_channel');\n\n// Subscribe to `cursor-pos` broadcast event\nfinal myChannel = supabase.channel('my_channel');\n\nmyChannel\n    .onBroadcast(event: 'cursor-pos', callback: (payload) {}\n        // Do something fun or interesting when there is an change on the database\n        )\n    .subscribe();\n\n// Send a broadcast message to other connected clients\nawait myChannel.sendBroadcastMessage(\n  event: 'cursor-pos',\n  payload: {'x': 30, 'y': 50},\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Realtime Data Streams with Supabase\nDESCRIPTION: Shows how to correctly implement a Supabase realtime stream in a Flutter StatefulWidget using StreamBuilder. The example demonstrates the proper pattern to prevent connection issues.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/README.md#2025-04-17_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nclass MyWidget extends StatefulWidget {\n  const MyWidget({Key? key}) : super(key: key);\n\n  @override\n  State<MyWidget> createState() => _MyWidgetState();\n}\n\nclass _MyWidgetState extends State<MyWidget> {\n  // Persisting the future as local variable to prevent refetching upon rebuilds.\n  final stream = supabase.from('countries').stream(primaryKey: ['id']);\n\n  @override\n  Widget build(BuildContext context) {\n    return StreamBuilder<List<Map<String, dynamic>>>(\n      stream: stream,\n      builder: (context, snapshot) {\n        // return your widget with the data from snapshot\n      },\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Supabase MFA (Multi-Factor Authentication) in Dart\nDESCRIPTION: Shows how to implement Multi-Factor Authentication with Supabase, including enrolling a new MFA factor, preparing a challenge, and verifying a code against a challenge.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// Start the enrollment process for a new Multi-Factor Authentication (MFA) factor\nfinal res = await client.mfa\n  .enroll(issuer: 'MyFriend', friendlyName: 'MyFriendName');\n\n// Prepares a challenge used to verify that a user has access to a MFA factor.\nfinal res = await client.mfa.challenge(factorId: factorId1);\n\n// Verifies a code against a challenge.\nfinal res = await client.mfa\n        .verify(factorId: factorId1, challengeId: challengeId, code: getTOTP());\n```\n\n----------------------------------------\n\nTITLE: Implementing Native Apple Sign-in with Supabase\nDESCRIPTION: Demonstrates how to implement native Apple Sign-in using the sign_in_with_apple package with Supabase authentication. Includes nonce generation and token handling.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/README.md#2025-04-17_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:sign_in_with_apple/sign_in_with_apple.dart';\nimport 'package:supabase_flutter/supabase_flutter.dart';\n\n/// Performs Apple sign in on iOS or macOS\nFuture<AuthResponse> signInWithApple() async {\n  final rawNonce = supabase.auth.generateRawNonce();\n  final hashedNonce = sha256.convert(utf8.encode(rawNonce)).toString();\n\n  final credential = await SignInWithApple.getAppleIDCredential(\n    scopes: [\n      AppleIDAuthorizationScopes.email,\n      AppleIDAuthorizationScopes.fullName,\n    ],\n    nonce: hashedNonce,\n  );\n\n  final idToken = credential.identityToken;\n  if (idToken == null) {\n    throw const AuthException(\n        'Could not find ID Token from generated credential.');\n  }\n\n  return signInWithIdToken(\n    provider: OAuthProvider.apple,\n    idToken: idToken,\n    nonce: rawNonce,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom SecureStorage for Supabase Flutter\nDESCRIPTION: Demonstrates how to create a custom LocalStorage implementation using flutter_secure_storage instead of the default SharedPreferences. Shows how to override the necessary methods and use it with Supabase initialization.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/README.md#2025-04-17_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\n// Define the custom LocalStorage implementation\nclass MySecureStorage extends LocalStorage {\n\n  final storage = FlutterSecureStorage();\n\n  @override\n  Future<void> initialize() async {}\n\n  @override\n  Future<String?> accessToken() async {\n    return storage.read(key: supabasePersistSessionKey);\n  }\n\n  @override\n  Future<bool> hasAccessToken() async {\n    return storage.containsKey(key: supabasePersistSessionKey);\n  }\n\n  @override\n  Future<void> persistSession(String persistSessionString) async {\n    return storage.write(key: supabasePersistSessionKey, value: persistSessionString);\n  }\n\n  @override\n  Future<void> removePersistedSession() async {\n    return storage.delete(key: supabasePersistSessionKey);\n  }\n}\n\n// use it when initializing\nSupabase.initialize(\n  ...\n  authOptions: FlutterAuthClientOptions(\n    localStorage: MySecureStorage(),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Postgres Changes in Supabase\nDESCRIPTION: Demonstrates how to subscribe to database table changes using Supabase Realtime's Postgres Changes feature. Allows handling insert, update, and delete events.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/README.md#2025-04-17_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nfinal myChannel = supabase.channel('my_channel');\n\nmyChannel\n    .onPostgresChanges(\n      event: PostgresChangeEvent.all,\n      schema: 'public',\n      table: 'countries',\n      callback: (payload) {\n        // Do something fun or interesting when there is an change on the database\n      },\n    )\n    .subscribe();\n```\n\n----------------------------------------\n\nTITLE: Transforming Images with Storage Client in Dart\nDESCRIPTION: Demonstrates how to use the transform option with createSignedUrl(), getPublicUrl(), and download() methods to transform images on the fly. This includes setting width and height parameters.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/storage_client/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal signedUrl = await storage.from(newBucketName).createSignedUrl(uploadPath, 2000,\n              transform: TransformOptions(\n                width: 100,\n                height: 100,\n              ));\n\nfinal publicUrl = storage.from(bucket).getPublicUrl(path,\n          transform: TransformOptions(width: 200, height: 300));\n\nfinal file = await storage.from(newBucketName).download(uploadPath,\n          transform: TransformOptions(\n            width: 200,\n            height: 200,\n          ));\n```\n\n----------------------------------------\n\nTITLE: Implementing Realtime Presence with Supabase in Dart\nDESCRIPTION: Shows how to implement an 'I'm online' feature using Supabase Presence. The code creates a channel, subscribes to presence events (sync, join, leave), and tracks the current user's state.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/README.md#2025-04-17_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nfinal myChannel = supabase.channel('my_channel');\n\n// Subscribe to presence events\nmyChannel\n    .onPresence(\n        event: PresenceEvent.sync,\n        callback: (payload) {\n          final onlineUsers = myChannel.presenceState();\n          // handle sync event\n        })\n    .onPresence(\n        event: PresenceEvent.join,\n        callback: (payload) {\n          // New users have joined\n        })\n    .onPresence(\n        event: PresenceEvent.leave,\n        callback: (payload) {\n          // Users have left\n        })\n    .subscribe(((status, [_]) async {\n  if (status == RealtimeSubscribeStatus.subscribed) {\n    // Send the current user's state upon subscribing\n    final status = await myChannel\n        .track({'online_at': DateTime.now().toIso8601String()});\n  }\n}));\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Exception Handling in Supabase Flutter SDK\nDESCRIPTION: Demonstrates the updated error handling pattern where data is returned directly and errors are thrown as exceptions instead of being returned within a response object. Shows how to properly catch PostgrestException and other errors.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/postgrest/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\ntry {\n  final data = await client.from('countries').select();\n  print(data);\n} on PostgrestError catch (error, stacktrace) {\n  // handle a PostgrestError\n  print('$error \\n $stacktrace');\n} catch (error, stacktrace) {\n  // handle other errors\n  print('$error \\n $stracktrace');\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Files to Supabase Storage in Flutter\nDESCRIPTION: Demonstrates how to upload files to Supabase Storage. Shows both standard file upload for most Flutter platforms and uploadBinary for Flutter web.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/README.md#2025-04-17_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nfinal file = File('example.txt');\nfile.writeAsStringSync('File content');\nawait supabase.storage\n  .from('my_bucket')\n  .upload('my/path/to/files/example.txt', file);\n\n// Use the `uploadBinary` method to upload files on Flutter web\nawait supabase.storage\n  .from('my_bucket')\n  .uploadBinary('my/path/to/files/example.txt', file.readAsBytesSync());\n```\n\n----------------------------------------\n\nTITLE: Updating User Attributes in Dart\nDESCRIPTION: Demonstrates how to update user attributes such as email and custom data using the Supabase Flutter SDK.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/gotrue/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nfinal res = await supabase.auth.updateUser(\n    UserAttributes(\n      email: 'new@email.com',\n      data: {\n        'username': 'new_username',\n      },\n    ),\n);\n```\n\n----------------------------------------\n\nTITLE: Invoking Supabase Edge Functions in Flutter\nDESCRIPTION: Shows how to call a Supabase Edge Function from Flutter. This example demonstrates invoking the 'get_countries' function.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/README.md#2025-04-17_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nfinal data = await supabase.functions.invoke('get_countries');\n```\n\n----------------------------------------\n\nTITLE: Configuring and Listening to Supabase Logs in Dart\nDESCRIPTION: Sets up logging for Supabase in a Flutter application using the logging package. This snippet demonstrates how to create a logger instance, set a custom log level, and listen to log records with a callback function that prints formatted log messages.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/README.md#2025-04-17_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:logging/logging.dart';\n\nfinal supabaseLogger = Logger('supabase');\nsupabaseLogger.level = Level.ALL; // custom log level filtering, default is Level.INFO\nsupabaseLogger.onRecord.listen((record) {\n    print('${record.level.name}: ${record.time}: ${record.message}');\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Realtime Features in Dart\nDESCRIPTION: Demonstrates how to use the new API for listening to database changes, broadcast events, and presence in Supabase Flutter. It includes examples of subscribing to events, sending broadcast messages, and tracking presence.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/CHANGELOG.md#2025-04-17_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nfinal channel = Supabase.instance.client.channel('can_be_any_string');\n\n// listen to insert events on public.messages table\nchannel.on(\n    RealtimeListenTypes.postgresChanges,\n    ChannelFilter(\n      event: 'INSERT',\n      schema: 'public',\n      table: 'messages',\n    ), (payload, [ref]) {\n  print('database insert payload: $payload');\n});\n\n// listen to `location` broadcast events\nchannel.on(\n    RealtimeListenTypes.broadcast,\n    ChannelFilter(\n      event: 'location',\n    ), (payload, [ref]) {\n  print(payload);\n});\n\n// send `location` broadcast events\nchannel.send(\n  type: RealtimeListenTypes.broadcast,\n  event: 'location',\n  payload: {'lat': 1.3521, 'lng': 103.8198},\n);\n\n// listen to presence states\nchannel.on(RealtimeListenTypes.presence, ChannelFilter(event: 'sync'),\n    (payload, [ref]) {\n  print(payload);\n  print(channel.presenceState());\n});\n\n// subscribe to the above changes\nchannel.subscribe((status) async {\n  if (status == 'SUBSCRIBED') {\n    // if subscribed successfully, send presence event\n    final status = await channel.track({'user_id': myUserId});\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating User Sessions from Supabase Flutter v1 to v2\nDESCRIPTION: Implements a custom LocalStorage that migrates sessions from Hive (used in v1) to SharedPreferences (used in v2). The implementation handles automatic migration during app initialization.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/README.md#2025-04-17_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nconst _hiveBoxName = 'supabase_authentication';\n\nclass MigrationLocalStorage extends LocalStorage {\n  final SharedPreferencesLocalStorage sharedPreferencesLocalStorage;\n  late final HiveLocalStorage hiveLocalStorage;\n\n  MigrationLocalStorage({required String persistSessionKey})\n      : sharedPreferencesLocalStorage =\n            SharedPreferencesLocalStorage(persistSessionKey: persistSessionKey);\n\n  @override\n  Future<void> initialize() async {\n    await Hive.initFlutter('auth');\n    hiveLocalStorage = const HiveLocalStorage();\n    await sharedPreferencesLocalStorage.initialize();\n    try {\n      await migrate();\n    } on TimeoutException {\n      // Ignore TimeoutException thrown by Hive methods\n      // https://github.com/supabase/supabase-flutter/issues/794\n    }\n  }\n\n  @visibleForTesting\n  Future<void> migrate() async {\n    // Migrate from Hive to SharedPreferences\n    if (await Hive.boxExists(_hiveBoxName)) {\n      await hiveLocalStorage.initialize();\n\n      final hasHive = await hiveLocalStorage.hasAccessToken();\n      if (hasHive) {\n        final accessToken = await hiveLocalStorage.accessToken();\n        final session =\n            Session.fromJson(jsonDecode(accessToken!)['currentSession']);\n        if (session == null) {\n          return;\n        }\n        await sharedPreferencesLocalStorage\n            .persistSession(jsonEncode(session.toJson()));\n        await hiveLocalStorage.removePersistedSession();\n      }\n      if (Hive.box(_hiveBoxName).isEmpty) {\n        final boxPath = Hive.box(_hiveBoxName).path;\n        await Hive.deleteBoxFromDisk(_hiveBoxName);\n\n        //Delete `auth` folder if it's empty\n        if (!kIsWeb && boxPath != null) {\n          final boxDir = File(boxPath).parent;\n          final dirIsEmpty = await boxDir.list().length == 0;\n          if (dirIsEmpty) {\n            await boxDir.delete();\n          }\n        }\n      }\n    }\n  }\n\n  @override\n  Future<String?> accessToken() {\n    return sharedPreferencesLocalStorage.accessToken();\n  }\n\n  @override\n  Future<bool> hasAccessToken() {\n    return sharedPreferencesLocalStorage.hasAccessToken();\n  }\n\n  @override\n  Future<void> persistSession(String persistSessionString) {\n    return sharedPreferencesLocalStorage.persistSession(persistSessionString);\n  }\n\n  @override\n  Future<void> removePersistedSession() {\n    return sharedPreferencesLocalStorage.removePersistedSession();\n  }\n}\n\n/// A [LocalStorage] implementation that implements Hive as the\n/// storage method.\nclass HiveLocalStorage extends LocalStorage {\n  /// Creates a LocalStorage instance that implements the Hive Database\n  const HiveLocalStorage();\n\n  /// The encryption key used by Hive. If null, the box is not encrypted\n  ///\n  /// This value should not be redefined in runtime, otherwise the user may\n  /// not be fetched correctly\n  ///\n  /// See also:\n  ///\n  ///   * <https://docs.hivedb.dev/#/advanced/encrypted_box?id=encrypted-box>\n  static String? encryptionKey;\n\n  @override\n  Future<void> initialize() async {\n    HiveCipher? encryptionCipher;\n    if (encryptionKey != null) {\n      encryptionCipher = HiveAesCipher(base64Url.decode(encryptionKey!));\n    }\n    await Hive.initFlutter('auth');\n    await Hive.openBox(_hiveBoxName, encryptionCipher: encryptionCipher)\n        .timeout(const Duration(seconds: 1));\n  }\n\n  @override\n  Future<bool> hasAccessToken() {\n    return Future.value(\n      Hive.box(_hiveBoxName).containsKey(\n        supabasePersistSessionKey,\n      ),\n    );\n  }\n\n  @override\n  Future<String?> accessToken() {\n    return Future.value(\n      Hive.box(_hiveBoxName).get(supabasePersistSessionKey) as String?,\n    );\n  }\n\n  @override\n  Future<void> removePersistedSession() {\n    return Hive.box(_hiveBoxName).delete(supabasePersistSessionKey);\n  }\n\n  @override\n  Future<void> persistSession(String persistSessionString) {\n    // Flush after X amount of writes\n    return Hive.box(_hiveBoxName)\n        .put(supabasePersistSessionKey, persistSessionString);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Supabase Initialization and Auth Handling in Dart\nDESCRIPTION: Shows the changes in initializing Supabase and handling authentication in Flutter. The new approach simplifies auth state persistence and introduces a new way to handle initial sessions and auth state changes.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/CHANGELOG.md#2025-04-17_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n// Before\n\nawait Supabase.initialize(\n  url: 'SUPABASE_URL',\n  anonKey: 'SUPABASE_ANON_KEY',\n);\n...\n\n// Class extending `SupabaseAuthState` or `AuthRequiredState` was necessary\n// to persist auth state\nclass AuthState<T extends StatefulWidget> extends SupabaseAuthState<T> {\n  ...\n}\n\n// After\n\n// Initializing Supabase is all you need to do to persist auth state\n// Deep links will also be automatically handled when you initialize Supabase.\nawait Supabase.initialize(\n  url: 'SUPABASE_URL',\n  anonKey: 'SUPABASE_ANON_KEY',\n);\n\n...\n\n// You can get the initial session of the user with `SupabaseAuth.instance.initialSession`\ntry {\n    final initialSession = await SupabaseAuth.instance.initialSession;\n} catch(error) {\n    // Handle errors in session initial recovery here\n}\n\n// You should now use `onAuthStateChanged` as the \nSupabase.instance.client.auth.onAuthStateChange((event, session) {\n    // handle sign-in/signups here\n});\n```\n\n----------------------------------------\n\nTITLE: JSON Parsing with YAJsonIsolate in Dart\nDESCRIPTION: Demonstrates the complete lifecycle of using YAJsonIsolate for JSON operations. Shows how to initialize the isolate, encode (serialize) data to JSON, decode (deserialize) JSON strings, and properly dispose of resources when finished.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/yet_another_json_isolate/README.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// initialize an `YAJsonIsolate` instance\nfinal isolate = YAJsonIsolate()..initialize();\n\n// serialize a JSON using an isolate\nfinal requestBody = await isolate.encode(requestObject);\n\n// deserialize a JSON string using an isolate\nfinal json = await isolate.decode(responseBody);\n\n// dispose when no longer needed\nisolate.dispose();\n```\n\n----------------------------------------\n\nTITLE: Handling Auth State Changes and Errors in Supabase Dart\nDESCRIPTION: Shows how to listen for authentication state changes in Supabase and handle any errors that might occur during the authentication process.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nsupabase.onAuthStateChange.listen((data) {\n  // handle auth state change here\n}, onError: (error) {\n  // handle error here\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up profile database with security policies in Supabase\nDESCRIPTION: SQL script that creates a profiles table with proper references to auth.users, adds row-level security policies, configures realtime subscriptions, and sets up storage for avatar images. The script establishes access controls for profile viewing, insertion, and updates.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/example/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Create a table for Public Profiles\ncreate table profiles (\n  id uuid references auth.users not null,\n  updated_at timestamp with time zone,\n  username text unique,\n  avatar_url text,\n  website text,\n\n  primary key (id),\n  unique(username),\n  constraint username_length check (char_length(username) >= 3)\n);\n\nalter table profiles\n  enable row level security;\n\ncreate policy \"Public profiles are viewable by everyone.\" on profiles\n  for select using (true);\n\ncreate policy \"Users can insert their own profile.\" on profiles\n  for insert with check (auth.uid() = id);\n\ncreate policy \"Users can update own profile.\" on profiles\n  for update using (auth.uid() = id);\n\n-- Set up Realtime!\nbegin;\n  drop publication if exists supabase_realtime;\n  create publication supabase_realtime;\ncommit;\nalter publication supabase_realtime\n  add table profiles;\n\n-- Set up Storage!\ninsert into storage.buckets (id, name)\n  values ('avatars', 'avatars');\n\ncreate policy \"Avatar images are publicly accessible.\" on storage.objects\n  for select using (bucket_id = 'avatars');\n\ncreate policy \"Anyone can upload an avatar.\" on storage.objects\n  for insert with check (bucket_id = 'avatars');\n\ncreate policy \"Anyone can update an avatar.\" on storage.objects\n  for update with check (bucket_id = 'avatars');\n```\n\n----------------------------------------\n\nTITLE: Updating Authentication Methods in Dart\nDESCRIPTION: Shows changes in authentication methods including signUp, signIn, and onAuthStateChange. SignUp now uses named parameters, signIn is split into different methods, and onAuthStateChange is now a stream.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase/CHANGELOG.md#2025-04-17_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n// SignUp\nfinal res = await supabase.auth.signUp(email: 'example@email.com', password: 'password');\n\n// Magic link signin\nfinal res = await supabase.auth.signInWithOtp(email: 'example@email.com');\n\n// Email and password signin\nfinal res = await supabase.auth.signInWithPassword(email: 'example@email.com', password: 'password');\n\n// onAuthStateChange\nfinal subscription = supabase.auth.onAuthStateChange().listen((data) {\n  final AuthChangeEvent event = data.event;\n  final Session? session = data.session;\n});\n// Don't forget to cancel the subscription when you're done\nsubscription.cancel();\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase Storage Retry for Failed Uploads in Dart\nDESCRIPTION: Demonstrates how to initialize a Supabase client with storage retry configuration to automatically retry failed upload attempts, enhancing reliability for file uploads.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n// The following will initialize a supabase client that will retry failed uploads up to 25 times,\n// which is about 10 minutes of retrying.\nfinal supabase = SupabaseClient('Supabase_URL', 'Anon_key', storageRetryAttempts: 25);\n```\n\n----------------------------------------\n\nTITLE: Inserting and Selecting Data in Supabase Flutter\nDESCRIPTION: Demonstrates the updated pattern for insert operations where .select() is chained to return the result of the insert operation instead of using the deprecated returning option.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/postgrest/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nfinal data = await client.from('countries').insert({'name': 'France'}).select();\n```\n\n----------------------------------------\n\nTITLE: Auth State Change Listener Implementation in Flutter\nDESCRIPTION: Demonstrates how to implement an auth state change listener with error handling.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/CHANGELOG.md#2025-04-17_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nsupabase.onAuthStateChange.listen((data) {\n  // handle auth state change here\n}, onError: (error) {\n  // handle error here\n});\n```\n\n----------------------------------------\n\nTITLE: Using Data Converters with PostgrestBuilder\nDESCRIPTION: Shows how to use the withConverter method to transform the response data into a custom format or type. This example converts the data into a List by wrapping it in an array.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/postgrest/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nfinal res = await postgrest\n  .from('users')\n  .select()\n  .withConverter<List>((data) => [data])\n  .execute();\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Storage Client in Dart\nDESCRIPTION: Demonstrates the updated error handling approach for Supabase Storage Client operations. It shows how to catch and handle StorageException and other errors.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/storage_client/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\ntry {\n  final data = await ....;\n} on StorageException catch (error) {\n  // handle storage errors\n} catch (error) {\n  // handle other errors\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Session Persistence in Supabase Flutter\nDESCRIPTION: Shows how to disable session persistence in Supabase Flutter by using the EmptyLocalStorage implementation during Supabase initialization.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/README.md#2025-04-17_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nSupabase.initialize(\n  // ...\n  authOptions: FlutterAuthClientOptions(\n    localStorage: const EmptyLocalStorage(),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Storage Operations with Image Transformation in Flutter\nDESCRIPTION: Demonstrates storage operations with image transformation options including creating signed URLs, getting public URLs, and downloading files.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nfinal signedUrl = await storage.from(newBucketName).createSignedUrl(uploadPath, 2000,\n            transform: TransformOptions(\n              width: 100,\n              height: 100,\n            ));\nfinal publicUrl = storage.from(bucket).getPublicUrl(path,\n        transform: TransformOptions(width: 200, height: 300));\nfinal file = await storage.from(newBucketName).download(uploadPath,\n        transform: TransformOptions(\n          width: 200,\n          height: 200,\n        ));\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth Login with Supabase Flutter\nDESCRIPTION: Code for implementing web-based OAuth authentication with Supabase. Shows how to handle sign-in flow and listen for authentication state changes with support for deep linking.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/README.md#2025-04-17_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n// Perform web based OAuth login\nawait supabase.auth.signInWithOAuth(\n  OAuthProvider.github,\n  redirectTo: kIsWeb ? null : 'io.supabase.flutter://callback',\n);\n\n// Listen to auth state changes in order to detect when ther OAuth login is complete.\nsupabase.auth.onAuthStateChange.listen((data) {\n  final AuthChangeEvent event = data.event;\n  if(event == AuthChangeEvent.signedIn) {\n    // Do something when user sign in\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Transforming Images with Supabase Storage in Dart\nDESCRIPTION: Shows how to use transformation options with Supabase Storage for on-the-fly image processing when creating signed URLs, public URLs, or downloading images.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nfinal signedUrl = await storage.from(newBucketName).createSignedUrl(uploadPath, 2000,\n            transform: TransformOptions(\n              width: 100,\n              height: 100,\n            ));\nfinal publicUrl = storage.from(bucket).getPublicUrl(path,\n        transform: TransformOptions(width: 200, height: 300));\nfinal file = await storage.from(newBucketName).download(uploadPath,\n        transform: TransformOptions(\n          width: 200,\n          height: 200,\n        ));\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase with PKCE Auth Flow in Dart\nDESCRIPTION: Demonstrates how to initialize Supabase with PKCE (Proof Key for Code Exchange) authentication flow type for deep link related authentication.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nawait Supabase.initialize(\n  url: supabaseUrl,\n  anonKey: supabaseKey,\n  authFlowType: AuthFlowType.pkce,\n);\n```\n\n----------------------------------------\n\nTITLE: Paginating User List in Dart\nDESCRIPTION: Shows how to paginate the list of users using the admin.listUsers() method in the Supabase Flutter SDK.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/gotrue/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nauth.admin.listUsers(page: 2, perPage: 10);\n```\n\n----------------------------------------\n\nTITLE: Signing In with Apple in Dart using Supabase\nDESCRIPTION: Shows how to use the signInWithApple method to authenticate users with Apple Sign In through Supabase.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nfinal AuthResponse response = await supabase.auth.signInWithApple();\n```\n\n----------------------------------------\n\nTITLE: Initializing Storage Client with Retry Attempts in Dart\nDESCRIPTION: Shows how to instantiate a Supabase Storage Client with retry attempts for upload operations. This example sets the retry limit to 10 attempts.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/storage_client/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal storage = SupabaseStorageClient(url, headers, retryAttempts: 10);\n```\n\n----------------------------------------\n\nTITLE: Using Generic Types with Supabase Query Select in Dart\nDESCRIPTION: Demonstrates how to use generic types with Supabase PostgrestClient's select method to get properly typed data results from queries.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase/CHANGELOG.md#2025-04-17_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n// data is `List<Map<String, dynamic>>`\nfinal data = await supabase.from<List<Map<String, dynamic>>>('users').select();\n\n// data is `Map<String, dynamic>`\nfinal data = await supabase.from<Map<String, dynamic>>('users').select().eq('id', myId).single();\n```\n\n----------------------------------------\n\nTITLE: Storage Retry Configuration in Flutter\nDESCRIPTION: Shows how to configure automatic retry attempts for failed storage operations during Supabase initialization.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/CHANGELOG.md#2025-04-17_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nawait Supabase.initialize(\n  supabaseUrl,\n  supabaseAnonKey,\n  storageRetryAttempts: 25,\n);\n```\n\n----------------------------------------\n\nTITLE: Using Count Options with Select Queries in Supabase Flutter\nDESCRIPTION: Shows how to use FetchOptions with count parameter to get the exact count of records alongside the data in a select query. The response contains both the data and the count information.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/postgrest/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal response = await client.from('countries').select('*', FetchOptions(count: CountOption.exact));\nprint(response.data);\nprint(response.count);\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth Sign-in with Custom Launch Mode in Flutter\nDESCRIPTION: Shows how to configure OAuth sign-in with a custom authScreenLaunchMode parameter to control how the OAuth screen is displayed.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nawait supabase.auth.signInWithOAuth(\n  Provider.goodle,\n  authScreenLaunchMode: LaunchMode.inAppWebView,\n);\n```\n\n----------------------------------------\n\nTITLE: Using Generic Types with Select Method in Postgrest\nDESCRIPTION: Example of using generic type parameters with the `.select()` method in Postgrest to provide stronger type checking. The first example returns a list of maps, while the second returns a single map.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/postgrest/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// data is `List<Map<String, dynamic>>`\nfinal data = await supabase.from<List<Map<String, dynamic>>>('users').select();\n\n// data is `Map<String, dynamic>`\nfinal data = await supabase.from<Map<String, dynamic>>('users').select().eq('id', myId).single();\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Services for Testing Supabase Packages\nDESCRIPTION: Command to start Docker services required for testing Supabase packages. This uses docker-compose to initialize the necessary backend services in detached mode.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Paginating User List with Supabase Admin API in Dart\nDESCRIPTION: Demonstrates how to paginate through user lists using the Supabase Auth Admin API, controlling page number and results per page.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nauth.admin.listUsers(page: 2, perPage: 10);\n```\n\n----------------------------------------\n\nTITLE: Introducing Type Safe Realtime Methods in realtime_client v2.0.0-dev.3\nDESCRIPTION: Introduces type safe realtime methods in the realtime_client package. This is a breaking change.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\n- **BREAKING** **FEAT**(realtime_client): Introduce type safe realtime methods ([#725](https://github.com/supabase/supabase-flutter/pull/725)).\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Headers to Supabase Client in Dart\nDESCRIPTION: Demonstrates how to add custom headers to a Supabase client using the headers setter. This allows for passing additional information in API requests to Supabase services.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Add custom headers using the `headers` setter\nsupabase.headers = {'my-headers': 'my-value'};\n```\n\n----------------------------------------\n\nTITLE: Fixing Realtime Ordering on Double in supabase v2.0.0-dev.4\nDESCRIPTION: Fixes an issue with realtime ordering on double values in the supabase package.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\n- **FIX**: realtime ordering on double ([#741](https://github.com/supabase/supabase-flutter/issues/741)). ([f20faef7](https://github.com/supabase/supabase-flutter/commit/f20faef710e4e730590543ccd0a7bafd072be2ff))\n```\n\n----------------------------------------\n\nTITLE: Updating Realtime Stream Usage in Dart\nDESCRIPTION: Shows the changes in how to use the realtime stream feature in Supabase Flutter. The new API removes the need for .execute() and introduces a separate .eq() method for equality filtering.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/CHANGELOG.md#2025-04-17_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n// before\nSupabase.instance.client.from('my_table:title=eq.Supabase')\n  .stream(['id'])\n  .order('created_at')\n  .limit(10)\n  .execute()\n  .listen((payload) {\n    // do something with payload here\n  });\n\n// now\nSupabase.instance.client.from('my_table')\n  .stream(['id'])\n  .eq('title', 'Supabase')\n  .order('created_at')\n  .limit(10)\n  .listen((payload) {\n    // do something with payload here\n  });\n```\n\n----------------------------------------\n\nTITLE: User Administration with Pagination in Flutter\nDESCRIPTION: Shows how to list users with pagination support using the admin API.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nauth.admin.listUsers(page: 2, perPage: 10);\n```\n\n----------------------------------------\n\nTITLE: Updating Stream Method Usage in Dart\nDESCRIPTION: Demonstrates the changes in using the .stream() method, which now takes a named parameter 'primaryKey' instead of a positional argument.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase/CHANGELOG.md#2025-04-17_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nsupabase.from('my_table').stream(primaryKey: ['id']);\n```\n\n----------------------------------------\n\nTITLE: Updating User Data in Dart\nDESCRIPTION: Shows the change in method name from update() to updateUser() for updating user data.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase/CHANGELOG.md#2025-04-17_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nfinal res = await supabase.auth.updateUser(\n    UserAttributes(\n      email: 'new@email.com',\n      data: {\n        'username': 'new_username',\n      },\n    ),\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Stream Filters in Dart\nDESCRIPTION: Demonstrates the changes in applying filters to the .stream() method, replacing the realtime syntax with the .eq() method.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase/CHANGELOG.md#2025-04-17_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nsupabase.from('my_table')\n  .stream(['id'])\n  .eq('title', 'Supabase')\n  .order('created_at')\n  .limit(10)\n  .listen((payload) {\n    // do something with payload here\n  });\n```\n\n----------------------------------------\n\nTITLE: Handling Auth State Change Events in Dart\nDESCRIPTION: Demonstrates how to listen for and handle authentication state change events using the Supabase Flutter SDK.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/gotrue/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nsupabase.onAuthStateChange.listen((data) {\n  // handle auth state change here\n}, onError: (error) {\n  // handle error here\n});\n```\n\n----------------------------------------\n\nTITLE: User Authentication with Email and Password in Dart\nDESCRIPTION: Shows how to perform user sign-up and sign-in operations using email and password with the Supabase Flutter SDK.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/gotrue/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// Sign up\nfinal res = await supabase.auth.signUp(email: 'example@email.com', password: 'password');\n\n// Sign in\nfinal res = await supabase.auth.signInWithPassword(email: 'example@email.com', password: 'password');\n```\n\n----------------------------------------\n\nTITLE: Importing Supabase Flutter Package\nDESCRIPTION: Import statement for including the Supabase Flutter library in your project.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/README.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:supabase_flutter/supabase_flutter.dart';\n```\n\n----------------------------------------\n\nTITLE: Adding Local Supabase Flutter Package to Project in YAML\nDESCRIPTION: Demonstrates how to add a locally developed Supabase Flutter package to a Flutter project by specifying its path in the pubspec.yaml file.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsupabase_flutter:\n  path: <your-path-to-the-local-supabase-flutter-repo>/packages/supabase_flutter\n```\n\n----------------------------------------\n\nTITLE: Running Dart Tests for Supabase Packages\nDESCRIPTION: Command to run Dart tests for Supabase packages with the -j 1 flag to prevent concurrent test execution, which is important when tests use the same services.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndart test -j 1\n```\n\n----------------------------------------\n\nTITLE: Stopping Docker Services After Testing\nDESCRIPTION: Command to stop and remove Docker services after testing is complete. This should be run in the package's infrastructure directory.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose down\n```\n\n----------------------------------------\n\nTITLE: Fixing PKCE Flow Password Recovery Event in gotrue v2.0.0-dev.2\nDESCRIPTION: Fixes an issue where the PKCE flow was not emitting the password recovery event.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\n- **FIX**: PKCE flow not emitting password recovery event ([#744](https://github.com/supabase/supabase-flutter/issues/744)). ([65859bd2](https://github.com/supabase/supabase-flutter/commit/65859bd2676873c685397b4b37d2685bed18b5a1))\n```\n\n----------------------------------------\n\nTITLE: Adding Figma OAuth Provider in gotrue v2.0.0-dev.2\nDESCRIPTION: Adds Figma as a new OAuth provider in the gotrue package.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\n- **FEAT**(gotrue): add Figma to  OAuth provider. ([#743](https://github.com/supabase/supabase-flutter/issues/743)). ([f5b72d47](https://github.com/supabase/supabase-flutter/commit/f5b72d47e7af4b62aa99f3e380557ef039b1e2d9))\n```\n\n----------------------------------------\n\nTITLE: Using SharedPreferences on Web in supabase_flutter v2.0.0-dev.4\nDESCRIPTION: Updates the supabase_flutter package to use SharedPreferences on web platforms.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\n- **FIX**: use SharedPreferences on web ([#738](https://github.com/supabase/supabase-flutter/issues/738)). ([d0cc2015](https://github.com/supabase/supabase-flutter/commit/d0cc20153f23004f1ef2f821b0e9c6d9189f6b03))\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library in CMake for Flutter Windows\nDESCRIPTION: Installs the Ahead-Of-Time (AOT) compiled library for non-Debug builds (Profile and Release configurations) to optimize application performance.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/example/windows/CMakeLists.txt#2025-04-17_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policies and Installation Paths for Flutter Linux\nDESCRIPTION: Configures CMake policies and sets the installation RPATH for bundled libraries.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/example/linux/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter and System Dependencies for Linux Build\nDESCRIPTION: Adds Flutter library, sets up system-level dependencies, and defines the application target.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/example/linux/CMakeLists.txt#2025-04-17_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n\napply_standard_settings(${BINARY_NAME})\n\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Installation Rules for Flutter Linux Application\nDESCRIPTION: Configures installation rules for the application bundle, including executable, data files, and libraries.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/example/linux/CMakeLists.txt#2025-04-17_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Flutter Linux Application\nDESCRIPTION: Sets up the initial CMake project configuration, including minimum version, project name, and language specification.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/example/linux/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version and Ephemeral Directory in Flutter Linux Build\nDESCRIPTION: Defines the minimum required CMake version and establishes the ephemeral directory path for Flutter Linux builds.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/example/linux/flutter/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Library Headers for Linux Implementation\nDESCRIPTION: Creates a list of all required Flutter engine header files for the Linux implementation, which will be used to configure the Flutter interface library.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/example/linux/flutter/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Tool Backend for Linux Build\nDESCRIPTION: Creates a custom command and target to run the Flutter tool backend script, which generates the necessary Flutter library and headers. Uses a _phony_ file to ensure the command runs on every build.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/example/linux/flutter/CMakeLists.txt#2025-04-17_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Project Settings in CMake for Flutter Windows\nDESCRIPTION: Sets up the basic project configuration including minimum CMake version, project name, executable name, and modern CMake behaviors.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/example/windows/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(example LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"example\")\n\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Build Environment\nDESCRIPTION: Sets up initial CMake configuration and Flutter library paths. Defines core Flutter library locations and includes generated configuration.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/example/windows/flutter/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Types in CMake for Flutter Windows\nDESCRIPTION: Defines build configuration options for Debug, Profile, and Release modes, handling both multi-config and single-config generators.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/example/windows/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Define build configuration option.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n# Define settings for the Profile build mode.\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Tool Backend Build Steps\nDESCRIPTION: Sets up custom build commands for Flutter tool backend operations. Creates phony targets to ensure proper rebuilding and defines dependencies for Flutter assembly.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/example/windows/flutter/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings in CMake for Flutter Windows\nDESCRIPTION: Creates a function to apply standard compilation settings to targets, including C++17 standard, warning levels, exception handling, and debug definitions.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/example/windows/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Project for Flutter iOS App\nDESCRIPTION: Command to open the Xcode project for a Flutter iOS application. This allows access to the Assets.xcassets folder for customizing launch screen assets.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/example/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`open ios/Runner.xcworkspace`\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter and Application Build in CMake\nDESCRIPTION: Configures the Flutter library, adds the runner subdirectory, and includes generated plugin build rules for the Windows Flutter application.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/example/windows/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build; see runner/CMakeLists.txt.\nadd_subdirectory(\"runner\")\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Error Handling in Dart for Function Invocation\nDESCRIPTION: This snippet shows how to handle errors when invoking functions using the Supabase Flutter Functions Client. It demonstrates the use of try-catch blocks to capture and print errors and stack traces.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/functions_client/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\ntry {\n  final res = await functions.invoke('myFunction');\n  print(res.data);\n} catch (error, stacktrace) {\n  print('$error \\n $stracktrace');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Settings in CMake for Flutter Windows\nDESCRIPTION: Sets up installation rules for the Flutter Windows application, including directory paths, executable placement, and support files needed for the application to run properly.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/example/windows/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# Support files are copied into place next to the executable, so that it can\n# run in place. This is done instead of making a separate bundle (as on Linux)\n# so that building and running from within Visual Studio will work.\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Managing Flutter Assets Installation in CMake\nDESCRIPTION: Configures the installation of Flutter assets, ensuring they're properly copied to the application bundle and that stale files are cleaned up between builds.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/example/windows/CMakeLists.txt#2025-04-17_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library Headers and Interface\nDESCRIPTION: Sets up Flutter library headers and creates an interface library target. Configures include directories and links against the Flutter library.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/example/windows/flutter/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Up C++ Wrapper Sources\nDESCRIPTION: Defines source files for core, plugin, and app components of the C++ wrapper. Organizes source files into separate lists for different components.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/example/windows/flutter/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Settings in CMake for Flutter Linux\nDESCRIPTION: Defines the binary name and application ID for the Flutter Linux application.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/example/linux/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(BINARY_NAME \"example\")\nset(APPLICATION_ID \"com.example.example\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Building Settings for Flutter Linux\nDESCRIPTION: Sets up the root filesystem and find root path settings for cross-building if a target platform sysroot is specified.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/example/linux/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration Options for Flutter Linux\nDESCRIPTION: Sets the default build type to Debug if not specified and defines available build types.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/example/linux/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compilation Settings for Flutter Linux Targets\nDESCRIPTION: Defines a function to apply standard compilation settings to targets, including C++14 support and optimization flags.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/example/linux/CMakeLists.txt#2025-04-17_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: List Prepend Helper Function for CMake Lists in Flutter Linux Build\nDESCRIPTION: Implements a helper function that prepends a prefix to each element in a list. This serves the same purpose as list(TRANSFORM ... PREPEND ...), which isn't available in CMake 3.10.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/example/linux/flutter/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring System Dependencies for Flutter Linux Library\nDESCRIPTION: Defines and checks for system-level dependencies required by the Flutter Linux implementation, including GTK, GLIB, and GIO packages.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/example/linux/flutter/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter Library ===\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n```\n\n----------------------------------------\n\nTITLE: Publishing Flutter Variables to Parent Scope\nDESCRIPTION: Sets Flutter-related paths and files to be available in the parent scope for the install step, including the Flutter library, ICU data file, build directory, and AOT library.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/example/linux/flutter/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library for Linux\nDESCRIPTION: Sets up the Flutter interface library with proper include directories and links to required libraries including GTK, GLIB, and GIO. It also prepends the ephemeral directory path to all header files.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/example/linux/flutter/CMakeLists.txt#2025-04-17_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Application Build\nDESCRIPTION: Configures CMake build settings for a Flutter Windows desktop application. Sets up the main executable target with required source files, links Flutter dependencies, and applies standard build settings. Includes Windows-specific configurations like NOMINMAX definition and manifest files.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/example/windows/runner/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n\napply_standard_settings(${BINARY_NAME})\n\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Multi-Factor Authentication (MFA) Implementation in Flutter\nDESCRIPTION: Demonstrates the implementation of MFA features including enrollment, challenge creation, and verification using the Supabase Flutter SDK.\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// Start the enrollment process for a new Multi-Factor Authentication (MFA) factor\nfinal res = await client.mfa\n  .enroll(issuer: 'MyFriend', friendlyName: 'MyFriendName');\n\n// Prepares a challenge used to verify that a user has access to a MFA factor.\nfinal res = await client.mfa.challenge(factorId: factorId1);\n\n// Verifies a code against a challenge.\nfinal res = await client.mfa\n        .verify(factorId: factorId1, challengeId: challengeId, code: getTOTP());\n```\n\n----------------------------------------\n\nTITLE: Using MigrationLocalStorage with Supabase Flutter\nDESCRIPTION: Demonstrates how to initialize Supabase with the MigrationLocalStorage to automatically migrate user sessions from Hive (v1) to SharedPreferences (v2).\nSOURCE: https://github.com/supabase/supabase-flutter/blob/main/packages/supabase_flutter/README.md#2025-04-17_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nSupabase.initialize(\n  // ...\n  authOptions: FlutterAuthClientOptions(\n    localStorage: const MigrationLocalStorage(\n      persistSessionKey:\n              \"sb-${Uri.parse(url).host.split(\".\").first}-auth-token\",\n    ),\n  ),\n);\n```"
  }
]