[
  {
    "owner": "toncenter",
    "repo": "tonweb",
    "content": "TITLE: Overview Example: TonWeb Usage\nDESCRIPTION: Provides a comprehensive example of using TonWeb, including wallet creation, address retrieval, sequence number retrieval, deployment, transfer estimation, cell manipulation, transaction history retrieval, balance retrieval, and sending BOC data.\nSOURCE: https://github.com/toncenter/tonweb/blob/master/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst tonweb = new TonWeb();\n\nconst wallet = tonweb.wallet.create({publicKey});\n\nconst address = await wallet.getAddress();\n\nconst nonBounceableAddress = address.toString(true, true, false);\n\nconst seqno = await wallet.methods.seqno().call();\n\nawait wallet.deploy(secretKey).send(); // deploy wallet to blockchain\n\nconst fee = await wallet.methods.transfer({\n    secretKey,\n    toAddress: 'EQDjVXa_oltdBP64Nc__p397xLCvGm2IcZ1ba7anSW0NAkeP',\n    amount: TonWeb.utils.toNano(0.01), // 0.01 TON\n    seqno: seqno,\n    payload: 'Hello',\n    sendMode: 3,\n}).estimateFee();\n\nconst Cell = TonWeb.boc.Cell;\nconst cell = new Cell();\ncell.bits.writeUint(0, 32);\ncell.bits.writeAddress(address);\ncell.bits.writeGrams(1);\nconsole.log(cell.print()); // print cell data like Fift\nconst bocBytes = cell.toBoc();\n\nconst history = await tonweb.getTransactions(address);\n\nconst balance = await tonweb.getBalance(address);\n\ntonweb.sendBoc(bocBytes);\n```\n\n----------------------------------------\n\nTITLE: Common Contract Interface Usage in JavaScript\nDESCRIPTION: This snippet illustrates common methods available on a `Contract` instance for deploying and interacting with a smart contract. It covers address retrieval, deployment, query creation, fee estimation, message sending, method calling, and get-method invocation. It assumes the availability of `provider`, `options` (including contract code and address), and `keyPair` with the secret key for deployment. `Address` and `Cell` types are from TonWeb.\nSOURCE: https://github.com/toncenter/tonweb/blob/master/src/contract/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n* @param provider    {HttpProvider}\n* @param options    {{code?: Uint8Array, address?: Address, wc?: number}}\n*/\nconst contract = new Contract(provider, options)\n\nconst address: Address = contract.getAddress();\n\n\nconst deployMethod = contract.deploy(keyPair.secretKey);\n\nconst query: Cell = await deployMethod.getQuery(); // get init external message as Cell\n\nawait deplotMethod.estimateFee(); // get estimate fee of deploy \n\nawait deployMethod.send(); // send init external message to blockchain\n\n\ncontract.methods; // object contains all methods of this smart contract\n\nconst myMethod = contract.methods.myMethod(myParams);\n\nconst query: Cell = await myMethod.getQuery(); // get external message \n\nawait myMethod.estimateFee(); // get estimate fee \n\nawait myMethod.send(); // send to blockchain \n\n\nconst myGetMethod = contract.methods.myGetMethod(myParams);\n\nconst result = await myGetMethod.call(); // invoke get-method of this smart contract\n```\n\n----------------------------------------\n\nTITLE: Initializing Wallet Contract Interaction (TonWeb, JavaScript)\nDESCRIPTION: This snippet demonstrates how to initialize interaction with a wallet smart contract using the TonWeb library. It creates a key pair, instantiates a wallet object with the public key, and retrieves the wallet address and sequence number. It showcases creating a wallet interface using either a public key or an existing address.\nSOURCE: https://github.com/toncenter/tonweb/blob/master/src/contract/wallet/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst nacl = TonWeb.utils.nacl; // use nacl library for key pairs\nconst tonweb = new TonWeb();\n\nconst keyPair = nacl.sign.keyPair(); // create new random key pair\n\nlet wallet = tonweb.wallet.create({publicKey: keyPair.publicKey, wc: 0}); // create interface to wallet smart contract (wallet v3 by default)\n\nOR\n\nwallet = tonweb.wallet.create({address: 'EQDjVXa_oltdBP64Nc__p397xLCvGm2IcZ1ba7anSW0NAkeP'}); // if your know only address at this moment\n\n\nconst address = await wallet.getAddress();\n\nconst seqno = await wallet.methods.seqno().call(); // call get-method `seqno` of wallet smart contract\n```\n\n----------------------------------------\n\nTITLE: Transferring TON Coins (TonWeb, JavaScript)\nDESCRIPTION: This snippet shows how to transfer TON coins from a wallet using TonWeb. It demonstrates creating a transfer object, estimating the transfer fee, sending the transfer transaction, and retrieving the transfer query cell. It requires a key pair, recipient address, amount, sequence number, and an initialized wallet object.\nSOURCE: https://github.com/toncenter/tonweb/blob/master/src/contract/wallet/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// TRANSFER TON COINS\n\nconst transfer = wallet.methods.transfer({\n    secretKey: keyPair.secretKey,\n    toAddress: 'EQDjVXa_oltdBP64Nc__p397xLCvGm2IcZ1ba7anSW0NAkeP',\n    amount: TonWeb.utils.toNano('0.01'), // 0.01 TON\n    seqno: seqno,\n    payload: 'Hello',\n    sendMode: 3,\n});\n\nconst transferFee = await transfer.estimateFee();   // get estimate fee of transfer\n\nconst transferSended = await transfer.send();  // send transfer query to blockchain\n\nconst transferQuery = await transfer.getQuery(); // get transfer query Cell\n```\n\n----------------------------------------\n\nTITLE: Cell Deserialization Example in JavaScript\nDESCRIPTION: Provides a complete example of creating several Cell objects, writing data to them, and then serializing and deserializing them to verify data integrity. It relies on the TonWeb library and demonstrates the `toBoc` and `fromBoc` methods for converting between Cell objects and BOC byte arrays. This example requires `TonWeb` to be defined.\nSOURCE: https://github.com/toncenter/tonweb/blob/master/src/boc/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Create some cells\nconst c2 = new TonWeb.boc.Cell();\nc2.bits.writeUint(42, 7);\n\nconst c3 = new TonWeb.boc.Cell();\nc3.bits.writeUint(73, 255);\n\nconst c1 = new TonWeb.boc.Cell();\nc1.bits.writeUint8(0);\nc1.refs.push(c2);\nc1.refs.push(c3); \n\n// Check it deserialized correctly\nconst deC1 = TonWeb.boc.Cell.fromBoc(await c1.toBoc());\n(await deC1.hash()).toString() === (await c1.hash()).toString();\n```\n\n----------------------------------------\n\nTITLE: Extending the Contract Class in JavaScript\nDESCRIPTION: This code snippet demonstrates how to extend the `Contract` class in JavaScript to implement a custom smart contract. It shows the constructor, overriding the `createDataCell` method, and defining contract-specific methods. The `hexToBytes` function is assumed to be available for converting a hexadecimal string into a byte array for the contract's code.\nSOURCE: https://github.com/toncenter/tonweb/blob/master/src/contract/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport class MyContract extends Contract {\n    constructor(provider, options) {\n        options.code = hexToBytes('abcd..');\n        super(provider, options);\n\n        this.method.myMethod = ...\n    }\n\n    // @override\n    createDataCell() {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Wallet Contract (TonWeb, JavaScript)\nDESCRIPTION: This snippet illustrates how to deploy a wallet contract to the blockchain using TonWeb. It demonstrates creating a deployment object, estimating the deployment fee, sending the deployment transaction, and retrieving the deployment query cell. Requires a key pair and an initialized wallet object.\nSOURCE: https://github.com/toncenter/tonweb/blob/master/src/contract/wallet/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// DEPLOY\n\nconst deploy = wallet.deploy(keyPair.secretKey); // deploy method\n\nconst deployFee = await deploy.estimateFee()  // get estimate fee of deploy\n\nconst deploySended = await deploy.send() // deploy wallet contract to blockchain\n\nconst deployQuery = await deploy.getQuery();   // get deploy query Cell \n```\n\n----------------------------------------\n\nTITLE: Cell Initialization and Usage in JavaScript\nDESCRIPTION: Illustrates how to create and interact with Cell objects. It highlights methods for writing another cell, calculating the cell's hash, printing the cell's content, and converting the cell to a BOC (Bag of Cells) byte array. Also includes deserialization from BOC.\nSOURCE: https://github.com/toncenter/tonweb/blob/master/src/boc/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst cell = new Cell();\n\ncell.bits: BitString // with length 1023\n\ncell.refs: Array<cell> // with length 4\n\ncell.writeCell(anotherCell: Cell): void // Write another cell to this cell\n\ncell.hash(): Promise<Uint8Array> // Hash of cell\n\ncell.print(): string // Recursively prints cell's content like Fift\n\ncell.toBoc(has_idx?: boolean, hash_crc32?: boolean, has_cache_bits?: boolean, flags?: number): Promise<string> // create boc bytearray; toBoc(false) is equialent `2 boc+>B` in Fift\n\nCell.fromBoc(boc: string | UInt8Array): Cell - decerialize boc bytearray to Cell\n```\n\n----------------------------------------\n\nTITLE: Configuring TonWeb with Mainnet TonCenter API\nDESCRIPTION: Shows how to initialize TonWeb with the mainnet TonCenter API, including specifying an API key for higher rate limits.  Replace 'YOUR_MAINNET_TONCENTER_API_KEY' with your actual API key.\nSOURCE: https://github.com/toncenter/tonweb/blob/master/README.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst tonweb = new TonWeb(new TonWeb.HttpProvider('https://toncenter.com/api/v2/jsonRPC', {apiKey: 'YOUR_MAINNET_TONCENTER_API_KEY'}));\n```\n\n----------------------------------------\n\nTITLE: Configuring TonWeb with Testnet TonCenter API\nDESCRIPTION: Demonstrates how to initialize TonWeb with the testnet TonCenter API, including providing an API key for increased rate limits. Replace 'YOUR_TESTNET_TONCENTER_API_KEY' with your actual API key.\nSOURCE: https://github.com/toncenter/tonweb/blob/master/README.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst tonweb = new TonWeb(new TonWeb.HttpProvider('https://testnet.toncenter.com/api/v2/jsonRPC', {apiKey: 'YOUR_TESTNET_TONCENTER_API_KEY'}));\n```\n\n----------------------------------------\n\nTITLE: Using Non-Default Wallets (TonWeb, JavaScript)\nDESCRIPTION: This snippet demonstrates how to use specific wallet contract implementations other than the default one in TonWeb. It shows how to access the available wallet contract classes and instantiate a SimpleWalletContract. It showcases the different wallet versions available for use.\nSOURCE: https://github.com/toncenter/tonweb/blob/master/src/contract/wallet/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntonweb.wallet.all\n-> {SimpleWalletContract, StandardWalletContract, WalletV3Contract}\n\nconst simpleWallet = new tonweb.wallet.all.SimpleWalletContract({publicKey})\n```\n\n----------------------------------------\n\nTITLE: Initializing Address Class in TonWeb.utils\nDESCRIPTION: This JavaScript code snippet demonstrates how to initialize an Address object using the TonWeb.utils.Address class. The constructor accepts a string or an Address object.  The address object is then used to access various properties and methods.\nSOURCE: https://github.com/toncenter/tonweb/blob/master/src/utils/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst Address = TonWeb.utils.Address;\n\nconst address = new Address(anyForm: string | Address);\n\naddress.isUserFriendly: boolean\n\naddress.isUrlSafe: boolean\n\naddress.isBounceable: boolean\n\naddress.isTestOnly: boolean\n\naddress.wc: number\n\naddress.hashPart: Uint8Array\n\naddress.toString(isUserFriendly?: boolean, isUrlSafe?: boolean, isBounceable?: boolean, isTestOnly?: boolean): string\n```\n\n----------------------------------------\n\nTITLE: BitString Initialization and Usage in JavaScript\nDESCRIPTION: Demonstrates how to create and manipulate BitString objects. It showcases methods for writing bits, unsigned integers, signed integers, bytes, strings, grams, addresses, and other BitStrings. Includes basic properties like length and cursor management.\nSOURCE: https://github.com/toncenter/tonweb/blob/master/src/boc/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst bitString = new BitString(1023); // create BitString with length 1023 bits\n\nbitString.array: Uint8Array\n\nbitString.length: number\n\nbitString.cursor: number\n\nbitString.getFreeBits(): number\n\nbitString.getUsedBits(): number\n\nbitString.get(n: number): boolean // bit value at position `n`\n\nbitString.on(n: number): void // Set bit value to 1 at position `n`\n\nbitString.off(n: number): void // Set bit value to 0 at position `n`\n\nbitString.toggle(n: number): void // Toggle bit value at position `n`\n\nbitString.forEach(callback: function(boolean): void): void // forEach every bit\n\nbitString.writeBit(b: boolean | number): void; // Write bit and increase cursor\n\nbitString.writeBitArray(b: Array<boolean | number>): void;\n\nbitString.writeUint(number: number | BN, bitLength: number): void; // Write unsigned int\n\nbitString.writeInt(number: number | BN, bitLength: number): void; // Write signed int\n\nbitString.writeBytes(array: Uint8Array): void; \n\nbitString.writeString(s: string): void; \n\nbitString.writeGrams(amount: number | BN): void; // amount in nanograms\n\nbitString.writeAddress(address: Address | null): void; \n\nbitString.writeBitString(anotherBitString  BitString): void; // write another BitString to this BitString \n\nbitString.clone(): BitString\n\nbitString.toHex(): string // prints BitString like Fift\n```\n\n----------------------------------------\n\nTITLE: Initializing Standard Wallet TVM Code\nDESCRIPTION: This snippet initializes the TVM code for a 'wallet-r1' smart contract.  It utilizes the `with_tvm_code` function to associate the wallet name with its Base64 encoded TVM code, which represents the standard wallet's logic. Standard wallets provide a typical set of features for managing TON assets.\nSOURCE: https://github.com/toncenter/tonweb/blob/master/src/contract/wallet/WalletSourcesFromCPP.txt#_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\nwith_tvm_code(\"wallet-r1\",\n                  \"te6ccgEBAQEAVwAAqv8AIN0gggFMl7qXMO1E0NcLH+Ck8mCDCNcYINMf0x8B+CO78mPtRNDTH9P/0VExuvKhA/\"\n                  \"kBVBBC+RDyovgAApMg10qW0wfUAvsA6NGkyMsfy//J7VQ=\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Standard Wallet TVM Code Revision 2\nDESCRIPTION: This snippet initializes the TVM code for 'wallet-r2', a revision of the standard wallet, using `with_tvm_code`. The Base64 encoded TVM code is linked to the 'wallet-r2' name. This revision may address issues or introduce enhancements to the original standard wallet implementation.\nSOURCE: https://github.com/toncenter/tonweb/blob/master/src/contract/wallet/WalletSourcesFromCPP.txt#_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\nwith_tvm_code(\"wallet-r2\",\n                  \"te6ccgEBAQEAYwAAwv8AIN0gggFMl7ohggEznLqxnHGw7UTQ0x/XC//jBOCk8mCDCNcYINMf0x8B+CO78mPtRNDTH9P/\"\n                  \"0VExuvKhA/kBVBBC+RDyovgAApMg10qW0wfUAvsA6NGkyMsfy//J7VQ=\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Highload Wallet TVM Code\nDESCRIPTION: This snippet initializes the TVM code for a 'highload-wallet-r1' smart contract. It uses the `with_tvm_code` function, passing the name of the smart contract and its Base64 encoded TVM code as arguments. The highload wallet is designed for high-transaction volume applications on the TON blockchain.\nSOURCE: https://github.com/toncenter/tonweb/blob/master/src/contract/wallet/WalletSourcesFromCPP.txt#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nwith_tvm_code(\"highload-wallet-r1\",\n                  \"te6ccgEBBgEAhgABFP8A9KQT9KDyyAsBAgEgAgMCAUgEBQC88oMI1xgg0x/TH9Mf+CMTu/Jj7UTQ0x/TH9P/\"\n                  \"0VEyuvKhUUS68qIE+QFUEFX5EPKj9ATR+AB/jhghgBD0eG+hb6EgmALTB9QwAfsAkTLiAbPmWwGkyMsfyx/L/\"\n                  \"8ntVAAE0DAAEaCZL9qJoa4WPw==\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Highload Wallet TVM Code Revision 2\nDESCRIPTION: This snippet initializes the TVM code for a 'highload-wallet-r2' smart contract, representing a revision of the highload wallet. It uses the `with_tvm_code` function, associating the name with its specific Base64 encoded TVM code.  This revised code may contain bug fixes, performance improvements, or new features compared to the 'r1' version.\nSOURCE: https://github.com/toncenter/tonweb/blob/master/src/contract/wallet/WalletSourcesFromCPP.txt#_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nwith_tvm_code(\"highload-wallet-r2\",\n                  \"te6ccgEBCAEAmQABFP8A9KQT9LzyyAsBAgEgAgMCAUgEBQC88oMI1xgg0x/TH9Mf+CMTu/Jj7UTQ0x/TH9P/\"\n                  \"0VEyuvKhUUS68qIE+QFUEFX5EPKj9ATR+AB/jhghgBD0eG+hb6EgmALTB9QwAfsAkTLiAbPmWwGkyMsfyx/L/\"\n                  \"8ntVAAE0DACAUgGBwAXuznO1E0NM/MdcL/4ABG4yX7UTQ1wsfg=\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Highload Wallet V2 TVM Code\nDESCRIPTION: This snippet initializes the TVM code for 'highload-wallet-v2-r1'.  It employs `with_tvm_code` with the contract name and Base64 encoded TVM code. This version (v2) represents a potentially significant upgrade or refactoring of the highload wallet functionality, likely introducing new capabilities or optimizations.\nSOURCE: https://github.com/toncenter/tonweb/blob/master/src/contract/wallet/WalletSourcesFromCPP.txt#_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nwith_tvm_code(\"highload-wallet-v2-r1\",\n                  \"te6ccgEBBwEA1gABFP8A9KQT9KDyyAsBAgEgAgMCAUgEBQHu8oMI1xgg0x/TP/gjqh9TILnyY+1E0NMf0z/T//\"\n                  \"QE0VNggED0Dm+hMfJgUXO68qIH+QFUEIf5EPKjAvQE0fgAf44YIYAQ9HhvoW+\"\n                  \"hIJgC0wfUMAH7AJEy4gGz5luDJaHIQDSAQPRDiuYxyBLLHxPLP8v/9ADJ7VQGAATQMABBoZfl2omhpj5jpn+n/\"\n                  \"mPoCaKkQQCB6BzfQmMktv8ld0fFADgggED0lm+hb6EyURCUMFMDud4gkzM2AZIyMOKz\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Simple Wallet TVM Code\nDESCRIPTION: This snippet initializes the TVM code for a 'simple-wallet-r1' smart contract.  It uses the `with_tvm_code` function to link the name and Base64 encoded TVM code. Simple wallets typically offer a reduced feature set compared to standard wallets, focusing on basic transaction functionality.\nSOURCE: https://github.com/toncenter/tonweb/blob/master/src/contract/wallet/WalletSourcesFromCPP.txt#_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nwith_tvm_code(\"simple-wallet-r1\",\n                  \"te6ccgEEAQEAAAAAUwAAov8AIN0gggFMl7qXMO1E0NcLH+Ck8mCBAgDXGCDXCx/tRNDTH9P/\"\n                  \"0VESuvKhIvkBVBBE+RDyovgAAdMfMSDXSpbTB9QC+wDe0aTIyx/L/8ntVA==\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Simple Wallet TVM Code Revision 2\nDESCRIPTION: This snippet initializes the TVM code for a 'simple-wallet-r2' smart contract, which is a revision of the simple wallet. It leverages `with_tvm_code` to bind the smart contract name with its Base64 encoded TVM code.  As a revision, 'r2' might include improvements or corrections relative to 'r1'.\nSOURCE: https://github.com/toncenter/tonweb/blob/master/src/contract/wallet/WalletSourcesFromCPP.txt#_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nwith_tvm_code(\"simple-wallet-r2\",\n                  \"te6ccgEBAQEAXwAAuv8AIN0gggFMl7ohggEznLqxnHGw7UTQ0x/XC//jBOCk8mCBAgDXGCDXCx/tRNDTH9P/\"\n                  \"0VESuvKhIvkBVBBE+RDyovgAAdMfMSDXSpbTB9QC+wDe0aTIyx/L/8ntVA==\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Wallet3 TVM Code\nDESCRIPTION: This snippet initializes the TVM code for a 'wallet3-r1' smart contract.  The `with_tvm_code` function is used to associate the name with the Base64 encoded TVM code. 'wallet3' may represent a specific version or iteration of a standard wallet implementation.\nSOURCE: https://github.com/toncenter/tonweb/blob/master/src/contract/wallet/WalletSourcesFromCPP.txt#_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\nwith_tvm_code(\"wallet3-r1\",\n                  \"te6ccgEBAQEAYgAAwP8AIN0gggFMl7qXMO1E0NcLH+Ck8mCDCNcYINMf0x/TH/gjE7vyY+1E0NMf0x/T/\"\n                  \"9FRMrryoVFEuvKiBPkBVBBV+RDyo/gAkyDXSpbTB9QC+wDo0QGkyMsfyx/L/8ntVA==\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Wallet3 TVM Code Revision 2\nDESCRIPTION: This snippet initializes the TVM code for 'wallet3-r2' using `with_tvm_code`, representing a revised version of the 'wallet3' implementation. The provided Base64 encoded TVM code defines the smart contract logic. This revision may contain bug fixes or optimizations compared to 'r1'.\nSOURCE: https://github.com/toncenter/tonweb/blob/master/src/contract/wallet/WalletSourcesFromCPP.txt#_snippet_9\n\nLANGUAGE: C++\nCODE:\n```\nwith_tvm_code(\"wallet3-r2\",\n                  \"te6ccgEBAQEAcQAA3v8AIN0gggFMl7ohggEznLqxn3Gw7UTQ0x/THzHXC//jBOCk8mCDCNcYINMf0x/TH/gjE7vyY+1E0NMf0x/\"\n                  \"T/9FRMrryoVFEuvKiBPkBVBBV+RDyo/gAkyDXSpbTB9QC+wDo0QGkyMsfyx/L/8ntVA==\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Highload Wallet V2 TVM Code Revision 2\nDESCRIPTION: This snippet initializes 'highload-wallet-v2-r2' using `with_tvm_code`. It is another revision of the version 2 highload wallet, potentially addressing issues found in 'r1' or adding further enhancements.  The Base64 encoded TVM code defines the smart contract's behavior.\nSOURCE: https://github.com/toncenter/tonweb/blob/master/src/contract/wallet/WalletSourcesFromCPP.txt#_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nwith_tvm_code(\"highload-wallet-v2-r2\",\n                  \"te6ccgEBCQEA6QABFP8A9KQT9LzyyAsBAgEgAgMCAUgEBQHu8oMI1xgg0x/TP/gjqh9TILnyY+1E0NMf0z/T//\"\n                  \"QE0VNggED0Dm+hMfJgUXO68qIH+QFUEIf5EPKjAvQE0fgAf44YIYAQ9HhvoW+\"\n                  \"hIJgC0wfUMAH7AJEy4gGz5luDJaHIQDSAQPRDiuYxyBLLHxPLP8v/9ADJ7VQIAATQMAIBIAYHABe9nOdqJoaa+Y64X/\"\n                  \"wAQb5fl2omhpj5jpn+n/mPoCaKkQQCB6BzfQmMktv8ld0fFAA4IIBA9JZvoW+hMlEQlDBTA7neIJMzNgGSMjDisw==\");\n```\n\n----------------------------------------\n\nTITLE: Initializing TonWeb for Web\nDESCRIPTION: Illustrates how to import and initialize TonWeb in a web environment, either using ES modules or a script tag.\nSOURCE: https://github.com/toncenter/tonweb/blob/master/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport TonWeb from \"tonweb\";\n\nconst tonweb = new TonWeb();\n```\n\n----------------------------------------\n\nTITLE: Installing TonWeb via NPM\nDESCRIPTION: Demonstrates how to install TonWeb using NPM or Yarn package managers for web projects.\nSOURCE: https://github.com/toncenter/tonweb/blob/master/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install tonweb\n```\n\nLANGUAGE: Bash\nCODE:\n```\nyarn add tonweb\n```\n\n----------------------------------------\n\nTITLE: Installing TonWeb via NPM for NodeJS\nDESCRIPTION: Demonstrates how to install TonWeb using NPM or Yarn package managers for NodeJS projects.\nSOURCE: https://github.com/toncenter/tonweb/blob/master/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install tonweb\n```\n\nLANGUAGE: Bash\nCODE:\n```\nyarn add tonweb\n```\n\n----------------------------------------\n\nTITLE: Initializing TonWeb for NodeJS\nDESCRIPTION: Shows how to import and initialize TonWeb in a NodeJS environment using the `require` statement.\nSOURCE: https://github.com/toncenter/tonweb/blob/master/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst TonWeb = require('tonweb');\n\nconst tonweb = new TonWeb();\n```\n\n----------------------------------------\n\nTITLE: Cell Representation of Lockup Wallet\nDESCRIPTION: This snippet represents the cell structure of the lockup wallet contract.  It provides a hexadecimal representation of the contract's code and data, which can be used for understanding the contract's structure and deployment.\nSOURCE: https://github.com/toncenter/tonweb/blob/master/src/contract/wallet/WalletSources.md#_snippet_0\n\nLANGUAGE: Cell\nCODE:\n```\nx{FF00F4A413F4BCF2C80B}\n x{2_}\n  x{4}\n   x{CD}\n    x{2_}\n     x{2_}\n      x{007434C0C05C6C2497C0F83E900C0871C02497C0F80074C7C87040A497C1383C00D46D3C00608420BABE7114AC2F6C2497C338200A208420BABE7106EE86BCBD20084AE0840EE6B2802FBCBD01E0C235C62008087E4055040DBE4404BCBD34C7E00A60840DCEAA7D04EE84BCBD34C034C7CC0078C3C412040DD78CA_}\n       x{1039480AF005}\n       x{1037410AF0050810575056}\n       x{10244300F004ED54}\n      x{0875D27D2A1BE95B0C6_}\n     x{5ED44D0D31FD31FD3FFD3FFF404FA00F404FA00F404D1}\n    x{2_}\n     x{2_}\n      x{02323287C5F287C572FFC4F2FFFD00007E80BD00007E80BD00326_}\n      x{1448A814C4E0083D039BE865BE803444E800A44C38B21400FE809004E0083D10C06_}\n     x{48E1E228020F4966FA520933023BB9131E2209835FA00D113A14013926C21E2B3E630}\n   x{2_}\n    x{2_}\n     x{2_}\n      x{B5187E006D88868A82609E00C6207E00C63F04EDE20B3_}\n      x{5}\n       x{ADCE76A268699F98EB85FFC_}\n       x{AC78F6A268698F98EB858FC_}\n     x{4}\n      x{B325FB513435C2C7E_}\n      x{B1D1BE08E0804230FB50F62_}\n    x{BDE9F780188242F847800C_}\n  x{F28308D71820D31FD31FD31F802403F823BB13F2F2F003802251A9BA1AF2F4802351B7BA1BF2F4801F0BF9015410C5F9101AF2F4F8005057F823F0065098F823F0062071289320D74A8E8BD30731D4511BDB3C12B001E8309229A0DF72FB02069320D74A96D307D402FB00E8D103A4476814154330F004ED54}\n   x{01D0D3030178B0925B7FE0FA4031FA403001F001}\n```\n\n----------------------------------------\n\nTITLE: Serialized Cell Representation of Lockup Wallet\nDESCRIPTION: This snippet shows the serialized representation of the Lockup Wallet contract's cell. It's a hexadecimal string that represents the entire contract, including its code and data. This can be used for deployment or storage purposes.\nSOURCE: https://github.com/toncenter/tonweb/blob/master/src/contract/wallet/WalletSources.md#_snippet_1\n\nLANGUAGE: Cell\nCODE:\n```\nn```\n\n----------------------------------------\n\nTITLE: Lockup Wallet Deployment Parameters\nDESCRIPTION: This JSON object defines the deployment parameters for a lockup wallet.  It specifies the wallet type, workchain, funder's public key (config_pubkey), and whitelisted addresses for restricted coins (allowed_destinations). The 'config_pubkey' and 'allowed_destinations' must be base64 encoded.\nSOURCE: https://github.com/toncenter/tonweb/blob/master/src/contract/lockup/README.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    wallet_type: \"lockup-0.1\",\n    workchain: 0, // use -1 for masterchain if you need validator/elector in the whitelist\n    config_pubkey: <base64-encoded pubkey>,\n    allowed_destinations: <base64-encoded BoC representation of the whitelisted addresses>\n}\n```\n\n----------------------------------------\n\nTITLE: Using TonWeb as Fift Alternative - Installation\nDESCRIPTION: Instructions for installing TonWeb globally and setting up environment variables for using it as an alternative to Fift for smart contract message building.  These steps are necessary to run the javascript code in the next snippet.\nSOURCE: https://github.com/toncenter/tonweb/blob/master/README.md#_snippet_9\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install -g tonweb\n\nexport NODE_PATH=$(npm root --quiet -g)\n```\n\n----------------------------------------\n\nTITLE: Building TonWeb from Source\nDESCRIPTION: Instructions for building the TonWeb library from source code using npm. These commands are executed in the command line.\nSOURCE: https://github.com/toncenter/tonweb/blob/master/README.md#_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install \n\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Using TonWeb as Fift Alternative - Script Example\nDESCRIPTION: Shows how to use TonWeb in a JavaScript script (your_script.js) as an alternative to Fift for constructing binary messages for smart contracts. The previous bash snippet shows the necessary setup.\nSOURCE: https://github.com/toncenter/tonweb/blob/master/README.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst TonWeb = require('tonweb');\n\nconst tonweb = new TonWeb();\n\n. . .\n```\n\n----------------------------------------\n\nTITLE: Using TonWeb as Fift Alternative - Running Script\nDESCRIPTION: Command to execute the javascript code with node, after installing and setting up correctly. Requires previous installation and setup as described in the other bash snippet.\nSOURCE: https://github.com/toncenter/tonweb/blob/master/README.md#_snippet_11\n\nLANGUAGE: Bash\nCODE:\n```\nnode your_script.js\n```\n\n----------------------------------------\n\nTITLE: Initializing TonWeb with Script Tag\nDESCRIPTION: Illustrates how to initialize TonWeb when included directly via a script tag in HTML.\nSOURCE: https://github.com/toncenter/tonweb/blob/master/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script src=\"tonweb.js\"></script>\n\n`const tonweb = new window.TonWeb();`\n```"
  }
]