[
  {
    "owner": "vitaly-t",
    "repo": "pg-promise",
    "content": "TITLE: Initializing pg-promise with Options\nDESCRIPTION: Loading and initializing the pg-promise library with custom initialization options. This creates the main pgp factory function that can be used to create database connections.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/jsdoc/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst initOptions = {/* initialization options */};\nconst pgp = require('pg-promise')(initOptions);\n```\n\n----------------------------------------\n\nTITLE: Creating a Database Connection Object\nDESCRIPTION: Creating a Database object from the connection details using the pgp factory function. The connection parameter can be either a Configuration Object or a Connection String.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/jsdoc/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = pgp(connection);\n```\n\n----------------------------------------\n\nTITLE: Using Transactions in pg-promise with JavaScript\nDESCRIPTION: Demonstrates how to use transactions in pg-promise. It shows creating a sequence of transaction queries, executing them in a batch, and handling commit or rollback based on the success or failure of the transaction.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/README.md#2025-04-22_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\ndb.tx(t => {\n    // creating a sequence of transaction queries:\n    const q1 = t.none('UPDATE users SET active = $1 WHERE id = $2', [true, 123]);\n    const q2 = t.one('INSERT INTO audit(entity, id) VALUES($1, $2) RETURNING id', ['users', 123]);\n\n    // returning a promise that determines a successful transaction:\n    return t.batch([q1, q2]); // all of the queries are to be resolved;\n})\n    .then(data => {\n        // success, COMMIT was executed\n    })\n    .catch(error => {\n        // failure, ROLLBACK was executed\n    });\n```\n\n----------------------------------------\n\nTITLE: Executing Queries with Index Variables in pg-promise\nDESCRIPTION: Example of using index variables ($1, $2) for query parameter formatting in pg-promise. The first example uses an array of values, while the second demonstrates single-value parametrization.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait db.any('SELECT * FROM product WHERE price BETWEEN $1 AND $2', [1, 10])\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait db.any('SELECT * FROM users WHERE name = $1', 'John')\n```\n\n----------------------------------------\n\nTITLE: Using Named Parameters in pg-promise Queries\nDESCRIPTION: Example showing how to use named parameters with different syntax options (${}, $<>, $//). This approach allows passing an object with named properties as query parameters.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// We can use every supported variable syntax at the same time, if needed:\nawait db.none('INSERT INTO users(first_name, last_name, age) VALUES(${name.first}, $<name.last>, $/age/)', {\n    name: {first: 'John', last: 'Dow'},\n    age: 30\n});\n```\n\n----------------------------------------\n\nTITLE: Basic TypeScript Usage with pg-promise\nDESCRIPTION: A simple example showing how to import pg-promise in TypeScript, initialize it with options, connect to a database, and execute a query. This demonstrates the basic pattern for working with pg-promise in a TypeScript environment.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/typescript/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport pgPromise from 'pg-promise';\n\nconst pgp = pgPromise({/* Initialization Options */});\n\nconst db = pgp('postgres://username:password@host:port/database');\n\nconst {value} = await db.one('SELECT 123 as value');\n```\n\n----------------------------------------\n\nTITLE: Handling Query Results with pg-promise in JavaScript\nDESCRIPTION: Demonstrates how to process query results from pg-promise operations. The example shows handling multiple result types and properly managing the returned data.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/test/sql/sub/third/notSql.txt#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndb.one('INSERT INTO users(name, age) VALUES($1, $2) RETURNING id', ['John', 30])\n    .then(data => {\n        // success;\n        // data.id = ID of the new user\n    })\n    .catch(error => {\n        // error;\n    });\n```\n\n----------------------------------------\n\nTITLE: Using Promises for Query Chaining in pg-promise\nDESCRIPTION: Shows how to chain multiple database operations using promises. This example demonstrates sequential query execution with dependency between operations.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/test/sql/sub/third/notSql.txt#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndb.task(t => {\n    return t.one('INSERT INTO users(name) VALUES($1) RETURNING id', 'John')\n        .then(user => {\n            return t.none('INSERT INTO events(title, user_id) VALUES($1, $2)', ['created', user.id]);\n        });\n})\n    .then(data => {\n        // success;\n        // data = undefined (as returned from the last query)\n    })\n    .catch(error => {\n        // error;\n    });\n```\n\n----------------------------------------\n\nTITLE: Implementing Transaction Control with pg-promise\nDESCRIPTION: Demonstrates implementing database transactions using pg-promise's transaction functionality. The code shows how to execute multiple operations as a single atomic transaction with automatic rollback on failure.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/test/sql/sub/third/notSql.txt#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndb.tx(t => {\n    // t = this transaction;\n    // t.ctx = transaction context;\n    return t.batch([\n        t.none('UPDATE users SET active=$1 WHERE id=$2', [true, 123]),\n        t.one('INSERT INTO audit(event, user_id) VALUES($1, $2) RETURNING id', ['activated', 123])\n    ]);\n})\n    .then(data => {\n        // success;\n        // data = array of results from each query\n        // data[0] = undefined (result from the UPDATE query)\n        // data[1] = {id: 456} (result from the INSERT+RETURNING query)\n    })\n    .catch(error => {\n        // error; transaction rolled back\n    });\n```\n\n----------------------------------------\n\nTITLE: Using pg-promise with Protocol Extensions in TypeScript\nDESCRIPTION: An advanced example showing how to implement protocol extensions with pg-promise in TypeScript. This demonstrates defining an extension interface, initializing with extension options, and using the extended protocol methods at different levels including tasks and transactions.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/typescript/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pgPromise from 'pg-promise';\n\n// your protocol extensions:\ninterface IExtensions {\n    findUser(userId: number): Promise<any>;\n}\n\n// pg-promise initialization options:\nconst options: pgPromise.IInitOptions<IExtensions> = {\n    extend(obj) {\n        obj.findUser = userId => {\n            return obj.one('SELECT * FROM Users WHERE id = $1', [userId]);\n        }\n    }\n};\n\n// initializing the library:\nconst pgp = pgPromise(options);\n\n// database object:\nconst db = pgp('postgres://username:password@host:port/database');\n\n// protocol is extended on each level:\nconst user = await db.findUser(123);\n\n// ...including inside tasks and transactions:\nawait db.task(async t => {\n    const user = await t.findUser(123);\n    // ...etc\n});\n```\n\n----------------------------------------\n\nTITLE: Executing Multiple Queries with Task in JavaScript\nDESCRIPTION: Shows how to use a task in pg-promise to execute multiple queries within a shared connection context. It demonstrates chaining queries and handling the results.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/README.md#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\ndb.task(t => {\n    // execute a chain of queries against the task context, and return the result:\n    return t.one('SELECT count(*) FROM events WHERE id = $1', 123, a => +a.count)\n        .then(count => {\n            if(count > 0) {\n                return t.any('SELECT * FROM log WHERE event_id = $1', 123)\n                    .then(logs => {\n                        return {count, logs};\n                    })\n            }\n            return {count};\n        });    \n})\n    .then(data => {\n        // success, data = either {count} or {count, logs}\n    })\n    .catch(error => {\n        // failed    \n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring Transaction Mode with Isolation Level in pg-promise\nDESCRIPTION: Creates a reusable transaction mode with serializable isolation level, read-only and deferrable options, and applies it to a transaction. This results in a BEGIN command with extended configuration parameters.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/README.md#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst {TransactionMode, isolationLevel} = pgp.txMode;\n \n// Create a reusable transaction mode (serializable + read-only + deferrable):\nconst mode = new TransactionMode({\n    tiLevel: isolationLevel.serializable,\n    readOnly: true,\n    deferrable: true\n});\n\ndb.tx({mode}, t => {\n    // do transaction queries here\n})\n    .then(() => {\n        // success;\n    })\n    .catch(error => {\n        // failure    \n    });\n```\n\n----------------------------------------\n\nTITLE: Conditional Transaction with Default Condition in pg-promise\nDESCRIPTION: Uses txIf method with default condition to execute a transaction when not already in one, or a task when inside an existing transaction. This helps avoid nested transactions (savepoints).\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/README.md#2025-04-22_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\ndb.txIf(t => {\n    // transaction is started, as the top level doesn't have one\n    return t.txIf(t2 => {\n        // a task is started, because there is a parent transaction        \n    });\n})\n```\n\n----------------------------------------\n\nTITLE: Conditional Transaction with Custom Value Condition in pg-promise\nDESCRIPTION: Uses txIf method with a custom value condition to determine whether to start a transaction. If the condition is truthy, a transaction starts; otherwise, a task is used.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/README.md#2025-04-22_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\ndb.txIf({cnd: someValue}, t => {\n    // if condition is truthy, a transaction is started\n    return t.txIf(t2 => {\n        // a task is started, if the parent is a transaction\n        // a transaction is started, if the parent is a task\n    });\n})\n```\n\n----------------------------------------\n\nTITLE: Conditional Transaction with Custom Callback Condition in pg-promise\nDESCRIPTION: Uses txIf method with a custom callback function to determine whether to start a transaction. The callback can examine the context and make decisions based on complex logic.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/README.md#2025-04-22_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nconst cnd = c => {\n    // c.ctx - task/transaction context (not available on the top level)\n    // default condition: return !c.ctx || !c.ctx.inTransaction;\n    return someValue;\n};\n\ndb.txIf({cnd}, t => {\n    // if condition is truthy, a transaction is started\n    return t.txIf(t2 => {\n        // a task is started, if the parent is a transaction\n        // a transaction is started, if the parent is a task\n    });\n})\n```\n\n----------------------------------------\n\nTITLE: Using QueryFile for External SQL in JavaScript\nDESCRIPTION: Demonstrates how to use QueryFile to load external SQL files in pg-promise. It includes a helper function to create QueryFile instances and shows how to use them in database queries.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/README.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst {join: joinPath} = require('path');\n\n// Helper for linking to external query files:\nfunction sql(file) {\n    const fullPath = joinPath(__dirname, file);\n    return new pgp.QueryFile(fullPath, {minify: true});\n}\n\n// Create a QueryFile globally, once per file:\nconst sqlFindUser = sql('./sql/findUser.sql');\n\ndb.one(sqlFindUser, {id: 123})\n    .then(user => {\n        console.log(user);\n    })\n    .catch(error => {\n        if (error instanceof pgp.errors.QueryFileError) {\n            // => the error is related to our QueryFile\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Shutting Down Single Database Connection Pool in pg-promise\nDESCRIPTION: Demonstrates how to shut down the connection pool associated with a Database object. This is necessary when you want the process to finish without waiting for all connections to expire.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/README.md#2025-04-22_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\ndb.$pool.end(); // shuts down the connection pool associated with the Database object\n```\n\n----------------------------------------\n\nTITLE: Shutting Down All Connection Pools in pg-promise\nDESCRIPTION: Shows how to shut down all connection pools at once using pgp.end(). This is useful in applications that use multiple databases or execute a multi-pool strategy.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/README.md#2025-04-22_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\npgp.end(); // shuts down all connection pools created in the process\n```\n\n----------------------------------------\n\nTITLE: Implementing Find-or-Insert Pattern with pg-promise Using Promises\nDESCRIPTION: JavaScript function that first attempts to find a user by name and return its ID. If no record is found, it inserts a new user and returns the new ID. This implementation uses promise chaining within a pg-promise task.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/examples/select-insert.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getInsertUserId(name) {\n    return db.task('getInsertUserId', t => {\n            return t.oneOrNone('SELECT id FROM Users WHERE name = $1', name, u => u && u.id)\n                .then(userId => {\n                    return userId || t.one('INSERT INTO Users(name) VALUES($1) RETURNING id', name, u => u.id);\n                });\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Find-or-Insert Pattern with pg-promise Using Async/Await\nDESCRIPTION: Alternative implementation of the getInsertUserId function using ES7 async/await syntax for cleaner code structure. This performs the same operations as the promise-based version but with more readable syntax.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/examples/select-insert.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync function getInsertUserId(name) {\n    return db.task('getInsertUserId', async t => {\n        const userId = await t.oneOrNone('SELECT id FROM Users WHERE name = $1', name, u => u && u.id);\n        return userId || await t.one('INSERT INTO Users(name) VALUES($1) RETURNING id', name, u => u.id);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Promise with All Pools Shutdown in pg-promise\nDESCRIPTION: Demonstrates how to chain the shutdown of all connection pools to the end of a promise chain. This ensures all pools are properly closed when the final queries complete.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/README.md#2025-04-22_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\n.finally(pgp.end);\n```\n\n----------------------------------------\n\nTITLE: Formatting Object Properties as Column Names in JavaScript\nDESCRIPTION: Demonstrates how pg-promise formats object properties as column names using the :name filter.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/README.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst obj = {\n    one: 1,\n    two: 2\n};\n\nawait db.query('SELECT $1:name FROM $2:name', [obj, 'table']);\n//=> SELECT \"one\",\"two\" FROM \"table\"\n```\n\n----------------------------------------\n\nTITLE: Using Nested Named Parameters in pg-promise\nDESCRIPTION: Example of nested property name support in pg-promise's named parameters, demonstrating access to deeply nested properties, function values, and custom type formatting objects.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst obj = {\n    one: {\n        two: {\n            three: {\n                value1: 123,\n                value2: a => {\n                    // a = obj.one.two.three\n                    return 'hello';\n                },\n                value3: function(a) {\n                    // a = this = obj.one.two.three\n                    return 'world';\n                },\n                value4: {\n                    toPostgres: a => {\n                        // Custom Type Formatting\n                        // a = obj.one.two.three.value4\n                        return a.text;\n                    },\n                    text: 'custom'\n                }                \n            }\n        }\n    }\n};\nawait db.one('SELECT ${one.two.three.value1}', obj); //=> SELECT 123\nawait db.one('SELECT ${one.two.three.value2}', obj); //=> SELECT 'hello'\nawait db.one('SELECT ${one.two.three.value3}', obj); //=> SELECT 'world'\nawait db.one('SELECT ${one.two.three.value4}', obj); //=> SELECT 'custom'\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Type Formatting in JavaScript\nDESCRIPTION: Shows how to implement a custom type (STPoint) with formatting for PostgreSQL's ST_MakePoint function.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/README.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nclass STPoint {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n        this.rawType = true; // no escaping, because we return pre-formatted SQL\n    }\n    \n    toPostgres(self) {\n        return pgp.as.format('ST_MakePoint($1, $2)', [this.x, this.y]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Type Formatting with Classic Syntax in JavaScript\nDESCRIPTION: Demonstrates how to implement a custom type (STPoint) using classic JavaScript syntax.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/README.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nfunction STPoint(x, y){\n    this.rawType = true; // no escaping, because we return pre-formatted SQL\n    this.toPostgres = () => pgp.as.format('ST_MakePoint($1, $2)', [x, y]);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Symbolic CTF in JavaScript\nDESCRIPTION: Demonstrates how to use Symbolic CTF (Custom Type Formatting) in pg-promise. It shows the usage of Symbol properties for toPostgres and rawType, which allow custom formatting without changing the object's signature.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/README.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst {toPostgres, rawType} = pgp.as.ctf; // Global CTF symbols\n\nconst obj = {\n    [toPostgres](self) {\n        // self = this = obj\n        \n        // return a pre-formatted value that does not need escaping\n    },\n    [rawType]: true // use result from toPostgres directly, as Raw Text\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring CTF Symbols Independently in JavaScript\nDESCRIPTION: Shows how to configure Custom Type Formatting (CTF) symbols independently of the pg-promise library, using Symbol.for() to create global symbol properties.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/README.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst ctf = {\n    toPostgres: Symbol.for('ctf.toPostgres'),\n    rawType: Symbol.for('ctf.rawType')\n};\n```\n\n----------------------------------------\n\nTITLE: Formatting SQL Names with Index Variables in JavaScript\nDESCRIPTION: Demonstrates how to use the :name filter with index variables to properly escape SQL identifiers.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait db.any('SELECT $1:name FROM $2:name', ['price', 'products'])\n//=> SELECT \"price\" FROM \"products\"\n```\n\n----------------------------------------\n\nTITLE: Formatting SQL Names with Named Parameters in JavaScript\nDESCRIPTION: Shows how to use the :name filter with named parameters to escape SQL identifiers.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nawait db.any('SELECT ${column:name} FROM ${table:name}', {\n    column: 'price',\n    table: 'products'    \n});\n//=> SELECT \"price\" FROM \"products\"\n```\n\n----------------------------------------\n\nTITLE: Using Tilde Filter for SQL Names in JavaScript\nDESCRIPTION: Demonstrates the use of the shorthand ~ filter for escaping SQL identifiers.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/README.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nawait db.query('INSERT INTO $1~($2~) VALUES(...)', ['Table Name', 'Column Name']);\n//=> INSERT INTO \"Table Name\"(\"Column Name\") VALUES(...)\n```\n\n----------------------------------------\n\nTITLE: Using :name Filter for SQL Names in JavaScript\nDESCRIPTION: Shows how to use the :name filter to escape SQL identifiers.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/README.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nawait db.query('INSERT INTO $1:name($2:name) VALUES(...)', ['Table Name', 'Column Name']);\n//=> INSERT INTO \"Table Name\"(\"Column Name\") VALUES(...)\n```\n\n----------------------------------------\n\nTITLE: Accessing PG-Promise Errors Namespace in JavaScript\nDESCRIPTION: This snippet demonstrates how to access the 'errors' namespace in pg-promise, both from the library itself and from an initialized instance. The namespace is available before and after initialization.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/lib/errors/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst pgpLib = require('pg-promise');\nconst pgp = pgpLib(/*initialization options*/);\n\npgpLib.errors; // `errors` namespace\npgp.errors; // `errors` namespace\n```\n\n----------------------------------------\n\nTITLE: Using Alias Filter for SQL Names in JavaScript\nDESCRIPTION: Demonstrates the use of the :alias filter for simpler SQL name formatting.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/README.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nawait db.any('SELECT full_name as $1:alias FROM $2:name', ['name', 'table']);\n//=> SELECT full_name as name FROM \"table\"\n```\n\n----------------------------------------\n\nTITLE: Formatting Composite SQL Names with Alias Filter in JavaScript\nDESCRIPTION: Shows how the :alias filter handles composite SQL names with dot notation.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/README.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nawait db.any('SELECT * FROM $1:alias', ['schemaName.table']);\n//=> SELECT * FROM \"schemaName\".table\n```\n\n----------------------------------------\n\nTITLE: Formatting All Columns with Asterisk in JavaScript\nDESCRIPTION: Demonstrates how pg-promise handles the asterisk symbol for selecting all columns.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/README.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nawait db.query('SELECT $1:name FROM $2:name', ['*', 'table']);\n//=> SELECT * FROM \"table\"\n```\n\n----------------------------------------\n\nTITLE: Formatting Array of Column Names in JavaScript\nDESCRIPTION: Shows how to format an array of column names using the :name filter.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/README.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nawait db.query('SELECT ${columns:name} FROM ${table:name}', {\n    columns: ['column1', 'column2'],\n    table: 'table'\n});\n//=> SELECT \"column1\",\"column2\" FROM \"table\"\n```\n\n----------------------------------------\n\nTITLE: Using 'this' Keyword for Column Names and Values in JavaScript\nDESCRIPTION: Shows how to use the 'this' keyword to enumerate column names and values from the formatting object.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/README.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst obj = {\n    one: 1,\n    two: 2\n};\n\nawait db.query('INSERT INTO table(${this:name}) VALUES(${this:csv})', obj);\n//=> INSERT INTO table(\"one\",\"two\") VALUES(1, 2)\n```\n\n----------------------------------------\n\nTITLE: Using List Filter with Array in JavaScript\nDESCRIPTION: Shows how to use the :list filter to format an array as comma-separated values.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/README.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst ids = [1, 2, 3];\nawait db.any('SELECT * FROM table WHERE id IN ($1:list)', [ids])\n//=> SELECT * FROM table WHERE id IN (1,2,3)\n```\n\n----------------------------------------\n\nTITLE: Enumerating Object Properties with CSV Filter in JavaScript\nDESCRIPTION: Demonstrates how to use the :csv filter to enumerate object properties for column names and values.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/README.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst obj = {first: 123, second: 'text'};\n\nawait db.none('INSERT INTO table($1:name) VALUES($1:csv)', [obj])\n//=> INSERT INTO table(\"first\",\"second\") VALUES(123,'text')\n\nawait db.none('INSERT INTO table(${this:name}) VALUES(${this:csv})', obj)\n//=> INSERT INTO table(\"first\",\"second\") VALUES(123,'text')\n```\n\n----------------------------------------\n\nTITLE: Using Raw Text Filter in JavaScript\nDESCRIPTION: Demonstrates how to use the :raw filter to inject raw text into SQL queries.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/README.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst where = pgp.as.format('WHERE price BETWEEN $1 AND $2', [5, 10]); // pre-format WHERE condition\nawait db.any('SELECT * FROM products $1:raw', where);\n//=> SELECT * FROM products WHERE price BETWEEN 5 AND 10\n```\n\n----------------------------------------\n\nTITLE: Using Open Values Filter for LIKE Statements in SQL\nDESCRIPTION: Shows how to use the :value filter to compose LIKE statements in SQL files.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/README.md#2025-04-22_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM table WHERE name LIKE '%$1:value%')\n```\n\n----------------------------------------\n\nTITLE: Overriding Standard Type Formatting in JavaScript\nDESCRIPTION: Shows how to override the default formatting for a standard type (Date) using custom type formatting.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/README.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nDate.prototype.toPostgres = a => a.getTime();\n```\n\n----------------------------------------\n\nTITLE: Using 'this' Reference in Named Parameters with pg-promise\nDESCRIPTION: Example demonstrating how to use the special 'this' property in named parameters, which refers to the formatting object itself and inserts it as a JSON-formatted string.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait db.none('INSERT INTO documents(id, doc) VALUES(${id}, ${this})', {\n    id: 123,\n    body: 'some text'    \n})\n//=> INSERT INTO documents(id, doc) VALUES(123, '{\"id\":123,\"body\":\"some text\"}')\n```\n\n----------------------------------------\n\nTITLE: SQL Query in External File\nDESCRIPTION: Example of an SQL query stored in an external file (findUser.sql). It demonstrates the use of multi-line comments, single-line comments, and named parameters in SQL.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/README.md#2025-04-22_snippet_25\n\nLANGUAGE: sql\nCODE:\n```\n/*\n    multi-line comments are supported\n*/\nSELECT name, dob -- single-line comments are supported\nFROM Users\nWHERE id = ${id}\n```\n\n----------------------------------------\n\nTITLE: Resulting BEGIN Command for Configured Transaction\nDESCRIPTION: Shows the SQL command that will be executed when starting a transaction with the configured transaction mode. The BEGIN command includes isolation level, read-only and deferrable options.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/README.md#2025-04-22_snippet_29\n\nLANGUAGE: sql\nCODE:\n```\nBEGIN ISOLATION LEVEL SERIALIZABLE READ ONLY DEFERRABLE\n```\n\n----------------------------------------\n\nTITLE: Chaining Promise with Pool Shutdown in pg-promise using Bluebird\nDESCRIPTION: Shows how to chain the connection pool shutdown to the end of a promise chain using Bluebird's finally method. This ensures the pool is properly closed when queries complete.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/README.md#2025-04-22_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n.finally(db.$pool.end);\n```\n\n----------------------------------------\n\nTITLE: Installing pg-promise via npm\nDESCRIPTION: Command to install the pg-promise library using npm package manager.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/jsdoc/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install pg-promise\n```\n\n----------------------------------------\n\nTITLE: Initializing pg-promise without Options\nDESCRIPTION: Loading and initializing the pg-promise library without any custom initialization options, using default settings.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/jsdoc/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst pgp = require('pg-promise')();\n```\n\n----------------------------------------\n\nTITLE: Accessing the helpers namespace in pg-promise\nDESCRIPTION: This snippet demonstrates how to initialize the pg-promise library and access its helpers namespace. The helpers namespace provides utility functions to simplify working with PostgreSQL queries.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/lib/helpers/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst pgp = require('pg-promise')(/*initialization options*/);\nconst helpers = pgp.helpers; // `helpers` namespace\n```\n\n----------------------------------------\n\nTITLE: Accessing Utils Namespace in pg-promise (JavaScript)\nDESCRIPTION: This snippet demonstrates how to access the utils namespace in pg-promise, both from the library itself and from an initialized instance. The utils namespace is available in both contexts.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/lib/utils/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst pgpLib = require('pg-promise');\nconst pgp = pgpLib(/*initialization options*/);\n\npgpLib.utils; // `utils` namespace\npgp.utils; // `utils` namespace\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Users Table in PostgreSQL\nDESCRIPTION: SQL query to create a basic Users table with an auto-incrementing ID and a unique name field. This schema serves as the foundation for the find-or-insert pattern examples.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/examples/select-insert.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- a simple table example\nCREATE TABLE Users(\n\tid SERIAL PRIMARY KEY,\n\tname TEXT UNIQUE -- unique user name\n);\n```\n\n----------------------------------------\n\nTITLE: Example of Calling the Find-or-Insert Function\nDESCRIPTION: JavaScript code demonstrating how to call the getInsertUserId function with proper promise handling, including success and error cases.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/examples/select-insert.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngetInsertUserId('name')\n    .then(userId => {\n        // use the id;\n    })\n    .catch(error => {\n        // something went wrong;\n    });\n```\n\n----------------------------------------\n\nTITLE: Using CSV Filter with Array in JavaScript\nDESCRIPTION: Demonstrates how to use the :csv filter to format an array as comma-separated values.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/README.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst ids = [1, 2, 3];\nawait db.any('SELECT * FROM table WHERE id IN ($1:csv)', [ids])\n//=> SELECT * FROM table WHERE id IN (1,2,3)\n```\n\n----------------------------------------\n\nTITLE: Executing Simple Queries with pg-promise in JavaScript\nDESCRIPTION: Shows how to execute basic SQL queries using the pg-promise library. The examples include SELECT, INSERT, and DELETE operations with proper parameter handling and result processing.\nSOURCE: https://github.com/vitaly-t/pg-promise/blob/master/test/sql/sub/third/notSql.txt#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndb.any('SELECT * FROM users')\n    .then(data => {\n        // success;\n        // data = array of users\n    })\n    .catch(error => {\n        // error;\n    });\n```"
  }
]