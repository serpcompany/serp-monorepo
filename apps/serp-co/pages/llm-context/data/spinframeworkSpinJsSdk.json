[
  {
    "owner": "spinframework",
    "repo": "spin-js-sdk",
    "content": "TITLE: Importing Spin LLM Package in JavaScript\nDESCRIPTION: This code snippet demonstrates how to import the Spin LLM package in a JavaScript application built with the Spin Framework.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/packages/spin-llm/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Spin LLM\n\nThis package provides bindings that enable using the Spin LLM interface in apps built using the `@spinframework/build-tools`.\n```\n\n----------------------------------------\n\nTITLE: Configuring S3Client in TypeScript\nDESCRIPTION: This code initializes an S3 client by configuring the region and AWS credentials. It requires valid AWS access key ID, secret access key, and optional session token to authenticate with AWS services.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/examples/aws/s3/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new S3Client({\n    region: \"us-west-2\",\n    credentials: {\n        accessKeyId: \"<>\",\n        secretAccessKey: \"<>\",\n        sessionToken: \"<>\"\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Upstash Vector Index Connection in TypeScript\nDESCRIPTION: Code snippet showing how to initialize a connection to an Upstash Vector index using the index URL and token credentials. These values need to be replaced with the actual credentials from your Upstash dashboard.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/examples/upstash/vector/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst index = new Index({\n   url: \"<index-url>\",\n   token: \"<index-token>\"\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS SQS Client and Message Parameters in TypeScript\nDESCRIPTION: This code configures the SQS client with AWS credentials and defines the parameters for sending a message to an SQS queue. It requires AWS credentials (access key ID, secret access key, session token) and the target queue URL to be provided.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/examples/aws/sqs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new SQSClient({\n    region: \"<region>\",\n    credentials: {\n        accessKeyId: \"<accessKeyId>\",\n        secretAccessKey: \"<secretAccessKey>\",\n        sessionToken: \"<sessionToken>\"\n    },\n});\n\nconst params = {\n    MessageBody: 'This is a test message with SQSClient.',\n    QueueUrl: '<queueUrl>'\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Planetscale Database Connection in JavaScript\nDESCRIPTION: Configuration object setup for connecting to Planetscale Database. Requires host, username and password from your Planetscale instance.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/examples/serverless_db/planetscale/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n   host: '<host>',\n   username: '<username>',\n   password: '<password>'\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing QStash Client and Publishing JSON Message\nDESCRIPTION: Demonstrates how to initialize a QStash client and publish a JSON message with a 2-second delay to a target URL. Requires a valid QStash token from Upstash dashboard.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/examples/upstash/qstash/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new Client({ token: \"<qstash-token>\" });\n\n...\n\nconst resp = await client.publishJSON({\n    url: \"<target-url>\",\n    body: { hello: \"world\" },\n    delay: 2,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring S3Client for Backblaze B2 in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure the S3Client from AWS SDK to connect to Backblaze B2. It requires the Backblaze endpoint, region, and credentials (Access Key ID and Secret Access Key).\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/examples/blob-storage/backblaze/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst s3 = new S3Client({\n  endpoint: '<Backblaze b2 endpoint>',\n  region: '<>',\n  credentials: {\n    accessKeyId: '<>',\n    secretAccessKey: '<>',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT Connection in JavaScript\nDESCRIPTION: This snippet shows how to configure the MQTT connection settings including the broker address, username, password, and keep-alive interval. It also defines the MQTT topic to be used.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/examples/spin-host-apis/spin-mqtt/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  address: \"<mqtt-broker-address>\",\n  username: \"<mqtt-broker-username>\",\n  password: \"<mqtt-broker-password>\",\n  KeepAlive: 60,\n}\n\nconst topic = \"<mqtt-topic>\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Neon Database Connection in JavaScript\nDESCRIPTION: Code snippet showing how to initialize a connection to Neon Database using the Neon Serverless SDK. Requires replacing the placeholder with your actual Neon Database endpoint.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/examples/serverless_db/neondb/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst sql = neon('<neon-database-endpoint>');\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack Plugin\nDESCRIPTION: Example configuration for the SpinSDK webpack plugin that handles external module dependencies based on WIT imports. The plugin requires async initialization.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/packages/build-tools/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport SpinSdkPlugin from \"@spinframework/build-tools/plugins/webpack/index.js\";\nconst config = async () => {\n    return {\n        ...\n        plugins: [\n            await SpinSdkPlugin.init()\n        ]\n    }\n}\n\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Building and Running the Spin Application\nDESCRIPTION: Commands to build and launch the Spin application. After running these commands, the application will be available at localhost:3000 and can be tested using curl or another HTTP client.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/examples/upstash/vector/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nspin build\nspin up\n```\n\n----------------------------------------\n\nTITLE: Setting up MySQL Database for Spin Development\nDESCRIPTION: SQL commands to create a development database, switch to it, create a test table, and insert sample data for Spin application testing.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/examples/spin-host-apis/spin-mysql/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncreate database spin_dev;\nuse spin_dev;\ncreate table test(id int, val int);\ninsert into test values (4,4);\n```\n\n----------------------------------------\n\nTITLE: Testing GET Request with Route Parameters to /bye/:name\nDESCRIPTION: Example of sending a GET request to a path with a route parameter that returns a JSON response.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/examples/common-patterns/routing-requests/README.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n# Passing \"Spin\" for the route parameter :name \ncurl localhost:3000/bye/Spin\n# {\"message\": \"Goodbye, Spin\"}\n```\n\n----------------------------------------\n\nTITLE: Setting up PostgreSQL Database for Spin JS SDK\nDESCRIPTION: SQL commands to create a test database, connect to it, create a sample table, and insert test data. This setup is required before running the Spin application example.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/examples/spin-host-apis/spin-postgres/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate database spin_dev;\n\\c spin_dev;\ncreate table test(id int, val int);\ninsert into test values (4,4);\n```\n\n----------------------------------------\n\nTITLE: Building and Running the Spin Application\nDESCRIPTION: Commands to build and run the Spin application. After executing these commands, the application will be available at http://127.0.0.1:3000/.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/examples/aws/sqs/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nspin build\nspin up\n```\n\n----------------------------------------\n\nTITLE: Building and Running a Spin Application with SQLite Database\nDESCRIPTION: Commands for building a Spin application and starting it with an SQLite database initialized from a migrations file. The example suggests using curl to test the HTTP endpoint after the application is running.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/examples/orm/drizzle/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nspin build\nspin up --sqlite @migrations.sql\n```\n\n----------------------------------------\n\nTITLE: Building and Running Spin Application\nDESCRIPTION: Commands to build and start the Spin application that exposes the GitHub API integration endpoint\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/examples/github/octokit-rest/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nspin build\nspin up\n```\n\n----------------------------------------\n\nTITLE: Building and Running Spin Application\nDESCRIPTION: Commands for building and deploying the Spin application with Planetscale integration.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/examples/serverless_db/planetscale/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nspin build\nspin up\n```\n\n----------------------------------------\n\nTITLE: Building and Running the Spin Application with Bash Commands\nDESCRIPTION: Commands to build and start the Spin application that connects to Neon Database. After starting the application, it can be tested using curl or another HTTP client.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/examples/serverless_db/neondb/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nspin build\nspin up\n```\n\n----------------------------------------\n\nTITLE: WIT Dependencies Configuration\nDESCRIPTION: Example package.json configuration for WIT dependencies, showing how to specify WIT path, package name, and target world under the config.witDependencies field.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/packages/build-tools/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n...\n\"config\": {\n    \"witDependencies\": [\n      {\n        \"witPath\": \"./wit\",\n        \"package\": \"spinframework:wasi-cli-environment@0.2.3\",\n        \"world\": \"wasi-cli\"\n      }\n    ]\n  }\n...\n```\n\n----------------------------------------\n\nTITLE: Building and Running Spin Application with Outbound HTTP\nDESCRIPTION: Commands to build and run a Spin application that makes outbound HTTP requests. After running these commands, the application can be tested using curl to send requests to the local endpoint.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/examples/common-patterns/outbound-http/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nspin build\nspin up\n```\n\n----------------------------------------\n\nTITLE: Mapping HTTP Methods to KV Operations\nDESCRIPTION: Describes the mapping between HTTP request methods and corresponding Spin KV operations. This shows how different HTTP methods are used to interact with the key-value store.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/examples/spin-host-apis/spin-kv/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nGET -> kv.get(request.url)\nPOST -> kv.set(request.uri, body)\nHEAD -> kv.exists(request.uri)\nDELETE -> kv.delete(request.uri)\n```\n\n----------------------------------------\n\nTITLE: Building and Running Spin Application\nDESCRIPTION: Commands to build and run a Spin application that utilizes MySQL outbound connectivity.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/examples/spin-host-apis/spin-mysql/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nspin build\nspin up\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Trigger and Component Settings for Spin Framework JavaScript Application\nDESCRIPTION: This configuration snippet defines an HTTP trigger route and component settings for a Spin framework application. It specifies the application's HTTP endpoint, WASM file location, network permissions, and build process.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/templates/http-ts/metadata/snippets/component.txt#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[[trigger.http]]\nroute = \"{{http-path}}\"\ncomponent = \"{{project-name | kebab_case}}\"\n\n[component.{{project-name | kebab_case}}]\nsource = \"{{ output-path }}/dist/{{project-name | kebab_case}}.wasm\"\nallowed_outbound_hosts = []\n\n[component.{{project-name | kebab_case}}.build]\ncommand = \"npm install && npm run build\"\nworkdir = \"{{ output-path }}\"\n```\n\n----------------------------------------\n\nTITLE: Building and Running the Spin Application\nDESCRIPTION: Commands to build and start the Spin application that connects to PostgreSQL. After running these commands, the app will be available at http://127.0.0.1:3000/.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/examples/spin-host-apis/spin-postgres/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nspin build\nspin up\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Trigger and Component Settings in TOML\nDESCRIPTION: Defines Redis trigger channel configuration and component build settings for a Spin Framework project. Sets up the WebAssembly component source, build commands, and security constraints.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/templates/redis-ts/metadata/snippets/component.txt#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[[trigger.redis]]\nchannel = \"{{redis-channel}}\"\ncomponent = \"{{project-name | kebab_case}}\"\n\n[component.{{project-name | kebab_case}}]\nsource = \"{{ output-path }}/dist/{{project-name | kebab_case}}.wasm\"\nallowed_outbound_hosts = []\n[component.{{project-name | kebab_case}}.build]\ncommand = \"npm install && npm run build\"\nworkdir = \"{{ output-path }}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SPIN WebAssembly Component with Redis Trigger\nDESCRIPTION: TOML configuration that defines a Redis trigger channel and component settings for a SPIN WebAssembly module. Includes build configuration with NPM commands and workspace settings.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/templates/redis-js/metadata/snippets/component.txt#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[[trigger.redis]]\nchannel = \"{{redis-channel}}\"\ncomponent = \"{{project-name | kebab_case}}\"\n\n[component.{{project-name | kebab_case}}]\nsource = \"{{ output-path }}/dist/{{project-name | kebab_case}}.wasm\"\nallowed_outbound_hosts = []\n[component.{{project-name | kebab_case}}.build]\ncommand = \"npm install && npm run build\"\nworkdir = \"{{ output-path }}\"\n```\n\n----------------------------------------\n\nTITLE: Defining Spin Framework Component Configuration\nDESCRIPTION: TOML configuration that sets up HTTP routing, component source location, and build commands for a Spin WebAssembly application. Uses template variables for dynamic path and project name configuration.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/templates/http-js/metadata/snippets/component.txt#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[[trigger.http]]\nroute = \"{{http-path}}\"\ncomponent = \"{{project-name | kebab_case}}\"\n\n[component.{{project-name | kebab_case}}]\nsource = \"{{ output-path }}/dist/{{project-name | kebab_case}}.wasm\"\nallowed_outbound_hosts = []\n\n[component.{{project-name | kebab_case}}.build]\ncommand = \"npm install && npm run build\"\nworkdir = \"{{ output-path }}\"\n```\n\n----------------------------------------\n\nTITLE: Building and Running Spin Application with Redis\nDESCRIPTION: Commands to build and run a Spin application that uses outbound Redis. The application is built and then started using the Spin CLI.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/examples/spin-host-apis/spin-redis/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nspin build\nspin up\n```\n\n----------------------------------------\n\nTITLE: Building and Running Spin KV Application\nDESCRIPTION: Command to build and run the Spin KV application using the Spin CLI.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/examples/spin-host-apis/spin-kv/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ spin build --up\n```\n\n----------------------------------------\n\nTITLE: Building and Running Spin Application\nDESCRIPTION: Commands to build and start a Spin application locally. Uses the spin CLI to compile and run the application on port 3000.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/examples/spin-host-apis/spin-variables/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nspin build\nspin up\n```\n\n----------------------------------------\n\nTITLE: Building and Running Spin Application with Bash\nDESCRIPTION: This snippet provides the bash commands to build and run the Spin application. It uses the 'spin build' command to compile the application and 'spin up' to start it.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/examples/spin-host-apis/spin-mqtt/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nspin build\nspin up\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Requests to Spin SQLite Server with curl\nDESCRIPTION: This snippet demonstrates how to make an HTTP request to a local Spin SQLite server running on port 3000 using curl from the command line.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/examples/spin-host-apis/spin-sqlite/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Testing Spin KV Operations with cURL\nDESCRIPTION: A series of cURL commands demonstrating how to interact with the Spin KV application. It includes examples of POST, GET, DELETE, and error handling operations.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/examples/spin-host-apis/spin-kv/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -i -X POST -d \"ok\" localhost:3000/test\nHTTP/1.1 200 OK\ncontent-length: 0\ndate: Tue, 25 Apr 2023 14:25:43 GMT\n\n$ curl -i -X GET localhost:3000/test\nHTTP/1.1 200 OK\ncontent-length: 3\ndate: Tue, 25 Apr 2023 14:25:54 GMT\n\nok!\n\n$ curl -i -X DELETE localhost:3000/test\nHTTP/1.1 200 OK\ncontent-length: 0\ndate: Tue, 25 Apr 2023 14:26:30 GMT\n\n$ curl -i -X GET localhost:3000/test\nHTTP/1.1 404 Not Found\ncontent-length: 0\ndate: Tue, 25 Apr 2023 14:31:53 GMT\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for GitHub API Integration\nDESCRIPTION: Installs required npm packages for the project\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/examples/github/octokit-rest/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Building Spin Application\nDESCRIPTION: Commands to install dependencies and build the Spin application.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nspin build\n```\n\n----------------------------------------\n\nTITLE: Creating New Spin TypeScript App\nDESCRIPTION: Command to create a new TypeScript HTTP application using Spin template.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nspin new -t http-ts hello-world -a\n```\n\n----------------------------------------\n\nTITLE: Using CLI Build Tool Options\nDESCRIPTION: Command line interface options for the j2w executable that compiles JavaScript source code to WASM components. Includes options for input/output paths, AOT compilation, and debugging.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/packages/build-tools/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx j2w --help\nOptions:\n      --help     Show help                                             [boolean]\n      --version  Show version number                                   [boolean]\n  -i, --input    Path to the input file                               [required]\n  -o, --output   Path to the output file             [default: \"component.wasm\"]\n      --aot      Enable Ahead of Time compilation                      [boolean]\n  -d, --debug    Enable JavaScript debugging                           [boolean]\n```\n\n----------------------------------------\n\nTITLE: Installing Spin Templates\nDESCRIPTION: Command to install Spin templates from the JS SDK repository.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nspin templates install --update --git https://github.com/fermyon/spin-js-sdk\n```\n\n----------------------------------------\n\nTITLE: Running Spin Application\nDESCRIPTION: Command to start the Spin application server.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nspin up\n```\n\n----------------------------------------\n\nTITLE: Building a Spin Application with TypeScript HTTP Template\nDESCRIPTION: Command to build a Spin application using the TypeScript HTTP template. This compiles the TypeScript code and prepares the application for deployment.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/templates/http-ts/content/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nspin build\n```\n\n----------------------------------------\n\nTITLE: Building a Spin JavaScript Application\nDESCRIPTION: Command to build a JavaScript HTTP application using the Spin framework.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/templates/http-js/content/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nspin build\n```\n\n----------------------------------------\n\nTITLE: Building Spin Application\nDESCRIPTION: Command to build the TypeScript Redis application using Spin framework.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/templates/redis-ts/content/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nspin build\n```\n\n----------------------------------------\n\nTITLE: Building a Spin TypeScript Redis Application\nDESCRIPTION: Command to build the TypeScript Redis application using Spin.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/templates/redis-js/content/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nspin build\n```\n\n----------------------------------------\n\nTITLE: Building and Running Spin Application\nDESCRIPTION: Commands for building and deploying the Spin application with QStash integration. The application will be accessible at localhost:3000.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/examples/upstash/qstash/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nspin build\nspin up\n```\n\n----------------------------------------\n\nTITLE: Running a Spin Application Locally\nDESCRIPTION: Command to start a Spin application locally for testing and development. This launches the HTTP server and makes the application endpoints available.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/templates/http-ts/content/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nspin up\n```\n\n----------------------------------------\n\nTITLE: Running a Spin JavaScript Application\nDESCRIPTION: Command to run a Spin JavaScript application after it has been built.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/templates/http-js/content/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nspin up\n```\n\n----------------------------------------\n\nTITLE: Running a Spin TypeScript Redis Application\nDESCRIPTION: Command to start and run the built Spin application.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/templates/redis-js/content/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nspin up\n```\n\n----------------------------------------\n\nTITLE: Building and Running Spin Application\nDESCRIPTION: Commands for building and running the Spin application. The 'spin build' command compiles the application, and 'spin up' starts the service on the local machine.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/examples/aws/s3/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nspin build\nspin up\n```\n\n----------------------------------------\n\nTITLE: Testing Spin Application\nDESCRIPTION: Command to test the running application using curl.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl -i http://127.0.0.1:3000\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests\nDESCRIPTION: Command to execute integration tests for the SDK packages.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd test\n./test.sh\n```\n\n----------------------------------------\n\nTITLE: Changing to App Directory\nDESCRIPTION: Command to navigate to the newly created application directory.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd hello-world\n```\n\n----------------------------------------\n\nTITLE: MySQL Package Title\nDESCRIPTION: Markdown header and description for the Spin MySQL package, explaining its purpose as MySQL bindings for Spin Framework applications.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/packages/spin-mysql/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Spin MySQL\n\nThis package provides bindings that enable using the Spin MySQL interface in apps built using the `@spinframework/build-tools`.\n```\n\n----------------------------------------\n\nTITLE: Building and Running Spin Project with Bash Commands\nDESCRIPTION: These bash commands are used to build and run the Spin project. The 'spin build' command compiles the project, while 'spin up' starts the application.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/examples/blob-storage/backblaze/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nspin build\nspin up\n```\n\n----------------------------------------\n\nTITLE: Building WIT Tools Component with Cargo\nDESCRIPTION: Command to build the release version of the WIT tools component using Cargo.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/packages/build-tools/crates/wit-tools/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --release\n```\n\n----------------------------------------\n\nTITLE: Running Package Tests\nDESCRIPTION: Command to run the package's WIT dependency parser tests using npm, requiring a Node.js version with native TypeScript support.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/packages/build-tools/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Address for Spin Framework Trigger\nDESCRIPTION: This snippet sets the Redis address for the application trigger in the Spin Framework. It uses a placeholder value that should be replaced with the actual Redis server address during deployment or runtime.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/templates/redis-js/metadata/snippets/application-trigger.txt#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[application.trigger.redis]\naddress = \"{{redis-address}}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Address for Spin Trigger Application\nDESCRIPTION: Configuration snippet that specifies the Redis address parameter for a Spin Framework trigger application. Uses variable substitution for the redis-address value.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/templates/redis-ts/metadata/snippets/application-trigger.txt#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[application.trigger.redis]\naddress = \"{{redis-address}}\"\n```\n\n----------------------------------------\n\nTITLE: Running Spin Application\nDESCRIPTION: Command to start and run the built Spin application.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/templates/redis-ts/content/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nspin up\n```\n\n----------------------------------------\n\nTITLE: Testing GET Request with Header Manipulation\nDESCRIPTION: Example of sending a GET request with a custom header and inspecting the modified response headers.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/examples/common-patterns/routing-requests/README.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n# Specifying the x-spin-demo header and printing response headers\ncurl -i -H 'x-spin-demo:hello spin' localhost:3000/reverse-header-value\n# HTTP/1.1 200 OK\n# x-spin-demo: nips olleh\n# content-length: 0\n# date: Mon, 17 Feb 2025 13:52:52 GMT\n```\n\n----------------------------------------\n\nTITLE: Testing GET Request with Route Parameters to /hello/:name\nDESCRIPTION: Example of sending a GET request to a path with a route parameter, where ':name' is a variable part of the path.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/examples/common-patterns/routing-requests/README.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n# Passing \"Spin\" for the route parameter :name\ncurl localhost:3000/hello/Spin\n# Hello, Spin\n```\n\n----------------------------------------\n\nTITLE: Testing POST Request with JSON Payload\nDESCRIPTION: Example of sending a POST request with a JSON payload to create a new item.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/examples/common-patterns/routing-requests/README.md#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n# Passing a JSON payload\ncurl -XPOST -H 'content-type:application/json' -d '{ \"message\": \"hello\"}' localhost:3000/items\n# Item processed\n```\n\n----------------------------------------\n\nTITLE: Testing GET Request to Root Endpoint\nDESCRIPTION: Example of sending a GET request to the root path (/) and the expected response.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/examples/common-patterns/routing-requests/README.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ncurl localhost:3000/\n# Hello, Fermyon\n```\n\n----------------------------------------\n\nTITLE: Building and Running a Spin Application\nDESCRIPTION: Commands to build and start a Spin application.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/examples/common-patterns/routing-requests/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nspin build\nspin up\n```\n\n----------------------------------------\n\nTITLE: Displaying Current Maintainers Table in Markdown\nDESCRIPTION: This code snippet creates a markdown table listing the current maintainers of the SPIN JavaScript SDK project. It includes their GitHub usernames and real names.\nSOURCE: https://github.com/spinframework/spin-js-sdk/blob/main/MAINTAINERS.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| GitHub Username | Name |\n| --- | --- |\n| Joel Dice | dicej |\n| Karthik Ganeshram | karthik2804 |\n| Radu Matei | radu-matei |\n| Thorsten Hans | ThorstenHans |\n| Till Schneidereit | tschneidereit |\n| Vaughn Dice | vdice |\n```"
  }
]