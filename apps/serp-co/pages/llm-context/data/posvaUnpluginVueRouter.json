[
  {
    "owner": "posva",
    "repo": "unplugin-vue-router",
    "content": "TITLE: Implementing Basic Data Loader in Vue Component\nDESCRIPTION: Example of defining and using a data loader in a Vue component with TypeScript. Shows how to export a loader that fetches user data based on route parameters and access the loaded data in the setup script.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/rfc.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\">\nimport { getUserById } from '../api'\n\nexport const useUserData = defineLoader(async (route) => {\n  const user = await getUserById(route.params.id as string)\n  return user\n})\n\nexport default defineComponent({\n  name: 'custom-name',\n  inheritAttrs: false,\n})\n</script>\n\n<script lang=\"ts\" setup>\nconst { data: user, isLoading, error, reload } = useUserData()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing TypeScript-aware Data Loaders\nDESCRIPTION: This snippet shows how to use TypeScript with data loaders, leveraging type inference for route parameters and returned data. It demonstrates the usage of defineLoader with route-specific type hints.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/rfc.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n<script lang=\"ts\">\n// ---cut-start---\nimport 'unplugin-vue-router/client'\nimport './typed-router.d'\nimport { defineBasicLoader as defineLoader } from 'unplugin-vue-router/data-loaders/basic'\n// ---cut-end---\nimport { getUserById } from '../api'\n\nexport const useUserData = defineLoader('/users/[id]', async (route) => {\n  //                                              ^|\n\n  //\n  const user = await getUserById(route.params.id)\n  //                                          ^|\n  // ...\n  return user\n})\n</script>\n\n<script lang=\"ts\" setup>\nconst { data: user, isLoading, error } = useUserData()\n//            ^?\n//            👆 hover or tap\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing DataLoaderPlugin in Vue Router Application\nDESCRIPTION: This snippet demonstrates how to install and configure the DataLoaderPlugin in a Vue application using unplugin-vue-router. It shows the setup process including importing necessary modules, creating a router instance, and registering the plugin before the router.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/index.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp } from 'vue'\nimport { routes } from 'vue-router/auto-routes'\nimport { createRouter, createWebHistory } from 'vue-router'\nimport { DataLoaderPlugin } from 'unplugin-vue-router/data-loaders' // [!code ++]\n\nconst router = createRouter({\n  history: createWebHistory(),\n  routes,\n})\n\nconst app = createApp({})\n// Register the plugin before the router\napp.use(DataLoaderPlugin, { router }) // [!code ++]\n// adding the router will trigger the initial navigation\napp.use(router)\napp.mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Loader in Vue Component\nDESCRIPTION: This code snippet illustrates how to define and use a data loader in a Vue component. It shows the implementation of a basic loader using defineBasicLoader, and demonstrates how to handle loading states, errors, and data in the component template.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/index.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\">\nimport { defineBasicLoader } from 'unplugin-vue-router/data-loaders/basic'\nimport { getUserById } from '../api'\n\nexport const useUserData = defineBasicLoader('/users/[id]', async (route) => {\n  return getUserById(route.params.id)\n})\n</script>\n\n<script setup lang=\"ts\">\nconst {\n  data: user, // the data returned by the loader\n  isLoading, // a boolean indicating if the loader is fetching data\n  error, // an error object if the loader failed\n  reload, // a function to refetch the data without navigating\n} = useUserData()\n</script>\n\n<template>\n  <main>\n    <p v-if=\"isLoading\">Loading...</p>\n    <template v-else-if=\"error\">\n      <p>{{ error.message }}</p>\n      <button @click=\"reload()\">Retry</button>\n    </template>\n    <template v-else>\n      <p>{{ user }}</p>\n    </template>\n  </main>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Data Loader in Vue\nDESCRIPTION: Demonstrates how to define a basic data loader using defineBasicLoader and use it in a Vue component. The loader fetches user data based on the route parameter.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/defining-loaders.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\">\nimport 'unplugin-vue-router/client'\nimport './typed-router.d'\nimport { defineBasicLoader } from 'unplugin-vue-router/data-loaders/basic'\nimport { getUserById } from '../api'\n\nexport const useUserData = defineBasicLoader('/users/[id]', async (to) => {\n  return getUserById(to.params.id)\n})\n</script>\n\n<script setup lang=\"ts\">\nconst {\n  data: user, // the data returned by the loader\n  isLoading, // a boolean indicating if the loader is fetching data\n  error, // an error object if the loader failed\n  reload, // a function to refetch the data without navigating\n} = useUserData()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing User Data Loading with Pinia Colada in Vue\nDESCRIPTION: Complete example showing how to implement a data loader for user information using defineColadaLoader. Demonstrates query setup, route parameters handling, and UI integration with loading states and navigation controls.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/colada/index.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\">\nimport { defineColadaLoader } from 'unplugin-vue-router/data-loaders/pinia-colada'\nimport { getUserById } from '../api'\n\nexport const useUserData = defineColadaLoader({\n  async query(to, { signal }) {\n    return getUserById(to.params.id, { signal })\n  },\n  key: (to) => ['users', to.params.id],\n  // Keep the data \"fresh\" 10 seconds to avoid fetching the same data too often\n  staleTime: 10000,\n})\n</script>\n\n<script lang=\"ts\" setup>\nconst route = useRoute('/users/[id]')\n\nconst {\n  user,\n  status,\n  error\n  isLoading,\n  reload,\n  refresh,\n} = useUserData()\n</script>\n\n<template>\n  <main>\n    <h1>Pinia Colada Loader Example</h1>\n    <pre>User: {{ route.params.id }}</pre>\n\n    <fieldset>\n      <legend>Controls</legend>\n\n      <button @click=\"refresh()\">Refresh</button>\n      <button @click=\"reload()\">Refetch</button>\n    </fieldset>\n\n    <RouterLink :to=\"{ params: { id: Number(route.params.id) || 0 - 1 } }\">\n      Previous\n    </RouterLink>\n    |\n    <RouterLink :to=\"{ params: { id: Number(route.params.id) || 0 + 1 } }\">\n      Next\n    </RouterLink>\n\n    <h2>State</h2>\n\n    <p>\n      <code>status: {{ status }}</code>\n      <br />\n      <code>isLoading: {{ isLoading }}</code>\n    </p>\n    <pre v-if=\"error\">Error: {{ error }}</pre>\n    <pre v-else>{{ user == null ? String(user) : user }}</pre>\n  </main>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Migrating existing Vue Router configuration to unplugin-vue-router\nDESCRIPTION: Code snippet showing the changes required to migrate an existing Vue Router configuration to use unplugin-vue-router. It demonstrates the modifications in the router.ts file.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/introduction.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRouter, createWebHistory } from 'vue-router'\nimport { routes, handleHotUpdate } from 'vue-router/auto-routes'\n\nexport const router = createRouter({\n  history: createWebHistory(),\n  routes,\n})\n\n// This will update routes at runtime without reloading the page\nif (import.meta.hot) {\n  handleHotUpdate(router)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Standalone Data Loader in TypeScript\nDESCRIPTION: Example of defining a reusable data loader in a separate TypeScript file using defineBasicLoader from unplugin-vue-router. The loader fetches project issues based on a project ID parameter.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/organization.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineBasicLoader } from 'unplugin-vue-router/data-loaders/basic'\nimport { getIssuesByProjectId } from '@/api'\n\nexport const useProjectIssues = defineBasicLoader('/[projectId]/issues', (to) =>\n  getIssuesByProjectId(to.params.projectId)\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Router with Data Loaders\nDESCRIPTION: Example showing how to configure Vue Router with data loaders, including both eager and lazy-loaded routes with their associated loaders.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/rfc.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const router = createRouter({\n  history: createWebHistory(),\n  routes: [\n    {\n      path: '/users',\n      component: UserList,\n      meta: {\n        loaders: [useUserList],\n      },\n    },\n    {\n      path: '/users/:id',\n      component: () => import('./pages/UserDetails.vue'),\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring unplugin-vue-router with Default Options in TypeScript\nDESCRIPTION: Complete configuration example for unplugin-vue-router showing all available options with their default values. This includes route folder configuration, file patterns, naming strategies, and extension hooks.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/guide/configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @moduleResolution: bundler\nimport VueRouter from 'unplugin-vue-router/vite'\n\nVueRouter({\n  // how and what folders to scan for files\n  routesFolder: [\n    {\n      src: 'src/pages',\n      path: '',\n      // override globals\n      exclude: (excluded) => excluded,\n      filePatterns: (filePatterns) => filePatterns,\n      extensions: (extensions) => extensions,\n    },\n  ],\n\n  // what files should be considered as a pages\n  extensions: ['.vue'],\n\n  // what files to include\n  filePatterns: ['**/*'],\n\n  // files to exclude from the scan\n  exclude: [],\n\n  // where to generate the types\n  dts: './typed-router.d.ts',\n\n  // how to generate the route name\n  getRouteName: (routeNode) => getFileBasedRouteName(routeNode),\n\n  // default language for <route> custom blocks\n  routeBlockLang: 'json5',\n\n  // how to import routes, can also be a string\n  importMode: 'async',\n\n  // where are paths relative to\n  root: process.cwd(),\n\n  // options for the path parser\n  pathParser: {\n    // should `users.[id]` be parsed as `users/:id`?\n    dotNesting: true,\n  },\n\n  // modify routes individually\n  async extendRoute(route) {\n    // ...\n  },\n\n  // modify routes before writing\n  async beforeWriteFiles(rootRoute) {\n    // ...\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Generated Routes in Vue Router Configuration\nDESCRIPTION: Example of how to import and use the generated routes in a Vue Router configuration.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/README.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRouter, createWebHistory } from 'vue-router'\nimport { routes } from 'vue-router/auto-routes'\n\ncreateRouter({\n  history: createWebHistory(),\n  // pass the generated routes written by the plugin 🤖\n  routes,\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up Vue Router with unplugin-vue-router from scratch\nDESCRIPTION: Code snippet demonstrating how to set up Vue Router using unplugin-vue-router in a new project. It shows the configuration in the main.ts file.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/introduction.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp } from 'vue'\nimport { createRouter, createWebHistory } from 'vue-router'\nimport { routes } from 'vue-router/auto-routes'\nimport App from './App.vue'\n\nconst router = createRouter({\n  history: createWebHistory(),\n  routes,\n})\n\ncreateApp(App)\n  .use(router)\n  .mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Implementing AbortSignal in Data Loaders\nDESCRIPTION: This snippet demonstrates how to use AbortSignal in data loaders to handle navigation cancellation. It shows how to pass the AbortSignal to fetch or other Web APIs to abort requests when navigation is cancelled.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/rfc.md#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport const useBookCollection = defineLoader(async (_route, { signal }) => {\n  return fetchBookCollection({ signal })\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Data Loader\nDESCRIPTION: Shows how to define a basic data loader with route parameter typing. The loader fetches user data based on URL parameters.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/rfc.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getUserById } from '../api'\n\nexport const useUserData = defineLoader('/users/[id]', async (route) => {\n  return getUserById(route.params.id)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Data Loaders in TypeScript with unplugin-vue-router\nDESCRIPTION: This snippet demonstrates how to implement nested data loaders using unplugin-vue-router. It shows the creation of multiple loaders that can depend on each other, highlighting the automatic invalidation and single-call efficiency.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/rfc.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  getFriends,\n  getCommonFriends,\n  getUserById,\n  getCurrentUser,\n} from './api'\n\nexport const useUserData = defineLoader('/users/[id]', async (route) => {\n  return getUserById(route.params.id)\n})\n\nexport const useCurrentUserData = defineLoader('/users/[id]', async (route) => {\n  const me = await getCurrentUser()\n  // imagine legacy APIs that cannot be grouped into one single fetch\n  const friends = await getFriends(me.id)\n\n  return { ...me, friends }\n})\n\nexport const useUserCommonFriends = defineLoader(\n  '/users/[id]',\n  async (route) => {\n    const user = await useUserData()\n    const me = await useCurrentUserData()\n\n    const friends = await getCommonFriends(user.id, me.id)\n    return { ...me, commonFriends: { with: user, friends } }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing DataLoaderPlugin with Vue Router\nDESCRIPTION: Demonstrates how to set up the DataLoaderPlugin with Vue Router instance. The plugin must be added before the router to ensure proper navigation guard attachment.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/rfc.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp } from 'vue'\nimport { createRouter } from 'vue-router'\nimport { DataLoaderPlugin } from 'unplugin-vue-router/data-loaders'\n\nconst router = createRouter({\n  // ...\n})\n\nconst app = createApp(App)\napp.use(DataLoaderPlugin, { router })\n// add the router after the DataLoaderPlugin\napp.use(router)\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Typed Routes in TypeScript\nDESCRIPTION: This code demonstrates how to import the necessary types and use them with vue-router. It shows type-safe route pushing with autocompletion.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/guide/typescript.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// ---cut-start---\nimport 'unplugin-vue-router/client'\nimport './typed-router.d'\n// ---cut-end---\n// @moduleResolution: bundler\nimport { useRouter, useRoute } from 'vue-router'\nconst router = useRouter()\nrouter.push('')\n//           ^|\n```\n\n----------------------------------------\n\nTITLE: Manually Connecting a Loader in Vue Router Configuration\nDESCRIPTION: This snippet demonstrates how to manually connect a loader to a route by importing the component and its loader, then adding the loader to the meta.loaders property of the route.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/defining-loaders.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRouter, createWebHistory } from 'vue-router'\nimport Settings, { useSettings } from './settings.vue'\n\nexport const router = createRouter({\n  history: createWebHistory(),\n  routes: [\n    {\n      path: '/settings',\n      component: Settings,\n      meta: {\n        loaders: [useSettings],\n      },\n    }\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Parametrized Data Fetching with Suspense in Vue Route Components\nDESCRIPTION: Vue component example showing how to fetch user data based on route parameters using Suspense. It demonstrates handling navigation updates by implementing the onBeforeRouteUpdate hook.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/rfc.md#2025-04-21_snippet_20\n\nLANGUAGE: vue\nCODE:\n```\n<!-- src/pages/users.[id].vue = /users/:id -->\n<!-- Displays a list of all users -->\n<script setup>\nconst route = useRoute()\nconst user = shallowRef(await fetchUserData(route.params.id))\n\n// manually expose a reload function to be called whenever needed\nfunction reload() {\n  user.value = await fetchUserData(route.params.id)\n}\n\n// hook into navigation instead of a watcher because we want to block the navigation\nonBeforeRouteUpdate(async (to) => {\n  // note how we need to use `to` and not `route` here\n  user.value = await fetchUserData(to.params.id)\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Non-blocking Data Fetching in Vue\nDESCRIPTION: This snippet demonstrates how to implement lazy loaders for non-blocking data fetching. It uses the lazy option to allow navigation to proceed while data is being fetched, useful for non-critical data.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/rfc.md#2025-04-21_snippet_17\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\">\n// ---cut-start---\nimport 'unplugin-vue-router/client'\nimport './typed-router.d'\nimport { defineBasicLoader as defineLoader } from 'unplugin-vue-router/data-loaders/basic'\n// ---cut-end---\nimport { getUserById } from '../api'\n\nexport const useUserData = defineLoader(\n  '/users/[id]',\n  async (route) => {\n    const user = await getUserById(route.params.id)\n    return user\n  },\n  { lazy: true } // 👈  marked as lazy\n)\n</script>\n\n<script setup>\n// Differently from the example above, `user.value` can and will be initially `undefined`\nconst { data: user, isLoading, error } = useUserData()\n//            ^?\n//            👆 hover or tap\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using withContext for Non-Loader Async Operations in unplugin-vue-router\nDESCRIPTION: Example showing the correct way to handle non-loader promises within a loader function. The withContext wrapper ensures the loader context is properly maintained when mixing loaders with other async operations.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/nested-loaders.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const useUserCommonFriends = defineBasicLoader(async (route) => {\n  const user = await useUserData()\n  await withContext(functionThatReturnsAPromise())\n  const me = await useCurrentUserData()\n\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Defining and Exporting a Loader in a Vue Component\nDESCRIPTION: This Vue component defines and exports a loader using defineBasicLoader. The loader is automatically connected to the '/settings' route when the component is lazy-loaded.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/defining-loaders.md#2025-04-21_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\">\nimport { getSettings } from './api'\nexport const useSettings = defineBasicLoader('/settings', async (to) =>\n  getSettings()\n)\n</script>\n\n<script lang=\"ts\" setup>\nconst { data: settings } = useSettings()\n</script>\n<!-- ...rest of the component -->\n```\n\n----------------------------------------\n\nTITLE: Handling Navigation Control in Data Loaders with TypeScript\nDESCRIPTION: This code snippet illustrates how to control navigation within a data loader, including handling errors, redirections, and navigation cancellation using the NavigationResult class from vue-router.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/rfc.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NavigationResult } from 'vue-router'\n\nexport const useUserData = defineLoader(\n  async (to) => {\n    try {\n      const user = await getUserById(to.params.id)\n\n      return user\n    } catch (error) {\n      if (error.status === 404) {\n        return new NavigationResult({ name: 'not-found', params: { pathMatch: '' } }\n        )\n      } else {\n        throw error // aborts the vue router navigation\n      }\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Extending Routes in Configuration using TypeScript\nDESCRIPTION: Demonstrates how to use the extendRoute and beforeWriteFiles options in the VueRouter configuration to modify routes at build time. This includes adding aliases and inserting new routes.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/guide/extending-routes.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nVueRouter({\n  extendRoute(route) {\n    if (route.name === '/[name]') {\n      route.addAlias('/hello-vite-:name')\n    }\n  },\n\n  beforeWriteFiles(root) {\n    root.insert('/from-root', path.join(__dirname, './src/pages/index.vue'))\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Sequential Data Loader with Dependencies in TypeScript\nDESCRIPTION: Advanced implementation of a data loader that depends on another loader. This pattern allows composition of data loaders but is less ergonomic than direct nesting.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/rfc.md#2025-04-21_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useUserData } from '~/pages/users/[id].vue'\n\nexport const useUserFriends = defineLoader(\n  async (route, { loaders: [userData] }) => {\n    const friends = await getFriends(user.value.id)\n    return { ...userData.value, friends }\n  },\n  {\n    // explicit dependencies\n    waitFor: [useUserData],\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Using Data Loader Composables\nDESCRIPTION: Demonstrates how to use data loader composables and their returned properties including data, loading state, error handling and reload functionality.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/rfc.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst {\n  data,\n  isLoading,\n  error,\n  reload,\n} = useUserData()\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Data Loaders in Project Insights Page\nDESCRIPTION: Vue component showing how to use multiple loaders in a single page component, demonstrating loader composition and data fetching.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/organization.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\">\nimport { useProjectIssues } from '@/loaders/issues'\nimport { useProjectPullRequests } from '@/loaders/pull-requests'\nexport { useProjectIssues, useProjectPullRequests }\n</script>\n\n<script setup lang=\"ts\">\nconst { data: issues } = useProjectIssues()\nconst { data: pullRequests } = useProjectPullRequests()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining User Data Loader with Basic Loader\nDESCRIPTION: Shows how to define a user data loader using defineBasicLoader. The loader function uses the 'to' parameter to fetch user data based on the route ID.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/defining-loaders.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const useUserData = defineBasicLoader('/users/[id]', async (to) => {\n  const user = await getUserById(to.params.id)\n  // here we can modify the data before returning it\n  return user\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Expected Errors in DataLoaderPlugin for Vue Router\nDESCRIPTION: This code snippet shows how to set up global expected errors for all data loaders using the DataLoaderPlugin. It demonstrates configuring the plugin with a custom error class to be treated as an expected error across all loaders.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/error-handling.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(DataLoaderPlugin, {\n  router,\n  // checks with `instanceof MyError`\n  errors: [MyError],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing HMR for Vue Router in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up Hot Module Replacement for Vue Router in a Vite project. It imports necessary functions, creates a router instance, and adds HMR handling.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/guide/hmr.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRouter, createWebHistory } from 'vue-router'\nimport {\n  routes,\n  handleHotUpdate, // [!code ++]\n} from 'vue-router/auto-routes'\n\nexport const router = createRouter({\n  history: createWebHistory(),\n  routes,\n})\n\n// This will update routes at runtime without reloading the page\nif (import.meta.hot) { // [!code ++]\n  handleHotUpdate(router) // [!code ++]\n} // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Controlling Navigation in Data Loader\nDESCRIPTION: Shows how to control navigation within a data loader by returning a NavigationResult object. This example redirects to the login page if an unauthorized error occurs.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/defining-loaders.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NavigationResult } from 'unplugin-vue-router/data-loaders'\n\nconst useDashboardStats = defineBasicLoader('/admin', async (to) => {\n  try {\n    return await getDashboardStats()\n  } catch (err) {\n    if (err.code === 401) {\n      // same as returning '/login' in a navigation guard\n      return new NavigationResult('/login')\n    }\n    throw err // unexpected error\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Eager Navigation Changes in TypeScript\nDESCRIPTION: This snippet demonstrates how to eagerly alter navigation in a data loader by throwing a NavigationResult. This approach skips selectNavigationResult() and takes precedence without triggering router.onError().\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/rfc.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NavigationResult } from 'unplugin-vue-router/data-loaders'\n\nexport const useUserData = defineLoader(\n  async (to) => {\n    try {\n      const user = await getUserById(to.params.id)\n\n      return user\n    } catch (error) {\n      throw new NavigationResult({\n        name: 'not-found',\n        params: { pathMatch: to.path.split('/') },\n        query: to.query,\n        hash: to.hash,\n      })\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Typed Route Configuration for defineColadaLoader\nDESCRIPTION: Example showing how to use typed routes with defineColadaLoader by passing a route name parameter for better TypeScript support.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/colada/index.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const useUserData = defineColadaLoader('/users/[id]', {\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Data Loader with Caching in TypeScript\nDESCRIPTION: This snippet demonstrates how to implement a basic data loader with a caching key using unplugin-vue-router. It fetches a book collection and assigns a cache key for potential SSR optimizations.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/rfc.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport const useBookCollection = defineLoader(\n  async () => {\n    const books = await fetchBookCollection()\n    return books\n  },\n  { key: 'bookCollection' }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Data Loaders Plugin for Nuxt with unplugin-vue-router\nDESCRIPTION: This code snippet demonstrates how to create a Nuxt plugin for setting up the Data Loaders plugin from unplugin-vue-router. It includes the necessary import, plugin definition, and configuration options.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/nuxt.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// plugins/data-loaders.ts\nimport { DataLoaderPlugin } from 'unplugin-vue-router/data-loaders'\n\nexport default defineNuxtPlugin({\n  name: 'data-loaders',\n  dependsOn: ['nuxt:router'],\n  setup(nuxtApp) {\n    const appConfig = useAppConfig()\n\n    nuxtApp.vueApp.use(DataLoaderPlugin, {\n      router: nuxtApp.vueApp.config.globalProperties.$router,\n      isSSR: import.meta.server,\n      // other options...\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Generic Data Loader Creation Pattern\nDESCRIPTION: Demonstrates the creation of a generic data loader with type parameters for expected arguments, options, and context. Includes async loading logic and dependency collection.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/src/data-loaders/tests-defineLoader.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst dl = createDataLoader<ExpectedArgs, Options = Base, ContextType = Base>({\n  createEntry: (context, ...ExpectedArgs) => {\n  },\n  load: async (entry, context, ...ExpectedArgs) => {\n    if (entry.isDirty) {\n      await loader({\n        ...context,\n      })\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Loader in a Vue Component for Manual Connection\nDESCRIPTION: This Vue component defines and exports a loader, which can be manually connected to a route in the router configuration. The component uses the loader in its setup script.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/defining-loaders.md#2025-04-21_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\">\nimport { getSettings } from './api'\nexport const useSettings = defineBasicLoader('/settings', async (to) =>\n  getSettings()\n)\n</script>\n\n<script lang=\"ts\" setup>\nconst { data: settings } = useSettings()\n</script>\n<!-- ...rest of the component -->\n```\n\n----------------------------------------\n\nTITLE: Defining Expected Errors in TypeScript for unplugin-vue-router Data Loader\nDESCRIPTION: This snippet demonstrates how to define a custom error class and use it in a data loader to specify expected errors. It uses the defineBasicLoader function from unplugin-vue-router and sets up error handling options.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/error-handling.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineBasicLoader } from 'unplugin-vue-router/data-loaders/basic'\n// custom error class\nclass MyError extends Error {\n  // override is only needed in TS\n  override name = 'MyError' // Displays in logs instead of 'Error'\n  // defining a constructor is optional\n  constructor(message: string) {\n    super(message)\n  }\n}\n\nexport const useUserData = defineBasicLoader(\n  async (to) => {\n    throw new MyError('Something went wrong')\n    // ...\n  },\n  {\n    errors: [MyError],\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Immediate Data Commit\nDESCRIPTION: Shows how to configure a data loader to immediately update data as soon as it's available, rather than waiting for all loaders to resolve.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/defining-loaders.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport const useBookCollection = defineBasicLoader(fetchBookCollection, {\n  commit: 'immediate',\n})\n```\n\n----------------------------------------\n\nTITLE: Optimizing Server-Side Data Loading\nDESCRIPTION: Demonstrates how to optimize server-side rendering by skipping certain data loaders during SSR using the 'server' option.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/defining-loaders.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport const useRelatedBooks = defineBasicLoader(\n  (to) => fetchRelatedBooks(to.params.id),\n  { server: false }\n)\n```\n\n----------------------------------------\n\nTITLE: Mixed Awaited and Non-Awaited Data in TypeScript Loaders\nDESCRIPTION: Example of a data loader that returns both awaited (critical) and non-awaited (non-critical) data. This demonstrates how loaders can handle different data loading priorities.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/rfc.md#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nexport const useUserData = defineLoader(async (route) => {\n  return {\n    // awaited\n    user: await getUserById(route.params.id)\n    // not awaited, like lazy\n    nonCriticalData: getNonCriticalData() // Promise<...>\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Loaders with useUserData in unplugin-vue-router\nDESCRIPTION: Example showing how to import and await another loader within a data loader. The useUserCommonFriends loader depends on useUserData and combines it with additional API calls to provide enhanced user information.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/nested-loaders.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// import the loader for user information\nimport { useUserData } from './loaders/users'\nimport { getCommonFriends, getCurrentUser } from './api'\n\nexport const useUserCommonFriends = defineBasicLoader(async (route) => {\n  // loaders must be awaited inside other loaders\n  // .        ⤵\n  const user = await useUserData()\n\n  // fetch other data\n  const me = await getCurrentUser()\n  const commonFriends = await getCommonFriends(me.id, user.id)\n  return { ...user, commonFriends }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic File Structure Example for Vue Router\nDESCRIPTION: Example folder structure showing basic route organization with corresponding route mappings\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/guide/file-based-routing.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsrc/pages/\n├── index.vue\n├── about.vue\n└── users/\n    ├── index.vue\n    └── [id].vue\n```\n\n----------------------------------------\n\nTITLE: Using Data Loader in Non-Page Component\nDESCRIPTION: Example of using a data loader in a regular Vue component, showing how loaders can be reused throughout the application.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/organization.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n// You can even import it from the page component\nimport { useProjectIssues } from '@/pages/[projectId]/issues.vue'\n\nconst { data: issues } = useProjectIssues()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Script Loader Syntax Proposal for Vue Components\nDESCRIPTION: A proposed alternative syntax for Vue components using a dedicated 'script loader' block to define data fetching logic. This approach would make the data available to the component's setup function.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/rfc.md#2025-04-21_snippet_23\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" loader=\"useUserData\">\nimport { getUserById } from '~/api/users'\nimport { useRoute } from 'vue-router' // could be automatically imported\n\nconst route = useRoute()\n// any variable created here is available in useLoader()\nconst user = await getUserById(route.params.id)\n</script>\n\n<script lang=\"ts\" setup>\nconst { user, isLoading, error } = useUserData()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Cancellable Data Loader in Vue Router with TypeScript\nDESCRIPTION: This snippet demonstrates how to create a cancellable data loader for fetching a book collection using the defineBasicLoader function from unplugin-vue-router. It utilizes the AbortSignal to allow cancellation of the fetch request when navigation is aborted.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/load-cancellation.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Book {\n  title: string\n  isbn: string\n  description: string\n}\nfunction fetchBookCollection(options: {\n  signal?: AbortSignal\n}): Promise<Book[]> {\n  return {} as any\n}\n\nimport { defineBasicLoader } from 'unplugin-vue-router/data-loaders/basic'\nexport const useBookCollection = defineBasicLoader(\n  async (_route, { signal }) => {\n    return fetchBookCollection({ signal })\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring VueRouter plugin in Vite\nDESCRIPTION: Configuration snippet for adding the VueRouter plugin to a Vite project. It shows how to import and use the plugin in the Vite configuration file.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/introduction.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport VueRouter from 'unplugin-vue-router/vite'\n\nexport default defineConfig({\n  plugins: [\n    VueRouter({\n      /* options */\n    }),\n    // ⚠️ Vue must be placed after VueRouter()\n    Vue(),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring VueRouter Plugin in Vite\nDESCRIPTION: Example of how to add the VueRouter plugin to a Vite configuration file. The plugin must be placed before the Vue plugin.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// vite.config.ts\nimport VueRouter from 'unplugin-vue-router/vite'\n\nexport default defineConfig({\n  plugins: [\n    VueRouter({\n      /* options */\n    }),\n    // ⚠️ Vue must be placed after VueRouter()\n    Vue(),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue Router with Lazy-Loaded Component\nDESCRIPTION: This snippet shows how to set up a Vue Router with a lazy-loaded component for the '/settings' route. The loader for this route will be automatically connected if exported from the component.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/defining-loaders.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRouter, createWebHistory } from 'vue-router'\n\nexport const router = createRouter({\n  history: createWebHistory(),\n  routes: [\n    {\n      path: '/settings',\n      component: () => import('./settings.vue'),\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Sequential Data Fetching\nDESCRIPTION: Shows how to implement sequential data fetching by awaiting other loaders within a loader function, ensuring dependent data is fetched in the correct order.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/rfc.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useUserData } from './loaders/users'\nimport { getCommonFriends, getCurrentUser } from './api'\n\nexport const useUserCommonFriends = defineLoader(async (route) => {\n  const user = await useUserData()\n  const me = await getCurrentUser()\n\n  const commonFriends = await getCommonFriends(me.id, user.id)\n  return { ...user, commonFriends }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring VueRouter Plugin in Rollup\nDESCRIPTION: Example of how to add the VueRouter plugin to a Rollup configuration file. The plugin must be placed before the Vue plugin.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// rollup.config.js\nimport VueRouter from 'unplugin-vue-router/rollup'\n\nexport default {\n  plugins: [\n    VueRouter({\n      /* options */\n    }),\n    // ⚠️ Vue must be placed after VueRouter()\n    Vue(),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VueRouter plugin in Rollup\nDESCRIPTION: Configuration snippet for adding the VueRouter plugin to a Rollup project. It demonstrates how to import and use the plugin in the Rollup configuration file.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/introduction.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport VueRouter from 'unplugin-vue-router/rollup'\n\nexport default {\n  plugins: [\n    VueRouter({\n      /* options */\n    }),\n    // ⚠️ Vue must be placed after VueRouter()\n    Vue(),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Error Handling Function in DataLoaderPlugin\nDESCRIPTION: This code demonstrates how to provide a custom error handling function to the DataLoaderPlugin. The function allows for more granular control over which errors are considered expected, based on custom logic.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/error-handling.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(DataLoaderPlugin, {\n  router,\n  errors: (error) => {\n    // Convention for custom errors\n    if (error instanceof Error && error.name?.startsWith('My')) {\n      return true\n    }\n    return false // unexpected error\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Controlling Navigation with NavigationResult in Vue Router\nDESCRIPTION: Example showing how to use NavigationResult class to control navigation flow in a data loader, including handling invalid IDs and error cases with redirects.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/navigation-aware.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NavigationResult } from 'unplugin-vue-router/data-loaders'\nimport { defineBasicLoader } from 'unplugin-vue-router/data-loaders/basic'\n\nexport const useUserData = defineBasicLoader(\n  async (to) => {\n    // cancel the navigation for invalid IDs\n    if (isInvalidId(to.params.id)) {\n      return new NavigationResult(false)\n    }\n\n    try {\n      const user = await getUserById(to.params.id)\n\n      return user\n    } catch (error) {\n      if (error.status === 404) {\n        return new NavigationResult({ name: 'not-found' })\n      } else {\n        throw error // aborts the router navigation\n      }\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring VueRouter plugin in esbuild\nDESCRIPTION: Configuration snippet for adding the VueRouter plugin to an esbuild project. It shows how to import and use the plugin in the esbuild configuration file.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/introduction.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { build } from 'esbuild'\nimport VueRouter from 'unplugin-vue-router/esbuild'\n\nbuild({\n  plugins: [VueRouter()],\n})\n```\n\n----------------------------------------\n\nTITLE: Returning Object Properties from Data Loaders in TypeScript\nDESCRIPTION: TypeScript example of an alternative data loader implementation that returns an object of properties. This contrasts with the simpler approach of returning a single value.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/rfc.md#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nexport const useUserData = defineLoader(async (route) => {\n  const user = await getUserById(route.params.id)\n  // instead of return user\n  return { user }\n})\n// instead of const { data: user } = useUserData()\nconst { user } = useUserData()\n```\n\n----------------------------------------\n\nTITLE: Defining Query Loaders for Vue Apollo\nDESCRIPTION: Examples of using defineQueryLoader with Vue Apollo, showing both a simple query and a parameterized query based on route information.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/src/data-loaders/defineLoader-notes.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst useTodos = defineQueryLoader(fetchTodoList, {\n  // the key seems to be inferred automatically\n})\n\nconst useContact = defineQueryLoader(fetchContact, (to) => {\n  id: to.params.id\n})\n```\n\n----------------------------------------\n\nTITLE: Using Global Properties in Data Loader\nDESCRIPTION: Demonstrates how to use global properties like inject and store functions within a data loader. It highlights the importance of using inject before any await statements.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/defining-loaders.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inject } from 'vue'\nimport { useSomeStore, useOtherStore } from '@/stores'\n\nexport const useUserData = defineBasicLoader('/users/[id]', async (to) => {\n  // ✅ This will work\n  const injectedValue = inject('key')\n  const store = useSomeStore()\n\n  const user = await getUserById(to.params.id)\n  // ❌ These won't work\n  const injectedValue2 = inject('key-2')\n  const store2 = useOtherStore()\n  // ...\n  return user\n})\n```\n\n----------------------------------------\n\nTITLE: Using Type Params with Route Location Types in TypeScript\nDESCRIPTION: This snippet illustrates how to use type params with generic route location types to narrow down the type of the route. It shows different methods of achieving type-safe route access, including casting, type params, and direct path usage.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/guide/typescript.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// ---cut-start---\nimport 'unplugin-vue-router/client'\nimport './typed-router.d'\nimport { useRoute, type RouteLocationNormalizedLoaded } from 'vue-router'\n// ---cut-end---\n// @errors: 2322 2339\n// @moduleResolution: bundler\n// these are all valid\nconst userWithIdCasted = useRoute() as RouteLocationNormalizedLoaded<'/users/[id]'>\nuserWithIdCasted.params.id\nconst userWithIdTypeParam = useRoute<'/users/[id]'>()\nuserWithIdTypeParam.params.id\n// 👇 this one is the easiest to write because it autocompletes\nconst userWithIdParam = useRoute('/users/[id]')\nuserWithIdParam.params\n//              ^?\n```\n\n----------------------------------------\n\nTITLE: Route Properties Destructuring in TypeScript Loaders\nDESCRIPTION: Example of destructuring route properties directly in the loader parameter, which simplifies access to specific route data but limits type safety with route names.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/rfc.md#2025-04-21_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getUserById } from '../api'\n\nexport const useUserData = defineLoader(async ({ params }) => {\n  const user = await getUserById(params.id)\n  return { user }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Lazy Loading Based on Environment\nDESCRIPTION: Shows how to configure lazy loading for a data loader based on the environment, specifically differentiating between SSR and client-side navigation.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/defining-loaders.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const useUserData = defineBasicLoader(\n  async (to) => {\n    // ...\n  },\n  {\n    lazy: !import.meta.env.SSR, // Vite specific\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Complex Nested Loaders with Multiple Dependencies in unplugin-vue-router\nDESCRIPTION: Advanced example demonstrating multiple interdependent loaders. Shows how useUserCommonFriends depends on both useUserData and useCurrentUserData, with each loader handling specific API calls while maintaining efficient data sharing.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/nested-loaders.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  getFriends,\n  getCommonFriends,\n  getUserById,\n  getCurrentUser,\n} from './api'\n\nexport const useUserData = defineBasicLoader('/users/[id]', async (route) => {\n  return getUserById(route.params.id)\n})\n\nexport const useCurrentUserData = defineBasicLoader(\n  '/users/[id]',\n  async (route) => {\n    const me = await getCurrentUser()\n    // imagine legacy APIs that cannot be grouped into one single fetch\n    const friends = await getFriends(me.id)\n\n    return { ...me, friends }\n  }\n)\n\nexport const useUserCommonFriends = defineBasicLoader(\n  '/users/[id]',\n  async (route) => {\n    const user = await useUserData()\n    const me = await useCurrentUserData()\n\n    const friends = await getCommonFriends(user.id, me.id)\n    return { ...me, commonFriends: { with: user, friends } }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Firestore Loaders for VueFire\nDESCRIPTION: Examples of using defineFirestoreLoader with VueFire, demonstrating two ways to define a loader for fetching a user profile from Firestore.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/src/data-loaders/defineLoader-notes.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst useUserProfile = defineFirestoreLoader(to => ['users', to.params.id])\nconst useUserProfile = defineFirestoreLoader(to => doc(useFirestore(), 'users', to.params.id)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Vue Query Usage in Vue Component\nDESCRIPTION: Example of using Vue Query's useQuery hook in a Vue component setup script to fetch a list of todos.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/src/data-loaders/defineLoader-notes.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { useQuery } from 'vue-query'\n\nfunction useTodosQuery() {\n  return useQuery('todos', fetchTodoList)\n}\n\nconst { isLoading, isError, data, error } = useTodosQuery()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring tsconfig.json for Typed Routes in JavaScript\nDESCRIPTION: This snippet shows how to include the generated typed-router.d.ts file in your tsconfig.json or jsconfig.json configuration. This is necessary for the TypeScript compiler to recognize the generated route types.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/guide/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // ...\n  \"include\": [\n    /* ... */\n    \"./typed-router.d.ts\",\n  ]\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Error Handling in TypeScript\nDESCRIPTION: This snippet demonstrates how to specify error handling globally for all loaders in the application. It uses the DataLoaderPlugin to set up global error handling.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/rfc.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyError extends Error {\n  name = 'MyError'\n  constructor(message: string) {\n    super(message)\n  }\n}\n\napp.use(DataLoaderPlugin, {\n  router,\n// checks with `instanceof MyError`\n  errors: [MyError],\n})\n```\n\n----------------------------------------\n\nTITLE: Using vite-plugin-vue-layouts with unplugin-vue-router\nDESCRIPTION: Shows how to integrate vite-plugin-vue-layouts with unplugin-vue-router by applying layouts to the auto-generated routes at runtime.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/guide/extending-routes.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRouter } from 'vue-router'\nimport { routes } from 'vue-router/auto-routes'\nimport { setupLayouts } from 'virtual:generated-layouts'\n\nconst router = createRouter({\n  // ...\n  routes: setupLayouts(routes),\n})\n```\n\n----------------------------------------\n\nTITLE: SFC Custom Route Block in Vue\nDESCRIPTION: Illustrates the use of the <route> custom block in a Vue Single File Component to extend existing routes. This example overrides the route name and adds meta information.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/guide/extending-routes.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<route lang=\"json\">\n{\n  \"name\": \"name-override\",\n  \"meta\": {\n    \"requiresAuth\": false\n  }\n}\n</route>\n```\n\n----------------------------------------\n\nTITLE: Importing RouteNamedMap Type in TypeScript\nDESCRIPTION: This snippet shows how to import the RouteNamedMap type from the auto-generated routes file. This type contains all the routes in your application along with their metadata.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/guide/typescript.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { RouteNamedMap } from 'vue-router/auto-routes'\n```\n\n----------------------------------------\n\nTITLE: Defining Lazy Data Loader in Vue\nDESCRIPTION: Demonstrates how to define a lazy data loader using the 'lazy' option. This allows the navigation to proceed without waiting for the data to load.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/defining-loaders.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\">\nimport { getUserById } from '../api'\n\nexport const useUserData = defineBasicLoader(\n  '/users/[id]',\n  async (to) => {\n    const user = await getUserById(to.params.id)\n    return user\n  },\n  { lazy: true } // 👈  marked as lazy\n)\n</script>\n\n<script setup>\n// Differently from the example above, `user.value` can and will be initially `undefined`\nconst { data: user, isLoading, error } = useUserData()\n</script>\n\n<!-- ... -->\n```\n\n----------------------------------------\n\nTITLE: Configuring SSR with unplugin-vue-router in Vite\nDESCRIPTION: Example of SSR configuration for unplugin-vue-router in a Vite project. Shows how to mark vue-router as noExternal in development mode to ensure proper functioning with SSR.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/guide/configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport Vue from '@vitejs/plugin-vue'\nimport VueRouter from 'unplugin-vue-router/vite'\n\nexport default defineConfig(({ mode }) => ({\n  ssr: {\n    noExternal: mode === 'development' ? ['vue-router'] : [],\n  },\n  plugins: [VueRouter(), Vue()],\n}))\n```\n\n----------------------------------------\n\nTITLE: Configuring auto-imports for unplugin-vue-router\nDESCRIPTION: Vite configuration snippet for setting up auto-imports with unplugin-vue-router. It shows how to use the VueRouterAutoImports preset with unplugin-auto-import.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/introduction.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport AutoImport from 'unplugin-auto-import/vite'\nimport { VueRouterAutoImports } from 'unplugin-vue-router'\n\nexport default defineConfig({\n  plugins: [\n    // other plugins\n    AutoImport({\n      imports: [\n        VueRouterAutoImports,\n      ],\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing defineQueryLoader for Simple and Parameterized Queries\nDESCRIPTION: Demonstrates the target API for defineQueryLoader, showcasing both a simple query for todos and a parameterized query for fetching a contact by ID.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/src/data-loaders/defineLoader-notes.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script>\nimport { useQuery } from 'vue-query'\n\n// options are combined loader options + vue-query options\nexport const useTodos = defineQueryLoader(fetchTodoList, { key: 'todos' })\n\nexport const useContact = defineQueryLoader(\n  async (to) => {\n    const contact = await fetchContact(to.params.id)\n  },\n  {\n    key: (to) => ['contact', to.params.id],\n  }\n)\n</script>\n\n<script setup>\nconst { isLoading, isError, data, error } = useTodos()\n// data is always present\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Advanced Error Handling in TypeScript\nDESCRIPTION: This snippet shows how to specify expected errors when defining a loader. This allows for non-lazy loaders to have an error property for displaying errors in the UI without canceling navigation.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/rfc.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// custom error class\nclass MyError extends Error {\n  // override is only needed in TS\n  override name = 'MyError' // Displays in logs instead of 'Error'\n  // defining a constructor is optional\n  constructor(message: string) {\n    super(message)\n  }\n}\n\nexport const useUserData = defineLoader(\n  async (to) => {\n    // ...\n  },\n  {\n    errors: [MyError],\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for unplugin-vue-router\nDESCRIPTION: TypeScript configuration snippet for including the generated types file and setting the module resolution. It shows the necessary changes in the tsconfig.json file.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/introduction.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"include\": [\n    // other files...\n    \"./typed-router.d.ts\"\n  ],\n  \"compilerOptions\": {\n    // ...\n    \"moduleResolution\": \"Bundler\",\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding unplugin-vue-router types to tsconfig.json\nDESCRIPTION: TypeScript configuration snippet for including unplugin-vue-router types. It demonstrates how to add the types to the tsconfig.json file.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/introduction.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    // ...\n    \"types\": [\n      \"unplugin-vue-router/client\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading with Timeout in Vue Data Loaders\nDESCRIPTION: Example of a data loader with a numeric timeout parameter for the 'lazy' option. This would block navigation for a specified time before allowing it to proceed.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/rfc.md#2025-04-21_snippet_27\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\">\nimport { getUserById } from '../api'\n\nexport const useUserData = defineLoader(\n  async (route) => {\n    const user = await getUserById(route.params.id)\n    return user\n  },\n  // block the navigation for 1 second and then let the navigation go through\n  { lazy: 1000 }\n)\n</script>\n\n<script setup>\nconst { data, isLoading, error } = useUserData()\n//      ^ Ref<User | undefined>\n</script>\n```\n\n----------------------------------------\n\nTITLE: Augmenting RouteNamedMap for Dynamic Routes in TypeScript\nDESCRIPTION: This code demonstrates how to augment the RouteNamedMap interface to add types for dynamic routes that are added during runtime. It includes various parameter helper types for different scenarios.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/guide/typescript.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport {} // needed in .d.ts files\nimport type {\n  RouteRecordInfo,\n  ParamValue,\n  // these are other param helper types\n  ParamValueOneOrMore,\n  ParamValueZeroOrMore,\n  ParamValueZeroOrOne,\n} from 'vue-router'\ndeclare module 'vue-router/auto-routes' {\n  export interface RouteNamedMap {\n    // the key is the name and should match the first generic of RouteRecordInfo\n    'custom-dynamic-name': RouteRecordInfo<\n      'custom-dynamic-name',\n      '/added-during-runtime/[...path]',\n      // these are the raw param types (accept numbers, strings, booleans, etc)\n      { path: ParamValue<true> },\n      // these are the normalized params as found in useRoute().params\n      { path: ParamValue<false> }\n    >\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Named Views Route Configuration\nDESCRIPTION: Example of generated route configuration for named views\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/guide/file-based-routing.md#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n{\n  path: '/',\n  component: {\n    aux: () => import('src/pages/index@aux.vue')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Extensions Configuration\nDESCRIPTION: TypeScript configuration for custom file extensions including markdown files\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/guide/file-based-routing.md#2025-04-21_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nVueRouter({\n  extensions: ['.vue', '.md'],\n  routesFolder: [\n    'src/pages',\n    {\n      src: 'src/docs',\n      extensions: ['.md'],\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Augmenting TypeScript Types for Stricter Error Handling\nDESCRIPTION: This TypeScript declaration file snippet shows how to augment the TypesConfig interface to override the default Error type. This allows for stricter type checking when handling errors in data loaders.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/error-handling.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// types-extension.d.ts\nimport 'unplugin-vue-router/data-loaders'\nexport {}\ndeclare module 'unplugin-vue-router/data-loaders' {\n  interface TypesConfig {\n    Error: unknown\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating tsconfig.json for unplugin-vue-router\nDESCRIPTION: Configuration changes required in tsconfig.json to include the generated types and set the correct module resolution.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/README.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"include\": [\n    // ...\n    \"./typed-router.d.ts\"\n  ],\n  // ...\n  \"compilerOptions\": {\n    // ...\n    \"moduleResolution\": \"Bundler\"\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Internal VueFire Loader Implementation\nDESCRIPTION: Internal implementation of the VueFire loader function showing document and collection type checking logic and entry creation process.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/src/data-loaders/tests-defineLoader.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction _defineVueFireLoader(path: string, docOrCollectionOrQuery: () => unknown, options?: any) {\n  if (isDocument(docOrCollectionOrQuery)) {\n    useDocument(docOrCollectionOrQuery)\n  } else if (isCollection(docOrCollectionOrQuery)) {\n    // collection\n  } else {\n    // query\n  }\n  useDocument()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Core Modules for Vue Router Auto Routes\nDESCRIPTION: ESLint configuration to recognize vue-router/auto-routes as a core module when not using auto imports.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/guide/eslint.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"settings\": {\n    \"import/core-modules\": [\"vue-router/auto-routes\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DataLoaderPlugin with Navigation Result Selection in TypeScript\nDESCRIPTION: This snippet shows how to configure the DataLoaderPlugin with a custom selectNavigationResult function to handle multiple navigation results from parallel data loaders, prioritizing specific navigation outcomes.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/rfc.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(DataLoaderPlugin, {\n  router,\n  selectNavigationResult(results) {\n    for (const { value } of results) {\n      if (\n        typeof value === 'object' &&\n        'name' in value &&\n        value.name === 'not-found'\n      ) {\n        return value\n      }\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining UnpluginFactory for Vue Router in TypeScript\nDESCRIPTION: This code snippet defines the UnpluginFactory for the Vue Router plugin. It sets up the options, context, and methods for generating routes and types based on the file system.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/e2e/fixtures/filenames/multi-extensions/docs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const unpluginFactory: UnpluginFactory<UserOptions> = (userOptions, meta) => {\n  const ctx = createContext(userOptions, meta)\n\n  return {\n    name: 'unplugin-vue-router',\n    enforce: 'pre',\n\n    api: {\n      getRoutes: () => ctx.parsedRoutes,\n      getResolvedOptions: () => ctx.options,\n    },\n\n    async buildStart() {\n      const { rootDir, scanDirs, routesFolder, dts } = ctx.options\n\n      // TODO: move to resolveOptions\n      const scanDirSet = new Set(scanDirs)\n      scanDirSet.add(routesFolder)\n\n      await Promise.all([\n        // scan the routes folder and file system\n        scanRoutesFolder(ctx, [...scanDirSet]),\n        dts && generateDTS(ctx),\n      ])\n\n      // create the root route\n      createRootRoute(ctx)\n    },\n\n    resolveId(source) {\n      // detect if we are requesting the routes file\n      if (source === VIRTUAL_MODULE_ROUTES) {\n        return VIRTUAL_MODULE_ROUTES\n      }\n      // TODO: maybe handle other files?\n    },\n\n    // in build, we need to return the routes file content\n    async load(id) {\n      if (id === VIRTUAL_MODULE_ROUTES) {\n        const { routesFolder, routesDir } = ctx.options\n        const imports = [...ctx.moduleImports.values()]\n\n        const code = [\n          '// generated by unplugin-vue-router',\n          `import { ${hasExtendRoutes(ctx) ? 'createWebHistory, createRouter, ' : ''}RouteRecordRaw } from 'vue-router/auto'`,\n          ...imports,\n          `export const routes = ${stringifyRoutes(ctx.parsedRoutes, routesFolder, routesDir)}`,\n          hasExtendRoutes(ctx)\n            ? `\nexport const router = createRouter({\n  history: createWebHistory(),\n  routes,\n})`\n            : '',\n        ].join('\\n')\n\n        return code\n      }\n    },\n\n    // transform the vue files to add the route block\n    async transform(code, id) {\n      // skip node_modules\n      if (/node_modules/.test(id)) return\n\n      if (isRouteFile(ctx, id)) {\n        let { routeBlock, componentName } = extractRouteBlock(code, id)\n        // use the component name for the route name by default\n        if (!routeBlock.name) {\n          routeBlock.name = componentName\n        }\n        // @ts-expect-error: we remove the component object\n        delete routeBlock.component\n\n        const route = ctx.parsedRoutes.find((route) => route.filePath === id)\n        if (!route) {\n          // TODO: handle this case\n          console.warn(`[${ctx.options.pagesDir}] Could not find route for ${id}`)\n        } else {\n          // override the route options\n          route.options = routeBlock\n          // TODO: handle aliases\n        }\n\n        // TODO: check if props have changed\n        await writeDTS(ctx)\n\n        // add the route block\n        let newRouteBlock = '\\n'// 'export default ' + JSON.stringify(routeBlock, null, 2) + '\\n'\n        newRouteBlock += `\\nexport const route = ${JSON.stringify(routeBlock, null, 2)}\\n`\n\n        return code + newRouteBlock\n      }\n    },\n\n    // TODO: handle file changes\n    // async handleHotUpdate({ file, read, server }) {\n    // },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Nested Routes Configuration\nDESCRIPTION: JavaScript route configuration generated from nested folder structure\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/guide/file-based-routing.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst routes = [\n  {\n    path: '/users',\n    component: () => import('src/pages/users.vue'),\n    children: [\n      { path: '', component: () => import('src/pages/users/index.vue') },\n    ],\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Route Parameters using Route Names in TypeScript\nDESCRIPTION: Example showing how to leverage route names for type-safe access to route parameters. This approach provides better TypeScript type checking for route parameters.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/rfc.md#2025-04-21_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getUserById } from '../api'\n\nexport const useUserData = defineLoader(async (route) => {\n  if (route.name === 'user-details') {\n    const user = await getUserById(route.params.id)\n    //                                    ^ typed!\n    return { user }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing unplugin-vue-router via npm\nDESCRIPTION: Command to install the unplugin-vue-router package as a development dependency using npm.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D unplugin-vue-router\n```\n\n----------------------------------------\n\nTITLE: Nested Routes Example Structure\nDESCRIPTION: Folder structure demonstrating nested route configuration with parent and child components\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/guide/file-based-routing.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nsrc/pages/\n├── users/\n│   └── index.vue\n└── users.vue\n```\n\n----------------------------------------\n\nTITLE: Using withDataContext for Asynchronous Operations in Data Loaders\nDESCRIPTION: This code snippet shows how to use withDataContext to handle asynchronous operations that are not loaders within a data loader function. This ensures proper context restoration for nested loaders.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/rfc.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport const useUserCommonFriends = defineLoader(async (route) => {\n  const user = await useUserData()\n  await withContext(functionThatReturnsAPromise())\n  const me = await useCurrentUserData()\n\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Documentation Homepage\nDESCRIPTION: YAML configuration block that defines the structure and content of the documentation homepage, including title, layout, hero section, and feature list.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlayout: home\n\ntitle: Unplugin Vue Router\ntitleTemplate: Next gen routing\n\nhero:\n  name: Unplugin Vue Router\n  tagline: Typed, file-based routing for Vue 3\n  actions:\n    - theme: brand\n      text: Get Started\n      link: /introduction\n    - theme: alt\n      text: Data Loaders\n      link: /data-loaders/\n\nfeatures:\n  - title: Type Safe\n    icon: 🔑\n    details: Catch invalid routes at runtime, and get autocompletion for links.\n    link: /guide/typescript\n  - title: File based\n    icon: 📁\n    details: Automatically generate the routes from your file structure.\n    link: /guide/file-based-routing\n  - title: Build Time\n    icon: 🏗\n    details: Control the generated routes at build time to avoid shipping unnecessary code.\n  - title: Data Loaders\n    icon: 🔄\n    details: Support for the upcoming Data Loaders for Vue Router.\n    link: /data-loaders/\n```\n\n----------------------------------------\n\nTITLE: Multiple Routes Configuration\nDESCRIPTION: TypeScript configuration for multiple route folders with custom path prefixes\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/guide/file-based-routing.md#2025-04-21_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nVueRouter({\n  routesFolder: [\n    'src/pages',\n    {\n      src: 'src/admin/routes',\n      path: 'admin/',\n    },\n    {\n      src: 'src/docs',\n      path: 'docs/:lang/',\n    },\n    {\n      src: 'src/promos',\n      path: 'promos-',\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Extending Routes at Runtime in JavaScript\nDESCRIPTION: Demonstrates how to modify routes at runtime by manipulating the routes array before passing it to createRouter(). This example adds meta information to a specific route.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/guide/extending-routes.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWebHistory, createRouter } from 'vue-router'\nimport { routes } from 'vue-router/auto-routes'\n\nfor (const route of routes) {\n  if (route.name === '/admin') {\n    route.meta ??= {}\n    route.meta.requiresAuth = true\n  }\n}\n\nconst router = createRouter({\n  history: createWebHistory(),\n  routes,\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Router Import with Explicit Routes Property in Vue Router Auto\nDESCRIPTION: Example showing a breaking change in v0.9.0 that requires explicitly importing and setting the routes property when creating a router with vue-router/auto.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nimport { createRouter, createWebHistory } from 'vue-router/auto'\n+import { routes } from 'vue-router/auto-routes'\n\ncreateRouter({\n  history: createWebHistory(),\n+  routes\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Typed Pages in Nuxt Configuration (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to enable the experimental 'typedPages' feature in a Nuxt project's configuration file. This setting allows the use of unplugin-vue-router in Nuxt.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/nuxt/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    typedPages: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Simple Data Loader Definition\nDESCRIPTION: Demonstrates the minimal syntax for defining a typed data loader that fetches a collection of books.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/rfc.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const useBookCollection = defineLoader(fetchBookCollection)\nconst { data } = useBookCollection()\n```\n\n----------------------------------------\n\nTITLE: Updating Tree Insert Method Calls for Path Handling\nDESCRIPTION: Example showing the change in v0.9.0 for the Tree and PrefixTree insert method, which now expects a path without file extension and requires the full path as second argument.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// replace\ntree.insert('file.vue')\n// with\ntree.insert('file', resolve('file.vue'))\n```\n\n----------------------------------------\n\nTITLE: Adding unplugin-vue-router types to env.d.ts\nDESCRIPTION: TypeScript declaration file snippet for adding unplugin-vue-router client types. It shows how to reference the types in the env.d.ts file.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/introduction.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"vite/client\" />\n/// <reference types=\"unplugin-vue-router/client\" />\n```\n\n----------------------------------------\n\nTITLE: Dynamic Lazy Loading Configuration\nDESCRIPTION: Demonstrates how to dynamically configure lazy loading for a data loader based on the current and target routes, useful for optimizing search result updates.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/defining-loaders.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const useSearchResults = defineBasicLoader(\n  async (to) => {\n    // ...\n  },\n  {\n    // lazy if we are on staying on the same route\n    lazy: (to, from) => to.name === from.name,\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Version History Documentation in Markdown\nDESCRIPTION: A detailed changelog tracking version changes, bug fixes, and feature additions for the unplugin-vue-router project. Includes commit references and issue links.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.0.7](https://github.com/posva/unplugin-vue-router/compare/v0.0.6...v0.0.7) (2022-06-28)\n\n### Bug Fixes\n\n- stable order of paths ([59d743a](https://github.com/posva/unplugin-vue-router/commit/59d743a6c156a97e59d2848f791f69db6636f640))\n\n### Features\n\n- allow extending routes with extendRoutes ([da4db97](https://github.com/posva/unplugin-vue-router/commit/da4db971dc48f77a2b00d364e4940e1c2d849d94))\n- keep one component if possible ([efe20e2](https://github.com/posva/unplugin-vue-router/commit/efe20e2e7a89e2b339dc66840d165463d93ac4ba))\n- named view support ([#6](https://github.com/posva/unplugin-vue-router/issues/6)) ([a46dcd2](https://github.com/posva/unplugin-vue-router/commit/a46dcd24396962cf0519b05d53de75cc8511acdf))\n\n## [0.0.6](https://github.com/posva/unplugin-vue-router/compare/v0.0.5...v0.0.6) (2022-06-27)\n\n- small fixes\n\n## [0.0.5](https://github.com/posva/unplugin-vue-router/compare/v0.0.4...v0.0.5) (2022-06-27)\n\n### Features\n\n- handle unnested routes ([f52304d](https://github.com/posva/unplugin-vue-router/commit/f52304db2a4507778ef54c12a9e6dc2ccca42401))\n\n## [0.0.4](https://github.com/posva/unplugin-vue-router/compare/v0.0.3...v0.0.4) (2022-06-24)\n\n### Bug Fixes\n\n- use virtual modules for [@vue-router](https://github.com/vue-router) ([74cb353](https://github.com/posva/unplugin-vue-router/commit/74cb353e3643ddb0602449f171f2a5663c16db21))\n\n## [0.0.3](https://github.com/posva/unplugin-vue-router/compare/v0.0.2...v0.0.3) (2022-06-24)\n\n### Bug Fixes\n\n- correct module id ([eb4ee83](https://github.com/posva/unplugin-vue-router/commit/eb4ee83f48dfeb1b35c2f09c696cdf3e742bc4d1))\n\n## [0.0.1](https://github.com/posva/unplugin-vue-router/compare/v0.0.0-beta.0...v0.0.1) (2022-06-24)\n\n### Features\n\n- setup chokidar watcher ([15f217f](https://github.com/posva/unplugin-vue-router/commit/15f217f54cab637ae1cf646c1c7cef0ffb9529cd))\n```\n\n----------------------------------------\n\nTITLE: Adding unplugin-vue-router Types to env.d.ts\nDESCRIPTION: Example of how to add the unplugin-vue-router client types to an env.d.ts file.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/README.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// env.d.ts\n/// <reference types=\"vite/client\" />\n/// <reference types=\"unplugin-vue-router/client\" />\n```\n\n----------------------------------------\n\nTITLE: In-Component Routing using definePage in Vue\nDESCRIPTION: Shows how to use the definePage() macro within a Vue component to modify and extend the route configuration. This example adds an alias and meta information to the route.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/guide/extending-routes.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\ndefinePage({\n  alias: ['/n/:name'],\n  meta: {\n    requiresAuth: true,\n  },\n})\n</script>\n\n<template>\n  <!-- ... -->\n</template>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Nuxt 3\nDESCRIPTION: Commands for installing project dependencies using different package managers (yarn, npm, pnpm).\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/examples/nuxt/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\nyarn install\n\n# npm\nnpm install\n\n# pnpm\npnpm install --shamefully-hoist\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Navigation Results in Vue Router Plugin\nDESCRIPTION: Configuration example for DataLoaderPlugin showing how to handle multiple navigation results by implementing a custom selection logic.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/navigation-aware.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(DataLoaderPlugin, {\n  router,\n  selectNavigationResult(results) {\n    for (const { value } of results) {\n      // If any of the results is a redirection to the not-found page, use it\n      if (\n        typeof value === 'object' &&\n        'name' in value &&\n        value.name === 'not-found'\n      ) {\n        return value\n      }\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Documenting Ignored File in Markdown\nDESCRIPTION: A Markdown comment explaining that this file, located at the root of the project, will be ignored. This serves as a reminder or documentation for project configuration.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/playground/src/docs/should-be-ignored.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Ignored\n\nThis file is at the root so it will get ignored\n```\n\n----------------------------------------\n\nTITLE: Route Groups Structure Example\nDESCRIPTION: Example of route groups organization for admin and user sections\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/guide/file-based-routing.md#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nsrc/pages/\n├── (admin)/\n│   ├── dashboard.vue\n│   └── settings.vue\n└── (user)/\n    ├── profile.vue\n    └── order.vue\n```\n\n----------------------------------------\n\nTITLE: Opting-in to Global Error Handling in Individual Data Loader\nDESCRIPTION: This snippet illustrates how to opt-in to global error handling within a specific data loader by setting the errors option to true. This allows the loader to use the globally defined expected errors.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/error-handling.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const useUserData = defineBasicLoader(\n  async (to) => {\n    throw new Error('Something went wrong')\n    // ...\n  },\n  {\n    errors: true,\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring unplugin-vue-router to include only specific routes in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the exclude option in unplugin-vue-router to filter out routes that should not be included in the routing system. The configuration ensures that only pages matching specific patterns are considered while excluding all others by default.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/playground/src/docs/real/index.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport Vue from '@vitejs/plugin-vue'\nimport VueRouter from 'unplugin-vue-router/vite'\n\nexport default defineConfig({\n  plugins: [\n    VueRouter({\n      // include all routes in src/pages\n      routesFolder: 'src/pages',\n\n      // exclude everything except some specific routes\n      exclude: [\n        // exclude everything by default\n        '**/*.*',\n        // allow routes related to users\n        '!**/user/**/*.*',\n        // allow the index route\n        '!index.vue',\n      ],\n    }),\n    Vue(),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Using Data Loader in Project Issues Page\nDESCRIPTION: Vue component implementing the project issues loader in a page component. Shows how to import, export, and use the loader to fetch issue data.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/organization.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\">\nimport { useProjectIssues } from '@/loaders/issues'\nexport { useProjectIssues }\n</script>\n\n<script setup lang=\"ts\">\nconst { data: issues } = useProjectIssues()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Lazy Data Loader\nDESCRIPTION: Example of configuring a lazy data loader that doesn't block navigation, useful for non-critical data fetching.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/rfc.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const useBookCollection = defineLoader(fetchBookCollection, {\n  lazy: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring VueRouter Plugin in Vue CLI\nDESCRIPTION: Example of how to add the VueRouter plugin to a Vue CLI configuration file.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// vue.config.js\nmodule.exports = {\n  configureWebpack: {\n    plugins: [\n      require('unplugin-vue-router/webpack')({\n        /* options */\n      }),\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Redirect Routes at Runtime in TypeScript\nDESCRIPTION: Demonstrates how to add redirect routes to the router at runtime, including both static and dynamic redirects using route parameters.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/guide/extending-routes.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { routes } from 'vue-router/auto-routes'\n\nroutes.push({\n  path: '/path-to-redirect',\n  redirect: '/redirected-path',\n})\n\nroutes.push({\n  path: '/path-to-redirect/:id',\n  redirect: (to) => `/redirected-path/${to.params.id}`,\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Runtime Routes with HMR in Vue Router\nDESCRIPTION: This snippet shows how to add runtime routes while using HMR. It defines a function to add redirects and implements different logic for development and production environments.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/guide/hmr.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRouter, createWebHistory } from 'vue-router'\nimport { routes, handleHotUpdate } from 'vue-router/auto-routes'\n\nexport const router = createRouter({\n  history: createWebHistory(),\n  routes,\n})\n\nfunction addRedirects() {\n  router.addRoute({\n    path: '/new-about',\n    redirect: '/about?from=/new-about',\n  })\n}\n\nif (import.meta.hot) {\n  handleHotUpdate(router, (newRoutes) => {\n    addRedirects()\n  })\n} else {\n  // production\n  addRedirects()\n}\n```\n\n----------------------------------------\n\nTITLE: Installing unplugin-vue-router via npm\nDESCRIPTION: Command to install the unplugin-vue-router package using npm package manager.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/introduction.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D unplugin-vue-router\n```\n\n----------------------------------------\n\nTITLE: Configuring VueRouter plugin in Webpack\nDESCRIPTION: Configuration snippet for adding the VueRouter plugin to a Webpack project. It shows how to require and use the plugin in the Webpack configuration file.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/introduction.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nmodule.exports = {\n  /* ... */\n  plugins: [\n    require('unplugin-vue-router/webpack')({\n      /* options */\n    }),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VueRouter Plugin in Webpack\nDESCRIPTION: Example of how to add the VueRouter plugin to a Webpack configuration file.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// webpack.config.js\nmodule.exports = {\n  /* ... */\n  plugins: [\n    require('unplugin-vue-router/webpack')({\n      /* options */\n    }),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Updating tsconfig.json to Include unplugin-vue-router Types\nDESCRIPTION: Alternative way to add unplugin-vue-router types by updating the types property in tsconfig.json.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/README.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    // ...\n    \"types\": [\"unplugin-vue-router/client\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VueRouter plugin in Vue CLI\nDESCRIPTION: Configuration snippet for adding the VueRouter plugin to a Vue CLI project. It demonstrates how to include the plugin in the Vue configuration file.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/introduction.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nmodule.exports = {\n  configureWebpack: {\n    plugins: [\n      require('unplugin-vue-router/webpack')({\n        /* options */\n      }),\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Import Path for Vue Router Auto Routes\nDESCRIPTION: This code diff illustrates the change in import path for vue-router auto routes, which was necessary to improve compatibility with TypeScript and other tools in the ecosystem.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n- import { } from 'vue-router/auto/routes'\n+ import { } from 'vue-router/auto-routes'\n```\n\n----------------------------------------\n\nTITLE: Conditional Navigation Blocking with Function-Based Lazy Option\nDESCRIPTION: Example of a data loader using a function to conditionally determine whether to block navigation. This allows for dynamic control of navigation blocking based on route information.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/rfc.md#2025-04-21_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nexport const useUserData = defineLoader(\n  loader,\n  // ...\n  {\n    lazy: (route) => {\n      // ...\n      return true // or a number\n    },\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Eager Navigation Control with NavigationResult\nDESCRIPTION: Example demonstrating how to eagerly control navigation by throwing NavigationResult instead of returning it, including path and query parameter preservation.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/navigation-aware.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NavigationResult } from 'unplugin-vue-router/data-loaders'\nimport { defineBasicLoader } from 'unplugin-vue-router/data-loaders/basic'\n\nexport const useUserData = defineBasicLoader(\n  async (to) => {\n    try {\n      const user = await getUserById(to.params.id)\n\n      return user\n    } catch (error) {\n      throw new NavigationResult({\n        name: 'not-found',\n        // keep the current path in the URL\n        params: { pathMatch: to.path.split('/') },\n        query: to.query,\n        hash: to.hash,\n      })\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Previewing Nuxt 3 Production Build\nDESCRIPTION: Command to locally preview the production build before deployment.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/examples/nuxt/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run preview\n```\n\n----------------------------------------\n\nTITLE: Basic Data Fetching with Suspense in Vue Components\nDESCRIPTION: Example of a Vue component using Suspense for fetching user list data. This approach demonstrates awaiting data in the setup function with a manual reload method.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/rfc.md#2025-04-21_snippet_19\n\nLANGUAGE: vue\nCODE:\n```\n<!-- src/pages/users.vue = /users -->\n<!-- Displays a list of all users -->\n<script setup>\nconst userList = shallowRef(await fetchUserList())\n\n// manually expose a reload function to be called whenever needed\nfunction reload() {\n  userList.value = await fetchUserList()\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring VueRouter Plugin in esbuild\nDESCRIPTION: Example of how to add the VueRouter plugin to an esbuild configuration file.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// esbuild.config.js\nimport { build } from 'esbuild'\nimport VueRouter from 'unplugin-vue-router/esbuild'\n\nbuild({\n  plugins: [VueRouter()],\n})\n```\n\n----------------------------------------\n\nTITLE: Defining VueFire Data Loader with Collection Handling\nDESCRIPTION: Creates a data loader specifically for VueFire with collection handling and dirty state checking. Includes context management and entry creation logic.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/src/data-loaders/tests-defineLoader.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const defineVueFireLoader = createDataLoader({\n  createEntry: (context) => {\n    useCollection(...)\n  },\n  before: (context) => {\n    // is this the first time?\n    if (!context.entries.has) {\n    }\n    // isDirty: our loader depends on other loaders and one of them is dirty so we also are\n    if (context.isDirty) {\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring VSCode to exclude vue-router/auto from import suggestions\nDESCRIPTION: VSCode settings snippet to exclude vue-router/auto from auto-import suggestions. It shows the configuration to be added to the .vscode/settings.json file.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/introduction.md#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"typescript.tsdk\": \"node_modules/typescript/lib\",\n  \"typescript.preferences.autoImportFileExcludePatterns\": [\"vue-router/auto$\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Messages in Vue Template with Type Guard\nDESCRIPTION: This Vue template snippet shows how to use a type guard function to safely display error messages. It demonstrates a pattern for handling potentially undefined error types in the template.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/data-loaders/error-handling.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <!-- ... -->\n  <p v-if=\"isMyError(error)\">{{ error.message }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Replacing setupLoaderGuard with DataLoaderPlugin in Vue\nDESCRIPTION: This snippet shows how to replace the deprecated setupLoaderGuard function with the new DataLoaderPlugin in a Vue application. It demonstrates the change in syntax and usage for setting up data loader functionality.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Old way\nimport { setupLoaderGuard } from 'vue-router/auto'\n\nsetupLoaderGuard({ router, app })\n\n// New way\nimport { DataLoaderPlugin } from 'vue-router/auto'\n\napp.use(DataLoaderPlugin, { router })\n```\n\n----------------------------------------\n\nTITLE: VueFire Loader Usage Examples\nDESCRIPTION: Shows different implementation patterns for VueFire data loader usage including collection paths, document references, and computed properties handling.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/src/data-loaders/tests-defineLoader.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndefineVueFireLoader('/documents', () => useCollection(...))\n\ndefineVueFireLoader('/documents/[id]', (route) => {\n  return useDocument(doc(collections('documents'), route.params.id))\n})\n\ndefineVueFireLoader('/documents/[id]', (route) => {\n  return useDocument(computed(() => doc(collections('documents'), route.params.id)))\n})\n\ndefineVueFireLoader('/documents/[id]', ((route) => doc(collections('documents'), route.params.id)))\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Globals for definePage Macro\nDESCRIPTION: ESLint configuration to recognize the definePage() global macro used in unplugin-vue-router.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/docs/guide/eslint.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"globals\": {\n    \"definePage\": \"readonly\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Nuxt 3 Development Server\nDESCRIPTION: Command to start the development server which runs on http://localhost:3000.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/examples/nuxt/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Building Nuxt 3 for Production\nDESCRIPTION: Command to build the application for production deployment.\nSOURCE: https://github.com/posva/unplugin-vue-router/blob/main/examples/nuxt/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```"
  }
]