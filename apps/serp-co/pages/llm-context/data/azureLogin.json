[
  {
    "owner": "azure",
    "repo": "login",
    "content": "TITLE: Azure Login with OIDC Workflow (Azure CLI)\nDESCRIPTION: This workflow demonstrates how to log in to Azure using OpenID Connect (OIDC) and then execute an Azure CLI script. It sets the necessary permissions for OIDC and utilizes the `azure/login` action. It uses secrets stored in GitHub to provide client, tenant and subscription id.\nSOURCE: https://github.com/azure/login/blob/master/README.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# File: .github/workflows/workflow.yml\n\nname: Run Azure Login with OIDC\non: [push]\n\npermissions:\n  id-token: write\n  contents: read\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Azure login\n        uses: azure/login@v2\n        with:\n          client-id: ${{ secrets.AZURE_CLIENT_ID }}\n          tenant-id: ${{ secrets.AZURE_TENANT_ID }}\n          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}\n\n      - name: Azure CLI script\n        uses: azure/cli@v2\n        with:\n          azcliversion: latest\n          inlineScript: |\n            az account show\n```\n\n----------------------------------------\n\nTITLE: Azure Login with OIDC Workflow (CLI & PowerShell)\nDESCRIPTION: This workflow demonstrates how to log in to Azure using OIDC and execute both Azure CLI and Azure PowerShell scripts. It sets the necessary permissions for OIDC and utilizes the `azure/login` action, enabling an Azure PowerShell session. It uses secrets stored in GitHub to provide client, tenant and subscription id.\nSOURCE: https://github.com/azure/login/blob/master/README.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# File: .github/workflows/workflow.yml\n\nname: Run Azure Login with OIDC\non: [push]\n\npermissions:\n  id-token: write\n  contents: read\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Azure login\n        uses: azure/login@v2\n        with:\n          client-id: ${{ secrets.AZURE_CLIENT_ID }}\n          tenant-id: ${{ secrets.AZURE_TENANT_ID }}\n          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}\n          enable-AzPSSession: true\n\n      - name: Azure CLI script\n        uses: azure/cli@v2\n        with:\n          azcliversion: latest\n          inlineScript: |\n            az account show\n\n      - name: Azure PowerShell script\n        uses: azure/powershell@v2\n        with:\n          azPSVersion: \"latest\"\n          inlineScript: |\n            Get-AzContext\n```\n\n----------------------------------------\n\nTITLE: Azure Login with Individual Secret Parameters\nDESCRIPTION: This workflow demonstrates how to pass the client ID, client secret, subscription ID, and tenant ID as individual secrets rather than as a JSON object. This approach can address security concerns related to storing the entire credential object. It uses the azure/login@v2 with the `creds` parameters using string interpolation\nSOURCE: https://github.com/azure/login/blob/master/README.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n  - uses: azure/login@v2\n    with:\n      creds: '{\"clientId\":\"${{ secrets.AZURE_CLIENT_ID }}\",\"clientSecret\":\"${{ secrets.AZURE_CLIENT_SECRET }}\",\"subscriptionId\":\"${{ secrets.AZURE_SUBSCRIPTION_ID }}\",\"tenantId\":\"${{ secrets.AZURE_TENANT_ID }}\"}'\n```\n\n----------------------------------------\n\nTITLE: Azure Login with Service Principal Secret (CLI)\nDESCRIPTION: This workflow demonstrates how to log in to Azure using a service principal secret stored in the `AZURE_CREDENTIALS` GitHub secret and execute an Azure CLI script. It uses the `azure/login` action with the `creds` parameter and then executes an Azure CLI script to display the current account.\nSOURCE: https://github.com/azure/login/blob/master/README.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\non: [push]\n\nname: Run Azure Login With a Service Principal Secret\n\njobs:\n\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n\n    - uses: azure/login@v2\n      with:\n        creds: ${{ secrets.AZURE_CREDENTIALS }}\n\n    - name: Azure CLI script\n      uses: azure/cli@v2\n      with:\n        azcliversion: latest\n        inlineScript: |\n          az account show\n```\n\n----------------------------------------\n\nTITLE: Azure Login with Service Principal Secret (CLI & PS)\nDESCRIPTION: This workflow demonstrates how to log in to Azure using a service principal secret and then execute both Azure CLI and Azure PowerShell scripts. It utilizes the `azure/login` action with the `creds` parameter and enables an Azure PowerShell session.  The `AZURE_CREDENTIALS` secret stores service principal details.\nSOURCE: https://github.com/azure/login/blob/master/README.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\non: [push]\n\nname: Run Azure Login With a Service Principal Secret\n\njobs:\n\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n\n    - uses: azure/login@v2\n      with:\n        creds: ${{ secrets.AZURE_CREDENTIALS }}\n        enable-AzPSSession: true\n\n    - name: Azure CLI script\n      uses: azure/cli@v2\n      with:\n        azcliversion: latest\n        inlineScript: |\n          az account show\n\n    - name: Azure PowerShell script\n      uses: azure/powershell@v2\n      with:\n        azPSVersion: \"latest\"\n        inlineScript: |\n          Get-AzWebApp\n```\n\n----------------------------------------\n\nTITLE: Login with User-Assigned Managed Identity (YAML)\nDESCRIPTION: This workflow demonstrates how to authenticate to Azure using a user-assigned managed identity in a GitHub Actions workflow. It uses the azure/login@v2 action with the IDENTITY auth-type and specifies the client ID, tenant ID, and subscription ID of the managed identity.  It also includes steps for running Azure CLI and Azure PowerShell scripts.\nSOURCE: https://github.com/azure/login/blob/master/README.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# File: .github/workflows/workflow.yml\n\nname: Run Azure Login with User-assigned Managed Identity\non: [push]\n\njobs:\n  build-and-deploy:\n    runs-on: self-hosted\n    steps:\n      - name: Azure login\n        uses: azure/login@v2\n        with:\n          auth-type: IDENTITY\n          client-id: ${{ secrets.AZURE_CLIENT_ID }}\n          tenant-id: ${{ secrets.AZURE_TENANT_ID }}\n          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}\n          enable-AzPSSession: true\n\n      # Azure CLI Action only supports linux self-hosted runners for now.\n      # If you want to execute the Azure CLI script on a windows self-hosted runner, you can execute it directly in `run`.\n      - name: Azure CLI script\n        uses: azure/cli@v2\n        with:\n          azcliversion: latest\n          inlineScript: |\n            az account show\n\n      - name: Azure PowerShell script\n        uses: azure/powershell@v2\n        with:\n          azPSVersion: \"latest\"\n          inlineScript: |\n            Get-AzContext\n```\n\n----------------------------------------\n\nTITLE: Credential JSON format for Azure Login\nDESCRIPTION: This JSON snippet defines the expected format for the 'creds' input parameter when authenticating with a Service Principal. It includes the clientSecret, subscriptionId, tenantId, and clientId. This parameter should be securely stored as a GitHub Action secret.\nSOURCE: https://github.com/azure/login/blob/master/README.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"clientSecret\":  \"******\",\n    \"subscriptionId\":  \"******\",\n    \"tenantId\":  \"******\",\n    \"clientId\":  \"******\"\n}\n```\n\n----------------------------------------\n\nTITLE: Service Principal Secret Credentials Format (JSON)\nDESCRIPTION: This JSON snippet defines the format for storing Azure service principal credentials as a GitHub secret.  It includes the client secret, subscription ID, tenant ID, and client ID. This credential is used for authenticating to Azure within a GitHub Actions workflow using a service principal.\nSOURCE: https://github.com/azure/login/blob/master/README.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"clientSecret\":  \"******\",\n    \"subscriptionId\":  \"******\",\n    \"tenantId\":  \"******\",\n    \"clientId\":  \"******\"\n}\n```\n\n----------------------------------------\n\nTITLE: Azure Login with System-assigned Managed Identity\nDESCRIPTION: This workflow demonstrates how to log in to Azure using a system-assigned managed identity. This approach requires a self-hosted runner running on an Azure virtual machine with a system assigned managed identity. It uses the `azure/login` action with `auth-type: IDENTITY` and executes both Azure CLI and Azure PowerShell scripts. It requires AZURE_SUBSCRIPTION_ID and AZURE_TENANT_ID secrets.\nSOURCE: https://github.com/azure/login/blob/master/README.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# File: .github/workflows/workflow.yml\n\nname: Run Azure Login with System-assigned Managed Identity\non: [push]\n\njobs:\n  build-and-deploy:\n    runs-on: self-hosted\n    steps:\n      - name: Azure login\n        uses: azure/login@v2\n        with:\n          auth-type: IDENTITY\n          tenant-id: ${{ secrets.AZURE_TENANT_ID }}\n          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}\n          enable-AzPSSession: true\n\n      # Azure CLI Action only supports linux self-hosted runners for now.\n      # If you want to execute the Azure CLI script on a windows self-hosted runner, you can execute it directly in `run`.\n      - name: Azure CLI script\n        uses: azure/cli@v2\n        with:\n          azcliversion: latest\n          inlineScript: |\n            az account show\n\n      - name: Azure PowerShell script\n        uses: azure/powershell@v2\n        with:\n          azPSVersion: \"latest\"\n          inlineScript: |\n            Get-AzContext\n            Get-AzResourceGroup\n```\n\n----------------------------------------\n\nTITLE: Login without Subscription (YAML)\nDESCRIPTION: This workflow shows how to log in to Azure without a subscription using the azure/login@v2 action. It sets the allow-no-subscriptions parameter to true, enabling access to tenant-level commands.  It also demonstrates running Azure CLI and Azure PowerShell scripts.\nSOURCE: https://github.com/azure/login/blob/master/README.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n# File: .github/workflows/workflow.yml\n\non: [push]\n\nname: Run Azure Login without subscription\n\njobs:\n\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n\n    - name: Azure Login\n      uses: azure/login@v2\n      with:\n        client-id: ${{ secrets.AZURE_CLIENT_ID }}\n        tenant-id: ${{ secrets.AZURE_TENANT_ID }}\n        allow-no-subscriptions: true\n        enable-AzPSSession: true\n\n    - name: Azure CLI script\n      uses: azure/cli@v2\n      with:\n        azcliversion: latest\n        inlineScript: |\n          az account show\n\n    - name: Run Azure PowerShell\n      uses: azure/powershell@v2\n      with:\n        azPSVersion: \"latest\"\n        inlineScript: |\n          Get-AzContext\n```\n\n----------------------------------------\n\nTITLE: Login to Azure US Government Cloud (YAML)\nDESCRIPTION: This workflow illustrates how to log in to Azure US Government cloud using the azure/login@v2 action. It uses the creds input to specify Azure credentials stored as a GitHub secret and sets the environment to 'AzureUSGovernment'.\nSOURCE: https://github.com/azure/login/blob/master/README.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# File: .github/workflows/workflow.yml\n\non: [push]\n\nname: Login to Azure US Government cloud\n\njobs:\n\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n\n    - uses: azure/login@v2\n      with:\n        creds: ${{ secrets.AZURE_CREDENTIALS }}\n        environment: 'AzureUSGovernment'\n        enable-AzPSSession: true\n```\n\n----------------------------------------\n\nTITLE: Control Azure Login Cleanup Steps (YAML)\nDESCRIPTION: This workflow demonstrates how to control the cleanup steps in the Azure Login action by setting the AZURE_LOGIN_PRE_CLEANUP and AZURE_LOGIN_POST_CLEANUP environment variables.  This allows enabling or disabling cleanup before and after the login step for multiple logins in a workflow. Different client IDs, tenant IDs, and subscription IDs are used for each Azure login step.\nSOURCE: https://github.com/azure/login/blob/master/README.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n# File: .github/workflows/workflow.yml\n\non: [push]\n\nname: Cleanup examples for Multiple Azure Login\n\njobs:\n\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n\n    # enable cleanup for the 1st Azure Login\n    - name: Azure Login\n      uses: azure/login@v2\n      env:\n        AZURE_LOGIN_PRE_CLEANUP: true\n        AZURE_LOGIN_POST_CLEANUP: true\n      with:\n        client-id: ${{ secrets.AZURE_CLIENT_ID }}\n        tenant-id: ${{ secrets.AZURE_TENANT_ID }}\n        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}\n        enable-AzPSSession: true    \n\n    # run some actions\n\n    # disable cleanup for all other Azure Login\n    - name: Azure Login 2\n      uses: azure/login@v2\n      env:\n        AZURE_LOGIN_PRE_CLEANUP: false\n        AZURE_LOGIN_POST_CLEANUP: false\n      with:\n        client-id: ${{ secrets.AZURE_CLIENT_ID_2 }}\n        tenant-id: ${{ secrets.AZURE_TENANT_ID_2 }}\n        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID_2 }}\n        enable-AzPSSession: true   \n\n    # run other actions\n\n    # disable cleanup for all other Azure Login\n    - name: Azure Login 3\n      uses: azure/login@v2\n      env:\n        AZURE_LOGIN_PRE_CLEANUP: false\n        AZURE_LOGIN_POST_CLEANUP: false\n      with:\n        client-id: ${{ secrets.AZURE_CLIENT_ID_3 }}\n        tenant-id: ${{ secrets.AZURE_TENANT_ID_3 }}\n        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID_3 }}\n        enable-AzPSSession: true   \n\n    # run other actions\n```\n\n----------------------------------------\n\nTITLE: Disable cleanup for GitHub Hosted Runners (YAML)\nDESCRIPTION: This workflow shows how to conditionally disable cleanup steps based on the runner environment.  It uses the startsWith function to check if the runner name starts with 'GitHub Actions' and sets the AZURE_LOGIN_PRE_CLEANUP and AZURE_LOGIN_POST_CLEANUP environment variables accordingly.\nSOURCE: https://github.com/azure/login/blob/master/README.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n# File: .github/workflows/workflow.yml\n\non: [push]\n\nname: Disable cleanup for GitHub Hosted Runners\n\njobs:\n\n  deploy:\n    runs-on: [ubuntu-latest, self-hosted]\n    steps:\n\n    - name: Azure Login\n      uses: azure/login@v2\n      env:\n        AZURE_LOGIN_PRE_CLEANUP: ${{ startsWith(runner.name, 'GitHub Actions') }}\n        AZURE_LOGIN_POST_CLEANUP: ${{ startsWith(runner.name, 'GitHub Actions') }}\n      with:\n        client-id: ${{ secrets.AZURE_CLIENT_ID }}\n        tenant-id: ${{ secrets.AZURE_TENANT_ID }}\n        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}\n        enable-AzPSSession: true    \n\n    # run some actions\n\n```\n\n----------------------------------------\n\nTITLE: Login to Azure Stack Hub (YAML)\nDESCRIPTION: This workflow demonstrates how to log in to Azure Stack Hub using the azure/login@v2 action.  It specifies the Azure credentials using the creds input (stored as a GitHub secret) and sets the environment to 'AzureStack'.\nSOURCE: https://github.com/azure/login/blob/master/README.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n# File: .github/workflows/workflow.yml\n\non: [push]\n\nname: Login to Azure Stack Hub cloud\n\njobs:\n\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n\n    - uses: azure/login@v2\n      with:\n        creds: ${{ secrets.AZURE_CREDENTIALS }}\n        environment: 'AzureStack'\n        enable-AzPSSession: true\n```"
  }
]