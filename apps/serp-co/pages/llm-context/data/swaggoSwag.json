[
  {
    "owner": "swaggo",
    "repo": "swag",
    "content": "TITLE: Adding General API Annotations in Gin Main Function\nDESCRIPTION: Add Swagger annotations for general API information in the main.go file. This includes title, version, description, contact info, license, host, and base path.\nSOURCE: https://github.com/swaggo/swag/blob/master/README.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n// @title           Swagger Example API\n// @version         1.0\n// @description     This is a sample server celler server.\n// @termsOfService  http://swagger.io/terms/\n\n// @contact.name   API Support\n// @contact.url    http://www.swagger.io/support\n// @contact.email  support@swagger.io\n\n// @license.name  Apache 2.0\n// @license.url   http://www.apache.org/licenses/LICENSE-2.0.html\n\n// @host      localhost:8080\n// @BasePath  /api/v1\n\n// @securityDefinitions.basic  BasicAuth\n\n// @externalDocs.description  OpenAPI\n// @externalDocs.url          https://swagger.io/resources/open-api/\nfunc main() {\n\tr := gin.Default()\n\n\tc := controller.NewController()\n\n\tv1 := r.Group(\"/api/v1\")\n\t{\n\t\taccounts := v1.Group(\"/accounts\")\n\t\t{\n\t\t\taccounts.GET(\":id\", c.ShowAccount)\n\t\t\taccounts.GET(\"\", c.ListAccounts)\n\t\t\taccounts.POST(\"\", c.AddAccount)\n\t\t\taccounts.DELETE(\":id\", c.DeleteAccount)\n\t\t\taccounts.PATCH(\":id\", c.UpdateAccount)\n\t\t\taccounts.POST(\":id/images\", c.UploadAccountImage)\n\t\t}\n    //...\n\t}\n\tr.GET(\"/swagger/*any\", ginSwagger.WrapHandler(swaggerFiles.Handler))\n\tr.Run(\":8080\")\n}\n```\n\n----------------------------------------\n\nTITLE: Adding API Operation Annotations in Gin Controller\nDESCRIPTION: Add Swagger annotations for specific API operations in the controller code. This includes details like summary, description, parameters, responses, and routing information.\nSOURCE: https://github.com/swaggo/swag/blob/master/README.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\npackage controller\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"strconv\"\n\n    \"github.com/gin-gonic/gin\"\n    \"github.com/swaggo/swag/example/celler/httputil\"\n    \"github.com/swaggo/swag/example/celler/model\"\n)\n\n// ShowAccount godoc\n// @Summary      Show an account\n// @Description  get string by ID\n// @Tags         accounts\n// @Accept       json\n// @Produce      json\n// @Param        id   path      int  true  \"Account ID\"\n// @Success      200  {object}  model.Account\n// @Failure      400  {object}  httputil.HTTPError\n// @Failure      404  {object}  httputil.HTTPError\n// @Failure      500  {object}  httputil.HTTPError\n// @Router       /accounts/{id} [get]\nfunc (c *Controller) ShowAccount(ctx *gin.Context) {\n  id := ctx.Param(\"id\")\n  aid, err := strconv.Atoi(id)\n  if err != nil {\n    httputil.NewError(ctx, http.StatusBadRequest, err)\n    return\n  }\n  account, err := model.AccountOne(aid)\n  if err != nil {\n    httputil.NewError(ctx, http.StatusNotFound, err)\n    return\n  }\n  ctx.JSON(http.StatusOK, account)\n}\n\n// ListAccounts godoc\n// @Summary      List accounts\n// @Description  get accounts\n// @Tags         accounts\n// @Accept       json\n// @Produce      json\n// @Param        q    query     string  false  \"name search by q\"  Format(email)\n// @Success      200  {array}   model.Account\n// @Failure      400  {object}  httputil.HTTPError\n// @Failure      404  {object}  httputil.HTTPError\n// @Failure      500  {object}  httputil.HTTPError\n// @Router       /accounts [get]\nfunc (c *Controller) ListAccounts(ctx *gin.Context) {\n  q := ctx.Request.URL.Query().Get(\"q\")\n  accounts, err := model.AccountsAll(q)\n  if err != nil {\n    httputil.NewError(ctx, http.StatusNotFound, err)\n    return\n  }\n  ctx.JSON(http.StatusOK, accounts)\n}\n//...\n```\n\n----------------------------------------\n\nTITLE: Defining API Parameters with Swaggo Annotations in Go\nDESCRIPTION: Demonstrates how to define API parameters with various validations and attributes including enums, length constraints, and defaults.\nSOURCE: https://github.com/swaggo/swag/blob/master/README.md#2025-04-22_snippet_19\n\nLANGUAGE: go\nCODE:\n```\n// @Param   enumstring  query     string     false  \"string enums\"       Enums(A, B, C)\n// @Param   enumint     query     int        false  \"int enums\"          Enums(1, 2, 3)\n// @Param   enumnumber  query     number     false  \"int enums\"          Enums(1.1, 1.2, 1.3)\n// @Param   string      query     string     false  \"string valid\"       minlength(5)  maxlength(10)\n// @Param   int         query     int        false  \"int valid\"          minimum(1)    maximum(10)\n// @Param   default     query     string     false  \"string default\"     default(A)\n// @Param   example     query     string     false  \"string example\"     example(string)\n// @Param   collection  query     []string   false  \"string collection\"  collectionFormat(multi)\n// @Param   extensions  query     []string   false  \"string collection\"  extensions(x-example=test,x-nullable)\n```\n\n----------------------------------------\n\nTITLE: Defining API Title and Version in Swaggo/Swag\nDESCRIPTION: Examples of how to specify the API title and version using Swaggo/Swag annotations. These are required fields for the API documentation.\nSOURCE: https://github.com/swaggo/swag/blob/master/README.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n// @title Swagger Example API\n// @version 1.0\n```\n\n----------------------------------------\n\nTITLE: Defining Security Schemes in Swaggo/Swag\nDESCRIPTION: Examples of how to define various security schemes in Swaggo/Swag, including Basic Auth, API Key, and different OAuth2 flows.\nSOURCE: https://github.com/swaggo/swag/blob/master/README.md#2025-04-22_snippet_17\n\nLANGUAGE: go\nCODE:\n```\n// @securityDefinitions.basic BasicAuth\n// @securityDefinitions.apikey ApiKeyAuth\n// @securityDefinitions.oauth2.application OAuth2Application\n// @securityDefinitions.oauth2.implicit OAuth2Implicit\n// @securityDefinitions.oauth2.password OAuth2Password\n// @securityDefinitions.oauth2.accessCode OAuth2AccessCode\n```\n\n----------------------------------------\n\nTITLE: Using Security Annotations in Go for Swagger\nDESCRIPTION: Demonstrates how to use security annotations to define authentication methods and scopes in Swagger documentation for Go APIs.\nSOURCE: https://github.com/swaggo/swag/blob/master/README.md#2025-04-22_snippet_35\n\nLANGUAGE: go\nCODE:\n```\n// @securityDefinitions.basic BasicAuth\n\n// @securitydefinitions.oauth2.application OAuth2Application\n// @tokenUrl https://example.com/oauth/token\n// @scope.write Grants write access\n// @scope.admin Grants read and write access to administrative information\n\n// @Security ApiKeyAuth\n\n// @Security ApiKeyAuth\n// @Security OAuth2Application[write, admin]\n\n// @Security ApiKeyAuth && firebase\n// @Security OAuth2Application[write, admin] && APIKeyAuth\n```\n\n----------------------------------------\n\nTITLE: Defining Tags in Swaggo/Swag\nDESCRIPTION: Shows how to define tags and their descriptions using Swaggo/Swag annotations. Tags are used to group related API operations.\nSOURCE: https://github.com/swaggo/swag/blob/master/README.md#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\n// @tag.name This is the name of the tag\n// @tag.description.markdown\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Swagger Info in Gin Application\nDESCRIPTION: Dynamically set Swagger information using the SwaggerInfo variable exported by the generated docs package. This allows for programmatic configuration of title, description, version, host, and base path.\nSOURCE: https://github.com/swaggo/swag/blob/master/README.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/swaggo/files\"\n\t\"github.com/swaggo/gin-swagger\"\n\n\t\"./docs\" // docs is generated by Swag CLI, you have to import it.\n)\n\n// @contact.name   API Support\n// @contact.url    http://www.swagger.io/support\n// @contact.email  support@swagger.io\n\n// @license.name  Apache 2.0\n// @license.url   http://www.apache.org/licenses/LICENSE-2.0.html\nfunc main() {\n\n\t// programmatically set swagger info\n\tdocs.SwaggerInfo.Title = \"Swagger Example API\"\n\tdocs.SwaggerInfo.Description = \"This is a sample server Petstore server.\"\n\tdocs.SwaggerInfo.Version = \"1.0\"\n\tdocs.SwaggerInfo.Host = \"petstore.swagger.io\"\n\tdocs.SwaggerInfo.BasePath = \"/v2\"\n\tdocs.SwaggerInfo.Schemes = []string{\"http\", \"https\"}\n\n\tr := gin.New()\n\n\t// use ginSwagger middleware to serve the API docs\n\tr.GET(\"/swagger/*any\", ginSwagger.WrapHandler(swaggerFiles.Handler))\n\n\tr.Run()\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Swag Documentation Generation\nDESCRIPTION: Command to initialize swag in the project's root folder. This parses comments and generates required documentation files.\nSOURCE: https://github.com/swaggo/swag/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nswag init\n```\n\n----------------------------------------\n\nTITLE: Importing Generated Swagger Documentation in Go\nDESCRIPTION: Code snippet showing how to import the generated docs package in your Go application to initialize the Swagger configuration.\nSOURCE: https://github.com/swaggo/swag/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport _ \"example-module-name/docs\"\n```\n\n----------------------------------------\n\nTITLE: Importing Swag Packages for Gin Integration\nDESCRIPTION: Import the necessary packages to use Swag with Gin. This includes the Gin-Swagger middleware and Swagger embed files.\nSOURCE: https://github.com/swaggo/swag/blob/master/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/swaggo/gin-swagger\" // gin-swagger middleware\nimport \"github.com/swaggo/files\" // swagger embed files\n```\n\n----------------------------------------\n\nTITLE: Specifying Security Parameters in Swaggo/Swag\nDESCRIPTION: Shows how to specify various security parameters in Swaggo/Swag, such as the location of the security token, authorization URLs, and scope descriptions.\nSOURCE: https://github.com/swaggo/swag/blob/master/README.md#2025-04-22_snippet_18\n\nLANGUAGE: go\nCODE:\n```\n// @in header\n// @name Authorization\n// @tokenUrl https://example.com/oauth/token\n// @authorizationurl https://example.com/oauth/authorize\n// @scope.write Grants write access\n// @description OAuth protects our entity endpoints\n```\n\n----------------------------------------\n\nTITLE: Using Markdown Descriptions in Swaggo/Swag\nDESCRIPTION: Demonstrates how to use markdown files for descriptions in Swaggo/Swag. This allows for more detailed and formatted descriptions in the API documentation.\nSOURCE: https://github.com/swaggo/swag/blob/master/README.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n// @description.markdown No value needed, this parses the description from api.md\n```\n\n----------------------------------------\n\nTITLE: Defining API Operation Description in Swaggo/Swag\nDESCRIPTION: Demonstrates how to specify a description for an API operation using a markdown file. This allows for more detailed operation descriptions.\nSOURCE: https://github.com/swaggo/swag/blob/master/README.md#2025-04-22_snippet_16\n\nLANGUAGE: go\nCODE:\n```\n// @description.file endpoint.description.markdown\n```\n\n----------------------------------------\n\nTITLE: Multi-line API Descriptions in Go\nDESCRIPTION: Shows how to write API descriptions spanning multiple lines using Swaggo annotations.\nSOURCE: https://github.com/swaggo/swag/blob/master/README.md#2025-04-22_snippet_21\n\nLANGUAGE: go\nCODE:\n```\n// @description This is the first line\n// @description This is the second line\n// @description And so forth.\n```\n\n----------------------------------------\n\nTITLE: Using Markdown Description in API Documentation with swag\nDESCRIPTION: This example demonstrates how to use Markdown-formatted descriptions in Swagger documentation comments. It shows how to define a route with description text that includes rich formatting like headers, bullet points, and code examples.\nSOURCE: https://github.com/swaggo/swag/blob/master/testdata/users.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// @Summary Show an account\n// @Description get string by ID\n// @Description markdown descriptions can be multiline and support **MarkDown**. For example:\n// @Description <pre>MarkDown</pre> <br>\n// @Description <pre><code>{\n// @Description     \"status\": true,\n// @Description     \"msg\": \"OK\"\n// @Description }</code></pre>\n// @Accept  json\n// @Produce  json\n// @Param some_id path int true \"Some ID\"\n// @Success 200 {string} string\t\"ok\"\n// @Failure 400 {object} web.APIError \"We need ID!!\"\n// @Failure 404 {object} web.APIError \"Can not find ID\"\n// @Router /testapi/get-string-by-int/{some_id} [get]\n```\n\n----------------------------------------\n\nTITLE: Request Header Parameters in Go\nDESCRIPTION: Shows how to define request header parameters in API documentation.\nSOURCE: https://github.com/swaggo/swag/blob/master/README.md#2025-04-22_snippet_25\n\nLANGUAGE: go\nCODE:\n```\n// @Param        X-MyHeader\t  header    string    true   \t\"MyHeader must be set for valid response\"\n// @Param        X-API-VERSION    header    string    true   \t\"API version eg.: 1.0\"\n```\n\n----------------------------------------\n\nTITLE: Response Headers and Status Codes in Go\nDESCRIPTION: Demonstrates how to define response headers and status codes with their descriptions.\nSOURCE: https://github.com/swaggo/swag/blob/master/README.md#2025-04-22_snippet_26\n\nLANGUAGE: go\nCODE:\n```\n// @Success      200              {string}  string    \"ok\"\n// @failure      400              {string}  string    \"error\"\n// @response     default          {string}  string    \"other error\"\n// @Header       200              {string}  Location  \"/entity/1\"\n// @Header       200,400,default  {string}  Token     \"token\"\n// @Header       all              {string}  Token2    \"token2\"\n```\n\n----------------------------------------\n\nTITLE: Using Extension Keys in Swaggo/Swag\nDESCRIPTION: Example of how to use extension keys in Swaggo/Swag. Extension keys must start with 'x-' and only accept string values.\nSOURCE: https://github.com/swaggo/swag/blob/master/README.md#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\n// @x-example-key value\n```\n\n----------------------------------------\n\nTITLE: Struct Field Validation in Go\nDESCRIPTION: Shows how to apply validation tags to struct fields including length constraints, numeric bounds, and enums.\nSOURCE: https://github.com/swaggo/swag/blob/master/README.md#2025-04-22_snippet_20\n\nLANGUAGE: go\nCODE:\n```\ntype Foo struct {\n    Bar string `minLength:\"4\" maxLength:\"16\" example:\"random string\"`\n    Baz int `minimum:\"10\" maximum:\"20\" default:\"15\"`\n    Qux []string `enums:\"foo,bar,baz\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Model Account Structure Definition in Go\nDESCRIPTION: Defines an Account model structure with JSON tags and example values.\nSOURCE: https://github.com/swaggo/swag/blob/master/README.md#2025-04-22_snippet_22\n\nLANGUAGE: go\nCODE:\n```\npackage model\n\ntype Account struct {\n    ID   int    `json:\"id\" example:\"1\"`\n    Name string `json:\"name\" example:\"account name\"`\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Result Structure Definition in Go\nDESCRIPTION: Defines structures for JSON response handling with generic data fields.\nSOURCE: https://github.com/swaggo/swag/blob/master/README.md#2025-04-22_snippet_24\n\nLANGUAGE: go\nCODE:\n```\ntype JSONResult struct {\n    Code    int          `json:\"code\" `\n    Message string       `json:\"message\"`\n    Data    interface{}  `json:\"data\"`\n}\n\ntype Order struct { //in `proto` package\n    Id  uint            `json:\"id\"`\n    Data  interface{}   `json:\"data\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced Account Structure with Examples in Go\nDESCRIPTION: Shows an Account structure with JSON tags and example values including array fields.\nSOURCE: https://github.com/swaggo/swag/blob/master/README.md#2025-04-22_snippet_27\n\nLANGUAGE: go\nCODE:\n```\ntype Account struct {\n    ID   int    `json:\"id\" example:\"1\"`\n    Name string `json:\"name\" example:\"account name\"`\n    PhotoUrls []string `json:\"photo_urls\" example:\"http://test/image/1.jpg,http://test/image/2.jpg\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Documented Account Structure in Go\nDESCRIPTION: Demonstrates how to add descriptions to struct and its fields using comments.\nSOURCE: https://github.com/swaggo/swag/blob/master/README.md#2025-04-22_snippet_28\n\nLANGUAGE: go\nCODE:\n```\n// Account model info\n// @Description User account information\n// @Description with user id and username\ntype Account struct {\n\t// ID this is userid\n\tID   int    `json:\"id\"`\n\tName string `json:\"name\"` // This is Name\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Types with swaggertype Tag in Go\nDESCRIPTION: Demonstrates how to use the swaggertype tag to override primitive types and struct types when generating Swagger documentation. It shows examples for integer, primitive, and array type overrides.\nSOURCE: https://github.com/swaggo/swag/blob/master/README.md#2025-04-22_snippet_29\n\nLANGUAGE: go\nCODE:\n```\ntype TimestampTime struct {\n    time.Time\n}\n\n///implement encoding.JSON.Marshaler interface\nfunc (t *TimestampTime) MarshalJSON() ([]byte, error) {\n    bin := make([]byte, 16)\n    bin = strconv.AppendInt(bin[:0], t.Time.Unix(), 10)\n    return bin, nil\n}\n\nfunc (t *TimestampTime) UnmarshalJSON(bin []byte) error {\n    v, err := strconv.ParseInt(string(bin), 10, 64)\n    if err != nil {\n        return err\n    }\n    t.Time = time.Unix(v, 0)\n    return nil\n}\n///\n\ntype Account struct {\n    // Override primitive type by simply specifying it via `swaggertype` tag\n    ID     sql.NullInt64 `json:\"id\" swaggertype:\"integer\"`\n\n    // Override struct type to a primitive type 'integer' by specifying it via `swaggertype` tag\n    RegisterTime TimestampTime `json:\"register_time\" swaggertype:\"primitive,integer\"`\n\n    // Array types can be overridden using \"array,<prim_type>\" format\n    Coeffs []big.Float `json:\"coeffs\" swaggertype:\"array,number\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Using swaggertype Tag for Base64 Encoding in Go\nDESCRIPTION: Shows how to use the swaggertype tag to specify base64 encoding for byte array fields when generating Swagger documentation.\nSOURCE: https://github.com/swaggo/swag/blob/master/README.md#2025-04-22_snippet_30\n\nLANGUAGE: go\nCODE:\n```\ntype CerticateKeyPair struct {\n\tCrt []byte `json:\"crt\" swaggertype:\"string\" format:\"base64\" example:\"U3dhZ2dlciByb2Nrcw==\"`\n\tKey []byte `json:\"key\" swaggertype:\"string\" format:\"base64\" example:\"U3dhZ2dlciByb2Nrcw==\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Global Type Overrides for Swagger Generation in Go\nDESCRIPTION: Demonstrates how to use a .swaggo file to globally override types when generating Swagger documentation, useful for generated files where adding tags may not be possible.\nSOURCE: https://github.com/swaggo/swag/blob/master/README.md#2025-04-22_snippet_31\n\nLANGUAGE: go\nCODE:\n```\ntype MyStruct struct {\n  ID     sql.NullInt64 `json:\"id\"`\n  Name   sql.NullString `json:\"name\"`\n}\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n// Replace all NullInt64 with int\nreplace database/sql.NullInt64 int\n\n// Don't include any fields of type database/sql.NullString in the swagger docs\nskip    database/sql.NullString\n```\n\n----------------------------------------\n\nTITLE: Excluding Fields from Swagger Documentation in Go\nDESCRIPTION: Shows how to use the swaggerignore tag to exclude specific fields from being included in the generated Swagger documentation.\nSOURCE: https://github.com/swaggo/swag/blob/master/README.md#2025-04-22_snippet_32\n\nLANGUAGE: go\nCODE:\n```\ntype Account struct {\n    ID   string    `json:\"id\"`\n    Name string     `json:\"name\"`\n    Ignored int     `swaggerignore:\"true\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Extension Info to Struct Fields in Go\nDESCRIPTION: Demonstrates how to add custom extension information to struct fields using the extensions tag when generating Swagger documentation.\nSOURCE: https://github.com/swaggo/swag/blob/master/README.md#2025-04-22_snippet_33\n\nLANGUAGE: go\nCODE:\n```\ntype Account struct {\n    ID   string    `json:\"id\"   extensions:\"x-nullable,x-abc=def,!x-omitempty\"` // extensions fields must start with \"x-\"\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming Models in Swagger Documentation for Go\nDESCRIPTION: Shows how to rename a model in the generated Swagger documentation using a special comment annotation.\nSOURCE: https://github.com/swaggo/swag/blob/master/README.md#2025-04-22_snippet_34\n\nLANGUAGE: go\nCODE:\n```\ntype Resp struct {\n\tCode int\n}//@name Response\n```\n\n----------------------------------------\n\nTITLE: Adding Descriptions for Enum Items in Go\nDESCRIPTION: Shows how to add descriptions for enum items in struct fields when generating Swagger documentation for Go code.\nSOURCE: https://github.com/swaggo/swag/blob/master/README.md#2025-04-22_snippet_36\n\nLANGUAGE: go\nCODE:\n```\ntype Example struct {\n\t// Sort order:\n\t// * asc - Ascending, from A to Z.\n\t// * desc - Descending, from Z to A.\n\tOrder string `enums:\"asc,desc\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generics in Swagger Documentation for Go\nDESCRIPTION: Demonstrates how to use generics in Swagger annotations for Go, including nested generic types and multiple type parameters.\nSOURCE: https://github.com/swaggo/swag/blob/master/README.md#2025-04-22_snippet_37\n\nLANGUAGE: go\nCODE:\n```\n// @Success 200 {object} web.GenericNestedResponse[types.Post]\n// @Success 204 {object} web.GenericNestedResponse[types.Post, Types.AnotherOne]\n// @Success 201 {object} web.GenericNestedResponse[web.GenericInnerType[types.Post]]\nfunc GetPosts(w http.ResponseWriter, r *http.Request) {\n\t_ = web.GenericNestedResponse[types.Post]{}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Swag CLI Tool\nDESCRIPTION: Command to install the swag CLI tool using Go. This installs the latest version of swag from GitHub.\nSOURCE: https://github.com/swaggo/swag/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo install github.com/swaggo/swag/cmd/swag@latest\n```\n\n----------------------------------------\n\nTITLE: Running Swag via Docker\nDESCRIPTION: Command to run swag using Docker. This mounts the current directory to the container and executes the swag command.\nSOURCE: https://github.com/swaggo/swag/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker run --rm -v $(pwd):/code ghcr.io/swaggo/swag:latest\n```\n\n----------------------------------------\n\nTITLE: Initializing Swag with Custom API Location\nDESCRIPTION: Command to initialize swag with a custom location for the General API annotations using the -g flag.\nSOURCE: https://github.com/swaggo/swag/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nswag init -g http/api.go\n```\n\n----------------------------------------\n\nTITLE: Formatting Swag Comments\nDESCRIPTION: Command to format the SWAG comments in your codebase. This ensures consistent formatting of documentation comments.\nSOURCE: https://github.com/swaggo/swag/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nswag fmt\n```\n\n----------------------------------------\n\nTITLE: Swag Init Command Help\nDESCRIPTION: Help output for the swag init command, showing all available options and flags for generating Swagger documentation.\nSOURCE: https://github.com/swaggo/swag/blob/master/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nswag init -h\nNAME:\n   swag init - Create docs.go\n\nUSAGE:\n   swag init [command options] [arguments...]\n\nOPTIONS:\n   --quiet, -q                            Make the logger quiet. (default: false)\n   --generalInfo value, -g value          Go file path in which 'swagger general API Info' is written (default: \"main.go\")\n   --dir value, -d value                  Directories you want to parse,comma separated and general-info file must be in the first one (default: \"./\")\n   --exclude value                        Exclude directories and files when searching, comma separated\n   --propertyStrategy value, -p value     Property Naming Strategy like snakecase,camelcase,pascalcase (default: \"camelcase\")\n   --output value, -o value               Output directory for all the generated files(swagger.json, swagger.yaml and docs.go) (default: \"./docs\")\n   --outputTypes value, --ot value        Output types of generated files (docs.go, swagger.json, swagger.yaml) like go,json,yaml (default: \"go,json,yaml\")\n   --parseVendor                          Parse go files in 'vendor' folder, disabled by default (default: false)\n   --parseDependency, --pd                Parse go files inside dependency folder, disabled by default (default: false)\n   --parseDependencyLevel, --pdl          Enhancement of '--parseDependency', parse go files inside dependency folder, 0 disabled, 1 only parse models, 2 only parse operations, 3 parse all (default: 0)\n   --markdownFiles value, --md value      Parse folder containing markdown files to use as description, disabled by default\n   --codeExampleFiles value, --cef value  Parse folder containing code example files to use for the x-codeSamples extension, disabled by default\n   --parseInternal                        Parse go files in internal packages, disabled by default (default: false)\n   --generatedTime                        Generate timestamp at the top of docs.go, disabled by default (default: false)\n   --parseDepth value                     Dependency parse depth (default: 100)\n   --requiredByDefault                    Set validation required for all fields by default (default: false)\n   --instanceName value                   This parameter can be used to name different swagger document instances. It is optional.\n   --overridesFile value                  File to read global type overrides from. (default: \".swaggo\")\n   --parseGoList                          Parse dependency via 'go list' (default: true)\n   --tags value, -t value                 A comma-separated list of tags to filter the APIs for which the documentation is generated.Special case if the tag is prefixed with the '!' character then the APIs with that tag will be excluded\n   --templateDelims value, --td value     Provide custom delimiters for Go template generation. The format is leftDelim,rightDelim. For example: \"[[,]]\"\n   --collectionFormat value, --cf value   Set default collection format (default: \"csv\")\n   --state value                          Initial state for the state machine (default: \"\"), @HostState in root file, @State in other files\n   --parseFuncBody                        Parse API info within body of functions in go files, disabled by default (default: false)\n   --help, -h                             show help (default: false)\n```\n\n----------------------------------------\n\nTITLE: Swag Format Command Help\nDESCRIPTION: Help output for the swag fmt command, showing all available options for formatting SWAG comments in your codebase.\nSOURCE: https://github.com/swaggo/swag/blob/master/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nswag fmt -h\nNAME:\n   swag fmt - format swag comments\n\nUSAGE:\n   swag fmt [command options] [arguments...]\n\nOPTIONS:\n   --dir value, -d value          Directories you want to parse,comma separated and general-info file must be in the first one (default: \"./\")\n   --exclude value                Exclude directories and files when searching, comma separated\n   --generalInfo value, -g value  Go file path in which 'swagger general API Info' is written (default: \"main.go\")\n   --help, -h                     show help (default: false)\n```\n\n----------------------------------------\n\nTITLE: Function-Scoped Struct Declarations in Go\nDESCRIPTION: Demonstrates how to declare request/response structs inside a function body with proper naming conventions.\nSOURCE: https://github.com/swaggo/swag/blob/master/README.md#2025-04-22_snippet_23\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\n// @Param request body main.MyHandler.request true \"query params\"\n// @Success 200 {object} main.MyHandler.response\n// @Router /test [post]\nfunc MyHandler() {\n\ttype request struct {\n\t\tRequestField string\n\t}\n\n\ttype response struct {\n\t\tResponseField string\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding General API Annotations in Go\nDESCRIPTION: Example of adding general API annotations to the main.go file of a Go project. These annotations provide overall API information like title, version, and license.\nSOURCE: https://github.com/swaggo/swag/blob/master/README_zh-CN.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// @title           Swagger Example API\n// @version         1.0\n// @description     This is a sample server celler server.\n// @termsOfService  http://swagger.io/terms/\n\n// @contact.name   API Support\n// @contact.url    http://www.swagger.io/support\n// @contact.email  support@swagger.io\n\n// @license.name  Apache 2.0\n// @license.url   http://www.apache.org/licenses/LICENSE-2.0.html\n\n// @host      localhost:8080\n// @BasePath  /api/v1\n\n// @securityDefinitions.basic  BasicAuth\n\n// @externalDocs.description  OpenAPI\n// @externalDocs.url          https://swagger.io/resources/open-api/\nfunc main() {\n    // ... rest of the main function\n}\n```\n\n----------------------------------------\n\nTITLE: Adding API Operation Annotations in Go Controller\nDESCRIPTION: Example of adding detailed API operation annotations to a controller function in Go. These annotations describe the API endpoint, parameters, responses, and other details.\nSOURCE: https://github.com/swaggo/swag/blob/master/README_zh-CN.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// ShowAccount godoc\n// @Summary      Show an account\n// @Description  get string by ID\n// @Tags         accounts\n// @Accept       json\n// @Produce      json\n// @Param        id   path      int  true  \"Account ID\"\n// @Success      200  {object}  model.Account\n// @Failure      400  {object}  httputil.HTTPError\n// @Failure      404  {object}  httputil.HTTPError\n// @Failure      500  {object}  httputil.HTTPError\n// @Router       /accounts/{id} [get]\nfunc (c *Controller) ShowAccount(ctx *gin.Context) {\n    // ... function implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Setting Swagger Info in Go\nDESCRIPTION: Example of how to programmatically set Swagger information using the SwaggerInfo variable exported by the generated docs package.\nSOURCE: https://github.com/swaggo/swag/blob/master/README_zh-CN.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/gin-gonic/gin\"\n    \"github.com/swaggo/files\"\n    \"github.com/swaggo/gin-swagger\"\n\n    \"./docs\" // docs is generated by Swag CLI, you have to import it.\n)\n\nfunc main() {\n    // programatically set swagger info\n    docs.SwaggerInfo.Title = \"Swagger Example API\"\n    docs.SwaggerInfo.Description = \"This is a sample server Petstore server.\"\n    docs.SwaggerInfo.Version = \"1.0\"\n    docs.SwaggerInfo.Host = \"petstore.swagger.io\"\n    docs.SwaggerInfo.BasePath = \"/v2\"\n    docs.SwaggerInfo.Schemes = []string{\"http\", \"https\"}\n\n    // ... rest of the main function\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Swagger UI with Gin Web Framework\nDESCRIPTION: Go code snippet showing how to import necessary packages and set up Swagger UI routes in a Gin web application.\nSOURCE: https://github.com/swaggo/swag/blob/master/README_zh-CN.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/swaggo/gin-swagger\" // gin-swagger middleware\nimport \"github.com/swaggo/files\" // swagger embed files\n\n// ... in main() function\nr.GET(\"/swagger/*any\", ginSwagger.WrapHandler(swaggerFiles.Handler))\n```\n\n----------------------------------------\n\nTITLE: Generating Swagger Documentation with Swag\nDESCRIPTION: Command to run Swag and generate Swagger documentation. This should be executed in the project root directory containing the main.go file.\nSOURCE: https://github.com/swaggo/swag/blob/master/README_zh-CN.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nswag init\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom API File for Swag\nDESCRIPTION: Command to run Swag with a custom API file location using the -g flag. This is useful when the general API annotations are not in main.go.\nSOURCE: https://github.com/swaggo/swag/blob/master/README_zh-CN.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nswag init -g http/api.go\n```\n\n----------------------------------------\n\nTITLE: Formatting Swag Annotations\nDESCRIPTION: Command to format Swag annotations in Go files. This helps maintain consistent annotation style across the project.\nSOURCE: https://github.com/swaggo/swag/blob/master/README_zh-CN.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nswag fmt\n```\n\n----------------------------------------\n\nTITLE: Installing Swag CLI Tool in Go\nDESCRIPTION: Command to install the Swag CLI tool using Go's package manager. This tool is used to generate Swagger documentation from Go annotations.\nSOURCE: https://github.com/swaggo/swag/blob/master/README_zh-CN.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/swaggo/swag/cmd/swag@latest\n```\n\n----------------------------------------\n\nTITLE: Regenerating Swag API Documentation with CLI Command\nDESCRIPTION: Command to regenerate API documentation using the swag CLI tool. The command initializes documentation and outputs in markdown format to the current directory.\nSOURCE: https://github.com/swaggo/swag/blob/master/example/markdown/api.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nswag init --md .\n```\n\n----------------------------------------\n\nTITLE: Creating Feature Branch with Git\nDESCRIPTION: Command to create a new feature branch from the current branch.\nSOURCE: https://github.com/swaggo/swag/blob/master/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: git\nCODE:\n```\ngit checkout -b my-new-feature\n```\n\n----------------------------------------\n\nTITLE: Committing Changes with Git\nDESCRIPTION: Command to commit changes with a descriptive message.\nSOURCE: https://github.com/swaggo/swag/blob/master/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: git\nCODE:\n```\ngit commit -am 'Add some feature'\n```\n\n----------------------------------------\n\nTITLE: Pushing Branch to Remote Repository\nDESCRIPTION: Command to push the feature branch to the remote repository.\nSOURCE: https://github.com/swaggo/swag/blob/master/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: git\nCODE:\n```\ngit push origin my-new-feature\n```"
  }
]