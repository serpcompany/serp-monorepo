[
  {
    "owner": "ironmansoftware",
    "repo": "universal-docs",
    "content": "TITLE: Installing PowerShell Universal on Windows\nDESCRIPTION: This snippet shows how to install PowerShell Universal as a service on Windows. It requires running PowerShell as administrator.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/get-started.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Module Universal\nInstall-PSUServer\n```\n\n----------------------------------------\n\nTITLE: Creating Asynchronous Report Generation API Endpoints in PowerShell Universal\nDESCRIPTION: This snippet creates two API endpoints that implement an asynchronous report generation pattern. The first endpoint starts a job and returns the job ID, while the second endpoint retrieves the output for a specific job, preventing HTTP thread pool exhaustion.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/best-practices.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUEndpoint -Url '/createReport' -Method POST -Endpoint {\n    (Invoke-PSUScript -Name CreateReport.ps1 -Integrated)\n}\n\nNew-PSUEndpoint -Url '/createReport/:id' -Method GET -Endpoint {\n     Get-PSUJob -Id $Id -Integrated | Get-PSUJobPipelineOutput -Integrated\n}\n```\n\n----------------------------------------\n\nTITLE: Forms Authentication with Active Directory in PowerShell Universal\nDESCRIPTION: This script performs forms authentication using Active Directory credentials. It conducts a simple LDAP bind to validate user credentials and can be combined with AD group membership checks for role-based access control.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/security/authorization.md#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nparam(\n    [PSCredential]$Credential\n)\n\n#\n#   You can call whatever cmdlets you like to conduct authentication here.\n#   Just make sure to return the $Result with the Success property set to $true\n#\n\n$Result = [Security.AuthenticationResult]::new()\nif ($Credential.UserName -eq 'Admin') \n{\n    #Maintain the out of box admin user\n    $Result.UserName = 'Default Admin'\n    $Result.Success = $true \n}\nelse\n{\n    # Get current domain using logged-on user's credentials - this validates their credential\n    $CurrentDomain = \"LDAP://DC=mydemodomain,DC=com\"  # Insert Your Domain Here\n    $domain = New-Object System.DirectoryServices.DirectoryEntry($CurrentDomain,($Credential.UserName),$Credential.GetNetworkCredential().password)\n\n    if ($domain.name -eq $null)\n    {\n        \"Authentication failed for $($Credential.UserName)!\" | Out-File \"C:\\test\\adlogin.txt\"\n        write-host \"Authentication failed - please verify your username and password.\"\n        $Result.UserName = ($Credential.UserName)\n        $Result.Success = $false \n    }\n    else\n    {\n        write-host \"Successfully authenticated with domain $($domain.name)\"\n        \"Authentication success for $($Credential.UserName)!\" | Out-File \"C:\\test\\adlogin.txt\"\n        $Result.UserName = ($Credential.UserName)\n        $Result.Success = $true \n    }\n}\n\n$Result\n```\n\n----------------------------------------\n\nTITLE: Configuring Attribute Filter Policy in Shibboleth IDP\nDESCRIPTION: Defines attribute filter policies that control which attributes are released to service providers. Configures rules to permit release of username, display name, UID, email, and surname attributes.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/security/enterprise-security/saml2.md#2025-04-16_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<AttributeFilterPolicyGroup id=\"ShibbolethFilterPolicy\"\n        xmlns=\"urn:mace:shibboleth:2.0:afp\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"urn:mace:shibboleth:2.0:afp http://shibboleth.net/schema/idp/shibboleth-afp.xsd\">\n\n<AttributeFilterPolicy id=\"example1\">\n        <PolicyRequirementRule xsi:type=\"ANY\" />\n        <AttributeRule attributeID=\"username\">\n            <PermitValueRule xsi:type=\"ANY\" />\n        </AttributeRule>\n        <AttributeRule attributeID=\"displayName\">\n            <PermitValueRule xsi:type=\"ANY\" />\n        </AttributeRule>\n        <AttributeRule attributeID=\"uid\">\n            <PermitValueRule xsi:type=\"ANY\" />\n        </AttributeRule>\n        <AttributeRule attributeID=\"mail\">\n            <PermitValueRule xsi:type=\"ANY\" />\n        </AttributeRule>\n        <AttributeRule attributeID=\"sn\">\n            <PermitValueRule xsi:type=\"ANY\" />\n        </AttributeRule>\n    </AttributeFilterPolicy>\n \n\n\n</AttributeFilterPolicyGroup>\n```\n\n----------------------------------------\n\nTITLE: Data Repository Configuration\nDESCRIPTION: Configuration settings for repository path, database connection, Git integration, and configuration scripts.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/settings.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n\"Data\": {\n  \"RepositoryPath\": \"%ProgramData%\\\\UniversalAutomation\\\\Repository\",\n  \"ConnectionString\": \"%ProgramData%\\\\UniversalAutomation\\\\database.db\",\n  \"GitRemote\": \"\",\n  \"GitUserName\": \"\",\n  \"GitPassword\": \"\", \n  \"GitBranch\": \"\",\n  \"ConfigurationScript\": \"\",\n  \"ExternalGitClient\": false,\n  \"Mode\": \"automatic\"\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Authentication Methods in PowerShell Universal\nDESCRIPTION: Demonstrates how to set up multiple authentication methods in PowerShell Universal using Windows and OpenID Connect. Windows authentication will be the default method since it's configured first. OpenID Connect login is available through the login page.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/security/enterprise-security/README.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PSUAuthenticationMethod -Type 'Windows'\nSet-PSUAuthenticationMethod -Type 'OpenIDConnect'\n```\n\n----------------------------------------\n\nTITLE: Creating a Secure API Endpoint with Param Block\nDESCRIPTION: Shows how to secure an API endpoint against CWE-914 by explicitly defining acceptable parameters using a param block, which prevents arbitrary variable injection.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/endpoints.md#2025-04-16_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUEndpoint -Url \"/api/v1.0/CWE914Test\" -Description \"Not Vulnerable to CWE-914\" -Endpoint {\n\tParam(\n\t\t$ChallengeInputData\n\t)\n\tif($ChallengeInputData -eq \"AcceptableInput\") {\n\t\t$IsChallengePassed = $true\n\t}\n\tif($IsChallengePassed) {\n\t\t\"Challenge passed. Here is Sensitive Information\"\n\t} else {\n\t\t\"Challenge not passed\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Node Cache Persistence in PowerShell Universal\nDESCRIPTION: To ensure cache data is shared across all nodes in a PowerShell Universal cluster, the -Persist parameter must be used with Set-PSUCache cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/hosting/high-availability.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PSUCache -Persist\n```\n\n----------------------------------------\n\nTITLE: Password Validation in Forms Authentication Script\nDESCRIPTION: This script shows how to validate both username and password in a forms authentication script for PowerShell Universal. It uses the GetNetworkCredential() method to access the password.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/security/forms-authentication.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nparam(\n    [PSCredential]$Credential\n)\n\n#\n#   You can call whatever cmdlets you like to conduct authentication here.\n#   Just make sure to return the $Result with the Success property set to $true\n#\n\nif ($Credential.UserName -eq 'Admin' -and $Credential.GetNetworkCredential().Password -eq 'MySuperSecretPassword') \n{\n    New-PSUAuthenticationResult -Success -UserName 'Admin'\n}\nelse \n{\n    New-PSUAuthenticationResult -ErrorMessage 'Bad username or password'\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Forms Authentication with Active Directory in PowerShell Universal\nDESCRIPTION: This script provides an example of forms authentication using Active Directory in PowerShell Universal. It performs an LDAP bind to validate user credentials and can be combined with AD group membership checks for role-based access control.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/security/README.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nparam(\n    [PSCredential]$Credential\n)\n\n#\n#   You can call whatever cmdlets you like to conduct authentication here.\n#   Just make sure to return the $Result with the Success property set to $true\n#\n\n$Result = [Security.AuthenticationResult]::new()\nif ($Credential.UserName -eq 'Admin') \n{\n    #Maintain the out of box admin user\n    $Result.UserName = 'Default Admin'\n    $Result.Success = $true \n}\nelse\n{\n    # Get current domain using logged-on user's credentials - this validates their credential\n    $CurrentDomain = \"LDAP://DC=mydemodomain,DC=com\"  # Insert Your Domain Here\n    $domain = New-Object System.DirectoryServices.DirectoryEntry($CurrentDomain,($Credential.UserName),$Credential.GetNetworkCredential().password)\n\n    if ($domain.name -eq $null)\n    {\n        \"Authentication failed for $($Credential.UserName)!\" | Out-File \"C:\\test\\adlogin.txt\"\n        write-host \"Authentication failed - please verify your username and password.\"\n        $Result.UserName = ($Credential.UserName)\n        $Result.Success = $false \n    }\n    else\n    {\n        write-host \"Successfully authenticated with domain $($domain.name)\"\n        \"Authentication success for $($Credential.UserName)!\" | Out-File \"C:\\test\\adlogin.txt\"\n        $Result.UserName = ($Credential.UserName)\n        $Result.Success = $true \n    }\n}\n\n$Result\n```\n\n----------------------------------------\n\nTITLE: Setting Default Admin Credentials in PowerShell Universal\nDESCRIPTION: Environment variables to set the default admin name and password for PowerShell Universal. These values are only used if no administrator account already exists, making them useful for cloud-based installations.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/README.md#2025-04-16_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\n$ENV:PSUDefaultAdminName\n$ENV:PSUDefaultAdminPassword\n```\n\n----------------------------------------\n\nTITLE: Creating Role based on Azure Active Directory Group Membership in PowerShell Universal\nDESCRIPTION: This snippet shows how to create a role in PowerShell Universal based on Azure Active Directory group membership. It uses claims mapping to associate an Azure AD group ID with a PowerShell Universal role.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/security/authorization.md#2025-04-16_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSURole -Name 'Administrators' -ClaimType 'groups' -ClaimValue '4acabc67-56cc-4590-9de6-164f3c4faf10'\n```\n\n----------------------------------------\n\nTITLE: Querying SQL Database and Creating Data Grid Dashboard in PowerShell\nDESCRIPTION: This snippet defines a function 'Out-UDSQLDataGrid' for querying SQL data with filtering and pagination. It then creates a dashboard using New-UDDashboard and New-UDDataGrid to display the query results. The function handles various filter types and sorting options.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/data-grid.md#2025-04-16_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\nfunction Out-UDSQLDataGrid {\n    param(\n        $Context,\n        [Parameter(Mandatory)]\n        [string]$Table,\n        [Parameter(Mandatory)]\n        [string]$SqlInstance,\n        [Parameter(Mandatory)]\n        [string]$Database,\n        [Parameter(Mandatory)]\n        [pscredential]$SqlCredential,\n        [Int32]$RowsPerPage\n    )\n\n    End {\n        $simpleFilter = @()\n\n        if ($null -ne $Context.Filter.Items -and $Context.Filter.Items.Count -gt 0) {\n            $logicOperator = $Context.Filter.logicOperator #The link operator is 'AND' or 'OR'. It will always be one or the other for all properties\n\n            foreach ($item in $Context.Filter.Items) {         \n                $simpleFilter += [PSCustomObject]@{\n                    Property = $item.Field\n                    Value    = $item.Value\n                    Operator = $item.Operator\n                }\n            }\n        }\n\n        if ($null -ne $simpleFilter -and $simpleFilter.Count -gt 0) {\n            $count = 1\n            foreach ($filter in $simpleFilter) {\n                if ($count -gt 1) {               \n                    $SqlFilter += \" $($logicOperator) \"\n                }\n                else {\n                    $SqlFilter += \" WHERE \"\n                }\n\n                switch ($filter.Operator) {\n                    \"contains\" { $SqlFilter += \" $($filter.Property) LIKE '%$($filter.Value)%' \" }\n                    \"equals\" { $SqlFilter += \" $($filter.Property) = '$($filter.Value)' \" }\n                    \"startsWith\" { $SqlFilter += \" $($filter.Property) LIKE '$($filter.Value)%' \" }\n                    \"endsWith\" { $SqlFilter += \" $($filter.Property) LIKE '%$($filter.Value)' \" }\n                    \"isAnyOf\" {\n                        $count = 1\n                        foreach ($val in $filter.Value) {\n                            if ($count -gt 1) {\n                                $list += \", '$val'\"\n                            }\n                            else {\n                                $list += \"'$val'\"\n                            }  \n                            $count += 1\n                        }\n                        $SqlFilter += \" $($filter.Property) IN ($($list)) \"\n                    }\n                    \"isempty\" { $SqlFilter += \" TRIM ($($filter.Property)) IS NULL \" }\n                    \"isnotempty\" { $SqlFilter += \" TRIM ($($filter.Property)) IS NOT NULL \" }\n                    \"notequals\" { $SqlFilter += \" $($filter.Property) != '$($filter.Value)' \" }\n                    \"notcontains\" { $SqlFilter += \" $($filter.Property) NOT LIKE '%$($filter.Value)%' \" }\n                }\n                $count += 1\n            }\n        }\n        else {\n            $SqlFilter = $null\n        }\n\n        if ($null -eq $SqlFilter) {\n            $totalCount = (Invoke-DbaQuery -SqlInstance $SqlInstance -Database $Database -SqlCredential $SqlCredential -Query \"SELECT COUNT(*) As Count FROM $Table\").Count\n        }\n        else {\n            $totalCount = (Invoke-DbaQuery -SqlInstance $SqlInstance -Database $Database -SqlCredential $SqlCredential -Query \"SELECT COUNT(*) As Count FROM $Table $SqlFilter\").Count\n            $sort = $Context.Sort.'0'\n        }\n\n        if ($sort) {\n            $sqlSort = \"ORDER BY $($sort.field) $($sort.Sort) \"\n        }\n        else {\n            $sqlSort = \"ORDER BY (SELECT NULL)\"\n        }\n\n        if ($null -ne $SqlFilter) {\n            $sqlPage = \"OFFSET $($Context.Page * $Context.PageSize) ROWS FETCH NEXT $($Context.PageSize) ROWS ONLY;\"\n            $Query = \"SELECT * FROM $Table $sqlFilter $sqlSort $sqlPage\"\n        }\n        else {\n            $sqlPage = \"OFFSET $($RowsPerPage) ROWS FETCH NEXT $($RowsPerPage) ROWS ONLY;\"\n            $Query = \"SELECT * FROM $Table $sqlSort $sqlPage\"\n        }\n\n        $Rows = Invoke-DbaQuery -SqlInstance $SqlInstance -Database $Database -SqlCredential $SqlCredential -Query $Query -As PSObject\n\n        @{\n            rows     = [Array]$Rows\n            rowCount = $TotalCount\n        }\n    }   \n}\n\nNew-UDDashboard -Title 'PowerShell Universal' -Content {\n    New-UDDataGrid -LoadRows {  \n      Out-UDSqlDataGrid -Context $EventData -SqlInstance \"(localdb)\\MSSQLLocalDb\" -Database \"PSU\" -Table \"Job\"\n    } -Columns @(\n        New-UDDataGridColumn -Field id\n        New-UDDataGridColumn -Field startTime\n        New-UDDataGridColumn -Field status -Render {\n          if ($EventData.Status -eq 2) {\n                New-UDAlert -Severity 'Success' -Text 'Success'\n            }\n\n            if ($EventData.Status -eq 3) {\n                New-UDAlert -Severity 'Error' -Text 'Failed'\n            }\n        }\n    ) -AutoHeight $true -Pagination\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a PowerShell Universal App with Advanced Configuration\nDESCRIPTION: This example demonstrates creating a new app with more advanced options, including setting an environment, specifying roles, configuring timeouts, and enabling features like auto-deployment and app tokens.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUApp.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUApp -Name \"AdvancedApp\" -FilePath \"C:\\Apps\\MyApp.ps1\" -Environment \"Production\" -Role @(\"Admin\", \"User\") -AutoDeploy -GrantAppToken -IdleTimeout 3600 -SessionTimeout 7200 -DisableErrorToast\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Method API Endpoint with Conditional Logic\nDESCRIPTION: Defines an endpoint that handles both GET and POST HTTP methods with different functionality based on the method used. Uses the built-in $Method variable for routing.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/endpoints.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUEndpoint -Url '/user' -Method @('GET', 'POST') -Endpoint {\n    if ($Method -eq 'GET')\n    {\n       Get-User\n    }\n    else {\n       New-User\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PowerShell Universal Server with the PowerShell Module\nDESCRIPTION: Command to install the latest version of PowerShell Universal server using the PowerShell Universal module. This creates and starts an appropriate service based on the operating system.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/README.md#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-PSUServer -LatestVersion\n```\n\n----------------------------------------\n\nTITLE: Creating Role with Claim Mapping in PowerShell Universal\nDESCRIPTION: This snippet demonstrates how to create a new role in PowerShell Universal with claim mapping. It maps the Administrator role to a specific group SID using the New-PSURole cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/security/authorization.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSURole -Name Administrator -ClaimType 'http://schemas.microsoft.com/ws/2008/06/identity/claims/groupsid' -ClaimValue 'S-123-123-123'\n```\n\n----------------------------------------\n\nTITLE: Configuring App Navigation\nDESCRIPTION: Demonstrates how to customize app navigation with nested menu items and permanent layout.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/building-dashboards.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDApp -Content {\n} -Navigation (\n    New-UDList -Children {\n        New-UDListItem -Label \"Home\"\n        New-UDListItem -Label \"Getting Started\" -Children {\n            New-UDListItem -Label \"Installation\" -OnClick {}\n            New-UDListItem -Label \"Usage\" -OnClick {}\n            New-UDListItem -Label \"FAQs\" -OnClick {}\n            New-UDListItem -Label \"System Requirements\" -OnClick {}\n            New-UDListItem -Label \"Purchasing\" -OnClick {}\n        }\n    }\n) -NavigationLayout permanent\n```\n\n----------------------------------------\n\nTITLE: Form Submission Implementation\nDESCRIPTION: Demonstrates form submission handling using Invoke-UDForm with validation.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/interaction.md#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDForm -Id 'form' -Content {\n   New-UDTextbox -Id 'Text' -Label 'Submit Me'\n} -OnSubmit {\n   Show-UDToast \"Hello!\"\n}\n\nNew-UDButton -Text \"Submit Form\" -OnClick {\n   Invoke-UDForm -Id 'form'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple API in PowerShell Universal\nDESCRIPTION: This PowerShell snippet demonstrates how to create a simple API endpoint that returns computer information using Get-ComputerInfo cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/get-started.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nGet-ComputerInfo\n```\n\n----------------------------------------\n\nTITLE: Using Windows PowerShell Compatibility in PowerShell Universal\nDESCRIPTION: This code demonstrates how to use Windows PowerShell Compatibility feature and clean up the session afterwards.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/environments.md#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nImport-Module PSScheduledJob -UseWindowsPowerShell\nGet-ScheduledJob | Out-Null\nGet-PSSession -Name 'WinPSCompatSession' | Remove-PSSession\n```\n\n----------------------------------------\n\nTITLE: Policy Script for Active Directory Group Membership Check in PowerShell Universal\nDESCRIPTION: This script checks if a user is a member of a specific Active Directory group using LDAP. It's used to grant administrator access in PowerShell Universal based on group membership.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/security/authorization.md#2025-04-16_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nparam(\n$User\n)\n\n$UserName = ($User.Identity.Name)\n$UserName = $UserName.Substring($UserName.IndexOf('\\')+1,($UserName.Length -($UserName.IndexOf('\\')+1)))\n\n$IsMember = $false;\n\n# Perform LDAP Group Member Lookup\n$Searcher = New-Object DirectoryServices.DirectorySearcher\n$Searcher.SearchRoot = 'LDAP://CN=Users,DC=berg,DC=com' # INSERT ROOT LDAP HERE\n$Searcher.Filter = \"(&(objectCategory=person)(memberOf=CN=PowerShell Universal Admins,OU=Information Technology,DC=berg,DC=com))\" #GROUP INSERT DN TO CHECK HERE\n$Users = $Searcher.FindAll()\n$Users | ForEach-Object{\n    If($_.Properties.samaccountname -eq $UserName)\n    {\n        $IsMember = $true;\n        \"$UserName is a member of admin group!\" | Out-File \"C:\\test\\adgroup.txt\"\n    }\n    else {\n        \"$UserName is NOT member of admin group!\" | Out-File \"C:\\test\\adgroup.txt\"\n    }\n}\n\nreturn $IsMember\n```\n\n----------------------------------------\n\nTITLE: Defining Required Parameters and Default Values in PowerShell Universal\nDESCRIPTION: Demonstrates how to set parameters as required and provide default values, including dynamic default values.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/automation/scripts/parameters.md#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nparam(\n    [Parameter(Mandatory)]\n    $RequiredParameter\n)\n\n$RequiredParameter\n```\n\nLANGUAGE: powershell\nCODE:\n```\nparam(\n    $Parameter = \"Hello, World\",\n    [DateTime]$ExecutionTime = Get-Date\n)\n\n$Parameter\n$ExecutionTime\n```\n\n----------------------------------------\n\nTITLE: Implementing Row Selection in DataGrid\nDESCRIPTION: Demonstrates how to implement row selection functionality with checkboxes and handle selection events. Includes example of retrieving selected rows.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/data-grid.md#2025-04-16_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDApp -Content { \n    $Rows = 1..100 | % {\n        @{ Id = $_; Name = 'Adam'; Number = Get-Random}\n    } \n    New-UDDataGrid -id DataGrid -LoadRows {  \n    $Rows| Out-UDDataGridData -Context $EventData -TotalRows $Rows.Length\n} -Columns @(\n    New-UDDataGridColumn -Field name\n    New-UDDataGridColumn -Field number\n) -AutoHeight $true -Pagination -CheckboxSelection -CheckboxSelectionVisibleOnly -DisableRowSelectionOnClick\n```\n\n----------------------------------------\n\nTITLE: Invoking PowerShell Universal Script with Parameters\nDESCRIPTION: Demonstrates how to invoke a PowerShell Universal script with required parameters using the Invoke-PSUScript cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/automation/jobs.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-PSUScript -Script 'Script1.ps1' -RequiredParameter 'Hello'\n```\n\n----------------------------------------\n\nTITLE: Connecting to PowerShell Universal Server\nDESCRIPTION: This example demonstrates how to connect to a PowerShell Universal server running on localhost at port 5000 using an app token for authentication. It establishes a connection that can be used for subsequent cmdlets without specifying connection details each time.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Connect-PSUServer.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-PSUServer -ComputerName http://localhost:5000 -AppToken 'appToken123'\n```\n\n----------------------------------------\n\nTITLE: Managing Exchange Connections in PowerShell Universal Apps\nDESCRIPTION: A complete example showing how to manage Exchange connections efficiently in PowerShell Universal apps by caching sessions across requests to improve performance.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/modules.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n$Cache:ExchangeServer = ''\n$Cache:ExchangeCredential = ''\n$Cache:ExchangeSessionInfo = @{\n\n    Authentication    = 'Kerberos'\n    ConfigurationName = 'Microsoft.Exchange'\n    ConnectionUri     = 'https://{0}/PowerShell/' -f $Cache:ExchangeServer\n    Credential        = $Cache:ExchangeCredential\n    WarningAction     = 'SilentlyContinue'\n}\n\n#region PRIVATE FUNCTIONS\n\nFunction Script:Connect-ExchServer {\n    $exchSession = New-PSSession @Cache:ExchangeSessionInfo\n    Import-PSSession $exchSession -WarningAction 'SilentlyContinue'\n}\n\n\nFunction Script:Test-ExchConnected {\n    $Current = Get-PSSession | Where-Object { $_.ConfigurationName -eq 'Microsoft.Exchange' }\n    if ($Current.State -eq 'Opened' -and $Current.Availability -eq 'Available') {\n        $true\n    }\n    else {\n        $false\n    }\n}\n\n#endregion\n\n#region PUBLIC FUNCTIONS \n\nFunction Clear-ExchConnection {\n    # called publicly in \"End{}\" blocks.\n    Get-PSSession | Where-Object { $_.ConfigurationName -eq 'Microsoft.Exchange' } | Remove-PSSession -ErrorAction $Cache:ErrorAction\n    Get-Module | Where-Object { $_.Description -match $Cache:ExchangeServer } | Remove-Module -Force -ErrorAction $Cache:ErrorAction\n}\n\n\nFunction Confirm-ExchConnected {\n     # called publicly in \"Begin{}\" blocks, or just before Exhange actions in functions or scripts.\n    if (!( Test-ExchConnected )) {\n        Clear-ExchConnection\n        Connect-ExchServer\n    }\n}\n\n#endregion\n\nfunction Invoke-ExampleExchFunction {\n    Param (\n        $something\n    )\n\n    Begin {\n        $null = Confirm-ExchConnected\n    }\n    \n    Process {\n        return $something\n    }\n    \n    End {\n        Clear-ExchConnection\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC with Refresh Tokens in Universal's appsettings.json\nDESCRIPTION: Advanced OIDC configuration in appsettings.json that enables refresh token functionality. It includes settings for offline access, token saving, and specific scopes required for refresh tokens.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/security/enterprise-security/openid-connect.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\"OIDC\": {\n    \"Enabled\": \"true\",\n    \"CallbackPath\": \"/auth/signin-oidc\",\n    \"ClientID\": \"----\",\n    \"ClientSecret\": \"---\",\n    \"Resource\": \"https://graph.microsoft.com\",\n    \"Authority\": \"https://login.microsoftonline.com/----\",\n    \"ResponseType\": \"code id_token\",\n    \"SaveTokens\": \"true\",\n    \"CorrelationCookieSameSite\": \"\",\n    \"UseTokenLifetime\": true,\n    \"Scope\": \"openid profile groups offline_access\",\n    \"GetUserInfo\": false\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Universal Server\nDESCRIPTION: Shows how to establish a connection to the PowerShell Universal server using the Connect-PSUServer cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/management-api.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-PSUServer -ComputerName http://localhost:5000 -AppToken $AppToken\n```\n\n----------------------------------------\n\nTITLE: Creating an AppBar with Custom Drawer in PowerShell\nDESCRIPTION: This snippet demonstrates how to create an AppBar with a custom drawer that contains nested navigation items. The drawer includes a list with expandable menu items.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/surfaces/appbar.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$Drawer = New-UDDrawer -Children {\n    New-UDList -Children {\n        New-UDListItem -Label \"Home\"\n        New-UDListItem -Label \"Getting Started\" -Children {\n            New-UDListItem -Label \"Installation\" -OnClick {}\n            New-UDListItem -Label \"Usage\" -OnClick {}\n            New-UDListItem -Label \"FAQs\" -OnClick {}\n            New-UDListItem -Label \"System Requirements\" -OnClick {}\n            New-UDListItem -Label \"Purchasing\" -OnClick {}\n        }\n    }\n}\n\nNew-UDAppBar -Position relative -Children { New-UDElement -Tag 'div' -Content { \"Title\" } } -Drawer $Drawer\n```\n\n----------------------------------------\n\nTITLE: Creating Basic PowerShell Universal App\nDESCRIPTION: Creates a simple app with a button that displays a toast message when clicked. Demonstrates basic app creation and event handling.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/building-dashboards.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDApp -Content {\n   New-UDButton -Text 'Click Me' -OnClick {\n       Show-UDToast \"Ouch!\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Schedule with Parameters in PowerShell Universal\nDESCRIPTION: This code shows how to create a new schedule for a script in PowerShell Universal, including setting a CRON expression and passing a parameter value.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/automation/schedules.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUSchedule -Script \"MyScript.ps1\" -Cron '* * * * *' -UserName 'adam'\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC with Microsoft O365 Resource in appsettings.json\nDESCRIPTION: Extended OIDC configuration in appsettings.json that includes settings for accessing Microsoft O365 resources. It demonstrates how to enable token saving and specify a resource for delegated access.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/security/enterprise-security/openid-connect.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"OIDC\": {\n  \"Enabled\": \"true\",\n  \"CallbackPath\": \"/auth/signin-oidc\",\n  \"ClientID\": \"<clientID>\",\n  \"ClientSecret\": \"<clientSecret>\",\n  \"Resource\": \"https://manage.office.com/\",\n  \"Authority\": \"https://login.microsoftonline.com/tenant\",\n  \"ResponseType\": \"id_token token\",\n  \"SaveTokens\": \"true\",\n  \"UseTokenLifetime\": true\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Interactive Script in PowerShell Universal\nDESCRIPTION: This script demonstrates how to create an interactive PowerShell script with user input, progress bar, and service information retrieval.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/get-started.md#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nRead-Host \"What should I say?\"\n\n1..100 | ForEach-Object {\n    Write-Progress -PercentComplete $_ -Activity \"Processing...\"\n}\n\nGet-Service\n```\n\n----------------------------------------\n\nTITLE: Creating Filtered Table with PowerShell Universal Dashboard\nDESCRIPTION: Creates a filterable table with custom columns and data loading functionality. Includes filtering, sorting and pagination features.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/table.md#2025-04-16_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\n$Columns = @(\n    New-UDTableColumn -Property Name -Title \"Name\" -ShowFilter\n    New-UDTableColumn -Property Value -Title \"Value\" -ShowFilter\n)\n\n$TableData = 1..1000 | ForEach-Object {\n  [PSCustomObject]@{\n      Name = \"Record-$_\"\n      Value = $_ \n  }\n}\n\nNew-UDTable -Columns $Columns -LoadData {\n    foreach($Filter in $EventData.Filters)\n    {\n        $TableData = $TableData | Where-Object -Property $Filter.Id -Match -Value $Filter.Value\n    }\n    \n    if ($EventData.Search)\n    {\n        $TableData = $TableData | Where-Object { $_.Name -match $EventData.Search -or $_.Value -match $EventData.Search }\n    }\n\n    $TotalCount = $TableData.Count \n\n    if (-not [string]::IsNullOrEmpty($EventData.OrderBy.Field))\n    {\n        $Descending = $EventData.OrderDirection -ne 'asc'\n        $TableData = $TableData | Sort-Object -Property ($EventData.orderBy.Field) -Descending:$Descending\n    }\n    \n    $TableData = $TableData | Select-Object -First $EventData.PageSize -Skip ($EventData.Page * $EventData.PageSize)\n\n    $TableData | Out-UDTableData -Page $EventData.Page -TotalCount $TotalCount -Properties $EventData.Properties \n} -ShowFilter -ShowSort -ShowPagination\n```\n\n----------------------------------------\n\nTITLE: Installing PowerShell Universal with Chocolatey\nDESCRIPTION: Command to install PowerShell Universal using the Chocolatey package manager. This installs PowerShell Universal as a service and opens a web browser after installation.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/README.md#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nchoco install powershelluniversal\n```\n\n----------------------------------------\n\nTITLE: Saving Uploaded Files to Disk in API Endpoints\nDESCRIPTION: Demonstrates how to save uploaded file data to disk within an API endpoint by writing the byte array to a file.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/endpoints.md#2025-04-16_snippet_21\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUEndpoint -Url '/file' -Method Post -Endpoint {\n    [IO.File]::WriteAllBytes(\"tempfile.dat\", $Data)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Error Responses in Universal API\nDESCRIPTION: Creates two endpoints that automatically return 500 Internal Server Error responses when errors occur by setting the -ErrorAction parameter to Stop. The first example throws an exception while the second uses Write-Error.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/error-handling.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUEndpoint -Url \"/error\" -Endpoint { \n   throw \"Uh oh!\"\n} -ErrorAction stop\n\nNew-PSUEndpoint -Url /error2 -Endpoint {\n    Write-Error \"Whoa!\"\n} -ErrorAction Stop\n```\n\n----------------------------------------\n\nTITLE: Configuring WS-Federation in appsettings.json for PowerShell Universal\nDESCRIPTION: Example configuration for the appsettings.json file to set up WS-Federation authentication in PowerShell Universal. This includes settings for Kestrel, logging, data repositories, and the WS-Federation authentication provider.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/security/enterprise-security/ws-federation.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"Kestrel\": {\n    \"Endpoints\": {\n      \"HTTP\": {\n        \"Url\": \"http://*:5000\"\n      }\n    },\n    \"RedirectToHttps\": \"false\"\n  },\n  \"ApplicationInsights\": {\n    \"InstrumentationKey\": \"\"\n  },\n  \"Logging\": {\n    \"Path\": \"%PROGRAMDATA%/PowerShellUniversal/log.txt\",\n    \"RetainedFileCountLimit\": 31,\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft\": \"Warning\",\n      \"Microsoft.Hosting.Lifetime\": \"Information\"\n    }\n  },\n  \"AllowedHosts\": \"*\",\n  \"CorsHosts\": \"\",\n  \"Data\": {\n    \"RepositoryPath\": \"%ProgramData%\\\\UniversalAutomation\\\\Repository\",\n    \"ConnectionString\": \"%ProgramData%\\\\UniversalAutomation\\\\database.db\",\n    \"GitRemote\": \"\",\n    \"GitUserName\": \"\",\n    \"GitPassword\": \"\", \n    \"ConfigurationScript\": \"\"\n  },\n  \"Api\": {\n    \"Url\": \"\"\n  },\n  \"Authentication\" : {\n    \"Windows\": {\n      \"Enabled\": \"false\"\n    },\n    \"WSFed\": {\n        \"Enabled\": \"true\",\n        \"MetadataAddress\": \"https://ironman.local:443/FederationMetadata/2007-06/FederationMetadata.xml\",\n        \"Wtrealm\": \"https://ironman.local:12345\",\n        \"CallbackPath\": \"/auth/signin-wsfed\"\n    },\n    \"OIDC\": {\n      \"Enabled\": \"false\",\n      \"CallbackPath\": \"/auth/signin-oidc\",\n      \"ClientID\": \"\",\n      \"ClientSecret\": \"\",\n      \"Resource\": \"\",\n      \"Authority\": \"\",\n      \"ResponseType\": \"\",\n      \"SaveTokens\": \"false\"\n    },\n    \"SessionTimeout\": \"25\"\n  },\n  \"Jwt\": {  \n    \"SigningKey\": \"PleaseUseYourOwnSigningKeyHere\",  \n    \"Issuer\": \"IronmanSoftware\",\n    \"Audience\": \"PowerShellUniversal\"\n  },\n  \"UniversalDashboard\": {\n    \"AssetsFolder\": \"%ProgramData%\\\\PowerShellUniversal\\\\Dashboard\"\n  },\n  \"ShowDevTools\": false,\n  \"HideAdminConsole\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Roles with Azure Active Directory Group Mapping\nDESCRIPTION: This code snippet shows how to configure roles in PowerShell Universal, including mapping an Azure AD group to the Administrator role and disabling other roles. It uses the New-PSURole cmdlet to create and configure roles.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/security/authorization.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSURole -Name Administrator -ClaimType 'groups' -ClaimValue '61849bf2-e44b-4057-b589-6cd1812d7545'\nNew-PSURole -Name \"Operator\" -Description \"Operators have access to manage and execute scripts, create other entities within PowerShell Universal but cannot manage PowerShell Universal itself.\" -Policy {} -Disabled\nNew-PSURole -Name \"Reader\" -Description \"Readers have read-only access to PowerShell Universal. They cannot make changes to any entity within the system.\" -Policy { } -Disabled \nNew-PSURole -Name \"Execute\" -Description \"Execute scripts within PowerShell Universal.\" -Policy { } -Disabled\nNew-PSURole -Name \"User\" -Description \"Does not have access to the admin console but can be assigned resources like APIs, scripts, dashboards and pages.\" -Policy { } -Disabled\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom People Picker Component in PowerShell Universal\nDESCRIPTION: This code snippet demonstrates the creation of a custom People Picker component using PowerShell Universal. It includes functions for generating user data, creating the picker interface, and handling user selection and removal. The component utilizes built-in elements like UDAutocomplete, UDDynamic, and UDList to create an interactive user selection interface.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/custom-components/README.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nfunction Get-User {\n    1..100 | ForEach-Object {\n        [PSCustomObject]@{\n            UserName = \"User$_\"\n            First = \"Bill\"\n            Last = $_\n            Avatar = (Get-ChildItem \"$Repository\\Avatars\" | Get-Random).Name\n        }\n    }\n}\n\nfunction New-UDPeoplePicker {\n   $Session:Users = [System.Collections.Generic.List[object]]::new()\n\n    New-UDAutocomplete -OnLoadOptions {\n        Get-User | Where-Object { $_.UserName -like \"*$UserName*\" } | Select-Object -First 5 -ExpandProperty 'UserName' | ConvertTo-Json \n    } -OnChange {\n        $Session:Users.Add((Get-User | Where-Object { $_.UserName -eq $EventData })) | Out-Null\n        Sync-UDElement -Id 'users'\n    }\n\n    New-UDDynamic -Id 'users' -Content {\n        New-UDList -Children {\n            $Session:Users | ForEach-Object {\n                New-UDListItem -Label $_.UserName -SubTitle \"$($_.First) $($_.Last)\" -AvatarType 'Avatar' -SecondaryAction {\n                    $UserName = $_.UserName\n                    New-UDIconButton -Icon (New-UDIcon -Icon 'Trash') -OnClick {\n                        $RemoveUser = $Session:Users | Where-Object { $_.UserName -eq $UserName }\n                        $Session:Users.Remove($RemoveUser) \n                        Sync-UDElement -Id 'users'\n                    }\n                } -Source \"/avatars/$($_.Avatar)\"\n\n            }    \n        }\n    }\n}\n\nNew-UDApp -Title 'PowerShell Universal' -Content {\n    New-UDPeoplePicker\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC Settings in PowerShell Universal's appsettings.json\nDESCRIPTION: This JSON snippet shows the OIDC configuration section in the appsettings.json file for PowerShell Universal. It includes essential settings such as ClientID, ClientSecret, Authority, and Scope for Okta integration.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/security/enterprise-security/openid-connect.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n    \"OIDC\": {\n      \"Enabled\": \"true\",\n      \"CallbackPath\": \"/authorization-code/callback\",\n      \"ClientID\": \"6f006906-643a-40fe-af00-9060cea5d6ef\",\n      \"ClientSecret\": \"M~.rE56.md_MOpB2I5kwj_voFuX-i891N0\",\n      \"Resource\": \"\",\n      \"Authority\": \"https://poshtools.okta.com\",\n      \"ResponseType\": \"code\",\n      \"SaveTokens\": \"true\",\n      \"CorrelationCookieSameSite\": \"\",\n      \"UseTokenLifetime\": true,\n      \"Scope\": \"openid profile groups\",\n      \"GetUserInfo\": true\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating a New PowerShell Universal App with Basic Parameters\nDESCRIPTION: This snippet shows the basic syntax for creating a new app in PowerShell Universal using the New-PSUApp cmdlet. It includes essential parameters like Name, Content, and optional settings like Authentication and BaseUrl.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUApp.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUApp -Name \"MyApp\" -Content { /* App content here */ } -Authenticated -BaseUrl \"/myapp\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple UI App in PowerShell Universal\nDESCRIPTION: This snippet shows how to create a basic user interface app with a button that displays a toast message when clicked.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/get-started.md#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDApp -Title \"Hello, World!\" -Content {\n    New-UDButton -Text \"Click Me\" -OnClick {\n        Show-UDToast -Message 'Success!!'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Role Validation Using Claims in PowerShell Universal\nDESCRIPTION: This script shows how to use claims set during authentication to validate group membership in the roles.ps1 file of PowerShell Universal. It checks if the user is part of the 'SOC_Admins' group.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/security/forms-authentication.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nparam($User)\n\n$Roles = $User.Claims | Where-Object Type -eq Role | Select-Object -ExpandProperty Value\n$Roles -contains 'SOC_Admins'\n```\n\n----------------------------------------\n\nTITLE: Creating Permanent Drawer in Universal Apps using PowerShell\nDESCRIPTION: Demonstrates how to create a permanent drawer with a nested navigation list using New-UDDrawer cmdlet. The drawer includes a home item and a Getting Started section with multiple child items. The permanent variant ensures the drawer is always visible on the left side of the screen.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/navigation/drawer.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDrawer -Variant 'permanent' -Content {\n  New-UDList -Children {\n        New-UDListItem -Label \"Home\"\n        New-UDListItem -Label \"Getting Started\" -Children {\n            New-UDListItem -Label \"Installation\" -OnClick {}\n            New-UDListItem -Label \"Usage\" -OnClick {}\n            New-UDListItem -Label \"FAQs\" -OnClick {}\n            New-UDListItem -Label \"System Requirements\" -OnClick {}\n            New-UDListItem -Label \"Purchasing\" -OnClick {}\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Data Grid Implementation in PowerShell\nDESCRIPTION: Basic implementation of a UDDataGrid component with static data and simple column definitions. Shows how to load rows and define basic columns.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/data-grid.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDataGrid -LoadRows {\n    $Data = @(\n        @{ Name = 'Adam'; Number = Get-Random}\n        @{ Name = 'Tom'; Number = Get-Random}\n        @{ Name = 'Sarah'; Number = Get-Random}\n    )\n    $Data | Out-UDDataGridData -Context $EventData -TotalRows $Rows.Length\n} -Columns @(\n    New-UDDataGridColumn -Field name\n    New-UDDataGridColumn -Field number\n) -AutoHeight $true\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic List with Icons in PowerShell for Universal Apps\nDESCRIPTION: This snippet demonstrates how to create a basic list with icons and subtitles using the New-UDList and New-UDListItem cmdlets. It includes examples for inbox, drafts, trash, and spam items with corresponding icons.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/list.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDList -Content {\n    New-UDListItem -Label 'Inbox' -Icon (New-UDIcon -Icon envelope -Size 3x) -SubTitle 'New Stuff'\n    New-UDListItem -Label 'Drafts' -Icon (New-UDIcon -Icon edit -Size 3x) -SubTitle \"Stuff I'm working on \"\n    New-UDListItem -Label 'Trash' -Icon (New-UDIcon -Icon trash -Size 3x) -SubTitle 'Stuff I deleted'\n    New-UDListItem -Label 'Spam' -Icon (New-UDIcon -Icon bug -Size 3x) -SubTitle \"Stuff I didn't want\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Horizontal Bar Chart with ChartJS in PowerShell\nDESCRIPTION: This snippet demonstrates how to create a horizontal bar chart using ChartJS. It displays the top ten CPU-using processes with custom options for axis and legend positioning.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-visualization/charts.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n    $Data = Get-Process | Sort-Object -Property CPU -Descending | Select-Object -First 10 \n    New-UDChartJS -Type 'bar' -Data $Data -DataProperty CPU -LabelProperty ProcessName -Options @{\n        indexAxis = \"y\"\n        plugins = @{\n            legend = @{\n                position = \"right\"\n            }\n        }\n    }p\n```\n\n----------------------------------------\n\nTITLE: Setting Cache with Absolute Expiration\nDESCRIPTION: Shows how to set a cache item with absolute expiration time, which will invalidate after 10 minutes from creation.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/cache.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PSUCache -Key \"CurrentDate\" -Value (Get-Date) -AbsoluteExpiration (Get-Date).AddMinutes(10)\n```\n\n----------------------------------------\n\nTITLE: Loading Detailed Content in PowerShell Universal DataGrid\nDESCRIPTION: Demonstrates how to use the LoadDetailContent event handler to display additional information about an expanded row. Uses basic data structure with name and random number properties.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/data-grid.md#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDataGrid -LoadRows {\n    $Data = @(\n        @{ Name = 'Adam'; Number = Get-Random }\n        @{ Name = 'Tom'; Number = Get-Random }\n        @{ Name = 'Sarah'; Number = Get-Random }\n    )\n    $Data| Out-UDDataGridData -Context $EventData -TotalRows $Data.Length\n} -Columns @(\n    New-UDDataGridColumn -Field name\n    New-UDDataGridColumn -Field number\n) -AutoHeight $true -LoadDetailContent {\n    Show-UDToast $Body\n    New-UDAlert -Text $EventData.row.Name\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Role-Restricted Page in Universal Dashboard (PowerShell)\nDESCRIPTION: This snippet demonstrates how to create a new page in Universal Dashboard that is only accessible to users with the 'Administrators' role. It uses the New-UDPage cmdlet with the -Role parameter to restrict access.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/role-based-access.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDPage -Role 'Administrators' -Content {\n    New-UDTypography -Text 'Admins only'\n}\n```\n\n----------------------------------------\n\nTITLE: Invoke-PSUEndpoint Cmdlet Syntax\nDESCRIPTION: Complete syntax definition for the Invoke-PSUEndpoint cmdlet showing all available parameters and their combinations. Includes support for app tokens, body content, authentication, and HTTP configuration options.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Invoke-PSUEndpoint.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-PSUEndpoint [-AppToken <String>] [-Body <String>] [-ComputerName <String>] [-ContentType <String>] [-Cookies <Hashtable>] [-Credential <PSCredential>] [-Headers <Hashtable>] [-Integrated] [-Method <String>] [-TrustCertificate] -Url <String> [-UseDefaultCredentials] [-ResponseVariable <String>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: New-PSUEndpoint Parameter Set 1\nDESCRIPTION: Syntax pattern for creating an endpoint with a ScriptBlock. Supports authentication, role-based access, and various HTTP methods.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUEndpoint.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUEndpoint [-AppToken <String>] [-Authentication] [-ComputerName <String>] -Endpoint <ScriptBlock> [-Method {GET | POST | PUT | DELETE | OPTIONS}] [-RegEx] [-Role <String[]>] -Url <String> [-Description <String>] [-UseDefaultCredentials] [-Integrated] [-Tag <Tag[]>] [-Timeout <Int32>] [-Path <String>] [-Environment <String>] [-PersistentLog] [-Documentation <String>] [-Command <String>] [-Module <String>] [-ComputerGroup <String[]>] [-AvailableInBranch <String[]>] [-Credential <String>] [-TrustCertificate] [-Disabled] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Migrating SecretStore Vault\nDESCRIPTION: Command to copy the Microsoft SecretStore vault contents to the new server's service account location.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/migration.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nCopy-Item $Env:LOCALAPPDATA\\Microsoft\\PowerShell\\secretmanagement\\localstore \\\\newServer\\C$\\Users\\myServiceAccount\\AppData\\Local\\Microsoft\\PowerShell\\secretmanagement\\localstore\n```\n\n----------------------------------------\n\nTITLE: Invoking a PowerShell Universal API Endpoint\nDESCRIPTION: Demonstrates how to call a Universal API endpoint using Invoke-RestMethod from a PowerShell client.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/endpoints.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-RestMethod http://localhost:5000/endpoint\n```\n\n----------------------------------------\n\nTITLE: User Login Event Data Structure - PowerShell\nDESCRIPTION: Demonstrates the data structure passed to the trigger script for user login events via the $data parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/automation/triggers.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n@{\n    UserName = 'username'\n    RemoteIpAddress = ''\n    LocalPort = ''\n    RemotePort = ''\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Charts with Multiple Datasets in ChartJS using PowerShell\nDESCRIPTION: This snippet shows how to create a chart with multiple datasets using ChartJS in Universal Apps. It displays CPU usage and handle count for processes.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-visualization/charts.md#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n$Data = Get-Process | Sort-Object -Property CPU -Descending | Select-Object -First 10 \n\n $CPUDataset = New-UDChartJSDataset -DataProperty CPU -Label CPU -BackgroundColor '#126f8c'\n $MemoryDataset = New-UDChartJSDataset -DataProperty HandleCount -Label 'Handle Count' -BackgroundColor '#8da322'\n\n $Options = @{\n   Type = 'bar'\n   Data = $Data\n   Dataset = @($CPUDataset, $MemoryDataset)\n   LabelProperty = \"ProcessName\"\n }\n\n New-UDChartJS @Options\n```\n\n----------------------------------------\n\nTITLE: Creating Role-Based Navigation in Universal App with PowerShell\nDESCRIPTION: Shows how to implement role-based access control for navigation menu items using Protect-UDSection to limit visibility based on user roles.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/pages.md#2025-04-16_snippet_13\n\nLANGUAGE: powershell\nCODE:\n```\n$Navigation = {\n    New-UDListItem -Label \"Home\" -Href '/Home' \n    Protect-UDSection -Role \"Administrator\" -Content {\n        New-UDListItem -Label \"Admins\" -Href '/Admins' \n    }\n}\n\n$Pages = @()\n$Pages += New-UDPage -Name 'Home' -Content {\n New-UDTypography -Text \"Hello\"\n} -NavigationLayout permanent -LoadNavigation $Navigation\n\n$Pages += New-UDPage -Name 'Admins' -Content {\n    New-UDTypography -Text \"Hello\"\n} -NavigationLayout permanent -LoadNavigation $Navigation -Roles \"Administrator\"\n\nNew-UDApp -Title \"Hello, World!\" -Pages $Pages\n```\n\n----------------------------------------\n\nTITLE: Utilizing Jobs in PowerShell Universal Form Submission\nDESCRIPTION: This example shows how to use jobs in a PowerShell Universal form submission. It creates a form with a username input and invokes a PowerShell script as a job upon form submission, ensuring resource cleanup after execution.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/best-practices.md#2025-04-16_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDForm -Content {\n   New-UDTextbox -Id 'UserName' -Label 'UserName'\n} -OnSubmit {\n   Invoke-PSUScript -Name 'CreateUser.ps1' -UserName $EventData.UserName -Environment PS7 -Integrated -Wait\n   Show-UDToast \"User $($EventData.UserName) was created!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying PowerShell Universal Configuration with GitHub Actions\nDESCRIPTION: GitHub Actions workflow that deploys a repository to PowerShell Universal. It checks out the current repository and uses the ironmansoftware/deploy-universal action to push changes to PowerShell Universal with appropriate authentication.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/deployments.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nname: Deploy\non: [workflow_dispatch]\n\njobs:\n    build:\n      name: Deploy\n      runs-on: ubuntu-latest\n      steps:\n        - uses: actions/checkout@v1\n        - uses: ironmansoftware/deploy-universal@1.0\n          with:\n            url: 'https://431d-2600-6c44-1a7f-f1f9-30aa-ed10-8683-5259.ngrok-free.app'\n            apptoken: '${{ secrets.UNIVERSAL_APP_TOKEN }}'\n            name: 'Production'\n            version: '1.4.1'\n            description: 'Production Configuration'\n```\n\n----------------------------------------\n\nTITLE: Configuring One-Way Git Synchronization in PowerShell Universal\nDESCRIPTION: Configuration example for setting up one-way git synchronization where the admin console becomes read-only. This setup allows pulling from the remote repository but prevents pushing or committing locally.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/git.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n    \"Data\": {\n    \"RepositoryPath\": \"%ProgramData%\\\\UniversalAutomation\\\\Repository\",\n    \"ConnectionString\": \"%ProgramData%\\\\UniversalAutomation\\\\database.db\",\n    \"DatabaseType\": \"LiteDB\",\n    \"GitRemote\": \"https://github.com/myorg/myrepo.git\",\n    \"GitUserName\": \"any\",\n    \"GitPassword\": \"MYPAT----------------\"\n    \"GitBranch\": \"dev\",\n    \"GitSyncBehavior\": \"OneWay\",\n    \"ConfigurationScript\": \"\"\n  },\n```\n\n----------------------------------------\n\nTITLE: Using Set-PSUSetting Cmdlet in PowerShell Universal\nDESCRIPTION: The Set-PSUSetting cmdlet allows administrators to configure various aspects of PowerShell Universal. This includes settings related to appearance, security, logging, API behavior, job management, and feature enablement. The cmdlet accepts numerous parameters to customize the PSU environment.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Set-PSUSetting.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PSUSetting [-AdminConsoleLogo <String>] [-AdminConsoleTitle <String>] [-ApiEnvironment <String>] [-AppToken <String>] [-ComputerName <String>] [-ConcurrentJobLimit <Int32>] [-DefaultEnvironment <String>] [-DefaultPage <String>] [-DisableAutoReload] [-DisableUpdateCheck] [-GroomDays <Int32>] [-HideApi] [-HideAutomation] [-HideDashboard] [-HideHomePage] [-Integrated] [-LogLevel <String>] [-LoggingFilePath <String>] [-MicrosoftLogLevel <String>] [-RateLimitClientAllowList <String[]>] [-RateLimitEndpointAllowList <String[]>] [-RateLimitIpAddressAllowList <String[]>] [-ScriptBaseFolder <String>] [-SecurityEnvironment <String>] [-UseDefaultCredentials] [-GroomInterval <Int32>] [-NotificationLevel <NotificationLevel>] [-FallbackLanguageId <String>] [-HideRunAs] [-JobHandshakeTimeout <Int32>] [-ProxyCredential <Variable>] [-ProxyUri <String>] [-Splatting] [-DisabledFeatures <Features>] [-DontLoadProfile] [-EnhancedAppTokenSecurity] [-ExperimentalFeatures <ExperimentalFeatures>] [-FavIcon <String>] [-LimitIdentities] [-Telemetry] [-DefaultDashboardTheme <String>] [-UseLogoSize] [-ContentSecurityPolicy <String>] [-DarkTheme] [-DisableFormatOnSave] [-HideEnvironment] [-HideRunOn] [-Branding <OldBranding>] [-DebuggerEnvironment <String>] [-FileEncoding <String>] [-LogGroomDays <Int32>] [-ModuleDiscoveryFrequency <String>] [-PreformattedJobOutput] [-MaxJobMemory <Int32>] [-AnonymousApiDocumentation] [-ApiBaseFolder <String>] [-CheckForModuleUpdates] [-Credential <PSCredential>] [-HideRunLater] [-JobRunId] [-MaximumTokenLifetime <Int32>] [-TrustCertificate] [-DefaultTokenLifetime <Int32>] [-PortalDisabled] [-PortalRole <String[]>] [-ApiSecurityModel <ApiSecurityModel>] [-DefaultRunOn <String>] [-DisableFirstRun] [-SessionTimeout <Int32>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Form with Text Fields and Checkboxes in PowerShell Universal Dashboard\nDESCRIPTION: Example of a simple form implementation that uses text boxes and checkboxes. The form displays toast messages with the submitted values when the form is submitted.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/form.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDForm -Content {\n    New-UDTextbox -Id 'txtTextfield'\n    New-UDCheckbox -Id 'chkCheckbox'\n} -OnSubmit {\n    Show-UDToast -Message $EventData.txtTextfield\n    Show-UDToast -Message $EventData.chkCheckbox\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Azure and Registering Key Vault in PowerShell Universal\nDESCRIPTION: Script to connect to Azure using a managed identity and register an Azure Key Vault for use with PowerShell Universal.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/variables.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$sub = 'affdf0d4-eed5-48a6-889c-599d482xxxxx'\nConnect-AzAccount -Id -Scope CurrentUser -SubscriptionId $sub\n\nRegister-SecretVault -ModuleName Az.KeyVault -Name AzureKeyVault -VaultParameters @{ \n    AZKVaultName = 'psu-demo'\n    SubscriptionId = $sub\n} -AllowClobber\n```\n\n----------------------------------------\n\nTITLE: Creating a Paginated Table with Filtering and Initial State in PowerShell\nDESCRIPTION: This complex example demonstrates creating a paginated table with filtering, sorting, and a custom initial state. It uses the LoadData parameter to handle data operations server-side and includes column definitions with filtering options.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTable.txt#2025-04-16_snippet_14\n\nLANGUAGE: powershell\nCODE:\n```\n$Data = 1..100 | ForEach-Object {\n    [PSCustomObject]@{\n        Dessert = \"Dessert $_\"\n        Calories = Get-Random -Minimum 100 -Maximum 500\n        Fat = Get-Random -Minimum 1 -Maximum 10\n        Carbs = Get-Random -Minimum 1 -Maximum 100\n        Protein = Get-Random -Minimum 1 -Maximum 100\n }}\n$Columns = @(\n    New-UDTableColumn -Property Dessert -Title \"Dessert\" -ShowFilter\n    New-UDTableColumn -Property Calories -Title \"Calories\" \n    New-UDTableColumn -Property Fat -Title \"Fat\" \n    New-UDTableColumn -Property Carbs -Title \"Carbs\" \n    New-UDTableColumn -Property Protein -Title \"Protein\" \n)\n New-UDTable -Id 'table14'  -ShowPagination  -LoadData {\n    foreach($Filter in $EventData.Filters)\n    {\n        $Data = $Data | Where-Object -Property $Filter.Id -Match -Value $Filter.Value\n    }\n    $TotalCount = $Data.Count \n    if (-not [string]::IsNullOrEmpty($EventData.OrderBy))\n    {\n        $Descending = $EventData.OrderDirection -ne 'asc'\n        $Data = $Data | Sort-Object -Property $EventData.orderBy.field -Descending:$Descending\n    }\n    \n    $Data = $Data | Select-Object -First $EventData.PageSize -Skip ($EventData.Page * $EventData.PageSize)\n    $Data | Out-UDTableData -Page $EventData.Page -TotalCount $TotalCount -Properties $EventData.Properties \n} -Columns $Columns -InitialState @{\n    pageIndex = 0\n    pageSize = 20\n    filters = @{\n        id = \"dessert\"\n        value = \"20\"\n    }\n    orderBy = @{ field = \"fat\" }\n} -ShowSort\n```\n\n----------------------------------------\n\nTITLE: Creating Color-Based Pie Chart\nDESCRIPTION: Creates a pie chart with custom colors defined in the data. Uses inner radius, corner radius and padding angle for styling, and filters out zero values.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-visualization/charts.md#2025-04-16_snippet_23\n\nLANGUAGE: powershell\nCODE:\n```\n$Data =\n$([PSCustomObject]@{\n        value = 30\n        color = '#BF5290'\n    }\n    [PSCustomObject]@{\n        value = 100\n        color = '#52BE80'\n\n    }\n)\n\nNew-UDNivoChart -Pie -Data ($Data | Where-Object { $_.Value -ne 0 }) -InnerRadius 0.7 -CornerRadius 5 -PadAngle 1 -Colors @{datum = 'data.color' }` -MarginLeft \"150\" -MarginTop 1 -Height 370 -Responsive\n```\n\n----------------------------------------\n\nTITLE: Schema-Based Form with Required Fields in PowerShell Universal Dashboard\nDESCRIPTION: Shows how to create a schema-based form with required fields. The 'required' property specifies which fields must be completed before the form can be submitted.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/form.md#2025-04-16_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDForm -Schema @{\n   title = \"Test Form\"\n   type = \"object\"\n   properties = @{\n       name = @{\n           type = \"string\"\n       }\n       age = @{\n           type = \"number\"\n       }\n   }\n   required = @('name')\n} -OnSubmit {\n   # $EventData.name\n   # $EventData.age\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS with Certificate Thumbprint for PowerShell Universal\nDESCRIPTION: This JSON configuration sets up HTTPS for PowerShell Universal using a certificate thumbprint. It specifies the certificate thumbprint, store, location, and allows invalid certificates.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/hosting/README.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Kestrel\": {\n    \"Endpoints\": {\n      \"HTTPS\": {\n         \"Url\": \"https://*:443\",\n           \"Certificate\": {\n             \"Thumbprint\": \"SDFSDFSDFSDFSDFSDFSDFFSD\",\n             \"Store\": \"My\",\n             \"Location\": \"LocalMachine\",\n             \"AllowInvalid\": \"true\"\n            }\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Rate Limit in PowerShell Universal\nDESCRIPTION: Creates a rate limit that restricts access to a specific endpoint to 100 requests within a 10-minute period. This example demonstrates basic rate limiting functionality using the New-PSURateLimit cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSURateLimit.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSURateLimit -Endpoint \"/myEndpoint\" -Period ([TimeSpan]::FromMinutes(10)) -Limit 100\n```\n\n----------------------------------------\n\nTITLE: REST API Script Invocation\nDESCRIPTION: Demonstrates how to invoke a script using REST API with authentication token.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/automation/jobs.md#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-RestMethod http://localhost:5000/api/v1/script/7 -Method POST -Body \"\" -Headers @{ Authorization = \"Bearer appToken\" } -ContentType 'application/json'\n```\n\n----------------------------------------\n\nTITLE: Setting up PowerShell Universal as a Linux Service using systemd\nDESCRIPTION: Bash script for installing PowerShell Universal as a systemd service on Linux. It downloads the package, creates a service user, extracts files, sets up a systemd service configuration, and configures the firewall.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# ----\n# This script will install PowerShell Universal on Linux as a service\n# This has been tested on Ubuntu 20.04 (ARM64) on a Raspberry Pi 4\n# ----\n# Dependencies:\n# wget\n# unzip\n#\n# Make sure they are installed\n# ----\n\n# These are used to derive the download URL\nPSU_VERSION=\"5.0.0\" # Change this to the current version\nPSU_ARCH=\"arm64\" # Change this to your desired architecture\nPSU_FILE=\"Universal.linux-${PSU_ARCH}.${PSU_VERSION}.zip\"\nPSU_URL=\"https://imsreleases.blob.core.windows.net/universal/production/${PSU_VERSION}/${PSU_FILE}\"\n\n# These are used for installing PowerShell Universal\n# If you'd like to use a different path, change this\nPSU_PATH=\"/opt/psuniversal\"\nPSU_EXEC=\"${PSU_PATH}/Universal.Server\"\n\n# These are for installing it as a service\nPSU_SERVICE=\"psuniversal\"\nPSU_USER=\"psuniversal\"\n\n# ----\n# BEGIN\n# ----\n\necho \"Creating $PSU_PATH and granting access to $USER\"\nsudo mkdir $PSU_PATH\nsudo setfacl -m \"u:${USER}:rwx\" $PSU_PATH\n\necho \"Creating user $PSU_USER and making it the owner of $PSU_PATH\"\nsudo useradd $PSU_USER -m\nsudo chown $PSU_USER -R $PSU_PATH\n\necho \"Downloading PowerShell Universal $PSU_VERSION ($PSU_ARCH)\"\nwget -q $PSU_URL -O $PSU_FILE\n\necho \"Extracting $PSU_FILE to $PSU_PATH\"\nunzip -o -qq $PSU_FILE -d $PSU_PATH\n\necho \"Make $PSU_EXEC executable\"\nsudo chmod +x $PSU_EXEC\n\necho \"Creating service configuration\"\ncat <<EOF > ~/$PSU_SERVICE.service\n[Unit]\nDescription=PowerShell Universal\n[Service]\nExecStart=$PSU_EXEC\nSyslogIdentifier=psuniversal\nUser=$PSU_USER\nRestart=always\nRestartSec=5\n[Install]\nWantedBy=multi-user.target\nEOF\n\necho \"Creating and starting service\"\nsudo cp -f ~/$PSU_SERVICE.service /etc/systemd/system\nsudo systemctl daemon-reload\nsudo systemctl enable $PSU_SERVICE\nsudo systemctl start $PSU_SERVICE\nsudo systemctl status $PSU_SERVICE --no-pager\n\n# If you don't use UFW, you can comment this out\necho \"Allow port 5000/tcp\"\nsudo ufw allow 5000/tcp\n\n# ----\n# END\n# ----\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Persistence in PowerShell Universal\nDESCRIPTION: Configuration settings in appsettings.json for using PostgreSQL as the persistence layer. This enables PowerShell Universal to store data in a PostgreSQL database.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/persistence.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n \"Plugins\": [\n    \"PostgreSQL\"\n  ],\n  \"Data\": {\n    \"ConnectionString\": \"Host=PGhostname; Database=PGdatabase; User Id=PGusername; Password=PGpassword!;Port=5432\",\n  },\n```\n\n----------------------------------------\n\nTITLE: Conditional Content Display Based on User Roles in Universal Dashboard (PowerShell)\nDESCRIPTION: This snippet shows how to conditionally display content based on a user's roles using the $Roles variable in Universal Dashboard. It checks if the user has the 'Administrator' role before displaying a button to restart the computer.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/role-based-access.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nif ($Roles -contains \"Administrator\") {\n    New-UDButton -Text 'Restart Server' -OnClick {\n        Restart-Computer\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an API Endpoint with Parameter Validation\nDESCRIPTION: Defines an endpoint with a param block for parameter validation, including mandatory parameters and default values for optional ones.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/endpoints.md#2025-04-16_snippet_18\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUEndpoint -Url '/user/:name' -Endpoint {\n    param([Parameter(Mandatory)$Name, $Role = \"Default\")\n}\n```\n\n----------------------------------------\n\nTITLE: Processing File Uploads in API Endpoints\nDESCRIPTION: Shows how to access uploaded file data in an API endpoint using the $Data variable, which contains the raw byte array of the uploaded file.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/endpoints.md#2025-04-16_snippet_20\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUEndpoint -Url '/file' -Method Post -Endpoint {\n    $Data\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Files with PowerShell Universal API\nDESCRIPTION: Demonstrates how to send file data through an API endpoint using New-PSUApiResponse cmdlet. This example reads and returns a JPEG image file.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/endpoints.md#2025-04-16_snippet_22\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUEndpoint -Url '/image' -Endpoint {\n    $ImageData = [IO.File]::ReadAllBytes(\"image.jpeg\")\n    New-PSUApiResponse -ContentType 'image/jpg' -Data $ImageData\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Okta SAML2 Authentication in PowerShell Universal\nDESCRIPTION: PowerShell script to set up SAML2 authentication method with Okta in PowerShell Universal. Configures essential parameters like EntityId, IdentityProviderEntityId, CallbackPath, SigningKey, and SingleSignOnServiceUrl.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/security/enterprise-security/saml2.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PSUAuthenticationMethod -Type \"Saml2\" `\n-EntityId \"https://localhost:5001\" `\n-IdentityProviderEntityId \"http://www.okta.com/exk5dvbyzgASPiOFp5d7\" `\n-CallbackPath \"https://localhost:5001\" `\n-SigningKey \"C:\\Users\\adamr\\Downloads\\okta.cert\" `\n-SingleSignOnServiceUrl \"https://dev-36706648.okta.com/app/dev-36706648_psusaml_1/exk5dvbyzgASPiOFp5d7/sso/saml\"\n```\n\n----------------------------------------\n\nTITLE: Static Data Implementation in DataGrid\nDESCRIPTION: Example of implementing a DataGrid with static data of 10,000 records. Demonstrates pagination and custom button rendering.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/data-grid.md#2025-04-16_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDashboard -Title 'PowerShell Universal' -Content {\n     $Data =  1..10000 | % {\n        @{ Name = 'Adam'; Number = Get-Random }\n    } \n    New-UDDataGrid -LoadRows {  \n      $Data | Out-UDDataGridData -Context $EventData\n    } -Columns @(\n        New-UDDataGridColumn -Field name\n        New-UDDataGridColumn -Field number -Render {\n                    New-UDButton -Icon (New-UDIcon -Icon User) -OnClick { Show-UDToast $EventData.Name } } \n        }\n    ) -AutoHeight $true -Pagination\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Scheduler Role in PowerShell Universal\nDESCRIPTION: PowerShell command to create a new role named 'Scheduler' with specific permissions for managing schedules and read access to automation features.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/security/enterprise-security/permissions.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSURole -Name \"Scheduler\" -Permission @('automation.schedules/*', 'automation/read') \n```\n\n----------------------------------------\n\nTITLE: Setting Claims in Forms Authentication with Active Directory\nDESCRIPTION: This script demonstrates how to set claims during forms authentication in PowerShell Universal. It uses Active Directory to look up group membership and assign them as claims for use in role policies.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/security/forms-authentication.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nparam(\n    [PSCredential]$Credential\n)\n\n#\n#   You can call whatever cmdlets you like to conduct authentication here.\n#   Just make sure to return the $Result with the Success property set to $true\n#\n\n$Result = [Security.AuthenticationResult]::new()\nif ($Credential.UserName -eq 'Admin') \n{\n    #Maintain the out of box admin user\n    New-PSUAuthenticationResult -UserName 'Admin' -Success\n}\nelse\n{\n    # Get current domain using logged-on user's credentials - this validates their credential\n    $CurrentDomain = \"LDAP://DC=mydemodomain,DC=com\"  # Insert Your Domain Here\n    $domain = New-Object System.DirectoryServices.DirectoryEntry($CurrentDomain,($Credential.UserName),$Credential.GetNetworkCredential().password)\n\n    if ($domain.name -eq $null)\n    {\n        \"Authentication failed for $($Credential.UserName)!\" | Out-File \"C:\\test\\adlogin.txt\"\n        write-host \"Authentication failed - please verify your username and password.\"\n        New-PSUAuthenticationResult -UserName $Credential.UserName\n    }\n    else\n    {\n        write-host \"Successfully authenticated with domain $($domain.name)\"\n        \"Authentication success for $($Credential.UserName)!\" | Out-File \"C:\\test\\adlogin.txt\"\n\n        New-PSUAuthenticationResult -UserName $Credential.UserName -Success -Claims { \n            Get-ADPrincipalGroupMembership $Credential.UserName | Select-Object -ExpandProperty name | ForEach-Object {\n                New-PSUAuthorizationClaim -Type Role -Value $_\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Role-Based Access Control Using Active Directory Group Membership in PowerShell Universal\nDESCRIPTION: This snippet demonstrates how to create a role in PowerShell Universal based on Active Directory group membership. It uses claim mappings to assign roles based on the user's group SID.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/security/README.md#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n$Parameters = @{\n    Name = \"Administrators\"\n    ClaimType = 'http://schemas.microsoft.com/ws/2008/06/identity/claims/groupsid'\n    ClaimValue = 'S-1-5-21-22222222-111111-3333333-153'\n}\n\nNew-PSURole @Parameters\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Processing for Large Datasets in Universal Dashboard Tables\nDESCRIPTION: This snippet demonstrates how to use server-side processing for handling large datasets in Universal Dashboard tables. It includes filtering, sorting, and pagination on the server side.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTable.txt#2025-04-16_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\n$Columns = @(\n    New-UDTableColumn -Property Name -Title \"Name\" -ShowFilter\n    New-UDTableColumn -Property Value -Title \"Value\" -ShowFilter\n)\n\n$Data = 1..1000 | ForEach-Object {\n[PSCustomObject]@{\n    Name = \"Record-$_\"\n    Value = $_ \n}\n}\n\nNew-UDTable -Columns $Columns -LoadData {\n    foreach($Filter in $EventData.Filters)\n    {\n        $Data = $Data | Where-Object -Property $Filter.Id -Match -Value $Filter.Value\n    }\n\n    $TotalCount = $Data.Count \n\n    if (-not [string]::IsNullOrEmpty($EventData.OrderBy.Field))\n    {\n        $Descending = $EventData.OrderDirection -ne 'asc'\n        $Data = $Data | Sort-Object -Property ($EventData.orderBy.Field) -Descending:$Descending\n    }\n    \n    $Data = $Data | Select-Object -First $EventData.PageSize -Skip ($EventData.Page * $EventData.PageSize)\n\n    $Data | Out-UDTableData -Page $EventData.Page -TotalCount $TotalCount -Properties $EventData.Properties \n} -ShowFilter -ShowSort -ShowPagination -Id 'table7'\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters from PowerShell to Universal Jobs\nDESCRIPTION: Demonstrates how to invoke a PowerShell Universal script with parameters using the Invoke-PSUScript cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/automation/scripts/parameters.md#2025-04-16_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nparam($MyParameter)\n\n$MyParameter\n```\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-PSUScript -Name 'Script.ps1' -MyParameter \"Hello\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Push-Only Git Synchronization in PowerShell Universal\nDESCRIPTION: Configuration example for push-only git synchronization mode where changes are not pulled from the remote repository. This setup is useful when one machine serves as the source-of-truth for a pool of read-only servers.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/git.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"Data\": {\n  \"RepositoryPath\": \"%ProgramData%\\\\UniversalAutomation\\\\Repository\",\n  \"ConnectionString\": \"%ProgramData%\\\\UniversalAutomation\\\\database.db\",\n  \"DatabaseType\": \"LiteDB\",\n  \"GitRemote\": \"https://github.com/myorg/myrepo.git\",\n  \"GitUserName\": \"any\",\n  \"GitPassword\": \"MYPAT----------------\"\n  \"GitBranch\": \"dev\",\n  \"GitSyncBehavior\": \"PushOnly\",\n  \"ConfigurationScript\": \"\"\n},\n```\n\n----------------------------------------\n\nTITLE: Creating Simple HTTP Cookie Middleware in PowerShell Universal\nDESCRIPTION: This script demonstrates how to create a middleware component that adds a test cookie to each HTTP response. The middleware uses the New-PSUMiddleware cmdlet with a ScriptBlock that accesses the HttpContext object to append a cookie named 'X-Test' with a value of 'Test'.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/middleware.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUMiddleware -Name 'Middle' -ScriptBlock {\n    param($HttpContext)\n    $HttpContext.Response.Cookies.Append('X-Test', \"Test\")\n    $true\n}\n```\n\n----------------------------------------\n\nTITLE: Granting Certificate Permissions for Group Managed Service Account\nDESCRIPTION: This PowerShell script grants read permissions to a Group Managed Service Account for a specific certificate in the Windows certificate store. It's useful when the PowerShell Universal service uses a GMSA and needs access to the certificate for HTTPS support.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/hosting/README.md#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\n$thumbprint = \"<<THUMBPRINT>>\"\n$certPath = \"C:\\ProgramData\\Microsoft\\Crypto\\RSA\\MachineKeys\"\n$cert = Get-ChildItem -Path Cert:\\LocalMachine\\My\\$thumbprint\n$acl = Get-Acl -Path (Join-Path $certPath $cert.PrivateKey.CspKeyContainerInfo.UniqueKeyContainerName)\n$gmSaAccount = \"Domain\\<<GMSA_Account>>$\"\n$accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule($gmSaAccount, \"Read\", \"Allow\")\n$acl.SetAccessRule($accessRule)\nSet-Acl -Path (Join-Path $certPath $cert.PrivateKey.CspKeyContainerInfo.UniqueKeyContainerName) -AclObject $acl\n```\n\n----------------------------------------\n\nTITLE: Implementing Role-Based Access for Universal App Pages with PowerShell\nDESCRIPTION: Demonstrates how to restrict page access based on user roles by assigning specific roles to different pages using the -Role parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/pages.md#2025-04-16_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\n$Pages = @()\n$Pages += New-UDPage -Name 'Administrators' -Content {\n    New-UDTypography -Text 'Dashboard for user: $User'\n} -Role 'Administrator'\n\n$Pages += New-UDPage -Name 'Operators' -Content {\n    New-UDTypography -Text 'Dashboard for user: $User'\n} -Role 'Operator'\n\nNew-UDApp -Title 'Pages' -Pages $Pages\n```\n\n----------------------------------------\n\nTITLE: Installing Performance Counters for PowerShell Universal\nDESCRIPTION: PowerShell script to install performance counters for PowerShell Universal manually. The script creates a counter category with various performance metrics such as active endpoints, execution time, and calls per second. Must be run from an elevated prompt.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/monitoring.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$categoryName = \"PowerShell Universal\"\n$categoryType = [System.Diagnostics.PerformanceCounterCategoryType]::MultiInstance\n$categoryExists = [System.Diagnostics.PerformanceCounterCategory]::Exists($categoryName)\n\nIf (-Not $categoryExists)\n{\n$objCCDC = New-Object System.Diagnostics.CounterCreationDataCollection\n$objCCD1 = New-Object System.Diagnostics.CounterCreationData\n$objCCD1.CounterName = \"Active Endpoints\"\n$objCCD1.CounterType = \"NumberOfItems32\"\n$objCCD1.CounterHelp = \"Active number of executing endpoints.\"\n$objCCDC.Add($objCCD1) | Out-Null\n\n$objCCD1 = New-Object System.Diagnostics.CounterCreationData\n$objCCD1.CounterName = \"Execution Time\"\n$objCCD1.CounterType = \"averageTimer32\"\n$objCCD1.CounterHelp = \"Average execution time.\"\n$objCCDC.Add($objCCD1) | Out-Null\n\n$objCCD1 = New-Object System.Diagnostics.CounterCreationData\n$objCCD1.CounterName = \"Execution Time Base\"\n$objCCD1.CounterType = \"averageBase\"\n$objCCD1.CounterHelp = \"Average execution time base.\"\n$objCCDC.Add($objCCD1) | Out-Null\n\n$objCCD1 = New-Object System.Diagnostics.CounterCreationData\n$objCCD1.CounterName = \"Calls per second\"\n$objCCD1.CounterType = \"rateOfCountsPerSecond64\"\n$objCCD1.CounterHelp = \"Number of executions per second.\"\n$objCCDC.Add($objCCD1) | Out-Null\n\n$objCCD1 = New-Object System.Diagnostics.CounterCreationData\n$objCCD1.CounterName = \"Active Connections\"\n$objCCD1.CounterType = \"numberOfItems64\"\n$objCCD1.CounterHelp = \"Number of active connections to dashboards\"\n$objCCDC.Add($objCCD1) | Out-Null\n\n[System.Diagnostics.PerformanceCounterCategory]::Create($categoryName, $categoryHelp, $categoryType, $objCCDC)|Out-Null\n}\n```\n\n----------------------------------------\n\nTITLE: Using Delegated Access Tokens with Okta in PowerShell Universal\nDESCRIPTION: This PowerShell snippet shows how to use delegated access tokens from Okta in PowerShell Universal scripts. It demonstrates making an authenticated request to the Okta userinfo endpoint using the access token.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/security/enterprise-security/openid-connect.md#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-RestMethod https://poshtools.okta.com/oauth2/v1/userinfo -Headers @{\n    Authorization = \"Bearer $AccessToken\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PowerShell Universal from ZIP File on Windows\nDESCRIPTION: Command sequence for installing PowerShell Universal on Windows using the ZIP distribution. It extracts the archive, unblocks the files for security, and starts the server executable.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/README.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nExpand-Archive -Path .\\Universal.zip -DestinationPath .\\Universal\nGet-ChildItem .\\Universal -Recurse | Unblock-File\nStart-Process .\\Universal\\Universal.Server.exe\n```\n\n----------------------------------------\n\nTITLE: Implementing Auto-Refresh in Dynamic Regions with PowerShell\nDESCRIPTION: Creates a dynamic region that automatically refreshes every second, displaying the current date and a random number. This is useful for showing real-time or frequently changing data.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/dynamic-regions.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n    New-UDDynamic -Id 'date' -Content {\n        New-UDTypography -Text \"$(Get-Date)\" -Variant h3\n        New-UDTypography -Text \"$(Get-Random)\" -Variant h3\n    } -AutoRefresh -AutoRefreshInterval 1\n```\n\n----------------------------------------\n\nTITLE: Implementing Auto-Refreshing Nivo Bar Chart in PowerShell\nDESCRIPTION: Creates a dynamically refreshing bar chart using New-UDDynamic with random data generation. The chart automatically updates its data at regular intervals.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-visualization/charts.md#2025-04-16_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDynamic -Content {\n    $Data = 1..10 | ForEach-Object { \n        $item = Get-Random -Max 1000 \n        [PSCustomObject]@{\n            Name = \"Test$item\"\n            Value = $item\n        }\n    }\n    New-UDNivoChart -Id 'autoRefreshingNivoBar' -Bar -Keys \"Value\" -IndexBy 'name' -Data $Data -Height 500 -Width 1000\n} -AutoRefresh\n```\n\n----------------------------------------\n\nTITLE: Checking Certificate Thumbprint for Authorization in PowerShell Universal\nDESCRIPTION: PowerShell script demonstrating how to evaluate the thumbprint claim of a client certificate for authorization purposes in the roles.ps1 file.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/security/enterprise-security/client-certificate.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nparam($User)\n\n$User.HasClaim('http://schemas.xmlsoap.org/ws/2005/05/identity/claims/thumbprint', '8D2212B6EA170A33055A5')\n```\n\n----------------------------------------\n\nTITLE: Flexible Width Columns Implementation\nDESCRIPTION: Demonstrates how to implement flexible width columns using the flex property with minimum and maximum width constraints.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/data-grid.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDataGrid -LoadRows {  \n    $Rows = 1..100 | % {\n        @{ Name = 'Adam'; Number = \"This column is a very long string. This column is a very long string. This column is a very long string. This column is a very long string. This column is a very long string. This column is a very long string.\"}\n    }        \n    $Rows| Out-UDDataGridData -Context $EventData -TotalRows $Rows.Length\n} -Columns @(\n    New-UDDataGridColumn -Field name -Render {\n         New-UDTypography $EventData.number \n    }\n    New-UDDataGridColumn -Field number -Flex 1.0\n) -AutoHeight $true\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Table in PowerShell for Universal Apps\nDESCRIPTION: This snippet demonstrates how to create a basic table with no frills using PowerShell in Universal Apps. It defines table data and uses the New-UDTable cmdlet to generate the table.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/table.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$TableData = @(\n    @{Dessert = 'Frozen yoghurt'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Ice cream sandwich'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Eclair'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Cupcake'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Gingerbread'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n)\n\nNew-UDTable -Data $TableData\n```\n\n----------------------------------------\n\nTITLE: Defining a PowerShell Class Model for Blazor Forms\nDESCRIPTION: This PowerShell script defines a class for a form model, creates an instance of the class, and sets up a submission handler function. The class serves as the data model that binds to form input fields, and the Submit function handles the form submission event.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/portal/portal-widgets/forms.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nclass MyClass {\n    [string]$Str \n}\n\n$Variables[\"Model\"] = [MyClass]::new()\n\nfunction Submit {\n    param($EventArgs)\n\n    $Message.Success($EventArgs.Model.Str)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Charts with Click Events in ChartJS using PowerShell\nDESCRIPTION: This snippet demonstrates how to add click events to a chart using ChartJS in Universal Apps. It shows a toast message with the clicked element's data.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-visualization/charts.md#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\n $Data = Get-Process | Sort-Object -Property CPU -Descending | Select-Object -First 10 \n\n  $Options = @{\n   Type = 'bar'\n   Data = $Data\n   DataProperty = 'CPU'\n   LabelProperty = \"ProcessName\"\n   OnClick = { \n      Show-UDToast -Message $Body\n   }\n }\n\n\n New-UDChartJS @Options\n```\n\n----------------------------------------\n\nTITLE: Using Arguments List with Dynamic Regions in PowerShell\nDESCRIPTION: Demonstrates passing an array of arguments to a dynamic region. The arguments are accessible within the Content script block but remain static when the region is refreshed.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/dynamic-regions.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDynamic -Id 'dynamic_01' -Content {\n    New-UDTypography -Text \"This is an $($ArgumentList[0]) an $($ArgumentList[1]) in a UDDynamic\"\n} -ArgumentList @('example of', 'arguments list') \n```\n\n----------------------------------------\n\nTITLE: Creating Advanced Card Component with Multiple Features\nDESCRIPTION: Shows how to create a complex card component with header, media, body, footer, and expandable content. Includes avatar, action buttons, images, and formatted text content with custom styling.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/surfaces/card.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$Header = New-UDCardHeader -Avatar (New-UDAvatar -Content { \"R\" } -Sx @{ backgroundColor = \"#f44336\" }) -Action (New-UDIconButton -Icon (New-UDIcon -Icon 'EllipsisVertical')) -Title 'Shrimp and Chorizo Paella' -SubHeader 'September 14, 2016';\n$Media = New-UDCardMedia -Image 'https://mui.com/static/images/cards/paella.jpg'\n$Body = New-UDCardBody -Content {\n    New-UDTypography -Text ' This impressive paella is a perfect party dish and a fun meal to cook together with your guests. Add 1 cup of frozen peas along with the mussels, if you like.' -Sx @{\n        color = 'text.secondary'\n    } -Variant body2\n}\n$Footer = New-UDCardFooter -Content {\n    New-UDIconButton -Icon (New-UDIcon -Icon 'Heart')\n    New-UDIconButton -Icon (New-UDIcon -Icon 'ShareAlt')\n}\n$Expand = New-UDCardExpand -Content {\n    $Description = @\"\n    Heat oil in a (14- to 16-inch) paella pan or a large, deep skillet over\n    medium-high heat. Add chicken, shrimp and chorizo, and cook, stirring\n    occasionally until lightly browned, 6 to 8 minutes. Transfer shrimp to a\n    large plate and set aside, leaving chicken and chorizo in the pan. Add\n    pimentón, bay leaves, garlic, tomatoes, onion, salt and pepper, and cook,\n    stirring often until thickened and fragrant, about 10 minutes. Add\n    saffron broth and remaining 4 1/2 cups chicken broth; bring to a boil.\n    New-UDTypography -Text $Description\n}\nNew-UDCard -Header $Header -Media $Media -Body $Body -Footer $Footer -Expand $Expand -Sx @{\n    maxWidth = 345\n    border   = '2px solid #f0f2f5'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Chart in Universal Dashboard with PowerShell\nDESCRIPTION: This snippet shows how to create a line chart using New-UDChartJS in Universal Dashboard. It sets up data for monthly sales, defines chart options including tooltips and legend, and creates the chart component.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-visualization/README.md#2025-04-16_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDChartJS -Type 'line' -Data @{\n    labels = @('January', 'February', 'March', 'April', 'May', 'June')\n    datasets = @(\n        @{\n            label = \"Monthly Sales\"\n            data = @(65, 59, 80, 81, 56, 55)\n            fill = $false\n            borderColor = \"rgb(75, 192, 192)\"\n            tension = 0.1\n        }\n    )\n} -Options @{\n    responsive = $true\n    plugins = @{\n        title = @{\n            display = $true\n            text = 'Monthly Sales Chart'\n        }\n        tooltip = @{\n            mode = 'index'\n            intersect = $false\n        }\n    }\n    hover = @{\n        mode = 'nearest'\n        intersect = $true\n    }\n    scales = @{\n        x = @{\n            display = $true\n            title = @{\n                display = $true\n                text = 'Month'\n            }\n        }\n        y = @{\n            display = $true\n            title = @{\n                display = $true\n                text = 'Value'\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Element Updates in PowerShell Universal Dashboard\nDESCRIPTION: This example shows how to create a dynamic element and a button that syncs the element across all connected dashboards using the -Broadcast parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Sync-UDElement.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDynamic -Id 'sync2' -Content {\n    New-UDTypography (Get-Random)\n}\nNew-UDButton -Text 'Refresh' -OnClick {\n   Sync-UDElement 'sync2' -Broadcast\n} -Id 'syncButton2'\n```\n\n----------------------------------------\n\nTITLE: Accessing HTTP Headers in PowerShell Universal API Endpoints\nDESCRIPTION: Demonstrates how to access HTTP request headers within an API endpoint using the built-in $Headers hashtable.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/endpoints.md#2025-04-16_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\n$Headers['Content-Type']\n```\n\n----------------------------------------\n\nTITLE: Creating Auto-Refreshing Charts with ChartJS in PowerShell\nDESCRIPTION: This snippet shows how to create an auto-refreshing chart using ChartJS and New-UDDynamic in Universal Apps. The chart updates every second with new random data.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-visualization/charts.md#2025-04-16_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDynamic -Content {\n    $Data = 1..10 | % { \n        [PSCustomObject]@{ Name = $_; value = get-random }\n    }\n    New-UDChartJS -Type 'bar' -Data $Data -DataProperty Value -Id 'test' -LabelProperty Name -BackgroundColor Blue\n} -AutoRefresh -AutoRefreshInterval 1\n```\n\n----------------------------------------\n\nTITLE: Migrating PowerShell Universal Database Schema\nDESCRIPTION: Command to migrate a PowerShell Universal database from one schema version to another. Specifies the connection string, target schema version, and database type. Note that migrating to lower versions can cause data loss.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/psucli.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\npsu db schema --connection-string 'Server=SQL;Data Source=PSU;Integrated Security=True' --schema-version 5.1.0 --database-type 'SQL'\n```\n\n----------------------------------------\n\nTITLE: Creating a New Dashboard with Content in PowerShell Universal\nDESCRIPTION: This syntax demonstrates how to create a new dashboard with content using the New-UDApp cmdlet. It includes various optional parameters for customizing the dashboard's appearance and behavior.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDApp.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDApp [-Title <String>] -Content <Endpoint> [-Theme <Hashtable>] [-Scripts <String[]>] [-Stylesheets <String[]>] [-Logo <String>] [-DefaultTheme <String>] [-DisableThemeToggle] [-HeaderPosition <String>] [-HeaderColor <DashboardColor>] [-HeaderBackgroundColor <DashboardColor>] [-NavigationLayout <String>] [-Navigation <Hashtable[]>] [-HideUserName] [-HideNavigation] [-LoadNavigation <Endpoint>] [-HeaderContent <Endpoint>] [-PageNotFound <Endpoint>] [-NotAuthorized <Endpoint>] [-SessionTimeoutModal <ScriptBlock>] [-Menu <Endpoint>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Map with Dynamic Features\nDESCRIPTION: Shows how to create a fully interactive map with buttons to add/remove markers, circles, layers, and manage clustering and heatmap features. Includes multiple base layers and overlay controls.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-visualization/map.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Text 'Add Circle' -OnClick {\n    Add-UDElement -ParentId 'Feature-Group' -Content {\n        New-UDMapVectorLayer -Id 'Vectors' -Circle -Latitude 51.505 -Longitude -0.09 -Radius 500 -Color blue -FillColor blue -FillOpacity .5 \n    }\n}\n\nNew-UDButton -Text 'Remove Circle' -OnClick {\n    Remove-UDElement -Id 'Vectors' \n}\n\nNew-UDButton -Text 'Add Marker' -OnClick {\n    Add-UDElement -ParentId 'Feature-Group' -Content {\n        New-UDMapMarker -Id 'marker' -Latitude 51.505 -Longitude -0.09 -Popup (\n            New-UDMapPopup -Content {\n                New-UDCard -Title \"Test\"\n            } -MaxWidth 600\n        ) \n    }\n}\n\nNew-UDButton -Text 'Remove Marker' -OnClick {\n    Remove-UDElement -Id 'marker' \n}\n\nNew-UDButton -Text 'Add Layer' -OnClick {\n    Add-UDElement -ParentId 'layercontrol' -Content {\n        New-UDMapOverlay -Id 'MyNewLayer' -Name \"MyNewLayer\" -Content {\n            New-UDMapFeatureGroup -Id 'Feature-Group2' -Content {\n                1..100 | % {\n                    New-UDMapVectorLayer -Id 'test' -Circle -Latitude \"51.$_\" -Longitude -0.09 -Radius 50 -Color red -FillColor blue -FillOpacity .5        \n                }\n            }\n        } -Checked\n\n    }\n}\n\nNew-UDButton -Text 'Remove Layer' -OnClick {\n    Remove-UDElement -Id 'MyNewLayer' \n}\n\nNew-UDButton -Text 'Move' -OnClick {\n    Set-UDElement -Id 'map' -Attributes @{\n        latitude = 51.550\n        longitude = -0.09\n        zoom = 10\n    }\n}\n\nNew-UDButton -Text \"Add marker to cluster\" -OnClick {\n    Add-UDElement -ParentId 'cluster-layer' -Content {\n        $Random = Get-Random -Minimum 0 -Maximum 100\n        $RandomLat = $Random + 400\n        New-UDMapMarker -Latitude \"51.$RandomLat\" -Longitude \"-0.$Random\"\n    }\n}\n\nNew-UDButton -Text \"Add points to heatmap\" -OnClick {\n    Add-UDElement -ParentId 'heatmap' -Content {\n        @(\n            @(51.505, -0.09, \"625\"),\n            @(51.505234, -0.0945654, \"625\"),\n            @(51.50645, -0.098768, \"625\"),\n            @(51.5056575, -0.0945654, \"625\"),\n            @(51.505955, -0.095675, \"625\"),\n            @(51.505575, -0.09657, \"625\"),\n            @(51.505345, -0.099876, \"625\"),\n            @(51.505768, -0.0923432, \"625\"),\n            @(51.505567, -0.02349, \"625\"),\n            @(51.50545654, -0.092342, \"625\"),\n            @(51.5045645, -0.09342, \"625\")\n        )\n    }\n}\n\nNew-UDButton -Text \"Clear heatmap\" -OnClick {\n    Clear-UDElement -Id 'heatmap'\n}\n\nNew-UDMap -Id 'map' -Endpoint {\n    New-UDMapLayerControl -Id 'layercontrol' -Content {\n        New-UDMapBaseLayer -Name \"Black and White\" -Content {\n            New-UDMapRasterLayer -TileServer 'https://tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png' \n        } \n\n        New-UDMapBaseLayer -Name \"Mapnik\" -Content {\n            New-UDMapRasterLayer -TileServer 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png' \n        } \n\n        New-UDMapBaseLayer -Name \"Bing\" -Content {\n            New-UDMapRasterLayer -Bing -ApiKey 'asdf3rwf34afaw-sdfasdfa23feaw-23424dfsdfa' -Type Road\n        } -Checked\n\n        New-UDMapOverlay -Name \"Markers\" -Content {\n            New-UDMapFeatureGroup -Id 'Feature-Group' -Content {\n                New-UDMapMarker -Id 'marker' -Latitude 51.505 -Longitude -0.09\n            } -Popup (\n                New-UDMapPopup -Content {\n                    New-UDCard -Title \"Test123\"\n                } -MaxWidth 600\n            )\n        } -Checked\n\n        New-UDMapOverlay -Name 'Vectors' -Content {\n            New-UDMapFeatureGroup -Id 'Vectors' -Content {\n\n            }\n        } -Checked\n\n        New-UDMapOverlay -Name \"Heatmap\" -Content {\n            New-UDMapHeatmapLayer -Id 'heatmap' -Points @() \n        } -Checked \n\n        New-UDMapOverlay -Name \"Cluster\" -Content {\n            New-UDMapMarkerClusterLayer -Id 'cluster-layer' -Markers @(\n                1..100 | ForEach-Object {\n                    $Random = Get-Random -Minimum 0 -Maximum 100\n                    $RandomLat = $Random + 400\n                    New-UDMapMarker -Latitude \"51.$RandomLat\" -Longitude \"-0.$Random\"\n                }\n            )\n        } -Checked\n\n    }\n\n} -Latitude 51.505 -Longitude -0.09 -Zoom 13 -Height '100vh' -Animate\n```\n\n----------------------------------------\n\nTITLE: Creating PowerShell Universal Scripts - Syntax Pattern 1\nDESCRIPTION: Creates a new script using ScriptBlock parameter with various optional configurations including authentication, execution settings, and output handling.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUScript.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUScript [-AppToken <String>] [-ComputerName <String>] [-Description <String>] [-DisableManualInvocation] [-ManualTime <Int32>] [-MaxHistory <Int32>] -Name <String> [-Notes <String>] [-Parameter <ScriptParameter[]>] [-Path <String>] -ScriptBlock <ScriptBlock> [-Status {Draft | Pending_Review | Published | Disabled}] [-Tag <Tag[]>] [-ConcurrentJobs <Int32>] [-Environment <String>] [-TimeOut <Double>] [-Credential <Variable>] [-UseDefaultCredentials] [-Integrated] [-RetryLimit <Int32>] [-DiscardPipeline] [-LoadProfile] [-WorkingDirectory <String>] [-Role <String[]>] [-AvailableInBranch <String[]>] [-PortalOutputType <PortalOutputType>] [-TrustCertificate] [-PortalOpenInNewWindow] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Configuring Loading Components for Dynamic Regions in PowerShell\nDESCRIPTION: Shows how to display a loading indicator while a dynamic region is refreshing. The example uses a circular progress indicator that displays for 3 seconds before showing the final content.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/dynamic-regions.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n    New-UDDynamic -Content {\n        Start-Sleep -Seconds 3\n        New-UDTypography -Text \"Done!\"\n    } -LoadingComponent {\n        New-UDProgress -Circular\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Required SAML2 Name Attribute for PowerShell Universal\nDESCRIPTION: The attribute name that needs to be mapped in the identity provider for PowerShell Universal. This attribute is required and should be mapped to the user identity to be used within PSU.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/security/enterprise-security/saml2.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttp://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\n```\n\n----------------------------------------\n\nTITLE: Creating Script-Based Forms in PowerShell Universal Dashboard\nDESCRIPTION: Shows how to generate a form automatically based on a PowerShell script. The form inputs are generated from the script's param block and can display output in different formats.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/form.md#2025-04-16_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDForm -Script \"Script.ps1\" -OutputType 'text'\n```\n\n----------------------------------------\n\nTITLE: Cookie Authentication Login\nDESCRIPTION: Demonstrates how to authenticate using cookies by first calling the login API to establish a session. Uses Invoke-WebRequest with credentials to obtain a session cookie.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/security.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-WebRequest http://localhost:5000/api/v1/signin -Body (@{ \n    UserName = \"Admin\"\n    Password = \"Any\"\n} | ConvertTo-Json) -ContentType 'application/json' -SessionVariable mySession -Method POST\n```\n\n----------------------------------------\n\nTITLE: Accessing Secret Variables in PowerShell Universal\nDESCRIPTION: Examples of how to access secret variables using the $Secret scope in PowerShell Universal scripts.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/variables.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-Command -Credential $Secret:Credential { Write-Host \"Hello\" }\n\n# Accessing by name\n$Secret:MyNewSecret.UserName\n$Secret:MyNewSecret.Password\n$Secret:DashboardSecret\n\n# Accessing dynamically\n(Get-ChildItem \"Secret:MyNewSecret\").UserName\n(Get-ChildItem \"Secret:MyNewSecret\").Password\n(Get-ChildItem \"Secret:DashboardSecret\")\n\n# Using with ForEach-Object -Parallel\n1..5 | ForEach-Object -Parallel {\n  $using:Secret:MySecret\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Predefined Layouts in PowerShell\nDESCRIPTION: Demonstrates how to apply a predefined JSON layout to a grid layout component. The layout JSON defines the position, size, and other properties for each component identified by its ID. The -Design parameter is removed to lock elements in place.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/layout/grid-layout.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$Layout = '{\"lg\":[{\"w\":7,\"h\":7,\"x\":5,\"y\":0,\"i\":\"grid-element-Paper1\",\"moved\":false,\"static\":false},{\"w\":7,\"h\":5,\"x\":5,\"y\":7,\"i\":\"grid-element-Paper2\",\"moved\":false,\"static\":false},{\"w\":1,\"h\":1,\"x\":0,\"y\":0,\"i\":\"grid-element-Paper3\",\"moved\":false,\"static\":false},{\"w\":1,\"h\":1,\"x\":0,\"y\":1,\"i\":\"grid-element-Paper4\",\"moved\":false,\"static\":false},{\"w\":1,\"h\":1,\"x\":0,\"y\":2,\"i\":\"grid-element-Paper5\",\"moved\":false,\"static\":false},{\"w\":1,\"h\":1,\"x\":0,\"y\":3,\"i\":\"grid-element-Paper6\",\"moved\":false,\"static\":false},{\"w\":1,\"h\":1,\"x\":0,\"y\":4,\"i\":\"grid-element-Paper7\",\"moved\":false,\"static\":false},{\"w\":1,\"h\":1,\"x\":0,\"y\":5,\"i\":\"grid-element-Paper8\",\"moved\":false,\"static\":false},{\"w\":1,\"h\":1,\"x\":0,\"y\":6,\"i\":\"grid-element-Paper9\",\"moved\":false,\"static\":false},{\"w\":1,\"h\":1,\"x\":0,\"y\":7,\"i\":\"grid-element-Paper10\",\"moved\":false,\"static\":false}]}' \nNew-UDGridLayout -Content { 1..10 | ForEach-Object { New-UDPaper -Id \"Paper$\" -Content { New-UDTypography -Text $ } -Elevation 5 } } -Layout $Layout\n```\n\n----------------------------------------\n\nTITLE: Initiating Downloads in Universal Apps\nDESCRIPTION: Shows how to trigger browser downloads using Start-UDDownload within a button click event.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/interaction.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Text 'Download' -OnClick {\n    Start-UDDownload -StringData 'Hello, World!'\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Response Cookies in API Endpoints\nDESCRIPTION: Demonstrates how to set cookies in the HTTP response from an API endpoint using the New-PSUApiResponse cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/endpoints.md#2025-04-16_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUApiResponse -StatusCode 200 -Cookies @{\n    ResponseCookie = '123'\n}\n```\n\n----------------------------------------\n\nTITLE: Adding OnClick Events to Nivo Bar Chart\nDESCRIPTION: Demonstrates how to implement click event handlers in a Nivo bar chart with random data for different countries. Shows toast notifications when chart elements are clicked.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-visualization/charts.md#2025-04-16_snippet_13\n\nLANGUAGE: powershell\nCODE:\n```\n$Data = @(\n    @{\n        country = 'USA'\n        burgers = (Get-Random -Minimum 10 -Maximum 100)\n        fries = (Get-Random -Minimum 10 -Maximum 100)\n        sandwich = (Get-Random -Minimum 10 -Maximum 100)\n    }\n    @{\n        country = 'Germany'\n        burgers = (Get-Random -Minimum 10 -Maximum 100)\n        fries = (Get-Random -Minimum 10 -Maximum 100)\n        sandwich = (Get-Random -Minimum 10 -Maximum 100)\n    }\n    @{\n        country = 'Japan'\n        burgers = (Get-Random -Minimum 10 -Maximum 100)\n        fries = (Get-Random -Minimum 10 -Maximum 100)\n        sandwich = (Get-Random -Minimum 10 -Maximum 100)\n    }\n)\nNew-UDNivoChart -Bar -Data $Data -Height 400 -Width 900 -Keys @('burgers', 'fries', 'sandwich')  -IndexBy 'country' -OnClick {\n    Show-UDToast -Message $EventData -Position topLeft\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dynamic File System Tree View in PowerShell\nDESCRIPTION: Shows how to create a dynamic tree view that displays the file system. This example uses the OnNodeClicked event to populate child nodes dynamically when a parent node is clicked, allowing navigation through the file system hierarchy.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/tree-view.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDashboard -Title 'File System' -Content {\n    Get-PSDrive -PSProvider 'FileSystem' | ForEach-Object {\n        New-UDTreeView -Node { New-UDTreeNode -Name $_.Name -Id \"$($_.Name):\\\" } -OnNodeClicked {\n            Get-ChildItem $EventData.Id | ForEach-Object {\n                New-UDTreeNode -Name $_.Name -Id $_.FullName -Leaf:$(-not $_.PSIsContainer)\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Row and Column Layout in PowerShell for Universal Apps\nDESCRIPTION: Demonstrates the use of New-UDRow and New-UDColumn cmdlets to create a grid layout. It shows how to set different sizes for small, medium, and large screens.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/layout/grid.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDRow -Columns {\n    New-UDColumn -SmallSize 12 -Content {\n        New-UDPaper -Content { \"xs-12\" } -Elevation 2\n    }\n    New-UDColumn -SmallSize 12 -Content {\n        New-UDPaper -Content { \"xs-12\" } -Elevation 2\n    }\n}\n```\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDRow -Columns {\n    New-UDColumn -SmallSize 12 -MediumSize 12 -LargeSize 12 -Content {\n        New-UDPaper -Content { \"xs-12\" } -Elevation 2\n    }\n    New-UDColumn -SmallSize 12 -MediumSize 12 -LargeSize 12 -Content {\n        New-UDPaper -Content { \"xs-12\" } -Elevation 2\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Bubble Chart with ChartJS in PowerShell\nDESCRIPTION: This snippet shows how to create a bubble chart using ChartJS. It uses custom data with x, y, and r (radius) values for each data point.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-visualization/charts.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n$Data = @(\n    @{ x = 1; y = 10; r = 15 }\n    @{ x = 12; y = 25; r = 35 }\n    @{ x = 8; y = 10; r = 95 }\n    @{ x = 6; y = 95; r = 25 }\n)\nNew-UDChartJS -Type 'bubble' -Data $Data \n```\n\n----------------------------------------\n\nTITLE: Creating Auto-Refreshing Bar Chart with Dynamic Data\nDESCRIPTION: Implements an auto-refreshing bar chart that updates every second with random data. Demonstrates dynamic data visualization capabilities.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDChartJS.txt#2025-04-16_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDElement -Tag 'div' -Attributes @{ style = @{ height = '20vh'; width = \"20vw\"; } } -Content {\n    New-UDDynamic -Content {\n        $Data = 1..10 | % { \n         [PSCustomObject]@{ Name = $_; value = get-random }\n        }\n        New-UDChartJS -Type 'bar' -Data $Data -DataProperty Value -Id 'chart10' -LabelProperty Name -BackgroundColor Blue \n     } -AutoRefresh -AutoRefreshInterval 1\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Event Handlers in Universal Apps\nDESCRIPTION: Adds interactive functionality to buttons by defining script blocks that execute when the button is clicked, shown with a toast message example.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/button.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Text 'Message Box' -OnClick {\n    Show-UDToast -Message 'Hello, world!'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Secure PowerShell Universal Endpoint\nDESCRIPTION: Creates a new secure endpoint using New-PSUEndpoint cmdlet with authentication enabled. The endpoint responds with 'Hello, world!' and requires authentication to access.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/security.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUEndpoint -Url '/endpoint' -Method 'GET' -Endpoint {\n   \"Hello, world!\"\n} -Authentication\n```\n\n----------------------------------------\n\nTITLE: Retrieving the User that Started a PowerShell Universal Script\nDESCRIPTION: PowerShell example showing how to retrieve the username of the identity that started the current PowerShell Universal job using the $UAJob variable.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/variables.md#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\n$UAJob.Identity.Name\n```\n\n----------------------------------------\n\nTITLE: Loading Custom AppSettings for Universal.Server.exe\nDESCRIPTION: This command line option allows loading a specified appsettings file when starting Universal.Server.exe. It provides flexibility in configuring the server with custom settings.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/command-line-options.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUniversal.Server.exe --appsettings <appsettings path>\n```\n\n----------------------------------------\n\nTITLE: Creating Textbox with OnChange Event in PowerShell\nDESCRIPTION: Creates a textbox with an OnChange event that displays a toast message with the current input value.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTextbox.txt#2025-04-16_snippet_14\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTextbox -Id 'textbox14' -OnChange {\n    Show-UDToast -Message $EventData\n} -Label 'Name' -Placeholder 'Enter your name' -Value 'John Doe'\n```\n\n----------------------------------------\n\nTITLE: Reloading PowerShell Universal Configuration Files with Sync-PSUConfiguration\nDESCRIPTION: This example demonstrates how to reload all PowerShell Universal configuration files using the Sync-PSUConfiguration cmdlet without any parameters. This is the simplest way to refresh the configuration without restarting the service.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Sync-PSUConfiguration.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSync-PSUConfiguration\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication for API Calls in PowerShell Universal\nDESCRIPTION: This script demonstrates how to use Basic authentication when calling API endpoints or the PowerShell Management API in PowerShell Universal. It encodes the username and password in Base64 format.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/security/forms-authentication.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n$credentials = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(\"admin:admin\"))\nInvoke-RestMethod $Env:UniversalUrl/api/v1/accessible -Headers @{\n    Authorization = \"Basic $credentials\"\n} \n```\n\n----------------------------------------\n\nTITLE: Creating ChartJS Datasets with Process Data in PowerShell\nDESCRIPTION: Example demonstrating how to create multiple ChartJS datasets using process CPU and handle count data. Shows creation of bar chart configuration with custom styling and multiple datasets.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDChartJSDataset.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$Data = Get-Process | Sort-Object -Property CPU -Descending | Select-Object -First 10 \n\n$CPUDataset = New-UDChartJSDataset -DataProperty CPU -Label CPU -BackgroundColor '#126f8c'\n$MemoryDataset = New-UDChartJSDataset -DataProperty HandleCount -Label 'Handle Count' -BackgroundColor '#8da322'\n$Options = @{\n    Type = 'bar'\n    Data = $Data\n    Dataset = @($CPUDataset, $MemoryDataset)\n    LabelProperty = \"ProcessName\"\n}\nNew-UDChartJS @Options\n```\n\n----------------------------------------\n\nTITLE: Defining Comment-Based Help for API Endpoint in PowerShell\nDESCRIPTION: Demonstrates how to use comment-based help to provide documentation for an API endpoint, including synopsis, description, and parameter descriptions.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/openapi.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n<# \n.SYNOPSIS\nThis is an endpoint\n\n.DESCRIPTION\nThis is a description\n\n.PARAMETER ID\nThis is an ID.\n\n#>\nparam($ID)\n    \n$Id\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Authentication with Username and Password in PowerShell Universal\nDESCRIPTION: Configuration example for setting up git authentication using a username and password in the appsettings.json file as an alternative to personal access tokens.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/git.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n    \"Data\": {\n    \"RepositoryPath\": \"%ProgramData%\\\\UniversalAutomation\\\\Repository\",\n    \"ConnectionString\": \"%ProgramData%\\\\UniversalAutomation\\\\database.db\",\n    \"GitRemote\": \"https://github.com/myorg/myrepo.git\",\n    \"GitUserName\": \"myusername\",\n    \"GitPassword\": \"mypassword\"\n  },\n```\n\n----------------------------------------\n\nTITLE: Configuring System Logging in PowerShell Universal\nDESCRIPTION: This JSON snippet shows the configuration for system logging in PowerShell Universal. It sets the log path and log level in the appsettings.json file.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/development/logging.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"SystemLogPath\": \"%ProgramData%\\\\PowerShellUniversal\",\n    \"SystemLogLevel\": \"Information\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting SAML2 Authentication with Certificate Password in PowerShell Universal\nDESCRIPTION: PowerShell script to configure SAML2 authentication in PSU with a password-protected certificate. Uses the SecretManagement module to securely retrieve the certificate password.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/security/enterprise-security/saml2.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PSUAuthenticationMethod `\n-Type \"Saml2\" `\n-EntityId \"http://psu.ironman.local/sp\" `\n-IdentityProviderEntityId 'https://ironman.local/idp' `\n-MetadataAddress 'https://idp.ironman.local/idp/shibboleth' `\n-CallbackPath \"https://localhost:5000/\" `\n-ServiceCertificate cert.pfx `\n-ServiceCertificatePassword (Get-Secret -Name 'certPassword')\n```\n\n----------------------------------------\n\nTITLE: Checking if a PowerShell Universal Job was Run Manually\nDESCRIPTION: PowerShell example demonstrating how to determine if a job was triggered manually rather than by a schedule or other trigger by examining the Schedule and Trigger properties of the $UAJob variable.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/variables.md#2025-04-16_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\n$Manual = $UAJob.Schedule -eq $null -and $UAJob.Trigger -eq $null\n```\n\n----------------------------------------\n\nTITLE: Creating Schema-Based Form with Custom Field Ordering in PowerShell Universal Dashboard\nDESCRIPTION: Shows how to create a complex schema-based form with custom field ordering using the uiSchema parameter. Includes various field types and validation requirements.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/form.md#2025-04-16_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDForm -Schema @{\n        title = \"Test\"\n        type = \"object\"\n        properties = @{\n            hostname = @{\n                title = \"Hostname\"\n                type = \"string\"\n                }\n            ipaddress= @{\n                title = \"IP Address\"\n                type = \"string\"\n                format = \"ipv4\"\n                }\n            description = @{\n                title = \"Server Description\"\n                type = \"string\"\n                }\n            servertype = @{\n                title = \"Server Type\"\n                type = \"string\"                            \n                enum = \"App\",\"DB\"\n                }\n            environment = @{\n                title = \"Environment\"\n                type = \"string\"\n                enum = \"Prod\", \"Dev\" , \"QA\"\n                }\n            }\n\t\trequired = @('hostname','ipaddress','description','servertype','environment')                    \n\t} -uiSchema @{\n\t\t\"ui:order\" = @('environment','hostname','ipaddress','description')\n\t} -OnSubmit {\n\t\tShow-UDModal -Content {                        \n\t\t\tNew-UDTypography -Text $EventData\n\t\t} -Footer {\n\t\t\tNew-UDButton -Text \"Close\" -OnClick {Hide-UDModal}\n\t\t} -Persistent\n\t}\n```\n\n----------------------------------------\n\nTITLE: Server-Side Table Export\nDESCRIPTION: Implements server-side export functionality with custom data loading and export handling. Includes filtering, sorting, and pagination capabilities.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/table.md#2025-04-16_snippet_15\n\nLANGUAGE: powershell\nCODE:\n```\n$Columns = @(\n    New-UDTableColumn -Property Name -Title \"Name\" -ShowFilter -IncludeInExport\n    New-UDTableColumn -Property Value -Title \"Value\" -ShowFilter -IncludeInExport\n)\n\n$TableData = 1..1000 | ForEach-Object {\n  [PSCustomObject]@{\n      Name = \"Record-$_\"\n      Value = $_ \n  }\n}\n\nNew-UDTable -Columns $Columns -LoadData {\n    foreach($Filter in $EventData.Filters)\n    {\n        $TableData = $TableData | Where-Object -Property $Filter.Id -Match -Value $Filter.Value\n    }\n\n    $TotalCount = $TableData.Count \n\n    if (-not [string]::IsNullOrEmpty($EventData.OrderBy.Field))\n    {\n        $Descending = $EventData.OrderDirection -ne 'asc'\n        $TableData = $TableData | Sort-Object -Property ($EventData.orderBy.Field) -Descending:$Descending\n    }\n    \n    $TableData = $TableData | Select-Object -First $EventData.PageSize -Skip ($EventData.Page * $EventData.PageSize)\n\n    $TableData | Out-UDTableData -Page $EventData.Page -TotalCount $TotalCount -Properties $EventData.Properties \n} -ShowFilter -ShowSort -ShowPagination  -Export -OnExport {\n   $Query = $Body | ConvertFrom-Json\n\n    $TableData | ConvertTo-Json\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Insights in PowerShell Universal Settings\nDESCRIPTION: JSON configuration for connecting PowerShell Universal to Application Insights by specifying the connection string in the settings file. This enables application monitoring and metrics collection.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/monitoring.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"ApplicationInsights\": {\n    \"ConnectionString\": \"InstrumentationKey=73b84b67-6fc9-4c37-9f54-000000000000\"\n  },\n```\n\n----------------------------------------\n\nTITLE: Profiling PowerShell API Endpoint\nDESCRIPTION: Creates a profiled API endpoint that measures the execution time of getting process information using Measure-PSUBlock.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/development/profiling.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUEndpoint -Url \"/process\" -Endpoint {\n    Measure-PSUBlock -Name 'Api' -ScriptBlock {\n        Get-Process | Select-Object name\n    }\n} -Authentication -Timeout 0\n```\n\n----------------------------------------\n\nTITLE: Setting Cache with Sliding Expiration\nDESCRIPTION: Shows how to implement sliding expiration for cache items, where the expiration timer resets upon access.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/cache.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PSUCache -Key \"CurrentDate\" -Value (Get-Date) -SlidingExpiration ([TimeSpan]::FromMinutes(5))\n```\n\n----------------------------------------\n\nTITLE: Basic Script Invocation in PowerShell Universal\nDESCRIPTION: Example showing how to get and invoke a script using PSU's Get-PSUScript and Invoke-PSUScript cmdlets.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Invoke-PSUScript.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$Script = Get-PSUScript -Name 'Script1.ps1'\nInvoke-PSUScript -Script $Script\n```\n\n----------------------------------------\n\nTITLE: Enabling Job Run ID Feature\nDESCRIPTION: Shows how to enable the JobRunID experimental feature for enhanced security.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/automation/jobs.md#2025-04-16_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PSUSetting -JobRunId\n```\n\n----------------------------------------\n\nTITLE: Hidden Columns in Table Export\nDESCRIPTION: Implements table export with hidden columns that are included in the export but not visible in the UI display. Uses service data with a hidden StartType column.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/table.md#2025-04-16_snippet_14\n\nLANGUAGE: powershell\nCODE:\n```\n$TableData = try { get-service -ea Stop | select Name,@{n = \"Status\";e={ $_.Status.ToString()}},@{n = \"StartupType\";e={ $_.StartupType.ToString()}},@{n = \"StartType\";e={ $_.StartType.ToString()}} } catch {}\n$Columns = @(\n    New-UDTableColumn -Property Name -Title \"Service Name\" -IncludeInExport\n    New-UDTableColumn -Property Status -Title Status \n    New-UDTableColumn -Property StartupType\n    New-UDTableColumn -Property StartType -IncludeInExport -Hidden\n)\nNew-UDTable -Id 'service_table' -Data $TableData -Columns $Columns -Title 'Services' -ShowSearch -ShowPagination -Dense -Export\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Grid Layout in PowerShell for Universal Apps\nDESCRIPTION: Demonstrates how to create a basic responsive grid layout using New-UDGrid cmdlet. The example shows various grid item sizes and their content using New-UDPaper.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/layout/grid.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDGrid -Container -Content {\n    New-UDGrid -Item -ExtraSmallSize 12 -Content {\n        New-UDPaper -Content { \"xs-12\" } -Elevation 2\n    }\n    New-UDGrid -Item -ExtraSmallSize 6 -Content {\n        New-UDPaper -Content { \"xs-6\" } -Elevation 2\n    }\n    New-UDGrid -Item -ExtraSmallSize 6 -Content {\n        New-UDPaper -Content { \"xs-6\" } -Elevation 2\n    }\n    New-UDGrid -Item -ExtraSmallSize 3 -Content {\n        New-UDPaper -Content { \"xs-3\" } -Elevation 2\n    }\n    New-UDGrid -Item -ExtraSmallSize 3 -Content {\n        New-UDPaper -Content { \"xs-3\" } -Elevation 2\n    }\n    New-UDGrid -Item -ExtraSmallSize 3 -Content {\n        New-UDPaper -Content { \"xs-3\" } -Elevation 2\n    }\n    New-UDGrid -Item -ExtraSmallSize 3 -Content {\n        New-UDPaper -Content { \"xs-3\" } -Elevation 2\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling OnClick Events with Floating Action Buttons in PowerShell\nDESCRIPTION: This snippet shows how to implement click handling for a Floating Action Button. It uses the OnClick parameter to define a script block that displays a toast message when the button is clicked.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/floating-action-button.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDFloatingActionButton -Icon (New-UDIcon -Icon user) -OnClick {\n    Show-UDToast -Message \"Hello!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Buttons After Click in Universal Apps\nDESCRIPTION: Uses Set-UDElement to disable a button after it has been clicked and performed its action, preventing multiple submissions or repeated actions.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/button.md#2025-04-16_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Id \"btn1\" -OnClick {\n    Show-UDToast \"Hello!\"\n    Set-UDElement -Id 'btn1' -Attributes @{\n        disabled = $true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Stream Chart with Random Data\nDESCRIPTION: Creates a stream chart using randomly generated data for multiple users. The chart displays data points for Adam, Alon, Lee, Frank, and Bill with specified dimensions.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-visualization/charts.md#2025-04-16_snippet_21\n\nLANGUAGE: powershell\nCODE:\n```\n$Data = 1..10 | ForEach-Object { \n    @{\n        \"Adam\" = Get-Random \n        \"Alon\" = Get-Random \n        \"Lee\" = Get-Random \n        \"Frank\" = Get-Random \n        \"Bill\" = Get-Random \n    }\n}\n\nNew-UDNivoChart -Stream -Data $Data -Height 500 -Width 1000 -Keys @(\"adam\", \"alon\", \"lee\", \"frank\", \"bill\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Table Column Width in PowerShell for Universal Apps\nDESCRIPTION: This code snippet illustrates how to set column widths and implement truncation for table columns using PowerShell in Universal Apps. It uses the -Width and -Truncate parameters of New-UDTableColumn.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/table.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n$TableData = @(\n    @{Dessert = 'Frozen yoghurt'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Ice cream sandwich'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Eclair'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Cupcake'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Gingerbread'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n) \n\n$Columns = @(\n    New-UDTableColumn -Property Dessert -Title Dessert -Render { \n        New-UDButton -Id \"btn$($EventData.Dessert)\" -Text \"Click for Dessert!\" -OnClick { Show-UDToast -Message $EventData.Dessert } \n    }\n    New-UDTableColumn -Property Calories -Title Calories -Width 5 -Truncate\n    New-UDTableColumn -Property Fat -Title Fat \n    New-UDTableColumn -Property Carbs -Title Carbs \n    New-UDTableColumn -Property Protein -Title Protein \n)\n\nNew-UDTable -Data $TableData -Columns $Columns -Sort\n```\n\n----------------------------------------\n\nTITLE: Handling Switch Change Events in PowerShell for Universal Apps\nDESCRIPTION: Demonstrates how to respond to changes in a switch's state using the OnChange event. When the switch value changes, a toast message will display the event data containing the switch's current state.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/switch.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDSwitch -OnChange { Show-UDToast -Message $EventData }\n```\n\n----------------------------------------\n\nTITLE: Creating Horizontal Navigation with AppBar in PowerShell Universal\nDESCRIPTION: Creates a horizontal navigation bar using New-UDAppBar with multiple menu items and redirect functionality. Demonstrates how to structure a basic app layout with navigation menus.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/pages.md#2025-04-16_snippet_16\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDApp -Title 'PowerShell Universal' -Pages @(\n    New-UDPage -Name 'Page' -Content {\n        New-UDAppBar -Children {\n            New-UDTypography -Text \"Title\" -Variant h4 -Style @{\n                marginRight = \"50px\"\n            }\n            New-UDMenu -Variant text -Text \"Settings\" -Children {\n                New-UDMenuItem -Text 'Item 1' -OnClick { Invoke-UDRedirect \"/item1\" }\n                New-UDMenuItem -Text 'Item 2' -OnClick { Invoke-UDRedirect \"/item1\" }\n                New-UDMenuItem -Text 'Item 3' -OnClick { Invoke-UDRedirect \"/item1\" }\n            }\n            New-UDMenu -Variant text -Text \"Options\" -Children {\n                New-UDMenuItem -Text 'Item 1' -OnClick { Invoke-UDRedirect \"/item1\" }\n                New-UDMenuItem -Text 'Item 2' -OnClick { Invoke-UDRedirect \"/item1\" }\n                New-UDMenuItem -Text 'Item 3' -OnClick { Invoke-UDRedirect \"/item1\" }\n            }\n            New-UDMenu -Variant text -Text \"Tools\" -Children {\n                New-UDMenuItem -Text 'Item 1' -OnClick { Invoke-UDRedirect \"/item1\" }\n                New-UDMenuItem -Text 'Item 2' -OnClick { Invoke-UDRedirect \"/item1\" }\n                New-UDMenuItem -Text 'Item 3' -OnClick { Invoke-UDRedirect \"/item1\" }\n            }\n        } -DisableThemeToggle\n    } -Blank\n)\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker Installation\nDESCRIPTION: Command to check if Docker is properly installed on the system. Returns version information for both client and server components.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/docker.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker version\n```\n\n----------------------------------------\n\nTITLE: Creating a Toggle Button Group with Event Handling in PowerShell\nDESCRIPTION: This example creates a toggle button group with an OnChange event handler that displays a toast message with the selected value when the selection changes.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDToggleButtonGroup.txt#2025-04-16_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDToggleButtonGroup -Content {\n    New-UDToggleButton -Content {\n        New-UDIcon -Icon 'User'\n    }\n    New-UDToggleButton -Content {\n        New-UDIcon -Icon 'User'\n    }\n    New-UDToggleButton -Content {\n        New-UDIcon -Icon 'User'\n    } -Id 'test'\n} -OnChange {\n    Show-UDToast -Message \"You selected $EventData\"\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Error Handling in Universal API Endpoints\nDESCRIPTION: Creates an endpoint that returns different responses based on input conditions. It returns user data for a specific name and a 404 error for unknown users, demonstrating conditional error handling.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/error-handling.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUEndpoint -Url /user/:name -Endpoint {\n    if ($Name -eq 'User')\n    {\n        @{ UserName = \"Adam\" }\n    }\n    else\n    {\n        New-PSUApiResponse -StatusCode 404 -Body 'Unknown user!'    \n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Editable DataGrid Implementation\nDESCRIPTION: Creates an editable data grid with cached data. Demonstrates row editing functionality and data persistence.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDDataGrid.txt#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n$Cache:Data = @(\n    @{ Name = 'Adam'; number = Get-Random }\n    @{ Name = 'Tom'; number = Get-Random }\n    @{ Name = 'Sarah'; number = Get-Random }\n)\nNew-UDDataGrid -LoadRows {\n    $Cache:Data| Out-UDDataGridData -Context $EventData -TotalRows $Cache:Data.Length\n} -Columns @(\n    New-UDDataGridColumn -Field name -Render {\n        New-UDButton -Text $EventData.number\n    }\n    New-UDDataGridColumn -Field number -Editable\n) -AutoHeight $true -OnEdit {\n    $Cache:Data | Where-Object { $_.Name -eq $EventData.NewRow.Name } | ForEach-Object {\n        $_.Number = $EventData.NewRow.Number\n    }\n} -Id 'datagrid5'\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Content in Table Columns with PowerShell\nDESCRIPTION: This snippet demonstrates how to create a table with custom-rendered columns using New-UDTable and New-UDTableColumn. It includes a button in the Dessert column that shows a toast message when clicked.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTable.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n$Data = @(\n    @{Dessert = 'Frozen yoghurt'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Ice cream sandwich'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Eclair'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Cupcake'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Gingerbread'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n) \n\n$Columns = @(\n    New-UDTableColumn -Property Dessert -Title Dessert -Render { \n        New-UDButton -Id \"btn$($EventData.Dessert)\" -Text \"Click for Dessert!\" -OnClick { Show-UDToast -Message $EventData.Dessert } \n    }\n    New-UDTableColumn -Property Calories -Title Calories \n    New-UDTableColumn -Property Fat -Title Fat \n    New-UDTableColumn -Property Carbs -Title Carbs \n    New-UDTableColumn -Property Protein -Title Protein \n)\nNew-UDTable -Data $Data -Columns $Columns -Id 'table3'\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS and Client Certificate Mode in ASP.NET Core\nDESCRIPTION: JSON configuration for enabling HTTPS hosting and setting the ClientCertificateMode to RequireCertificate in the appsettings.json file. This sets up the Kestrel server to use HTTPS and require client certificates.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/security/enterprise-security/client-certificate.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"Kestrel\": {\n  \"Endpoints\": {\n    \"HTTPS\": {\n      \"Url\": \"https://*:5000\",\n      \"ClientCertificateMode\": \"RequireCertificate\",\n      \"Certificate\": {\n        \"Subject\": \"localhost\",\n        \"Store\": \"My\",\n        \"Location\": \"LocalMachine\",\n        \"AllowInvalid\": \"true\"\n      }\n    }\n  },\n  \"RedirectToHttps\": \"false\"\n},\n```\n\n----------------------------------------\n\nTITLE: C# Service Provider Integration Example\nDESCRIPTION: Demonstrates how to use the ServiceProvider to access PowerShell Universal services from C# code.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/endpoints.md#2025-04-16_snippet_31\n\nLANGUAGE: csharp\nCODE:\n```\nvar dm = ServiceProvider.GetService(typeof(IDashboardManager));\nvar dashboard = dm.GetDashboard(1);\ndm.Restart(dashboard);\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic API Endpoint in PowerShell Universal\nDESCRIPTION: Defines a basic GET endpoint that returns a simple string message. This demonstrates the minimal configuration needed to create a functional API endpoint.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/endpoints.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUEndpoint -Url '/endpoint' -Method 'GET' -Endpoint {\n   \"Hello, world!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an API Endpoint with URL Parameters\nDESCRIPTION: Defines an endpoint with a variable URL segment that becomes available as a variable within the endpoint script. Variable segments are denoted with a colon prefix.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/endpoints.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUEndpoint -Url '/user/:id' -Method 'GET' -Endpoint {\n   Get-User -Id $Id\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Schema-Based Forms with Basic Fields in PowerShell Universal Dashboard\nDESCRIPTION: Demonstrates how to create forms using a JSON schema definition. This example shows defining string and number type inputs in a schema-based form.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/form.md#2025-04-16_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDForm -Schema @{\n   title = \"Test Form\"\n   type = \"object\"\n   properties = @{\n       name = @{\n           type = \"string\"\n       }\n       age = @{\n           type = \"number\"\n       }\n   }\n} -OnSubmit {\n   # $EventData.name\n   # $EventData.age\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dark and Light Themes in PowerShell Universal App\nDESCRIPTION: Shows how to define both dark and light themes for a PowerShell Universal app, allowing for dynamic theme switching based on user preference or system settings.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/themes/README.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n$Theme = @{\n    light = @{\n        palette = @{\n            primary = @{\n                main = \"#fff\"\n            }\n        }\n    }\n    dark = @{\n        palette = @{\n            primary = @{\n                main = \"#333\"\n            }\n        }\n    }\n}\nNew-UDApp -Theme $Theme -Title 'Hello' -Content {\n    New-UDButton -Text 'Hello' \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging Targets with Error Level in PowerShell Universal\nDESCRIPTION: This snippet shows how to configure file and database logging targets with reduced log levels. Adjusting log levels to Error in production environments improves performance while still capturing critical issues.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/best-practices.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSULoggingTarget -Type \"File\" -Properties @{\n    path = \"C:\\ProgramData\\PowerShellUniversal\\log.txt\"\n} -Level 'Error'\n\nNew-PSULoggingTarget -Type \"Database\" -Properties @{\n} -Level 'Error'\n```\n\n----------------------------------------\n\nTITLE: New-PSUEndpoint Parameter Set 2\nDESCRIPTION: Syntax pattern for creating an endpoint with a Path parameter. Allows specifying a PS1 file containing the endpoint content.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUEndpoint.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUEndpoint [-AppToken <String>] [-Authentication] [-ComputerName <String>] [-Method {GET | POST | PUT | DELETE | OPTIONS}] [-RegEx] [-Role <String[]>] -Url <String> [-Description <String>] [-UseDefaultCredentials] [-Integrated] [-Tag <Tag[]>] [-Timeout <Int32>] -Path <String> [-Environment <String>] [-PersistentLog] [-Documentation <String>] [-Command <String>] [-Module <String>] [-ComputerGroup <String[]>] [-AvailableInBranch <String[]>] [-Credential <String>] [-TrustCertificate] [-Disabled] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Custom Column Rendering in PowerShell for Universal Apps\nDESCRIPTION: This snippet demonstrates how to implement custom column rendering in a table using PowerShell for Universal Apps. It includes interactive elements like buttons and supports sorting and exporting functionality.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/table.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$TableData = @(\n    @{Dessert = 'Frozen yoghurt'; Calories = 1; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Ice cream sandwich'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Eclair'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Cupcake'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Gingerbread'; Calories = 200; Fat = 6.0; Carbs = 24; Protein = 4.0}\n) \n\n$Columns = @(\n    New-UDTableColumn -Property Dessert -Title Dessert -Render { \n        New-UDButton -Id \"btn$($EventData.Dessert)\" -Text \"Click for Dessert!\" -OnClick { Show-UDToast -Message $EventData.Dessert } \n    }\n    New-UDTableColumn -Property Calories -Title Calories \n    New-UDTableColumn -Property Fat -Title Fat \n    New-UDTableColumn -Property Carbs -Title Carbs \n    New-UDTableColumn -Property Protein -Title Protein \n)\n\nNew-UDTable -Data $TableData -Columns $Columns -Sort -Export\n```\n\n----------------------------------------\n\nTITLE: Implementing Row Selection in PowerShell Universal Dashboard Tables\nDESCRIPTION: Shows how to implement row selection functionality with event handling and data retrieval.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/table.md#2025-04-16_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\n$TableData = try { get-service -ea Stop | select Name,@{n = \"Status\";e={ $_.Status.ToString()}},@{n = \"StartupType\";e={ $_.StartupType.ToString()}},@{n = \"StartType\";e={ $_.StartType.ToString()}} } catch {}\n$Columns = @(\n    New-UDTableColumn -Property Name -Title \"Service Name\" -ShowSort -IncludeInExport -IncludeInSearch -ShowFilter -FilterType text\n    New-UDTableColumn -Property Status -Title Status -ShowSort -DefaultSortColumn -IncludeInExport -IncludeInSearch -ShowFilter -FilterType select \n    New-UDTableColumn -Property StartupType -Title StartupType -IncludeInExport -ShowFilter -FilterType select\n    New-UDTableColumn -Property StartType -Title StartType -IncludeInExport -ShowFilter -FilterType select \n)\nNew-UDTable -Id 'service_table' -Data $TableData -Columns $Columns -Title 'Services' -ShowSearch -ShowPagination -ShowSelection -Dense -OnRowSelection {\n    $Item = $EventData\n    Show-UDToast -Message \"$($Item | out-string)\"\n}\nNew-UDButton -Text \"GET Rows\" -OnClick {\n    $value = Get-UDElement -Id \"service_table\"\n    Show-UDToast -Message \"$( $value.selectedRows | Out-String )\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sending JSON Data to an API Endpoint with Parameter Binding\nDESCRIPTION: Demonstrates how to send JSON data to an endpoint that automatically binds to parameters in the endpoint script.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/endpoints.md#2025-04-16_snippet_17\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-RestMethod http://localhost:5000/user -Method Post -Body (@{ \n    UserName = \"adriscoll\"\n    FirstName = \"Adam\"\n    LastName = \"Driscoll\"\n} | ConvertTo-Json) -ContentType 'application/json'\n```\n\n----------------------------------------\n\nTITLE: Custom Column Rendering in UDDataGrid\nDESCRIPTION: Example showing how to customize column rendering using New-UDTypography component and accessing row data through EventData variable.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/data-grid.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDataGrid -LoadRows {  \n    $Rows = 1..100 | % {\n        @{ Name = 'Adam'; Number = Get-Random}\n    }\n    $Rows| Out-UDDataGridData -Context $EventData -TotalRows $Rows.Length\n} -Columns @(\n    New-UDDataGridColumn -Field name -Render {\n         New-UDTypography $EventData.number \n    }\n    New-UDDataGridColumn -Field number\n) -AutoHeight $true\n```\n\n----------------------------------------\n\nTITLE: Using PowerShell Status Endpoint for Load Balancing\nDESCRIPTION: The PowerShell Universal status endpoint at /api/v1/status returns HTTP status codes that indicate node health. It returns 200 for healthy nodes, 503 for maintenance mode, and 500 for configuration errors or failed app starts.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/hosting/high-availability.md#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\n/api/v1/status\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Button Variants in PowerShell\nDESCRIPTION: Demonstrates how to create text, contained, and outlined button variants using New-UDButton cmdlet. Each button is given a unique ID and different text.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDButton.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Variant 'text' -Text 'Text' -Id 'button1'\nNew-UDButton -Variant 'contained' -Text 'Contained'  -Id 'button2'\nNew-UDButton -Variant 'outlined' -Text 'Outlined' -Id 'button3'\n```\n\n----------------------------------------\n\nTITLE: Custom Column Rendering in DataGrid\nDESCRIPTION: Demonstrates custom column rendering using alerts. Shows how to customize the appearance of data grid cells.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDDataGrid.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDataGrid -LoadRows {  \n    $Data = 1..100 | % {\n        @{ Name = 'Adam'; Number = Get-Random}\n    }\n    Out-UDDataGridData -Data $Data -Total $Data.Length -Context $EventData\n    \n} -Columns @(\n    New-UDDataGridColumn -Field 'Name' -Render {\n        New-UDAlert -Text $EventData.Name -Dense\n    }\n    New-UDDataGridColumn -Field 'Number'\n) -Pagination -Id 'dataGrid3'\n```\n\n----------------------------------------\n\nTITLE: Designing Layouts with Grid Layout in PowerShell\nDESCRIPTION: Creates a grid layout in design mode where components can be dragged and dropped to configure the layout. The layout JSON is automatically copied to clipboard when changes are made. Each component requires a static -Id parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/layout/grid-layout.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDGridLayout -Content { 1..10 | ForEach-Object { New-UDPaper -Id \"Paper$\" -Content { New-UDTypography -Text $ } -Elevation 5 } } -Design\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Alerts in Universal Apps\nDESCRIPTION: Demonstrates how to create basic alerts with different severity levels (error, warning, info, success) using the New-UDAlert cmdlet. Each alert displays a simple text message with the specified severity.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/alert.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDAlert -Severity 'error' -Text 'This is an error alert — check it out!' \nNew-UDAlert -Severity 'warning' -Text 'This is an warning alert — check it out!'\nNew-UDAlert -Severity 'info' -Text 'This is an error info — check it out!' \nNew-UDAlert -Severity 'success' -Text 'This is an success alert — check it out!'\n```\n\n----------------------------------------\n\nTITLE: Creating Button-Triggered Dynamic Region in PowerShell\nDESCRIPTION: Illustrates how to create a dynamic region that updates when a button is clicked, using the Sync-UDElement cmdlet to trigger the refresh.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDDynamic.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDynamic -Content {\n    New-UDTypography -Text (Get-Date) -Id 'text3'\n} -Id 'dynamic3'\nNew-UDButton -Text 'Refresh' -OnClick {\n    Sync-UDElement -Id 'dynamic3'\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Region in Static Page - PowerShell Universal\nDESCRIPTION: Shows how to include dynamic regions within static pages to maintain some dynamic functionality while benefiting from static page performance.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/pages.md#2025-04-16_snippet_21\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDPage -Name 'Static Page' -Content {\n   New-UDDynamic -Content {\n       New-UDTypography (Get-Date)\n   }\n} -Static\n```\n\n----------------------------------------\n\nTITLE: Configuring web.config for PowerShell Universal in IIS\nDESCRIPTION: The web.config file required for hosting PowerShell Universal in IIS. This configuration sets up the ASP.NET Core Module V2 handler and specifies the path to the Universal.Server.exe executable that will run as the application process.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/hosting/hosting-iis.md#2025-04-16_snippet_1\n\nLANGUAGE: markup\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <system.webServer>\n    <handlers>\n      <add name=\"aspNetCore\" path=\"*\" verb=\"*\" modules=\"AspNetCoreModuleV2\" resourceType=\"Unspecified\" />\n    </handlers>\n    <aspNetCore processPath=\"C:\\Program Files (x86)\\Universal\\Universal.Server.exe\" arguments=\"\" forwardWindowsAuthToken=\"false\" stdoutLogEnabled=\"true\" stdoutLogFile=\".\\logs\\log\" hostingModel=\"InProcess\"/>\n  </system.webServer>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Scheduling an Endpoint for Caching Process Data in PowerShell Universal App\nDESCRIPTION: This snippet demonstrates how to schedule an endpoint that runs every 10 seconds to cache process information. It uses New-UDEndpointSchedule and New-UDEndpoint to create the schedule and endpoint, respectively. The cached data is then used in a table within the app.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/scheduled-endpoints.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$EndpointSchedule = New-UDEndpointSchedule -Every 10 -Second\nNew-UDEndpoint -Schedule $EndpointSchedule -Endpoint {\n    $Cache:Processes = Get-Process | Select-Object Name,ID\n} | Out-Null\n\nNew-UDApp -Title 'Test' -Content {\n    New-UDTable -Data $Cache:Processes\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Script Invocation with Output Capture\nDESCRIPTION: Demonstrates invoking a script, storing the job object, waiting for completion, and retrieving both pipeline and host output.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/automation/jobs.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-PSUScript -Script 'Script1.ps1' -RequiredParameter 'Hello' | Tee-Object -Variable job | Wait-PSUJob\n\n$Output = Get-PSUJobPipelineOutput -Job $Job\nGet-PSUJobOutput -Job $Job\n```\n\n----------------------------------------\n\nTITLE: Handling OnChange Events in Select Components\nDESCRIPTION: Implements an event handler that displays a toast notification with the selected value whenever the selection changes.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/select.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDSelect -Option {\n    New-UDSelectOption -Name 'One' -Value 1\n    New-UDSelectOption -Name 'Two' -Value 2\n    New-UDSelectOption -Name 'Three' -Value 3\n} -OnChange { Show-UDToast -Message $EventData[0] }\n```\n\n----------------------------------------\n\nTITLE: Cloning Git Repository in PowerShell Universal\nDESCRIPTION: Command to clone a Git repository using PowerShell Universal's internal git services. Allows specifying repository URL, local path, credentials, and target branch.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/psucli.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\npsu git clone --url http://github.com/ironmansoftware/psu.git --path C:\\ProgramData\\UniversalAutomation\\Repository --username 'adamdriscoll' --password 'gh__1234123' --branch main\n```\n\n----------------------------------------\n\nTITLE: Script Invocation with Credentials in PowerShell Universal\nDESCRIPTION: Shows how to invoke a script under specific user credentials using secret management and credential objects.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Invoke-PSUScript.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$Script = Get-PSUScript -Name 'Script1.ps1'\n$Password = Get-UAVariable -Name 'UserPassword'\n$Credential = New-UDCredential -UserName 'adam' -Password $Password\nInvoke-PSUScript -Script $Script -Credential $Credential\n```\n\n----------------------------------------\n\nTITLE: Cache Storage with TimeSpan Expiration\nDESCRIPTION: Demonstrates caching data with a 30-minute expiration using TimeSpan.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Set-PSUCache.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PSUCache -Key 'Data' -Value 'MyValue' -AbsoluteExpirationFromNow [TimeSpan]::FromMinutes(30)\n```\n\n----------------------------------------\n\nTITLE: Creating a Computer Group in PowerShell Universal\nDESCRIPTION: This snippet demonstrates how to create a new computer group named 'Windows' that includes all computers with the 'windows' tag using the New-PSUComputerGroup cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/computers.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUComputerGroup -Name Windows -Tags @(\"windows\")\n```\n\n----------------------------------------\n\nTITLE: Invoking JavaScript Alert from PowerShell Button Click\nDESCRIPTION: Example showing how to create a button that triggers a JavaScript alert when clicked. Demonstrates the integration between PowerShell cmdlets and browser-side JavaScript execution.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Invoke-UDJavaScript.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Text 'Click Me' -OnClick {\n    Invoke-UDJavaScript 'alert(\"Hello World!\")'\n}\n```\n\n----------------------------------------\n\nTITLE: Processing JSON Request Body in API Endpoints\nDESCRIPTION: Shows how to receive and process a JSON request body in an API endpoint, converting it from a string to a PowerShell object.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/endpoints.md#2025-04-16_snippet_13\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUEndpoint -Url '/user' -Method Post -Endpoint {\n    $User = ConvertFrom-Json $Body \n    New-User $User\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Form Output Without Replacing the Form in PowerShell Universal Dashboard\nDESCRIPTION: Shows how to display form submission results without replacing the form itself. Uses Set-UDElement to update a placeholder element with new content upon form submission.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/form.md#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDForm -Content {\n\n} -OnSubmit {\n   Set-UDElement -Id 'results' -Content {\n      New-UDCard -Content { \"Hello \" + (Get-Date) }\n   }\n}\n\nNew-UDElement -Id 'results' -Tag 'div'\n```\n\n----------------------------------------\n\nTITLE: Creating New Universal React Component Project\nDESCRIPTION: Creates a new React component project scaffold using the New-UDReactComponent cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/custom-components/building-custom-components.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDReactComponent -Path .\\project -Name 'ReactIcon'\n```\n\n----------------------------------------\n\nTITLE: Creating a New Deployment in PowerShell Universal\nDESCRIPTION: This example demonstrates how to use the New-PSUDeployment cmdlet to create a new deployment named 'Production' with version '1.0.0'. The cmdlet creates a deployment based on the current repository configuration.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUDeployment.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUDeployment -Name 'Production' -Version '1.0.0'\n```\n\n----------------------------------------\n\nTITLE: Manually Returning Error Responses with New-PSUApiResponse\nDESCRIPTION: Creates an endpoint that manually returns a 404 Not Found error with a custom message using the New-PSUApiResponse cmdlet, providing more control over the response status code and content.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/error-handling.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUEndpoint -Url /broken -Endpoint {\n    New-PSUApiResponse -StatusCode 404 -Body 'Failed!'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS with PFX Certificate for PowerShell Universal\nDESCRIPTION: This JSON configuration sets up HTTPS for PowerShell Universal using a PFX certificate. It specifies the certificate file, password, and HTTPS port in the Kestrel configuration.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/hosting/README.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Kestrel\": {\n    \"Endpoints\": {\n       \"HTTP\": { \"Url\": \"http://*:5000\" },\n           \"HTTPS\": {\n              \"Url\": \"https://*:5463\",\n              \"Certificate\": {\n                  \"Path\": \"testCert.pfx\",\n                  \"Password\": \"testPassword\"\n              }\n          }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Persistence in PowerShell Universal\nDESCRIPTION: Configuration settings in appsettings.json for using SQLite as the persistence layer in PowerShell Universal. SQLite stores all data in a single file database local to the application and is recommended over LiteDB for new installations.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/persistence.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n \"Plugins\": [\n    \"SQLite\"\n  ],\n  \"Data\": {\n    \"ConnectionString\": \"Data Source=%ProgramData%\\\\UniversalAutomation\\\\psu.db\",\n  },\n```\n\n----------------------------------------\n\nTITLE: Comment-Based Help Example\nDESCRIPTION: Demonstrates how to implement comment-based help in PowerShell scripts with synopsis, description, parameter help, and external links.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/automation/scripts/README.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS \n\nThis is a script for pinging other computers. \n\n.DESCRIPTION\n\nThis script can ping other computers. \n\n.PARAMETER HostName\n\nThe host name or address to ping. \n\n.LINK\nhttps://www.ironmansoftware.com\n#>\nparam($HostName)\n\nTest-NetConnection $HostName\n```\n\n----------------------------------------\n\nTITLE: Caching Server-Wide Data in PowerShell Universal\nDESCRIPTION: This example shows how to use scheduled endpoints to cache data that can be accessed throughout PowerShell Universal scripts. It uses Set-PSUCache to store process information in the server-wide cache.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/scheduled-endpoints.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$EndpointSchedule = New-UDEndpointSchedule -Every 10 -Second\nNew-UDEndpoint -Schedule $EndpointSchedule -Endpoint {\n   $Processes = Get-Process | Select-Object Name,ID\n   Set-PSUCache -Name 'Processes' -Value $Processes\n} | Out-Null\n\nNew-UDApp -Title 'Test' -Content {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Relative Footer with AppBar in PowerShell\nDESCRIPTION: This complex example demonstrates creating a relative footer that stays at the bottom of the document using custom CSS. It includes a sticky header, content area, and footer within a Universal App.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/surfaces/appbar.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDApp -Title 'PowerShell Universal' -Pages @(\n    New-UDPage -Title home -Name home -Blank -HideNavigation -Content {\n        New-UDHelmet -Tag 'style' -Content '\n            #Footer {\n                position: relative;\n            }\n            #Footer + div {\n                display: none\n            }\n            #content {\n                min-height: calc(100vh - 128px);\n            }\n        '\n        New-UDAppBar -Position sticky -ClassName header -DisableThemeToggle -Children {\n            New-UDParagraph -Text \"Header\"\n        }\n        New-UDElement -Tag 'div' -Content {\n            1..100 | % {\n                New-UDTypography -Text 'Hello' -Variant h1\n            }\n        } -Id 'content'\n        New-UDAppBar -Id Footer -Footer -Children {\n            New-UDParagraph -Text \"Footer\"\n        }\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Scheduling a Script with a Specific Environment in PowerShell Universal\nDESCRIPTION: This snippet demonstrates how to create a schedule that runs a script in a specific PowerShell environment version.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/automation/schedules.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUSchedule -Script \"MyScript.ps1\" -Cron '* * * * *' -Environment '7.1'\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple GET Endpoint in PowerShell Universal\nDESCRIPTION: Creates a basic REST API endpoint that returns 'Hello' when called via the GET HTTP method. Demonstrates the basic usage of New-PSUEndpoint.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUEndpoint.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUEndpoint -Url \"/hello\" -Method GET -Endpoint {\n    \"Hello\"\n}\nPS C:\\> Invoke-RestMethod http://localhost:5000/hello\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure SQL with Managed Identity in PowerShell Universal\nDESCRIPTION: Example connection string for using Azure SQL with Azure Managed Identities in PowerShell Universal. This approach is recommended for Azure SQL integrations for secure authentication.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/persistence.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nServer=tcp:psudb.database.windows.net,1433;Initial Catalog=psu;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;Authentication=Active Directory Managed Identity;\n```\n\n----------------------------------------\n\nTITLE: Implementing Auto-Refresh Dynamic Region in PowerShell\nDESCRIPTION: Shows how to create a dynamic region that automatically refreshes every 3 seconds, continuously updating the displayed date and time.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDDynamic.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDynamic -Content {\n    New-UDTypography -Text (Get-Date) -Id 'text2'\n} -AutoRefresh -AutoRefreshInterval 3 -Id 'dynamic2'\n```\n\n----------------------------------------\n\nTITLE: Creating an API Endpoint with Query String Parameters\nDESCRIPTION: Defines an endpoint that accepts query string parameters which are automatically passed as variables to the endpoint script.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/endpoints.md#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUEndpoint -Url '/user' -Method 'GET' -Endpoint {\n   Get-User -Id $Id\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom API Response in PowerShell Universal\nDESCRIPTION: This example demonstrates how to use New-PSUApiResponse within a New-PSUEndpoint script block to return a custom 404 status code and body message for a GET request to the '/hello' endpoint.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUApiResponse.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUEndpoint -Url '/hello' -Method \"GET\" -Endpoint {\n    New-PSUApiResponse -StatusCode 404 -Body \"Not found!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Dynamic Region with Reload Button in PowerShell\nDESCRIPTION: Creates a dynamic region displaying the current date and time that can be refreshed by clicking a button. The Sync-UDElement cmdlet triggers the region to reload.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/dynamic-regions.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDApp -Title \"Hello, World!\" -Content {\n    New-UDDynamic -Id 'date' -Content {\n        New-UDTypography -Text \"$(Get-Date)\"\n    }\n\n    New-UDButton -Text 'Reload Date' -OnClick { Sync-UDElement -Id 'date' }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring web.config for Windows Authentication in IIS\nDESCRIPTION: XML configuration for the web.config file that enables Windows Authentication forwarding from IIS to PowerShell Universal. The forwardWindowsAuthToken parameter is set to true to pass authentication information.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/hosting/hosting-iis.md#2025-04-16_snippet_6\n\nLANGUAGE: markup\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <system.webServer>\n    <handlers>\n      <add name=\"aspNetCore\" path=\"*\" verb=\"*\" modules=\"AspNetCoreModuleV2\" resourceType=\"Unspecified\" />\n    </handlers>\n    <aspNetCore processPath=\".\\Universal.Server.exe\" arguments=\"\" forwardWindowsAuthToken=\"true\" stdoutLogEnabled=\"true\" stdoutLogFile=\".\\logs\\log\" hostingModel=\"OutOfProcess\" />\n  </system.webServer>\n</configuration>\n<!--ProjectGuid: 588ACF2E-9AE5-4DF1-BC42-BCE16A4C4EDE-->\n```\n\n----------------------------------------\n\nTITLE: Creating Buttons with Different Sizes in PowerShell\nDESCRIPTION: Demonstrates how to create buttons of various sizes (small, medium, large) and variants (text, contained, outlined) using the -Size parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDButton.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Variant 'text' -Text 'small' -Id 'button8' -Size small\nNew-UDButton -Variant 'text' -Text 'medium'  -Id 'button9' -Size medium\nNew-UDButton -Variant 'text' -Text 'large' -Id 'button10' -Size large\nNew-UDButton -Variant 'contained' -Text 'small' -Id 'button11'  -Size small\nNew-UDButton -Variant 'contained' -Text 'medium'  -Id 'button12'  -Size medium\nNew-UDButton -Variant 'contained' -Text 'large' -Id 'button13'  -Size large\nNew-UDButton -Variant 'outlined' -Text 'small' -Id 'button14'  -Size small\nNew-UDButton -Variant 'outlined' -Text 'medium'  -Id 'button15'  -Size medium\nNew-UDButton -Variant 'outlined' -Text 'large' -Id 'button16'  -Size large\n```\n\n----------------------------------------\n\nTITLE: Implementing OnEnter Event for Autocomplete in PowerShell\nDESCRIPTION: Creates an autocomplete component that triggers a toast notification when the user presses enter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDAutocomplete.txt#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDAutocomplete -Options @(\"Test\", \"No\", \"Yes\") -OnEnter {\n    Show-UDToast $EventData\n} -Id 'autocomplete7' -FullWidth\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Navigation in Universal App with PowerShell\nDESCRIPTION: Shows how to define a custom navigation menu with dropdown sections using list items and children elements.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/pages.md#2025-04-16_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\n$Navigation = @(\n    New-UDListItem -Label \"Home\"\n    New-UDListItem -Label \"Getting Started\" -Children {\n        New-UDListItem -Label \"Installation\" -Href '/Installation' \n        New-UDListItem -Label \"Usage\" -Href '/Usage' \n        New-UDListItem -Label \"FAQs\" -Href '/faqs' \n        New-UDListItem -Label \"System Requirements\" -Href'/requirements' \n        New-UDListItem -Label \"Purchasing\" -Href '/purchasing' \n    }\n)\n\n$Pages = @()\n$Pages += New-UDPage -Name 'Installation' -Content {\n New-UDTypography -Text \"Installation\"\n}\n\n$Pages += New-UDPage -Name 'Usage' -Content {\n    New-UDTypography -Text \"Usage\"\n} \n\nNew-UDApp -Title \"Hello, World!\" -Pages $Pages -NavigationLayout permanent -Navigation $Navigation\n```\n\n----------------------------------------\n\nTITLE: Creating Auto-Refreshing Elements\nDESCRIPTION: Demonstrates creating an element that automatically refreshes on a specified interval.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/element.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDElement -Tag 'div' -Endpoint {\n    Get-Date\n} -AutoRefresh -RefreshInterval 1\n```\n\n----------------------------------------\n\nTITLE: Creating Data for Script Pie Chart Widget in PowerShell\nDESCRIPTION: This code generates sample data for a Script Pie Chart widget. It creates custom objects with 'type' and 'value' properties, where 'type' represents the category and 'value' is a random number between 5 and 60.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/portal/portal-widgets/README.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n1..5 | ForEach-Object {\n    [PSCustomObject]@{ \n        type = \"Category $_\"\n        value = Get-Random -Min 5 -Max 60\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Menu OnChange Event Handler\nDESCRIPTION: Shows how to handle menu item selection events using the -OnChange parameter, which displays a toast notification with the selected value stored in $EventData.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/navigation/menu.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDMenu -Text 'Click Me' -OnChange {\n    Show-UDToast $EventData\n} -Children {\n    New-UDMenuItem -Text 'Test'\n    New-UDMenuItem -Text 'Test2'\n    New-UDMenuItem -Text 'Test3'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Bar Chart with New-UDChartJS in PowerShell\nDESCRIPTION: This example demonstrates how to create a bar chart using New-UDChartJS with data and label properties. It sets up a dataset and defines the chart dimensions within a div element.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDChartJS.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$Data = @(\n    @{ Server = \"Server1\"; AvailableRam = 128; UsedRAM = 10 }\n    @{ Server = \"Server2\"; AvailableRam = 64; UsedRAM = 63 }\n    @{ Server = \"Server3\"; AvailableRam = 48; UsedRAM = 40 }\n    @{ Server = \"Server4\"; AvailableRam = 64;; UsedRAM = 26 }\n    @{ Server = \"Server5\"; AvailableRam = 128; UsedRAM = 120 }\n)\nNew-UDElement -Tag 'div' -Attributes @{ style = @{ height = '20vh'; width = \"20vw\"; } } -Content {\n   New-UDChartJS -Data $Data -DataProperty UsedRAM -LabelProperty Server -Type 'bar' -Id 'chart1'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Tree View in PowerShell with New-UDTreeView\nDESCRIPTION: Demonstrates how to create a basic hierarchical tree view using the New-UDTreeView and New-UDTreeNode cmdlets. This example creates a three-level nested structure with parent-child relationships.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/tree-view.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTreeView -Node {\n    New-UDTreeNode -Name 'Level 1' -Children {\n        New-UDTreeNode -Name 'Level 2 - Item 1' \n        New-UDTreeNode -Name 'Level 2 - Item 2'\n        New-UDTreeNode -Name 'Level 2 - Item 3' -Children {\n            New-UDTreeNode -Name 'Level 3'\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Table with Custom Columns in PowerShell for Universal Apps\nDESCRIPTION: This code snippet shows how to create a table with custom-defined columns using PowerShell in Universal Apps. It uses the New-UDTableColumn cmdlet to specify column properties and titles.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/table.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$TableData = @(\n    @{Dessert = 'Frozen yoghurt'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Ice cream sandwich'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Eclair'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Cupcake'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Gingerbread'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n) \n\n$Columns = @(\n    New-UDTableColumn -Property Dessert -Title \"A Dessert\"\n    New-UDTableColumn -Property Calories -Title Calories \n    New-UDTableColumn -Property Fat -Title Fat \n    New-UDTableColumn -Property Carbs -Title Carbs \n    New-UDTableColumn -Property Protein -Title Protein \n)\n\nNew-UDTable -Id 'customColumnsTable' -Data $TableData -Columns $Columns\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Stepper with Multiple Steps in PowerShell\nDESCRIPTION: Creates a basic stepper component with three steps, each containing a textbox. The stepper maintains context across steps and displays a completion message when finished. Each step can access data from previous steps via the $Body variable.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/navigation/stepper.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDStepper -Steps {\n    New-UDStep -OnLoad {\n        New-UDElement -tag 'div' -Content { \"Step 1\" }\n        New-UDTextbox -Id 'txtStep1' -Value $EventData.Context.txtStep1\n    } -Label \"Step 1\"\n    New-UDStep -OnLoad {\n        New-UDElement -tag 'div' -Content { \"Step 2\" }\n        New-UDElement -tag 'div' -Content { \"Previous data: $Body\" }\n        New-UDTextbox -Id 'txtStep2' -Value $EventData.Context.txtStep2\n    } -Label \"Step 2\"\n    New-UDStep -OnLoad {\n        New-UDElement -tag 'div' -Content { \"Step 3\" }\n        New-UDElement -tag 'div' -Content { \"Previous data: $Body\" }\n        New-UDTextbox -Id 'txtStep3' -Value $EventData.Context.txtStep3\n    } -Label \"Step 3\"\n} -OnFinish {\n    New-UDTypography -Text 'Nice! You did it!' -Variant h3\n    New-UDElement -Tag 'div' -Id 'result' -Content {$Body}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Bar Chart in Universal Dashboard with PowerShell\nDESCRIPTION: This snippet demonstrates how to create a basic bar chart using New-UDChartJS in Universal Dashboard. It sets up data for fruits and their quantities, defines chart options, and creates the chart component.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-visualization/README.md#2025-04-16_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDChartJS -Type 'bar' -Data @{\n    labels = @('Apple', 'Banana', 'Orange', 'Mango')\n    datasets = @(\n        @{\n            label = \"Fruit Quantities\"\n            data = @(10, 15, 7, 12)\n            backgroundColor = @('#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0')\n        }\n    )\n} -Options @{\n    responsive = $true\n    title = @{\n        display = $true\n        text = \"Fruit Inventory\"\n    }\n    scales = @{\n        yAxes = @(@{\n            ticks = @{\n                beginAtZero = $true\n            }\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Dockerfile for PowerShell Universal with Persistence\nDESCRIPTION: Dockerfile for creating a custom PowerShell Universal image with persistent storage configuration for repository, database, assets, and logs.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/docker.md#2025-04-16_snippet_22\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM ironmansoftware/universal:latest\nLABEL description=\"Universal - The ultimate platform for building web-based IT Tools\" \n\nEXPOSE 5000\nVOLUME [\"/home/data\"]\nENV Data__RepositoryPath /home/data/Repository\nENV Data__ConnectionString Data Source=/home/data/database.db\nENV UniversalDashboard__AssetsFolder /home/data/UniversalDashboard \nENV Logging__Path /home/data/logs/log.txt\nENTRYPOINT [\"./Universal/Universal.Server\"]\n```\n\n----------------------------------------\n\nTITLE: Installing PowerShell Universal Module\nDESCRIPTION: Command to install the PowerShell Universal module from the PowerShell Gallery using Install-Module.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/README.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Module Universal\n```\n\n----------------------------------------\n\nTITLE: Adding OnClick Event Handler to List Items in PowerShell for Universal Apps\nDESCRIPTION: This snippet shows how to add an OnClick event handler to a list item using the -OnClick parameter of New-UDListItem. It demonstrates displaying a toast message when the 'Spam' item is clicked.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/list.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDList -Content {\n    New-UDListItem -Label 'Inbox' -Icon (New-UDIcon -Icon envelope -Size 3x) -SubTitle 'New Stuff'\n    New-UDListItem -Label 'Drafts' -Icon (New-UDIcon -Icon edit -Size 3x) -SubTitle \"Stuff I'm working on \"\n    New-UDListItem -Label 'Trash' -Icon (New-UDIcon -Icon trash -Size 3x) -SubTitle 'Stuff I deleted'\n    New-UDListItem -Label 'Spam' -Icon (New-UDIcon -Icon bug -Size 3x) -SubTitle \"Stuff I didn't want\" -OnClick {\n        Show-UDToast -Message 'Clicked'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Step Validation in PowerShell\nDESCRIPTION: Creates a stepper with validation logic using the OnValidateStep parameter. This example validates the first step by checking if a specific value is entered in the textbox and returns the appropriate validation result.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/navigation/stepper.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDStepper -Steps {\n    New-UDStep -OnLoad {\n        New-UDElement -tag 'div' -Content { \"Step 1\" }\n        New-UDTextbox -Id 'txtStep1' -Value $EventData.Context.txtStep1\n    } -Label \"Step 1\"\n    New-UDStep -OnLoad {\n        New-UDElement -tag 'div' -Content { \"Step 2\" }\n        New-UDElement -tag 'div' -Content { \"Previous data: $Body\" }\n        New-UDTextbox -Id 'txtStep2' -Value $EventData.Context.txtStep2\n    } -Label \"Step 2\"\n    New-UDStep -OnLoad {\n        New-UDElement -tag 'div' -Content { \"Step 3\" }\n        New-UDElement -tag 'div' -Content { \"Previous data: $Body\" }\n        New-UDTextbox -Id 'txtStep3' -Value $EventData.Context.txtStep3\n    } -Label \"Step 3\"\n} -OnFinish {\n    New-UDTypography -Text 'Nice! You did it!' -Variant h3\n    New-UDElement -Tag 'div' -Id 'result' -Content {$Body}\n} -OnValidateStep {\n    $Context = $EventData\n    if ($Context.CurrentStep -eq 0 -and $Context.Context.txtStep1 -eq 'bad')\n    {\n        New-UDValidationResult \n    }\n    else\n    {\n        New-UDValidationResult -Valid \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Compose with SQL Persistence Configuration\nDESCRIPTION: Docker Compose YAML file for PowerShell Universal with SQL Server persistence, node name configuration, and timezone settings.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/docker.md#2025-04-16_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"5.2.1\"\nservices:\n  PSU:\n    container_name: PSU\n    image: ironmansoftware/universal:latest\n    ports:\n      - 5000:5000\n    restart: unless-stopped\n    environment:\n      - TZ=Europe/London\n      - Plugins__0=SQL\n      - Data__ConnectionString=Data Source=sql1.domain.com;Initial Catalog=PSUTicketBridge;User Id=psu_ticketbridge_dbo;Password=Password123;TrustServerCertificate=True;Trusted_Connection=True;integrated security=false;\n      - NodeName=mynodename\n    volumes:\n      - /docker/volumes/PSU:/root\n```\n\n----------------------------------------\n\nTITLE: Implementing Role-Based Access in PowerShell Universal with Okta Groups\nDESCRIPTION: This PowerShell snippet demonstrates how to implement role-based access in PowerShell Universal using Okta group membership. It checks if the user belongs to the 'Administrators' group using the $UserInfo variable.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/security/enterprise-security/openid-connect.md#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nparam($User)\n\n$UserInfo.groups -contains 'Administrators'\n```\n\n----------------------------------------\n\nTITLE: Creating a GET Endpoint with URL Variables in PowerShell Universal\nDESCRIPTION: Demonstrates how to create a REST API endpoint that uses URL variables. The variable in the URL becomes available as a PowerShell variable within the endpoint script block.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUEndpoint.txt#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUEndpoint -Url \"/hello/:variable\" -Method GET -Endpoint {\n    $Variable\n}\n\nPS C:\\> Invoke-RestMethod http://localhost:5000/hello/world\n```\n\n----------------------------------------\n\nTITLE: Creating Hierarchical Treemap Chart\nDESCRIPTION: Generates a treemap visualization showing hierarchical data with nested children and count values. The chart uses specified dimensions and identity/value mappings.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-visualization/charts.md#2025-04-16_snippet_22\n\nLANGUAGE: powershell\nCODE:\n```\n$TreeData = @{\n    Name     = \"root\"\n    children = @(\n        @{\n            Name  = \"first\"\n            children = @(\n                @{\n                    Name = \"first-first\"\n                    Count = 7\n                }\n                @{\n                    Name = \"first-second\"\n                    Count = 8\n                }\n            )\n        },\n        @{\n            Name  = \"second\"\n            Count = 21\n        }\n    )\n}\n\nNew-UDNivoChart -Treemap -Data $TreeData -Value \"count\" -Identity \"name\" -Height 500 -Width 800\n```\n\n----------------------------------------\n\nTITLE: Enabling Windows Authentication in appsettings.json\nDESCRIPTION: Configuration snippet to enable Windows Authentication in the appsettings.json file for PowerShell Universal.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/security/enterprise-security/windows-sso.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"Windows\": {\n  \"Enabled\": \"true\"\n},\n```\n\n----------------------------------------\n\nTITLE: Implementing Row Expansion in Universal Dashboard Tables\nDESCRIPTION: This snippet demonstrates how to implement row expansion functionality in a Universal Dashboard table. It uses the -OnRowExpand parameter to define the content shown when a row is expanded.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTable.txt#2025-04-16_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\n$Data = @(\n    @{Dessert = 'Frozen yoghurt'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Ice cream sandwich'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Eclair'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Cupcake'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Gingerbread'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n) \n\nNew-UDTable -Data $Data -OnRowExpand {\n    New-UDAlert -Text $EventData.Calories\n} -Columns @(\n    New-UDTableColumn -Title 'Dessert' -Property 'Dessert'\n) -Id 'table9'\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Styles with New-UDStyle\nDESCRIPTION: Demonstrates how to apply custom CSS styles to a UDCard component using New-UDStyle cmdlet. The example shows styling for padding, background color, font size, border radius, hover effects, and specific Material UI class overrides.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/themes/styles.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDStyle -Style '\n    padding: 32px;\n    background-color: hotpink;\n    font-size: 24px;\n    border-radius: 4px;\n    &:hover {\n      color: white;\n    }\n    .MuiCardHeader-root {\n        background-color: green !important;   \n    }\n    .MuiCardContent-root {\n        background-color: green !important;   \n    }' -Content {\n        New-UDCard -Title 'Test' -Content {\n            \"Hello\"\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing PowerShell Universal from ZIP File on Linux\nDESCRIPTION: Command sequence for installing PowerShell Universal on Linux using the ZIP distribution. It downloads the package, installs the unzip utility, extracts the archive, sets executable permissions, and starts the server.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwget https://imsreleases.blob.core.windows.net/universal/production/5.2.1/Universal.linux-x64.5.2.1.zip\nsudo apt install unzip \nunzip Universal.linux-x64.5.2.1.zip -d PSU\nchmod +x ./PSU/Universal.Server\n./PSU/Universal.Server\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Cancel Functionality with Modal in PowerShell Universal Dashboard\nDESCRIPTION: Demonstrates how to handle form cancellation within a modal. When the cancel button is clicked, the OnCancel event handler hides the modal.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/form.md#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Text 'On Form' -OnClick {\n    Show-UDModal -Content {\n        New-UDForm -Content {\n            New-UDTextbox -Label 'Hello'\n        } -OnSubmit {\n            Show-UDToast -Message 'Submitted!'\n            Hide-UDModal\n        } -OnCancel {\n            Hide-UDModal\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Translation Strings in PowerShell Universal\nDESCRIPTION: Demonstrates how to use the $tl: provider to access translated strings in PowerShell Universal scripts. This provider automatically translates the key to the appropriate string based on the user's language.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/translations.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$tl:String1\n```\n\n----------------------------------------\n\nTITLE: Implementing Click Event Handlers for Links in Universal Dashboard\nDESCRIPTION: Demonstrates how to execute PowerShell code when a link is clicked using the -OnClick parameter. This example shows a toast notification when the link is clicked rather than navigating to a URL.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/navigation/link.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDLink -Text 'Ironman Software' -OnClick {\n    Show-UDToast \"Hello!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Notifications with NotificationConfig\nDESCRIPTION: Demonstrates how to create and display detailed notifications using the notification service with customizable title, message, and icon properties.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/portal/portal-widgets/services.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nfunction OnClick {\n    $Config = [AntDesign.NotificationConfig]::new()\n    $Config.Message = \"Title\" \n    $Config.Description = \"This is the body of the notification\"\n    $Notification.Open($Config)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Textbox with OnValidate Event in PowerShell\nDESCRIPTION: Creates a textbox with custom validation logic using the OnValidate event.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTextbox.txt#2025-04-16_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTextbox -Id 'textbox12' -OnValidate {\n    if ($EventData -eq 'John Doe') {\n        return New-UDValidationResult -Valid\n    }\n    else {\n        return New-UDValidationResult -ValidationError \"You must enter John Doe\"\n    }\n} -Label 'Name' -Placeholder 'Enter your name' -Value 'John Doe'\n```\n\n----------------------------------------\n\nTITLE: PowerShell Universal Server Installation Syntax\nDESCRIPTION: Complete syntax for Install-PSUServer cmdlet showing all possible parameter combinations. Supports specifying installation path, version, IIS configuration, and common PowerShell parameters.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Install-PSUServer.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-PSUServer [-Path <String>] [-Version <String>] [-IISWebsite <String>] [-IISAppPool <String>] [-IISPort <Int32>] [<CommonParameters>]\n\nInstall-PSUServer [-Path <String>] [-LatestVersion] [-IISWebsite <String>] [-IISAppPool <String>] [-IISPort <Int32>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Displaying All Typography Types in PowerShell Universal Apps\nDESCRIPTION: This snippet demonstrates how to display all available typography variants in Universal Apps. It iterates through a list of typography variants and creates a new typography element for each one with gutter bottom spacing.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/typography.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n@(\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"subtitle1\", \"subtitle2\", \"body1\", \"body2\", \n\"caption\", \"button\", \"overline\", \"srOnly\", \"inherit\", \n\"display4\", \"display3\", \"display2\", \"display1\", \"headline\", \"title\", \"subheading\") | ForEach-Object {\n    New-UDTypography -Variant $_ -Text $_ -GutterBottom\n    New-UDElement -Tag 'p' -Content {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Custom Columns in PowerShell Universal Dashboard\nDESCRIPTION: Shows how to create a table with custom column definitions using New-UDTableColumn. Each column is explicitly defined with custom titles and properties.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTable.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$Data = @(\n    @{Dessert = 'Frozen yoghurt'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Ice cream sandwich'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Eclair'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Cupcake'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Gingerbread'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n)\n$Columns = @(\n    New-UDTableColumn -Property Dessert -Title \"A Dessert\"\n    New-UDTableColumn -Property Calories -Title Calories \n    New-UDTableColumn -Property Fat -Title Fat \n    New-UDTableColumn -Property Carbs -Title Carbs \n    New-UDTableColumn -Property Protein -Title Protein \n)\nNew-UDTable -Data $Data -Columns $Columns -Id 'table2'\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Theme in PowerShell Universal App\nDESCRIPTION: Illustrates how to create a custom theme by specifying a primary color. The theme is then applied to the app, affecting the appearance of UI elements like buttons.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/themes/README.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$Theme = @{\n    palette = @{\n        primary = @{\n            main = '#111111'\n        }\n    }\n}\nNew-UDApp -Theme $Theme -Title 'Hello' -Content {\n    New-UDButton -Text \"Test \" -OnClick {\n        Show-UDToast -Message 'HEllo'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Button Groups in Universal Apps\nDESCRIPTION: Implements a split button with dropdown menu functionality by grouping multiple button items together, each with their own click event handlers.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/button.md#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButtonGroup -Children {\n    New-UDButtonGroupItem -Text \"Button 1\" -OnClick {\n        Show-UDToast \"Button 1\"\n    }\n    New-UDButtonGroupItem -Text \"Button 2\" -OnClick {\n        Show-UDToast \"Button 2\"\n    }\n    New-UDButtonGroupItem -Text \"Button 3\" -OnClick {\n        Show-UDToast \"Button 3\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Speed Dial with Click Event Handler in PowerShell\nDESCRIPTION: Creates a speed dial component with an OnActionClick event handler that shows a toast notification when any action is clicked. Includes multiple action buttons with icons and tooltips.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDSpeedDial.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDSpeedDial -Content {\n    New-UDSpeedDialAction -Icon (New-UDIcon -Icon 'User') -TooltipTitle 'My Account' -Id 'myAccount'\n    New-UDSpeedDialAction -Icon (New-UDIcon -Icon 'Users') -TooltipTitle 'Groups'\n    New-UDSpeedDialAction -Icon (New-UDIcon -Icon 'Save') -TooltipTitle 'Save'\n    New-UDSpeedDialAction -Icon (New-UDIcon -Icon 'File') -TooltipTitle 'Open'\n} -Icon (New-UDIcon -Icon 'Plus') -Id 'speedDial2' -OnActionClick {\n    Show-UDToast \"Ouch! You clicked $EventData\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Basic HTML using New-UDHtml PowerShell Cmdlet\nDESCRIPTION: Example showing how to use the New-UDHtml cmdlet to display an H1 heading element in a Universal Dashboard app. The cmdlet accepts HTML markup as a string parameter and renders it in the app.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDHtml.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDHtml -Markup '<h1>Hello World</h1>'\n```\n\n----------------------------------------\n\nTITLE: Creating a Multiple Select with Event Handling\nDESCRIPTION: Implements a select component that allows multiple selections and displays the JSON representation of all selected items in a toast notification.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/select.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDSelect -Multiple -Option {\n    New-UDSelectOption -Name 'One' -Value 1\n    New-UDSelectOption -Name 'Two' -Value 2\n    New-UDSelectOption -Name 'Three' -Value 3\n} -OnChange { \n    Show-UDToast -Message (ConvertTo-json -InputObject $EventData) \n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Deletable Chip with Icon and Toast Notification in PowerShell\nDESCRIPTION: This example shows how to create a deletable chip with an icon that shows a toast notification when deleted.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDChip.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDChip -Label 'Deletable' -Icon (New-UDIcon -Icon 'user') -OnDelete {\n    Show-UDToast -Message 'Deleted!'\n} -Id 'chip4'\n```\n\n----------------------------------------\n\nTITLE: Page Navigation using NavigationManager\nDESCRIPTION: Shows how to use the navigation service to perform page navigation within the portal. Uses the NavigationManager to move between portal pages, admin pages, and external pages.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/portal/portal-widgets/services.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nfunction OnClick {\n    $Navigation.NavigateTo(\"/portal/page/name\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Page Dashboard in PowerShell Universal\nDESCRIPTION: This example shows how to create a dashboard with multiple pages using the New-UDDashboard cmdlet. It creates an array of pages using New-UDPage, then passes this array to the New-UDDashboard cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDDashboard.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$Pages = @(\n    New-UDPage -Name 'HomePage' -Content {\n        New-UDTypography -Text 'Home Page'\n    }\n    New-UDPage -Name 'Page2' -Content {\n        New-UDTypography -Text 'Page2'\n    }\n)\n\nNew-UDDashboard -Title 'My Dashboard' -Pages $Pages\n```\n\n----------------------------------------\n\nTITLE: Creating Basic PowerShell Code Editor\nDESCRIPTION: Creates a basic Monaco code editor with PowerShell syntax highlighting and dark theme.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDCodeEditor.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDCodeEditor -Code 'Get-Process' -Theme 'vs-dark' -Language 'powershell' -Id 'codeEditor1'\n```\n\n----------------------------------------\n\nTITLE: Static Page Creation in PowerShell Universal\nDESCRIPTION: Demonstrates creating static pages for better performance, including both fully static content and pages with dynamic regions.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/pages.md#2025-04-16_snippet_20\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDPage -Name 'Static Page' -Content {\n    New-UDTypography (Get-Date)\n} -Static\n```\n\n----------------------------------------\n\nTITLE: Basic List with Icons Example\nDESCRIPTION: Creates a basic list with icons, labels and subtitles using New-UDList and New-UDListItem cmdlets\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDList.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDList -Content {\n    New-UDListItem -Label 'Inbox' -Icon (New-UDIcon -Icon envelope -Size 3x) -SubTitle 'New Stuff'\n    New-UDListItem -Label 'Drafts' -Icon (New-UDIcon -Icon edit -Size 3x) -SubTitle \"Stuff I'm working on \"\n    New-UDListItem -Label 'Trash' -Icon (New-UDIcon -Icon trash -Size 3x) -SubTitle 'Stuff I deleted'\n    New-UDListItem -Label 'Spam' -Icon (New-UDIcon -Icon bug -Size 3x) -SubTitle \"Stuff I didn't want\"\n} -Id 'list1'\n```\n\n----------------------------------------\n\nTITLE: Adding Action Column with Button in Markup\nDESCRIPTION: This example demonstrates how to add an action column with a button to a table. It includes property columns for Name and Status, and an action column with a 'Show Status' button.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/portal/portal-widgets/tables.md#2025-04-16_snippet_3\n\nLANGUAGE: markup\nCODE:\n```\n<Table DataSource=\"$Services\">\n    <PropertyColumn Property=\"Name\"></PropertyColumn>\n    <PropertyColumn Property=\"Status\">\n        <Alert Message=\"$context.Status\" />\n    </PropertyColumn>\n    <ActionColumn>\n        <Button OnClick=\"ShowStatus\">Show Status</Button>\n    </ActionColumn>\n</Table>\n```\n\n----------------------------------------\n\nTITLE: Creating a PowerShell Universal Dashboard with New-PSUDashboard\nDESCRIPTION: This example demonstrates how to create a new PowerShell Universal dashboard app using the New-PSUDashboard cmdlet. It specifies the app name, base URL, and the PowerShell script file that defines the dashboard content.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUDashboard.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUDashboard -Name 'App' -BaseUrl '/app' -FilePath \"app.ps1\"\n```\n\n----------------------------------------\n\nTITLE: Using Page Scope in PowerShell Universal Form\nDESCRIPTION: Demonstrates the use of Page scope in a form submission and dynamic content update. The example stores a name in the Page scope and displays it dynamically.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/custom-variable-scopes.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDForm -Content {\n    New-UDTextbox -Id 'Name'\n} -OnSubmit {\n    $Page:Name = $EventData.Name\n    Sync-UDElement -Id 'Name'\n}\n\nNew-UDDynamic -Content {\n    New-UDTypography $Page:Name\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Slider with Marks in PowerShell for Universal Dashboard\nDESCRIPTION: This example shows how to create a slider with marks and an OnChange event that displays a toast message when the value changes.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDSlider.txt#2025-04-16_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDSlider -Value 50 -Minimum 0 -Maximum 100 -Marks -OnChange {\n    Show-UDToast -Message \"Slider value changed to $($EventData.value)\"\n} -Id 'slider2'\n```\n\n----------------------------------------\n\nTITLE: Creating an Authenticated GET Endpoint in PowerShell Universal\nDESCRIPTION: Shows how to create a REST API endpoint that requires authentication and authorization. Only users with a valid AppToken and the 'Administrators' role can access this endpoint.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUEndpoint.txt#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUEndpoint -Url \"/hello/\" -Method GET -Endpoint {\n    \"Hello authenticated user\"\n} -Authentication -Role 'Administrators'\n\nPS C:\\> Invoke-RestMethod http://localhost:5000/hello/world -Headers @{ Authorization = \"Bearer appTokenGoesHere\" }\n```\n\n----------------------------------------\n\nTITLE: Configuring Table Sorting in PowerShell Universal Dashboard\nDESCRIPTION: Demonstrates how to enable and configure sorting functionality for table columns.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/table.md#2025-04-16_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\n$TableData = @(\n    @{Dessert = 'Frozen yoghurt'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Ice cream sandwich'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Eclair'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Cupcake'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Gingerbread'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n) \n\nNew-UDTable -Data $TableData -ShowSort -DisableSortRemove\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Tabs in PowerShell with Universal Apps\nDESCRIPTION: This example creates dynamic tabs that refresh their content when selected. The -Dynamic parameter makes each tab refresh when activated, and -RenderOnActive prevents tabs from rendering when they're not visible.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/navigation/tabs.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTabs -Tabs {\n    New-UDTab -Text 'Item One' -Content { Get-Date } -Dynamic\n    New-UDTab -Text 'Item Two' -Content { Get-Date } -Dynamic\n    New-UDTab -Text 'Item Three' -Content { Get-Date } -Dynamic\n} -RenderOnActive\n```\n\n----------------------------------------\n\nTITLE: Defining New-UDDashboard Cmdlet Syntax in PowerShell\nDESCRIPTION: This snippet shows the two syntax options for the New-UDDashboard cmdlet. The first syntax uses a -Content parameter for single-page dashboards, while the second uses -Pages for multi-page dashboards. Both include various optional parameters for customization.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDDashboard.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDashboard [-Title <String>] -Content <Endpoint> [-Theme <Hashtable>] [-Scripts <String[]>] [-Stylesheets <String[]>] [-Logo <String>] [-DefaultTheme <String>] [-DisableThemeToggle] [-HeaderPosition <String>] [-HeaderColor <DashboardColor>] [-HeaderBackgroundColor <DashboardColor>] [-NavigationLayout <String>] [-Navigation <Hashtable[]>] [-HideUserName] [-HideNavigation] [-LoadNavigation <Endpoint>] [-HeaderContent <Endpoint>] [-PageNotFound <Endpoint>] [-NotAuthorized <Endpoint>] [-SessionTimeoutModal <ScriptBlock>] [-Menu <Endpoint>] [<CommonParameters>]\n```\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDashboard [-Title <String>] -Pages <DashboardPage[]> [-Theme <Hashtable>] [-Scripts <String[]>] [-Stylesheets <String[]>] [-Logo <String>] [-DefaultTheme <String>] [-DisableThemeToggle] [-HeaderPosition <String>] [-HeaderColor <DashboardColor>] [-HeaderBackgroundColor <DashboardColor>] [-NavigationLayout <String>] [-Navigation <Hashtable[]>] [-HideUserName] [-HideNavigation] [-LoadNavigation <Endpoint>] [-HeaderContent <Endpoint>] [-PageNotFound <Endpoint>] [-NotAuthorized <Endpoint>] [-SessionTimeoutModal <ScriptBlock>] [-Menu <Endpoint>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: REST API Script Invocation with Parameters\nDESCRIPTION: Shows how to invoke a script with parameters using REST API.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/automation/jobs.md#2025-04-16_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\n$Parameters = @{\n    Uri = \"http://localhost:5000/api/v1/script/path/PNP.ps1?Server=tester&Domain=test\" \n    Method = \"POST\"\n    Headers = @{Authorization = \"Bearer $Apptoken\"}\n    ContentType = 'application/json'\n    Body = '{}'\n}\n\nInvoke-RestMethod @Parameters\n```\n\n----------------------------------------\n\nTITLE: Making REST API Call with App Token\nDESCRIPTION: Example of how to make a REST API call to the Universal Management API using Invoke-RestMethod with an App Token for authentication.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/management-api.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-RestMethod http://localhost:5000/api/v1/script -Headers @{ Authorization = \"Bearer appToken\" }\n```\n\n----------------------------------------\n\nTITLE: Setting Display Names and Help Messages for Parameters in PowerShell Universal\nDESCRIPTION: Shows how to use DisplayNameAttribute and HelpMessage to provide more context for parameters in the UI.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/automation/scripts/parameters.md#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nparam(\n    [ComponentModel.DisplayName(\"My Script\")]\n    $MyScript\n)\n```\n\nLANGUAGE: powershell\nCODE:\n```\nparam(\n    [Parameter(HelpMessage = \"Class you want to enroll in\")]\n    [string]$Class\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Read-Only PowerShell Code Editor with Diff\nDESCRIPTION: Creates a read-only PowerShell code editor with diff comparison functionality. Uses the vs-dark theme and sets specific dimensions. The editor compares the current code with original code to show differences.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDCodeEditor.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDCodeEditor -Code \"Get-Process notepad\" -Original \"Get-Process code\" -Theme 'vs-dark' -Language 'powershell' -Height '200' -Width '100%' -ReadOnly -Id 'codeEditor3'\n```\n\n----------------------------------------\n\nTITLE: Implementing Layer Control with Multiple Base Layers\nDESCRIPTION: Shows how to create a map with layer control functionality, including multiple base layers and overlays that can be toggled. Includes both black and white and color map options with multiple markers.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-visualization/map.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDMap -Endpoint {\n    New-UDMapLayerControl -Content {\n        New-UDMapBaseLayer -Name 'Black and White' -Content {\n            New-UDMapRasterLayer -TileServer 'https://tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png' \n        } -Checked\n        New-UDMapBaseLayer -Name 'Color' -Content {\n            New-UDMapRasterLayer -TileServer 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png' \n        }\n        New-UDMapOverlay -Name 'Marker' -Content {\n            New-UDMapMarker -Latitude 51.505 -Longitude -0.09 \n        } -Checked\n        New-UDMapOverlay -Name 'Marker 2' -Content {\n            New-UDMapMarker -Latitude 51.555 -Longitude -0.00 \n        } -Checked\n    }\n} -Latitude 51.505 -Longitude -0.09 -Zoom 13 -Height '100vh'\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination in UDDataGrid\nDESCRIPTION: Shows how to implement custom paging logic using page and pageSize properties from EventData.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/data-grid.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDataGrid -LoadRows {  \n    $Rows = 1..100 | % {\n        @{ Name = 'Adam'; Number = Get-Random}\n    } \n    \n    $Rows = $Rows | Select-Object -First $EventData.pageSize -Skip ($EventData.Page * $EventData.PageSize)\n    \n    $Rows| Out-UDDataGridData -Context $EventData -TotalRows $Rows.Length\n} -Columns @(\n    New-UDDataGridColumn -Field name\n    New-UDDataGridColumn -Field number\n) -AutoHeight $true -Pagination\n```\n\n----------------------------------------\n\nTITLE: Configuring YARP Reverse Proxy with Role-Based Authorization\nDESCRIPTION: JSON configuration for the YARP plugin, defining a reverse proxy route with path matching, transformations, and role-based authorization policy that requires the Administrator role.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/plugins.md#2025-04-16_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"ReverseProxy\": {\n        \"Routes\": {\n            \"route1\": {\n                \"ClusterId\": \"cluster1\",\n                \"AuthorizationPolicy\": \"AdministratorRolePolicy\",\n                \"Match\": {\n                    \"Path\": \"/code/{**catch-all}\"\n                },\n                \"Transforms\": [\n                    {\n                        \"PathRemovePrefix\": \"/code\"\n                    }\n                ]\n            }\n        },\n        \"Clusters\": {\n            \"cluster1\": {\n                \"Destinations\": {\n                    \"destination1\": {\n                        \"Address\": \"http://localhost:8080\"\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Bar Chart with ChartJS in PowerShell\nDESCRIPTION: This snippet demonstrates how to create a basic bar chart using ChartJS in Universal Apps. It displays the top ten CPU-using processes.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-visualization/charts.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n $Data = Get-Process | Sort-Object -Property CPU -Descending | Select-Object -First 10 \n New-UDChartJS -Type 'bar' -Data $Data -DataProperty CPU -LabelProperty ProcessName\n```\n\n----------------------------------------\n\nTITLE: Updating Script Properties with Set-UAScript in PowerShell\nDESCRIPTION: This example demonstrates how to use the Set-UAScript cmdlet to modify the description and manual time of an existing script in Universal Automation. It first retrieves a script object using Get-UAScript, then updates its properties using Set-UAScript.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Set-PSUScript.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\> $Script = Get-UAScript -Name 'Script1.ps1'\nPS C:\\> Set-UAScript -Script $Script -Description 'My favorite script' -ManualTime 123\n```\n\n----------------------------------------\n\nTITLE: Optimizing API Object Return with Select-Object in PowerShell\nDESCRIPTION: This example demonstrates how to optimize API responses by selecting only needed properties from complex objects. Using Select-Object prevents serialization issues and improves performance when returning data from API endpoints.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/best-practices.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nGet-Process | Select-Object Name,Id\n```\n\n----------------------------------------\n\nTITLE: Retrieving Switch Values with Get-UDElement in PowerShell for Universal Apps\nDESCRIPTION: Shows how to access a switch's state from another component using Get-UDElement. This example creates a switch and a button that displays the switch's current checked state in a toast message when clicked.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/switch.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDSwitch -Id 'switch' \nNew-UDButton -Text 'Click' -OnClick {\n    Show-UDToast -Message (Get-UDElement -Id 'switch').checked\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Persistent Cache\nDESCRIPTION: Demonstrates how to set a persistent cache item that survives service restarts by storing in the database.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/cache.md#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PSUCache -Key \"CurrentDate\" -Value (Get-Date) -Persist\n```\n\n----------------------------------------\n\nTITLE: Get-PSUJob Cmdlet Syntax Variations\nDESCRIPTION: Multiple syntax variations for retrieving jobs from PowerShell Universal, including filtering by ID, Identity, Script, RunId, and Schedule. Each variation supports common parameters for pagination, ordering, and authentication.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUJob.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PSUJob [-Id] <Int64> [-AppToken <String>] [-ComputerName <String>] [-First <UInt64>] [-IncludeTotalCount] [-Integrated] [-OrderBy {Id | StartTime | EndTime}] [-OrderDirection {Descending | Ascending}] [-Skip <UInt64>] [-Status {Queued | Running | Completed | Failed | WaitingOnFeedback | Canceled | Canceling | Historical | Active | TimedOut | Warning}] [-UseDefaultCredentials] [-Credential <PSCredential>] [-HideChildren <Boolean>] [-TrustCertificate] [<CommonParameters>]\n```\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PSUJob [-Identity] <Identity> [-AppToken <String>] [-ComputerName <String>] [-First <UInt64>] [-IncludeTotalCount] [-Integrated] [-OrderBy {Id | StartTime | EndTime}] [-OrderDirection {Descending | Ascending}] [-Skip <UInt64>] [-Status {Queued | Running | Completed | Failed | WaitingOnFeedback | Canceled | Canceling | Historical | Active | TimedOut | Warning}] [-UseDefaultCredentials] [-Credential <PSCredential>] [-HideChildren <Boolean>] [-HideScheduled <Boolean>] [-HideTriggered <Boolean>] [-TrustCertificate] [<CommonParameters>]\n```\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PSUJob [-Script] <Script> [-AppToken <String>] [-ComputerName <String>] [-First <UInt64>] [-IncludeTotalCount] [-Integrated] [-OrderBy {Id | StartTime | EndTime}] [-OrderDirection {Descending | Ascending}] [-Skip <UInt64>] [-Status {Queued | Running | Completed | Failed | WaitingOnFeedback | Canceled | Canceling | Historical | Active | TimedOut | Warning}] [-UseDefaultCredentials] [-Credential <PSCredential>] [-HideChildren <Boolean>] [-HideScheduled <Boolean>] [-HideTriggered <Boolean>] [-TrustCertificate] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Handling Autocomplete Changes in PowerShell\nDESCRIPTION: Creates an autocomplete component with an OnChange event that displays a toast notification.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDAutocomplete.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDAutocomplete -Options @(\"Test\", \"No\", \"Yes\") -OnChange {\n    Show-UDToast $EventData\n}  -Id 'autocomplete6' -FullWidth\n```\n\n----------------------------------------\n\nTITLE: Creating Form with Custom Submit and Cancel Text\nDESCRIPTION: Shows how to create a form with customized button text for both submit and cancel actions\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDForm.txt#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDForm -Id 'form5' -Content {\n    New-UDTextbox -Id 'form5Textbox' -Label 'Name'\n} -OnSubmit {\n    Show-UDToast -Message ($EventData.form5Textbox)\n} -SubmitText 'Save' -CancelText 'Close' -OnCancel {\n    Show-UDToast -Message 'Form was cancelled'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Switches in PowerShell for Universal Apps\nDESCRIPTION: Shows how to create basic switches in Universal Apps with the New-UDSwitch cmdlet. The example demonstrates creating both an enabled and disabled switch with initial checked states.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/switch.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDSwitch -Checked $true \nNew-UDSwitch -Checked $true -Disabled\n```\n\n----------------------------------------\n\nTITLE: Adding Column Filters to Universal Dashboard Tables\nDESCRIPTION: This snippet demonstrates how to add filters to table columns in Universal Dashboard. It uses different filter types such as AutoComplete for text and Range for numeric values.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTable.txt#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n$Data = @(\n    @{Dessert = 'Frozen yoghurt'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Ice cream sandwich'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Eclair'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Cupcake'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Gingerbread'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n) \n\n$Columns = @(\n    New-UDTableColumn -Property Dessert -Title \"A Dessert\" -Filter -FilterType AutoComplete\n    New-UDTableColumn -Property Calories -Title Calories -Filter -FilterType Range\n    New-UDTableColumn -Property Fat -Title Fat -Filter -FilterType Range\n    New-UDTableColumn -Property Carbs -Title Carbs -Filter -FilterType Range\n    New-UDTableColumn -Property Protein -Title Protein -Filter -FilterType Range\n)\n\nNew-UDTable -Id 'table5' -Data $Data -Columns $Columns -ShowFilter\n```\n\n----------------------------------------\n\nTITLE: Basic Modal Implementation in PowerShell\nDESCRIPTION: Creates a basic modal dialog that displays 'Hello' text when a button is clicked.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/feedback/modal.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Text 'Basic' -OnClick {\n    Show-UDModal -Content {\n        New-UDTypography -Text \"Hello\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Show-UDToast Cmdlet in PowerShell\nDESCRIPTION: The Show-UDToast cmdlet displays toast notifications to users with various customization options including message content, duration, appearance, and positioning. This cmdlet supports features like custom icons, colors, transitions, and broadcasting to all connected users.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Show-UDToast.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nShow-UDToast [-Message] <String> [-MessageColor <DashboardColor>] [-MessageSize <String>] [-Duration <Int32>] [-Title <String>] [-TitleColor <DashboardColor>] [-TitleSize <String>] [-Id <String>] [-BackgroundColor <DashboardColor>] [-Theme <String>] [-Icon <Object>] [-IconColor <DashboardColor>] [-Position <String>] [-HideCloseButton] [-CloseOnClick] [-CloseOnEscape] [-ReplaceToast] [-RightToLeft] [-Balloon] [-Overlay] [-OverlayClose] [-OverlayColor <DashboardColor>] [-TransitionIn <String>] [-TransitionOut <String>] [-Broadcast] [-Persistent] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Visual Icon Search Interface Implementation\nDESCRIPTION: Complete example of creating a visual icon search interface with textbox, button, and dynamic icon display.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/icon.md#2025-04-16_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTextbox -Id 'txtIconSearch' -Label 'Search' \nNew-UDButton -Text 'Search' -OnClick {\n    Sync-UDElement -Id 'icons'\n}\n\nNew-UDElement -tag 'p' -Content {}\n\nNew-UDDynamic -Id 'icons' -Content {\n    $IconSearch = (Get-UDElement -Id 'txtIconSearch').value\n    if ($null -ne $IconSearch -and $IconSearch -ne '')\n    {\n        $Icons =$Icons = Find-UDIcon -Name $IconSearch\n    }\n\n    foreach($icon in $icons) {\n        try{\n            New-UDChip -Label $icon -Icon (New-UDIcon -Icon $icon)\n        }\n        catch{\n            New-UDChip -Label \"$icon Unknown\" \n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Interactive Bar Chart with Click Events\nDESCRIPTION: Creates a bar chart that responds to click events by showing a toast message.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDNivoChart.txt#2025-04-16_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\n$Data = @(\n    @{\n        country = 'USA'\n        burgers = (Get-Random -Minimum 10 -Maximum 100)\n        fries = (Get-Random -Minimum 10 -Maximum 100)\n        sandwich = (Get-Random -Minimum 10 -Maximum 100)\n    }\n    @{\n        country = 'Germany'\n        burgers = (Get-Random -Minimum 10 -Maximum 100)\n        fries = (Get-Random -Minimum 10 -Maximum 100)\n        sandwich = (Get-Random -Minimum 10 -Maximum 100)\n    }\n    @{\n        country = 'Japan'\n        burgers = (Get-Random -Minimum 10 -Maximum 100)\n        fries = (Get-Random -Minimum 10 -Maximum 100)\n        sandwich = (Get-Random -Minimum 10 -Maximum 100)\n    }\n)\nNew-UDNivoChart -Bar -Data $Data -Height 400 -Width 900 -Keys @('burgers', 'fries', 'sandwich') -IndexBy 'country' -OnClick {\n    Show-UDToast -Message $Body -Position topLeft\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Sorted Table with Custom Columns in PowerShell\nDESCRIPTION: This example shows how to create a table with custom columns, default sorting, and sort controls. It defines data and columns separately, then uses New-UDTable to create the table with specific sorting options.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTable.txt#2025-04-16_snippet_13\n\nLANGUAGE: powershell\nCODE:\n```\n$Data = @(\n    @{Dessert = 'Frozen yoghurt'; Calories = 159; Fat = 6.0; Carbs = 1; Protein = 4.0 }\n    @{Dessert = 'Ice cream sandwich'; Calories = 159; Fat = 6.0; Carbs = 34; Protein = 4.0 }\n    @{Dessert = 'Eclair'; Calories = 159; Fat = 6.0; Carbs = 73; Protein = 4.0 }\n    @{Dessert = 'Cupcake'; Calories = 159; Fat = 6.0; Carbs = 25; Protein = 4.0 }\n    @{Dessert = 'Gingerbread'; Calories = 159; Fat = 6.0; Carbs = 99; Protein = 4.0 }\n)\n$Columns = @(\n    New-UDTableColumn -Property Dessert -Title \"Dessert\" \n    New-UDTableColumn -Property Calories -Title \"Calories\" \n    New-UDTableColumn -Property Fat -Title \"Fat\" \n    New-UDTableColumn -Property Carbs -Title \"Carbs\"  -DefaultSortColumn\n    New-UDTableColumn -Property Protein -Title \"Protein\" \n)\nNew-UDTable -Data $Data -DefaultSortDirection descending -Id 'table13' -ShowSort -Columns $Columns\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Feedback Button in PowerShell Universal Dashboard\nDESCRIPTION: This snippet demonstrates how to create a simple feedback button in PowerShell Universal that opens a modal form. When clicked, it allows users to submit comments that are then stored in a variable for future processing.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/feedback/README.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Text 'Feedback' -OnClick {\n    Show-UDModal -Content {\n        New-UDForm -Content {\n            New-UDTextbox -Label 'Comments' -Id 'comments'\n        } -OnSubmit {\n            $Comments = $EventData.comments \n            Hide-UDModal\n            Show-UDToast -Message 'Thank you for your feedback!'\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Settings in PowerShell Universal\nDESCRIPTION: Default authentication configuration including Windows, WS-Federation, and OpenID Connect (OIDC) settings. Includes session timeout and correlation cookie settings.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/settings.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n    \"Authentication\" : {\n    \"Windows\": {\n      \"Enabled\": \"false\"\n    },\n    \"WSFed\": {\n      \"Enabled\": \"false\",\n      \"MetadataAddress\": \"\",\n      \"Wtrealm\": \"\",\n      \"CallbackPath\": \"/auth/signin-wsfed\",\n      \"Wreply\": \"\",\n      \"UseTokenLifetime\": true,\n      \"CorrelationCookieSameSite\": \"\"\n    },\n    \"OIDC\": {\n      \"Enabled\": \"false\",\n      \"CallbackPath\": \"/auth/signin-oidc\",\n      \"ClientID\": \"\",\n      \"ClientSecret\": \"\",\n      \"Resource\": \"\",\n      \"Authority\": \"\",\n      \"ResponseType\": \"\",\n      \"SaveTokens\": \"false\",\n      \"CorrelationCookieSameSite\": \"\",\n      \"UseTokenLifetime\": true\n    },\n    \"SessionTimeout\": \"25\"\n  },\n```\n\n----------------------------------------\n\nTITLE: Dynamic Element Content Updates\nDESCRIPTION: Shows how to dynamically update element content using Set-UDElement.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/element.md#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDElement -Tag 'div' -Id 'myElement' -Content { }\n\nNew-UDButton -Text 'Click Me' -OnClick {\n    Set-UDElement -Id 'myElement' -Content { Get-Date }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying and Pinning a Module Deployment in PowerShell Universal\nDESCRIPTION: This example demonstrates how to apply a module deployment and pin it, setting the server to read-only mode.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Select-PSUDeployment.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nSelect-PSUDeployment -ModuleName 'MyModule' -ModuleVersion '1.0.0' -Pin\n```\n\n----------------------------------------\n\nTITLE: Adding Event Handlers to Elements\nDESCRIPTION: Shows how to wrap components with New-UDElement and add click event handlers.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/element.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDElement -Tag div -Content {\n    New-UDIcon -Icon \"user\"\n} -Attributes @{\n    onClick = {\n        Show-UDToast \"Nice!\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Grid Spacing Dynamically in PowerShell for Universal Apps\nDESCRIPTION: Shows how to create a dynamic grid with adjustable spacing using New-UDDynamic and New-UDSelect. The spacing can be changed from 0 to 9 using a dropdown menu.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/layout/grid.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDynamic -Id 'spacingGrid' -Content {\n    $Spacing = (Get-UDElement -Id 'spacingSelect').value\n\n    New-UDGrid -Spacing $Spacing -Container -Content {\n        New-UDGrid -Item -ExtraSmallSize 3 -Content {\n            New-UDPaper -Content { \"xs-3\" } -Elevation 2\n        }\n        New-UDGrid -Item -ExtraSmallSize 3 -Content {\n            New-UDPaper -Content { \"xs-3\" } -Elevation 2\n        }\n        New-UDGrid -Item -ExtraSmallSize 3 -Content {\n            New-UDPaper -Content { \"xs-3\" } -Elevation 2\n        }\n        New-UDGrid -Item -ExtraSmallSize 3 -Content {\n            New-UDPaper -Content { \"xs-3\" } -Elevation 2\n        }\n    }\n}\n\nNew-UDSelect -Id 'spacingSelect' -Label Spacing -Option {\n    for($i = 0; $i -lt 10; $i++)\n    {\n        New-UDSelectOption -Name $i -Value $i\n    }\n} -OnChange { Sync-UDElement -Id 'spacingGrid' } -DefaultValue 3\n```\n\n----------------------------------------\n\nTITLE: Creating a Monitor Chart with ChartJS in PowerShell\nDESCRIPTION: This snippet demonstrates how to create a monitor chart that tracks data over time using ChartJS in Universal Apps. It displays random values updated every second.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-visualization/charts.md#2025-04-16_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDChartJSMonitor -LoadData {\n    Get-Random -Max 100 | Out-UDChartJSMonitorData\n} -Labels \"Random\" -ChartBackgroundColor \"#297741\" -RefreshInterval 1\n```\n\n----------------------------------------\n\nTITLE: Formatting Date and Time with Custom Format in PowerShell\nDESCRIPTION: This example demonstrates how to use the New-UDDateTime cmdlet to format a date and time object using a custom format string.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDDateTime.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDateTime -InputObject (Get-Date) -Format 'DD/MM/YYYY' -Id 'dateTime1'\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Static Table in PowerShell Universal Dashboard\nDESCRIPTION: Demonstrates creating a basic static table with dessert nutrition data using New-UDTable cmdlet. The table columns are automatically generated from the data properties.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTable.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$Data = @(\n    @{Dessert = 'Frozen yoghurt'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Ice cream sandwich'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Eclair'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Cupcake'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Gingerbread'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n) \nNew-UDTable -Data $Data -Id 'table1'\n```\n\n----------------------------------------\n\nTITLE: Optimizing Table Rendering with Dynamic Content in PowerShell Universal\nDESCRIPTION: This snippet demonstrates how to optimize table rendering performance in PowerShell Universal by using New-UDDynamic for long-running render operations. It creates a table with dessert data and uses a loading skeleton for slow-to-render columns.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/best-practices.md#2025-04-16_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\n$Data = @(\n    @{Dessert = 'Frozen yoghurt'; Calories = 1; Fat = 6.0; Carbs = 24; Protein = 4.0 }\n    @{Dessert = 'Ice cream sandwich'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0 }\n    @{Dessert = 'Eclair'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0 }\n    @{Dessert = 'Cupcake'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0 }\n    @{Dessert = 'Gingerbread'; Calories = 200; Fat = 6.0; Carbs = 24; Protein = 4.0 }\n) \n\n$Columns = @(\n    New-UDTableColumn -Property Dessert -Title Dessert -Render { \n        New-UDDynamic -Content {\n            Start-Sleep (Get-Random -Min 1 -Max 5)\n            New-UDButton -Text \"Click for Dessert!\" -OnClick { Show-UDToast -Message $EventData.Dessert } -Variant 'text'\n        } -LoadingComponent {\n            New-UDSkeleton\n        }\n    }\n    New-UDTableColumn -Property Calories -Title Calories \n    New-UDTableColumn -Property Fat -Title Fat \n    New-UDTableColumn -Property Carbs -Title Carbs \n    New-UDTableColumn -Property Protein -Title Protein \n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Formatted Form with Rows and Columns in PowerShell Universal Dashboard\nDESCRIPTION: Shows how to create a structured form with multiple text fields organized in rows and columns. This demonstrates using the grid system to create a responsive form layout for collecting user information.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/form.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDForm -Content {\n\n    New-UDRow -Columns {\n        New-UDColumn -SmallSize 6 -LargeSize 6 -Content {\n            New-UDTextbox -Id 'txtFirstName' -Label 'First Name' \n        }\n        New-UDColumn -SmallSize 6 -LargeSize 6 -Content {\n            New-UDTextbox -Id 'txtLastName' -Label 'Last Name'\n        }\n    }\n\n    New-UDTextbox -Id 'txtAddress' -Label 'Address'\n\n    New-UDRow -Columns {\n        New-UDColumn -SmallSize 6 -LargeSize 6  -Content {\n            New-UDTextbox -Id 'txtState' -Label 'State'\n        }\n        New-UDColumn -SmallSize 6 -LargeSize 6  -Content {\n            New-UDTextbox -Id 'txtZipCode' -Label 'ZIP Code'\n        }\n    }\n\n} -OnSubmit {\n    Show-UDToast -Message $EventData.txtFirstName\n    Show-UDToast -Message $EventData.txtLastName\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Multi-Page Dashboard in PowerShell Universal\nDESCRIPTION: This syntax shows how to create a new dashboard with multiple pages using the New-UDApp cmdlet. It includes various optional parameters for customizing the dashboard's appearance and behavior across multiple pages.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDApp.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDApp [-Title <String>] -Pages <DashboardPage[]> [-Theme <Hashtable>] [-Scripts <String[]>] [-Stylesheets <String[]>] [-Logo <String>] [-DefaultTheme <String>] [-DisableThemeToggle] [-HeaderPosition <String>] [-HeaderColor <DashboardColor>] [-HeaderBackgroundColor <DashboardColor>] [-NavigationLayout <String>] [-Navigation <Hashtable[]>] [-HideUserName] [-HideNavigation] [-LoadNavigation <Endpoint>] [-HeaderContent <Endpoint>] [-PageNotFound <Endpoint>] [-NotAuthorized <Endpoint>] [-SessionTimeoutModal <ScriptBlock>] [-Menu <Endpoint>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Processing Event Hub Requests using PowerShell\nDESCRIPTION: This helper script receives event hub data and processes requests from PowerShell Universal to invoke scripts. It creates a temporary PS1 file with the received contents and executes it with the provided parameters.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/event-hubs.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n$TempFile = (New-TemporaryFile).FullName + \".ps1\"\n$EventData.Contents | Out-File -FilePath $TempFile\n$Parameters = $EventData.Parameters\n& $TempFile @Parameters\n```\n\n----------------------------------------\n\nTITLE: Executing Commands in PowerShell Universal Terminal\nDESCRIPTION: Example demonstrating how to create a terminal instance, start it, and execute a command within it using PowerShell Universal cmdlets. Shows the complete workflow from terminal creation to command execution.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Invoke-PSUTerminalCommand.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$Terminal = Get-PSUTerminal | Where-Object Name -eq 'Terminal1'\nStart-PSUTerminalInstance -Terminal $Terminal \n$Instance = Get-PSUTerminalInstance\nInvoke-PSUTerminalCommand -TerminalInstance $Instance -Command 'Write-Host \"Hello, World!\"'\n```\n\n----------------------------------------\n\nTITLE: Sending Script to Remote Machine using PowerShell in PowerShell Universal\nDESCRIPTION: This script sends an event to a specific remote machine connected to the event hub. It retrieves the connection for the target computer, sends the contents of a script file, and includes parameters for that script.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/event-hubs.md#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nparam($TargetComputer, $ProcessName)\n \n$Connection = Get-PSUEventHubConnection | Where-Object { $_.Computer -eq $TargetComputer -and -not $_.Disconnected } | Select-Object -First 1\nSend-PSUEvent -Hub eventHub -ConnectionId $Connection.ConnectionId -Data @{\n    Contents = Get-Content StartAProcess.ps1 -Raw\n    Parameters = @{\n        Name = $ProcessName\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Logs with Write-PSULog in PowerShell Universal\nDESCRIPTION: This PowerShell snippet shows how to use the Write-PSULog cmdlet to write log messages from within scripts in PowerShell Universal.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/development/logging.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nWrite-PSULog -Feature 'MyFeature' -Message 'MyMessage'\n```\n\n----------------------------------------\n\nTITLE: Creating Loading Buttons in Universal Apps\nDESCRIPTION: Implements a button that displays a loading icon while the event handler is running, useful for longer operations that users need visual feedback for.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/button.md#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Text 'Message Box' -OnClick {\n    Show-UDToast -Message 'Hello, world!'\n    Start-Sleep 10\n} -ShowLoading\n```\n\n----------------------------------------\n\nTITLE: Retrieving Displayed Table Data in PowerShell Universal Dashboard\nDESCRIPTION: Demonstrates how to retrieve and display filtered table data using Get-UDElement. Includes a button to show the current table state in a modal.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/table.md#2025-04-16_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\n$Columns = @(\n    New-UDTableColumn -Property Name -Title \"Name\" -ShowFilter\n    New-UDTableColumn -Property Value -Title \"Value\" -ShowFilter\n)\n\n$TableData = 1..1000 | ForEach-Object {\n  @{\n      Name = \"Record-$_\"\n      Value = $_ \n  }\n}\n\nNew-UDButton -Text 'Get Filtered Data' -OnClick {\n    $Element = Get-UDElement -Id 'filteredTable'\n    Show-UDModal -Content {\n        New-UDElement -Tag 'pre' -Content {\n           $Element | ConvertTo-Json\n        }\n    }\n}\n\nNew-UDTable -Id 'filteredTable' -Columns $Columns -LoadData {\n    foreach($Filter in $EventData.Filters)\n    {\n        $TableData = $TableData | Where-Object -Property $Filter.Id -Match -Value $Filter.Value\n    }\n\n    $TotalCount = $TableData.Count \n\n    if (-not [string]::IsNullOrEmpty($EventData.OrderBy))\n    {\n        $Descending = $EventData.OrderDirection -ne 'asc'\n        $TableData = $TableData | Sort-Object -Property $EventData.orderBy -Descending:$Descending\n    }\n    \n    $TableData = $TableData | Select-Object -First $EventData.PageSize -Skip ($EventData.Page * $EventData.PageSize)\n\n    $TableData | Out-UDTableData -Page $EventData.Page -TotalCount $TotalCount -Properties $EventData.Properties \n} -ShowFilter -ShowSort -ShowPagination\n```\n\n----------------------------------------\n\nTITLE: Slider with OnChange Event Handler in PowerShell\nDESCRIPTION: Creates a slider with an event handler that displays a toast message and sets test data when the slider value changes.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/slider.md#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDSlider -OnChange {\n    Show-UDToast -Message $Body \n    Set-TestData $Body\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Input Masking in PowerShell\nDESCRIPTION: Creates a textbox with input masking for formatted phone number entry.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/textbox.md#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTextbox -Id 'textbox16' -MaskPattern '+7 (000) 000-00-00'\n```\n\n----------------------------------------\n\nTITLE: Set-PSUEndpoint Command Syntax\nDESCRIPTION: Complete syntax showing two parameter sets for updating endpoints either by ID or InputObject with all available parameters.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Set-PSUEndpoint.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PSUEndpoint [-Id] <Int64> [-AppToken <String>] [-Authentication] [-ComputerName <String>] [-Description <String>] [-Documentation <String>] [-Endpoint <ScriptBlock>] [-Environment <String>] [-Integrated] [-Method {GET | POST | PUT | DELETE | OPTIONS | PATCH}] [-Path <String>] [-PersistentLog] [-RegEx] [-Role <String[]>] [-Tag <Tag[]>] [-Timeout <Int32>] [-Url <String>] [-UseDefaultCredentials] [-Credential <PSCredential>] [-TrustCertificate] [<CommonParameters>]\n```\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PSUEndpoint [-InputObject] <Endpoint> [-AppToken <String>] [-Authentication] [-ComputerName <String>] [-Description <String>] [-Documentation <String>] [-Endpoint <ScriptBlock>] [-Environment <String>] [-Integrated] [-Method {GET | POST | PUT | DELETE | OPTIONS | PATCH}] [-Path <String>] [-PersistentLog] [-RegEx] [-Role <String[]>] [-Tag <Tag[]>] [-Timeout <Int32>] [-Url <String>] [-UseDefaultCredentials] [-Credential <PSCredential>] [-TrustCertificate] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Creating an Editor with HTML Format Output in PowerShell\nDESCRIPTION: Creates an editor with an OnChange event handler that returns content in HTML format instead of the default JSON block format. This allows working with the editor content as rendered HTML.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/editor.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDEditor -OnChange {\n    Show-UDToast $EventData\n} -Format 'html'\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Universal App Page with PowerShell\nDESCRIPTION: Demonstrates how to create a simple Universal App with a single dashboard page that contains a typography element.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/pages.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$Pages = @()\n$Pages += New-UDPage -Name 'Dashboard' -Content {\n    New-UDTypography -Text 'Dashboard'\n}\n\nNew-UDApp -Title 'Pages' -Pages $Pages\n```\n\n----------------------------------------\n\nTITLE: Creating Advanced Alerts with HTML Content\nDESCRIPTION: Shows how to create advanced alerts that include HTML content and titles. These alerts use the New-UDHtml cmdlet to render formatted text within the alert component.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/alert.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDAlert -Severity 'error' -Content { New-UDHtml 'This is an error alert — <strong>check it out!</strong>' } -Title \"Error\"\nNew-UDAlert -Severity 'warning' -Content { New-UDHtml 'This is an warning alert — <strong>check it out!</strong>' } -Title \"Warning\"\nNew-UDAlert -Severity 'info' -Content { New-UDHtml 'This is an error info — <strong>check it out!</strong>' } -Title \"Info\"\nNew-UDAlert -Severity 'success' -Content { New-UDHtml 'This is an success alert — <strong>check it out!</strong>' } -Title \"Success\"\n```\n\n----------------------------------------\n\nTITLE: Force Reloading Elements\nDESCRIPTION: Shows how to force an element to reload its content using Sync-UDElement.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/element.md#2025-04-16_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDElement -Tag 'div' -Endpoint {\n    Get-Date\n} -Id 'myDiv'\n\nNew-UDButton -Text 'Click Me' -OnClick {\n    Sync-UDElement -Id 'myDiv'\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Grow Transition in PowerShell\nDESCRIPTION: Creates a grow transition effect on a button with a checkbox toggle control. The transition grows the element with a 1000ms duration.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTransition.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTransition -Grow -In -Children {\n    New-UDButton -Text 'Click Me' -Id 'button4'\n} -Id 'transition4'  -Timeout 1000\nNew-UDCheckbox -Label 'Toggle' -OnChange {\n    Set-UDElement -Id 'transition4' -Properties @{\n        In = $EventData\n    }\n} -Checked $true\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Textbox in PowerShell\nDESCRIPTION: Creates a basic textbox with an ID, label, placeholder, and default value.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTextbox.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTextbox -Id 'textbox1' -Label 'Name' -Placeholder 'Enter your name' -Value 'John Doe'\n```\n\n----------------------------------------\n\nTITLE: Sending Form Data to an API Endpoint\nDESCRIPTION: Shows how to send form data to an API endpoint using a PowerShell hashtable with Invoke-RestMethod.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/endpoints.md#2025-04-16_snippet_16\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-RestMethod http://localhost:5000/user -Method Post -Body @{ \n    UserName = \"adriscoll\"\n    FirstName = \"Adam\"\n    LastName = \"Driscoll\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Identity Name Using Object in PowerShell Universal\nDESCRIPTION: This example shows how to retrieve an identity object using Get-UAIdentity and then update its name using Set-PSUIdentity.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Set-PSUIdentity.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$Identity = Get-UAIdentity -Name 'Adam'\nSet-UAIdentity -Identity $Identity -Name 'Lee'\n```\n\n----------------------------------------\n\nTITLE: Implementing Loading Component for Dynamic Region in PowerShell\nDESCRIPTION: Demonstrates how to add a loading component to a dynamic region that displays while the main content is loading. It also includes a refresh button to trigger updates.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDDynamic.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDynamic -Content {\n    Start-Sleep 5\n    New-UDTypography -Text (Get-Date) -Id 'text5'\n} -Id 'dynamic4' -LoadingComponent {\n    New-UDTypography -Text 'Loading...' -Id 'text4'\n}\nNew-UDButton -Text 'Refresh' -OnClick {\n    Sync-UDElement -Id 'dynamic4'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Authentication with Personal Access Token in PowerShell Universal\nDESCRIPTION: Configuration example showing how to set up git authentication using a personal access token (PAT) in the appsettings.json file, which is the recommended authentication method over username and password.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/git.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n    \"Data\": {\n    \"RepositoryPath\": \"%ProgramData%\\\\UniversalAutomation\\\\Repository\",\n    \"ConnectionString\": \"%ProgramData%\\\\UniversalAutomation\\\\database.db\",\n    \"GitRemote\": \"https://github.com/myorg/myrepo.git\",\n    \"GitUserName\": \"any\",\n    \"GitPassword\": \"MYPAT----------------\"\n  },\n```\n\n----------------------------------------\n\nTITLE: Starting PowerShell Universal Server with Single-File Configuration\nDESCRIPTION: This example shows how to start a PowerShell Universal server on port 8080 and use single-file configuration to set up a new endpoint listening on '/test'.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Start-PSUServer.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nStart-PSUServer -Port 8080 -Configuration {\n    New-PSUEndpoint -Url '/test' -Method 'GET' -Endpoint {\n        \"Hi\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Textbox Components in PowerShell\nDESCRIPTION: Demonstrates creation of standard, disabled, and pre-valued textboxes using New-UDTextbox cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/textbox.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTextbox -Label 'Standard' -Placeholder 'Textbox'\nNew-UDTextbox -Label 'Disabled' -Placeholder 'Textbox' -Disabled\nNew-UDTextbox -Label 'Textbox' -Value 'With value'\n```\n\n----------------------------------------\n\nTITLE: Creating Local Git Setting in PowerShell Universal\nDESCRIPTION: This example demonstrates how to create a local git setting for a PowerShell Universal application named 'MyApp' with the branch set to 'main'.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUGitSetting.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUGitSetting -Branch 'main' -Name 'MyApp'\n```\n\n----------------------------------------\n\nTITLE: Basic URL Redirect in PowerShell\nDESCRIPTION: Demonstrates basic usage of Invoke-UDRedirect to redirect users to an external URL when clicking a button.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Invoke-UDRedirect.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Text 'Click Me' -OnClick {\n    Invoke-UDRedirect 'https://www.google.com'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Map with New-UDMap in PowerShell\nDESCRIPTION: This example demonstrates how to create a basic map using the New-UDMap cmdlet. It sets up a raster layer with a tile server and positions the map over Hailey, Idaho.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDMap.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDMap -Content {\n    New-UDMapRasterLayer -TileServer 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png' \n} -Latitude 43.52107 -Longitude -114.31644 -Zoom 13 -Height '25vh' -Id 'map1'\n```\n\n----------------------------------------\n\nTITLE: Creating Policy based on Active Directory Group Membership in PowerShell Universal\nDESCRIPTION: This snippet demonstrates how to create a policy based on Active Directory group membership using claim mappings. It creates a new role for administrators based on a specific group SID.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/security/authorization.md#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\n$Parameters = @{\n    Name = \"Administrators\"\n    ClaimType = 'http://schemas.microsoft.com/ws/2008/06/identity/claims/groupsid'\n    ClaimValue = 'S-1-5-21-22222222-111111-3333333-153'\n}\n\nNew-PSURole @Parameters\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Page Universal Dashboard in PowerShell\nDESCRIPTION: Creates a Universal Dashboard with multiple pages using an array of page definitions. Shows how to create separate pages with unique content and combine them into a single dashboard.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDApp.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n$Pages = @(\n    New-UDPage -Name 'HomePage' -Content {\n        New-UDTypography -Text 'Home Page'\n    }\n    New-UDPage -Name 'Page2' -Content {\n        New-UDTypography -Text 'Page2'\n    }\n)\n\nNew-UDDashboard -Title 'My Dashboard' -Pages $Pages\n```\n\n----------------------------------------\n\nTITLE: Toast Notification Implementation\nDESCRIPTION: Demonstrates various ways to show and hide toast notifications.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/interaction.md#2025-04-16_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nShow-UDToast -Message 'Hello, World!'\n\nShow-UDToast -Icon \"Ad\" -Message \"Test\"\n\nShow-UDToast -Message 'Hello, World!' -Id 'Toast' -Duration 30000\n\nNew-UDButton -Text 'Click' -OnClick {\n    Hide-UDToast -Id 'Toast'\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Components from Form Submission in PowerShell Universal Dashboard\nDESCRIPTION: Demonstrates how to replace a form with a new component upon submission. When the form is submitted, it is replaced with a Typography component displaying the text entered in the form.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/form.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDForm -Content {\n    New-UDTextbox -Id 'txtTextfield'\n} -OnSubmit {\n    New-UDTypography -Text $EventData.txtTextfield\n}\n```\n\n----------------------------------------\n\nTITLE: Application Insights Configuration\nDESCRIPTION: Configuration settings for Azure Application Insights integration.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/settings.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n\"ApplicationInsights\": {\n  \"InstrumentationKey\": \"\"\n},\n```\n\n----------------------------------------\n\nTITLE: Creating Endpoint with Specific Environment in PowerShell Universal\nDESCRIPTION: Shows how to create a new API endpoint using New-PSUEndpoint cmdlet, specifying a custom environment. This example creates an endpoint at /environment using the Integrated environment and returns the $PSUEnvironment variable.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/about.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUEndpoint -Url /environment -Environment Integrated -Endpoint {\n    $PSUEnvironment\n}\n```\n\n----------------------------------------\n\nTITLE: Running Universal Docker Container\nDESCRIPTION: Command to run the Universal Docker container with volume mounting and port mapping configurations.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/docker.md#2025-04-16_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --name powershelluniversal --mount source=psudata,target=/home/data --rm -d  -p 5000:5000/tcp universal-persistent:latest\n```\n\n----------------------------------------\n\nTITLE: Creating a Scheduled Task with Credentials\nDESCRIPTION: Creates a scheduled task that runs every five minutes using specified credentials stored as a secret.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUSchedule.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n$Script = Get-PSUScript -Name 'Script1.ps1'\nNew-PSUSchedule -Script $Script -Cron '*/5 * * * *' -Credential $Secret:Credential\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Forms Authentication in PowerShell Universal\nDESCRIPTION: Example script demonstrating how to implement a custom forms authentication method using Set-PSUAuthenticationMethod. The script validates if the username is 'Adam' and returns an appropriate authentication result.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Set-PSUAuthenticationMethod.txt#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PSUAuthenticationMethod -ScriptBlock {\n    param($Credential) \n\n    if ($Credential.UserName -eq 'Adam')\n    {\n        New-PSUAuthenticationResult -Success -UserName 'Adam'\n    }\n    else \n    {\n        New-PSUAuthenticationResult -ErrorMessage 'Not Adam!'\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Setting PowerShell Universal Branding with Logos and Title\nDESCRIPTION: This example demonstrates how to use the Set-PSUBranding cmdlet to customize the PowerShell Universal interface by setting the login page image, app bar logo, and admin console title. The cmdlet configures these visual elements to create a consistent branded experience.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Set-PSUBranding.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PSUBranding -LoginPageImage 'C:\\logo.png' -AppBarLogo 'C:\\logo.png' -AdminConsoleTitle 'My Admin Console'\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Content in Tooltips for PowerShell Universal\nDESCRIPTION: Demonstrates how to use complex Universal Dashboard elements as tooltip content. This example wraps the tooltip text in a UDPaper component for additional styling options.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/tooltip.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTooltip -Content {\n    New-UDIcon -Icon 'User'\n} -TooltipContent {\n    New-UDPaper -Children {\n        \"User\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Events to Clients using PowerShell in PowerShell Universal\nDESCRIPTION: This snippet demonstrates how to send events from a hub to connected clients using the Send-PSUEvent cmdlet. The -Data parameter accepts an object that will be serialized and sent to the client.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/event-hubs.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSend-PSUEvent -Hub 'MyHub' -Data \"Hello!\"\n```\n\n----------------------------------------\n\nTITLE: Configuring PSU Ignore Patterns in PowerShell\nDESCRIPTION: This snippet demonstrates how to create a .psuignore file to exclude certain files or patterns from the file system watcher in PowerShell Universal. This is useful for ignoring log files or git directories.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/repository.md#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nlogs.*\n.git.*\n```\n\n----------------------------------------\n\nTITLE: Debugging PowerShell Universal Apps\nDESCRIPTION: Example demonstrating how to implement debugging in PowerShell Universal Apps using Wait-Debugger within a dynamic content block.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/development/debugging-scripts.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDApp -Title 'PowerShell Universal' -Content {\n     New-UDDynamic -Id 'dynamic' -Content {\n        Wait-Debugger\n        New-UDTypography \"Loaded\"\n    } -LoadingComponent {\n        New-UDSkeleton\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PSU Variable in Vault\nDESCRIPTION: Creates a new variable in a specific vault where the value is stored securely and only retrieved when running scripts. The variable is named 'UserName' with value 'Adam'.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUVariable.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UAVariable -Name 'UserName' -Value 'Adam' -Vault \"Vault\"\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Tabs in PowerShell with Universal Apps\nDESCRIPTION: This snippet demonstrates how to create a basic tabs component with three tabs. Each tab contains a header typography element that displays the name of the tab.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/navigation/tabs.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTabs -Tabs {\n    New-UDTab -Text 'Item One' -Content { New-UDTypography -Text 'Item One' -Variant 'h2' }\n    New-UDTab -Text 'Item Two' -Content { New-UDTypography -Text 'Item Two' -Variant 'h2' }\n    New-UDTab -Text 'Item Three' -Content { New-UDTypography -Text 'Item Three' -Variant 'h2' }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Select Component with OnChange Event in PowerShell\nDESCRIPTION: This example shows how to create a select component with a default value and an OnChange event that displays a toast message when the selection changes.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDSelect.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDSelect -Label 'Select' -Id 'select2' -Option {\n    New-UDSelectOption -Name \"One\" -Value 1\n    New-UDSelectOption -Name \"Two\" -Value 2\n    New-UDSelectOption -Name \"Three\" -Value 3\n} -DefaultValue 2 -OnChange {\n    Show-UDToast -Message $EventData\n} -FullWidth\n```\n\n----------------------------------------\n\nTITLE: Invoking Button Click Handler in PowerShell Universal Dashboard\nDESCRIPTION: Example demonstrating how to create two buttons where one button's click handler invokes another button's endpoint. Shows the usage of Invoke-UDEndpoint to programmatically trigger button actions.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Invoke-UDEndpoint.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Text \"Click Me\" -OnClick {\n    Show-UDToast \"I was clicked!\"\n} -Id 'Button'\n\nNew-UDButton -Text \"Invoke Me\" -OnClick {\n    Invoke-UDEndpoint -Id 'Button'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a PowerShell Universal App\nDESCRIPTION: This example demonstrates how to create a basic PowerShell Universal app using the New-PSUApp cmdlet. It specifies the app name, base URL, and the script file to use.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUApp.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUApp -Name 'App' -BaseUrl '/app' -FilePath \"app.ps1\"\n```\n\n----------------------------------------\n\nTITLE: Setting German Locale for Date Picker in PowerShell\nDESCRIPTION: Creates a date picker with German locale settings using the Locale parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDDatePicker.txt#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDatePicker -Id 'datepicker5' -Value '1-2-2020' -Locale 'de'\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Navigation in Universal App with PowerShell\nDESCRIPTION: Demonstrates how to create dynamic navigation using the -LoadNavigation parameter with a script block that executes during page load.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/pages.md#2025-04-16_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\n$Navigation = {\n    New-UDListItem -Label \"Home - $(Get-Date)\"\n    New-UDListItem -Label \"Getting Started\" -Children {\n        New-UDListItem -Label \"Installation\" -Href '/installation' \n        New-UDListItem -Label \"Usage\" -Href '/usage' \n        New-UDListItem -Label \"FAQs\" -Href '/faqs' \n        New-UDListItem -Label \"System Requirements\" -Href'/requirements' \n        New-UDListItem -Label \"Purchasing\" -Href '/purchasing' \n    }\n}\n\n$Pages = @()\n$Pages += New-UDPage -Name 'Test' -Content {\n New-UDTypography -Text \"Hello\"\n} -NavigationLayout permanent -LoadNavigation $Navigation\n\n$Pages += New-UDPage -Name 'Test2' -Content {\n    New-UDTypography -Text \"Hello\"\n} -NavigationLayout permanent -LoadNavigation $Navigation\n\n\nNew-UDApp -Title \"Hello, World!\" -Pages $Pages\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dynamic Component Function in PowerShell\nDESCRIPTION: Demonstrates how to write a PowerShell function that returns PSBlazor markup as a string. This function will be called when the component renders and should return valid PSBlazor syntax.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/portal/portal-widgets/dynamic.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nfunction RenderMyDynamic {\n    \"<Alert Message='Cool!' />\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Asynchronous Autocomplete Options in PowerShell\nDESCRIPTION: Implements an autocomplete with dynamically filtered options based on user input.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDAutocomplete.txt#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDAutocomplete -OnLoadOptions { \n   @('Test', 'Test2', 'Test3', 'Test4') | Where-Object { $_ -match $Body } | ConvertTo-Json\n} -Id 'autocomplete8' -FullWidth\n```\n\n----------------------------------------\n\nTITLE: Configuring Bar Chart Parameters in PowerShell\nDESCRIPTION: Defines parameters for creating and customizing bar charts, including axis configuration, grouping modes, layout options, and styling properties.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDNivoChart.txt#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n-DisableStackTooltip [<SwitchParameter>]\n-AxisTop <Object>\n-AxisBottom <Object>\n-AxisLeft <Object>\n-AxisRight <Object>\n-Bar [<SwitchParameter>]\n-GroupMode <String>\n-Layout <String>\n-Reverse [<SwitchParameter>]\n-InnerPadding <Single>\n-BorderRadius <Int32>\n-DisableLabel [<SwitchParameter>]\n```\n\n----------------------------------------\n\nTITLE: Creating Menu Items with Custom Values\nDESCRIPTION: Illustrates how to create menu items with distinct values that differ from their display text using the -Value parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/navigation/menu.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDMenu -Content {\n   New-UDMenuItem -Text 'Item 1' -Value 'item1'\n   New-UDMenuItem -Text 'Item 1' -Value 'item2'\n   New-UDMenuItem -Text 'Item 1' -Value 'item3'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Clickable and Deletable Chip with Icon and Toast Notifications in PowerShell\nDESCRIPTION: This example demonstrates how to create a chip that is both clickable and deletable, with different toast notifications for each action.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDChip.txt#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDChip -Label 'Clickable and deletable' -Icon (New-UDIcon -Icon 'user') -OnClick {\n    Show-UDToast -Message 'Hello!'\n} -OnDelete {\n    Show-UDToast -Message 'Deleted!'\n} -Id 'chip5'\n```\n\n----------------------------------------\n\nTITLE: Removing Cache Entry in PowerShell Universal\nDESCRIPTION: Demonstrates how to use the Remove-PSUCache cmdlet to remove a cache entry with a specific key from PowerShell Universal. This example shows the basic syntax with the required Key parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Remove-PSUCache.txt#2025-04-16_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-PSUCache -Key 'Test'\n```\n\n----------------------------------------\n\nTITLE: Integrating UDUpload with UDForm\nDESCRIPTION: Demonstrates how to include a file upload as part of a UDForm. The uploaded file will be part of the form submission data in the OnSubmit script block.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/upload.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDForm -Content {\n    New-UDUpload -Id 'myFile' -Text 'Upload File'\n} -OnSubmit {\n    Show-UDToast $Body \n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Boundary in PowerShell Universal Dashboard\nDESCRIPTION: Demonstrates how to use the New-UDErrorBoundary cmdlet to isolate error-prone components in a dashboard. The component wraps potentially problematic content and prevents errors from crashing the entire application.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/error-boundary.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDErrorBoundary -Content {\n    throw \"Oh no!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Persistent Modal Implementation\nDESCRIPTION: Creates a modal that doesn't close when clicking outside. Must be explicitly closed using Hide-UDModal.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/feedback/modal.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Text 'Persistent' -OnClick {\n    Show-UDModal -Content {\n        New-UDTypography -Text \"Hello\"\n    } -Footer {\n        New-UDButton -Text \"Close\" -OnClick { Hide-UDModal }\n    } -Persistent\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Configuration Settings\nDESCRIPTION: JSON Web Token configuration including signing key, issuer, and audience settings.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/settings.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n\"Jwt\": {  \n  \"SigningKey\": \"PleaseUseYourOwnSigningKeyHere\",  \n  \"Issuer\": \"IronmanSoftware\",\n  \"Audience\": \"PowerShellUniversal\"\n},\n```\n\n----------------------------------------\n\nTITLE: Creating a Dashboard Stop Trigger in PowerShell Universal\nDESCRIPTION: Creates a new trigger that calls the DashboardStopped.ps1 file when a specific dashboard named 'MyDashboard' stops. This example shows how to use the -Dashboard parameter to target a specific dashboard.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUTrigger.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUTrigger -Name 'Dashboard Stopped' -Dashboard 'MyDashboard' -EventType DashboardStopped -TriggerScript 'DashboardStopped.ps1'\n```\n\n----------------------------------------\n\nTITLE: Creating Component Example\nDESCRIPTION: Shows how to create a basic component (textbox) within a page.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/building-dashboards.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDPage -Content {\n    New-UDTextbox\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Grid Layout with Two Cards\nDESCRIPTION: Creates a basic grid layout with two draggable and resizable cards using predefined layout configuration.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDGridLayout.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDGridLayout -Content {\n    New-UDCard -Text \"Card 1\" -Id \"card1\"\n    New-UDCard -Text \"Card 2\" -Id \"card2\"\n} -Id 'gridLayout1' -Draggable -Resizable -Layout '{\"lg\":[{\"w\":2,\"h\":3,\"x\":0,\"y\":0,\"i\":\"grid-element-card1\",\"moved\":false,\"static\":false},{\"w\":2,\"h\":3,\"x\":2,\"y\":0,\"i\":\"grid-element-card2\",\"moved\":false,\"static\":false}]}'\n```\n\n----------------------------------------\n\nTITLE: Manual Mode Configuration in AppSettings\nDESCRIPTION: JSON configuration for setting up manual Git sync mode in PowerShell Universal's appsettings.json file. Includes repository path, database connection, and Git-specific settings.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/git.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"Data\": {\n  \"RepositoryPath\": \"%ProgramData%\\\\UniversalAutomation\\\\Repository\",\n  \"ConnectionString\": \"filename=%ProgramData%\\\\UniversalAutomation\\\\database.db;upgrade=true\",\n  \"RunMigrations\": true,\n  \"GitRemote\": \"\",\n  \"GitUserName\": \"\",\n  \"GitPassword\": \"\",\n  \"GitBranch\": \"\",\n  \"GitSyncBehavior\": \"TwoWay\",\n  \"GitInitializeBehavior\": \"\",\n  \"GitSyncInterval\": \"1\",\n  \"ConfigurationScript\": \"\",\n  \"ExternalGitClient\": false\n  \"Mode\": \"Manual\" // Or Automatic\n}\n```\n\n----------------------------------------\n\nTITLE: Setting PowerShell Universal Authentication - OpenID Connect\nDESCRIPTION: Syntax for configuring OpenID Connect authentication with required parameters for callback path and client ID. Includes optional settings for authority, client secret, and token handling.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Set-PSUAuthenticationMethod.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PSUAuthenticationMethod [-AppToken <String>] [-ComputerName <String>] [-ScriptBlock <ScriptBlock>] [-Disabled] [-UseDefaultCredentials] [-Authority <String>] -CallbackPath <String> -ClientId <String> [-ClientSecret <String>] [-Configure <ScriptBlock>] [-CorrelationCookieSameSite <String>] [-GetClaimsFromUserInfoEndpoint <Boolean>] [-Integrated] [-Resource <String>] [-ResponseType <String>] [-SaveTokens <Boolean>] [-Scopes <String>] [-Type <AuthenticationMethodType>] [-UseTokenLifetime <Boolean>] [-RequireMfa] [-Credential <PSCredential>] [-TrustCertificate] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Export in Universal Dashboard Tables\nDESCRIPTION: This example shows how to enable data export functionality in a Universal Dashboard table. It demonstrates including specific columns in the export and hiding columns from the table view while including them in the export.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTable.txt#2025-04-16_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\n$Data = @(\n    @{Dessert = 'Frozen yoghurt'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Ice cream sandwich'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Eclair'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Cupcake'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Gingerbread'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n) \n\n$Columns = @(\n    New-UDTableColumn -Property Dessert -Title \"A Dessert\" -IncludeInExport\n    New-UDTableColumn -Property Calories -Title Calories  -IncludeInExport\n    New-UDTableColumn -Property Fat -Title Fat   -IncludeInExport\n    New-UDTableColumn -Property Carbs -Title Carbs   -IncludeInExport\n    New-UDTableColumn -Property Protein -Title Protein   -IncludeInExport -Hidden\n)\n\nNew-UDTable -Id 'table10' -Data $Data -Columns $Columns -Export\n```\n\n----------------------------------------\n\nTITLE: Form Validation in PowerShell Universal Dashboard\nDESCRIPTION: Shows how to implement form validation using the OnValidate script block. The example validates that a text field isn't empty, returning an appropriate validation result.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/form.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDForm -Content {\n    New-UDTextbox -Id 'txtValidateForm'\n} -OnValidate {\n    $FormContent = $EventData\n\n    if ($FormContent.txtValidateForm -eq $null -or $FormContent.txtValidateForm -eq '') {\n        New-UDFormValidationResult -ValidationError \"txtValidateForm is required\"\n    } else {\n        New-UDFormValidationResult -Valid\n    }\n} -OnSubmit {\n    Show-UDToast -Message $Body\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Security Environment in PowerShell Universal\nDESCRIPTION: This snippet demonstrates how to set the security environment for PowerShell Universal using the Set-PSUSetting cmdlet. It configures the environment to use PowerShell 5.1 for running authentication and authorization scripts.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/security/authorization.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PSUSetting -SecurityEnvironment '5.1'\n```\n\n----------------------------------------\n\nTITLE: Creating Script from Module Command\nDESCRIPTION: Shows how to create a PowerShell Universal script that uses a function from an existing module.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/automation/scripts/README.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUScript -Module 'PSUModule' -Command 'Show-HelloWorld'\n```\n\n----------------------------------------\n\nTITLE: Implementing Paginated DataGrid\nDESCRIPTION: Creates a paginated data grid with 1000 rows of data. Demonstrates filtering, sorting, and paging functionality using Out-UDDataGridData.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDDataGrid.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDataGrid -LoadRows {\n    $Data = 1..1000 | ForEach-Object {\n        @{ Name = \"User$($_)\"; Number = Get-Random }\n    }  \n    Out-UDDataGridData -Data $Data -Total $Data.Length -Context $EventData\n} -Columns @(\n    New-UDDataGridColumn -Field 'Name'\n    New-UDDataGridColumn -Field 'Number'\n) -Pagination -Id 'dataGrid2'\n```\n\n----------------------------------------\n\nTITLE: Defining UAJob Object Structure in C#\nDESCRIPTION: C# class definition showing the structure of the UAJob object available to scripts running in PowerShell Universal. This class contains properties related to job execution such as timing, status, identity, and resource usage.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/variables.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nclass Job {\n    public long Id { get; set; }\n    public DateTime CreatedTime { get; set; }\n    public DateTime StartTime { get; set; }\n    public DateTime EndTime { get; set; }\n    public JobStatus Status { get; set; }\n    public string Output { get; set; }\n    public string ScriptFullPath { get; set; }\n    public Identity Identity { get; set; }\n    public Job ParentJob { get; set; }\n    public int ParentLineNumber { get; set; }\n    public string ComputerName { get; set; }\n    public int ProcessId { get; set; }\n    public long MemoryBytes { get; set; }\n    public int RunspaceId { get; set; }\n    public string Activity { get; set; }\n    public string CurrentOperation { get; set; }\n    public int PercentComplete { get; set; }\n    public int SecondsRemaining { get; set; }\n    public string StatusDescription { get; set; }\n    public string Environment { get; set; }\n    public Computer Computer { get; set; }\n    public ActionPreference ErrorAction { get; set; }\n    public IEnumerable<Job> Children { get; set; }\n    public IEnumerable<JobParameter> Parameters { get; set; }\n    public string Credential { get; set; }\n    public long ScheduleId { get; set; }\n    public bool Triggered { get; set; }\n    public string Trigger { get; set; }\n    public int RetryCount { get; set; }\n    public string Tags { get; set; }\n    public string Schedule { get; set; }\n    public bool Archived { get; set; }\n    public bool Batch { get; set; }\n    public Guid? RunId { get; set; }\n    public string Roles { get; set; }\n}\n\npublic enum JobStatus\n{\n    Queued,\n    Running,\n    Completed,\n    Failed,\n    WaitingOnFeedback,\n    Canceled,\n    Canceling,\n    Historical,\n    Active,\n    TimedOut,\n    Warning,\n    Error\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Map with Layer Control in PowerShell\nDESCRIPTION: This example shows how to create a map with layer control using New-UDMap. It includes multiple layers and markers that can be toggled on and off.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDMap.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDMap -Content {\n   New-UDMapLayerControl -Content {\n        New-UDMapBaseLayer -Name 'Color' -Content {\n            New-UDMapRasterLayer -TileServer 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png' \n        } -Checked\n        New-UDMapOverlay -Name 'Marker' -Content {\n            New-UDMapMarker -Latitude 51.505 -Longitude -0.09 \n        } -Checked\n        New-UDMapOverlay -Name 'Marker 2' -Content {\n            New-UDMapMarker -Latitude 51.555 -Longitude -0.00 \n        } -Checked\n    }\n} -Latitude 51.505 -Longitude -0.09 -Zoom 13 -Height '25vh' -Id 'map2'\n```\n\n----------------------------------------\n\nTITLE: Setting Code in an Editor Component from Another Component in PowerShell\nDESCRIPTION: Shows how to set the code in an editor component from another component using Set-UDElement. The example creates a button that changes the content of the code editor when clicked.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/code-editor.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDCodeEditor -Height '500' -Language 'powershell' -Code '#Hello, world!' -Id 'editor'\n\nNew-UDButton -Text 'Get Code' -OnClick {\n    Set-UDElement -Id 'editor' -Properties @{\n        code = \"# Hello!\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PSScriptAnalyzer Module for PowerShell Universal\nDESCRIPTION: Command to install the PSScriptAnalyzer module from PowerShell Gallery. This module is required by PowerShell Universal but not included by default, and the health check verifies its presence.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/health-checks.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Module PSScriptAnalyzer -Force\n```\n\n----------------------------------------\n\nTITLE: Creating Paperbase Dashboard with Navigation in PowerShell Universal\nDESCRIPTION: Implements a Universal Dashboard application using the Paperbase theme. Creates navigation menu with items for Home, Getting Started section (including Installation, Usage, FAQs, etc), and includes a main content area with a button and card component.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/themes/README.md#2025-04-16_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\n$Navigation = @(\n    New-UDListItem -Label \"Home\"\n    New-UDListItem -Label \"Getting Started\" -Children {\n        New-UDListItem -Label \"Installation\" -Icon (New-UDIcon -Icon envelope) -OnClick { Invoke-UDRedirect '/installation' }\n        New-UDListItem -Label \"Usage\" -Icon (New-UDIcon -Icon edit) -OnClick { Invoke-UDRedirect '/usage' }\n        New-UDListItem -Label \"FAQs\" -Icon (New-UDIcon -Icon trash) -OnClick { Invoke-UDRedirect '/faqs' }\n        New-UDListItem -Label \"System Requirements\" -Icon (New-UDIcon -Icon bug) -OnClick { Invoke-UDRedirect '/requirements' }\n        New-UDListItem -Label \"Purchasing\" -OnClick { Invoke-UDRedirect '/purchasing'}\n    }\n)\n\n\nNew-UDApp -Theme $theme -Title \"Paperbase\" -Content {\n    New-UDButton -Text 'Add user' -Color primary\n    New-UDCard -Title 'User Info' -Content {\n        \"No users for this project yet.\"\n    }\n} -Navigation $Navigation -NavigationLayout Permanent\n```\n\n----------------------------------------\n\nTITLE: Creating a Date Picker with Time Selection in PowerShell\nDESCRIPTION: Shows how to create a date picker that includes time selection using the ShowTime switch and customized Views.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDDatePicker.txt#2025-04-16_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDatePicker -Id 'datepicker12' -Value '1-2-2020' -ShowTime -Views @('day', 'year', 'hours', 'minutes')\n```\n\n----------------------------------------\n\nTITLE: Retrieving Job Output by Job ID in PowerShell Universal\nDESCRIPTION: This example demonstrates how to use the Get-PSUJobOutput cmdlet to retrieve output for a specific job using its ID. It's a simple way to fetch job output when you know the job ID.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUJobOutput.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-UAJobOutput -JobId 10\n```\n\n----------------------------------------\n\nTITLE: Creating Grid Layout with New-UDLayout in PowerShell\nDESCRIPTION: Demonstrates creating a 2-column grid layout within a container using New-UDLayout. The example shows how to arrange typography elements in a 2x2 grid pattern automatically.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDLayout.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDContainer -Content {\n    New-UDLayout -Columns 2 -Content {\n        New-UDTypography \"Row 1, Col 1\"\n        New-UDTypography \"Row 1, Col 2\"\n        New-UDTypography \"Row 2, Col 1\"\n        New-UDTypography \"Row 2, Col 2\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Permanent Navigation Layout in Universal App with PowerShell\nDESCRIPTION: Demonstrates how to create a static, always-visible navigation drawer using the 'permanent' navigation layout.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/pages.md#2025-04-16_snippet_14\n\nLANGUAGE: powershell\nCODE:\n```\n$Pages = @()\n$Pages += New-UDPage -Name 'Test' -Content {\n New-UDTypography -Text \"Hello\"\n} -NavigationLayout permanent\n\n$Pages += New-UDPage -Name 'Test2' -Content {\n    New-UDTypography -Text \"Hello\"\n} -NavigationLayout permanent\n\n\nNew-UDApp -Title \"Hello, World!\" -Pages $Pages\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Components in Table Columns with Context\nDESCRIPTION: Shows how to integrate a Dynamic component within a Table component's column. This example demonstrates defining a table with a dynamic column that will render differently based on row data.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/portal/portal-widgets/dynamic.md#2025-04-16_snippet_2\n\nLANGUAGE: markup\nCODE:\n```\n<Table DataSource=\"$Services\">\n    <PropertyColumn Property=\"Name\" />\n    <PropertyColumn Property=\"Status\">\n        <Dynamic Function=\"RenderStatusColumn\" />\n    </PropertyColumn>\n</Table>\n```\n\n----------------------------------------\n\nTITLE: Implementing OnEnter Event in Autocomplete Component\nDESCRIPTION: Shows how to handle the OnEnter event, which is triggered when the user presses the enter key within the autocomplete component.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/automcomplete.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDAutocomplete -Options @(\"Test\", \"No\", \"Yes\") -onEnter {\n    Show-UDToast ((Get-UDElement -Id 'ac').value)\n} -Id 'ac'\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Slider in PowerShell for Universal Dashboard\nDESCRIPTION: This example demonstrates how to create a basic slider with a value range of 0-100 and an OnChange event that displays a toast message.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDSlider.txt#2025-04-16_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDSlider -Value 50 -Minimum 0 -Maximum 100 -OnChange {\n    Show-UDToast -Message \"Slider value changed to $($EventData.value)\"\n} -Id 'slider1'\n```\n\n----------------------------------------\n\nTITLE: Configuring Rating Precision\nDESCRIPTION: Demonstrates how to set the precision of rating values to allow half-star ratings.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/rating.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDRating -Precision .5\n```\n\n----------------------------------------\n\nTITLE: New-UDMapVectorLayer Polyline Syntax\nDESCRIPTION: Creates a polyline vector layer on a map using specified positions. Allows customization of line color, weight, and opacity.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDMapVectorLayer.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDMapVectorLayer [-Id <String>] [-Color <DashboardColor>] [-FillColor <DashboardColor>] [-FillOpacity <Double>] [-Weight <Int32>] [-Opacity <Double>] -Polyline -Positions <Object> [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Creating Auto-Refreshing Random Data Chart with ChartJS Monitor\nDESCRIPTION: Creates a ChartJS monitor that displays random data points between 0-100, updates every second, and uses a green background color. The chart is labeled 'Random' and automatically refreshes.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDChartJSMonitor.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDChartJSMonitor -LoadData {\n    Get-Random -Max 100 | Out-UDChartJSMonitorData\n} -Labels \"Random\" -ChartBackgroundColor \"#297741\" -RefreshInterval 1\n```\n\n----------------------------------------\n\nTITLE: Using Out-UDTableData Cmdlet in PowerShell\nDESCRIPTION: The Out-UDTableData cmdlet formats data to be output from New-UDTable's -LoadRows script block. It takes parameters for Data, Page, TotalCount, and Properties to structure the output for Universal Dashboard tables.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Out-UDTableData.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nOut-UDTableData [-Data] <Object> [-Page] <Int32> [-TotalCount] <Int32> [-Properties] <String[]> [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Using Wait-UDDebugger with New-UDButton in PowerShell\nDESCRIPTION: This example demonstrates how to use the Wait-UDDebugger cmdlet within a button click event handler. When the button is clicked, it will display a debugging window that shows variables in the current context.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Wait-UDDebugger.txt#2025-04-16_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDButton -Text 'Click Me' -OnClick {\n    Wait-UDDebugger\n} -Id 'debugger1'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Code from an Editor Component in PowerShell\nDESCRIPTION: Demonstrates how to retrieve code from a code editor component using Get-UDElement. This example creates a button that shows the editor's code content in a toast notification when clicked.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/code-editor.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDCodeEditor -Height '500' -Language 'powershell' -Code '#Hello, world!' -Id 'editor'\n\nNew-UDButton -Text 'Get Code' -OnClick {\n    Show-UDToast -Message (Get-UDElement -id 'editor').Code\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Tooltip Placement in PowerShell Universal\nDESCRIPTION: Shows how to control tooltip placement relative to the target element. This example places the tooltip at the bottom of a user icon using the -Place parameter with 'bottom' value.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/tooltip.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTooltip -Content {\n    New-UDIcon -Icon 'User'\n} -TooltipContent {\n    \"User\"\n} -Place 'bottom'\n```\n\n----------------------------------------\n\nTITLE: Protecting UI Content with Role-Based Access\nDESCRIPTION: Demonstrates how to use Protect-UDSection cmdlet to hide content from users who don't have the Administrator role. The cmdlet takes an array of roles and a content block that will only be visible to users with the specified roles.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/utilities/protect-section.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nProtect-UDSection -Role @(\"Administrator\") -Content {\n   New-UDTypography -Text 'Only Administrators see this'\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Textbox Value in PowerShell\nDESCRIPTION: Shows how to get the current value of a textbox using Get-UDElement and display it in a toast notification.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/textbox.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTextbox -Id 'txtExample' \nNew-UDButton -OnClick {\n    $Value = (Get-UDElement -Id 'txtExample').value \n    Show-UDToast -Message $Value\n} -Text \"Get textbox value\"\n```\n\n----------------------------------------\n\nTITLE: Slider with Custom Step Size in PowerShell\nDESCRIPTION: Creates a slider with a range from 10 to 1000 and custom step size of 100.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/slider.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDSlider -Min 10 -Max 1000 -Step 100\n```\n\n----------------------------------------\n\nTITLE: Implementing a Grouped Select Component in PowerShell\nDESCRIPTION: Creates a select component with options organized into two named groups, allowing for hierarchical organization of choices.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/select.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDSelect -Option {\n    New-UDSelectGroup -Name 'Group One' -Option {\n        New-UDSelectOption -Name 'One' -Value 1\n        New-UDSelectOption -Name 'Two' -Value 2\n        New-UDSelectOption -Name 'Three' -Value 3\n    }\n    New-UDSelectGroup -Name 'Group Two' -Option {\n        New-UDSelectOption -Name 'Four' -Value 4\n        New-UDSelectOption -Name 'Five' -Value 5\n        New-UDSelectOption -Name 'Size' -Value 6\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Date Range Picker with PowerShell\nDESCRIPTION: PowerShell cmdlet syntax for creating a new date range picker component with various configuration options. Supports features like auto-focus, calendar count, date restrictions, and multiple event handlers.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDDateRangePicker.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDateRangePicker [-Id <String>] [-AutoFocus] [-Calendars <Int32>] [-ClassName <String>] [-CloseOnSelect] [-CurrentMonthCalendarPositition <Int32>] [-DefaultRangePosition <String>] [-DesktopModeMediaQuery <String>] [-Disabled] [-DisableDragEditing] [-DisableFuture] [-DisableHightlightToday] [-DisableOpenPicker] [-DisablePast] [-DisableWeekNumber] [-Label <String>] [-MaxDate <DateTime>] [-MinDate <DateTime>] [-OnAccept <Endpoint>] [-OnChange <Endpoint>] [-OnClose <Endpoint>] [-OnError <Endpoint>] [-OnMonthChange <Endpoint>] [-OnOpen <Endpoint>] [-onRangePositionChange <Endpoint>] [-onSelectedSectionsChange <Endpoint>] [-RangePosition <String>] [-ReduceAnimations] [-DisabledDates <DateTime[]>] [-showDaysOutsideCurrentMonth] [-Sx <Hashtable>] [-Timezone <String>] [-Value <DateTime[]>] [-LocaleText <Hashtable>] [-Format <String>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Setting PowerShell Universal App Idle Timeout\nDESCRIPTION: Configures an app to timeout after 30 minutes of user inactivity, regardless of whether the window is open. This setting monitors user interactions like clicks, typing, and mouse movements.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/sessions.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUApp -Name 'dashboard' -BaseUrl / -IdleTimeout 30\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Card Component with PowerShell Universal Dashboard\nDESCRIPTION: Creates a complex card component with header, body, footer, and expandable content. The card includes typography elements, icon buttons, and styled content using PowerShell Universal Dashboard cmdlets. The card is styled with a maximum width and custom border.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDCard.txt#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\n$Body = New-UDCardBody -Content {\n    New-UDTypography -Text ' This impressive paella is a perfect party dish and a fun meal to cook together with your guests. Add 1 cup of frozen peas along with the mussels, if you like.' -Sx @{\n        color = 'text.secondary'\n    } -Variant body2\n}\n$Footer = New-UDCardFooter -Content {\n    New-UDIconButton -Icon (New-UDIcon -Icon 'Heart')\n    New-UDIconButton -Icon (New-UDIcon -Icon 'ShareAlt')\n}\n$Expand = New-UDCardExpand -Content {\n    $Description = \"Heat oil in a (14- to 16-inch) paella pan or a large, deep skillet over medium-high heat. Add chicken, shrimp and chorizo, and cook, stirring occasionally until lightly browned, 6 to 8 minutes. Transfer shrimp to a large plate and set aside, leaving chicken and chorizo in the pan. Add pimentón, bay leaves, garlic, tomatoes, onion, salt and pepper, and cook, stirring often until thickened and fragrant, about 10 minutes. Add saffron broth and remaining 4 1/2 cups chicken broth; bring to a boil.\"\n    New-UDTypography -Text $Description\n}\nNew-UDCard -Header $Header -Media $Media -Body $Body -Footer $Footer -Expand $Expand -Sx @{\n    maxWidth = 345\n    border   = '2px solid #f0f2f5'\n} -Id 'card5'\n```\n\n----------------------------------------\n\nTITLE: Creating Temporary Navigation Layout in Universal App with PowerShell\nDESCRIPTION: Shows how to create a collapsible navigation drawer using the 'temporary' navigation layout, which can be toggled with a hamburger menu.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/pages.md#2025-04-16_snippet_15\n\nLANGUAGE: powershell\nCODE:\n```\n$Pages = @()\n$Pages += New-UDPage -Name 'Test' -Content {\n New-UDTypography -Text \"Hello\"\n} -NavigationLayout temporary\n\n$Pages += New-UDPage -Name 'Test2' -Content {\n    New-UDTypography -Text \"Hello\"\n} -NavigationLayout temporary\n\n\nNew-UDApp -Title \"Hello, World!\" -Pages $Pages\n```\n\n----------------------------------------\n\nTITLE: Creating Network Chart from JSON Data\nDESCRIPTION: Creates a network visualization chart by loading data from a JSON file containing node and connection information.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-visualization/charts.md#2025-04-16_snippet_20\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDNivoChart -Network -Data (Get-Content \"$Repository\\network.json\" | ConvertFrom-Json)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Azure AD with Access Token in PowerShell\nDESCRIPTION: PowerShell command syntax for connecting to Azure AD using an access token. This snippet shows the parameters of the Connect-AzureAD cmdlet, including how to pass the access token.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/security/enterprise-security/openid-connect.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-AzureAD\n       [-AzureEnvironmentName <EnvironmentName>]\n       [-TenantId <String>]\n       -AadAccessToken <String>\n       [-MsAccessToken <String>]\n       -AccountId <String>\n       [-LogLevel <LogLevel>]\n       [-LogFilePath <String>]\n       [-InformationAction <ActionPreference>]\n       [-InformationVariable <String>]\n       [-WhatIf]\n       [-Confirm]\n       [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Encryption Key in PowerShell Universal\nDESCRIPTION: Shows how to set the encryption key for the database vault in PowerShell Universal using appsettings.json.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/variables.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Secrets\": {\n    \"Database\": {\n      \"EncryptionKey\": \"=b0ywQA@VOSdr&R7an5g&XK6NVO%s4Tf\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Logging Target for ELK Stack in PowerShell Universal\nDESCRIPTION: This PowerShell snippet shows how to create a TCP logging target in PowerShell Universal to send log messages to ELK stack.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/development/logging.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSULoggingTarget -Type \"TCP\" -Level \"Verbose\" -Properties @{\n    hostName = 'tcp://localhost'\n    port     = '50000'\n} -Scope \"User\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested DataGrids with Virtual Machine Data\nDESCRIPTION: Shows how to create nested data grids displaying virtual machine information with expandable network card details. Includes functions for generating sample VM and network card data.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/data-grid.md#2025-04-16_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nfunction Get-VirtualMachine {\n    1..10 | ForEach-Object {\n        [PSCustomObject]@{\n            Name = \"VM-$_\"\n            OperatingSystem = @(\"Windows Server 2019\", \"Windows Server 2022\", \"Ubuntu 20.02\") | Get-Random\n            Memory = @(64, 128, 512, 1024) | Get-Random\n            Cores = @(8, 16, 32) | Get-Random\n        }\n    }\n}\n\nfunction Get-NetworkCard {\n    param($VirtualMachine)\n\n    1..4 | ForEach-Object {\n        [PSCustomObject]@{\n            Name = \"NIC-$_\"\n            Speed = @(64, 128, 512, 1024) | Get-Random\n        }\n    }\n}\n\nNew-UDApp -Content { \n    New-UDDataGrid -LoadRows {\n        $VMs = Get-VirtualMachine\n        $VMs| Out-UDDataGridData -Context $EventData -TotalRows $VMs.Length\n    } -Columns @(\n        New-UDDataGridColumn -Field Name\n        New-UDDataGridColumn -Field OperatingSystem\n        New-UDDataGridColumn -Field Memory -Render {\n            New-UDTypography -Text \"$($EventData.Memory) GB\\s\"\n        }\n        New-UDDataGridColumn -Field Cores\n    ) -AutoHeight $true -LoadDetailContent {\n        $VirutalMachine = $EventData.row\n        New-UDDataGrid -LoadRows {\n            $NICs = Get-NetworkCard -VirtualMachine $VirutalMachine\n            $NICs | Out-UDDataGridData -Context $EventData -TotalRows $NICs.Length\n        } -Columns @(\n            New-UDDataGridColumn -Field Name\n            New-UDDataGridColumn -Field Speed -Render {\n                New-UDTypography -Text \"$($EventData.Speed) GB\\s\"\n            }\n        ) -AutoHeight $true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic File Upload in PowerShell\nDESCRIPTION: A simple example of uploading a file and displaying its contents via a toast notification. The OnUpload script block receives the file data and can process it.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/upload.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDUpload -OnUpload {\n    Show-UDToast $Body\n} -Text 'Upload'\n```\n\n----------------------------------------\n\nTITLE: Creating a Health Check in PowerShell Universal\nDESCRIPTION: This example demonstrates how to create a new health check named 'Test Health Check' that checks if the C:\\Temp directory exists. It uses the New-PSUHealthCheck cmdlet with a ScriptBlock parameter to define the health check logic.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUHealthCheck.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUHealthCheck -Name 'Test Health Check' -ScriptBlock {\n    $Exists = Test-Path C:\\Temp\n    New-PSUHealthCheckResult -Message \"C:\\Temp exists: $Exists\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Search with Custom Columns in PowerShell for Universal Apps\nDESCRIPTION: This snippet shows how to implement search functionality with custom columns in tables using PowerShell for Universal Apps. It uses the -IncludeInSearch parameter for specific columns.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/table.md#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\n$TableData = @(\n    @{Dessert = 'Frozen yoghurt'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Ice cream sandwich'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Eclair'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Cupcake'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Gingerbread'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n) \n\n$Columns = @(\n    New-UDTableColumn -Property Dessert -Title \"A Dessert\" -IncludeInSearch\n    New-UDTableColumn -Property Calories -Title Calories \n    New-UDTableColumn -Property Fat -Title Fat \n    New-UDTableColumn -Property Carbs -Title Carbs \n    New-UDTableColumn -Property Protein -Title Protein \n)\n\nNew-UDTable -Id 'customColumnsTable' -Data $TableData -Columns $Columns -ShowSearch\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Filters for Table Columns in PowerShell for Universal Apps\nDESCRIPTION: This snippet shows how to add custom filters to table columns using PowerShell in Universal Apps. It demonstrates various filter types including AutoComplete and Range filters.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/table.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n$TableData = @(\n    @{Dessert = 'Frozen yoghurt'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Ice cream sandwich'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Eclair'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Cupcake'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Gingerbread'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n) \n\n$Columns = @(\n    New-UDTableColumn -Property Dessert -Title \"A Dessert\" -Filter -FilterType AutoComplete\n    New-UDTableColumn -Property Calories -Title Calories -Filter -FilterType Range\n    New-UDTableColumn -Property Fat -Title Fat -Filter -FilterType Range\n    New-UDTableColumn -Property Carbs -Title Carbs -Filter -FilterType Range\n    New-UDTableColumn -Property Protein -Title Protein -Filter -FilterType Range\n)\n\nNew-UDTable -Id 'customColumnsTable' -Data $TableData -Columns $Columns -ShowFilter\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Skeleton Variants in PowerShell Universal Apps\nDESCRIPTION: Demonstrates the three main variants of skeleton components: default, circle, and rectangle. Shows how to customize the dimensions of skeleton components using width and height parameters.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/feedback/skeleton.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDSkeleton\nNew-UDSkeleton -Variant circle -Width 40 -Height 40\nNew-UDSkeleton -Variant rect -Width 210 -Height 118\n```\n\n----------------------------------------\n\nTITLE: Creating PowerShell Universal Dashboard Form with Cancel Button\nDESCRIPTION: Demonstrates creating a form with a textbox input and cancel functionality that shows toast messages on submit or cancel\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDForm.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTextbox -Id 'form4Textbox' -Label 'Name'\n} -OnSubmit {\n    Show-UDToast -Message ($EventData.form4Textbox)\n} -OnCancel {\n    Show-UDToast -Message 'Form was cancelled'\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Files from Published Folders using HTTP\nDESCRIPTION: Example of a URL pattern to download files from a published folder. The URL is constructed using the base URL of the server and the request path configured for the published folder.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/published-folders.md#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nhttp://localhost:5000/src/test.txt\n```\n\n----------------------------------------\n\nTITLE: Protecting Dashboard Section with Role-Based Access in PowerShell\nDESCRIPTION: This example demonstrates how to use the Protect-UDSection cmdlet to hide a section of a dashboard from users who are not administrators. It creates a typography element that is only visible to users with the 'Administrator' role.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Protect-UDSection.txt#2025-04-16_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nProtect-UDSection -Content {\n    New-UDTypography 'Admins Only'\n} -Role @(\"Administrator\")\n```\n\n----------------------------------------\n\nTITLE: Checkbox Value Retrieval\nDESCRIPTION: Shows how to retrieve the value of a checkbox using Get-UDElement and display it in a toast message.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/checkbox.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDCheckbox -Id 'MyCheckbox' \n\nNew-UDButton -Text 'Get Value' -OnClick {\n    Show-UDToast -Message (Get-UDElement -Id 'MyCheckbox').checked\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Editable DataGrid\nDESCRIPTION: Shows how to implement editable columns in a DataGrid with event handling for updates. Uses cached data structure and demonstrates how to handle edit events.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/data-grid.md#2025-04-16_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\n$Cache:Data = @(\n    @{ Name = 'Adam'; number = Get-Random }\n    @{ Name = 'Tom'; number = Get-Random }\n    @{ Name = 'Sarah'; number = Get-Random }\n)\n\nNew-UDDataGrid -LoadRows {\n    $Cache:Data| Out-UDDataGridData -Context $EventData -TotalRows $Cache:Data.Length\n} -Columns @(\n    New-UDDataGridColumn -Field name -Render {\n        New-UDButton -Text $EventData.number\n    }\n    New-UDDataGridColumn -Field number -Editable\n) -AutoHeight $true -OnEdit {\n    $Cache:Data | Where-Object { $_.Name -eq $EventData.NewRow.Name } | ForEach-Object {\n        $_.Number = $EventData.NewRow.Number\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Link with a Variant in PowerShell\nDESCRIPTION: This example demonstrates how to create a link with a specific variant using the -Variant parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDLink.txt#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDLink -Url \"https://www.google.com\" -Text \"Google\" -Variant \"h1\" -Id 'link5'\n```\n\n----------------------------------------\n\nTITLE: Validating a Form with a Button in PowerShell Universal Dashboard\nDESCRIPTION: Creates a button that triggers form validation when clicked. This example demonstrates how to use the Test-UDForm cmdlet to validate a form with the ID 'myForm'.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Test-UDForm.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Text 'Validate' -OnClick {\n    Test-UDForm -Id 'myForm'\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OnDelete Event for Chip\nDESCRIPTION: Shows how to implement deletion functionality for a chip. When the chip is clicked, it displays a goodbye message using the Show-UDToast cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/chip.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDChip -Label 'OnDelete' -OnClick {\n    Show-UDToast -Message 'Goodbye!'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Static Autocomplete in PowerShell\nDESCRIPTION: Creates a basic autocomplete component with a static list of options using New-UDAutocomplete cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/automcomplete.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDAutocomplete -Options @('Test', 'Test2', 'Test3', 'Test4')\n```\n\n----------------------------------------\n\nTITLE: Creating an HTML Editor in PowerShell\nDESCRIPTION: This example shows how to create an Editor.JS editor that uses HTML format instead of the default JSON format.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDEditor.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDEditor -Id 'editor2' -Format 'html'\n```\n\n----------------------------------------\n\nTITLE: Positioned Snackbar Example in PowerShell\nDESCRIPTION: Shows how to create a snackbar positioned in the bottom right corner of the screen using the AnchorVertical and AnchorHorizontal parameters.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Show-UDSnackbar.txt#2025-04-16_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDButton -Text 'Say Hello' -OnClick {\n   Show-UDSnackbar -Message 'Hello, World' -AnchorVertical 'bottom' -AnchorHorizontal 'right'\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Textbox in PowerShell\nDESCRIPTION: Creates a password input field that masks user input for security purposes.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/textbox.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTextbox -Label 'Password' -Type password\n```\n\n----------------------------------------\n\nTITLE: Setting API Environment in PowerShell Universal\nDESCRIPTION: Demonstrates how to set the PowerShell environment for the Universal API process using the Set-PSUSetting cmdlet. This command specifies PowerShell 7.1 as the API environment.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/about.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PSUSetting -ApiEnvironment '7.1'\n```\n\n----------------------------------------\n\nTITLE: Creating Vertical Tabs in PowerShell with Universal Apps\nDESCRIPTION: This snippet shows how to create vertical tabs by adding the -Orientation parameter with a value of 'vertical'. The tabs are displayed on the left side of the content instead of along the top.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/navigation/tabs.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTabs -Tabs {\n    New-UDTab -Text 'Item One' -Content { New-UDTypography -Text 'Item One' -Variant 'h2' }\n    New-UDTab -Text 'Item Two' -Content { New-UDTypography -Text 'Item Two' -Variant 'h2' }\n    New-UDTab -Text 'Item Three' -Content { New-UDTypography -Text 'Item Three' -Variant 'h2' }\n} -Orientation vertical\n```\n\n----------------------------------------\n\nTITLE: Accessing Cached Data in PowerShell Universal API\nDESCRIPTION: This snippet demonstrates how to create an API endpoint that retrieves the cached process data using Get-PSUCache. This allows the cached data to be accessed from outside the app context.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/scheduled-endpoints.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUEndpoint -Url '/process' -Method Get -Endpoint {\n    Get-PSUCache -Name 'Processes'\n}\n```\n\n----------------------------------------\n\nTITLE: DataGrid with Row Selection\nDESCRIPTION: Creates a data grid with checkbox selection functionality. Demonstrates row selection features and visibility options.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDDataGrid.txt#2025-04-16_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDataGrid -LoadRows {\n    $Data = @(\n        @{ Id = 1; Name = 'Adam'; number = Get-Random }\n        @{ Id = 2; Name = 'Tom'; number = Get-Random }\n        @{ Id = 3; Name = 'Sarah'; number = Get-Random }\n    )\n    @{\n        rows     = $Data \n        rowCount = $Data.Length\n    }\n} -Columns @(\n    New-UDDataGridColumn -Field 'Name' -HeaderName 'A Name' -Flex 1 -HeaderAlign 'center' -Align 'center' -DisableColumnMenu\n    New-UDDataGridColumn -Field 'Number' -HeaderName 'A Number' -Flex 1 -HeaderAlign 'right' -Align 'right' -DisableColumnMenu\n) -Id 'dataGrid7' -CheckboxSelection -CheckboxSelectionVisibleOnly -DisableRowSelectionOnClick\n```\n\n----------------------------------------\n\nTITLE: Creating a Chart with Patterns using Nivo Charts in PowerShell\nDESCRIPTION: This snippet shows how to create a chart with custom patterns using Nivo Charts in Universal Apps. It demonstrates the use of patterns and fills for data visualization.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-visualization/charts.md#2025-04-16_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\n$Data = @(\n    @{\n        country = 'USA'\n        burgers = (Get-Random -Minimum 10 -Maximum 100)\n        fries = (Get-Random -Minimum 10 -Maximum 100)\n        sandwich = (Get-Random -Minimum 10 -Maximum 100)\n    }\n    @{\n        country = 'Germany'\n        burgers = (Get-Random -Minimum 10 -Maximum 100)\n        fries = (Get-Random -Minimum 10 -Maximum 100)\n        sandwich = (Get-Random -Minimum 10 -Maximum 100)\n    }\n    @{\n        country = 'Japan'\n        burgers = (Get-Random -Minimum 10 -Maximum 100)\n        fries = (Get-Random -Minimum 10 -Maximum 100)\n        sandwich = (Get-Random -Minimum 10 -Maximum 100)\n    }\n)\n\n$Pattern = New-UDNivoPattern -Dots -Id 'dots' -Background \"inherit\" -Color \"#38bcb2\" -Size 4 -Padding 1 -Stagger\n$Fill = New-UDNivoFill -ElementId \"fries\" -PatternId 'dots'\n\nNew-UDNivoChart -Definitions $Pattern -Fill $Fill -Bar -Data $Data -Height 400 -Width 900 -Keys @('burgers', 'fries', 'sandwich')  -IndexBy 'country'\n```\n\n----------------------------------------\n\nTITLE: Using Session Scope Variable in PowerShell Universal Column\nDESCRIPTION: Demonstrates how to use a Session scope variable within a UDColumn endpoint. This example conditionally displays a chart based on the Session variable.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/custom-variable-scopes.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDColumn -Endpoint {\n    if ($Session:ShowChart) {\n         New-UDChart ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic PowerShell Universal Form\nDESCRIPTION: Creates a basic form with a text input field and submit handler that displays the input value in a toast notification.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDForm.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDForm -Id 'form1' -Content {\n    New-UDTextbox -Id 'form1Textbox' -Label 'Name'\n} -OnSubmit {\n    Show-UDToast -Message ($EventData.form1Textbox)\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling 24-Hour Time Format in PowerShell\nDESCRIPTION: This snippet demonstrates how to enable 24-hour time format for the time picker by using the -DisableAmPm parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/time-picker.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTimePicker -DisableAmPm\n```\n\n----------------------------------------\n\nTITLE: Context-Aware Dynamic Function for Table Column\nDESCRIPTION: Illustrates how to implement a PowerShell function that receives context from its parent component. This function renders different Alert components based on the Status property of each row in the table.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/portal/portal-widgets/dynamic.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nfunction RenderStatusColumn {\n    param($Context)\n    \n    if ($Context.Status -eq 'Running')\n    {\n        \"<Alert Message='Started' />\"\n    }\n    else \n    {\n        \"<Alert Message='$($Context.Status)' />\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Local Image in PowerShell with New-UDImage\nDESCRIPTION: This example shows how to display a local image using New-UDImage by first selecting a PNG file from the current script directory and then passing its full path to the function.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDImage.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$Image = Get-ChildItem \"$PSScriptRoot\\*.png\" | Select-Object -First 1\nNew-UDImage -Path ($Image.FullName)\n```\n\n----------------------------------------\n\nTITLE: Writing Error Log to PowerShell Universal\nDESCRIPTION: Example showing how to write an error log message to the PowerShell Universal logging system. This command uses the -Level parameter to specify the log severity as 'Error'.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Write-PSULog.txt#2025-04-16_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nWrite-PSULog -Message \"Hello\" -Level 'Error'\n```\n\n----------------------------------------\n\nTITLE: Adding Search Functionality to Tables in PowerShell for Universal Apps\nDESCRIPTION: This code snippet demonstrates how to enable search functionality in tables using PowerShell for Universal Apps. It uses the -ShowSearch parameter and -IncludeInSearch for custom columns.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/table.md#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n$TableData = @(\n    @{Dessert = 'Frozen yoghurt'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Ice cream sandwich'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Eclair'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Cupcake'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Gingerbread'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n)\n\nNew-UDTable -Data $TableData -ShowSearch\n```\n\n----------------------------------------\n\nTITLE: Creating Debug Element in PowerShell Universal Dashboard\nDESCRIPTION: Example showing how to create a div element that invokes the Debug-PSUDashboard cmdlet for debugging PowerShell Universal Dashboard scripts. This integrates with the VS Code PowerShell Universal extension for debugging capabilities.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Debug-PSUDashboard.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDElement -Tag div -Endpoint {\n    Debug-PSUDashboard\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Environment with Persistent Runspace\nDESCRIPTION: Creates a PowerShell environment using persistent runspaces for API execution without resetting between executions.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUEnvironment.txt#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUEnvironment -Name '7.1' -Path 'pwsh.exe' -ArgumentList \"-ExecutionPolicy Bypass\" -PersistentRunspace\n```\n\n----------------------------------------\n\nTITLE: Creating a Bar Chart with Nivo Charts in PowerShell\nDESCRIPTION: This snippet demonstrates how to create a bar chart using Nivo Charts in Universal Apps. It displays random data with custom dimensions.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-visualization/charts.md#2025-04-16_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\n$Data = 1..10 | ForEach-Object { \n    $item = Get-Random -Max 1000 \n    [PSCustomObject]@{\n        Name = \"Test$item\"\n        Value = $item\n    }\n}\nNew-UDNivoChart -Id 'autoRefreshingNivoBar' -Bar -Keys \"value\" -IndexBy 'name' -Data $Data -Height 500 -Width 1000\n```\n\n----------------------------------------\n\nTITLE: New-UDDataGrid Cmdlet Syntax in PowerShell\nDESCRIPTION: Syntax for the New-UDDataGrid cmdlet, showing all available parameters for creating a data grid. This cmdlet is used to display data in a table-style grid with support for sorting, paging, and filtering of large data sets.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDDataGrid.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDataGrid [[-Id] <String>] [[-Columns] <Hashtable[]>] [[-LoadRows] <Endpoint>] [[-Height] <String>] [[-AutoHeight] <Boolean>] [-AutoPageSize] [-CheckboxSelection] [-CheckboxSelectionVisibleOnly] [[-ColumnBuffer] <Int32>] [[-ColumnThreshold] <Int32>] [[-Density] <String>] [[-PageSize] <Int32>] [[-RowsPerPageOptions] <Int32[]>] [-ShowPagination] [[-OnSelectionChange] <Endpoint>] [[-Language] <String>] [[-LoadDetailContent] <Endpoint>] [[-DetailHeight] <String>] [[-OnEdit] <Endpoint>] [[-OnExport] <Endpoint>] [-ShowQuickFilter] [[-DefaultSortColumn] <String>] [[-DefaultSortDirection] <String>] [-DisableRowSelectionOnClick] [-HideExport] [[-RowHeight] <Int32>] [[-IdentityColumn] <String>] [-StripedRows] [-HeaderFilters] [-AutoSizeColumns] [[-ExportOptions] <String[]>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Setting PowerShell Universal Script Properties - Main Syntax\nDESCRIPTION: Primary syntax pattern for setting script properties using an ID parameter. Supports configuring script content, metadata, execution settings, and authentication options.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Set-PSUScript.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PSUScript [-Id] <Int64> [-AppToken <String>] [-ComputerName <String>] [-Content <String>] [-Description <String>] [-DisableManualInvocation <Boolean>] [-Environment <String>] [-Integrated] [-ManualTime <Double>] [-MaxHistory <Int32>] [-Name <String>] [-Notes <String>] [-ScriptErrorAction {SilentlyContinue | Stop | Continue | Inquire | Ignore | Suspend | Break}] [-Status {Draft | Pending Review | Pending | Review | Published | Disabled}] [-Tag <Tag[]>] [-TimeOut <Double>] [-UseDefaultCredentials] [-Credential <PSCredential>] [-TrustCertificate]\n```\n\n----------------------------------------\n\nTITLE: Configuring PowerShell Universal to Trust HTTPS Certificate\nDESCRIPTION: Illustrates how to set PowerShell Universal to trust the web server's HTTPS certificate at the server level in the JSON configuration file.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/module.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Api\": {\n       \"TrustCertificate\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Programmatic Modal Control\nDESCRIPTION: Demonstrates programmatic control of modals by showing a modal and automatically hiding it after 5 seconds.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/feedback/modal.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Text 'Basic' -OnClick {\n    Show-UDModal -Content {\n        New-UDTypography -Text \"Hello\"\n    }\n    Start-Sleep 5\n    Hide-UDModal\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Clickable Card with Event Handler in PowerShell\nDESCRIPTION: This example demonstrates how to create a card with an OnClick event handler using the New-UDCard cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDCard.txt#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDCard -Text 'This is my card' -OnClick {\n    Show-UDToast -Message 'You clicked the card'\n} -Id 'card5'\n```\n\n----------------------------------------\n\nTITLE: Clearing Cache Items\nDESCRIPTION: Shows how to remove specific items or clear the entire cache using Remove-PSUCache and Clear-PSUCache cmdlets.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/cache.md#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\n# Remove a specific item\nRemove-PSUCache -Key 'Key123'\n\n# Clear the entire cache\nClear-PSUCache\n```\n\n----------------------------------------\n\nTITLE: Creating a Static App with JavaScript Integration in PowerShell Universal\nDESCRIPTION: This example shows how to incorporate JavaScript functionality into a static app using the -OnChange parameter of New-UDRating. It demonstrates the use of New-UDEndpoint with JavaScript to create an alert when the rating changes.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/static-apps.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPublish-PSUStaticApp -Definition {\n   New-UDApp -Content {\n      New-UDRating -Max 10 -OnChange (New-UDEndpoint -JavaScript 'alert(data)') \n   } \n} -DestinationPath .\\output -Force \n```\n\n----------------------------------------\n\nTITLE: Configuring web.config for Nested PowerShell Universal Instance\nDESCRIPTION: XML configuration for the web.config file in a nested PowerShell Universal setup. It specifies the ASP.NET Core module handler, process path, custom appsettings location, and OutOfProcess hosting model.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/hosting/hosting-iis.md#2025-04-16_snippet_3\n\nLANGUAGE: markup\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <system.webServer>\n    <handlers>\n      <add name=\"aspNetCore\" path=\"*\" verb=\"*\" modules=\"AspNetCoreModuleV2\" resourceType=\"Unspecified\" />\n    </handlers>\n    <aspNetCore processPath=\".\\Universal.Server.exe\" arguments=\"--appsettings C:\\src\\psu\\appsettings.psu1.json\" forwardWindowsAuthToken=\"false\" stdoutLogEnabled=\"true\" stdoutLogFile=\".\\logs\\log\" hostingModel=\"OutOfProcess\" />\n  </system.webServer>\n</configuration>\n<!--ProjectGuid: 588ACF2E-9AE5-4DF1-BC42-BCE16A4C4EDE-->\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for PowerShell Universal on Mac/Linux\nDESCRIPTION: Docker Compose YAML file for running PowerShell Universal container on Mac/Linux with volume mounting and timezone configuration.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/docker.md#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"5.2.1\"\nservices:\n  PSU:\n    container_name: PSU\n    image: ironmansoftware/universal:latest\n    ports:\n      - 5000:5000\n    restart: unless-stopped\n    environment:\n      - TZ=Europe/London\n    volumes:\n      - /docker/volumes/PSU:/root\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Bar Chart in PowerShell\nDESCRIPTION: Demonstrates creating a simple bar chart using randomly generated data with name-value pairs.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDNivoChart.txt#2025-04-16_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\n$Data = 1..10 | ForEach-Object { \n    $item = Get-Random -Max 1000 \n    [PSCustomObject]@{\n        Name  = \"Test$item\"\n        Value = $item\n    }\n}\nNew-UDNivoChart -Bar -Keys \"value\" -IndexBy 'name' -Data $Data -Height 500 -Width 1000\n```\n\n----------------------------------------\n\nTITLE: Applying Built-in Theme in PowerShell Universal App\nDESCRIPTION: Demonstrates how to use a built-in theme named 'MaterialDesign' in a PowerShell Universal app. The theme is applied to the entire app and includes a button with a toast message.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/themes/README.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$Theme = Get-UDTheme -Name 'MaterialDesign'\nNew-UDApp -Theme $Theme -Title 'Hello' -Content {\n    New-UDButton -Text \"Test \" -OnClick {\n        Show-UDToast -Message 'HEllo'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Select Autocomplete in PowerShell\nDESCRIPTION: Creates an autocomplete component that allows multiple selections from predefined options.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDAutocomplete.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDAutocomplete -Options @(\"Test\", \"No\", \"Yes\") -Multiple  -Id 'autocomplete2' -FullWidth\n```\n\n----------------------------------------\n\nTITLE: Creating User-Modifiable Grid Layouts in PowerShell\nDESCRIPTION: Creates a grid layout that allows users to dynamically modify the layout by dragging and resizing components. The -Persist parameter enables the layout changes to be stored locally in the user's browser, persisting between visits to the page.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/layout/grid-layout.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDGridLayout -Content { 1..10 | ForEach-Object { New-UDPaper -Id \"Paper$\" -Content { New-UDTypography -Text $ } -Elevation 5 } } -Draggable -Resizable -Persist\n```\n\n----------------------------------------\n\nTITLE: Setting Clipboard Data with PowerShell in Universal Apps\nDESCRIPTION: Demonstrates how to set clipboard data using Set-UDClipboard within a button click event.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/interaction.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Text 'Clipboard' -OnClick {\n    Set-UDClipboard -Data 'Hello, there!'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Pulsing Icon in Universal Dashboard\nDESCRIPTION: Creates a pulsing FontAwesome spinner icon with 5x size and specified ID using New-UDIcon cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDIcon.txt#2025-04-16_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDIcon -Icon 'Spinner' -Pulse -Size '5x' -Id 'icon11'\n```\n\n----------------------------------------\n\nTITLE: Persisted Grid Layout\nDESCRIPTION: Creates a grid layout that persists its configuration in the browser session, allowing the layout to be restored after page refresh.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDGridLayout.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDGridLayout -Content {\n    New-UDCard -Text \"Card 5\" -Id \"card5\"\n    New-UDCard -Text \"Card 6\" -Id \"card6\"\n} -Id 'gridLayout3' -Design -Draggable -Resizable -Persist -Layout '{\"lg\":[{\"w\":2,\"h\":3,\"x\":0,\"y\":0,\"i\":\"grid-element-card5\",\"moved\":false,\"static\":false},{\"w\":2,\"h\":3,\"x\":2,\"y\":0,\"i\":\"grid-element-card6\",\"moved\":false,\"static\":false}]}'\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Card Component in PowerShell\nDESCRIPTION: Demonstrates how to create a basic card component with a title and content using the New-UDCard cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/surfaces/card.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDCard -Title 'Simple Card' -Content {\n    \"This is some content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Select Component with Option Groups in PowerShell\nDESCRIPTION: This example shows how to create a select component with option groups using the New-UDSelect function and New-UDSelectGroup.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDSelect.txt#2025-04-16_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDSelect -Label 'Select' -Id 'select7' -Option {\n    New-UDSelectGroup -Name \"Category 1\" -Option {\n        New-UDSelectOption -Name \"One\" -Value 1\n        New-UDSelectOption -Name \"Two\" -Value 2\n    }\n    New-UDSelectGroup -Name \"Category 2\" -Option {\n        New-UDSelectOption -Name \"Three\" -Value 3\n        New-UDSelectOption -Name \"Four\" -Value 4\n    }\n} -FullWidth\n```\n\n----------------------------------------\n\nTITLE: Creating Collapsible Table Rows in PowerShell Universal Dashboard\nDESCRIPTION: Demonstrates how to create expandable table rows with additional information.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/table.md#2025-04-16_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTable -Data (Get-Service) -OnRowExpand {\n    New-UDAlert -Text $EventData.DisplayName\n} -Columns @(\n    New-UDTableColumn -Title 'Name' -Property 'Name'\n    New-UDTableColumn -Title 'Status' -Property 'Status'\n)\n```\n\n----------------------------------------\n\nTITLE: Invoking Commands on Clients using PowerShell in PowerShell Universal\nDESCRIPTION: This snippet shows how to run commands on connected clients without defining a script on the event hub client. It uses the Invoke-PSUCommand alias to mimic native PowerShell behavior.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/event-hubs.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-PSUCommand -Hub \"MyHub\" -Command \"Start-Process\" -Parameters @{\n    FilePath = \"Notepad\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Right-Positioned Tooltip in PowerShell with Universal Dashboard\nDESCRIPTION: Creates a tooltip with right placement that displays 'Hello World' text when hovering over a button. The tooltip appears to the right of the target element.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTooltip.txt#2025-04-16_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDTooltip -TooltipContent { \n    New-UDTypography -Text \"Hello World\" \n} -Content { \n    New-UDButton -Text \"Hover over me\"\n} -Id \"tooltip3\" -Place \"right\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cache Items\nDESCRIPTION: Shows how to retrieve items from the cache using Get-PSUCache cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/cache.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PSUCache -Key \"CurrentDate\"\n```\n\n----------------------------------------\n\nTITLE: Dense List Example\nDESCRIPTION: Creates a compact dense list using the -Dense parameter\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDList.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDList -Content {\n    New-UDListItem -Label 'Inbox'\n    New-UDListItem -Label 'Drafts'\n    New-UDListItem -Label 'Trash'\n    New-UDListItem -Label 'Spam'\n} -Id 'list2' -Dense\n```\n\n----------------------------------------\n\nTITLE: Custom Formatting Radio Group Layout\nDESCRIPTION: Shows how to customize the layout of radio buttons using columns and rows to arrange them horizontally instead of vertically.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/radio.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDRadioGroup -Label \"Day\" -Content {\n    New-UDRow -Columns {\n        New-UDColumn -LargeSize 1 -Content {\n            New-UDRadio -Label Monday -Value 'monday'        \n        }\n        New-UDColumn -LargeSize 1 -Content {\n            New-UDRadio -Label Sunday -Value 'sunday'\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Element Content with Set-UDElement in PowerShell\nDESCRIPTION: Demonstrates how to dynamically change the content of an element using Set-UDElement. This example creates a div with text that changes from 'Hello World' to 'Goodbye World' when a button is clicked.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Set-UDElement.txt#2025-04-16_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDElement -Tag 'div' -Id 'setElement3' -Content {\n     New-UDTypography -Text 'Hello World'\n}\nNew-UDButton -Text 'Click Me' -OnClick {\n     Set-UDElement -Id 'setElement3' -Content {\n         New-UDTypography -Text 'Goodbye World'\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Write-PSUError to Handle Exceptions in PowerShell Universal Jobs\nDESCRIPTION: This example demonstrates how to catch an exception and write it to the PSU error log without failing the job. The error will be displayed in the PowerShell Universal error log for troubleshooting while allowing the job to continue execution.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Write-PSUError.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ntry {\n    throw \"Error\"\n} catch {\n    Write-PSUError $_\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Select Values with Get-UDElement\nDESCRIPTION: Demonstrates how to retrieve a select component's value from another component using Get-UDElement, with fallback to the default value if no selection has been made.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/select.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n  New-UDSelect -Option {\n      New-UDSelectOption -Name 'One' -Value 1\n      New-UDSelectOption -Name 'Two' -Value 2\n      New-UDSelectOption -Name 'Three' -Value 3\n  } -Id 'select' -DefaultValue 2\n\n  New-UDButton  -Text 'OnBoard' -OnClick {\n    $Element = Get-UDElement -Id 'select'\n    if ($Element.Value)\n    {\n      Show-UDToast -Message $Element.Value\n    }\n    else \n    {\n      Show-UDToast -Message $Element.DefaultValue\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Nivo Bar Chart\nDESCRIPTION: Basic implementation of a Nivo bar chart with random data generation. Demonstrates core bar chart functionality with simple value and name mapping.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-visualization/charts.md#2025-04-16_snippet_14\n\nLANGUAGE: powershell\nCODE:\n```\nNew-Example -Title 'Bar' -Description '' -Example {\n    $Data = 1..10 | ForEach-Object { \n        $item = Get-Random -Max 1000 \n        [PSCustomObject]@{\n            Name = \"Test$item\"\n            Value = $item\n        }\n    }\n    New-UDNivoChart -Bar -Keys \"Value\" -IndexBy 'name' -Data $Data -Height 500 -Width 1000\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Dataset Line Chart with PowerShell and ChartJS\nDESCRIPTION: Creates a line chart with multiple datasets showing both available and used RAM. Includes custom colors and labels for each dataset.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDChartJS.txt#2025-04-16_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\n$Dataset1 = New-UDChartJSDataset -DataProperty AvailableRam -Label 'Available RAM' -BackgroundColor '#126f8c' -BorderWidth 1\n$Dataset2 = New-UDChartJSDataset -DataProperty UsedRAM -Label 'Used RAM' -BackgroundColor '#8da322' -BorderWidth 1\nNew-UDElement -Tag 'div' -Attributes @{ style = @{ height = '10vh'; width = \"10vw\"; } } -Content {\n   New-UDChartJS -Data $Data -Dataset @($Dataset1, $Dataset2) -LabelProperty Server -Type 'line' -Id 'chart9'\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Configuration\nDESCRIPTION: Default logging configuration including file path, retention policy, and log levels for different components.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/settings.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n\"Logging\": {\n  \"Path\": \"%PROGRAMDATA%/PowerShellUniversal/log.txt\",\n  \"RetainedFileCountLimit\": 31,\n  \"LogLevel\": {\n    \"Default\": \"Information\",\n    \"Microsoft\": \"Warning\",\n    \"Microsoft.Hosting.Lifetime\": \"Information\"\n  }\n},\n```\n\n----------------------------------------\n\nTITLE: Using Sync-PSUComponent to Reload a Dashboard Component in PowerShell Universal\nDESCRIPTION: Example showing how to use the Sync-PSUComponent cmdlet to reload a component with the ID 'myDynamic' in a dashboard. This cmdlet can be used in APIs and scripts to force a component to refresh.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Sync-PSUComponent.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSync-UDComponent -Id 'myDynamic'\n```\n\n----------------------------------------\n\nTITLE: Downloading Linux PowerShell Universal Files\nDESCRIPTION: Script to download the latest Linux version of PowerShell Universal.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/hosting/azure.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n$LatestVersion = Invoke-RestMethod https://imsreleases.blob.core.windows.net/universal/production/v3-version.txt\nInvoke-WebRequest \"https://imsreleases.blob.core.windows.net/universal/production/$LatestVersion/Universal.linux-x64.$LatestVersion.zip\" -OutFile .\\Universal.zip\n```\n\n----------------------------------------\n\nTITLE: Creating an API Endpoint with Form Data Parameters\nDESCRIPTION: Defines an endpoint that processes form data as parameters, with validation for required fields through the param block.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/endpoints.md#2025-04-16_snippet_15\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUEndpoint -Url '/user' -Method Post -Endpoint {\n    param([Parameter(Mandatory)]$userName, $FirstName, $LastName)\n     \n    New-User $UserName -FirstName $FirstName -LastName $LastName\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum and Maximum Date Constraints\nDESCRIPTION: Creates a date picker with minimum and maximum date constraints, limiting selections to a 30-day range centered around the current date.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/date-picker.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDatePicker -Minimum ((Get-Date).AddDays(-15)) -Maximum ((Get-Date).AddDays(15))\n```\n\n----------------------------------------\n\nTITLE: Registering a Package Source in PowerShell Universal\nDESCRIPTION: Registers a custom NuGet package source using PackageManagement v3 module, which will automatically be recognized by PowerShell Universal.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/modules.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRegister-PSResourceRepository -Name MyNuGet -Uri https://www.nuget.org/api/v2\n```\n\n----------------------------------------\n\nTITLE: Resetting Admin Account Password in PowerShell Universal\nDESCRIPTION: Command to reset the local admin account password to 'admin' in case of a lockout. Requires specifying the database connection string and optionally other database configuration parameters.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/psucli.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npsu admin reset --connection-string 'Data Source=C:\\ProgramData\\UniversalAutomation\\database.db'\n```\n\n----------------------------------------\n\nTITLE: Creating Minimal PowerShell 7 Environment in PowerShell Universal\nDESCRIPTION: This code creates a minimal PowerShell 7 environment that doesn't load PowerShell Universal hosting libraries.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/environments.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUEnvironment -Name 'Minimal' -Path 'pwsh' -Arguments \"-File {scriptPath}\" -Variables @('*') -Minimal\n```\n\n----------------------------------------\n\nTITLE: Creating a TransferList with Custom Titles in PowerShell Universal Dashboard\nDESCRIPTION: Creates a transfer list with custom titles and subtitles for both the left and right panels. This example demonstrates how to use the -LeftTitle, -RightTitle, -LeftSubTitle, and -RightSubTitle parameters to customize the header text.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTransferList.txt#2025-04-16_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTransferList -Item {\n    New-UDTransferListItem -Name 'test1' -Value 1\n    New-UDTransferListItem -Name 'test2' -Value 2\n    New-UDTransferListItem -Name 'test3' -Value 3\n    New-UDTransferListItem -Name 'test4' -Value 4\n    New-UDTransferListItem -Name 'test5' -Value 5\n} -Id 'transferlist9' -LeftTitle 'Left Title' -RightTitle 'Right Title' -LeftSubTitle 'Left Subtitle' -RightSubTitle 'Right Subtitle'\n```\n\n----------------------------------------\n\nTITLE: Using Get-PSUSetting Cmdlet in PowerShell\nDESCRIPTION: Demonstrates how to use the Get-PSUSetting cmdlet to retrieve all settings for PowerShell Universal. This cmdlet returns settings for PSU and can be used with various parameters to customize the connection and execution behavior.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUSetting.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-UASetting\n```\n\n----------------------------------------\n\nTITLE: Adding Icons to Tabs in PowerShell with Universal Apps\nDESCRIPTION: This snippet demonstrates how to add icons to tabs using the New-UDIcon cmdlet. Each tab includes a different icon that appears alongside the tab text.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/navigation/tabs.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTabs -Tabs {\n    New-UDTab -Text 'Item One' -Content { New-UDTypography -Text 'Item One' -Variant 'h2' } -Icon (New-UDIcon -Icon Users)\n    New-UDTab -Text 'Item Two' -Content { New-UDTypography -Text 'Item Two' -Variant 'h2' } -Icon (New-UDIcon -Icon Desktop)\n    New-UDTab -Text 'Item Three' -Content { New-UDTypography -Text 'Item Three' -Variant 'h2' } -Icon (New-UDIcon -Icon Exclamation)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Cache Storage Example\nDESCRIPTION: Demonstrates how to store a basic value in the server-side cache without expiration.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Set-PSUCache.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PSUCache -Key 'Data' -Value 'MyValue'\n```\n\n----------------------------------------\n\nTITLE: Implementing Onepirate Theme in PowerShell Universal App\nDESCRIPTION: Defines a comprehensive 'Onepirate' theme for PowerShell Universal apps, including custom palette, typography, and component overrides. This theme is based on the Material UI Onepirate theme.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/themes/README.md#2025-04-16_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\n$Theme = @{\n  palette = @{\n    primary = @{\n      light = '#69696a'\n      main = '#28282a'\n      dark = '#1e1e1f'\n    }\n    secondary = @{\n      light = '#fff5f8'\n      main = '#ff3366'\n      dark = '#e62958'\n    }\n    warning = @{\n      main = '#ffc071'\n      dark = '#ffb25e'\n    }\n    error = @{\n        xLight = '#ffebee'\n        main = '#f44336'\n        dark = '#d32f2f'\n    }\n    success = @{\n        xLight = '#e8f5e9'\n        main = '#4caf50'\n        dark = '#388e3c'\n    }\n  }\n  typography = @{\n    fontFamily = \"'Work Sans', sans-serif\"\n    fontSize = 14\n    fontWeightLight = 300\n    fontWeightRegular = 400\n    fontWeightMedium = 700\n    fontFamilySecondary = \"'Roboto Condensed', sans-serif\"\n    h1 = @{\n        letterSpacing = 0\n        fontSize = 60\n    }\n    h2 = @{\n        fontSize = 48\n    }\n    h3 = @{\n        fontSize = 42\n    }\n    h4 = @{\n        fontSize = 36\n    }\n    h5 = @{\n        fontSize = 20\n        fontWeight = 100\n    }\n    h6 = @{\n        fontSize = 18\n    }\n    subtitle1 = @{\n        fontSize = 18\n    }\n    body = @{\n        fontSize = 16\n    }\n    body2 = @{\n        fontSize = 14\n    }\n  }\n  overrides = @{\n    MuiButton = @{\n        root = @{\n            borderRadius = 0\n            fontWeight = 300\n            fontFamily = \"'Roboto Condensed', sans-serif\"\n            padding = 10\n            fontSize = 14\n            boxShadow = 'none'\n\n        }\n    }\n    MuiInput = @{\n        root = @{\n            padding = 0\n            backgroundColor = 'white'\n            'label + &' = @{\n                marginTop = 3\n            }\n        }\n        input = @{\n            fontSize = 16\n            padding = 16\n            border = '1px solid #e9ddd0'\n            '&:focus' = @{\n                borderColor = '#ff3366'\n            }\n        }\n        'underline:after' = @{\n            borderBottom = 'none'\n        }\n    }\n    MuiInputLabel = @{\n        root = @{\n            fontSize = 18\n        }\n    }\n    MuiFormControl = @{\n        root = @{\n            border = 'none'\n        }\n    }\n    MuiCard = @{\n        root = @{\n            boxShadow = 'none'\n        }\n    }\n    MuiPaper = @{\n        root = @{\n             backgroundColor = '#fff5f8'\n        }\n        rounded = @{\n            borderRadius = 0\n        }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Determinate Progress Bar in PowerShell\nDESCRIPTION: Creates a determinate progress bar with 75% completion using a specific ID.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDProgress.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDProgress -PercentComplete 75 -Id 'progress1'\n```\n\n----------------------------------------\n\nTITLE: Upload Component with File Type Restriction in PowerShell\nDESCRIPTION: Creates an upload component that only accepts .jpg files. Uses the -Accept parameter to specify the allowed file type extension.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDUpload.txt#2025-04-16_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDUpload -Text \"Upload\" -OnUpload {\n    Show-UDToast $Body\n} -Id 'upload6' -Accept \".jpg\"\n```\n\n----------------------------------------\n\nTITLE: Radio Group with OnChange Event Handler\nDESCRIPTION: Creates a radio group that shows a toast message when selection changes using the OnChange event.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDRadioGroup.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDRadioGroup -Label 'group' -Id 'radio2' -Children {\n    New-UDRadio -Value 'Adam' -Label 'Adam'  -Id 'adam'\n    New-UDRadio -Value 'Sarah' -Label 'Sarah' -Id 'sarah'\n    New-UDRadio -Value 'Austin' -Label 'Austin' -Id 'austin'\n} -OnChange {\n    Show-UDToast -Message \"Radio selected: $EventData\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Textbox with OnEnter Event in PowerShell\nDESCRIPTION: Creates a textbox with an OnEnter event that triggers a toast message.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTextbox.txt#2025-04-16_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTextbox -Id 'textbox10' -OnEnter {\n    Show-UDToast -Message \"You pressed enter!\"\n} -Label 'Name' -Placeholder 'Enter your name' -Value 'John Doe'\n```\n\n----------------------------------------\n\nTITLE: Creating a Rating Component with OnChange Event in PowerShell\nDESCRIPTION: This example shows how to create a rating component with an OnChange event that displays a toast message when the rating is changed.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDRating.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDRating -Value 3 -OnChange {\n    Show-UDToast -Message \"Rating changed to $EventData\"\n} -Id 'rating2'\n```\n\n----------------------------------------\n\nTITLE: Defining New-UDPage Function Syntax in PowerShell\nDESCRIPTION: Specifies the different syntax options for calling the New-UDPage function, including various parameters for customizing the page's content, appearance, and behavior.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDPage.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDPage [[-DefaultHomePage]] [[-Title] <String>] [-Blank] -Content <Endpoint> [-Description <String>] [-HeaderBackgroundColor <DashboardColor>] [-HeaderColor <DashboardColor>] [-HeaderPosition {absolute | fixed | relative | static | sticky}] [-HideNavigation] [-HideUserName] [-Icon <Object>] [-Id <String>] [-Name <String>] [-OnLoading <ScriptBlock>] [-Role <String[]>] [-Url <String>] [-Static] [-Generated] [-Layout <DesignerPageLayout>] [-BackgroundRepeat] [<CommonParameters>]\n```\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDPage [[-DefaultHomePage]] [[-Title] <String>] -Content <Endpoint> [-Description <String>] [-HeaderBackgroundColor <DashboardColor>] [-HeaderColor <DashboardColor>] [-HeaderContent <Endpoint>] [-HeaderPosition {absolute | fixed | relative | static | sticky}] [-HideNavigation] [-HideUserName] [-Icon <Object>] [-Id <String>] [-LoadTitle <Endpoint>] [-Logo <String>] [-Name <String>] [-Navigation <Hashtable[]>] [-NavigationLayout {Temporary | Permanent}] [-OnLoading <ScriptBlock>] [-Role <String[]>] [-Url <String>] [-Static] [-Generated] [-Layout <DesignerPageLayout>] [-BackgroundImage <String>] [-BackgroundRepeat] [-LogoComponent <Hashtable>] [<CommonParameters>]\n```\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDPage [[-DefaultHomePage]] [[-Title] <String>] -Content <Endpoint> [-Description <String>] [-HeaderBackgroundColor <DashboardColor>] [-HeaderColor <DashboardColor>] [-HeaderContent <Endpoint>] [-HeaderPosition {absolute | fixed | relative | static | sticky}] [-HideNavigation] [-HideUserName] [-Icon <Object>] [-Id <String>] [-LoadNavigation <Endpoint>] [-LoadTitle <Endpoint>] [-Logo <String>] [-Name <String>] [-NavigationLayout {Temporary | Permanent}] [-OnLoading <ScriptBlock>] [-Role <String[]>] [-Url <String>] [-Static] [-Generated] [-Layout <DesignerPageLayout>] [-BackgroundImage <String>] [-BackgroundRepeat] [-LogoComponent <Hashtable>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Setting Job Feedback in PowerShell Universal\nDESCRIPTION: This example demonstrates how to retrieve a job, get its feedback, and set a response using the Set-PSUJobFeedback cmdlet. It shows the process of interacting with job feedback in PowerShell Universal.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Set-PSUJobFeedback.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$Job = Get-UAJob -Id 2\n$JobFeedback = Get-UAJobFeedback -Job $Job\nSet-UAJobFeedback -JobFeedback $JobFeedback -Response \"Hello, world!\"\n```\n\n----------------------------------------\n\nTITLE: Hiding Close Button on Toast Notifications in PowerShell Universal Dashboard\nDESCRIPTION: Shows how to remove the close button from a toast notification, requiring it to time out naturally rather than being manually dismissed.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Show-UDToast.txt#2025-04-16_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Text 'Show Toast' -OnClick {\n    Show-UDToast -Message 'Hello, World!' -HideCloseButton\n} -Id 'toast12'\n```\n\n----------------------------------------\n\nTITLE: Creating an AppBar with Drawer in PowerShell\nDESCRIPTION: Creates a new AppBar with a drawer component. This example shows how to add a drawer to the AppBar using the -Drawer parameter and the New-UDDrawer cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDAppBar.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDAppBar -Children { New-UDTypography -Text 'Hello' } -Position relative -Drawer (New-UDDrawer -Content { New-UDTypography -Text 'Drawer' })\n```\n\n----------------------------------------\n\nTITLE: Creating a Persistent Modal in PowerShell with Show-UDModal\nDESCRIPTION: This example shows how to create a persistent modal that can't be closed by clicking outside of it. It includes a footer with a close button to dismiss the modal.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Show-UDModal.txt#2025-04-16_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDButton -Text 'Persistent' -OnClick {\n    Show-UDModal -Content {\n        New-UDTypography -Text \"Hello\"\n    } -Persistent -Footer {\n        New-UDButton -Text \"Close\" -OnClick { Hide-UDModal } -Id 'button5'\n    }\n} -Id 'button4'\n```\n\n----------------------------------------\n\nTITLE: Implementing Grow Transition in Universal Apps\nDESCRIPTION: Shows implementation of grow transition that fades and grows a component into place. The transition is toggled using a switch component.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/utilities/transitions.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTransition -Id 'test' -Content {\n    New-UDCard -Text \"Hey\"\n} -In -Grow -Timeout 1000\n\nNew-UDSwitch -OnChange {\n    Set-UDElement -Id 'test' -Properties @{\n        in = $EventData -eq 'True'\n    }\n} -Checked $true\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Radio Button Group in PowerShell\nDESCRIPTION: Demonstrates how to create a basic radio button group with day-of-week options using New-UDRadioGroup and New-UDRadio cmdlets.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/radio.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDRadioGroup -Label \"Day\" -Content {\n    New-UDRadio -Label Monday -Value 'monday'\n    New-UDRadio -Label Tuesday -Value 'tuesday'\n    New-UDRadio -Label Wednesday -Value 'wednesday'\n    New-UDRadio -Label Thursday -Value 'thursday'\n    New-UDRadio -Label Friday  -Value 'friday'\n    New-UDRadio -Label Saturday -Value 'saturday'\n    New-UDRadio -Label Sunday -Value 'sunday'\n}\n```\n\n----------------------------------------\n\nTITLE: Table Pagination Configuration in PowerShell Universal Dashboard\nDESCRIPTION: Shows how to configure table pagination with custom page sizes and options.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/table.md#2025-04-16_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\n$TableData = @(\n    @{Dessert = 'Frozen yoghurt'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Ice cream sandwich'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Eclair'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Cupcake'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Gingerbread'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n) \n\nNew-UDTable -Data $TableData -Paging -PageSize 2 -PageSizeOptions @(2, 4, 6)\n```\n\n----------------------------------------\n\nTITLE: Creating Colored Icon in PowerShell\nDESCRIPTION: Shows how to create an icon with a specific color.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDIcon.txt#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDIcon -Icon 'AddressBook' -Size '5x' -Color 'red' -Id 'icon8'\n```\n\n----------------------------------------\n\nTITLE: PowerShell Module Implementation\nDESCRIPTION: PowerShell module implementation that registers assets and defines component creation function.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/custom-components/building-custom-components.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n$IndexJs = Get-ChildItem \"$PSScriptRoot\\index.*.bundle.js\"\n$AssetId = [UniversalDashboard.Services.AssetService]::Instance.RegisterAsset($IndexJs.FullName)\nfunction New-UDReactIcon {\n    param(\n        [Parameter()]\n        [string]$Id = (New-Guid).ToString(),\n        [Parameter(Mandatory)]\n        [string]$Icon\n    )\n    @{\n        assetId  = $AssetId \n        isPlugin = $true \n        type     = \"ReactIcon\"\n        id       = $Id\n        icon     = $icon\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Query String Parameters in Universal App Pages with PowerShell\nDESCRIPTION: Shows how to access query string parameters passed to a page via the $Query hashtable variable.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/pages.md#2025-04-16_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\n$Query.test\n$Query['test']\n```\n\n----------------------------------------\n\nTITLE: Syncing a Dynamic Element in PowerShell Universal Dashboard\nDESCRIPTION: This example demonstrates how to create a dynamic element with a random number and a button to refresh it using Sync-UDElement.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Sync-UDElement.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDynamic -Id 'sync1' -Content {\n    New-UDTypography (Get-Random)\n}\nNew-UDButton -Text 'Refresh' -OnClick {\n   Sync-UDElement 'sync1'\n} -Id 'syncButton1'\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Page Universal App with PowerShell\nDESCRIPTION: Shows how to create a Universal App with multiple pages, each containing different typography elements.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/pages.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n$Pages = @()\n$Pages += New-UDPage -Name 'App One' -Content {\n    New-UDTypography -Text 'App Two'\n}\n\n$Pages += New-UDPage -Name 'App Two' -Content {\n    New-UDTypography -Text 'App Two'\n}\n\nNew-UDApp -Title 'Pages' -Pages $Pages\n```\n\n----------------------------------------\n\nTITLE: Creating Charts with Custom Colors in ChartJS using PowerShell\nDESCRIPTION: This snippet demonstrates how to create a bar chart with custom colors for background, border, and hover states using ChartJS in Universal Apps.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-visualization/charts.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n $Data = Get-Process | Sort-Object -Property CPU -Descending | Select-Object -First 10 \n\n $Options = @{\n   Type = 'bar'\n   Data = $Data\n   BackgroundColor = 'Red'\n   BorderColor = '#c61d4a'\n   HoverBackgroundColor = 'Blue'\n   HoverBorderColor = '#451dc6'\n   DataProperty = 'CPU'\n   LabelProperty = 'ProcessName'\n }\n\n New-UDChartJS @Options\n```\n\n----------------------------------------\n\nTITLE: Setting Cache with Absolute Expiration From Now\nDESCRIPTION: Demonstrates setting a cache item with expiration using TimeSpan, configured to expire after 1 hour.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/cache.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PSUCache -Key \"CurrentDate\" -Value (Get-Date) -AbsoluteExpirationFromNow ([TimeSpan]::FromHours(1))\n```\n\n----------------------------------------\n\nTITLE: Setting Rate Limiting Allow List in PowerShell Universal\nDESCRIPTION: This snippet shows how to set up an allow list for rate limiting in PowerShell Universal, which can be used to disable rate limiting for specific IP addresses, clients, or endpoints.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/rate-limiting.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PSUSetting -RateLimitAllowList @('192.168.1.100', 'trusted-client', '/api/unrestricted')\n```\n\n----------------------------------------\n\nTITLE: Handling File Uploads in PowerShell Universal Jobs\nDESCRIPTION: Demonstrates how to allow file uploads in job parameters and process the uploaded file content.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/automation/scripts/parameters.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nparam(\n    [File]$File\n)\n```\n\nLANGUAGE: powershell\nCODE:\n```\n[Text.Encoding]::UTF8.GetString($File.Content)\n```\n\n----------------------------------------\n\nTITLE: Hiding Content Above XL Breakpoint in Universal Dashboard\nDESCRIPTION: This snippet demonstrates how to hide content at or above the XL breakpoint using the -Up parameter with New-UDHidden.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/layout/hidden.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDHidden -Up xl -Content {\n    New-UDTypography 'xl'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Select Component in PowerShell\nDESCRIPTION: This example demonstrates how to create a basic select component with three options using the New-UDSelect function.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDSelect.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDSelect -Label 'Select' -Id 'select1' -Option {\n    New-UDSelectOption -Name \"One\" -Value 1\n    New-UDSelectOption -Name \"Two\" -Value 2\n    New-UDSelectOption -Name \"Three\" -Value 3\n} -FullWidth\n```\n\n----------------------------------------\n\nTITLE: Pulling from Git Repository in PowerShell Universal\nDESCRIPTION: Command to pull from a Git remote using PowerShell Universal's git service. If the local repository doesn't exist, a clone operation will be performed automatically.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/psucli.md#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\npsu git pull --url http://github.com/ironmansoftware/psu.git --path C:\\ProgramData\\UniversalAutomation\\Repository --username 'adamdriscoll' --password 'gh__1234123' --branch main\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Form with Text Field and Checkbox in PowerShell Universal Dashboard\nDESCRIPTION: Demonstrates how to create a basic form with a text field and checkbox that displays toast messages on submission. The $EventData variable contains the form field values that can be accessed by their IDs.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/form.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDForm -Content {\n    New-UDTextbox -Id 'txtTextField'\n    New-UDCheckbox -Id 'chkCheckbox'\n} -OnSubmit {\n    Show-UDToast -Message $EventData.txtTextField\n    Show-UDToast -Message $EventData.chkCheckbox\n}\n```\n\n----------------------------------------\n\nTITLE: Custom DateTime Formatting in PowerShell\nDESCRIPTION: Shows how to implement custom date formatting using DayJS formatting template. This example formats the date in DD/MM/YYYY pattern.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/date-and-time.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDateTime -InputObject (Get-Date) -Format 'DD/MM/YYYY'\n```\n\n----------------------------------------\n\nTITLE: Building the Component Project\nDESCRIPTION: Builds the component project and outputs a PowerShell module.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/custom-components/building-custom-components.md#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-UDReactComponentBuild -Path .\\project -OutputPath .\\output -Force\n```\n\n----------------------------------------\n\nTITLE: Creating Large Circular Progress Bar in PowerShell\nDESCRIPTION: Creates a large circular indeterminate progress indicator.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDProgress.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDProgress -Circular -Size large -Id 'progress2'\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Typography with Header in PowerShell\nDESCRIPTION: Creates a basic typography component that displays an h1 header with the text 'Hello World' and specified ID.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTypography.txt#2025-04-16_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDTypography -Text \"Hello World\" -Variant \"h1\" -Id \"typography1\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Split Pane with Left and Right Content in PowerShell\nDESCRIPTION: This example demonstrates how to create a basic split pane using the New-UDSplitPane cmdlet. It creates a pane with 'Left' and 'Right' text on each side.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDSplitPane.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDSplitPane -Content {\n    New-UDTypography -Text \"Left\"\n    New-UDTypography -Text \"Right\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Button Group with Loading State in PowerShell\nDESCRIPTION: This example demonstrates how to create a button group with a loading state using the -ShowLoading parameter and -OnClick event.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDButtonGroup.txt#2025-04-16_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButtonGroup -Content {\n    New-UDButtonGroupItem -Text 'Delete' -Icon (New-UDIcon -Icon 'trash') -ShowLoading -OnClick {\n       Start-Sleep -Seconds 5\n    }\n    New-UDButtonGroupItem -Text 'Copy'  -Icon (New-UDIcon -Icon 'copy') \n}\n```\n\n----------------------------------------\n\nTITLE: Selecting and Interacting with UI Elements in PowerShell\nDESCRIPTION: This example demonstrates how to create a textbox and a button, then use the Select-UDElement cmdlet to select the textbox when the button is clicked. It showcases the basic usage of Select-UDElement in conjunction with other UI elements.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Select-UDElement.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTextbox -Id 'selectElement1' -Label 'Name'\nNew-UDButton -Text 'Click Me' -OnClick {\n    Select-UDElement -Id 'txtName'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Rotated Icon in PowerShell\nDESCRIPTION: Shows how to create an icon rotated by 90 degrees.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDIcon.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDIcon -Icon 'AddressBook' -Size '5x' -Rotation 90 -Id 'icon6'\n```\n\n----------------------------------------\n\nTITLE: Creating an Avatar with Custom Styling in PowerShell\nDESCRIPTION: This example demonstrates how to create an avatar with custom content and CSS styling using the New-UDAvatar cmdlet. It sets the alt text, content, and applies custom CSS using the Sx parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDAvatar.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDAvatar -Alt \"Remy Sharp\" -Content {\n  \"A\"\n} -Sx @{\n  borderRadius = '50%'\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Date Picker Views\nDESCRIPTION: Restricts the date picker to show only the day view without year selection, and limits selectable dates to the current calendar year using minimum and maximum date constraints.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/date-picker.md#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n$Year = (Get-Date).Year\n$MinDate = [DateTime]::new($year, 1, 1)\n$MaxDate = [DateTime]::new($year, 12, 31)\nNew-UDDatePicker -Views \"day\" -MinimumDate $MinDate -MaximumDate $MaxDate\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Grid Column with New-UDDataGridColumn in PowerShell\nDESCRIPTION: This snippet shows the syntax for using the New-UDDataGridColumn cmdlet to create a new data grid column. It includes all available parameters for customizing the column's appearance and behavior.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDDataGridColumn.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDataGridColumn [[-CellClassName] <String>] [[-Align] <String>] [[-ColumnSpan] <Int32>] [[-Description] <String>] [-DisableColumnMenu] [-DisableExport] [-DisableReorder] [-Editable] [[-Field] <String>] [-Filterable] [[-Flex] <Single>] [-Groupable] [[-HeaderAlign] <String>] [[-HeaderName] <String>] [-Hideable] [-HideSortIcons] [[-MaxWidth] <Int32>] [[-MinWidth] <Int32>] [-Pinnable] [-Resizable] [-Sortable] [[-SortingOrder] <String[]>] [[-Type] <String>] [[-Width] <Int32>] [[-Render] <ScriptBlock>] [[-ValueOptions] <String[]>] [-Hide] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Creating a Loading Button in PowerShell\nDESCRIPTION: Demonstrates how to create a button that shows a loading indicator while its OnClick event handler is running, using the -ShowLoading parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDButton.txt#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -OnClick { Start-Sleep 3 } -ShowLoading -Text 'Load Data' -Id 'button18'\n```\n\n----------------------------------------\n\nTITLE: Applying Colors to Timeline Items in PowerShell Universal Apps\nDESCRIPTION: Customizes timeline items with different colors using the -Color parameter. Demonstrates using 'error', 'info', 'success', and 'grey' color options for visual distinction between timeline items.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/timeline.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDashboard -Title 'PowerShell Universal' -Content {\n        New-UDTimeline -Children {\n            New-UDTimelineItem -Content {\n                'Breakfast'\n            } -OppositeContent {\n                '7:45 AM'\n            }  -Color 'error'\n            New-UDTimelineItem -Content {\n                'Welcome Message'\n            } -OppositeContent {\n                '9:00 AM'\n            } -Color 'info'\n            New-UDTimelineItem -Content {\n                'State of the Shell'\n            } -OppositeContent {\n                '9:30 AM'\n            } -Color 'success'\n            New-UDTimelineItem -Content {\n                'General Session'\n            } -OppositeContent {\n                '11:00 AM'\n            } -Color 'grey'\n        } -Position alternate\n}\n```\n\n----------------------------------------\n\nTITLE: Updating PowerShell Universal Endpoint Configuration\nDESCRIPTION: Example shows how to update an existing endpoint with ID 1 by setting its URL to '/test' and HTTP method to 'GET'.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Set-PSUEndpoint.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PSUEndpoint -Id 1 -Url '/test' -Method 'GET'\n```\n\n----------------------------------------\n\nTITLE: Creating Pie Chart with PowerShell and ChartJS\nDESCRIPTION: Implements a pie chart showing server RAM usage with custom container dimensions. Uses server names for labels and RAM usage for data values.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDChartJS.txt#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDElement -Tag 'div' -Attributes @{ style = @{ height = '20vh'; width = \"10vw\"; } } -Content {\n   New-UDChartJS -Data $Data -DataProperty UsedRAM -LabelProperty Server -Type 'pie' -Id 'chart5'\n}\n```\n\n----------------------------------------\n\nTITLE: Using Configure Parameter for Advanced SAML2 Options in PowerShell Universal\nDESCRIPTION: Script demonstrating how to use the -Configure parameter with a script block to set additional SAML2 options not exposed by the Set-PSUAuthenticationMethod cmdlet, such as the discovery service URL.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/security/enterprise-security/saml2.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PSUAuthenticationMethod `\n-Type \"Saml2\" `\n-EntityId \"http://psu.ironman.local/sp\" `\n-IdentityProviderEntityId 'https://ironman.local/idp' `\n-MetadataAddress 'https://idp.ironman.local/idp/shibboleth' `\n-Configure {\n  $options = $args[0]\n  $options.SPOptions.DiscoveryServiceUrl = 'https://idp.ironman.local/discovery'\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Material UI Default Styles\nDESCRIPTION: Shows how to override default Material UI component styles by targeting specific CSS classes. This example modifies the default success alert background color using the MuiAlert-standardSuccess class.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/themes/styles.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDStyle -Style '.MuiAlert-standardSuccess { background-color: red !important;  }  ' -Content {\n    New-UDAlert -Text \"Hello\"\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell New-PSUSchedule Cmdlet Definition\nDESCRIPTION: Defines the New-PSUSchedule cmdlet with multiple parameter sets for different scheduling scenarios including continuous execution, cron schedules, one-time execution, and various recurring patterns. Supports credentials, time zones, and execution environments.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUSchedule.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUSchedule [-Script] <Script> [-AppToken <String>] [-ComputerName <String>] -Continuous [-Credential <Variable>] [-Delay <TimeSpan>] [-DelayHour <Int32>] [-DelayMinute <Int32>] [-DelaySecond <Int32>] [-TimeZone <String>] [-Environment <String>] [-Description <String>] [-Name <String>] [-UseDefaultCredentials] [-Condition <ScriptBlock>] [-Integrated] [-Paused] [-Timeout <Int32>] [-RandomDelay] [-AvailableInBranch <String[]>] [-Computer <String>] [-Parameters <Hashtable>] [-RandomDelayMaximum <Int32>] [-TrustCertificate] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Hub Client using JSON\nDESCRIPTION: This JSON configuration file is used to set up the Event Hub Client on a remote machine. It specifies the connection URL, hub name, and script path for the event hub.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/event-hubs.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Connections\": [\n        {\n            \"Url\": \"http://localhost:5000\",\n            \"Hub\": \"eventHub\",\n            \"ScriptPath\": \"script.ps1\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PowerShell Universal API Security Model in JSON\nDESCRIPTION: Demonstrates how to set the API security model to 'Permissive' in the appsettings.json file. This allows calls from within PowerShell Universal to function without an app token.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/module.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Api\": {\n       \"SecurityModel\": \"Permissive\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Card in PowerShell\nDESCRIPTION: This example demonstrates how to create a basic card with a title and text using the New-UDCard cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDCard.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDCard -Title 'My Card' -Text 'This is my card' -Id 'card1'\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Bar Chart with Click Events\nDESCRIPTION: Implements a bar chart with click event handling that shows a toast message when clicking on chart elements. Demonstrates interactive chart functionality.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDChartJS.txt#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDElement -Tag 'div' -Attributes @{ style = @{ height = '20vh'; width = \"20vw\"; } } -Content {\n   New-UDChartJS -Data $Data -DataProperty UsedRAM -LabelProperty Server -Type 'bar' -OnClick {\n       Show-UDToast -Message \"Clicked: $Body\"\n   } -Id 'chart8'\n}\n```\n\n----------------------------------------\n\nTITLE: Starting PowerShell Universal Server with Custom Repository Path\nDESCRIPTION: This example demonstrates how to set an alternative repository path using an environment variable and then start the PowerShell Universal server on port 8080.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Start-PSUServer.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$Env:Data__RepositoryPath = \"C:\\repo\" \nStart-PSUServer -Port 8080\n```\n\n----------------------------------------\n\nTITLE: Scheduling a Script on a Specific Computer in PowerShell Universal\nDESCRIPTION: This snippet illustrates how to create a schedule that runs a script on a specific computer in the PowerShell Universal cluster.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/automation/schedules.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUSchedule -Script \"MyScript.ps1\" -Cron '* * * * *' -Computer 'PSUNODE1'\n```\n\n----------------------------------------\n\nTITLE: Creating a Published Folder with Impersonation in PowerShell\nDESCRIPTION: PowerShell command to create a published folder with impersonation enabled. When impersonation is used, files are accessed using the identity of the authenticated user rather than the service account.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/published-folders.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUPublishedFolder -Path C:\\website -RequestPath /docs -DefaultDocument @(\"index.hml\") -Impersonation\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Schema Migrations in PowerShell Universal\nDESCRIPTION: Configuration to disable automatic schema updates in appsettings.json. This setting is useful when the PSU service does not have privileges to modify the database schema and manual updates are preferred.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/persistence.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"Data\": {\n   \"RunMigrations\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Export Implementation in DataGrid\nDESCRIPTION: Shows how to implement custom export functionality including multiple export types. Demonstrates CSV export with custom filename.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/data-grid.md#2025-04-16_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\n$Data = @(\n    @{ name = 'Adam'; Number = Get-Random}\n    @{ name = 'Tom'; Number = Get-Random}\n    @{ name = 'Sarah'; Number = Get-Random}\n)\n\nNew-UDDataGrid -LoadRows {\n    @{\n        rows = $Data \n        rowCount = $Data.Length\n    }\n} -Columns @(\n    New-UDDataGridColumn -Field name\n    New-UDDataGridColumn -Field number\n) -OnExport {\n    if ($EventData.Type -eq 'CSV')\n    {\n        $ExportContent = $Data | ConvertTo-Csv -NoTypeInformation | Out-String\n        Out-UDDataGridExport -Data $ExportContent -FileName 'export.csv' \n    }\n} -ExportOptions @(\"CSV\", \"PDF\")\n```\n\n----------------------------------------\n\nTITLE: Creating Form from PowerShell Script\nDESCRIPTION: Example of generating a form from a PowerShell script where script parameters define form fields\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDForm.txt#2025-04-16_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDForm -Id 'form10' -Script \"Script1.ps1\" -OutputType \"Table\"\n```\n\n----------------------------------------\n\nTITLE: Saving Uploaded File to Temporary Directory\nDESCRIPTION: A complete example showing how to save an uploaded file to the temporary directory. It converts the base64 encoded data back to bytes and writes it to disk.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/upload.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDUpload -Text 'Upload Image' -OnUpload {\n    $Data = $Body | ConvertFrom-Json \n    $bytes = [System.Convert]::FromBase64String($Data.Data)\n    [System.IO.File]::WriteAllBytes(\"$env:temp\\$($Data.Name)\", $bytes)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Grid Layout in PowerShell\nDESCRIPTION: Creates a basic grid layout with three equal-width cards (4 columns each) in a single row. Each card contains a button component.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDGrid.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDGrid -Container -Children {\n    New-UDGrid -Item -ExtraSmallSize 4 -Children {\n       New-UDCard -Title \"Card 1\" -Content {\n           New-UDButton -Text \"Button 1\"\n       }\n   }\n    New-UDGrid -Item -ExtraSmallSize 4 -Children {\n       New-UDCard -Title \"Card 1\" -Content {\n           New-UDButton -Text \"Button 2\"\n       }\n   }\n    New-UDGrid -Item -ExtraSmallSize 4 -Children {\n       New-UDCard -Title \"Card 1\" -Content {\n           New-UDButton -Text \"Button 3\"\n       }\n   }\n} -Id \"grid1\"\n```\n\n----------------------------------------\n\nTITLE: Implementing OnChange Event Handler for Date Picker\nDESCRIPTION: Creates a date picker with an OnChange event handler that displays a toast message with the selected date value using the $Body variable.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/date-picker.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDatePicker -OnChange {\n    Show-UDToast -Message $body\n}\n```\n\n----------------------------------------\n\nTITLE: Using Markdown in Paper Component (PowerShell)\nDESCRIPTION: This example shows how to use markdown within a New-UDPaper component. It demonstrates the need to override the default display type of the paper to avoid formatting issues when rendering markdown content.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/markdown.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$m=@'\n# Hello\n\n## world\n- a\n- b\n-c\n'@\n\nNew-UDPaper -Elevation 7 -Children {\n   New-UDMarkdown -markdown $m\n} -Style @{\n   display = 'block'\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Compose with PostgreSQL Persistence Configuration\nDESCRIPTION: Docker Compose YAML file for PowerShell Universal with PostgreSQL persistence, node name configuration, and timezone settings.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/docker.md#2025-04-16_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"5.2.1\"\nservices:\n  PSU:\n    container_name: PSU\n    image: ironmansoftware/universal:latest\n    ports:\n      - 5000:5000\n    restart: unless-stopped\n    environment:\n      - TZ=Europe/London\n      - Plugins__0=PostgreSQL\n      - Data__ConnectionString=Host=PGhostname; Database=PGdatabase; User Id=PGusername; Password=PGpassword!;Port=5432\n      - NodeName=mynodename\n    volumes:\n      - /docker/volumes/PSU:/root\n```\n\n----------------------------------------\n\nTITLE: Creating Form with JSON Schema\nDESCRIPTION: Demonstrates creating a form using JSON Schema definition with string and number properties\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDForm.txt#2025-04-16_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDForm -Id 'form8' -Schema @{\n    title = \"Test Form\"\n    type = \"object\"\n    properties = @{\n       name = @{\n           type = \"string\"\n       }\n       age = @{\n           type = \"number\"\n       }\n    }\n} -OnSubmit {\n    Show-UDToast -Message ($EventData.name)\n    Show-UDToast -Message ($EventData.age)\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Terminal Timeout\nDESCRIPTION: PowerShell command reference for customizing the terminal idle timeout period using the New-PSUTerminal cmdlet parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/automation/terminals.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n-IdleTimeout\n```\n\n----------------------------------------\n\nTITLE: Creating a Slider with Custom Step Size in PowerShell for Universal Dashboard\nDESCRIPTION: This example shows how to create a slider with a custom step size of 10.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDSlider.txt#2025-04-16_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDSlider -Value 50 -Minimum 0 -Maximum 100 -Step 10 -Id 'slider6'\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Speed Dial Component in PowerShell\nDESCRIPTION: Creates a basic speed dial component with multiple action buttons including user, groups, save and open actions. Each action has an associated icon and tooltip.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDSpeedDial.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDSpeedDial -Content {\n    New-UDSpeedDialAction -Icon (New-UDIcon -Icon 'User') -TooltipTitle 'My Account'\n    New-UDSpeedDialAction -Icon (New-UDIcon -Icon 'Users') -TooltipTitle 'Groups'\n    New-UDSpeedDialAction -Icon (New-UDIcon -Icon 'Save') -TooltipTitle 'Save'\n    New-UDSpeedDialAction -Icon (New-UDIcon -Icon 'File') -TooltipTitle 'Open'\n} -Icon (New-UDIcon -Icon 'Plus') -Id 'speedDial1'\n```\n\n----------------------------------------\n\nTITLE: Creating Overlay Toast Notifications in PowerShell Universal Dashboard\nDESCRIPTION: Shows how to create a toast notification as an overlay, which typically covers more of the screen and may have a different visual style.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Show-UDToast.txt#2025-04-16_snippet_17\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Text 'Show Toast' -OnClick {\n    Show-UDToast -Message 'Hello, World!' -Overlay\n} -Id 'toast18'\n```\n\n----------------------------------------\n\nTITLE: Creating an Alternate Timeline in PowerShell with New-UDTimeline\nDESCRIPTION: This example shows how to create an alternating timeline using the New-UDTimeline cmdlet with the -Position parameter set to 'alternate'. It includes multiple timeline items with content and opposite content.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTimeline.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTimeline -Children {\n    New-UDTimelineItem -Content {\n        'Breakfast'\n    } -OppositeContent {\n        '7:45 AM'\n    }\n    New-UDTimelineItem -Content {\n        'Welcome Message'\n    } -OppositeContent {\n        '9:00 AM'\n    }\n    New-UDTimelineItem -Content {\n        'State of the Shell'\n    } -OppositeContent {\n        '9:30 AM'\n    }\n    New-UDTimelineItem -Content {\n        'General Session'\n    } -OppositeContent {\n        '11:00 AM'\n    }\n} -Position alternate -Id 'timeline2'\n```\n\n----------------------------------------\n\nTITLE: Removing PowerShell Universal Dashboard Example\nDESCRIPTION: Example showing how to remove a PowerShell Universal dashboard/app using its ID. This is the basic usage of the Remove-PSUDashboard cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Remove-PSUDashboard.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-PSUDashboard -Id 1\n```\n\n----------------------------------------\n\nTITLE: New Window Redirect in PowerShell\nDESCRIPTION: Shows how to redirect users to a URL in a new window using the -OpenInNewWindow parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Invoke-UDRedirect.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Text 'Click Me' -OnClick {\n    Invoke-UDRedirect 'https://www.google.com' -OpenInNewWindow\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Cmdlet Syntax for New-UDValidationResult\nDESCRIPTION: Defines the syntax for creating validation results in Universal Dashboard. The cmdlet supports validation status, error messages, context updates, and stepper-specific functionality like previous button control and active step management.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDValidationResult.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDValidationResult [-Valid] [[-ValidationError] <String>] [[-Context] <Hashtable>] [-DisablePrevious] [[-ActiveStep] <Int32>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Color Picker Component\nDESCRIPTION: Demonstrates creating a custom color picker component with event handling.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/element.md#2025-04-16_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\nfunction New-UDColorPicker {\n    [CmdletBinding()]\n    param(\n        [Parameter()]\n        [string]$Id = [Guid]::NewGuid(),\n        [Parameter()]\n        [ScriptBlock]$OnChange,\n        [Parameter()]\n        [string]$Value,\n        [Parameter()]\n        [Hashtable]$Style\n    )\n\n    New-UDElement -Id $Id -Tag \"input\" -Attributes @{\n        value = $Value\n        type = \"color\"\n        onChange = $OnChange\n        style = $Style\n    }\n}\n\nNew-UDApp -Content { \n    New-UDColorPicker -Id 'colorPicker' -OnChange {\n        Show-UDToast $EventData -Position topLeft -Persistent\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Transfer List Value Changes in PowerShell Universal Dashboard\nDESCRIPTION: This example shows how to use the OnChange event handler with a transfer list to display a toast notification with the selected items' data when the selection changes.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/transfer-list.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTransferList -Item {\n    New-UDTransferListItem -Name 'test1' -Value 1\n    New-UDTransferListItem -Name 'test2' -Value 2\n    New-UDTransferListItem -Name 'test3' -Value 3\n    New-UDTransferListItem -Name 'test4' -Value 4\n    New-UDTransferListItem -Name 'test5' -Value 5\n} -OnChange {\n    Show-UDToast ($EventData | ConvertTo-Json)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Grid Layout with Spacing Control\nDESCRIPTION: Creates a dynamic grid layout that updates based on a spacing value selected through a dropdown menu. Demonstrates integration with dynamic content updates.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDGrid.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDynamic -Id 'grid4' -Content {\n    $Spacing = (Get-UDElement -Id 'gridSpacingSelect').value\n    New-UDGrid -Container -Children {\n      New-UDGrid -Item -ExtraSmallSize 12 -LargeSize 4 -Children {\n        New-UDCard -Title \"Card 1\" -Content {\n            New-UDButton -Text \"Button 1\"\n        }\n    }\n     New-UDGrid -Item -ExtraSmallSize 12 -LargeSize 4  -Children {\n        New-UDCard -Title \"Card 1\" -Content {\n            New-UDButton -Text \"Button 2\"\n        }\n    }\n    New-UDGrid -Item -ExtraSmallSize 12 -LargeSize 4 -Children {\n        New-UDCard -Title \"Card 1\" -Content {\n            New-UDButton -Text \"Button 3\"\n        }\n    }\n   } -Spacing $Spacing\n}\nNew-UDSelect -Id 'gridSpacingSelect' -Label Spacing -Option\n```\n\n----------------------------------------\n\nTITLE: Get-PSUComputer Cmdlet Syntax\nDESCRIPTION: Complete syntax for the Get-PSUComputer cmdlet showing all available parameters including authentication options, computer identification, and connection settings.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUComputer.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PSUComputer [-Id] <Int64> [-AppToken <String>] [-ComputerName <String>] [-Integrated] [-UseDefaultCredentials] [-Credential <PSCredential>] [-TrustCertificate] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Alerts with Different Severity Levels\nDESCRIPTION: Creates a stack of alerts demonstrating the four available severity levels: error, warning, info, and success. Uses basic configuration with just severity and title parameters.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDAlert.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDStack -Content {\n    New-UDAlert -Severity 'error'  -Title \"Error\" -Id 'alert1'\n    New-UDAlert -Severity 'warning' -Title \"Warning\" -Id 'alert2'\n    New-UDAlert -Severity 'info'  -Title \"Info\" -Id 'alert3'\n    New-UDAlert -Severity 'success' -Title \"Success\" -Id 'alert4'\n} -Direction 'column'\n```\n\n----------------------------------------\n\nTITLE: New-UDMapVectorLayer Rectangle Syntax\nDESCRIPTION: Creates a rectangular vector layer on a map using coordinates for top-left and bottom-right corners. Includes options for fill and border styling.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDMapVectorLayer.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDMapVectorLayer [-Id <String>] [-Color <DashboardColor>] [-FillColor <DashboardColor>] [-FillOpacity <Double>] [-Weight <Int32>] [-Opacity <Double>] -Rectangle -LatitudeTopLeft <Double> -LongitudeTopLeft <Double> -LatitudeBottomRight <Double> -LongitudeBottomRight <Double> [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Endpoint by URL in PowerShell Universal\nDESCRIPTION: Retrieves all endpoints that match a specific URL path. Multiple endpoints may share the same URL with different HTTP verbs.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUEndpoint.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PSUEndpoint -Url '/url'\n```\n\n----------------------------------------\n\nTITLE: Applying a PowerShell Universal Deployment from PowerShell Repository\nDESCRIPTION: Applies a deployment directly from a PowerShell repository by specifying the module name and version. This requires the repository to be registered on all nodes in the cluster.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/deployments.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nSelect-PSUDeployment -ModuleName 'Production' -ModuleVersion '1.0.1'\n```\n\n----------------------------------------\n\nTITLE: Upload Component with Right-Aligned Icon in PowerShell\nDESCRIPTION: Creates an upload component with a custom icon aligned to the right side of the button. Uses the -IconAlignment parameter set to 'right'.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDUpload.txt#2025-04-16_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDUpload -Text \"Upload\" -OnUpload {\n    Show-UDToast $Body\n} -Id 'upload4' -IconAlignment 'right' -Icon (New-UDIcon -Icon 'Upload')\n```\n\n----------------------------------------\n\nTITLE: Creating a Link with OnClick Event in PowerShell\nDESCRIPTION: This example shows how to create a link with an OnClick event that displays a toast message.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDLink.txt#2025-04-16_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDLink -Text \"Click\" -OnClick {\n    Show-UDToast -Message \"Clicked!\"\n} -Id 'link8'\n```\n\n----------------------------------------\n\nTITLE: Sending Event to MyHub in PowerShell Universal\nDESCRIPTION: Demonstrates how to use the Send-PSUEvent cmdlet to send an event with data to a specific hub named 'MyHub'. This example shows the basic usage of the cmdlet for broadcasting an event to all connected clients.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Send-PSUEvent.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSend-PSUEvent -Hub 'MyHub' -Data @{ Name = 'Adam' }\n```\n\n----------------------------------------\n\nTITLE: Creating a Blazor Form Component with PowerShell Model Binding\nDESCRIPTION: This markup defines a Blazor form that binds to a PowerShell model. It includes a Form component with an Input field bound to the model property and a Submit button. When submitted, it will trigger the Submit function defined in the PowerShell script.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/portal/portal-widgets/forms.md#2025-04-16_snippet_1\n\nLANGUAGE: markup\nCODE:\n```\n<Row>\n    <Form Model=\"$Model\" OnFinish=\"Submit\">\n        <FormItem>\n            <Input bind-Value=\"$Model.Str\" />\n        </FormItem>\n        <FormItem>\n            <Button HtmlType=\"Submit\">Submit</Button>\n        </FormItem>\n    </Form>\n</Row>\n```\n\n----------------------------------------\n\nTITLE: PowerShell Environment with Variable Access\nDESCRIPTION: Creates a PowerShell environment with access to all PSU variables defined using New-PSUVariable.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUEnvironment.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUEnvironment -Name '7.1' -Path 'pwsh.exe' -ArgumentList \"-ExecutionPolicy Bypass\" -Variables @(\"*\")\n```\n\n----------------------------------------\n\nTITLE: Waiting for PowerShell Universal Script Completion\nDESCRIPTION: Shows how to invoke a script and wait for its completion using Wait-PSUJob cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/automation/jobs.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-PSUScript -Script 'Script1.ps1' -RequiredParameter 'Hello' | Wait-PSUJob\n```\n\n----------------------------------------\n\nTITLE: Basic Table Export Implementation in PowerShell\nDESCRIPTION: Creates a table with exportable service data including name, status, and startup information. Demonstrates basic export functionality with included and excluded columns.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/table.md#2025-04-16_snippet_13\n\nLANGUAGE: powershell\nCODE:\n```\n$TableData = try { get-service -ea Stop | select Name,@{n = \"Status\";e={ $_.Status.ToString()}},@{n = \"StartupType\";e={ $_.StartupType.ToString()}},@{n = \"StartType\";e={ $_.StartType.ToString()}} } catch {}\n$Columns = @(\n    New-UDTableColumn -Property Name -Title \"Service Name\" -IncludeInExport\n    New-UDTableColumn -Property Status -Title Status \n    New-UDTableColumn -Property StartupType\n    New-UDTableColumn -Property StartType -IncludeInExport\n)\nNew-UDTable -Id 'service_table' -Data $TableData -Columns $Columns -Title 'Services' -ShowSearch -ShowPagination -Dense -Export\n```\n\n----------------------------------------\n\nTITLE: Measuring Script Block Execution in PowerShell Universal\nDESCRIPTION: This example demonstrates how to use the Measure-PSUBlock cmdlet to measure the execution time of a script block. It requires the profiler feature of PowerShell Universal to be enabled.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Measure-PSUBlock.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nMeasure-PSUBlock -Name 'CodeToMeasure' -ScriptBlock {\n    Start-Sleep 1\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Script with Concurrent Jobs Limit\nDESCRIPTION: Example of creating a new PowerShell Universal script with a concurrent job limit of 1.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/automation/scripts/README.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUScript -Name Script.ps1 -Path Script.Ps1 -ConcurrentJobs 1\n```\n\n----------------------------------------\n\nTITLE: Creating Responsive Grid Layout with Cards\nDESCRIPTION: Creates a responsive grid layout with three equally-sized columns containing cards. Uses New-UDRow and New-UDColumn for structure.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDGrid.txt#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDRow -Columns {\n    New-UDColumn -Size 4 -Content {\n        New-UDCard -Title \"Card 1\" -Content {}\n    }    \n    New-UDColumn -Size 4 -Content {\n        New-UDCard -Title \"Card 2\" -Content {}\n    }  \n    New-UDColumn -Size 4 -Content {\n        New-UDCard -Title \"Card 3\" -Content {}\n    }  \n} -Id 'grid5'\n```\n\n----------------------------------------\n\nTITLE: Creating Form with External Submit Button\nDESCRIPTION: Demonstrates how to create a form with a submit button placed outside the form using Invoke-UDForm\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDForm.txt#2025-04-16_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDForm -Id 'form11' -Content {\n   New-UDTextbox -Id 'form11Textbox' -Label 'Name'\n} -OnSubmit {\n    Show-UDToast -Message ($EventData.form11Textbox)\n}\nNew-UDButton -Text \"A submit button outside the form\" -OnClick {\n    Invoke-UDForm -Id \"form11\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Calendar Chart Parameters in PowerShell\nDESCRIPTION: Specifies parameters for creating calendar charts, including date range, color schemes, spacing options, and legend offsets.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDNivoChart.txt#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n-Calendar [<SwitchParameter>]\n-From <DateTime>\n-To <DateTime>\n-EmptyColor <Object>\n-YearSpacing <Int32>\n-YearLegendOffset <Int32>\n-MonthSpacing <Int32>\n-MonthLegendOffset <Int32>\n-DaySpacing <Int32>\n-DayLegendOffset <Int32>\n-CellOpacity <Single>\n-CellBorderWidth <Int32>\n```\n\n----------------------------------------\n\nTITLE: Basic DateTime Formatting in PowerShell\nDESCRIPTION: Demonstrates basic date and time formatting using the default LLL localized formatting template. This example shows how to format the current date and time using New-UDDateTime.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/date-and-time.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDateTime -InputObject (Get-Date)\n```\n\n----------------------------------------\n\nTITLE: Using Cache Scope Variable in PowerShell Universal Monitor\nDESCRIPTION: Shows how to use a Cache scope variable within a UDMonitor endpoint. This example displays the number of computers stored in the Cache scope.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/custom-variable-scopes.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDMonitor -Title Computers -Endpoint {\n    $Cache:Computers.Length | Out-UDMonitorData\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multiline Textbox in PowerShell\nDESCRIPTION: Implements a multiline textbox with specified number of rows and maximum rows limit.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/textbox.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTextbox -Multiline -Rows 4 -RowsMax 10\n```\n\n----------------------------------------\n\nTITLE: Creating Address Book Icon Example\nDESCRIPTION: Example of creating a specific icon using New-UDIcon cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/icon.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDIcon -Icon 'AddressBook'\n```\n\n----------------------------------------\n\nTITLE: Creating Text Skeleton with Wave Animation\nDESCRIPTION: Creates a text skeleton component with wave animation effect. Uses a width of 210 pixels and default text variant.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDSkeleton.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDSkeleton -Id 'skeleton1' -Variant text -Animation wave -Width 210\n```\n\n----------------------------------------\n\nTITLE: Setting Toast Duration in PowerShell Universal Dashboard\nDESCRIPTION: Demonstrates how to set a custom duration for a toast notification, keeping it visible for a specified amount of time (5000 milliseconds).\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Show-UDToast.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Text 'Show Toast' -OnClick {\n    Show-UDToast -Message 'Hello, World!' -Duration 5000\n} -Id 'toast2'\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Variables in PowerShell Universal\nDESCRIPTION: Example showing how to retrieve all variables defined in PowerShell Universal using the Get-UAVariable cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUVariable.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-UAVariable\n```\n\n----------------------------------------\n\nTITLE: Implementing Component Overrides in PowerShell Universal App Theme\nDESCRIPTION: Demonstrates how to override specific component styles in a PowerShell Universal app theme. This example modifies the padding and font size of buttons.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/themes/README.md#2025-04-16_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\n$Theme = @{\n   overrides = @{\n       MuiButton = @{\n           root = @{\n               padding = 20\n           }\n           label = @{\n               fontSize = 40\n           }\n       }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Environment with Module Loading\nDESCRIPTION: Creates a PowerShell environment that automatically loads the ActiveDirectory module.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUEnvironment.txt#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUEnvironment -Name '7.1' -Path 'pwsh.exe' -ArgumentList \"-ExecutionPolicy Bypass\" -Modules @(\"ActiveDirectory\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Job Pipeline Output Using Job Object\nDESCRIPTION: Example demonstrating how to retrieve pipeline output by first getting a job object and then passing it to the cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUJobPipelineOutput.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$Job = Get-UAJob -Id 12\nGet-UAJobPipelineOutput -Job $Job\n```\n\n----------------------------------------\n\nTITLE: Connecting to PowerShell Universal Server with AppToken\nDESCRIPTION: Demonstrates how to connect to a PowerShell Universal server using the Connect-PSUServer cmdlet with a computer name and app token. This sets up the connection for the entire process.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/module.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-PSUServer -ComputerName http://localhost:5000 -AppToken xyz123\n```\n\n----------------------------------------\n\nTITLE: Adding Assembly References in C# Endpoint\nDESCRIPTION: Examples showing how to reference external assemblies in C# endpoints using the #ref directive, supporting both relative and absolute paths.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/plugins.md#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n#ref PowerShellUniversal.Apis.dll\n#ref C:\\assemblies\\markdiag.dll\n```\n\n----------------------------------------\n\nTITLE: Adding Child Elements Dynamically\nDESCRIPTION: Shows how to add child elements to a parent element using Add-UDElement.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/element.md#2025-04-16_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDElement -Tag 'ul' -Content {\n\n} -Id 'myList'\n\nNew-UDButton -Text 'Click Me' -OnClick {\n    Add-UDElement -ParentId 'myList' -Content {\n        New-UDElement -Tag 'li' -Content { Get-Date }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Remove-PSUTag Syntax Pattern 2\nDESCRIPTION: Syntax pattern for removing a tag using a Tag object with various optional parameters for authentication and server configuration.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Remove-PSUTag.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-PSUTag [-Tag] <Tag> [-AppToken <String>] [-ComputerName <String>] [-Integrated] [-UseDefaultCredentials] [-Credential <PSCredential>] [-TrustCertificate] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Creating Form with Contained Button Variant\nDESCRIPTION: Example of creating a form with a contained button style variant\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDForm.txt#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDForm -Id 'form6' -Content {\n    New-UDTextbox -Id 'form6Textbox' -Label 'Name'\n} -OnSubmit {\n    Show-UDToast -Message ($EventData.form6Textbox)\n} -ButtonVariant 'contained'\n```\n\n----------------------------------------\n\nTITLE: Creating Dense Alerts\nDESCRIPTION: Shows how to create compact alerts using the -Dense parameter to reduce vertical padding while maintaining different severity levels.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDAlert.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDStack -Content {\n    New-UDAlert -Severity 'error'  -Title \"Error\" -Id 'alert9' -Dense\n    New-UDAlert -Severity 'warning' -Title \"Warning\" -Id 'alert10' -Dense\n    New-UDAlert -Severity 'info'  -Title \"Info\" -Id 'alert11' -Dense\n    New-UDAlert -Severity 'success' -Title \"Success\" -Id 'alert12' -Dense\n} -Direction 'column'\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Button Component in PSBlazor\nDESCRIPTION: Demonstrates the basic syntax for creating a button component in PSBlazor using XML-like syntax.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/portal/portal-widgets/syntax.md#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Button>Click Me</Button>\n```\n\n----------------------------------------\n\nTITLE: Creating a Job Failure Trigger in PowerShell Universal\nDESCRIPTION: Creates a new trigger that calls the ScriptFailed.ps1 file when any job within PowerShell Universal fails. This example demonstrates basic usage of the New-PSUTrigger cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUTrigger.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUTrigger -Name 'Script Failed' -EventType JobFailed -TriggerScript 'ScriptFailed.ps1'\n```\n\n----------------------------------------\n\nTITLE: Creating a Small Chip with Icon in PowerShell\nDESCRIPTION: This example shows how to create a small-sized chip with an icon using the New-UDChip cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDChip.txt#2025-04-16_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDChip -Label 'Small' -Icon (New-UDIcon -Icon 'user') -Size small -Id 'chip8'\n```\n\n----------------------------------------\n\nTITLE: Creating an Icon Button with Loading Spinner in PowerShell\nDESCRIPTION: This example demonstrates how to create an icon button with a loading spinner that appears during a long-running operation.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDIconButton.txt#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDIconButton -Icon (New-UDIcon -Icon user -Size sm) -Id 'iconButton5' -OnClick {\n    Show-UDToast -Message 'Icon Button Clicked'\n    Start-Sleep -Seconds 5\n} -ShowLoading\n```\n\n----------------------------------------\n\nTITLE: Creating Read-Only PowerShell Code Editor\nDESCRIPTION: Creates a read-only Monaco code editor with custom dimensions, PowerShell syntax highlighting and dark theme.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDCodeEditor.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDCodeEditor -Code 'Get-Process' -Theme 'vs-dark' -Language 'powershell' -Height '200' -Width '100%' -ReadOnly -Id 'codeEditor2'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Agent Computers Using Get-PSUComputer\nDESCRIPTION: Example demonstrating how to retrieve all job agent computers connected to PowerShell Universal. This cmdlet supports various authentication methods and can be used both internally and through the Management API.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUComputer.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-UAComputer\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Recurring Schedule in PowerShell Universal\nDESCRIPTION: Creates a schedule that runs a script every five minutes using the cron syntax.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUSchedule.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$Script = Get-PSUScript -Name 'Script1.ps1'\nNew-PSUSchedule -Script $Script -Cron '*/5 * * * *'\n```\n\n----------------------------------------\n\nTITLE: Creating a Continuous Schedule with Delay\nDESCRIPTION: Sets up a continuous execution schedule with a 5-minute delay between iterations after the previous execution completes.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUSchedule.txt#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n$Script = Get-PSUScript -Name 'Script1.ps1'\nNew-PSUSchedule -Script $Script -Continous -DelayMinute 5\n```\n\n----------------------------------------\n\nTITLE: Script Invocation with Parameters in PowerShell Universal\nDESCRIPTION: Demonstrates invoking a script with multiple parameters passed as dynamic parameters to the target script.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Invoke-PSUScript.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$Script = Get-PSUScript -Name 'Script1.ps1'\nInvoke-PSUScript -Script $Script -Parameter1 123 -Parameter2 \"Test\"\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Settings in ProgramData AppSettings.json\nDESCRIPTION: Example of overriding JWT authentication settings using a custom appsettings.json file in the ProgramData directory.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/settings.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"Jwt\": {  \n    \"SigningKey\": \"PleaseUseYourOwnSigningKeyHere\",  \n    \"Issuer\": \"IronmanSoftware\",\n    \"Audience\": \"PowerShellUniversal\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Input Validation in PowerShell\nDESCRIPTION: Implements custom validation logic for textbox input using OnValidate event handler.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/textbox.md#2025-04-16_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTextbox -OnValidate {\n    if ($EventData.Length -lt 10)\n    {\n        New-UDValidationResult -ValidationError 'String needs to be longer than 10'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling a Button with Set-UDElement in PowerShell\nDESCRIPTION: Demonstrates how to use Set-UDElement to disable a button when clicked. This example creates a button that disables itself when clicked by setting its 'disabled' property to true.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Set-UDElement.txt#2025-04-16_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDButton -Id 'setElement1' -Text 'Disable Me' -OnClick {\n    Set-UDElement -Id 'setElement1' -Properties @{\n        'disabled' = $true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Element Changes with Set-UDElement in PowerShell\nDESCRIPTION: Shows how to use the -Broadcast parameter to update an element across all connected dashboard sessions. This creates a button that, when clicked, disables itself for all users viewing the dashboard.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Set-UDElement.txt#2025-04-16_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDButton -Id 'setElement2' -Text 'Disable Me' -OnClick {\n    Set-UDElement -Id 'setElement2' -Properties @{\n        'disabled' = $true\n    } -Broadcast\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Universal SAML2 Return URL Format Example\nDESCRIPTION: Example of the correct format for the Return URL in PowerShell Universal SAML2 configuration. This URL is where users will be redirected after authentication with the identity provider.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/security/enterprise-security/saml2.md#2025-04-16_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nhttps://localhost/Saml2/Acs\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Autocomplete Variants in PowerShell\nDESCRIPTION: Creates a stack of autocomplete components with different variants (filled, outlined, standard).\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDAutocomplete.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDStack -Content {\n    New-UDAutocomplete -Options @(\"Test\", \"No\", \"Yes\") -Variant 'filled'  -Id 'autocomplete3' -FullWidth\n    New-UDAutocomplete -Options @(\"Test\", \"No\", \"Yes\") -Variant 'outlined'  -Id 'autocomplete4' -FullWidth\n    New-UDAutocomplete -Options @(\"Test\", \"No\", \"Yes\") -Variant 'standard'  -Id 'autocomplete5' -FullWidth\n} -Direction 'column' -FullWidth\n```\n\n----------------------------------------\n\nTITLE: Starting a Process on Remote Machine using PowerShell\nDESCRIPTION: This script is designed to run on a remote machine through the event hub. It takes a parameter for the process name and starts the specified process.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/event-hubs.md#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nparam($Name)\n\nStart-Process $Name\n```\n\n----------------------------------------\n\nTITLE: Creating Pie Chart Syntax\nDESCRIPTION: Syntax for creating a Nivo pie chart with specific parameters for pie chart customization including angles, radius, and label options.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDNivoChart.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDNivoChart [-Id <String>] -Data <Object> [...] -Pie [-StartAngle <Int32>] [-EndAngle <Int32>] [-Fit <Boolean>] [-InnerRadius <Single>] [-PadAngle <Int32>] [-CornerRadius <Int32>] [-SortByValue] [-DisableRadiusLabels] [-RadiusLabelSkipAngle <Int32>]\n```\n\n----------------------------------------\n\nTITLE: Creating a Complex Card with Header and Media in PowerShell\nDESCRIPTION: This example shows how to create a more complex card with a custom header and media content using the New-UDCard cmdlet and related functions.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDCard.txt#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n$Header = New-UDCardHeader -Avatar (New-UDAvatar -Content { \"R\" } -Sx @{ backgroundColor = \"#f44336\" }) -Action (New-UDIconButton -Icon (New-UDIcon -Icon 'EllipsisVertical')) -Title 'Shrimp and Chorizo Paella' -SubHeader 'September 14, 2016';\n$Media = New-UDCardMedia -Image 'https://mui.com/static/images/cards/paella.jpg'\n```\n\n----------------------------------------\n\nTITLE: Creating Array-Based Schema Forms in PowerShell Universal Dashboard\nDESCRIPTION: Demonstrates how to create a form that accepts multiple objects using an array-based schema. Users can add and remove objects from the form dynamically.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/form.md#2025-04-16_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDForm -Schema @{\n   title = \"Test Form\"\n   type = \"array\"\n   items = @{\n      type = \"object\" \n       properties = @{\n           name = @{\n               type = \"string\"\n           }\n           age = @{\n               type = \"number\"\n           }\n       }\n   }\n} -OnSubmit {\n   # $EventData[0].name\n   # $EventData[0].age\n}\n```\n\n----------------------------------------\n\nTITLE: Upload Component with Hidden File Name in PowerShell\nDESCRIPTION: Creates an upload component that hides the file name text after upload. Uses the -HideUploadedFileName switch parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDUpload.txt#2025-04-16_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDUpload -Text \"Upload\" -OnUpload {\n    Show-UDToast $Body\n} -Id 'upload2' -HideUploadedFileName\n```\n\n----------------------------------------\n\nTITLE: Creating a Multiple Selection Toggle Button Group in PowerShell\nDESCRIPTION: This example creates a standard toggle button group with multiple selection (multiple buttons can be selected simultaneously), containing three toggle buttons each with a user icon.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDToggleButtonGroup.txt#2025-04-16_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDToggleButtonGroup -Content {\n    New-UDToggleButton -Content {\n        New-UDIcon -Icon 'User'\n    }\n    New-UDToggleButton -Content {\n        New-UDIcon -Icon 'User'\n    }\n    New-UDToggleButton -Content {\n        New-UDIcon -Icon 'User'\n    } -Id 'test'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Switch with Labels in PowerShell\nDESCRIPTION: Creates a switch component with different labels for checked and unchecked states. This enhances usability by providing clear text indicators for each state of the switch.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDSwitch.txt#2025-04-16_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDSwitch -Id 'switch4' -Checked $true -Label 'On' -UncheckedLabel 'Off'\n```\n\n----------------------------------------\n\nTITLE: Implementing Slide Transition with Direction in PowerShell\nDESCRIPTION: Creates a slide transition that moves from left to right. The transition occurs over 1000 milliseconds when the checkbox state changes.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTransition.txt#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTransition -Slide -In -Children {\n    New-UDButton -Text 'Click Me' -Id 'button7'\n} -Id 'transition7' -SlideDirection 'Left'  -Timeout 1000\nNew-UDCheckbox -Label 'Toggle' -OnChange {\n    Set-UDElement -Id 'transition7' -Properties @{\n        In = $EventData\n    }\n} -Checked $true\n```\n\n----------------------------------------\n\nTITLE: Basic Stack Layout in PowerShell\nDESCRIPTION: Creates a basic stack with three cards and spacing of 2 units\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDStack.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDStack -Content {\n    New-UDCard -Text \"Card 1\" -RemoveMargin\n    New-UDCard -Text \"Card 2\" -RemoveMargin\n    New-UDCard -Text \"Card 3\" -RemoveMargin\n} -Spacing 2 -Id 'stack1'\n```\n\n----------------------------------------\n\nTITLE: Creating Dashboard with Onepirate Theme in PowerShell Universal\nDESCRIPTION: Demonstrates how to create a dashboard using the Onepirate theme in PowerShell Universal. It includes typography, buttons, and a card with a form.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/themes/README.md#2025-04-16_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDashboard -Theme $theme -Title \"Onepirate\" -Content {\n    New-UDTypography -Text 'Upgrade your Sundays' -Variant h2 -Align Center\n    New-UDTypography -Text 'Enjoy secret offers up to -70% off the best luxury hotels every Sunday.' -Variant h5 -Align Center\n    New-UDElement -Tag div -Attributes @{\n        style = @{\n            textAlign = 'center'\n        }\n    } -Content {\n        New-UDButton -Text 'Register' -Color secondary\n    }\n            \n    New-UDCard -Title 'SIGN UP' -Content {\n        New-UDForm -Content {\n            New-UDTextbox -Label 'EMAIL ADDRESS' \n        } -OnSubmit {\n\n        }\n    } -Elevation 0\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Date Picker in PowerShell\nDESCRIPTION: Creates a new date picker with a default date value using the New-UDDatePicker cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDDatePicker.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDatePicker -Id 'datepicker1' -Value '1-2-2020'\n```\n\n----------------------------------------\n\nTITLE: Granting App Token with Signing Key in PowerShell\nDESCRIPTION: This example shows how to grant a new app token using a specific signing key. It uses the Grant-PSUAppToken cmdlet to create a token for 'MyIdentity' that expires in 30 days, has 'Reader' access, and is signed with the 'MySigningKey'.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Grant-PSUAppToken.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGrant-PSUAppToken -IdentityName 'MyIdentity' -Expiry (Get-Date).AddDays(30) -Role 'Reader' -SigningKey 'MySigningKey'\n```\n\n----------------------------------------\n\nTITLE: Organizing Universal App Pages into Multiple PS1 Files with PowerShell\nDESCRIPTION: Demonstrates how to organize a Universal App into multiple PowerShell script files, with each page sourcing a different PS1 file.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/pages.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n$UDScriptRoot = $PSScriptRoot\n$Pages = @()\n$Pages += New-UDPage -Name 'App One' -Content {\n    . \"$UDScriptRoot\\db1.ps1\"\n}\n\n$Pages += New-UDPage -Name 'App Two' -Content {\n    . \"$UDScriptRoot\\db2.ps1\"\n}\n\nNew-UDApp -Title 'Pages' -Pages $Pages\n```\n\n----------------------------------------\n\nTITLE: Configuring PowerShell Universal Agent Connection Settings\nDESCRIPTION: JSON configuration file (agent.json) that defines connection settings for the PowerShell Universal Agent. Specifies the connection URL, hub name, authentication token, and script path for event handling.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/agent.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Connections\": [\n        {\n            \"Url\": \"http://localhost:5000\",\n            \"Hub\": \"eventHub\",\n            \"AppToken\": \"tokenXyz\",\n            \"ScriptPath\": \"script.ps1\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Shibboleth Relying Party Configuration\nDESCRIPTION: XML configuration for Shibboleth relying party settings with open IdP enabled. Includes default profile configurations and SAML2 settings for SSO, ECP, Logout, AttributeQuery, and ArtifactResolution.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/security/enterprise-security/saml2.md#2025-04-16_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:util=\"http://www.springframework.org/schema/util\"\n       xmlns:p=\"http://www.springframework.org/schema/p\"\n       xmlns:c=\"http://www.springframework.org/schema/c\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\n                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd\"\n                           \n       default-init-method=\"initialize\"\n       default-destroy-method=\"destroy\">\n\n    <!--\n    Unverified RP configuration, defaults to no support for any profiles. Add <ref> elements to the list\n    to enable specific default profile settings (as below), or create new beans inline to override defaults.\n    \n    \"Unverified\" typically means the IdP has no metadata, or equivalent way of assuring the identity and\n    legitimacy of a requesting system. To run an \"open\" IdP, you can enable profiles here.\n    -->\n    <bean id=\"shibboleth.UnverifiedRelyingParty\" parent=\"RelyingParty\">\n        <property name=\"profileConfigurations\">\n            <list>\n\t\t\t<bean parent=\"SAML2.SSO\" p:encryptAssertions=\"false\" />\n            </list>\n        </property>\n    </bean>\n\n    <!-- Default configuration, with default settings applied for all profiles. -->\n    <bean id=\"shibboleth.DefaultRelyingParty\" parent=\"RelyingParty\">\n        <property name=\"profileConfigurations\">\n            <list>\n                <!-- SAML 1.1 and SAML 2.0 AttributeQuery are disabled by default. -->\n                <!--\n                <bean parent=\"Shibboleth.SSO\" />\n                <ref bean=\"SAML1.AttributeQuery\" />\n                <ref bean=\"SAML1.ArtifactResolution\" />\n                -->\n                <bean parent=\"SAML2.SSO\" />\n                <ref bean=\"SAML2.ECP\" />\n                <ref bean=\"SAML2.Logout\" />\n                <ref bean=\"SAML2.AttributeQuery\" />\n                <ref bean=\"SAML2.ArtifactResolution\" />\n                <ref bean=\"Liberty.SSOS\" />\n            </list>\n        </property>\n    </bean>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Stopping a PSU Job Using Job Object in PowerShell\nDESCRIPTION: This example demonstrates how to stop a PSU job using a Job object obtained from Get-UAJob cmdlet. It first retrieves the job with ID 12 and then stops it.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Stop-PSUJob.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$Job = Get-UAJob -Id 12\nStop-UAJob -Job $Job\n```\n\n----------------------------------------\n\nTITLE: Retrieving Git Status in PowerShell Universal\nDESCRIPTION: This PowerShell cmdlet retrieves the status of the internal git repository for PowerShell Universal. It can return information about commits, uncommitted changes, and edit-in-progress status. The cmdlet supports various parameters for authentication, connection, and filtering results.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUGitStatus.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PSUGitStatus [-AppToken <String>] [-ComputerName <String>] [-Integrated] -Commits [-Credential <PSCredential>] [-First <UInt64>] [-IncludeTotalCount] [-Skip <UInt64>] [-TrustCertificate] [-UseDefaultCredentials] [<CommonParameters>]\n```\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PSUGitStatus [-AppToken <String>] [-ComputerName <String>] [-Integrated] [-Credential <PSCredential>] -EditInProgress [-First <UInt64>] [-IncludeTotalCount] [-Skip <UInt64>] [-TrustCertificate] [-UseDefaultCredentials] [<CommonParameters>]\n```\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PSUGitStatus [-AppToken <String>] [-ComputerName <String>] [-Integrated] [-Credential <PSCredential>] [-First <UInt64>] [-IncludeTotalCount] [-Skip <UInt64>] -UncommittedChanges [-TrustCertificate] [-UseDefaultCredentials] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Creating a Transfer List with Custom Dimensions\nDESCRIPTION: Creates a transfer list with custom width (50% of container) and height (200 pixels) dimensions.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTransferList.txt#2025-04-16_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDTransferList -Item {\n    New-UDTransferListItem -Name 'test1' -Value 1\n    New-UDTransferListItem -Name 'test2' -Value 2\n    New-UDTransferListItem -Name 'test3' -Value 3\n    New-UDTransferListItem -Name 'test4' -Value 4\n    New-UDTransferListItem -Name 'test5' -Value 5 \n} -Id 'transferlist6' -Width \"50%\" -Height '200'\n```\n\n----------------------------------------\n\nTITLE: Adding a New Portal Component with New-PSUPortalComponent in PowerShell\nDESCRIPTION: This snippet shows the syntax for using the New-PSUPortalComponent cmdlet to add a new portal component in PowerShell Universal. It includes various optional parameters for customizing the component creation.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUPortalComponent.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUPortalComponent [-AppToken <String>] [-AvailableInBranch <String[]>] [-ComputerName <String>] [-Credential <PSCredential>] [-Description <String>] [-Integrated] -Name <String> [-Title <String>] [-TrustCertificate] [-UseDefaultCredentials] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get-PSUJobParameter Syntax Patterns\nDESCRIPTION: Shows the three different syntax patterns for using Get-PSUJobParameter: with Job object, JobId, or RunId. Each pattern supports additional parameters for authentication and connection configuration.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUJobParameter.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PSUJobParameter [-AppToken <String>] [-ComputerName <String>] [-Integrated] -Job <Job> [-UseDefaultCredentials] [-Credential <PSCredential>] [-TrustCertificate] [<CommonParameters>]\n\nGet-PSUJobParameter [-AppToken <String>] [-ComputerName <String>] [-Integrated] -JobId <Int64> [-UseDefaultCredentials] [-Credential <PSCredential>] [-TrustCertificate] [<CommonParameters>]\n\nGet-PSUJobParameter [-AppToken <String>] [-ComputerName <String>] [-Integrated] [-UseDefaultCredentials] -RunId <Guid> [-Credential <PSCredential>] [-TrustCertificate] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Creating a Date Range Picker with OnAccept Callback in PowerShell\nDESCRIPTION: This example demonstrates how to create a date range picker with a label and an OnAccept callback that displays a toast message with the selected date range.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDDateRangePicker.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDateRangePicker -Id \"DateRangePicker\" -Label \"Select a date range\" -OnAccept {\n    param($DateRange)\n    Show-UDToast -Message \"You selected $DateRange\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Job by ID\nDESCRIPTION: Shows how to retrieve a specific job using its ID number from PowerShell Universal.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUJob.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nGet-UAJob -Id 10\n```\n\n----------------------------------------\n\nTITLE: Initiating a Text File Download with Start-UDDownload in PowerShell Universal Dashboard\nDESCRIPTION: This example demonstrates how to create a button that, when clicked, initiates the download of a text file. The file is generated with the specified name, content, and MIME type.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Start-UDDownload.txt#2025-04-16_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDButton -Text 'Click Me' -OnClick {\n    Start-UDDownload -FileName 'myfile.txt' -StringData 'Hello World' -ContentType 'text/plain'\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing an Editor with Existing Data in PowerShell\nDESCRIPTION: Creates an editor with pre-populated content using the -Data parameter. The data must be provided in the Editor.JS JSON block format.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/editor.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDEditor -Data $Data\n```\n\n----------------------------------------\n\nTITLE: Creating Nivo Calendar Chart\nDESCRIPTION: Generates a calendar heatmap chart showing data over a 365-day period. Creates random daily values and formats dates appropriately.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-visualization/charts.md#2025-04-16_snippet_16\n\nLANGUAGE: powershell\nCODE:\n```\n$Data = @()\nfor($i = 365; $i -gt 0; $i--) {\n    $Data += @{\n        day = (Get-Date).AddDays($i * -1).ToString(\"yyyy-MM-dd\")\n        value = Get-Random\n    }\n}\n\n$From = (Get-Date).AddDays(-365)\n$To = Get-Date\n\nNew-UDNivoChart -Calendar -Data $Data -From $From -To $To -Height 500 -Width 1000 -MarginTop 50 -MarginRight 130 -MarginBottom 50 -MarginLeft 60\n```\n\n----------------------------------------\n\nTITLE: Creating Nivo Line Chart\nDESCRIPTION: Implements a basic line chart with randomly generated data points. Shows time-series or sequential data visualization with customizable line width.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-visualization/charts.md#2025-04-16_snippet_18\n\nLANGUAGE: powershell\nCODE:\n```\n[array]$Data = [PSCustomObject]@{\n    id = \"DataSet\"\n    data = (1..20 | ForEach-Object {\n        $item = Get-Random -Max 500 \n        [PSCustomObject]@{\n            x = \"Test$item\"\n            y = $item\n        }\n    })\n}\nNew-UDNivoChart -Line -Data $Data -Height 500 -Width 1000 -LineWidth 1\n```\n\n----------------------------------------\n\nTITLE: Retrieving BuiltInLocalVault Secrets\nDESCRIPTION: PowerShell commands to install required modules and retrieve secrets from the BuiltInLocalVault for migration purposes.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/migration.md#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Module Micorosoft.PowerShell.SecretManagement\nInstall-Module SecretManagement.JustinGrote.CredMan\nRegister-SecretVault -Name 'BuiltInLocalVault' -ModuleName SecretManagement.JustinGrote.CredMan\nGet-SecretInfo -Vault BuiltInLocalVault\n$Secret = Get-Secret -Name 'TestApiKey' -Vault 'BuiltInLocalVault' -AsPlainText\n```\n\n----------------------------------------\n\nTITLE: Invoking an API Endpoint with Multiple Query String Parameters\nDESCRIPTION: Shows how to properly call an endpoint with multiple query string parameters, ensuring the URL is correctly formatted in PowerShell.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/endpoints.md#2025-04-16_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-RestMethod \"http://localhost:5000/user?Id=123&name=tim\"\n```\n\n----------------------------------------\n\nTITLE: Converting PowerShell Universal Database from v4 LiteDB to SQLite\nDESCRIPTION: Command to convert a PowerShell Universal v4 LiteDB database to SQLite format. Requires specifying the path to the database file to be converted.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/psucli.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\npsu db convert --path C:\\ProgramData\\UniversalAutomation\\databased.db\n```\n\n----------------------------------------\n\nTITLE: Configuring PowerShell Universal as a Windows Service\nDESCRIPTION: This PowerShell script creates and starts a new Windows Service for PowerShell Universal. It sets the service name, binary path, description, display name, and startup type.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/hosting/README.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-Service -Name \"PowerShellUniversal\" -BinaryPathName \"Universal.Server.exe --service\" -Description \"PowerShell Universal server service.\" -DisplayName \"PowerShell Universal\" -StartupType Automatic\nStart-Service PowerShellUniversal\n```\n\n----------------------------------------\n\nTITLE: Applying a PowerShell Universal Deployment with Pin\nDESCRIPTION: Retrieves and applies a deployment named 'Production' with version '1.0.1' and pins it to make the admin console and Management API read-only. This prevents users from editing resources in the cluster.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/deployments.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PSUDeployment -Name 'Production' -Version '1.0.1' -Pin | Select-PSUDeployment \n```\n\n----------------------------------------\n\nTITLE: Creating Color-Customized Bar Chart with PowerShell and ChartJS\nDESCRIPTION: Creates a bar chart with custom background and hover colors for displaying server RAM usage data. Includes specific color codes for various chart elements.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDChartJS.txt#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDElement -Tag 'div' -Attributes @{ style = @{ height = '10vh'; width = \"10vw\"; } } -Content {\n   New-UDChartJS -Data $Data -DataProperty UsedRAM -LabelProperty Server -Type 'bar' -BackgroundColor '#808978FF' -HoverBackgroundColor '#808978FF' -HoverBorderColor '#808978FF' -BorderColor '#808978FF' -Id 'chart7'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Button on a Universal App Page with PowerShell\nDESCRIPTION: Demonstrates how to add a simple button to a Universal App page that shows a toast message with the current page name when clicked.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/pages.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Text 'What page is this?' -OnClick {\n    Show-UDToast $UDPage\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a 24-Hour Time Picker in PowerShell\nDESCRIPTION: Creates a time picker that uses 24-hour time format instead of AM/PM. This is useful for regions that primarily use 24-hour time.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTimePicker.txt#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTimePicker -Id 'timepicker5' -DisableAmPm\n```\n\n----------------------------------------\n\nTITLE: Creating a Time Picker with German Locale in PowerShell\nDESCRIPTION: Creates a time picker with a German locale. This shows how to change the language of the time picker interface.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTimePicker.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTimePicker -Id 'timepicker4' -Locale \"de\"\n```\n\n----------------------------------------\n\nTITLE: Creating Line Charts in PowerShell\nDESCRIPTION: Specifies the parameter for creating line charts in a PowerShell charting module.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDNivoChart.txt#2025-04-16_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\n-Line [<SwitchParameter>]\n```\n\n----------------------------------------\n\nTITLE: Displaying Image from URL in PowerShell Universal Dashboard\nDESCRIPTION: Creates an image component that displays an image from a specified URL. Published Folders can be used to host image URLs within the application.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-visualization/image.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDImage -Url \"https://ironmansoftware.com/img/ps-logo.png\"\n```\n\n----------------------------------------\n\nTITLE: Creating Colored Badges with Icons\nDESCRIPTION: Demonstrates creating badges with different colors (secondary and error) attached to envelope icons.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDBadge.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDBadge -Color secondary -BadgeContent { 4 } -Children {\n  New-UDIcon -Icon Envelope -Size 2x\n} -Id 'badge2'\nNew-UDBadge -Color error -BadgeContent { 4 } -Children {\n  New-UDIcon -Icon Envelope -Size 2x\n} -Id 'badge3'\n```\n\n----------------------------------------\n\nTITLE: Defining Select Component Decorator\nDESCRIPTION: Component decorator definition that specifies parameters for creating a dropdown/select list element. Uses aliases 'Select' and 'ListDropdown' and provides card creation functionality.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDSelect.txt#2025-04-16_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\n[Component(\"Select\", \"ListDropdown\", \"Creates a new card.\")]\n```\n\n----------------------------------------\n\nTITLE: Creating Responsive Grid Layout in PowerShell\nDESCRIPTION: Creates a responsive grid layout where cards take full width on small screens (12 columns) and 4 columns on large screens, enabling a responsive design.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDGrid.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDGrid -Container -Children {\n    New-UDGrid -Item -ExtraSmallSize 12 -LargeSize 4 -Children {\n       New-UDCard -Title \"Card 1\" -Content {\n           New-UDButton -Text \"Button 1\"\n       }\n   }\n    New-UDGrid -Item -ExtraSmallSize 12 -LargeSize 4  -Children {\n       New-UDCard -Title \"Card 1\" -Content {\n           New-UDButton -Text \"Button 2\"\n       }\n   }\n    New-UDGrid -Item -ExtraSmallSize 12 -LargeSize 4 -Children {\n       New-UDCard -Title \"Card 1\" -Content {\n           New-UDButton -Text \"Button 3\"\n       }\n   }\n} -Id \"grid2\"\n```\n\n----------------------------------------\n\nTITLE: Executing JavaScript in Portal Components\nDESCRIPTION: Demonstrates how to execute JavaScript code from PowerShell using the JavaScript service. Shows both void execution and value return scenarios.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/portal/portal-widgets/services.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nfunction OnClick {\n    #Don't return a value    \n    $JavaScript.InvokeVoid(\"alert('Hello!')\")\n    \n    #Return a value\n    $Value = $JavaScript.Invoke(\"'String'\")\n    $Message.Success($Value)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Backdrop with Button Control\nDESCRIPTION: Shows how to create a backdrop that can be dynamically opened using a button. The backdrop includes text content and can be closed by clicking on it.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDBackdrop.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDBackdrop -Children {\n    New-UDTypography -Text 'Hello World'\n}  -OnClick {\n    Set-UDElement -Id 'backdrop2' -Properties @{\n        open = $false\n    }\n} -Id 'backdrop2'\nNew-UDButton -Text 'Open Backdrop' -OnClick {\n    Set-UDElement -Id 'backdrop2' -Properties @{\n        open = $true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Slider with Custom Range Values in PowerShell\nDESCRIPTION: Creates a slider with a custom range from 10 to 1000.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/slider.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDSlider -Min 10 -Max 1000\n```\n\n----------------------------------------\n\nTITLE: Creating a Scheduled Endpoint with PowerShell\nDESCRIPTION: This example demonstrates how to create a scheduled endpoint that caches a random value every ten seconds and a button to display the cached value.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDEndpoint.txt#2025-04-16_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$Schedule = New-UDEndpointSchedule 10 -Second\nNew-UDEndpoint -Schedule $Schedule -Endpoint {\n    $Cache:Random = Get-Random\n}\nNew-UDButton -Text \"Get Random\" -OnClick {\n    Show-UDToast $Cache:Random\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Server Session Timeout\nDESCRIPTION: Sets the web server session timeout in the appsettings.json configuration file. The default timeout value is 25 minutes.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/sessions.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"SessionTimeout\": 25\n```\n\n----------------------------------------\n\nTITLE: Executing Universal Script with Parameters\nDESCRIPTION: Demonstrates how to invoke a PowerShell Universal script by providing the computer name and app token as parameters.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/management-api.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-PSUScript -Script $Script -ComputerName http://localhost:5000 -AppToken $AppToken\n```\n\n----------------------------------------\n\nTITLE: Basic Slider Implementation in PowerShell\nDESCRIPTION: Creates a basic slider with default settings and initial value of 1.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/slider.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDSlider -Value 1\n```\n\n----------------------------------------\n\nTITLE: Creating Published Folder with Default Document\nDESCRIPTION: Example demonstrating how to publish a website folder with a default document setting. When accessing the root URL, the server will automatically serve the index.html file.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUPublishedFolder.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUPublishedFolder -RequestPath '/website' -Path 'C:\\website' -DefaultDocument \"index.html\"\n```\n\n----------------------------------------\n\nTITLE: Clickable List Items Example\nDESCRIPTION: Demonstrates creating list items with click handlers that show toast notifications\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDList.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDList -Content {\n    New-UDListItem -Label 'Inbox' -Icon (New-UDIcon -Icon envelope -Size 3x) -SubTitle 'New Stuff' -OnClick {\n        Show-UDToast -Message 'Inbox Clicked'\n    }\n    New-UDListItem -Label 'Drafts' -Icon (New-UDIcon -Icon edit -Size 3x) -SubTitle \"Stuff I'm working on \" -OnClick {\n        Show-UDToast -Message 'Drafts Clicked'\n    }\n} -Id 'list3'\n```\n\n----------------------------------------\n\nTITLE: Creating Alerts with Text and Title\nDESCRIPTION: Demonstrates creating alerts with both title and text content, showing how to add descriptive messages to each severity level.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDAlert.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDStack -Content {\n    New-UDAlert -Severity 'error' -Title 'Error' -Text 'This is an error alert' -Id 'alert5'\n    New-UDAlert -Severity 'warning'  -Title 'Warning' -Text 'This is an warning alert' -Id 'alert6'\n    New-UDAlert -Severity 'info' -Title 'Info' -Text 'This is an error info' -Id 'alert7'\n    New-UDAlert -Severity 'success' -Title 'Success' -Text 'This is an success alert' -Id 'alert8'\n} -Direction 'column'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Job Parameters in PowerShell Universal\nDESCRIPTION: Example of using Get-PSUJobParameter cmdlet to retrieve parameters for a specific job using JobId. The cmdlet returns parameter information for jobs in PowerShell Universal.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUJobParameter.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-UAJobParameter -JobId 10\n```\n\n----------------------------------------\n\nTITLE: Customizing Column Content with Context in Markup\nDESCRIPTION: This snippet illustrates how to customize column content using the $Context variable to reference the current row. It displays the Name property and uses an Alert component for the Status.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/portal/portal-widgets/tables.md#2025-04-16_snippet_2\n\nLANGUAGE: markup\nCODE:\n```\n<Table DataSource=\"$Services\">\n    <PropertyColumn Property=\"Name\"></PropertyColumn>\n    <PropertyColumn Property=\"Status\">\n        <Alert Message=\"$context.Status\" />\n    </PropertyColumn>\n</Table>\n```\n\n----------------------------------------\n\nTITLE: Executing PowerShell Universal Cmdlet with Direct Authentication\nDESCRIPTION: Shows how to use PowerShell Universal cmdlets with direct authentication, which is useful in multi-user environments to avoid sharing connection information across the process.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/module.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PSUJob -ComputerName http://localhost:5000 -AppToken xyz123\n```\n\n----------------------------------------\n\nTITLE: Creating PSU Identity with Administrator Role in PowerShell\nDESCRIPTION: This example demonstrates how to create a new identity named 'Adam' in PowerShell Universal and assign it the Administrator role. It first retrieves the Administrator role using Get-UARole, then uses New-UAIdentity to create the identity.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUIdentity.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$Role = Get-UARole -Name 'Administrator'\nNew-UAIdentity -Name 'Adam'\n```\n\n----------------------------------------\n\nTITLE: Creating Doughnut Chart with PowerShell and ChartJS\nDESCRIPTION: Creates a doughnut chart displaying server RAM usage data with custom dimensions. The chart uses server names as labels and RAM usage as data points.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDChartJS.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDElement -Tag 'div' -Attributes @{ style = @{ height = '20vh'; width = \"10vw\"; } } -Content {\n   New-UDChartJS -Data $Data -DataProperty UsedRAM -LabelProperty Server -Type 'doughnut' -Id 'chart4'\n}\n```\n\n----------------------------------------\n\nTITLE: Design Mode Grid Layout\nDESCRIPTION: Creates a grid layout in design mode that enables copying the current layout as JSON, with draggable and resizable cards.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDGridLayout.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDGridLayout -Content {\n    New-UDCard -Text \"Card 3\" -Id \"card3\"\n    New-UDCard -Text \"Card 4\" -Id \"card4\"\n} -Id 'gridLayout2' -Design -Draggable -Resizable -Layout '{\"lg\":[{\"w\":2,\"h\":3,\"x\":0,\"y\":0,\"i\":\"grid-element-card3\",\"moved\":false,\"static\":false},{\"w\":2,\"h\":3,\"x\":2,\"y\":0,\"i\":\"grid-element-card4\",\"moved\":false,\"static\":false}]}'\n```\n\n----------------------------------------\n\nTITLE: React Component Implementation\nDESCRIPTION: React component implementation that handles properties passed from PowerShell.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/custom-components/building-custom-components.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { withComponentFeatures } from 'universal-dashboard'\nimport * as Icons from 'react-icons/bs';\nimport { IconContext } from 'react-icons/lib';\nconst UDComponent = props => {\n    return <IconContext.Provider value={{ ...props }}>\n        {React.createElement(Icons[props.icon])}\n    </IconContext.Provider>\n}\n\nexport default withComponentFeatures(UDComponent)\n```\n\n----------------------------------------\n\nTITLE: New-UDMapVectorLayer Circle Syntax\nDESCRIPTION: Creates a circular vector layer on a map with specified latitude, longitude, and radius. Supports customization of color, opacity, and popup content.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDMapVectorLayer.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDMapVectorLayer [-Id <String>] [-Color <DashboardColor>] [-FillColor <DashboardColor>] [-FillOpacity <Double>] [-Weight <Int32>] [-Opacity <Double>] -Circle -Latitude <Double> -Longitude <Double> -Radius <Int32> [-Popup <Object>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Creating Form with Custom CSS Class\nDESCRIPTION: Shows how to add a custom CSS class to a form for styling purposes\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDForm.txt#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDForm -Id 'form7' -Content {\n    New-UDTextbox -Id 'form7Textbox' -Label 'Name'\n} -OnSubmit {\n    Show-UDToast -Message ($EventData.form7Textbox)\n} -ClassName 'my-form'\n```\n\n----------------------------------------\n\nTITLE: Creating an Expansion Panel Group with Icons in PowerShell\nDESCRIPTION: This example demonstrates how to create an expansion panel group where each panel has an associated icon. It uses the New-UDIcon function to create icons for each panel.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDExpansionPanelGroup.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDExpansionPanelGroup -Id 'expandsionPanelGroup4' -Children {\n    New-UDExpansionPanel -Title \"Hello\" -Content {} -Icon (New-UDIcon -Icon 'Users') -Id 'expansionPanel8'\n    New-UDExpansionPanel -Title \"Hello\" -Content {} -Icon (New-UDIcon -Icon 'User') -Id 'expansionPanel9'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an HTML Editor with Dynamic Content Update in PowerShell\nDESCRIPTION: This example shows how to create an HTML Editor.JS editor that updates a pre tag with the HTML content when it changes.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDEditor.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDEditor -Format html -OnChange {\n    Set-UDElement -Id 'test' -Content {\n        $body\n    }\n} \nNew-UDElement -Tag pre -Id 'test'\n```\n\n----------------------------------------\n\nTITLE: Generating Data for Script Table Widget in PowerShell\nDESCRIPTION: This snippet demonstrates how to generate data for a Script Table widget. It retrieves process information, selecting the Name and Id properties of each process.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/portal/portal-widgets/README.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-Process | Select-Object Name, Id\n```\n\n----------------------------------------\n\nTITLE: Creating Linear Indeterminate Progress in PowerShell for Universal Apps\nDESCRIPTION: This snippet shows how to create a linear indeterminate progress indicator using the New-UDProgress cmdlet without any parameters in PowerShell for Universal Apps.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/feedback/progress.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDProgress\n```\n\n----------------------------------------\n\nTITLE: Creating Single-Page Dashboard in PowerShell Universal\nDESCRIPTION: This example demonstrates how to create a simple dashboard with a single page using the New-UDDashboard cmdlet. It sets a title for the dashboard and adds a typography element with text content.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDDashboard.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDashboard -Title 'My Dashboard' -Content {\n    New-UDTypography -Text 'Hello, world!'\n}\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Element Addition in Universal Dashboard (PowerShell)\nDESCRIPTION: This example shows how to add an element to a parent div and broadcast the change to all connected dashboards when a button is clicked. It uses the -Broadcast parameter of Add-UDElement.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Add-UDElement.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDElement -Tag 'div' -Id 'addElement2' -Content {}\nNew-UDButton -Text 'Click Me' -OnClick {\n    Add-UDElement -ParentId 'addElement2' -Content {\n        New-UDTypography -Text 'Hello World'\n    } -Broadcast\n}\n```\n\n----------------------------------------\n\nTITLE: Creating App with Typography\nDESCRIPTION: Shows how to create an app with basic typography content and custom title.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/building-dashboards.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDApp -Title 'My New Dashboard' -Content {\n    New-UDTypography -Text 'Hello!'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PowerShell Universal App with Session Timeout\nDESCRIPTION: Creates a new PowerShell Universal app with a custom session timeout of 30 minutes. The session timeout is sliding and won't expire while the window remains open and active.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/sessions.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUApp -Name 'dashboard' -BaseUrl / -SessionTimeout 30\n```\n\n----------------------------------------\n\nTITLE: Creating Typography with Theme-Based Styling in PowerShell\nDESCRIPTION: Creates a typography component with red color using the theme-based Sx property instead of Style.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTypography.txt#2025-04-16_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDTypography -Text \"Hello World\" -Id \"typography11\" -Sx @{color = \"red\"}\n```\n\n----------------------------------------\n\nTITLE: Styled PowerShell Syntax Highlighting\nDESCRIPTION: Shows how to apply a custom visual style (VS theme) to the syntax highlighter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDSyntaxHighlighter.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDSyntaxHighlighter -Code 'Write-Host \"Hello World\"' -Language powershell -Style 'vs'\n```\n\n----------------------------------------\n\nTITLE: ConvertTo-UDObject Cmdlet Syntax\nDESCRIPTION: The main syntax for the ConvertTo-UDObject cmdlet. Takes an optional InputObject parameter and requires a Process script block parameter. Supports common PowerShell parameters.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/ConvertTo-UDObject.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConvertTo-UDObject [[-InputObject] <Object>] -Process <ScriptBlock> [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Creating a Styled Chip with Custom Background and Text Color in PowerShell\nDESCRIPTION: This example demonstrates how to create a chip with custom styling, including background color and text color.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDChip.txt#2025-04-16_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDChip -Style @{background = 'red'; color = 'white'} -Label 'Styled' -Icon (New-UDIcon -Icon 'user') -Id 'chip9'\n```\n\n----------------------------------------\n\nTITLE: Configuring Material UI Paperbase Theme in PowerShell\nDESCRIPTION: Defines a comprehensive theme configuration object for Material UI components including palette colors, typography, shape properties, and component-specific overrides. Sets up styling for drawers, buttons, tabs, icons, tooltips, list items, and avatars.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/themes/README.md#2025-04-16_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\n$Theme = @{\n  palette = @{\n    primary = @{\n      light = '#63ccff'\n      main = '#009be5'\n      dark = '#006db3'\n    }\n  }\n  typography = @{\n    h5 = @{\n      fontWeight = 500\n      fontSize = 26\n      letterSpacing = 0.5\n    }\n  }\n  shape = @{\n    borderRadius = 8\n  }\n  mixins = @{\n    toolbar = @{\n      minHeight = 48\n    }\n  }\n  overrides = @{\n    MuiDrawer = @{\n        paper = @{\n          backgroundColor = '#081627'\n        }\n    }\n    MuiButton = @{\n        label = @{\n            textTransform = 'none'\n        }\n        contained = @{\n          boxShadow = 'none'\n          '&:active' = @{\n            boxShadow = 'none'\n          }\n        }\n    }\n    MuiTabs = @{\n        root = @{\n          marginLeft = 1\n        }\n        indicator = @{\n          height = 3\n          borderTopLeftRadius = 3\n          borderTopRightRadius = 3\n          backgroundColor = '#000'\n        }\n    }\n    MuiTab = @{\n        root = @{\n            textTransform = 'none'\n            margin = '0 16px'\n            minWidth = 0\n            padding = 0\n        }\n    }\n    MuiIconButton = @{\n        root = @{\n          padding = 1\n        }\n    }\n    MuiTooltip = @{\n        tooltip = @{\n          borderRadius = 4\n        }\n    }\n    MuiDivider = @{\n        root = @{\n          backgroundColor = 'rgb(255,255,255,0.15)'\n        }\n    }\n    MuiListItemButton = @{\n        root = @{\n          '&.Mui-selected' = @{\n            color = '#4fc3f7'\n          }\n        }\n    }\n    MuiListItemText = @{\n        primary = @{\n            color = 'rgba(255, 255, 255, 0.7) '\n          fontSize = 14\n          fontWeight = 500\n        }\n    }\n    MuiListItemIcon = @{\n        root = @{\n          color = 'rgba(255, 255, 255, 0.7) '\n          minWidth = 'auto'\n          marginRight = 2\n          '& svg' = @{\n            fontSize = 20\n          }\n        }\n    }\n    MuiAvatar = @{\n        root = @{\n          width = 32\n          height = 32\n        }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Function-Based Table Creation in PowerShell Universal App\nDESCRIPTION: This snippet demonstrates how to wrap table creation logic within a function for better organization and reusability in a PowerShell Universal app. It creates a process table with name and ID columns, and uses the function in the app content.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/best-practices.md#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nfunction New-ProcessTable {\n    $Data = Get-Process\n    $Columns = @( \n        New-UDTableColumn -Title 'Name' -Property 'Name'\n        New-UDTableColumn -Title 'Id' -Property 'Id'\n    )\n    New-UDTable -Data $Data -Columns $Columns -ShowSearch\n}\n\nNew-UDApp -Content {\n    New-ProcessTable\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Schedules for a Specific Script in PowerShell Universal\nDESCRIPTION: This example demonstrates how to get all schedules associated with a particular script. It retrieves the script object first and then uses it to filter schedules.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUSchedule.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$Script = Get-UAScript -Name 'Script.ps1'\nGet-UASchedule -Script $Script\n```\n\n----------------------------------------\n\nTITLE: Skipping Steps in PowerShell Stepper\nDESCRIPTION: Creates a stepper that skips to a specific step using the -ActiveStep parameter in New-UDValidationResult. This example moves the user directly to the third step after completing the first step.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/navigation/stepper.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDStepper -Steps {\n    New-UDStep -OnLoad {\n        New-UDElement -tag 'div' -Content { \"Step 1\" }\n        New-UDTextbox -Id 'txtStep1' -Value $EventData.Context.txtStep1\n    } -Label \"Step 1\"\n    New-UDStep -OnLoad {\n        New-UDElement -tag 'div' -Content { \"Step 2\" }\n        New-UDElement -tag 'div' -Content { \"Previous data: $Body\" }\n        New-UDTextbox -Id 'txtStep2' -Value $EventData.Context.txtStep2\n    } -Label \"Step 2\"\n    New-UDStep -OnLoad {\n        New-UDElement -tag 'div' -Content { \"Step 3\" }\n        New-UDElement -tag 'div' -Content { \"Previous data: $Body\" }\n        New-UDTextbox -Id 'txtStep3' -Value $EventData.Context.txtStep3\n    } -Label \"Step 3\"\n} -OnFinish {\n    New-UDTypography -Text 'Nice! You did it!' -Variant h3\n    New-UDElement -Tag 'div' -Id 'result' -Content {$Body}\n} -OnValidateStep {\n    $Context = $EventData\n    if ($Context.CurrentStep -eq 0 -and $Context.Context.txtStep1 -eq 'bad')\n    {\n        New-UDValidationResult \n    }\n    else\n    {\n        New-UDValidationResult -Valid -ActiveStep 2\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Module Function Definition\nDESCRIPTION: Example of defining a simple PowerShell function within a module that can be used as a script target.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/automation/scripts/README.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nfunction Show-HelloWorld {\n    param($Name)\n    \"Hello, $Name!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Button with an Icon in PowerShell\nDESCRIPTION: Shows how to create a button that includes an icon using the New-UDIcon cmdlet within the New-UDButton command.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDButton.txt#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Icon (New-UDIcon -Icon 'User') -Text 'View User' -Id 'button17'\n```\n\n----------------------------------------\n\nTITLE: Adjusting Rating Component Size\nDESCRIPTION: Shows how to modify the size of the rating component icons to 'large'.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/rating.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDRating -Size large\n```\n\n----------------------------------------\n\nTITLE: New-UDMapVectorLayer GeoJSON Syntax\nDESCRIPTION: Creates a vector layer from GeoJSON data, allowing complex geographic shapes to be rendered on the map. Supports standard vector layer styling options.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDMapVectorLayer.txt#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDMapVectorLayer [-Id <String>] [-Color <DashboardColor>] [-FillColor <DashboardColor>] [-FillOpacity <Double>] [-Weight <Int32>] [-Opacity <Double>] -GeoJSON <String> [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Granting an App Token using PowerShell and Management API\nDESCRIPTION: PowerShell example showing how to authenticate with the PowerShell Universal API and request a new app token for the current user. The response includes the token value, identity information, roles, and expiration details.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/security/app-tokens.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\Users\\adamr> Invoke-RestMethod http://localhost:5000/api/v1/signin -Method POST -Body (@{ username = 'admin'; password = 'test' } | ConvertTo-Json) -SessionVariable Session -ContentType 'application/json'\nPS C:\\Users\\adamr> Invoke-RestMethod http://localhost:5000/api/v1/apptoken/grant  -WebSession $Session\n\nid          : 3\ntoken       : eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2Ns\n              YWltcy9uYW1lIjoiYWRtaW4iLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9oYXNoI\n              joiYjJlOGM4MDktMjE0NS00NjhhLWI4NTEtYjU0MjVhZDgzOTQ2Iiwic3ViIjoiUG93ZXJTaGVsbFVuaXZlcnNhbCIsImh0dHA6Ly9zY2\n              hlbWFzLm1pY3Jvc29mdC5jb20vd3MvMjAwOC8wNi9pZGVudGl0eS9jbGFpbXMvcm9sZSI6WyJBZG1pbmlzdHJhdG9yIiwiT3BlcmF0b3I\n              iLCJSZWFkZXIiXSwibmJmIjoxNTkzMTkyMjY1LCJleHAiOjE2MjQ3MjgyNjUsImlzcyI6Iklyb25tYW5Tb2Z0d2FyZSIsImF1ZCI6IlBv\n              d2VyU2hlbGxVbml2ZXJzYWwifQ.hnKyXe8C4kbrmkeeUFr-LUDjVr-xP7fRWwgClcrnxfc\nidentity    : @{id=3; name=admin; source=0; role=}\nrevoked     : False\nrole        : Administrator, Operator, Reader\ncreated     : 26/06/2020 17:24:25\nexpiration  : 26/06/2021 17:24:25\nrevokedDate : 01/01/0001 00:00:00\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Timeline in PowerShell with New-UDTimeline\nDESCRIPTION: This example demonstrates how to create a basic timeline using the New-UDTimeline cmdlet. It includes multiple timeline items with content and opposite content representing events and their times.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTimeline.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTimeline -Children {\n    New-UDTimelineItem -Content {\n        'Breakfast'\n    } -OppositeContent {\n        '7:45 AM'\n    } \n    New-UDTimelineItem -Content {\n        'Welcome Message'\n    } -OppositeContent {\n        '9:00 AM'\n    }\n    New-UDTimelineItem -Content {\n        'State of the Shell'\n    } -OppositeContent {\n        '9:30 AM'\n   }\n    New-UDTimelineItem -Content {\n        'General Session'\n    } -OppositeContent {\n        '11:00 AM'\n    }\n} -Id 'timeline1'\n```\n\n----------------------------------------\n\nTITLE: Creating a Switch with OnChange Event Handler in PowerShell\nDESCRIPTION: Creates a switch component with an event handler that shows a toast message when the switch state changes. The $EventData variable contains the new state of the switch (true or false).\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDSwitch.txt#2025-04-16_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDSwitch -Id 'switch2' -Checked $true -OnChange {\n    Show-UDToast -Message \"Switch changed to $($EventData)\"\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Data from Specific Clients using PowerShell in PowerShell Universal\nDESCRIPTION: This snippet demonstrates how to send data to an individual client and receive a result. It first gets a specific connection, sends an event to that connection, and then displays the result using Show-UDToast.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/event-hubs.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$Connection = Get-PSUEventHubConnection | Where-Object UserName -eq 'Admin'\n$Result = Send-PSUEvent -Hub 'Hub' -Data 'Say Hello!' -Connectionid $Connection.ConnectionId\nShow-UDToast $Result\n```\n\n----------------------------------------\n\nTITLE: Enabling Search Functionality in Universal Dashboard Tables\nDESCRIPTION: This example shows how to enable search functionality for specific columns in a Universal Dashboard table. It uses the -IncludeInSearch parameter to include the Dessert column in the search.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTable.txt#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\n$Data = @(\n    @{Dessert = 'Frozen yoghurt'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Ice cream sandwich'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Eclair'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Cupcake'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Gingerbread'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n) \n\n$Columns = @(\n    New-UDTableColumn -Property Dessert -Title \"A Dessert\" -IncludeInSearch\n    New-UDTableColumn -Property Calories -Title Calories \n    New-UDTableColumn -Property Fat -Title Fat \n    New-UDTableColumn -Property Carbs -Title Carbs \n    New-UDTableColumn -Property Protein -Title Protein \n)\n\nNew-UDTable -Id 'table6' -Data $Data -Columns $Columns -ShowSearch\n```\n\n----------------------------------------\n\nTITLE: Creating a PowerShell Universal Deployment with PowerShell Module\nDESCRIPTION: Creates a new PowerShell Universal deployment named 'Production' with version '1.0.1' and saves it as a NuPkg file. This packages the current state of the PowerShell Universal repository for the connected computer.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/deployments.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUDeployment -Name 'Production' -Version '1.0.1' -Path .\\production.1.0.1.nupkg\n```\n\n----------------------------------------\n\nTITLE: Creating a TransferList with Search Functionality in PowerShell Universal Dashboard\nDESCRIPTION: Creates a transfer list with a search box to filter items using the -ShowSearch parameter. This example creates a list with 5 test items that can be filtered by using the search functionality.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTransferList.txt#2025-04-16_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTransferList -Item {\n    New-UDTransferListItem -Name 'test1' -Value 1\n    New-UDTransferListItem -Name 'test2' -Value 2\n    New-UDTransferListItem -Name 'test3' -Value 3\n    New-UDTransferListItem -Name 'test4' -Value 4\n    New-UDTransferListItem -Name 'test5' -Value 5\n} -Id 'transferlist8' -ShowSearch\n```\n\n----------------------------------------\n\nTITLE: DataGrid with Detail Content\nDESCRIPTION: Implements a data grid with expandable detail content. Shows how to add additional information for each row.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDDataGrid.txt#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDataGrid -LoadRows {\n    $Data = @(\n        @{ Name = 'Adam'; Number = Get-Random }\n        @{ Name = 'Tom'; Number = Get-Random }\n        @{ Name = 'Sarah'; Number = Get-Random }\n    )\n    @{\n        rows     = $Data \n        rowCount = $Data.Length\n    }\n} -Columns @(\n    New-UDDataGridColumn -Field 'Name'\n    New-UDDataGridColumn -Field 'Number'\n) -LoadDetailContent {\n    New-UDAlert -Text $EventData.row.Name\n} -Id 'dataGrid4'\n```\n\n----------------------------------------\n\nTITLE: New-UDTextbox Cmdlet Syntax in PowerShell\nDESCRIPTION: Defines the syntax for the New-UDTextbox cmdlet, including all available parameters and their positions. This cmdlet is used to create customizable textbox components in Universal Dashboard.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTextbox.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTextbox [[-Id] <String>] [[-Label] <String>] [[-Placeholder] <String>] [[-Value] <String>] [[-Type] <String>] [-Disabled] [[-Icon] <Object>] [-Autofocus] [-Multiline] [[-Rows] <Int32>] [[-RowsMax] <Int32>] [-FullWidth] [[-Variant] <String>] [[-ClassName] <String>] [[-OnEnter] <Endpoint>] [[-OnBlur] <Endpoint>] [-Shrink] [[-OnValidate] <Endpoint>] [[-HelperText] <String>] [[-OnChange] <Endpoint>] [[-Minimum] <Int32>] [[-Maximum] <Int32>] [[-MaximumLength] <Int32>] [[-Sx] <Hashtable>] [[-Style] <Hashtable>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Creating an Expansion Panel Group in PowerShell\nDESCRIPTION: This example demonstrates how to create an expansion panel group with three panels, one of which is initially active. It shows the basic structure and usage of the New-UDExpansionPanelGroup and New-UDExpansionPanel functions.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDExpansionPanelGroup.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDExpansionPanelGroup -Id 'expandsionPanelGroup1' -Children {\n    New-UDExpansionPanel -Title \"Hello\" -Content {} -Active -Id 'expansionPanel1'\n    New-UDExpansionPanel -Title \"Hello\" -Content {\n        New-UDElement -Tag 'div' -Content { \"Hello\" }\n    } -Id 'expansionPanel2'\n    New-UDExpansionPanel -Title \"Hello\" -Content {\n       New-UDElement -Tag 'div' -id 'expEndpointDiv' -Content { \"Hello\" }\n    } -Id 'expansionPanel3'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Multiple Selection Select Component with Checkboxes in PowerShell\nDESCRIPTION: This example demonstrates how to create a select component that allows multiple selections with checkboxes using the New-UDSelect function.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDSelect.txt#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDSelect -Label 'Select' -Id 'select4' -Option {\n    New-UDSelectOption -Name \"One\" -Value 1\n    New-UDSelectOption -Name \"Two\" -Value 2\n    New-UDSelectOption -Name \"Three\" -Value 3\n} -Multiple -FullWidth -Checkbox\n```\n\n----------------------------------------\n\nTITLE: Creating a Menu with Items using New-UDMenu and New-UDMenuItem in PowerShell\nDESCRIPTION: This example demonstrates how to create a menu with multiple menu items using the New-UDMenu and New-UDMenuItem commands. It includes an OnChange event handler for the menu and three menu items.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDMenuItem.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDMenu -Text 'Click Me' -OnChange {\n    Show-UDToast $EventData\n} -Children {\n    New-UDMenuItem -Text 'Test'\n    New-UDMenuItem -Text 'Test2'\n    New-UDMenuItem -Text 'Test3'\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Background and Header Colors in PowerShell Universal App\nDESCRIPTION: Demonstrates how to change the page background color and header color in a PowerShell Universal app by modifying the theme's palette properties.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/themes/README.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n$Theme = @{\n    palette = @{\n        primary = @{\n            main = '#876a38'\n        }\n        background = @{\n            default = '#876a38'\n        }\n    }\n}\nNew-UDApp -Theme $Theme -Title 'Hello' -Content {\n    New-UDButton -Text 'Hello' \n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Editor with OnChange Event Handler in PowerShell\nDESCRIPTION: Creates an editor with an OnChange event handler that displays a toast with the current editor content. The $EventData variable contains the current status of the editor in the default JSON format.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/editor.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDEditor -OnChange {\n    Show-UDToast $EventData\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Event Data to PowerShell Universal Hub\nDESCRIPTION: Example demonstrates sending a data object containing a name to a specified event hub. This command broadcasts the event to all connected clients subscribed to 'MyHub'.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Invoke-PSUCommand.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-PSUCommand -Hub 'MyHub' -Data @{ Name = 'Adam' }\n```\n\n----------------------------------------\n\nTITLE: Implementing Active Directory Group Membership Check for Administrator Policy in PowerShell Universal\nDESCRIPTION: This script performs an LDAP query to check if a user is a member of a specific Active Directory group. It's used to determine if a user should be granted administrator access in PowerShell Universal.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/security/README.md#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nparam(\n$User\n)\n\n$UserName = ($User.Identity.Name)\n$UserName = $UserName.Substring($UserName.IndexOf('\\')+1,($UserName.Length -($UserName.IndexOf('\\')+1)))\n\n$IsMember = $false;\n\n# Perform LDAP Group Member Lookup\n$Searcher = New-Object DirectoryServices.DirectorySearcher\n$Searcher.SearchRoot = 'LDAP://CN=Users,DC=berg,DC=com' # INSERT ROOT LDAP HERE\n$Searcher.Filter = \"(&(objectCategory=person)(memberOf=CN=PowerShell Universal Admins,OU=Information Technology,DC=berg,DC=com))\" #GROUP INSERT DN TO CHECK HERE\n$Users = $Searcher.FindAll()\n$Users | ForEach-Object{\n    If($_.Properties.samaccountname -eq $UserName)\n    {\n        $IsMember = $true;\n        \"$UserName is a member of admin group!\" | Out-File \"C:\\test\\adgroup.txt\"\n    }\n    else {\n        \"$UserName is NOT member of admin group!\" | Out-File \"C:\\test\\adgroup.txt\"\n    }\n}\n\nreturn $IsMember\n```\n\n----------------------------------------\n\nTITLE: ConvertTo-JsonEx Cmdlet Syntax in PowerShell\nDESCRIPTION: Defines the syntax for using the ConvertTo-JsonEx cmdlet, including its parameters and their positions. This cmdlet converts an input object to JSON format with various options for customization.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/ConvertTo-JsonEx.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConvertTo-JsonEx [-InputObject] <Object> [-AsArray] [-Compress] [-Depth <Int32>] [-EnumsAsStrings] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Opening Links in New Windows with Universal Dashboard\nDESCRIPTION: Creates a link that opens the target URL in a new browser window or tab when clicked using the -OpenInNewWindow parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/navigation/link.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDLink -Text 'Ironman Software' -Url https://www.ironmansoftware.com -OpenInNewWindow\n```\n\n----------------------------------------\n\nTITLE: Positioning Toast Notifications in PowerShell Universal Dashboard\nDESCRIPTION: Demonstrates how to position a toast notification at the bottom right of the screen instead of using the default position.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Show-UDToast.txt#2025-04-16_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Text 'Show Toast' -OnClick {\n    Show-UDToast -Message 'Hello, World!' -Position 'bottomRight'\n} -Id 'toast11'\n```\n\n----------------------------------------\n\nTITLE: Hiding Content Below XS Breakpoint in Universal Dashboard\nDESCRIPTION: This snippet shows how to hide content at or below the XS breakpoint using the -Down parameter with New-UDHidden.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/layout/hidden.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDHidden -Down xs -Content {\n    New-UDTypography 'xs'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Expansion Panel Group in PowerShell\nDESCRIPTION: Demonstrates how to create a group of expansion panels using PowerShell cmdlets. The example shows two panels, one empty and one containing a div element with text content.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/surfaces/expansion-panel.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDExpansionPanelGroup -Children {\n    New-UDExpansionPanel -Title \"Hello\" -Children {}\n\n    New-UDExpansionPanel -Title \"Hello\" -Id 'expContent' -Children {\n        New-UDElement -Tag 'div' -Content { \"Hello\" }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Menu Implementation\nDESCRIPTION: Shows how to add a custom menu with modal dialog functionality.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/building-dashboards.md#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDApp -Title 'App' -Content {\n\n} -Menu {\n    New-UDMenuItem -Text 'Profile' -OnClick {\n        Show-UDModal -Content {\n            New-UDTypography -Text 'Welcome to your profile!'\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Autocomplete Options in PowerShell\nDESCRIPTION: Demonstrates how to create an autocomplete with dynamically filtered options based on user input using OnLoadOptions parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/automcomplete.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDAutocomplete -OnLoadOptions { \n    @('Test', 'Test2', 'Test3', 'Test4') | Where-Object { $_ -like \"*$Body*\" } | ConvertTo-Json\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Accordion-style Expansion Panel Group in PowerShell\nDESCRIPTION: This example shows how to create an accordion-style expansion panel group using the -Type parameter set to 'Accordion'. This type of group allows only one panel to be expanded at a time.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDExpansionPanelGroup.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDExpansionPanelGroup -Id 'expandsionPanelGroup3' -Children {\n    New-UDExpansionPanel -Title \"Hello\" -Content {} -Id 'expansionPanel6'\n    New-UDExpansionPanel -Title \"Hello\" -Content {} -Id 'expansionPanel7'\n} -Type 'Accordion'\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Rating Component in PowerShell\nDESCRIPTION: Creates a basic rating component with default settings.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/rating.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDRating\n```\n\n----------------------------------------\n\nTITLE: Setting Textbox Value in PowerShell\nDESCRIPTION: Demonstrates how to programmatically set the value of a textbox using Set-UDElement.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/textbox.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTextbox -Id 'txtExample' -Label 'Label' -Value 'Value'\n\nNew-UDButton -OnClick {\n\n    Set-UDElement -Id 'txtExample' -Properties @{\n        Value = \"test123\"\n    }\n\n} -Text \"Get textbox value\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Output Types for API Endpoint in PowerShell\nDESCRIPTION: Shows how to define output types and status codes for an API endpoint using YAML in the .OUTPUTS section of comment-based help.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/openapi.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.OUTPUTS\n200:\n  Description: This is an output value. \n  Content:\n      application/json: ADAccountType\n\n400:\n  Description: Invalid input\n#>\nparam()\n```\n\n----------------------------------------\n\nTITLE: Deleting Web App Files Using Kudu Command API\nDESCRIPTION: PowerShell script that uses the Kudu Command API to delete all files in the Web App directory before updating PowerShell Universal. Uses basic authentication with deployment credentials.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/hosting/azure.md#2025-04-16_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\n$Parameters = @{\n   Uri = \"https://psudemo2.scm.azurewebsites.net/api/command\"\n   Credential = (Get-Credential)\n   Body = (@{\n      command = \"rd /s /q D:\\home\\site\\wwwroot\"\n      dir = \"D:\\home\\site\\wwwroot\"\n   } | ConvertTo-Json)\n}\n\nInvoke-RestMethod @Parameters\n```\n\n----------------------------------------\n\nTITLE: Defining Enum and PSCredential Parameters in PowerShell Universal\nDESCRIPTION: Shows how to use System.Enum values and PSCredential type to create select boxes and credential inputs in the UI.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/automation/scripts/parameters.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nparam([System.DayOfWeek]$DayOfWeek)\n```\n\nLANGUAGE: powershell\nCODE:\n```\nparam(\n    [PSCredential]$Credential\n)\n```\n\n----------------------------------------\n\nTITLE: DataGrid with Advanced Column Options\nDESCRIPTION: Implements a data grid with advanced column configurations including alignment, headers, and menu options.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDDataGrid.txt#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDataGrid -LoadRows {\n    $Data = @(\n        @{ Name = 'Adam'; number = Get-Random }\n        @{ Name = 'Tom'; number = Get-Random }\n        @{ Name = 'Sarah'; number = Get-Random }\n    )\n    @{\n        rows     = $Data \n        rowCount = $Data.Length\n    }\n} -Columns @(\n    New-UDDataGridColumn -Field 'Name' -HeaderName 'A Name' -Flex 1 -HeaderAlign 'center' -Align 'center' -DisableColumnMenu\n    New-UDDataGridColumn -Field 'Number' -HeaderName 'A Number' -Flex 1 -HeaderAlign 'right' -Align 'right' -DisableColumnMenu\n) -Id 'dataGrid6'\n```\n\n----------------------------------------\n\nTITLE: Creating a Role with Policy in PowerShell Universal\nDESCRIPTION: This example demonstrates how to create a new role named 'Developers' with a policy that checks for a specific claim in the user's claims collection.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSURole.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSURole -Name 'Developers' -Policy {\n    param($User)\n\n    $User.Claims.HasClaim('myGroup')\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Toast Title Color in PowerShell Universal Dashboard\nDESCRIPTION: Demonstrates how to change the title color of a toast notification to red while keeping the standard message format.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Show-UDToast.txt#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Text 'Show Toast' -OnClick {\n    Show-UDToast -Message 'Hello, World!' -Title 'Toast Title' -TitleColor 'red'\n} -Id 'toast4'\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Styles to Image in PowerShell with New-UDImage\nDESCRIPTION: This example shows how to apply custom styles to an image component using the Attributes parameter of the New-UDImage function, specifically setting a border radius.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDImage.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDImage -Url \"https://ironmansoftware.com/img/ps-logo.png\" -Attributes @{ \n    style = @{ \n        borderRadius = '50%'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Authentication Result Example\nDESCRIPTION: Example showing how to create authentication results based on username validation. Returns success for username 'Adam' and an error message for other users.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUAuthenticationResult.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nparam($Credential)\n\nif ($Credential.UserName -eq 'Adam')\n{\n    New-PSUAuthenticationResult -UserName 'Adam' -Success\n}\nelse \n{\n    New-PSUAuthenticationResult -ErrorMessage \"Hey! You aren't Adam\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Cache Item in PowerShell Universal\nDESCRIPTION: Demonstrates how to set a basic cache item using Set-PSUCache cmdlet. The current date is stored as the value.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/cache.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PSUCache -Key \"CurrentDate\" -Value (Get-Date)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Modal in PowerShell with Show-UDModal\nDESCRIPTION: This example demonstrates how to create a basic modal dialog using the Show-UDModal cmdlet. It creates a button that, when clicked, displays a modal with a simple text content.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Show-UDModal.txt#2025-04-16_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDButton -Text 'Basic' -OnClick {\n    Show-UDModal -Content {\n        New-UDTypography -Text \"Hello\" -Id 'typography1'\n    }\n} -Id 'button1'\n```\n\n----------------------------------------\n\nTITLE: React Button Component Implementation\nDESCRIPTION: React implementation of a button component with event handling.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/custom-components/building-custom-components.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { withComponentFeatures } from 'universal-dashboard';\nimport { Button } from 'react95';\n\nconst UD95Button = props => {\n\n    const p = {\n        onClick: () => props.onClick()\n    }\n\n    return <Button {...p}>{props.text}</Button>\n}\n\nexport default withComponentFeatures(UD95Button);\n```\n\n----------------------------------------\n\nTITLE: Implementing Zoom Transition in PowerShell\nDESCRIPTION: Creates a zoom transition effect on a button with a checkbox toggle control. The transition zooms the element with a 1000ms duration.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTransition.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTransition -Zoom -In -Children {\n    New-UDButton -Text 'Click Me' -Id 'button3'\n} -Id 'transition3'  -Timeout 1000\nNew-UDCheckbox -Label 'Toggle' -OnChange {\n    Set-UDElement -Id 'transition3' -Properties @{\n        In = $EventData\n    }\n} -Checked $true\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Middleware in PowerShell Universal\nDESCRIPTION: This example demonstrates how to create a new middleware named 'Middle' that adds a cookie to the HTTP response. The middleware function takes an HttpContext parameter and returns a boolean value.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUMiddleware.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUMiddleware -Name 'Middle' -ScriptBlock {\n    param($HttpContext)\n    $HttpContext.Response.Cookies.Append('X-Test', \"Test\")\n    $true\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Collapse Transition in Universal Apps\nDESCRIPTION: Example of a collapse transition with a specified collapse height of 100. The transition collapses a card component in and out based on switch state.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/utilities/transitions.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTransition -Id 'test' -Content {\n    New-UDCard -Text \"Hey\"\n} -In -Collapse -CollapseHeight 100 -Timeout 1000\n\nNew-UDSwitch -OnChange {\n    Set-UDElement -Id 'test' -Properties @{\n        in = $EventData -eq 'True'\n    }\n} -Checked $true\n```\n\n----------------------------------------\n\nTITLE: Creating an Alternating Timeline in PowerShell Universal Apps\nDESCRIPTION: Creates a timeline with events alternating between left and right sides using the -Position parameter set to alternate. This creates a visually balanced layout for displaying event sequences.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/timeline.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTimeline -Children {\n    New-UDTimelineItem -Content {\n        'Breakfast'\n    } -OppositeContent {\n        '7:45 AM'\n    } \n    New-UDTimelineItem -Content {\n        'Welcome Message'\n    } -OppositeContent {\n        '9:00 AM'\n    }\n    New-UDTimelineItem -Content {\n        'State of the Shell'\n    } -OppositeContent {\n        '9:30 AM'\n    }\n    New-UDTimelineItem -Content {\n        'General Session'\n    } -OppositeContent {\n        '11:00 AM'\n    }\n} -Position alternate\n```\n\n----------------------------------------\n\nTITLE: Creating Multiline Textbox in PowerShell\nDESCRIPTION: Creates a multiline textbox for longer text input.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTextbox.txt#2025-04-16_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTextbox -Id 'textbox7' -Label 'Name' -Placeholder 'Enter your name' -Value 'John Doe' -Multiline\n```\n\n----------------------------------------\n\nTITLE: New-UDTable Cmdlet Syntax in PowerShell\nDESCRIPTION: Defines the syntax for the New-UDTable cmdlet, including all available parameters and their usage. It shows two different parameter sets for static and dynamic tables.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTable.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTable [-Id <String>] [-Title <String>] [-Data <Object[]>] [-Columns <Hashtable[]>] [-OnRowSelection <Endpoint>] [-ShowSort] [-ShowFilter] [-ShowSearch] [-Dense] [-ShowExport] [-StickyHeader] [-PageSize <Int32>] [-PageSizeOptions <Int32[]>] [-PaginationLocation <String>] [-ShowSelection] [-ShowPagination] [-Padding <String>] [-Size <String>] [-TextOption <Hashtable>] [-ExportOption <String[]>] [-OnExport <Endpoint>] [-DisablePageSizeAll] [-DefaultSortDirection <String>] [-HideToggleAllRowsSelected] [-DisableMultiSelect] [-DisableSortRemove] [-Icon <Hashtable>] [-ClassName <String>] [-ShowRefresh] [-ToolbarContent <ScriptBlock>] [-OnRowExpand <ScriptBlock>] [-MaxHeight <Int32>] [-Language <String>] [-RemoveCard] [-OnRowStyle <ScriptBlock>] [-HeaderStyle <Hashtable>] [-InitialState <Hashtable>] [<CommonParameters>]\n```\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTable [-Id <String>] [-Title <String>] -LoadRows <Endpoint> [-Columns <Hashtable[]>] [-OnRowSelection <Endpoint>] [-ShowSort] [-ShowFilter] [-ShowSearch] [-Dense] [-ShowExport] [-StickyHeader] [-PageSize <Int32>] [-PageSizeOptions <Int32[]>] [-PaginationLocation <String>] [-ShowSelection] [-ShowPagination] [-Padding <String>] [-Size <String>] [-TextOption <Hashtable>] [-ExportOption <String[]>] [-OnExport <Endpoint>] [-DisablePageSizeAll] [-DefaultSortDirection <String>] [-HideToggleAllRowsSelected] [-DisableMultiSelect] [-DisableSortRemove] [-Icon <Hashtable>] [-ClassName <String>] [-ShowRefresh] [-ToolbarContent <ScriptBlock>] [-OnRowExpand <ScriptBlock>] [-MaxHeight <Int32>] [-AutoRefresh] [-AutoRefreshInterval <Int32>] [-Language <String>] [-RemoveCard] [-OnRowStyle <ScriptBlock>] [-HeaderStyle <Hashtable>] [-InitialState <Hashtable>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Creating a Bubble Chart with New-UDChartJS in PowerShell\nDESCRIPTION: This example shows how to create a bubble chart using New-UDChartJS. It uses a dataset with x, y, and r properties to define the bubble positions and sizes.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDChartJS.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$Data = @(\n    @{ x = 1; y = 10; r = 15 }\n    @{ x = 12; y = 25; r = 35 }\n    @{ x = 8; y = 10; r = 95 }\n    @{ x = 6; y = 95; r = 25 }\n)\nNew-UDElement -Tag 'div' -Attributes @{ style = @{ height = '20vh'; width = \"20vw\"; } } -Content {\n   New-UDChartJS -Type 'bubble' -Data $Data  -Id 'chart2'\n}\n```\n\n----------------------------------------\n\nTITLE: List Items with Secondary Actions\nDESCRIPTION: Shows how to add secondary action buttons to list items\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDList.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDList -Content {\n    New-UDListItem -Label 'Inbox' -Icon (New-UDIcon -Icon envelope -Size 3x) -SubTitle 'New Stuff' -SecondaryAction {\n        New-UDButton -Text 'Secondary Action'\n    }\n    New-UDListItem -Label 'Drafts' -Icon (New-UDIcon -Icon edit -Size 3x) -SubTitle \"Stuff I'm working on \" -SecondaryAction {\n        New-UDButton -Text 'Secondary Action'\n    }\n} -Id 'list4'\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Transfer List in PowerShell\nDESCRIPTION: Creates a basic transfer list with five items that can be moved between lists.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTransferList.txt#2025-04-16_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDTransferList -Item {\n    New-UDTransferListItem -Name 'test1' -Value 1\n    New-UDTransferListItem -Name 'test2' -Value 2\n    New-UDTransferListItem -Name 'test3' -Value 3\n    New-UDTransferListItem -Name 'test4' -Value 4\n    New-UDTransferListItem -Name 'test5' -Value 5\n} -Id 'transferlist1'\n```\n\n----------------------------------------\n\nTITLE: Creating a Modal with Header and Footer in PowerShell using Show-UDModal\nDESCRIPTION: This example demonstrates how to create a modal with a header, content, and footer using the Show-UDModal cmdlet. It also includes dividers between sections.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Show-UDModal.txt#2025-04-16_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDButton -Text 'Header And Footer' -OnClick {\n    Show-UDModal -Content {\n        New-UDTypography -Text \"Hello\"\n    } -Header {\n        New-UDTypography -Text \"Header\" -Id 'header'\n    } -Footer {\n        New-UDButton -Text \"Close\" -OnClick { Hide-UDModal } -Id 'button6'\n    } -Dividers\n} -Id 'button5'\n```\n\n----------------------------------------\n\nTITLE: Persistent Runspace Environment Configuration\nDESCRIPTION: Shows how to configure a persistent runspace environment for maintaining state between API calls.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/endpoints.md#2025-04-16_snippet_27\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUEnvironment -Name 'Env' -Path 'powershell.exe' -PersistentRunspace\n```\n\n----------------------------------------\n\nTITLE: Migrating App Tokens Between PowerShell Universal Instances\nDESCRIPTION: PowerShell example for migrating tokens between systems using the management API. This is useful for high availability scenarios and requires the signing key to be consistent between instances. The request creates an app token with the same values as one from another system.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/security/app-tokens.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-RestMethod http://localhost:5000/api/v1/apptoken -Method POST -Body (@{\n        Token      = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1lIjoiQWRtaW4iLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9oYXNoIjoiMDhiYTFlMTktMjgyZi00YTRjLWIxZGUtNTY0Zjk3NWU2ODEwIiwic3ViIjoiUG93ZXJTaGVsbFVuaXZlcnNhbCIsImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd3MvMjAwOC8wNi9pZGVudGl0eS9jbGFpbXMvcm9sZSI6InBvbGljeSIsIm5iZiI6MTYzMzEwNjkzMywiZXhwIjoxNjQwODg2NDgwLCJpc3MiOiJJcm9ubWFuU29mdHdhcmUiLCJhdWQiOiJQb3dlclNoZWxsVW5pdmVyc2FsIn0.GHjJI3kMpcAY1pvOGLWOdPqC2-IPo0-4lJfHZwStmOk'\n        Identity   = @{\n            Name = 'Admin'\n        }\n        Role       = 'Administrator'\n        Expiration = (Get-Date).AddMonths(6)\n    } | ConvertTo-Json) -Headers @{\n    \"Content-Type\"  = \"application/json\";\n    \"Authorization\" = \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1lIjoiQWRtaW4iLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9oYXNoIjoiMjVjMzFlZTAtMGM4Mi00NzBiLWJkZGYtOGFmOTgxZGI2ZDdmIiwic3ViIjoiUG93ZXJTaGVsbFVuaXZlcnNhbCIsImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd3MvMjAwOC8wNi9pZGVudGl0eS9jbGFpbXMvcm9sZSI6IkFkbWluaXN0cmF0b3IiLCJuYmYiOjE2MzM2NDY5OTgsImV4cCI6MTYzNjIzODk0MCwiaXNzIjoiSXJvbm1hblNvZnR3YXJlIiwiYXVkIjoiUG93ZXJTaGVsbFVuaXZlcnNhbCJ9.jw2VCvtpOWpgnpIUlO8sTdK9Z5RMoWLmvYn0MDmzkNM\"   \n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Get-PSUStats in PowerShell\nDESCRIPTION: This example shows a simple usage of the Get-PSUStats cmdlet without any parameters. It returns statistics about the current PowerShell Universal instance.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUStats.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-UAStats\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Date for PowerShell Date Picker\nDESCRIPTION: Demonstrates setting a maximum selectable date for the date picker using the MaximumDate parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDDatePicker.txt#2025-04-16_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDatePicker -Id 'datepicker8' -Value '1-2-2020' -MaximumDate '1-1-2021'\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Editor in PowerShell\nDESCRIPTION: This example demonstrates how to create a basic Editor.JS editor using the New-UDEditor cmdlet with a specified ID.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDEditor.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDEditor -Id 'editor1'\n```\n\n----------------------------------------\n\nTITLE: Wait for PowerShell Universal Job Completion Example\nDESCRIPTION: Example demonstrating how to retrieve a job by ID and wait for it to finish execution using the Wait-PSUJob cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Wait-PSUJob.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$Job = Get-PSUJob -Id 12\nWait-PSUJob -Job $Job\n```\n\n----------------------------------------\n\nTITLE: Enabling Windows Authentication in PowerShell Universal's appsettings.json\nDESCRIPTION: JSON configuration example for enabling Windows Authentication in PowerShell Universal. This must be configured in addition to the IIS settings and web.config changes for Windows Authentication to work.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/hosting/hosting-iis.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n    \"Authentication\" : {\n    \"Windows\": {\n      \"Enabled\": \"true\"\n    },\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Roles with Azure Active Directory Group Mapping in PowerShell Universal\nDESCRIPTION: This code snippet shows how to configure roles in PowerShell Universal, including mapping an Azure Active Directory group to the Administrator role using its Object ID. It also demonstrates disabling other default roles.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/security/README.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSURole -Name Administrator -ClaimType 'groups' -ClaimValue '61849bf2-e44b-4057-b589-6cd1812d7545'\nNew-PSURole -Name \"Operator\" -Description \"Operators have access to manage and execute scripts, create other entities within PowerShell Universal but cannot manage PowerShell Universal itself.\" -Policy {} -Disabled\nNew-PSURole -Name \"Reader\" -Description \"Readers have read-only access to PowerShell Universal. They cannot make changes to any entity within the system.\" -Policy { } -Disabled \nNew-PSURole -Name \"Execute\" -Description \"Execute scripts within PowerShell Universal.\" -Policy { } -Disabled\nNew-PSURole -Name \"User\" -Description \"Does not have access to the admin console but can be assigned resources like APIs, scripts, dashboards and pages.\" -Policy { } -Disabled\n```\n\n----------------------------------------\n\nTITLE: Checkbox with Event Handler\nDESCRIPTION: Implements a checkbox with an OnChange event handler that displays a toast message.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/checkbox.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDCheckBox -OnChange {\n    Show-UDToast -Title 'Checkbox' -Message $Body\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Authorization Claims and Custom Roles in PowerShell Universal\nDESCRIPTION: Example demonstrates how to set up authentication with custom claims and roles. Shows authentication logic for an admin user, creating a custom claim, and defining a role policy that checks for the claim.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUAuthorizationClaim.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PSUAuthenticationMethod -ScriptBlock {\n    param([PSCredential]$Credential)\n\n    if ($Credential.UserName -eq 'admin')\n    {\n        New-PSUAuthenticationResult -Success -UserName 'admin' -Claims {\n            New-PSUAuthorizationClaim -Type 'MyRole' -Value 'MyValue' -ValueType 'String' -Issuer 'Something'\n        }\n    }\n    else \n    {\n        New-PSUAuthenticationResult -ErrorMessage 'Hello'\n    }\n}\n\nNew-PSURole -Name 'CustomRole' -Policy {\n    param($User)\n\n    $User.HasClaim(\"MyRole\", \"MyValue\")\n}\n```\n\n----------------------------------------\n\nTITLE: Variable Scoping in Event Handlers\nDESCRIPTION: Demonstrates variable scope accessibility within event handlers in Universal Apps.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/interaction.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n$MyVariable = \"Hello!\"\nNew-UDButton -Text 'Click Me' -OnClick {\n   Show-UDToast $MyVariable\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Markers with Popups to a Map in PowerShell\nDESCRIPTION: This example demonstrates how to add markers with popups to a map using New-UDMap. It includes a custom popup with an alert.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDMap.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDMap -Content {\n   New-UDMapRasterLayer -TileServer 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png' \n   New-UDMapMarker -Latitude \"51.105\" -Longitude \"-0.09\" -Popup (\n      New-UDMapPopup -Content {\n         New-UDAlert -Text \"Hello\"\n      } -MinWidth 200\n   )\n} -Latitude 51.505 -Longitude -0.09 -Zoom 13 -Height '25vh' -Id 'map3'\n```\n\n----------------------------------------\n\nTITLE: Configuring Branding in PowerShell Universal\nDESCRIPTION: This example demonstrates how to use the New-PSUBranding cmdlet to set custom branding elements in PowerShell Universal. It sets the login page image, app bar logo, and admin console title.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUBranding.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUBranding -LoginPageImage 'C:\\logo.png' -AppBarLogo 'C:\\logo.png' -AdminConsoleTitle 'My Admin Console'\n```\n\n----------------------------------------\n\nTITLE: PowerShell New-PSUSchedule with Cron Expression\nDESCRIPTION: Parameter set for creating a schedule using cron expressions. Allows for complex scheduling patterns using standard cron syntax.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUSchedule.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUSchedule [-Script] <Script> [-Cron] <String> [-AppToken <String>] [-ComputerName <String>] [-Credential <Variable>] [-TimeZone <String>] [-Environment <String>] [-Description <String>] [-Name <String>] [-UseDefaultCredentials] [-Condition <ScriptBlock>] [-Integrated] [-Paused] [-Timeout <Int32>] [-RandomDelay] [-AvailableInBranch <String[]>] [-Computer <String>] [-Parameters <Hashtable>] [-RandomDelayMaximum <Int32>] [-TrustCertificate] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Customizing Toast Title Size in PowerShell Universal Dashboard\nDESCRIPTION: Shows how to modify both the color and size of a toast notification title, making it red and large for greater emphasis.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Show-UDToast.txt#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Text 'Show Toast' -OnClick {\n    Show-UDToast -Message 'Hello, World!' -Title 'Toast Title' -TitleColor 'red' -TitleSize 'large'\n} -Id 'toast5'\n```\n\n----------------------------------------\n\nTITLE: Creating a Time Picker with OnChange Event in PowerShell\nDESCRIPTION: Creates a time picker with an OnChange script block that shows a toast message when the time is changed. The $EventData variable contains the selected time.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTimePicker.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTimePicker -Id 'timepicker2' -OnChange {\n    Show-UDToast -Message \"Time changed to $($EventData)\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Persistent Toast Notifications in PowerShell Universal Dashboard\nDESCRIPTION: Shows how to create a persistent toast notification that remains visible until explicitly hidden, and demonstrates how to hide it using Hide-UDToast with a specific ID.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Show-UDToast.txt#2025-04-16_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Text 'Show Toast' -OnClick {\n    Show-UDToast -Message 'Hello, World!' -Persistent -Id 'MyToast'\n} -Id 'toast9'\nNew-UDButton -Text 'Hide Toast' -OnClick {\n    Hide-UDToast -Id 'MyToast'\n} -Id 'toast10'\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Rating Value\nDESCRIPTION: Shows how to customize the maximum rating value to 10 stars instead of the default.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/rating.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDRating -Max 10\n```\n\n----------------------------------------\n\nTITLE: Creating a Switch with Check Style for Accessibility in PowerShell\nDESCRIPTION: Creates a switch with check and uncheck icons, designed for enhanced accessibility (particularly for colorblind users). This example also includes labels and custom label placement.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDSwitch.txt#2025-04-16_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDSwitch -Id 'switch6' -Checked $true -Label 'On' -UncheckedLabel 'Off' -LabelPlacement 'bottom' -CheckStyle\n```\n\n----------------------------------------\n\nTITLE: Creating an Exclusive Toggle Button Group with Icons in PowerShell\nDESCRIPTION: This example creates a toggle button group with exclusive selection (only one button can be selected at a time), containing three toggle buttons each with a user icon.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDToggleButtonGroup.txt#2025-04-16_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDToggleButtonGroup -Content {\n    New-UDToggleButton -Content {\n        New-UDIcon -Icon 'User'\n    }\n    New-UDToggleButton -Content {\n        New-UDIcon -Icon 'User'\n    }\n    New-UDToggleButton -Content {\n        New-UDIcon -Icon 'User'\n    } -Id 'test'\n} -Exclusive\n```\n\n----------------------------------------\n\nTITLE: Setting JWT Signing Key via Environment Variable\nDESCRIPTION: Example of setting the JWT signing key using an environment variable in PowerShell.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/settings.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$Env:Jwt__SigningKey = \"mySigningKey\"\n```\n\n----------------------------------------\n\nTITLE: Creating a 10-Second Interval Schedule in PowerShell for Universal Dashboard\nDESCRIPTION: This example demonstrates how to create a schedule that runs every 10 seconds using New-UDEndpointSchedule, and then uses that schedule with New-UDEndpoint to cache processes periodically.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDEndpointSchedule.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$Schedule = New-UDEndpointSchedule 10 -Second\nNew-UDEndpoint -Schedule $Schedule -Endpoint {\n    $Cache:Processes = Get-Process\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Windows-Specific App in PowerShell Universal\nDESCRIPTION: This code creates a new PowerShell Universal app named 'Windows' that is restricted to run only on computers in the 'Windows' computer group. It specifies the app's file path and base URL.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/computers.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUApp -Name 'Windows' -FilePath 'app.ps1' -BaseUrl '/app' -ComputerGroup Windows\n```\n\n----------------------------------------\n\nTITLE: Installing PowerShell Universal on Linux\nDESCRIPTION: This snippet demonstrates the installation of PowerShell Universal on Linux systems using a shell script.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/get-started.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Module Universal\nInstall-PSUServer\n```\n\n----------------------------------------\n\nTITLE: Building a Basic Static App with PowerShell Universal\nDESCRIPTION: This snippet demonstrates how to use the Publish-PSUStaticApp cmdlet to create a static app with a single UDRating component. The app is published to an output folder.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/static-apps.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPublish-PSUStaticApp -Definition { \n    New-UDApp -Content { \n       New-UDRating -Max 10 \n    } \n} -DestinationPath .\\output -Force \n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Icon Button in PowerShell\nDESCRIPTION: This example demonstrates how to create a basic icon button using the New-UDIconButton cmdlet with a user icon.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDIconButton.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDIconButton -Icon (New-UDIcon -Icon user -Size sm)  -Id 'iconButton1'\n```\n\n----------------------------------------\n\nTITLE: Creating a GET Endpoint Using PowerShell Universal Management API\nDESCRIPTION: Demonstrates how to create a REST API endpoint using the PowerShell Universal Management API. This requires specifying the computer name and app token for successful API calls.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUEndpoint.txt#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUEndpoint -Url \"/hello/\" -Method GET -Endpoint {\n    \"Hello user\"\n} -ComputerName http://localhost:5000 -AppToken 'appToken'\n\nPS C:\\> Invoke-RestMethod http://localhost:5000/hello/world -Headers @{ Authorization = \"Bearer appTokenGoesHere\" }\n```\n\n----------------------------------------\n\nTITLE: Using Cookie Authentication Session\nDESCRIPTION: Shows how to use an established cookie authentication session to access secure endpoints using the session variable.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/security.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-WebRequest http://localhost:5000/auth -WebSession $mySession\n```\n\n----------------------------------------\n\nTITLE: Creating Small Size Menu in PowerShell\nDESCRIPTION: Creates a menu with small size parameter, demonstrating size customization options.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDMenu.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDMenu -Text 'Click Me' -Children {\n       New-UDMenuItem -Text 'Test'\n       New-UDMenuItem -Text 'Test2'\n       New-UDMenuItem -Text 'Test3'\n} -Size small -Id 'menu4'\n```\n\n----------------------------------------\n\nTITLE: Configuring Locale for Date Picker\nDESCRIPTION: Sets the locale of the date picker to French, which changes the language and formatting of dates according to French conventions.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/date-picker.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDatePicker -Locale fr\n```\n\n----------------------------------------\n\nTITLE: Creating a Chip with Letter Avatar in PowerShell\nDESCRIPTION: This example shows how to create a chip with a letter avatar using the New-UDChip cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDChip.txt#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDChip -Avatar \"A\" -AvatarType letter -Label 'Avatar' -Id 'chip6'\n```\n\n----------------------------------------\n\nTITLE: Custom Status Code Response in PowerShell Universal\nDESCRIPTION: Shows how to return a custom status code (410) from an API endpoint.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/endpoints.md#2025-04-16_snippet_23\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUEndpoint -Url '/file' -Method Get -Endpoint {\n    New-PSUApiResponse -StatusCode 410\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Element Attributes in PowerShell Universal Dashboard\nDESCRIPTION: Demonstrates setting HTML-style attributes using hashtables for styling elements.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/element.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDElement -Tag 'div' -Content { 'Hello' } -Attributes @{\n    style = @{\n        color = 'red'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Dense TransferList in PowerShell Universal Dashboard\nDESCRIPTION: Creates a transfer list with dense items using New-UDTransferList cmdlet. The transfer list contains 5 items with names 'test1' through 'test5' and uses the -Dense parameter to create a more compact UI.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTransferList.txt#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTransferList -Item {\n    New-UDTransferListItem -Name 'test4' -Value 4\n    New-UDTransferListItem -Name 'test5' -Value 5\n} -Id 'transferlist7' -Dense\n```\n\n----------------------------------------\n\nTITLE: Setting Static Variant for Date Picker Display\nDESCRIPTION: Creates a date picker with the static variant that displays the date picker calendar directly without requiring a click to open it.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/date-picker.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDatePicker -Variant static\n```\n\n----------------------------------------\n\nTITLE: Assigning Session Scope Variable in PowerShell Universal\nDESCRIPTION: Shows how to assign a variable to the Session scope using a checkbox. Session variables are available in app event handlers but not in REST API or scheduled endpoints.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/custom-variable-scopes.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDCheckbox -Label \"Show chart\" -OnChange {\n   $Session:ShowChart = $EventData\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Card Footer Component in PowerShell\nDESCRIPTION: Example showing how to create a card footer using New-UDCardFooter cmdlet and applying it to a card. The footer is created with custom content and then attached to a card with a specific ID.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDCardFooter.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$Footer = New-UDCardFooter -Content { \"This is the footer of the card\" }\nNew-UDCard -Footer $Footer -Id 'card1'\n```\n\n----------------------------------------\n\nTITLE: Updating PowerShell Universal Module\nDESCRIPTION: Commands to upgrade the local PowerShell Universal module and verify the installed version.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/upgrading.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nUpdate-Module Universal\nImport-Module Universal -PassThru\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Step Stepper with New-UDStep in PowerShell\nDESCRIPTION: This example demonstrates how to create a stepper component with multiple steps using New-UDStep. Each step includes a text element and a textbox, with later steps displaying data from previous steps. The stepper concludes with a finish action that displays a success message and the final stepper context.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDStep.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDStepper -Id 'stepper' -Steps {\n    New-UDStep -OnLoad {\n        New-UDElement -tag 'div' -Content { \"Step 1\" }\n        New-UDTextbox -Id 'txtStep1' \n    } -Label \"Step 1\"\n    New-UDStep -OnLoad {\n        New-UDElement -tag 'div' -Content { \"Step 2\" }\n        New-UDElement -tag 'div' -Content { \"Previous data: $Body\" }\n        New-UDTextbox -Id 'txtStep2' \n    } -Label \"Step 2\"\n    New-UDStep -OnLoad {\n        New-UDElement -tag 'div' -Content { \"Step 3\" }\n        New-UDElement -tag 'div' -Content { \"Previous data: $Body\" }\n        New-UDTextbox -Id 'txtStep3' \n    } -Label \"Step 3\"\n} -OnFinish {\n    New-UDTypography -Text 'Nice! You did it!' -Variant h3\n    New-UDElement -Tag 'div' -Id 'result' -Content {$Body}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Vector Layers to a Map in PowerShell\nDESCRIPTION: This example shows how to add vector layers to a map using New-UDMap. It creates a circular vector layer with custom colors and opacity.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDMap.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDMap -Content {\n   New-UDMapRasterLayer -TileServer 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png' \n   New-UDMapVectorLayer -Circle -Radius 1000 -Latitude 51.505 -Longitude -0.09 -Color 'red' -FillColor 'blue' -FillOpacity 0.5\n} -Latitude 51.505 -Longitude -0.09 -Zoom 13 -Height '25vh' -Id 'map4'\n```\n\n----------------------------------------\n\nTITLE: Removing PowerShell Universal Server Using Remove-PSUServer\nDESCRIPTION: This example demonstrates how to use the Remove-PSUServer cmdlet without parameters to uninstall the PowerShell Universal server. The cmdlet will attempt to automatically locate the installation path.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Remove-PSUServer.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-PSUServer\n```\n\n----------------------------------------\n\nTITLE: Creating a PowerShell Universal Deployment with REST API\nDESCRIPTION: Creates a new PowerShell Universal deployment by calling the REST API endpoint directly. This method posts a JSON object with the deployment name and version to the deployments API.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/deployments.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-RestMethod http://localhost:5000/api/v1/deployments -Method POST -Body (@{\n   Name = 'Production'\n   Version = '1.0.1'\n} | ConvertTo-Json)\n```\n\n----------------------------------------\n\nTITLE: Creating a Full Screen Modal in PowerShell with Show-UDModal\nDESCRIPTION: This example shows how to create a full screen modal using the Show-UDModal cmdlet. It includes a footer with a close button to dismiss the modal.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Show-UDModal.txt#2025-04-16_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDButton -Text 'Full Screen' -OnClick {\n    Show-UDModal -Content {\n        New-UDTypography -Text \"Hello\"\n    } -FullScreen -Footer {\n        New-UDButton -Text \"Close\" -OnClick { Hide-UDModal } \n    }\n} -Id 'button2'\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Parameters in PowerShell Universal Jobs\nDESCRIPTION: Demonstrates how to define simple parameters without type attributes, which will be displayed as text boxes in the UI.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/automation/scripts/parameters.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nparam($Test)\n\n$Test\n```\n\n----------------------------------------\n\nTITLE: Creating Custom PowerShell Logging Target\nDESCRIPTION: Demonstrates how to create a custom PowerShell logging target that writes log messages to a file. The target is configured to capture Information level logs from the API feature within the User scope.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSULoggingTarget.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSULoggingTarget -Type 'PowerShell' -Level 'Information' -Scope User -Feature API -ScriptBlock {\n    param($LogEvent, $Message) \n    \n    $Message | Out-File C:\\logs\\log.txt\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Timeline with Icons in PowerShell using New-UDTimeline\nDESCRIPTION: This example demonstrates how to create a timeline with custom icons using the New-UDTimeline cmdlet. Each timeline item includes an icon created with the New-UDIcon cmdlet, set to a checkmark with a success color.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTimeline.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTimeline -Children {\n    New-UDTimelineItem -Content {\n        'Breakfast'\n    } -OppositeContent {\n        '7:45 AM'\n    } -Icon (New-UDIcon -Icon 'CheckCircle' -Color 'success')\n    New-UDTimelineItem -Content {\n        'Welcome Message'\n    } -OppositeContent {\n        '9:00 AM'\n    } -Icon (New-UDIcon -Icon 'CheckCircle' -Color 'success')\n    New-UDTimelineItem -Content {\n        'State of the Shell'\n    } -OppositeContent {\n        '9:30 AM'\n    } -Icon (New-UDIcon -Icon 'CheckCircle' -Color 'success')\n    New-UDTimelineItem -Content {\n        'General Session'\n    } -OppositeContent {\n        '11:00 AM'\n    } -Icon (New-UDIcon -Icon 'CheckCircle' -Color 'success')\n} -Id 'timeline3'\n```\n\n----------------------------------------\n\nTITLE: Creating a Multiple Selection Select Component in PowerShell\nDESCRIPTION: This example shows how to create a select component that allows multiple selections using the New-UDSelect function.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDSelect.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDSelect -Label 'Select' -Id 'select4' -Option {\n    New-UDSelectOption -Name \"One\" -Value 1\n    New-UDSelectOption -Name \"Two\" -Value 2\n    New-UDSelectOption -Name \"Three\" -Value 3\n} -Multiple -FullWidth\n```\n\n----------------------------------------\n\nTITLE: Quick Filter Implementation\nDESCRIPTION: Shows how to implement quick filtering functionality with search box integration.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/data-grid.md#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDataGrid -LoadRows {  \n    $Rows = 1..100 | % {\n        @{ Name = 'Adam'; Number = Get-Random}\n    }\n\n    foreach($filter in $eventData.QuickFilterValues)\n    {\n        $Rows = $Rows | Where-Object $filter.field -match $filter\n    }\n\n    $Rows| Out-UDDataGridData -Context $EventData -TotalRows $Rows.Length\n} -Columns @(\n    New-UDDataGridColumn -Field name\n    New-UDDataGridColumn -Field number\n) -AutoHeight $true\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Table with Row Styling in PowerShell\nDESCRIPTION: This snippet demonstrates how to create a basic table with custom row styling using the New-UDTable cmdlet. It includes data definition and a custom row styling function that applies a red background to rows where the dessert is 'Frozen yoghurt'.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTable.txt#2025-04-16_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\n$Data = @(\n    @{Dessert = 'Frozen yoghurt'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0 }\n    @{Dessert = 'Ice cream sandwich'; Calories = 237; Fat = 9.0; Carbs = 37; Protein = 4.3 }\n    @{Dessert = 'Eclair'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0 }\n    @{Dessert = 'Cupcake'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0 }\n    @{Dessert = 'Gingerbread'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0 }\n)\n\nNew-UDTable -Data $Data -OnRowStyle {\n    if ($EventData.Dessert -eq 'Frozen yoghurt')\n    {\n        @{\n            backgroundColor = \"red\"\n        }\n    } else {\n        @{}\n    }\n} -Id 'table12'\n```\n\n----------------------------------------\n\nTITLE: Customizing Date Format in PowerShell Date Picker\nDESCRIPTION: Shows how to set a custom date format for the date picker using the Format parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDDatePicker.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDatePicker -Id 'datepicker4' -Value '1-2-2020' -Format 'dd/MM/yyyy'\n```\n\n----------------------------------------\n\nTITLE: Creating a Universal App Page with URL Variables in PowerShell\nDESCRIPTION: Demonstrates how to create a page with dynamic URL parameters by using the :user variable in the URL path definition.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/pages.md#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\n$Pages = @()\n$Pages += New-UDPage -Name 'Dashboard' -Url '/db/:user' -Content {\n    New-UDTypography -Text 'Dashboard for user: $User'\n}\n\nNew-UDApp -Title 'Pages' -Pages $Pages\n```\n\n----------------------------------------\n\nTITLE: Event Data Handling with Select Component\nDESCRIPTION: Shows how to handle event data using the $EventData variable in a select component.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/interaction.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDSelect -Option {\n    New-UDSelectOption -Name 'One' -Value 1\n    New-UDSelectOption -Name 'Two' -Value 2\n    New-UDSelectOption -Name 'Three' -Value 3\n} -OnChange { Show-UDToast -Message $EventData }\n```\n\n----------------------------------------\n\nTITLE: Creating Expandable Card Content with New-UDCardExpand in PowerShell\nDESCRIPTION: This example demonstrates how to create expandable content for a card using New-UDCardExpand and then use it with New-UDCard. The expandable content is defined first, then passed as a parameter to New-UDCard.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDCardExpand.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$Expand = New-UDCardExpand -Content { \"This is the expandable content of the card\" }\nNew-UDCard -Expand $Expand -Id 'card1'\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Triggers in PowerShell Universal\nDESCRIPTION: This example demonstrates how to use the Get-PSUTrigger cmdlet without any parameters to retrieve all triggers defined in PowerShell Universal.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUTrigger.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PSUTrigger\n```\n\n----------------------------------------\n\nTITLE: Creating Endpoint Documentation in PowerShell Universal\nDESCRIPTION: This example demonstrates how to create a new endpoint documentation definition named 'PSUHelp' with a URL of '/psuhelp' using the New-PSUEndpointDocumentation cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUEndpointDocumentation.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUEndpointDocumentation -Name 'PSUHelp' -Url '/psuhelp'\n```\n\n----------------------------------------\n\nTITLE: Creating Vertical Stepper in PowerShell\nDESCRIPTION: Creates a vertical stepper by setting the -Orientation parameter to 'vertical'. This changes the layout of the stepper from horizontal to vertical, which can be useful for mobile displays or when steps contain more content.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/navigation/stepper.md#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDStepper -Steps {\n    New-UDStep -OnLoad {\n        New-UDElement -tag 'div' -Content { \"Step 1\" }\n        New-UDTextbox -Id 'txtStep1' -Value $EventData.Context.txtStep1\n    } -Label \"Step 1\"\n    New-UDStep -OnLoad {\n        New-UDElement -tag 'div' -Content { \"Step 2\" }\n        New-UDElement -tag 'div' -Content { \"Previous data: $Body\" }\n        New-UDTextbox -Id 'txtStep2' -Value $EventData.Context.txtStep2\n    } -Label \"Step 2\"\n    New-UDStep -OnLoad {\n        New-UDElement -tag 'div' -Content { \"Step 3\" }\n        New-UDElement -tag 'div' -Content { \"Previous data: $Body\" }\n        New-UDTextbox -Id 'txtStep3' -Value $EventData.Context.txtStep3\n    } -Label \"Step 3\"\n} -OnFinish {\n    New-UDTypography -Text 'Nice! You did it!' -Variant h3\n    New-UDElement -Tag 'div' -Id 'result' -Content {$Body}\n} -Orientation 'vertical'\n```\n\n----------------------------------------\n\nTITLE: Enabling IDP Initiated Sign On for ADFS PowerShell Command\nDESCRIPTION: PowerShell command to enable the IDP Initiated Sign On page in ADFS, which is disabled by default. This resolves the MSIS7065 error about missing registered protocol handlers.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/security/enterprise-security/ws-federation.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-AdfsProperties -EnableIdPInitiatedSignonPage $true\n```\n\n----------------------------------------\n\nTITLE: Configuring Kestrel Endpoints for PowerShell Universal\nDESCRIPTION: This JSON configuration sets up the Kestrel web server to listen on port 5000 for HTTP requests from any address. It's typically placed in the appsettings.json file in the default configuration folder.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/hosting/README.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Kestrel\": {\n    \"Endpoints\": {\n      \"HTTP\": {\n        \"Url\": \"http://*:5000\"\n      }\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Full-Width Button Group in PowerShell\nDESCRIPTION: This example demonstrates how to create a full-width button group using the -FullWidth parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDButtonGroup.txt#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButtonGroup -Content {\n    New-UDButtonGroupItem -Text 'Delete'\n    New-UDButtonGroupItem -Text 'Copy'\n} -FullWidth\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limiting Rule in PowerShell Universal\nDESCRIPTION: This snippet demonstrates the configuration of a rate limiting rule in PowerShell Universal. It includes settings for method, endpoint, limit, and period.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/rate-limiting.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSURateLimit -Method '*' -Endpoint '/api/user' -Limit 100 -Period '00:10:00'\n```\n\n----------------------------------------\n\nTITLE: Modifying PowerShell Universal Settings Example\nDESCRIPTION: This example demonstrates how to retrieve current settings using Get-UASetting, modify a specific setting (LogLevel), and then apply the updated settings using Set-UASetting.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Set-PSUSetting.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\> $Settings = Get-UASetting\nPS C:\\> $Settings.LogLevel = 'Debug'\nPS C:\\> Set-UASetting -Setting $Settings\n```\n\n----------------------------------------\n\nTITLE: Creating a Map Base Layer with New-UDMapBaseLayer in PowerShell\nDESCRIPTION: This snippet demonstrates the syntax for using the New-UDMapBaseLayer cmdlet to create a map base layer. It shows the available parameters including Id, Name, Content, and Checked.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDMapBaseLayer.txt#2025-04-16_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDMapBaseLayer [[-Id] <String>] [-Name] <String> [-Content] <ScriptBlock> [-Checked] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Example of Route Parameter Access Issue in API Endpoints\nDESCRIPTION: Demonstrates a common issue when using param blocks with route parameters - if the route parameter isn't declared in the param block, it won't be accessible.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/endpoints.md#2025-04-16_snippet_19\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUEndpoint -Url '/user/:name' -Endpoint {\n    param($Role = \"Default\")\n    \n    $Name -eq 'Adam'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Language Translations in PowerShell Universal\nDESCRIPTION: Shows how to define language translations using the New-PSUTranslation cmdlet in PowerShell Universal. This is typically done in language-specific .ps1 files within the translations folder of the repository.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/translations.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUTranslation\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Circular Progress Bar in PowerShell\nDESCRIPTION: Creates a large circular indeterminate progress indicator with basic settings.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDProgress.txt#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDProgress -Circular -Size large -Id 'progress4'\n```\n\n----------------------------------------\n\nTITLE: Creating an Enhanced TransferList in PowerShell Universal Dashboard\nDESCRIPTION: Creates a transfer list with enhanced selection capabilities using the -Enhanced parameter. Enhanced mode provides additional selection options for the transfer list items.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTransferList.txt#2025-04-16_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTransferList -Item {\n    New-UDTransferListItem -Name 'test1' -Value 1\n    New-UDTransferListItem -Name 'test2' -Value 2\n    New-UDTransferListItem -Name 'test3' -Value 3\n    New-UDTransferListItem -Name 'test4' -Value 4\n    New-UDTransferListItem -Name 'test5' -Value 5\n} -Id 'transferlist10' -Enhanced\n```\n\n----------------------------------------\n\nTITLE: Creating Buttons with Icons and Labels in Universal Apps\nDESCRIPTION: Combines an icon with text label to enhance UX by making buttons more recognizable, shown with a delete button example using a trash icon.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/button.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Icon (New-UDIcon -Icon trash) -Text 'Delete'\n```\n\n----------------------------------------\n\nTITLE: Creating a Checkbox with Custom Icons in PowerShell\nDESCRIPTION: This example shows how to create a checkbox with custom icons for both unchecked and checked states using the New-UDCheckbox cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDCheckBox.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDCheckbox -Label 'Demo' -Icon (New-UDIcon -Icon 'user') -CheckedIcon (New-UDIcon -Icon 'check') -Id 'checkbox4'\n```\n\n----------------------------------------\n\nTITLE: Defining String and String Array Parameters in PowerShell Universal\nDESCRIPTION: Shows how to define string and string array parameters, which generate textboxes and multi-tag select boxes respectively in the UI.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/automation/scripts/parameters.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nparam(\n    [String]$Textbox,\n    $Textbox2\n)\n```\n\nLANGUAGE: powershell\nCODE:\n```\nparam([String[]]$Array)\n```\n\n----------------------------------------\n\nTITLE: Explicit Child Content Definition in PSBlazor\nDESCRIPTION: Demonstrates how to explicitly define child content using the ChildContent node.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/portal/portal-widgets/syntax.md#2025-04-16_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<Row>\n   <ChildContent>\n      <Button>Click Me</Button>\n   </ChildContent>\n</Row>\n```\n\n----------------------------------------\n\nTITLE: Creating Number Textbox with Min and Max Values in PowerShell\nDESCRIPTION: Creates a number input textbox with specified minimum and maximum values.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTextbox.txt#2025-04-16_snippet_15\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTextbox -Id 'textbox15' -Type 'number' -Minimum 1 -Maximum 100\n```\n\n----------------------------------------\n\nTITLE: Setting Run As Account for Job Execution\nDESCRIPTION: Shows how to set the run as account for job execution using REST API.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/automation/jobs.md#2025-04-16_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\n$JobContext = @{\n    Credential = \"MyUser\"\n} | ConvertTo-Json\n\nInvoke-RestMethod http://localhost:5000/api/v1/script/7 -Method POST -Body $JobContext -Headers @{ Authorization = \"Bearer appToken\" } -ContentType 'application/json'\n```\n\n----------------------------------------\n\nTITLE: Database Schema Update Command\nDESCRIPTION: Command to upgrade the database schema using the PSU command line tool.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/upgrading.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\npsu db schema latest --connection-string \"Data Source=C:\\ProgramData\\UniversalAutomation\\database.db\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Child Folders of a Parent Folder in PowerShell Universal\nDESCRIPTION: This example demonstrates how to retrieve all child folders of a specific parent folder using the Get-PSUFolder cmdlet with the -Parent parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUFolder.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$Parent = Get-UAFolder -Name 'Parent'\nGet-UAFolder -Parent $Parent\n```\n\n----------------------------------------\n\nTITLE: Handling Enter Key Press in PowerShell\nDESCRIPTION: Implements an OnEnter event handler for textbox to trigger button click.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/textbox.md#2025-04-16_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTextbox -OnEnter {\n    Invoke-UDEndpoint -Id 'submit' -Session\n}\n\nNew-UDButton -Id 'submit' -OnClick {\n    Show-UDToast -Message 'From Textbox'\n}\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Toasts in PowerShell Universal Apps\nDESCRIPTION: The Show-UDToast cmdlet with -Broadcast parameter will show toast notifications to all connected users on the current node, but not across all nodes in a cluster.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/hosting/high-availability.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nShow-UDToast -Broadcast\n```\n\n----------------------------------------\n\nTITLE: PowerShell Environment with Execution Policy\nDESCRIPTION: Creates a PowerShell environment with custom execution policy set to Bypass.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUEnvironment.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUEnvironment -Name '7.1' -Path 'pwsh.exe' -ArgumentList \"-ExecutionPolicy Bypass\"\n```\n\n----------------------------------------\n\nTITLE: Starting a PowerShell Universal Terminal Instance\nDESCRIPTION: Example of how to start a terminal instance in PowerShell Universal by first retrieving a terminal configuration and then starting it using the Start-PSUTerminalInstance cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Start-PSUTerminalInstance.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$Terminal = Get-PSUTerminal | Where-Object Name -eq 'Terminal1'\nPS C:\\> Start-PSUTerminalInstance -Terminal $Terminal\n```\n\n----------------------------------------\n\nTITLE: Upload Response JSON Format\nDESCRIPTION: The JSON structure returned in the OnUpload script block's $Body parameter. It contains the file's data as a base64 encoded string, the filename, and the file type.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/upload.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  data: \"base64 encoded string of data\",\n  name: \"file name of the file uploaded\",\n  type: \"file type as determined by the browser\"\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Header Content in PowerShell Universal\nDESCRIPTION: Demonstrates how to add custom content to the page header using the -HeaderContent parameter, including a button with an icon.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/pages.md#2025-04-16_snippet_18\n\nLANGUAGE: powershell\nCODE:\n```\n$Page = New-UDPage -Name 'Home' -Content {\n\n} -HeaderContent {\n    New-UDButton -Icon (New-UDIcon -Icon Users) -Text 'User'\n}\n\nNew-UDApp -Title \"Dashboard\" -Pages $Page\n```\n\n----------------------------------------\n\nTITLE: Creating Card Media in PowerShell\nDESCRIPTION: This example demonstrates how to create a new card media component using an image URL, and then use it with New-UDCard to create a card.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDCardMedia.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$Media = New-UDCardMedia -Image 'https://mui.com/static/images/cards/paella.jpg'\nNew-UDCard -Media $Media -Id 'card1'\n```\n\n----------------------------------------\n\nTITLE: Initializing Portal Widget Properties with Initialize-PSUWidget in PowerShell\nDESCRIPTION: This code snippet demonstrates how to define the Initialize-PSUWidget function to add properties to Widgets. It includes a parameter and conditional logic to set a variable based on the parameter value.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/portal/portal-widgets/properties.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nfunction Initialize-PSUWidget {\n    param(\n        [Parameter()]\n        $Param1\n    )\n    \n    if ($Param1 -eq 'Script')\n    {\n       $Variables[\"Type\"] = \"Script\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Remove-PSUEndpoint Syntax Definitions\nDESCRIPTION: Shows the two supported syntax patterns for Remove-PSUEndpoint: removing by ID directly or by piping an Endpoint object.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Remove-PSUEndpoint.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-PSUEndpoint [-Id] <Int64> [-AppToken <String>] [-ComputerName <String>] [-UseDefaultCredentials] [-Integrated] [-Credential <PSCredential>] [-TrustCertificate] [<CommonParameters>]\n\nRemove-PSUEndpoint [-Endpoint] <Endpoint> [-AppToken <String>] [-ComputerName <String>] [-UseDefaultCredentials] [-Integrated] [-Credential <PSCredential>] [-TrustCertificate] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Setting Default Environment in PowerShell Universal\nDESCRIPTION: This snippet demonstrates how to set the default environment for the platform to 'Integrated'.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/environments.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PSetting -DefaultEnvironment 'Integrated'\n```\n\n----------------------------------------\n\nTITLE: Form Validation Implementation\nDESCRIPTION: Shows how to implement form validation using Test-UDForm.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/interaction.md#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDForm -Id 'form' -Content {\n   New-UDTextbox -Id 'Text' -Label 'Submit Me'\n} -OnSubmit {\n   Show-UDToast \"Hello!\"\n} -OnValidate {\n   New-UDValidationResult\n}\n\nNew-UDButton -Text \"Submit Form\" -OnClick {\n   Test-UDForm -Id 'form'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Time Picker with Specific Time Zone in PowerShell\nDESCRIPTION: Creates a time picker with a specific time zone (America/New_York). This demonstrates how to set the time zone for the picker using IANA time zone strings.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTimePicker.txt#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTimePicker -Id 'timepicker6' -TimeZone \"America/New_York\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Icon Set with CSS.GG\nDESCRIPTION: Demonstrates how to use a custom icon set (css.gg) by adding a stylesheet link with New-UDHelmet and creating a custom icon using New-UDIcon with HTML content.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDIcon.txt#2025-04-16_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDHelmet -Tag 'link' -Attributes @{\n        href = 'https://css.gg/css' \n        rel = 'stylesheet'\n    }\n\n    New-UDIcon -Children {\n        New-UDHtml '<i class=\"gg-adidas\"></i>'\n    }\n```\n\n----------------------------------------\n\nTITLE: Using Set-PSUBranding in PowerShell Universal\nDESCRIPTION: The Set-PSUBranding cmdlet allows customization of various UI elements in PowerShell Universal, including titles, colors, images, and text elements. It provides parameters for modifying the admin console, app bar, login page, and error pages.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Set-PSUBranding.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PSUBranding [-AdminConsoleTitle <String>] [-AppBarLogo <String>] [-AppNotRunningDescription <String>] [-AppToken <String>] [-ComputerName <String>] [-Copyright <String>] [-Credential <PSCredential>] [-CssStylesheet <String[]>] [-CssStylesheetIntegrity <String[]>] [-Favicon <String>] [-HeaderColor <String>] [-HeaderFontColor <String>] [-Integrated] [-LoggedOut <String>] [-LoggedOutDescription <String>] [-LoginPageDescription <String>] [-LoginPageImage <String>] [-LoginPageLinks <LoginPageLink[]>] [-LoginPageText <String>] [-LoginPageTitle <String>] [-NotAuthorizedDescription <String>] [-NotAuthorizedTitle <String>] [-PageNotFoundDescription <String>] [-PageNotFoundTitle <String>] [-PrimaryColor <String>] [-PrimaryFontColor <String>] [-SecondaryColor <String>] [-SecondaryFontColor <String>] [-TrustCertificate] [-UseDefaultCredentials] [-DarkAppBarLogo <String>] [-LoginPageTheme <ThemePreference>] [-PortalTitle <String>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Cache Storage with Absolute Expiration\nDESCRIPTION: Shows how to cache data with an absolute expiration time of 10 minutes from current time.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Set-PSUCache.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PSUCache -Key 'Data' -Value 'MyValue' -AbsoluteExpiration (Get-Date).AddMinutes(10)\n```\n\n----------------------------------------\n\nTITLE: Creating Hidden Content at Specific Breakpoint in PowerShell\nDESCRIPTION: This example illustrates how to use New-UDHidden to hide content specifically at the 'md' breakpoint.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDHidden.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDHidden -Only md -Content {\n    New-UDTypography 'md'\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Input Types for API Endpoint in PowerShell\nDESCRIPTION: Demonstrates how to define input types for an API endpoint using YAML in the .INPUTS section of comment-based help.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/openapi.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n  .INPUTS\n  Required: false\n  Description: This is an input value.\n  Content:\n      application/json: MyReturnType \n#>\nparam()\n```\n\n----------------------------------------\n\nTITLE: Publishing a PowerShell Universal Static App with Basic Content\nDESCRIPTION: Example demonstrating how to publish a static PowerShell Universal app with simple typography content to a specified destination path. The example creates a minimal app that displays 'Hello!' text.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Publish-PSUStaticApp.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPublish-PSUStaticApp -Definition { New-UDApp -Content { New-UDTypography \"Hello!\" } } -DestinationPath 'C:\\MyStaticApp'\n```\n\n----------------------------------------\n\nTITLE: Dynamically Setting Element Properties\nDESCRIPTION: Demonstrates setting both content and properties of an element dynamically.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/element.md#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDElement -Tag 'div' -Id 'myElement' -Content { }\n\nNew-UDButton -Text 'Click Me' -OnClick {\n    Set-UDElement -Id 'myElement' -Content { Get-Date } -Properties @{ Attributes = @{ style = @{ color = \"red\" } } }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Icon in PowerShell\nDESCRIPTION: Creates a basic user icon with a specified ID using New-UDIcon cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDIcon.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDIcon -Icon User -Id 'icon1'\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Trigger by Name in PowerShell Universal\nDESCRIPTION: This example shows how to use the Get-PSUTrigger cmdlet with the -Name parameter to retrieve a specific trigger named 'Job Failed' from PowerShell Universal.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUTrigger.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PSUTrigger -Name 'Job Failed'\n```\n\n----------------------------------------\n\nTITLE: Creating Form with UI Schema and Form Data\nDESCRIPTION: Shows how to create a form with both JSON Schema and UI Schema for customizing field order and initial values\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDForm.txt#2025-04-16_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDForm -Id 'form9' -Schema @{\n    title = \"Test Form\"\n    type = \"object\"\n    properties = @{\n       name = @{\n           type = \"string\"\n       }\n       age = @{\n           type = \"number\"\n       }\n    }\n} -uiSchema @{\n\t\"ui:order\" = @('age','name')\n} -FormData @{ Name = \"adam\"; Age = 38 } -OnSubmit {\n    Show-UDToast -Message ($EventData.name)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Single-Page Universal Dashboard in PowerShell\nDESCRIPTION: Creates a basic Universal Dashboard with a single page containing a typography element. Demonstrates the basic structure of a dashboard definition using New-UDDashboard cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDApp.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDashboard -Title 'My Dashboard' -Content {\n    New-UDTypography -Text 'Hello, world!'\n}\n```\n\n----------------------------------------\n\nTITLE: Get-PSUEnvironment Cmdlet Syntax\nDESCRIPTION: Complete syntax showing all available parameters for the Get-PSUEnvironment cmdlet including authentication options and server connection parameters.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUEnvironment.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PSUEnvironment [-Id] <Int64> [-AppToken <String>] [-ComputerName <String>] [-UseDefaultCredentials] [-Integrated] [-Credential <PSCredential>] [-TrustCertificate] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Creating Administrator Role with Windows Group SID in PowerShell Universal\nDESCRIPTION: This snippet demonstrates how to create an Administrator role in PowerShell Universal and map it to a Windows group SID. It uses the New-PSURole cmdlet to set up the role with a specific claim type and value.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/security/README.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSURole -Name Administrator -ClaimType 'http://schemas.microsoft.com/ws/2008/06/identity/claims/groupsid' -ClaimValue 'S-123-123-123'\n```\n\n----------------------------------------\n\nTITLE: Setting PowerShell Universal Script Properties - Script Object Syntax\nDESCRIPTION: Alternative syntax that accepts a Script object via pipeline. Allows same configuration options as the ID-based syntax but works with existing script objects.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Set-PSUScript.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PSUScript [-Script] <Script> [-AppToken <String>] [-ComputerName <String>] [-Content <String>] [-Description <String>] [-DisableManualInvocation <Boolean>] [-Environment <String>] [-Integrated] [-ManualTime <Double>] [-MaxHistory <Int32>] [-Name <String>] [-Notes <String>] [-ScriptErrorAction {SilentlyContinue | Stop | Continue | Inquire | Ignore | Suspend | Break}] [-Status {Draft | Pending Review | Pending | Review | Published | Disabled}] [-Tag <Tag[]>] [-TimeOut <Double>] [-UseDefaultCredentials] [-Credential <PSCredential>] [-TrustCertificate]\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Heading with New-UDHeading in PowerShell\nDESCRIPTION: This example demonstrates how to create a basic heading using the New-UDHeading cmdlet. It sets the text content, size, and color of the heading.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDHeading.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDHeading -Text 'Hello World' -Size 1 -Color 'red'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Jobs for Specific Script\nDESCRIPTION: Demonstrates how to get all jobs associated with a specific script by first getting the script object and then filtering jobs.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUJob.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n$Script = Get-UAScript -Id 4\nGet-UAJob -Script $Script\n```\n\n----------------------------------------\n\nTITLE: Basic Script Debugging with Wait-Debugger\nDESCRIPTION: Simple example showing how to pause script execution using Wait-Debugger for debugging purposes.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/development/debugging-scripts.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$Processes = Get-Process\nWait-Debugger\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific PowerShell Universal Environment by ID\nDESCRIPTION: Example demonstrating how to retrieve a specific environment by providing its ID to the Get-PSUEnvironment cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUEnvironment.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PSUEnvironment -Id 1\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Custom Row Styles in PowerShell for Universal Dashboard\nDESCRIPTION: This snippet demonstrates how to create a table with custom row styles using the -OnRowStyle parameter. It sets up sample data, defines columns, and applies color-coding to rows based on the 'Fat' content of each item.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/table.md#2025-04-16_snippet_20\n\nLANGUAGE: powershell\nCODE:\n```\n$Data = @(\n     @{Dessert = 'Frozen yoghurt'; Calories = 159; Fat = 6.0; Carbs = 1; Protein = 4.0 }\n     @{Dessert = 'Ice cream sandwich'; Calories = 159; Fat = 150.0; Carbs = 34; Protein = 4.0 }\n     @{Dessert = 'Eclair'; Calories = 159; Fat = 100.0; Carbs = 73; Protein = 4.0 }\n     @{Dessert = 'Cupcake'; Calories = 159; Fat = 30.0; Carbs = 25; Protein = 4.0 }\n     @{Dessert = 'Gingerbread'; Calories = 159; Fat = 6.0; Carbs = 99; Protein = 4.0 }\n )\n $Columns = @(\n     New-UDTableColumn -Property Dessert -Title \"Dessert\" \n     New-UDTableColumn -Property Calories -Title \"Calories\" \n     New-UDTableColumn -Property Fat -Title \"Fat\" \n     New-UDTableColumn -Property Carbs -Title \"Carbs\"  -DefaultSortColumn\n     New-UDTableColumn -Property Protein -Title \"Protein\" \n )\n New-UDTable -Data $Data -Id 'table14' -Columns $Columns -OnRowStyle {\n     if ($EventData.Fat -lt 10) { $Color = 'green' }\n     elseif ($EventData.Fat -ge 10 -and $EventData.Fat -lt 50) { $Color = 'Yellow' }\n     else { $Color = 'Red' }\n     @{ backgroundColor = $Color }    \n }\n```\n\n----------------------------------------\n\nTITLE: Customizing Toast Transitions in PowerShell Universal Dashboard\nDESCRIPTION: Demonstrates how to customize the entrance and exit animations of a toast notification using 'bounceInLeft' for appearance and 'bounceInRight' for disappearance.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Show-UDToast.txt#2025-04-16_snippet_20\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Text 'Show Toast' -OnClick {\n    Show-UDToast -Message 'Hello, World!' -TransitionIn 'bounceInLeft' -TransitionOut 'bounceInRight'\n} -Id 'toast21'\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Chart with New-UDChartJS in PowerShell\nDESCRIPTION: This example demonstrates creating a line chart using New-UDChartJS. It uses the same dataset as the bar chart example but changes the chart type to 'line' and sets a border width.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDChartJS.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$Data = @(\n    @{ Server = \"Server1\"; AvailableRam = 128; UsedRAM = 10 }\n    @{ Server = \"Server2\"; AvailableRam = 64; UsedRAM = 63 }\n    @{ Server = \"Server3\"; AvailableRam = 48; UsedRAM = 40 }\n    @{ Server = \"Server4\"; AvailableRam = 64;; UsedRAM = 26 }\n    @{ Server = \"Server5\"; AvailableRam = 128; UsedRAM = 120 }\n)\nNew-UDElement -Tag 'div' -Attributes @{ style = @{ height = '20vh'; width = \"20vw\"; } } -Content {\n   New-UDChartJS -Data $Data -DataProperty UsedRAM -LabelProperty Server -Type 'line' -BorderWidth 1 -Id 'chart3'\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Rating Change Event Handler\nDESCRIPTION: Demonstrates how to handle rating change events by showing a toast notification with the selected value.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/rating.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDRating -OnChange {\n    Show-UDToast $EventData\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Else Block in Condition Component\nDESCRIPTION: Demonstrates the use of both ChildContent and Else sections in a Condition component. The ChildContent is displayed if the condition is true, while the Else section is shown if the condition is false.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/portal/portal-widgets/conditions.md#2025-04-16_snippet_2\n\nLANGUAGE: markup\nCODE:\n```\n<Condition ScriptBlock=\"$Errors -eq $null\">\n   <ChildContent>\n      <Alert Message=\"Success!\" />\n   </ChildContent>\n   <Else>\n      <Alert Message=\"Failure!\" Type=\"error\" ShowIcon=\"true\" />\n   </Else>\n</Condition>\n```\n\n----------------------------------------\n\nTITLE: Creating a Universal App Page with Custom URL in PowerShell\nDESCRIPTION: Shows how to define a Universal App page with a custom URL path ('/db') instead of using the default page name-based URL.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/pages.md#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n$Pages = @()\n$Pages += New-UDPage -Name 'App' -Url '/db' -Content {\n    New-UDTypography -Text 'App'\n}\n\nNew-UDApp -Title 'Pages' -Pages $Pages\n```\n\n----------------------------------------\n\nTITLE: Creating an Icon Button with OnClick Event in PowerShell\nDESCRIPTION: This example shows how to create an icon button with an OnClick event that displays a toast message when clicked.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDIconButton.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDIconButton -Icon (New-UDIcon -Icon user -Size sm) -OnClick {\n    Show-UDToast -Message 'Icon Button Clicked'\n} -Id 'iconButton2'\n```\n\n----------------------------------------\n\nTITLE: Setting Image Dimensions in PowerShell Universal Dashboard\nDESCRIPTION: Creates an image component with custom width and height dimensions. The -Width and -Height parameters allow precise control over the image display size.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-visualization/image.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDImage -Url \"https://ironmansoftware.com/img/ps-logo.png\" -Width 250 -Height 250\n```\n\n----------------------------------------\n\nTITLE: Basic Endpoint Retrieval in PowerShell Universal\nDESCRIPTION: Retrieves all endpoints defined in PowerShell Universal without any filters.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUEndpoint.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PSUEndpoint\n```\n\n----------------------------------------\n\nTITLE: Retrieving Script by Name\nDESCRIPTION: Example demonstrating how to retrieve a script using its filename.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUScript.txt#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nGet-UAScript -Name 'Script1.ps1'\n```\n\n----------------------------------------\n\nTITLE: Loading Data for Table in PowerShell\nDESCRIPTION: This snippet demonstrates how to load data into a PowerShell variable for use as a table data source. It retrieves all services on the machine.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/portal/portal-widgets/tables.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$Variables[\"Services\"] = Get-Service\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Table with Property Columns in Markup\nDESCRIPTION: This example shows how to create a basic table with property columns in Universal Dashboard markup. It displays the Name and Status properties of services.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/portal/portal-widgets/tables.md#2025-04-16_snippet_1\n\nLANGUAGE: markup\nCODE:\n```\n<Table DataSource=\"$Services\">\n    <PropertyColumn Property=\"Name\"></PropertyColumn>\n    <PropertyColumn Property=\"Status\"></PropertyColumn>\n</Table>\n```\n\n----------------------------------------\n\nTITLE: Creating a Checkbox with Label on Top in PowerShell\nDESCRIPTION: This example shows how to create a checkbox with the label placed on top using the New-UDCheckbox cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDCheckBox.txt#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDCheckbox -Label 'Demo' -LabelPlacement 'top' -Id 'checkbox6'\n```\n\n----------------------------------------\n\nTITLE: New-PSUEnvironment Cmdlet Syntax\nDESCRIPTION: The complete syntax for the New-PSUEnvironment cmdlet showing all available parameters and their usage. This cmdlet creates a new PowerShell Universal environment with configurable settings for execution, security, and resource management.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUEnvironment.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUEnvironment [-AppToken <String>] [-Arguments <String>] [-ComputerName <String>] [-Modules <String[]>] -Name <String> [-PSModulePath <String[]>] [-Path <String>] [-PersistentRunspace] [-Variables <String[]>] [-UseDefaultCredentials] [-Integrated] [-StartupScript <String[]>] [-Version <String>] [-RunspaceRecycling] [-MaxRunspaces <Int32>] [-EnableDebugger] [-Credential <Variable>] [-MaxVirtualMemory <Int64>] [-RecycleSchedule <String>] [-Description <String>] [-DisableImplicitWinCompat] [-Minimal] [-ProcessStartupScript <String>] [-Disabled] [-TrustCertificate] [-Type <EnvironmentType>] [-Verb <String>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Get-PSUComputerGroup Cmdlet\nDESCRIPTION: This example demonstrates how to use the Get-PSUComputerGroup cmdlet to retrieve all computer groups within PowerShell Universal. It shows the basic usage without any additional parameters.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUComputerGroup.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\> Get-PSUComputerGroup\n```\n\n----------------------------------------\n\nTITLE: Retrieving App Tokens with Get-PSUAppToken\nDESCRIPTION: Example demonstrates basic usage of Get-PSUAppToken cmdlet to retrieve all application tokens from PowerShell Universal. This cmdlet can be called with various parameters to filter and authenticate the token retrieval process.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUAppToken.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\> Get-PSUAppToken\n```\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PSUAppToken [-Id] <Int64> [-AppToken <String>] [-ComputerName <String>] [-UseDefaultCredentials] [-Integrated] [-Credential <PSCredential>] [-TrustCertificate] [<CommonParameters>]\n```\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PSUAppToken [-Identity] <Identity> [-AppToken <String>] [-ComputerName <String>] [-UseDefaultCredentials] [-Integrated] [-Credential <PSCredential>] [-TrustCertificate] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Controlling Button Size in Universal Apps with PowerShell\nDESCRIPTION: Customizes the dimensions of a button using the Style parameter to set specific width and height in pixels.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/button.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Id \"Submit\" -Text \"Submit\" -Style @{ Width = \"150px\"; Height = \"100px\" }\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Grid Column in PowerShell Universal Dashboard\nDESCRIPTION: Example of creating a column with a width of 6 units on small screens. The column contains simple text content \"Column 1\". Demonstrates basic usage of New-UDColumn cmdlet with size configuration.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDColumn.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDColumn -SmallSize 6 -Content {\n    \"Column 1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Security Environment in PowerShell Universal\nDESCRIPTION: This snippet demonstrates how to set the security environment for PowerShell Universal using the Set-PSUSetting cmdlet. It specifies the PowerShell version to be used for running security scripts.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/security/README.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PSUSetting -SecurityEnvironment '5.1'\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic AppBar in PowerShell\nDESCRIPTION: Creates a new AppBar that is relative to other components. This example demonstrates the basic usage of the New-UDAppBar cmdlet with a simple text child element.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDAppBar.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDAppBar -Children { New-UDTypography -Text 'Hello' } -Position relative\n```\n\n----------------------------------------\n\nTITLE: Implementing Fade Transition with Custom Timeout in PowerShell\nDESCRIPTION: Creates a fade transition with a specified timeout of 1000 milliseconds. Demonstrates how to customize the transition duration.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTransition.txt#2025-04-16_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTransition -Fade -In -Children {\n    New-UDButton -Text 'Click Me' -Id 'button8'\n} -Id 'transition8' -Timeout 1000\nNew-UDCheckbox -Label 'Toggle' -OnChange {\n    Set-UDElement -Id 'transition8' -Properties @{\n        In = $EventData\n    }\n} -Checked $true\n```\n\n----------------------------------------\n\nTITLE: Handling Blur Event in PowerShell\nDESCRIPTION: Implements an OnBlur event handler that triggers when textbox loses focus.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/textbox.md#2025-04-16_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTextbox -OnBlur {\n    Show-UDToast \"Blurred\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Card with Image in PowerShell\nDESCRIPTION: This example shows how to create a card with an image and custom styling using the New-UDCard cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDCard.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDCard -Title 'My Card' -Text 'This is my card' -Id 'card2' -Image 'https://picsum.photos/200/300' -Style @{ width = '200px' }\n```\n\n----------------------------------------\n\nTITLE: Creating Bottom-Right Positioned Floating Action Button in PowerShell\nDESCRIPTION: Creates a floating action button with a user icon and shows a toast when clicked. The button is positioned in the bottom right of its container.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDFloatingActionButton.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDFloatingActionButton -Icon (New-UDIcon -Icon 'user') -Position BottomRight -OnClick {\n    Show-UDToast -Message 'Hello'\n} -Id 'fab3'\n```\n\n----------------------------------------\n\nTITLE: Get-PSUVariable Cmdlet Syntax\nDESCRIPTION: Complete syntax showing two parameter sets for the Get-PSUVariable cmdlet - one using the Id parameter and another using the Name parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUVariable.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PSUVariable [-Id] <Int64> [-AppToken <String>] [-ComputerName <String>] [-Integrated] [-UseDefaultCredentials] [-ValueOnly] [-Credential <PSCredential>] [-TrustCertificate] [<CommonParameters>]\n\nGet-PSUVariable [-Name] <String> [-AppToken <String>] [-ComputerName <String>] [-Integrated] [-UseDefaultCredentials] [-ValueOnly] [-Credential <PSCredential>] [-TrustCertificate] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Returning Response from C# Endpoint\nDESCRIPTION: Example showing how to create and return an ApiResponse object from a C# endpoint with a specific status code (401 Unauthorized).\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/plugins.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nreturn new ApiResponse {\n    StatusCode = 401\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Scripts by Folder\nDESCRIPTION: Example showing how to retrieve all scripts within a specific folder.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUScript.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nGet-UAScript -FolderId 12\n```\n\n----------------------------------------\n\nTITLE: Creating PowerShell Universal Scripts - Syntax Pattern 3\nDESCRIPTION: Creates a new script using Command and Module parameters, enabling execution of specific commands from PowerShell modules.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUScript.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUScript [-AppToken <String>] [-ComputerName <String>] [-Description <String>] [-DisableManualInvocation] [-ManualTime <Int32>] [-MaxHistory <Int32>] [-Notes <String>] [-Parameter <ScriptParameter[]>] [-Status {Draft | Pending_Review | Published | Disabled}] [-Tag <Tag[]>] [-ConcurrentJobs <Int32>] [-Environment <String>] [-TimeOut <Double>] [-Credential <Variable>] [-UseDefaultCredentials] [-Integrated] [-RetryLimit <Int32>] [-DiscardPipeline] [-LoadProfile] [-WorkingDirectory <String>] -Command <String> -Module <String> [-Role <String[]>] [-AvailableInBranch <String[]>] [-PortalOutputType <PortalOutputType>] [-TrustCertificate] [-PortalOpenInNewWindow] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Creating an Editor with Image Support in PowerShell\nDESCRIPTION: Creates an editor with image upload capability by specifying a published folder. Images will be uploaded to this folder and served through the request path.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/editor.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDEditor -PublishedFolder 'MyImages'\n```\n\n----------------------------------------\n\nTITLE: Applying a Module Deployment in PowerShell Universal\nDESCRIPTION: This example shows how to apply a deployment from a module stored in a configured repository using the Select-PSUDeployment cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Select-PSUDeployment.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSelect-PSUDeployment -ModuleName 'MyModule' -ModuleVersion '1.0.0'\n```\n\n----------------------------------------\n\nTITLE: Creating a Download Link in PowerShell\nDESCRIPTION: This example demonstrates how to create a link that downloads a file using the -Download parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDLink.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDLink -Url \"https://www.ironmansoftware.com/img/ps-logo.png\" -Text \"Download\" -OpenInNewWindow -Download -Id 'link3'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Script by ID\nDESCRIPTION: Example demonstrating how to retrieve a specific script using its ID.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUScript.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-UAScript -Id 12\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Menu with New-UDMenu\nDESCRIPTION: Demonstrates how to create a basic dropdown menu with three menu items using New-UDMenu and New-UDMenuItem cmdlets.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/navigation/menu.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDMenu -Content {\n   New-UDMenuItem -Text 'Item 1'\n   New-UDMenuItem -Text 'Item 1'\n   New-UDMenuItem -Text 'Item 1'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Outlined Chip with Icon in PowerShell\nDESCRIPTION: This example shows how to create an outlined chip with a label and an icon using the New-UDChip cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDChip.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDChip -Variant outlined -Label 'Outlined' -Icon (New-UDIcon -Icon 'user') -Id 'chip2'\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Folder in PowerShell Universal\nDESCRIPTION: Creates a new Private folder as a subfolder within an existing Scripts folder in the PSU folder structure.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUFolder.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$Parent = Get-UAFolder -Name 'Scripts'\nNew-UAFolder -Name 'Private' -Parent $Parent\n```\n\n----------------------------------------\n\nTITLE: Creating Multiline Textbox with Row Limits in PowerShell\nDESCRIPTION: Creates a multiline textbox with specified number of rows and maximum rows.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTextbox.txt#2025-04-16_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTextbox -Id 'textbox8' -Label 'Name' -Placeholder 'Enter your name' -Value 'John Doe' -Multiline -Rows 5 -RowsMax 10\n```\n\n----------------------------------------\n\nTITLE: Creating Basic PSU Variable\nDESCRIPTION: Creates a new variable named 'UserName' with value 'Adam' in PowerShell Universal. The variable will be available in all PSU scripts.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUVariable.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UAVariable -Name 'UserName' -Value 'Adam'\n```\n\n----------------------------------------\n\nTITLE: Using Get-PSUEndpointDocumentation in PowerShell\nDESCRIPTION: This example demonstrates how to use the Get-PSUEndpointDocumentation cmdlet to retrieve all help documentation definitions in PowerShell Universal.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUEndpointDocumentation.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\> Get-PSUEndpointDocumentation\n```\n\n----------------------------------------\n\nTITLE: Upload Component with Custom Icon in PowerShell\nDESCRIPTION: Creates an upload component with a custom icon instead of the default one. Uses the New-UDIcon cmdlet to create an 'Upload' icon.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDUpload.txt#2025-04-16_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDUpload -Text \"Upload\" -OnUpload {\n    Show-UDToast $Body\n} -Id 'upload3' -Icon (New-UDIcon -Icon 'Upload')\n```\n\n----------------------------------------\n\nTITLE: Creating a Schedule with Run As Credentials in PowerShell Universal\nDESCRIPTION: This code shows how to set up a schedule that runs under specific user credentials, using a predefined PSCredential variable.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/automation/schedules.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUSchedule -Script \"MyScript.ps1\" -Cron '* * * * *' -Credential 'MyUser'\n```\n\n----------------------------------------\n\nTITLE: Get-PSULicense Cmdlet Syntax\nDESCRIPTION: Complete syntax for the Get-PSULicense cmdlet showing all available parameters including AppToken, ComputerName, Integrated switch, authentication options, and certificate handling.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSULicense.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PSULicense [-AppToken <String>] [-ComputerName <String>] [-Integrated] [-UseDefaultCredentials] [-Credential <PSCredential>] [-TrustCertificate] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Creating a Computer Group in PowerShell Universal\nDESCRIPTION: This example demonstrates how to create a new computer group named 'Test Group' using the New-PSUComputerGroup cmdlet in PowerShell Universal.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUComputerGroup.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUComputerGroup -Name 'Test Group'\n```\n\n----------------------------------------\n\nTITLE: Using the Component in PowerShell Universal\nDESCRIPTION: Example of how to use the custom component in a Universal app.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/custom-components/building-custom-components.md#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nImport-Module ReactIcon \n\nNew-UDApp -Content {\n   New-UDReactIcon -Icon 'User'\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Script from Universal Configuration\nDESCRIPTION: Example showing how to remove a script from the Universal system by simply removing its definition from the configuration file.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/pages/about-1.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUScript -Name 'Script2.ps1' -Path 'Script2.ps1'\n```\n\n----------------------------------------\n\nTITLE: Creating English Translation Dictionary in PowerShell Universal\nDESCRIPTION: Example showing how to create a new translation dictionary for English (en-US) locale in PowerShell Universal. The example demonstrates setting up a basic translation with a single key-value pair for 'Title'.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUTranslation.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUTranslation -LanguageId 'en-US' -Strings @{\n    Title = \"Title\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Element in PowerShell Universal Dashboard\nDESCRIPTION: Demonstrates creating a basic div element with text content using New-UDElement cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/element.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDElement -Tag 'div' -Content { 'Hello' }\n```\n\n----------------------------------------\n\nTITLE: New-UDPageLayout Cmdlet Syntax\nDESCRIPTION: PowerShell cmdlet syntax for creating page layouts with responsive design support. Accepts layout arrays for different screen sizes including large, medium, small, extra small and extra-extra small. Used internally by PowerShell Universal designer.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDPageLayout.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDPageLayout [-Large <DesignerItemLayout[]>] [-Medium <DesignerItemLayout[]>] [-Small <DesignerItemLayout[]>] [-ExtraSmall <DesignerItemLayout[]>] [-ExtraExtraSmall <DesignerItemLayout[]>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Implementing OnClick Event for Chip\nDESCRIPTION: Demonstrates how to add click functionality to a chip that shows a toast message when clicked. Uses the Show-UDToast cmdlet to display a notification.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/chip.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDChip -Label 'OnClick' -OnClick {\n    Show-UDToast -Message 'Hello!'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Code Editor with Initial Content in PowerShell\nDESCRIPTION: Creates a code editor pre-populated with initial PowerShell code. The -Code parameter specifies the content that will appear in the editor when it loads.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/code-editor.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDCodeEditor -Height '500' -Language 'powershell' -Code '#Hello, world!'\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Type for API Documentation in PowerShell\nDESCRIPTION: Shows how to create a custom PowerShell class for use in API documentation using the [Documentation()] attribute.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/openapi.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n[Documentation()]\nclass MyReturnType {\n    [string]$Value\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC in Universal's appsettings.json\nDESCRIPTION: JSON configuration for setting up OpenID Connect in Universal's appsettings.json file. It includes essential parameters like ClientID, ClientSecret, and Authority for Azure Entra ID integration.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/security/enterprise-security/openid-connect.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"OIDC\": {\n      \"Enabled\": \"true\",\n      \"CallbackPath\": \"/auth/signin-oidc\",\n      \"ClientID\": \"<application ID>\",\n      \"ClientSecret\": \"<client secret>\",\n      \"Resource\": \"\",\n      \"Authority\": \"https://login.microsoftonline.com/<directory ID>\",\n      \"ResponseType\": \"code\",\n      \"SaveTokens\": \"false\",\n      \"GetUserInfo\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Zoom Transition in Universal Apps\nDESCRIPTION: Example of zoom transition that zooms a component into place with a 1000ms timeout. The transition state is controlled by a switch component.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/utilities/transitions.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTransition -Id 'test' -Content {\n    New-UDCard -Text \"Hey\"\n} -In -Zoom -Timeout 1000\n\nNew-UDSwitch -OnChange {\n    Set-UDElement -Id 'test' -Properties @{\n        in = $EventData -eq 'True'\n    }\n} -Checked $true\n```\n\n----------------------------------------\n\nTITLE: Installing PowerShell Universal on Mac OS X\nDESCRIPTION: This code shows how to install PowerShell Universal on Mac OS X using the Universal PowerShell module and start the server on port 5000.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/get-started.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Module Universal\nInstall-PSUServer -AddToPath\nStart-PSUServer -Port 5000\n```\n\n----------------------------------------\n\nTITLE: Creating a Server Start Trigger in PowerShell Universal\nDESCRIPTION: Creates a new trigger that calls the LogServerStart.ps1 file when the PowerShell Universal server is started. This example demonstrates how to create a trigger for server-level events.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUTrigger.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUTrigger -Name 'Server Started' -EventType ServerStarted -TriggerScript 'LogServerStart.ps1'\n```\n\n----------------------------------------\n\nTITLE: Basic Job Retrieval in PowerShell Universal\nDESCRIPTION: Demonstrates basic usage of Get-UAJob cmdlet to retrieve all jobs from PowerShell Universal.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUJob.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-UAJob\n```\n\n----------------------------------------\n\nTITLE: Setting PowerShell Universal Authentication - SAML2\nDESCRIPTION: Syntax for configuring SAML2 authentication with required callback path and optional entity ID settings. Includes parameters for metadata address and service certificates.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Set-PSUAuthenticationMethod.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PSUAuthenticationMethod [-AppToken <String>] [-ComputerName <String>] [-ScriptBlock <ScriptBlock>] [-Disabled] [-UseDefaultCredentials] -CallbackPath <String> [-Configure <ScriptBlock>] [-EntityId <String>] [-IdentityProviderEntityId <String>] [-Integrated] [-MetadataAddress <String>] [-ServiceCertificate <String>] [-Type <AuthenticationMethodType>] [-SigningKey <String>] [-SingleSignOnServiceUrl <String>] [-AllowUnsolicitedAuthnResponse] [-Credential <PSCredential>] [-TrustCertificate] [-LoadMetadata] [-NameIdPolicy <String>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Computer Status Classes and Enums - PowerShell\nDESCRIPTION: Defines the Computer class and related enums for computer offline trigger events.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/automation/triggers.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nclass Computer\n{\n    [long]$Id\n    [string]$Name\n    [DateTime]$HeartBeat\n    [ComputerStatus]$Status\n    [bool]$Maintenance\n    [bool]$Deleted\n    [List<ComputerTag>]$Tags\n    [string]$Version\n    [DateTime]$FileSyncTimestamp\n    [string]$DeploymentVersion\n    [string]$DeploymentName\n    [string]$GitSettings\n    [string]$GitBranch\n    [ComputerType]$Type\n}\n\nenum ComputerStatus\n{\n    Offline,\n    Online,\n    Busy,\n    Loading,\n    StartupError\n}\n\nenum ComputerType\n{\n    Server,\n    Agent\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Named Deployment Information in PowerShell Universal\nDESCRIPTION: Demonstrates how to retrieve deployment information for a specific named deployment from the PowerShell Universal server.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUDeployment.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PSUDeployment -Name 'Production'\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Conditional Row Coloring in PowerShell\nDESCRIPTION: This example shows how to create a table with conditional row coloring based on the 'Fat' content of each dessert. It uses the OnRowStyle parameter to apply different background colors depending on the fat content.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTable.txt#2025-04-16_snippet_15\n\nLANGUAGE: powershell\nCODE:\n```\n$Data = @(\n    @{Dessert = 'Frozen yoghurt'; Calories = 159; Fat = 6.0; Carbs = 1; Protein = 4.0 }\n    @{Dessert = 'Ice cream sandwich'; Calories = 159; Fat = 150.0; Carbs = 34; Protein = 4.0 }\n    @{Dessert = 'Eclair'; Calories = 159; Fat = 100.0; Carbs = 73; Protein = 4.0 }\n    @{Dessert = 'Cupcake'; Calories = 159; Fat = 30.0; Carbs = 25; Protein = 4.0 }\n    @{Dessert = 'Gingerbread'; Calories = 159; Fat = 6.0; Carbs = 99; Protein = 4.0 }\n)\n$Columns = @(\n    New-UDTableColumn -Property Dessert -Title \"Dessert\" \n    New-UDTableColumn -Property Calories -Title \"Calories\" \n    New-UDTableColumn -Property Fat -Title \"Fat\" \n    New-UDTableColumn -Property Carbs -Title \"Carbs\"  -DefaultSortColumn\n    New-UDTableColumn -Property Protein -Title \"Protein\" \n)\nNew-UDTable -Data $Data -Id 'table14' -Columns $Columns -OnRowStyle {\n    if ($EventData.Fat -lt 10) { $Color = 'green' }\n    elseif ($EventData.Fat -ge 10 -and $EventData.Fat -lt 50) { $Color = 'Yellow' }\n    else { $Color = 'Red' }\n    @{ backgroundColor = $Color }    \n}\n```\n\n----------------------------------------\n\nTITLE: Handling Button Clicks in PowerShell\nDESCRIPTION: Shows how to create a button with an OnClick event handler that displays a toast message when clicked. This example demonstrates the integration of interactive functionality with UI elements.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDButton.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Text 'Click me' -OnClick {\n  Show-UDToast -Message 'Hello, world!'\n} -Id 'button4'\n```\n\n----------------------------------------\n\nTITLE: Range-based Slider in PowerShell\nDESCRIPTION: Creates a slider that allows selecting a range of values between 1 and 10.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/slider.md#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDSlider -Value @(1, 10)\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Transfer List in PowerShell Universal Dashboard\nDESCRIPTION: This snippet demonstrates how to create a basic transfer list with five items using the New-UDTransferList and New-UDTransferListItem cmdlets. Each item has a name and value property.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/transfer-list.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTransferList -Item {\n    New-UDTransferListItem -Name 'test1' -Value 1\n    New-UDTransferListItem -Name 'test2' -Value 2\n    New-UDTransferListItem -Name 'test3' -Value 3\n    New-UDTransferListItem -Name 'test4' -Value 4\n    New-UDTransferListItem -Name 'test5' -Value 5\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Variable by Name in PowerShell Universal\nDESCRIPTION: Example demonstrating how to retrieve a specific variable by its name using the Get-UAVariable cmdlet. In this case, retrieving a variable named 'username'.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUVariable.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-UAVariable -Name 'username'\n```\n\n----------------------------------------\n\nTITLE: Getting Element Value with Get-UDElement\nDESCRIPTION: Example demonstrating how to get the value of a textbox element using Get-UDElement and display it in a toast notification when a button is clicked.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-UDElement.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTextbox -Id 'getElement1' -Placeholder 'Enter your name'\nNew-UDButton -Text 'Get Value' -OnClick {\n    Show-UDToast (Get-UDElement -Id 'getElement1').Value\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Universal.Server.exe in Demo Mode\nDESCRIPTION: This command line option starts PowerShell Universal in demo mode. It's useful for testing or demonstration purposes, potentially with pre-configured settings or limitations.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/command-line-options.md#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nUniversal.Server.exe --mode demo\n```\n\n----------------------------------------\n\nTITLE: Creating Square Paper Component in PowerShell\nDESCRIPTION: Creates a new square-shaped paper component with a button inside. This example shows how to use the -Square switch parameter to create a square paper.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDPaper.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDPaper -Id 'paper4' -Children {\n    New-UDButton -Text 'Click Me'\n} -Square -Elevation 5\n```\n\n----------------------------------------\n\nTITLE: Creating Autofocus Textbox in PowerShell\nDESCRIPTION: Creates a textbox that automatically focuses when the page loads.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTextbox.txt#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTextbox -Id 'textbox6' -Label 'Name' -Placeholder 'Enter your name' -Value 'John Doe' -Autofocus\n```\n\n----------------------------------------\n\nTITLE: Creating Remote Git Setting in PowerShell Universal\nDESCRIPTION: This example shows how to create a remote git setting for a PowerShell Universal application named 'MyApp' with the branch set to 'main' and the remote repository set to a specific URL.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUGitSetting.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUGitSetting -Remote 'https://www.example.com/repo.git' -Branch 'main' -Name 'MyApp'\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Nivo Chart Syntax\nDESCRIPTION: Basic syntax for creating a Nivo chart with core parameters like Id, Data, and basic styling options.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDNivoChart.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDNivoChart [-Id <String>] -Data <Object> [-Definitions <Object>] [-Fill <Object>] [-Theme <Hashtable>] [-MotionConfig <String>] [-BorderWidth <Int32>] [-BorderColor <String>] [-Responsive] [-Width <Int32>] [-Height <Int32>] [-Colors <Object>] [-ColorBy <Object>] [-UseDataColor] [-DisableInteractive] [-OnClick <Endpoint>] [-MarginTop <Int32>] [-MarginRight <Int32>] [-MarginBottom <Int32>] [-MarginLeft <Int32>]\n```\n\n----------------------------------------\n\nTITLE: Custom Filtering Implementation\nDESCRIPTION: Demonstrates custom filtering implementation using filter structure from EventData for remote data sources.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/data-grid.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDataGrid -LoadRows {  \n    $Rows = 1..100 | % {\n        @{ Name = 'Adam'; Number = Get-Random}\n    }\n\n    foreach($filter in $eventData.Filter.items)\n    {\n        if ($filter.operator -eq 'equals')\n        {\n            $Rows = $Rows | Where-Object $filter.field -eq $filter.value\n        }\n        elseif ($filter.operator -eq 'contains')\n        {\n            $Rows = $Rows | Where-Object $filter.field -match $filter.value\n        }\n    }\n\n    $Rows| Out-UDDataGridData -Context $EventData -TotalRows $Rows.Length\n} -Columns @(\n    New-UDDataGridColumn -Field name\n    New-UDDataGridColumn -Field number\n) -AutoHeight $true\n```\n\n----------------------------------------\n\nTITLE: Creating Unsuccessful Validation Result with Error Message in PowerShell\nDESCRIPTION: This example shows how to create a new validation result that is unsuccessful with a custom error message using the New-PSUValidationResult cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUValidationResult.txt#2025-04-16_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-PSUValidationResult -ErrorMessage 'This is an error message.'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Last Job Output\nDESCRIPTION: Demonstrates how to retrieve the output from a script's last job execution using Get-PSUScript and Get-PSUJob cmdlets.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/automation/jobs.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$Job = Get-PSUScript -Name 'Script.ps1' | Get-PSUJob -OrderDirection Descending -First 1\nGet-PSUJobPipelineOutput -Job $Job\nGet-PSUJobOutput -Job $Job\n```\n\n----------------------------------------\n\nTITLE: Retrieving All PowerShell Universal Environments\nDESCRIPTION: Example showing how to retrieve all environments configured in PowerShell Universal using the Get-PSUEnvironment cmdlet without parameters.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUEnvironment.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PSUEnvironment\n```\n\n----------------------------------------\n\nTITLE: Installing React Component Dependencies\nDESCRIPTION: Adds required React component libraries to the project using Add-UDReactComponentLibrary cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/custom-components/building-custom-components.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nAdd-UDReactComponentLibrary -Path .\\project -Library 'react-icons'\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Tag by Name in PowerShell Universal\nDESCRIPTION: This example shows how to use the Get-PSUTag cmdlet with the -Name parameter to retrieve a specific tag named 'Release' from PowerShell Universal.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUTag.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-UATag -Name 'Release'\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Protocols for PowerShell Universal\nDESCRIPTION: This JSON configuration sets the HTTP protocols supported by PowerShell Universal. In this example, it's configured to support both HTTP1 and HTTP2 on port 5000.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/hosting/README.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n\"Kestrel\": {\n  \"Endpoints\": {\n    \"HTTP\": {\n      \"Url\": \"http://*:5000\",\n      \"Protocols\": \"Http1AndHttp2\"\n    }\n  },\n  \"RedirectToHttps\": \"false\"\n},\n}\n```\n\n----------------------------------------\n\nTITLE: Evaluating Client Certificate in PowerShell Universal Roles\nDESCRIPTION: PowerShell script to serialize the $user variable in the roles.ps1 file. This allows examination of the certificate properties available during authorization.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/security/enterprise-security/client-certificate.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nparam($User)\n\n$User | ConvertTo-Json | Out-File .\\user.txt\n\n$true\n```\n\n----------------------------------------\n\nTITLE: Retrieving License Information in PowerShell Universal\nDESCRIPTION: Example showing basic usage of Get-PSULicense cmdlet to retrieve license information from PowerShell Universal. This cmdlet can be used with various authentication methods and supports both local and remote execution.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSULicense.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-UALicense\n```\n\n----------------------------------------\n\nTITLE: Customizing Export Options\nDESCRIPTION: Shows how to customize table export options by limiting available export formats. Example demonstrates restricting export to CSV format only.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/table.md#2025-04-16_snippet_16\n\nLANGUAGE: powershell\nCODE:\n```\n$TableData = try { get-service -ea Stop | select Name,@{n = \"Status\";e={ $_.Status.ToString()}},@{n = \"StartupType\";e={ $_.StartupType.ToString()}},@{n = \"StartType\";e={ $_.StartType.ToString()}} } catch {}\n$Columns = @(\n    New-UDTableColumn -Property Name -Title \"Service Name\" -IncludeInExport\n    New-UDTableColumn -Property Status -Title Status \n    New-UDTableColumn -Property StartupType\n    New-UDTableColumn -Property StartType -IncludeInExport\n)\nNew-UDTable -Id 'service_table' -Data $TableData -Columns $Columns -Title 'Services' -ShowSearch -ShowPagination -Dense -Export -ExportOption \"csv\"\n```\n\n----------------------------------------\n\nTITLE: Starting PowerShell Universal App Example\nDESCRIPTION: Example showing how to start an app named 'MyApp' in PowerShell Universal using pipeline input.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Start-PSUDashboard.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PSUApp -Name 'MyApp' | Start-PSUDashboard\n```\n\n----------------------------------------\n\nTITLE: Creating Persistent Tooltip with Info Type in PowerShell with Universal Dashboard\nDESCRIPTION: Creates a persistent tooltip with 'info' type styling that displays 'Hello World' text when hovering over a button. The tooltip remains visible until clicked outside.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTooltip.txt#2025-04-16_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDTooltip -TooltipContent { \n     New-UDTypography -Text \"Hello World\" \n} -Content { \n     New-UDButton -Text \"Hover over me\"\n} -Id \"tooltip3\" -Type \"info\" -Persistent\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Signing Key in PowerShell Universal\nDESCRIPTION: JSON configuration for setting up a remote signing key using an OAuth 2.0 discovery document. This enables automatic key rotation without needing to update PowerShell Universal configuration when signing keys change.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/security/app-tokens.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Jwt\" : {\n        \"DiscoveryDocument\": \"https://auth20/metadata.xml\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Select Component with an Icon in PowerShell\nDESCRIPTION: This example demonstrates how to create a select component with an icon using the New-UDSelect function and New-UDIcon.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDSelect.txt#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDSelect -Label 'Select' -Id 'select6' -Option {\n    New-UDSelectOption -Name \"One\" -Value 1\n    New-UDSelectOption -Name \"Two\" -Value 2\n    New-UDSelectOption -Name \"Three\" -Value 3\n} -FullWidth -Icon (New-UDIcon -Icon Home)\n```\n\n----------------------------------------\n\nTITLE: Radio Group with Custom Label Placement\nDESCRIPTION: Shows how to create a radio group with labels positioned at the start of each radio button.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDRadioGroup.txt#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDRadioGroup -Label 'group' -Id 'radio4' -Children {\n    New-UDRadio -Value 'Adam' -Label 'Adam'  -Id 'adam' -LabelPlacement 'start'\n    New-UDRadio -Value 'Sarah' -Label 'Sarah' -Id 'sarah' -LabelPlacement 'start'\n    New-UDRadio -Value 'Austin' -Label 'Austin' -Id 'austin' -LabelPlacement 'start'\n} -DefaultValue 'Sarah'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data from Server-Wide Cache in PowerShell Universal\nDESCRIPTION: This snippet demonstrates how to use the Get-PSUCache cmdlet to retrieve data from the server-wide cache in PowerShell Universal. It specifies a key to fetch the corresponding cached data.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUCache.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PSUCache -Key 'DataTable'\n```\n\n----------------------------------------\n\nTITLE: Replacing Existing Toast Notifications in PowerShell Universal Dashboard\nDESCRIPTION: Demonstrates how to replace an existing toast notification with a new one using the same ID, useful for updating information without creating multiple notifications.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Show-UDToast.txt#2025-04-16_snippet_14\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Text 'Show Toast' -OnClick {\n    Show-UDToast -Message 'Hello, World!' -ReplaceToast -Id \"toastId\"\n} -Id 'toast15'\n```\n\n----------------------------------------\n\nTITLE: Enabling Maintenance Mode for a Computer in PowerShell Universal\nDESCRIPTION: This example demonstrates how to enable maintenance mode for a specific computer named 'computer1' using the Set-PSUComputer cmdlet in PowerShell Universal.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Set-PSUComputer.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PSUComputer -ComputerName computer1 -Maintenance $true\n```\n\n----------------------------------------\n\nTITLE: Creating Email Textbox in PowerShell\nDESCRIPTION: Creates an email textbox with email input type.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTextbox.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTextbox -Id 'textbox3' -Label 'Email' -Placeholder 'Enter your email' -Type 'email'\n```\n\n----------------------------------------\n\nTITLE: Creating Small Floating Action Button in PowerShell\nDESCRIPTION: Creates a small floating action button with a user icon and shows a toast when clicked. The button size is set to small and positioned relative to its container.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDFloatingActionButton.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDFloatingActionButton -Icon (New-UDIcon -Icon 'user') -Size Small -OnClick {\n    Show-UDToast -Message 'Hello'\n} -Id 'fab2' -Position Relative\n```\n\n----------------------------------------\n\nTITLE: Adding a Title to Toast Notifications in PowerShell Universal Dashboard\nDESCRIPTION: Shows how to add a title to a toast notification, providing additional context above the main message.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Show-UDToast.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Text 'Show Toast' -OnClick {\n    Show-UDToast -Message 'Hello, World!' -Title 'Toast Title'\n} -Id 'toast3'\n```\n\n----------------------------------------\n\nTITLE: List Items with Links\nDESCRIPTION: Creates list items with hyperlinks that open in new windows\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDList.txt#2025-04-16_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDList -Content {\n    New-UDListItem -Label 'Inbox' -SubTitle 'New Stuff' -Href 'https://ironmansoftware.com' -OpenInNewWindow\n    New-UDListItem -Label 'Drafts' -SubTitle \"Stuff I'm working on \" -Href 'https://powershellgallery.com' -OpenInNewWindow\n    New-UDListItem -Label 'Trash' -SubTitle 'Stuff I deleted' -Href 'https://github.com/powershell/powershell' -OpenInNewWindow\n    New-UDListItem -Label 'Spam' -SubTitle \"Stuff I didn't want\"\n} -Id 'list7'\n```\n\n----------------------------------------\n\nTITLE: Creating Styled Paper Component in PowerShell\nDESCRIPTION: Creates a new paper component with custom styling, specifically a red background color. This example demonstrates how to use the -Style parameter to apply custom CSS styles.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDPaper.txt#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDPaper -Id 'paper5' -Children {\n    New-UDButton -Text 'Click Me'\n} -Style @{ backgroundColor = 'red' }\n```\n\n----------------------------------------\n\nTITLE: Creating a Vertical Button Group in PowerShell\nDESCRIPTION: This example demonstrates how to create a vertical button group using the -Orientation parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDButtonGroup.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButtonGroup -Content {\n    New-UDButtonGroupItem -Text 'Delete'\n    New-UDButtonGroupItem -Text 'Copy'\n} -Orientation 'vertical'\n```\n\n----------------------------------------\n\nTITLE: Using Merge-PSUGitEdit in PowerShell\nDESCRIPTION: This example demonstrates how to use the Merge-PSUGitEdit cmdlet to commit and merge changes in a Git repository. It specifies a commit message and the path to the file being committed.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Merge-PSUGitEdit.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nMerge-PSUGitEdit -Message 'My commit message' -Paths 'C:\\git\\myrepo\\file.txt'\n```\n\n----------------------------------------\n\nTITLE: Converting Markdown to HTML with New-UDMarkdown\nDESCRIPTION: Basic example of using New-UDMarkdown cmdlet to convert a markdown heading to HTML. The cmdlet accepts markdown text as input and outputs the corresponding HTML markup.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDMarkdown.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDMarkdown -Markdown '# Heading'\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Toast Notification in PowerShell Universal Dashboard\nDESCRIPTION: Shows how to create a basic toast notification using Show-UDToast by creating a button that displays a simple message when clicked.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Show-UDToast.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Text 'Show Toast' -OnClick {\n    Show-UDToast -Message 'Hello, World!'\n} -Id 'toast1'\n```\n\n----------------------------------------\n\nTITLE: Revoking an App Token in PowerShell Universal\nDESCRIPTION: This example demonstrates how to retrieve an app token by its ID and then revoke it using the Revoke-PSUAppToken cmdlet. The Get-UAAppToken retrieves the token, which is then passed to the Revoke-PSUAppToken cmdlet to be revoked.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Revoke-PSUAppToken.txt#2025-04-16_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$AppToken = Get-UAAppToken -Id 1\nPS C:\\> Revoke-UAAppToken -AppTokenToRevoke $AppToken\n```\n\n----------------------------------------\n\nTITLE: Creating a Conditional Schedule in PowerShell Universal\nDESCRIPTION: This code demonstrates how to set up a schedule with a condition that determines whether the script should run, based on an environment variable.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/automation/schedules.md#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUSchedule -Script \"MyScript.ps1\" -Cron '* * * * *' -Condition {\n  $ENV:Slot -eq 'production'\n}\n```\n\n----------------------------------------\n\nTITLE: Using Read-Only Configuration Sections in PowerShell Universal\nDESCRIPTION: This code demonstrates how to use PSUHeader and PSUFooter regions to create read-only sections in configuration files. These sections won't be modified by changes in the admin console, allowing for dynamic resource generation.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/repository.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n#region PSUHeader \n\n1..100 | ForEach-Object {\n    New-PSUEndpoint -Url \"/endpoint/$_\" -Endpoint {\n\n    }\n}\n\n#endregion\n\nNew-PSUEndpoint -Url \"/user\" -Endpoint {\n\n}\n\n#region PSUFooter\n#endregion\n```\n\n----------------------------------------\n\nTITLE: Trigger Condition Example - PowerShell\nDESCRIPTION: Demonstrates how to create a conditional trigger that only runs in production environment.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/automation/triggers.md#2025-04-16_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUTrigger -Condition {\n   $Env:Environment -eq 'production'\n}\n```\n\n----------------------------------------\n\nTITLE: Using Start-PSUGitEdit in PowerShell Universal\nDESCRIPTION: Demonstrates how to use the Start-PSUGitEdit cmdlet to initiate an edit within PowerShell Universal when git sync is used. This cmdlet supports various parameters for authentication and connection settings.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Start-PSUGitEdit.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nStart-PSUGitEdit [-AppToken <String>] [-ComputerName <String>] [-Credential <PSCredential>] [-Integrated] [-TrustCertificate] [-UseDefaultCredentials] [<CommonParameters>]\n```\n\nLANGUAGE: powershell\nCODE:\n```\nStart-PSUGitEdit\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry OTLP Endpoint with JSON\nDESCRIPTION: JSON configuration for the OpenTelemetry plugin, specifying the OTLP endpoint URL where telemetry data will be sent, configured for Prometheus integration.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/plugins.md#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{    \n    \"OpenTelemetry\": {\n        \"Otlp\": {\n            \"Endpoint\": \"http://localhost:9090/api/v1/otlp/v1/metrics\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Spinning Icon in Universal Dashboard\nDESCRIPTION: Creates a spinning FontAwesome spinner icon with 5x size and specified ID using New-UDIcon cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDIcon.txt#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDIcon -Icon 'Spinner' -Spin -Size '5x' -Id 'icon10'\n```\n\n----------------------------------------\n\nTITLE: Creating a Small-Sized Toggle Button Group in PowerShell\nDESCRIPTION: This example creates a toggle button group with a small size (equivalent to dense styling), containing three toggle buttons each with a user icon.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDToggleButtonGroup.txt#2025-04-16_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDToggleButtonGroup -Content {\n    New-UDToggleButton -Content {\n        New-UDIcon -Icon 'User'\n    }\n    New-UDToggleButton -Content {\n        New-UDIcon -Icon 'User'\n    }\n    New-UDToggleButton -Content {\n        New-UDIcon -Icon 'User'\n    } -Id 'test'\n} -Size 'small'\n```\n\n----------------------------------------\n\nTITLE: Full Width Modal with MaxWidth Parameter\nDESCRIPTION: Implements a full width modal that spans the entire width as defined by the MaxWidth parameter set to 'md'.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/feedback/modal.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Text 'Full Width' -OnClick {\n    Show-UDModal -Content {\n        New-UDTypography -Text \"Hello\"\n    } -FullWidth -MaxWidth 'md'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Code Editor in PowerShell\nDESCRIPTION: Creates a new Monaco code editor with PowerShell syntax highlighting. The height parameter is required and specified in pixels.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/code-editor.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDCodeEditor -Height '500' -Language 'powershell'\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Autocomplete in PowerShell\nDESCRIPTION: Creates a basic autocomplete component with predefined options and full width.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDAutocomplete.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDAutocomplete -Options @('Test', 'Test2', 'Test3', 'Test4') -Id 'autocomplete1' -FullWidth\n```\n\n----------------------------------------\n\nTITLE: Creating Error Boundary in PowerShell\nDESCRIPTION: Demonstrates how to create an error boundary that traps and displays exceptions thrown within its content block. The example deliberately throws an error to showcase the boundary's functionality.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDErrorBoundary.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDErrorBoundary -Content {\n    throw 'This is an error'\n}\n```\n\n----------------------------------------\n\nTITLE: Mounting Volume for PowerShell Universal on Windows\nDESCRIPTION: Commands to run PowerShell Universal container with a persistent volume mounted from Windows host to container.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/docker.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ironmansoftware/universal\ndocker run --name 'PSU' -it -p 5000:5000 -v C:\\docker\\volumes\\PSU:/root ironmansoftware/universal \n```\n\n----------------------------------------\n\nTITLE: Setting Clipboard Data with Toast Notification in PowerShell\nDESCRIPTION: Example demonstrating how to create a button that copies text to clipboard and shows a success toast notification. Uses New-UDButton with Set-UDClipboard to implement clipboard functionality.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Set-UDClipboard.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Text 'Click Me' -OnClick {\n    Set-UDClipboard -Data 'Hello World!' -ToastOnSuccess\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Dashboard Theme using PowerShell Cmdlet\nDESCRIPTION: PowerShell cmdlet syntax showing two ways to set a dashboard theme: using a named theme or applying a custom theme configuration. Supports optional variant selection with a default 'light' value.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Set-UDTheme.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-UDTheme [-Name <String>] [-Variant <String>] [<CommonParameters>]\n```\n\nLANGUAGE: powershell\nCODE:\n```\nSet-UDTheme [-Theme <Hashtable>] [-Variant <String>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Stopping a PowerShell Universal App Using the Stop-PSUDashboard Cmdlet\nDESCRIPTION: This example demonstrates how to stop an app in PowerShell Universal by first retrieving the app with Get-PSUApp and then piping the result to Stop-PSUDashboard.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Stop-PSUDashboard.txt#2025-04-16_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-PSUApp -Name 'MyApp' | Stop-PSUDashboard\n```\n\n----------------------------------------\n\nTITLE: List Items with Checkboxes\nDESCRIPTION: Shows how to add checkboxes to list items with left alignment\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDList.txt#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDList -Content {\n    New-UDListItem -Label 'Inbox' -SubTitle 'New Stuff' -CheckBox (New-UDCheckbox) -CheckBoxAlignment 'left'\n    New-UDListItem -Label 'Drafts' -SubTitle \"Stuff I'm working on \" -CheckBox (New-UDCheckbox) -CheckBoxAlignment 'left'\n    New-UDListItem -Label 'Trash' -SubTitle 'Stuff I deleted' -CheckBox (New-UDCheckbox) -CheckBoxAlignment 'left'\n    New-UDListItem -Label 'Spam' -SubTitle \"Stuff I didn't want\" -CheckBox (New-UDCheckbox) -CheckBoxAlignment 'left'\n} -Id 'list7'\n```\n\n----------------------------------------\n\nTITLE: Adding Icons to Toast Notifications in PowerShell Universal Dashboard\nDESCRIPTION: Demonstrates how to add a check icon to a toast notification, providing a visual indicator alongside the message text.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Show-UDToast.txt#2025-04-16_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Text 'Show Toast' -OnClick {\n    Show-UDToast -Message 'Hello, World!' -Icon 'check'\n} -Id 'toast8'\n```\n\n----------------------------------------\n\nTITLE: Implementing Nivo Heatmap Chart\nDESCRIPTION: Creates a heatmap visualization showing animal population data across different states. Demonstrates multi-dimensional data representation with color intensity.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-visualization/charts.md#2025-04-16_snippet_17\n\nLANGUAGE: powershell\nCODE:\n```\n$Data = @(\n    @{\n        state = \"idaho\"\n        cats = 72307\n        dogs = 23429\n        moose = 23423\n        bears = 784\n    }\n    @{\n        state = \"wisconsin\"\n        cats = 2343342\n        dogs = 3453623\n        moose = 1\n        bears = 23423\n    }\n    @{\n        state = \"montana\"\n        cats = 9234\n        dogs = 3973457\n        moose = 23472\n        bears = 347303\n    }\n    @{\n        state = \"colorado\"\n        cats = 345973789\n        dogs = 0237234\n        moose = 2302\n        bears = 2349772\n    }\n)\nNew-UDNivoChart -Heatmap -Data $Data -IndexBy 'state' -keys @('cats', 'dogs', 'moose', 'bears')  -Height 500 -Width 1000 -MarginTop 50 -MarginRight 130 -MarginBottom 50 -MarginLeft 60\n```\n\n----------------------------------------\n\nTITLE: Calendar Heat Map Chart\nDESCRIPTION: Creates a calendar chart showing data over a 365-day period with random values.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDNivoChart.txt#2025-04-16_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\n$Data = @()\nfor($i = 365; $i -gt 0; $i--) {\n    $Data += @{\n        day = (Get-Date).AddDays($i * -1).ToString(\"yyyy-MM-dd\")\n        value = Get-Random\n    }\n}\n$From = (Get-Date).AddDays(-365)\n$To = Get-Date\nNew-UDNivoChart -Calendar -Data $Data -From $From -To $To -Height 500 -Width 1000 -MarginTop 50 -MarginRight 130 -MarginBottom 50 -MarginLeft 60\n```\n\n----------------------------------------\n\nTITLE: Creating a Div Element with Click Event Handler in PowerShell\nDESCRIPTION: This example shows how to create a div element with an onClick event handler using the New-UDElement cmdlet. When clicked, it displays a toast notification.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDElement.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDElement -Tag 'div' -Attributes @{\n    onClick = {\n        Show-UDToast \"Clicked!\"\n    }\n} -Content {\n    \"Hello!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Card with Centered Title in PowerShell\nDESCRIPTION: This example shows how to create a card with a centered title alignment using the New-UDCard cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDCard.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDCard -Title 'My Card' -Text 'This is my card' -Id 'card4' -TitleAlignment center\n```\n\n----------------------------------------\n\nTITLE: Setting Git Remote and Branch in PowerShell Universal\nDESCRIPTION: Example demonstrating how to set the git remote repository URL and branch for PowerShell Universal git integration. This configures PSU to connect to a specific GitHub repository and use the 'main' branch.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Set-PSUGitSetting.txt#2025-04-16_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-PSUGitSetting -Remote 'https://github.com/ironmansoftware/something.git' -Branch 'main'\n```\n\n----------------------------------------\n\nTITLE: Creating a Checkbox with Secondary Color in PowerShell\nDESCRIPTION: This example demonstrates how to create a checkbox with a secondary color using the New-UDCheckbox cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDCheckBox.txt#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDCheckbox -Label 'Demo' -Color 'secondary' -Id 'checkbox7'\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Map with Custom Tile Server\nDESCRIPTION: Demonstrates how to create a basic map using wmflabs.org tile server, positioned over Hailey, Idaho. The map includes a single raster layer with specified latitude, longitude and zoom level.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-visualization/map.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDMap -Endpoint {\n    New-UDMapRasterLayer -TileServer 'https://tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png' \n} -Latitude 43.52107 -Longitude -114.31644 -Zoom 13 -Height '100vh'\n```\n\n----------------------------------------\n\nTITLE: Creating Floating Action Buttons with Different Sizes in PowerShell\nDESCRIPTION: This snippet demonstrates how to create Floating Action Buttons in small, medium, and large sizes. Each button uses the 'user' icon and the New-UDFloatingActionButton cmdlet with the Size parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/floating-action-button.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDFloatingActionButton -Icon (New-UDIcon -Icon user) -Size Small\nNew-UDFloatingActionButton -Icon (New-UDIcon -Icon user) -Size Medium\nNew-UDFloatingActionButton -Icon (New-UDIcon -Icon user) -Size Large\n```\n\n----------------------------------------\n\nTITLE: Creating a Vertical Divider in PowerShell\nDESCRIPTION: This example demonstrates how to create a vertical divider using the New-UDDivider cmdlet with the -Orientation parameter set to 'vertical'.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDDivider.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDivider -Id 'divider4' -Orientation 'vertical'\n```\n\n----------------------------------------\n\nTITLE: Column Direction Stack Layout\nDESCRIPTION: Demonstrates creating a stack with vertical (column) direction layout\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDStack.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDStack -Content {\n    New-UDCard -Text \"Card 1\" -RemoveMargin\n    New-UDCard -Text \"Card 2\" -RemoveMargin\n    New-UDCard -Text \"Card 3\" -RemoveMargin\n} -Spacing 2 -Id 'stack2' -Direction 'column'\n```\n\n----------------------------------------\n\nTITLE: Creating Chip with Icon in PowerShell\nDESCRIPTION: Shows how to create a chip component that includes both a label and an icon. Uses the New-UDIcon cmdlet to add a user icon to the chip.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/chip.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDChip -Label 'Basic' -Icon (New-UDIcon -Icon 'user')\n```\n\n----------------------------------------\n\nTITLE: Creating an Outlined Variant Select Component in PowerShell\nDESCRIPTION: This example shows how to create a select component with an outlined variant using the New-UDSelect function.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDSelect.txt#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDSelect -Label 'Select' -Id 'select5' -Option {\n    New-UDSelectOption -Name \"One\" -Value 1\n    New-UDSelectOption -Name \"Two\" -Value 2\n    New-UDSelectOption -Name \"Three\" -Value 3\n} -Variant outlined -FullWidth\n```\n\n----------------------------------------\n\nTITLE: Customizing Toast Message Size in PowerShell Universal Dashboard\nDESCRIPTION: Shows how to increase the font size of the message text in a toast notification to large for better visibility.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Show-UDToast.txt#2025-04-16_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Text 'Show Toast' -OnClick {\n    Show-UDToast -Message 'Hello, World!' -MessageSize 'large'\n} -Id 'toast7'\n```\n\n----------------------------------------\n\nTITLE: Removing Git Settings from PowerShell Universal\nDESCRIPTION: Example showing how to use the Remove-PSUGitSetting cmdlet to remove Git settings from PowerShell Universal. This cmdlet requires a GitSettings object to be passed as a parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Remove-PSUGitSetting.txt#2025-04-16_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-PSUGitSetting\n```\n\n----------------------------------------\n\nTITLE: Defining Date, Time, Boolean, and Integer Parameters in PowerShell Universal\nDESCRIPTION: Demonstrates how to define DateTime, Boolean, and Integer parameters, which create date-time selectors, switches, and number inputs respectively.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/automation/scripts/parameters.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nparam([DateTime]$DateTime)\n```\n\nLANGUAGE: powershell\nCODE:\n```\nparam([Bool]$Switch)\n```\n\nLANGUAGE: powershell\nCODE:\n```\nparam([Int]$Number)\n```\n\nLANGUAGE: powershell\nCODE:\n```\nparam([Switch]$Switch)\n```\n\n----------------------------------------\n\nTITLE: Granting an App Token to a Specific User via Management API\nDESCRIPTION: PowerShell example demonstrating how to grant an app token to a specific user by identity ID. This requires administrator privileges to grant tokens to other users, and the token will have the same permissions as the user's role.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/security/app-tokens.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\Users\\adamr> Invoke-RestMethod http://localhost:5000/api/v1/apptoken/grant/2  -WebSession $Session\n\nid          : 4\ntoken       : eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2Ns\n              YWltcy9uYW1lIjoiYWRhbUBpcm9ubWFuc29mdHdhcmUub25taWNyb3NvZnQuY29tIiwiaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvd\n              3MvMjAwNS8wNS9pZGVudGl0eS9jbGFpbXMvaGFzaCI6IjhhYWM2NWFmLTA2NmItNDYwNy1hMGJjLTNlYTM2ZDY2YjJmMSIsInN1YiI6Il\n              Bvd2VyU2hlbGxVbml2ZXJzYWwiLCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3dzLzIwMDgvMDYvaWRlbnRpdHkvY2xhaW1zL3J\n              vbGUiOiJPcGVyYXRvciIsIm5iZiI6MTU5MzE5MjM2MCwiZXhwIjoxNjI0NzI4MzYwLCJpc3MiOiJJcm9ubWFuU29mdHdhcmUiLCJhdWQi\n              OiJQb3dlclNoZWxsVW5pdmVyc2FsIn0.9VYiRFOojFyZMH0E5rwdfFcOkoasXFrrWJDNtYk0PIw\nidentity    : @{id=2; name=adam@ironmansoftware.onmicrosoft.com; source=0; role=}\nrevoked     : False\nrole        : Operator\ncreated     : 26/06/2020 17:26:00\nexpiration  : 26/06/2021 17:26:00\nrevokedDate : 01/01/0001 00:00:00\n```\n\n----------------------------------------\n\nTITLE: JWT Token Authentication Example\nDESCRIPTION: Demonstrates how to make an authenticated request to a secure endpoint using JWT bearer token authentication via Invoke-RestMethod.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/security.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-RestMethod http://localhost:5000/auth -Headers @{ Authorization = \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1lIjoiQWRtaW4iLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9oYXNoIjoiMWUyY2IzNzAtMmMyNS00ZDU5LTk4YzgtMzc5MTFjMDAyZmI5Iiwic3ViIjoiUG93ZXJTaGVsbFVuaXZlcnNhbCIsImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd3MvMjAwOC8wNi9pZGVudGl0eS9jbGFpbXMvcm9sZSI6IkFkbWluaXN0cmF0b3IiLCJuYmYiOjE2MDU2NjEyNTUsImV4cCI6MTYzNzM2NzI1OCwiaXNzIjoiSXJvbm1hblNvZnR3YXJlIiwiYXVkIjoiUG\" }\n```\n\n----------------------------------------\n\nTITLE: Publishing a Deployment to PowerShell Universal\nDESCRIPTION: Creates a deployment for an application named 'MyApp' with version '1.0.0' to a PowerShell Universal server. This example demonstrates the basic usage of the Publish-PSUDeployment cmdlet with the required Name and Version parameters.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Publish-PSUDeployment.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPublish-PSUDeployment -Name 'MyApp' -Version '1.0.0'\n```\n\n----------------------------------------\n\nTITLE: Rotating Icons in PowerShell Universal\nDESCRIPTION: Example of creating a rotated icon using the rotation parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/icon.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDIcon -Icon 'AddressBook' -Size '5x' -Rotation 90\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Fade Transition in Universal Apps\nDESCRIPTION: Basic example showing a card component with fade transition controlled by a switch. The transition has a 1000ms timeout and the switch toggles the transition state.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/utilities/transitions.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTransition -Id 'test' -Content {\n    New-UDCard -Text \"Hey\"\n} -In -Fade -Timeout 1000\n\nNew-UDSwitch -OnChange {\n    Set-UDElement -Id 'test' -Properties @{\n        in = $EventData -eq 'True'\n    }\n} -Checked $true\n```\n\n----------------------------------------\n\nTITLE: Disabling Previous Button in PowerShell Stepper\nDESCRIPTION: Creates a stepper with the previous button disabled using the -DisablePrevious parameter in New-UDValidationResult. This prevents users from navigating back to previous steps once they move forward.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/navigation/stepper.md#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDStepper -Steps {\n    New-UDStep -OnLoad {\n        New-UDElement -tag 'div' -Content { \"Step 1\" }\n        New-UDTextbox -Id 'txtStep1' -Value $EventData.Context.txtStep1\n    } -Label \"Step 1\"\n    New-UDStep -OnLoad {\n        New-UDElement -tag 'div' -Content { \"Step 2\" }\n        New-UDElement -tag 'div' -Content { \"Previous data: $Body\" }\n        New-UDTextbox -Id 'txtStep2' -Value $EventData.Context.txtStep2\n    } -Label \"Step 2\"\n    New-UDStep -OnLoad {\n        New-UDElement -tag 'div' -Content { \"Step 3\" }\n        New-UDElement -tag 'div' -Content { \"Previous data: $Body\" }\n        New-UDTextbox -Id 'txtStep3' -Value $EventData.Context.txtStep3\n    } -Label \"Step 3\"\n} -OnFinish {\n    New-UDTypography -Text 'Nice! You did it!' -Variant h3\n    New-UDElement -Tag 'div' -Id 'result' -Content {$Body}\n} -OnValidateStep {\n    New-UDValidationResult -Valid -DisablePrevious\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring appsettings.json for Nested PowerShell Universal Instances\nDESCRIPTION: JSON configuration example for a nested PowerShell Universal instance. This sets the Kestrel base path, logging path, and data repository locations for a PSU instance running at the /psu1 URL path.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/hosting/hosting-iis.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Kestrel\": {\n    \"BasePath\": \"/psu1\"\n  },\n  \"Logging\": {\n    \"Path\": \"C:\\\\src\\\\psu\\\\data1\\\\log.txt\",\n  },\n  \"Data\": {\n    \"RepositoryPath\": \"C:\\\\src\\\\psu\\\\data1\\\\Repository\",\n    \"ConnectionString\": \"filename=C:\\\\src\\\\psu\\\\data1\\\\database.db;upgrade=true\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Slide Transition in Universal Apps\nDESCRIPTION: Demonstrates a slide transition that moves a component from left direction. The transition is controlled by a switch component with a 1000ms timeout.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/utilities/transitions.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTransition -Id 'test' -Content {\n    New-UDCard -Text \"Hey\"\n} -In -Slide -SlideDirection 'left' -Timeout 1000\n\nNew-UDSwitch -OnChange {\n    Set-UDElement -Id 'test' -Properties @{\n        in = $EventData -eq 'True'\n    }\n} -Checked $true\n```\n\n----------------------------------------\n\nTITLE: Creating Button Groups with Different Variants in PowerShell\nDESCRIPTION: This example demonstrates how to create button groups with different variants using the -Variant parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDButtonGroup.txt#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButtonGroup -Content {\n    New-UDButtonGroupItem -Text 'Delete'\n    New-UDButtonGroupItem -Text 'Copy'\n} -Variant 'contained'\nNew-UDButtonGroup -Content {\n    New-UDButtonGroupItem -Text 'Delete'\n    New-UDButtonGroupItem -Text 'Copy'\n} -Variant 'outlined'\nNew-UDButtonGroup -Content {\n    New-UDButtonGroupItem -Text 'Delete'\n    New-UDButtonGroupItem -Text 'Copy'\n} -Variant 'text'\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Select with Multiple Options in PowerShell\nDESCRIPTION: Creates a basic select component with three options labeled 'One', 'Two', and 'Three' with corresponding numeric values.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/select.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDSelect -Option {\n    New-UDSelectOption -Name 'One' -Value 1\n    New-UDSelectOption -Name 'Two' -Value 2\n    New-UDSelectOption -Name 'Three' -Value 3\n}\n```\n\n----------------------------------------\n\nTITLE: Setting PowerShell Universal License with Set-PSULicense\nDESCRIPTION: This example demonstrates how to use the Set-PSULicense cmdlet to set the license for the current PowerShell Universal server. It requires a valid license key as input.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Set-PSULicense.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-UALicense -Key 'universalautomation-23479fasfd32oihafk'\n```\n\n----------------------------------------\n\nTITLE: List Items with Switches\nDESCRIPTION: Demonstrates adding toggle switches to list items with right alignment\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDList.txt#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDList -Content {\n    New-UDListItem -Label 'Inbox' -Icon (New-UDIcon -Icon envelope -Size 3x) -SubTitle 'New Stuff' -Switch (New-UDSwitch) -SwitchAlignment 'right'\n    New-UDListItem -Label 'Drafts' -Icon (New-UDIcon -Icon edit -Size 3x) -SubTitle \"Stuff I'm working on \" -Switch (New-UDSwitch) -SwitchAlignment 'right'\n    New-UDListItem -Label 'Trash' -Icon (New-UDIcon -Icon trash -Size 3x) -SubTitle 'Stuff I deleted' -Switch (New-UDSwitch) -SwitchAlignment 'right'\n    New-UDListItem -Label 'Spam' -Icon (New-UDIcon -Icon bug -Size 3x) -SubTitle \"Stuff I didn't want\" -Switch (New-UDSwitch) -SwitchAlignment 'right'\n} -Id 'list6'\n```\n\n----------------------------------------\n\nTITLE: Customizing Toast Background Color in PowerShell Universal Dashboard\nDESCRIPTION: Shows how to change the background color of a toast notification to red, which can be used for highlighting important messages or errors.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Show-UDToast.txt#2025-04-16_snippet_19\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Text 'Show Toast' -OnClick {\n    Show-UDToast -Message 'Hello, World!' -BackgroundColor 'red'\n} -Id 'toast20'\n```\n\n----------------------------------------\n\nTITLE: Customizing Link Styles in Universal Dashboard\nDESCRIPTION: Adjusts the appearance of a link by changing its variant to h2 and setting the underline property to always show. This demonstrates style customization options available for links.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/navigation/link.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n    New-UDLink -Text 'Ironman Software' -Url https://www.ironmansoftware.com -Variant h2 -Underline always\n```\n\n----------------------------------------\n\nTITLE: Creating an AppBar with Secondary Color in PowerShell\nDESCRIPTION: Creates a new AppBar with a secondary color. This example shows how to change the color of the AppBar using the -Color parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDAppBar.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDAppBar -Children { New-UDTypography -Text 'Hello' } -Position relative -Color secondary\n```\n\n----------------------------------------\n\nTITLE: Adding Style Tag with New-UDHelmet in PowerShell\nDESCRIPTION: Demonstrates how to use New-UDHelmet to add a custom CSS style tag to the head section of a webpage. The example shows setting the background color of the body element to red.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDHelmet.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDHelmet -Tag 'style' -Attributes @{ type = 'text/css' } -Children { \"body { background-color: 'red'}\" }\n```\n\n----------------------------------------\n\nTITLE: URL Paths for Nested PowerShell Universal Instances\nDESCRIPTION: Example URLs for accessing the admin console of nested PowerShell Universal instances. These URLs reflect the BasePath configuration set in the appsettings.json files.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/hosting/hosting-iis.md#2025-04-16_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://localhost/psu1/admin\nhttp://localhost/psu2/admin\n```\n\n----------------------------------------\n\nTITLE: Creating a Disabled Checkbox in PowerShell\nDESCRIPTION: This example shows how to create a disabled checkbox using the New-UDCheckbox cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDCheckBox.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDCheckbox -Label 'Demo' -Disabled -Id 'checkbox2'\n```\n\n----------------------------------------\n\nTITLE: Creating a Vertical Toggle Button Group in PowerShell\nDESCRIPTION: This example creates a toggle button group with vertical orientation, displaying the buttons in a column rather than a row, each with a user icon.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDToggleButtonGroup.txt#2025-04-16_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDToggleButtonGroup -Content {\n    New-UDToggleButton -Content {\n        New-UDIcon -Icon 'User'\n    }\n    New-UDToggleButton -Content {\n        New-UDIcon -Icon 'User'\n    }\n    New-UDToggleButton -Content {\n        New-UDIcon -Icon 'User'\n    } -Id 'test'\n} -Orientation 'vertical'\n```\n\n----------------------------------------\n\nTITLE: Using $Cache Scope\nDESCRIPTION: Demonstrates using the $Cache scope for storing and retrieving values within execution environments.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/cache.md#2025-04-16_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\n$Cache:MyValue = \"Hello\"\nWrite-Host $Cache:MyValue\n```\n\n----------------------------------------\n\nTITLE: Creating a Stacked Bar Chart with ChartJS in PowerShell\nDESCRIPTION: This snippet shows how to create a stacked bar chart using ChartJS. It displays available and used RAM for multiple servers.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-visualization/charts.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n    $GraphPrep = @(\n        @{ RAM = \"Server1\"; AvailableRam = 128; UsedRAM = 10 }\n        @{ RAM = \"Server2\"; AvailableRam = 64; UsedRAM = 63 }\n        @{ RAM = \"Server3\"; AvailableRam = 48; UsedRAM = 40 }\n        @{ RAM = \"Server4\"; AvailableRam = 64;; UsedRAM = 26 }\n        @{ RAM = \"Server5\"; AvailableRam = 128; UsedRAM = 120 }\n    )\n\n    $AvailableRamDataSet = New-UDChartJSDataset -DataProperty AvailableRAM -Label 'Available' -BackgroundColor blue\n    $UsedRamDataset = New-UDChartJSDataset -DataProperty UsedRAM -Label 'Used' -BackgroundColor red\n    $Options = @{\n        Type          = 'bar'\n        Data          = $GraphPrep\n        Dataset       = @($AvailableRamDataSet, $UsedRamDataset)\n        LabelProperty = \"RAM\"\n        Options = @{\n            scales = @{\n                xAxes = \n                @{\n                    stacked = $true\n                }            \n            yAxes = \n                @{\n                    stacked = $true\n                }            \n            }\n        }\n    } \n\n    New-UDChartJS @Options\n```\n\n----------------------------------------\n\nTITLE: Displaying Image from Local File Path in PowerShell Universal Dashboard\nDESCRIPTION: Creates an image component that displays an image from a file path local to the server. This allows showing images stored on the server's filesystem.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-visualization/image.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDImage -Path C:\\users\\adamr\\Desktop\\ps-logo.png\n```\n\n----------------------------------------\n\nTITLE: Retrieving Terminal Configuration in PowerShell Universal\nDESCRIPTION: This PowerShell code snippet demonstrates how to use the Get-PSUTerminal cmdlet to retrieve a specific terminal configuration named 'Terminal1'. It filters the results using Where-Object to match the terminal name.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUTerminal.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$Terminal = Get-PSUTerminal | Where-Object Name -eq 'Terminal1'\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Published Folder in PowerShell Universal\nDESCRIPTION: Example showing how to publish a local images folder to make it accessible via the web server. Files will be available at http://localhost:5000/images/filename.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUPublishedFolder.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUPublishedFolder -RequestPath '/images' -Path 'C:\\images'\n```\n\n----------------------------------------\n\nTITLE: Applying a Named Deployment in PowerShell Universal\nDESCRIPTION: This example demonstrates how to apply a specific deployment by name and version using the Select-PSUDeployment cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Select-PSUDeployment.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSelect-PSUDeployment -Deployment (Get-PSUDeployment -Name 'Production' -Version '2.0.0')\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication Using PSCredential in PowerShell Universal\nDESCRIPTION: This script shows an alternative method to use Basic authentication for API calls in PowerShell Universal. It uses the built-in -Credential parameter on Invoke-RestMethod to simplify the process.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/security/forms-authentication.md#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-RestMethod $Env:UniversalUrl/api/v1/accessible -Credential $AdminCredential -Authentication Basic\n```\n\n----------------------------------------\n\nTITLE: Creating a PowerShell Universal Script Resource in a Module\nDESCRIPTION: Example of creating a script resource within a PowerShell Universal module by associating it with a module and command name.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/modules.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUScript -Module 'PSUModule' -Command 'Start-MyScript'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific PSU Identity by Name\nDESCRIPTION: Command to retrieve a specific identity from PowerShell Universal by providing a name parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUIdentity.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PSUIdentity -Name 'Adam'\n```\n\n----------------------------------------\n\nTITLE: Centered Alignment Stack\nDESCRIPTION: Creates a stack with center-aligned items\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDStack.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDStack -Content {\n    New-UDCard -Text \"Card 1\" -RemoveMargin\n    New-UDCard -Text \"Card 2\" -RemoveMargin\n    New-UDCard -Text \"Card 3\" -RemoveMargin\n} -Spacing 2 -Id 'stack4' -AlignItems 'center'\n```\n\n----------------------------------------\n\nTITLE: Migrating Between PowerShell Universal Database Types\nDESCRIPTION: Command to migrate data from one PowerShell Universal database to another, allowing migration between different database types (SQL, PostgreSQL, SQLite). Requires source and target connection strings and database types.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/psucli.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\npsu db migrate --source-connection-string 'Server=SQL;Data Source=PSU;Integrated Security=True' -source-database-type 'SQL' --target-connection-string 'Server=PostgreSQL;Data Source=PSU;Integrated Security=True' --target-database-type 'PostgreSQL'\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Backdrop in PowerShell\nDESCRIPTION: Demonstrates how to create a basic backdrop overlay with centered loading text. Uses New-UDBackdrop cmdlet with the -Open switch parameter to display the backdrop.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/feedback/backdrop.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDBackdrop -Content {\n    New-UDTypography -Text \"Loading...\" -Variant h2\n} -Open\n```\n\n----------------------------------------\n\nTITLE: Customizing Text Options in Universal Dashboard Tables\nDESCRIPTION: This snippet demonstrates how to customize text options in a Universal Dashboard table. It uses New-UDTableTextOption to set a custom search placeholder text.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTable.txt#2025-04-16_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\n$Data = @(\n    @{Dessert = 'Frozen yoghurt'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Ice cream sandwich'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Eclair'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Cupcake'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Gingerbread'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n) \n\n$Option = New-UDTableTextOption -Search \"Search all these records\"\n\nNew-UDTable -Data $Data -TextOption $Option -ShowSearch -Id 'table11'\n```\n\n----------------------------------------\n\nTITLE: Creating Labeled Circular Progress Bar in PowerShell\nDESCRIPTION: Creates a large circular progress indicator with 75% completion and a custom label.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDProgress.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDProgress -Circular -Size large -Id 'progress4' -PercentComplete 75 -Label '75%'\n```\n\n----------------------------------------\n\nTITLE: Configuring Heatmap Chart Parameters in PowerShell\nDESCRIPTION: Defines parameters for creating heatmap charts, including options for cell shape, size variation, and label display.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDNivoChart.txt#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\n-Heatmap [<SwitchParameter>]\n-ForceSquare [<SwitchParameter>]\n-SizeVariation <Int32>\n-DisableLabels [<SwitchParameter>]\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Column Width in Universal Dashboard Tables\nDESCRIPTION: This example shows how to set a custom width for a specific column in a Universal Dashboard table. It uses the -Width parameter of New-UDTableColumn to set the width of the Calories column to 5 units.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTable.txt#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n$Data = @(\n    @{Dessert = 'Frozen yoghurt'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Ice cream sandwich'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Eclair'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Cupcake'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Gingerbread'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n) \n\n$Columns = @(\n    New-UDTableColumn -Property Dessert -Title Dessert -Render { \n        New-UDButton -Id \"btn$($EventData.Dessert)\" -Text \"Click for Dessert!\" -OnClick { Show-UDToast -Message $EventData.Dessert } \n    }\n    New-UDTableColumn -Property Calories -Title Calories -Width 5 -Truncate\n    New-UDTableColumn -Property Fat -Title Fat \n    New-UDTableColumn -Property Carbs -Title Carbs \n    New-UDTableColumn -Property Protein -Title Protein \n)\n\nNew-UDTable -Data $Data -Columns $Columns -Id 'table4'\n```\n\n----------------------------------------\n\nTITLE: Creating a Disabled Icon Button in PowerShell\nDESCRIPTION: This example shows how to create a disabled icon button using the -Disabled parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDIconButton.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDIconButton -Icon (New-UDIcon -Icon user -Size sm) -Disabled -Id 'iconButton4'\n```\n\n----------------------------------------\n\nTITLE: New User Login Data Structure - PowerShell\nDESCRIPTION: Shows the data structure passed to the trigger script for new user login events via the $User parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/automation/triggers.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n@{\n    Name = \"username\"\n    Roles = @()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Span with New-UDSpan in PowerShell\nDESCRIPTION: This example demonstrates how to use the New-UDSpan cmdlet to create a basic span containing a typography element. The span is created with a content block that includes a New-UDTypography cmdlet to display text.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDSpan.txt#2025-04-16_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDSpan -Content {\n    New-UDTypography -Text 'Text'\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Child Elements\nDESCRIPTION: Demonstrates how to clear all child elements from a parent element.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/element.md#2025-04-16_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDElement -Tag 'ul' -Content {\n    New-UDElement -Tag 'li' -Content { 'First' }\n    New-UDElement -Tag 'li' -Content { 'Second' }\n    New-UDElement -Tag 'li' -Content { 'Third' }\n}  -Id 'myList'\n\nNew-UDButton -Text 'Click Me' -OnClick {\n    Clear-UDElement -Id 'myList'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PowerShell Universal Form with Validation\nDESCRIPTION: Implements a form with input validation that prevents submission when the input value is 'Bob'.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDForm.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDForm -Id 'form2' -Content {\n    New-UDTextbox -Id 'form2Textbox' -Label 'Name'\n} -OnSubmit {\n    Show-UDToast -Message ($EventData.form2Textbox)\n} -OnValidate {\n    if ($EventData.form2Textbox -eq 'Bob') {\n        New-UDValidationResult -ValidationError 'Bob is not allowed'\n    }\n    else {\n        New-UDValidationResult -Valid\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Element to Parent in Universal Dashboard (PowerShell)\nDESCRIPTION: This example demonstrates how to add a new typography element to a parent div when a button is clicked. It uses the Add-UDElement cmdlet to dynamically insert content.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Add-UDElement.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDElement -Tag 'div' -Id 'addElement1' -Content {}\nNew-UDButton -Text 'Click Me' -OnClick {\n    Add-UDElement -ParentId 'addElement1' -Content {\n        New-UDTypography -Text 'Hello World'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Clear-PSUCache Cmdlet in PowerShell\nDESCRIPTION: This example demonstrates how to use the Clear-PSUCache cmdlet to clear the server-side cache in PowerShell Universal. It shows the basic usage without any additional parameters.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Clear-PSUCache.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nClear-PSUCache\n```\n\n----------------------------------------\n\nTITLE: Creating a Checkbox with OnChange Event in PowerShell\nDESCRIPTION: This example demonstrates how to create a checkbox with an OnChange event that shows a toast notification when the checkbox state changes.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDCheckBox.txt#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDCheckbox -Label 'Demo' -OnChange {\n    Show-UDToast -Title 'Checkbox' -Message $Body\n} -Id 'checkbox5'\n```\n\n----------------------------------------\n\nTITLE: Creating Nivo Theme with Custom Colors and Grid Settings\nDESCRIPTION: Example showing how to create a new Nivo theme with custom tick line color, tick text color, grid line stroke color, and grid stroke width. All colors are set to black (#000000) and grid stroke width is set to 1.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDNivoTheme.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDNivoTheme -TickLineColor \"#000000\" -TickTextColor \"#000000\" -GridLineStrokeColor \"#000000\" -GridStrokeWidth 1\n```\n\n----------------------------------------\n\nTITLE: Creating a Bar-type Sparkline in PowerShell\nDESCRIPTION: This example shows how to create a sparkline chart using the 'bars' type. It uses random data with a maximum value of 1000 and sets specific dimensions for the chart.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDSparkline.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$Data = 1..10 | ForEach-Object { Get-Random -Max 1000 }\nNew-UDSparkline -Data $Data -Type 'bars' -Max 1000 -Height 100 -Width 500\n```\n\n----------------------------------------\n\nTITLE: Creating Event Hub in PowerShell Universal\nDESCRIPTION: This example demonstrates how to create a new event hub named 'Hub' with a description using the New-PSUEventHub cmdlet. It shows the basic usage of the cmdlet with essential parameters.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUEventHub.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUEventHub -Name 'Hub' -Description 'A new event hub'\n```\n\n----------------------------------------\n\nTITLE: Using ChildContent in Condition Component\nDESCRIPTION: Shows how to use the ChildContent section within a Condition component. The content inside ChildContent will be displayed if the condition evaluates to true.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/portal/portal-widgets/conditions.md#2025-04-16_snippet_1\n\nLANGUAGE: markup\nCODE:\n```\n<Condition ScriptBlock=\"$Errors -eq $null\">\n   <ChildContent>\n      <Alert Message=\"Success!\" />\n   </ChildContent>\n</Condition>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Time Picker in PowerShell\nDESCRIPTION: Creates a basic time picker with a specified ID. This is the simplest way to use the New-UDTimePicker function.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTimePicker.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTimePicker -Id 'timepicker1'\n```\n\n----------------------------------------\n\nTITLE: Creating a PowerShell Logging Target in PowerShell Universal\nDESCRIPTION: This PowerShell snippet demonstrates how to create a custom PowerShell logging target. It sets up a target that logs Information level messages for the User scope and API feature, writing the messages to a file.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/development/logging.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSULoggingTarget -Type 'PowerShell' -Level 'Information' -Scope User -Feature API -ScriptBlock {\n    param($LogEvent, $Message) \n    \n    $Message | Out-File C:\\logs\\log.txt\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Password Textbox in PowerShell\nDESCRIPTION: Creates a password textbox with masked input.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTextbox.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTextbox -Id 'textbox2' -Label 'Password' -Placeholder 'Enter your password' -Type 'password'\n```\n\n----------------------------------------\n\nTITLE: Creating a Clickable Chip with Icon and Toast Notification in PowerShell\nDESCRIPTION: This example demonstrates how to create a clickable chip with an icon that shows a toast notification when clicked.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDChip.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDChip -Label 'Clickable' -Icon (New-UDIcon -Icon 'user') -OnClick {\n    Show-UDToast -Message 'Hello!'\n} -Id 'chip3'\n```\n\n----------------------------------------\n\nTITLE: Starting PowerShell Universal Server on Port 8080\nDESCRIPTION: This example demonstrates how to start a PowerShell Universal server on a specific port using the Start-PSUServer cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Start-PSUServer.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nStart-PSUServer -Port 8080\n```\n\n----------------------------------------\n\nTITLE: Creating Basic PSU Script with File Path\nDESCRIPTION: Creates a PowerShell Universal script by referencing an existing script file in the repository folder. This example demonstrates the basic usage of New-PSUScript cmdlet with a file path.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUScript.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUScript -Name 'Script1.ps1' -Path 'Script1.ps1'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Job Pipeline Output by ID\nDESCRIPTION: Example showing how to retrieve pipeline output for a specific job using its ID number.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUJobPipelineOutput.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-UAJobPipelineOutput -JobId 10\n```\n\n----------------------------------------\n\nTITLE: Invoking an API Endpoint with URL Parameters\nDESCRIPTION: Demonstrates how to call an endpoint with a variable URL segment by including the parameter value directly in the URL path.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/endpoints.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-RestMethod http://localhost:5000/user/123\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Chip Component in PowerShell\nDESCRIPTION: Demonstrates how to create a basic chip component with just a label. This is the simplest form of chip implementation.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/chip.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n New-UDChip -Label 'Basic'\n```\n\n----------------------------------------\n\nTITLE: Creating a Disabled Slider in PowerShell for Universal Dashboard\nDESCRIPTION: This example shows how to create a disabled slider with a value range of 0-100.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDSlider.txt#2025-04-16_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDSlider -Value 50 -Minimum 0 -Maximum 100 -Disabled -Id 'slider4'\n```\n\n----------------------------------------\n\nTITLE: Adding Icons to Textbox in PowerShell\nDESCRIPTION: Shows how to add an icon to a textbox using the New-UDIcon cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/textbox.md#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTextbox -Id \"ServerGroups\" -Icon (New-UDIcon -Icon 'server') -Value \"This is my server\"\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Links in Universal Dashboard with PowerShell\nDESCRIPTION: Creates a basic hyperlink that navigates to a specified URL when clicked. This example demonstrates the minimum required parameters for the New-UDLink cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/navigation/link.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDLink -Text 'Ironman Software' -Url https://www.ironmansoftware.com\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific PSU Folder by Name in PowerShell\nDESCRIPTION: This example shows how to use the Get-PSUFolder cmdlet with the -Name parameter to retrieve a specific folder by its name.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUFolder.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-UAFolder -Name 'Folder 1'\n```\n\n----------------------------------------\n\nTITLE: Creating a Horizontal Stack in PowerShell Universal Dashboard\nDESCRIPTION: Creates a horizontal stack arrangement of paper components with spacing of 2 units between each item. This is the default stack direction.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/layout/stack.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDStack -Content {\n   New-UDPaper -Content { \"Item 1\" } -Elevation 3\n   New-UDPaper -Content { \"Item 2\" } -Elevation 3\n   New-UDPaper -Content { \"Item 3\" } -Elevation 3\n} -Spacing 2\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Icons to Timeline Items in PowerShell Universal Apps\nDESCRIPTION: Enhances timeline items with custom icons using New-UDIcon. This example shows how to integrate Microsoft, Apple, NetworkWired, and User icons to make timeline events more visually distinctive.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/timeline.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTimeline -Children {\n    New-UDTimelineItem -Content {\n        'Breakfast'\n    } -OppositeContent {\n        '7:45 AM'\n    }  -Icon (New-UDIcon -Icon Microsoft)\n    New-UDTimelineItem -Content {\n        'Welcome Message'\n    } -OppositeContent {\n        '9:00 AM'\n    } -Icon (New-UDIcon -Icon Apple)\n    New-UDTimelineItem -Content {\n        'State of the Shell'\n    } -OppositeContent {\n        '9:30 AM'\n    } -Icon (New-UDIcon -Icon NetworkWired)\n    New-UDTimelineItem -Content {\n        'General Session'\n    } -OppositeContent {\n        '11:00 AM'\n    } -Icon (New-UDIcon -Icon User)\n} -Position alternate\n```\n\n----------------------------------------\n\nTITLE: Creating an Icon Button with Href in PowerShell\nDESCRIPTION: This example demonstrates how to create an icon button that navigates to a specified URL when clicked.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDIconButton.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDIconButton -Icon (New-UDIcon -Icon user -Size sm) -Href 'https://www.google.com' -Id 'iconButton3'\n```\n\n----------------------------------------\n\nTITLE: Resource Trigger Creation - PowerShell\nDESCRIPTION: Example of creating a resource-specific trigger for dashboard stop events.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/automation/triggers.md#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUTrigger -Name 'Trigger' -EventType DashboardStopped -TriggerScript Script.ps1 -Dashboard 'Dashboard'\n```\n\n----------------------------------------\n\nTITLE: Hide Modal Dialog Syntax\nDESCRIPTION: Basic syntax for hiding a modal dialog using the Hide-UDModal cmdlet. This cmdlet accepts common PowerShell parameters but requires no specific parameters of its own.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Hide-UDModal.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nHide-UDModal [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Elements in PowerShell Universal Dashboard\nDESCRIPTION: Shows how to create nested elements to form an unordered list structure.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/element.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDElement -Tag 'ul' -Content {\n    New-UDElement -Tag 'li' -Content { 'First' }\n    New-UDElement -Tag 'li' -Content { 'Second' }\n    New-UDElement -Tag 'li' -Content { 'Third' }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Dark Theme to Toast Notifications in PowerShell Universal Dashboard\nDESCRIPTION: Demonstrates how to apply a dark theme to a toast notification, changing its overall color scheme for better visibility in different UI environments.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Show-UDToast.txt#2025-04-16_snippet_18\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Text 'Show Toast' -OnClick {\n    Show-UDToast -Message 'Hello, World!' -Theme 'dark'\n} -Id 'toast19'\n```\n\n----------------------------------------\n\nTITLE: New-UDTab Cmdlet Syntax\nDESCRIPTION: The syntax pattern for the New-UDTab cmdlet showing all available parameters and their positions. Used to create new tabs that can be contained within New-UDTabs.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTab.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTab [[-Text] <String>] [-Content] <Endpoint> [[-Id] <String>] [-Dynamic] [[-Icon] <Object>] [-Disabled] [[-Style] <Hashtable>] [[-Sx] <Hashtable>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Creating a Combined Bar and Line Sparkline in PowerShell\nDESCRIPTION: This example demonstrates how to create a sparkline chart that combines both bars and lines. It uses random data with a maximum value of 1000 and specifies the chart's dimensions.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDSparkline.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$Data = 1..10 | ForEach-Object { Get-Random -Max 1000 }\nNew-UDSparkline -Data $Data -Type 'both' -Max 1000 -Height 100 -Width 500\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Graph Nodes and Links in JSON\nDESCRIPTION: JSON configuration defining nodes and links for a network graph visualization. Each node has properties for id, height, size, and color, while links define connections between nodes with specified distances.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-visualization/charts.md#2025-04-16_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"nodes\": [\n    {\n      \"id\": \"Node 1\",\n      \"height\": 1,\n      \"size\": 24,\n      \"color\": \"rgb(97, 205, 187)\"\n    },\n    {\n      \"id\": \"Node 2\",\n      \"height\": 1,\n      \"size\": 24,\n      \"color\": \"rgb(97, 205, 187)\"\n    }\n    // Additional nodes truncated for brevity\n  ],\n  \"links\": [\n    {\n      \"source\": \"Node 0\",\n      \"target\": \"Node 1\",\n      \"distance\": 80\n    }\n    // Additional links truncated for brevity\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Variable Reference in PSBlazor Components\nDESCRIPTION: Shows how to reference variables in PSBlazor component syntax.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/portal/portal-widgets/syntax.md#2025-04-16_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<Text>$TestVariable</Text>\n<Button OnClick=\"OnClick\">Click Me</Button>\n```\n\n----------------------------------------\n\nTITLE: New-UDTimelineItem PowerShell Cmdlet Syntax\nDESCRIPTION: The formal syntax definition for the New-UDTimelineItem cmdlet used to create timeline items in Universal Dashboard. The cmdlet accepts parameters for content, opposite content, icon, color, variant and styling options.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTimelineItem.txt#2025-04-16_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDTimelineItem [[-Content] <ScriptBlock>] [[-OppositeContent] <ScriptBlock>] [[-Icon] <Hashtable>] [[-Color] <String>] [[-Variant] <String>] [[-Sx] <Hashtable>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Step Validation JSON Structure in JavaScript\nDESCRIPTION: Shows the JSON format used for step validation in the stepper. This includes the context with field values and the current step index that can be used to determine if the step is valid.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/navigation/stepper.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    context: {\n        field1: \"value1\" \n    },\n    currentStep: 0\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Disabled Switch in PowerShell\nDESCRIPTION: Creates a switch component that is disabled and cannot be interacted with by the user. This is useful for read-only interfaces or when certain actions are temporarily unavailable.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDSwitch.txt#2025-04-16_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDSwitch -Id 'switch3' -Disabled\n```\n\n----------------------------------------\n\nTITLE: Applying CSS Style to Typography Component in PowerShell\nDESCRIPTION: Example demonstrating how to apply custom CSS styling to a typography component using New-UDStyle. Shows setting text color to red with black background.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDStyle.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDStyle -Style 'color: red; background-color: black' -Content {\n    New-UDTypography -Text \"This is red\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating PowerShell Universal Server Basic Usage\nDESCRIPTION: Basic example showing how to update the PowerShell Universal server using the Update-PSUServer cmdlet without any parameters. This will update the server using default settings.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Update-PSUServer.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nUpdate-PSUServer\n```\n\n----------------------------------------\n\nTITLE: Remove-PSUDashboard Syntax Patterns\nDESCRIPTION: The two main syntax patterns for using Remove-PSUDashboard: removing by Dashboard object or by ID. Both patterns support additional connection and authentication parameters.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Remove-PSUDashboard.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-PSUDashboard [-Dashboard] <Dashboard> [-AppToken <String>] [-ComputerName <String>] [-Integrated] [-UseDefaultCredentials] [-Credential <PSCredential>] [-TrustCertificate] [<CommonParameters>]\n\nRemove-PSUDashboard [-Id] <Int64> [-AppToken <String>] [-ComputerName <String>] [-Integrated] [-UseDefaultCredentials] [-Credential <PSCredential>] [-TrustCertificate] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Removing PowerShell Universal Schedule by ID\nDESCRIPTION: Example demonstrating how to retrieve a schedule by ID and then remove it using the Remove-PSUSchedule cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Remove-PSUSchedule.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\> $Schedule = Get-UASchedule -Id 12\nPS C:\\> Remove-UASchedule -Schedule $Schedule\n```\n\n----------------------------------------\n\nTITLE: Setting Variable Value Example in PowerShell Universal\nDESCRIPTION: Example demonstrating how to get a variable by name and set its value using PowerShell Universal cmdlets. Shows the process of retrieving a variable named 'username' and setting its value to 'lee'.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Set-PSUVariable.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$Variable = Get-UAVariable -Name 'username'\nSet-UAVariable -Variable $Variable -Value 'lee'\n```\n\n----------------------------------------\n\nTITLE: Publishing Azure Web App\nDESCRIPTION: PowerShell commands to deploy the web app to Azure using the Az module.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/hosting/azure.md#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n$Parameters = @{\n    Force = $true\n    ResourceGroupName = 'psudemo2_group'\n    Name = 'psudemo2'\n    ArchivePath = '.\\Universal.zip'\n}\nPublish-AzWebApp @Parameters\n```\n\n----------------------------------------\n\nTITLE: Stopping a PowerShell Universal Terminal Instance\nDESCRIPTION: This example demonstrates how to start a terminal instance and then stop it. It first retrieves a terminal by name, starts a new instance, and then stops all running instances.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Stop-PSUTerminalInstance.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$Terminal = Get-PSUTerminal | Where-Object Name -eq 'Terminal1'\nPS C:\\> Start-PSUTerminalInstance -Terminal $Terminal \nPS C:\\> Get-PSUTerminalInstance | Stop-PSUTerminalInstance\n```\n\n----------------------------------------\n\nTITLE: Creating a Published Folder with Default Document in PowerShell\nDESCRIPTION: PowerShell command to create a published folder with a default document. This configuration allows returning a specific file when a user accesses the folder path without specifying a file.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/published-folders.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUPublishedFolder -Path C:\\website -RequestPath /docs -DefaultDocument @(\"index.hml\")\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Icon in PowerShell Universal\nDESCRIPTION: Basic usage of New-UDIcon cmdlet to create a FontAwesome icon.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/icon.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDIcon -Icon 'NetworkWired'\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Schedules in PowerShell Universal\nDESCRIPTION: This example demonstrates how to use Get-PSUSchedule without parameters to retrieve all schedules defined in PSU.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUSchedule.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-UASchedule\n```\n\n----------------------------------------\n\nTITLE: Creating a Transfer List with a Disabled Item\nDESCRIPTION: Creates a transfer list where one specific item (test5) is disabled, preventing it from being selected or moved while other items remain interactive.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTransferList.txt#2025-04-16_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDTransferList -Item {\n    New-UDTransferListItem -Name 'test1' -Value 1\n    New-UDTransferListItem -Name 'test2' -Value 2\n    New-UDTransferListItem -Name 'test3' -Value 3\n    New-UDTransferListItem -Name 'test4' -Value 4\n    New-UDTransferListItem -Name 'test5' -Value 5 -Disabled\n} -Id 'transferlist5'\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Time Picker in PowerShell\nDESCRIPTION: This snippet demonstrates how to create a basic time picker component using the New-UDTimePicker cmdlet in PowerShell.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/time-picker.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTimePicker\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Attribute Resolution in Shibboleth IDP\nDESCRIPTION: Defines attribute resolution configuration for LDAP integration, including connection settings, attribute mappings, and principal name encoding. Configures email, display name, surname, and given name attributes from Active Directory with connection pooling settings.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/security/enterprise-security/saml2.md#2025-04-16_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<AttributeResolver\n        xmlns=\"urn:mace:shibboleth:2.0:resolver\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"urn:mace:shibboleth:2.0:resolver http://shibboleth.net/schema/idp/shibboleth-attribute-resolver.xsd\">\n\n    <!-- ========================================== -->\n    <!--      Attribute Definitions                 -->\n    <!-- ========================================== -->\n\n    <!-- Simple attributes are exported directly from the LDAP connector. -->\n\n    <AttributeDefinition id=\"uid\" xsi:type=\"PrincipalName\" />\n    <AttributeDefinition id=\"username\" xsi:type=\"PrincipalName\">\n         <AttributeEncoder xsi:type=\"SAML2String\" name=\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\" friendlyName=\"displayName\" encodeType=\"false\" />\n    </AttributeDefinition>\n\n    <!-- ========================================== -->\n    <!--      Data Connectors                       -->\n    <!-- ========================================== -->\n\n    <!-- Example LDAP Connector -->\n\n    <DataConnector id=\"myLDAP\" xsi:type=\"LDAPDirectory\"\n        ldapURL=\"%{idp.attribute.resolver.LDAP.ldapURL}\"\n        baseDN=\"%{idp.attribute.resolver.LDAP.baseDN}\" \n        principal=\"%{idp.attribute.resolver.LDAP.bindDN}\"\n        principalCredential=\"%{idp.attribute.resolver.LDAP.bindDNCredential}\"\n        useStartTLS=\"%{idp.attribute.resolver.LDAP.useStartTLS:true}\"\n        connectTimeout=\"%{idp.attribute.resolver.LDAP.connectTimeout}\"\n        responseTimeout=\"%{idp.attribute.resolver.LDAP.responseTimeout}\"\n        connectionStrategy=\"%{idp.attribute.resolver.LDAP.connectionStrategy}\"\n        noResultIsError=\"true\"\n        multipleResultsIsError=\"true\"\n        excludeResolutionPhases=\"c14n/attribute\"\n        exportAttributes=\"mail displayName sn givenName\">\n        <FilterTemplate>\n            <![CDATA[\n                %{idp.attribute.resolver.LDAP.searchFilter}\n            ]]>\n        </FilterTemplate>\n        <ConnectionPool\n            minPoolSize=\"%{idp.pool.LDAP.minSize:3}\"\n            maxPoolSize=\"%{idp.pool.LDAP.maxSize:10}\"\n            blockWaitTime=\"%{idp.pool.LDAP.blockWaitTime:PT3S}\"\n            validatePeriodically=\"%{idp.pool.LDAP.validatePeriodically:true}\"\n            validateTimerPeriod=\"%{idp.pool.LDAP.validatePeriod:PT5M}\"\n            validateDN=\"%{idp.pool.LDAP.validateDN:}\"\n            validateFilter=\"%{idp.pool.LDAP.validateFilter:(objectClass=*)}\"\n            expirationTime=\"%{idp.pool.LDAP.idleTime:PT10M}\"/>\n    </DataConnector>\n\n</AttributeResolver>\n```\n\n----------------------------------------\n\nTITLE: Enabling Paging in Universal Dashboard Tables\nDESCRIPTION: This example shows how to enable paging in a Universal Dashboard table. It sets the page size to 2 records per page using the -PageSize parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTable.txt#2025-04-16_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\n$Data = @(\n    @{Dessert = 'Frozen yoghurt'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Ice cream sandwich'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Eclair'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Cupcake'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Gingerbread'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n) \n\nNew-UDTable -Data $Data -Paging -PageSize 2 -Id 'table8'\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Image in PowerShell with New-UDImage\nDESCRIPTION: This example demonstrates how to create a basic image component using the New-UDImage function with a URL parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDImage.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDImage -Url \"https://ironmansoftware.com/img/ps-logo.png\"\n```\n\n----------------------------------------\n\nTITLE: Job Metadata Access - PowerShell\nDESCRIPTION: Shows how to access job metadata in a trigger script.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/automation/triggers.md#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nparam($Job)\n\n$Job\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Button Group in PowerShell\nDESCRIPTION: This example demonstrates how to create a basic button group with two items using the New-UDButtonGroup cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDButtonGroup.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButtonGroup -Content {\n    New-UDButtonGroupItem -Text 'Delete'\n    New-UDButtonGroupItem -Text 'Copy'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Vertical Slider in PowerShell for Universal Dashboard\nDESCRIPTION: This example demonstrates how to create a vertical slider within a div element with a specified height.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDSlider.txt#2025-04-16_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDElement -Tag 'div' -Content {\n    New-UDSlider -Orientation vertical -Id 'slider3'\n} -Attributes @{\n    style = @{\n        height = '200px'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PowerShell Universal Form with Processing Dialog\nDESCRIPTION: Creates a form that displays a progress indicator during form submission processing.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDForm.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDForm -Id 'form3' -Content {\n    New-UDTextbox -Id 'form3Textbox' -Label 'Name'\n} -OnSubmit {\n    Start-Sleep -Seconds 5        \n    Show-UDToast -Message ($EventData.form3Textbox)\n} -OnProcessing {\n    New-UDCard -Title 'Processing' -Content {\n        New-UDProgress\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Colored Badges in PowerShell\nDESCRIPTION: Shows how to create badges with different color schemes (secondary and success) applied to envelope icons with numeric content.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/badge.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDBadge -BadgeContent { 4 } -Children {\n    New-UDIcon -Icon Envelope -Size 2x\n} -Color secondary\nNew-UDBadge -BadgeContent { 4 } -Children {\n    New-UDIcon -Icon Envelope -Size 2x\n} -Color success\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Timeline in PowerShell Universal Apps\nDESCRIPTION: Creates a basic timeline control with content displayed on both sides of the timeline. The left side shows event names while the right side displays corresponding times.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/timeline.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTimeline -Children {\n    New-UDTimelineItem -Content {\n        'Breakfast'\n    } -OppositeContent {\n        '7:45 AM'\n    } \n    New-UDTimelineItem -Content {\n        'Welcome Message'\n    } -OppositeContent {\n        '9:00 AM'\n    }\n    New-UDTimelineItem -Content {\n        'State of the Shell'\n    } -OppositeContent {\n        '9:30 AM'\n    }\n    New-UDTimelineItem -Content {\n        'General Session'\n    } -OppositeContent {\n        '11:00 AM'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Markers to Map\nDESCRIPTION: Demonstrates how to add basic markers to a map using OpenStreetMap as the base layer.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-visualization/map.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDMap -Endpoint {\n    New-UDMapRasterLayer -TileServer 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png' \n    New-UDMapMarker -Latitude \"51.100\" -Longitude \"-0.5\"\n} -Latitude 51.505 -Longitude -0.09 -Zoom 13 -Height '100vh'\n```\n\n----------------------------------------\n\nTITLE: Basic Upload Component Example in PowerShell\nDESCRIPTION: Creates a basic upload component that shows a toast notification when a file is uploaded. The component has a button labeled 'Upload' and a specified ID.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDUpload.txt#2025-04-16_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDUpload -Text \"Upload\" -OnUpload {\n    Show-UDToast $Body\n} -Id 'upload1'\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Chip with Icon in PowerShell\nDESCRIPTION: This example demonstrates how to create a basic chip with a label and an icon using the New-UDChip cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDChip.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDChip -Label 'Basic' -Icon (New-UDIcon -Icon 'user') -Id 'chip1'\n```\n\n----------------------------------------\n\nTITLE: Adding Logo to Navigation in PowerShell Universal\nDESCRIPTION: Shows how to add a logo to a page's navigation using the -Logo parameter and referencing an image from a published assets folder.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/pages.md#2025-04-16_snippet_17\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDPage -Name 'Home' -Logo '/assets/favicon.png' -Content {\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Tooltip in PowerShell Universal\nDESCRIPTION: Demonstrates how to create a basic tooltip that displays simple text when hovering over an icon. The tooltip shows the word \"User\" when hovering over a user icon.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/tooltip.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTooltip -Content {\n    New-UDIcon -Icon 'User'\n} -TooltipContent {\n    \"User\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Integrated Security Model in PowerShell Universal JSON Configuration\nDESCRIPTION: Shows how to configure the 'Integrated' security model in appsettings.json, which avoids the need for app tokens, URLs, or certificates but does not communicate user context.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/module.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Api\": {\n       \"SecurityModel\": \"Integrated\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Card Body with New-UDCardBody in PowerShell\nDESCRIPTION: This example demonstrates how to create a card body using the New-UDCardBody cmdlet and then use it with New-UDCard. It sets the content of the card body and assigns an ID to the card.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDCardBody.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$Body = New-UDCardBody -Content { \"This is the body of the card\" }\nNew-UDCard -Body $Body -Id 'card1'\n```\n\n----------------------------------------\n\nTITLE: Native Relative Path Redirect in PowerShell\nDESCRIPTION: Demonstrates using the -Native parameter for relative path redirects outside of the dashboard context.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Invoke-UDRedirect.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Text 'Click Me' -OnClick {\n    Invoke-UDRedirect '/relative/path' -Native\n}\n```\n\n----------------------------------------\n\nTITLE: Profiling PowerShell Universal Dashboard App\nDESCRIPTION: Creates a Universal Dashboard app with performance measurement using Measure-PSUBlock to track execution time of specific operations.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/development/profiling.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDApp -Title 'App' -Content {\n    New-UDDynamic -Id 'MyElement' -Content {\n        Measure-PSUBlock -Name 'WithinDashboard' -ScriptBlock {\n            Start-Sleep 1\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Backdrop Overlay in PowerShell\nDESCRIPTION: Demonstrates creating a basic backdrop with white background, text content, and click handling. The backdrop can be closed by clicking on it, which triggers a toast message.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDBackdrop.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDBackdrop -Color '#fff' -Children {\n    New-UDTypography -Text 'Hello World'\n} -Open -OnClick {\n    Show-UDToast -Message 'Backdrop clicked'\n    Set-UDElement -Id 'backdrop1' -Properties @{\n        open = $false\n    }\n} -Id 'backdrop1'\n```\n\n----------------------------------------\n\nTITLE: PowerShell Universal Server Update Syntax\nDESCRIPTION: Full syntax showing all available parameter combinations for the Update-PSUServer cmdlet. Includes options for specifying path, version, and IIS website settings.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Update-PSUServer.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nUpdate-PSUServer [-Path <String>] [-Version <String>] [-IISWebsite <String>] [<CommonParameters>]\n\nUpdate-PSUServer [-Path <String>] [-LatestVersion] [-IISWebsite <String>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Renaming a Script in PowerShell Universal\nDESCRIPTION: Example demonstrating how to rename a script in PowerShell Universal. First, retrieve a script object using Get-UAScript, then rename it using Rename-UAScript.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Rename-PSUScript.txt#2025-04-16_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$Script = Get-UAScript -name 'Script1.ps1'\nRename-UAScript -Script $Script -Name 'Script2.ps1'\n```\n\n----------------------------------------\n\nTITLE: PowerShell Universal Translation Cmdlet Syntax\nDESCRIPTION: Complete syntax definition for the New-PSUTranslation cmdlet showing all available parameters and their configuration options.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUTranslation.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUTranslation [-AppToken <String>] [-ComputerName <String>] [-Integrated] -LanguageId <String> [-Name <String>] [-Strings <Hashtable>] [-UseDefaultCredentials] [-Credential <PSCredential>] [-TrustCertificate] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Data Binding Example\nDESCRIPTION: Demonstrates two-way data binding syntax in PSBlazor.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/portal/portal-widgets/syntax.md#2025-04-16_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<Input bind-Value=\"$TextValue\"></Input>\n```\n\n----------------------------------------\n\nTITLE: Setting PowerShell Universal Authentication - WS-Federation\nDESCRIPTION: Syntax for configuring WS-Federation authentication with required parameters for callback path, wreply, and wtrealm. Includes metadata address and correlation cookie settings.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Set-PSUAuthenticationMethod.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PSUAuthenticationMethod [-AppToken <String>] [-ComputerName <String>] [-ScriptBlock <ScriptBlock>] [-Disabled] [-UseDefaultCredentials] -CallbackPath <String> [-Configure <ScriptBlock>] [-CorrelationCookieSameSite <String>] [-Integrated] -MetadataAddress <String> [-Type <AuthenticationMethodType>] [-UseTokenLifetime <Boolean>] -Wreply <String> -Wtrealm <String> [-Credential <PSCredential>] [-TrustCertificate] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Setting PowerShell Universal Script Properties - ScriptBlock Syntax\nDESCRIPTION: Syntax variation that accepts a ScriptBlock parameter for setting script content. Provides same configuration capabilities while allowing direct script content definition.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Set-PSUScript.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PSUScript [-AppToken <String>] [-ComputerName <String>] [-Content <String>] [-Description <String>] [-DisableManualInvocation <Boolean>] [-Environment <String>] [-Integrated] [-ManualTime <Double>] [-MaxHistory <Int32>] [-Name <String>] [-Notes <String>] [-ScriptBlock <ScriptBlock>] [-ScriptErrorAction {SilentlyContinue | Stop | Continue | Inquire | Ignore | Suspend | Break}] [-Status {Draft | Pending Review | Pending | Review | Published | Disabled}] [-Tag <Tag[]>] [-TimeOut <Double>] [-UseDefaultCredentials] [-Credential <PSCredential>] [-TrustCertificate]\n```\n\n----------------------------------------\n\nTITLE: Stepper Context Data Structure in JavaScript\nDESCRIPTION: Shows the JSON structure of the $Body variable that contains the current state of the stepper. This includes the context with field values and the current step index.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/navigation/stepper.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    context: {\n        txtStep1: \"value1\",\n        txtStep2: \"value2\",\n        txtStep3: \"value3\"\n    },\n    currentStep: 0\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Icon Checkbox Implementation\nDESCRIPTION: Shows how to create checkboxes with custom icons and styling using the angry icon with different sizes and colors.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/checkbox.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$Icon = New-UDIcon -Icon angry -Size lg -Regular\n$CheckedIcon = New-UDIcon -Icon angry -Size lg\nNew-UDCheckBox -Icon $Icon -CheckedIcon $CheckedIcon -Style @{color = '#2196f3'}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic PowerShell Expansion Panel\nDESCRIPTION: Example showing how to create an expansion panel with a title and content. The panel contains a div element with text content and uses specific IDs for both the panel and inner content.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDExpansionPanel.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDExpansionPanel -Title \"Hello\" -Id 'expContent' -Content {\n    New-UDElement -Tag 'div' -id 'expContentDiv' -Content { \"Hello\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Escape Key Dismissal for Toast Notifications in PowerShell Universal Dashboard\nDESCRIPTION: Shows how to configure a toast notification to close when the Escape key is pressed, providing keyboard-based dismissal.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Show-UDToast.txt#2025-04-16_snippet_13\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Text 'Show Toast' -OnClick {\n    Show-UDToast -Message 'Hello, World!' -CloseOnEscape\n} -Id 'toast14'\n```\n\n----------------------------------------\n\nTITLE: Implementing Collapse Transition in PowerShell\nDESCRIPTION: Creates a collapse transition effect on a button with a checkbox toggle control. The transition collapses the element with a 1000ms duration.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTransition.txt#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTransition -Collapse -In -Children {\n    New-UDButton -Text 'Click Me' -Id 'button5'\n} -Id 'transition5'  -Timeout 1000\nNew-UDCheckbox -Label 'Toggle' -OnChange {\n    Set-UDElement -Id 'transition5' -Properties @{\n        In = $EventData\n    }\n} -Checked $true\n```\n\n----------------------------------------\n\nTITLE: Creating Root Level Folder in PowerShell Universal\nDESCRIPTION: Creates a new Scripts folder in the root of the PSU folder structure.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUFolder.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UAFolder -Name 'Scripts'\n```\n\n----------------------------------------\n\nTITLE: Retrieving PowerShell Universal Apps using Get-PSUDashboard\nDESCRIPTION: Example showing how to retrieve a specific app named 'MyApp' from PowerShell Universal using the Get-PSUDashboard cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUDashboard.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PSUDashboard -Name 'MyApp'\n```\n\n----------------------------------------\n\nTITLE: Implementing Collapse Transition with Custom Height in PowerShell\nDESCRIPTION: Creates a collapse transition with a specified collapse height of 100 pixels. The transition occurs over 1000 milliseconds when toggled.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTransition.txt#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTransition -Collapse -In -Children {\n    New-UDButton -Text 'Click Me' -Id 'button6'\n} -Id 'transition6' -CollapseHeight 100  -Timeout 1000\nNew-UDCheckbox -Label 'Toggle' -OnChange {\n    Set-UDElement -Id 'transition6' -Properties @{\n        In = $EventData\n    }\n} -Checked $true\n```\n\n----------------------------------------\n\nTITLE: Creating Icons with Different Sizes in PowerShell\nDESCRIPTION: Demonstrates creating multiple icons with varying sizes using a horizontal stack layout.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDIcon.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDStack -Direction 'row' -Content {\n    New-UDIcon -Icon 'AddressBook' -Size 'sm' -Id 'icon2'\n    New-UDIcon -Icon 'AddressBook' -Size 'lg' -Id 'icon3'\n    New-UDIcon -Icon 'AddressBook' -Size '5x' -Id 'icon4'\n    New-UDIcon -Icon 'AddressBook' -Size '10x' -Id 'icon5'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Menu in PowerShell\nDESCRIPTION: Creates a simple menu with three items using New-UDMenu cmdlet. The menu is assigned an ID 'menu1' and displays 'Click Me' as the trigger text.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDMenu.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDMenu -Text 'Click Me'  -Children {\n    New-UDMenuItem -Text 'Test'\n    New-UDMenuItem -Text 'Test2'\n    New-UDMenuItem -Text 'Test3'\n} -Id 'menu1'\n```\n\n----------------------------------------\n\nTITLE: Removing PowerShell Universal Trigger via Pipeline\nDESCRIPTION: The Remove-PSUTrigger cmdlet can accept a Trigger object through the pipeline. This is useful when you need to filter and then remove specific triggers in a single operation.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Remove-PSUTrigger.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PSUTrigger | Where-Object { $_.Name -eq \"MyTrigger\" } | Remove-PSUTrigger\n```\n\n----------------------------------------\n\nTITLE: Retrieving Endpoint by ID in PowerShell Universal\nDESCRIPTION: Retrieves a specific endpoint using its numeric ID. Note that IDs are reset when the server restarts.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUEndpoint.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PSUEndpoint -Id 1\n```\n\n----------------------------------------\n\nTITLE: Setting Tag Properties in PowerShell Universal\nDESCRIPTION: This example demonstrates how to retrieve a tag using Get-UATag and then set its color using Set-UATag. It shows the basic usage of the Set-UATag cmdlet with the Tag parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Set-PSUTag.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$Tag = Get-UATag -Name 'Release' \nSet-UATag -Tag $Tag -Color '#231531'\n```\n\n----------------------------------------\n\nTITLE: Creating an Unordered List with New-UDHtml in PowerShell\nDESCRIPTION: This snippet demonstrates how to use the New-UDHtml cmdlet to create a static HTML unordered list in Universal apps. The -Markup parameter is used to specify the HTML string.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/html.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDHtml -Markup \"<ul><li>First</li><li>Second</li><li>Third</li></ul>\"\n```\n\n----------------------------------------\n\nTITLE: Creating Typography with Nested UI Elements in PowerShell\nDESCRIPTION: Creates a typography component that contains a button inside it using the Content parameter with a script block.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTypography.txt#2025-04-16_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDTypography -Id \"typography12\" -Content {\n    New-UDButton -Text \"Click Me\" -Id \"button1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Toast Message Color in PowerShell Universal Dashboard\nDESCRIPTION: Demonstrates how to change the color of the message text in a toast notification to blue for visual distinction.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Show-UDToast.txt#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Text 'Show Toast' -OnClick {\n    Show-UDToast -Message 'Hello, World!' -MessageColor 'blue'\n} -Id 'toast6'\n```\n\n----------------------------------------\n\nTITLE: Installing PowerShell Universal Module\nDESCRIPTION: Installs the Universal PowerShell module from the PowerShell Gallery which provides cmdlets for interacting with the Management API.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/management-api.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Module Universal\n```\n\n----------------------------------------\n\nTITLE: Creating a Link with Custom Content in PowerShell\nDESCRIPTION: This example demonstrates how to create a link with custom content (an image) using the -Content parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDLink.txt#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDLink -Url \"https://www.google.com\" -Content {\n    New-UDImage -Url \"https://www.ironmansoftware.com/img/ps-logo.png\" -Height 20 -Width 20 \n} -Id 'link7'\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS with Certificate Store for PowerShell Universal\nDESCRIPTION: This JSON configuration sets up HTTPS for PowerShell Universal using a certificate from the Windows certificate store. It specifies the certificate subject, store, location, and allows invalid certificates.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/hosting/README.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Kestrel\": {\n    \"Endpoints\": {\n      \"HTTPS\": {\n         \"Url\": \"https://*:443\",\n           \"Certificate\": {\n             \"Subject\": \"windows-server.ironman.local\",\n             \"Store\": \"My\",\n             \"Location\": \"LocalMachine\",\n             \"AllowInvalid\": \"true\"\n           }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking PowerShell Universal API Endpoint - Basic Example\nDESCRIPTION: Demonstrates basic usage of Invoke-PSUEndpoint cmdlet to invoke an API endpoint internally. The example shows how to call a custom endpoint using the minimum required -URL parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Invoke-PSUEndpoint.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-PSUEndoint -URL '/myapi'\n```\n\n----------------------------------------\n\nTITLE: Syntax for New-PSUBranding Cmdlet in PowerShell Universal\nDESCRIPTION: This snippet shows the full syntax for the New-PSUBranding cmdlet, including all available parameters. It demonstrates how to use the cmdlet to set branding for PowerShell Universal, including options for customizing the admin console, app bar, login page, and various UI elements.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUBranding.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUBranding [-AdminConsoleTitle <String>] [-AppBarLogo <String>] [-AppNotRunningDescription <String>] [-AppToken <String>] [-ComputerName <String>] [-Copyright <String>] [-Credential <PSCredential>] [-CssStylesheet <String[]>] [-CssStylesheetIntegrity <String[]>] [-Favicon <String>] [-HeaderColor <String>] [-HeaderFontColor <String>] [-Integrated] [-LoggedOut <String>] [-LoggedOutDescription <String>] [-LoginPageDescription <String>] [-LoginPageImage <String>] [-LoginPageLinks <LoginPageLink[]>] [-LoginPageText <String>] [-LoginPageTitle <String>] [-NotAuthorizedDescription <String>] [-NotAuthorizedTitle <String>] [-PageNotFoundDescription <String>] [-PageNotFoundTitle <String>] [-PrimaryColor <String>] [-PrimaryFontColor <String>] [-SecondaryColor <String>] [-SecondaryFontColor <String>] [-TrustCertificate] [-UseDefaultCredentials] [-DarkAppBarLogo <String>] [-LoginPageTheme <ThemePreference>] [-PortalTitle <String>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Variable Usage in Component Attributes\nDESCRIPTION: Demonstrates using variables within component attributes.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/portal/portal-widgets/syntax.md#2025-04-16_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<Alert Message=\"$TestVariable\"></Alert>\n<Button OnClick=\"OnClick\">Click Me</Button>\n```\n\n----------------------------------------\n\nTITLE: Clearing Server-Side Cache in PowerShell Universal\nDESCRIPTION: This PowerShell cmdlet clears the server-side cache in PowerShell Universal. It does not affect $Cache: variables in the current session. The cmdlet supports various parameters for authentication and connection options.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Clear-PSUCache.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nClear-PSUCache [-AppToken <String>] [-ComputerName <String>] [-Integrated] [-UseDefaultCredentials] [-Credential <PSCredential>] [-TrustCertificate] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Defining New-UDItemLayout Function Syntax in PowerShell\nDESCRIPTION: Specifies the syntax for the New-UDItemLayout cmdlet, including required and optional parameters. This function is used to create a new item layout for New-UDGridLayout, primarily used internally by the PowerShell Universal designer.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDItemLayout.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDItemLayout [-Id] <String> [-Row] <Int32> [-Column] <Int32> [[-ColumnSpan] <Int32>] [[-RowSpan] <Int32>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Creating Circular Skeleton\nDESCRIPTION: Creates a circular skeleton component with equal width and height dimensions of 40 pixels.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDSkeleton.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDSkeleton -Id 'skeleton3' -Variant circle -Width 40 -Height 40\n```\n\n----------------------------------------\n\nTITLE: Implementing Fade Transition in PowerShell\nDESCRIPTION: Creates a fade transition effect on a button with a checkbox toggle control. The transition occurs over 1000 milliseconds when the checkbox state changes.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTransition.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTransition -Fade -In -Children {\n    New-UDButton -Text 'Click Me'  -Id 'button1'\n} -Id 'transition1' -Timeout 1000\nNew-UDCheckbox -Label 'Toggle' -OnChange {\n    Set-UDElement -Id 'transition1' -Properties @{\n        In = $EventData\n    }\n} -Checked $true\n```\n\n----------------------------------------\n\nTITLE: Creating a Switch with Label Placement in PowerShell\nDESCRIPTION: Creates a switch component with labels and custom label placement. The LabelPlacement parameter controls where labels appear relative to the switch (in this case, below the switch).\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDSwitch.txt#2025-04-16_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDSwitch -Id 'switch5' -Checked $true -Label 'On' -UncheckedLabel 'Off' -LabelPlacement 'bottom'\n```\n\n----------------------------------------\n\nTITLE: Adding Icon to Autocomplete Component in PowerShell\nDESCRIPTION: Demonstrates how to add an icon to the autocomplete component using the -Icon parameter with New-UDIcon cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/automcomplete.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDAutocomplete -Options @(\"Test\", \"No\", \"Yes\") -Icon (New-UDIcon -Icon 'Users') \n```\n\n----------------------------------------\n\nTITLE: Retrieving All Tags in PowerShell Universal\nDESCRIPTION: This example demonstrates how to use the Get-PSUTag cmdlet without parameters to retrieve all tags defined in PowerShell Universal.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUTag.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-UATag\n```\n\n----------------------------------------\n\nTITLE: Creating Colored Progress Bar in PowerShell\nDESCRIPTION: Creates a progress bar with custom background (red) and progress (blue) colors.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDProgress.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDProgress -BackgroundColor 'red' -ProgressColor 'blue' -Id 'progress3'\n```\n\n----------------------------------------\n\nTITLE: Adding OnChange Event to Date Picker in PowerShell\nDESCRIPTION: Creates a date picker with an OnChange event that displays a toast message when a date is selected.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDDatePicker.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDatePicker -Id 'datepicker2' -Value '1-2-2020' -OnChange {\n    Show-UDToast -Message \"Date selected: $EventData\"\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Response Headers Configuration\nDESCRIPTION: Demonstrates how to set custom response headers using a hashtable.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/endpoints.md#2025-04-16_snippet_26\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUApiResponse -StatusCode 200 -Headers @{\n    \"Referrer-Policy\" = \"no-referrer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Paper Content with Markdown in PowerShell\nDESCRIPTION: Shows how to override the default flex display type of Paper content to properly render Markdown. Uses the -Style parameter to set display to 'block'.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/surfaces/paper.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$m=@'\n# Hello\n\n## world\n- a\n- b\n-c\n'@\n\nNew-UDPaper -Elevation 7 -Children {\n   New-UDMarkdown -markdown $m\n} -Style @{\n   display = 'block'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Time Picker with Initial Value in PowerShell\nDESCRIPTION: Creates a time picker with an initial value set to 12:00. This demonstrates how to set a default time for the picker.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTimePicker.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTimePicker -Id 'timepicker3' -Value \"12:00\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Rating Component with Highlight Selected Only in PowerShell\nDESCRIPTION: This example demonstrates how to create a rating component that only highlights the selected rating.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDRating.txt#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDRating -Value 3 -HighlightSelectedOnly -Id 'rating5'\n```\n\n----------------------------------------\n\nTITLE: Creating Form with External Validation\nDESCRIPTION: Shows how to implement custom form validation with an external validate button using Test-UDForm\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDForm.txt#2025-04-16_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDForm -Id 'form12' -Content {\n   New-UDTextbox -Id 'form12Textbox' -Label 'Name'\n} -OnSubmit {\n    Show-UDToast -Message ($EventData.form12Textbox)\n} -OnValidate {\n    if ($EventData.form12Textbox -eq 'Hello') {\n        New-UDValidationResult -Valid\n    }\n    else {\n        New-UDValidationResult -ValidationError \"Name must be 'Hello'\"\n    }\n}\nNew-UDButton -Text \"Validate form\" -OnClick {\n    Test-UDForm -Id \"form12\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Dynamic Region in PowerShell\nDESCRIPTION: Demonstrates how to create a simple dynamic region that executes when the user loads the page. It displays the current date and time.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDDynamic.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDynamic -Content {\n    New-UDTypography -Text (Get-Date) -Id 'text1'\n} -Id 'dynamic1'\n```\n\n----------------------------------------\n\nTITLE: Remove-PSURole Syntax Definitions\nDESCRIPTION: The complete syntax patterns for the Remove-PSURole cmdlet, showing two different parameter sets - one using the role ID and another using a Role object.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Remove-PSURole.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-PSURole [-Id] <Int64> [-AppToken <String>] [-ComputerName <String>] [-Integrated] [-UseDefaultCredentials] [-Credential <PSCredential>] [-TrustCertificate] [<CommonParameters>]\n\nRemove-PSURole [-Role] <Role> [-AppToken <String>] [-ComputerName <String>] [-Integrated] [-UseDefaultCredentials] [-Credential <PSCredential>] [-TrustCertificate] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Creating a Full Width Modal in PowerShell with Show-UDModal\nDESCRIPTION: This example demonstrates how to create a full width modal with a maximum width set to 'md' using the Show-UDModal cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Show-UDModal.txt#2025-04-16_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDButton -Text 'Full Width' -OnClick {\n    Show-UDModal -Content {\n        New-UDTypography -Text \"Hello\"\n    } -FullWidth -MaxWidth 'md'\n} -Id 'button3'\n```\n\n----------------------------------------\n\nTITLE: Component Definition for Style Component\nDESCRIPTION: Component decorator defining the Style component with CSS3 classification.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDStyle.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n[Component(\"Style\", \"Css3\", \"Creates a new card.\")]\n```\n\n----------------------------------------\n\nTITLE: Creating Textbox with Helper Text in PowerShell\nDESCRIPTION: Creates a textbox with additional helper text displayed below the input field.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTextbox.txt#2025-04-16_snippet_13\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTextbox -Id 'textbox13' -HelperText 'This is a helper text' -Label 'Name' -Placeholder 'Enter your name' -Value 'John Doe'\n```\n\n----------------------------------------\n\nTITLE: Set-PSUVariable Syntax Definitions\nDESCRIPTION: Multiple syntax variations for the Set-PSUVariable cmdlet showing different parameter combinations for setting variable properties including support for direct ID reference, variable objects, and credential-based authentication.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Set-PSUVariable.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PSUVariable [-Id] <Int64> [-AppToken <String>] [-ComputerName <String>] [-Description <String>] [-Integrated] [-Name <String>] [-UseDefaultCredentials] [-Value <String>] [-Credential <PSCredential>] [-TrustCertificate] [<CommonParameters>]\n\nSet-PSUVariable [-Id] <Int64> [-AppToken <String>] [-ComputerName <String>] [-Description <String>] [-InputObject <Object>] [-Integrated] [-Name <String>] [-UseDefaultCredentials] [-Credential <PSCredential>] [-TrustCertificate] [<CommonParameters>]\n\nSet-PSUVariable [-Id] <Int64> [-AppToken <String>] [-ComputerName <String>] [-Description <String>] [-Integrated] [-Name <String>] [-UseDefaultCredentials] [-Credential <PSCredential>] [-Password <String>] [-TrustCertificate] [-UserName <String>] [<CommonParameters>]\n\nSet-PSUVariable [-Variable] <Variable> [-AppToken <String>] [-ComputerName <String>] [-Description <String>] [-InputObject <Object>] [-Integrated] [-Name <String>] [-UseDefaultCredentials] [-Credential <PSCredential>] [-TrustCertificate] [<CommonParameters>]\n\nSet-PSUVariable [-Variable] <Variable> [-AppToken <String>] [-ComputerName <String>] [-Description <String>] [-Integrated] [-Name <String>] [-UseDefaultCredentials] [-Value <String>] [-Credential <PSCredential>] [-TrustCertificate] [<CommonParameters>]\n\nSet-PSUVariable [-Variable] <Variable> [-AppToken <String>] [-ComputerName <String>] [-Description <String>] [-Integrated] [-Name <String>] [-UseDefaultCredentials] [-Credential <PSCredential>] [-Password <String>] [-TrustCertificate] [-UserName <String>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Creating Outlined Buttons in PowerShell for Universal Apps\nDESCRIPTION: Creates a medium-emphasis outlined button, typically used for important but non-primary actions in an app.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/button.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Variant 'outlined' -Text 'Default'\n```\n\n----------------------------------------\n\nTITLE: Setting Icon Sizes in PowerShell Universal\nDESCRIPTION: Examples of creating icons with different size parameters from xs to 10x.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/icon.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n    New-UDIcon -Icon 'AddressBook' -Size 'sm'\n    New-UDIcon -Icon 'AddressBook' -Size 'lg'\n    New-UDIcon -Icon 'AddressBook' -Size '5x'\n    New-UDIcon -Icon 'AddressBook' -Size '10x'\n```\n\n----------------------------------------\n\nTITLE: Enabling Click-to-Close for Toast Notifications in PowerShell Universal Dashboard\nDESCRIPTION: Demonstrates how to configure a toast notification to close when clicked anywhere, providing a simple dismissal mechanism.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Show-UDToast.txt#2025-04-16_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Text 'Show Toast' -OnClick {\n    Show-UDToast -Message 'Hello, World!' -CloseOnClick\n} -Id 'toast13'\n```\n\n----------------------------------------\n\nTITLE: Row-Reverse Stack Layout\nDESCRIPTION: Shows how to create a stack with reversed horizontal layout direction\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDStack.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDStack -Content {\n    New-UDCard -Text \"Card 1\" -RemoveMargin\n    New-UDCard -Text \"Card 2\" -RemoveMargin\n    New-UDCard -Text \"Card 3\" -RemoveMargin\n} -Spacing 2 -Id 'stack3' -Direction 'row-reverse'\n```\n\n----------------------------------------\n\nTITLE: Dynamic Page Title in PowerShell Universal\nDESCRIPTION: Shows how to create a dynamic page title that updates with the current time using the -LoadTitle parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/pages.md#2025-04-16_snippet_19\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDPage -Name \"Home\" -LoadTitle { \"Current Time\" + (Get-Date) } -Content { }\n```\n\n----------------------------------------\n\nTITLE: Configuring SQL Server Persistence in PowerShell Universal\nDESCRIPTION: Configuration settings in appsettings.json for using Microsoft SQL Server as the persistence layer. SQL support enables scaling out database and PowerShell Universal instances, allowing automatic job distribution across agent pools.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/persistence.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n  \"Plugins\": [\n    \"SQL\"\n  ],\n  \"Data\": {\n    \"ConnectionString\": \"Server=(localdb)\\\\mssqllocaldb;Database=PSUv3;Integrated Security=true;\",\n  },\n```\n\n----------------------------------------\n\nTITLE: Configuring Integrated Environment in PowerShell Universal\nDESCRIPTION: This snippet demonstrates how to configure the Integrated environment in PowerShell Universal by setting up modules in the environments.ps1 file.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/environments.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUEnvironment -Name 'Integrated' -Path 'none' -Modules @('ActiveDirectory')\n```\n\n----------------------------------------\n\nTITLE: Multi-Page App Configuration\nDESCRIPTION: Demonstrates how to create an app with multiple pages using arrays and page objects.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/building-dashboards.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n$Pages = @()\n$Pages += New-UDPage -Name 'My Home Page' -Content {}\n$Pages += New-UDPage -Name 'Diagnostics' -Content {}\nNew-UDApp -Pages $Pages -Title 'Dashboard'\n```\n\n----------------------------------------\n\nTITLE: Enabling Profiling Configuration in JSON\nDESCRIPTION: JSON configuration to enable profiling functionality in the appsettings.json file. Requires restart after changes.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/development/profiling.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"Profiling\": true\n```\n\n----------------------------------------\n\nTITLE: Configure PowerShell Terminal Path\nDESCRIPTION: Configuration file path reference for PowerShell Universal terminals. Terminal configurations are stored in the terminals.ps1 file.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/automation/terminals.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nterminals.ps1\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows-based Universal Docker Container\nDESCRIPTION: Dockerfile configuration for Windows Server Core-based Universal container with volume mapping and environment settings for repository, database, and logging paths.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/docker.md#2025-04-16_snippet_24\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM ironmansoftware/universal:5.0.0-windowsservercore-1809\nLABEL description=\"Universal - The ultimate platform for building web-based IT Tools\" \n\nEXPOSE 5000\nVOLUME [\"C:/data\"]\nENV Data__RepositoryPath C:/data/Repository\nENV Data__ConnectionString Data Source=C:/data/database.db\nENV UniversalDashboard__AssetsFolder C:/data/UniversalDashboard \nENV Logging__Path C:/data/logs/log.txt\nENTRYPOINT [\"C:/ProgramData/Universal/Universal.Server.exe\"]\n```\n\n----------------------------------------\n\nTITLE: New-UDMapVectorLayer Polygon Syntax\nDESCRIPTION: Creates a polygon vector layer on a map using specified positions. Supports fill color, opacity, and border customization.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDMapVectorLayer.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDMapVectorLayer [-Id <String>] [-Color <DashboardColor>] [-FillColor <DashboardColor>] [-FillOpacity <Double>] [-Weight <Int32>] [-Opacity <Double>] -Polygon -Positions <Object> [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Creating a Button Group with Icons in PowerShell\nDESCRIPTION: This example shows how to create a button group with icons using the -Icon parameter for each button group item.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDButtonGroup.txt#2025-04-16_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButtonGroup -Content {\n    New-UDButtonGroupItem -Text 'Delete' -Icon (New-UDIcon -Icon 'trash')\n    New-UDButtonGroupItem -Text 'Copy'  -Icon (New-UDIcon -Icon 'copy')\n}\n```\n\n----------------------------------------\n\nTITLE: Locale-Specific DateTime Formatting in PowerShell\nDESCRIPTION: Demonstrates how to format dates using specific locale settings. This example shows date formatting using Spanish locale.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/date-and-time.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDateTime -InputObject (Get-Date) -Locale 'es'\n```\n\n----------------------------------------\n\nTITLE: Get-PSUPublishedFolder Cmdlet Syntax\nDESCRIPTION: The main syntax pattern for using the Get-PSUPublishedFolder cmdlet. Shows all available parameters including AppToken, ComputerName, Id, authentication options and common parameters.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUPublishedFolder.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PSUPublishedFolder [-AppToken <String>] [-ComputerName <String>] -Id <Int64> [-Integrated] [-UseDefaultCredentials] [-Credential <PSCredential>] [-TrustCertificate] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Creating Sized Paper Component in PowerShell\nDESCRIPTION: Creates a new paper component with specified width and height of 1000 pixels. This example demonstrates how to set custom dimensions for the paper component.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDPaper.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDPaper -Id 'paper3' -Children {\n    New-UDButton -Text 'Click Me'\n} -Width 1000 -Height 1000 -Elevation 5\n```\n\n----------------------------------------\n\nTITLE: PowerShell Universal v5.0.6 Configuration\nDESCRIPTION: Example of version 5.0.6 configuration settings showing cmdlet usage for Invoke-PSUScript with path parameters and TrustCertificate flag.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/changelog.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-PSUScript -Name \"./relative/path/script.ps1\"\nSet-PSUSettings -TrustCertificate $true\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Colors to Paper in PowerShell\nDESCRIPTION: Shows how to customize the appearance of a Paper component by applying a background color using the -Style parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/surfaces/paper.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDPaper  -Content { } -Style @{ \n     backgroundColor = 'red'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Skeleton with Disabled Animation\nDESCRIPTION: Creates a skeleton component with animation disabled. Specifies dimensions of 210 pixels width and 118 pixels height.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDSkeleton.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDSkeleton -Id 'skeleton4' -Animation disabled -Width 210 -Height 118\n```\n\n----------------------------------------\n\nTITLE: Creating Typography with Gutter Bottom in PowerShell\nDESCRIPTION: Creates a typography component with space below the text using the GutterBottom switch parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTypography.txt#2025-04-16_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDTypography -Text \"Hello World\" -Id \"typography4\" -GutterBottom\n```\n\n----------------------------------------\n\nTITLE: Adding Attributes to Images in PowerShell Universal Dashboard\nDESCRIPTION: Creates an image component with additional HTML attributes. This example demonstrates adding an alt text attribute for accessibility and SEO purposes.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-visualization/image.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDImage -Url \"https://ironmansoftware.com/img/ps-logo.png\" -Attributes @{\n    alt = \"Ironman Software Logo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown in Universal Dashboard (PowerShell)\nDESCRIPTION: This snippet demonstrates how to use the New-UDMarkdown cmdlet to render a markdown string as HTML elements within a Universal dashboard. It includes examples of headers and list items.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/markdown.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDMarkdown -Markdown \"\n   # Header\n   - List Item 1\n   - List Item 2\n   \n   ## Sub Header\n\"\n```\n\n----------------------------------------\n\nTITLE: Creating Basic PowerShell DataGrid\nDESCRIPTION: Creates a basic data grid with static data and simple column configuration. Demonstrates basic grid initialization with random number data.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDDataGrid.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDataGrid -LoadRows {\n    $Data = @(\n        @{ Name = 'Adam'; Number = Get-Random}\n        @{ Name = 'Tom'; Number = Get-Random}\n        @{ Name = 'Sarah'; Number = Get-Random}\n    )\n    @{\n        rows = $Data \n        rowCount = $Data.Length\n    }\n} -Columns @(\n    New-UDDataGridColumn -Field 'Name'\n    New-UDDataGridColumn -Field 'Number'\n) -Id 'dataGrid1'\n```\n\n----------------------------------------\n\nTITLE: New-UDSelectGroup Syntax in PowerShell\nDESCRIPTION: Defines the syntax for using the New-UDSelectGroup cmdlet. It takes an Option parameter as a ScriptBlock and a Name parameter as a String. This cmdlet is used in conjunction with New-UDSelect to create grouped options in a select component.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDSelectGroup.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDSelectGroup [-Option] <ScriptBlock> [-Name] <String> [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: ApiResponse Class Definition in C#\nDESCRIPTION: C# class definition for the ApiResponse object that must be returned from C# API endpoints. This defines the response structure including status code, body, and headers.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/plugins.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ApiResponse\n{\n    public int StatusCode { get; set; } = 200;\n    public string Body { get; set; }\n    public List<KeyValue> Cookies { get; set; } = new List<KeyValue>();\n    public byte[] Data { get; set; } = Array.Empty<byte>();\n    public string ContentType { get; set; } = \"text/plain\";\n    public List<KeyValue> Headers { get; set; } = new List<KeyValue>();\n    public ApiFile File { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Large Rating Component in PowerShell\nDESCRIPTION: This example demonstrates how to create a large-sized rating component.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDRating.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDRating -Value 3 -Size large -Id 'rating3'\n```\n\n----------------------------------------\n\nTITLE: Customizing Button Colors in PowerShell Universal App\nDESCRIPTION: Shows how to change the default button colors in a PowerShell Universal app by modifying the palette's grey color in the theme configuration.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/themes/README.md#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\n$Theme = @{\n    palette = @{\n        grey = @{\n            '300' = '#000'\n        }\n    }\n}\nNew-UDApp -Theme $Theme -Title 'Hello' -Content {\n    New-UDButton -Text 'Small Button'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Grid Options with PowerShell UD\nDESCRIPTION: Creates select options for grid spacing using a loop. Sets up options from 0-9 with sync functionality.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDGrid.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nfor ($i = 0; $i -lt 10; $i++) {\n    New-UDSelectOption -Name $i -Value $i\n}\n-OnChange { Sync-UDElement -Id 'grid4' } -DefaultValue 3\n```\n\n----------------------------------------\n\nTITLE: JavaScript Integration in Universal Apps\nDESCRIPTION: Shows how to invoke JavaScript from PowerShell using Invoke-UDJavaScript.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/interaction.md#2025-04-16_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Text 'Alert Me' -OnClick {\n    Invoke-UDJavaScript -JavaScript 'alert(\"Hello!\")'\n}\n```\n\n----------------------------------------\n\nTITLE: Kestrel Endpoint Configuration\nDESCRIPTION: Default Kestrel web server endpoint configuration including HTTP settings and HTTPS redirect options.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/settings.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n\"Kestrel\": {\n  \"Endpoints\": {\n    \"HTTP\": {\n      \"Url\": \"http://*:5000\"\n    }\n  },\n  \"RedirectToHttps\": \"false\"\n},\n```\n\n----------------------------------------\n\nTITLE: Creating Minimal Python Environment in PowerShell Universal\nDESCRIPTION: This snippet shows how to create a minimal Python environment in PowerShell Universal.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/environments.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUEnvironment -Name 'Python' -Path 'python' -Arguments \"{scriptPath}\" -Variables @('*') -Minimal\n```\n\n----------------------------------------\n\nTITLE: Configuring PowerShell Universal to Use a Self-Signed Certificate\nDESCRIPTION: This JSON configuration sets up HTTPS for PowerShell Universal using a self-signed certificate. It specifies the certificate subject, store, location, and allows invalid certificates. This configuration is typically placed in the appsettings.json file.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/hosting/README.md#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Kestrel\": {\n    \"Endpoints\": {\n      \"HTTPS\": {\n         \"Url\": \"https://*:443\",\n           \"Certificate\": {\n             \"Subject\": \"localhost\",\n             \"Store\": \"My\",\n             \"Location\": \"LocalMachine\",\n             \"AllowInvalid\": \"true\"\n           }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to API Process for Debugging\nDESCRIPTION: Example demonstrating how to connect to an API process for debugging using PowerShell's process and runspace management cmdlets.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/development/debugging-scripts.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n$Process = Get-Process pwsh | Where-Object { $_.CommandLine.Contains('StartApi') }\nEnter-PSHostProcess -Id $Process.Id\nGet-Runspace\nDebug-Runspace -Id 2\n```\n\n----------------------------------------\n\nTITLE: New-UDTheme Cmdlet Syntax\nDESCRIPTION: PowerShell cmdlet syntax showing all available parameters for creating a new theme. Parameters include options for setting both light and dark theme colors through DashboardColor objects.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTheme.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTheme [[-PrimaryColor] <DashboardColor>] [[-SecondaryColor] <DashboardColor>] [[-WarningColor] <DashboardColor>] [[-ErrorColor] <DashboardColor>] [[-SuccessColor] <DashboardColor>] [[-Background] <DashboardColor>] [[-DarkPrimaryColor] <DashboardColor>] [[-DarkSecondaryColor] <DashboardColor>] [[-DarkWarningColor] <DashboardColor>] [[-DarkErrorColor] <DashboardColor>] [[-DarkSuccessColor] <DashboardColor>] [[-DarkBackground] <DashboardColor>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: New-UDToggleButton Cmdlet Syntax in PowerShell\nDESCRIPTION: Defines the syntax for the New-UDToggleButton cmdlet, including all available parameters and their positions. This cmdlet is used to create a Toggle Button component with customizable properties.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDToggleButton.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDToggleButton [[-Id] <String>] [[-Color] <String>] [-Disabled] [-FullWidth] [-DisableFocusRipple] [-DisableRipple] [[-Size] <String>] [[-Sx] <Hashtable>] [[-Children] <ScriptBlock>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Version Output Example\nDESCRIPTION: Example output from the Docker Compose version command showing the installed version number.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/docker.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nDocker Compose version v2.16.0\n```\n\n----------------------------------------\n\nTITLE: Running External PowerShell Script for Vault Registration\nDESCRIPTION: Script to execute an external PowerShell process for registering the Azure Key Vault, avoiding assembly conflicts.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/variables.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n$pwsh = (Get-Command pwsh).Path\n& $pwsh -File \"$PSScriptRoot\\registerVault.ps1\"\n```\n\n----------------------------------------\n\nTITLE: Creating Text Variant Menu in PowerShell\nDESCRIPTION: Shows how to create a menu with text variant styling instead of the default contained button style.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDMenu.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDMenu -Text 'Click Me' -Children {\n       New-UDMenuItem -Text 'Test'\n       New-UDMenuItem -Text 'Test2'\n       New-UDMenuItem -Text 'Test3'\n} -Variant text -Id 'menu3'\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Floating Action Button in PowerShell\nDESCRIPTION: Creates a floating action button with a user icon and shows a toast when clicked. The button is positioned relative to its container.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDFloatingActionButton.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDFloatingActionButton -Icon (New-UDIcon -Icon 'user') -OnClick {\n    Show-UDToast -Message 'Hello'\n} -Id 'fab1' -Position Relative\n```\n\n----------------------------------------\n\nTITLE: Creating Circular Overlap Badge\nDESCRIPTION: Shows how to create a badge with circular overlap style.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDBadge.txt#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDBadge -Overlap circular -BadgeContent { 4 } -Children {\n  New-UDIcon -Icon Envelope -Size 2x\n} -Id 'badge6'\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Date for PowerShell Date Picker\nDESCRIPTION: Shows how to set a minimum selectable date for the date picker using the MinimumDate parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDDatePicker.txt#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDatePicker -Id 'datepicker7' -Value '1-2-2020' -MinimumDate '1-1-2020'\n```\n\n----------------------------------------\n\nTITLE: Custom Background Image CSS for PowerShell Universal Dashboard\nDESCRIPTION: CSS example showing how to set a background image for the dashboard using the ud-dashboard class. Targets the main dashboard container div element.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/themes/cascading-style-sheets.md#2025-04-16_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.ud-dashboard > div {\n    background-image: url(\"/assets/image.jpeg\");\n}\n```\n\n----------------------------------------\n\nTITLE: Using Find-UDIcon Cmdlet in PowerShell\nDESCRIPTION: Demonstrates how to use the Find-UDIcon cmdlet to search for an icon named 'User'. This cmdlet supports wildcards in the name parameter for flexible icon searching.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Find-UDIcon.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nFind-UDIcon -Name 'User'\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Rating Component in PowerShell\nDESCRIPTION: This example demonstrates how to create a basic rating component with a value of 3 and a specific ID.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDRating.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDRating -Value 3 -Id 'rating1'\n```\n\n----------------------------------------\n\nTITLE: Nested List Items Example\nDESCRIPTION: Creates a hierarchical list with nested child items using the -Children parameter\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDList.txt#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDList -Content {\n    New-UDListItem -Label 'Inbox' -Icon (New-UDIcon -Icon envelope -Size 3x) -SubTitle 'New Stuff' -Children {\n        New-UDListItem -Label 'Inbox Item 1' -Nested\n        New-UDListItem -Label 'Inbox Item 2' -Nested\n        New-UDListItem -Label 'Inbox Item 3' -Nested\n    }\n    New-UDListItem -Label 'Drafts' -Icon (New-UDIcon -Icon edit -Size 3x) -SubTitle \"Stuff I'm working on \" -Children {\n        New-UDListItem -Label 'Drafts Item 1' -Nested\n        New-UDListItem -Label 'Drafts Item 2' -Nested\n        New-UDListItem -Label 'Drafts Item 3' -Nested\n    }\n} -Id 'list5'\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Navigation Drawer with AppBar in PowerShell\nDESCRIPTION: Example demonstrating how to create a custom navigation drawer with nested list items and integrate it with an AppBar component. The drawer includes clickable navigation items that trigger the Set-TestData function when selected.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDDrawer.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$Drawer = New-UDDrawer -Id 'drawer' -Children {\n    New-UDList -Content {\n        New-UDListItem -Id 'lstHome' -Label 'Home' -OnClick { \n            Set-TestData 'Home'\n            } -Content {\n                New-UDListItem -Id 'lstNested' -Label 'Nested' -OnClick {\n                Set-TestData 'Nested'\n                }\n            } \n    }\n}\n\nNew-UDElement -Tag 'main' -Content {\n    New-UDAppBar -Children { New-UDTypography -Text 'Hello' -Paragraph } -Position relative -Drawer $Drawer\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nivo Dots Pattern - PowerShell\nDESCRIPTION: PowerShell cmdlet syntax for creating a Nivo pattern with dots. Allows customization of background color, foreground color, dot size, padding, and stagger effect.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDNivoPattern.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDNivoPattern [-Background <String>] [-Color <String>] -Dots -Id <String> [-Padding <Int32>] [-Size <Int32>] [-Stagger] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Element Removal to All Connected Users in PowerShell\nDESCRIPTION: This example shows how to create an element and then remove it with the broadcast option. When the button is clicked, the element will be removed from the page for all connected users, not just the current user.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Remove-UDElement.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDElement -Id 'removeElement2' -Tag 'div' -Content {\n    New-UDTypography -Text 'Hello World'\n}\nNew-UDButton -Text 'Click Me' -OnClick {\n    Remove-UDElement -Id 'removeElement2' -Broadcast\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Universal v5.0.0 API Configuration\nDESCRIPTION: Example of PowerShell Universal 5.0.0 API configuration showing setting API base folder and handling string array parameters.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/changelog.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PSUSettings -ApiBaseFolder \"path/to/api/folder\"\nInvoke-PSUScript -Tags @(\"tag1\", \"tag2\") -HideChildren -HideTriggered -HideScheduled\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Radio Group in PowerShell\nDESCRIPTION: Creates a basic radio group with three radio buttons labeled Adam, Sarah, and Austin.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDRadioGroup.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDRadioGroup -Label 'group' -Id 'radio1' -Children {\n    New-UDRadio -Value 'Adam' -Label 'Adam'  -Id 'adam'\n    New-UDRadio -Value 'Sarah' -Label 'Sarah' -Id 'sarah'\n    New-UDRadio -Value 'Austin' -Label 'Austin' -Id 'austin'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Avatar Group with Custom Styling in PowerShell\nDESCRIPTION: This example shows how to create a group of avatars with custom styling using the New-UDAvatarGroup and New-UDAvatar cmdlets. It generates multiple avatars with custom content and CSS styling, and groups them together.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDAvatar.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDAvatarGroup -Content {\n  1..10 | ForEach-Object { \n    New-UDAvatar -Alt \"Remy Sharp\" -Content {\n        \"A\"\n    } -Sx @{\n        borderRadius    = '50%'\n        backgroundColor = 'error.dark'\n    }\n  }\n} -Sx @{\n   width = \"20%\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Vertical Stack in PowerShell Universal Dashboard\nDESCRIPTION: Creates a vertical stack arrangement of paper components with spacing of 2 units between each item by explicitly setting the direction parameter to 'column'.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/layout/stack.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDStack -Content {\n   New-UDPaper -Content { \"Item 1\" } -Elevation 3\n   New-UDPaper -Content { \"Item 2\" } -Elevation 3\n   New-UDPaper -Content { \"Item 3\" } -Elevation 3\n} -Spacing 2 -Direction 'column'\n```\n\n----------------------------------------\n\nTITLE: Creating a Link with Underline on Hover in PowerShell\nDESCRIPTION: This example shows how to create a link that underlines on hover using the -Underline parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDLink.txt#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDLink -Url \"https://www.google.com\" -Text \"Google\" -Underline \"hover\" -Id 'link6'\n```\n\n----------------------------------------\n\nTITLE: External Endpoint Path Configuration\nDESCRIPTION: Shows how to configure an external endpoint content file path.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/endpoints.md#2025-04-16_snippet_29\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUEndpoint -Url \"/path\" -Path \"endpoint-path.ps1\"\n```\n\n----------------------------------------\n\nTITLE: Creating Badge with Maximum Value\nDESCRIPTION: Demonstrates setting a maximum value limit for the badge display.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDBadge.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDBadge -Max 10 -BadgeContent { 11 } -Children {\n  New-UDIcon -Icon Envelope -Size 2x\n} -Id 'badge5'\n```\n\n----------------------------------------\n\nTITLE: Configuring Persistent Repository Path for PowerShell Universal\nDESCRIPTION: Sets the Data__RepositoryPath environment variable to store configuration files in a persistent location within the Azure Web App.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/hosting/azure.md#2025-04-16_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nD:\\home\\Data\\PowerShellUniversal\\Repository\n```\n\n----------------------------------------\n\nTITLE: Generating Data for Script Line Chart Widget in PowerShell\nDESCRIPTION: This snippet shows how to create data for a Script Line Chart widget. It produces custom objects with 'type' and 'value' properties, where 'type' is used for the X-axis and 'value' for the Y-axis.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/portal/portal-widgets/README.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n1..5 | ForEach-Object {\n    [PSCustomObject]@{ \n        type = \"Category $_\"\n        value = Get-Random -Min 5 -Max 60\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Secrets Configuration Settings\nDESCRIPTION: Configuration for secret vaults including SecretStore password and database encryption settings.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/settings.md#2025-04-16_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n\"Secrets\": {\n  \"SecretStore\": {\n    \"Password\": \"PSUSecretStore\"\n  },\n  \"Database\": {\n    \"EncryptionKey\": \"=b0ywQA@VOSdr&R7an5g&XK6NVO%s4Tf\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Cache Scope Variable in PowerShell Universal\nDESCRIPTION: Demonstrates how to assign a variable to the Cache scope, which makes it available in any endpoint within the app. This example stores AD computers in the Cache scope.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/custom-variable-scopes.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$Cache:Computers = Get-ADComputer\n```\n\n----------------------------------------\n\nTITLE: Example Proxy URL Mapping\nDESCRIPTION: Demonstrates the basic URL mapping pattern between external proxy address and local PowerShell Universal instance. Shows how external HTTPS requests are mapped to internal HTTP requests.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/hosting/reverse-proxy.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://www.proxyaddress.com -> http://localhost:5000\n```\n\n----------------------------------------\n\nTITLE: Setting Custom API URL for PowerShell Universal in JSON Configuration\nDESCRIPTION: Demonstrates how to set a custom API URL in the appsettings.json file, which is useful when working with reverse proxies like IIS.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/module.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"API\": {\n    \"URL\": \"https://external.company.com/psu\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Azure Web App Bicep Template\nDESCRIPTION: Bicep template for deploying a container web app with persistent storage in Azure.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/hosting/azure.md#2025-04-16_snippet_6\n\nLANGUAGE: bicep\nCODE:\n```\n@description('Name of Azure Web App')\nparam siteName string = 'psu-${uniqueString(resourceGroup().id)}'\n\n@description('The version of PowerShell Universal')\nparam version string = '5.4.4'\n\n@description('App Service Plan Pricing Tier')\n@allowed([\n  'B1'\n  'B2'\n  'B3'\n  'S1'\n  'S2'\n  'S3'\n  'P1V2'\n  'P2V2'\n  'P2V3'\n])\nparam servicePlanPricingTier string = 'S2'\nvar servicePlanName = '${siteName}-asp'\n\n@description('Location for all the resources.')\nparam location string = resourceGroup().location\n\nvar servicePlanPricingTiers = {\n  F1: {\n    tier: 'Free'\n  }\n  B1: {\n    tier: 'Basic'\n  }\n  B2: {\n    tier: 'Basic'\n  }\n  B3: {\n    tier: 'Basic'\n  }\n  S1: {\n    tier: 'Standard'\n  }\n  S2: {\n    tier: 'Standard'\n  }\n  S3: {\n    tier: 'Standard'\n  }\n  P1V2: {\n    tier: 'Standard'\n  }\n  P2V2: {\n    tier: 'Standard'\n  }\n  P2V3: {\n    tier: 'Standard'\n  }\n}\n\nresource planResource 'Microsoft.Web/serverfarms@2024-04-01' = {\n  name: servicePlanName\n  location: location\n  sku: {\n    name: servicePlanPricingTier\n    tier: servicePlanPricingTiers[servicePlanPricingTier].tier\n    capacity: 1\n  }\n  kind: 'linux'\n  properties: {\n    reserved: true\n  }\n}\n\nresource siteResource 'Microsoft.Web/sites@2024-04-01' = {\n  name: siteName\n  location: location\n  properties: {\n    serverFarmId: planResource.id\n    siteConfig: {\n      linuxFxVersion: 'DOCKER|ironmansoftware/universal:${version}-azure'\n    }\n  }\n}\n\nresource siteWebAppsettingsResource 'Microsoft.Web/sites/config@2024-04-01' = {\n  parent: siteResource\n  name: 'appsettings'\n  properties: {\n    WEBSITES_ENABLE_APP_SERVICE_STORAGE: 'true'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Theme in PowerShell Universal App\nDESCRIPTION: Shows how to set the default theme to 'dark' for a PowerShell Universal app. This affects the overall appearance of the app, including the button and toast message.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/themes/README.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDApp -Title 'Hello' -Content {\n    New-UDButton -Text \"Test \" -OnClick {\n        Show-UDToast -Message 'HEllo'\n    }\n} -DefaultTheme dark\n```\n\n----------------------------------------\n\nTITLE: Creating Elevated Paper Component in PowerShell\nDESCRIPTION: Creates a new paper component with a button inside and an elevation of 5. This example shows how to use the -Elevation parameter to add depth to the paper component.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDPaper.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDPaper -Id 'paper2' -Children {\n    New-UDButton -Text 'Click Me'\n} -Elevation 5\n```\n\n----------------------------------------\n\nTITLE: Testing if a User is Connected to a Universal Dashboard in PowerShell\nDESCRIPTION: This example demonstrates the basic usage of the Test-UDConnected cmdlet. It returns a boolean value indicating whether the current user is connected to the dashboard based on their connection ID.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Test-UDConnected.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nTest-UDConnected\n```\n\n----------------------------------------\n\nTITLE: Creating Typography with Bold Font Weight in PowerShell\nDESCRIPTION: Creates a typography component with bold font weight using the FontWeight parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTypography.txt#2025-04-16_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDTypography -Text \"Hello World\" -Id \"typography6\" -FontWeight \"bold\"\n```\n\n----------------------------------------\n\nTITLE: Starting Web App Container in Linux\nDESCRIPTION: Command to start the PowerShell Universal server in a Linux container environment.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/hosting/azure.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet Universal.Server.dll\n```\n\n----------------------------------------\n\nTITLE: Creating an IFrame Component with New-UDIFrame in PowerShell\nDESCRIPTION: This example demonstrates how to use the New-UDIFrame cmdlet to create an HTML IFrame component that displays the Google website. The -Uri parameter is used to specify the URL for the IFrame.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDIFrame.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDIFrame -Uri https://www.google.com\n```\n\n----------------------------------------\n\nTITLE: Creating Bordered Icon in PowerShell\nDESCRIPTION: Demonstrates adding a border to an icon.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDIcon.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDIcon -Icon 'AddressBook' -Size '5x' -Border -Id 'icon7'\n```\n\n----------------------------------------\n\nTITLE: Creating a Chip with Image Avatar in PowerShell\nDESCRIPTION: This example demonstrates how to create a chip with an image avatar using the New-UDChip cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDChip.txt#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDChip -Avatar \"https://picsum.photos/200/300\" -AvatarType image -Label 'Avatar' -Id 'chip7'\n```\n\n----------------------------------------\n\nTITLE: Creating a Square Avatar with Content in PowerShell\nDESCRIPTION: This example shows how to create a square avatar with custom content using the New-UDAvatar cmdlet. It sets the alt text, content, and variant.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDAvatar.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDAvatar -Alt \"Remy Sharp\" -Content { \"B\" } -Variant square\n```\n\n----------------------------------------\n\nTITLE: Simplified Child Content in PSBlazor\nDESCRIPTION: Shows the simplified syntax for child content when no other nodes are specified.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/portal/portal-widgets/syntax.md#2025-04-16_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<Row>\n    <Button>Click Me</Button>\n</Row>\n```\n\n----------------------------------------\n\nTITLE: Saving a PowerShell Universal Module to Repository\nDESCRIPTION: Command to save a PowerShell Universal module directly to the PowerShell Universal repository folder, making it available for use within the platform.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/modules.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSave-Module Universal.Apps.WindowsSystemInformation -Path $Env:ProgramData\\UniversalAutomation\\Repository\\Modules\n```\n\n----------------------------------------\n\nTITLE: Creating Balloon-Style Toast Notifications in PowerShell Universal Dashboard\nDESCRIPTION: Demonstrates how to create a toast notification with a balloon style, which typically has a different visual appearance than standard toasts.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Show-UDToast.txt#2025-04-16_snippet_16\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Text 'Show Toast' -OnClick {\n    Show-UDToast -Message 'Hello, World!' -Balloon\n} -Id 'toast17'\n```\n\n----------------------------------------\n\nTITLE: PowerShell Universal Command Syntax Definitions\nDESCRIPTION: Full syntax definitions showing the four different parameter combinations supported by Invoke-PSUCommand for sending events and executing remote commands.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Invoke-PSUCommand.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-PSUCommand [-AppToken <String>] [-ComputerName <String>] [-Data <Object>] -Hub <String> [-Integrated] [-UseDefaultCredentials] [-ConnectionId <String>] [-Credential <PSCredential>] [-TrustCertificate] [-Timeout <Int32>] [<CommonParameters>]\n\nInvoke-PSUCommand [-AppToken <String>] [-ComputerName <String>] [-Data <Object>] [-Integrated] [-UseDefaultCredentials] -Computer <String> [-Credential <PSCredential>] [-TrustCertificate] [-Timeout <Int32>] [<CommonParameters>]\n\nInvoke-PSUCommand [-AppToken <String>] [-ComputerName <String>] -Hub <String> [-Integrated] [-UseDefaultCredentials] [-ConnectionId <String>] [-Command <String>] [-Credential <PSCredential>] [-Parameters <Hashtable>] [-TrustCertificate] [-Timeout <Int32>] [<CommonParameters>]\n\nInvoke-PSUCommand [-AppToken <String>] [-ComputerName <String>] [-Integrated] [-UseDefaultCredentials] [-Command <String>] -Computer <String> [-Credential <PSCredential>] [-Parameters <Hashtable>] [-TrustCertificate] [-Timeout <Int32>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Creating Nivo Squares Pattern - PowerShell\nDESCRIPTION: PowerShell cmdlet syntax for creating a Nivo pattern with squares. Enables customization of background color, square color, size, padding, and stagger effect.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDNivoPattern.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDNivoPattern [-Background <String>] [-Color <String>] -Id <String> [-Padding <Int32>] [-Size <Int32>] -Squares [-Stagger] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Formatting Date and Time with Localized Format in PowerShell\nDESCRIPTION: This example shows how to use the New-UDDateTime cmdlet with a localized format string to format a date and time object.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDDateTime.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDateTime -InputObject (Get-Date) -LocalizedFormat 'LLL' -Id 'dateTime2'\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Connections in settings.json for PowerShell Universal VS Code Extension\nDESCRIPTION: This JSON snippet demonstrates how to configure multiple connections in the Visual Studio Code settings.json file for the PowerShell Universal extension. It includes an array of connection objects, each with a name, URL, and app token.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/development/visual-studio-code-extension.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"powerShellUniversal.connections\": [\n    {\n        \"name\": \"Remote\",\n        \"url\": \"http://localhost:5000\",\n        \"appToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1lIjoiYWRtaW4iLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9oYXNoIjoiOGNiMjAxYzAtZWQxMy00M2YyLThiMjItNmY1ODkxNjRhZWM2Iiwic3ViIjoiUG93ZXJTaGVsbFVuaXZlcnNhbCIsImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd3MvMjAwOC8wNi9pZGVudGl0eS9jbGFpbXMvcm9sZSI6IkFkbWluaXN0cmF0b3IiLCJuYmYiOjE2NDQxODMxMzIsImV4cCI6MjEwMjA5OTUyMCwiaXNzIjoiSXJvbm1hblNvZnR3YXJlIiwiYXVkIjoiUG93ZXJTaGVsbFVuaXZlcnNhbCJ9.6Y9Bgwaw8GTpRrH3Qp7TCW-UGdPm85E9NClOCyGBVA8\"\n    }\n],\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme-based Typography Styling in PowerShell Universal Apps\nDESCRIPTION: This snippet demonstrates how to use theme-based styling with the -Sx parameter. It applies the secondary text color from the theme configuration to a typography element.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/typography.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTypography -Text 'Secondar' -Sx @{\n    color = 'text.secondary'\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Encryption Key in PowerShell\nDESCRIPTION: PowerShell script to generate a 128-bit encryption key encoded as base64 string for database encryption.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/settings.md#2025-04-16_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\n$random = [System.Security.Cryptography.RandomNumberGenerator]::Create();\n$buffer = New-Object byte[] 16;\n$random.GetBytes($buffer);\n[Convert]::ToBase64String($buffer)\n```\n\n----------------------------------------\n\nTITLE: App Debugging with Debug Preference\nDESCRIPTION: Example showing how to enable debug output in PowerShell Universal Apps using DebugPreference variable.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/development/debugging-scripts.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$DebugPreference = 'Continue'\n\nNew-UDApp -Title 'Test' -Content {\n    Write-Debug \"My app is loading. I have am $user with $roles\"\n\n    New-UDTypography -Text 'Hello, world'\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Forms Authentication Script in PowerShell Universal\nDESCRIPTION: This script demonstrates a basic forms authentication setup in PowerShell Universal. It checks if the username is 'Admin' and returns a successful authentication result if true, otherwise it returns an error message.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/security/forms-authentication.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nparam(\n    [PSCredential]$Credential\n)\n\n#\n#   You can call whatever cmdlets you like to conduct authentication here.\n#   Just make sure to return the $Result with the Success property set to $true\n#\n\nif ($Credential.UserName -eq 'Admin') \n{\n    New-PSUAuthenticationResult -Success -UserName 'Admin'\n}\nelse \n{\n    New-PSUAuthenticationResult -ErrorMessage 'Bad username or password'\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Theme in PowerShell using Get-UDTheme\nDESCRIPTION: This example demonstrates how to use the Get-UDTheme cmdlet to retrieve a predefined theme named 'AntDesign'. The result is stored in the $Theme variable.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-UDTheme.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$Theme = Get-UDTheme -Name 'AntDesign'\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for PowerShell Universal on Windows\nDESCRIPTION: Docker Compose YAML file for running PowerShell Universal container on Windows with volume mounting and timezone configuration.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/docker.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"5.2.1\"\nservices:\n  PSU:\n    container_name: PSU\n    image: ironmansoftware/universal:latest\n    ports:\n      - 5000:5000\n    restart: unless-stopped\n    environment:\n      - TZ=Europe/London\n    volumes:\n      - C:\\docker\\volumes\\PSU:/root\n```\n\n----------------------------------------\n\nTITLE: Creating a Disabled Button Group in PowerShell\nDESCRIPTION: This example shows how to create a disabled button group using the -Disabled parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDButtonGroup.txt#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButtonGroup -Content {\n    New-UDButtonGroupItem -Text 'Delete'\n    New-UDButtonGroupItem -Text 'Copy'\n} -Disabled\n```\n\n----------------------------------------\n\nTITLE: Basic Checkbox Implementation in PowerShell\nDESCRIPTION: Demonstrates the basic usage of checkboxes including disabled and checked states.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/checkbox.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDCheckBox\nNew-UDCheckBox -Disabled\nNew-UDCheckBox -Checked $true\nNew-UDCheckBox -Checked $true -Disabled\n```\n\n----------------------------------------\n\nTITLE: Adjusting Font Size in PowerShell Universal App Theme\nDESCRIPTION: Demonstrates how to change the default font size for a PowerShell Universal app by modifying the typography properties in the theme configuration.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/themes/README.md#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n$Theme = @{\n    typography = @{\n        fontSize = 20\n    }\n}\nNew-UDApp -Theme $Theme -Title 'Hello' -Content {\n    New-UDButton -Text 'Hello' \n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Footer AppBar in PowerShell\nDESCRIPTION: This snippet shows how to create an AppBar that is pinned to the bottom of the page using the -Footer parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/surfaces/appbar.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDAppBar -Children { \"Hello\" } -Footer\n```\n\n----------------------------------------\n\nTITLE: Retrieving PowerShell Universal Apps with Get-PSUApp\nDESCRIPTION: This snippet demonstrates how to use the Get-PSUApp cmdlet to retrieve a specific app from PowerShell Universal. It shows the basic usage of the cmdlet with the -Name parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUApp.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PSUApp -Name 'MyApp'\n```\n\n----------------------------------------\n\nTITLE: Creating an Elevated Card in PowerShell\nDESCRIPTION: This example demonstrates how to create a card with increased elevation using the New-UDCard cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDCard.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDCard -Title 'My Card' -Text 'This is my card' -Id 'card3' -Elevation 10\n```\n\n----------------------------------------\n\nTITLE: Shibboleth LDAP Properties Configuration\nDESCRIPTION: LDAP properties configuration file for Shibboleth Identity Provider v4 with Active Directory integration. Includes authentication strategy, connection properties, SSL configuration, and DN resolution settings.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/security/enterprise-security/saml2.md#2025-04-16_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\n# LDAP authentication (and possibly attribute resolver) configuration\n# Note, this doesn't apply to the use of JAAS authentication via LDAP\n\n## Authenticator strategy, either anonSearchAuthenticator, bindSearchAuthenticator, directAuthenticator, adAuthenticator\nidp.authn.LDAP.authenticator=adAuthenticator\n\n## Connection properties ##\nidp.authn.LDAP.ldapURL=ldap://ironman.local:389\nidp.authn.LDAP.useStartTLS                     = false\n# Time in milliseconds that connects will block\n#idp.authn.LDAP.connectTimeout                  = PT3S\n# Time in milliseconds to wait for responses\n#idp.authn.LDAP.responseTimeout                 = PT3S\n# Connection strategy to use when multiple URLs are supplied, either ACTIVE_PASSIVE, ROUND_ROBIN, RANDOM\n#idp.authn.LDAP.connectionStrategy               = ACTIVE_PASSIVE\n\n## SSL configuration, either jvmTrust, certificateTrust, or keyStoreTrust\nidp.authn.LDAP.sslConfig                       = jvmTrust\n## If using certificateTrust above, set to the trusted certificate's path\nidp.authn.LDAP.trustCertificates=%{idp.home}/credentials/ldap-server.crt\n## If using keyStoreTrust above, set to the truststore path\nidp.authn.LDAP.trustStore=%{idp.home}/credentials/ldap-server.truststore\n\n## Return attributes during authentication\nidp.authn.LDAP.returnAttributes=passwordExpirationTime,loginGraceRemaining,sn,mail\n\n## DN resolution properties ##\n\n# Search DN resolution, used by anonSearchAuthenticator, bindSearchAuthenticator\n# for AD: CN=Users,DC=example,DC=org\nidp.authn.LDAP.baseDN=CN=Users,DC=ironman, DC=local\nidp.authn.LDAP.subtreeSearch                   = true\nidp.authn.LDAP.userFilter=(sAMAccountName={user})\n# bind search configuration\n# for AD: idp.authn.LDAP.bindDN=adminuser@domain.com\nidp.authn.LDAP.bindDN=administrator@ironman.local\n\n# Format DN resolution, used by directAuthenticator, adAuthenticator\n# for AD use idp.authn.LDAP.dnFormat=%s@domain.com\nidp.authn.LDAP.dnFormat=%s@ironman.local\n\n# pool passivator, either none, bind or anonymousBind\n#idp.authn.LDAP.bindPoolPassivator                  = none\n\n# LDAP attribute configuration, see attribute-resolver.xml\n# Note, this likely won't apply to the use of legacy V2 resolver configurations\nidp.attribute.resolver.LDAP.ldapURL=%{idp.authn.LDAP.ldapURL}\nidp.attribute.resolver.LDAP.connectTimeout=%{idp.authn.LDAP.connectTimeout:PT3S}\nidp.attribute.resolver.LDAP.responseTimeout=%{idp.authn.LDAP.responseTimeout:PT3S}\nidp.attribute.resolver.LDAP.connectionStrategy=%{idp.authn.LDAP.connectionStrategy:ACTIVE_PASSIVE}\nidp.attribute.resolver.LDAP.baseDN=%{idp.authn.LDAP.baseDN:undefined}\nidp.attribute.resolver.LDAP.bindDN=%{idp.authn.LDAP.bindDN:undefined}\nidp.attribute.resolver.LDAP.useStartTLS=%{idp.authn.LDAP.useStartTLS:true}\nidp.attribute.resolver.LDAP.trustCertificates=%{idp.authn.LDAP.trustCertificates:undefined}\nidp.attribute.resolver.LDAP.searchFilter=(sAMAccountName=$resolutionContext.principal)\n```\n\n----------------------------------------\n\nTITLE: Uninstalling PowerShell Universal Server - Full Syntax\nDESCRIPTION: Shows the complete syntax for the Uninstall-PSUServer cmdlet, including optional parameters for specifying installation path and IIS website.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Uninstall-PSUServer.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nUninstall-PSUServer [-Path <String>] [-IISWebsite <String>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Stack with Dividers\nDESCRIPTION: Demonstrates adding dividers between stack items\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDStack.txt#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDStack -Content {\n    New-UDCard -Text \"Card 1\" -RemoveMargin\n    New-UDCard -Text \"Card 2\" -RemoveMargin\n    New-UDCard -Text \"Card 3\" -RemoveMargin\n} -Spacing 2 -Id 'stack5' -Divider {\n    New-UDDivider\n}\n```\n\n----------------------------------------\n\nTITLE: Using Clear-PSUDeployment in PowerShell Universal\nDESCRIPTION: Example showing basic usage of Clear-PSUDeployment cmdlet to clear a pinned deployment. The cmdlet can be used with various authentication methods and server configurations through optional parameters.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Clear-PSUDeployment.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nClear-PSUDeployment\n```\n\n----------------------------------------\n\nTITLE: Creating Basic PowerShell Environment\nDESCRIPTION: Creates a basic PowerShell 7 environment using pwsh.exe executable.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUEnvironment.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUEnvironment -Name '7.1' -Path 'pwsh.exe'\n```\n\n----------------------------------------\n\nTITLE: Creating a Fixed AppBar with Scrollable Content in PowerShell\nDESCRIPTION: This snippet creates a fixed AppBar that remains at the top of the screen even when scrolling through content. It includes a div with a fixed height to demonstrate scrolling behavior.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/surfaces/appbar.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDAppBar -Position fixed -Children { New-UDElement -Tag 'div' -Content { \"Title\" } }\n\nNew-UDElement -Tag 'div' -Content {\n\n} -Attributes @{\n    style = @{\n        height = \"10000px\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Map Markers in PowerShell with New-UDMapMarker\nDESCRIPTION: Two syntax patterns for creating map markers: one using longitude/latitude coordinates and another using GeoJSON data. Supports customization through various parameters including opacity, z-index, popups, and custom icons.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDMapMarker.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDMapMarker [-Id <String>] -Longitude <Single> -Latitude <Single> [-Attribution <String>] [-Opacity <Int32>] [-ZIndex <Int32>] [-Popup <Hashtable>] [-Icon <Hashtable>] [<CommonParameters>]\n```\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDMapMarker [-Id <String>] [-Attribution <String>] [-Opacity <Int32>] [-ZIndex <Int32>] [-Popup <Hashtable>] [-Icon <Hashtable>] -GeoJSON <String> [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Variable Management in PowerShell\nDESCRIPTION: Demonstrates variable manipulation in PowerShell for PSBlazor components.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/portal/portal-widgets/syntax.md#2025-04-16_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\n$Variables[\"TestVariable\"] = \"Not Clicked\"\n\nfunction OnClick {\n    $Variables[\"TestVariable\"] = \"Clicked\"\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Date and Time with Specific Locale in PowerShell\nDESCRIPTION: This example demonstrates how to use the New-UDDateTime cmdlet with a specific locale to format a date and time object.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDDateTime.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDateTime -InputObject (Get-Date) -Locale 'es' -Id 'dateTime3'\n```\n\n----------------------------------------\n\nTITLE: Setting API Environment in PowerShell Universal\nDESCRIPTION: This code shows how to set the API environment to 'Integrated' using Set-PSUSetting in the settings.ps1 file.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/environments.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PSUSetting -ApiEnvironment 'Integrated'\n```\n\n----------------------------------------\n\nTITLE: Calling Asynchronous Report API Endpoints with Invoke-RestMethod\nDESCRIPTION: This PowerShell code demonstrates how to call the asynchronous report generation endpoints. It first invokes the POST endpoint to start the job, waits briefly, then calls the GET endpoint with the job ID to retrieve results.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/best-practices.md#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n$Id = Invoke-RestMethod http://localhost:5000/createReport -Method POST\nStart-Sleep 5\nInvoke-RestMethod http://localhost:5000/createReport/$Id -Method GET\n```\n\n----------------------------------------\n\nTITLE: Creating a Chart with Custom Options in ChartJS using PowerShell\nDESCRIPTION: This snippet shows how to create a chart with custom options using ChartJS in Universal Apps. It demonstrates how to hide the legend and add a title to the chart.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-visualization/charts.md#2025-04-16_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\n$Data = Get-Process | Sort-Object -Property CPU -Descending | Select-Object -First 10 \nNew-UDChartJS -Type 'bar' -Data $Data -DataProperty CPU -LabelProperty ProcessName -Options @{\n    plugins = @{\n        legend = @{\n            title = @{\n                display = $true\n                text    = 'Bar Chart'\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter metadata defining the page description for documentation generation purposes.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/README.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndescription: Input controls for Universal Dashboard\n---\n```\n\n----------------------------------------\n\nTITLE: Creating Error Card with New-UDError in PowerShell\nDESCRIPTION: This example demonstrates how to use the New-UDError cmdlet to display an error message on a page. It creates an error card with the message 'Invalid data'.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDError.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDError -Message 'Invalid data'\n```\n\n----------------------------------------\n\nTITLE: Creating a Static Variant Date Picker in PowerShell\nDESCRIPTION: Demonstrates how to create a date picker with a static variant using the New-UDDatePicker cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDDatePicker.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDatePicker -Id 'datepicker3' -Value '1-2-2020' -Variant static\n```\n\n----------------------------------------\n\nTITLE: Retrieving Theme Colors in PowerShell\nDESCRIPTION: Demonstrates how to retrieve color values from a JSON theme file using the Get-UDThemeColors cmdlet. The cmdlet takes a theme name as input and returns the associated color values.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-UDThemeColors.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-UDThemeColors -Theme '1984'\n```\n\n----------------------------------------\n\nTITLE: Using ValidateSet for Parameter Value Validation in PowerShell Universal\nDESCRIPTION: Shows how to use the ValidateSet attribute to create a dropdown menu with predefined values for a parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/automation/scripts/parameters.md#2025-04-16_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nparam(\n    [ValidateSet(\"Steve\", \"Mary\")]\n    [string]$Name\n)\n```\n\n----------------------------------------\n\nTITLE: Installing PowerShell Universal with MSI Parameters using msiexec.exe\nDESCRIPTION: Example command for automated installation of PowerShell Universal using msiexec with custom parameters. This example shows how to set installation options including service account configuration and logging.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/README.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nStart-Process msiexec.exe -ArgumentList \"/I C:\\Users\\adamr\\Downloads\\PowerShellUniversal.4.2.7.msi /q /norestart /L*V `\"C:\\users\\adamr\\desktop\\msi.log.txt`\" STARTSERVICE=0 SERVICEACCOUNT=contoso\\service_account SERVICEACCOUNTPASSWORD=ThisPasswordWillBeReplacedWithAsterisksInTheMSILogs\" -Wait -NoNewWindow\n```\n\n----------------------------------------\n\nTITLE: C# Endpoint Template Structure\nDESCRIPTION: Template structure showing how C# endpoint code is wrapped in a dynamically generated class with an Execute method. This explains the context in which endpoint code runs.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/plugins.md#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing PowerShellUniversal;\n\npublic class c{id} : ExecutionClass {{ \n    public static ApiResponse Execute(ApiRequest request) \n    {{ \n        {fileContents} \n\n        return new ApiResponse();\n    }} \n}}\";\n```\n\n----------------------------------------\n\nTITLE: Setting Cache with Sliding Expiration in PowerShell Universal\nDESCRIPTION: This snippet demonstrates how to use Set-PSUCache with a sliding expiration time of one hour to efficiently manage cached data. Setting a lifetime for cached data ensures that unused data is eventually released back to the system.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/best-practices.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PSUCache -Key 'Data' -Value (Get-Date) -SlidingExpiration (New-Timespan -Hours 1)\n```\n\n----------------------------------------\n\nTITLE: Basic PowerShell Universal Server Installation\nDESCRIPTION: Simple example of installing PowerShell Universal server using default settings. This command will automatically detect the platform and install the appropriate service type.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Install-PSUServer.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-PSUServer\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Get-PSUGitStatus in PowerShell\nDESCRIPTION: This example demonstrates how to use the Get-PSUGitStatus cmdlet to retrieve a list of git synchronization jobs in PowerShell Universal. It shows the basic usage without any additional parameters.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUGitStatus.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\\\ Get-UAGitStatus\n```\n\n----------------------------------------\n\nTITLE: Running Basic PowerShell Universal Container\nDESCRIPTION: Commands to pull and run a basic PowerShell Universal container with the default port 5000 exposed.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/docker.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ironmansoftware/universal\ndocker run --name 'PSU' -it -p 5000:5000 ironmansoftware/universal\n```\n\n----------------------------------------\n\nTITLE: Creating a Colored Button Group in PowerShell\nDESCRIPTION: This example shows how to create a button group with a custom color using the -Color parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDButtonGroup.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButtonGroup -Content {\n    New-UDButtonGroupItem -Text 'Delete' \n    New-UDButtonGroupItem -Text 'Copy'\n} -Color 'success'\n```\n\n----------------------------------------\n\nTITLE: New-PSUEndpoint Parameter Set 3\nDESCRIPTION: Syntax pattern for creating an endpoint using a Command and Module. Enables creating endpoints from existing module commands.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUEndpoint.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUEndpoint [-AppToken <String>] [-Authentication] [-ComputerName <String>] [-Method {GET | POST | PUT | DELETE | OPTIONS}] [-RegEx] [-Role <String[]>] -Url <String> [-Description <String>] [-UseDefaultCredentials] [-Integrated] [-Tag <Tag[]>] [-Timeout <Int32>] [-Environment <String>] [-PersistentLog] [-Documentation <String>] -Command <String> -Module <String> [-ComputerGroup <String[]>] [-AvailableInBranch <String[]>] [-Credential <String>] [-TrustCertificate] [-Disabled] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Accessing ApiRequest Properties in C# Endpoint\nDESCRIPTION: Example showing how to access properties of the request object within a C# endpoint, specifically checking the ContentType of the incoming request.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/plugins.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nif (request.ContentType == \"application/json\")\n{\n     // Do some stuff with JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Schedules for a Specific Identity in PowerShell Universal\nDESCRIPTION: This example shows how to retrieve schedules created by a specific identity. It first gets the identity object and then uses it to filter schedules.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUSchedule.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$Identity = Get-UAIdentity -Name 'Adam'\nGet-UASchedule -Identity $Identity\n```\n\n----------------------------------------\n\nTITLE: Enabling Client Certificate Authentication in PowerShell Universal\nDESCRIPTION: JSON configuration to enable client certificate authentication in PowerShell Universal. This setting should be added to the appsettings.json file.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/security/enterprise-security/client-certificate.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"ClientCertificate\": {\n  \"Enabled\": \"true\"\n},\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Switch in PowerShell with New-UDSwitch\nDESCRIPTION: Creates a basic switch component with an ID and an initial checked state. This is the simplest form of using the New-UDSwitch cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDSwitch.txt#2025-04-16_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDSwitch -Id 'switch1' -Checked $true\n```\n\n----------------------------------------\n\nTITLE: Contextual Event Callback\nDESCRIPTION: Shows how to handle context in PowerShell event callbacks.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/portal/portal-widgets/syntax.md#2025-04-16_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nfunction OnClick {\n   param($Context)\n}\n```\n\n----------------------------------------\n\nTITLE: Start-PSUDashboard Cmdlet Syntax\nDESCRIPTION: Complete syntax definition for the Start-PSUDashboard cmdlet showing all available parameters and their configurations.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Start-PSUDashboard.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nStart-PSUDashboard [-AppToken <String>] [-ComputerName <String>] -Dashboard <Dashboard> [-Integrated] [-UseDefaultCredentials] [-Credential <PSCredential>] [-TrustCertificate] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Creating Paper Components with Different Elevations in PowerShell\nDESCRIPTION: Demonstrates how to create Paper components with varying elevations using New-UDPaper cmdlet. The elevation parameter controls the shadow depth of the paper.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/surfaces/paper.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDPaper -Elevation 0 -Content {} \nNew-UDPaper -Elevation 1 -Content {} \nNew-UDPaper -Elevation 3 -Content {}\n```\n\n----------------------------------------\n\nTITLE: Cache Storage with Sliding Expiration\nDESCRIPTION: Shows how to implement sliding expiration cache that resets timer on each access.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Set-PSUCache.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PSUCache -Key 'Data' -Value 'MyValue' -SlidingExpiration [TimeSpan]::FromMinutes(10)\n```\n\n----------------------------------------\n\nTITLE: Creating a New PowerShell Universal App with New-PSUDashboard\nDESCRIPTION: This snippet demonstrates the various syntaxes for creating a new app in PowerShell Universal using the New-PSUDashboard alias. It includes options for specifying app content, file paths, and various configuration parameters.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUDashboard.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUDashboard [-AppToken <String>] [-Authenticated] [-AutoDeploy] [-BaseUrl <String>] [-Command <String>] [-Component <DashboardComponent[]>] [-ComputerName <String>] [-Credential <String>] [-Description <String>] [-DisableAutoStart] [-DisableErrorToast] [-DisableInteractiveHost] [-DisableStartupLog] [-Environment <String>] [-FavIcon <String>] [-GrantAppToken] [-IdleTimeout <Int32>] [-Integrated] [-Maintenance] [-Module <String>] -Name <String> [-Role <String[]>] [-SessionTimeout <Int32>] [-Tag <Tag[]>] [-UseDefaultCredentials] [-VerboseErrorMessages] [-ComputerGroup <String[]>] [-OnSessionTimeout <ScriptBlock>] [-AvailableInBranch <String[]>] [-TrustCertificate] [<CommonParameters>]\n```\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUDashboard [-AppToken <String>] [-Authenticated] [-AutoDeploy] [-BaseUrl <String>] [-Component <DashboardComponent[]>] [-ComputerName <String>] -Content <ScriptBlock> [-Credential <String>] [-Description <String>] [-DisableAutoStart] [-DisableErrorToast] [-DisableInteractiveHost] [-DisableStartupLog] [-Environment <String>] [-FavIcon <String>] [-GrantAppToken] [-IdleTimeout <Int32>] [-Integrated] [-Maintenance] -Name <String> [-Role <String[]>] [-SessionTimeout <Int32>] [-Tag <Tag[]>] [-UseDefaultCredentials] [-VerboseErrorMessages] [-ComputerGroup <String[]>] [-OnSessionTimeout <ScriptBlock>] [-AvailableInBranch <String[]>] [-TrustCertificate] [<CommonParameters>]\n```\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUDashboard [-AppToken <String>] [-Authenticated] [-AutoDeploy] [-BaseUrl <String>] [-Component <DashboardComponent[]>] [-ComputerName <String>] [-Credential <String>] [-Description <String>] [-DisableAutoStart] [-DisableErrorToast] [-DisableInteractiveHost] [-DisableStartupLog] [-Environment <String>] [-FavIcon <String>] [-FilePath <String>] [-GrantAppToken] [-IdleTimeout <Int32>] [-Integrated] [-Maintenance] -Name <String> [-Role <String[]>] [-SessionTimeout <Int32>] [-Tag <Tag[]>] [-UseDefaultCredentials] [-VerboseErrorMessages] [-ComputerGroup <String[]>] [-OnSessionTimeout <ScriptBlock>] [-AvailableInBranch <String[]>] [-TrustCertificate] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Disabling Telemetry in Universal Settings\nDESCRIPTION: Example of modifying the settings.ps1 configuration file to disable telemetry collection by removing the -Telemetry switch parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/pages/about-1.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PSUSetting\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Paragraph in Universal Dashboard with PowerShell\nDESCRIPTION: This example demonstrates how to create a basic paragraph element using the New-UDParagraph cmdlet. It sets the text content of the paragraph to 'Hello, world!'.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDParagraph.txt#2025-04-16_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDParagraph -Text 'Hello, world!'\n```\n\n----------------------------------------\n\nTITLE: Hiding Content at Specific Breakpoints in Universal Dashboard\nDESCRIPTION: These snippets demonstrate how to hide content at specific breakpoints using the -Only parameter with New-UDHidden. It shows both single and multiple breakpoint usage.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/layout/hidden.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDHidden -Only 'sm' -Content {\n    New-UDTypography 'sm'\n}\nNew-UDHidden -Only @('sm', 'xl') -Content {\n    New-UDTypography 'sm,xl'\n}\n```\n\n----------------------------------------\n\nTITLE: Script Parameter Definition Example\nDESCRIPTION: Example showing how to define various parameter types in a PowerShell script including basic types, DateTime, PSCredential, and ConsoleColor.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/automation/scripts/README.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nparam(\n    $Test,\n    [DateTime]$Time, \n    [int]$Number,\n    [PSCredential]$Credential,\n    [System.ConsoleColor]$Color\n)\n```\n\n----------------------------------------\n\nTITLE: Universal Automation Configuration\nDESCRIPTION: Settings for automation features including queues, job handling, debugging, and worker configuration.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/settings.md#2025-04-16_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n\"UniversalAutomation\": {\n    \"Queues\": [],\n    \"JobHandshakeTimeout\": 5,\n    \"JobDebugging\": false,\n    \"ContinueJobOnServerStop\": false\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing Parameter Sets in PowerShell Universal Jobs\nDESCRIPTION: Shows how to define parameter sets, which allow for different groups of parameters to be used in a script.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/automation/scripts/parameters.md#2025-04-16_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nparam(\n    [Parameter(ParameterSetName = 'Set1')]\n    $Parameter1,\n    [Parameter(ParameterSetName = 'Set2')]\n    $Parameter2\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Function in a PowerShell Universal Module\nDESCRIPTION: Example function definition in a PowerShell Universal module that will be called when running an associated script resource.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/modules.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nfunction Start-MyScript {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Custom Docker Image\nDESCRIPTION: Command to build a custom Docker image from a Dockerfile in the current directory, tagging it as 'universal-persistent'.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/docker.md#2025-04-16_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ndocker build . --tag=universal-persistent\n```\n\n----------------------------------------\n\nTITLE: Using Integrated Mode for Script Execution\nDESCRIPTION: Shows how to use integrated mode for script execution within PowerShell Universal.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/automation/jobs.md#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-PSUScript -Script 'Script.ps1' -Integrated\n```\n\n----------------------------------------\n\nTITLE: Unblocking PowerShell Universal Files in IIS\nDESCRIPTION: PowerShell command to unblock all files in the PowerShell Universal application directory after extraction. This is necessary to prevent security blocks on the application files when running in IIS.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/hosting/hosting-iis.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-ChildItem C:\\inetpub\\wwwroot -Recurse | Unblock-File\n```\n\n----------------------------------------\n\nTITLE: C# API Integration - ApiRequest Class Definition\nDESCRIPTION: Defines the C# ApiRequest class structure used for handling API requests in PowerShell Universal.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/endpoints.md#2025-04-16_snippet_30\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ApiRequest\n{\n    public long Id;\n    public ICollection<KeyValue> Variables;\n    public IEnumerable<ApiFile> Files { get; set; };\n    public string Url;\n    public ICollection<KeyValue> Headers;\n    public byte[] Data;\n    public int ErrorAction;\n    public ICollection<KeyValue> Parameters;\n    public string Method;\n    public ICollection<KeyValue> Cookies;\n    public string ClaimsPrincipal;\n    public string ContentType;\n}\n```\n\n----------------------------------------\n\nTITLE: Running PowerShell Universal on Custom Port\nDESCRIPTION: Commands to pull and run PowerShell Universal container with a custom port mapping (80 on host to 5000 in container).\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/docker.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ironmansoftware/universal\ndocker run --name 'PSU' -it -p 80:5000 ironmansoftware/universal\n```\n\n----------------------------------------\n\nTITLE: Creating C# API Endpoint in PowerShell\nDESCRIPTION: PowerShell command to create a new endpoint using the C# environment. This specifies the URL path, the C# source file, and the environment to use for execution.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/plugins.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUEndpoint -Url /csharp -Path csharp.cs -Environment 'C#'\n```\n\n----------------------------------------\n\nTITLE: Creating Avatar Group in PowerShell\nDESCRIPTION: Example PowerShell syntax for creating a new avatar group using New-UDAvatarGroup cmdlet. Shows full parameter syntax including optional and required parameters for configuring avatar group display settings.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDAvatarGroup.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDAvatarGroup [-Id <String>] [-Total <Int32>] [-Maximum <Int32>] -Children <ScriptBlock> [-Sx <Object>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Setting PowerShell Universal Trigger - Basic Syntax\nDESCRIPTION: Shows the syntax for setting a trigger using an ID parameter. Supports various parameters including AppToken, ComputerName, Dashboard, Environment, and EventType configurations.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Set-PSUTrigger.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PSUTrigger [-Id] <Int64> [-AppToken <String>] [-ComputerName <String>] [-Dashboard <String>] [-Environment <String>] [-EventType {JobCanceled | JobFailed | JobCompleted | JobStarted | JobFeedbackRequested | ServerStarted | ServerStopped | DashboardStarted | DashboardStopped}] [-Name <String>] [-Script <String>] [-TriggerScript <String>] [-UseDefaultCredentials] [-Integrated] [-Credential <PSCredential>] [-TrustCertificate] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Removing PowerShell Universal App by ID\nDESCRIPTION: This example demonstrates how to remove a PowerShell Universal app using its ID. It uses the Remove-PSUApp cmdlet with the -Id parameter to specify which app to remove.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Remove-PSUApp.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-PSUApp -Id 1\n```\n\n----------------------------------------\n\nTITLE: Slider with Marks in PowerShell\nDESCRIPTION: Creates a slider with marks to indicate specific positions along the slider.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/slider.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDSlider -Marks\n```\n\n----------------------------------------\n\nTITLE: Setting Component Attributes in PSBlazor\nDESCRIPTION: Shows how to set attributes for a button component within a Row container, specifically setting the Danger attribute.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/portal/portal-widgets/syntax.md#2025-04-16_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<Row>\n    <Button Danger=\"true\">Click Me</Button>\n</Row>\n```\n\n----------------------------------------\n\nTITLE: Implementing Nivo Bubble Chart\nDESCRIPTION: Creates a hierarchical bubble chart using tree-structured data. Shows parent-child relationships with nested data representation.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-visualization/charts.md#2025-04-16_snippet_15\n\nLANGUAGE: powershell\nCODE:\n```\n$TreeData = @{\n    Name     = \"root\"\n    children = @(\n        @{\n            Name  = \"first\"\n            children = @(\n                @{\n                    Name = \"first-first\"\n                    Count = 7\n                }\n                @{\n                    Name = \"first-second\"\n                    Count = 8\n                }\n            )\n        },\n        @{\n            Name  = \"second\"\n            Count = 21\n        }\n    )\n}\n\nNew-UDNivoChart -Bubble -Data $TreeData -Value \"count\" -Identity \"name\" -Height 500 -Width 800\n```\n\n----------------------------------------\n\nTITLE: Retrieving Job Output Using Job Object in PowerShell Universal\nDESCRIPTION: This example shows how to retrieve job output using a job object. It first gets a job object using Get-UAJob and then passes it to Get-UAJobOutput. This method is useful when you have already retrieved the job object and want to get its output.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUJobOutput.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$Job = Get-UAJob -Id 12\nGet-UAJobOutput -Job $Job\n```\n\n----------------------------------------\n\nTITLE: Retrieving Scripts by Tag\nDESCRIPTION: Example showing how to retrieve all scripts with a specific tag.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUScript.txt#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n$Tag = Get-UATag -Name 'Release'\nGet-UAScript -Tag $Tag\n```\n\n----------------------------------------\n\nTITLE: Creating an Editor with OnChange Event in PowerShell\nDESCRIPTION: This example demonstrates how to create an Editor.JS editor with an OnChange event that shows a toast notification when the content changes.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDEditor.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDEditor -Id 'editor3' -OnChange {\n    Show-UDToast $Body\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Flipped Icon in PowerShell\nDESCRIPTION: Demonstrates flipping an icon horizontally.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDIcon.txt#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDIcon -Icon 'AddressBook' -Flip 'horizontal' -Size '5x' -Id 'icon9'\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Paper Component in PowerShell\nDESCRIPTION: Creates a new paper component with a button inside using the New-UDPaper cmdlet. This example demonstrates the basic usage of the cmdlet with a child element.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDPaper.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDPaper -Id 'paper1' -Children {\n    New-UDButton -Text 'Click Me'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Contained Buttons in PowerShell for Universal Apps\nDESCRIPTION: Creates a high-emphasis contained button with elevation and fill, typically used for primary actions in an app.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/button.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n New-UDButton -Variant 'contained' -Text 'Default'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Job Feedback in PowerShell Universal\nDESCRIPTION: This PowerShell command retrieves feedback for a specific job using its job ID. It demonstrates the basic usage of the Get-PSUJobFeedback cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUJobFeedback.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-UAJobFeedback -JobId 10\n```\n\n----------------------------------------\n\nTITLE: Removing a Computer Group by ID in PowerShell Universal\nDESCRIPTION: This example demonstrates how to remove a computer group from PowerShell Universal using its ID. It uses the Remove-PSUComputerGroup cmdlet with the -Id parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Remove-PSUComputerGroup.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-PSUComputerGroup -Id 1\n```\n\n----------------------------------------\n\nTITLE: Defining New-PSUHealthCheckResult Cmdlet Syntax in PowerShell\nDESCRIPTION: Specifies the syntax for the New-PSUHealthCheckResult cmdlet. It takes optional -Level parameter and required -Message parameter, along with common PowerShell parameters.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUHealthCheckResult.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUHealthCheckResult [-Level {Ok | Warning | Error}] -Message <String> [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Breadcrumbs Navigation in PowerShell\nDESCRIPTION: Example showing how to create a basic breadcrumbs navigation component with three Google links. The breadcrumbs are separated by a default '/' character and each link points to Google's homepage.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDBreadcrumbs.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDBreadcrumbs -Content {\n    New-UDLink -Url \"https://www.google.com\" -Text \"Google\"\n    New-UDLink -Url \"https://www.google.com\" -Text \"Google\"\n    New-UDLink -Url \"https://www.google.com\" -Text \"Google\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Link in PowerShell\nDESCRIPTION: This example demonstrates how to create a basic link to Google using the New-UDLink cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDLink.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDLink -Url \"https://www.google.com\" -Text \"Google\" -Id 'link1'\n```\n\n----------------------------------------\n\nTITLE: Retrieving EventHub Connections PowerShell Cmdlet Definition\nDESCRIPTION: PowerShell cmdlet syntax for Get-PSUEventHubConnection that retrieves event hub connections. Supports various authentication methods and filtering options through parameters like AppToken, ComputerName, and Hub.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUEventHubConnection.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PSUEventHubConnection [-AppToken <String>] [-ComputerName <String>] [-Integrated] [-UseDefaultCredentials] [-Active] [-Credential <PSCredential>] [-Hub <String>] [-RemoteComputerName <String>] [-RemoteDomainName <String>] [-RemoteUserName <String>] [-ServerComputerName <String>] [-TrustCertificate] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Removing PowerShell Universal Endpoint Documentation\nDESCRIPTION: Demonstrates how to remove endpoint documentation using a specific ID. This example shows the basic usage of the Remove-PSUEndpointDocumentation cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Remove-PSUEndpointDocumentation.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-PSUEndpointDocumentation -Id 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugins in AppSettings using JSON\nDESCRIPTION: Example of how to enable plugins in the PowerShell Universal appsettings.json configuration file. This demonstrates enabling the SQL and C# language plugins.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/plugins.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Plugins\": [\n        \"SQL\",\n        \"PowerShellUniversal.Language.CSharp\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing and Reinstalling PowerShell Universal Server\nDESCRIPTION: PowerShell commands to properly remove an existing PowerShell Universal installation and perform a clean reinstall using the new MSI-based installer.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/upgrading.md#2025-04-16_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Module Universal -RequiredVersion 4.4.0\nRemove-PSUServer\n```\n\nLANGUAGE: powershell\nCODE:\n```\nUninstall-Module Universal\nInstall-Module Universal\nInstall-PSUServer\n```\n\n----------------------------------------\n\nTITLE: Invoking Script with Wait Parameter\nDESCRIPTION: Shows how to invoke a script and wait for its output using the -Wait parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/automation/jobs.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n$Output = Invoke-PSUScript -Script 'Script1.ps1' -RequiredParameter 'Hello' -Wait\n```\n\n----------------------------------------\n\nTITLE: Importing Secrets with Import-PSUSecret in PowerShell\nDESCRIPTION: Basic example showing how to import secrets from configured secret vaults using the Import-PSUSecret cmdlet with no parameters.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Import-PSUSecret.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nImport-PSUSecret\n```\n\n----------------------------------------\n\nTITLE: Using Out-UDChartJSMonitorData in PowerShell\nDESCRIPTION: This cmdlet formats data for use in a UDMonitor chart. It accepts data as input and processes it to be compatible with the chart format. The cmdlet supports common PowerShell parameters and can accept pipeline input.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Out-UDChartJSMonitorData.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nOut-UDChartJSMonitorData [-Data <Object>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Setting Database Encryption Key via Environment Variable in PowerShell\nDESCRIPTION: Demonstrates how to set the encryption key for the database vault using an environment variable in PowerShell.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/variables.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$Env:Secrets__Database__EncryptionKey = \"=b0ywQA@VOSdr&R7an5g&XK6NVO%s4Tf\"\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Badge with Primary Color in PowerShell\nDESCRIPTION: Demonstrates how to create a basic badge with a numeric value (4) attached to an envelope icon using primary color styling.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/badge.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n  New-UDBadge -BadgeContent { 4 } -Children {\n      New-UDIcon -Icon Envelope -Size 2x\n  } -Color primary\n```\n\n----------------------------------------\n\nTITLE: Creating Nivo Lines Pattern - PowerShell\nDESCRIPTION: PowerShell cmdlet syntax for creating a Nivo pattern with lines. Supports customization of background color, line color, line width, rotation angle, and spacing between lines.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDNivoPattern.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDNivoPattern [-Background <String>] [-Color <String>] -Id <String> [-LineWidth <Int32>] -Lines [-Rotation <Int32>] [-Spacing <Int32>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: PowerShell Cmdlet Definition - New-UDMapLayerControl\nDESCRIPTION: PowerShell cmdlet syntax for creating map layer controls. Accepts parameters for ID, position (topright, topleft, bottomright, bottomleft), and content script block. Creates a configurable map layer control with customizable positioning and content.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDMapLayerControl.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDMapLayerControl [-Id <String>] [-Position <String>] [-Content <ScriptBlock>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic PowerShell Universal App with Typography Component\nDESCRIPTION: This code snippet demonstrates how to create a simple PowerShell Universal app using the New-UDApp cmdlet and adding a Typography component to display text. The app has a title of 'Dashboard' and displays 'Hello, world!' as its content.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/README.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDApp -Title 'Dashboard' -Content {\n    New-UDTypography -Text 'Hello, world!'\n}\n```\n\n----------------------------------------\n\nTITLE: Disabled Slider Implementation in PowerShell\nDESCRIPTION: Creates a slider that is disabled and cannot be interacted with.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/slider.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDSlider -Disabled\n```\n\n----------------------------------------\n\nTITLE: Failed Authentication Example for Published Folders in PowerShell\nDESCRIPTION: Example showing what happens when an unauthenticated request tries to access a file in a published folder that requires authentication. The request returns a 401 Unauthorized response.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/published-folders.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\src\\universal\\src> invoke-webrequest http://localhost:5000/src/test.txt\nInvoke-WebRequest: Response status code does not indicate success: 401 (Unauthorized).\n```\n\n----------------------------------------\n\nTITLE: Creating Button Group Items in PowerShell for Universal Dashboard\nDESCRIPTION: This example demonstrates how to create a button group with two items using the New-UDButtonGroup and New-UDButtonGroupItem functions. It creates 'Delete' and 'Copy' buttons within a group.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDButtonGroupItem.txt#2025-04-16_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDButtonGroup -Content {\n    New-UDButtonGroupItem -Text 'Delete'\n    New-UDButtonGroupItem -Text 'Copy'\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Image Dimensions in PowerShell with New-UDImage\nDESCRIPTION: This example demonstrates how to create an image component with specific height and width using the New-UDImage function.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDImage.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDImage -Url \"https://ironmansoftware.com/img/ps-logo.png\" -Height 100 -Width 100\n```\n\n----------------------------------------\n\nTITLE: Testing Docker with Hello World Container\nDESCRIPTION: Command to verify Docker's ability to pull and run container images by running the hello-world test container.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/docker.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker run hello-world\n```\n\n----------------------------------------\n\nTITLE: Setting Tooltip Type/Style in PowerShell Universal\nDESCRIPTION: Shows how to change the tooltip's visual appearance using the -Type parameter. This example creates a success-styled tooltip with green coloring by setting the type to 'success'.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/tooltip.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTooltip -Content {\n    New-UDIcon -Icon 'User'\n} -TooltipContent {\n    \"User\"\n} -Type 'success'\n```\n\n----------------------------------------\n\nTITLE: Specifying Time Zone for PowerShell Date Picker\nDESCRIPTION: Creates a date picker with a specific time zone using the TimeZone parameter with an IANA time zone string.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDDatePicker.txt#2025-04-16_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDatePicker -Id 'datepicker9' -Value '1-2-2020' -TimeZone 'America/Toronto'\n```\n\n----------------------------------------\n\nTITLE: Uninstalling PowerShell Universal Server - Basic Usage\nDESCRIPTION: Demonstrates the basic usage of the Uninstall-PSUServer cmdlet to remove the PowerShell Universal server installation.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Uninstall-PSUServer.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-PSUServer\n```\n\n----------------------------------------\n\nTITLE: Creating Form Validation Result - PowerShell Cmdlet Syntax\nDESCRIPTION: PowerShell cmdlet syntax for creating form validation results. Used within OnValidate script blocks of New-UDForm or New-UDStepper. Supports validation status, error messages, context updates, and stepper control parameters.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDFormValidationResult.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDFormValidationResult [-Valid] [[-ValidationError] <String>] [[-Context] <Hashtable>] [-DisablePrevious] [[-ActiveStep] <Int32>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Creating a Disabled Select Component in PowerShell\nDESCRIPTION: This example demonstrates how to create a disabled select component using the New-UDSelect function.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDSelect.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDSelect -Label 'Select' -Id 'select3' -Option {\n    New-UDSelectOption -Name \"One\" -Value 1\n    New-UDSelectOption -Name \"Two\" -Value 2\n    New-UDSelectOption -Name \"Three\" -Value 3\n} -Disabled -FullWidth\n```\n\n----------------------------------------\n\nTITLE: Get-PSUIdentity Syntax Patterns\nDESCRIPTION: Complete syntax patterns for the Get-PSUIdentity cmdlet showing all possible parameter combinations.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUIdentity.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PSUIdentity [-Id] <Int64> [-AppToken <String>] [-ComputerName <String>] [-Integrated] [-UseDefaultCredentials] [-Credential <PSCredential>] [-TrustCertificate] [<CommonParameters>]\n\nGet-PSUIdentity [-Name] <String> [-AppToken <String>] [-ComputerName <String>] [-Integrated] [-UseDefaultCredentials] [-Credential <PSCredential>] [-TrustCertificate] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Defining New-UDRadio Cmdlet Syntax in PowerShell\nDESCRIPTION: Specifies the syntax for the New-UDRadio cmdlet, including optional parameters for ID, label, disabled state, value, label placement, and color. This cmdlet is used to create radio buttons within a New-UDRadioGroup in Universal Dashboard.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDRadio.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDRadio [[-Id] <String>] [[-Label] <String>] [-Disabled] [[-Value] <String>] [[-LabelPlacement] <String>] [[-Color] <String>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Defining Condition with ScriptBlock in XML\nDESCRIPTION: Demonstrates how to use the ScriptBlock attribute to define a condition. The script block should return true or false to determine whether the condition is met.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/portal/portal-widgets/conditions.md#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Condition ScriptBlock=\"$Errors -eq $null\">\n</Condition>\n```\n\n----------------------------------------\n\nTITLE: Stopping PowerShell Universal Service\nDESCRIPTION: Command to stop the PowerShell Universal service before performing migration or restore operations.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/migration.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nStop-Service 'PowerShellUniversal'\n```\n\n----------------------------------------\n\nTITLE: Dashboard Metadata Access - PowerShell\nDESCRIPTION: Shows how to access dashboard metadata in a trigger script.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/automation/triggers.md#2025-04-16_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nparam($Dashboard)\n\n$Dashboard\n```\n\n----------------------------------------\n\nTITLE: Creating Tag in PowerShell Universal\nDESCRIPTION: Example showing how to create a new tag called 'Release Pipeline' with a red color in PowerShell Universal. This creates a visual identifier that can be used to categorize and identify scripts in the PSU interface.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUTag.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUTag -Name 'Release Pipeline' -Color 'red'\n```\n\n----------------------------------------\n\nTITLE: Complex Component Template with Multiple Child Nodes\nDESCRIPTION: Example of a table component with multiple child content nodes including columns and title template.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/portal/portal-widgets/syntax.md#2025-04-16_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<Table DataSource=\"$Services\">\n   <ChildContent>\n       <PropertyColumn Name=\"Name\" />\n   </ChildContent>\n   <TitleTemplate>\n      <Text>My Services</Text>\n   </TitleTemplate>\n</Table>\n```\n\n----------------------------------------\n\nTITLE: Modal Styling Implementation\nDESCRIPTION: Shows how to apply custom styling to a modal using the -Style parameter with CSS properties.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/feedback/modal.md#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Text 'Styling' -OnClick {\n    Show-UDModal -Content {\n        New-UDTypography -Text \"Hello\"\n    } -Style @{\n        backgroundColor = \"red\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Bar Chart Syntax\nDESCRIPTION: Syntax for creating a Nivo bar chart with parameters for customizing bar appearance, layout, and axis configuration.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDNivoChart.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDNivoChart [-Id <String>] -Data <Object> [...] -Keys <String[]> [-Layers <String[]>] [-AxisTop <Object>] [-AxisBottom <Object>] [-AxisLeft <Object>] [-AxisRight <Object>] [-Bar] [-GroupMode <String>] [-Layout <String>]\n```\n\n----------------------------------------\n\nTITLE: Setting Locale for Time Picker in PowerShell\nDESCRIPTION: This code shows how to set a specific locale (French in this example) for the time picker component using the -Locale parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/time-picker.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTimePicker -Locale fr\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Text Colors in PowerShell Universal Apps\nDESCRIPTION: This snippet shows how to add custom colors to typography elements using the -Style parameter. It creates a blue-colored text by defining the color property in a hashtable.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/typography.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTypography -Text 'My Text' -Style @{ color = 'blue' }\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Dashboard in Universal Configuration\nDESCRIPTION: Example of creating a new PSU Dashboard using the configuration system. This creates a dashboard named 'Dashboard' that uses the UniversalDashboard framework version 3.0.0.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/pages/about-1.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUDashboard -Name 'Dashboard' -Path 'dashboard.ps1' -Framework 'UniversalDashboard:3.0.0'\n```\n\n----------------------------------------\n\nTITLE: Setting PowerShell Universal Trigger - Trigger Object Syntax\nDESCRIPTION: Shows the syntax for setting a trigger using a Trigger object. Accepts a trigger object through pipeline input and supports the same configuration parameters as the ID-based syntax.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Set-PSUTrigger.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PSUTrigger [-Trigger] <Trigger> [-AppToken <String>] [-ComputerName <String>] [-Dashboard <String>] [-Environment <String>] [-EventType {JobCanceled | JobFailed | JobCompleted | JobStarted | JobFeedbackRequested | ServerStarted | ServerStopped | DashboardStarted | DashboardStopped}] [-Name <String>] [-Script <String>] [-TriggerScript <String>] [-UseDefaultCredentials] [-Integrated] [-Credential <PSCredential>] [-TrustCertificate] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic PowerShell Script with Parameters\nDESCRIPTION: This snippet demonstrates a simple PowerShell script that accepts a parameter. It's used as an example for how to set up scheduled scripts with parameters in PowerShell Universal.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/automation/schedules.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nparam($UserName)\n\n$UserName\n```\n\n----------------------------------------\n\nTITLE: Disabling Toolbar in PowerShell Date Picker\nDESCRIPTION: Demonstrates how to create a date picker with a disabled toolbar using the DisableToolbar switch.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDDatePicker.txt#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDatePicker -Id 'datepicker6' -Value '1-2-2020' -DisableToolbar\n```\n\n----------------------------------------\n\nTITLE: Radio Group with Default Value\nDESCRIPTION: Creates a radio group with a preset default value of 'Sarah'.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDRadioGroup.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDRadioGroup -Label 'group' -Id 'radio4' -Children {\n    New-UDRadio -Value 'Adam' -Label 'Adam'  -Id 'adam'\n    New-UDRadio -Value 'Sarah' -Label 'Sarah' -Id 'sarah'\n    New-UDRadio -Value 'Austin' -Label 'Austin' -Id 'austin'\n} -DefaultValue 'Sarah'\n```\n\n----------------------------------------\n\nTITLE: PowerShell Sync-PSUGit Basic Usage\nDESCRIPTION: Basic example showing how to use the Sync-PSUGit cmdlet to commit and push changes to a Git repository.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Sync-PSUGit.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\> Sync-PSUGit\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Roles in PowerShell Universal\nDESCRIPTION: This example demonstrates how to use the Get-PSURole cmdlet without parameters to retrieve all roles defined within PowerShell Universal.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSURole.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-UARole\n```\n\n----------------------------------------\n\nTITLE: Implementing Backdrop Click Handler in PowerShell\nDESCRIPTION: Shows how to create an interactive backdrop with click handling. Uses Set-UDElement to control the backdrop's visibility state when clicked.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/feedback/backdrop.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDBackdrop -Id 'backdrop' -Content {\n    New-UDTypography -Text \"Loading...\" -Variant h2\n} -Open -OnClick {\n    Set-UDElement -Id 'backdrop' -Properties @{\n        open = $false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating PowerShell Universal Server\nDESCRIPTION: Command to download and unzip the new PSU instance using the Universal module.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/upgrading.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nUpdate-PSUServer\n```\n\n----------------------------------------\n\nTITLE: Implementing OnChange Event Handler for Radio Group\nDESCRIPTION: Shows how to add an OnChange event handler to a radio button group that displays a toast message with the selected value.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/radio.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDRadioGroup -Label \"Day\" -Content {\n    New-UDRadio -Label Monday -Value 'monday'\n    New-UDRadio -Label Tuesday -Value 'tuesday'\n    New-UDRadio -Label Wednesday -Value 'wednesday'\n    New-UDRadio -Label Thursday -Value 'thursday'\n    New-UDRadio -Label Friday  -Value 'friday'\n    New-UDRadio -Label Saturday -Value 'saturday'\n    New-UDRadio -Label Sunday -Value 'sunday'\n} -OnChange { Show-UDToast -Message $Body }\n    }\n```\n\n----------------------------------------\n\nTITLE: Invoking Form Validation in PowerShell\nDESCRIPTION: Example showing how to invoke a form with validation enabled using the Invoke-UDForm cmdlet. The command requires a form ID and optionally accepts a validation flag.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Invoke-UDForm.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-UDForm -Id \"MyForm\" -Validate\n```\n\n----------------------------------------\n\nTITLE: Clearing Element Content with Button Click\nDESCRIPTION: Creates a div element with text content and a button that clears the element when clicked using the Clear-UDElement cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Clear-UDElement.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDElement -Tag 'div' -Id 'clearElement1' -Content {\n    New-UDTypography -Text 'Hello World'\n}\nNew-UDButton -Text 'Click Me' -OnClick {\n    Clear-UDElement -Id 'clearElement1'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Menu with Values in PowerShell\nDESCRIPTION: Demonstrates creating a menu where each item has an associated value property.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDMenu.txt#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDMenu -Text 'Click Me' -Children {\n       New-UDMenuItem -Text 'Test' -Value 1\n       New-UDMenuItem -Text 'Test2' -Value 2\n       New-UDMenuItem -Text 'Test3' -Value 3\n}  -Id 'menu5'\n```\n\n----------------------------------------\n\nTITLE: Setting Up Published Folder for Assets in PowerShell Universal\nDESCRIPTION: Configures a published folder to serve static assets like CSS files and images. Maps the physical path C:\\assets to the web route /assets.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/themes/cascading-style-sheets.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUPublishedFolder -RequestPath \"/assets\" -Path \"C:\\assets\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Features in PowerShell Universal Using Feature Flags\nDESCRIPTION: This snippet demonstrates how to disable specific features in PowerShell Universal using the Set-PSUSetting cmdlet with the DisabledFeatures parameter. The example disables both the API and Pages features using a bitwise OR operation on the PowerShellUniversal.Features enumeration.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/feature-flags.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$Parameters = @{\n    DisabledFeatures = ([PowerShellUniversal.Features]::Api -bor [PowerShellUniversal.Features]::Pages)\n}\nSet-PSUSetting @Parameters\n```\n\n----------------------------------------\n\nTITLE: Creating Hidden Content Above Breakpoint in PowerShell\nDESCRIPTION: This example demonstrates how to use New-UDHidden to hide content above the 'md' breakpoint.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDHidden.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDHidden -Up md -Content {\n    New-UDTypography 'md'\n}\n```\n\n----------------------------------------\n\nTITLE: Wait-PSUJob Cmdlet Syntax\nDESCRIPTION: Complete syntax for the Wait-PSUJob cmdlet showing all available parameter sets and options.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Wait-PSUJob.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nWait-PSUJob [-AppToken <String>] [-ComputerName <String>] [-Integrated] -Job <Job> [-Timeout <Int32>] [-UseDefaultCredentials] [-Credential <PSCredential>] [-Silent] [-TrustCertificate] [<CommonParameters>]\n\nWait-PSUJob [-AppToken <String>] [-ComputerName <String>] [-Integrated] -JobId <Int64> [-Timeout <Int32>] [-UseDefaultCredentials] [-Credential <PSCredential>] [-Silent] [-TrustCertificate] [<CommonParameters>]\n\nWait-PSUJob [-AppToken <String>] [-ComputerName <String>] [-Integrated] [-Timeout <Int32>] [-UseDefaultCredentials] -JobRunId <Guid> [-Credential <PSCredential>] [-Silent] [-TrustCertificate] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Git Sync Timeout Configuration\nDESCRIPTION: JSON configuration for setting the Git sync timeout value in minutes within the appsettings.json file.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/git.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"Data\" : {\n    \"GitSyncTimeout\": 30\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Link that Opens in a New Window in PowerShell\nDESCRIPTION: This example shows how to create a link to Google that opens in a new window using the -OpenInNewWindow parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDLink.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDLink -Url \"https://www.google.com\" -Text \"Google\" -OpenInNewWindow -Id 'link2'\n```\n\n----------------------------------------\n\nTITLE: Copying Application Settings\nDESCRIPTION: Command to copy the appsettings.json configuration file containing server settings, authentication, and other platform configurations.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/migration.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nCopy-Item $ENV:ProgramData\\PowerShellUniversal\\appsettings.json \\\\newServer\\C$\\ProgramData\\PowerShellUniversal\\appsettings.json\n```\n\n----------------------------------------\n\nTITLE: Basic Event Callback in PowerShell\nDESCRIPTION: Shows the basic structure of an event callback function in PowerShell.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/portal/portal-widgets/syntax.md#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nfunction OnClick {\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Reduced System Log Level in JSON Settings\nDESCRIPTION: This JSON configuration reduces the system log level from Verbose to Error for production environments. Lower log levels improve system performance by reducing I/O operations and storage requirements.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/best-practices.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"SystemLogLevel\": \"Error\"\n}\n```\n\n----------------------------------------\n\nTITLE: Get-PSUDashboard Cmdlet Syntax\nDESCRIPTION: Complete syntax definition for the Get-PSUDashboard cmdlet showing all available parameters including AppToken, ComputerName, Integrated, Name, UseDefaultCredentials, Credential, and TrustCertificate options.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUDashboard.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PSUDashboard [-AppToken <String>] [-ComputerName <String>] [-Integrated] [-Name <String>] [-UseDefaultCredentials] [-Credential <PSCredential>] [-TrustCertificate] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Creating Dot Variant Badge\nDESCRIPTION: Demonstrates creating a badge with dot variant style.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDBadge.txt#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDBadge -Variant dot -BadgeContent { 4 } -Children {\n  New-UDIcon -Icon Envelope -Size 2x\n} -Id 'badge7'\n```\n\n----------------------------------------\n\nTITLE: Creating Table Text Options in PowerShell\nDESCRIPTION: Example showing how to create table text options to customize the search filter text and apply it to a new table. The options are created using New-UDTableTextOption and passed to New-UDTable via the TextOption parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTableTextOption.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$Options = New-UDTableTextOption -Search \"Filter all the rows\"\nNew-UDTable -Data $Data -TextOption $Ootions\n```\n\n----------------------------------------\n\nTITLE: Creating Right-to-Left Toast Notifications in PowerShell Universal Dashboard\nDESCRIPTION: Shows how to create a toast notification with right-to-left text direction, useful for languages that are written from right to left.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Show-UDToast.txt#2025-04-16_snippet_15\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Text 'Show Toast' -OnClick {\n    Show-UDToast -Message 'Hello, World!' -RightToLeft\n} -Id 'toast16'\n```\n\n----------------------------------------\n\nTITLE: ApiRequest Class Definition in C#\nDESCRIPTION: C# class definition for the ApiRequest object that is passed to C# API endpoints. This contains request information like headers, parameters, and authentication details.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/plugins.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ApiRequest\n{\n    public long Id { get; set; }\n    public ICollection<KeyValue> Variables { get; set; } = new List<KeyValue>();\n    public IEnumerable<ApiFile> Files { get; set; } = new List<ApiFile>();\n    public string Url { get; set; }\n    public ICollection<KeyValue> Headers { get; set; } = new List<KeyValue>();\n    public byte[] Data { get; set; }\n    public int ErrorAction { get; set; }\n    public ICollection<KeyValue> Parameters { get; set; } = new List<KeyValue>();\n    public string Method { get; set; }\n    public ICollection<KeyValue> Cookies { get; set; } = new List<KeyValue>();\n    public string ClaimsPrincipal { get; set; }\n    public string ContentType { get; set; }\n    public string[] Roles { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing PowerShell Scripts in Universal Configuration\nDESCRIPTION: Example of a scripts.ps1 configuration file that defines two PowerShell scripts in the Universal system. Each script is defined with a name and path.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/pages/about-1.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUScript -Name 'Script1.ps1' -Path 'Script1.ps1'\nNew-PSUScript -Name 'Script2.ps1' -Path 'Script2.ps1'\n```\n\n----------------------------------------\n\nTITLE: Copying Configuration Repository\nDESCRIPTION: PowerShell command to copy the entire configuration repository directory to a new server, including all subdirectories containing APIs, Scripts, and Apps configurations.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/migration.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nCopy-Item $ENV:ProgramData\\UniversalAutomation\\Repository \\\\newServer\\C$\\ProgramData\\UniversalAutomation\\Repository -Recurse\n```\n\n----------------------------------------\n\nTITLE: Creating SpeedDialAction with PowerShell Cmdlet\nDESCRIPTION: Syntax definition for creating a speed dial action component. The cmdlet accepts parameters for ID, Icon, TooltipTitle, and OnClick event handler.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDSpeedDialAction.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDSpeedDialAction [-Id <String>] [-Icon <Hashtable>] [-TooltipTitle <String>] [-OnClick <Endpoint>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Editor in PowerShell\nDESCRIPTION: The simplest way to create an editor component in Universal Apps using PowerShell. This creates a default editor with no initial data or event handlers.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/editor.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDEditor\n```\n\n----------------------------------------\n\nTITLE: Using Stop-PSUGitEdit to Cancel a Git Edit Session in PowerShell Universal\nDESCRIPTION: This example demonstrates how to use the Stop-PSUGitEdit cmdlet without any parameters to cancel an active Git edit session in PowerShell Universal.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Stop-PSUGitEdit.txt#2025-04-16_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nStop-PSUGitEdit\n```\n\n----------------------------------------\n\nTITLE: Event Handler Implementation with Toast Notification\nDESCRIPTION: Example of implementing an event handler that shows a toast notification on button click.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/interaction.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Text 'Click Me' -OnClick {\n   Show-UDToast 'Hello!'\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Namespace Using Directive in C# Endpoint\nDESCRIPTION: Example showing how to include namespace using directives in C# endpoints with the #using keyword to access classes from specific namespaces.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/plugins.md#2025-04-16_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n#using System.Management.Automation\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Element Clear to All Connected Clients\nDESCRIPTION: Creates a div element with text content and a button that clears the element across all connected dashboards using the -Broadcast parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Clear-UDElement.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDElement -Tag 'div' -Id 'clearElement2' -Content {\n    New-UDTypography -Text 'Hello World'\n}\nNew-UDButton -Text 'Click Me' -OnClick {\n    Clear-UDElement -Id 'clearElement2' -Broadcast\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Successful Validation Result in PowerShell\nDESCRIPTION: This example demonstrates how to create a new validation result that is successful using the New-PSUValidationResult cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUValidationResult.txt#2025-04-16_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-PSUValidationResult -Success\n```\n\n----------------------------------------\n\nTITLE: Defining New-UDNivoChartAxisOptions Cmdlet Syntax in PowerShell\nDESCRIPTION: This snippet shows the syntax for using the New-UDNivoChartAxisOptions cmdlet. It specifies the available parameters and their types, including options for legend configuration, axis positioning, and tick formatting.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDNivoChartAxisOptions.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDNivoChartAxisOptions [-Legend <String>] [-LegendOffset <Int32>] [-LegendPosition {center | start | end}] [-Position {top | right | bottom | left}] [-TickPadding <Int32>] [-TickRotation <Int32>] [-TickSize <Int32>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Defining Hide-UDSnackbar Cmdlet in PowerShell\nDESCRIPTION: Defines the Hide-UDSnackbar cmdlet for hiding snackbars in Universal Dashboard. It accepts an optional Id parameter to specify which snackbar to hide. If no Id is provided, all snackbars will be hidden.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Hide-UDSnackbar.txt#2025-04-16_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nHide-UDSnackbar [[-Id] <String>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Creating a Disabled Date Picker in PowerShell\nDESCRIPTION: Shows how to create a disabled date picker using the Disabled switch parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDDatePicker.txt#2025-04-16_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDatePicker -Id 'datepicker10' -Value '1-2-2020' -Disabled\n```\n\n----------------------------------------\n\nTITLE: Setting PowerShell Universal Authentication - Base Syntax\nDESCRIPTION: Basic syntax for configuring authentication settings with optional parameters for AppToken and ComputerName. Supports script block execution and default credentials.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Set-PSUAuthenticationMethod.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PSUAuthenticationMethod [-AppToken <String>] [-ComputerName <String>] [-ScriptBlock <ScriptBlock>] [-Disabled] [-UseDefaultCredentials] [-Configure <ScriptBlock>] [-Integrated] [-Type <AuthenticationMethodType>] [-LogoutUrl <String>] [-Credential <PSCredential>] [-TrustCertificate] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Git Sync Status Class Definition - C#\nDESCRIPTION: Defines the GitStatus class structure used for git sync trigger events, containing sync operation details.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/automation/triggers.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class GitStatus \n{\n    public long Id { get; set; }\n    public string CommitId { get; set; }\n    public DateTime Timestamp { get; set; }\n    public TimeSpan SyncTime { get; set; }\n    public int Changes { get; set; }\n    public string Location { get; set; }\n    public string Remote { get; set; }\n    public GitStatusResult Result { get; set; }\n    public string ResultMessage { get; set; }\n    public string ComputerName { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling a Link in PowerShell\nDESCRIPTION: This example shows how to apply custom styling to a link using the -Style parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDLink.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDLink -Url \"https://www.google.com\" -Text \"Google\" -Style @{ 'color' = 'red' } -Id 'link4'\n```\n\n----------------------------------------\n\nTITLE: Setting Application Insights Connection String in Azure Web App\nDESCRIPTION: Example of the application setting name used to configure Application Insights connection string when running PowerShell Universal in Azure. This setting needs to be added to the web app configuration.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/monitoring.md#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nAPPLICATIONINSIGHTS__CONNECTIONSTRING\n```\n\n----------------------------------------\n\nTITLE: Setting Up ELK Stack for PowerShell Universal Logging\nDESCRIPTION: This bash snippet demonstrates the commands to set up ELK stack using Docker for log management with PowerShell Universal.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/development/logging.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up setup\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Setting OpenID Connect Secret via Environment Variable\nDESCRIPTION: Example of setting the OpenID Connect client secret using an environment variable in PowerShell.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/settings.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$Env:Authentication__OIDC__ClientSecret = \"mySecret\"\n```\n\n----------------------------------------\n\nTITLE: Checkbox Label Placement Configuration\nDESCRIPTION: Demonstrates different label placement options for checkboxes including start, top, bottom, and end positions.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/checkbox.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDCheckBox -Label 'Demo' -LabelPlacement start\nNew-UDCheckBox -Label 'Demo' -LabelPlacement top\nNew-UDCheckBox -Label 'Demo' -LabelPlacement bottom\nNew-UDCheckBox -Label 'Demo' -LabelPlacement end\n```\n\n----------------------------------------\n\nTITLE: Justified Content Stack\nDESCRIPTION: Creates a stack with centered alignment and space-between justification\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDStack.txt#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDStack -Content {\n    New-UDCard -Text \"Card 1\" -RemoveMargin\n    New-UDCard -Text \"Card 2\" -RemoveMargin\n    New-UDCard -Text \"Card 3\" -RemoveMargin\n} -Spacing 2 -Id 'stack6' -AlignItems 'center' -JustifyContent 'space-between'\n```\n\n----------------------------------------\n\nTITLE: Creating Grid Row with Two Columns in PowerShell Universal Dashboard\nDESCRIPTION: Demonstrates how to create a grid row with two equal-width columns using New-UDRow. Each column has a size of 6 units (half width) and contains simple text content.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDRow.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDRow -Columns {\n    New-UDColumn -SmallSize 6 -Content {\n        \"Column 1\"\n    }\n    New-UDColumn -SmallSize 6 -Content {\n        \"Column 2\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Disabled Rating Component in PowerShell\nDESCRIPTION: This example shows how to create a disabled rating component.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDRating.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDRating -Value 3 -Disabled -Id 'rating4'\n```\n\n----------------------------------------\n\nTITLE: Starting Prometheus with OTLP Receiver\nDESCRIPTION: PowerShell command to start Prometheus with OTLP receiver enabled, allowing it to collect metrics from PowerShell Universal via the OpenTelemetry plugin.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/plugins.md#2025-04-16_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\n.\\prometheus.exe --web.enable-otlp-receiver\n```\n\n----------------------------------------\n\nTITLE: Basic PowerShell Syntax Highlighting Example\nDESCRIPTION: Demonstrates basic usage of the New-UDSyntaxHighlighter cmdlet with PowerShell code.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDSyntaxHighlighter.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDSyntaxHighlighter -Code 'Write-Host \"Hello World\"' -Language powershell\n```\n\n----------------------------------------\n\nTITLE: Custom Label Implementation\nDESCRIPTION: Demonstrates how to customize table labels and text options using the TextOption parameter and New-UDTableTextOption cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/table.md#2025-04-16_snippet_17\n\nLANGUAGE: powershell\nCODE:\n```\n$TableData = @(\n    @{Dessert = 'Frozen yoghurt'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Ice cream sandwich'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Eclair'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Cupcake'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n    @{Dessert = 'Gingerbread'; Calories = 159; Fat = 6.0; Carbs = 24; Protein = 4.0}\n) \n\n$Option = New-UDTableTextOption -Search \"Search all these records\"\n\nNew-UDTable -Data $TableData -TextOption $Option -ShowSearch\n```\n\n----------------------------------------\n\nTITLE: Wildcard Permission Identifier for Script Features\nDESCRIPTION: A permission identifier using wildcards to grant access to all script features and operations in PowerShell Universal.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/security/enterprise-security/permissions.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nautomation.scripts/*\n```\n\n----------------------------------------\n\nTITLE: Accessing Management API Documentation in PowerShell Universal\nDESCRIPTION: Shows the URL to access the built-in Swagger dashboard for Management API documentation in PowerShell Universal.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/openapi.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://localhost:5000/swagger/index.html\n```\n\n----------------------------------------\n\nTITLE: Retrieving All PSU Folders in PowerShell\nDESCRIPTION: This example demonstrates how to use the Get-PSUFolder cmdlet to retrieve all folders within PowerShell Universal.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUFolder.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-UAFolder\n```\n\n----------------------------------------\n\nTITLE: Accessing Service Provider in C# Endpoint\nDESCRIPTION: Example showing how to access the PowerShell Universal service container to get service instances for additional functionality.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/plugins.md#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar database = ServiceProvider.GetService(typeof(IDatabase));\n```\n\n----------------------------------------\n\nTITLE: Using Transfer List in a Form in PowerShell Universal Dashboard\nDESCRIPTION: This snippet illustrates how to incorporate a transfer list within a form using New-UDForm. It demonstrates that transfer lists can be used as form elements, with the form's submit event handling the transfer list data.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/transfer-list.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDForm -Content {\n    New-UDTransferList -Item {\n        New-UDTransferListItem -Name 'test1' -Value 1\n        New-UDTransferListItem -Name 'test2' -Value 2\n        New-UDTransferListItem -Name 'test3' -Value 3\n        New-UDTransferListItem -Name 'test4' -Value 4\n        New-UDTransferListItem -Name 'test5' -Value 5\n    }\n} -OnSubmit {\n    Show-UDToast ($EventData | ConvertTo-Json)\n}\n```\n\n----------------------------------------\n\nTITLE: New-UDMarkdown Cmdlet Syntax\nDESCRIPTION: Complete syntax definition for the New-UDMarkdown cmdlet showing all available parameters including Id and Children.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDMarkdown.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDMarkdown [[-Id] <String>] [[-Children] <String>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Using Get-PSUStats Cmdlet in PowerShell\nDESCRIPTION: This snippet demonstrates the basic usage of the Get-PSUStats cmdlet to retrieve statistics about a PowerShell Universal instance. The cmdlet accepts various parameters for authentication and connection options.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUStats.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PSUStats [-AppToken <String>] [-ComputerName <String>] [-Integrated] [-UseDefaultCredentials] [-Credential <PSCredential>] [-TrustCertificate] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Profiling PowerShell Job Execution\nDESCRIPTION: Demonstrates how to profile a PowerShell job that retrieves service information using Measure-PSUBlock.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/development/profiling.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nMeasure-PSUBlock -ScriptBlock {\n    Get-Service\n} -Name 'Get-Service'\n```\n\n----------------------------------------\n\nTITLE: Pushing to Git Repository in PowerShell Universal\nDESCRIPTION: Command to push to a Git remote using PowerShell Universal. Requires the repository to be cloned first, and changes will not be automatically staged during the push operation.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/psucli.md#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\npsu git push --url http://github.com/ironmansoftware/psu.git --path C:\\ProgramData\\UniversalAutomation\\Repository --username 'adamdriscoll' --password 'gh__1234123' --branch main\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Checkbox in PowerShell\nDESCRIPTION: This example demonstrates how to create a basic checkbox using the New-UDCheckbox cmdlet with a label and ID.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDCheckBox.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDCheckbox -Label 'Demo' -Id 'checkbox1'\n```\n\n----------------------------------------\n\nTITLE: React TextField Implementation\nDESCRIPTION: Example of implementing a text field component with state management.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/custom-components/building-custom-components.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst UDTextField = (props) => {\n    const onChange = (e) => {\n        props.setState({value: e.target.value})\n    }\n\n    return <TextField  {...props} onChange={onChange} />\n}\n\nexport default withComponentFeatures(UDTextField);\n```\n\n----------------------------------------\n\nTITLE: PowerShell Cmdlet Syntax for Invoke-UDEvent\nDESCRIPTION: Defines the syntax for invoking events in Universal Dashboard. Takes a required ID parameter and an event parameter for onClick events. Supports common PowerShell parameters.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Invoke-UDEvent.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-UDEvent [-Id] <string> [-event] {onClick} [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Removing a PowerShell Script Using Remove-PSUScript\nDESCRIPTION: Example demonstrating how to remove a script by first getting the script object and then removing it using Remove-PSUScript.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Remove-PSUScript.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$Script = Get-UAScript -Name 'Script1.ps1'\nRemove-UAScript -Script $Script\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom AppSettings File Location\nDESCRIPTION: Command line example showing how to specify a custom location for the appsettings.json file.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/settings.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n.\\Universal.Server.exe --appsettings C:\\appsettings.json\n```\n\n----------------------------------------\n\nTITLE: Creating Line Chart Syntax\nDESCRIPTION: Syntax for creating a Nivo line chart with options for customizing lines, dots, areas, and axes.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDNivoChart.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDNivoChart [-Id <String>] -Data <Object> [...] -Line [-LineWidth <Int32>] [-EnableArea] [-AreaBaselineValue <String>] [-AreaOpacity <Single>] [-AreaBlendMode <String>] [-DisableDots] [-EnableDotLabel]\n```\n\n----------------------------------------\n\nTITLE: API Configuration\nDESCRIPTION: External API URL configuration for Universal server when running behind a reverse proxy.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/settings.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n\"Api\": {\n  \"Url\": \"\"\n},\n```\n\n----------------------------------------\n\nTITLE: PowerShell Endpoint Implementation\nDESCRIPTION: Example of implementing PowerShell endpoints for component interaction.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/custom-components/building-custom-components.md#2025-04-16_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nfunction New-UD95Button {\n    param(\n        [Parameter()]\n        [string]$Id = [Guid]::NewGuid(),\n        [Parameter()]\n        [string]$Text,\n        [Parameter()]\n        [Endpoint]$OnClick\n    )\n\n    if ($OnClick)\n    {\n        $OnClick.Register($Id, $PSCmdlet)\n    }\n\n    @{\n        type = \"ud95-button\"\n        isPlugin = $true \n        assetId = $AssetId\n\n        id = $Id \n        text = $Text \n        onClick = $OnClick\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Role by Name in PowerShell Universal\nDESCRIPTION: This example shows how to use the Get-PSURole cmdlet with the -Name parameter to retrieve a specific role (in this case, the 'Administrator' role) from PowerShell Universal.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSURole.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-UARole -Name 'Administrator'\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry for Prometheus Metrics\nDESCRIPTION: JSON configuration for the OpenTelemetry plugin when using Prometheus, pointing to the standard metrics endpoint used by Prometheus.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/plugins.md#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{    \n    \"OpenTelemetry\": {\n        \"Otlp\": {\n            \"Endpoint\": \"http://localhost:9090/metrics\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Object Property Reference\nDESCRIPTION: Shows how to reference properties of complex objects in PSBlazor syntax.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/portal/portal-widgets/syntax.md#2025-04-16_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<Alert Message=\"$TestVariable.Name\"></Alert>\n<Button OnClick=\"OnClick\">Click Me</Button>\n```\n\n----------------------------------------\n\nTITLE: Creating a Disabled Transfer List\nDESCRIPTION: Creates a transfer list that is completely disabled, preventing any user interaction with the component.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTransferList.txt#2025-04-16_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDTransferList -Item {\n    New-UDTransferListItem -Name 'test1' -Value 1\n    New-UDTransferListItem -Name 'test2' -Value 2\n    New-UDTransferListItem -Name 'test3' -Value 3\n    New-UDTransferListItem -Name 'test4' -Value 4\n    New-UDTransferListItem -Name 'test5' -Value 5\n} -Disabled -Id 'transferlist4'\n```\n\n----------------------------------------\n\nTITLE: Creating Filled Variant Textbox in PowerShell\nDESCRIPTION: Creates a textbox with a filled variant style.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTextbox.txt#2025-04-16_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTextbox -Id 'textbox9' -Variant 'filled' -Label 'Name' -Placeholder 'Enter your name' -Value 'John Doe'\n```\n\n----------------------------------------\n\nTITLE: Hello World Container Output Example\nDESCRIPTION: Example output from running the hello-world container, showing the image download process and successful container execution.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/docker.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nUnable to find image 'hello-world:latest' locally\nlatest: Pulling from library/hello-world\n2db29710123e: Pull complete \nDigest: sha256:ffb13da98453e0f04d33a6eee5bb8e46ee50d08ebe17735fc0779d0349e889e9\nStatus: Downloaded newer image for hello-world:latest\n\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n 1. The Docker client contacted the Docker daemon.\n 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\n    (amd64)\n 3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\n\nTo try something more ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu bash\n\nShare images, automate workflows, and more with a free Docker ID:\n https://hub.docker.com/\n\nFor more examples and ideas, visit:\n https://docs.docker.com/get-started/\n```\n\n----------------------------------------\n\nTITLE: Setting Default Admin Credentials in PowerShell Universal\nDESCRIPTION: Environment variable configuration to automate the creation of the default administrator account. Sets the admin username and password without enforcing standard password restrictions.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/security/local-accounts.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$ENV:PSUDefaultAdminPassword = \"MyPassword\"\n$ENV:PSUDefaultAdminName = 'MyAdmin'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Computer Groups in PowerShell Universal\nDESCRIPTION: This PowerShell cmdlet retrieves computer groups defined in the Universal configuration. It can be used to get all computer groups or a specific group by ID. The cmdlet supports various parameters for authentication and connection options.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUComputerGroup.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PSUComputerGroup [-Id] <Int64> [-AppToken <String>] [-ComputerName <String>] [-Integrated] [-UseDefaultCredentials] [-Credential <PSCredential>] [-TrustCertificate] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Executing PowerShell Universal Service Configuration Command\nDESCRIPTION: This command opens the Services management console to configure the PowerShell Universal service account.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/running-as-a-service-account.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nservices.msc\n```\n\n----------------------------------------\n\nTITLE: Starting Containers with Docker Compose\nDESCRIPTION: Command to start containers defined in a docker-compose.yml file in detached mode.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/docker.md#2025-04-16_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Configuring Kestrel Header Size Limit in JSON\nDESCRIPTION: This JSON configuration snippet shows how to increase the header size limit for Kestrel in the appsettings.json file. It sets the MaxRequestHeadersTotalSize to handle users with many groups.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/security/authorization.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Kestrel\": {\n    \"Endpoints\": {\n      \"HTTP\": {\n        \"Url\": \"http://*:5000\"\n      }\n    },\n    \"Limits\": {\n      \"MaxRequestHeadersTotalSize\": 132768\n    },\n    \"RedirectToHttps\": \"false\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Job Tree\nDESCRIPTION: Shows how to retrieve a job and all its associated parent/child jobs using the -Tree parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUJob.txt#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nGet-UAJob -Id 10 -Tree\n```\n\n----------------------------------------\n\nTITLE: Retrieving PowerShell Universal Terminal Instances\nDESCRIPTION: Example demonstrating how to get a terminal configuration, start a new instance, and retrieve running terminal instances using PowerShell Universal cmdlets.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUTerminalInstance.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$Terminal = Get-PSUTerminal | Where-Object Name -eq 'Terminal1'\nStart-PSUTerminalInstance -Terminal $Terminal \nGet-PSUTerminalInstance\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Dashboard Page with Get-UDPage in PowerShell\nDESCRIPTION: This snippet demonstrates how to use the Get-UDPage cmdlet to retrieve a specific page from the current dashboard. It requires the page name as a parameter and can be used within a dashboard context.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-UDPage.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-UDPage -Name 'Home Page'\n```\n\n----------------------------------------\n\nTITLE: Remove-PSUSchedule Syntax Patterns\nDESCRIPTION: Various syntax patterns for using the Remove-PSUSchedule cmdlet, showing different parameter combinations for removing schedules.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Remove-PSUSchedule.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-PSUSchedule [-Id] <Int64> [-AppToken <String>] [-ComputerName <String>] [-Integrated] [-UseDefaultCredentials] [-Credential <PSCredential>] [-TrustCertificate] [<CommonParameters>]\n\nRemove-PSUSchedule [-AppToken <String>] [-ComputerName <String>] [-Integrated] -Schedule <Schedule> [-UseDefaultCredentials] [-Credential <PSCredential>] [-TrustCertificate] [<CommonParameters>]\n\nRemove-PSUSchedule [-AppToken <String>] [-ComputerName <String>] [-Integrated] [-UseDefaultCredentials] -Name <String> [-Credential <PSCredential>] [-TrustCertificate] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Removing an Environment in PowerShell Universal\nDESCRIPTION: This example demonstrates how to remove an environment with ID 1 from PowerShell Universal using the Remove-PSUEnvironment cmdlet. It first retrieves the environment using Get-PSUEnvironment and then passes it to Remove-PSUEnvironment.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Remove-PSUEnvironment.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-PSUEnvironment -Environment (Get-PSUEnvironment -Id 1)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Example of New-UDTreeNode in PowerShell\nDESCRIPTION: This is a reference to where examples can be found. The cmdlet should be used in conjunction with New-UDTreeView to create hierarchical tree structures in PowerShell Universal Dashboard.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTreeNode.txt#2025-04-16_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSee New-UDTreeView for examples.\n```\n\n----------------------------------------\n\nTITLE: Database Schema Rollback for Nightly Builds\nDESCRIPTION: Command to roll back the database schema to a specific version when testing nightly builds.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/upgrading.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n.\\psu.exe db schema --schema-version 5.4.0\n```\n\n----------------------------------------\n\nTITLE: Using Get-PSUGitSetting Cmdlet in PowerShell\nDESCRIPTION: Basic example showing how to retrieve git settings using the Get-PSUGitSetting cmdlet. This cmdlet can be configured with various parameters like AppToken, ComputerName, and Credentials for authentication and connection settings.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUGitSetting.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PSUGitSetting\n```\n\n----------------------------------------\n\nTITLE: Configuring Kestrel Header Size Limit in PowerShell Universal\nDESCRIPTION: This JSON configuration snippet shows how to increase the header size limit for Kestrel in PowerShell Universal. It's used to accommodate users with many group memberships, increasing the limit from the default 32kb to 132kb.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/security/README.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Kestrel\": {\n    \"Endpoints\": {\n      \"HTTP\": {\n        \"Url\": \"http://*:5000\"\n      }\n    },\n    \"Limits\": {\n      \"MaxRequestHeadersTotalSize\": 132768\n    },\n    \"RedirectToHttps\": \"false\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Autocomplete Options in PowerShell\nDESCRIPTION: This cmdlet creates a new autocomplete option for use with New-UDAutocomplete. It requires a Name and Value parameter, which define the display text and return value of the option respectively.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDAutocompleteOption.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDAutocompleteOption [-Name] <String> [-Value] <String> [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Converting LiteDB Database to SQLite\nDESCRIPTION: PowerShell command to convert an existing LiteDB database to SQLite format using the psu.exe utility included with PowerShell Universal.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/upgrading.md#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\n.\\psu.exe db convert --Path \"$ENV:ProgramData\\UniversalAutomation\\database.db\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Sand Theme for PowerShell Universal App\nDESCRIPTION: Defines a custom 'Sand' theme for a PowerShell Universal app, specifying primary and secondary color palettes with light, main, and dark shades.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/themes/README.md#2025-04-16_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\n$Theme = @{\n  palette = @{\n    primary = @{\n      light = '#ffe8d6'\n      main = '#ddbea9'\n      dark = '#cb997e'\n    }\n    secondary = @{\n      light = '#b7b7a4'\n      main = '#a5a58d'\n      dark = '#6b705c'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Upload Component with Text Variant in PowerShell\nDESCRIPTION: Creates an upload component with a text variant styling. The -Variant parameter is set to 'text' instead of the default 'contained'.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDUpload.txt#2025-04-16_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDUpload -Text \"Upload\" -OnUpload {\n    Show-UDToast $Body\n} -Id 'upload5' -Variant 'text'\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Avatar with Image in PowerShell\nDESCRIPTION: This example demonstrates how to create a basic avatar with an image using the New-UDAvatar cmdlet. It sets the alt text and specifies an image URL.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDAvatar.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDAvatar -Alt \"Remy Sharp\" -Image \"/admin/logo.png\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Cookies in PowerShell Universal API Endpoints\nDESCRIPTION: Shows how to access cookies from HTTP requests within an API endpoint using the built-in $Cookies hashtable.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/endpoints.md#2025-04-16_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\n$Cookies['Request-Cookie']\n```\n\n----------------------------------------\n\nTITLE: Creating PSU Script with ScriptBlock\nDESCRIPTION: Creates a PowerShell Universal script using an inline script block. The script will be saved as a file in the repository directory and outputs 'Hello, world!'.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUScript.txt#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUScript -Name 'Script1.ps1' -ScriptBlock {\n    \"Hello, world!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Transfer List with Pre-selected Items\nDESCRIPTION: Creates a transfer list with items 1 and 2 pre-selected, which will appear in the right-hand list on initial load.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTransferList.txt#2025-04-16_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDTransferList -Item {\n    New-UDTransferListItem -Name 'test1' -Value 1\n    New-UDTransferListItem -Name 'test2' -Value 2\n    New-UDTransferListItem -Name 'test3' -Value 3\n    New-UDTransferListItem -Name 'test4' -Value 4\n    New-UDTransferListItem -Name 'test5' -Value 5\n} -SelectedItem @(1, 2) -Id 'transferlist3'\n```\n\n----------------------------------------\n\nTITLE: Creating PowerShell Universal Scripts - Syntax Pattern 2\nDESCRIPTION: Creates a new script using Path parameter as the primary input, allowing for script content to be loaded from a file.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUScript.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUScript [-AppToken <String>] [-ComputerName <String>] [-Description <String>] [-DisableManualInvocation] [-ManualTime <Int32>] [-MaxHistory <Int32>] -Name <String> [-Notes <String>] [-Parameter <ScriptParameter[]>] -Path <String> [-Status {Draft | Pending_Review | Published | Disabled}] [-Tag <Tag[]>] [-ConcurrentJobs <Int32>] [-Environment <String>] [-TimeOut <Double>] [-Credential <Variable>] [-UseDefaultCredentials] [-Integrated] [-RetryLimit <Int32>] [-DiscardPipeline] [-LoadProfile] [-WorkingDirectory <String>] [-Role <String[]>] [-AvailableInBranch <String[]>] [-PortalOutputType <PortalOutputType>] [-TrustCertificate] [-PortalOpenInNewWindow] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Creating a One-Time Schedule with Timezone\nDESCRIPTION: Creates a one-time schedule that runs 30 minutes in the future, configured for the America/Phoenix timezone.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUSchedule.txt#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n$Script = Get-PSUScript -Name 'Script1.ps1'\n$Time = (Get-Date).AddMinutes(30).ToUniversalTime()\nNew-PSUSchedule -Script $Script -OneTime $Time -TimeZone \"America/Phoenix\"\n```\n\n----------------------------------------\n\nTITLE: New-UDListItem PowerShell Cmdlet Syntax\nDESCRIPTION: The complete syntax for the New-UDListItem cmdlet showing all available parameters and their positions. Used to create customizable list items with various styling and interaction options.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDListItem.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDListItem [[-Id] <String>] [[-AvatarType] <String>] [[-OnClick] <Endpoint>] [[-Label] <Object>] [[-Children] <ScriptBlock>] [[-SubTitle] <String>] [[-Icon] <Object>] [[-Url] <String>] [-OpenInNewWindow] [[-SecondaryAction] <ScriptBlock>] [[-ClassName] <String>] [-Open] [-Nested] [[-Href] <String>] [[-Switch] <Object>] [[-SwitchAlignment] <String>] [[-CheckBox] <Object>] [[-CheckBoxAlignment] <String>] [[-Style] <Hashtable>] [[-Sx] <String>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Referencing a Page in a Universal App with PowerShell\nDESCRIPTION: Shows how to include a page named 'Users' in a Universal App using the Get-UDPage cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/pages.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDApp -Pages @(\n    Get-UDPage -Name 'Users'\n)\n```\n\n----------------------------------------\n\nTITLE: Sending a POST Request with JSON Body\nDESCRIPTION: Demonstrates how to send a POST request with a JSON body to an API endpoint using Invoke-RestMethod.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/endpoints.md#2025-04-16_snippet_14\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-RestMethod http://localhost:5000/user -Method Post -Body \"{'username': 'adam'}\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Scripts by Identity\nDESCRIPTION: Example showing how to retrieve scripts associated with a specific user identity.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUScript.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$Identity = Get-UAIdentity -Name 'Adam'\nGet-UAScript -Identity $Identity\n```\n\n----------------------------------------\n\nTITLE: Defining a Dynamic Component in PSBlazor\nDESCRIPTION: Shows how to declare a Dynamic component by specifying a PowerShell function to be executed at render time. The component refers to a function that will generate the markup on the fly.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/portal/portal-widgets/dynamic.md#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Dynamic Function=\"RenderMyDynamic\" />\n```\n\n----------------------------------------\n\nTITLE: Downloading Windows PowerShell Universal Files\nDESCRIPTION: Script to download the latest Windows version of PowerShell Universal.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/hosting/azure.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n$LatestVersion = Invoke-RestMethod https://imsreleases.blob.core.windows.net/universal/production/v3-version.txt\nInvoke-WebRequest \"https://imsreleases.blob.core.windows.net/universal/production/$LatestVersion/Universal.win7-x64.$LatestVersion.zip\" -OutFile .\\Universal.zip\n```\n\n----------------------------------------\n\nTITLE: Defining New-UDMapOverlay Cmdlet in PowerShell\nDESCRIPTION: This snippet defines the New-UDMapOverlay cmdlet, which creates a map overlay. It specifies the cmdlet's parameters including Id, Name, Content, and Checked. The cmdlet supports common PowerShell parameters as well.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDMapOverlay.txt#2025-04-16_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDMapOverlay [[-Id] <String>] [-Name] <String> [-Content] <ScriptBlock> [-Checked] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Removing PowerShell Universal Trigger by ID\nDESCRIPTION: The Remove-PSUTrigger cmdlet removes a trigger from PowerShell Universal by specifying its ID. This cmdlet supports various connection parameters for remote administration of PSU instances.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Remove-PSUTrigger.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-PSUTrigger -Id 123 -ComputerName \"https://psu-server\" -Credential $credential\n```\n\n----------------------------------------\n\nTITLE: Remove-PSUScript Syntax Options\nDESCRIPTION: Shows the two available syntax patterns for using Remove-PSUScript - removing by ID or by Script object.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Remove-PSUScript.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-PSUScript [-Id] <Int64> [-AppToken <String>] [-ComputerName <String>] [-Integrated] [-UseDefaultCredentials] [-Credential <PSCredential>] [-TrustCertificate] [<CommonParameters>]\n\nRemove-PSUScript [-AppToken <String>] [-ComputerName <String>] [-Integrated] -Script <Script> [-UseDefaultCredentials] [-Credential <PSCredential>] [-TrustCertificate] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Migrating SQLite Database\nDESCRIPTION: Command to copy the SQLite database file to the new server's configured location.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/migration.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nCopy-Item $ENV:ProgramData\\UniversalAutomation\\database.db \\\\newServer\\C$\\ProgramData\\UniversalAutomation\\database.db\n```\n\n----------------------------------------\n\nTITLE: PowerShell Sync-PSUGit Full Syntax\nDESCRIPTION: Complete syntax for the Sync-PSUGit cmdlet showing all available parameters including AppToken, ComputerName, Credential, and various switches.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Sync-PSUGit.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSync-PSUGit [-AppToken <String>] [-ComputerName <String>] [-Credential <PSCredential>] [-Integrated] [-TrustCertificate] [-UseDefaultCredentials] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Event Callback with Arguments\nDESCRIPTION: Demonstrates how to handle event arguments in a PowerShell callback function.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/portal/portal-widgets/syntax.md#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nfunction OnClick {\n   param($EventArgs)\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying All Typography Variants in PowerShell\nDESCRIPTION: Creates multiple typography components to demonstrate all available variant options with spacing between them.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTypography.txt#2025-04-16_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\n@(\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"subtitle1\", \"subtitle2\", \"body1\", \"body2\",  \"caption\", \"button\", \"overline\", \"srOnly\", \"inherit\",  \"display4\", \"display3\", \"display2\", \"display1\", \"headline\", \"title\", \"subheading\") | ForEach-Object {\n       New-UDTypography -Variant $_ -Text $_ -GutterBottom\n       New-UDElement -Tag 'p' -Content {}\n }\n```\n\n----------------------------------------\n\nTITLE: Basic Example Reference for New-UDTableColumn in PowerShell\nDESCRIPTION: This example directs users to see the New-UDTable cmdlet documentation for comprehensive examples of how to use New-UDTableColumn in context.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTableColumn.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSee New-UDTable for examples.\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Container with New-UDContainer in PowerShell\nDESCRIPTION: This example demonstrates how to create a basic container using the New-UDContainer cmdlet. It includes a New-UDPaper component inside the container with an elevation of 3.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDContainer.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDContainer -Content {\n    New-UDPaper -Content { } -Elevation 3\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Cmdlet Syntax for GeoJSON Conversion\nDESCRIPTION: Defines the syntax for the ConvertFrom-GeoJson cmdlet that accepts GeoJSON input and optional icon parameters. The cmdlet converts GeoJSON data into map features with support for common PowerShell parameters.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/ConvertFrom-GeoJson.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConvertFrom-GeoJson [-GeoJson] <PSObject[]> [[-Icons] <PSObject[]>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get-PSUGitSetting Full Syntax\nDESCRIPTION: Complete syntax for the Get-PSUGitSetting cmdlet showing all available parameters including authentication options, connection settings, and common parameters.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUGitSetting.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PSUGitSetting [-AppToken <String>] [-ComputerName <String>] [-Credential <PSCredential>] [-Integrated] [-TrustCertificate] [-UseDefaultCredentials] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Configuring Telemetry in Universal Settings\nDESCRIPTION: Example of the default settings.ps1 configuration file with telemetry enabled. This shows how Universal stores settings in PowerShell configuration files.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/pages/about-1.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PSUSetting -Telemetry\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Compose v2 Version\nDESCRIPTION: Command to verify if Docker Compose v2 is installed. This version uses the space-separated 'docker compose' command format.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/docker.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose version\n```\n\n----------------------------------------\n\nTITLE: Retrieving PSU Server Information with PowerShell\nDESCRIPTION: Basic example of using the Get-PSUInformation cmdlet to retrieve information about a PowerShell Universal server. This cmdlet supports various authentication methods and server connection options.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUInformation.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PSUInformation\n```\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PSUInformation [-AppToken <String>] [-ComputerName <String>] [-Integrated] [-UseDefaultCredentials] [-Credential <PSCredential>] [-TrustCertificate] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Adding Border to Icons in PowerShell Universal\nDESCRIPTION: Example of creating an icon with a border using the border parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/icon.md#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDIcon -Icon 'AddressBook' -Size '5x' -Border\n```\n\n----------------------------------------\n\nTITLE: Remove-PSUTag Syntax Pattern 1\nDESCRIPTION: Syntax pattern for removing a tag using the tag ID with various optional parameters for authentication and server configuration.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Remove-PSUTag.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-PSUTag [-Id] <Int64> [-AppToken <String>] [-ComputerName <String>] [-Integrated] [-UseDefaultCredentials] [-Credential <PSCredential>] [-TrustCertificate] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Creating Button Groups with Different Sizes in PowerShell\nDESCRIPTION: This example shows how to create button groups with different sizes using the -Size parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDButtonGroup.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButtonGroup -Content {\n    New-UDButtonGroupItem -Text 'Delete'\n    New-UDButtonGroupItem -Text 'Copy'\n} -Size 'small'\nNew-UDButtonGroup -Content {\n    New-UDButtonGroupItem -Text 'Delete'\n    New-UDButtonGroupItem -Text 'Copy'\n} -Size 'medium'\nNew-UDButtonGroup -Content {\n    New-UDButtonGroupItem -Text 'Delete'\n    New-UDButtonGroupItem -Text 'Copy'\n} -Size 'large'\n```\n\n----------------------------------------\n\nTITLE: Creating a Slider with Value Labels in PowerShell for Universal Dashboard\nDESCRIPTION: This example demonstrates how to create a slider with value labels always displayed.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDSlider.txt#2025-04-16_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDSlider -Value 50 -Minimum 0 -Maximum 100 -ValueLabelDisplay on -Id 'slider5'\n```\n\n----------------------------------------\n\nTITLE: Accessing Error Messages in Windows PowerShell\nDESCRIPTION: Demonstrates how to access the error message content when using Invoke-RestMethod to call endpoints that return errors in Windows PowerShell, which doesn't display error details by default.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/error-handling.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\ntry { invoke-restmethod http://localhost:5000/error2 } catch { [System.IO.StreamReader]::new($_.Exception.Response.GetResponseStream()).ReadToEnd()}\n```\n\n----------------------------------------\n\nTITLE: Creating Map Raster Layers with New-UDMapRasterLayer in PowerShell\nDESCRIPTION: This cmdlet creates map raster layers with customizable options. It supports two main syntaxes: one for general use with a tile server, and another specifically for Bing maps. Parameters allow control over the tile server, API key, attribution, opacity, z-index, and more.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDMapRasterLayer.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDMapRasterLayer [-Id <String>] [-TileServer <String>] [-Attribution <String>] [-Opacity <Int32>] [-ZIndex <Int32>] [-Name <String>] [<CommonParameters>]\n```\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDMapRasterLayer [-Id <String>] -ApiKey <String> [-Type <String>] -Bing [-Attribution <String>] [-Opacity <Int32>] [-ZIndex <Int32>] [-Name <String>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Unblocking PowerShell Universal Files\nDESCRIPTION: Command to unblock all files in the PowerShell Universal directory to ensure proper execution.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/upgrading.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nGet-ChildItem -Recurse | Unblock-File\n```\n\n----------------------------------------\n\nTITLE: Creating Colored Buttons in PowerShell\nDESCRIPTION: Illustrates how to create buttons with different colors using the -Color parameter. This example creates secondary, success, and error colored buttons.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDButton.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Text 'Secondary' -Color secondary -Id 'button5'\nNew-UDButton -Text 'Success' -Color success -Id 'button6'\nNew-UDButton -Text 'Error' -Color error -Id 'button7'\n```\n\n----------------------------------------\n\nTITLE: Defining New-PSUPortalPage Cmdlet Syntax in PowerShell\nDESCRIPTION: This snippet shows the syntax for the New-PSUPortalPage cmdlet. It includes various parameters for configuring the new portal page, such as authentication settings, credentials, and page properties.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUPortalPage.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUPortalPage [-AppToken <String>] [-Authenticated] [-ComputerName <String>] [-Credential <PSCredential>] [-Description <String>] [-Integrated] -Name <String> [-Role <String[]>] [-TrustCertificate] [-UseDefaultCredentials] [-Widget <PortalComponentInstance[]>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Global Trigger Creation - PowerShell\nDESCRIPTION: Example of creating a global trigger that runs on job start events.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/automation/triggers.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUTrigger -Name 'Trigger' -EventType JobStarted -TriggerScript Script.ps1\n```\n\n----------------------------------------\n\nTITLE: Granting App Token with Expiry and Role in PowerShell\nDESCRIPTION: This example demonstrates how to grant a new app token to a specific identity with an expiration date and a role. It uses the Grant-PSUAppToken cmdlet to create a token for 'MyIdentity' that expires in 30 days and has 'Reader' access.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Grant-PSUAppToken.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGrant-PSUAppToken -IdentityName 'MyIdentity' -Expiry (Get-Date).AddDays(30) -Role 'Reader'\n```\n\n----------------------------------------\n\nTITLE: Configuring Linux Time Zone Support\nDESCRIPTION: Docker configuration for proper time zone support on Linux containers using tzdata package.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/docker.md#2025-04-16_snippet_29\n\nLANGUAGE: dockerfile\nCODE:\n```\nENV TZ Europe/Amsterdam\nRUN apt-get install -y tzdata\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Version Output Example\nDESCRIPTION: Example output of the docker version command showing detailed version information for Docker Engine components including containerd, runc, and docker-init.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/docker.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nClient: Docker Engine - Community\n Version:           23.0.1\n API version:       1.42\n Go version:        go1.19.5\n Git commit:        a5ee5b1\n Built:             Thu Feb  9 19:47:01 2023\n OS/Arch:           linux/amd64\n Context:           default\n\nServer: Docker Engine - Community\n Engine:\n  Version:          23.0.1\n  API version:      1.42 (minimum version 1.12)\n  Go version:       go1.19.5\n  Git commit:       bc3805a\n  Built:            Thu Feb  9 19:47:01 2023\n  OS/Arch:          linux/amd64\n  Experimental:     false\n containerd:\n  Version:          1.6.18\n  GitCommit:        2456e983eb9e37e47538f59ea18f2043c9a73640\n runc:\n  Version:          1.1.4\n  GitCommit:        v1.1.4-0-g5fd4c4d\n docker-init:\n  Version:          0.19.0\n  GitCommit:        de40ad0\n\n```\n\n----------------------------------------\n\nTITLE: Removing a Variable in PowerShell Universal\nDESCRIPTION: Example demonstrating how to retrieve a variable using Get-UAVariable and then remove it using Remove-UAVariable. This shows the typical workflow for removing variables in PowerShell Universal.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Remove-PSUVariable.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$Var = Get-UAVariable -Name 'username'\nPS C:\\> Remove-UAVariable -Variable $Var\n```\n\n----------------------------------------\n\nTITLE: Configuring API URL in appsettings.json\nDESCRIPTION: JSON configuration to set the API URL for PowerShell Universal cmdlets when the default URL cannot be determined automatically.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/upgrading.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"API\" : {\n      \"URL\": \"http://localhost:5000\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Autocomplete Options in PowerShell\nDESCRIPTION: Demonstrates how to create custom autocomplete options with specific names and values using New-UDAutoCompleteOption cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/automcomplete.md#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDAutocomplete -Options @(\n    New-UDAutoCompleteOption -Name 'Adam D' -Value '1'\n    New-UDAutoCompleteOption -Name 'Sarah F' -Value '2'\n    New-UDAutoCompleteOption -Name 'Tom S' -Value '3'\n)\n```\n\n----------------------------------------\n\nTITLE: Downgrading PowerShell Universal Database Schema using PSU CLI\nDESCRIPTION: This command uses the PSU CLI to downgrade the schema of a SQLite database to version 5.3.0. It requires stopping PowerShell Universal services before execution and specifies the connection string and database type.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/downgrade.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n.\\psu.exe schema --target-version '5.3.0' --connection-string \"Data Source=C:\\ProgramData\\UniversalAutomation\\database.db\" --database-type \"SQLite\"\n```\n\n----------------------------------------\n\nTITLE: Starting a PowerShell Universal App Using Get-PSUApp with Pipeline\nDESCRIPTION: This example demonstrates how to get a PowerShell Universal app by name and then start it using the pipeline. The command retrieves the app named 'MyApp' and pipes it to Start-PSUApp to launch it.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Start-PSUApp.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PSUApp -Name 'MyApp' | Start-PSUApp\n```\n\n----------------------------------------\n\nTITLE: Removing a PowerShell Universal Deployment by Name\nDESCRIPTION: This example demonstrates how to remove a deployment from PowerShell Universal by first retrieving the deployment by name and then removing it using the Remove-PSUDeployment cmdlet. The example retrieves a deployment named 'Production' and then passes it to the Remove-PSUDeployment cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Remove-PSUDeployment.txt#2025-04-16_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$deployment = Get-PSUDeployment -Name 'Production'\nPS C:\\> Remove-PSUDeployment -Deployment $deployment\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Start Output Example\nDESCRIPTION: Example output when starting containers with Docker Compose, showing network creation and image pulling process.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/docker.md#2025-04-16_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nCreating network \"PSU_default\" with the default driver\nPulling PSU (ironmansoftware/universal:latest)...\nlatest: Pulling from ironmansoftware/universal\n7608715873ec: Pull complete\n4e66273c6cfb: Pull complete\n2649c52300c2: Pull complete\na20175666bc7: Pull complete\n65ce93bc0653: Pull complete\nDigest: sha256:d7ff98e6197d21070aac325c2efbefa393a4952d2e8ba6b1327dc97824ec4d55\nStatus: Downloaded newer image for ironmansoftware/universal:latest\nCreating PSU ... done\n```\n\n----------------------------------------\n\nTITLE: Setting Node Name for PowerShell Universal\nDESCRIPTION: Sets the NodeName environment variable to ensure that restarts will not affect the PowerShell Universal database. This is not required for LiteDB installations.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/hosting/azure.md#2025-04-16_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\n$Env:NodeName = \"psuazure\"\n```\n\n----------------------------------------\n\nTITLE: Removing PowerShell Universal Role Using ID\nDESCRIPTION: Example showing how to remove a role from PowerShell Universal using its ID. This is a basic usage example that demonstrates removing a role with ID 1.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Remove-PSURole.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-PSURole -Id 1\n```\n\n----------------------------------------\n\nTITLE: New-UDCardHeader Cmdlet Syntax in PowerShell\nDESCRIPTION: The syntax for the New-UDCardHeader cmdlet, showing all available parameters and their positions. This cmdlet is used to create a new card header component with customizable properties.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDCardHeader.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDCardHeader [[-Id] <string>] [[-Title] <string>] [[-SubHeader] <string>] [[-TitleAlignment] {inherit | left | justify | right | center}] [[-SubHeaderAlignment] {inherit | left | justify | right | center}] [[-Avatar] <Object>] [[-Action] <Object>] [[-Sx] <hashtable>] [[-Style] <hashtable>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Import-PSUSecret Cmdlet Syntax\nDESCRIPTION: Complete syntax definition for the Import-PSUSecret cmdlet showing all available parameters including AppToken, ComputerName, Integrated, UseDefaultCredentials, Credential, and TrustCertificate options.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Import-PSUSecret.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nImport-PSUSecret [-AppToken <String>] [-ComputerName <String>] [-Integrated] [-UseDefaultCredentials] [-Credential <PSCredential>] [-TrustCertificate] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Div Element with Red Text in PowerShell\nDESCRIPTION: This example demonstrates how to create a simple div element with red text using the New-UDElement cmdlet. It showcases setting attributes and content for the element.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDElement.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDElement -Tag 'div' -Attributes @{\n    style = @{\n        color = \"red\"\n    }\n} -Content {\n    \"Hello!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Checked Checkbox in PowerShell\nDESCRIPTION: This example demonstrates how to create a checkbox that is initially checked using the New-UDCheckbox cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDCheckBox.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDCheckbox -Label 'Demo' -Checked $true -Id 'checkbox3'\n```\n\n----------------------------------------\n\nTITLE: Configuring aspNetCore in web.config for IIS Windows Authentication\nDESCRIPTION: XML configuration for the aspNetCore element in web.config to enable Windows Authentication token forwarding in IIS.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/security/enterprise-security/windows-sso.md#2025-04-16_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<aspNetCore processPath=\"Universal.Server.exe\" arguments=\"\" forwardWindowsAuthToken=\"true\" stdoutLogEnabled=\"true\" stdoutLogFile=\".\\logs\\log\" hostingModel=\"OutOfProcess\"/>\n```\n\n----------------------------------------\n\nTITLE: New-UDMapIcon Cmdlet Syntax in PowerShell\nDESCRIPTION: Defines the syntax for using the New-UDMapIcon cmdlet. It shows the required and optional parameters, including Url, Height, Width, AnchorX, AnchorY, PopupAnchorX, and PopupAnchorY.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDMapIcon.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDMapIcon [-Url] <String> [[-Height] <Int32>] [[-Width] <Int32>] [[-AnchorX] <Int32>] [[-AnchorY] <Int32>] [[-PopupAnchorX] <Int32>] [[-PopupAnchorY] <Int32>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Creating Menu with Event Handler in PowerShell\nDESCRIPTION: Demonstrates creating a menu with an OnChange event handler that shows a toast message when an item is selected.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDMenu.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDMenu -Text 'Click Me' -OnChange {\n    Show-UDToast -Message $EventData\n} -Children {\n    New-UDMenuItem -Text 'Test'\n    New-UDMenuItem -Text 'Test2'\n    New-UDMenuItem -Text 'Test3'\n} -Id 'menu2'\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Tooltip in PowerShell with Universal Dashboard\nDESCRIPTION: Creates a basic tooltip that displays 'Hello World' text when hovering over a button labeled 'Hover over me'. The tooltip has a unique identifier 'tooltip1'.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTooltip.txt#2025-04-16_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDTooltip -TooltipContent { \n    New-UDTypography -Text \"Hello World\" \n} -Content { \n    New-UDButton -Text \"Hover over me\"\n} -Id \"tooltip1\"\n```\n\n----------------------------------------\n\nTITLE: Alternating Row Colors Implementation\nDESCRIPTION: Demonstrates how to implement alternating row colors in a table using custom theme settings and CSS-like styling.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/table.md#2025-04-16_snippet_19\n\nLANGUAGE: powershell\nCODE:\n```\n$Theme = @{\n    overrides = @{\n        MuiTableRow = @{\n            root = @{\n                '&:nth-of-type(odd)' = @{\n                    backgroundColor = \"rgba(0,0,0,0.04)\"\n                }\n            }\n            head = @{\n                backgroundColor = \"rgb(255,255,255) !important\"\n            }\n        }\n    }\n}\n\nNew-UDDashboard -Content {\n$TableData = 1..10 | % { [PSCustomObject]@{ Item = $_}}\n  New-UDTable -ShowPagination -PageSize 10 -PageSizeOptions @(10, 10) -DisablePageSizeAll -Columns @(\n        New-UDTableColumn -Property 'Item' -Title 'Item' -Width 180 -Truncate\n    ) -Data $TableData -Dense -ShowSearch\n} -Theme $Theme\n```\n\n----------------------------------------\n\nTITLE: Installing Azure PowerShell Module\nDESCRIPTION: PowerShell command to install the Az module for Azure management.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/hosting/azure.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Module Az\n```\n\n----------------------------------------\n\nTITLE: Basic Permission Identifier for API Read Access\nDESCRIPTION: A simple permission identifier that provides read access to all API features in PowerShell Universal.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/security/enterprise-security/permissions.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\napis/read\n```\n\n----------------------------------------\n\nTITLE: New-UDTransferListItem Cmdlet Syntax in PowerShell\nDESCRIPTION: The syntax pattern for the New-UDTransferListItem cmdlet that allows creating items for transfer lists. It supports parameters for Name, Value, and Disabled status, along with common PowerShell parameters.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTransferListItem.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTransferListItem [-Name] <String> [-Value] <String> [-Disabled] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable to Disable Windows Authentication\nDESCRIPTION: PowerShell command to create an environment variable that disables Windows Authentication negotiation in PowerShell Universal when running under IIS, which can prevent authentication conflicts.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/hosting/hosting-iis.md#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n$Env:PSU_DISABLE_WIN_AUTH = true\n```\n\n----------------------------------------\n\nTITLE: Styling Icons with CSS in PowerShell Universal\nDESCRIPTION: Example of applying custom CSS styles to an icon.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/icon.md#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDIcon -Icon 'AddressBook' -Size '5x' -Style @{\n    backgroundColor = \"red\"\n}\n```\n\n----------------------------------------\n\nTITLE: Licensed PowerShell Module Manifest Configuration\nDESCRIPTION: Example of a PowerShell module manifest that includes the PSULicensed flag for licensed modules. This configuration requires a valid license file for the module to be loaded in PowerShell Universal.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/library.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n@{\n    ModuleVersion = '1.0.0'\n    GUID          = '59f32838-32bb-46e3-b29d-eb360292a8c9'\n    Author        = 'Ironman Software'\n    CompanyName   = 'Ironman Software'\n    Copyright     = '(c) Ironman Software. All rights reserved.'\n    Description   = 'Provides API endpoints from querying, creating, deleting and updating CIM instances.'\n    PrivateData   = @{\n        PSData = @{\n            Tags       = @('CIM', \"PowerShellUniversal\", \"api\")\n            LicenseUri = 'https://github.com/ironmansoftware/scripts/tree/main/LICENSE'\n            ProjectUri = 'https://github.com/ironmansoftware/scripts/tree/main/APIs/PowerShellUniversal.API.CIM'\n            IconUri    = 'https://raw.githubusercontent.com/ironmansoftware/scripts/main/images/script.png'\n            PSULicensed = $true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Cmdlet Syntax for New-UDNivoFill\nDESCRIPTION: Defines the syntax for the New-UDNivoFill cmdlet which requires two parameters: ElementId for specifying the target element and PatternId/GradientId for defining the fill pattern.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDNivoFill.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDNivoFill -ElementId <String> -PatternId <String> [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Error Boundary Component Definition\nDESCRIPTION: Component decorator defining the error boundary component with its name, icon, and description.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDErrorBoundary.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n[Component(\"Error Boundary\", \"Bug\", \"Creates a new card.\")]\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Stop Output Example\nDESCRIPTION: Example output when stopping containers with Docker Compose, showing container and network removal.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/docker.md#2025-04-16_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n[+] Running 2/2\n ⠿ Container PSU         Removed                                           0.5s\n ⠿ Network PSU_default   Removed                                           0.4s\n```\n\n----------------------------------------\n\nTITLE: Syntax for Show-UDConfirm Cmdlet in PowerShell\nDESCRIPTION: Defines the syntax for using the Show-UDConfirm cmdlet. It accepts optional parameters for Title, Question, and Choices, along with common PowerShell parameters.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Show-UDConfirm.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nShow-UDConfirm [[-Title] <Object>] [[-Question] <Object>] [[-Choices] <string[]>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Configurable Grid Alignment and Direction\nDESCRIPTION: Creates an interactive grid with configurable direction, justification, and alignment through select dropdowns. Includes dynamic content updating.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDGrid.txt#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n$Session:direction = 'row'\n$Session:justifyContent = 'center'\n$Session:alignItems = 'center'\nNew-UDSelect -Label 'direction' -Option {\n    New-UDSelectOption -Name 'row'\n    New-UDSelectOption -Name 'row-reverse'\n    New-UDSelectOption -Name 'column'\n    New-UDSelectOption -Name 'column-reverse'\n} -DefaultValue 'row' -OnChange {\n    $Session:direction = $EventData\n    Sync-UDElement -Id 'example'\n}\nNew-UDSelect -Label 'justifyContent' -Option {\n    New-UDSelectOption -Name 'flex-start'\n    New-UDSelectOption -Name 'center'\n    New-UDSelectOption -Name 'flex-end'\n    New-UDSelectOption -Name 'space-between'\n    New-UDSelectOption -Name 'space-around'\n    New-UDSelectOption -Name 'space-evenly'\n} -DefaultValue 'center' -OnChange {\n    $Session:justifyContent = $EventData\n    Sync-UDElement -Id 'example'\n}\nNew-UDSelect -Label 'alignItems' -Option {\n    New-UDSelectOption -Name 'flex-start'\n    New-UDSelectOption -Name 'center'\n    New-UDSelectOption -Name 'flex-end'\n    New-UDSelectOption -Name 'stretch'\n    New-UDSelectOption -Name 'baseline'\n} -DefaultValue 'center' -OnChange {\n    $Session:alignItems = $EventData\n    Sync-UDElement -Id 'example'\n}\nNew-UDDynamic -Id 'example' -Content {\n    New-UDGrid -Container -Children {\n        New-UDGrid -Item -Children {\n            New-UDPaper -Children { \"Cell 1\" } -Style @{\n                backgroundColor = 'rgb(26, 32, 39)'\n                color           = 'white'\n            }\n        }\n        New-UDGrid -Item -Children {\n            New-UDPaper -Children { \"Cell 2\" } -Style @{\n                backgroundColor = 'rgb(26, 32, 39)'\n                color           = 'white'\n            }\n        }\n        New-UDGrid -Item -Children {\n            New-UDPaper -Children { \"Cell 3\" } -Style @{\n                backgroundColor = 'rgb(26, 32, 39)'\n                color           = 'white'\n            }\n        }\n    } -Direction $Session:Direction -JustifyContent $Session:justifyContent -AlignItems $Session:alignItems\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Zero-Value Badge\nDESCRIPTION: Shows how to create a badge that displays zero values using the ShowZero parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDBadge.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDBadge -ShowZero -BadgeContent { 0 } -Children {\n  New-UDIcon -Icon Envelope -Size 2x\n} -Id 'badge4'\n```\n\n----------------------------------------\n\nTITLE: Creating Textbox with OnBlur Event in PowerShell\nDESCRIPTION: Creates a textbox with an OnBlur event that triggers when the textbox loses focus.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTextbox.txt#2025-04-16_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTextbox -Id 'textbox11' -OnBlur {\n    Show-UDToast -Message \"You left the textbox!\"\n} -Label 'Name' -Placeholder 'Enter your name' -Value 'John Doe'\n```\n\n----------------------------------------\n\nTITLE: Creating Textbox with Icon in PowerShell\nDESCRIPTION: Creates a textbox with an icon using the New-UDIcon function.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTextbox.txt#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTextbox -Id 'textbox5' -Label 'Name' -Placeholder 'Enter your name' -Value 'John Doe' -Icon (New-UDIcon -Icon 'User')\n```\n\n----------------------------------------\n\nTITLE: ConvertTo-JsonEx Example Usage in PowerShell\nDESCRIPTION: Placeholder for an example of how to use the ConvertTo-JsonEx cmdlet. The actual example code and description are not provided in the original content.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/ConvertTo-JsonEx.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\> {{ Add example code here }}\n```\n\n----------------------------------------\n\nTITLE: New-UDMapPopup Cmdlet Syntax\nDESCRIPTION: PowerShell cmdlet syntax for creating a map popup in Universal Dashboard. The cmdlet accepts parameters for ID, content, coordinates, and size constraints.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDMapPopup.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDMapPopup [-Id <String>] [-Content <ScriptBlock>] [-Longitude <Single>] [-Latitude <Single>] [-MaxWidth <Int32>] [-MinWidth <Int32>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Using Out-UDDataGridExport Cmdlet in PowerShell\nDESCRIPTION: This snippet shows the syntax for using the Out-UDDataGridExport cmdlet. It exports data from a data grid with options for specifying the data, mime type, and file name.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Out-UDDataGridExport.txt#2025-04-16_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nOut-UDDataGridExport [-Data] <String> [[-MimeType] <String>] [[-FileName] <String>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Credentials with External Client\nDESCRIPTION: Commands to store Git credentials in plaintext for authentication when using an external Git client. Creates a .git-credentials file for the service account.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/git.md#2025-04-16_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\ngit config --global credential.helper store\necho \"https://${username}:${password_or_access_token}@github.com\" > ~/.git-credentials\n```\n\n----------------------------------------\n\nTITLE: Retrieving All PSU Identities\nDESCRIPTION: Basic command to retrieve all identities defined within PowerShell Universal.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUIdentity.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PSUIdentity\n```\n\n----------------------------------------\n\nTITLE: Creating a Transfer List with OnChange Event Handler\nDESCRIPTION: Creates a transfer list that displays a toast notification when items are selected. The event handler shows the JSON representation of selected items or a message when no items are selected.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTransferList.txt#2025-04-16_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDTransferList -Item {\n    New-UDTransferListItem -Name 'test1' -Value 1\n    New-UDTransferListItem -Name 'test2' -Value 2\n    New-UDTransferListItem -Name 'test3' -Value 3\n    New-UDTransferListItem -Name 'test4' -Value 4\n    New-UDTransferListItem -Name 'test5' -Value 5\n} -OnChange {\n    if ($EventData) {\n       Show-UDToast ($EventData | ConvertTo-Json)\n    } else {\n       Show-UDToast \"No items selected\"\n    }\n} -Id 'transferlist2'\n```\n\n----------------------------------------\n\nTITLE: Creating Typography with Custom Styling in PowerShell\nDESCRIPTION: Creates a typography component with h1 header text and custom red coloring using the Style parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTypography.txt#2025-04-16_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDTypography -Text \"Hello World\" -Variant \"h1\" -Style @{color = \"red\"} -Id \"typography2\"\n```\n\n----------------------------------------\n\nTITLE: Creating a New Terminal in PowerShell Universal\nDESCRIPTION: This example demonstrates how to create a new terminal named 'Terminal1' using the New-PSUTerminal cmdlet in the integrated environment of PowerShell Universal.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUTerminal.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUTerminal -Name 'Terminal1'\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Persistence\nDESCRIPTION: Environment variable configuration for PostgreSQL persistence plugin and connection string.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/docker.md#2025-04-16_snippet_28\n\nLANGUAGE: dockerfile\nCODE:\n```\nENV Data__ConnectionString=Host=PGhostname; Database=PGdatabase; User Id=PGusername; Password=PGpassword!;Port=5432\nENV Plugins:0=PostgreSQL\n```\n\n----------------------------------------\n\nTITLE: Setting PowerShell Universal License in PowerShell\nDESCRIPTION: This code snippet is used in the Licenses.ps1 file to set the license key for PowerShell Universal. The Set-PSULicense cmdlet is used to configure licensing.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/repository.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PSULicense -Key \"<License></License>\"\n```\n\n----------------------------------------\n\nTITLE: Creating an AppBar without Theme Toggle in PowerShell\nDESCRIPTION: Creates a new AppBar with the theme toggle switch disabled. This example demonstrates the use of the -DisableThemeToggle switch to remove the theme toggle functionality from the AppBar.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDAppBar.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDAppBar -Children { New-UDTypography -Text 'Hello' } -Position relative -DisableThemeToggle\n```\n\n----------------------------------------\n\nTITLE: Full Screen Modal Implementation\nDESCRIPTION: Creates a full screen modal with a close button in the footer that can be dismissed using Hide-UDModal.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/feedback/modal.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDButton -Text 'Full Screen' -OnClick {\n    Show-UDModal -Content {\n        New-UDTypography -Text \"Hello\"\n    } -Footer {\n        New-UDButton -Text \"Close\" -OnClick { Hide-UDModal }\n    }  -FullScreen\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQL Persistence\nDESCRIPTION: Environment variable configuration for SQL Server persistence plugin and connection string.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/docker.md#2025-04-16_snippet_27\n\nLANGUAGE: dockerfile\nCODE:\n```\nENV Data__ConnectionString=Data Source=ServerName; Initial Catalog=DatabaseName; Integrated Security=SSPI;\nENV Plugins:0=SQL\n```\n\n----------------------------------------\n\nTITLE: Basic Snackbar Example in PowerShell\nDESCRIPTION: Shows how to create a basic snackbar with a button that triggers a 'Hello, World' message when clicked.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Show-UDSnackbar.txt#2025-04-16_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDButton -Text 'Say Hello' -OnClick {\n   Show-UDSnackbar -Message 'Hello, World'\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Azure Account\nDESCRIPTION: PowerShell command to authenticate with Azure subscription.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/hosting/azure.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-AzAccount\n```\n\n----------------------------------------\n\nTITLE: Remove Tag using Get-UATag Example\nDESCRIPTION: Example demonstrating how to remove a tag by first retrieving it using Get-UATag and then removing it with Remove-UATag cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Remove-PSUTag.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$Tag = Get-UATag -Name 'Release' \nRemove-UATag -Tag $tag\n```\n\n----------------------------------------\n\nTITLE: Creating Linear Determinate Progress in PowerShell for Universal Apps\nDESCRIPTION: This snippet illustrates how to create a linear determinate progress indicator with a specific percentage completion using the New-UDProgress cmdlet in PowerShell for Universal Apps.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/feedback/progress.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDProgress -PercentComplete 75\n```\n\n----------------------------------------\n\nTITLE: Setting Identity Name in PowerShell Universal\nDESCRIPTION: This example demonstrates how to use the Set-PSUIdentity cmdlet to change the name of an identity using its ID.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Set-PSUIdentity.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-UAIdentity -Id 123 -Name 'Adam'\n```\n\n----------------------------------------\n\nTITLE: Styling Menu with Variant Parameter\nDESCRIPTION: Shows how to modify the menu appearance using the -Variant parameter with the 'outlined' style option.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/navigation/menu.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDMenu -Content {\n   New-UDMenuItem -Text 'Item 1'\n   New-UDMenuItem -Text 'Item 1'\n   New-UDMenuItem -Text 'Item 1'\n} -Variant outlined\n```\n\n----------------------------------------\n\nTITLE: Creating Square Paper in PowerShell\nDESCRIPTION: Demonstrates how to create a Paper component with square edges instead of the default rounded edges using the -Square parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/surfaces/paper.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDPaper -Square -Content {}\n```\n\n----------------------------------------\n\nTITLE: Creating Map Feature Groups with New-UDMapFeatureGroup Cmdlet\nDESCRIPTION: PowerShell cmdlet syntax for creating map feature groups. Takes optional Id and Popup parameters and requires a Children script block. The Id defaults to a new GUID if not specified.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDMapFeatureGroup.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDMapFeatureGroup [-Id <String>] [-Popup <Hashtable>] -Children <ScriptBlock> [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Configuring Skeleton Animations in PowerShell Universal Apps\nDESCRIPTION: Shows different animation options for skeleton components including the default pulsate animation, disabled animation, and wave animation effects.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/feedback/skeleton.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDSkeleton\nNew-UDSkeleton -Animation disabled\nNew-UDSkeleton -Animation wave\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Divider in PowerShell\nDESCRIPTION: This example demonstrates how to create a basic divider using the New-UDDivider cmdlet with a specified ID.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDDivider.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDivider -Id 'divider1'\n```\n\n----------------------------------------\n\nTITLE: Handling OnChange Event in Autocomplete Component\nDESCRIPTION: Shows how to implement an OnChange event handler for the autocomplete component, which fires when a user selects an item.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/automcomplete.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDAutocomplete -OnLoadOptions { \n    @('Test', 'Test2', 'Test3', 'Test4') | Where-Object { $_ -like \"*$Body*\" } | ConvertTo-Json\n} -OnChange {\n    Show-UDToast $Body \n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Sparkline in PowerShell\nDESCRIPTION: This example demonstrates how to create a basic sparkline chart using random data. It sets the maximum value to 1000 and specifies the height and width of the chart.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDSparkline.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$Data = 1..10 | ForEach-Object { Get-Random -Max 1000 }\nNew-UDSparkline -Data $Data -Max 1000 -Height 100 -Width 500\n```\n\n----------------------------------------\n\nTITLE: Creating Dividers with Different Variants in PowerShell\nDESCRIPTION: This example shows how to create dividers with 'inset' and 'middle' variants using the New-UDDivider cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDDivider.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDivider -Id 'divider2' -Variant 'inset'\nNew-UDDivider -Id 'divider3' -Variant 'middle'\n```\n\n----------------------------------------\n\nTITLE: PowerShell Common Parameters Block\nDESCRIPTION: Documentation block describing the common parameters supported by the cmdlet, including links to additional documentation.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDDataGridColumn.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<CommonParameters>\n    This cmdlet supports the common parameters: Verbose, Debug,\n    ErrorAction, ErrorVariable, WarningAction, WarningVariable,\n    OutBuffer, PipelineVariable, and OutVariable. For more information, see\n    about_CommonParameters (https://go.microsoft.com/fwlink/?LinkID=113216).\n```\n\n----------------------------------------\n\nTITLE: Error Variant Snackbar Example in PowerShell\nDESCRIPTION: Demonstrates how to show an error-type snackbar notification with a custom message when a button is clicked.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Show-UDSnackbar.txt#2025-04-16_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDButton -Text 'Say Hello' -OnClick {\n   Show-UDSnackbar -Message 'Goodbye, World' -Variant 'error'\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Scripts\nDESCRIPTION: Basic example showing how to retrieve all scripts from PSU.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUScript.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-UAScript\n```\n\n----------------------------------------\n\nTITLE: Creating Hidden Content Below Breakpoint in PowerShell\nDESCRIPTION: This example shows how to use New-UDHidden to hide content below the 'md' breakpoint.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDHidden.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDHidden -Down md -Content {\n    New-UDTypography 'md'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Divider with Text in PowerShell\nDESCRIPTION: This example demonstrates how to create a divider with text content using the New-UDDivider cmdlet and the New-UDTypography cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDDivider.txt#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDivider -Id 'divider6' -Children {\n    New-UDTypography -Text 'Examples'\n}\n```\n\n----------------------------------------\n\nTITLE: ClaimsPrincipal Object Structure in C#\nDESCRIPTION: This code snippet defines the structure of the ClaimsPrincipal object used in policy scripts. It includes classes for ClaimsPrincipal, Identity, and Claim, showing the properties available for authorization decisions.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/security/authorization.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ClaimsPrincipal\n{\n    public List<Claim> Claims { get; set; } = new List<Claim>();\n    public Identity Identity { get; set; } = new Identity();\n}\n\npublic class Identity \n{\n    public string Name { get ;set; }\n}\n\npublic class Claim \n{\n    public string Type { get; set; }  \n    public string Value { get; set; }\n    public string ValueType { get; set; } \n    public string Issuer { get; set; }\n    public Dictionary<string, string> Properties { get; set; } = new Dictionary<string, string>();\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Response Body with Status Code\nDESCRIPTION: Demonstrates returning a custom message body with a 404 status code from an API endpoint.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/endpoints.md#2025-04-16_snippet_24\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUEndpoint -Url '/file' -Method Get -Endpoint {\n    New-PSUApiResponse -Body \"Not what you're looking for.\" -StatusCode 404\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Specific Element Property with Get-UDElement\nDESCRIPTION: Example showing how to get a specific property (Value) of a textbox element using Get-UDElement with the Property parameter and display it in a toast notification.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-UDElement.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTextbox -Id 'getElement2' -Placeholder 'Enter your name'\nNew-UDButton -Text 'Get Value' -OnClick {\n    Show-UDToast (Get-UDElement -Id 'getElement2' -Property 'Value')\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Divider with Left-Aligned Text in PowerShell\nDESCRIPTION: This example shows how to create a divider with left-aligned text using the New-UDDivider cmdlet, specifying the -TextAlign parameter as 'left'.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDDivider.txt#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDivider -Id 'divider6' -Children {\n    New-UDTypography -Text 'Examples'\n} -TextAlign left\n```\n\n----------------------------------------\n\nTITLE: Updating PowerShell Universal Computer Group by ID\nDESCRIPTION: Example demonstrating how to update a computer group in PowerShell Universal by specifying its ID and changing its name to 'Test Group'.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Set-PSUComputerGroup.txt#2025-04-16_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-PSUComputerGroup -Id 1 -Name 'Test Group'\n```\n\n----------------------------------------\n\nTITLE: Basic Avatar Group Example\nDESCRIPTION: Simple example showing basic usage of the New-UDAvatarGroup cmdlet. This is a placeholder example from the documentation.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDAvatarGroup.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nAn example\n```\n\n----------------------------------------\n\nTITLE: Invoking an API Endpoint with Query String Parameters\nDESCRIPTION: Demonstrates how to call an endpoint with query string parameters to pass data to the API.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/endpoints.md#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-RestMethod http://localhost:5000/user?Id=123\n```\n\n----------------------------------------\n\nTITLE: Example of Vulnerable API Endpoint (CWE-914)\nDESCRIPTION: Demonstrates an API endpoint vulnerable to Improper Control of Dynamically-Identified Variables (CWE-914), where an attacker could provide unexpected query parameters to bypass security checks.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/endpoints.md#2025-04-16_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUEndpoint -Url \"/api/v1.0/CWE914Test\" -Description \"Vulnerable to CWE-914\" -Endpoint {\n\tif($ChallengeInputData -eq \"AcceptableInput\") {\n\t\t$IsChallengePassed = $true\n\t}\n\tif($IsChallengePassed) {\n\t\t\"Challenge passed. Here is Sensitive Information\"\n\t} else {\n\t\t\"Challenge not passed\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Code Editor with Options in PowerShell\nDESCRIPTION: Demonstrates how to customize the Monaco editor with additional options using the -Options parameter. This example sets a custom font size for the editor using a hashtable of options.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/code-editor.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDCodeEditor -Language powershell -Height 100 -Options @{ fontSize = 10 }\n```\n\n----------------------------------------\n\nTITLE: Creating Typography with Center Alignment in PowerShell\nDESCRIPTION: Creates a typography component with centered text alignment using the Align parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTypography.txt#2025-04-16_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDTypography -Text \"Hello World\" -Id \"typography3\" -Align \"center\"\n```\n\n----------------------------------------\n\nTITLE: Removing PowerShell Universal Endpoint Example\nDESCRIPTION: Example showing how to remove a PowerShell Universal endpoint using pipeline input. Gets an endpoint with ID 1 and pipes it to Remove-PSUEndpoint for deletion.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Remove-PSUEndpoint.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PSUEndpoint -Id 1 | Remove-PSUEndpoint\n```\n\n----------------------------------------\n\nTITLE: Removing a Scheduled Endpoint in PowerShell\nDESCRIPTION: This example demonstrates how to create a scheduled endpoint and then remove it using Remove-UDEndpoint. It first creates a schedule, sets up an endpoint to cache processes, and then removes the endpoint using its ID.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Remove-UDEndpoint.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$Schedule = New-UDEndpointSchedule 10 -Second\nNew-UDEndpoint -Schedule $Schedule -Endpoint {\n    $Cache:Processes = Get-Process\n} -Id 'MySchedule' \n\nRemove-UDEndpoint -Id 'MySchedule'\n```\n\n----------------------------------------\n\nTITLE: Customizing Views in PowerShell Date Picker\nDESCRIPTION: Demonstrates how to customize the available views in the date picker using the Views parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDDatePicker.txt#2025-04-16_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDatePicker -Id 'datepicker11' -Value '1-2-2020' -Views @('day', 'year')\n```\n\n----------------------------------------\n\nTITLE: Creating Patterned Bar Chart\nDESCRIPTION: Shows how to create a bar chart with custom patterns and fills for different data categories across countries.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDNivoChart.txt#2025-04-16_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\n$Data = @(\n    @{\n        country = 'USA'\n        burgers = (Get-Random -Minimum 10 -Maximum 100)\n        fries = (Get-Random -Minimum 10 -Maximum 100)\n        sandwich = (Get-Random -Minimum 10 -Maximum 100)\n    }\n    @{\n        country = 'Germany'\n        burgers = (Get-Random -Minimum 10 -Maximum 100)\n        fries = (Get-Random -Minimum 10 -Maximum 100)\n        sandwich = (Get-Random -Minimum 10 -Maximum 100)\n    }\n    @{\n        country = 'Japan'\n        burgers = (Get-Random -Minimum 10 -Maximum 100)\n        fries = (Get-Random -Minimum 10 -Maximum 100)\n        sandwich = (Get-Random -Minimum 10 -Maximum 100)\n    }\n)\n$Pattern = New-UDNivoPattern -Dots -Id 'dots' -Background \"inherit\" -Color \"#38bcb2\" -Size 4 -Padding 1 -Stagger\n$Fill = New-UDNivoFill -ElementId \"fries\" -PatternId 'dots'\nNew-UDNivoChart -Definitions $Pattern -Fill $Fill -Bar -Data $Data -Height 400 -Width 900 -Keys @('burgers', 'fries', 'sandwich') -IndexBy 'country'\n```\n\n----------------------------------------\n\nTITLE: Stopping a PowerShell Universal App using Pipeline\nDESCRIPTION: Example of stopping a PowerShell Universal app by getting the app by name and piping it to the Stop-PSUApp cmdlet.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Stop-PSUApp.txt#2025-04-16_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-PSUApp -Name 'MyApp' | Stop-PSUApp\n```\n\n----------------------------------------\n\nTITLE: Setting Default Value for Radio Group\nDESCRIPTION: Demonstrates how to set a default selected value for a radio button group using the -Value parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/radio.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDRadioGroup -Label \"Day\" -Content {\n    New-UDRadio -Label Monday -Value 'monday'\n    New-UDRadio -Label Tuesday -Value 'tuesday'\n    New-UDRadio -Label Wednesday -Value 'wednesday'\n    New-UDRadio -Label Thursday -Value 'thursday'\n    New-UDRadio -Label Friday  -Value 'friday'\n    New-UDRadio -Label Saturday -Value 'saturday'\n    New-UDRadio -Label Sunday -Value 'sunday'\n} -Value 'sunday'\n```\n\n----------------------------------------\n\nTITLE: Configuring Role-Based Access Using Azure Active Directory Groups in PowerShell Universal\nDESCRIPTION: This snippet shows how to create a role in PowerShell Universal based on Azure Active Directory group membership. It uses claims mapping to assign roles based on the Azure AD group ID.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/security/README.md#2025-04-16_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSURole -Name 'Administrators' -ClaimType 'groups' -ClaimValue '4acabc67-56cc-4590-9de6-164f3c4faf10'\n```\n\n----------------------------------------\n\nTITLE: PowerShell Parameter Definition\nDESCRIPTION: Parameter definition block showing a boolean parameter with its properties. The parameter is optional, accepts named position, has a default value of False, and does not accept pipeline input or wildcards.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDDataGridColumn.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nRequired?                    false\nPosition?                    named\nDefault value                False\nAccept pipeline input?       false\nAliases                      \nAccept wildcard characters?  false\n```\n\n----------------------------------------\n\nTITLE: Handling Button Click with Context in PowerShell\nDESCRIPTION: This PowerShell function handles the button click event from the action column. It uses the $Context parameter to access the current row's data and display a success message with the service status.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/portal/portal-widgets/tables.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nfunction ShowStatus {\n    param($Context)\n    $Message.Success($Context.Status.ToString())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Date Picker in PowerShell\nDESCRIPTION: Basic syntax for creating a date picker component in Universal Apps using PowerShell.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/date-picker.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDatePicker\n```\n\n----------------------------------------\n\nTITLE: Displaying Messages using Message Service\nDESCRIPTION: Shows how to use the message service to display success messages to users. Based on the IMessageService interface and integrates with Ant Design components.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/portal/portal-widgets/services.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nfunction OnClick {\n   $Message.Success(\"Hello!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Self-Signed Certificate for PowerShell Universal\nDESCRIPTION: This PowerShell command creates a self-signed certificate for localhost and stores it in the local machine certificate store. It's used as part of the process to set up HTTPS for PowerShell Universal.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/hosting/README.md#2025-04-16_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nNew-SelfSignedCertificate -DnsName localhost -CertStoreLocation cert:\\LocalMachine\\My\n```\n\n----------------------------------------\n\nTITLE: Creating Disabled Textbox in PowerShell\nDESCRIPTION: Creates a disabled textbox that cannot be edited by the user.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTextbox.txt#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTextbox -Id 'textbox4' -Disabled -Label 'Disabled' -Placeholder 'Enter your name' -Value 'John Doe'\n```\n\n----------------------------------------\n\nTITLE: Removing Elements from a Universal Dashboard Page in PowerShell\nDESCRIPTION: This example demonstrates how to create an element with an ID and then remove it when a button is clicked. The element contains text that will be removed from the page when the user clicks the button.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Remove-UDElement.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDElement -Id 'removeElement1' -Tag 'div' -Content {\n    New-UDTypography -Text 'Hello World'\n}\nNew-UDButton -Text 'Click Me' -OnClick {\n    Remove-UDElement -Id 'removeElement1'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS with PEM and Key Certificates for PowerShell Universal\nDESCRIPTION: This JSON configuration sets up HTTPS for PowerShell Universal using PEM and key certificate files. It specifies the paths to the certificate and key files, and configures both HTTP and HTTPS endpoints.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/hosting/README.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Kestrel\": {\n    \"Endpoints\": {\n      \"HTTP\": {\n        \"Url\": \"http://*:5000\"\n      },\n      \"HttpsFromPem\": {\n        \"Url\": \"https://*:5001\",\n        \"Certificate\": {\n          \"Path\": \"C:\\\\Users\\\\adamr\\\\Desktop\\\\cert.pem\",\n          \"KeyPath\": \"C:\\\\Users\\\\adamr\\\\Desktop\\\\key.pem\"\n        }\n      }\n    },\n    \"RedirectToHttps\": \"true\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Alert Styling in PowerShell Universal Dashboard\nDESCRIPTION: Example of overriding Material UI's default success alert styling using global class names. Sets a red background color for all success alerts.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/themes/cascading-style-sheets.md#2025-04-16_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.MuiAlert-standardSuccess { background-color: red !important;  }\n```\n\n----------------------------------------\n\nTITLE: Creating a Select Option in PowerShell Universal Dashboard\nDESCRIPTION: This cmdlet creates a new select option for use with New-UDSelect. It allows specifying the name, value, icon, and disabled state of the option.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDSelectOption.txt#2025-04-16_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDSelectOption [-Name] <String> [[-Value] <String>] [[-Icon] <Object>] [-Disabled] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: PowerShell Module Manifest for Gallery Contribution\nDESCRIPTION: Example of a basic PowerShell module manifest for contributing to the PowerShell Universal Gallery. Includes required metadata like version, GUID, author information, and tags for gallery discovery.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/platform/library.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n@{\n    ModuleVersion = '1.0.0'\n    GUID          = '59f32838-32bb-46e3-b29d-eb360292a8c9'\n    Author        = 'Ironman Software'\n    CompanyName   = 'Ironman Software'\n    Copyright     = '(c) Ironman Software. All rights reserved.'\n    Description   = 'Provides API endpoints from querying, creating, deleting and updating CIM instances.'\n    PrivateData   = @{\n        PSData = @{\n            Tags       = @('CIM', \"PowerShellUniversal\", \"api\")\n            LicenseUri = 'https://github.com/ironmansoftware/scripts/tree/main/LICENSE'\n            ProjectUri = 'https://github.com/ironmansoftware/scripts/tree/main/APIs/PowerShellUniversal.API.CIM'\n            IconUri    = 'https://raw.githubusercontent.com/ironmansoftware/scripts/main/images/script.png'\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom XML Content Type Response\nDESCRIPTION: Shows how to return XML data with a specific content type from an API endpoint.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/endpoints.md#2025-04-16_snippet_25\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUEndpoint -Url '/file' -Method Get -Endpoint {\n    New-PSUApiResponse -Body \"<xml><node>1</node><node2>2</node2></xml>\" -ContentType 'text/xml'\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PowerShell Universal on Raspberry PI OS\nDESCRIPTION: This bash script downloads and installs PowerShell Universal on Raspberry PI OS, then starts the server.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/get-started.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwget https://imsreleases.blob.core.windows.net/universal/production/2.4.0/Universal.linux-arm.2.4.0.zip\nunzip Universal.linux-arm.2.3.2.zip -d ./PSU\nchmod +x ./PSU/Universal.Server\n./PSU/Universal.Server\n```\n\n----------------------------------------\n\nTITLE: Creating Circular Progress in PowerShell for Universal Apps\nDESCRIPTION: This snippet demonstrates how to create a circular progress indicator with a blue color using the New-UDProgress cmdlet in PowerShell for Universal Apps.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/feedback/progress.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDProgress -Circular -Color Blue\n```\n\n----------------------------------------\n\nTITLE: Disabled Radio Group Implementation\nDESCRIPTION: Demonstrates how to create a disabled radio group with three options.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDRadioGroup.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDRadioGroup -Label 'group' -Id 'radio3' -Children {\n    New-UDRadio -Value 'Adam' -Label 'Adam'  -Id 'adam'\n    New-UDRadio -Value 'Sarah' -Label 'Sarah' -Id 'sarah'\n    New-UDRadio -Value 'Austin' -Label 'Austin' -Id 'austin'\n} -Disabled\n```\n\n----------------------------------------\n\nTITLE: Creating Typography with No Wrap in PowerShell\nDESCRIPTION: Creates a typography component that prevents text wrapping using the NoWrap switch parameter, even with long text.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTypography.txt#2025-04-16_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UDTypography -Text \"Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World!\" -Id \"typography5\" -NoWrap\n```\n\n----------------------------------------\n\nTITLE: Configuring Security Headers for PowerShell Universal\nDESCRIPTION: This JSON configuration sets various security headers for PowerShell Universal responses. It includes Content-Security-Policy, X-Content-Type-Options, and X-XSS-Protection headers.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/config/hosting/README.md#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Kestrel\" : {\n       \"Headers\": {\n          \"X-Content-Type-Options\": \"nosniff\",\n          \"Content-Security-Policy\": \"default-src 'self';\",\n          \"X-XSS-Protection\": \"block\",\n          \n       }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Windows Authentication Example\nDESCRIPTION: Shows how to authenticate to a secure endpoint using Windows Authentication by utilizing the -UseDefaultCredentials parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/security.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-RestMethod http://localhost:5000/auth -UseDefaultCredentials\n```\n\n----------------------------------------\n\nTITLE: Customizing Header Colors in Universal App Pages with PowerShell\nDESCRIPTION: Demonstrates how to override theme colors by setting custom header colors using -HeaderColor and -HeaderBackgroundColor parameters.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/pages.md#2025-04-16_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDPage -Name 'Home' -Content {\n} -HeaderColor 'black' -HeaderBackgroundColor 'white'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pinned Deployment Information in PowerShell Universal\nDESCRIPTION: Shows how to retrieve information about the currently pinned deployment from the PowerShell Universal server. Returns null if no deployment is pinned.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Get-PSUDeployment.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PSUDeployment -Pinned\n```\n\n----------------------------------------\n\nTITLE: Setting Environment for Job Execution\nDESCRIPTION: Demonstrates how to set the environment for job execution using REST API.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/automation/jobs.md#2025-04-16_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\n$JobContext = @{\n    Environment = \"PowerShell 7\"\n} | ConvertTo-Json\n\nInvoke-RestMethod http://localhost:5000/api/v1/script/7 -Method POST -Body $JobContext -Headers @{ Authorization = \"Bearer appToken\" } -ContentType 'application/json'\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Position in Universal App Pages with PowerShell\nDESCRIPTION: Shows how to adjust the header behavior using the -HeaderPosition parameter to create a fixed header that stays visible when scrolling.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/pages.md#2025-04-16_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDPage -HeaderPosition fixed -Content {\n    New-UDElement -tag div -Attributes @{\n        style = @{\n            height = '150vh'\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Clear-PSUDeployment Full Syntax Example\nDESCRIPTION: Complete syntax pattern for the Clear-PSUDeployment cmdlet showing all available parameters including authentication options, server configuration, and security settings.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Clear-PSUDeployment.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nClear-PSUDeployment [-AppToken <String>] [-ComputerName <String>] [-Credential <PSCredential>] [-Integrated] [-TrustCertificate] [-UseDefaultCredentials] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Upload EventData C# Structure\nDESCRIPTION: The C# class structure for the $EventData object available in the OnUpload script block. It provides metadata about the uploaded file including name, timestamp, and content type.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/inputs/upload.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Upload\n{\n    public string Name { get; set; }\n    public string FileName { get; set; }\n    public DateTime TimeStamp { get; set; }\n    public string ContentType { get; set; }\n    public string Type => ContentType;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Primary Badge with Button\nDESCRIPTION: Creates a badge with the number 4 displayed on a primary button.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDBadge.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDBadge -Color primary -BadgeContent { 4 } -Children {\n  New-UDButton -Text \"Primary\"\n} -Id 'badge1'\n```\n\n----------------------------------------\n\nTITLE: PowerShell Syntax Highlighting with Line Numbers\nDESCRIPTION: Demonstrates syntax highlighting with enabled line number display.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDSyntaxHighlighter.txt#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDSyntaxHighlighter -Code 'Write-Host \"Hello World\"' -Language powershell -ShowLineNumbers\n```\n\n----------------------------------------\n\nTITLE: Hierarchical Bubble Chart\nDESCRIPTION: Demonstrates creating a bubble chart with hierarchical data structure.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDNivoChart.txt#2025-04-16_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\n$TreeData = @{\n    Name     = \"root\"\n    children = @(\n        @{\n            Name  = \"first\"\n            children = @(\n                @{\n                    Name = \"first-first\"\n                    Count = 7\n                }\n                @{\n                    Name = \"first-second\"\n                    Count = 8\n                }\n            )\n        },\n        @{\n            Name  = \"second\"\n            Count = 21\n        }\n    )\n}\nNew-UDNivoChart -Bubble -Data $TreeData -Value \"count\" -Identity \"name\" -Height 500 -Width 800\n```\n\n----------------------------------------\n\nTITLE: PowerShell Universal Endpoint Documentation Cmdlet Syntax\nDESCRIPTION: Shows the complete syntax for the Remove-PSUEndpointDocumentation cmdlet including all available parameters and their positions.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Remove-PSUEndpointDocumentation.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-PSUEndpointDocumentation [-Id] <Int64> [-AppToken <String>] [-ComputerName <String>] [-Integrated] [-UseDefaultCredentials] [-Credential <PSCredential>] [-TrustCertificate] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Hide-UDToast Cmdlet Syntax\nDESCRIPTION: PowerShell cmdlet syntax showing two parameter sets - one for hiding a specific toast by ID and another for hiding all toasts. Includes parameter specifications and common parameter support.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/Hide-UDToast.txt#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nHide-UDToast [-Id] <String> [<CommonParameters>]\n\nHide-UDToast [-All] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: API Environment Settings Configuration\nDESCRIPTION: Demonstrates setting the API environment in the settings configuration.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/api/endpoints.md#2025-04-16_snippet_28\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PSUSetting -ApiEnvironment 'Env'\n```\n\n----------------------------------------\n\nTITLE: Removing Elements\nDESCRIPTION: Demonstrates how to remove an element from the page using Remove-UDElement.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/element.md#2025-04-16_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDElement -Tag 'div' -Endpoint {\n    Get-Date\n} -Id 'myDiv'\n\nNew-UDButton -Text 'Click Me' -OnClick {\n    Remove-UDElement -Id 'myDiv'\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Bound Variables in PowerShell\nDESCRIPTION: Shows how to access data-bound variables in PowerShell code.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/portal/portal-widgets/syntax.md#2025-04-16_snippet_13\n\nLANGUAGE: powershell\nCODE:\n```\n$Message.Info($Variables[\"TextValue\"])\n```\n\n----------------------------------------\n\nTITLE: Implementing Slide Transition in PowerShell\nDESCRIPTION: Creates a slide transition effect on a button with a checkbox toggle control. The transition slides the element with a 1000ms duration.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDTransition.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDTransition -Slide -In -Children {\n    New-UDButton -Text 'Click Me' -Id 'button2'\n} -Id 'transition2'  -Timeout 1000\nNew-UDCheckbox -Label 'Toggle' -OnChange {\n    Set-UDElement -Id 'transition2' -Properties @{\n        In = $EventData\n    }\n} -Checked $true\n```\n\n----------------------------------------\n\nTITLE: Searching Available Icons in PowerShell Universal\nDESCRIPTION: Using Find-UDIcon cmdlet to search through available FontAwesome v6 icons.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/icon.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nFind-UDIcon User\n```\n\n----------------------------------------\n\nTITLE: Creating Rectangular Skeleton\nDESCRIPTION: Creates a rectangular skeleton component with specified dimensions. Uses width of 210 pixels and height of 118 pixels.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDSkeleton.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDSkeleton -Id 'skeleton2' -Variant rect -Width 210 -Height 118\n```\n\n----------------------------------------\n\nTITLE: Setting Service Principal Name for Windows Authentication\nDESCRIPTION: Command to set the Service Principal Name (SPN) for the computer account, which is required for Windows Authentication outside of IIS.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/security/enterprise-security/windows-sso.md#2025-04-16_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nsetspn -S HTTP/myservername.mydomain.com myuser\n```\n\n----------------------------------------\n\nTITLE: Creating Dashboard with Custom Stylesheet in PowerShell Universal\nDESCRIPTION: Creates a new dashboard with a custom stylesheet reference. The -Stylesheets parameter specifies the path to the CSS file that will be used for styling the dashboard.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/themes/cascading-style-sheets.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDashboard -Title \"Server Monitor\" -Content {\n\n\n} -Stylesheets @(\"/assets/theme.css\")\n```\n\n----------------------------------------\n\nTITLE: Building Universal Docker Container\nDESCRIPTION: Command to build the Universal Docker container with persistence support.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/docker.md#2025-04-16_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\ndocker build . --tag=universal-persistent\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Compose v1 Version\nDESCRIPTION: Command to verify if Docker Compose v1 is installed. This version uses the hyphenated 'docker-compose' command.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/docker.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose version\n```\n\n----------------------------------------\n\nTITLE: New-PSUTag Command Syntax\nDESCRIPTION: Full command syntax for the New-PSUTag cmdlet showing all available parameters and options for creating tags in PSU.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-PSUTag.txt#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PSUTag [-AppToken <String>] [-Color <String>] [-ComputerName <String>] [-Description <String>] -Name <String> [-UseDefaultCredentials] [-Integrated] [-Credential <PSCredential>] [-DisplayInPortal] [-FontColor <String>] [-Role <String[]>] [-TrustCertificate] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Creating a Light Divider in PowerShell\nDESCRIPTION: This example shows how to create a light divider using the New-UDDivider cmdlet with the -Light switch parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/cmdlets/New-UDDivider.txt#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDivider -Id 'divider5' -Light\n```\n\n----------------------------------------\n\nTITLE: Mounting Volume for PowerShell Universal on Mac/Linux\nDESCRIPTION: Commands to run PowerShell Universal container with a persistent volume mounted from Mac/Linux host to container.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/docker.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ironmansoftware/universal\ndocker run --name 'PSU' -it -p 5000:5000 -v /docker/volumes/PSU:/root ironmansoftware/universal \n```\n\n----------------------------------------\n\nTITLE: Stopping Containers with Docker Compose\nDESCRIPTION: Command to stop and remove containers defined in a docker-compose.yml file.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/docker.md#2025-04-16_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose down\n```\n\n----------------------------------------\n\nTITLE: Table Refresh Implementation with Button\nDESCRIPTION: Shows two methods for implementing table refresh functionality: using a dynamic region with Sync-UDElement and direct table syncing with LoadData parameter.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/data-display/table.md#2025-04-16_snippet_18\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UDDynamic -Id 'table' -Content {\n    $TableData = @(\n        @{ Random = Get-Random }\n        @{ Random = Get-Random }\n        @{ Random = Get-Random }\n        @{ Random = Get-Random }\n        @{ Random = Get-Random }\n    )\n    \n    $Page:Table = New-UDTable -Data $TableData -Paging -ShowSelection\n    $Page:Table\n} \n\nNew-UDButton -Text 'Refresh Table' -OnClick {\n    Sync-UDElement -Id 'table'\n}\n\nNew-UDButton -Text 'Get Data' -OnClick {\n    Show-UDToast (Get-UDElement -Id $Page:Table.Id | ConvertTo-Json)\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping a Docker Container\nDESCRIPTION: Command to stop a running Docker container named 'PSU'.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/docker.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker stop PSU\n```\n\n----------------------------------------\n\nTITLE: Installing PowerShellUniversal.Apps.Tools Module\nDESCRIPTION: Installs the PowerShellUniversal.Apps.Tools module from PowerShell Gallery, which is required for component development.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/custom-components/building-custom-components.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nInstall-Module PowerShellUniversal.Apps.Tools\n```\n\n----------------------------------------\n\nTITLE: Markdown Header for Surfaces Documentation\nDESCRIPTION: Simple markdown header that defines the documentation section for Surfaces\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/apps/components/surfaces/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Surfaces\n```\n\n----------------------------------------\n\nTITLE: Removing a Docker Container\nDESCRIPTION: Command to remove a stopped Docker container named 'PSU'.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/docker.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndocker rm PSU\n```\n\n----------------------------------------\n\nTITLE: Forcing Container Removal\nDESCRIPTION: Command to forcibly remove a running Docker container named 'PSU'.\nSOURCE: https://github.com/ironmansoftware/universal-docs/blob/v5/getting-started/docker.md#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ndocker rm --force PSU\n```"
  }
]