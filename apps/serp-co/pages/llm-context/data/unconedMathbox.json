[
  {
    "owner": "unconed",
    "repo": "mathbox",
    "content": "TITLE: Creating a Cartesian Coordinate System\nDESCRIPTION: Sets up a 2D cartesian coordinate system with specified range and scale, making it twice as wide as it is high.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/intro.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar view = mathbox.cartesian({\n  range: [[-2, 2], [-1, 1]],\n  scale: [2, 1],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Animated MathBox Graph with JSX\nDESCRIPTION: This JSX snippet creates a complete MathBox scene with an animated graph. It includes axis, grid, intervals, lines, points, vectors, and labels. The animation is implemented using the 'play' element, which modifies the graph's range over time.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/intro.md#2025-04-22_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\n<root focus={3}>\n  <camera proxy={true} position={[0, 0, 3]} />\n  <cartesian range={[[-2, 2], [-1, 1]]} scale={[2, 1]}>\n    <axis axis={1} width={3} color=\"black\" />\n    <axis axis={2} width={3} color=\"black\" />\n    <grid width={2} divideX={20} divideY={10} />\n    <interval expr={(emit, x, i, t) => {\n          emit(x, Math.sin(x + t));\n        }} width={64} channels={2} />\n    <line width={5} color=\"#3090FF\" />\n    <point size={8} color=\"#3090FF\" />\n    <interval expr={(emit, x, i, t) => {\n          emit(x, 0);\n          emit(x, -Math.sin(x + t));\n        }} width={64} channels={2} items={2} />\n    <vector end={true} width={5} color=\"#50A000\" />\n    <scale divide={10} />\n    <ticks width={5} size={15} color=\"black\" />\n    <format digits={2} weight=\"bold\" />\n    <label color=\"red\" zIndex={1} />\n  </cartesian>\n  <play target=\"cartesian\" to={2} loop={true} pace={5} script={[{props: {range: [[-2, 2], [-1, 1]]}}, {props: {range: [[-4, 4], [-2, 2]]}}, {props: {range: [[-2, 2], [-1, 1]]}}]} />\n</root>\n```\n\n----------------------------------------\n\nTITLE: Creating a 3D Cartesian Coordinate System with Axes\nDESCRIPTION: JavaScript code that sets up a 3D Cartesian coordinate system with specific range and scale, then adds x and y axes to the visualization.\nSOURCE: https://github.com/unconed/mathbox/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst view = root\n  .cartesian({\n    range: [\n      [-2, 2],\n      [-1, 1],\n      [-1, 1],\n    ],\n    scale: [2, 1, 1],\n  })\n  .axis({\n    axis: 1,\n  })\n  .axis({\n    axis: 2,\n  });\n```\n\n----------------------------------------\n\nTITLE: Implementing Animation with MathBox Play Element in JavaScript\nDESCRIPTION: This snippet demonstrates how to create an animation using the MathBox play element. It defines keyframes to animate the graph's range, sets the animation pace, duration, and looping behavior.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/intro.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nvar play = mathbox.play({\n  target: 'cartesian',\n  pace: 5,\n  to: 2,\n  loop: true,\n  script: [\n    {props: {range: [[-2, 2], [-1, 1]]}},\n    {props: {range: [[-4, 4], [-2, 2]]}},\n    {props: {range: [[-2, 2], [-1, 1]]}},\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Cartesian View in MathBox\nDESCRIPTION: This code snippet defines the properties for the 'cartesian' primitive in the 'view' module of MathBox. It allows for applying a cartesian view with various transformation and range options.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/primitives.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n####  <a name=\"view/cartesian\"></a>`view/cartesian`\n\n*Apply cartesian view*\n\n * *classes* = `[]` (string array) - Custom classes, e.g. `[\"big\"]`\n * *eulerOrder* = `xyz` (swizzle) - Euler order\n * *id* = `null` (nullable string) - Unique ID, e.g. `\"sampler\"`\n * *pass* = `\"view\"` (vertexPass) - Vertex pass (data, view, world, eye)\n * *position* = `[0, 0, 0]` (vec3) - 3D Position\n * *quaternion* = `[0, 0, 0, 1]` (quat) - 3D Quaternion\n * *range* = `[[-1, 1], [-1, 1], [-1, 1], [-1, 1]]` (array vec2) - 4D range in view\n * *rotation* = `[0, 0, 0]` (vec3) - 3D Euler rotation\n * *scale* = `[1, 1, 1]` (vec3) - 3D Scale\n * *visible* = `true` (bool) - Visibility for rendering\n```\n\n----------------------------------------\n\nTITLE: Initializing MathBox with Default Options\nDESCRIPTION: JavaScript code to create a basic MathBox instance with OrbitControls for camera manipulation.\nSOURCE: https://github.com/unconed/mathbox/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n  controls: {\n    // Orbit controls, i.e. Euler angles, with gimbal lock\n    klass: THREE.OrbitControls\n  },\n};\nconst root = MathBox.mathBox(options);\n```\n\n----------------------------------------\n\nTITLE: MathBox2 JavaScript Initialization\nDESCRIPTION: Sets up WebGL context and initializes MathBox with configuration for rendering and viewport management.\nSOURCE: https://github.com/unconed/mathbox/blob/master/examples/notebooks/mathbox.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nrequire.config({\n    paths: {\n        mathBox: '//cdn.rawgit.com/unconed/mathbox/eaeb8e15/build/mathbox-bundle'\n    }\n});\n\nwindow.with_mathbox = function(element, func) {\n    require(['mathBox'], function(){\n        var mathbox = mathBox({\n          plugins: ['core', 'controls', 'cursor', 'mathbox'],\n          controls: { klass: THREE.OrbitControls },\n          mathbox: {inspect: false},\n          element: element[0],\n          loop: {start: false},\n            \n        });\n        var three = mathbox.three;\n        three.renderer.setClearColor(new THREE.Color(0xFFFFFF), 1.0);\n        three.camera.position.set(-1, 1, 2);\n        three.controls.noKeys = true;\n        \n        three.element.style.height = \"400px\";\n        three.element.style.width = \"100%\";\n        \n        function isInViewport(element) {\n          var rect = element.getBoundingClientRect();\n          var html = document.documentElement;\n          var w = window.innerWidth || html.clientWidth;\n          var h = window.innerHeight || html.clientHeight;\n          return rect.top < h && rect.left < w && rect.bottom > 0 && rect.right > 0;\n        }\n        \n        var intervalId = setInterval(function(){\n            if (three.element.offsetParent === null) {\n                clearInterval(intervalId);\n                three.destroy();\n                return;\n            }\n            var visible = isInViewport(three.canvas);\n            if (three.Loop.running != visible) {\n                visible? three.Loop.start() : three.Loop.stop();\n            }\n        }, 100);\n\n        func(mathbox);\n        \n        window.dispatchEvent(new Event('resize'));\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Camera in MathBox\nDESCRIPTION: Creates a camera that is positioned 3 units away from the origin (at [0, 0, 3]) with proxy enabled to allow interactive camera controls to override the position.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/intro.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar camera = mathbox.camera({\n  proxy: true,\n  position: [0, 0, 3],\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using MathBox.Context in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a MathBox.Context instance and use its various methods for initialization, resizing, and frame updates. It covers basic usage as well as more advanced options for precise control over dimensions and update cycles.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/context.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar context = new MathBox.Context(renderer, scene, camera);\n\n// Insert / remove from scene and surrounding DOM.\ncontext.init();\ncontext.destroy();\n\n// Basic dimensions\ncontext.resize(size = {viewWidth: WIDTH, viewHeight: HEIGHT});\n\n// OR Give exact dimensions\ncontext.resize(size = {viewWidth: WIDTH,   viewHeight: HEIGHT,\n                       renderWidth: WIDTH, renderHeight: HEIGHT,\n                       aspect: WIDTH / HEIGHT, pixelRatio: 1});\n\n// Update one frame\ncontext.frame();\n\n// OR Update with custom clock\ncontext.frame(time = {now, time, delta, clock, step});\n\n\n// OR Step through update cycle\ncontext.pre(time = {now, time, delta, clock, step});\ncontext.update()\ncontext.render()\ncontext.post()\n\n// now: unix timestamp in s\n// time: real time in s\n// delta: real time step in s\n// clock: adjustable clock in s\n// step: adjustable step in s\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Interval for a Sine Wave\nDESCRIPTION: Generates a 1D array of data points representing a sine wave that moves over time. Uses an expression function to compute X and Y coordinates for 64 points.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/intro.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar data =\n  view.interval({\n    expr: function (emit, x, i, t) {\n      emit(x, Math.sin(x + t));\n    },\n    width: 64,\n    channels: 2,\n  });\n```\n\n----------------------------------------\n\nTITLE: Setting Properties on MathBox Selections\nDESCRIPTION: Demonstrates how to change properties on a MathBox selection using the .set() method, either for a single property or multiple properties at once.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/api.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Single\nmathbox.set('focus', 3);\nmathbox.set('speed', 2);\n\n// Multiple\nmathbox.set({\n  focus: 3,\n  speed: 2,\n});\n```\n\n----------------------------------------\n\nTITLE: Surface Plot Implementation\nDESCRIPTION: Creates a 3D surface plot with rotating coordinate frame and animated sine wave pattern.\nSOURCE: https://github.com/unconed/mathbox/blob/master/examples/notebooks/mathbox.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nwith_mathbox(element, function(mathbox) {\n   mathbox.cartesian({},{rotation:(t)=>[0, t*0.1, 0]})\n     .grid({axes: [1, 3]})\n     .area({width:50, height:50,\n            expr: function(emit, x, y, i, j, t){\n              var r = Math.sqrt(x*x+y*y);\n              var z = Math.sin(r*10-t*0.5)*0.2 + 0.3;\n              emit(x, z, y);\n           }})\n     .surface({color:'#AAA', shaded:true})\n     .surface({color:'#55A', lineX:true, lineY:true, fill:false, zBias:1});\n})\n```\n\n----------------------------------------\n\nTITLE: 4D Tesseract Rotation Visualization\nDESCRIPTION: Creates an interactive visualization of a rotating 4D tesseract with stereographic projection.\nSOURCE: https://github.com/unconed/mathbox/blob/master/examples/notebooks/mathbox.ipynb#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nwith_mathbox(element, function(mathbox) {\n  mathbox.three.element.style.height = '600px';\n  mathbox.cartesian().grid({width: 2, opacity: 0.5, axes: [1, 3], origin: [0, -1, 0]});\n\n  var view = mathbox.stereographic4({position:[0, 0, 0], scale:[0.5, 0.5, 0.5]});\n\n  var edges = [];\n  var points = []\n  for (var e=-1; e<2; e+=2)\n  for (var i=-1; i<2; i+=2)\n  for (var j=-1; j<2; j+=2)\n  for (var k=-1; k<2; k+=2) {\n    edges.push([i, j, k, e])\n    edges.push([i, j, e, k])\n    edges.push([i, e, j, k])\n    edges.push([e, i, j, k])\n    points.push([i, j, k, e])\n  }\n\n  view.matrix({width:edges.length/2, height:2, data:edges, live: false})\n  .transpose({order:\"yx\", id:\"edges\"})\n  .array({data:points, id:\"points\"})\n  .clock({speed:0.25})\n  .transform4({}, {matrix:function(t) {\n     var c = Math.cos(t), s = Math.sin(t);\n     return [c, 0, 0,-s,\n             0, 1, 0, 0,\n             0, 0, 1, 0,\n             s, 0, 0, c];\n     }})  \n    .point({size:8, points:\"#points\"})\n    .format({live:false, expr:(x, y, z, w)=>{\n      return x+\", \"+y+\", \"+z+\", \"+w;\n    }}).label({size:16, depth:0.5, outline:0.5})\n    .lerp({width:32, source:\"#edges\"})\n    .line({color:0x3090FF, depth:1.0, width:4});\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Vector Data and Visualization\nDESCRIPTION: Creates a new interval that emits paired points (start and end positions) to represent vectors, and visualizes them as green arrows.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/intro.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar vector =\n  view.interval({\n    expr: function (emit, x, i, t) {\n      emit(x, 0);\n      emit(x, -Math.sin(x + t));\n    },\n    width: 64,\n    channels: 2,\n    items: 2,\n  })\n  .vector({\n    end: true,\n    width: 5,\n    color: '#50A000',\n  });\n```\n\n----------------------------------------\n\nTITLE: Adding Axes and Grid to the Coordinate System\nDESCRIPTION: Adds X and Y axes along with a grid to the cartesian view, with customized widths and divisions.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/intro.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nview\n  .axis({\n    axis: 1,\n    width: 3,\n  })\n  .axis({\n    axis: 2,\n    width: 3,\n  })\n  .grid({\n    width: 2,  \n    divideX: 20,\n    divideY: 10,        \n  });\n```\n\n----------------------------------------\n\nTITLE: Initializing MathBox in a Specific DOM Element\nDESCRIPTION: JavaScript code to create a MathBox instance inside a specific HTML element, providing container-specific rendering.\nSOURCE: https://github.com/unconed/mathbox/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst element = document.querySelector(\"#my-thing\");\n\nconst options = {\n  element: element,\n  controls: {\n    klass: THREE.OrbitControls\n  },\n};\nconst root = MathBox.mathBox(options);\n```\n\n----------------------------------------\n\nTITLE: Defining a 2D Sampled Matrix in MathBox\nDESCRIPTION: This code snippet defines the properties for the 'area' primitive in the 'data' module of MathBox. It represents a 2D sampled matrix with various configurable options such as alignment, axes, buffer dimensions, and data handling.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/primitives.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n####  <a name=\"data/area\"></a>`data/area`\n\n*2D sampled matrix*\n\n * *aligned* = `false` (bool) - Use (fast) integer lookups\n * *axes* = `[1, 2]` (swizzle(2) axis) - Axis pair\n * *bufferHeight* = `1` (number) - Matrix buffer height\n * *bufferWidth* = `1` (number) - Matrix buffer width\n * *centeredX* = `false` (bool) - Centered instead of corner sampling\n * *centeredY* = `false` (bool) - Centered instead of corner sampling\n * *channels* = `4` (number) - Number of channels\n * *classes* = `[]` (string array) - Custom classes, e.g. `[\"big\"]`\n * *data* = `null` (nullable object) - Data array\n * *expr* = `null` (nullable emitter) - Data emitter expression, e.g. `function (emit, x, y, i, j, time, delta) { ... }`\n * *fps* = `null` (nullable number) - Frames-per-second update rate, e.g. `60`\n * *height* = `1` (nullable number) - Matrix height\n * *history* = `1` (number) - Matrix history\n * *hurry* = `5` (number) - Maximum frames to hurry per frame\n * *id* = `null` (nullable string) - Unique ID, e.g. `\"sampler\"`\n * *items* = `4` (number) - Number of items\n * *limit* = `60` (number) - Maximum frames to track\n * *live* = `true` (bool) - Update continuously\n * *magFilter* = `\"nearest\"` (filter) - Texture magnification filtering\n * *minFilter* = `\"nearest\"` (filter) - Texture minification filtering\n * *observe* = `false` (bool) - Pass clock time to data\n * *paddingX* = `0` (number) - Number of samples padding\n * *paddingY* = `0` (number) - Number of samples padding\n * *rangeX* = `[-1, 1]` (vec2) - Range on axis\n * *rangeY* = `[-1, 1]` (vec2) - Range on axis\n * *realtime* = `false` (bool) - Run on real time, not clock time\n * *type* = `\"float\"` (type) - Texture data type\n * *width* = `1` (nullable number) - Matrix width\n```\n\n----------------------------------------\n\nTITLE: 3D Point Cloud Visualization\nDESCRIPTION: Renders Python-generated 3D points with rotating coordinate frame.\nSOURCE: https://github.com/unconed/mathbox/blob/master/examples/notebooks/mathbox.ipynb#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nwith_mathbox(element, function(mathbox) {\n    mathbox.cartesian({},{rotation:(t)=>[0, t*0.1, 0]})\n      .grid({axes: [1, 3]})\n      .array({data:POS, channels:3, live:false})\n      .point({color:\"#55a\"})\n      .line({width:1.0})\n})\n```\n\n----------------------------------------\n\nTITLE: Applying Fragment Shader in MathBox with JavaScript\nDESCRIPTION: JavaScript code that demonstrates how to apply a fragment shader in MathBox. It creates a shader with the fragment shader code and applies it to shapes within the fragment block.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/shaders.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nmathbox\n.shader({\n  code: \"#fragment-shader\",\n})\n.fragment()\n  // Fragment shaded shapes\n.end()\n```\n\n----------------------------------------\n\nTITLE: Drawing Data as a Line\nDESCRIPTION: Takes the previously created data and renders it as a blue line with specified width and color.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/intro.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar curve =\n  view.line({\n    width: 5,\n    color: '#3090FF',\n  });\n```\n\n----------------------------------------\n\nTITLE: Applying Vertex Shader in MathBox with JavaScript\nDESCRIPTION: JavaScript code that demonstrates how to apply a vertex shader in MathBox. It creates a shader with the vertex shader code and applies it to shapes within the vertex block.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/shaders.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmathbox\n.shader({\n  code: \"#vertex-shader\",\n})\n.vertex()\n  // vertex shaded shapes\n.end()\n```\n\n----------------------------------------\n\nTITLE: Binding Dynamic Expressions to MathBox Properties\nDESCRIPTION: Shows how to use the .bind() method to set dynamic properties that are evaluated every frame, either for a single property or multiple properties.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/api.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Single\nmathbox.bind(\"width\", function (time, delta) {\n  return 2 + Math.sin(time);\n});\n\n// Multiple\nmathbox.bind({\n  width: function (time, delta) {\n    return 2 + Math.sin(time);\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Points to Visualize the Same Data\nDESCRIPTION: Adds a point visualization to the same data, displaying points at each data position with specified size and color.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/intro.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar points =\n  view.point({\n    size: 8,\n    color: '#3090FF',\n  });\n```\n\n----------------------------------------\n\nTITLE: Using Resample Shader in MathBox with JavaScript\nDESCRIPTION: JavaScript code that demonstrates how to implement a resample shader in MathBox. It creates a matrix, applies a custom shader, and then uses the resample operator with specific indices and channel settings.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/shaders.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmathbox\n.matrix({ ... })\n.shader({\n  code: \"#resample-shader\"\n})\n.resample({\n  indices: 3,\n  channels: 4,\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Mask Shader in MathBox with JavaScript\nDESCRIPTION: JavaScript code that demonstrates how to apply a mask shader in MathBox. It creates a shader with the mask code and applies it to shapes within the mask block, affecting their transparency.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/shaders.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmathbox\n.shader({\n  code: \"#mask-shader\",\n})\n.mask()\n  // masked shapes\n.end()\n```\n\n----------------------------------------\n\nTITLE: Adding Text Labels to the Visualization\nDESCRIPTION: Adds text labels for the axis values, with specified color and z-index to control layering.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/intro.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar labels =\n  view.label({\n    color: 'red',\n    zIndex: 1,\n  });\n```\n\n----------------------------------------\n\nTITLE: Drawing an Axis in MathBox\nDESCRIPTION: This code snippet defines the properties for the 'axis' primitive in the 'draw' module of MathBox. It allows for drawing an axis with various visual properties such as color, size, and range.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/primitives.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n####  <a name=\"draw/axis\"></a>`draw/axis`\n\n*Draw an axis*\n\n * *axis* = `1` (axis) - Axis\n * *blending* = `\"normal\"` (blending) - Blending mode ('no, normal, add, subtract, multiply)\n * *classes* = `[]` (string array) - Custom classes, e.g. `[\"big\"]`\n * *closed* = `false` (bool) - Close line\n * *color* = `\"rgb(128, 128, 128)\"` (color) - Color\n * *crossed* = `true` (bool) - UVWO map on matching axis\n * *depth* = `1` (number) - Depth scaling\n * *detail* = `1` (number) - Geometric detail\n * *end* = `true` (bool) - Draw end arrow\n * *id* = `null` (nullable string) - Unique ID, e.g. `\"sampler\"`\n * *opacity* = `1` (positive number) - Opacity\n * *origin* = `[0, 0, 0, 0]` (vec4) - 4D Origin\n * *proximity* = `null` (nullable number) - Proximity threshold, e.g. `10`\n * *range* = `[-1, 1]` (vec2) - Range on axis\n * *size* = `3` (number) - Arrow size\n * *start* = `true` (bool) - Draw start arrow\n * *stroke* = `\"solid\"` (stroke) - Line stroke (solid, dotted, dashed)\n * *visible* = `true` (bool) - Visibility for rendering\n * *width* = `2` (positive number) - Line width\n * *zBias* = `-1` (positive number) - Z-Bias (3D stacking)\n * *zIndex* = `0` (positive int) - Z-Index (2D stacking)\n * *zOrder* = `null` (nullable number) - Z-Order (drawing order), e.g. `2`\n * *zTest* = `true` (bool) - Test Z buffer\n * *zWrite* = `true` (bool) - Write Z buffer\n```\n\n----------------------------------------\n\nTITLE: Defining a Camera in MathBox\nDESCRIPTION: This code snippet defines the properties for the 'camera' primitive in the 'camera' module of MathBox. It allows for configuring a camera instance or proxy with various positioning and orientation options.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/primitives.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n####  <a name=\"camera/camera\"></a>`camera/camera`\n\n*Camera instance or proxy*\n\n * *classes* = `[]` (string array) - Custom classes, e.g. `[\"big\"]`\n * *eulerOrder* = `\"xyz\"` (swizzle) - 3D Euler order\n * *fov* = `null` (nullable number) - Field-of-view (degrees), e.g. `60`\n * *id* = `null` (nullable string) - Unique ID, e.g. `\"sampler\"`\n * *lookAt* = `null` (nullable vec3) - 3D Look at, e.g. `[2, 3, 4]`\n * *position* = `null` (nullable vec3) - 3D Position, e.g. `[1, 2, 3]`\n * *proxy* = `false` (bool) - Re-use existing camera\n * *quaternion* = `null` (nullable quat) - 3D Quaternion, e.g. `[0.707, 0, 0, 0.707]`\n * *rotation* = `null` (nullable vec3) - 3D Euler rotation, e.g. `[π/2, 0, 0]`\n * *up* = `null` (nullable vec3) - 3D Up, e.g. `[0, 1, 0]`\n```\n\n----------------------------------------\n\nTITLE: Creating a Scale for Axis Divisions\nDESCRIPTION: Establishes a scale that divides the coordinate system into 10 equal parts for labeling.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/intro.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar scale =\n  view.scale({\n    divide: 10,\n  });\n```\n\n----------------------------------------\n\nTITLE: Drawing Lines in MathBox\nDESCRIPTION: Defines properties for drawing lines in MathBox, including styling options, arrow configurations, and visibility settings.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/primitives.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  blending: \"normal\",\n  classes: [],\n  closed: false,\n  color: \"rgb(128, 128, 128)\",\n  colors: null,\n  depth: 1,\n  end: true,\n  id: null,\n  opacity: 1,\n  points: \"<\",\n  proximity: null,\n  size: 3,\n  start: true,\n  stroke: \"solid\",\n  visible: true,\n  width: 2,\n  zBias: 0,\n  zIndex: 0,\n  zOrder: null,\n  zTest: true,\n  zWrite: true\n}\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Expressions with MathBox Elements\nDESCRIPTION: Demonstrates how to use live expressions that are evaluated dynamically every frame based on the local clock, passed as a second parameter to the element creation function.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/api.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmathbox.line({\n  // ...\n}, {\n  width: function (time, delta) {\n    return 2 + Math.sin(time);\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Tick Marks to the Scale\nDESCRIPTION: Adds visual tick marks to the scale with specified width, size, and color.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/intro.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar ticks =\n  view.ticks({\n    width: 5,\n    size: 15,\n    color: 'black',\n  });\n```\n\n----------------------------------------\n\nTITLE: Using Retext Shader with Color Data in MathBox\nDESCRIPTION: JavaScript code that applies a retext shader to color data. It specifies the shader with the color source, configures the retext operation to use absolute sampling, and applies the resulting text to labels with a specific color.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/shaders.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmathbox\n.shader({\n  sources: [\"#colors\"],\n  code: \"#retext-shader\"\n.retext({\n  sample: 'absolute', // sample absolute source instead of relative to target\n  width: WIDTH,\n  height: HEIGHT,\n})\n.label({\n  points: \"#points\", // e.g.\n  color: 'red',\n})\n```\n\n----------------------------------------\n\nTITLE: Selecting MathBox Elements with CSS-like Selectors\nDESCRIPTION: JavaScript code demonstrating how to select MathBox elements using CSS-like selectors, similar to jQuery functionality.\nSOURCE: https://github.com/unconed/mathbox/blob/master/README.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nroot.select(\"cartesian > axis\");\n```\n\n----------------------------------------\n\nTITLE: Appending Elements to MathBox Root\nDESCRIPTION: Shows how to append elements to the MathBox root node by calling the matching .type() function and passing in properties.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/api.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmathbox.cartesian({\n  range: [[-1, 1], [-1, 1]],\n})\n```\n\n----------------------------------------\n\nTITLE: Multi-Source Shader for Combining Data Arrays in MathBox\nDESCRIPTION: A shader that samples from multiple data sources and combines them. It demonstrates how to reference and use additional sources specified in the shader node's sources property, combining them through multiplication.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/shaders.md#2025-04-22_snippet_1\n\nLANGUAGE: glsl\nCODE:\n```\n// External sources\nvec4 getArray1Sample(vec4 xyzw);\nvec4 getArray2Sample(vec4 xyzw);\n\n// Source being resampled\nvec4 getSample(vec4 xyzw);\nvec4 getFramesSample(vec4 xyzw) {\n  return (getArray1Sample(xyzw) + getArray2Sample(xyzw)) * getSample(xyzw);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a 1D Array in MathBox\nDESCRIPTION: This code snippet defines the properties for the 'array' primitive in the 'data' module of MathBox. It represents a 1D array with various configurable options such as buffer width, channels, and data handling.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/primitives.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n####  <a name=\"data/array\"></a>`data/array`\n\n*1D array*\n\n * *aligned* = `false` (bool) - Use (fast) integer lookups\n * *bufferWidth* = `1` (number) - Array buffer width\n * *channels* = `4` (number) - Number of channels\n * *classes* = `[]` (string array) - Custom classes, e.g. `[\"big\"]`\n * *data* = `null` (nullable object) - Data array\n * *expr* = `null` (nullable emitter) - Data emitter expression, e.g. `function (emit, i, time, delta) { ... }`\n * *fps* = `null` (nullable number) - Frames-per-second update rate, e.g. `60`\n * *history* = `1` (number) - Array history\n * *hurry* = `5` (number) - Maximum frames to hurry per frame\n * *id* = `null` (nullable string) - Unique ID, e.g. `\"sampler\"`\n * *items* = `4` (number) - Number of items\n * *limit* = `60` (number) - Maximum frames to track\n * *live* = `true` (bool) - Update continuously\n * *magFilter* = `\"nearest\"` (filter) - Texture magnification filtering\n * *minFilter* = `\"nearest\"` (filter) - Texture minification filtering\n * *observe* = `false` (bool) - Pass clock time to data\n * *realtime* = `false` (bool) - Run on real time, not clock time\n * *type* = `\"float\"` (type) - Texture data type\n * *width* = `1` (nullable number) - Array width\n```\n\n----------------------------------------\n\nTITLE: Drawing GL Labels in MathBox\nDESCRIPTION: Defines properties for drawing GL labels in MathBox, including styling options, positioning, and visibility settings.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/primitives.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  background: \"rgb(255, 255, 255)\",\n  blending: \"normal\",\n  classes: [],\n  color: \"rgb(128, 128, 128)\",\n  colors: null,\n  depth: 0,\n  expand: 0,\n  id: null,\n  offset: [0, -20],\n  opacity: 1,\n  outline: 2,\n  points: \"<\",\n  size: 16,\n  snap: false,\n  text: \"<\",\n  visible: true,\n  zBias: 0,\n  zIndex: 0,\n  zOrder: null,\n  zTest: true,\n  zWrite: true\n}\n```\n\n----------------------------------------\n\nTITLE: Importing MathBox with ES Modules\nDESCRIPTION: Code snippet for importing MathBox, Three.js, and OrbitControls using ES modules syntax for modern JavaScript applications.\nSOURCE: https://github.com/unconed/mathbox/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"mathbox/mathbox.css\"\n\nimport * as THREE from \"three\"\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\"\nimport * as MathBox from \"mathbox\"\n```\n\n----------------------------------------\n\nTITLE: Setting the Focus to Match Camera Distance\nDESCRIPTION: Calibrates the units by setting the focus property on the root element to match the camera distance.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/intro.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmathbox.set('focus', 3);\n```\n\n----------------------------------------\n\nTITLE: Configuring 1D Sampled Array in MathBox\nDESCRIPTION: Defines properties for a 1D sampled array data source in MathBox, including axis settings, buffer configurations, and data handling options.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/primitives.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  aligned: false,\n  axis: 1,\n  bufferWidth: 1,\n  centered: false,\n  channels: 4,\n  classes: [],\n  data: null,\n  expr: null,\n  fps: null,\n  history: 1,\n  hurry: 5,\n  id: null,\n  items: 4,\n  limit: 60,\n  live: true,\n  magFilter: \"nearest\",\n  minFilter: \"nearest\",\n  observe: false,\n  padding: 0,\n  range: [-1, 1],\n  realtime: false,\n  type: \"float\",\n  width: 1\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Properties on Selected Elements\nDESCRIPTION: Demonstrates how to select elements and modify their properties after creation, such as changing axis color to black.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/intro.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmathbox.select('axis').set('color', 'black');\n```\n\n----------------------------------------\n\nTITLE: RTT (Render to Texture) Configuration\nDESCRIPTION: Properties for rendering objects to a texture with configurable dimensions, filtering and history.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/primitives.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  camera: \"[camera]\",\n  classes: [],\n  height: null,\n  history: 1,\n  id: null,\n  magFilter: \"linear\",\n  minFilter: \"linear\",\n  pass: \"view\",\n  speed: 1,\n  type: \"unsignedByte\",\n  width: null\n}\n```\n\n----------------------------------------\n\nTITLE: Gray-Scott Reaction-Diffusion Simulation\nDESCRIPTION: Implements a GPU-accelerated reaction-diffusion simulation on a torus surface using GLSL shaders.\nSOURCE: https://github.com/unconed/mathbox/blob/master/examples/notebooks/mathbox.ipynb#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nwith_mathbox(element, function(mathbox) {\n\nmathbox.three.camera.position.set(-0.1, 1, 1.5);\nvar W = 512, H = 256;\nmathbox\n  .rtt({width:W, height:H, type:\"float\", id:\"rtt\"})\n    .shader({code:`\n      uniform vec2 dataSize;\n      uniform vec2 spot;\n      uniform vec2 fk;\n      vec4 getsample(vec2 p);\n      vec2 sample(vec2 p) {\n        return getsample(mod(p, dataSize)).xy;\n      }\n      vec4 main(vec2 p) {\n        if (length(spot-p)<2.0) {\n          return vec4(0.0, 0.5, 0.0, 0.0);\n        }\n        float f = fk.x, k = fk.y;\n        const vec2 dx=vec2(1.,0.0), dy=vec2(0.0,1.);\n        vec2 v = sample(p);\n        vec2 lap = sample(p+dx)+sample(p-dx)+sample(p+dy)+sample(p-dy)-4.0*v;\n        float rate = v.x * v.y * v.y;\n        vec2 dv = vec2(0.2, 0.1)*lap + vec2(-rate, rate);\n        dv += vec2(f * (1.0 - v.x), -(f + k) * v.y);\n        v = clamp(v+dv, 0.0, 1.0);\n        return vec4(v, 0.0, 0.0);\n      }`, fk:[0.034, 0.056]}, {spot:(t)=>[(t*0.02+0.75)%1*W, (t*0.12+0.5)%1*H]})\n      .play({\n        loop: true, to:4, pace:3.0,\n        script:[\n          {fk:[0.034, 0.056]}, \n          {fk:[0.029, 0.057]},\n          {fk:[0.014, 0.054]},\n          {fk:[0.025, 0.060]},\n          {fk:[0.034, 0.056]}]})\n      .resample({indices:2}).compose()\n   .end()\n\n   .cartesian({}, {rotation:(t)=>[t*0.1+1.5, 0, 0]})\n       .shader({code:`\n          vec4 sample(vec4 p);\n          vec4 main(vec4 p) {\n            float v = sample(p).y;\n            return vec4(0.5+v, 0.5, 0.5, 1.0);\n          }\n         `}).resample()\n       .shader({code:`\n         uniform vec4 dataSize;\n         const float pi = 3.141593;\n         vec4 sample(vec4 p);\n         vec4 main(vec4 p) {\n           float v = sample(p).y;\n           vec2 pq = p.xy/(dataSize.xy-1.0)*2.0*pi;\n           float r = v*0.2 + 0.3;\n           float a = 0.7 + r*cos(pq.y);\n           return vec4(a*cos(pq.x), a*sin(pq.x), r*sin(pq.y), 0.0);\n         }`}).resample({source:'#rtt'})\n       .surface({shaded:true, closedX:true, colors:'<<', color:\"#fff\"});\n\n   mathbox.three.on('update', function(){\n     var rtt = mathbox.select('rtt')[0].controller.rtt;\n     for (var i=0; i<5; ++i)\n       rtt.render()\n   })\n})\n```\n\n----------------------------------------\n\nTITLE: Base Root Configuration Properties\nDESCRIPTION: Core configuration properties for the MathBox root element defining camera, viewport and rendering settings.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/primitives.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  camera: \"[camera]\",\n  classes: [],\n  focus: 1,\n  fov: null,\n  id: null,\n  pass: \"view\",\n  scale: null,\n  speed: 1\n}\n```\n\n----------------------------------------\n\nTITLE: Fragment Shader for Color Manipulation in MathBox\nDESCRIPTION: A fragment shader template that can modify pixel colors and UV coordinates. This basic example passes through the original color, but could be extended to implement custom fragment color transformations.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/shaders.md#2025-04-22_snippet_11\n\nLANGUAGE: glsl\nCODE:\n```\nvec4 fragmentShader(vec4 rgba, inout vec4 stpq) {\n  return rgba;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring 2D Matrix in MathBox\nDESCRIPTION: Defines properties for a 2D matrix data source in MathBox, including buffer dimensions, data handling, and update settings.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/primitives.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  aligned: false,\n  bufferHeight: 1,\n  bufferWidth: 1,\n  channels: 4,\n  classes: [],\n  data: null,\n  expr: null,\n  fps: null,\n  height: 1,\n  history: 1,\n  hurry: 5,\n  id: null,\n  items: 4,\n  limit: 60,\n  live: true,\n  magFilter: \"nearest\",\n  minFilter: \"nearest\",\n  observe: false,\n  realtime: false,\n  type: \"float\",\n  width: 1\n}\n```\n\n----------------------------------------\n\nTITLE: Mask Shader for Transparency Effects in MathBox\nDESCRIPTION: A mask shader that creates a sinusoidal pattern for transparency. It takes 4D UV coordinates and produces a floating point mask value based on sine functions, creating a grid-like transparency effect.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/shaders.md#2025-04-22_snippet_7\n\nLANGUAGE: glsl\nCODE:\n```\nfloat getMask(vec4 stpq) {\n  vec2 sines = sin(stpq.st * 10.0);\n  return (sines.x * sines.y);\n}\n```\n\n----------------------------------------\n\nTITLE: Retext Shader for Color-to-Text Conversion in MathBox\nDESCRIPTION: A shader that converts color values to corresponding text sprites. It samples from a color array and maps the red channel to indices in a text array containing numbers from 0-255, effectively creating RGB text representations.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/shaders.md#2025-04-22_snippet_4\n\nLANGUAGE: glsl\nCODE:\n```\nvec4 getColorSample(vec4 xyzw);\nvec4 getTextSample(vec4 xyzw);\n\nvec4 resample(vec4 xyzw) {\n  vec4 rgba = getColorSample(xyzw);\n  float i   = floor(rgba.r * 255.0 + .5);\n  return getTextSample(vec4(i, 0, 0, 0));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Independent 2D Layer in MathBox\nDESCRIPTION: Defines properties for creating an independent 2D layer/overlay in MathBox, including depth and fitting options.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/primitives.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  classes: [],\n  depth: 1,\n  fit: \"y\",\n  id: null,\n  pass: \"view\"\n}\n```\n\n----------------------------------------\n\nTITLE: Python Data Generation for 3D Visualization\nDESCRIPTION: Generates 3D point data using NumPy and transfers it to JavaScript global namespace.\nSOURCE: https://github.com/unconed/mathbox/blob/master/examples/notebooks/mathbox.ipynb#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nnp.random.seed(123)\nt = np.linspace(0, 2*np.pi, 1000)\nx, y, z = np.sin(t*10), np.sin(t*20), np.sin(t*30+0.5)\npos = np.vstack([x, y, z]).T\npos += np.random.normal(size=pos.shape)*0.02\n\njsglobal(POS=pos)\n```\n\n----------------------------------------\n\nTITLE: Python Helper Functions for JSON Serialization\nDESCRIPTION: Defines utility functions for serializing NumPy arrays to JSON and populating JavaScript global namespace with Python objects.\nSOURCE: https://github.com/unconed/mathbox/blob/master/examples/notebooks/mathbox.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef json_numpy_serialzer(o):\n    '''Helper function to serialize NumPy arrays.'''\n    if isinstance(o, np.ndarray):\n        return o.tolist()\n    raise TypeError(\"{} of type {} is not JSON serializable\".format(repr(o), type(o)))\n\ndef jsglobal(**params):\n    '''Populate JS global namespace with provided Python obejcts.'''\n    code = [];\n    for name, value in params.items():\n        jsdata = json.dumps(value, default=json_numpy_serialzer)\n        code.append(\"window.{} = {};\".format(name, jsdata))\n    display(Javascript(\"\\n\".join(code)))\n```\n\n----------------------------------------\n\nTITLE: Custom Shader Configuration\nDESCRIPTION: Properties for defining custom GLSL shader snippets with uniforms and source inputs.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/primitives.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  channels: 4,\n  classes: [],\n  code: \"\",\n  id: null,\n  indices: 4,\n  language: \"glsl\",\n  sources: null,\n  uniforms: null\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Python Dependencies\nDESCRIPTION: Imports required Python libraries for JSON handling, NumPy operations, and IPython display functions.\nSOURCE: https://github.com/unconed/mathbox/blob/master/examples/notebooks/mathbox.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport numpy as np\nfrom IPython.display import HTML, Javascript, display\n```\n\n----------------------------------------\n\nTITLE: Selecting Camera Element Using CSS Selectors\nDESCRIPTION: Demonstrates how to use CSS-style selectors to find and reference elements in the MathBox DOM.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/intro.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncamera = mathbox.select('camera');\n```\n\n----------------------------------------\n\nTITLE: Implementing Temporal Blur in GLSL for MathBox\nDESCRIPTION: A shader that implements temporal blur by averaging samples from the current position and three consecutive positions. It takes an intensity uniform parameter and returns a transformed color value based on the average intensity.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/shaders.md#2025-04-22_snippet_0\n\nLANGUAGE: glsl\nCODE:\n```\nuniform float intensity;\n\nvec4 getSample(vec3 xyz);\nvec4 getFramesSample(vec3 xyz) {\n  vec4 color = (\n    getSample(xyz) +\n    getSample(xyz + vec3(0.0, 0.0, 1.0)) +\n    getSample(xyz + vec3(0.0, 0.0, 2.0)) +\n    getSample(xyz + vec3(0.0, 0.0, 3.0))\n  ) / 4.0;\n  float v = (color.x + color.y + color.z) * intensity;\n  return vec4(vec3(v * v) / 8.0, 1.0);\n}\n```\n\n----------------------------------------\n\nTITLE: Including MathBox via CDN in HTML\nDESCRIPTION: HTML markup to include MathBox, Three.js, and required styles via CDN for quick implementation without bundlers.\nSOURCE: https://github.com/unconed/mathbox/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- Install your choice of three.js version from CDN: -->\n<script\n  type=\"text/javascript\"\n  src=\"https://cdn.jsdelivr.net/npm/three@0.137.0/build/three.min.js\"\n></script>\n\n<!-- Load a Controls instance, making sure that the version matches the Three.js version above: -->\n<script\n  type=\"text/javascript\"\n  src=\"https://cdn.jsdelivr.net/npm/three@0.137.0/examples/js/controls/OrbitControls.js\"\n></script>\n\n<!-- Install the latest MathBox, either mathbox.js or mathbos.min.js -->\n<script\n  type=\"text/javascript\"\n  src=\"https://cdn.jsdelivr.net/npm/mathbox@latest/build/bundle/mathbox.js\"\n></script>\n\n<!-- Include the MathBox CSS: -->\n<link\n  rel=\"stylesheet\"\n  href=\"https://cdn.jsdelivr.net/npm/mathbox@latest/build/mathbox.css\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Volume Data Emitter Function\nDESCRIPTION: Example signature for a volume data emitter function that generates 3D sampled voxel data. The function receives position coordinates (x,y,z), indices (i,j,k), and timing parameters.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/primitives.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nfunction (emit, x, y, z, i, j, k, time, delta) { ... }\n```\n\n----------------------------------------\n\nTITLE: Vertex Shader for Position Transformation in MathBox\nDESCRIPTION: A vertex shader template that can modify vertex positions and UV coordinates. This basic example passes through the original position, but could be extended to implement custom vertex transformations.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/shaders.md#2025-04-22_snippet_9\n\nLANGUAGE: glsl\nCODE:\n```\nvec4 vertexShader(vec4 xyzw, inout vec4 stpq) {\n  return xyzw;\n}\n```\n\n----------------------------------------\n\nTITLE: Present Play Component Configuration\nDESCRIPTION: Configuration for sequenced animation playback with script support and timing controls.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/primitives.md#2025-04-22_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"classes\": [],\n  \"delay\": 0,\n  \"ease\": \"cosine\",\n  \"from\": 0,\n  \"id\": null,\n  \"loop\": false,\n  \"pace\": 1,\n  \"realtime\": false,\n  \"script\": {},\n  \"speed\": 1,\n  \"target\": \"<\",\n  \"to\": \"Infinity\",\n  \"trigger\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Mask Pass in MathBox\nDESCRIPTION: Specifies properties for applying a custom mask pass in MathBox, including shader selection.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/primitives.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  classes: [],\n  id: null,\n  shader: \"<\"\n}\n```\n\n----------------------------------------\n\nTITLE: Resample Shader for Data Transformation in MathBox\nDESCRIPTION: A basic resample shader template that transforms input data arrays. It includes uniform variables for data dimensions and resolution. This example passes through the original sample but could be modified to perform more complex transformations.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/shaders.md#2025-04-22_snippet_2\n\nLANGUAGE: glsl\nCODE:\n```\nuniform vec3 dataResolution;   // inverse dimensions (sample-adjusted)\nuniform vec3 dataSize;         // dimensions\nuniform vec3 targetResolution; //\nuniform vec3 targetSize;       //\n\nvec4 getSample(vec3 xyz);         // indices 3, channels 4\nvec4 getFramesSample(vec3 xyz) {  //\n  return getSample(xyz);          //\n}\n```\n\n----------------------------------------\n\nTITLE: Linear Interpolation of Data in MathBox\nDESCRIPTION: Specifies properties for linear interpolation of data in MathBox, including centering options and padding settings.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/primitives.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  centeredW: false,\n  centeredX: false,\n  centeredY: false,\n  centeredZ: false,\n  classes: [],\n  depth: null,\n  height: null,\n  id: null,\n  items: null,\n  paddingW: 0,\n  paddingX: 0,\n  paddingY: 0,\n  paddingZ: 0,\n  size: \"absolute\",\n  source: \"<\",\n  width: null\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Data Updates in MathBox\nDESCRIPTION: Specifies properties for controlling expression/data updates when conditions change in MathBox.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/primitives.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  active: true,\n  classes: [],\n  data: null,\n  deep: true,\n  id: null\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Voxel Data Emitter Function\nDESCRIPTION: Example signature for a voxel data emitter function that generates 3D voxel data. The function receives indices (i,j,k) and timing parameters.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/primitives.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nfunction (emit, i, j, k, time, delta) { ... }\n```\n\n----------------------------------------\n\nTITLE: Inheriting Traits in MathBox Base Component\nDESCRIPTION: Specifies properties for inheriting and injecting traits from another element in MathBox.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/primitives.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  classes: [],\n  id: null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Overlay in MathBox\nDESCRIPTION: Defines properties for an HTML element source in MathBox, including buffer dimensions, data handling, and update settings.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/primitives.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  aligned: false,\n  bufferDepth: 1,\n  bufferHeight: 1,\n  bufferWidth: 1,\n  channels: 4,\n  classes: [],\n  data: null,\n  depth: 1,\n  expr: null,\n  fps: null,\n  height: 1,\n  hurry: 5,\n  id: null,\n  items: 4,\n  limit: 60,\n  live: true,\n  observe: false,\n  realtime: false,\n  width: 1\n}\n```\n\n----------------------------------------\n\nTITLE: Incrementing MathBox Property Example\nDESCRIPTION: A practical example showing how to increment a property value using get() and set() methods.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/api.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\npresent.set('index', present.get('index') + 1);\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers for Text Labels\nDESCRIPTION: Creates a formatter for numeric values that will be used in labels, with specified digits and weight.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/intro.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar format =\n  view.format({\n    digits: 2,\n    weight: 'bold',\n  });\n```\n\n----------------------------------------\n\nTITLE: DOM Structure with Cartesian View, Axes, and Grid\nDESCRIPTION: Shows the DOM structure after adding a cartesian coordinate system with axes and a grid to the MathBox scene.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/intro.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<root>\n  <camera proxy={true} position={[0, 0, 3]} />\n  <cartesian range={[[-2, 2], [-1, 1]]} scale={[2, 1]}>\n    <axis axis={1} width={3} />\n    <axis axis={2} width={3} />\n    <grid width={2} divideX={20} divideY={10} />\n  </cartesian>\n</root>\n```\n\n----------------------------------------\n\nTITLE: Example of expr function usage in MathBox data primitives\nDESCRIPTION: Demonstrates the structure of the expr property in MathBox data primitives, highlighting the emit function and its parameters including coordinates, indices, and time values.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/glossary.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `expr` - A prop on data primitives that expects a function, whose arguments are:\n  * `emit` - Another function. When called, its arguments become data.\n  * `x, y, z` - Up to three numbers indicating the location of the current point. Interval (1D), Area (2D), and Volume (3D) will evenly sample the current view for these coordinates. If you don't need them, use Array, Matrix, or Voxel, which omit these arguments.\n  * `i, j, k` - One to three indices of the current point.\n  * `t` - Time elapsed since program start, in seconds.\n  * `d` - Time delta since last frame, in seconds.\n```\n\n----------------------------------------\n\nTITLE: Generating Text Values in MathBox with JavaScript\nDESCRIPTION: JavaScript code that creates a text array containing numeric values from 0 to 255. This array will be used as the source for text sprites in the retext shader operation.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/shaders.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmathbox\n.text({\n  width: 256,\n  weight: 'bold',\n  expr: function (emit, i) { emit(i); },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing MathBox via npm\nDESCRIPTION: Command to install MathBox and Three.js dependencies via npm package manager for use in projects with bundlers like Webpack.\nSOURCE: https://github.com/unconed/mathbox/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install mathbox three\n```\n\n----------------------------------------\n\nTITLE: Joining Array Dimensions in MathBox\nDESCRIPTION: Specifies properties for joining two array dimensions by concatenating rows/columns/stacks in MathBox.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/primitives.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  axis: null,\n  classes: [],\n  id: null,\n  order: \"wxyz\",\n  overlap: 1,\n  source: \"<\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and launching MathBox with Jupyter Notebook\nDESCRIPTION: Two-step process for installing the MathBox package and starting Jupyter notebook to access examples. The pip command installs the current directory, while the jupyter command launches the notebook interface.\nSOURCE: https://github.com/unconed/mathbox/blob/master/examples/notebooks/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip3 install .\njupyter notebook\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Directory Structure\nDESCRIPTION: A hierarchical representation of the MathBox project structure showing the organization of build and source directories with their purposes.\nSOURCE: https://github.com/unconed/mathbox/blob/master/developing.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nbuild/\n├─ bundle/            ... Web bundle\n├─ module/            ... ES6 module\n├─ mathbox.css        ... splash css\nbuild/                ... a wealth of examples\nsrc/\n├─ model/             ... DOM tree + CSS selector handling\n├─ primitives/        ... The DOM node types (the legos)\n├─ render/            ... Smart proxies for Three.js (the glue)\n├─ shaders/           ... GLSL code\n├─ stage/             ... API / controllers\n├─ util/              ... It's inevitable\n```\n\n----------------------------------------\n\nTITLE: Memoizing Data in MathBox\nDESCRIPTION: Specifies properties for memoizing data to an array/texture in MathBox, including filter settings and data type.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/primitives.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  classes: [],\n  id: null,\n  magFilter: \"nearest\",\n  minFilter: \"nearest\",\n  source: \"<\",\n  type: \"float\"\n}\n```\n\n----------------------------------------\n\nTITLE: Present Move Component Configuration\nDESCRIPTION: Configuration options for moving elements in/out during transitions with customizable delays, durations and positioning.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/primitives.md#2025-04-22_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"classes\": [],\n  \"delay\": 0,\n  \"delayEnter\": null,\n  \"delayExit\": null,\n  \"duration\": 0.3,\n  \"durationEnter\": 0.3,\n  \"durationExit\": 0.3,\n  \"enter\": null,\n  \"exit\": null,\n  \"from\": [0, 0, 0, 0],\n  \"id\": null,\n  \"pass\": \"view\",\n  \"stagger\": [0, 0, 0, 0],\n  \"to\": [0, 0, 0, 0]\n}\n```\n\n----------------------------------------\n\nTITLE: Time Now Component Configuration\nDESCRIPTION: Configuration for handling absolute UNIX time with pace and speed controls.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/primitives.md#2025-04-22_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"classes\": [],\n  \"id\": null,\n  \"now\": null,\n  \"pace\": 1,\n  \"seek\": null,\n  \"speed\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing the MathBox DOM Structure\nDESCRIPTION: Shows the DOM structure after adding a camera element with the specified properties.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/intro.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<root>\n  <camera proxy={true} position={[0, 0, 3]} />\n</root>\n```\n\n----------------------------------------\n\nTITLE: Updated DOM with Focus and Black Axes\nDESCRIPTION: Shows the DOM structure after setting the focus and changing axis colors to black.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/intro.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<root focus={3}>\n  <camera proxy={true} position={[0, 0, 3]} />\n  <cartesian range={[[-2, 2], [-1, 1]]} scale={[2, 1]}>\n    <axis axis={1} width={3} color=\"black\" />\n    <axis axis={2} width={3} color=\"black\" />\n    <grid width={2} divideX={20} divideY={10} />\n  </cartesian>\n</root>\n```\n\n----------------------------------------\n\nTITLE: DOM Structure with Data Interval and Line\nDESCRIPTION: Shows the DOM structure after adding the data interval and line visualization to the MathBox scene.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/intro.md#2025-04-22_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<root focus={3}>\n  <camera proxy={true} position={[0, 0, 3]} />\n  <cartesian range={[[-2, 2], [-1, 1]]} scale={[2, 1]}>\n    <axis axis={1} width={3} color=\"black\" />\n    <axis axis={2} width={3} color=\"black\" />\n    <grid width={2} divideX={20} divideY={10} />\n    <interval expr={(emit, x, i, t) => {\n          emit(x, Math.sin(x + t));\n        }} width={64} channels={2} />\n    <line width={5} color=\"#3090FF\" />\n  </cartesian>\n</root>\n```\n\n----------------------------------------\n\nTITLE: Full DOM with Lines, Points and Vectors\nDESCRIPTION: Shows the complete DOM structure after adding all the visualizations: line, points, and vectors.\nSOURCE: https://github.com/unconed/mathbox/blob/master/docs/intro.md#2025-04-22_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<root focus={3}>\n  <camera proxy={true} position={[0, 0, 3]} />\n  <cartesian range={[[-2, 2], [-1, 1]]} scale={[2, 1]}>\n    <axis axis={1} width={3} color=\"black\" />\n    <axis axis={2} width={3} color=\"black\" />\n    <grid width={2} divideX={20} divideY={10} />\n    <interval expr={(emit, x, i, t) => {\n          emit(x, Math.sin(x + t));\n        }} width={64} channels={2} />\n    <line width={5} color=\"#3090FF\" />\n    <point size={8} color=\"#3090FF\" />\n    <interval expr={(emit, x, i, t) => {\n          emit(x, 0);\n          emit(x, -Math.sin(x + t));\n        }} width={64} channels={2} items={2} />\n    <vector end={true} width={5} color=\"#50A000\" />\n  </cartesian>\n</root>\n```\n\n----------------------------------------\n\nTITLE: Running Webpack Bundle Build with Watch Mode\nDESCRIPTION: Command for building the MathBox bundle with Webpack in watch mode, which allows for immediate visual inspection of local changes in the examples directory.\nSOURCE: https://github.com/unconed/mathbox/blob/master/developing.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:bundle -- --watch\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Karma\nDESCRIPTION: Command for running MathBox tests with Karma in watch mode. Tests are executed in real browsers to ensure WebGL contexts exist rather than being mocked.\nSOURCE: https://github.com/unconed/mathbox/blob/master/developing.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run tests -- --watch\n```"
  }
]