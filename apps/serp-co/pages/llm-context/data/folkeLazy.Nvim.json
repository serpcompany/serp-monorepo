[
  {
    "owner": "folke",
    "repo": "lazy.nvim",
    "content": "TITLE: Lazy.nvim Setup and Error Handling Lua\nDESCRIPTION: This snippet demonstrates the basic setup of lazy.nvim in Neovim. It includes prepending the lazy.nvim path to the runtime path, setting the mapleader and maplocalleader variables, and calling the `require('lazy').setup()` function with plugin specifications and other configuration options. It also handles potential errors during the process.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\n            { out, \"WarningMsg\" },\n          { \"\\nPress any key to exit...\" },\n        }, true, {})\n        vim.fn.getchar()\n        os.exit(1)\n      end\n    end\n    vim.opt.rtp:prepend(lazypath)\n    \n    -- Make sure to setup `mapleader` and `maplocalleader` before\n    -- loading lazy.nvim so that mappings are correct.\n    -- This is also a good place to setup other settings (vim.opt)\n    vim.g.mapleader = \" \"\n    vim.g.maplocalleader = \"\\\\\"\n    \n    -- Setup lazy.nvim\n    require(\"lazy\").setup({\n      -- highlight-start\n      spec = {\n        -- add your plugins here\n      },\n      -- highlight-end\n      -- Configure any other settings here. See the documentation for more details.\n      -- colorscheme that will be used when installing plugins.\n      install = { colorscheme = { \"habamax\" } },\n      -- automatically check for plugin updates\n      checker = { enabled = true },\n    })\n```\n\n----------------------------------------\n\nTITLE: Plugin Specification Example Lua\nDESCRIPTION: This code snippet showcases an example plugin specification within a Lua module for lazy.nvim. It defines a list of plugins to be managed, including specifying commands and lazy loading options.  This allows for a clean and maintainable way to declare plugin dependencies.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_42\n\nLANGUAGE: lua\nCODE:\n```\nreturn {\n  \"folke/neodev.nvim\",\n  \"folke/which-key.nvim\",\n  { \"folke/neoconf.nvim\", cmd = \"Neoconf\" },\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing lazy.nvim with Plugin Module Lua\nDESCRIPTION: This code snippet demonstrates how to initialize lazy.nvim using a Lua module containing plugin specifications. It loads the plugins from the specified module, allowing for better organization and caching of plugin specs. The plugins module can be a single file or a directory with multiple Lua files.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_41\n\nLANGUAGE: lua\nCODE:\n```\nrequire(\"lazy\").setup(\"plugins\")\n```\n\n----------------------------------------\n\nTITLE: Single File Setup: lazy.nvim Lua\nDESCRIPTION: Bootstraps lazy.nvim by cloning the repository if it doesn't exist, adding it to the runtimepath, and setting up a basic configuration. This is suitable for a single-file Neovim configuration.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\n-- Bootstrap lazy.nvim\nlocal lazypath = vim.fn.stdpath(\"data\") .. \"/lazy/lazy.nvim\"\nif not (vim.uv or vim.loop).fs_stat(lazypath) then\n  local lazyrepo = \"https://github.com/folke/lazy.nvim.git\"\n  local out = vim.fn.system({ \"git\", \"clone\", \"--filter=blob:none\", \"--branch=stable\", lazyrepo, lazypath })\n  if vim.v.shell_error ~= 0 then\n    vim.api.nvim_echo({\n      { \"Failed to clone lazy.nvim:\\n\", \"ErrorMsg\" },\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping lazy.nvim Lua\nDESCRIPTION: Bootstraps and sets up lazy.nvim, including cloning the repository if it doesn't exist, prepending to runtimepath, setting mapleader and maplocalleader, and configuring the plugin manager.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n-- Bootstrap lazy.nvim\nlocal lazypath = vim.fn.stdpath(\"data\") .. \"/lazy/lazy.nvim\"\nif not (vim.uv or vim.loop).fs_stat(lazypath) then\n  local lazyrepo = \"https://github.com/folke/lazy.nvim.git\"\n  local out = vim.fn.system({ \"git\", \"clone\", \"--filter=blob:none\", \"--branch=stable\", lazyrepo, lazypath })\n  if vim.v.shell_error ~= 0 then\n    vim.api.nvim_echo({\n      { \"Failed to clone lazy.nvim:\\n\", \"ErrorMsg\" },\n      { out, \"WarningMsg\" },\n      { \"\\nPress any key to exit...\" },\n    }, true, {})\n    vim.fn.getchar()\n    os.exit(1)\n  end\nend\nvim.opt.rtp:prepend(lazypath)\n\n-- Make sure to setup `mapleader` and `maplocalleader` before\n-- loading lazy.nvim so that mappings are correct.\n-- This is also a good place to setup other settings (vim.opt)\nvim.g.mapleader = \" \"\nvim.g.maplocalleader = \"\\\\\"\n\n-- Setup lazy.nvim\nrequire(\"lazy\").setup({\n  -- highlight-start\n  spec = {\n    -- import your plugins\n    { import = \"plugins\" },\n  },\n  -- highlight-end\n  -- Configure any other settings here. See the documentation for more details.\n  -- colorscheme that will be used when installing plugins.\n  install = { colorscheme = { \"habamax\" } },\n  -- automatically check for plugin updates\n  checker = { enabled = true },\n})\n```\n\n----------------------------------------\n\nTITLE: Plugin Specification with Event and Dependencies - Lua\nDESCRIPTION: This example details the configuration for `nvim-cmp`, showcasing how to lazy-load the plugin on the `InsertEnter` event and define dependencies that are also lazy-loaded. Dependencies listed in the `dependencies` table will only be loaded when `nvim-cmp` loads, unless specified otherwise.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\n{\n  \"hrsh7th/nvim-cmp\",\n  -- load cmp on InsertEnter\n  event = \"InsertEnter\",\n  -- these dependencies will only be loaded when cmp loads\n  -- dependencies are always lazy-loaded unless specified otherwise\n  dependencies = {\n    \"hrsh7th/cmp-nvim-lsp\",\n    \"hrsh7th/cmp-buffer\",\n  },\n  config = function()\n    -- ...\n  end,\n},\n\n```\n\n----------------------------------------\n\nTITLE: Plugin Specification with Lazy Loading and Dependency - Lua\nDESCRIPTION: This example showcases how to lazy-load a plugin (which-key.nvim) and defines a plugin specification with filetype-based lazy loading (neorg). When 'which-key.nvim' module is required, lazy loading will be triggered. The 'neorg' plugin loads when the filetype is 'norg', and it automatically calls `require(\"neorg\").setup(opts)` with the provided options.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\n{\n  -- I have a separate config.mappings file where I require which-key.\n  -- With lazy the plugin will be automatically loaded when it is required somewhere\n  { \"folke/which-key.nvim\", lazy = true },\n\n  {\n    \"nvim-neorg/neorg\",\n    -- lazy-load on filetype\n    ft = \"norg\",\n    -- options for neorg. This will automatically call `require(\"neorg\").setup(opts)`\n    opts = {\n      load = {\n        [\"core.defaults\"] = {},\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Package Configuration: lazy.nvim Lua\nDESCRIPTION: Configures lazy.nvim packages with options for enabling, caching, and specifying sources for packages. It defines settings for lazy loading, rockspec integration, and packspec usage.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n{\n  pkg = {\n    enabled = true,\n    cache = vim.fn.stdpath(\"state\") .. \"/lazy/pkg-cache.lua\",\n    -- the first package source that is found for a plugin will be used.\n    sources = {\n      \"lazy\",\n      \"rockspec\", -- will only be used when rocks.enabled is true\n      \"packspec\",\n    },\n  },\n  rocks = {\n    enabled = true,\n    root = vim.fn.stdpath(\"data\") .. \"/lazy-rocks\",\n    server = \"https://nvim-neorocks.github.io/rocks-binaries/\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Plugin Specification Lua\nDESCRIPTION: This code snippet demonstrates how to specify that a plugin should be lazy-loaded using the `lazy` option in lazy.nvim. Setting `lazy = true` ensures that the plugin is only loaded when needed, improving startup time. This is useful for plugins that are not always required.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_46\n\nLANGUAGE: lua\nCODE:\n```\n{ \"nvim-lua/plenary.nvim\", lazy = true }\n```\n\n----------------------------------------\n\nTITLE: Plugin Specification Example with Colorscheme Loading - Lua\nDESCRIPTION: This example demonstrates a plugin specification for a colorscheme, ensuring it loads during Neovim startup with high priority.  It uses the `lazy = false` setting and a `priority` value to ensure the colorscheme is loaded before other start plugins. The `config` function is used to load the colorscheme using `vim.cmd`.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nreturn {\n  -- the colorscheme should be available when starting Neovim\n  {\n    \"folke/tokyonight.nvim\",\n    lazy = false, -- make sure we load this during startup if it is your main colorscheme\n    priority = 1000, -- make sure to load this before all the other start plugins\n    config = function()\n      -- load the colorscheme here\n      vim.cmd([[colorscheme tokyonight]])\n    end,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Lazy.nvim Configuration Example\nDESCRIPTION: This Lua code snippet demonstrates a comprehensive configuration block for lazy.nvim, a Neovim plugin manager. It includes settings for various aspects such as package management (pkg, rocks), development environment (dev), installation (install), user interface (ui), performance (performance), and change detection. The snippet showcases how to customize lazy.nvim's behavior through a table of options.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_19\n\nLANGUAGE: lua\nCODE:\n```\n{\n  -- then set the below to false. This should work, but is NOT supported and will\n  -- increase downloads a lot.\n  filter = true,\n  -- rate of network related git operations (clone, fetch, checkout)\n  throttle = {\n    enabled = false, -- not enabled by default\n    -- max 2 ops every 5 seconds\n    rate = 2,\n    duration = 5 * 1000, -- in ms\n  },\n  -- Time in seconds to wait before running fetch again for a plugin.\n  -- Repeated update/check operations will not run again until this\n  -- cooldown period has passed.\n  cooldown = 0,\n},\npkg = {\n  enabled = true,\n  cache = vim.fn.stdpath(\"state\") .. \"/lazy/pkg-cache.lua\",\n  -- the first package source that is found for a plugin will be used.\n  sources = {\n    \"lazy\",\n    \"rockspec\", -- will only be used when rocks.enabled is true\n    \"packspec\",\n  },\n},\nrocks = {\n  enabled = true,\n  root = vim.fn.stdpath(\"data\") .. \"/lazy-rocks\",\n  server = \"https://nvim-neorocks.github.io/rocks-binaries/\",\n  -- use hererocks to install luarocks?\n  -- set to `nil` to use hererocks when luarocks is not found\n  -- set to `true` to always use hererocks\n  -- set to `false` to always use luarocks\n  hererocks = nil,\n},\ndev = {\n  -- Directory where you store your local plugin projects. If a function is used,\n  -- the plugin directory (e.g. `~/projects/plugin-name`) must be returned.\n  ---@type string | fun(plugin: LazyPlugin): string\n  path = \"~/projects\",\n  ---@type string[] plugins that match these patterns will use your local versions instead of being fetched from GitHub\n  patterns = {}, -- For example {\"folke\"}\n  fallback = false, -- Fallback to git when local plugin doesn't exist\n},\ninstall = {\n  -- install missing plugins on startup. This doesn't increase startup time.\n  missing = true,\n  -- try to load one of these colorschemes when starting an installation during startup\n  colorscheme = { \"habamax\" },\n},\nui = {\n  -- a number <1 is a percentage., >1 is a fixed size\n  size = { width = 0.8, height = 0.8 },\n  wrap = true, -- wrap the lines in the ui\n  -- The border to use for the UI window. Accepts same border values as |nvim_open_win()|.\n  border = \"none\",\n  -- The backdrop opacity. 0 is fully opaque, 100 is fully transparent.\n  backdrop = 60,\n  title = nil, ---@type string only works when border is not \"none\"\n  title_pos = \"center\", ---@type \"center\" | \"left\" | \"right\"\n  -- Show pills on top of the Lazy window\n  pills = true, ---@type boolean\n  icons = {\n    cmd = \" \",\n    config = \"\",\n    debug = \"● \",\n    event = \" \",\n    favorite = \" \",\n    ft = \" \",\n    init = \" \",\n    import = \" \",\n    keys = \" \",\n    lazy = \"󰒲 \",\n    loaded = \"●\",\n    not_loaded = \"○\",\n    plugin = \" \",\n    runtime = \" \",\n    require = \"󰢱 \",\n    source = \" \",\n    start = \" \",\n    task = \"✔ \",\n    list = {\n      \"●\",\n      \"➜\",\n      \"★\",\n      \"‒\",\n    },\n  },\n  -- leave nil, to automatically select a browser depending on your OS.\n  -- If you want to use a specific browser, you can define it here\n  browser = nil, ---@type string?\n  throttle = 1000 / 30, -- how frequently should the ui process render events\n  custom_keys = {\n    -- You can define custom key maps here. If present, the description will\n    -- be shown in the help menu.\n    -- To disable one of the defaults, set it to false.\n\n    [\"<localleader>l\"] = {\n      function(plugin)\n        require(\"lazy.util\").float_term({ \"lazygit\", \"log\" }, {\n          cwd = plugin.dir,\n        })\n      end,\n      desc = \"Open lazygit log\",\n    },\n\n    [\"<localleader>i\"] = {\n      function(plugin)\n        Util.notify(vim.inspect(plugin), {\n          title = \"Inspect \" .. plugin.name,\n          lang = \"lua\",\n        })\n      end,\n      desc = \"Inspect Plugin\",\n    },\n\n    [\"<localleader>t\"] = {\n      function(plugin)\n        require(\"lazy.util\").float_term(nil, {\n          cwd = plugin.dir,\n        })\n      end,\n      desc = \"Open terminal in plugin dir\",\n    },\n  },\n},\n-- Output options for headless mode\nheadless = {\n  -- show the output from process commands like git\n  process = true,\n  -- show log messages\n  log = true,\n  -- show task start/end\n  task = true,\n  -- use ansi colors\n  colors = true,\n},\ndiff = {\n  -- diff command <d> can be one of:\n  -- * browser: opens the github compare view. Note that this is always mapped to <K> as well,\n  --   so you can have a different command for diff <d>\n  -- * git: will run git diff and open a buffer with filetype git\n  -- * terminal_git: will open a pseudo terminal with git diff\n  -- * diffview.nvim: will open Diffview to show the diff\n  cmd = \"git\",\n},\nchecker = {\n  -- automatically check for plugin updates\n  enabled = false,\n  concurrency = nil, ---@type number? set to 1 to check for updates very slowly\n  notify = true, -- get a notification when new updates are found\n  frequency = 3600, -- check for updates every hour\n  check_pinned = false, -- check for pinned packages that can't be updated\n},\nchange_detection = {\n  -- automatically check for config file changes and reload the ui\n  enabled = true,\n  notify = true, -- get a notification when changes are found\n},\nperformance = {\n  cache = {\n    enabled = true,\n  },\n  reset_packpath = true, -- reset the package path to improve startup time\n  rtp = {\n    reset = true, -- reset the runtime path to $VIMRUNTIME and your config directory\n    ---@type string[]\n    paths = {}, -- add any custom paths here that you want to includes in the rtp\n    ---@type string[] list any plugins you want to disable here\n    disabled_plugins = {\n      -- \"gzip\",\n      -- \"matchit\",\n      -- \"matchparen\",\n      -- \"netrwPlugin\",\n      -- \"tarPlugin\",\n      -- \"tohtml\",\n      -- \"tutor\",\n      -- \"zipPlugin\",\n    },\n  },\n},\n-- lazy can generate helptags from the headings in markdown readme files,\n-- so :help works even for plugins that don't have vim docs.\n-- when the readme opens with :help it will be correctly displayed as markdown\nreadme = {\n  enabled = true,\n  root = vim.fn.stdpath(\"state\") .. \"/lazy/readme\",\n  files = { \"README.md\", \"lua/**/README.md\" },\n  -- only generate markdown helptags for plugins that don't have docs\n  skip_if_doc_exists = true,\n},\nstate = vim.fn.stdpath(\"state\") .. \"/lazy/state.json\", -- state info for checker and other things\n-- Enable profiling of lazy.nvim. This will add some overhead,\n-- so only enable this when you are debugging lazy.nvim\nprofiling = {\n  -- Enables extra stats on the debug tab related to the loader cache.\n  -- Additionally gathers stats about all package.loaders\n  loader = false,\n  -- Track each new require in the Lazy profiling tab\n  require = false,\n},\n\n```\n\n----------------------------------------\n\nTITLE: Plugin Specification with Key Mappings - Lua\nDESCRIPTION: This snippet defines a plugin specification with custom key mappings, using the `keys` option to bind `J` to the `TSJToggle` command. The `opts` table configures plugin-specific options, such as disabling default keymaps and setting the maximum join length.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\n{\n  \"Wansmer/treesj\",\n  keys = {\n    { \"J\", \"<cmd>TSJToggle<cr>\", desc = \"Join Toggle\" },\n  },\n  opts = { use_default_keymaps = false, max_join_length = 150 },\n},\n\n```\n\n----------------------------------------\n\nTITLE: Simple Plugin Specification Lua\nDESCRIPTION: This code snippet demonstrates a minimal plugin specification for lazy.nvim within a `lazy.lua` file.  It's designed for plugins that require a `setup()` call, and provides a clean way to include the plugin with its options. It returns a table containing the plugin name and options.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_45\n\nLANGUAGE: lua\nCODE:\n```\nreturn { \"me/my-plugin\", opts = {} }\n```\n\n----------------------------------------\n\nTITLE: Importing Multiple Modules Lua\nDESCRIPTION: This code snippet demonstrates how to import multiple modules from a plugin in lazy.nvim. It configures the plugin manager by specifying multiple `import` statements, allowing for the loading of different parts of a large plugin, like LazyVim. Specifications for the same plugin can be overridden by adding a spec for the plugin to the local specs.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_44\n\nLANGUAGE: lua\nCODE:\n```\nrequire(\"lazy\").setup({\n  spec = {\n    { \"LazyVim/LazyVim\", import = \"lazyvim.plugins\" },\n    { import = \"lazyvim.plugins.extras.coding.copilot\" },\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Bootstrap lazy.nvim Lua\nDESCRIPTION: This code snippet shows how to bootstrap lazy.nvim by downloading and executing the bootstrap script from GitHub.  It sets the `LAZY_STDPATH` environment variable to `.tests` which overrides default XDG paths. This approach simplifies installation in isolated environments or for testing.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_48\n\nLANGUAGE: lua\nCODE:\n```\n-- setting this env will override all XDG paths\nvim.env.LAZY_STDPATH = \".tests\"\n-- this will install lazy in your stdpath\nload(vim.fn.system(\"curl -s https://raw.githubusercontent.com/folke/lazy.nvim/main/bootstrap.lua\"))()\n```\n\n----------------------------------------\n\nTITLE: Plugin Specification with Event Loading - Lua\nDESCRIPTION: This example shows how to lazy load a plugin on the VeryLazy event. This is useful for plugins that are not important for the initial UI and can be loaded later.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\n{\n  \"stevearc/dressing.nvim\", event = \"VeryLazy\" },\n\n```\n\n----------------------------------------\n\nTITLE: Update Plugins Command (Lua)\nDESCRIPTION: This command updates plugins and the lockfile using the `lazy.update` function in Lua.  The `opts` table allows customizing options such as `wait`, `show`, `plugins`, and `concurrency`.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_36\n\nLANGUAGE: Lua\nCODE:\n```\nrequire(\"lazy\").update(opts?)\n```\n\n----------------------------------------\n\nTITLE: Sync Plugins Command (Lua)\nDESCRIPTION: This command runs install, clean, and update operations using the `lazy.sync` function in Lua.  The `opts` table allows customizing options such as `wait`, `show`, `plugins`, and `concurrency`.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_35\n\nLANGUAGE: Lua\nCODE:\n```\nrequire(\"lazy\").sync(opts?)\n```\n\n----------------------------------------\n\nTITLE: Install Missing Plugins Command (Lua)\nDESCRIPTION: This command installs missing plugins using the `lazy.install` function in Lua. The `opts` table allows for customization, including options such as `wait`, `show`, `plugins`, and `concurrency`.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_29\n\nLANGUAGE: Lua\nCODE:\n```\nrequire(\"lazy\").install(opts?)\n```\n\n----------------------------------------\n\nTITLE: Importing Plugin Specs Lua\nDESCRIPTION: This code snippet illustrates how to import additional plugin modules in lazy.nvim. It shows two equivalent ways to achieve this: either by directly specifying the module name or by using a spec table with the `import` key. This allows for modularizing plugin configurations.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_43\n\nLANGUAGE: lua\nCODE:\n```\nrequire(\"lazy\").setup(\"plugins\")\n\n-- Same as:\nrequire(\"lazy\").setup({{import = \"plugins\"}})\n```\n\n----------------------------------------\n\nTITLE: Clean Unused Plugins Command (Lua)\nDESCRIPTION: This command cleans plugins that are no longer needed using the `lazy.clean` function in Lua.  The `opts` table can be used to configure options such as `wait`, `show`, `plugins`, and `concurrency`.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_23\n\nLANGUAGE: Lua\nCODE:\n```\nrequire(\"lazy\").clean(opts?)\n```\n\n----------------------------------------\n\nTITLE: Sync Lazy from Command Line (Shell)\nDESCRIPTION: This shell command uses Neovim in headless mode to synchronize lazy.nvim by running `Lazy! sync` and then quitting. The bang (!) forces the command to wait until it finishes.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_37\n\nLANGUAGE: Shell\nCODE:\n```\nnvim --headless \"+Lazy! sync\" +qa\n```\n\n----------------------------------------\n\nTITLE: Restore Plugins from Lockfile (Lua)\nDESCRIPTION: This command updates all plugins to the state in the lockfile using the `lazy.restore` function in Lua. The `opts` table allows customizing options such as `wait`, `show`, `plugins`, and `concurrency`.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_34\n\nLANGUAGE: Lua\nCODE:\n```\nrequire(\"lazy\").restore(opts?)\n```\n\n----------------------------------------\n\nTITLE: Load Plugin Command (Lua)\nDESCRIPTION: This command loads a plugin that has not been loaded yet using the `lazy.load` function in Lua. It's similar to `:packadd`.  The `opts` table allows customizing options such as `wait`, `show`, `plugins`, and `concurrency`.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_30\n\nLANGUAGE: Lua\nCODE:\n```\nrequire(\"lazy\").load(opts)\n```\n\n----------------------------------------\n\nTITLE: Rebuild Plugin Command (Lua)\nDESCRIPTION: This command rebuilds a specified plugin using the `lazy.build` function in Lua. The `opts` table can be used to configure options such as `wait`, `show`, `plugins`, and `concurrency`.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_21\n\nLANGUAGE: Lua\nCODE:\n```\nrequire(\"lazy\").build(opts)\n```\n\n----------------------------------------\n\nTITLE: Key Mapping Example for Neo-tree - Lua\nDESCRIPTION: This example demonstrates a key mapping configuration for neo-tree.nvim. It maps `<leader>ft` to the command `Neotree toggle<cr>`, which toggles the neo-tree window. The `desc` field provides a description for the mapping, enhancing discoverability.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_17\n\nLANGUAGE: lua\nCODE:\n```\n{\n  \"nvim-neo-tree/neo-tree.nvim\",\n    keys = {\n      { \"<leader>ft\", \"<cmd>Neotree toggle<cr>\", desc = \"NeoTree\" },\n    },\n    opts = {},\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configure Lualine with Lazy Status (Lua)\nDESCRIPTION: This Lua code configures lualine.nvim to display the number of pending updates from lazy.nvim. It uses `lazy.status.updates` and `lazy.status.has_updates` to dynamically show the update status in the lualine statusline.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_39\n\nLANGUAGE: Lua\nCODE:\n```\nrequire(\"lualine\").setup({\n  sections = {\n    lualine_x = {\n      {\n        require(\"lazy.status\").updates,\n        cond = require(\"lazy.status\").has_updates,\n        color = { fg = \"#ff9e64\" },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Get Lazy Stats (Lua)\nDESCRIPTION: This Lua code retrieves statistics about lazy.nvim using the `lazy.stats()` function. It returns a table containing information about startup time, number of plugins, and loading times.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_38\n\nLANGUAGE: Lua\nCODE:\n```\n{\n  -- startuptime in milliseconds till UIEnter\n  startuptime = 0,\n  -- when true, startuptime is the accurate cputime for the Neovim process. (Linux & macOS)\n  -- this is more accurate than `nvim --startuptime`, and as such will be slightly higher\n  -- when false, startuptime is calculated based on a delta with a timestamp when lazy started.\n  real_cputime = false,\n  count = 0, -- total number of plugins\n  loaded = 0, -- number of loaded plugins\n  ---@type table<string, number>\n  times = {},\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Specification with Dev Mode - Lua\nDESCRIPTION: This example shows how to configure a plugin using the `dev` option, which allows switching between a local development version and an installed version. Lazy.nvim uses `{config.dev.path}/noice.nvim/` instead of fetching it from GitHub when `dev = true`.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_16\n\nLANGUAGE: lua\nCODE:\n```\n{\n  \"folke/noice.nvim\", dev = true },\n\n```\n\n----------------------------------------\n\nTITLE: Plugin Specification with Mode-Specific Key Mappings - Lua\nDESCRIPTION: This example shows how to use the `keys` option to define key mappings, including specifying the mode.  In this case, `<C-x>` is mapped only in normal mode ('n').\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\n{\n  \"monaqa/dial.nvim\",\n  -- lazy-load on keys\n  -- mode is `n` by default. For more advanced options, check the section on key mappings\n  keys = { \"<C-a>\", { \"<C-x>\", mode = \"n\" } },\n},\n\n```\n\n----------------------------------------\n\nTITLE: Plugin Specification with Custom URL - Lua\nDESCRIPTION: This example demonstrates how to use the `url` option to fetch a plugin from a custom Git URL. This is useful when the plugin is not available on the default GitHub repository or requires a specific branch or commit.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\n{\n  url = \"git@github.com:folke/noice.nvim.git\" },\n\n```\n\n----------------------------------------\n\nTITLE: Running Repro.lua with Neovim Shell\nDESCRIPTION: This command line snippet demonstrates how to run the `repro.lua` script using Neovim. It uses the `-u` flag to load the script as the init file, which configures Neovim with the specific plugin setup for reproducing an issue.  This allows for consistent and isolated testing.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_53\n\nLANGUAGE: sh\nCODE:\n```\nnvim -u repro.lua\n```\n\n----------------------------------------\n\nTITLE: Reproducible Issue Setup Lua\nDESCRIPTION: This Lua snippet configures lazy.nvim to create a reproducible issue report. It sets the `LAZY_STDPATH` and loads the bootstrap script, then configures lazy.nvim with a specific set of plugins using the `lazy.minit.repro` function. This setup isolates the issue to a specific set of plugins.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_52\n\nLANGUAGE: lua\nCODE:\n```\nvim.env.LAZY_STDPATH = \".repro\"\nload(vim.fn.system(\"curl -s https://raw.githubusercontent.com/folke/lazy.nvim/main/bootstrap.lua\"))()\n\nrequire(\"lazy.minit\").repro({\n  spec = {\n    \"stevearc/conform.nvim\",\n    \"nvim-neotest/nvim-nio\",\n  },\n})\n\n-- do anything else you need to do to reproduce the issue\n```\n\n----------------------------------------\n\nTITLE: Inspecting Test Environment Shell\nDESCRIPTION: This command line snippet demonstrates how to inspect the test environment in Neovim using the `-u` flag. It loads the specified Lua file, setting it as the init file. It allows examining and debugging the configuration and setup specific to the test environment.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_51\n\nLANGUAGE: sh\nCODE:\n```\nnvim -u ./tests/busted.lua\n```\n\n----------------------------------------\n\nTITLE: Busted Testing with lazy.nvim Lua\nDESCRIPTION: This code snippet configures lazy.nvim for testing with busted in LazyVim. It sets the `LAZY_STDPATH` and then loads the bootstrap script. It then configures lazy.nvim with a spec containing required plugins for testing purposes using `lazy.minit.busted` function.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_49\n\nLANGUAGE: lua\nCODE:\n```\n#!/usr/bin/env -S nvim -l\n\nvim.env.LAZY_STDPATH = \".tests\"\nload(vim.fn.system(\"curl -s https://raw.githubusercontent.com/folke/lazy.nvim/main/bootstrap.lua\"))()\n\n-- Setup lazy.nvim\nrequire(\"lazy.minit\").busted({\n  spec = {\n    \"LazyVim/starter\",\n    \"williamboman/mason-lspconfig.nvim\",\n    \"williamboman/mason.nvim\",\n    \"nvim-treesitter/nvim-treesitter\",\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Check for Updates Command (Lua)\nDESCRIPTION: This command checks for updates for plugins using the `lazy.check` function in Lua. The `opts` table allows customizing options such as `wait`, `show`, `plugins`, and `concurrency`.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_22\n\nLANGUAGE: Lua\nCODE:\n```\nrequire(\"lazy\").check(opts?)\n```\n\n----------------------------------------\n\nTITLE: Reload Plugin Command (Lua)\nDESCRIPTION: This command reloads a plugin using the `lazy.reload` function in Lua.  This is marked as experimental. The `opts` table allows customizing options such as `wait`, `show`, `plugins`, and `concurrency`.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_33\n\nLANGUAGE: Lua\nCODE:\n```\nrequire(\"lazy\").reload(opts)\n```\n\n----------------------------------------\n\nTITLE: Plugin Specification with Local Directory - Lua\nDESCRIPTION: This example illustrates how to configure a local plugin using the `dir` option, which specifies the directory containing the plugin. This is particularly useful for developing or testing plugins stored locally.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\n{\n  dir = \"~/projects/secret.nvim\" },\n\n```\n\n----------------------------------------\n\nTITLE: Toggle Help Page Command (Lua)\nDESCRIPTION: This command toggles the help page using the `lazy.help` function in Lua.  It displays documentation for lazy.nvim within Neovim.  No options are required.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_27\n\nLANGUAGE: Lua\nCODE:\n```\nrequire(\"lazy\").help()\n```\n\n----------------------------------------\n\nTITLE: Installing neorg: lazy.nvim Lua\nDESCRIPTION: Installs the nvim-neorg/neorg plugin with empty options. This demonstrates a simple plugin installation configuration using lazy.nvim.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n{ \"nvim-neorg/neorg\", opts = {} }\n```\n\n----------------------------------------\n\nTITLE: LazyMsg Class Definition Lua\nDESCRIPTION: This code snippet defines the `LazyMsg` class with TypeScript-style annotations, which is used for sending messages during plugin builds in lazy.nvim. It specifies the `msg` field as a string and an optional `level` field for specifying the log level of the message, offering more control on displayed information during the build process.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_47\n\nLANGUAGE: lua\nCODE:\n```\n---@class LazyMsg\n---@field msg string\n---@field level? number vim.log.levels.XXX\n```\n\n----------------------------------------\n\nTITLE: Installing luarocks package: lazy.nvim Lua\nDESCRIPTION: Installs a luarocks package from a GitHub URL. It retrieves the yaml library from lubyk's repository.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n{ \"https://github.com/lubyk/yaml\" }\n```\n\n----------------------------------------\n\nTITLE: Plugin Specification with Command and Initialization - Lua\nDESCRIPTION: This example shows how to lazy-load a plugin based on a command (`StartupTime`) and perform initialization during startup. The plugin `vim-startuptime` loads when the `StartupTime` command is executed. The `init` function is called during startup and can be used to set global variables or perform other initialization tasks.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\n{\n  \"dstein64/vim-startuptime\",\n  -- lazy-load on a command\n  cmd = \"StartupTime\",\n  -- init is called during startup. Configuration for vim plugins typically should be set in an init function\n  init = function()\n    vim.g.startuptime_tries = 10\n  end,\n},\n\n```\n\n----------------------------------------\n\nTITLE: Structured Setup: lazy.nvim Lua\nDESCRIPTION: Requires the config.lazy module. This is part of the structured setup and is used to import the lazy.nvim configuration.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nrequire(\"config.lazy\")\n```\n\n----------------------------------------\n\nTITLE: Lazy.nvim UI Icons Configuration (Unicode)\nDESCRIPTION: This Lua code snippet configures the UI icons for lazy.nvim, replacing the default Nerd Font icons with Unicode symbols.  This allows users who don't have a Nerd Font installed to still have visually distinct icons in the lazy.nvim UI.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_20\n\nLANGUAGE: lua\nCODE:\n```\n{\n  ui = {\n    icons = {\n      cmd = \"⌘\",\n      config = \"🛠\",\n      event = \"📅\",\n      ft = \"📂\",\n      init = \"⚙\",\n      keys = \"🗝\",\n      plugin = \"🔌\",\n      runtime = \"💻\",\n      require = \"🌙\",\n      source = \"📄\",\n      start = \"🚀\",\n      task = \"📌\",\n      lazy = \"💤 \",\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Custom RTP with Config Function (Lua)\nDESCRIPTION: This Lua code snippet demonstrates how to add a custom runtime path to a plugin using the `config` function in lazy.nvim. It appends the specified directory to `vim.opt.rtp`.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_40\n\nLANGUAGE: Lua\nCODE:\n```\nconfig = function(plugin)\n  vim.opt.rtp:append(plugin.dir .. \"/custom-rtp\")\nend\n```\n\n----------------------------------------\n\nTITLE: Run Checkhealth Command (Lua)\nDESCRIPTION: This command runs `:checkhealth lazy` using the `lazy.health` function in Lua.  It's used to verify the health of the lazy.nvim installation and its dependencies. No options are required.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_26\n\nLANGUAGE: Lua\nCODE:\n```\nrequire(\"lazy\").health()\n```\n\n----------------------------------------\n\nTITLE: Go Back to Plugin List Command (Lua)\nDESCRIPTION: This command navigates back to the plugin list using the `lazy.home` function in Lua. It provides a way to return to the main plugin management interface. No options are required.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_28\n\nLANGUAGE: Lua\nCODE:\n```\nrequire(\"lazy\").home()\n```\n\n----------------------------------------\n\nTITLE: Lazy.nvim Default Configuration - Lua\nDESCRIPTION: This snippet presents the default configuration for lazy.nvim, including options for the installation root directory, lazy loading behavior, version control, and concurrency limits. These defaults can be overridden when calling `setup()` to customize the plugin manager's behavior.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_18\n\nLANGUAGE: lua\nCODE:\n```\n{\n  root = vim.fn.stdpath(\"data\") .. \"/lazy\", -- directory where plugins will be installed\n  defaults = {\n    -- Set this to `true` to have all your plugins lazy-loaded by default.\n    -- Only do this if you know what you are doing, as it can lead to unexpected behavior.\n    lazy = false, -- should plugins be lazy-loaded?\n    -- It's recommended to leave version=false for now, since a lot the plugin that support versioning,\n    -- have outdated releases, which may break your Neovim install.\n    version = nil, -- always use the latest git commit\n    -- version = \"*\", -- try installing the latest stable version for plugins that support semver\n    -- default `cond` you can use to globally disable a lot of plugins\n    -- when running inside vscode for example\n    cond = nil, ---@type boolean|fun(self:LazyPlugin):boolean|nil\n  },\n  -- leave nil when passing the spec as the first argument to setup()\n  spec = nil, ---@type LazySpec\n  local_spec = true, -- load project specific .lazy.lua spec files. They will be added at the end of the spec.\n  lockfile = vim.fn.stdpath(\"config\") .. \"/lazy-lock.json\", -- lockfile generated after running update.\n  ---@type number? limit the maximum amount of concurrent tasks\n  concurrency = jit.os:find(\"Windows\") and (vim.uv.available_parallelism() * 2) or nil,\n  git = {\n    -- defaults for the `Lazy log` command\n    -- log = { \"--since=3 days ago\" }, -- show commits from the last 3 days\n    log = { \"-8\" }, -- show the last 8 commits\n    timeout = 120, -- kill processes that take more than 2 minutes\n    url_format = \"https://github.com/%s.git\",\n    -- lazy.nvim requires git >=2.19.0. If you really want to use lazy with an older version,\n\n```\n\n----------------------------------------\n\nTITLE: Show Detailed Profiling Command (Lua)\nDESCRIPTION: This command displays detailed profiling information using the `lazy.profile` function in Lua. It allows analyzing the performance of lazy.nvim. No options are required.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_32\n\nLANGUAGE: Lua\nCODE:\n```\nrequire(\"lazy\").profile()\n```\n\n----------------------------------------\n\nTITLE: Show Recent Updates Command (Lua)\nDESCRIPTION: This command displays recent updates using the `lazy.log` function in Lua. The `opts` table allows customizing options such as `wait`, `show`, `plugins`, and `concurrency`.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_31\n\nLANGUAGE: Lua\nCODE:\n```\nrequire(\"lazy\").log(opts?)\n```\n\n----------------------------------------\n\nTITLE: Show Debug Information Command (Lua)\nDESCRIPTION: This command displays debug information using the `lazy.debug` function in Lua. It doesn't require any options.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_25\n\nLANGUAGE: Lua\nCODE:\n```\nrequire(\"lazy\").debug()\n```\n\n----------------------------------------\n\nTITLE: Clear Finished Tasks Command (Lua)\nDESCRIPTION: This command clears finished tasks using the `lazy.clear` function in Lua. It doesn't require any options.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_24\n\nLANGUAGE: Lua\nCODE:\n```\nrequire(\"lazy\").clear()\n```\n\n----------------------------------------\n\nTITLE: Running Busted Tests with Neovim Shell\nDESCRIPTION: This command line snippet demonstrates how to run Busted tests using Neovim. It uses the `-l` flag to load the specified Lua file, which contains the Busted test suite definition.  The `tests` argument is likely the directory containing the tests.\nSOURCE: https://github.com/folke/lazy.nvim/blob/main/doc/lazy.nvim.txt#_snippet_50\n\nLANGUAGE: sh\nCODE:\n```\nnvim -l ./tests/busted.lua tests\n```"
  }
]