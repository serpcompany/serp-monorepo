[
  {
    "owner": "jqlang",
    "repo": "jq",
    "content": "TITLE: Running jq with Docker to extract JSON values\nDESCRIPTION: Examples of using the jq Docker image to process JSON data. The first example pipes a package.json file into the container to extract the version field, while the second example mounts the current directory as a volume.\nSOURCE: https://github.com/jqlang/jq/blob/master/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -i ghcr.io/jqlang/jq:latest < package.json '.version'\n```\n\n----------------------------------------\n\nTITLE: Object Projection with pick() Function\nDESCRIPTION: Shows usage of the new pick() builtin function that creates a projection of input objects or arrays, maintaining the structure while selecting specific paths.\nSOURCE: https://github.com/jqlang/jq/blob/master/NEWS.md#2025-04-14_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ jq -n '{\"a\": 1, \"b\": {\"c\": 2, \"d\": 3}, \"e\": 4} | pick(.a, .b.c, .x)'\n{\n  \"a\": 1,\n  \"b\": {\n    \"c\": 2\n  },\n  \"x\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Decimal Number Precision Handling in jq\nDESCRIPTION: Demonstrates how jq handles decimal number literals to preserve precision, including comparison operations and sorting. While precision is maintained for storage and comparison, arithmetic operations may still truncate values.\nSOURCE: https://github.com/jqlang/jq/blob/master/NEWS.md#2025-04-14_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# precision is preserved\n$ echo '100000000000000000' | jq .\n100000000000000000\n# comparison respects precision (this is false in JavaScript)\n$ jq -n '100000000000000000 < 100000000000000001'\ntrue\n# sort/0 works\n$ jq -n -c '[100000000000000001, 100000000000000003, 100000000000000004, 100000000000000002] | sort'\n[100000000000000001,100000000000000002,100000000000000003,100000000000000004]\n# arithmetic operations might truncate (same as JavaScript)\n$ jq -n '100000000000000000 + 10'\n100000000000000020\n```\n\n----------------------------------------\n\nTITLE: Using jq's --raw-output0 Option for NUL-Separated Output\nDESCRIPTION: Examples of using the new --raw-output0 option that separates outputs with NUL bytes (zero bytes) instead of newlines, which is useful with tools like xargs -0 and read -d '' in shell scripts.\nSOURCE: https://github.com/jqlang/jq/blob/master/NEWS.md#2025-04-14_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# will output a zero byte after each output\n$ jq -n --raw-output0 '1,2,3' | xxd\n00000000: 3100 3200 3300                           1.2.3.\n# can be used with xargs -0\n$ jq -n --raw-output0 '\"a\",\"b\",\"c\"' | xargs -0 -n1\na\nb\nc\n$ jq -n --raw-output0 '\"a b c\", \"d\\ne\\nf\"' | xargs -0 printf '[%s]\\n'\n[a b c]\n[d\ne\nf]\n# can be used with read -d ''\n$ while IFS= read -r -d '' json; do\n>   jq '.name' <<< \"$json\"\n> done < <(jq -n --raw-output0 '{name:\"a b c\"},{name:\"d\\ne\\nf\"}')\n\"a b c\"\n\"d\\ne\\nf\"\n# also it's an error to output a string containing a NUL when using NUL separator\n$ jq -n --raw-output0 '\"\\u0000\"'\njq: error (at <unknown>): Cannot dump a string containing NUL with --raw-output0 option\n```\n\n----------------------------------------\n\nTITLE: Demonstrating jq Exit Codes with --exit-code Option\nDESCRIPTION: Examples showing how jq's exit codes work with the --exit-code/-e option. True-ish values exit with 0, false-ish values (false and null) exit with 1, and empty outputs exit with 4.\nSOURCE: https://github.com/jqlang/jq/blob/master/NEWS.md#2025-04-14_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# true-ish last output value exits with zero\n$ jq -ne true ; echo $?\ntrue\n0\n# false-ish last output value (false and null) exits with 1\n$ jq -ne false ; echo $?\nfalse\n1\n# no output value exists with 4\n$ jq -ne empty ; echo $?\n4\n```\n\n----------------------------------------\n\nTITLE: Running jq with Docker using volume mounting\nDESCRIPTION: Example of using the jq Docker image with a mounted volume to process a JSON file. This approach mounts the current working directory and sets it as the working directory inside the container.\nSOURCE: https://github.com/jqlang/jq/blob/master/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -i -v \"$PWD:$PWD\" -w \"$PWD\" ghcr.io/jqlang/jq:latest '.version' package.json\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive Pattern Scanning with scan()\nDESCRIPTION: Shows the implementation of the scan($re; $flags) builtin function for pattern matching with support for flags like case-insensitive matching.\nSOURCE: https://github.com/jqlang/jq/blob/master/NEWS.md#2025-04-14_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n# look for pattern \"ab\" in \"abAB\" ignoring casing\n$ jq -n '\"abAB\" | scan(\"ab\"; \"i\")'\n\"ab\"\n\"AB\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Statement Without Else Branch\nDESCRIPTION: Demonstrates the new capability to use if statements without an else branch, where the default behavior is to use the identity function (.) when the else branch is omitted.\nSOURCE: https://github.com/jqlang/jq/blob/master/NEWS.md#2025-04-14_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n# convert 1 to \"one\" otherwise keep as is\n$ jq -n '1,2 | if . == 1 then \"one\" end'\n\"one\"\n2\n# behaves the same as\n$ jq -n '1,2 | if . == 1 then \"one\" else . end'\n\"one\"\n2\n# also works with elif\n$ jq -n '1,2,3 | if . == 1 then \"one\" elif . == 2 then \"two\" end\n\"one\"\n\"two\"\n3\n```\n\n----------------------------------------\n\nTITLE: Variable Binding in Object Keys\nDESCRIPTION: Shows how to use variable bindings directly as keys in object literals without requiring parentheses.\nSOURCE: https://github.com/jqlang/jq/blob/master/NEWS.md#2025-04-14_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n$ jq -n '\"a\" as $key | {$key: 123}'\n{\n  \"a\": 123\n}\n# previously parentheses were needed\n$ jq -n '\"a\" as $key | {($key): 123}'\n{\n  \"a\": 123\n}\n```\n\n----------------------------------------\n\nTITLE: Improved Dot Notation with Indexed Access\nDESCRIPTION: Demonstrates the new flexibility in dot notation when using indexed access with [\"index\"] syntax.\nSOURCE: https://github.com/jqlang/jq/blob/master/NEWS.md#2025-04-14_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n$ jq -n '{\"a\": {\"b\": 123}} | .a[\"b\"]'\n123\n# now this also works\n$ jq -n '{\"a\": {\"b\": 123}} | .a.[\"b\"]'\n123\n```\n\n----------------------------------------\n\nTITLE: Enhanced Array Iterator Syntax\nDESCRIPTION: Shows the new capability to use dot notation with array iterators, making the syntax more consistent with other dot operations.\nSOURCE: https://github.com/jqlang/jq/blob/master/NEWS.md#2025-04-14_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n$ jq -n '{\"a\": [123]} | .a[]'\n123\n# now this also works\n$ jq -n '{\"a\": [123]} | .a.[]'\n123\n```\n\n----------------------------------------\n\nTITLE: Array Element Deletion with Empty Assignment\nDESCRIPTION: Demonstrates the fixed functionality of removing array elements by assigning empty, particularly useful for filtering arrays.\nSOURCE: https://github.com/jqlang/jq/blob/master/NEWS.md#2025-04-14_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\n# now this works as expected, filter out all values over 2 by assigning empty\n$ jq -c '(.[] | select(. >= 2)) |= empty' <<< '[1,5,3,0,7]'\n[1,0]\n```\n\n----------------------------------------\n\nTITLE: Enhanced Debug Function with Message Filtering\nDESCRIPTION: Demonstrates the new debug(msgs) builtin that allows filtering of debug output before writing to stderr, providing more control over debug information.\nSOURCE: https://github.com/jqlang/jq/blob/master/NEWS.md#2025-04-14_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ jq -n '1 as $x | 2 | debug(\"Entering function foo with $x == \\($x)\", .) | (.+1)'\n[\"DEBUG:\",\"Entering function foo with $x == 1\"]\n[\"DEBUG:\",2]\n3\n$ jq -n '{a: 1, b: 2, c: 3} | debug({a, b, sum: (.a+.b)})'\n[\"DEBUG:\",{\"a\":1,\"b\":2,\"sum\":3}]\n{\n  \"a\": 1,\n  \"b\": 2,\n  \"c\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring jq Object Key Colors Using JQ_COLORS Environment Variable\nDESCRIPTION: Example demonstrating how to customize jq's color output by setting the JQ_COLORS environment variable. In this example, field names are configured to appear as bold yellow text.\nSOURCE: https://github.com/jqlang/jq/blob/master/NEWS.md#2025-04-14_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# this would make \"field\" bold yellow (`1;33`, the last value)\n$ JQ_COLORS=\"0;90:0;37:0;37:0;37:0;32:1;37:1;37:1;33\" ./jq -n '{field: 123}'\n{\n  \"field\": 123\n}\n```\n\n----------------------------------------\n\nTITLE: Building jq from source\nDESCRIPTION: Console commands for building jq from source code. This includes initializing git submodules, running autoconf, configuring with builtin Oniguruma library, and making the project with parallel processing.\nSOURCE: https://github.com/jqlang/jq/blob/master/README.md#2025-04-14_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ngit submodule update --init    # if building from git to get oniguruma\nautoreconf -i                  # if building from git\n./configure --with-oniguruma=builtin\nmake clean                     # if upgrading from a version previously built from source\nmake -j8\nmake check\nsudo make install\n```\n\n----------------------------------------\n\nTITLE: Building a statically linked version of jq\nDESCRIPTION: Command to build a statically linked version of jq, which includes all dependencies in a single executable file for better portability.\nSOURCE: https://github.com/jqlang/jq/blob/master/README.md#2025-04-14_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nmake LDFLAGS=-all-static\n```\n\n----------------------------------------\n\nTITLE: Building jq Project Website\nDESCRIPTION: Command to build the jq project website using the Python script. This should be run in the docs/ directory after setting up the Python environment.\nSOURCE: https://github.com/jqlang/jq/blob/master/docs/README.md#2025-04-14_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npipenv run python3 build_website.py\n```\n\n----------------------------------------\n\nTITLE: Serving jq Documentation Locally\nDESCRIPTION: Command to serve the generated documentation locally using Python's built-in HTTP server. This allows for easy preview of the generated website.\nSOURCE: https://github.com/jqlang/jq/blob/master/docs/README.md#2025-04-14_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m http.server -d output\n```\n\n----------------------------------------\n\nTITLE: Configuring jq Project for Documentation Generation\nDESCRIPTION: Command to reconfigure the jq project with documentation generation enabled. This should be run in the jq root directory after setting up the Python environment.\nSOURCE: https://github.com/jqlang/jq/blob/master/docs/README.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./configure --enable-docs\n```\n\n----------------------------------------\n\nTITLE: Building jq Manpage Manually\nDESCRIPTION: Command to manually build the jq manpage using the Makefile. This can be run after configuring the project with documentation enabled.\nSOURCE: https://github.com/jqlang/jq/blob/master/docs/README.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake jq.1\n```\n\n----------------------------------------\n\nTITLE: Updating Manual Tests for jq\nDESCRIPTION: Command to update the manual tests for jq. This ensures that the documentation tests are in sync with the current state of the project.\nSOURCE: https://github.com/jqlang/jq/blob/master/docs/README.md#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake tests/man.test\n```\n\n----------------------------------------\n\nTITLE: Installing pipenv for Python Documentation Generation\nDESCRIPTION: Command to install pipenv, a dependency management tool for Python, which is required for building the jq documentation. Note that pip3 may be needed instead of pip on some systems.\nSOURCE: https://github.com/jqlang/jq/blob/master/docs/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pipenv\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Virtual Environment for Documentation Build\nDESCRIPTION: Commands to create and activate a Python virtual environment, which may be necessary before running pipenv sync. This ensures a clean, isolated environment for building the documentation.\nSOURCE: https://github.com/jqlang/jq/blob/master/docs/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvirtualenv -p /usr/bin/python3 venv/\nsource venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Compiling Basic decNumber Example\nDESCRIPTION: Command for compiling example1.c with core decNumber components using gcc compiler. Links decNumber.c and decContext.c to create an executable.\nSOURCE: https://github.com/jqlang/jq/blob/master/vendor/decNumber/readme.txt#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcc -o example1 example1.c decNumber.c decContext.c\n```\n\n----------------------------------------\n\nTITLE: Running decNumber Example\nDESCRIPTION: Example command showing how to run the compiled example1 program with numeric arguments to perform addition.\nSOURCE: https://github.com/jqlang/jq/blob/master/vendor/decNumber/readme.txt#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexample1 1.23 1.27\n```\n\n----------------------------------------\n\nTITLE: SHA-256 Checksums for jq 1.5rc2 Releases\nDESCRIPTION: A list of SHA-256 hash values for jq version 1.5rc2 releases across different platforms and distribution formats. The checksums are used to verify the integrity of downloaded files.\nSOURCE: https://github.com/jqlang/jq/blob/master/sig/v1.5rc2/sha256sum.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n2fd209ca34d0891499bd32f59ec332b0b3048c449c388d428e5c5e8132a13e81  jq-1.5rc2.tar.gz\nfb7c57cbce7073ec18f669a313e956864dfafc58bb0c1a158881335ad7daeb58  jq-1.5rc2.zip\n7ece904edef3f951ca0c6f68cdb14e782d52aa46624fe2de9cfabfbd98fe5797  jq-linux-x86\ncced974e1f2c50d6203e09c2e3ede44075c4f35601233378deaf7bfedb2b4aa9  jq-linux-x86_64\n25f930463c94414fbff1ba5d76a9547259073e8acb19f709880e913ab58586e1  jq-osx-x86_64\n8bf6bad065dfe5bfaa4c22a9ca80fddf8bdffc06b8fc768040e4fd88fbe5f58a  jq-win32.exe\nf8301b1279ac95e09fa9bfb1b38d411e68590bedcbe70d27ede7a70955d855dd  jq-win64.exe\n```\n\n----------------------------------------\n\nTITLE: Listing SHA-256 Checksums for JQ Binaries\nDESCRIPTION: This snippet provides SHA-256 checksums for JQ binaries across different platforms and architectures. It includes checksums for Linux (x86 and x86_64), macOS (x86 and x86_64), and Windows (32-bit and 64-bit) versions.\nSOURCE: https://github.com/jqlang/jq/blob/master/sig/v1.3/sha256sum.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncf4b0b3e505958843375ac153d84ad6ee40196aa76ee373b0409f858b3cbf925  jq-linux-x86\ndbacac81ebc00a7387e4c5e539a7a475981a1ac6ada20a2f6b1d8f950027751e  jq-linux-x86_64\n4095a48b50b754c8b3199b9c069fa9c3da0e737d8809af3205d1bf69f87cab6e  jq-osx-x86\nbce52800c943ff10d1ffd9c1a7e7aeddbc7bcecd7a2b05c6afb828399dbfa39f  jq-osx-x86_64\nc8e2ffb5b0536a50430ef9b4708a40686e4352db5c01ae90a98ba96660e5bc36  jq-win32.exe\nd041fdfd8b3aa3832eedf2aafad5002f2b47fb59373b71190a01422de825911f  jq-win64.exe\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access in robots.txt\nDESCRIPTION: This snippet defines the global rules for web crawlers accessing the jq project repository. It allows unrestricted access to all resources for all user agents.\nSOURCE: https://github.com/jqlang/jq/blob/master/docs/public/robots.txt#2025-04-14_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nAllow: /\n```"
  }
]