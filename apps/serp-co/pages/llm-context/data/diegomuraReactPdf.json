[
  {
    "owner": "diegomura",
    "repo": "react-pdf",
    "content": "TITLE: Computing Styles with @react-pdf/stylesheet in Javascript\nDESCRIPTION: This code snippet demonstrates how to use the `stylesheet` function from the `@react-pdf/stylesheet` library to compute styles based on a container and a style object. The container defines the width, height, and orientation, while the style object contains raw styles that will be normalized.\nSOURCE: https://github.com/diegomura/react-pdf/blob/master/packages/stylesheet/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport stylesheet from '@react-pdf/stylesheet';\n\nconst container = {\n  width: 400,\n  height: 600,\n  orientation: 'portrait',\n};\n\nconst style = {\n  margin: 20,\n  width: '50vw',\n  height: '20vh',\n  borderRadius: 5,\n  fontWeight: 'semibold',\n  borderBottom: '2 solid yellow',\n  '@media max-width: 500': {\n    backgroundColor: 'rgb(255, 0, 0)',\n  },\n};\n\nconst computed = stylesheet(container, style);\n\n// Computed\n// {\n//   width: 200,\n//   height: 120,\n//   marginTop: 20,\n//   marginLeft: 20,\n//   marginRight: 20,\n//   marginBottom: 20,\n//   marginBottom: 20,\n//   borderTopLeftRadius: 5,\n//   borderTopRightRadius: 5,\n//   borderBottomLeftRadius: 5,\n//   borderBottomRightRadius: 5,\n//   fontWeight: 600,\n//   borderBottomWidth: 2,\n//   borderBottomStyle: 'solid',\n//   borderBottomColor: 'yellow',\n//   backgroundColor: '#FF0000'\n// }\n\n```\n\n----------------------------------------\n\nTITLE: Creating a PDF Document Component\nDESCRIPTION: This code snippet demonstrates how to create a basic PDF document component using React and @react-pdf/renderer. It imports necessary components, defines styles for the page and sections, and creates a functional component `MyDocument` that represents the PDF document structure. The component includes two sections with sample text.\nSOURCE: https://github.com/diegomura/react-pdf/blob/master/README.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Document, Page, Text, View, StyleSheet } from '@react-pdf/renderer';\n\n// Create styles\nconst styles = StyleSheet.create({\n  page: {\n    flexDirection: 'row',\n    backgroundColor: '#E4E4E4',\n  },\n  section: {\n    margin: 10,\n    padding: 10,\n    flexGrow: 1,\n  },\n});\n\n// Create Document Component\nconst MyDocument = () => (\n  <Document>\n    <Page size=\"A4\" style={styles.page}>\n      <View style={styles.section}>\n        <Text>Section #1</Text>\n      </View>\n      <View style={styles.section}>\n        <Text>Section #2</Text>\n      </View>\n    </Page>\n  </Document>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering a React-pdf document\nDESCRIPTION: This JavaScript snippet demonstrates how to render a React-pdf document using the @react-pdf/render package. It imports the render function and primitives, defines a simple view and document structure, and renders it to a provided context.\nSOURCE: https://github.com/diegomura/react-pdf/blob/master/packages/render/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport render from '@react-pdf/render';\nimport primitives from '@react-pdf/primitives';\n\nconst view = {\n  type: primitives.View,\n  style: {\n    backgroundColor: 'red',\n    borderTopLeftRadius: 5,\n    borderTopRightRadius: 10,\n    borderBottomLeftRadius: 0,\n    borderBottomRightRadius: 15,\n    borderTopColor: 'yellow',\n    borderLeftColor: 'green',\n    borderBottomColor: 'black',\n    borderRightColor: 'purple',\n  },\n  box: {\n    left: 20,\n    top: 20,\n    width: 100,\n    height: 80,\n    borderTopWidth: 3,\n    borderLeftWidth: 2,\n    borderBottomWidth: 1,\n    borderRightWidth: 4,\n  },\n};\n\nconst doc = {\n  type: primitives.Document,\n  children: [\n    {\n      type: primitives.Page,\n      box: { width: 400, height: 600 },\n      children: [view],\n    },\n  ],\n};\n\n// Provide your own context\nconst ctx = createContext();\n\nrender.default(ctx, doc);\n```\n\n----------------------------------------\n\nTITLE: Rendering PDF in Browser\nDESCRIPTION: This code shows how to render the PDF document created in the previous example within a web browser using the `PDFViewer` component from `@react-pdf/renderer`. It imports `React`, `ReactDOM`, and `PDFViewer`, creates an `App` component that wraps `MyDocument` with `PDFViewer`, and renders the `App` component into the `root` element of the HTML document.\nSOURCE: https://github.com/diegomura/react-pdf/blob/master/README.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { PDFViewer } from '@react-pdf/renderer';\n\nconst App = () => (\n  <PDFViewer>\n    <MyDocument />\n  </PDFViewer>\n);\n\nReactDOM.render(<App />, document.getElementById('root'));\n```\n\n----------------------------------------\n\nTITLE: Using usePDF Hook to Update Document - JSX\nDESCRIPTION: This snippet demonstrates how to use the `usePDF` hook's `update` function to re-render a PDF document. The `update` function takes a new PDF document as input and renders it. The example shows a basic implementation within a React functional component, utilizing `useEffect` to trigger the update upon component mount.\nSOURCE: https://github.com/diegomura/react-pdf/blob/master/packages/renderer/CHANGELOG.md#_snippet_9\n\nLANGUAGE: JSX\nCODE:\n```\nconst PdfView = () => {\n  const [pdf, update] = usePdf();\n\n  useEffect(() => {\n    update(<PDFDocument />);\n  }, []);\n\n  if (pdf.loading) return null;\n\n  // use your PDF here\n  return <>{pdf.url}</>;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating PDF Document Component\nDESCRIPTION: This snippet demonstrates how to create a basic PDF document component using React-PDF. It imports necessary components from '@react-pdf/renderer', defines styles, and creates a MyDocument component that renders a PDF document with two sections.\nSOURCE: https://github.com/diegomura/react-pdf/blob/master/packages/renderer/README.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Document, Page, Text, View, StyleSheet } from '@react-pdf/renderer';\n\n// Create styles\nconst styles = StyleSheet.create({\n  page: {\n    flexDirection: 'row',\n    backgroundColor: '#E4E4E4',\n  },\n  section: {\n    margin: 10,\n    padding: 10,\n    flexGrow: 1,\n  },\n});\n\n// Create Document Component\nconst MyDocument = () => (\n  <Document>\n    <Page size=\"A4\" style={styles.page}>\n      <View style={styles.section}>\n        <Text>Section #1</Text>\n      </View>\n      <View style={styles.section}>\n        <Text>Section #2</Text>\n      </View>\n    </Page>\n  </Document>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Rendering PDF in Browser\nDESCRIPTION: This code shows how to render the PDF document component created earlier inside a web browser. It imports ReactDOM and PDFViewer from '@react-pdf/renderer' and uses ReactDOM.render to display the PDF document within a div element with the id 'root'.\nSOURCE: https://github.com/diegomura/react-pdf/blob/master/packages/renderer/README.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport ReactDOM from 'react-dom';\nimport { PDFViewer } from '@react-pdf/renderer';\n\nconst App = () => (\n  <PDFViewer>\n    <MyDocument />\n  </PDFViewer>\n);\n\nReactDOM.render(<App />, document.getElementById('root'));\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server (Bash)\nDESCRIPTION: This command starts the Next.js development server, allowing you to view and interact with your application in a browser. It uses npm, yarn, pnpm or bun to execute the 'dev' script defined in your package.json file. The server typically runs on http://localhost:3000.\nSOURCE: https://github.com/diegomura/react-pdf/blob/master/packages/examples/next-15/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Node.js PNG Decoding Example (JavaScript)\nDESCRIPTION: This JavaScript code snippet demonstrates how to decode a PNG image in Node.js using the `png-js` library. It imports the PNG module and uses the `PNG.decode` function to decode the image asynchronously. The callback function receives the pixel data as a 1D array in RGBA order.\nSOURCE: https://github.com/diegomura/react-pdf/blob/master/packages/png-js/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport PNG from 'png-js';\nPNG.decode('some.png', function(pixels) {\n    // pixels is a 1d array (in rgba order) of decoded pixel data\n});\n```\n\n----------------------------------------\n\nTITLE: Saving PDF to File in Node.js\nDESCRIPTION: This snippet illustrates how to save the PDF document to a file in a Node.js environment. It imports `React` and `ReactPDF` from `@react-pdf/renderer`, and uses the `ReactPDF.render` method to render the `MyDocument` component to a file named `example.pdf` in the current directory.\nSOURCE: https://github.com/diegomura/react-pdf/blob/master/README.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport ReactPDF from '@react-pdf/renderer';\n\nReactPDF.render(<MyDocument />, `${__dirname}/example.pdf`);\n```\n\n----------------------------------------\n\nTITLE: Generating a PDF document with react-pdf/render\nDESCRIPTION: This example demonstrates how to render a document to a PDF file using @react-pdf/render and pdfkit. It creates a PDF document, renders the react-pdf document to it, and then writes the output to a file.\nSOURCE: https://github.com/diegomura/react-pdf/blob/master/packages/render/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport fs from 'fs';\nimport render from '@react-pdf/render';\nimport pdfkit from '@react-pdf/pdfkit';\n\nconst PDFDocument = pdfkit.default;\n\nconst ctx = new PDFDocument({ autoFirstPage: false });\n\nconst doc = {}; // See above\n\nrender.default(ctx, doc);\n\nconst stream = fs.createWriteStream('./test.pdf');\n\nctx.pipe(stream);\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: This command starts the Next.js development server, which allows you to view and interact with your application in a browser. The server typically runs on http://localhost:3000. It supports using npm, yarn, pnpm, or bun as package managers.\nSOURCE: https://github.com/diegomura/react-pdf/blob/master/packages/examples/next-14/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Browser PNG Loading Example (HTML/JavaScript)\nDESCRIPTION: This HTML snippet demonstrates how to load and display a PNG image in a browser using the `png.js` and `zlib.js` libraries. It creates a canvas element and uses `PNG.load` to load the image and render it on the canvas.\nSOURCE: https://github.com/diegomura/react-pdf/blob/master/packages/png-js/README.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<canvas></canvas>\n<script src=\"zlib.js\"></script>\n<script src=\"png.js\"></script>\n<script>\n    var canvas = document.getElementsByTagName('canvas')[0];\n    PNG.load('some.png', canvas);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Saving PDF to File (Node.js)\nDESCRIPTION: This example demonstrates how to save the PDF document component to a file in a Node.js environment. It imports ReactPDF from '@react-pdf/renderer' and uses ReactPDF.render to render the PDF to a file named example.pdf in the current directory.\nSOURCE: https://github.com/diegomura/react-pdf/blob/master/packages/renderer/README.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport ReactPDF from '@react-pdf/renderer';\n\nReactPDF.render(<MyDocument />, `${__dirname}/example.pdf`);\n```\n\n----------------------------------------\n\nTITLE: Adding Form Annotation Support in React-PDF\nDESCRIPTION: This commit introduces support for Form Annotations within react-pdf. This allows the creation of interactive PDF forms with elements such as text fields, checkboxes, and radio buttons.\nSOURCE: https://github.com/diegomura/react-pdf/blob/master/packages/renderer/CHANGELOG.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Adding xLinkHref, gradientTransform, gradientUnits support in React-PDF\nDESCRIPTION: This snippet describes the addition of `xLinkHref`, `gradientTransform`, and `gradientUnits` support to the react-pdf library. This enables more advanced SVG gradient features within generated PDF documents.\nSOURCE: https://github.com/diegomura/react-pdf/blob/master/packages/renderer/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Fix PDFDownloadLinkProps Type Error in React-PDF\nDESCRIPTION: This patch fixes a type error related to the `PDFDownloadLinkProps` in react-pdf. This resolves an issue where the type definitions for the PDF download link component were incorrect.\nSOURCE: https://github.com/diegomura/react-pdf/blob/master/packages/renderer/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Fixing debug prop in React-PDF\nDESCRIPTION: This snippet refers to a fix for the `debug` property within the react-pdf library. This likely addresses an issue where the debug prop was not functioning as expected.\nSOURCE: https://github.com/diegomura/react-pdf/blob/master/packages/renderer/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Node.js PNG Installation (Shell)\nDESCRIPTION: This shell command demonstrates how to install the `png-js` module using npm. It assumes you have Node.js and npm installed on your system.\nSOURCE: https://github.com/diegomura/react-pdf/blob/master/packages/png-js/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nsudo npm install png-js\n```\n\n----------------------------------------\n\nTITLE: Dropping CJS support in React-PDF\nDESCRIPTION: This major change drops support for CommonJS (CJS) format in react-pdf. The library now only supports ECMAScript Modules (ESM).\nSOURCE: https://github.com/diegomura/react-pdf/blob/master/packages/renderer/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Installing @react-pdf/types package with Yarn\nDESCRIPTION: This command installs the @react-pdf/types package using the Yarn package manager. This package provides TypeScript definitions for the react-pdf library, enabling type checking and autocompletion features.\nSOURCE: https://github.com/diegomura/react-pdf/blob/master/packages/types/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @react-pdf/types\n```\n\n----------------------------------------\n\nTITLE: Fix note rendering in React-PDF\nDESCRIPTION: This patch fixes an issue related to note rendering in react-pdf. This likely resolves problems with how notes or annotations were displayed in generated PDF documents.\nSOURCE: https://github.com/diegomura/react-pdf/blob/master/packages/renderer/CHANGELOG.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Add gap percentage support in React-PDF\nDESCRIPTION: This commit adds the ability to specify gap sizes as a percentage within react-pdf layouts. This provides more flexible control over element spacing.\nSOURCE: https://github.com/diegomura/react-pdf/blob/master/packages/renderer/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Installing React-PDF Renderer\nDESCRIPTION: Command to install the @react-pdf/renderer package using yarn.  This command adds the library as a dependency to your project, allowing you to use it for generating PDFs.\nSOURCE: https://github.com/diegomura/react-pdf/blob/master/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @react-pdf/renderer\n```\n\n----------------------------------------\n\nTITLE: Installing @react-pdf/fns with yarn\nDESCRIPTION: This command installs the @react-pdf/fns package as a dependency in your project using yarn. It is necessary to have yarn installed to use this command.\nSOURCE: https://github.com/diegomura/react-pdf/blob/master/packages/fns/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @react-pdf/fns\n```\n\n----------------------------------------\n\nTITLE: Add React 19 support in React-PDF\nDESCRIPTION: This commit introduces support for React 19 in react-pdf. This ensures compatibility with the latest version of React and its new features.\nSOURCE: https://github.com/diegomura/react-pdf/blob/master/packages/renderer/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Pre-bundle and bump react-reconciler in React-PDF\nDESCRIPTION: This commit pre-bundles the react-pdf package and updates the react-reconciler dependency. This aims to improve performance and reduce bundle size.\nSOURCE: https://github.com/diegomura/react-pdf/blob/master/packages/renderer/CHANGELOG.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Installing @react-pdf/pdfkit with npm\nDESCRIPTION: This snippet shows how to install the @react-pdf/pdfkit package using npm. It's a standard npm install command.\nSOURCE: https://github.com/diegomura/react-pdf/blob/master/packages/pdfkit/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-pdf/pdfkit\n```\n\n----------------------------------------\n\nTITLE: Installing @react-pdf/stylesheet\nDESCRIPTION: This command installs the @react-pdf/stylesheet package using yarn. It is a prerequisite for using the style computation functionality provided by the library.\nSOURCE: https://github.com/diegomura/react-pdf/blob/master/packages/stylesheet/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @react-pdf/stylesheet\n```\n\n----------------------------------------\n\nTITLE: Installing @react-pdf/render with yarn\nDESCRIPTION: Installs the @react-pdf/render package using yarn. This is a necessary first step before using the render engine.\nSOURCE: https://github.com/diegomura/react-pdf/blob/master/packages/render/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nyarn add @react-pdf/render\n```\n\n----------------------------------------\n\nTITLE: Installing React-PDF Renderer\nDESCRIPTION: This command installs the @react-pdf/renderer package using yarn. This package is required to create PDF documents using React components.\nSOURCE: https://github.com/diegomura/react-pdf/blob/master/packages/renderer/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @react-pdf/renderer\n```"
  }
]