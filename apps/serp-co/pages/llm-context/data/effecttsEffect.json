[
  {
    "owner": "effect-ts",
    "repo": "effect",
    "content": "TITLE: Retrieving JSON Data with HttpClient in TypeScript\nDESCRIPTION: Shows how to use the HttpClient service to send a GET request and process a JSON response. This example demonstrates accessing the HttpClient service, creating a GET request, and extracting JSON data from the response.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FetchHttpClient, HttpClient } from \"@effect/platform\"\nimport { Effect } from \"effect\"\n\nconst program = Effect.gen(function* () {\n  // Access HttpClient\n  const client = yield* HttpClient.HttpClient\n\n  // Create and execute a GET request\n  const response = yield* client.get(\n    \"https://jsonplaceholder.typicode.com/posts/1\"\n  )\n\n  const json = yield* response.json\n\n  console.log(json)\n}).pipe(\n  // Provide the HttpClient\n  Effect.provide(FetchHttpClient.layer)\n)\n\nEffect.runPromise(program)\n/*\nOutput:\n{\n  userId: 1,\n  id: 1,\n  title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n  body: 'quia et suscipit\\n' +\n    'suscipit recusandae consequuntur expedita et cum\\n' +\n    'reprehenderit molestiae ut ut quas totam\\n' +\n    'nostrum rerum est autem sunt rem eveniet architecto'\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Converting HttpApi to Web Handler in TypeScript\nDESCRIPTION: Demonstrates how to convert an HttpApi implementation into a web handler and serve it using a custom Node.js HTTP server. This example creates an API with a single GET endpoint, converts it to a web handler, and sets up a server to handle incoming requests.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  HttpApi,\n  HttpApiBuilder,\n  HttpApiEndpoint,\n  HttpApiGroup,\n  HttpApiSwagger,\n  HttpServer\n} from \"@effect/platform\"\nimport { Effect, Layer, Schema } from \"effect\"\nimport * as http from \"node:http\"\n\nconst api = HttpApi.make(\"myApi\").add(\n  HttpApiGroup.make(\"group\").add(\n    HttpApiEndpoint.get(\"get\", \"/\").addSuccess(Schema.String)\n  )\n)\n\nconst groupLive = HttpApiBuilder.group(api, \"group\", (handlers) =>\n  handlers.handle(\"get\", () => Effect.succeed(\"Hello, world!\"))\n)\n\nconst MyApiLive = HttpApiBuilder.api(api).pipe(Layer.provide(groupLive))\n\nconst SwaggerLayer = HttpApiSwagger.layer().pipe(Layer.provide(MyApiLive))\n\n// Convert the API to a web handler\nconst { dispose, handler } = HttpApiBuilder.toWebHandler(\n  Layer.mergeAll(MyApiLive, SwaggerLayer, HttpServer.layerContext)\n)\n\n// Serving the handler using a custom HTTP server\nhttp\n  .createServer(async (req, res) => {\n    const url = `http://${req.headers.host}${req.url}`\n    const init: RequestInit = {\n      method: req.method!\n    }\n\n    const response = await handler(new Request(url, init))\n\n    res.writeHead(\n      response.status,\n      response.statusText,\n      Object.fromEntries(response.headers.entries())\n    )\n    const responseBody = await response.arrayBuffer()\n    res.end(Buffer.from(responseBody))\n  })\n  .listen(3000, () => {\n    console.log(\"Server running at http://localhost:3000/\")\n  })\n  .on(\"close\", () => {\n    dispose()\n  })\n```\n\n----------------------------------------\n\nTITLE: Implementing Bearer Token Authentication Middleware in Effect.ts\nDESCRIPTION: Shows how to implement the bearer token authentication middleware by creating a Layer with security handlers. This example demonstrates validating a bearer token and returning a user object upon successful authentication.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  HttpApiMiddleware,\n  HttpApiSchema,\n  HttpApiSecurity\n} from \"@effect/platform\"\nimport { Context, Effect, Layer, Redacted, Schema } from \"effect\"\n\nclass User extends Schema.Class<User>(\"User\")({ id: Schema.Number }) {}\n\nclass Unauthorized extends Schema.TaggedError<Unauthorized>()(\n  \"Unauthorized\",\n  {},\n  HttpApiSchema.annotations({ status: 401 })\n) {}\n\nclass CurrentUser extends Context.Tag(\"CurrentUser\")<CurrentUser, User>() {}\n\nclass Authorization extends HttpApiMiddleware.Tag<Authorization>()(\n  \"Authorization\",\n  {\n    failure: Unauthorized,\n    provides: CurrentUser,\n    security: {\n      myBearer: HttpApiSecurity.bearer\n    }\n  }\n) {}\n\nconst AuthorizationLive = Layer.effect(\n  Authorization,\n  Effect.gen(function* () {\n    yield* Effect.log(\"creating Authorization middleware\")\n\n    // Return the security handlers for the middleware\n    return {\n      // Define the handler for the Bearer token\n      // The Bearer token is redacted for security\n      myBearer: (bearerToken) =>\n        Effect.gen(function* () {\n          yield* Effect.log(\n            \"checking bearer token\",\n            Redacted.value(bearerToken)\n          )\n          // Return a mock User object as the CurrentUser\n          return new User({ id: 1 })\n        })\n    }\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: HTTP API Client Derivation and Usage in TypeScript\nDESCRIPTION: Comprehensive example showing how to define an API, create a server implementation, and derive a type-safe client for making API calls.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  FetchHttpClient,\n  HttpApi,\n  HttpApiBuilder,\n  HttpApiClient,\n  HttpApiEndpoint,\n  HttpApiGroup,\n  HttpApiSchema,\n  HttpApiSwagger,\n  HttpMiddleware,\n  HttpServer\n} from \"@effect/platform\"\nimport { NodeHttpServer, NodeRuntime } from \"@effect/platform-node\"\nimport { DateTime, Effect, Layer, Schema } from \"effect\"\nimport { createServer } from \"node:http\"\n\nconst User = Schema.Struct({\n  id: Schema.Number,\n  name: Schema.String,\n  createdAt: Schema.DateTimeUtc\n})\n\nconst idParam = HttpApiSchema.param(\"id\", Schema.NumberFromString)\n\nconst usersGroup = HttpApiGroup.make(\"users\").add(\n  HttpApiEndpoint.get(\"getUser\")`/user/${idParam}`.addSuccess(User)\n)\n\nconst api = HttpApi.make(\"myApi\").add(usersGroup)\n```\n\n----------------------------------------\n\nTITLE: Defining Security Middleware with Bearer Authentication in Effect.ts\nDESCRIPTION: Demonstrates how to define security middleware for an HTTP API using the HttpApiSecurity module. This example shows how to create a Bearer token authentication middleware that can be applied to API endpoints or groups.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  HttpApi,\n  HttpApiEndpoint,\n  HttpApiGroup,\n  HttpApiMiddleware,\n  HttpApiSchema,\n  HttpApiSecurity\n} from \"@effect/platform\"\nimport { Context, Schema } from \"effect\"\n\n// Define a schema for the \"User\"\nclass User extends Schema.Class<User>(\"User\")({ id: Schema.Number }) {}\n\n// Define a schema for the \"Unauthorized\" error\nclass Unauthorized extends Schema.TaggedError<Unauthorized>()(\n  \"Unauthorized\",\n  {},\n  // Specify the HTTP status code for unauthorized errors\n  HttpApiSchema.annotations({ status: 401 })\n) {}\n\n// Define a Context.Tag for the authenticated user\nclass CurrentUser extends Context.Tag(\"CurrentUser\")<CurrentUser, User>() {}\n\n// Create the Authorization middleware\nclass Authorization extends HttpApiMiddleware.Tag<Authorization>()(\n  \"Authorization\",\n  {\n    // Define the error schema for unauthorized access\n    failure: Unauthorized,\n    // Specify the resource this middleware will provide\n    provides: CurrentUser,\n    // Add security definitions\n    security: {\n      // ┌─── Custom name for the security definition\n      // ▼\n      myBearer: HttpApiSecurity.bearer\n      // Additional security definitions can be added here.\n      // They will attempt to be resolved in the order they are defined.\n    }\n  }\n) {}\n\nconst api = HttpApi.make(\"api\")\n  .add(\n    HttpApiGroup.make(\"group\")\n      .add(\n        HttpApiEndpoint.get(\"get\", \"/\")\n          .addSuccess(Schema.String)\n          // Apply the middleware to a single endpoint\n          .middleware(Authorization)\n      )\n      // Or apply the middleware to the entire group\n      .middleware(Authorization)\n  )\n  // Or apply the middleware to the entire API\n  .middleware(Authorization)\n```\n\n----------------------------------------\n\nTITLE: Route Parameters Implementation\nDESCRIPTION: Example of implementing route parameters with schema validation using Effect HTTP server.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_77\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpRouter, HttpServer, HttpServerResponse } from \"@effect/platform\"\nimport { Effect, Schema } from \"effect\"\nimport { listen } from \"./listen.js\"\n\nconst Params = Schema.Struct({\n  userId: Schema.String,\n  bookId: Schema.String\n})\n\nconst router = HttpRouter.empty.pipe(\n  HttpRouter.get(\n    \"/users/:userId/books/:bookId\",\n    HttpRouter.schemaPathParams(Params).pipe(\n      Effect.flatMap((params) => HttpServerResponse.json(params))\n    )\n  )\n)\n\nconst app = router.pipe(HttpServer.serve())\n\nlisten(app, 3000)\n```\n\n----------------------------------------\n\nTITLE: Serving HTTP API with Middleware and Node.js Server\nDESCRIPTION: Configures and launches an HTTP server with logging, CORS middleware, and API implementation\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nconst HttpLive = HttpApiBuilder.serve(HttpMiddleware.logger).pipe(\n  Layer.provide(HttpApiBuilder.middlewareCors()),\n  Layer.provide(MyApiLive),\n  HttpServer.withLogAddress,\n  Layer.provide(NodeHttpServer.layer(createServer, { port: 3000 }))\n)\n\nLayer.launch(HttpLive).pipe(NodeRuntime.runMain)\n```\n\n----------------------------------------\n\nTITLE: Implementing Router-Level Middleware in Effect-TS\nDESCRIPTION: Demonstrates how to apply middleware at different router levels using the @effect/platform library. Includes implementation of custom logging middleware and route configuration with multiple middleware layers.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_84\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  HttpMiddleware,\n  HttpRouter,\n  HttpServer,\n  HttpServerResponse\n} from \"@effect/platform\"\nimport { Effect } from \"effect\"\nimport { listen } from \"./listen.js\"\n\nconst withMiddleware = (name: string) =>\n  HttpMiddleware.make((app) =>\n    Effect.gen(function* () {\n      console.log(name)\n      return yield* app\n    })\n  )\n\nconst router1 = HttpRouter.empty.pipe(\n  HttpRouter.get(\"/a\", HttpServerResponse.text(\"a\")),\n  HttpRouter.get(\"/b\", HttpServerResponse.text(\"b\")),\n  HttpRouter.use(withMiddleware(\"M1\")),\n  HttpRouter.get(\"/c\", HttpServerResponse.text(\"c\"))\n)\n\nconst router2 = HttpRouter.empty.pipe(\n  HttpRouter.get(\"/d\", HttpServerResponse.text(\"d\")),\n  HttpRouter.get(\"/e\", HttpServerResponse.text(\"e\")),\n  HttpRouter.get(\"/f\", HttpServerResponse.text(\"f\")),\n  HttpRouter.use(withMiddleware(\"M2\"))\n)\n\nconst router = HttpRouter.empty.pipe(\n  HttpRouter.mount(\"/r1\", router1),\n  HttpRouter.use(withMiddleware(\"M3\")),\n  HttpRouter.get(\"/g\", HttpServerResponse.text(\"g\")),\n  HttpRouter.mount(\"/r2\", router2),\n  HttpRouter.use(withMiddleware(\"M4\"))\n)\n\nconst app = router.pipe(HttpServer.serve())\n\nlisten(app, 3000)\n```\n\n----------------------------------------\n\nTITLE: Combining API Groups into a Top-Level API - TypeScript\nDESCRIPTION: This example illustrates how to combine multiple API groups into a single top-level HttpApi. It ensures that all endpoints and their respective schemas are encapsulated together for the complete API structure.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  HttpApi,\n  HttpApiEndpoint,\n  HttpApiGroup,\n  HttpApiSchema\n} from \"@effect/platform\"\nimport { Schema } from \"effect\"\n\nconst User = Schema.Struct({\n  id: Schema.Number,\n  name: Schema.String,\n  createdAt: Schema.DateTimeUtc\n})\n\nconst idParam = HttpApiSchema.param(\"id\", Schema.NumberFromString)\n\nconst getUsers = HttpApiEndpoint.get(\"getUsers\", \"/users\").addSuccess(\n  Schema.Array(User)\n)\n\nconst getUser = HttpApiEndpoint.get(\"getUser\")`/user/${idParam}`.addSuccess(\n  User\n)\n\nconst createUser = HttpApiEndpoint.post(\"createUser\", \"/users\")\n  .setPayload(\n    Schema.Struct({\n      name: Schema.String\n    })\n  )\n  .addSuccess(User)\n\nconst deleteUser = HttpApiEndpoint.del(\"deleteUser\")`/users/${idParam}`\n\nconst updateUser = HttpApiEndpoint.patch(\"updateUser\")`/users/${idParam}`\n  .setPayload(\n    Schema.Struct({\n      name: Schema.String\n    })\n  )\n  .addSuccess(User)\n\nconst usersGroup = HttpApiGroup.make(\"users\")\n  .add(getUsers)\n  .add(getUser)\n  .add(createUser)\n  .add(deleteUser)\n  .add(updateUser)\n\nconst api = HttpApi.make(\"myApi\").add(usersGroup)\n\n// Alternatively, create an opaque class for your API\nclass MyApi extends HttpApi.make(\"myApi\").add(usersGroup) {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic HTTP API Server with Effect Platform\nDESCRIPTION: Demonstrates creating a basic HTTP API with a single greeting endpoint using @effect/platform. Shows API definition, implementation, and server setup.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  HttpApi,\n  HttpApiBuilder,\n  HttpApiEndpoint,\n  HttpApiGroup\n} from \"@effect/platform\"\nimport { NodeHttpServer, NodeRuntime } from \"@effect/platform-node\"\nimport { Effect, Layer, Schema } from \"effect\"\nimport { createServer } from \"node:http\"\n\nconst MyApi = HttpApi.make(\"MyApi\").add(\n  HttpApiGroup.make(\"Greetings\").add(\n    HttpApiEndpoint.get(\"hello-world\")`/`.addSuccess(Schema.String)\n  )\n)\n\nconst GreetingsLive = HttpApiBuilder.group(MyApi, \"Greetings\", (handlers) =>\n  handlers.handle(\"hello-world\", () => Effect.succeed(\"Hello, World!\"))\n)\n\nconst MyApiLive = HttpApiBuilder.api(MyApi).pipe(Layer.provide(GreetingsLive))\n\nconst ServerLive = HttpApiBuilder.serve().pipe(\n  Layer.provide(MyApiLive),\n  Layer.provide(NodeHttpServer.layer(createServer, { port: 3000 }))\n)\n\nLayer.launch(ServerLive).pipe(NodeRuntime.runMain)\n```\n\n----------------------------------------\n\nTITLE: Defining Error Responses for API Endpoints - TypeScript\nDESCRIPTION: This snippet shows how to implement error handling for API endpoints by defining specific error types and assigning them to individual endpoints or groups. It demonstrates how to return structured errors for different failures such as 'UserNotFound' and 'Unauthorized'.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpApiEndpoint, HttpApiGroup, HttpApiSchema } from \"@effect/platform\"\nimport { Schema } from \"effect\"\n\nconst User = Schema.Struct({\n  id: Schema.Number,\n  name: Schema.String,\n  createdAt: Schema.DateTimeUtc\n})\n\nconst idParam = HttpApiSchema.param(\"id\", Schema.NumberFromString)\n\n// Define error schemas\nclass UserNotFound extends Schema.TaggedError<UserNotFound>()(\n  \"UserNotFound\",\n  {}\n) {}\n\nclass Unauthorized extends Schema.TaggedError<Unauthorized>()(\n  \"Unauthorized\",\n  {}\n) {}\n\nconst getUsers = HttpApiEndpoint.get(\"getUsers\", \"/users\").addSuccess(\n  Schema.Array(User)\n)\n\nconst getUser = HttpApiEndpoint.get(\"getUser\")`/user/${idParam}`\n  .addSuccess(User)\n  // Add a 404 error response for this endpoint\n  .addError(UserNotFound, { status: 404 })\n\nconst usersGroup = HttpApiGroup.make(\"users\")\n  .add(getUsers)\n  .add(getUser)\n  // ...etc...\n  // Add a 401 error response for the entire group\n  .addError(Unauthorized, { status: 401 })\n```\n\n----------------------------------------\n\nTITLE: Assembling CLI Application with Effect-TS in TypeScript\nDESCRIPTION: This code snippet demonstrates how to assemble a CLI application named 'minigit' using Effect-TS. It includes the main command and subcommands for 'add' and 'clone' operations, along with various options and arguments.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/cli/README.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Args, Command, Options } from \"@effect/cli\"\nimport { NodeContext, NodeRuntime } from \"@effect/platform-node\"\nimport { Console, Effect, Option, Array } from \"effect\"\n\n// minigit [--version] [-h | --help] [-c <name>=<value>]\nconst configs = Options.keyValueMap(\"c\").pipe(Options.optional)\nconst minigit = Command.make(\"minigit\", { configs }, ({ configs }) =>\n  Option.match(configs, {\n    onNone: () => Console.log(\"Running 'minigit'\"),\n    onSome: (configs) => {\n      const keyValuePairs = Array.fromIterable(configs)\n        .map(([key, value]) => `${key}=${value}`)\n        .join(\", \")\n      return Console.log(\n        `Running 'minigit' with the following configs: ${keyValuePairs}`\n      )\n    }\n  })\n)\n\n// minigit add [-v | --verbose] [--] [<pathspec>...]\nconst pathspec = Args.text({ name: \"pathspec\" }).pipe(Args.repeated)\nconst verbose = Options.boolean(\"verbose\").pipe(Options.withAlias(\"v\"))\nconst minigitAdd = Command.make(\n  \"add\",\n  { pathspec, verbose },\n  ({ pathspec, verbose }) => {\n    const paths = Array.match(pathspec, {\n      onEmpty: () => \"\",\n      onNonEmpty: (paths) => ` ${Array.join(paths, \" `)}\n    })\n    return Console.log(\n      `Running 'minigit add${paths}' with '--verbose ${verbose}'`\n    )\n  }\n)\n\n// minigit clone [--depth <depth>] [--] <repository> [<directory>]\nconst repository = Args.text({ name: \"repository\" })\nconst directory = Args.text({ name: \"directory\" }).pipe(Args.optional)\nconst depth = Options.integer(\"depth\").pipe(Options.optional)\nconst minigitClone = Command.make(\n  \"clone\",\n  { repository, directory, depth },\n  (config) => {\n    const depth = Option.map(config.depth, (depth) => `--depth ${depth}`)\n    const repository = Option.some(config.repository)\n    const optionsAndArgs = Array.getSomes([depth, repository, config.directory])\n    return Console.log(\n      \"Running 'minigit clone' with the following options and arguments: \" +\n        `'${Array.join(optionsAndArgs, \", \")}'`\n    )\n  }\n)\n\n// Combine all commands into the main 'minigit' command\nconst command = minigit.pipe(\n  Command.withSubcommands([minigitAdd, minigitClone])\n)\n\n// Initialize and run the CLI application\nconst cli = Command.run(command, {\n  name: \"Minigit Distributed Version Control\",\n  version: \"v1.0.0\"\n})\n\ncli(process.argv).pipe(Effect.provide(NodeContext.layer), NodeRuntime.runMain)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic HTTP Server with Bun\nDESCRIPTION: Implements a basic HTTP server using Effect framework with Bun runtime. Sets up a router that responds with 'Hello World' on root path and includes logging middleware.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_71\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpRouter, HttpServer, HttpServerResponse } from \"@effect/platform\"\nimport { BunHttpServer, BunRuntime } from \"@effect/platform-bun\"\nimport { Layer } from \"effect\"\n\nconst router = HttpRouter.empty.pipe(\n  HttpRouter.get(\"/\", HttpServerResponse.text(\"Hello World\"))\n)\n\nconst app = router.pipe(HttpServer.serve(), HttpServer.withLogAddress)\n\nconst port = 3000\n\nconst ServerLive = BunHttpServer.layer({ port })\n\nBunRuntime.runMain(Layer.launch(Layer.provide(app, ServerLive)))\n```\n\n----------------------------------------\n\nTITLE: Creating PATCH Endpoint for Resource Updates\nDESCRIPTION: Illustrates implementation of a PATCH endpoint for partial user updates with request and response schema validation\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpApiEndpoint, HttpApiSchema } from \"@effect/platform\"\nimport { Schema } from \"effect\"\n\n// Define a schema for the user object\nconst User = Schema.Struct({\n  id: Schema.Number,\n  name: Schema.String,\n  createdAt: Schema.DateTimeUtc\n})\n\n// Define a path parameter for the user ID\nconst idParam = HttpApiSchema.param(\"id\", Schema.NumberFromString)\n\n// Define a PATCH endpoint to update a user's name by ID\nconst updateUser = HttpApiEndpoint.patch(\"updateUser\")`/users/${idParam}`\n  // Specify the schema for the request payload\n  .setPayload(\n    Schema.Struct({\n      name: Schema.String // Only the name can be updated\n    })\n  )\n  // Specify the schema for a successful response\n  .addSuccess(User)\n```\n\n----------------------------------------\n\nTITLE: Annotating HttpApi for OpenAPI Specification Generation in TypeScript\nDESCRIPTION: Example showing how to annotate a top-level HttpApi with various OpenAPI metadata including schemas, descriptions, license info, servers, and custom transformations. Demonstrates generating a complete OpenAPI specification with custom annotations.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpApi, OpenApi } from \"@effect/platform\"\nimport { Schema } from \"effect\"\n\nconst api = HttpApi.make(\"api\")\n  // Provide additional schemas\n  .annotate(HttpApi.AdditionalSchemas, [\n    Schema.String.annotations({ identifier: \"MyString\" })\n  ])\n  // Add a description\n  .annotate(OpenApi.Description, \"my description\")\n  // Set license information\n  .annotate(OpenApi.License, { name: \"MIT\", url: \"http://example.com\" })\n  // Provide a summary\n  .annotate(OpenApi.Summary, \"my summary\")\n  // Define servers\n  .annotate(OpenApi.Servers, [\n    {\n      url: \"http://example.com\",\n      description: \"example\",\n      variables: { a: { default: \"b\", enum: [\"c\"], description: \"d\" } }\n    }\n  ])\n  // Override parts of the generated specification\n  .annotate(OpenApi.Override, {\n    tags: [{ name: \"a\", description: \"a-description\" }]\n  })\n  // Apply a transform function to the final specification\n  .annotate(OpenApi.Transform, (spec) => ({\n    ...spec,\n    tags: [...spec.tags, { name: \"b\", description: \"b-description\" }]\n  }))\n\n// Generate the OpenAPI specification from the annotated API\nconst spec = OpenApi.fromApi(api)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic HTTP Server with Node.js\nDESCRIPTION: Implements a basic HTTP server using Effect framework with Node.js runtime. Sets up a router that responds with 'Hello World' on root path and includes logging middleware.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_70\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpRouter, HttpServer, HttpServerResponse } from \"@effect/platform\"\nimport { NodeHttpServer, NodeRuntime } from \"@effect/platform-node\"\nimport { Layer } from \"effect\"\nimport { createServer } from \"node:http\"\n\nconst router = HttpRouter.empty.pipe(\n  HttpRouter.get(\"/\", HttpServerResponse.text(\"Hello World\"))\n)\n\nconst app = router.pipe(HttpServer.serve(), HttpServer.withLogAddress)\n\nconst port = 3000\n\nconst ServerLive = NodeHttpServer.layer(() => createServer(), { port })\n\nNodeRuntime.runMain(Layer.launch(Layer.provide(app, ServerLive)))\n```\n\n----------------------------------------\n\nTITLE: Handling Multipart File Uploads\nDESCRIPTION: Shows how to implement file upload functionality using multipart requests\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpApiEndpoint, HttpApiSchema, Multipart } from \"@effect/platform\"\nimport { Schema } from \"effect\"\n\nconst upload = HttpApiEndpoint.post(\"upload\", \"/users/upload\").setPayload(\n  // Specify that the payload is a multipart request\n  HttpApiSchema.Multipart(\n    Schema.Struct({\n      // Define a \"files\" field to handle file uploads\n      files: Multipart.FilesSchema\n    })\n  ).addSuccess(Schema.String)\n)\n```\n\nLANGUAGE: shell\nCODE:\n```\necho \"Sample file content\" | curl -X POST -F \"files=@-\" http://localhost:3000/users/upload\n```\n\n----------------------------------------\n\nTITLE: HTTP Client Testing with Mock Fetch in TypeScript\nDESCRIPTION: Shows how to test HTTP requests by injecting a mock fetch implementation using Effect's Layer system.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_69\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FetchHttpClient, HttpClient } from \"@effect/platform\"\nimport { Effect, Layer } from \"effect\"\nimport * as assert from \"node:assert\"\n\n// Mock fetch implementation\nconst FetchTest = Layer.succeed(FetchHttpClient.Fetch, () =>\n  Promise.resolve(new Response(\"not found\", { status: 404 }))\n)\n\nconst TestLayer = FetchHttpClient.layer.pipe(Layer.provide(FetchTest))\n\nconst program = Effect.gen(function* () {\n  const client = yield* HttpClient.HttpClient\n\n  return yield* client\n    .get(\"https://www.google.com/\")\n    .pipe(Effect.flatMap((res) => res.text))\n})\n\n// Test\nEffect.gen(function* () {\n  const response = yield* program\n  assert.equal(response, \"not found\")\n}).pipe(Effect.provide(TestLayer), Effect.runPromise)\n```\n\n----------------------------------------\n\nTITLE: Creating POST Endpoint with Schema Validation\nDESCRIPTION: Demonstrates how to create a POST endpoint for user creation with request payload and response schema validation using Effect.ts\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpApiEndpoint } from \"@effect/platform\"\nimport { Schema } from \"effect\"\n\n// Define a schema for the user object\nconst User = Schema.Struct({\n  id: Schema.Number,\n  name: Schema.String,\n  createdAt: Schema.DateTimeUtc\n})\n\n// Define a POST endpoint for creating a new user\nconst createUser = HttpApiEndpoint.post(\"createUser\", \"/users\")\n  // Define the request body schema (payload)\n  .setPayload(\n    Schema.Struct({\n      name: Schema.String\n    })\n  )\n  // Define the schema for a successful response\n  .addSuccess(User)\n```\n\n----------------------------------------\n\nTITLE: Adding Swagger Documentation to Effect Platform API\nDESCRIPTION: Shows how to enhance an HTTP API with auto-generated Swagger documentation using HttpApiSwagger module.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  HttpApi,\n  HttpApiBuilder,\n  HttpApiEndpoint,\n  HttpApiGroup,\n  HttpApiSwagger\n} from \"@effect/platform\"\nimport { NodeHttpServer, NodeRuntime } from \"@effect/platform-node\"\nimport { Effect, Layer, Schema } from \"effect\"\nimport { createServer } from \"node:http\"\n\nconst MyApi = HttpApi.make(\"MyApi\").add(\n  HttpApiGroup.make(\"Greetings\").add(\n    HttpApiEndpoint.get(\"hello-world\")`/`.addSuccess(Schema.String)\n  )\n)\n\nconst GreetingsLive = HttpApiBuilder.group(MyApi, \"Greetings\", (handlers) =>\n  handlers.handle(\"hello-world\", () => Effect.succeed(\"Hello, World!\"))\n)\n\nconst MyApiLive = HttpApiBuilder.api(MyApi).pipe(Layer.provide(GreetingsLive))\n\nconst ServerLive = HttpApiBuilder.serve().pipe(\n  Layer.provide(HttpApiSwagger.layer()),\n  Layer.provide(MyApiLive),\n  Layer.provide(NodeHttpServer.layer(createServer, { port: 3000 }))\n)\n\nLayer.launch(ServerLive).pipe(NodeRuntime.runMain)\n```\n\n----------------------------------------\n\nTITLE: Handling Streaming Requests with Effect-TS\nDESCRIPTION: This snippet demonstrates how to handle streaming requests in an Effect-TS API. It defines an endpoint that accepts a stream of binary data, decodes it into a string, and constructs the necessary layers and server setup to process these streams.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  HttpApi,\n  HttpApiBuilder,\n  HttpApiEndpoint,\n  HttpApiGroup,\n  HttpApiSchema,\n  HttpMiddleware,\n  HttpServer\n} from \"@effect/platform\"\nimport { NodeHttpServer, NodeRuntime } from \"@effect/platform-node\"\nimport { Effect, Layer, Schema } from \"effect\"\nimport { createServer } from \"node:http\"\n\nconst api = HttpApi.make(\"myApi\").add(\n  HttpApiGroup.make(\"group\").add(\n    HttpApiEndpoint.post(\"acceptStream\", \"/stream\")\n      // Define the payload as a Uint8Array with a specific encoding\n      .setPayload(\n        Schema.Uint8ArrayFromSelf.pipe(\n          HttpApiSchema.withEncoding({\n            kind: \"Uint8Array\",\n            contentType: \"application/octet-stream\"\n          })\n        )\n      )\n      .addSuccess(Schema.String)\n  )\n)\n\nconst groupLive = HttpApiBuilder.group(api, \"group\", (handlers) =>\n  handlers.handle(\"acceptStream\", (req) =>\n    // Decode the incoming binary data into a string\n    Effect.succeed(new TextDecoder().decode(req.payload))\n  )\n)\n\nconst MyApiLive = HttpApiBuilder.api(api).pipe(Layer.provide(groupLive))\n\nconst HttpLive = HttpApiBuilder.serve(HttpMiddleware.logger).pipe(\n  Layer.provide(HttpApiBuilder.middlewareCors()),\n  Layer.provide(MyApiLive),\n  HttpServer.withLogAddress,\n  Layer.provide(NodeHttpServer.layer(createServer, { port: 3000 }))\n)\n\nLayer.launch(HttpLive).pipe(NodeRuntime.runMain)\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Parameters with Metadata\nDESCRIPTION: Demonstrates setting up URL parameters with metadata and validation schemas\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpApiEndpoint } from \"@effect/platform\"\nimport { Schema } from \"effect\"\n\nconst User = Schema.Struct({\n  id: Schema.Number,\n  name: Schema.String,\n  createdAt: Schema.DateTimeUtc\n})\n\nconst getUsers = HttpApiEndpoint.get(\"getUsers\", \"/users\")\n  // Specify the URL parameters schema\n  .setUrlParams(\n    Schema.Struct({\n      // Parameter \"page\" for pagination\n      page: Schema.NumberFromString,\n      // Parameter \"sort\" for sorting options with an added description\n      sort: Schema.String.annotations({\n        description: \"Sorting criteria (e.g., 'name', 'date')\"\n      })\n    })\n  )\n  .addSuccess(Schema.Array(User))\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Authentication to HTTP Requests in Effect.ts\nDESCRIPTION: Demonstrates how to include basic authentication in an HTTP request using the basicAuth method of HttpClientRequest.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpClientRequest } from \"@effect/platform\"\n\nconst req = HttpClientRequest.get(\"https://api.example.com/data\").pipe(\n  HttpClientRequest.basicAuth(\"your_username\", \"your_password\")\n)\n\nconsole.log(JSON.stringify(req.headers, null, 2))\n/*\nOutput:\n{\n  \"authorization\": \"Basic eW91cl91c2VybmFtZTp5b3VyX3Bhc3N3b3Jk\"\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom HTTP Client in Effect.ts\nDESCRIPTION: Demonstrates how to create a custom HttpClient using HttpClient.make for simulating or mocking server responses in your application.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpClient, HttpClientResponse } from \"@effect/platform\"\nimport { Effect, Layer } from \"effect\"\n\nconst myClient = HttpClient.make((req) =>\n  Effect.succeed(\n    HttpClientResponse.fromWeb(\n      req,\n      // Simulate a response from a server\n      new Response(\n        JSON.stringify({\n          userId: 1,\n          id: 1,\n          title: \"title...\",\n          body: \"body...\"\n        })\n      )\n    )\n  )\n)\n\nconst program = Effect.gen(function* () {\n  const client = yield* HttpClient.HttpClient\n  const response = yield* client.get(\n    \"https://jsonplaceholder.typicode.com/posts/1\"\n  )\n  const json = yield* response.json\n  console.log(json)\n}).pipe(\n  // Provide the HttpClient\n  Effect.provide(Layer.succeed(HttpClient.HttpClient, myClient))\n)\n\nEffect.runPromise(program)\n/*\nOutput:\n{ userId: 1, id: 1, title: 'title...', body: 'body...' }\n*/\n```\n\n----------------------------------------\n\nTITLE: HTTP POST with Schema Validation in TypeScript\nDESCRIPTION: Illustrates HTTP POST request handling with response schema validation using effect/Schema integration.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_68\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  FetchHttpClient,\n  HttpClient,\n  HttpClientRequest,\n  HttpClientResponse\n} from \"@effect/platform\"\nimport { NodeRuntime } from \"@effect/platform-node\"\nimport { Console, Effect, Schema } from \"effect\"\n\nconst Post = Schema.Struct({\n  id: Schema.Number,\n  title: Schema.String\n})\n\nconst addPost = Effect.gen(function* () {\n  const client = yield* HttpClient.HttpClient\n  return yield* HttpClientRequest.post(\n    \"https://jsonplaceholder.typicode.com/posts\"\n  ).pipe(\n    HttpClientRequest.bodyText(\n      JSON.stringify({\n        title: \"foo\",\n        body: \"bar\",\n        userId: 1\n      }),\n      \"application/json; charset=UTF-8\"\n    ),\n    client.execute,\n    Effect.flatMap(HttpClientResponse.schemaBodyJson(Post))\n  )\n}).pipe(Effect.provide(FetchHttpClient.layer))\n\naddPost.pipe(Effect.andThen(Console.log), NodeRuntime.runMain)\n```\n\n----------------------------------------\n\nTITLE: Declaring RPC Requests for User Management in TypeScript\nDESCRIPTION: Defines a User schema and creates an RpcGroup for user-related operations including listing users, retrieving a user by ID, and creating a new user. It uses the Schema module for type definitions and Rpc.make for creating individual RPC endpoints.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/rpc/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// request.ts\nimport { Rpc, RpcGroup } from \"@effect/rpc\"\nimport { Schema } from \"effect\"\n\n// Define a user with an ID and name\nexport class User extends Schema.Class<User>(\"User\")({\n  id: Schema.String, // User's ID as a string\n  name: Schema.String // User's name as a string\n}) {}\n\n// Define a group of RPCs for user management.\n// You can use the `RpcGroup.make` function to create a group of RPCs.\nexport class UserRpcs extends RpcGroup.make(\n  // Request to retrieve a list of users\n  Rpc.make(\"UserList\", {\n    success: User, // Succeed with a stream of users\n    stream: true\n  }),\n  Rpc.make(\"UserById\", {\n    success: User,\n    error: Schema.String, // Indicates that errors, if any, will be returned as strings\n    payload: {\n      id: Schema.String\n    }\n  }),\n  Rpc.make(\"UserCreate\", {\n    success: User,\n    payload: {\n      name: Schema.String\n    }\n  })\n) {}\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Requests with Effect-TS Platform\nDESCRIPTION: Example showing how to make a GET request and parse the JSON response using the updated ClientRequest implementation that returns an Effect type.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node/CHANGELOG.md#2025-04-21_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Http from \"@effect/platform/HttpClient\"\n\nHttp.request\n  .get(\"https://jsonplaceholder.typicode.com/todos/1\")\n  .pipe(Http.response.json)\n```\n\n----------------------------------------\n\nTITLE: Creating a WebSocket Server with Node.js in Effect-TS\nDESCRIPTION: This example shows how to create a WebSocket server using Effect-TS platform. It sets up an HTTP server on port 3000 and handles WebSocket connections on the '/ws' path, sending a message every second and logging received messages.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NodeHttpServer, NodeRuntime } from \"@effect/platform-node\"\nimport * as Http from \"@effect/platform/HttpServer\"\nimport { Console, Effect, Layer, Schedule, Stream } from \"effect\"\nimport { createServer } from \"node:http\"\n\nconst ServerLive = NodeHttpServer.server.layer(() => createServer(), {\n  port: 3000\n})\n\nconst HttpLive = Http.router.empty.pipe(\n  Http.router.get(\n    \"/ws\",\n    Effect.gen(function* (_) {\n      yield* _(\n        Stream.fromSchedule(Schedule.spaced(1000)),\n        Stream.map(JSON.stringify),\n        Stream.encodeText,\n        Stream.pipeThroughChannel(Http.request.upgradeChannel()),\n        Stream.decodeText(),\n        Stream.runForEach(Console.log)\n      )\n      return Http.response.empty()\n    })\n  ),\n  Http.server.serve(Http.middleware.logger),\n  Http.server.withLogAddress,\n  Layer.provide(ServerLive)\n)\n\nNodeRuntime.runMain(Layer.launch(HttpLive))\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Request with JSON Body in TypeScript\nDESCRIPTION: Shows how to make HTTP POST requests with JSON data using HttpClientRequest.post and bodyJson methods.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_66\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  FetchHttpClient,\n  HttpClient,\n  HttpClientRequest\n} from \"@effect/platform\"\nimport { NodeRuntime } from \"@effect/platform-node\"\nimport { Console, Effect } from \"effect\"\n\nconst addPost = Effect.gen(function* () {\n  const client = yield* HttpClient.HttpClient\n  return yield* HttpClientRequest.post(\n    \"https://jsonplaceholder.typicode.com/posts\"\n  ).pipe(\n    HttpClientRequest.bodyJson({\n      title: \"foo\",\n      body: \"bar\",\n      userId: 1\n    }),\n    Effect.flatMap(client.execute),\n    Effect.flatMap((res) => res.json)\n  )\n}).pipe(Effect.provide(FetchHttpClient.layer))\n\naddPost.pipe(Effect.andThen(Console.log), NodeRuntime.runMain)\n```\n\n----------------------------------------\n\nTITLE: Using Predefined Error Types in Endpoints - TypeScript\nDESCRIPTION: This snippet illustrates how to utilize predefined error types from the HttpApiError module in an API endpoint to standardize error handling for common HTTP error responses. It ensures consistent error management across the API.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpApiEndpoint, HttpApiError, HttpApiSchema } from \"@effect/platform\"\nimport { Schema } from \"effect\"\n\nconst User = Schema.Struct({\n  id: Schema.Number,\n  name: Schema.String,\n  createdAt: Schema.DateTimeUtc\n})\n\nconst idParam = HttpApiSchema.param(\"id\", Schema.NumberFromString)\n\nconst getUser = HttpApiEndpoint.get(\"getUser\")`/user/${idParam}`\n  .addSuccess(User)\n  .addError(HttpApiError.NotFound)\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Errors to an Endpoint - TypeScript\nDESCRIPTION: This example demonstrates how to assign multiple error responses to a single API endpoint. It shows the use of the addError method to handle various failure scenarios for the deleteUser operation.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nconst deleteUser = HttpApiEndpoint.del(\"deleteUser\")`/users/${idParam}`\n  // Add a 404 error response for when the user is not found\n  .addError(UserNotFound, { status: 404 })\n  // Add a 401 error response for unauthorized access\n  .addError(Unauthorized, { status: 401 })\n```\n\n----------------------------------------\n\nTITLE: Implementing Cookie Validation Middleware in Effect-TS\nDESCRIPTION: This snippet creates a middleware that validates incoming cookies. It demonstrates error handling in middleware and how to integrate external validation services.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_82\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  HttpMiddleware,\n  HttpRouter,\n  HttpServer,\n  HttpServerRequest,\n  HttpServerResponse\n} from \"@effect/platform\"\nimport { Effect } from \"effect\"\nimport { listen } from \"./listen.js\"\n\nclass CookieError {\n  readonly _tag = \"CookieError\"\n}\n\nconst externallyValidateCookie = (testCookie: string | undefined) =>\n  testCookie && testCookie.length > 0\n    ? Effect.succeed(testCookie)\n    : Effect.fail(new CookieError())\n\nconst cookieValidator = HttpMiddleware.make((app) =>\n  Effect.gen(function* () {\n    const req = yield* HttpServerRequest.HttpServerRequest\n    yield* externallyValidateCookie(req.cookies.testCookie)\n    return yield* app\n  }).pipe(\n    Effect.catchTag(\"CookieError\", () =>\n      HttpServerResponse.text(\"Invalid cookie\")\n    )\n  )\n)\n\nconst router = HttpRouter.empty.pipe(\n  HttpRouter.get(\"/\", HttpServerResponse.text(\"Hello World\"))\n)\n\nconst app = router.pipe(HttpRouter.use(cookieValidator), HttpServer.serve())\n\nlisten(app, 3000)\n```\n\n----------------------------------------\n\nTITLE: Basic HTTP Route Examples\nDESCRIPTION: Examples of basic HTTP routing implementations including GET, POST, PUT and DELETE methods.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_74\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.pipe(HttpRouter.get(\"/\", HttpServerResponse.text(\"Hello World\")))\n\nrouter.pipe(HttpRouter.post(\"/\", HttpServerResponse.text(\"Got a POST request\")))\n\nrouter.pipe(\n  HttpRouter.put(\"/user\", HttpServerResponse.text(\"Got a PUT request at /user\"))\n)\n\nrouter.pipe(\n  HttpRouter.del(\n    \"/user\",\n    HttpServerResponse.text(\"Got a DELETE request at /user\")\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP API Group with Service Dependency\nDESCRIPTION: Demonstrates integrating a UsersRepository service within an HTTP API group handler using Effect.gen\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nconst usersGroupLive = HttpApiBuilder.group(api, \"users\", (handlers) =>\n  Effect.gen(function* () {\n    const repository = yield* UsersRepository\n    return handlers.handle(\"getUser\", ({ path: { id } }) =>\n      repository.findById(id)\n    )\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing JSON Response from HTTP Client (TypeScript)\nDESCRIPTION: Shows how to use the new scoped HTTP client along with response helpers to retrieve and parse JSON responses. This simplifies cleanup of connections when requests are aborted.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node/CHANGELOG.md#2025-04-21_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Http from \"@effect/platform/HttpClient\"\nimport { Effect } from \"effect\"\n\n// instead of\nHttp.request.get(\"/\").pipe(\n  Http.client.fetchOk(),\n  Effect.flatMap((_) => _.json),\n  Effect.scoped\n)\n\n// you can do\nHttp.request.get(\"/\").pipe(Http.client.fetchOk(), Http.response.json)\n\n// other helpers include\nHttp.response.text\nHttp.response.stream\nHttp.response.arrayBuffer\nHttp.response.urlParamsBody\nHttp.response.formData\nHttp.response.schema * Effect\n```\n\n----------------------------------------\n\nTITLE: Deriving HTTP Client from Effect Platform API Definition\nDESCRIPTION: Demonstrates how to generate and use a type-safe HTTP client from an API definition using HttpApiClient module.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  FetchHttpClient,\n  HttpApi,\n  HttpApiBuilder,\n  HttpApiClient,\n  HttpApiEndpoint,\n  HttpApiGroup,\n  HttpApiSwagger\n} from \"@effect/platform\"\nimport { NodeHttpServer, NodeRuntime } from \"@effect/platform-node\"\nimport { Effect, Layer, Schema } from \"effect\"\nimport { createServer } from \"node:http\"\n\nconst MyApi = HttpApi.make(\"MyApi\").add(\n  HttpApiGroup.make(\"Greetings\").add(\n    HttpApiEndpoint.get(\"hello-world\")`/`.addSuccess(Schema.String)\n  )\n)\n\nconst GreetingsLive = HttpApiBuilder.group(MyApi, \"Greetings\", (handlers) =>\n  handlers.handle(\"hello-world\", () => Effect.succeed(\"Hello, World!\"))\n)\n\nconst MyApiLive = HttpApiBuilder.api(MyApi).pipe(Layer.provide(GreetingsLive))\n\nconst ServerLive = HttpApiBuilder.serve().pipe(\n  Layer.provide(HttpApiSwagger.layer()),\n  Layer.provide(MyApiLive),\n  Layer.provide(NodeHttpServer.layer(createServer, { port: 3000 }))\n)\n\nLayer.launch(ServerLive).pipe(NodeRuntime.runMain)\n\nconst program = Effect.gen(function* () {\n  const client = yield* HttpApiClient.make(MyApi, {\n    baseUrl: \"http://localhost:3000\"\n  })\n  const hello = yield* client.Greetings[\"hello-world\"]()\n  console.log(hello)\n})\n\nEffect.runFork(program.pipe(Effect.provide(FetchHttpClient.layer)))\n```\n\n----------------------------------------\n\nTITLE: WebSocket Server Example in TypeScript\nDESCRIPTION: Example showing how to create a WebSocket server using Effect-TS platform-node with a heartbeat implementation that sends messages every second.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node/CHANGELOG.md#2025-04-21_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NodeHttpServer, NodeRuntime } from \"@effect/platform-node\"\nimport * as Http from \"@effect/platform/HttpServer\"\nimport { Console, Effect, Layer, Schedule, Stream } from \"effect\"\nimport { createServer } from \"node:http\"\n\nconst ServerLive = NodeHttpServer.server.layer(() => createServer(), {\n  port: 3000\n})\n\nconst HttpLive = Http.router.empty.pipe(\n  Http.router.get(\n    \"/ws\",\n    Effect.gen(function* (_) {\n      yield* _(\n        Stream.fromSchedule(Schedule.spaced(1000)),\n        Stream.map(JSON.stringify),\n        Stream.encodeText,\n        Stream.pipeThroughChannel(Http.request.upgradeChannel()),\n        Stream.decodeText(),\n        Stream.runForEach(Console.log)\n      )\n      return Http.response.empty()\n    })\n  ),\n  Http.server.serve(Http.middleware.logger),\n  Http.server.withLogAddress,\n  Layer.provide(ServerLive)\n)\n\nNodeRuntime.runMain(Layer.launch(HttpLive))\n```\n\n----------------------------------------\n\nTITLE: Server-Level Middleware Implementation in Effect-TS\nDESCRIPTION: Shows how to implement middleware at the server level that affects all incoming requests. Includes example of combining route-specific, router-level, and server-level middleware.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_85\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  HttpMiddleware,\n  HttpRouter,\n  HttpServer,\n  HttpServerResponse\n} from \"@effect/platform\"\nimport { Effect } from \"effect\"\nimport { listen } from \"./listen.js\"\n\nconst withMiddleware = (name: string) =>\n  HttpMiddleware.make((app) =>\n    Effect.gen(function* () {\n      console.log(name)\n      return yield* app\n    })\n  )\n\nconst router = HttpRouter.empty.pipe(\n  HttpRouter.get(\"/a\", HttpServerResponse.text(\"a\").pipe(withMiddleware(\"M1\"))),\n  HttpRouter.get(\"/b\", HttpServerResponse.text(\"b\")),\n  HttpRouter.use(withMiddleware(\"M2\")),\n  HttpRouter.get(\"/\", HttpServerResponse.text(\"root\"))\n)\n\nconst app = router.pipe(HttpServer.serve(withMiddleware(\"M3\")))\n\nlisten(app, 3000)\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Schemas into OpenAPI Specification\nDESCRIPTION: Shows how to combine multiple schemas into a single OpenAPI specification using shared definitions. The example demonstrates creating API paths with different schema references and combining them with their definitions.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_105\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OpenApiJsonSchema } from \"@effect/platform\"\nimport { Schema } from \"effect\"\n\n// Define multiple schemas with unique identifiers\nconst schema1 = Schema.Struct({ a: Schema.String }).annotations({\n  identifier: \"MyStruct1\"\n})\nconst schema2 = Schema.Struct({ b: Schema.Number }).annotations({\n  identifier: \"MyStruct2\"\n})\n\n// Create a shared definitions object\nconst defs = {}\n\n// Use `makeWithDefs` to generate schemas for API paths\nconst paths = {\n  paths: {\n    \"/path1\": {\n      get: {\n        responses: {\n          \"200\": {\n            content: {\n              \"application/json\": {\n                schema: OpenApiJsonSchema.makeWithDefs(schema1, { defs })\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/path2\": {\n      get: {\n        responses: {\n          \"200\": {\n            content: {\n              \"application/json\": {\n                schema: OpenApiJsonSchema.makeWithDefs(schema2, { defs })\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n// Combine paths and definitions into a single OpenAPI schema\nconst openApiSchema = {\n  components: {\n    schemas: defs\n  },\n  paths\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Logger Middleware in Effect-TS\nDESCRIPTION: This snippet illustrates how to define a logger middleware for the Effect-TS API. It sets up error handling, provides context for subsequent handlers, and allows for logging HTTP request details.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  HttpApiEndpoint,\n  HttpApiGroup,\n  HttpApiMiddleware,\n  HttpApiSchema\n} from \"@effect/platform\"\nimport { Schema } from \"effect\"\n\n// Define a schema for errors returned by the logger middleware\nclass LoggerError extends Schema.TaggedError<LoggerError>()(\n  \"LoggerError\",\n  {}\n) {}\n\n// Extend the HttpApiMiddleware.Tag class to define the logger middleware tag\nclass Logger extends HttpApiMiddleware.Tag<Logger>()(\"Http/Logger\", {\n  // Optionally define the error schema for the middleware\n  failure: LoggerError\n}) {}\n\nconst User = Schema.Struct({\n  id: Schema.Number,\n  name: Schema.String,\n  createdAt: Schema.DateTimeUtc\n})\n\nconst idParam = HttpApiSchema.param(\"id\", Schema.NumberFromString)\n\nconst usersGroup = HttpApiGroup.make(\"users\")\n  .add(\n    HttpApiEndpoint.get(\"getUser\")`/user/${idParam}`\n      .addSuccess(User)\n      // Apply the middleware to a single endpoint\n      .middleware(Logger)\n  )\n  // Or apply the middleware to the entire group\n  .middleware(Logger)\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Time Middleware in Effect-TS\nDESCRIPTION: This code creates a middleware that records the timestamp of each HTTP request and provides it via a service. It demonstrates how to use middleware to add contextual information to requests.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_81\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  HttpMiddleware,\n  HttpRouter,\n  HttpServer,\n  HttpServerResponse\n} from \"@effect/platform\"\nimport { Context, Effect } from \"effect\"\nimport { listen } from \"./listen.js\"\n\nclass RequestTime extends Context.Tag(\"RequestTime\")<RequestTime, number>() {}\n\nconst requestTime = HttpMiddleware.make((app) =>\n  Effect.gen(function* () {\n    return yield* app.pipe(Effect.provideService(RequestTime, Date.now()))\n  })\n)\n\nconst router = HttpRouter.empty.pipe(\n  HttpRouter.get(\n    \"/\",\n    Effect.gen(function* () {\n      const requestTime = yield* RequestTime\n      const responseText = `Hello World<br/><small>Requested at: ${requestTime}</small>`\n      return yield* HttpServerResponse.html(responseText)\n    })\n  )\n)\n\nconst app = router.pipe(HttpRouter.use(requestTime), HttpServer.serve())\n\nlisten(app, 3000)\n```\n\n----------------------------------------\n\nTITLE: URL Validation and Parsing with Effect/Schema\nDESCRIPTION: Example of parsing and validating URL strings using Effect/Schema's URL parser. Demonstrates successful parsing of valid URLs and error handling for invalid URLs.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\n// Parse a valid URL string\nconsole.log(Schema.decodeUnknownSync(Schema.URL)(\"https://example.com\"))\n// Output: URL { href: 'https://example.com/', ... }\n\n// Attempt to parse an invalid URL\nconsole.log(Schema.decodeUnknownSync(Schema.URL)(\"example.com\"))\n/*\nthrows:\nParseError: URL\n└─ Transformation process failure\n   └─ Unable to decode \"example.com\" into a URL. Invalid URL\n*/\n```\n\n----------------------------------------\n\nTITLE: Using HttpClient Methods for Requests in TypeScript\nDESCRIPTION: Shows how to use the new method-based interface of HttpClient for making different types of HTTP requests, including GET, POST, and executing a request instance.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  FetchHttpClient,\n  HttpClient,\n  HttpClientRequest\n} from \"@effect/platform\"\nimport { Effect } from \"effect\"\n\nEffect.gen(function* () {\n  const client = yield* HttpClient.HttpClient\n\n  // make a get request\n  yield* client.get(\"https://jsonplaceholder.typicode.com/todos/1\")\n  // make a post request\n  yield* client.post(\"https://jsonplaceholder.typicode.com/todos\")\n\n  // execute a request instance\n  yield* client.execute(\n    HttpClientRequest.get(\"https://jsonplaceholder.typicode.com/todos/1\")\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Creating OpenAI Embeddings Service in TypeScript\nDESCRIPTION: Shows how to create an OpenAI Embeddings service that aggregates embedding requests within a 500 millisecond window into a single batch. This example uses the text-embedding-3-large model and demonstrates the usage of the generic Embeddings service interface.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/ai/ai/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Embeddings } from \"@effect/ai\"\nimport { OpenAiClient, OpenAiEmbeddings } from \"@effect/ai-openai\"\nimport { NodeHttpClient } from \"@effect/platform-node\"\nimport { Config, Effect, Layer } from \"effect\"\n\n// Create the OpenAI client\nconst OpenAi = OpenAiClient.layerConfig({\n  apiKey: Config.redacted(\"OPENAI_API_KEY\")\n}).pipe(Layer.provide(NodeHttpClient.layerUndici))\n\n// Create an embeddings service for the `text-embedding-3-large` model\nconst TextEmbeddingsLarge = OpenAiEmbeddings.layerDataLoader({\n  model: \"text-embedding-3-large\",\n  window: \"500 millis\",\n  maxBatchSize: 2048\n}).pipe(Layer.provide(OpenAi))\n\n// Use the generic `Embeddings` service interface in your program\nconst program = Effect.gen(function* () {\n  const embeddings = yield* Embeddings.Embeddings\n  const result = yield* embeddings.embed(\"The input to embed\")\n})\n\n// Provide the specific implementation to use\nprogram.pipe(Effect.provide(TextEmbeddingsLarge), Effect.runPromise)\n```\n\n----------------------------------------\n\nTITLE: Implementing RPC Handlers for User Management in TypeScript\nDESCRIPTION: Implements the handlers for the previously defined RPC endpoints. It includes an imaginary UserRepository for data management and defines the UsersLive layer that provides the actual implementations for UserList, UserById, and UserCreate operations.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/rpc/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// handlers.ts\nimport type { Rpc } from \"@effect/rpc\"\nimport { Effect, Layer, Ref, Stream } from \"effect\"\nimport { User, UserRpcs } from \"./request.js\"\n\n// ---------------------------------------------\n// Imaginary Database\n// ---------------------------------------------\n\nclass UserRepository extends Effect.Service<UserRepository>()(\n  \"UserRepository\",\n  {\n    effect: Effect.gen(function* () {\n      const ref = yield* Ref.make<Array<User>>([\n        new User({ id: \"1\", name: \"Alice\" }),\n        new User({ id: \"2\", name: \"Bob\" })\n      ])\n\n      return {\n        findMany: ref.get,\n        findById: (id: string) =>\n          Ref.get(ref).pipe(\n            Effect.andThen((users) => {\n              const user = users.find((user) => user.id === id)\n              return user\n                ? Effect.succeed(user)\n                : Effect.fail(`User not found: ${id}`)\n            })\n          ),\n        create: (name: string) =>\n          Ref.updateAndGet(ref, (users) => [\n            ...users,\n            new User({ id: String(users.length + 1), name })\n          ]).pipe(Effect.andThen((users) => users[users.length - 1]))\n      }\n    })\n  }\n) {}\n\n// ---------------------------------------------\n// RPC handlers\n// ---------------------------------------------\n\nexport const UsersLive: Layer.Layer<\n  Rpc.Handler<\"UserList\"> | Rpc.Handler<\"UserById\"> | Rpc.Handler<\"UserCreate\">\n> = UserRpcs.toLayer(\n  Effect.gen(function* () {\n    const db = yield* UserRepository\n\n    return {\n      UserList: () => Stream.fromIterableEffect(db.findMany),\n      UserById: ({ id }) => db.findById(id),\n      UserCreate: ({ name }) => db.create(name)\n    }\n  })\n).pipe(\n  // Provide the UserRepository layer\n  Layer.provide(UserRepository.Default)\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Streaming Endpoint in Effect-TS\nDESCRIPTION: This snippet shows how to implement a streaming endpoint for responding with continuous data in Effect-TS. It utilizes the `handleRaw` function to define a raw streaming response that sends data items at predetermined intervals.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  HttpApi,\n  HttpApiBuilder,\n  HttpApiEndpoint,\n  HttpApiGroup,\n  HttpApiSchema,\n  HttpMiddleware,\n  HttpServer,\n  HttpServerResponse\n} from \"@effect/platform\"\nimport { NodeHttpServer, NodeRuntime } from \"@effect/platform-node\"\nimport { Layer, Schedule, Schema, Stream } from \"effect\"\nimport { createServer } from \"node:http\"\n\n// Define the API with a single streaming endpoint\nconst api = HttpApi.make(\"myApi\").add(\n  HttpApiGroup.make(\"group\").add(\n    HttpApiEndpoint.get(\"getStream\", \"/stream\").addSuccess(\n      Schema.String.pipe(\n        HttpApiSchema.withEncoding({\n          kind: \"Text\",\n          contentType: \"application/octet-stream\"\n        })\n      )\n    )\n  )\n)\n\n// Simulate a stream of data\nconst stream = Stream.make(\"a\", \"b\", \"c\").pipe(\n  Stream.schedule(Schedule.spaced(\"500 millis\")),\n  Stream.map((s) => new TextEncoder().encode(s))\n)\n\nconst groupLive = HttpApiBuilder.group(api, \"group\", (handlers) =>\n  handlers.handleRaw(\"getStream\", () => HttpServerResponse.stream(stream))\n)\n\nconst MyApiLive = HttpApiBuilder.api(api).pipe(Layer.provide(groupLive))\n\nconst HttpLive = HttpApiBuilder.serve(HttpMiddleware.logger).pipe(\n  Layer.provide(HttpApiBuilder.middlewareCors()),\n  Layer.provide(MyApiLive),\n  HttpServer.withLogAddress,\n  Layer.provide(NodeHttpServer.layer(createServer, { port: 3000 }))\n)\n\nLayer.launch(HttpLive).pipe(NodeRuntime.runMain)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic API Structure - TypeScript\nDESCRIPTION: This snippet outlines the process of defining a simple user-related API structure, encompassing the user group and endpoints initialization. It showcases how different handlers are organized under a single API instance.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  HttpApi,\n  HttpApiEndpoint,\n  HttpApiGroup,\n  HttpApiSchema\n} from \"@effect/platform\"\nimport { Schema } from \"effect\"\n\nconst User = Schema.Struct({\n  id: Schema.Number,\n  name: Schema.String,\n  createdAt: Schema.DateTimeUtc\n})\n\nconst idParam = HttpApiSchema.param(\"id\", Schema.NumberFromString)\n\nconst usersGroup = HttpApiGroup.make(\"users\").add(\n  HttpApiEndpoint.get(\"getUser\")`/user/${idParam}`.addSuccess(User)\n)\n\nconst api = HttpApi.make(\"myApi\").add(usersGroup)\n```\n\n----------------------------------------\n\nTITLE: Using HTTP Client Response Helpers\nDESCRIPTION: Example showing how to use the response helpers in the HTTP client to simplify handling of HTTP responses, including JSON parsing with scoped connection management.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Http from \"@effect/platform/HttpClient\"\nimport { Effect } from \"effect\"\n\n// instead of\nHttp.request.get(\"/\").pipe(\n  Http.client.fetchOk(),\n  Effect.flatMap((_) => _.json),\n  Effect.scoped\n)\n\n// you can do\nHttp.request.get(\"/\").pipe(Http.client.fetchOk(), Http.response.json)\n\n// other helpers include\nHttp.response.text\nHttp.response.stream\nHttp.response.arrayBuffer\nHttp.response.urlParamsBody\nHttp.response.formData\nHttp.response.schema * Effect\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Hello World CLI with Effect-TS\nDESCRIPTION: Basic CLI implementation that prints 'Hello World' using Effect-TS framework. Demonstrates core CLI setup including command definition, runtime configuration, and Node.js integration.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/cli/README.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Import necessary modules from the libraries\nimport { Command } from \"@effect/cli\"\nimport { NodeContext, NodeRuntime } from \"@effect/platform-node\"\nimport { Console, Effect } from \"effect\"\n\n// Define the top-level command\nconst command = Command.make(\"hello-world\", {}, () =>\n  Console.log(\"Hello World\")\n)\n\n// Set up the CLI application\nconst cli = Command.run(command, {\n  name: \"Hello World CLI\",\n  version: \"v1.0.0\"\n})\n\n// Prepare and run the CLI application\ncli(process.argv).pipe(Effect.provide(NodeContext.layer), NodeRuntime.runMain)\n```\n\n----------------------------------------\n\nTITLE: Static File Serving Implementation\nDESCRIPTION: Example of serving static files using Effect HTTP server with file response handler.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_75\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpRouter, HttpServer, HttpServerResponse } from \"@effect/platform\"\nimport { listen } from \"./listen.js\"\n\nconst router = HttpRouter.empty.pipe(\n  HttpRouter.get(\"/\", HttpServerResponse.file(\"index.html\"))\n)\n\nconst app = router.pipe(HttpServer.serve())\n\nlisten(app, 3000)\n```\n\n----------------------------------------\n\nTITLE: Creating an AI Plan with OpenAI and Anthropic Fallback in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create an AiPlan that attempts to use OpenAI's chat completions API, and if it fails after three attempts, falls back to Anthropic's messages API. It includes setting up clients, configuring the plan, and executing a sample program to get a dad joke.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/ai/ai/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AiPlan, Completions } from \"@effect/ai\"\nimport { AnthropicClient, AnthropicCompletions } from \"@effect/ai-anthropic\"\nimport { OpenAiClient, OpenAiCompletions } from \"@effect/ai-openai\"\nimport { NodeHttpClient, NodeRuntime } from \"@effect/platform-node\"\nimport { Config, Console, Effect, Layer } from \"effect\"\n\n// Create Anthropic client\nconst Anthropic = AnthropicClient.layerConfig({\n  apiKey: Config.redacted(\"ANTHROPIC_API_KEY\")\n}).pipe(Layer.provide(NodeHttpClient.layerUndici))\n\n// Create OpenAi client\nconst OpenAi = OpenAiClient.layerConfig({\n  apiKey: Config.redacted(\"OPENAI_API_KEY\")\n}).pipe(Layer.provide(NodeHttpClient.layerUndici))\n\n// Create a plan of request execution\nconst Plan = AiPlan.fromModel(OpenAiCompletions.model(\"gpt-4o-mini\"), {\n  attempts: 3\n}).pipe(\n  AiPlan.withFallback({\n    model: AnthropicCompletions.model(\"claude-3-5-haiku-latest\")\n  })\n)\n\nconst program = Effect.gen(function* () {\n  // Build the plan of execution\n  const plan = yield* Plan\n\n  // Create a program which uses the services provided by the plan\n  const getDadJoke = Effect.gen(function* () {\n    const completions = yield* Completions.Completions\n    const response = yield* completions.create(\"Tell me a dad joke\")\n    yield* Console.log(response.text)\n  })\n\n  // Provide the plan to whichever programs need it\n  yield* plan.provide(getDadJoke)\n})\n\nprogram.pipe(Effect.provide([Anthropic, OpenAi]), NodeRuntime.runMain)\n```\n\n----------------------------------------\n\nTITLE: HttpClient Methods Usage in Effect-TS\nDESCRIPTION: This snippet illustrates how to use the methods of the HttpClient interface in Effect-TS to make GET and POST requests. It also shows how to execute a request instance using `HttpClientRequest`. It uses `Effect.gen` to sequence the operations.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-bun/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  FetchHttpClient,\n  HttpClient,\n  HttpClientRequest\n} from \"@effect/platform\"\nimport { Effect } from \"effect\"\n\nEffect.gen(function* () {\n  const client = yield* HttpClient.HttpClient\n\n  // make a get request\n  yield* client.get(\"https://jsonplaceholder.typicode.com/todos/1\")\n  // make a post request\n  yield* client.post(\"https://jsonplaceholder.typicode.com/todos\")\n\n  // execute a request instance\n  yield* client.execute(\n    HttpClientRequest.get(\"https://jsonplaceholder.typicode.com/todos/1\")\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP Layer with TypeScript\nDESCRIPTION: Example showing how to setup an OTLP exporter layer for Traces, Metrics & Logs using Effect. The layer includes Effect Tracer, Logger & Metric exporter functionality and requires a FetchHttpClient layer.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/opentelemetry/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Otlp from \"@effect/opentelemetry/Otlp\"\nimport * as FetchHttpClient from \"@effect/platform/FetchHttpClient\"\nimport { Effect, Layer, Schedule } from \"effect\"\n\n// Includes an Effect Tracer, Logger & Metric exporter\nconst Observability = Otlp.layer({\n  baseUrl: \"http://localhost:4318\",\n  resource: {\n    serviceName: \"my-service\"\n  }\n}).pipe(Layer.provide(FetchHttpClient.layer))\n```\n\n----------------------------------------\n\nTITLE: Setting JSON Accept Header in HTTP Requests with Effect.ts\nDESCRIPTION: Shows how to indicate that the client accepts JSON responses using the acceptJson method of HttpClientRequest.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_60\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpClientRequest } from \"@effect/platform\"\n\nconst req = HttpClientRequest.get(\"https://api.example.com/data\").pipe(\n  HttpClientRequest.acceptJson\n)\n\nconsole.log(JSON.stringify(req.headers, null, 2))\n/*\nOutput:\n{\n  \"accept\": \"application/json\"\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Implementing RPC Client in TypeScript\nDESCRIPTION: Shows how to create and use an RPC client that connects to the server. It sets up the HTTP protocol with NDJSON serialization, creates a client for UserRpcs, and demonstrates how to use the client to list users and create a new user if 'Charlie' doesn't exist.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/rpc/README.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// client.ts\nimport { FetchHttpClient } from \"@effect/platform\"\nimport { RpcClient, RpcSerialization } from \"@effect/rpc\"\nimport { Chunk, Effect, Layer, Option, Stream } from \"effect\"\nimport { UserRpcs } from \"./request.js\"\n\n// Choose which protocol to use\nconst ProtocolLive = RpcClient.layerProtocolHttp({\n  url: \"http://localhost:3000/rpc\"\n}).pipe(\n  Layer.provide([\n    // use fetch for http requests\n    FetchHttpClient.layer,\n    // use ndjson for serialization\n    RpcSerialization.layerNdjson\n  ])\n)\n\n// Use the client\nconst program = Effect.gen(function* () {\n  const client = yield* RpcClient.make(UserRpcs)\n  let users = yield* Stream.runCollect(client.UserList({}))\n  if (Option.isNone(Chunk.findFirst(users, (user) => user.id === \"3\"))) {\n    console.log(`Creating user \"Charlie\"`)\n    yield* client.UserCreate({ name: \"Charlie\" })\n    users = yield* Stream.runCollect(client.UserList({}))\n  } else {\n    console.log(`User \"Charlie\" already exists`)\n  }\n  return users\n}).pipe(Effect.scoped)\n\nprogram.pipe(Effect.provide(ProtocolLive), Effect.runPromise).then(console.log)\n```\n\n----------------------------------------\n\nTITLE: Creating and Executing Custom HTTP Requests in TypeScript\nDESCRIPTION: Shows how to create a custom HttpClientRequest and execute it using the HttpClient service. This example demonstrates creating a GET request, potentially customizing it, and then executing it with the HttpClient to process the JSON response.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  FetchHttpClient,\n  HttpClient,\n  HttpClientRequest\n} from \"@effect/platform\"\nimport { Effect } from \"effect\"\n\nconst program = Effect.gen(function* () {\n  // Access HttpClient\n  const client = yield* HttpClient.HttpClient\n\n  // Create a GET request\n  const req = HttpClientRequest.get(\n    \"https://jsonplaceholder.typicode.com/posts/1\"\n  )\n\n  // Optionally customize the request\n\n  // Execute the request and get the response\n  const response = yield* client.execute(req)\n\n  const json = yield* response.json\n\n  console.log(json)\n}).pipe(\n  // Provide the HttpClient\n  Effect.provide(FetchHttpClient.layer)\n)\n\nEffect.runPromise(program)\n/*\nOutput:\n{\n  userId: 1,\n  id: 1,\n  title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n  body: 'quia et suscipit\\n' +\n    'suscipit recusandae consequuntur expedita et cum\\n' +\n    'reprehenderit molestiae ut ut quas totam\\n' +\n    'nostrum rerum est autem sunt rem eveniet architecto'\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Persisting Cookies across HTTP Requests in Effect.ts\nDESCRIPTION: Shows how to manage cookies across multiple HTTP requests using HttpClient.withCookiesRef, which associates a Cookies reference with the client to maintain cookie state.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Cookies, FetchHttpClient, HttpClient } from \"@effect/platform\"\nimport { Effect, Ref } from \"effect\"\n\nconst program = Effect.gen(function* () {\n  // Create a reference to store cookies\n  const ref = yield* Ref.make(Cookies.empty)\n\n  // Access the HttpClient and associate the cookies reference with it\n  const client = (yield* HttpClient.HttpClient).pipe(\n    HttpClient.withCookiesRef(ref)\n  )\n\n  // Make a GET request to the specified URL\n  yield* client.get(\"https://www.google.com/\")\n\n  // Log the keys of the cookies stored in the reference\n  console.log(Object.keys((yield* ref).cookies))\n}).pipe(Effect.provide(FetchHttpClient.layer))\n\nEffect.runPromise(program)\n// Output: [ 'SOCS', 'AEC', '__Secure-ENID' ]\n```\n\n----------------------------------------\n\nTITLE: Using Effect.filterEffectOrFail for Conditional Failure\nDESCRIPTION: Demonstrates how to filter an effect with an effectful predicate, failing with a custom error if the predicate fails. This pattern is useful for input validation with custom error handling.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, pipe } from \"effect\"\n\n// Define a user interface\ninterface User {\n  readonly name: string\n}\n\n// Simulate an asynchronous authentication function\ndeclare const auth: () => Promise<User | null>\n\nconst program = pipe(\n  Effect.promise(() => auth()),\n  // Use filterEffectOrFail with an effectful predicate\n  Effect.filterEffectOrFail({\n    predicate: (user) => Effect.succeed(user !== null),\n    orFailWith: (user) => Effect.fail(new Error(`Unauthorized user: ${user}`))\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Basic HTTP GET Request with Error Handling in TypeScript\nDESCRIPTION: Shows how to make HTTP GET requests without status code filtering, demonstrating the default behavior where non-200 responses are not treated as errors.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_64\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FetchHttpClient, HttpClient } from \"@effect/platform\"\nimport { NodeRuntime } from \"@effect/platform-node\"\nimport { Console, Effect } from \"effect\"\n\nconst getText = Effect.gen(function* () {\n  const client = yield* HttpClient.HttpClient\n  const response = yield* client.get(\n    \"https://jsonplaceholder.typicode.com/non-existing-page\"\n  )\n  return yield* response.text\n}).pipe(Effect.provide(FetchHttpClient.layer))\n\ngetText.pipe(Effect.andThen(Console.log), NodeRuntime.runMain)\n```\n\n----------------------------------------\n\nTITLE: Validating HTTP Response Data with Schema in TypeScript\nDESCRIPTION: Demonstrates fetching and validating HTTP response data using Effect-TS Schema. Defines a post schema with id and title, fetches data from an API, and validates the response.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_63\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  FetchHttpClient,\n  HttpClient,\n  HttpClientResponse\n} from \"@effect/platform\"\nimport { NodeRuntime } from \"@effect/platform-node\"\nimport { Console, Effect, Schema } from \"effect\"\n\nconst Post = Schema.Struct({\n  id: Schema.Number,\n  title: Schema.String\n})\n\nconst getPostAndValidate = Effect.gen(function* () {\n  const client = yield* HttpClient.HttpClient\n  const response = yield* client.get(\n    \"https://jsonplaceholder.typicode.com/posts/1\"\n  )\n  return yield* HttpClientResponse.schemaBodyJson(Post)(response)\n}).pipe(Effect.provide(FetchHttpClient.layer))\n\ngetPostAndValidate.pipe(Effect.andThen(Console.log), NodeRuntime.runMain)\n```\n\n----------------------------------------\n\nTITLE: Implementing Logger Middleware Functionality\nDESCRIPTION: This snippet implements the logger middleware functionality for Effect-TS APIs, providing a concrete layer that logs incoming HTTP requests. It utilizes the Effect and Layer APIs to create a modular middleware solution.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpApiMiddleware, HttpServerRequest } from \"@effect/platform\"\nimport { Effect, Layer } from \"effect\"\n\nclass Logger extends HttpApiMiddleware.Tag<Logger>()(\"Http/Logger\") {}\n\nconst LoggerLive = Layer.effect(\n  Logger,\n  Effect.gen(function* () {\n    yield* Effect.log(\"creating Logger middleware\")\n\n    // Middleware implementation as an Effect\n    // that can access the `HttpServerRequest` context.\n    return Effect.gen(function* () {\n      const request = yield* HttpServerRequest.HttpServerRequest\n      yield* Effect.log(`Request: ${request.method} ${request.url}`)\n    })\n  })\n)\n\nconst User = Schema.Struct({\n  id: Schema.Number,\n  name: Schema.String,\n  createdAt: Schema.DateTimeUtc\n})\n\nconst idParam = HttpApiSchema.param(\"id\", Schema.NumberFromString)\n\nconst usersGroup = HttpApiGroup.make(\"users\")\n  .add(\n    HttpApiEndpoint.get(\"getUser\")`/user/${idParam}`\n      .addSuccess(User)\n      // Apply the middleware to a single endpoint\n      .middleware(Logger)\n  )\n  // Or apply the middleware to the entire group\n  .middleware(Logger)\n\nconst api = HttpApi.make(\"myApi\").add(usersGroup)\n\nconst usersGroupLive = HttpApiBuilder.group(api, \"users\", (handlers) =>\n  handlers.handle(\"getUser\", (req) =>\n    Effect.succeed({\n      id: req.path.id,\n      name: \"John Doe\",\n      createdAt: DateTime.unsafeNow()\n    })\n  )\n).pipe(\n  // Provide the Logger middleware to the group\n  Layer.provide(LoggerLive)\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Push-Based Streams with Stream.asyncPush\nDESCRIPTION: Example of using Stream.asyncPush to create a stream from an external push-based resource. The code shows how to emit values to the stream, configure buffer size and strategy, and handle resource cleanup.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_92\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Stream } from \"effect\"\n\nStream.asyncPush<string>(\n  (emit) =>\n    Effect.acquireRelease(\n      Effect.gen(function* () {\n        yield* Effect.log(\"subscribing\")\n        return setInterval(() => emit.single(\"tick\"), 1000)\n      }),\n      (handle) =>\n        Effect.gen(function* () {\n          yield* Effect.log(\"unsubscribing\")\n          clearInterval(handle)\n        })\n    ),\n  { bufferSize: 16, strategy: \"dropping\" }\n)\n```\n\n----------------------------------------\n\nTITLE: Enhancing HTTP Client Scope in Effect-TS TypeScript\nDESCRIPTION: This code snippet demonstrates adding a scope to the default HTTP client within the Effect-TS library. By incorporating this change, connections are properly cleaned up if a request is aborted. It introduces response helpers to make fetching and processing responses more concise. Dependencies include the Effect-TS platform and HttpClient library, with methods such as `Http.client.fetchOk`, `Effect.flatMap`, and `Http.response.json` being utilized.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-browser/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Http from \"@effect/platform/HttpClient\"\nimport { Effect } from \"effect\"\n\n// instead of\nHttp.request.get(\"/\").pipe(\n  Http.client.fetchOk(),\n  Effect.flatMap((_) => _.json),\n  Effect.scoped\n)\n\n// you can do\nHttp.request.get(\"/\").pipe(Http.client.fetchOk(), Http.response.json)\n\n// other helpers include\nHttp.response.text\nHttp.response.stream\nHttp.response.arrayBuffer\nHttp.response.urlParamsBody\nHttp.response.formData\nHttp.response.schema * Effect\n```\n\n----------------------------------------\n\nTITLE: Initializing FileSystem Watch Stream in TypeScript\nDESCRIPTION: Demonstrates how to use the new .watch method in the FileSystem module to listen for file system events using Effect and Stream\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node-shared/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FileSystem } from \"@effect/platform\"\nimport { NodeFileSystem, NodeRuntime } from \"@effect/platform-node\"\nimport { Console, Effect, Stream } from \"effect\"\n\nEffect.gen(function* (_) {\n  const fs = yield* _(FileSystem.FileSystem)\n  yield* _(fs.watch(\"./\"), Stream.runForEach(Console.log))\n}).pipe(Effect.provide(NodeFileSystem.layer), NodeRuntime.runMain)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Swagger Documentation for Effect.ts HTTP API\nDESCRIPTION: Demonstrates how to add Swagger documentation to an Effect.ts HTTP API using the HttpApiSwagger module. This example shows a complete API setup with a user endpoint and integrates Swagger documentation at the '/docs' path.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  HttpApi,\n  HttpApiBuilder,\n  HttpApiEndpoint,\n  HttpApiGroup,\n  HttpApiSchema,\n  HttpApiSwagger,\n  HttpMiddleware,\n  HttpServer\n} from \"@effect/platform\"\nimport { NodeHttpServer, NodeRuntime } from \"@effect/platform-node\"\nimport { DateTime, Effect, Layer, Schema } from \"effect\"\nimport { createServer } from \"node:http\"\n\nconst User = Schema.Struct({\n  id: Schema.Number,\n  name: Schema.String,\n  createdAt: Schema.DateTimeUtc\n})\n\nconst idParam = HttpApiSchema.param(\"id\", Schema.NumberFromString)\n\nconst usersGroup = HttpApiGroup.make(\"users\").add(\n  HttpApiEndpoint.get(\"getUser\")`/user/${idParam}`.addSuccess(User)\n)\n\nconst api = HttpApi.make(\"myApi\").add(usersGroup)\n\nconst usersGroupLive = HttpApiBuilder.group(api, \"users\", (handlers) =>\n  handlers.handle(\"getUser\", ({ path: { id } }) =>\n    Effect.succeed({\n      id,\n      name: \"John Doe\",\n      createdAt: DateTime.unsafeNow()\n    })\n  )\n)\n\nconst MyApiLive = HttpApiBuilder.api(api).pipe(Layer.provide(usersGroupLive))\n\nconst HttpLive = HttpApiBuilder.serve(HttpMiddleware.logger).pipe(\n  // Add the Swagger documentation layer\n  Layer.provide(\n    HttpApiSwagger.layer({\n      // Specify the Swagger documentation path.\n      // \"/docs\" is the default path.\n      path: \"/docs\"\n    })\n  ),\n  Layer.provide(HttpApiBuilder.middlewareCors()),\n  Layer.provide(MyApiLive),\n  HttpServer.withLogAddress,\n  Layer.provide(NodeHttpServer.layer(createServer, { port: 3000 }))\n)\n\nLayer.launch(HttpLive).pipe(NodeRuntime.runMain)\n```\n\n----------------------------------------\n\nTITLE: WebSocket implementation example with NodeSocket\nDESCRIPTION: This code snippet demonstrates how to use the Socket.makeWebSocket API with a NodeSocket WebSocketConstructor implementation, allowing WebSocket connections in Node.js environments.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Socket from \"@effect/platform/Socket\"\nimport * as NodeSocket from \"@effect/platform-node/NodeSocket\"\nimport { Effect } from \"effect\"\n\nSocket.makeWebSocket(\"ws://localhost:8080\").pipe(\n  Effect.provide(NodeSocket.layerWebSocketConstructor) // use \"ws\" npm package\n)\n```\n\n----------------------------------------\n\nTITLE: Built-in Logger Middleware Implementation in Effect-TS\nDESCRIPTION: Shows how to implement the built-in logger middleware and how to selectively disable logging for specific routes using HttpMiddleware.withLoggerDisabled.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_87\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  HttpMiddleware,\n  HttpRouter,\n  HttpServer,\n  HttpServerResponse\n} from \"@effect/platform\"\nimport { listen } from \"./listen.js\"\n\nconst router = HttpRouter.empty.pipe(\n  HttpRouter.get(\"/\", HttpServerResponse.text(\"Hello World\")),\n  HttpRouter.get(\n    \"/no-logger\",\n    HttpServerResponse.text(\"no-logger\").pipe(HttpMiddleware.withLoggerDisabled)\n  )\n)\n\nconst app = router.pipe(HttpServer.serve(HttpMiddleware.logger))\n\nlisten(app, 3000)\n```\n\n----------------------------------------\n\nTITLE: Custom Response Description with Schema Annotations in TypeScript\nDESCRIPTION: Shows how to define custom response descriptions by annotating schemas with additional metadata. Includes structure definition for a User type and its OpenAPI specification output.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  HttpApi,\n  HttpApiEndpoint,\n  HttpApiGroup,\n  OpenApi\n} from \"@effect/platform\"\nimport { Schema } from \"effect\"\n\nconst User = Schema.Struct({\n  id: Schema.Number,\n  name: Schema.String,\n  createdAt: Schema.DateTimeUtc\n}).annotations({ identifier: \"User\" })\n\nconst api = HttpApi.make(\"api\").add(\n  HttpApiGroup.make(\"group\").add(\n    HttpApiEndpoint.get(\"getUsers\", \"/users\").addSuccess(\n      Schema.Array(User).annotations({\n        description: \"Returns an array of users\"\n      })\n    )\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Validating Headers in TypeScript HTTP Server\nDESCRIPTION: This snippet demonstrates how to validate headers in an HTTP server using @effect/platform and effect/Schema. It defines a schema for expected headers and handles parsing errors.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_90\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  HttpRouter,\n  HttpServer,\n  HttpServerRequest,\n  HttpServerResponse\n} from \"@effect/platform\"\nimport { Effect, Schema } from \"effect\"\nimport { listen } from \"./listen.js\"\n\nconst router = HttpRouter.empty.pipe(\n  HttpRouter.get(\n    \"/\",\n    Effect.gen(function* () {\n      // Define the schema for expected headers and validate them\n      const headers = yield* HttpServerRequest.schemaHeaders(\n        Schema.Struct({ test: Schema.String })\n      )\n      return yield* HttpServerResponse.text(\"header: \" + headers.test)\n    }).pipe(\n      // Handle parsing errors\n      Effect.catchTag(\"ParseError\", (e) =>\n        HttpServerResponse.text(`Invalid header: ${e.message}`)\n      )\n    )\n  )\n)\n\nconst app = router.pipe(HttpServer.serve())\n\nlisten(app, 3000)\n```\n\n----------------------------------------\n\nTITLE: Setting up RPC Server in TypeScript with Bun\nDESCRIPTION: Demonstrates how to set up an RPC server using the handlers defined earlier. It configures the server to use HTTP protocol with NDJSON serialization, and sets up the main server layer to run on port 3000 using Bun runtime.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/rpc/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// server.ts\nimport { HttpRouter } from \"@effect/platform\"\nimport { BunHttpServer, BunRuntime } from \"@effect/platform-bun\"\nimport { RpcSerialization, RpcServer } from \"@effect/rpc\"\nimport { Layer } from \"effect\"\nimport { UsersLive } from \"./handlers.js\"\nimport { UserRpcs } from \"./request.js\"\n\n// Create the RPC server layer\nconst RpcLayer = RpcServer.layer(UserRpcs).pipe(Layer.provide(UsersLive))\n\n// Choose the protocol and serialization format\nconst HttpProtocol = RpcServer.layerProtocolHttp({\n  path: \"/rpc\"\n}).pipe(Layer.provide(RpcSerialization.layerNdjson))\n\n// Create the main server layer\nconst Main = HttpRouter.Default.serve().pipe(\n  Layer.provide(RpcLayer),\n  Layer.provide(HttpProtocol),\n  Layer.provide(BunHttpServer.layer({ port: 3000 }))\n)\n\nBunRuntime.runMain(Layer.launch(Main))\n```\n\n----------------------------------------\n\nTITLE: Implementing Pretty Logger in Effect-TS\nDESCRIPTION: This code shows how to use the `Logger.pretty` logger in Effect-TS to generate more visually appealing console output. By providing `Logger.pretty` to the program, the `Effect.log` statements will produce formatted output in the console.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_100\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Logger } from \"effect\"\n\nEffect.log(\"Hello, World!\").pipe(Effect.provide(Logger.pretty))\n```\n\n----------------------------------------\n\nTITLE: Using Semaphore.withPermitsIfAvailable in TypeScript\nDESCRIPTION: Example demonstrating how to use Semaphore.withPermitsIfAvailable to run an Effect only if a Semaphore has enough permits available without blocking, returning an Option of the result.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_78\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect } from \"effect\"\n\nEffect.gen(function* () {\n  const semaphore = yield* Effect.makeSemaphore(1)\n  semaphore.withPermitsIfAvailable(1)(Effect.void)\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Security Cookies in Effect.ts HTTP Handlers\nDESCRIPTION: Shows how to set a security cookie from within an API handler using HttpApiBuilder.securitySetCookie. This example demonstrates setting a cookie-based API key with HttpOnly and Secure flags for enhanced security.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\n// Define the security configuration for an API key stored in a cookie\nconst security = HttpApiSecurity.apiKey({\n   // Specify that the API key is stored in a cookie\n  in: \"cookie\"\n   // Define the cookie name,\n  key: \"token\"\n})\n\nconst UsersApiLive = HttpApiBuilder.group(MyApi, \"users\", (handlers) =>\n  handlers.handle(\"login\", () =>\n    // Set the security cookie with a redacted value\n    HttpApiBuilder.securitySetCookie(security, Redacted.make(\"keep me secret\"))\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Accept Header in HTTP Requests with Effect.ts\nDESCRIPTION: Demonstrates how to specify acceptable media types for the response using the accept method of HttpClientRequest.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_59\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpClientRequest } from \"@effect/platform\"\n\nconst req = HttpClientRequest.get(\"https://api.example.com/data\").pipe(\n  HttpClientRequest.accept(\"application/xml\")\n)\n\nconsole.log(JSON.stringify(req.headers, null, 2))\n/*\nOutput:\n{\n  \"accept\": \"application/xml\"\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Customizing HttpClient with Request Tapping in TypeScript\nDESCRIPTION: Demonstrates how to customize the HttpClient by tapping into the request pipeline. This example logs the details of the request before it is executed, showing how to use the tapRequest function for monitoring or debugging purposes.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FetchHttpClient, HttpClient } from \"@effect/platform\"\nimport { Console, Effect } from \"effect\"\n\nconst program = Effect.gen(function* () {\n  const client = (yield* HttpClient.HttpClient).pipe(\n    // Log the request before fetching\n    HttpClient.tapRequest(Console.log)\n  )\n\n  const response = yield* client.get(\n    \"https://jsonplaceholder.typicode.com/posts/1\"\n  )\n\n  const json = yield* response.json\n\n  console.log(json)\n}).pipe(Effect.provide(FetchHttpClient.layer))\n\nEffect.runPromise(program)\n/*\nOutput:\n{\n  _id: '@effect/platform/HttpClientRequest',\n  method: 'GET',\n  url: 'https://jsonplaceholder.typicode.com/posts/1',\n  urlParams: [],\n  hash: { _id: 'Option', _tag: 'None' },\n  headers: Object <[Object: null prototype]> {},\n  body: { _id: '@effect/platform/HttpBody', _tag: 'Empty' }\n}\n{\n  userId: 1,\n  id: 1,\n  title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n  body: 'quia et suscipit\\n' +\n    'suscipit recusandae consequuntur expedita et cum\\n' +\n    'reprehenderit molestiae ut ut quas totam\\n' +\n    'nostrum rerum est autem sunt rem eveniet architecto'\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Defining a Recursive Schema with Effect Schema\nDESCRIPTION: Demonstrates how to define a recursive type schema in `effect/Schema` using `Schema.suspend()`.  This function delays the resolution of the schema, enabling the definition of types that refer to themselves.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst baseCategorySchema = Schema.Struct({\n  name: Schema.String\n})\n\ntype Category = Schema.Schema.Type<typeof baseCategorySchema> & {\n  readonly subcategories: ReadonlyArray<Category>\n}\n\nconst categorySchema: Schema.Schema<Category> = Schema.Struct({\n  ...baseCategorySchema.fields,\n  subcategories: Schema.suspend(() => Schema.Array(categorySchema))\n})\n```\n\n----------------------------------------\n\nTITLE: Creating and Using RcRef in Effect-TS\nDESCRIPTION: This code demonstrates how to create and use an `RcRef` in Effect-TS to manage a reference-counted resource. The resource is acquired lazily on the first `get` call and released when the scope is closed, ensuring efficient resource management.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_98\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, RcRef } from \"effect\"\n\nEffect.gen(function* () {\n  const ref = yield* RcRef.make({\n    acquire: Effect.acquireRelease(Effect.succeed(\"foo\"), () =>\n      Effect.log(\"release foo\")\n    )\n  })\n\n  // will only acquire the resource once, and release it\n  // when the scope is closed\n  yield* RcRef.get(ref).pipe(Effect.andThen(RcRef.get(ref)), Effect.scoped)\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing HttpServerRequest in Endpoint Handler\nDESCRIPTION: Demonstrates how to access the incoming HTTP request details within an endpoint handler\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nconst groupLive = HttpApiBuilder.group(api, \"group\", (handlers) =>\n  handlers.handle(\"get\", () =>\n    Effect.gen(function* () {\n      const req = yield* HttpServerRequest.HttpServerRequest\n      console.log(req.method)\n      return \"Hello, World!\"\n    })\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing HTTP API Group with Endpoint in TypeScript\nDESCRIPTION: Defines a users group with a GET endpoint for retrieving user details using HttpApiGroup and HttpApiEndpoint\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nconst usersGroup = HttpApiGroup.make(\"users\").add(\n  HttpApiEndpoint.get(\"getUser\")`/user/${idParam}`.addSuccess(User)\n)\n```\n\n----------------------------------------\n\nTITLE: Using Effect.filterEffectOrElse with Effectful Predicates\nDESCRIPTION: Shows how to filter an effect with an effectful predicate, falling back to an alternative effect if the predicate fails. This is useful for conditional processing with complex validation logic.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, pipe } from \"effect\"\n\n// Define a user interface\ninterface User {\n  readonly name: string\n}\n\n// Simulate an asynchronous authentication function\ndeclare const auth: () => Promise<User | null>\n\nconst program = pipe(\n  Effect.promise(() => auth()),\n  // Use filterEffectOrElse with an effectful predicate\n  Effect.filterEffectOrElse({\n    predicate: (user) => Effect.succeed(user !== null),\n    orElse: (user) => Effect.fail(new Error(`Unauthorized user: ${user}`))\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Defining GET Endpoint with Schema in Effect Platform\nDESCRIPTION: Shows how to define a GET endpoint with a response schema for retrieving users.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpApiEndpoint } from \"@effect/platform\"\nimport { Schema } from \"effect\"\n\nconst User = Schema.Struct({\n  id: Schema.Number,\n  name: Schema.String,\n  createdAt: Schema.DateTimeUtc\n})\n\nconst getUsers = HttpApiEndpoint\n  .get(\"getUsers\", \"/users\")\n  .addSuccess(Schema.Array(User))\n```\n\n----------------------------------------\n\nTITLE: Sending GET Requests with HttpClient in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the HttpClient's 'get' accessor API to send HTTP GET requests. The code imports necessary modules from '@effect/platform' and 'effect', sets up a HTTP GET request to a placeholder API, and processes the JSON response. The program is executed using Effect.runPromise.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-browser/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FetchHttpClient, HttpClient } from \"@effect/platform\"\nimport { Effect } from \"effect\"\n\nconst program = HttpClient.get(\n  \"https://jsonplaceholder.typicode.com/posts/1\"\n).pipe(\n  Effect.andThen((response) => response.json),\n  Effect.scoped,\n  Effect.provide(FetchHttpClient.layer)\n)\n\nEffect.runPromise(program)\n/*\nOutput:\n{\n  userId: 1,\n  id: 1,\n  title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n  body: 'quia et suscipit\\n' +\n    'suscipit recusandae consequuntur expedita et cum\\n' +\n    'reprehenderit molestiae ut ut quas totam\\n' +\n    'nostrum rerum est autem sunt rem eveniet architecto'\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Effect Service Implementation with Dependencies\nDESCRIPTION: Example demonstrating Effect.Service implementation with prefix and postfix services as dependencies for a logger service.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_76\n\nLANGUAGE: typescript\nCODE:\n```\nclass Prefix extends Effect.Service<Prefix>()(\"Prefix\", {\n  sync: () => ({\n    prefix: \"PRE\"\n  })\n}) {}\n\nclass Postfix extends Effect.Service<Postfix>()(\"Postfix\", {\n  sync: () => ({\n    postfix: \"POST\"\n  })\n}) {}\n\nconst messages: Array<string> = []\n\nclass Logger extends Effect.Service<Logger>()(\"Logger\", {\n  accessors: true,\n  effect: Effect.gen(function* () {\n    const { prefix } = yield* Prefix\n    const { postfix } = yield* Postfix\n    return {\n      info: (message: string) =>\n        Effect.sync(() => {\n          messages.push(`[${prefix}][${message}][${postfix}]`)\n        })\n    }\n  }),\n  dependencies: [Prefix.Default, Postfix.Default]\n}) {}\n\ndescribe(\"Effect\", () => {\n  it.effect(\"Service correctly wires dependencies\", () =>\n    Effect.gen(function* () {\n      const { _tag } = yield* Logger\n      expect(_tag).toEqual(\"Logger\")\n      yield* Logger.info(\"Ok\")\n      expect(messages).toEqual([\"[PRE][Ok][POST]\"])\n      const { prefix } = yield* Prefix\n      expect(prefix).toEqual(\"PRE\")\n      const { postfix } = yield* Postfix\n      expect(postfix).toEqual(\"POST\")\n    }).pipe(Effect.provide([Logger.Default, Prefix.Default, Postfix.Default]))\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Advanced URL Modification with the mutate Function\nDESCRIPTION: Shows how to use the mutate function to apply multiple changes to a URL object at once. This function clones the original URL object and applies a callback function to update multiple properties.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_96\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Url } from \"@effect/platform\"\n\nconst myUrl = new URL(\"https://example.com\")\n\nconst mutatedUrl = Url.mutate(myUrl, (url) => {\n  url.username = \"user\"\n  url.password = \"pass\"\n})\n\nconsole.log(\"Mutated:\", mutatedUrl.toString())\n// Output: Mutated: https://user:pass@example.com/\n```\n\n----------------------------------------\n\nTITLE: Testing with Exit Values\nDESCRIPTION: Demonstrates testing both success and failure cases using Effect.exit to capture outcomes as Exit objects.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/vitest/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { it, expect } from \"@effect/vitest\"\nimport { Effect, Exit } from \"effect\"\n\n// A function that divides two numbers and returns an Effect.\n// It fails if the divisor is zero.\nfunction divide(a: number, b: number) {\n  if (b === 0) return Effect.fail(\"Cannot divide by zero\")\n  return Effect.succeed(a / b)\n}\n\n// Test case for a successful division, using `Effect.exit` to capture the result\nit.effect(\"test success as Exit\", () =>\n  Effect.gen(function* () {\n    const result = yield* Effect.exit(divide(4, 2)) // Capture the result as an Exit\n    expect(result).toStrictEqual(Exit.succeed(2)) // Expect success with the value 2\n  })\n)\n\n// Test case for a failure (division by zero), using `Effect.exit`\nit.effect(\"test failure as Exit\", () =>\n  Effect.gen(function* () {\n    const result = yield* Effect.exit(divide(4, 0)) // Capture the result as an Exit\n    expect(result).toStrictEqual(Exit.fail(\"Cannot divide by zero\")) // Expect failure with the correct message\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Creating ManagedRuntime for Effect Execution (TypeScript)\nDESCRIPTION: Demonstrates how to create and use a ManagedRuntime to execute Effects that depend on a specific Layer. This approach facilitates incremental adoption of the Effect system within existing codebases.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_123\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Console, Effect, Layer, ManagedRuntime } from \"effect\"\n\nclass Notifications extends Effect.Tag(\"Notifications\")<\n  Notifications,\n  { readonly notify: (message: string) => Effect.Effect<void> }\n>() {\n  static Live = Layer.succeed(this, {\n    notify: (message) => Console.log(message)\n  })\n}\n\nasync function main() {\n  const runtime = ManagedRuntime.make(Notifications.Live)\n  await runtime.runPromise(Notifications.notify(\"Hello, world!\"))\n  await runtime.dispose()\n}\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Basic PostgreSQL Client Setup in Effect\nDESCRIPTION: Demonstrates how to set up a basic PostgreSQL client connection and execute a simple query using Effect\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Struct, pipe } from \"effect\"\nimport { PgClient } from \"@effect/sql-pg\"\nimport { SqlClient } from \"@effect/sql\"\n\nconst SqlLive = PgClient.layer({\n  database: \"effect_pg_dev\"\n})\n\nconst program = Effect.gen(function* () {\n  const sql = yield* SqlClient.SqlClient\n\n  const people = yield* sql<{\n    readonly id: number\n    readonly name: string\n  }>`SELECT id, name FROM people`\n\n  yield* Effect.log(`Got ${people.length} results!`)\n})\n\npipe(program, Effect.provide(SqlLive), Effect.runPromise)\n```\n\n----------------------------------------\n\nTITLE: Combining Group Implementations into Top-Level API\nDESCRIPTION: Shows how to use HttpApiBuilder.api to combine group implementations into a unified API layer\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nconst MyApiLive = HttpApiBuilder.api(api).pipe(\n  Layer.provide(usersGroupLive)\n)\n```\n\n----------------------------------------\n\nTITLE: Creating and Using RcMap in Effect-TS\nDESCRIPTION: This code demonstrates how to create and use an `RcMap` in Effect-TS to manage reference-counted resources indexed by a key. Resources are lazily acquired upon the first `get` call and released when the last reference is released. Complex keys can extend `Equal` and `Hash` for lookups by value.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_102\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, RcMap } from \"effect\"\n\nEffect.gen(function* () {\n  const map = yield* RcMap.make({\n    lookup: (key: string) =>\n      Effect.acquireRelease(Effect.succeed(`acquired ${key}`), () =>\n        Effect.log(`releasing ${key}`)\n      )\n  })\n\n  // Get \"foo\" from the map twice, which will only acquire it once\n  // It will then be released once the scope closes.\n  yield* RcMap.get(map, \"foo\").pipe(\n    Effect.andThen(RcMap.get(map, \"foo\")),\n    Effect.scoped\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Defining User-Related Endpoints Grouping - TypeScript\nDESCRIPTION: This snippet demonstrates creating a group of user-related API endpoints using HttpApiGroup and HttpApiEndpoint. It shows how to define individual endpoints for getting users, getting a single user, creating, updating, and deleting users, along with their expected request and response structures.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpApiEndpoint, HttpApiGroup, HttpApiSchema } from \"@effect/platform\"\nimport { Schema } from \"effect\"\n\nconst User = Schema.Struct({\n  id: Schema.Number,\n  name: Schema.String,\n  createdAt: Schema.DateTimeUtc\n})\n\nconst idParam = HttpApiSchema.param(\"id\", Schema.NumberFromString)\n\nconst getUsers = HttpApiEndpoint.get(\"getUsers\", \"/users\").addSuccess(\n  Schema.Array(User)\n)\n\nconst getUser = HttpApiEndpoint.get(\"getUser\")`/user/${idParam}`.addSuccess(\n  User\n)\n\nconst createUser = HttpApiEndpoint.post(\"createUser\", \"/users\")\n  .setPayload(\n    Schema.Struct({\n      name: Schema.String\n    })\n  )\n  .addSuccess(User)\n\nconst deleteUser = HttpApiEndpoint.del(\"deleteUser\")`/users/${idParam}`\n\nconst updateUser = HttpApiEndpoint.patch(\"updateUser\")`/users/${idParam}`\n  .setPayload(\n    Schema.Struct({\n      name: Schema.String\n    })\n  )\n  .addSuccess(User)\n\nconst usersGroup = HttpApiGroup.make(\"users\")\n  .add(getUsers)\n  .add(getUser)\n  .add(createUser)\n  .add(deleteUser)\n  .add(updateUser)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI Annotations for HTTP Endpoints in TypeScript\nDESCRIPTION: Demonstrates how to annotate HTTP endpoints with OpenAPI metadata including descriptions, summaries, deprecation notices, and external documentation. Shows the resulting OpenAPI specification output.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  HttpApi,\n  HttpApiEndpoint,\n  HttpApiGroup,\n  OpenApi\n} from \"@effect/platform\"\nimport { Schema } from \"effect\"\n\nconst api = HttpApi.make(\"api\").add(\n  HttpApiGroup.make(\"group\")\n    .add(\n      HttpApiEndpoint.get(\"get\", \"/\")\n        .addSuccess(Schema.String)\n        // Add a description\n        .annotate(OpenApi.Description, \"my description\")\n        // Provide a summary\n        .annotate(OpenApi.Summary, \"my summary\")\n        // Mark the endpoint as deprecated\n        .annotate(OpenApi.Deprecated, true)\n        // Provide external documentation\n        .annotate(OpenApi.ExternalDocs, {\n          url: \"http://example.com\",\n          description: \"example\"\n        })\n    )\n    .add(\n      HttpApiEndpoint.get(\"excluded\", \"/excluded\")\n        .addSuccess(Schema.String)\n        // Exclude this endpoint from the final specification\n        .annotate(OpenApi.Exclude, true)\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Converting Effect Stream to Node.js Readable Stream - TypeScript\nDESCRIPTION: This snippet demonstrates how to convert an Effect Stream into a node.js Readable stream using the NodeStream module from the Effect platform. It allows for better integration with Node.js streams.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node-shared/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Stream } from \"effect\"\nimport * as NodeStream from \"@effect/platform-node/NodeStream\"\n\n// Effect<Readable>\nNodeStream.toReadable(Stream.make(\"a\", \"b\", \"c\"))\n```\n\n----------------------------------------\n\nTITLE: Using HttpClient Accessor APIs for GET Requests in TypeScript\nDESCRIPTION: Demonstrates how to use the HttpClient accessor APIs to send requests without first accessing the HttpClient service. This example shows sending a GET request directly using the HttpClient.get method and processing the JSON response.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FetchHttpClient, HttpClient } from \"@effect/platform\"\nimport { Effect } from \"effect\"\n\nconst program = HttpClient.get(\n  \"https://jsonplaceholder.typicode.com/posts/1\"\n).pipe(\n  Effect.andThen((response) => response.json),\n  Effect.provide(FetchHttpClient.layer)\n)\n\nEffect.runPromise(program)\n/*\nOutput:\n{\n  userId: 1,\n  id: 1,\n  title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n  body: 'quia et suscipit\\n' +\n    'suscipit recusandae consequuntur expedita et cum\\n' +\n    'reprehenderit molestiae ut ut quas totam\\n' +\n    'nostrum rerum est autem sunt rem eveniet architecto'\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Request with Text Body in TypeScript\nDESCRIPTION: Demonstrates making HTTP POST requests with plain text data and custom content type headers.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_67\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  FetchHttpClient,\n  HttpClient,\n  HttpClientRequest\n} from \"@effect/platform\"\nimport { NodeRuntime } from \"@effect/platform-node\"\nimport { Console, Effect } from \"effect\"\n\nconst addPost = Effect.gen(function* () {\n  const client = yield* HttpClient.HttpClient\n  return yield* HttpClientRequest.post(\n    \"https://jsonplaceholder.typicode.com/posts\"\n  ).pipe(\n    HttpClientRequest.bodyText(\n      JSON.stringify({\n        title: \"foo\",\n        body: \"bar\",\n        userId: 1\n      }),\n      \"application/json; charset=UTF-8\"\n    ),\n    client.execute,\n    Effect.flatMap((res) => res.json)\n  )\n}).pipe(Effect.provide(FetchHttpClient.layer))\n\naddPost.pipe(Effect.andThen(Console.log), NodeRuntime.runMain)\n```\n\n----------------------------------------\n\nTITLE: Applying Route-Level Middleware in Effect-TS\nDESCRIPTION: This example demonstrates how to apply middleware at the route level in an Effect-TS HTTP server. It creates a middleware constructor that logs the name of the middleware when a route is accessed.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_83\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  HttpMiddleware,\n  HttpRouter,\n  HttpServer,\n  HttpServerResponse\n} from \"@effect/platform\"\nimport { Effect } from \"effect\"\nimport { listen } from \"./listen.js\"\n\n// Middleware constructor that logs the name of the middleware\nconst withMiddleware = (name: string) =>\n  HttpMiddleware.make((app) =>\n    Effect.gen(function* () {\n      console.log(name) // Log the middleware name when the route is accessed\n      return yield* app // Continue with the original application flow\n    })\n  )\n\nconst router = HttpRouter.empty.pipe(\n  // Applying middleware to route \"/a\"\n  HttpRouter.get(\"/a\", HttpServerResponse.text(\"a\").pipe(withMiddleware(\"M1\"))),\n  // Applying middleware to route \"/b\"\n  HttpRouter.get(\"/b\", HttpServerResponse.text(\"b\").pipe(withMiddleware(\"M2\")))\n)\n\nconst app = router.pipe(HttpServer.serve())\n\nlisten(app, 3000)\n```\n\n----------------------------------------\n\nTITLE: Context Manipulation with Runtime Module in Effect-TS\nDESCRIPTION: Demonstrates APIs for manipulating context in the Runtime module, including updating the Context directly and providing services to an existing Runtime. This allows for dynamic context modifications at runtime.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_144\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Context, Runtime } from \"effect\"\n\ninterface Name {\n  readonly _: unique symbol\n}\nconst Name = Context.Tag<Name, string>(\"Name\")\n\nconst runtime: Runtime.Runtime<Name> = Runtime.defaultRuntime.pipe(\n  Runtime.provideService(Name, \"John\")\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw Request in Node.js HTTP Server\nDESCRIPTION: This snippet demonstrates how to access the raw request object in a Node.js HTTP server using @effect/platform-node. It logs the raw request object to the console.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_92\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  HttpRouter,\n  HttpServer,\n  HttpServerRequest,\n  HttpServerResponse\n} from \"@effect/platform\"\nimport { NodeHttpServer, NodeHttpServerRequest } from \"@effect/platform-node\"\nimport { Effect } from \"effect\"\nimport { listen } from \"./listen.js\"\n\nconst router = HttpRouter.empty.pipe(\n  HttpRouter.get(\n    \"/\",\n    Effect.gen(function* () {\n      const req = yield* HttpServerRequest.HttpServerRequest\n      const raw = NodeHttpServerRequest.toIncomingMessage(req)\n      console.log(raw)\n      return HttpServerResponse.empty()\n    })\n  )\n)\n\nlisten(HttpServer.serve(router), 3000)\n```\n\n----------------------------------------\n\nTITLE: Converting HttpApp to Web Handler in TypeScript\nDESCRIPTION: This snippet shows how to convert an HttpApp (router) to a web handler that can process Request objects and return Response objects using the toWebHandler function from @effect/platform.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_93\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpApp, HttpRouter, HttpServerResponse } from \"@effect/platform\"\n\n// Define the router with some routes\nconst router = HttpRouter.empty.pipe(\n  HttpRouter.get(\"/\", HttpServerResponse.text(\"content 1\")),\n  HttpRouter.get(\"/foo\", HttpServerResponse.text(\"content 2\"))\n)\n\n// Convert the router to a web handler\n// const handler: (request: Request) => Promise<Response>\nconst handler = HttpApp.toWebHandler(router)\n\n// Test the handler with a request\nconst response = await handler(new Request(\"http://localhost:3000/foo\"))\nconsole.log(await response.text()) // Output: content 2\n```\n\n----------------------------------------\n\nTITLE: Adding Bearer Token Authentication to HTTP Requests in Effect.ts\nDESCRIPTION: Shows how to include a Bearer token in an HTTP request using the bearerToken method of HttpClientRequest.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpClientRequest } from \"@effect/platform\"\n\nconst req = HttpClientRequest.get(\"https://api.example.com/data\").pipe(\n  HttpClientRequest.bearerToken(\"your_token\")\n)\n\nconsole.log(JSON.stringify(req.headers, null, 2))\n/*\nOutput:\n{\n  \"authorization\": \"Bearer your_token\"\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Implementing Catch-All Endpoint\nDESCRIPTION: Shows how to create a catch-all endpoint for handling unmatched routes\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpApiEndpoint } from \"@effect/platform\"\n\nconst catchAll = HttpApiEndpoint.get(\"catchAll\", \"*\")\n```\n\n----------------------------------------\n\nTITLE: Parsing URL Strings into URL Objects with effect/Schema\nDESCRIPTION: Demonstrates how to use Schema.URL to parse and validate URL strings, converting them into URL objects. Shows successful parsing of a valid URL and error handling for an invalid URL.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst schema = Schema.URL\n\n// Parse a valid URL string\nconsole.log(Schema.decodeUnknownSync(Schema.URL)(\"https://example.com\"))\n// Output: URL { href: 'https://example.com/', ... } (instance of URL)\n\n// Attempt to parse an invalid URL\nconsole.log(Schema.decodeUnknownSync(Schema.URL)(\"example.com\"))\n/*\nthrows:\nParseError: URL\n└─ Transformation process failure\n   └─ Unable to decode \"example.com\" into a URL. Invalid URL\n*/\n```\n\n----------------------------------------\n\nTITLE: Setting Up Basic Git-Style CLI\nDESCRIPTION: Initial setup for a Git-style CLI application using Effect-TS, demonstrating the basic command structure and configuration.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/cli/README.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Command } from \"@effect/cli\"\nimport { Effect } from \"effect\"\n\nconst minigit = Command.make(\n  \"minigit\",\n  {},\n  (config) => Effect.succeed(\"Welcome to Minigit!\")\n)\n```\n\n----------------------------------------\n\nTITLE: Database Migration Setup\nDESCRIPTION: Example of setting up and running database migrations using Effect SQL's Migrator module\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql/README.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect } from \"effect\"\nimport { SqlClient } from \"@effect/sql\"\n\nexport default Effect.flatMap(\n  SqlClient.SqlClient,\n  (sql) => sql`\n    CREATE TABLE users (\n      id serial PRIMARY KEY,\n      name varchar(255) NOT NULL,\n      created_at TIMESTAMP NOT NULL DEFAULT NOW(),\n      updated_at TIMESTAMP NOT NULL DEFAULT NOW()\n    )\n  `\n)\n```\n\n----------------------------------------\n\nTITLE: RateLimiter Service Implementation with Context and Layer\nDESCRIPTION: Shows a more real-world example of implementing a RateLimiter as a dedicated service with Context and Layer. This pattern allows for dependency injection and separation of concerns in an Effect-TS application.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_142\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Context, Effect, Layer, RateLimiter } from \"effect\"\n\nclass ApiLimiter extends Context.Tag(\"@services/ApiLimiter\")<\n  ApiLimiter,\n  RateLimiter.RateLimiter\n>() {\n  static Live = RateLimiter.make(10, \"2 seconds\").pipe(\n    Layer.scoped(ApiLimiter)\n  )\n}\n\nconst program = Effect.gen(function* ($) {\n  const rateLimit = yield* $(ApiLimiter)\n  for (let n = 0; n < 100; n++) {\n    yield* $(rateLimit(Effect.log(\"Calling RateLimited Effect\")))\n  }\n})\n\nprogram.pipe(Effect.provide(ApiLimiter.Live), Effect.runFork)\n```\n\n----------------------------------------\n\nTITLE: Implementing Logging Middleware in Effect-TS\nDESCRIPTION: This snippet creates a simple logging middleware that logs 'LOGGED' for each request. It demonstrates how to create and use middleware in an Effect-TS HTTP server application.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_80\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  HttpMiddleware,\n  HttpRouter,\n  HttpServer,\n  HttpServerResponse\n} from \"@effect/platform\"\nimport { Effect } from \"effect\"\nimport { listen } from \"./listen.js\"\n\nconst myLogger = HttpMiddleware.make((app) =>\n  Effect.gen(function* () {\n    console.log(\"LOGGED\")\n    return yield* app\n  })\n)\n\nconst router = HttpRouter.empty.pipe(\n  HttpRouter.get(\"/\", HttpServerResponse.text(\"Hello World\"))\n)\n\nconst app = router.pipe(HttpRouter.use(myLogger), HttpServer.serve())\n\nlisten(app, 3000)\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling in TypeScript HTTP Server\nDESCRIPTION: This snippet shows how to implement error handling in an HTTP server using @effect/platform. It includes routes that intentionally throw errors or fail, and demonstrates how to catch and manage these errors.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_89\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpRouter, HttpServer, HttpServerResponse } from \"@effect/platform\"\nimport { Effect } from \"effect\"\nimport { listen } from \"./listen.js\"\n\n// Define routes that might throw errors or fail\nconst router = HttpRouter.empty.pipe(\n  HttpRouter.get(\n    \"/throw\",\n    Effect.sync(() => {\n      throw new Error(\"BROKEN\") // This will intentionally throw an error\n    })\n  ),\n  HttpRouter.get(\"/fail\", Effect.fail(\"Uh oh!\")) // This will intentionally fail\n)\n\n// Configure the application to handle different types of errors\nconst app = router.pipe(\n  Effect.catchTags({\n    RouteNotFound: () =>\n      HttpServerResponse.text(\"Route Not Found\", { status: 404 })\n  }),\n  Effect.catchAllCause((cause) =>\n    HttpServerResponse.text(cause.toString(), { status: 500 })\n  ),\n  HttpServer.serve()\n)\n\nlisten(app, 3000)\n```\n\n----------------------------------------\n\nTITLE: Defining RPC Middleware in TypeScript\nDESCRIPTION: Demonstrates how to define middleware for the RPC server and client. It creates a CurrentUser context tag and an AuthMiddleware tag that provides the current user context and is required for the client implementation.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/rpc/README.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// middleware.ts\nimport { RpcMiddleware } from \"@effect/rpc\"\nimport { Context } from \"effect\"\nimport type { User } from \"./request.js\"\n\n// A context tag which represents the current user\nexport class CurrentUser extends Context.Tag(\"CurrentUser\")<\n  CurrentUser,\n  User\n>() {}\n\n// The context tag for the authentication middleware\nexport class AuthMiddleware extends RpcMiddleware.Tag<AuthMiddleware>()(\n  \"AuthMiddleware\",\n  {\n    // This middleware will provide the current user context\n    provides: CurrentUser,\n    // This middleware requires a client implementation too\n    requiredForClient: true\n  }\n) {}\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP API Group with Simple Handler\nDESCRIPTION: Creates a group implementation with a handler that returns a mock user object using HttpApiBuilder.group\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nconst usersGroupLive = HttpApiBuilder.group(api, \"users\", (handlers) =>\n  handlers.handle(\n    \"getUser\",\n    ({ path: { id } }) =>\n      Effect.succeed({\n        id,\n        name: \"John Doe\",\n        createdAt: DateTime.unsafeNow()\n      })\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an Async Latch with Effect.makeLatch in TypeScript\nDESCRIPTION: Example of creating and using a simple asynchronous latch with Effect.makeLatch, which allows a fiber to wait until the latch is opened.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_80\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect } from \"effect\"\n\nEffect.gen(function* () {\n  // Create a latch, starting in the closed state\n  const latch = yield* Effect.makeLatch(false)\n\n  // Fork a fiber that logs \"open sesame\" when the latch is opened\n  const fiber = yield* Effect.log(\"open sesame\").pipe(\n    latch.whenOpen,\n    Effect.fork\n  )\n\n  // Open the latch\n  yield* latch.open\n  yield* fiber.await\n})\n```\n\n----------------------------------------\n\nTITLE: Using Random.choice for Random Element Selection\nDESCRIPTION: Example of using Random.choice to randomly select an item from an array. This function simplifies getting a random element from a collection.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_94\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Random } from \"effect\"\n\nEffect.gen(function* () {\n  const randomItem = yield* Random.choice([1, 2, 3])\n  console.log(randomItem)\n})\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Queries with Effect TS and MySQL\nDESCRIPTION: This code snippet demonstrates how to execute raw SQL queries using Effect TS with the MySQL client. It showcases the use of the `.raw` property on the `Statement` to access the raw results of a query, such as the `ResultSetHeader` returned by MySQL for `INSERT` operations.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-d1/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n  import * as Effect from \"effect/Effect\"\n  import * as SqlClient from \"@effect/sql/SqlClient\"\n  import * as MysqlClient from \"@effect/sql/MysqlClient\"\n\n  const DatabaseLive = MysqlClient.layer({\n    database: Config.succeed(\"database\"),\n    username: Config.succeed(\"root\"),\n    password: Config.succeed(Redacted.make(\"password\"))\n  })\n\n  const program = Effect.gen(function* () {\n    const sql = yield* SqlClient.SqlClient\n\n    const result = yield* sql`INSERT INTO usernames VALUES (\"Bob\")`.raw\n\n    console.log(result)\n    /**\n     * ResultSetHeader {\n     *   fieldCount: 0,\n     *   affectedRows: 1,\n     *   insertId: 0,\n     *   info: '',\n     *   serverStatus: 2,\n     *   warningStatus: 0,\n     *   changedRows: 0\n     * }\n     */\n  })\n\n  program.pipe(Effect.provide(DatabaseLive), Effect.runPromise)\n```\n\n----------------------------------------\n\nTITLE: Validating Array Length with Effect Schema\nDESCRIPTION: Shows how to validate array lengths using `effect/Schema` with combinators like `Schema.minItems()`, `Schema.maxItems()`, and `Schema.itemsCount()`. These combinators are applied to an array schema using `pipe()` to enforce length constraints.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nSchema.Array(Schema.String).pipe(Schema.minItems(5)) // must contain 5 or more items\nSchema.Array(Schema.String).pipe(Schema.maxItems(5)) // must contain 5 or fewer items\nSchema.Array(Schema.String).pipe(Schema.itemsCount(5)) // must contain 5 items exactly\n```\n\n----------------------------------------\n\nTITLE: Implementing Echo CLI with Repeat Subcommand\nDESCRIPTION: Extended implementation of the echo CLI that adds a repeat subcommand for repeating messages multiple times. Includes support for text formatting and color options.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/cli/README.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Args, Command, Options } from \"@effect/cli\"\nimport { NodeContext, NodeRuntime } from \"@effect/platform-node\"\nimport { Console, Effect, Option } from \"effect\"\n\nconst text = Args.text({ name: \"text\" })\nconst bold = Options.boolean(\"bold\").pipe(Options.withAlias(\"b\"))\n\nconst colorToAnsiSequence = {\n  red: \"\\x1b[31m\",\n  green: \"\\x1b[32m\",\n  blue: \"\\x1b[34m\"\n} as const\nconst resetCode = \"\\x1b[0m\"\n\ntype SupportedColor = keyof typeof colorToAnsiSequence\nconst supportedColors = Object.keys(colorToAnsiSequence) as SupportedColor[]\n\nconst color = Options.choice(\"color\", supportedColors).pipe(\n  Options.withAlias(\"c\"),\n  Options.optional\n)\n\nconst applyColor = (\n  text: string,\n  color: Option.Option<SupportedColor>\n): string =>\n  Option.match(color, {\n    onNone: () => text,\n    onSome: (color) => `${colorToAnsiSequence[color]}${text}${resetCode}`\n  })\n\nconst count = Args.integer().pipe(Args.withDefault(1))\n\nconst repeat = Command.make(\"repeat\", { count }, ({ count }) =>\n  echo.pipe(\n    Effect.andThen((config) => Effect.repeatN(echo.handler(config), count - 1))\n  )\n)\n\nconst echo = Command.make(\n  \"echo\",\n  { text, bold, color },\n  ({ bold, color, text }) => {\n    let formattedText = applyColor(text, color)\n    if (bold) {\n      formattedText = `\\x1b[1m${formattedText}\\x1b[0m`\n    }\n    return Console.log(formattedText)\n  }\n)\n\nconst command = echo.pipe(Command.withSubcommands([repeat]))\n\nconst cli = Command.run(command, {\n  name: \"Echo CLI\",\n  version: \"v0.0.4\"\n})\n\ncli(process.argv).pipe(Effect.provide(NodeContext.layer), NodeRuntime.runMain)\n```\n\n----------------------------------------\n\nTITLE: Implementing Scoped Log Annotations in Effect-TS\nDESCRIPTION: Demonstrates how to use Effect.annotateLogsScoped to add temporary log annotations within a scoped context.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_112\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect } from \"effect\"\n\nEffect.gen(function* () {\n  yield* Effect.log(\"no annotations\")\n  yield* Effect.annotateLogsScoped({ foo: \"bar\" })\n  yield* Effect.log(\"annotated with foo=bar\")\n}).pipe(Effect.scoped, Effect.andThen(Effect.log(\"no annotations again\")))\n```\n\n----------------------------------------\n\nTITLE: Accessing Service Constants with Effect.serviceConstants\nDESCRIPTION: Demonstrates how to access any constant in a service, not just effects. This enables direct access to non-effect properties within a service implementation.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Context } from \"effect\"\n\nclass NumberRepo extends Context.TagClass(\"NumberRepo\")<\n  NumberRepo,\n  {\n    readonly numbers: Array<number>\n  }\n>() {\n  static numbers = Effect.serviceConstants(NumberRepo).numbers\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Common Path Prefixes in API - TypeScript\nDESCRIPTION: This example demonstrates how to use prefixes in API paths for better organization and management of route structures. It applies prefixes to individual endpoints and groups for a clearer URL definition.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpApi, HttpApiEndpoint, HttpApiGroup } from \"@effect/platform\"\nimport { Schema } from \"effect\"\n\nconst api = HttpApi.make(\"api\")\n  .add(\n    HttpApiGroup.make(\"group\")\n      .add(\n        HttpApiEndpoint.get(\"getRoot\", \"/\")\n          .addSuccess(Schema.String)\n          // Prefix for this endpoint\n          .prefix(\"/endpointPrefix\")\n      )\n      .add(HttpApiEndpoint.get(\"getA\", \"/a\").addSuccess(Schema.String))\n      // Prefix for all endpoints in the group\n      .prefix(\"/groupPrefix\")\n  )\n  // Prefix for the entire API\n  .prefix(\"/apiPrefix\")\n```\n\n----------------------------------------\n\nTITLE: Creating a File Logger in TypeScript using PlatformLogger\nDESCRIPTION: This snippet demonstrates how to create a file logger using the PlatformLogger module to write logfmt logs to a file. It configures a logger that writes to 'log.txt' and replaces the default logger with it.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PlatformLogger } from \"@effect/platform\"\nimport { NodeFileSystem, NodeRuntime } from \"@effect/platform-node\"\nimport { Effect, Layer, Logger } from \"effect\"\n\nconst fileLogger = Logger.logfmtLogger.pipe(PlatformLogger.toFile(\"log.txt\"))\nconst LoggerLive = Logger.replaceScoped(\n  Logger.defaultLogger,\n  fileLogger\n).pipe(Layer.provide(NodeFileSystem.layer))\n\nEffect.log(\"a\").pipe(\n  Effect.zipRight(Effect.log(\"b\")),\n  Effect.zipRight(Effect.log(\"c\")),\n  Effect.provide(LoggerLive),\n  NodeRuntime.runMain\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Flaky Tests with it.flakyTest in TypeScript\nDESCRIPTION: This snippet outlines how to implement the `it.flakyTest` utility to manage tests susceptible to intermittent failure due to randomness. It includes a retry mechanism with a specified timeout.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/vitest/README.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { it } from \"@effect/vitest\"\nimport { Effect, Random } from \"effect\"\n\n// Simulating a flaky effect\nconst flaky = Effect.gen(function* () {\n  const random = yield* Random.nextBoolean\n  if (random) {\n    return yield* Effect.fail(\"Failed due to randomness\")\n  }\n})\n\n// Standard test that may fail intermittently\nit.effect(\"possibly failing test\", () => flaky)\n\n// Retrying the flaky test with a 5-second timeout\nit.effect(\"retrying until success or timeout\", () =>\n  it.flakyTest(flaky, \"5 seconds\")\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Headers in HTTP Requests with Effect.ts\nDESCRIPTION: Shows how to set request headers using setHeader for a single header and setHeaders for multiple headers simultaneously in an HTTP client request.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpClientRequest } from \"@effect/platform\"\n\nconst req = HttpClientRequest.get(\"https://api.example.com/data\").pipe(\n  // Setting a single header\n  HttpClientRequest.setHeader(\"Authorization\", \"Bearer your_token_here\"),\n  // Setting multiple headers\n  HttpClientRequest.setHeaders({\n    \"Content-Type\": \"application/json; charset=UTF-8\",\n    \"Custom-Header\": \"CustomValue\"\n  })\n)\n\nconsole.log(JSON.stringify(req.headers, null, 2))\n/*\nOutput:\n{\n  \"authorization\": \"Bearer your_token_here\",\n  \"content-type\": \"application/json; charset=UTF-8\",\n  \"custom-header\": \"CustomValue\"\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Adding Descriptions to Security Definitions in Effect.ts\nDESCRIPTION: Demonstrates how to add metadata like descriptions to security definitions using HttpApiSecurity.annotate. These descriptions appear in the Swagger documentation to help developers understand the API's security requirements.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  HttpApiMiddleware,\n  HttpApiSchema,\n  HttpApiSecurity,\n  OpenApi\n} from \"@effect/platform\"\nimport { Context, Schema } from \"effect\"\n\nclass User extends Schema.Class<User>(\"User\")({ id: Schema.Number }) {}\n\nclass Unauthorized extends Schema.TaggedError<Unauthorized>()(\n  \"Unauthorized\",\n  {},\n  HttpApiSchema.annotations({ status: 401 })\n) {}\n\nclass CurrentUser extends Context.Tag(\"CurrentUser\")<CurrentUser, User>() {}\n\nclass Authorization extends HttpApiMiddleware.Tag<Authorization>()(\n  \"Authorization\",\n  {\n    failure: Unauthorized,\n    provides: CurrentUser,\n    security: {\n      myBearer: HttpApiSecurity.bearer.pipe(\n        // Add a description to the security definition\n        HttpApiSecurity.annotate(OpenApi.Description, \"my description\")\n      )\n    }\n  }\n) {}\n```\n\n----------------------------------------\n\nTITLE: INSERT Resolver Implementation\nDESCRIPTION: Example of implementing an INSERT resolver with schema validation for a Person entity\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Schema, pipe } from \"effect\"\nimport { SqlResolver, SqlClient } from \"@effect/sql\"\n\nclass Person extends Schema.Class<Person>(\"Person\")({ \n  id: Schema.Number,\n  name: Schema.String,\n  createdAt: Schema.DateFromSelf,\n  updatedAt: Schema.DateFromSelf\n}) {}\n\nconst InsertPersonSchema = Schema.Struct(\n  Struct.omit(Person.fields, \"id\", \"createdAt\", \"updatedAt\")\n)\n\nexport const makePersonService = Effect.gen(function* () {\n  const sql = yield* SqlClient.SqlClient\n\n  const InsertPerson = yield* SqlResolver.ordered(\"InsertPerson\", {\n    Request: InsertPersonSchema,\n    Result: Person,\n    execute: (requests) =>\n      sql`\n        INSERT INTO people\n        ${sql.insert(requests)}\n        RETURNING people.*\n      `\n  })\n\n  const insert = InsertPerson.execute\n\n  return { insert }\n})\n```\n\n----------------------------------------\n\nTITLE: Selecting and Omitting Fields in Effect/Schema\nDESCRIPTION: This snippet demonstrates how to select or omit fields from an object schema using Effect/Schema.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst Recipe = Schema.Struct({\n  id: Schema.String,\n  name: Schema.String,\n  ingredients: Schema.Array(Schema.String)\n})\n\nconst JustTheName = Recipe.pick(\"name\")\n\nconst NoIDRecipe = Recipe.omit(\"id\")\n```\n\n----------------------------------------\n\nTITLE: Tuple Map Implementation in TypeScript\nDESCRIPTION: Example showing how Tuple.map transforms each element of a tuple using a given function while preserving type information.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_75\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pipe, Tuple } from \"effect\"\n\nconst result = pipe(\n  //  ^? [string, string, string]\n  [\"a\", 1, false] as const,\n  T.map((el) => {\n    //^? \"a\" | 1 | false\n    return el.toString().toUppercase()\n  })\n)\nassert.deepStrictEqual(result, [\"A\", \"1\", \"FALSE\"])\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Status Codes\nDESCRIPTION: Demonstrates how to set custom HTTP status codes for successful responses\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpApiEndpoint } from \"@effect/platform\"\nimport { Schema } from \"effect\"\n\nconst User = Schema.Struct({\n  id: Schema.Number,\n  name: Schema.String,\n  createdAt: Schema.DateTimeUtc\n})\n\nconst getUsers = HttpApiEndpoint.get(\"getUsers\", \"/users\")\n  // Override the default success status\n  .addSuccess(Schema.Array(User), { status: 206 })\n```\n\n----------------------------------------\n\nTITLE: Expecting Test Failures\nDESCRIPTION: Shows how to assert that a test fails using it.effect.fails for tracking known failures.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/vitest/README.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { it } from \"@effect/vitest\"\nimport { Effect, Exit } from \"effect\"\n\nfunction divide(a: number, b: number): number {\n  if (b === 0) return Effect.fail(\"Cannot divide by zero\")\n  return Effect.succeed(a / b)\n}\n\n// Temporarily assert that the test for dividing by zero fails.\nit.effect.fails(\"dividing by zero special cases\", ({ expect }) =>\n  Effect.gen(function* () {\n    const result = yield* Effect.exit(divide(4, 0))\n    expect(result).toStrictEqual(0)\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Annotating HttpApiGroup for OpenAPI Documentation in TypeScript\nDESCRIPTION: Example demonstrating how to annotate API groups with descriptions, external documentation links, overrides, and transformations. Shows how to exclude specific groups from the final OpenAPI specification.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpApi, HttpApiGroup, OpenApi } from \"@effect/platform\"\n\nconst api = HttpApi.make(\"api\")\n  .add(\n    HttpApiGroup.make(\"group\")\n      // Add a description for the group\n      .annotate(OpenApi.Description, \"my description\")\n      // Provide external documentation links\n      .annotate(OpenApi.ExternalDocs, {\n        url: \"http://example.com\",\n        description: \"example\"\n      })\n      // Override parts of the final output\n      .annotate(OpenApi.Override, { name: \"my name\" })\n      // Transform the final specification for this group\n      .annotate(OpenApi.Transform, (spec) => ({\n        ...spec,\n        name: spec.name + \"-transformed\"\n      }))\n  )\n  .add(\n    HttpApiGroup.make(\"excluded\")\n      // Exclude the group from the final specification\n      .annotate(OpenApi.Exclude, true)\n  )\n\n// Generate the OpenAPI spec\nconst spec = OpenApi.fromApi(api)\n```\n\n----------------------------------------\n\nTITLE: Implementing Echo CLI with Arguments\nDESCRIPTION: Enhanced CLI implementation that accepts and echoes text arguments using Effect-TS. Shows how to define and handle command arguments.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/cli/README.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// Import the necessary modules from the Effect libraries\nimport { Args, Command } from \"@effect/cli\"\nimport { NodeContext, NodeRuntime } from \"@effect/platform-node\"\nimport { Console, Effect } from \"effect\"\n\n// Define a text argument\nconst text = Args.text({ name: \"text\" })\n\n// Create a command that logs the provided text argument to the console\nconst command = Command.make(\"echo\", { text }, ({ text }) => Console.log(text))\n\n// Configure and initialize the CLI application\nconst cli = Command.run(command, {\n  name: \"Echo CLI\",\n  version: \"v0.0.1\"\n})\n\n// Prepare and run the CLI application, providing necessary context and runtime\ncli(process.argv).pipe(Effect.provide(NodeContext.layer), NodeRuntime.runMain)\n```\n\n----------------------------------------\n\nTITLE: Implementing Timeout Option in Effect-TS\nDESCRIPTION: Shows usage of Effect.timeoutOption to handle timeouts by returning None if the effect times out, or Some with the value if it completes in time.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_113\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect } from \"effect\"\n\n// will return `None` after 500 millis\nEffect.succeed(\"hello\").pipe(\n  Effect.delay(1000),\n  Effect.timeoutOption(\"500 millis\")\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Service Tags with TagClass (TypeScript)\nDESCRIPTION: Shows the new recommended approach for creating service tags using the Tag class factory which automatically creates an opaque identifier at the type level, simplifying the tag creation process.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node/CHANGELOG.md#2025-04-21_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Context } from \"effect\"\nclass Service extends Context.Tag(\"Service\")<\n  Service,\n  {\n    number: Effect.Effect<never, never, number>\n  }\n>() {}\n\nconst program = Effect.flatMap(Service, ({ number }) => number).pipe(\n  Effect.flatMap((_) => Effect.log(`number: ${_}`))\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies in HTTP Response with Effect - TypeScript\nDESCRIPTION: This snippet shows how to add cookies to an HTTP response and use a cookies reference in an HTTP client. It allows for the management of cookies during HTTP interactions using Effect.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node-shared/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Http from \"@effect/platform/HttpServer\"\n\nHttp.response.empty().pipe(\n  Http.response.setCookies([\n    [\"name\", \"value\"],\n    [\"foo\", \"bar\", { httpOnly: true }]\n  ])\n)\n\nimport * as Http from \"@effect/platform/HttpClient\"\nimport { Effect, Ref } from \"effect\"\n\nEffect.gen(function* (_) {\n  const ref = yield* _(Ref.make(Http.cookies.empty))\n  const defaultClient = yield* _(Http.client.Client)\n  const clientWithCookies = defaultClient.pipe(\n    Http.client.withCookiesRef(ref),\n    Http.client.filterStatusOk\n  )\n\n  yield* _(\n    Http.request.get(\"https://www.google.com/\"),\n    clientWithCookies,\n    Effect.scoped\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: RateLimiter Usage Example with Effect-TS\nDESCRIPTION: Demonstrates how to use the RateLimiter utility to limit the number of calls to a resource within a time window using the token bucket algorithm. This example creates a rate limiter that executes up to 10 requests within 2 seconds.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_141\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, RateLimiter } from \"effect\"\n\n// we need a scope because the rate limiter needs to allocate a state and a background job\nconst program = Effect.scoped(\n  Effect.gen(function* ($) {\n    // create a rate limiter that executes up to 10 requests within 2 seconds\n    const rateLimit = yield* $(RateLimiter.make(10, \"2 seconds\"))\n    // simulate repeated calls\n    for (let n = 0; n < 100; n++) {\n      // wrap the effect we want to limit with rateLimit\n      yield* $(rateLimit(Effect.log(\"Calling RateLimited Effect\")))\n    }\n  })\n)\n\n// will print 10 calls immediately and then throttle\nprogram.pipe(Effect.runFork)\n```\n\n----------------------------------------\n\nTITLE: Getting Keys from MutableHashMap in TypeScript\nDESCRIPTION: Example of using MutableHashMap.keys to retrieve all keys currently stored in a MutableHashMap.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_85\n\nLANGUAGE: typescript\nCODE:\n```\nconst map = MutableHashMap.make([\n  [\"a\", \"a\"],\n  [\"b\", \"b\"],\n  [\"c\", \"c\"]\n])\nconst keys = MutableHashMap.keys(map) // [\"a\", \"b\", \"c\"]\n```\n\n----------------------------------------\n\nTITLE: Customizing FetchHttpClient with RequestInit Options in Effect.ts\nDESCRIPTION: Illustrates how to customize the FetchHttpClient by passing RequestInit options to configure credentials, headers, and other request properties.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FetchHttpClient, HttpClient } from \"@effect/platform\"\nimport { Effect, Layer } from \"effect\"\n\nconst CustomFetchLive = FetchHttpClient.layer.pipe(\n  Layer.provide(\n    Layer.succeed(FetchHttpClient.RequestInit, {\n      credentials: \"include\"\n    })\n  )\n)\n\nconst program = Effect.gen(function* () {\n  const client = yield* HttpClient.HttpClient\n  const response = yield* client.get(\n    \"https://jsonplaceholder.typicode.com/posts/1\"\n  )\n  const json = yield* response.json\n  console.log(json)\n}).pipe(Effect.provide(CustomFetchLive))\n```\n\n----------------------------------------\n\nTITLE: Creating and Using an Object Schema in Zod\nDESCRIPTION: Shows how to create a schema for objects using Zod, demonstrating parsing and type inference for a simple User object.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from \"zod\"\n\nconst User = z.object({\n  username: z.string()\n})\n\nUser.parse({ username: \"Ludwig\" })\n\n// extract the inferred type\ntype User = z.infer<typeof User>\n// { username: string }\n```\n\n----------------------------------------\n\nTITLE: Service Constants Access in TypeScript\nDESCRIPTION: Shows how to access service constants beyond effects using the new Effect.serviceConstants method\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-bun/CHANGELOG.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Context } from \"effect\"\n\nclass NumberRepo extends Context.TagClass(\"NumberRepo\")<\n  NumberRepo,\n  {\n    readonly numbers: Array<number>\n  }\n>() {\n  static numbers = Effect.serviceConstants(NumberRepo).numbers\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Layer-based HTTP Router\nDESCRIPTION: Example demonstrating how to create and configure HTTP routers using Layer-based APIs including route definitions and server setup\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  HttpMiddleware,\n  HttpRouter,\n  HttpServer,\n  HttpServerResponse\n} from \"@effect/platform\"\nimport { BunHttpServer, BunRuntime } from \"@effect/platform-bun\"\nimport { Effect, Layer } from \"effect\"\n\n// create your router Context.Tag\nclass UserRouter extends HttpRouter.Tag(\"UserRouter\")<UserRouter>() {}\n\n// create routes with the `.use` api.\n// There is also `.useScoped`\nconst GetUsers = UserRouter.use((router) =>\n  Effect.gen(function* () {\n    yield* router.get(\"/\", HttpServerResponse.text(\"got users\"))\n  })\n)\n\nconst CreateUser = UserRouter.use((router) =>\n  Effect.gen(function* () {\n    yield* router.post(\"/\", HttpServerResponse.text(\"created user\"))\n  })\n)\n\nconst AllRoutes = Layer.mergeAll(GetUsers, CreateUser)\n\nconst ServerLive = BunHttpServer.layer({ port: 3000 })\n\n// access the router with the `.router` api, to create your server\nconst HttpLive = Layer.unwrapEffect(\n  Effect.gen(function* () {\n    return HttpServer.serve(yield* UserRouter.router, HttpMiddleware.logger)\n  })\n).pipe(\n  Layer.provide(UserRouter.Live),\n  Layer.provide(AllRoutes),\n  Layer.provide(ServerLive)\n)\n\nBunRuntime.runMain(Layer.launch(HttpLive))\n```\n\n----------------------------------------\n\nTITLE: Testing Successful Operations\nDESCRIPTION: Example showing how to test a division function that returns an Effect, demonstrating successful operation testing.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/vitest/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { it, expect } from \"@effect/vitest\"\nimport { Effect } from \"effect\"\n\n// A simple divide function that returns an Effect, failing when dividing by zero\nfunction divide(a: number, b: number) {\n  if (b === 0) return Effect.fail(\"Cannot divide by zero\")\n  return Effect.succeed(a / b)\n}\n\n// Testing a successful division\nit.effect(\"test success\", () =>\n  Effect.gen(function* () {\n    const result = yield* divide(4, 2) // Expect 4 divided by 2 to succeed\n    expect(result).toBe(2) // Assert that the result is 2\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Router Module in Effect-TS\nDESCRIPTION: This snippet demonstrates how to create a router module for handling bird-related routes. It defines two routes: the home page and an about page.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_78\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpRouter, HttpServerResponse } from \"@effect/platform\"\n\nexport const birds = HttpRouter.empty.pipe(\n  HttpRouter.get(\"/\", HttpServerResponse.text(\"Birds home page\")),\n  HttpRouter.get(\"/about\", HttpServerResponse.text(\"About birds\"))\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing RPC Middleware in TypeScript\nDESCRIPTION: Shows how to implement the previously defined middleware for both server and client. It applies the middleware to a UserRpcs group, implements the server-side middleware to provide a current user, and implements the client-side middleware to add an authorization header to requests.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/rpc/README.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Headers } from \"@effect/platform\"\nimport { Rpc, RpcClient, RpcGroup, RpcMiddleware, RpcServer } from \"@effect/rpc\"\nimport { Effect, Layer, Schema } from \"effect\"\nimport { AuthMiddleware } from \"./middleware.js\"\nimport { User } from \"./request.js\"\n\nexport class UserRpcs extends RpcGroup.make(\n  Rpc.make(\"UserById\", {\n    success: User,\n    payload: {\n      id: Schema.String\n    }\n  })\n    // apply the middleware to a single RPC\n    .middleware(AuthMiddleware)\n)\n  // or apply the middleware to the entire group\n  .middleware(AuthMiddleware) {}\n\n// Implement the middleware for a server\nexport const AuthLive: Layer.Layer<AuthMiddleware> = Layer.succeed(\n  AuthMiddleware,\n  // A middleware that provides the current user.\n  //\n  // You can access the headers, payload, and the RPC definition when\n  // implementing the middleware.\n  AuthMiddleware.of(({ headers, payload, rpc }) =>\n    Effect.succeed(new User({ id: \"123\", name: \"Logged in user\" }))\n  )\n)\n\n// apply the middleware to a rpc server\nRpcServer.layer(UserRpcs).pipe(Layer.provide(AuthLive))\n\n// Implement the middleware for a client\n//\n// The client middleware can access the request and the RPC definition, and\n// returns a modified request.\nexport const AuthClientLive: Layer.Layer<\n  RpcMiddleware.ForClient<AuthMiddleware>\n> = RpcMiddleware.layerClient(AuthMiddleware, ({ request, rpc }) =>\n  Effect.succeed({\n    ...request,\n    headers: Headers.set(request.headers, \"authorization\", \"Bearer token\")\n  })\n)\n\n// apply the middleware to a rpc client\nexport class UsersClient extends Effect.Service<UsersClient>()(\n  \"UsersClient\",\n  {\n    scoped: RpcClient.make(UserRpcs),\n    // add the middleware layer to the dependencies\n    dependencies: [AuthClientLive]\n  }\n) {}\n```\n\n----------------------------------------\n\nTITLE: Defining a Catchall Schema for Additional Properties with Effect/Schema\nDESCRIPTION: This snippet demonstrates how to define a catchall schema for additional properties in Effect/Schema.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst person = Schema.Struct(\n  {\n    name: Schema.String\n  },\n  Schema.Record({ key: Schema.String, value: Schema.String })\n)\n\nSchema.decodeUnknownSync(person)({\n  name: \"bob dylan\",\n  validExtraKey: \"foo\" // works fine\n})\n\nSchema.decodeUnknownSync(person)({\n  name: \"bob dylan\",\n  validExtraKey: true // fails\n})\n// => throws ParseError\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a String Schema in effect/Schema\nDESCRIPTION: Demonstrates creating a schema for strings using effect/Schema, showing parsing, safe parsing with Either, and error handling for both valid and invalid inputs.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\n// creating a schema for strings\nconst mySchema = Schema.String\n\n// parsing\nSchema.decodeUnknownSync(mySchema)(\"tuna\") // => \"tuna\"\nSchema.decodeUnknownSync(mySchema)(12) // => throws ParseError\n\n// \"safe\" parsing (doesn't throw error if validation fails)\nSchema.decodeUnknownEither(mySchema)(\"tuna\") // => Either.right(\"tuna\")\nSchema.decodeUnknownEither(mySchema)(12) // => Either.left(ParseError)\n```\n\n----------------------------------------\n\nTITLE: Converting HTTP Response to Text in Effect.ts\nDESCRIPTION: Shows how to convert an HTTP response to text using the text method of HttpClientResponse.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_62\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FetchHttpClient, HttpClient } from \"@effect/platform\"\nimport { NodeRuntime } from \"@effect/platform-node\"\nimport { Console, Effect } from \"effect\"\n\nconst getPostAsText = Effect.gen(function* () {\n  const client = yield* HttpClient.HttpClient\n  const response = yield* client.get(\n    \"https://jsonplaceholder.typicode.com/posts/1\"\n  )\n  return yield* response.text\n}).pipe(Effect.provide(FetchHttpClient.layer))\n\ngetPostAsText.pipe(\n  Effect.andThen((post) => Console.log(typeof post, post)),\n  NodeRuntime.runMain\n)\n/*\nOutput:\nstring {\n  userId: 1,\n  id: 1,\n  title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n  body: 'quia et suscipit\\n' +\n    'suscipit recusandae consequuntur expedita et cum\\n' +\n    'reprehenderit molestiae ut ut quas totam\\n' +\n    'nostrum rerum est autem sunt rem eveniet architecto'\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Implementing Enhanced Echo CLI with Color Options\nDESCRIPTION: Implementation of an echo command with support for text colors and bold formatting using ANSI escape codes. Includes options parsing and color application functionality.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/cli/README.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Args, Command, Options } from \"@effect/cli\"\nimport { NodeContext, NodeRuntime } from \"@effect/platform-node\"\nimport { Console, Effect, Option } from \"effect\"\n\nconst text = Args.text({ name: \"text\" })\nconst bold = Options.boolean(\"bold\").pipe(Options.withAlias(\"b\"))\n\nconst colorToAnsiSequence = {\n  red: \"\\x1b[31m\",\n  green: \"\\x1b[32m\",\n  blue: \"\\x1b[34m\"\n} as const\nconst resetCode = \"\\x1b[0m\"\n\ntype SupportedColor = keyof typeof colorToAnsiSequence\nconst supportedColors = Object.keys(colorToAnsiSequence) as SupportedColor[]\n\nconst color = Options.choice(\"color\", supportedColors).pipe(\n  Options.withAlias(\"c\"),\n  Options.optional\n)\n\nconst applyColor = (\n  text: string,\n  color: Option.Option<SupportedColor>\n): string =>\n  Option.match(color, {\n    onNone: () => text,\n    onSome: (color) => `${colorToAnsiSequence[color]}${text}${resetCode}`\n  })\n\nconst command = Command.make(\n  \"echo\",\n  { text, bold, color },\n  ({ bold, color, text }) => {\n    let formattedText = applyColor(text, color)\n    if (bold) {\n      formattedText = `\\x1b[1m${formattedText}\\x1b[0m`\n    }\n    return Console.log(formattedText)\n  }\n)\n\nconst cli = Command.run(command, {\n  name: \"Echo CLI\",\n  version: \"v0.0.3\"\n})\n\ncli(process.argv).pipe(Effect.provide(NodeContext.layer), NodeRuntime.runMain)\n```\n\n----------------------------------------\n\nTITLE: Accessing Service Constants with Effect.serviceConstants\nDESCRIPTION: Illustrates how Effect.serviceConstants can now access any constant in a service, not just effects, allowing for better service member access.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/rpc/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Context } from \"effect\"\n\nclass NumberRepo extends Context.TagClass(\"NumberRepo\")<\n  NumberRepo,\n  {\n    readonly numbers: Array<number>\n  }\n>() {\n  static numbers = Effect.serviceConstants(NumberRepo).numbers\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Description to Schemas in Zod and Effect/Schema\nDESCRIPTION: Demonstrates how to add descriptive metadata to schemas in both Zod and Effect/Schema libraries. Shows the difference between Zod's .describe() method and Effect/Schema's annotations() approach.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_60\n\nLANGUAGE: typescript\nCODE:\n```\nconst documentedString = z\n  .string()\n  .describe(\"A useful bit of text, if you know what to do with it.\")\ndocumentedString.description // A useful bit of text…\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema, SchemaAST } from \"effect\"\n\nconst documentedString = Schema.String.annotations({\n  description: \"A useful bit of text, if you know what to do with it.\"\n})\n\nconsole.log(SchemaAST.getDescriptionAnnotation(documentedString.ast))\n/*\nOutput:\n{\n  _id: 'Option',\n  _tag: 'Some',\n  value: 'A useful bit of text, if you know what to do with it.'\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Using DateTime Module in Effect-TS\nDESCRIPTION: Example of using the DateTime module for working with time, including time zones and daylight saving time. This code demonstrates creating datetime objects, performing date arithmetic, and changing time zones.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_91\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DateTime, Effect } from \"effect\"\n\nEffect.gen(function* () {\n  // Get the current time in the current time zone\n  const now = yield* DateTime.nowInCurrentZone\n\n  // Math functions are included\n  const tomorrow = DateTime.add(now, 1, \"day\")\n\n  // Convert to a different time zone\n  // The UTC portion of the `DateTime` is preserved and only the time zone is\n  // changed\n  const sydneyTime = tomorrow.pipe(\n    DateTime.unsafeSetZoneNamed(\"Australia/Sydney\")\n  )\n}).pipe(DateTime.withCurrentZoneNamed(\"America/New_York\"))\n```\n\n----------------------------------------\n\nTITLE: Returning Raw SQL Query Results in sql-sqlite-node\nDESCRIPTION: This code snippet demonstrates how to return raw SQL query results in sql-sqlite-node. It inserts a value into a table and then asserts that the response matches the expected result, including the number of changes and the last inserted row ID.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-sqlite-node/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nresponse = yield * sql`INSERT INTO test (name) VALUES ('hello')`.raw\nassert.deepStrictEqual(response, { changes: 1, lastInsertRowid: 1 })\n```\n\n----------------------------------------\n\nTITLE: String Length Validation with Custom Messages\nDESCRIPTION: Implementation of string length validation with custom error messages in both libraries. Shows how to add specific error messages for minimum length requirements.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nz.string().min(5, { message: \"Must be 5 or more characters long\" })\n```\n\nLANGUAGE: typescript\nCODE:\n```\nSchema.String.pipe(\n  Schema.minLength(5, { message: () => \"Must be 5 or more characters long\" })\n)\n```\n\n----------------------------------------\n\nTITLE: Using Fiber as a subtype of Effect in TypeScript\nDESCRIPTION: Example demonstrating how Fiber is now a subtype of Effect, allowing direct use in yield expressions without explicit Fiber.join calls.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_82\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Fiber } from \"effect\"\n\nEffect.gen(function*() {\n  const fiber = yield* Effect.fork(Effect.succeed(1))\n\n  const oldWay = yield* Fiber.join(fiber)\n  const now = yield* fiber\n}))\n```\n\n----------------------------------------\n\nTITLE: Retrieving an Element from a Tuple with Tuple.at\nDESCRIPTION: Shows how to use the Tuple.at API to retrieve an element at a specified index from a tuple, returning the element at the given position.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_107\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Tuple } from \"effect\"\n\nassert.deepStrictEqual(Tuple.at([1, \"hello\", true], 1), \"hello\")\n```\n\n----------------------------------------\n\nTITLE: Logger Console Integration in TypeScript\nDESCRIPTION: Shows how to configure a logger to output to console.log or console.error\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_120\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Logger } from \"effect\"\n\n// send output to stderr\nconst stderrLogger = Logger.withConsoleError(Logger.stringLogger)\n```\n\n----------------------------------------\n\nTITLE: Using Prompt.all with Node.js Context - TypeScript\nDESCRIPTION: This snippet demonstrates how to use the Prompt.all method to create a prompt for both username and password, integrating with the Node.js context and effect framework. The use of Effect for error handling and logic processing is highlighted.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/cli/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Prompt from \"@effect/cli/Prompt\"\nimport * as NodeContext from \"@effect/platform-node/NodeContext\"\nimport * as Runtime from \"@effect/platform-node/NodeRuntime\"\nimport * as Effect from \"effect/Effect\"\n\nconst program = Prompt.all({\n  username: Prompt.text({\n    message: \"Enter your username\"\n  }),\n  password: Prompt.password({\n    message: \"Enter your password: \",\n    validate: (value) =>\n      value.length === 0\n        ? Effect.fail(\"Password cannot be empty\")\n        : Effect.succeed(value)\n  })\n})\n\nprogram.pipe(\n  Effect.flatMap(({ username, password }) => /* Your logic here */ ),\n  Effect.provide(NodeContext.layer),\n  NodeRuntime.runMain\n)\n```\n\n----------------------------------------\n\nTITLE: Using SqliteDrizzle with Effect and Drizzle ORM\nDESCRIPTION: Example demonstrating how to use SqliteDrizzle to integrate Drizzle ORM query builders with @effect/sql for SQLite operations.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-drizzle/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SqliteDrizzle } from \"@effect/sql-drizzle/Sqlite\"\nimport * as D from \"drizzle-orm/sqlite-core\"\nimport { Effect } from \"effect\"\n\nconst users = D.sqliteTable(\"users\", {\n  id: D.integer(\"id\").primaryKey(),\n  name: D.text(\"name\")\n})\n\nEffect.gen(function* () {\n  const db = yield* SqliteDrizzle\n  yield* db.delete(users)\n  yield* db.insert(users).values({ id: 1, name: \"Alice\" })\n  const results: Array<{\n    id: number\n    name: string | null\n  }> = yield* db.select().from(users)\n  console.log(\"got results\", results)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI Client with Per-Request Transformations in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up an OpenAI client with per-request HTTP client transformations using the Effect framework. It configures a GPT-4 completions layer and adds a custom header to the request.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/ai/openai/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Completions } from \"@effect/ai\"\nimport {\n  OpenAiClient,\n  OpenAiCompletions,\n  OpenAiConfig\n} from \"@effect/ai-openai\"\nimport { HttpClient, HttpClientRequest } from \"@effect/platform\"\nimport { NodeHttpClient } from \"@effect/platform-node\"\nimport { Config, Effect, Layer } from \"effect\"\n\nconst OpenAi = OpenAiClient.layerConfig({\n  apiKey: Config.redacted(\"OPENAI_API_KEY\")\n}).pipe(Layer.provide(NodeHttpClient.layerUndici))\n\nconst Gpt4oCompletions = OpenAiCompletions.layer({\n  model: \"gpt-4o\"\n}).pipe(Layer.provide(OpenAi))\n\nconst program = Effect.gen(function* () {\n  const completions = yield* Completions.Completions\n\n  yield* completions.create(\"Tell me a dad joke\").pipe(\n    // Per-request HTTP client transforms which are only applied if\n    // the OpenAi provider is in use\n    OpenAiConfig.withClientTransform(\n      HttpClient.mapRequest(\n        HttpClientRequest.setHeader(\"x-dad-jokes\", \"are-awesome\")\n      )\n    )\n  )\n})\n\nprogram.pipe(Effect.provide(Gpt4oCompletions), Effect.runPromise)\n```\n\n----------------------------------------\n\nTITLE: Using Stream.onEnd to Execute Effects After Stream Completion\nDESCRIPTION: Example of using Stream.onEnd to execute an effect when a stream completes. This API allows specifying cleanup or finalization logic to run after all stream elements have been processed.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_95\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Console, Effect, Stream } from \"effect\"\n\nconst stream = Stream.make(1, 2, 3).pipe(\n  Stream.map((n) => n * 2),\n  Stream.tap((n) => Console.log(`after mapping: ${n}`)),\n  Stream.onEnd(Console.log(\"Stream ended\"))\n)\n\nEffect.runPromise(Stream.runCollect(stream)).then(console.log)\n// after mapping: 2\n// after mapping: 4\n// after mapping: 6\n// Stream ended\n// { _id: 'Chunk', values: [ 2, 4, 6 ] }\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Queries with Effect-TS\nDESCRIPTION: This code snippet demonstrates how to execute raw SQL queries using the Effect-TS SQL client. It shows how to access the `.raw` property on the `Statement` to retrieve raw results from the query, which can be useful when the SQL client returns specific result formats, such as `ResultSetHeader` in MySQL.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-pg/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Effect from \"effect/Effect\"\nimport * as SqlClient from \"@effect/sql/SqlClient\"\nimport * as MysqlClient from \"@effect/sql/MysqlClient\"\n\nconst DatabaseLive = MysqlClient.layer({\n  database: Config.succeed(\"database\"),\n  username: Config.succeed(\"root\"),\n  password: Config.succeed(Redacted.make(\"password\"))\n})\n\nconst program = Effect.gen(function* () {\n  const sql = yield* SqlClient.SqlClient\n\n  const result = yield* sql`INSERT INTO usernames VALUES (\"Bob\")`.raw\n\n  console.log(result)\n  /**\n   * ResultSetHeader {\n   *   fieldCount: 0,\n   *   affectedRows: 1,\n   *   insertId: 0,\n   *   info: '',\n   *   serverStatus: 2,\n   *   warningStatus: 0,\n   *   changedRows: 0\n   * }\n   */\n})\n\nprogram.pipe(Effect.provide(DatabaseLive), Effect.runPromise)\n```\n\n----------------------------------------\n\nTITLE: Defining Schemas with Model Module in TypeScript\nDESCRIPTION: The snippet demonstrates the use of the Model module from the '@effect/sql' package to define domain schemas, including variants for database operations and JSON serialization. It outlines how to use the Schema and Model libraries to create and manipulate database entries with specified fields such as 'id', 'name', 'createdAt', and 'updatedAt'. This requires dependencies on '@effect/schema' and '@effect/sql', and it provides a mechanism to convert the schema into corresponding JSON classes.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"@effect/schema\"\nimport { Model } from \"@effect/sql\"\n\nexport const GroupId = Schema.Number.pipe(Schema.brand(\"GroupId\"))\n\nexport class Group extends Model.Class<Group>(\"Group\")({\n  id: Model.Generated(GroupId),\n  name: Schema.NonEmptyTrimmedString,\n  createdAt: Model.DateTimeInsertFromDate,\n  updatedAt: Model.DateTimeUpdateFromDate\n}) {}\n\n// schema used for selects\nGroup\n\n// schema used for inserts\nGroup.insert\n\n// schema used for updates\nGroup.update\n\n// schema used for json api\nGroup.json\nGroup.jsonCreate\nGroup.jsonUpdate\n\n// you can also turn them into classes\nclass GroupJson extends Schema.Class<GroupJson>(\"GroupJson\")(Group.json) {\n  get upperName() {\n    return this.name.toUpperCase()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading and Writing URL Parameters\nDESCRIPTION: Demonstrates how to extract query parameters from a URL and how to modify them. The example shows reading existing parameters and creating a new URL with updated query parameters.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_97\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Url, UrlParams } from \"@effect/platform\"\n\nconst myUrl = new URL(\"https://example.com?foo=bar\")\n\n// Read parameters\nconst params = Url.urlParams(myUrl)\n\nconsole.log(params)\n// Output: [ [ 'foo', 'bar' ] ]\n\n// Write parameters\nconst updatedUrl = Url.setUrlParams(\n  myUrl,\n  UrlParams.fromInput([[\"key\", \"value\"]])\n)\n\nconsole.log(updatedUrl.toString())\n// Output: https://example.com/?key=value\n```\n\n----------------------------------------\n\nTITLE: Using Duration.parts in TypeScript\nDESCRIPTION: Example of using Duration.parts to extract individual time components from a Duration object.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_87\n\nLANGUAGE: typescript\nCODE:\n```\nconst parts = Duration.parts(Duration.sum(\"5 minutes\", \"20 seconds\"))\nassert.equal(parts.minutes, 5)\nassert.equal(parts.seconds, 20)\n```\n\n----------------------------------------\n\nTITLE: Defining a NumberRepo Service Class with Effect-TS Context\nDESCRIPTION: Creates a NumberRepo service class using the Effect-TS Context system with TagClass. The class includes a static accessor method for numbers that uses the serviceConstants utility.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_140\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Context } from \"effect\"\n\nclass NumberRepo extends Context.TagClass(\"NumberRepo\")<\n  NumberRepo,\n  {\n    readonly numbers: Array<number>\n  }\n>() {\n  static numbers = Effect.serviceConstants(NumberRepo).numbers\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Invalid Request Body for GET endpoints - TypeScript\nDESCRIPTION: This snippet illustrates how to create a GET endpoint in Effect-TS while ensuring that the request body is not mistakenly added to the OpenAPI specification, which is invalid for GET requests. It uses the HttpApi, HttpApiGroup, and HttpApiEndpoint classes to define the API structure.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    HttpApi,\n    HttpApiEndpoint,\n    HttpApiGroup,\n    OpenApi\n} from \"@effect/platform\"\nimport { Schema } from \"effect\"\n\nconst api = HttpApi.make(\"api\").add(\n    HttpApiGroup.make(\"group\").add(\n        HttpApiEndpoint.get(\"get\", \"/\")\n            .addSuccess(Schema.String)\n            .setPayload(\n                Schema.Struct({\n                    a: Schema.String\n                })\n            )\n    )\n)\n\nconst spec = OpenApi.fromApi(api)\n\nconsole.log(JSON.stringify(spec.paths, null, 2))\n/*\nOutput:\n{\n    \"/\": {\n        \"get\": {\n            \"tags\": [\n                \"group\"\n            ],\n            \"operationId\": \"group.get\",\n            \"parameters\": [\n                {\n                    \"name\": \"a\",\n                    \"in\": \"query\",\n                    \"schema\": {\n                        \"type\": \"string\"\n                    },\n                    \"required\": true\n                }\n            ],\n            \"security\": [],\n            \"responses\": {\n                \"200\": {\n                    \"description\": \"a string\",\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"type\": \"string\"\n                            }\n                        }\n                    }\n                },\n                \"400\": {\n                    \"description\": \"The request did not match the expected schema\",\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/HttpApiDecodeError\"\n                            }\n                        }\n                    }\n                }\n            },\n            \"requestBody\": {\n                \"content\": {\n                    \"application/json\": {\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"required\": [\n                                \"a\"\n                            ],\n                            \"properties\": {\n                                \"a\": {\n                                    \"type\": \"string\"\n                                }\n                            },\n                            \"additionalProperties\": false\n                        }\n                    }\n                },\n                \"required\": true\n            }\n        }\n    }\n}\n*/\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    HttpApi,\n    HttpApiEndpoint,\n    HttpApiGroup,\n    OpenApi\n} from \"@effect/platform\"\nimport { Schema } from \"effect\"\n\nconst api = HttpApi.make(\"api\").add(\n    HttpApiGroup.make(\"group\").add(\n        HttpApiEndpoint.get(\"get\", \"/\")\n            .addSuccess(Schema.String)\n            .setPayload(\n                Schema.Struct({\n                    a: Schema.String\n                })\n            )\n    )\n)\n\nconst spec = OpenApi.fromApi(api)\n\nconsole.log(JSON.stringify(spec.paths, null, 2))\n/*\nOutput:\n{\n    \"/\": {\n        \"get\": {\n            \"tags\": [\n                \"group\"\n            ],\n            \"operationId\": \"group.get\",\n            \"parameters\": [\n                {\n                    \"name\": \"a\",\n                    \"in\": \"query\",\n                    \"schema\": {\n                        \"type\": \"string\"\n                    },\n                    \"required\": true\n                }\n            ],\n            \"security\": [],\n            \"responses\": {\n                \"200\": {\n                    \"description\": \"a string\",\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"type\": \"string\"\n                            }\n                        }\n                    }\n                },\n                \"400\": {\n                    \"description\": \"The request did not match the expected schema\",\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/HttpApiDecodeError\"\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Defining a Map Schema with Effect Schema\nDESCRIPTION: Illustrates how to define schemas for `Map` objects using `effect/Schema`'s `Schema.Map()` and `Schema.ReadonlyMap()` methods.  These methods require an object specifying the `key` and `value` schemas.  `Schema.ReadonlyMap()` is used to generate readonly maps.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst map1 = Schema.Map({ key: Schema.String, value: Schema.Number })\n\n// type Map1 = Map<string, number>\ntype Map1 = typeof map1.Type\n\nconst map2 = Schema.ReadonlyMap({ key: Schema.String, value: Schema.Number })\n\n// type Map2 = ReadonlyMap<string, number>\ntype Map2 = typeof map2.Type\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Client Configuration with Environment Variables\nDESCRIPTION: Shows how to configure PostgreSQL client using environment variables through Effect's Config system\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Config } from \"effect\"\nimport { PgClient } from \"@effect/sql-pg\"\n\nconst SqlLive = PgClient.layerConfig({\n  database: Config.string(\"DATABASE\")\n})\n```\n\n----------------------------------------\n\nTITLE: Schema.extend with Transformation and Struct After Fix\nDESCRIPTION: Example showing how Schema.extend now supports combining a transformed schema with a struct schema, allowing for decoding and encoding between the different schema structures.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst A = Schema.Struct({\n  a: Schema.String\n})\n\nconst B = Schema.Struct({\n  b: Schema.String\n})\n\nconst C = Schema.Struct({\n  c: Schema.String\n})\n\nconst AB = Schema.transform(A, B, {\n  strict: true,\n  decode: (a) => ({ b: a.a }),\n  encode: (b) => ({ a: b.b })\n})\n\n// Transformation + Struct\nconst schema = Schema.extend(AB, C)\n\nconsole.log(Schema.decodeUnknownSync(schema)({ a: \"a\", c: \"c\" }))\n// Output: { b: 'a', c: 'c' }\n\nconsole.log(Schema.encodeSync(schema)({ b: \"b\", c: \"c\" }))\n// Output: { a: 'b', c: 'c' }\n```\n\n----------------------------------------\n\nTITLE: Using Stream.share for Ref-Counted Broadcast Streams in TypeScript\nDESCRIPTION: Example of using Stream.share API to create a ref-counted broadcast stream that is shared between multiple consumers and closes the upstream when the last consumer ends.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_83\n\nLANGUAGE: typescript\nCODE:\n```\n// Stream.share api example\n// (Code example not explicitly provided in the release notes)\n```\n\n----------------------------------------\n\nTITLE: Implementing AI Model Fallback Plan in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create an AiPlan that attempts to use OpenAI's chat completions API, falling back to Anthropic's messages API if the initial attempts fail. It includes setting up clients, creating a plan, and executing a program using the plan.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/ai/anthropic/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AiPlan, Completions } from \"@effect/ai\"\nimport { AnthropicClient, AnthropicCompletions } from \"@effect/ai-anthropic\"\nimport { OpenAiClient, OpenAiCompletions } from \"@effect/ai-openai\"\nimport { NodeHttpClient, NodeRuntime } from \"@effect/platform-node\"\nimport { Config, Console, Effect, Layer } from \"effect\"\n\n// Create Anthropic client\nconst Anthropic = AnthropicClient.layerConfig({\n  apiKey: Config.redacted(\"ANTHROPIC_API_KEY\")\n}).pipe(Layer.provide(NodeHttpClient.layerUndici))\n\n// Create OpenAi client\nconst OpenAi = OpenAiClient.layerConfig({\n  apiKey: Config.redacted(\"OPENAI_API_KEY\")\n}).pipe(Layer.provide(NodeHttpClient.layerUndici))\n\n// Create a plan of request execution\nconst Plan = AiPlan.fromModel(OpenAiCompletions.model(\"gpt-4o-mini\"), {\n  attempts: 3\n}).pipe(\n  AiPlan.withFallback({\n    model: AnthropicCompletions.model(\"claude-3-5-haiku-latest\")\n  })\n)\n\nconst program = Effect.gen(function* () {\n  // Build the plan of execution\n  const plan = yield* Plan\n\n  // Create a program which uses the services provided by the plan\n  const getDadJoke = Effect.gen(function* () {\n    const completions = yield* Completions.Completions\n    const response = yield* completions.create(\"Tell me a dad joke\")\n    yield* Console.log(response.text)\n  })\n\n  // Provide the plan to whichever programs need it\n  yield* plan.provide(getDadJoke)\n})\n\nprogram.pipe(Effect.provide([Anthropic, OpenAi]), NodeRuntime.runMain)\n```\n\n----------------------------------------\n\nTITLE: Defining Service Tags in TypeScript\nDESCRIPTION: Demonstrates how to define service tags using Effect.Tag, allowing simplified access to service methods and properties.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_124\n\nLANGUAGE: typescript\nCODE:\n```\nclass DemoTag extends Effect.Tag(\"DemoTag\")<\n  DemoTag,\n  {\n    readonly getNumbers: () => Array<number>\n    readonly strings: Array<string>\n  }\n>() {}\n```\n\n----------------------------------------\n\nTITLE: Running Dialect-Specific Queries with Effect\nDESCRIPTION: This snippet demonstrates how to use the `sql.onDialect` API to run different queries based on the SQL dialect being used. It imports the `@effect/sql` package and defines different SELECT queries for SQLite, MySQL, MSSQL, and PostgreSQL.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-sqlite-react-native/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Sql from \"@effect/sql\"\nimport { Effect } from \"effect\"\n\nEffect.gen(function* () {\n  const sql = yield* Sql.client.Client\n  yield* sql.onDialect({\n    sqlite: () => sql`SELECT * FROM sqlite_master`,\n    mysql: () => sql`SHOW TABLES`,\n    mssql: () => sql`SELECT * FROM sys.tables`,\n    pg: () => sql`SELECT * FROM pg_catalog.pg_tables`\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Parsing URLs with Optional Base in TypeScript\nDESCRIPTION: This snippet demonstrates how to parse URLs using the fromString function from the Url module in @effect/platform. It shows parsing both absolute and relative URLs with an optional base.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_94\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Url } from \"@effect/platform\"\nimport { Either } from \"effect\"\n\n// Parse an absolute URL\n//\n//      ┌─── Either<URL, IllegalArgumentException>\n//      ▼\nconst parsed = Url.fromString(\"https://example.com/path\")\n\nif (Either.isRight(parsed)) {\n  console.log(\"Parsed URL:\", parsed.right.toString())\n} else {\n  console.log(\"Error:\", parsed.left.message)\n}\n// Output: Parsed URL: https://example.com/path\n\n// Parse a relative URL with a base\nconst relativeParsed = Url.fromString(\"/relative-path\", \"https://example.com\")\n\nif (Either.isRight(relativeParsed)) {\n  console.log(\"Parsed relative URL:\", relativeParsed.right.toString())\n} else {\n  console.log(\"Error:\", relativeParsed.left.message)\n}\n// Output: Parsed relative URL: https://example.com/relative-path\n```\n\n----------------------------------------\n\nTITLE: Converting HTTP Response to JSON in Effect.ts\nDESCRIPTION: Demonstrates how to convert an HTTP response to JSON using the json method of HttpClientResponse.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_61\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FetchHttpClient, HttpClient } from \"@effect/platform\"\nimport { NodeRuntime } from \"@effect/platform-node\"\nimport { Console, Effect } from \"effect\"\n\nconst getPostAsJson = Effect.gen(function* () {\n  const client = yield* HttpClient.HttpClient\n  const response = yield* client.get(\n    \"https://jsonplaceholder.typicode.com/posts/1\"\n  )\n  return yield* response.json\n}).pipe(Effect.provide(FetchHttpClient.layer))\n\ngetPostAsJson.pipe(\n  Effect.andThen((post) => Console.log(typeof post, post)),\n  NodeRuntime.runMain\n)\n/*\nOutput:\nobject {\n  userId: 1,\n  id: 1,\n  title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n  body: 'quia et suscipit\\n' +\n    'suscipit recusandae consequuntur expedita et cum\\n' +\n    'reprehenderit molestiae ut ut quas totam\\n' +\n    'nostrum rerum est autem sunt rem eveniet architecto'\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Defining a Recursive Schema with Zod\nDESCRIPTION: Illustrates how to define a recursive type schema in Zod using `z.lazy()`. This allows defining types that refer to themselves, commonly used in hierarchical data structures.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\nconst baseCategorySchema = z.object({\n  name: z.string()\n})\n\ntype Category = z.infer<typeof baseCategorySchema> & {\n  subcategories: Category[]\n}\n\nconst categorySchema: z.ZodType<Category> = baseCategorySchema.extend({\n  subcategories: z.lazy(() => categorySchema.array())\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Union Schema with Effect Schema\nDESCRIPTION: Shows how to define a union schema using `effect/Schema`'s `Schema.Union()`, which accepts the schemas as arguments.  The resulting schema accepts values that conform to any of the specified schemas.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst stringOrNumber = Schema.Union(Schema.String, Schema.Number)\n\nSchema.decodeUnknownSync(stringOrNumber)(\"foo\") // passes\nSchema.decodeUnknownSync(stringOrNumber)(14) // passes\n```\n\n----------------------------------------\n\nTITLE: Implementing Stream.raceAll Operator in Effect-TS\nDESCRIPTION: This code demonstrates the `Stream.raceAll` operator, which returns a stream that mirrors the first source stream to emit an item. Other streams are interrupted. The example sets up three streams with different intervals and races them, taking the first 6 emitted values and logging them.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_103\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Stream, Schedule, Console, Effect } from \"effect\"\n\nconst stream = Stream.raceAll(\n  Stream.fromSchedule(Schedule.spaced(\"1 millis\")),\n  Stream.fromSchedule(Schedule.spaced(\"2 millis\")),\n  Stream.fromSchedule(Schedule.spaced(\"4 millis\"))\n).pipe(Stream.take(6), Stream.tap(Console.log))\n\nEffect.runPromise(Stream.runDrain(stream))\n// Output only from the first stream, the rest streams are interrupted\n// 0\n// 1\n// 2\n// 3\n// 4\n// 5\n```\n\n----------------------------------------\n\nTITLE: Handling Nullish Values in Zod and Effect/Schema\nDESCRIPTION: Shows how to create schemas that allow null or undefined values in addition to the specified type using Zod's .nullish() method and Effect/Schema's Schema.NullishOr() function.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_61\n\nLANGUAGE: typescript\nCODE:\n```\nconst nullishString = z.string().nullish() // string | null | undefined\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst nullishString = Schema.NullishOr(Schema.String) // string | null | undefined\n```\n\n----------------------------------------\n\nTITLE: Implementing Echo CLI with Bold Option\nDESCRIPTION: Advanced CLI implementation adding formatting options to the echo command, including a --bold flag with -b alias using Effect-TS.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/cli/README.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Args, Command, Options } from \"@effect/cli\"\nimport { NodeContext, NodeRuntime } from \"@effect/platform-node\"\nimport { Console, Effect } from \"effect\"\n\nconst text = Args.text({ name: \"text\" })\n\n// Define the 'bold' option with an alias '-b'\nconst bold = Options.boolean(\"bold\").pipe(Options.withAlias(\"b\"))\n\n// Create the command that outputs the text with bold formatting if the bold option is used\nconst command = Command.make(\"echo\", { text, bold }, ({ bold, text }) =>\n  Console.log(bold ? `\\x1b[1m${text}\\x1b[0m` : text)\n)\n\nconst cli = Command.run(command, {\n  name: \"Echo CLI\",\n  version: \"v0.0.2\"\n})\n\ncli(process.argv).pipe(Effect.provide(NodeContext.layer), NodeRuntime.runMain)\n```\n\n----------------------------------------\n\nTITLE: Customizing Response Encoding\nDESCRIPTION: Shows how to customize response encoding for different formats like CSV\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpApiEndpoint, HttpApiSchema } from \"@effect/platform\"\nimport { Schema } from \"effect\"\n\nconst csv = HttpApiEndpoint.get(\"csv\")`/users/csv`\n  // Set the success response as a string with CSV encoding\n  .addSuccess(\n    Schema.String.pipe(\n      HttpApiSchema.withEncoding({\n        // Specify the type of the response\n        kind: \"Text\",\n        // Define the content type as text/csv\n        contentType: \"text/csv\"\n      })\n    )\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining a Variadic Tuple Schema with Effect Schema\nDESCRIPTION: Illustrates how to define a variadic tuple schema in `effect/Schema` by combining a fixed tuple schema with a rest schema for additional elements.  The code uses `Schema.Tuple` to define a tuple with an initial Schema.String element, followed by a variable number of Schema.Number elements.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst variadicTuple = Schema.Tuple([Schema.String], Schema.Number)\n\nconst result = Schema.decodeUnknownSync(variadicTuple)([\"hello\", 1, 2, 3])\n// => readonly [string, ...number[]];\n```\n\n----------------------------------------\n\nTITLE: Executing CLI Application 'add' Command in Shell\nDESCRIPTION: These commands demonstrate how to use the 'add' subcommand of the CLI application with and without the verbose option.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/cli/README.md#2025-04-21_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nnpx tsx minigit.ts add .\n# Output: Running 'minigit add .' with '--verbose false'\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx tsx minigit.ts add --verbose .\n# Output: Running 'minigit add .' with '--verbose true'\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Tracer Disabling for Specific Requests in Effect-TS\nDESCRIPTION: Shows how to disable HTTP server tracing for specific requests by providing a condition function to withTracerDisabledWhen middleware. The middleware can be applied to HTTP routers.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Http from \"@effect/platform/HttpServer\"\n\nHttp.router.empty.pipe(\n  Http.router.get(\"/health\"),\n  Http.server.serve(),\n  Http.middleware.withTracerDisabledWhen(\n    (request) => request.url === \"/no-tracing\"\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Server Respondable Trait\nDESCRIPTION: Example showing how to implement the HttpServerRespondable trait for custom classes to define HTTP response behavior for both success and error cases\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"@effect/schema\"\nimport {\n  HttpRouter,\n  HttpServerRespondable,\n  HttpServerResponse\n} from \"@effect/platform\"\n\nclass User extends Schema.Class<User>(\"User\")({\n  name: Schema.String\n}) {\n  [HttpServerRespondable.symbol]() {\n    return HttpServerResponse.schemaJson(User)(this)\n  }\n}\n\nclass MyError extends Schema.TaggedError<MyError>()(\"MyError\", {\n  message: Schema.String\n}) {\n  [HttpServerRespondable.symbol]() {\n    return HttpServerResponse.schemaJson(MyError)(this, { status: 403 })\n  }\n}\n\nHttpRouter.empty.pipe(\n  // responds with `{ \"name\": \"test\" }`\n  HttpRouter.get(\"/user\", Effect.succeed(new User({ name: \"test\" }))),\n  // responds with a 403 status, and `{ \"_tag\": \"MyError\", \"message\": \"boom\" }`\n  HttpRouter.get(\"/fail\", new MyError({ message: \"boom\" }))\n)\n```\n\n----------------------------------------\n\nTITLE: HTTP Client Response Status Matching\nDESCRIPTION: Example showing how to pattern match on HTTP response status codes using the HttpClientResponse.matchStatus* APIs\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nHttpClientRequest.get(\"/todos/1\").pipe(\n  HttpClient.fetch,\n  HttpClientResponse.matchStatusScoped({\n    \"2xx\": (_response) => Effect.succeed(\"ok\"),\n    404: (_response) => Effect.fail(\"not found\"),\n    orElse: (_response) => Effect.fail(\"boom\")\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Enum Schema Definition\nDESCRIPTION: Shows how to create and use enum schemas in Zod and Effect/Schema, including accessing enum values.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst FishEnum = z.enum([\"Salmon\", \"Tuna\", \"Trout\"])\n\nFishEnum.options // [\"Salmon\", \"Tuna\", \"Trout\"];\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst FishEnum = Schema.Literal(\"Salmon\", \"Tuna\", \"Trout\")\n\nFishEnum.literals // readonly [\"Salmon\", \"Tuna\", \"Trout\"]\n```\n\n----------------------------------------\n\nTITLE: Accessing Service Constants with serviceConstants (TypeScript)\nDESCRIPTION: Shows how to access non-effect constants in services using the Effect.serviceConstants method. This enables direct access to any constant in the service, not just effects.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node/CHANGELOG.md#2025-04-21_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Context } from \"effect\"\n\nclass NumberRepo extends Context.TagClass(\"NumberRepo\")<\n  NumberRepo,\n  {\n    readonly numbers: Array<number>\n  }\n>() {\n  static numbers = Effect.serviceConstants(NumberRepo).numbers\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing HttpClient using Context.Tag in TypeScript\nDESCRIPTION: Demonstrates how to access an HttpClient instance using the Context.Tag after the removal of HttpClient.fetch.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node/CHANGELOG.md#2025-04-21_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FetchHttpClient, HttpClient } from \"@effect/platform\"\nimport { Effect } from \"effect\"\n\nEffect.gen(function* () {\n  const client = yield* HttpClient.HttpClient\n\n  // make a get request\n  yield* client.get(\"https://jsonplaceholder.typicode.com/todos/1\")\n}).pipe(\n  Effect.scoped,\n  // the fetch client has been moved to the `FetchHttpClient` module\n  Effect.provide(FetchHttpClient.layer)\n)\n```\n\n----------------------------------------\n\nTITLE: Mapping HTTP Request Transformations in Effect.ts\nDESCRIPTION: Demonstrates how to use mapRequest, mapRequestEffect, mapRequestInput, and mapRequestInputEffect to transform HTTP requests. Shows the order of execution for different transformation types.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FetchHttpClient, HttpClient } from \"@effect/platform\"\nimport { Effect } from \"effect\"\n\nconst program = Effect.gen(function* () {\n  const client = (yield* HttpClient.HttpClient).pipe(\n    // Append transformation\n    HttpClient.mapRequest((req) => {\n      console.log(1)\n      return req\n    }),\n    // Another append transformation\n    HttpClient.mapRequest((req) => {\n      console.log(2)\n      return req\n    }),\n    // Prepend transformation, this executes first\n    HttpClient.mapRequestInput((req) => {\n      console.log(3)\n      return req\n    })\n  )\n\n  const response = yield* client.get(\n    \"https://jsonplaceholder.typicode.com/posts/1\"\n  )\n\n  const json = yield* response.json\n\n  console.log(json)\n}).pipe(Effect.provide(FetchHttpClient.layer))\n\nEffect.runPromise(program)\n/*\nOutput:\n3\n1\n2\n{\n  userId: 1,\n  id: 1,\n  title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n  body: 'quia et suscipit\\n' +\n    'suscipit recusandae consequuntur expedita et cum\\n' +\n    'reprehenderit molestiae ut ut quas totam\\n' +\n    'nostrum rerum est autem sunt rem eveniet architecto'\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Tagged Handlers in Match Functions in TypeScript\nDESCRIPTION: Example showing how external handlers can be used with Match.tag and Match.tagStartsWith functions without causing type issues. The code demonstrates pattern matching on a tagged union type.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_105\n\nLANGUAGE: typescript\nCODE:\n```\ntype Value = { _tag: \"A\"; a: string } | { _tag: \"B\"; b: number }\nconst handlerA = (_: { _tag: \"A\"; a: number }) => _.a\n\n// $ExpectType string | number\npipe(\n  M.type<Value>(),\n  M.tag(\"A\", handlerA), // <-- no type issue\n  M.orElse((_) => _.b)\n)(value)\n```\n\n----------------------------------------\n\nTITLE: Using Mailbox for Messages with Done/Failure Signals in TypeScript\nDESCRIPTION: Example of using the Mailbox module, which is a queue that can have done or failure signals, allowing for offering messages, taking all messages, and signaling completion or failure.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_84\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Chunk, Effect, Mailbox } from \"effect\"\nimport * as assert from \"node:assert\"\n\nEffect.gen(function* () {\n  const mailbox = yield* Mailbox.make<number, string>()\n\n  // add messages to the mailbox\n  yield* mailbox.offer(1)\n  yield* mailbox.offer(2)\n  yield* mailbox.offerAll([3, 4, 5])\n\n  // take messages from the mailbox\n  const [messages, done] = yield* mailbox.takeAll\n  assert.deepStrictEqual(Chunk.toReadonlyArray(messages), [1, 2, 3, 4, 5])\n  assert.strictEqual(done, false)\n\n  // signal that the mailbox is done\n  yield* mailbox.end\n  const [messages2, done2] = yield* mailbox.takeAll\n  assert.deepStrictEqual(messages2, Chunk.empty())\n  assert.strictEqual(done2, true)\n\n  // signal that the mailbox is failed\n  yield* mailbox.fail(\"boom\")\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Union Schema with Zod\nDESCRIPTION: Demonstrates how to define a union schema using Zod's `z.union()` method, which accepts an array of possible schemas. The resulting schema accepts values that conform to any of the specified schemas.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nconst stringOrNumber = z.union([z.string(), z.number()])\n\nstringOrNumber.parse(\"foo\") // passes\nstringOrNumber.parse(14) // passes\n```\n\n----------------------------------------\n\nTITLE: Using FiberSet.join for Error Propagation in TypeScript\nDESCRIPTION: Shows how to use FiberSet.join to propagate errors from child fibers back to the parent fiber in Effect.js.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_127\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, FiberSet } from \"effect\"\n\nEffect.gen(function* (_) {\n  const set = yield* _(FiberSet.make())\n  yield* _(FiberSet.add(set, Effect.runFork(Effect.fail(\"error\"))))\n\n  // parent fiber will fail with \"error\"\n  yield* _(FiberSet.join(set))\n})\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Queries Using Effect-TS in TypeScript\nDESCRIPTION: This code demonstrates how to execute an SQL query using the @effect/sql package within the Effect-TS framework. It assumes a setup of the SQL client and requires the @effect/sql package. The snippet shows how to perform a simple SELECT query within an Effect-TS generator.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-mysql2/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Sql from \"@effect/sql\"\nimport { Effect } from \"effect\"\n\nEffect.gen(function* () {\n  const sql = yield* Sql.client.Client\n  yield* sql`SELECT * FROM users`\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing HTTP Search Parameters in Effect\nDESCRIPTION: Example showing how to access parsed search parameters from an HTTP request using the ParsedSearchParams tag\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Http from \"@effect/platform/HttpServer\"\nimport { Effect } from \"effect\"\n\nEffect.gen(function* () {\n  const searchParams = yield* Http.request.ParsedSearchParams\n  console.log(searchParams)\n})\n```\n\n----------------------------------------\n\nTITLE: Using Stream.onStart to Execute Effects Before Stream Processing\nDESCRIPTION: Example of using Stream.onStart to execute an effect before a stream starts processing. This API allows specifying initialization logic to run before the first stream element is processed.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_96\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Console, Effect, Stream } from \"effect\"\n\nconst stream = Stream.make(1, 2, 3).pipe(\n  Stream.onStart(Console.log(\"Stream started\")),\n  Stream.map((n) => n * 2),\n  Stream.tap((n) => Console.log(`after mapping: ${n}`))\n)\n\nEffect.runPromise(Stream.runCollect(stream)).then(console.log)\n// Stream started\n// after mapping: 2\n// after mapping: 4\n// after mapping: 6\n// { _id: 'Chunk', values: [ 2, 4, 6 ] }\n```\n\n----------------------------------------\n\nTITLE: Annotating HttpApi with OpenApi.Transform in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the OpenApi.Transform annotation to customize the generated OpenApi specification by adding tags. It allows developers to enhance the OpenApi documentation with additional information.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nclass Api extends HttpApi.empty\n    .annotateContext(OpenApi.annotations({\n      title: \"API\",\n      summary: \"test api summary\",\n      transform: (openApiSpec) => ({\n        ...openApiSpec,\n        tags: [...openApiSpec.tags ?? [], {\n          name: \"Tag from OpenApi.Transform annotation\"\n        }]\n      })\n    }))\n```\n\n----------------------------------------\n\nTITLE: Configuring Fetch Options in HTTP Client Requests with Effect-TS\nDESCRIPTION: Shows how to adjust fetch options for HTTP client requests using the withFetchOptions method. This demonstrates the more composable approach using FiberRef for fetch options.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pipe } from \"effect\"\nimport * as Http from \"@effect/platform/HttpClient\"\n\npipe(\n  Http.request.get(\"https://example.com\"),\n  Http.client.fetchOk,\n  Http.client.withFetchOptions({ credentials: \"include\" }),\n  Http.response.text\n)\n```\n\n----------------------------------------\n\nTITLE: Using Transferable Data Types in Schemas\nDESCRIPTION: Shows how to use transferable data types within schemas for worker communication. Transferables can now be used anywhere in a schema without wrapping the outermost schema.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Transferable } from \"@effect/platform\"\nimport { Schema } from \"@effect/schema\"\n\nconst structWithTransferable = Schema.struct({\n  data: Transferable.Uint8Array\n})\n```\n\n----------------------------------------\n\nTITLE: Handling WebSockets in Node HTTP Server - TypeScript\nDESCRIPTION: This code snippet demonstrates how to set up a Node HTTP server with websocket support using the Effect-TS framework. It imports various modules to create a server that handles websockets on the '/ws' path. It shows integrating the server with streams and effects to process data, log it to the console, and provide empty HTTP responses. Dependencies include '@effect/platform-node', '@effect/platform/HttpServer', 'effect', and 'node:http'. The server listens on port 3000.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-bun/CHANGELOG.md#2025-04-21_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { NodeHttpServer, NodeRuntime } from \"@effect/platform-node\"\nimport * as Http from \"@effect/platform/HttpServer\"\nimport { Console, Effect, Layer, Schedule, Stream } from \"effect\"\nimport { createServer } from \"node:http\"\n\nconst ServerLive = NodeHttpServer.server.layer(() => createServer(), {\n  port: 3000\n})\n\nconst HttpLive = Http.router.empty.pipe(\n  Http.router.get(\n    \"/ws\",\n    Effect.gen(function* (_) {\n      yield* _(\n        Stream.fromSchedule(Schedule.spaced(1000)),\n        Stream.map(JSON.stringify),\n        Stream.encodeText,\n        Stream.pipeThroughChannel(Http.request.upgradeChannel()),\n        Stream.decodeText(),\n        Stream.runForEach(Console.log)\n      )\n      return Http.response.empty()\n    })\n  ),\n  Http.server.serve(Http.middleware.logger),\n  Http.server.withLogAddress,\n  Layer.provide(ServerLive)\n)\n\nNodeRuntime.runMain(Layer.launch(HttpLive))\n```\n\n----------------------------------------\n\nTITLE: Interrupting Effect on Test Completion in TypeScript\nDESCRIPTION: This snippet demonstrates how to interrupt an effect when a test finishes using `@effect/vitest`. It ensures that allocated resources are properly released, even if the test times out, by utilizing `Effect.acquireRelease` within a `Layer`. This is useful for managing resources like database connections during testing.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/vitest/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n  import { it } from \"@effect/vitest\"\n  import { Console, Effect, Layer } from \"effect\"\n\n  class Database extends Effect.Tag(\"Database\")<Database, {}>() {\n    static readonly test = Layer.scoped(\n      Database,\n      Effect.acquireRelease(\n        Effect.as(Console.log(\"database setup\"), Database.of({})),\n        () => Console.log(\"database teardown\")\n      )\n    )\n  }\n\n  it.live(\n    \"testing with closable resources\",\n    () =>\n      Effect.gen(function* () {\n        const database = yield* Database\n        // performing some time consuming operations\n        yield* Effect.sleep(\"500 millis\")\n      }).pipe(Effect.provide(Database.test)),\n    { timeout: 100 }\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Headers\nDESCRIPTION: Demonstrates how to set up and validate request headers with metadata\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpApiEndpoint } from \"@effect/platform\"\nimport { Schema } from \"effect\"\n\nconst User = Schema.Struct({\n  id: Schema.Number,\n  name: Schema.String,\n  createdAt: Schema.DateTimeUtc\n})\n\nconst getUsers = HttpApiEndpoint.get(\"getUsers\", \"/users\")\n  // Specify the headers schema\n  .setHeaders(\n    Schema.Struct({\n      // Header must be a string\n      \"X-API-Key\": Schema.String,\n      // Header must be a string with an added description\n      \"X-Request-ID\": Schema.String.annotations({\n        description: \"Unique identifier for the request\"\n      })\n    })\n  )\n  .addSuccess(Schema.Array(User))\n```\n\n----------------------------------------\n\nTITLE: Defining a Map Schema with Zod\nDESCRIPTION: Demonstrates how to define a schema for `Map` objects using Zod's `z.map()` method. The first argument specifies the key schema, and the second argument specifies the value schema.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\nconst stringNumberMap = z.map(z.string(), z.number())\n\ntype StringNumberMap = z.infer<typeof stringNumberMap>\n// type StringNumberMap = Map<string, number>\n```\n\n----------------------------------------\n\nTITLE: HttpClient Refactoring Example\nDESCRIPTION: This example demonstrates how to access the HttpClient after the refactoring in version 0.44.0, where HttpClient.fetch was removed. The code accesses the HttpClient using the Context.Tag and provides a layer to use the FetchHttpClient.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-browser/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { FetchHttpClient, HttpClient } from \"@effect/platform\"\nimport { Effect } from \"effect\"\n\nEffect.gen(function* () {\n  const client = yield* HttpClient.HttpClient\n\n  // make a get request\n  yield* client.get(\"https://jsonplaceholder.typicode.com/todos/1\")\n}).pipe(\n  Effect.scoped,\n  // the fetch client has been moved to the `FetchHttpClient` module\n  Effect.provide(FetchHttpClient.layer)\n)\n```\n\n----------------------------------------\n\nTITLE: Creating and Using an Object Schema in effect/Schema\nDESCRIPTION: Demonstrates creating a schema for objects using effect/Schema, showing parsing and type inference for a simple User object.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst User = Schema.Struct({\n  username: Schema.String\n})\n\nSchema.decodeUnknownSync(User)({ username: \"Ludwig\" })\n\n// extract the inferred type\ntype User = typeof User.Type\n// { readonly username: string }\n```\n\n----------------------------------------\n\nTITLE: Expanding Either and Option andThen Functionality in TypeScript\nDESCRIPTION: Example demonstrating the expanded Either and Option 'andThen' functionality which now supports the 'map' case like Effects' 'andThen'. The snippets show how both direct values and functions that return values can be used with 'andThen'.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_136\n\nLANGUAGE: typescript\nCODE:\n```\nexpect(pipe(Either.right(1), Either.andThen(2))).toStrictEqual(\n  Either.right(2)\n)\nexpect(\n  pipe(\n    Either.right(1),\n    Either.andThen(() => 2)\n  )\n).toStrictEqual(Either.right(2))\n\nexpect(pipe(Option.some(1), Option.andThen(2))).toStrictEqual(Option.some(2))\nexpect(\n  pipe(\n    Option.some(1),\n    Option.andThen(() => 2)\n  )\n).toStrictEqual(Option.some(2))\n```\n\n----------------------------------------\n\nTITLE: Using RequestResolver.aroundRequests in TypeScript\nDESCRIPTION: Demonstrates how to use the new RequestResolver.aroundRequests API to run side effects that introspect requests being executed.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_133\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Request, RequestResolver } from \"effect\"\n\ninterface GetUserById extends Request.Request<unknown> {\n  readonly id: number\n}\n\ndeclare const resolver: RequestResolver.RequestResolver<GetUserById>\n\nRequestResolver.aroundRequests(\n  resolver,\n  (requests) => Effect.log(`got ${requests.length} requests`),\n  (requests, _) => Effect.log(`finised running ${requests.length} requests`)\n)\n```\n\n----------------------------------------\n\nTITLE: TemplateLiteral Schema with Linebreaks\nDESCRIPTION: Shows how Schema.TemplateLiteral now properly handles strings containing linebreaks.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst schema = Schema.TemplateLiteral(\"a: \", Schema.String)\n\nconsole.log(Schema.decodeSync(schema)(\"a: b \\n c\"))\n/*\nOutput:\na: b\n c\n*/\n```\n\n----------------------------------------\n\nTITLE: Dialect-Specific SQL Queries Using Effect-TS\nDESCRIPTION: This code snippet illustrates how to execute dialect-specific SQL queries using the @effect/sql package. It utilizes the sql.onDialect API to select appropriate SQL queries based on the database dialect. The snippet requires an understanding of the SQL dialects and the @effect/sql package.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-mysql2/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Sql from \"@effect/sql\"\nimport { Effect } from \"effect\"\n\nEffect.gen(function* () {\n  const sql = yield* Sql.client.Client\n  yield* sql.onDialect({\n    sqlite: () => sql`SELECT * FROM sqlite_master`,\n    mysql: () => sql`SHOW TABLES`,\n    mssql: () => sql`SELECT * FROM sys.tables`,\n    pg: () => sql`SELECT * FROM pg_catalog.pg_tables`\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI Schema Additional Properties\nDESCRIPTION: Demonstrates how to use the new `additionalPropertiesStrategy` option in OpenAPI schema generation to control how additional properties are handled. Supports 'strict' (default) and 'allow' modes.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  HttpApi,\n  HttpApiEndpoint,\n  HttpApiGroup,\n  OpenApi\n} from \"@effect/platform\"\nimport { Schema } from \"effect\"\n\nconst api = HttpApi.make(\"api\").add(\n  HttpApiGroup.make(\"group\").add(\n    HttpApiEndpoint.get(\"get\", \"/\").addSuccess(\n      Schema.Struct({ a: Schema.String })\n    )\n  )\n)\n\nconst schema = OpenApi.fromApi(api, {\n  additionalPropertiesStrategy: \"allow\"\n})\n```\n\n----------------------------------------\n\nTITLE: Using FiberHandle for Fiber Management in TypeScript\nDESCRIPTION: Shows how to use FiberHandle to manage running fibers with various control options like interruption and conditional execution.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_117\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, FiberHandle } from \"effect\"\n\nEffect.gen(function* (_) {\n  const handle = yield* _(FiberHandle.make())\n\n  // run some effects\n  yield* _(FiberHandle.run(handle, Effect.never))\n  // this will interrupt the previous fiber\n  yield* _(FiberHandle.run(handle, Effect.never))\n  // this will not run, as a fiber is already running\n  yield* _(FiberHandle.run(handle, Effect.never, { onlyIfMissing: true }))\n\n  yield* _(Effect.sleep(1000))\n}).pipe(\n  Effect.scoped // The fiber will be interrupted when the scope is closed\n)\n```\n\n----------------------------------------\n\nTITLE: HttpClientResponse Usage with Scoped Effect in Effect-TS\nDESCRIPTION: This snippet demonstrates how to use the HttpClientResponse methods directly and explicitly add a Effect.scoped to the pipeline in Effect-TS. It retrieves JSON data from a GET request and uses Effect.scoped to manage the scope.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-bun/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FetchHttpClient, HttpClient } from \"@effect/platform\"\nimport { Effect } from \"effect\"\n\nEffect.gen(function* () {\n  const client = yield* HttpClient.HttpClient\n\n  yield* client.get(\"https://jsonplaceholder.typicode.com/todos/1\").pipe(\n    Effect.flatMap((response) => response.json),\n    Effect.scoped // supply the `Scope`\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Multiple Middleware Composition in Effect-TS\nDESCRIPTION: Demonstrates how to compose multiple middleware functions using the flow operator from the Effect library. Shows implementation of stacked middleware at different levels of the application.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_86\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  HttpMiddleware,\n  HttpRouter,\n  HttpServer,\n  HttpServerResponse\n} from \"@effect/platform\"\nimport { Effect, flow } from \"effect\"\nimport { listen } from \"./listen.js\"\n\nconst withMiddleware = (name: string) =>\n  HttpMiddleware.make((app) =>\n    Effect.gen(function* () {\n      console.log(name)\n      return yield* app\n    })\n  )\n\nconst router = HttpRouter.empty.pipe(\n  HttpRouter.get(\n    \"/a\",\n    HttpServerResponse.text(\"a\").pipe(\n      flow(withMiddleware(\"M1\"), withMiddleware(\"M2\"))\n    )\n  ),\n  HttpRouter.get(\"/b\", HttpServerResponse.text(\"b\")),\n  HttpRouter.use(flow(withMiddleware(\"M3\"), withMiddleware(\"M4\"))),\n  HttpRouter.get(\"/\", HttpServerResponse.text(\"root\"))\n)\n\nconst app = router.pipe(\n  HttpServer.serve(flow(withMiddleware(\"M5\"), withMiddleware(\"M6\")))\n)\n\nlisten(app, 3000)\n```\n\n----------------------------------------\n\nTITLE: Providing Worker Spawn Functions with Platform-Specific Implementation (TypeScript)\nDESCRIPTION: Demonstrates the new approach to providing platform-specific worker spawn functions. This change moves platform concerns closer to the edge of the application, better separating them from business logic.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node/CHANGELOG.md#2025-04-21_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Worker } from \"@effect/platform\"\nimport { BrowserWorker } from \"@effect/platform-browser\"\nimport { Effect } from \"effect\"\n\nWorker.makePool({ ... }).pipe(\n  Effect.provide(BrowserWorker.layer(() => new globalThis.Worker(...)))\n)\n```\n\n----------------------------------------\n\nTITLE: Using Effect.liftPredicate to Transform Predicates into Effects\nDESCRIPTION: Demonstrates how to use Effect.liftPredicate to transform a Predicate function into an Effect that returns the input value on success or fails with a specified error message on failure.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_106\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect } from \"effect\"\n\nconst isPositive = (n: number): boolean => n > 0\n\n// succeeds with `1`\nEffect.liftPredicate(1, isPositive, (n) => `${n} is not positive`)\n\n// fails with `\"0 is not positive\"`\nEffect.liftPredicate(0, isPositive, (n) => `${n} is not positive`)\n```\n\n----------------------------------------\n\nTITLE: Configuring Batched Logging in TypeScript\nDESCRIPTION: Demonstrates how to configure batched logging with a custom logger in Effect.js, using Logger.batched and Logger.replaceScoped.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_128\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Console, Effect, Logger } from \"effect\"\n\nconst LoggerLive = Logger.replaceScoped(\n  Logger.defaultLogger,\n  Logger.logfmtLogger.pipe(\n    Logger.batched(\"500 millis\", (messages) =>\n      Console.log(\"BATCH\", messages.join(\"\\n\"))\n    )\n  )\n)\n\nEffect.gen(function* (_) {\n  yield* _(Effect.log(\"one\"))\n  yield* _(Effect.log(\"two\"))\n  yield* _(Effect.log(\"three\"))\n}).pipe(Effect.provide(LoggerLive), Effect.runFork)\n```\n\n----------------------------------------\n\nTITLE: Defining a Tuple Schema with Zod\nDESCRIPTION: Illustrates how to define a tuple schema using Zod's `z.tuple()` method. The schema for each element in the tuple is defined in an array passed to `z.tuple()`.  The example includes a string, a number, and an object.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nconst athleteSchema = z.tuple([\n  z.string(), // name\n  z.number(), // jersey number\n  z.object({\n    pointsScored: z.number()\n  }) // statistics\n])\n\ntype Athlete = z.infer<typeof athleteSchema>\n// type Athlete = [string, number, { pointsScored: number }]\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Active Span Integration Example\nDESCRIPTION: Example demonstrating how to connect Effect spans to a parent span created outside of Effect using OpenTelemetry context propagation.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/opentelemetry/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nEffect.gen(function* () {\n  yield* Effect.sleep(\"100 millis\").pipe(Effect.withSpan(\"sleep\"))\n  yield* Console.log(\"done\")\n}).pipe(\n  Effect.withSpan(\"program\"),\n  // This connects child spans to the current OpenTelemetry context\n  Tracer.withActiveSpan\n)\n```\n\n----------------------------------------\n\nTITLE: Annotating Logs in a Layer with Layer.annotateLogs\nDESCRIPTION: Shows how to add log annotations to a Layer using the Layer.annotateLogs method, which allows adding metadata to all logs produced by the layer.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_109\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Layer } from \"effect\"\n\nLayer.effectDiscard(Effect.log(\"hello\")).pipe(\n  Layer.annotateLogs({\n    service: \"my-service\"\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Exporting SQL Dumps Using Effect-TS with Sqlite\nDESCRIPTION: This code snippet demonstrates how to export SQL data using the Sqlite client in the @effect/sql-sqlite-node package. It shows how to use the export functionality specific to Sqlite within the Effect-TS framework. The snippet assumes the presence of Sqlite and the @effect/sql-sqlite-node package.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-mysql2/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Sqlite from \"@effect/sql-sqlite-node\"\nimport { Effect } from \"effect\"\n\nEffect.gen(function* () {\n  const sql = yield* Sqlite.client.SqliteClient\n  const dump = yield* sql.export\n})\n```\n\n----------------------------------------\n\nTITLE: Validating Cookies in TypeScript HTTP Server\nDESCRIPTION: This snippet shows how to validate cookies in an HTTP server using @effect/platform and effect/Schema. It defines a schema for expected cookies and handles parsing errors.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_91\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Cookies,\n  HttpRouter,\n  HttpServer,\n  HttpServerRequest,\n  HttpServerResponse\n} from \"@effect/platform\"\nimport { Effect, Schema } from \"effect\"\nimport { listen } from \"./listen.js\"\n\nconst router = HttpRouter.empty.pipe(\n  HttpRouter.get(\n    \"/\",\n    Effect.gen(function* () {\n      const cookies = yield* HttpServerRequest.schemaCookies(\n        Schema.Struct({ test: Schema.String })\n      )\n      return yield* HttpServerResponse.text(\"cookie: \" + cookies.test)\n    }).pipe(\n      Effect.catchTag(\"ParseError\", (e) =>\n        HttpServerResponse.text(`Invalid cookie: ${e.message}`)\n      )\n    )\n  )\n)\n\nconst app = router.pipe(HttpServer.serve())\n\nlisten(app, 3000)\n```\n\n----------------------------------------\n\nTITLE: Executing raw SQL queries using Effect-TS\nDESCRIPTION: This snippet demonstrates how to execute raw SQL queries using the Effect framework with MySQL. It sets up a database connection using MysqlClient and executes an SQL insert query, demonstrating how to access raw query results, which is useful for query types not directly supported, like MySQL's lack of the RETURNING clause. It requires 'effect', '@effect/sql', and 'mysql2' libraries, and depends on proper database authentication credentials. The expected input is a SQL query string, and the output is the ResultSetHeader object returned by the MySQL client.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-sqlite-wasm/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as Effect from \"effect/Effect\"\nimport * as SqlClient from \"@effect/sql/SqlClient\"\nimport * as MysqlClient from \"@effect/sql/MysqlClient\"\n\nconst DatabaseLive = MysqlClient.layer({\n  database: Config.succeed(\"database\"),\n  username: Config.succeed(\"root\"),\n  password: Config.succeed(Redacted.make(\"password\"))\n})\n\nconst program = Effect.gen(function* () {\n  const sql = yield* SqlClient.SqlClient\n\n  const result = yield* sql`INSERT INTO usernames VALUES (\"Bob\")`.raw\n\n  console.log(result)\n  /**\n   * ResultSetHeader {\n   *   fieldCount: 0,\n   *   affectedRows: 1,\n   *   insertId: 0,\n   *   info: '',\n   *   serverStatus: 2,\n   *   warningStatus: 0,\n   *   changedRows: 0\n   * }\n   */\n})\n\nprogram.pipe(Effect.provide(DatabaseLive), Effect.runPromise)\n```\n\n----------------------------------------\n\nTITLE: Using HttpClient.get Accessor API in TypeScript\nDESCRIPTION: Demonstrates how to use the new HttpClient.get accessor API to send a GET request and process the JSON response. It uses the FetchHttpClient layer and runs the effect as a promise.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FetchHttpClient, HttpClient } from \"@effect/platform\"\nimport { Effect } from \"effect\"\n\nconst program = HttpClient.get(\n  \"https://jsonplaceholder.typicode.com/posts/1\"\n).pipe(\n  Effect.andThen((response) => response.json),\n  Effect.scoped,\n  Effect.provide(FetchHttpClient.layer)\n)\n\nEffect.runPromise(program)\n/*\nOutput:\n{\n  userId: 1,\n  id: 1,\n  title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n  body: 'quia et suscipit\\n' +\n    'suscipit recusandae consequuntur expedita et cum\\n' +\n    'reprehenderit molestiae ut ut quas totam\\n' +\n    'nostrum rerum est autem sunt rem eveniet architecto'\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: HttpClient Usage with FetchHttpClient in Effect-TS\nDESCRIPTION: This snippet demonstrates how to use the HttpClient with FetchHttpClient in Effect-TS.  It shows how to make a GET request using the HttpClient, which is now accessed via `HttpClient.HttpClient`. The `FetchHttpClient.layer` provides the implementation for the client.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-bun/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FetchHttpClient, HttpClient } from \"@effect/platform\"\nimport { Effect } from \"effect\"\n\nEffect.gen(function* () {\n  const client = yield* HttpClient.HttpClient\n\n  // make a get request\n  yield* client.get(\"https://jsonplaceholder.typicode.com/todos/1\")\n}).pipe(\n  Effect.scoped,\n  // the fetch client has been moved to the `FetchHttpClient` module\n  Effect.provide(FetchHttpClient.layer)\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI Schema Generation in TypeScript\nDESCRIPTION: Demonstrates how to use the new additionalPropertiesStrategy option when generating an OpenAPI schema from an API definition. This allows controlling whether additional properties are allowed or disallowed in the generated schema.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  HttpApi,\n  HttpApiEndpoint,\n  HttpApiGroup,\n  OpenApi\n} from \"@effect/platform\"\nimport { Schema } from \"effect\"\n\nconst api = HttpApi.make(\"api\").add(\n  HttpApiGroup.make(\"group\").add(\n    HttpApiEndpoint.get(\"get\", \"/\").addSuccess(\n      Schema.Struct({ a: Schema.String })\n    )\n  )\n)\n\nconst schema = OpenApi.fromApi(api, {\n  additionalPropertiesStrategy: \"allow\"\n})\n\nconsole.log(JSON.stringify(schema, null, 2))\n```\n\n----------------------------------------\n\nTITLE: Dialect-Conditional Query Execution\nDESCRIPTION: Demonstrates using the onDialect method to execute different queries based on the specific database implementation\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-sqlite-wasm/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Sql from \"@effect/sql\"\nimport { Effect } from \"effect\"\n\nEffect.gen(function* () {\n  const sql = yield* Sql.client.Client\n  yield* sql.onDialect({\n    sqlite: () => sql`SELECT * FROM sqlite_master`,\n    mysql: () => sql`SHOW TABLES`,\n    mssql: () => sql`SELECT * FROM sys.tables`,\n    pg: () => sql`SELECT * FROM pg_catalog.pg_tables`\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using HTML Response Template in HttpServer\nDESCRIPTION: Example showing how to use the Template module to create HTML responses with the ServerResponse.html API.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect } from \"effect\"\nimport * as Http from \"@effect/platform/HttpServer\"\n\nHttp.response.html`<html>${Effect.succeed(123)}</html>`\n```\n\n----------------------------------------\n\nTITLE: Adding Replay Option to PubSub in Effect-TS\nDESCRIPTION: This example demonstrates how to add a replay buffer to a PubSub in Effect-TS. The replay buffer will replay the last `n` messages to any new subscriber. The code publishes a series of messages and then asserts that a new subscriber receives the last `n` messages from the buffer.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_101\n\nLANGUAGE: typescript\nCODE:\n```\nEffect.gen(function*() {\n  const messages = [1, 2, 3, 4, 5]\n  const pubsub = yield* PubSub.bounded<number>({ capacity: 16, replay: 3 })\n  yield* PubSub.publishAll(pubsub, messages)\n  const sub = yield* PubSub.subscribe(pubsub)\n  assert.deepStrictEqual(Chunk.toReadonlyArray(yield* Queue.takeAll(sub)), [3, 4, 5])\n})\n```\n\n----------------------------------------\n\nTITLE: Validating Array Length with Zod\nDESCRIPTION: Demonstrates how to validate array lengths using Zod's `.min()`, `.max()`, and `.length()` methods. These methods are chained after defining an array schema to set constraints on the number of elements in the array.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nz.string().array().min(5) // must contain 5 or more items\nz.string().array().max(5) // must contain 5 or fewer items\nz.string().array().length(5) // must contain 5 items exactly\n```\n\n----------------------------------------\n\nTITLE: Stream Race Operator Example in TypeScript\nDESCRIPTION: Shows implementation of Stream.race operator that accepts two upstreams and returns stream mirroring first upstream to emit while interrupting the other.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_90\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Stream, Schedule, Console, Effect } from \"effect\"\n\nconst stream = Stream.fromSchedule(Schedule.spaced(\"2 millis\")).pipe(\n  Stream.race(Stream.fromSchedule(Schedule.spaced(\"1 millis\"))),\n  Stream.take(6),\n  Stream.tap((n) => Console.log(n))\n)\n\nEffect.runPromise(Stream.runDrain(stream))\n// Output each millisecond from the first stream, the rest streams are interrupted\n// 0\n// 1\n// 2\n// 3\n// 4\n// 5\n```\n\n----------------------------------------\n\nTITLE: Customizing Stream Pubsub Strategy in Effect-TS\nDESCRIPTION: This snippet illustrates how to customize the pubsub strategy for streams in Effect-TS. It shows how to use `Stream.toPubSub` and `Stream.broadcastDynamic` with options for capacity and strategy (dropping, sliding, or suspend) to control the behavior of the stream.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_99\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schedule, Stream } from \"effect\"\n\n// toPubSub\nStream.fromSchedule(Schedule.spaced(1000)).pipe(\n  Stream.toPubSub({\n    capacity: 16, // or \"unbounded\"\n    strategy: \"dropping\" // or \"sliding\" / \"suspend\"\n  })\n)\n\n// also for the broadcast apis\nStream.fromSchedule(Schedule.spaced(1000)).pipe(\n  Stream.broadcastDynamic({\n    capacity: 16,\n    strategy: \"dropping\"\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Effectful Text Templates with Template Module\nDESCRIPTION: Example demonstrating how to create and evaluate effectful text templates using the Template module from the platform package.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect } from \"effect\"\nimport { Template } from \"@effect/platform\"\n\nconst t = Template.make`<html>${Effect.succeed(123)}</html>`\n\nEffect.runSync(t) // returns \"<html>123</html>\"\n```\n\n----------------------------------------\n\nTITLE: Using HttpClient Methods for Requests in TypeScript\nDESCRIPTION: Shows how to use the new method-based interface of HttpClient to make requests, including shorthand methods and executing request instances.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node/CHANGELOG.md#2025-04-21_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  FetchHttpClient,\n  HttpClient,\n  HttpClientRequest\n} from \"@effect/platform\"\nimport { Effect } from \"effect\"\n\nEffect.gen(function* () {\n  const client = yield* HttpClient.HttpClient\n\n  // make a get request\n  yield* client.get(\"https://jsonplaceholder.typicode.com/todos/1\")\n  // make a post request\n  yield* client.post(\"https://jsonplaceholder.typicode.com/todos\")\n\n  // execute a request instance\n  yield* client.execute(\n    HttpClientRequest.get(\"https://jsonplaceholder.typicode.com/todos/1\")\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: SQL Query Helper Updates\nDESCRIPTION: Updates to SQL query helpers including placeholder counting, default argument fixes for sql.update, and support for column names in sql.in helper\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql/CHANGELOG.md#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nsql.update()\nsql.in()\n```\n\n----------------------------------------\n\nTITLE: Initializing HTTP API with URL Parameters in TypeScript\nDESCRIPTION: Example of creating an HTTP API endpoint with URL parameters using @effect/platform. The endpoint uses a Schema to define URL parameters, including an array parameter that can handle single or multiple values.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  HttpApi,\n  HttpApiBuilder,\n  HttpApiEndpoint,\n  HttpApiGroup,\n  HttpMiddleware,\n  HttpServer\n} from \"@effect/platform\"\nimport { NodeHttpServer, NodeRuntime } from \"@effect/platform-node\"\nimport { Effect, Layer, Schema } from \"effect\"\nimport { createServer } from \"node:http\"\n\nconst api = HttpApi.make(\"api\").add(\n  HttpApiGroup.make(\"group\").add(\n    HttpApiEndpoint.get(\"get\", \"/\")\n      .addSuccess(Schema.String)\n      .setUrlParams(\n        Schema.Struct({\n          param: Schema.NonEmptyArray(Schema.String)\n        })\n      )\n  )\n)\n\nconst usersGroupLive = HttpApiBuilder.group(api, \"group\", (handlers) =>\n  handlers.handle(\"get\", (req) =>\n    Effect.succeed(req.urlParams.param.join(\", \"))\n  )\n)\n\nconst MyApiLive = HttpApiBuilder.api(api).pipe(Layer.provide(usersGroupLive))\n\nconst HttpLive = HttpApiBuilder.serve(HttpMiddleware.logger).pipe(\n  Layer.provide(MyApiLive),\n  HttpServer.withLogAddress,\n  Layer.provide(NodeHttpServer.layer(createServer, { port: 3000 }))\n)\n\nLayer.launch(HttpLive).pipe(NodeRuntime.runMain)\n```\n\n----------------------------------------\n\nTITLE: Feature: Template Literal API for HttpApiEndpoint Path Schema\nDESCRIPTION: This snippet describes the addition of a template literal API for defining the `HttpApiEndpoint` path schema, allowing for more expressive and type-safe path definitions.  This feature was introduced in a pull request with a corresponding commit hash.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node/CHANGELOG.md#2025-04-21_snippet_13\n\nLANGUAGE: none\nCODE:\n```\n- [#4035](https://github.com/Effect-TS/effect/pull/4035) [`e6d4a37`](https://github.com/Effect-TS/effect/commit/e6d4a37c1d7e657b5ea44063a1cf586808228fe5) Thanks @tim-smart! - add template literal api for defining HttpApiEndpoint path schema\n```\n\n----------------------------------------\n\nTITLE: Configuring NodeContext in TypeScript\nDESCRIPTION: Basic setup for incorporating NodeContext.layer into a TypeScript CLI application\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/cli/README.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NodeContext, NodeRuntime } from \"@effect/platform-node\"\n// Your application's setup code here\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Client Trace Propagation\nDESCRIPTION: Example demonstrating how to disable trace propagation when making HTTP client requests\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpClient as Http } from \"@effect/platform\"\n\nHttp.request\n  .get(\"https://example.com\")\n  .pipe(Http.client.fetchOk, Http.client.withTracerPropagation(false))\n```\n\n----------------------------------------\n\nTITLE: Adding Form Encoding Support to OpenAPI Specs - TypeScript\nDESCRIPTION: This snippet shows how to define a POST endpoint in Effect-TS that utilizes the 'application/x-www-form-urlencoded' content type. It demonstrates how to set payload encoding using the HttpApiSchema.withEncoding method for proper OpenAPI generation.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    HttpApi,\n    HttpApiEndpoint,\n    HttpApiGroup,\n    HttpApiSchema,\n    OpenApi\n} from \"@effect/platform\"\nimport { Schema } from \"effect\"\n\nconst api = HttpApi.make(\"api\").add(\n    HttpApiGroup.make(\"group\").add(\n        HttpApiEndpoint.post(\"post\", \"/\")\n            .addSuccess(Schema.String)\n            .setPayload(\n                Schema.Struct({ foo: Schema.String }).pipe(\n                    HttpApiSchema.withEncoding({ kind: \"UrlParams\" })\n                )\n            )\n    )\n)\n\nconst spec = OpenApi.fromApi(api)\n\nconsole.log(JSON.stringify(spec.paths, null, 2))\n/*\nOutput:\n{\n    \"/\": {\n        \"post\": {\n            \"tags\": [\n                \"group\"\n            ],\n            \"operationId\": \"group.post\",\n            \"parameters\": [],\n            \"security\": [],\n            \"responses\": {\n                \"200\": {\n                    \"description\": \"a string\",\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"type\": \"string\"\n                            }\n                        }\n                    }\n                },\n                \"400\": {\n                    \"description\": \"The request did not match the expected schema\",\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/HttpApiDecodeError\"\n                            }\n                        }\n                    }\n                }\n            },\n            \"requestBody\": {\n                \"content\": {\n                    \"application/x-www-form-urlencoded\": {\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"required\": [\n                                \"foo\"\n                            ],\n                            \"properties\": {\n                                \"foo\": {\n                                    \"type\": \"string\"\n                                }\n                            },\n                            \"additionalProperties\": false\n                        }\n                    }\n                },\n                \"required\": true\n            }\n        }\n    }\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Using PlatformConfigProvider with .env Files\nDESCRIPTION: Example of how to use PlatformConfigProvider to load configuration from .env files for NodeJS applications. This code demonstrates creating a configuration layer with environment variables.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PlatformConfigProvider } from \"@effect/platform\"\nimport { NodeContext } from \"@effect/platform-node\"\nimport { Config } from \"effect\"\n\nEffect.gen(function* () {\n  const config = yield* Config.all({\n    api_url: Config.string(\"API_URL\"),\n    api_key: Config.string(\"API_KEY\")\n  })\n\n  console.log(`Api config: ${config}`)\n}).pipe(\n  Effect.provide(\n    PlatformConfigProvider.layerDotEnvAdd(\".env\").pipe(\n      Layer.provide(NodeContext.layer)\n    )\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Rpc.StreamRequest Signature in Effect-TS\nDESCRIPTION: This code snippet illustrates a breaking change in the `Rpc.StreamRequest` signature within the Effect-TS library. The update aligns the signature with `Schema.TaggedRequest`, modifying how options are passed to the `StreamRequest` constructor. It involves changing the structure of the options object to include `failure`, `success`, and `payload` properties, enhancing type safety and clarity.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/rpc/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Rpc from \"@effect/rpc/Rpc\"\nimport { Schema } from \"@effect/schema\"\n\nexport class Counts extends Rpc.StreamRequest<Counts>()(\n  \"Counts\",\n  Schema.Never, // Indicates that no errors are expected\n  Schema.Number, // Specifies that the response is a number\n  {}\n) {}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Rpc from \"@effect/rpc/Rpc\"\nimport { Schema } from \"@effect/schema\"\n\nexport class Counts extends Rpc.StreamRequest<Counts>()(\"Counts\", {\n  failure: Schema.Never, // Indicates that no errors are expected\n  success: Schema.Number, // Specifies that the response is a number\n  payload: {}\n}) {}\n```\n\n----------------------------------------\n\nTITLE: Defining a Record Schema with Zod\nDESCRIPTION: Illustrates how to define a record schema using Zod's `z.record()` method. This is used to validate objects with dynamic keys, ensuring that all keys in the object match a specified schema and their corresponding values also conform to a schema.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nconst User = z.object({ name: z.string() })\n\nconst UserStore = z.record(z.string(), User)\n\n// type UserStore = Record<string, { name: string }>\ntype UserStore = z.infer<typeof UserStore>\n```\n\n----------------------------------------\n\nTITLE: Native Enum Schema Implementation\nDESCRIPTION: Demonstrates working with native TypeScript enums in both libraries including validation examples.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nenum Fruits {\n  Apple,\n  Banana\n}\n\nconst FruitEnum = z.nativeEnum(Fruits)\n\ntype FruitEnum = z.infer<typeof FruitEnum> // Fruits\n\nFruitEnum.parse(Fruits.Apple) // passes\nFruitEnum.parse(Fruits.Banana) // passes\nFruitEnum.parse(0) // passes\nFruitEnum.parse(1) // passes\nFruitEnum.parse(3) // fails\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nenum Fruits {\n  Apple,\n  Banana\n}\n\nconst FruitEnum = Schema.Enums(Fruits)\n\ntype FruitEnum = typeof FruitEnum.Type // Fruits\n\nSchema.decodeUnknownSync(FruitEnum)(Fruits.Apple) // passes\nSchema.decodeUnknownSync(FruitEnum)(Fruits.Banana) // passes\nSchema.decodeUnknownSync(FruitEnum)(0) // passes\nSchema.decodeUnknownSync(FruitEnum)(1) // passes\nSchema.decodeUnknownSync(FruitEnum)(3) // fails\n```\n\n----------------------------------------\n\nTITLE: Implementing Subcommand Access to Parent Configuration in TypeScript\nDESCRIPTION: This snippet defines a subcommand 'clone' within the 'minigit' command that accesses the parent command's configuration parameters using Effect.flatMap. It extracts values from parent command arguments and displays them alongside its own.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/cli/README.md#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nconst repository = Args.text({ name: \"repository\" })\nconst directory = Args.directory().pipe(Args.optional)\nconst depth = Options.integer(\"depth\").pipe(Options.optional)\nconst minigitClone = Command.make(\n  \"clone\",\n  { repository, directory, depth },\n  (subcommandConfig) =>\n    // By using `Effect.flatMap` on the parent command, we get access to its parsed config\n    Effect.flatMap(minigit, (parentConfig) => {\n      const depth = Option.map(\n        subcommandConfig.depth,\n        (depth) => `--depth ${depth}`\n      )\n      const repository = Option.some(subcommandConfig.repository)\n      const optionsAndArgs = Array.getSomes([\n        depth,\n        repository,\n        subcommandConfig.directory\n      ])\n      const configs = Option.match(parentConfig.configs, {\n        onNone: () => \"\",\n        onSome: (map) =>\n          Array.fromIterable(map)\n            .map(([key, value]) => `${key}=${value}`)\n            .join(\", \")\n      })\n      return Console.log(\n        \"Running 'minigit clone' with the following options and arguments: \" +\n          `'${Array.join(optionsAndArgs, \", \")}'\\n` +\n          `and the following configuration parameters: ${configs}`\n      )\n    })\n)\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Queries with Effect-TS\nDESCRIPTION: This TypeScript snippet demonstrates how to execute raw SQL queries using Effect-TS with MySQL. Dependencies include Effect from \"effect/Effect\" and SQL client libraries from \"@effect/sql\" and \"@effect/sql/MysqlClient\". Key parameters include database configurations and `sql` query execution. The output is the raw result from SQL operations, shown in a console log. Note, the `RETURNING` clause is not supported in MySQL, influencing the query results.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-sqlite-bun/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Effect from \"effect/Effect\"\nimport * as SqlClient from \"@effect/sql/SqlClient\"\nimport * as MysqlClient from \"@effect/sql/MysqlClient\"\n\nconst DatabaseLive = MysqlClient.layer({\n  database: Config.succeed(\"database\"),\n  username: Config.succeed(\"root\"),\n  password: Config.succeed(Redacted.make(\"password\"))\n})\n\nconst program = Effect.gen(function* () {\n  const sql = yield* SqlClient.SqlClient\n\n  const result = yield* sql`INSERT INTO usernames VALUES (\"Bob\")`.raw\n\n  console.log(result)\n  /**\n   * ResultSetHeader {\n   *   fieldCount: 0,\n   *   affectedRows: 1,\n   *   insertId: 0,\n   *   info: '',\n   *   serverStatus: 2,\n   *   warningStatus: 0,\n   *   changedRows: 0\n   * }\n   */\n})\n\nprogram.pipe(Effect.provide(DatabaseLive), Effect.runPromise)\n```\n\n----------------------------------------\n\nTITLE: Custom Error Messages for Number Validation\nDESCRIPTION: Demonstrates how to add custom error messages to number validation in both Zod and Schema libraries.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nz.number().lte(5, { message: \"my message\" })\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nSchema.Number.pipe(Schema.lessThanOrEqualTo(5, { message: () => \"my message\" }))\n```\n\n----------------------------------------\n\nTITLE: Enhancing Return Type for Schema.parseNumber in TypeScript\nDESCRIPTION: This code demonstrates the improvement in return type accuracy for Schema.parseNumber, providing more precise type information for the parsed schema.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst schema = Schema.parseNumber(Schema.String)\n\n//      ┌─── typeof Schema.String\n//      ▼\nschema.from\n```\n\n----------------------------------------\n\nTITLE: Validating Instances with Zod\nDESCRIPTION: Shows how to validate if an input is an instance of a specified class using Zod's `z.instanceof()` method.  This creates a schema that checks the type of the input.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\nclass Test {\n  name: string = \"name\"\n}\n\nconst TestSchema = z.instanceof(Test)\n\nconst blob: any = \"whatever\"\nTestSchema.parse(new Test()) // passes\nTestSchema.parse(blob) // throws\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Parent Span Integration Example\nDESCRIPTION: Example showing how to attach a parent span to an Effect from an OpenTelemetry span outside of Effect using withSpanContext.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/opentelemetry/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect } from \"effect\"\nimport { Tracer } from \"@effect/opentelemetry\"\nimport * as OtelApi from \"@opentelemetry/api\"\n\nawait OtelApi.trace.getTracer(\"test\").startActiveSpan(\n  \"otel-span\",\n  {\n    root: true\n  },\n  async (span) => {\n    try {\n      await Effect.runPromise(\n        Effect.log(\"inside otel parent span\").pipe(\n          Tracer.withSpanContext(span.spanContext())\n        )\n      )\n    } finally {\n      span.end()\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Duration Division Operations in TypeScript\nDESCRIPTION: Implementation of duration division operations showing both safe (Option-based) and unsafe division with examples\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_119\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Duration, Option } from \"effect\"\nimport assert from \"assert\"\n\nassert.deepStrictEqual(\n  Duration.divide(\"10 seconds\", 2),\n  Option.some(Duration.decode(\"5 seconds\"))\n)\nassert.deepStrictEqual(Duration.divide(\"10 seconds\", 0), Option.none())\nassert.deepStrictEqual(Duration.divide(\"1 nano\", 1.5), Option.none())\n\nassert.deepStrictEqual(\n  Duration.unsafeDivide(\"10 seconds\", 2),\n  Duration.decode(\"5 seconds\")\n)\nassert.deepStrictEqual(\n  Duration.unsafeDivide(\"10 seconds\", 0),\n  Duration.infinity\n)\nassert.throws(() => Duration.unsafeDivide(\"1 nano\", 1.5))\n```\n\n----------------------------------------\n\nTITLE: Using Queue as a subtype of Effect in TypeScript\nDESCRIPTION: Example showing how Queue is now a subtype of Effect, allowing direct use in yield expressions to take items without explicit Queue.take calls.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_81\n\nLANGUAGE: typescript\nCODE:\n```\nEffect.gen(function* () {\n  const queue = yield* Queue.unbounded<number>()\n  yield* Queue.offer(queue, 1)\n  yield* Queue.offer(queue, 2)\n  const oldWay = yield* Queue.take(queue)\n  const newWay = yield* queue\n})\n```\n\n----------------------------------------\n\nTITLE: Top-Level Groups in Client Implementation\nDESCRIPTION: Shows how to use top-level groups to simplify client API access by removing nested group namespaces.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  HttpApi,\n  HttpApiClient,\n  HttpApiEndpoint,\n  HttpApiGroup\n} from \"@effect/platform\"\nimport { Effect, Schema } from \"effect\"\n\nconst api = HttpApi.make(\"api\").add(\n  // Mark the group as top-level\n  HttpApiGroup.make(\"group\", { topLevel: true }).add(\n    HttpApiEndpoint.get(\"get\", \"/\").addSuccess(Schema.String)\n  )\n)\n\nconst program = Effect.gen(function* () {\n  const client = yield* HttpApiClient.make(api, {\n    baseUrl: \"http://localhost:3000\"\n  })\n  // The `get` method is not nested under the \"group\" name\n  const user = yield* client.get()\n  console.log(user)\n})\n```\n\n----------------------------------------\n\nTITLE: Validating Instances with Effect Schema\nDESCRIPTION: Illustrates how to validate if an input is an instance of a specified class using `effect/Schema`'s `Schema.instanceOf()` method.  This method provides similar functionality to Zod's `z.instanceof()`.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_59\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nclass Test {\n  name: string = \"name\"\n}\n\nconst TestSchema = Schema.instanceOf(Test)\n\nconst blob: any = \"whatever\"\n\nSchema.decodeUnknownSync(TestSchema)(new Test()) // passes\nSchema.decodeUnknownSync(TestSchema)(blob) // throws\n```\n\n----------------------------------------\n\nTITLE: Custom String Error Messages in Zod and Effect/Schema\nDESCRIPTION: Examples showing how to implement custom error messages for string validation in both Zod and Effect/Schema libraries. Demonstrates schema-level and validation-specific error messages.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst name = z.string({\n  required_error: \"Name is required\",\n  invalid_type_error: \"Name must be a string\"\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst name = Schema.String.annotations({\n  // No direct equivalent for required error\n  message: () => \"Name must be a string\"\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Non-Empty Array Schema with Effect/Schema\nDESCRIPTION: This snippet shows how to define a non-empty array schema using Effect/Schema.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst nonEmptyStrings = Schema.NonEmptyArray(Schema.String)\n// the inferred type is now\n// [string, ...string[]]\n\nSchema.decodeUnknownSync(nonEmptyStrings)([])\n/* throws:\nError: readonly [string, ...string[]]\n└─ [0]\n   └─ is missing\n*/\nSchema.decodeUnknownSync(nonEmptyStrings)([\"Ariana Grande\"]) // passes\n```\n\n----------------------------------------\n\nTITLE: Generating Standard Schema v1 from Effect Schema\nDESCRIPTION: Shows how to use the Schema.standardSchemaV1 API to generate a Standard Schema v1 compliant schema from an Effect Schema definition. This is useful for interoperability with other systems using the Standard Schema format.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst schema = Schema.Struct({\n  name: Schema.String\n})\n\n//      ┌─── StandardSchemaV1<{ readonly name: string; }>\n//      ▼\nconst standardSchema = Schema.standardSchemaV1(schema)\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Request with Status Code Filtering in TypeScript\nDESCRIPTION: Demonstrates HTTP GET requests with status code filtering using HttpClient.filterStatusOk to handle non-2xx responses as errors.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_65\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FetchHttpClient, HttpClient } from \"@effect/platform\"\nimport { NodeRuntime } from \"@effect/platform-node\"\nimport { Console, Effect } from \"effect\"\n\nconst getText = Effect.gen(function* () {\n  const client = (yield* HttpClient.HttpClient).pipe(HttpClient.filterStatusOk)\n  const response = yield* client.get(\n    \"https://jsonplaceholder.typicode.com/non-existing-page\"\n  )\n  return yield* response.text\n}).pipe(Effect.provide(FetchHttpClient.layer))\n\ngetText.pipe(Effect.andThen(Console.log), NodeRuntime.runMain)\n```\n\n----------------------------------------\n\nTITLE: Implementing Array URL Parameters\nDESCRIPTION: Shows how to handle array values in URL parameters and make API requests with multiple values\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpApi, HttpApiEndpoint, HttpApiGroup } from \"@effect/platform\"\nimport { Schema } from \"effect\"\n\nconst api = HttpApi.make(\"myApi\").add(\n  HttpApiGroup.make(\"group\").add(\n    HttpApiEndpoint.get(\"get\", \"/\")\n      .setUrlParams(\n        Schema.Struct({\n          // Define \"a\" as an array of strings\n          a: Schema.Array(Schema.String)\n        })\n      )\n      .addSuccess(Schema.String)\n  )\n)\n```\n\nLANGUAGE: shell\nCODE:\n```\ncurl \"http://localhost:3000/?a=1&a=2\"\n```\n\n----------------------------------------\n\nTITLE: Supporting Template Literals in Schema.Config in TypeScript\nDESCRIPTION: Example of using Schema.Config with template literals for type-safe string patterns with the `a${string}` format. This enhancement allows better type checking for configuration strings.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\n// const config: Config<`a${string}`>\nconst config = Schema.Config(\n  \"A\",\n  Schema.TemplateLiteral(Schema.Literal(\"a\"), Schema.String)\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Basic OpenAPI Schema with Definitions using makeWithDefs\nDESCRIPTION: Demonstrates how to create an OpenAPI schema with shared definitions using a simple struct schema. The example shows how to generate a schema reference and collect definitions in a separate object.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_104\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OpenApiJsonSchema } from \"@effect/platform\"\nimport { Schema } from \"effect\"\n\n// Define a schema with an identifier annotation\nconst schema = Schema.Struct({ a: Schema.String }).annotations({\n  identifier: \"MyStruct\"\n})\n\n// Create a definitions object\nconst defs = {}\n\n// Generate the OpenAPI schema while collecting definitions\nconst openApiSchema = OpenApiJsonSchema.makeWithDefs(schema, { defs })\n\nconsole.log(JSON.stringify(openApiSchema, null, 2))\n/*\nOutput:\n{\n  \"$ref\": \"#/components/schemas/MyStruct\"\n}\n*/\n\nconsole.log(JSON.stringify(defs, null, 2))\n/*\nOutput:\n{\n  \"MyStruct\": {\n    \"type\": \"object\",\n    \"required\": [\n      \"a\"\n    ],\n    \"properties\": {\n      \"a\": {\n        \"type\": \"string\"\n      }\n    },\n    \"additionalProperties\": false\n  }\n}*/\n\n```\n\n----------------------------------------\n\nTITLE: Using it.scoped for Resource Management in TypeScript\nDESCRIPTION: This snippet demonstrates how to utilize the `it.scoped` method to properly manage resource acquisition and release during tests, ensuring that resources are handled within a defined scope to prevent leaks.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/vitest/README.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { it } from \"@effect/vitest\"\nimport { Console, Effect } from \"effect\"\n\n// Simulating the acquisition and release of a resource with console logging\nconst acquire = Console.log(\"acquire resource\")\nconst release = Console.log(\"release resource\")\n\n// Defining a resource that requires proper management\nconst resource = Effect.acquireRelease(acquire, () => release)\n\n// Incorrect usage: This will result in a type error because it lacks a scope\nit.effect(\"run with scope\", () =>\n  Effect.gen(function* () {\n    yield* resource\n  })\n)\n\n// Correct usage: Using 'it.scoped' to manage the scope correctly\nit.scoped(\"run with scope\", () =>\n  Effect.gen(function* () {\n    yield* resource\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Allow Multipart in Union Type for HttpApiSchema\nDESCRIPTION: This snippet describes the feature to allow using `HttpApiSchema.Multipart` in a union type, increasing the flexibility of schema definitions. This functionality was implemented as part of a pull request.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node/CHANGELOG.md#2025-04-21_snippet_20\n\nLANGUAGE: none\nCODE:\n```\n- [#4016](https://github.com/Effect-TS/effect/pull/4016) [`a9e00e4`](https://github.com/Effect-TS/effect/commit/a9e00e43f0b5dd22c1f9d5b78be6383daea09c20) Thanks @tim-smart! - allow using HttpApiSchema.Multipart in a union\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Prompt Constructor in TypeScript\nDESCRIPTION: Implements a flexible custom prompt constructor that supports initial state computation and provides handlers for rendering, processing, and clearing terminal prompts\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/cli/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const custom: <State, Output>(\n  initialState: State | Effect<State, never, Prompt.Environment>,\n  handlers: {\n    readonly render: (\n      state: State,\n      action: Action<State, Output>\n    ) => Effect<string, never, Environment>\n    readonly process: (\n      input: UserInput,\n      state: State\n    ) => Effect<Action<State, Output>, never, Environment>\n    readonly clear: (\n      state: State,\n      action: Action<State, Output>\n    ) => Effect<string, never, Environment>\n  }\n) => Prompt<Output> = InternalPrompt.custom\n```\n\n----------------------------------------\n\nTITLE: Adding CLI Option with Fallback Prompt in TypeScript\nDESCRIPTION: Demonstrates how to create a CLI option with a fallback prompt mechanism using Effect CLI library's Options and Prompt modules\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/cli/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Options from \"@effect/cli/Options\"\nimport * as Prompt from \"@effect/cli/Prompt\"\n\nconst name = Options.text(\"name\").pipe(\n  Options.withFallbackPrompt(\n    Prompt.text({\n      message: \"Please provide your name\"\n    })\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Schema Refinements Example in TypeScript\nDESCRIPTION: Example demonstrating schema refinements and error messages before and after improvements.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst schema = Schema.Number.pipe(\n  Schema.int({ identifier: \"MyInt\" }),\n  Schema.positive()\n)\n\nconsole.log(String(schema))\n// Output: MyInt & positive\n\nSchema.decodeUnknownSync(schema)(1.1)\n/*\nthrows:\nParseError: MyInt & positive\n└─ From side refinement failure\n  └─ MyInt\n      └─ Predicate refinement failure\n        └─ Expected an integer, actual 1.1\n*/\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a String Schema in Zod\nDESCRIPTION: Shows how to create a schema for strings using Zod, demonstrating parsing, safe parsing, and error handling for both valid and invalid inputs.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from \"zod\"\n\n// creating a schema for strings\nconst mySchema = z.string()\n\n// parsing\nmySchema.parse(\"tuna\") // => \"tuna\"\nmySchema.parse(12) // => throws ZodError\n\n// \"safe\" parsing (doesn't throw error if validation fails)\nmySchema.safeParse(\"tuna\") // => { success: true; data: \"tuna\" }\nmySchema.safeParse(12) // => { success: false; error: ZodError }\n```\n\n----------------------------------------\n\nTITLE: Top-Level API Groups Configuration in TypeScript\nDESCRIPTION: Demonstrates how to configure top-level API groups to generate cleaner operation IDs without group name prefixes in the OpenAPI specification.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  HttpApi,\n  HttpApiEndpoint,\n  HttpApiGroup,\n  OpenApi\n} from \"@effect/platform\"\nimport { Schema } from \"effect\"\n\nconst api = HttpApi.make(\"api\").add(\n  // Mark the group as top-level\n  HttpApiGroup.make(\"group\", { topLevel: true }).add(\n    HttpApiEndpoint.get(\"get\", \"/\").addSuccess(Schema.String)\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing X-Forwarded Headers Middleware in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up an HTTP server with X-Forwarded headers middleware using the @effect/platform module. It includes a router with a route that logs request headers and remote address.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_88\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  HttpMiddleware,\n  HttpRouter,\n  HttpServer,\n  HttpServerRequest,\n  HttpServerResponse\n} from \"@effect/platform\"\nimport { Effect } from \"effect\"\nimport { listen } from \"./listen.js\"\n\n// Create a router and a route that logs request headers and remote address\nconst router = HttpRouter.empty.pipe(\n  HttpRouter.get(\n    \"/\",\n    Effect.gen(function* () {\n      const req = yield* HttpServerRequest.HttpServerRequest\n      console.log(req.headers)\n      console.log(req.remoteAddress)\n      return yield* HttpServerResponse.text(\"Hello World\")\n    })\n  )\n)\n\n// Set up the server with xForwardedHeaders middleware\nconst app = router.pipe(HttpServer.serve(HttpMiddleware.xForwardedHeaders))\n\nlisten(app, 3000)\n```\n\n----------------------------------------\n\nTITLE: Customizing Stream Async API Output Buffer in Effect-TS\nDESCRIPTION: This code shows how to customize the output buffer for the Stream.async* APIs in Effect-TS. It allows specifying buffer size and strategy (dropping, sliding, or suspend) for the emitted values.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_104\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Stream } from \"effect\"\n\nStream.async<string>(\n  (emit) => {\n    // ...\n  },\n  {\n    bufferSize: 16,\n    strategy: \"dropping\" // you can also use \"sliding\" or \"suspend\"\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Type-Level Validation for Effect.Service Function (TypeScript)\nDESCRIPTION: Adds type-level validation to ensure the Self generic parameter is provided when using the Effect.Service function, improving type safety.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\ntype MissingSelfGeneric =\n  `Missing \\`Self\\` generic - use \\`class Self extends Service<Self>()...\\``\n```\n\n----------------------------------------\n\nTITLE: Enum Schema Transformation and String Representation (TypeScript)\nDESCRIPTION: Shows improvements in enum schema handling, with correct toString() method that displays actual enum values instead of internal numeric indices\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nenum Fruits {\n  Apple = \"apple\",\n  Banana = \"banana\",\n  Cantaloupe = 0\n}\n\nconst schema = Schema.Enums(Fruits)\n\nconsole.log(String(schema))\n```\n\n----------------------------------------\n\nTITLE: Working with TestClock\nDESCRIPTION: Examples of using TestClock to simulate time passage in tests, showing both live and test environments.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/vitest/README.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { it } from \"@effect/vitest\"\nimport { Clock, Effect, TestClock } from \"effect\"\n\n// Effect to log the current time\nconst logNow = Effect.gen(function* () {\n  const now = yield* Clock.currentTimeMillis // Fetch the current time from the clock\n  console.log(now) // Log the current time\n})\n\n// Example of using the real system clock with `it.live`\nit.live(\"runs the test with the live Effect environment\", () =>\n  Effect.gen(function* () {\n    yield* logNow // Prints the actual current time\n  })\n)\n\n// Example of using `it.effect` with the default test environment\nit.effect(\"run the test with the test environment\", () =>\n  Effect.gen(function* () {\n    yield* logNow // Prints 0, as the test clock starts at 0\n  })\n)\n\n// Example of advancing the test clock by 1000 milliseconds\nit.effect(\"run the test with the test environment and the time adjusted\", () =>\n  Effect.gen(function* () {\n    yield* TestClock.adjust(\"1000 millis\") // Move the clock forward by 1000 milliseconds\n    yield* logNow // Prints 1000, reflecting the adjusted time\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Platform-Specific Worker Spawning in Effect-TS TypeScript\nDESCRIPTION: This snippet moves the spawn function for platform workers closer to platform-specific implementation, isolating platform concerns from business logic. It shows how to provide a worker layer using `Effect.provide` and `Worker.makePool`. Dependencies include `@effect/platform` and `@effect/platform-browser`. The user needs to supply their own Worker implementation.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-browser/CHANGELOG.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Worker } from \"@effect/platform\"\nimport { BrowserWorker } from \"@effect/platform-browser\"\nimport { Effect } from \"effect\"\n\nWorker.makePool({ ... }).pipe(\n  Effect.provide(BrowserWorker.layer(() => new globalThis.Worker(...)))\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Object Schema with Zod\nDESCRIPTION: This snippet illustrates how to define an object schema with required properties using Zod.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// all properties are required by default\nconst Dog = z.object({\n  name: z.string(),\n  age: z.number()\n})\n\n// extract the inferred type like this\ntype Dog = z.infer<typeof Dog>\n\n// equivalent to:\ntype Dog = {\n  name: string\n  age: number\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Type Branding in Zod and Effect/Schema\nDESCRIPTION: Demonstrates how to implement type branding in both libraries to create distinct types for type safety without runtime overhead. Shows the difference between Zod's .brand<>() method and Effect/Schema's Schema.brand() function.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_62\n\nLANGUAGE: typescript\nCODE:\n```\nconst Cat = z.object({ name: z.string() }).brand<\"Cat\">()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst Cat = Schema.Struct({ name: Schema.String }).pipe(Schema.brand(\"Cat\"))\n```\n\n----------------------------------------\n\nTITLE: Adding VariantSchema Field From Key in TypeScript\nDESCRIPTION: This snippet demonstrates the usage of VariantSchema's fieldFromKey utility to rename the encoded side of a field by variant. Dependencies include `@effect/schema` and `@effect/experimental`. Key parameters include the variants and defaultVariant, and the User class fields that map schema types to JSON keys. The input is a user object, and the output is an encoded JSON with renamed fields. The primary constraint is the predefined variant options.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/experimental/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Schema } from \"@effect/schema\"\nimport { VariantSchema } from \"@effect/experimental\"\n\nconst { Class, fieldFromKey } = VariantSchema.make({\n  variants: [\"domain\", \"json\"],\n  defaultVariant: \"domain\"\n})\n\nclass User extends Class<User>(\"User\")({\n  id: Schema.Int,\n  firstName: Schema.String.pipe(fieldFromKey({ json: \"first_name\" }))\n}) {}\n\nconsole.log(\n  Schema.encodeSync(User.json)({\n    id: 1,\n    firstName: \"Bob\"\n  })\n)\n/*\n{ id: 1, first_name: 'Bob' }\n*/\n```\n\n----------------------------------------\n\nTITLE: Using NodeHttpServer.layerTest Example in TypeScript\nDESCRIPTION: Example demonstrating how to use NodeHttpServer.layerTest for testing HTTP servers with Effect\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node/CHANGELOG.md#2025-04-21_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpClientRequest, HttpRouter, HttpServer } from \"@effect/platform\"\nimport { NodeHttpServer } from \"@effect/platform-node\"\nimport { expect, it } from \"@effect/vitest\"\nimport { Effect } from \"effect\"\n\nit.scoped(\"test\", () =>\n  Effect.gen(function* () {\n    yield* HttpServer.serveEffect(HttpRouter.empty)\n    const response = yield* HttpClientRequest.get(\"/\")\n    expect(response.status, 404)\n  }).pipe(Effect.provide(NodeHttpServer.layerTest))\n)\n```\n\n----------------------------------------\n\nTITLE: Using New Tag Class Constructor Pattern in TypeScript\nDESCRIPTION: Example demonstrating the new preferred way of creating Context Tags with the class-based constructor pattern, which creates both the tag and an opaque identifier at the type level.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_138\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Context } from \"effect\"\nclass Service extends Context.Tag(\"Service\")<\n  Service,\n  {\n    number: Effect.Effect<never, never, number>\n  }\n>() {}\n\nconst program = Effect.flatMap(Service, ({ number }) => number).pipe(\n  Effect.flatMap((_) => Effect.log(`number: ${_}`))\n)\n```\n\n----------------------------------------\n\nTITLE: Adding RPC Router with Service Effect in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates the implementation of an RPC Router where additional context is added using the provideServiceEffect API. It uses the make method from Router and integrates a service effect, which is beneficial for providing session context in RPC systems. Dependencies include the `@effect/rpc` package, and the snippet operates within the TypeScript environment.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/rpc/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Rpc, Router } from \"@effect/rpc\"\n\nRouter.make(\n  Rpc.effect(MyRequest, () => ...)\n).pipe(\n  Router.provideServiceEffect(Session, makeSessionEffect)\n)\n```\n\n----------------------------------------\n\nTITLE: Extending Object Schema with Zod\nDESCRIPTION: This snippet illustrates how to extend an object schema to include additional properties using Zod.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nconst DogWithBreed = Dog.extend({\n  breed: z.string()\n})\n```\n\n----------------------------------------\n\nTITLE: SELECT Resolver Implementation\nDESCRIPTION: Shows how to implement a SELECT resolver with ID-based lookup for a Person entity\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Schema, pipe } from \"effect\"\nimport { SqlResolver, SqlClient } from \"@effect/sql\"\n\nclass Person extends Schema.Class<Person>(\"Person\")({ \n  id: Schema.Number,\n  name: Schema.String,\n  createdAt: Schema.DateFromSelf,\n  updatedAt: Schema.DateFromSelf\n}) {}\n\nexport const makePersonService = Effect.gen(function* () {\n  const sql = yield* SqlClient.SqlClient\n\n  const GetById = yield* SqlResolver.findById(\"GetPersonById\", {\n    Id: Schema.Number,\n    Result: Person,\n    ResultId: (_) => _.id,\n    execute: (ids) => sql`SELECT * FROM people WHERE ${sql.in(\"id\", ids)}`\n  })\n\n  const getById = (id: number) =>\n    Effect.withRequestCaching(\"on\")(GetById.execute(id))\n\n  return { getById }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Tagged Enums with Helpers in Effect-TS\nDESCRIPTION: Demonstrates how to create and use tagged enums with $is and $match helper methods for pattern matching and type checking.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_114\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Data } from \"effect\"\n\ntype HttpError = Data.TaggedEnum<{\n  NotFound: {}\n  InternalServerError: { reason: string }\n}>\nconst { $is, $match, InternalServerError, NotFound } = Data.taggedEnum<HttpError>()\n\n// create a matcher\nconst matcher = $match({\n  NotFound: () => 0,\n  InternalServerError: () => 1\n})\n\n// true\n$is(\"NotFound\")(NotFound())\n\n// false\n$is(\"NotFound\")(InternalServerError({ reason: \"fail\" }))\n```\n\n----------------------------------------\n\nTITLE: Adding Missing JSONSchema Annotations to Schema Filters in TypeScript\nDESCRIPTION: Shows the implementation difference before and after adding missing jsonSchema annotations to filters like 'uppercased'. The change enables JSON schema generation for these filter schemas without errors.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\nimport { JSONSchema, Schema } from \"effect\"\n\nconst schema = Schema.Struct({\n  a: Schema.Uppercased\n})\n\nconsole.log(JSON.stringify(JSONSchema.make(schema), null, 2))\n/*\nthrows:\nError: Missing annotation\ndetails: Generating a JSON Schema for this schema requires a \"jsonSchema\" annotation\nschema (Refinement): Uppercased\n*/\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { JSONSchema, Schema } from \"effect\"\n\nconst schema = Schema.Uppercased\n\nconsole.log(JSON.stringify(JSONSchema.make(schema), null, 2))\n/*\nOutput:\n{\n  \"$ref\": \"#/$defs/Uppercased\",\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"$defs\": {\n    \"Uppercased\": {\n      \"type\": \"string\",\n      \"description\": \"an uppercase string\",\n      \"title\": \"Uppercased\",\n      \"pattern\": \"^[^a-z]*$\"\n    }\n  }\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Date String Parsing with Effect/Schema\nDESCRIPTION: Example of parsing date strings into Date objects using Effect/Schema. Shows handling of various date formats and invalid date detection.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\n// Parse a valid ISO 8601 date string\nconsole.log(Schema.decodeUnknownSync(Schema.Date)(\"2020-01-01\"))\n// Output: 2020-01-01T00:00:00.000Z (as Date object)\n\n// Parse a less strict date format\nconsole.log(Schema.decodeUnknownSync(Schema.Date)(\"2020-1-1\"))\n// Output: 2019-12-31T23:00:00.000Z (as Date object)\n\n// Attempt to parse an invalid date\nconsole.log(Schema.decodeUnknownSync(Schema.Date)(\"2020-01-32\"))\n/*\nthrows:\nParseError: Date\n└─ Predicate refinement failure\n   └─ Expected a valid Date, actual Invalid Date\n*/\n```\n\n----------------------------------------\n\nTITLE: Defining an Array Schema for Strings with Zod\nDESCRIPTION: This snippet demonstrates how to define an array schema for strings using Zod.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nconst stringArray = z.array(z.string())\n```\n\n----------------------------------------\n\nTITLE: Using Fast-Check Parameters in Vitest Property Tests\nDESCRIPTION: Example showing how to configure fast-check parameters when using property-based testing with Effect and Vitest. Demonstrates passing numRuns option to control test iterations.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/vitest/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nit.effect.prop(\n  \"adds context\",\n  [realNumber],\n  ([num]) =>\n    Effect.gen(function* () {\n      const foo = yield* Foo\n      expect(foo).toEqual(\"foo\")\n      return num === num\n    }),\n  { fastCheck: { numRuns: 200 } }\n)\n```\n\n----------------------------------------\n\nTITLE: Filtering Effect with NoSuchElementException (TypeScript)\nDESCRIPTION: Shows how to use the Effect.filterOrFail API without providing a fallback failure function. This overload automatically fails with a NoSuchElementException when the predicate is not satisfied.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_122\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect } from \"effect\"\n\n// fails with NoSuchElementException\nEffect.succeed(1).pipe(Effect.filterOrFail((n) => n === 0))\n```\n\n----------------------------------------\n\nTITLE: Nullable Schema Implementation\nDESCRIPTION: Illustrates how to create and use nullable schemas in both libraries with validation examples.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst nullableString = z.nullable(z.string())\n\nnullableString.parse(\"asdf\") // => \"asdf\"\nnullableString.parse(null) // => null\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst nullableString = Schema.NullOr(Schema.String)\n\nSchema.decodeUnknownSync(nullableString)(\"asdf\") // => \"asdf\"\nSchema.decodeUnknownSync(nullableString)(null) // => null\n```\n\n----------------------------------------\n\nTITLE: Converting Optional Fields to Required in Effect/Schema\nDESCRIPTION: This snippet demonstrates how to convert optional fields back to required fields in an object schema using Effect/Schema.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst user = Schema.Struct({\n  email: Schema.String,\n  username: Schema.String\n}).pipe(Schema.partial) // Makes all fields optional\n\nconst requiredUser = Schema.required(user) // Converts all fields back to required\n```\n\n----------------------------------------\n\nTITLE: Querying SQL with Effect\nDESCRIPTION: This snippet demonstrates how to use the `@effect/sql` package to execute a SQL query. It imports the necessary modules and uses `Effect.gen` to create an effect that retrieves a SQL client and executes a SELECT query against a users table.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-sqlite-react-native/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Sql from \"@effect/sql\"\nimport { Effect } from \"effect\"\n\nEffect.gen(function* () {\n  const sql = yield* Sql.client.Client\n  yield* sql`SELECT * FROM users`\n})\n```\n\n----------------------------------------\n\nTITLE: Comparing OpenAPI JSON Schema and Standard JSONSchema\nDESCRIPTION: Illustrates the differences between OpenAPI schema and JSON schema by comparing the output of both for the same input schema. This example shows how the $schema property is omitted in OpenAPI schemas.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_100\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OpenApiJsonSchema } from \"@effect/platform\"\nimport { JSONSchema, Schema } from \"effect\"\n\nconst schema = Schema.String\n\nconst openApiSchema = OpenApiJsonSchema.make(schema)\nconst jsonSchema = JSONSchema.make(schema)\n\nconsole.log(JSON.stringify(openApiSchema, null, 2))\n/*\nOutput:\n{\n  \"type\": \"string\"\n}\n*/\n\nconsole.log(JSON.stringify(jsonSchema, null, 2))\n/*\nOutput:\n{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"string\"\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Accessing Service Constants in Effect-TS TypeScript\nDESCRIPTION: This snippet allows access to any constant in a service, not just effects, using `Effect.serviceConstants`. It demonstrates creating a `NumberRepo` class and accessing its constants with Effect-TS. Dependencies include the `effect` library for Effect and Context functionalities. This implementation emphasizes the ease of accessing both service constants and members.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-browser/CHANGELOG.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Context } from \"effect\"\n\nclass NumberRepo extends Context.TagClass(\"NumberRepo\")<\n  NumberRepo,\n  {\n    readonly numbers: Array<number>\n  }\n> {\n  static numbers = Effect.serviceConstants(NumberRepo).numbers\n}\n```\n\n----------------------------------------\n\nTITLE: Mounting a Router Module in Effect-TS\nDESCRIPTION: This code shows how to mount a router module in the main application. It creates the main router, mounts the birds router, and sets up the server to listen on port 3000.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_79\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpRouter, HttpServer } from \"@effect/platform\"\nimport { birds } from \"./birds.js\"\nimport { listen } from \"./listen.js\"\n\n// Create the main router and mount the birds router\nconst router = HttpRouter.empty.pipe(HttpRouter.mount(\"/birds\", birds))\n\nconst app = router.pipe(HttpServer.serve())\n\nlisten(app, 3000)\n```\n\n----------------------------------------\n\nTITLE: Accessing Array Element Schema with Zod\nDESCRIPTION: This snippet shows how to access the schema for the elements in a Zod array schema.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nstringArray.element // => string schema\n```\n\n----------------------------------------\n\nTITLE: Using ensure Function to Normalize Array Types\nDESCRIPTION: Demonstrates how to use the ensure utility for Array to normalize a value that could be either a single item or an array of items into a consistent array type.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_108\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ensure } from \"effect/Array\"\n\n// lets say you are not 100% sure if it's a member or a collection\ndeclare const someValue: { foo: string } | Array<{ foo: string }>\n\n// $ExpectType ({ foo: string })[]\nconst normalized = ensure(someValue)\n```\n\n----------------------------------------\n\nTITLE: Creating Literal Enum JSON Schemas - TypeScript\nDESCRIPTION: This snippet outlines the changes made to JSONSchema generation for literal enums. It adds type information to the generated schema, ensuring that schemas provide more comprehensive information for validation and documentation.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { JSONSchema, Schema } from \"effect\"\n\nconst schema = Schema.Literal(\"a\", \"b\")\n\nconsole.log(JSON.stringify(JSONSchema.make(schema), null, 2))\n/*\n{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"string\",\n  \"enum\": [\n    \"a\",\n    \"b\"\n  ]\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Schema Arbitrary Generation\nDESCRIPTION: Example demonstrating schema arbitrary generation with annotations and constraints.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Arbitrary, Schema } from \"effect\"\n\nconst schema = Schema.Int.annotations({\n  arbitrary: (_, ctx) => (fc) => {\n    console.log(\"context: \", ctx)\n    return fc.integer()\n  }\n}).pipe(Schema.greaterThan(0), Schema.lessThan(10))\n\nArbitrary.make(schema)\n```\n\n----------------------------------------\n\nTITLE: Defining Object Schema with Effect/Schema\nDESCRIPTION: This snippet demonstrates how to define an object schema with required properties using Effect/Schema.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\n// all properties are required by default\nconst Dog = Schema.Struct({\n  name: Schema.String,\n  age: Schema.Number\n})\n\n// extract the inferred type like this\ntype Dog = typeof Dog.Type\n\n// equivalent to:\ntype Dog = {\n  readonly name: string\n  readonly age: number\n}\n```\n\n----------------------------------------\n\nTITLE: Optional Field Schema Definition\nDESCRIPTION: Shows how to define optional fields in object schemas using both libraries.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = z.object({\n  username: z.string().optional()\n})\n\ntype Type = z.infer<typeof user> // { username?: string | undefined };\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst user = Schema.Struct({\n  username: Schema.optional(Schema.String)\n})\n\ntype Type = typeof user.Type // { readonly username?: string | undefined };\n```\n\n----------------------------------------\n\nTITLE: Creating Context Tags with Required String Keys in Effect\nDESCRIPTION: Shows the new pattern for creating context tags that now requires a string key. The old `Tag` has been renamed to `GenericTag` and requires a string identifier to improve debuggability.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Context } from \"effect\"\ninterface Service {\n  readonly _: unique symbol\n}\nconst Service = Context.Tag<\n  Service,\n  {\n    number: Effect.Effect<never, never, number>\n  }\n>()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Context } from \"effect\"\ninterface Service {\n  readonly _: unique symbol\n}\nconst Service = Context.GenericTag<\n  Service,\n  {\n    number: Effect.Effect<never, never, number>\n  }\n>(\"Service\")\n```\n\n----------------------------------------\n\nTITLE: Using GenericTag with String Key in Effect-TS\nDESCRIPTION: Demonstrates the updated syntax for creating context tags which now requires a string key. This change makes tags global by default and improves debuggability.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/opentelemetry/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Context } from \"effect\"\ninterface Service {\n  readonly _: unique symbol\n}\nconst Service = Context.GenericTag<\n  Service,\n  {\n    number: Effect.Effect<never, never, number>\n  }\n>(\"Service\")\n```\n\n----------------------------------------\n\nTITLE: Controlling Test Logging\nDESCRIPTION: Examples of controlling log output in tests using different methods including custom loggers and it.live.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/vitest/README.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { it } from \"@effect/vitest\"\nimport { Effect, Logger } from \"effect\"\n\n// This test won't display the log message, as logging is suppressed by default in `it.effect`\nit.effect(\"does not display a log\", () =>\n  Effect.gen(function* () {\n    yield* Effect.log(\"it.effect\") // Log won't be shown\n  })\n)\n\n// This test will display the log because a custom logger is provided\nit.effect(\"providing a logger displays a log\", () =>\n  Effect.gen(function* () {\n    yield* Effect.log(\"it.effect with custom logger\") // Log will be displayed\n  }).pipe(\n    Effect.provide(Logger.pretty) // Providing a pretty logger for log output\n  )\n)\n\n// This test runs using `it.live`, which enables logging by default\nit.live(\"it.live displays a log\", () =>\n  Effect.gen(function* () {\n    yield* Effect.log(\"it.live\") // Log will be displayed\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Using Effect.transposeOption to Convert Option<Effect> to Effect<Option>\nDESCRIPTION: Demonstrates how to transform an Option of an Effect into an Effect of an Option. If the Option is None, the resulting Effect immediately succeeds with None. If the Option is Some, the inner Effect will be executed with its result wrapped in Some.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Option } from \"effect\"\n\n//      ┌─── Option<Effect<number, never, never>>\n//      ▼\nconst maybe = Option.some(Effect.succeed(42))\n\n//      ┌─── Effect<Option<number>, never, never>\n//      ▼\nconst result = Effect.transposeOption(maybe)\n\nconsole.log(Effect.runSync(result))\n// Output: { _id: 'Option', _tag: 'Some', value: 42 }\n```\n\n----------------------------------------\n\nTITLE: Defining a Set Schema with Effect Schema\nDESCRIPTION: Demonstrates how to define schemas for `Set` objects using `effect/Schema`'s `Schema.Set()` and `Schema.ReadonlySet()` methods. These methods take the schema for the elements as an argument.  `Schema.ReadonlySet()` is used to explicitly define readonly sets.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst set1 = Schema.Set(Schema.Number)\n\n// type Set1 = Set<number>\ntype Set1 = typeof set1.Type\n\nconst set2 = Schema.ReadonlySet(Schema.Number)\n\n// type Set2 = ReadonlySet<number>\ntype Set2 = typeof set2.Type\n```\n\n----------------------------------------\n\nTITLE: Fixing Duration Format Output in TypeScript\nDESCRIPTION: This snippet shows the fix applied to the Duration.format method when formatting a zero duration. The output was changed to return '0' instead of an empty string. It demonstrates a simple import from the 'effect' library and includes console logging for testing the output of a duration in TypeScript.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Duration } from \"effect\"\n\nconsole.log(Duration.format(Duration.zero))\n// Output: \"0\"\n```\n\n----------------------------------------\n\nTITLE: Annotating HttpApi with AdditionalSchemas in TypeScript\nDESCRIPTION: This snippet shows how to annotate the HttpApi with additional schemas using the Schema from the effect library. This enables the generation of components.schemas in the OpenApi schema.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\nimport { HttpApi } from \"@effect/platform\"\n\nHttpApi.empty.annotate(HttpApi.AdditionalSchemas, [\n  Schema.Struct({\n    contentType: Schema.String,\n    length: Schema.Int\n  }).annotations({\n    identifier: \"ComponentsSchema\"\n  })\n])\n/**\n {\n  \"openapi\": \"3.0.3\",\n  ...\n  \"components\": {\n    \"schemas\": {\n      \"ComponentsSchema\": {...},\n      ...\n    }\n  }\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Conditional Query Execution Based on SQL Dialect\nDESCRIPTION: Demonstrates the usage of `sql.onDialect` to execute different queries based on the SQL dialect being used. This is part of the Effect-TS SQL client's flexibility feature.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-pg/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Sql from \"@effect/sql\"\nimport { Effect } from \"effect\"\n\nEffect.gen(function* () {\n  const sql = yield* Sql.client.Client\n  yield* sql.onDialect({\n    sqlite: () => sql`SELECT * FROM sqlite_master`,\n    mysql: () => sql`SHOW TABLES`,\n    mssql: () => sql`SELECT * FROM sys.tables`,\n    pg: () => sql`SELECT * FROM pg_catalog.pg_tables`\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Primitive Service Tags in TypeScript\nDESCRIPTION: Demonstrates how to define service tags for primitive types like Date, Map, and number using Effect.Tag.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_126\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Layer } from \"effect\"\n\nclass DateTag extends Effect.Tag(\"DateTag\")<DateTag, Date>() {\n  static date = new Date(1970, 1, 1)\n  static Live = Layer.succeed(this, this.date)\n}\n\nclass MapTag extends Effect.Tag(\"MapTag\")<MapTag, Map<string, string>>() {\n  static Live = Layer.effect(\n    this,\n    Effect.sync(() => new Map())\n  )\n}\n\nclass NumberTag extends Effect.Tag(\"NumberTag\")<NumberTag, number>() {\n  static Live = Layer.succeed(this, 100)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Non-Empty Array Schema with Zod\nDESCRIPTION: This snippet demonstrates how to define a non-empty array schema using Zod.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nconst nonEmptyStrings = z.string().array().nonempty()\n// the inferred type is now\n// [string, ...string[]]\n\nnonEmptyStrings.parse([]) // throws: \"Array cannot be empty\"\nnonEmptyStrings.parse([\"Ariana Grande\"]) // passes\n```\n\n----------------------------------------\n\nTITLE: Implementing Readable Interface in TypeScript\nDESCRIPTION: Demonstrates usage of the Readable interface with a Ref implementation, showing how to create and read from a readable reference\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_118\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Readable, Ref } from \"effect\"\nimport assert from \"assert\"\n\nEffect.gen(function* (_) {\n  const ref = yield* _(Ref.make(123))\n  assert(Readable.isReadable(ref))\n\n  const result = yield* _(ref.get)\n  assert(result === 123)\n})\n```\n\n----------------------------------------\n\nTITLE: Visualizing Parameterized Types Hierarchy with Mermaid\nDESCRIPTION: This Mermaid flowchart illustrates the hierarchy of parameterized types in the Effect ecosystem. It shows the relationships between various typeclasses such as Alternative, Applicative, Monad, and their dependencies.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/typeclass/README.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    Alternative --> SemiAlternative\n    Alternative --> Coproduct\n    Applicative --> Product\n    Coproduct --> SemiCoproduct\n    SemiAlternative --> Covariant\n    SemiAlternative --> SemiCoproduct\n    SemiApplicative --> SemiProduct\n    SemiApplicative --> Covariant\n    Applicative --> SemiApplicative\n    Chainable --> FlatMap\n    Chainable ---> Covariant\n    Monad --> FlatMap\n    Monad --> Pointed\n    Pointed --> Of\n    Pointed --> Covariant\n    Product --> SemiProduct\n    Product --> Of\n    SemiProduct --> Invariant\n    Covariant --> Invariant\n    SemiCoproduct --> Invariant\n```\n\n----------------------------------------\n\nTITLE: Using contentSchema for Structured Content in OpenAPI\nDESCRIPTION: Shows how OpenAPI schemas support the contentSchema property for describing the structure of content for a media type, which is not available in standard JSON schemas. This is useful for defining structured JSON payloads.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_103\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OpenApiJsonSchema } from \"@effect/platform\"\nimport { JSONSchema, Schema } from \"effect\"\n\n// Define a schema for parsing JSON content\nconst schema = Schema.parseJson(Schema.Struct({ a: Schema.String }))\n\nconst openApiSchema = OpenApiJsonSchema.make(schema)\nconst jsonSchema = JSONSchema.make(schema)\n\nconsole.log(JSON.stringify(openApiSchema, null, 2))\n/*\nOutput:\n{\n  \"type\": \"string\",\n  \"contentMediaType\": \"application/json\",\n  \"contentSchema\": {\n    \"type\": \"object\",\n    \"required\": [\n      \"a\"\n    ],\n    \"properties\": {\n      \"a\": {\n        \"type\": \"string\"\n      }\n    },\n    \"additionalProperties\": false\n  }\n}\n*/\n\nconsole.log(JSON.stringify(jsonSchema, null, 2))\n/*\nOutput:\n{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"required\": [\n    \"a\"\n  ],\n  \"properties\": {\n    \"a\": {\n      \"type\": \"string\"\n    }\n  },\n  \"additionalProperties\": false\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Updating Context Tag Creation in TypeScript\nDESCRIPTION: Example showing the change from generic Context.Tag to the new required string key pattern where tags must now include a string identifier for better debugging.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_137\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Context } from \"effect\"\ninterface Service {\n  readonly _: unique symbol\n}\nconst Service = Context.Tag<\n  Service,\n  {\n    number: Effect.Effect<never, never, number>\n  }\n>()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Context } from \"effect\"\ninterface Service {\n  readonly _: unique symbol\n}\nconst Service = Context.GenericTag<\n  Service,\n  {\n    number: Effect.Effect<never, never, number>\n  }\n>(\"Service\")\n```\n\n----------------------------------------\n\nTITLE: HttpClientResponse Usage Example\nDESCRIPTION: This example illustrates how to use the HttpClientResponse methods directly, explicitly adding a Effect.scoped to the pipeline. This change came as a result of the Scoped HttpClientResponse helpers being removed in version 0.44.0.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-browser/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { FetchHttpClient, HttpClient } from \"@effect/platform\"\nimport { Effect } from \"effect\"\n\nEffect.gen(function* () {\n  const client = yield* HttpClient.HttpClient\n\n  yield* client.get(\"https://jsonplaceholder.typicode.com/todos/1\").pipe(\n    Effect.flatMap((response) => response.json),\n    Effect.scoped // supply the `Scope`\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: New Tag Creation Syntax in Effect-TS\nDESCRIPTION: This code demonstrates the new approach for creating Tags in Effect-TS, requiring a string key to be provided for all tags, which makes tags global and improves debugging.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node-shared/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Context } from \"effect\"\ninterface Service {\n  readonly _: unique symbol\n}\nconst Service = Context.GenericTag<\n  Service,\n  {\n    number: Effect.Effect<never, never, number>\n  }\n>(\"Service\")\n```\n\n----------------------------------------\n\nTITLE: Fixing Error Response Content Type for Text Schemas in OpenAPI Spec Generation\nDESCRIPTION: This snippet demonstrates the correction of error response content type for text schemas from 'application/json' to 'text/plain' in the generated OpenAPI specification.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpApi, HttpApiEndpoint, HttpApiGroup, HttpApiSchema, OpenApi } from \"@effect/platform\"\n\nconst api = HttpApi.make(\"api\").add(\n  HttpApiGroup.make(\"group\").add(\n    HttpApiEndpoint.get(\"get\", \"/\").addError(HttpApiSchema.Text())\n  )\n)\n\nconst spec = OpenApi.fromApi(api)\n\nconsole.log(JSON.stringify(spec.paths, null, 2))\n```\n\n----------------------------------------\n\nTITLE: Accessing SQL Client API in TypeScript with Effect\nDESCRIPTION: Demonstrates basic usage of SQL client with Effect, showcasing a generic query execution approach that supports multiple SQL dialects\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-sqlite-bun/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Sql from \"@effect/sql\"\nimport { Effect } from \"effect\"\n\nEffect.gen(function* () {\n  const sql = yield* Sql.client.Client\n  yield* sql`SELECT * FROM users`\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing FileSystem Watch Backend with ParcelWatcher in Effect-TS\nDESCRIPTION: Demonstrates how to provide a custom file watching backend (@parcel/watcher) to your effects by creating a Layer that uses the ParcelWatcher backend.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Layer } from \"effect\"\nimport { FileSystem } from \"@effect/platform\"\nimport { NodeFileSystem } from \"@effect/platform-node\"\nimport * as ParcelWatcher from \"@effect/platform-node/NodeFileSystem/ParcelWatcher\"\n\n// create a Layer that uses the ParcelWatcher backend\nNodeFileSystem.layer.pipe(Layer.provide(ParcelWatcher.layer))\n```\n\n----------------------------------------\n\nTITLE: Updating FiberRef Values in Runtime with TypeScript\nDESCRIPTION: Shows how to update fiber ref values inside a Runtime object using the new Runtime.updateFiberRefs/setFiberRef/deleteFiberRef APIs.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_135\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, FiberRef, Runtime } from \"effect\"\n\nconst ref = FiberRef.unsafeMake(0)\n\nconst updatedRuntime = Runtime.defaultRuntime.pipe(\n  Runtime.setFiberRef(ref, 1)\n)\n\n// returns 1\nconst result = Runtime.runSync(updatedRuntime)(FiberRef.get(ref))\n```\n\n----------------------------------------\n\nTITLE: Defining a Record Schema with Effect Schema\nDESCRIPTION: Shows how to define a record schema using `effect/Schema`'s `Schema.Record()`. The `Schema.Record()` method creates a schema for objects with dynamic keys, ensuring that keys and values conform to specified schemas.  `effect/Schema` generates readonly types by default.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst User = Schema.Struct({ name: Schema.String })\n\nconst UserStore = Schema.Record({ key: Schema.String, value: User })\n\n// type UserStore = { readonly [x: string]: { readonly name: string; }; }\ntype UserStore = typeof UserStore.Type\n```\n\n----------------------------------------\n\nTITLE: Creating Service Tags with GenericTag (TypeScript)\nDESCRIPTION: Demonstrates the new approach to creating service tags in Effect which requires providing a string key to ensure better debuggability. This replaces the previous Tag constructor with GenericTag.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node/CHANGELOG.md#2025-04-21_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Context } from \"effect\"\ninterface Service {\n  readonly _: unique symbol\n}\nconst Service = Context.GenericTag<\n  Service,\n  {\n    number: Effect.Effect<never, never, number>\n  }\n>(\"Service\")\n```\n\n----------------------------------------\n\nTITLE: Pretty Printer Workflow Diagram\nDESCRIPTION: ASCII diagram showing the workflow of the pretty printer system\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/printer/README.md#2025-04-21_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n╔══════════╗\n║          ║                         ╭────────────────────╮\n║          ║                         │ vsep, pretty, <+>, │\n║          ║                         │ nest, align, …     │\n║          ║                         ╰─────────┬──────────╯\n║          ║                                   │\n║  Create  ║                                   │\n║          ║                                   │\n║          ║                                   ▽\n║          ║                         ╭───────────────────╮\n║          ║                         │        Doc        │\n╠══════════╣                         │  (rich document)  │\n║          ║                         ╰─────────┬─────────╯\n║          ║                                   │\n║          ║                                   │ Layout algorithms\n║  Layout  ║                                   │ e.g. Layout.pretty\n║          ║                                   ▽\n║          ║                         ╭───────────────────╮\n║          ║                         │     DocStream     │\n╠══════════╣                         │ (simple document) │\n║          ║                         ╰─────────┬─────────╯\n║          ║                                   │\n║          ║                                   ├─────────────────────────────╮\n║          ║                                   │                             │ treeForm\n║          ║                                   │                             ▽\n║          ║                                   │                     ╭───────────────╮\n║          ║                                   │                     │    DocTree    │\n║  Render  ║                                   │                     ╰───────┬───────╯\n║          ║                                   │                             │\n║          ║               ╭───────────────────┼─────────────────╮  ╭────────┴────────╮\n║          ║               │                   │                 │  │                 │\n║          ║               ▽                   ▽                 ▽  ▽                 ▽\n║          ║       ╭───────────────╮   ╭───────────────╮   ╭───────────────╮   ╭───────────────╮\n║          ║       │ ANSI terminal │   │  Plain Text   │   │ other/custom  │   │     HTML      │\n║          ║       ╰───────────────╯   ╰───────────────╯   ╰───────────────╯   ╰───────────────╯\n║          ║\n╚══════════╝\n```\n\n----------------------------------------\n\nTITLE: Accessing Non-Effect Constants in Service with TypeScript\nDESCRIPTION: Demonstrates the ability to access any constant in a service, not just effects, using Effect.serviceConstants and Effect.serviceMembers.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/cli/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Context } from \"effect\"\n\nclass NumberRepo extends Context.TagClass(\"NumberRepo\")<\n  NumberRepo,\n  {\n    readonly numbers: Array<number>\n  }\n>() {\n  static numbers = Effect.serviceConstants(NumberRepo).numbers\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Tuple Schema with Effect Schema\nDESCRIPTION: Demonstrates how to define a tuple schema using `effect/Schema`'s `Schema.Tuple()`. The schemas for the elements are passed as arguments to `Schema.Tuple()`. Tuples in `effect/Schema` are readonly by default.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst athleteSchema = Schema.Tuple(\n  Schema.String, // name\n  Schema.Number, // jersey number\n  Schema.Struct({\n    pointsScored: Schema.Number\n  }) // statistics\n)\n\n// type Athlete = readonly [string, number, { readonly pointsScored: number }]\ntype Athlete = typeof athleteSchema.Type\n```\n\n----------------------------------------\n\nTITLE: Defining Path Parameters with setPath in Effect Platform\nDESCRIPTION: Demonstrates how to define path parameters using the setPath method for dynamic route segments.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpApiEndpoint } from \"@effect/platform\"\nimport { Schema } from \"effect\"\n\nconst User = Schema.Struct({\n  id: Schema.Number,\n  name: Schema.String,\n  createdAt: Schema.DateTimeUtc\n})\n\nconst getUser = HttpApiEndpoint.get(\"getUser\", \"/user/:id\")\n  .setPath(\n    Schema.Struct({\n      id: Schema.NumberFromString\n    })\n  )\n  .addSuccess(User)\n```\n\n----------------------------------------\n\nTITLE: Creating Context Tags with Tag Class in Effect-TS\nDESCRIPTION: Shows the new recommended way to create context tags using the Class syntax. This approach automatically creates an opaque identifier at the type level while using a string key.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/opentelemetry/CHANGELOG.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Context } from \"effect\"\nclass Service extends Context.Tag(\"Service\")<\n  Service,\n  {\n    number: Effect.Effect<never, never, number>\n  }\n>() {}\n\nconst program = Effect.flatMap(Service, ({ number }) => number).pipe(\n  Effect.flatMap((_) => Effect.log(`number: ${_}`))\n)\n```\n\n----------------------------------------\n\nTITLE: Running Effect-TS CLI Application\nDESCRIPTION: Shell commands demonstrating how to execute the CLI application using tsx for TypeScript execution and checking version information.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/cli/README.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnpx tsx hello-world.ts\n# Expected Output: Hello World\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx tsx hello-world.ts --version\n# Output: v1.0.0\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx tsx hello-world.ts --help # or -h\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx tsx hello-world.ts --wizard\n```\n\n----------------------------------------\n\nTITLE: Modifying platform workers to enable concurrent access\nDESCRIPTION: This change removes pool resizing in platform workers to enable concurrent access. This modification likely improves the performance and concurrency handling in worker pools.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_27\n\nLANGUAGE: markdown\nCODE:\n```\n- [#2835](https://github.com/Effect-TS/effect/pull/2835) [`5133ca9`](https://github.com/Effect-TS/effect/commit/5133ca9dc4b8da0e28951316da9ab55dfbe0fbb9) Thanks @tim-smart! - remove pool resizing in platform workers to enable concurrent access\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Query using Effect TS with MySQL\nDESCRIPTION: This snippet illustrates how to set up a MySQL database connection using Effect TS and execute a raw SQL INSERT statement. It retrieves the special results returned by MySQL, specifically for operations where the RETURNING clause is not supported. Dependencies include Effect TS and the SQL client for MySQL.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-mysql2/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Effect from \"effect/Effect\"\nimport * as SqlClient from \"@effect/sql/SqlClient\"\nimport * as MysqlClient from \"@effect/sql/MysqlClient\"\n\nconst DatabaseLive = MysqlClient.layer({\n  database: Config.succeed(\"database\"),\n  username: Config.succeed(\"root\"),\n  password: Config.succeed(Redacted.make(\"password\"))\n})\n\nconst program = Effect.gen(function* () {\n  const sql = yield* SqlClient.SqlClient\n\n  const result = yield* sql`INSERT INTO usernames VALUES (\"Bob\")`.raw\n\n  console.log(result)\n  /**\n   * ResultSetHeader {\n   *   fieldCount: 0,\n   *   affectedRows: 1,\n   *   insertId: 0,\n   *   info: '',\n   *   serverStatus: 2,\n   *   warningStatus: 0,\n   *   changedRows: 0\n   * }\n   */\n})\n\nprogram.pipe(Effect.provide(DatabaseLive), Effect.runPromise)\n```\n\n----------------------------------------\n\nTITLE: Using Subcommands with Parent Command Context in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a command that incorporates the 'minigitClone' subcommand into the 'minigit' command's command hierarchy using Command.withSubcommands.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/cli/README.md#2025-04-21_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nconst command = minigit.pipe(Command.withSubcommands([minigitClone]))\n//    ^? Command<\"minigit\", never, ..., ...>\n```\n\n----------------------------------------\n\nTITLE: Accessing HttpClient using Context.Tag in TypeScript\nDESCRIPTION: Demonstrates how to access an HttpClient instance using the Context.Tag after the removal of HttpClient.fetch. The FetchHttpClient layer is now used to provide the implementation.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FetchHttpClient, HttpClient } from \"@effect/platform\"\nimport { Effect } from \"effect\"\n\nEffect.gen(function* () {\n  const client = yield* HttpClient.HttpClient\n\n  // make a get request\n  yield* client.get(\"https://jsonplaceholder.typicode.com/todos/1\")\n}).pipe(\n  Effect.scoped,\n  // the fetch client has been moved to the `FetchHttpClient` module\n  Effect.provide(FetchHttpClient.layer)\n)\n```\n\n----------------------------------------\n\nTITLE: Enforcing Strict Object Validation with Effect/Schema\nDESCRIPTION: This snippet demonstrates how to enforce strict validation on an object schema using Effect/Schema.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst person = Schema.Struct({\n  name: Schema.String\n})\n\nSchema.decodeUnknownSync(person)(\n  {\n    name: \"bob dylan\",\n    extraKey: 61\n  },\n  { onExcessProperty: \"error\" }\n)\n// => throws ParseError\n```\n\n----------------------------------------\n\nTITLE: Defining Path Parameters with Template Strings in Effect Platform\nDESCRIPTION: Shows how to define path parameters using template strings and HttpApiSchema.param for dynamic route segments.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpApiEndpoint, HttpApiSchema } from \"@effect/platform\"\nimport { Schema } from \"effect\"\n\nconst User = Schema.Struct({\n  id: Schema.Number,\n  name: Schema.String,\n  createdAt: Schema.DateTimeUtc\n})\n\nconst idParam = HttpApiSchema.param(\"id\", Schema.NumberFromString)\n\nconst getUser = HttpApiEndpoint.get(\"getUser\")`/user/${idParam}`.addSuccess(\n  User\n)\n```\n\n----------------------------------------\n\nTITLE: Fixing Response Content Type for Text Schemas in OpenAPI Spec Generation\nDESCRIPTION: This snippet demonstrates the correction of response content type for text schemas from 'application/json' to 'text/plain' in the generated OpenAPI specification.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  HttpApi,\n  HttpApiEndpoint,\n  HttpApiGroup,\n  HttpApiSchema,\n  OpenApi\n} from \"@effect/platform\"\n\nconst api = HttpApi.make(\"api\").add(\n  HttpApiGroup.make(\"group\").add(\n    HttpApiEndpoint.get(\"get\", \"/\").addSuccess(HttpApiSchema.Text())\n  )\n)\n\nconst spec = OpenApi.fromApi(api)\n\nconsole.log(JSON.stringify(spec.paths, null, 2))\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket with Node Socket Constructor\nDESCRIPTION: Example of how to use the WebSocketConstructor service with Node implementation. This shows how to create a WebSocket connection to a localhost server and provide the necessary Node-specific implementation layer.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node/CHANGELOG.md#2025-04-21_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Socket from \"@effect/platform/Socket\"\nimport * as NodeSocket from \"@effect/platform-node/NodeSocket\"\nimport { Effect } from \"effect\"\n\nSocket.makeWebSocket(\"ws://localhost:8080\").pipe(\n  Effect.provide(NodeSocket.layerWebSocketConstructor) // use \"ws\" npm package\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in Effect TS platform\nDESCRIPTION: This snippet covers the updating of dependencies for `effect`, `@effect/platform`, and `@effect/platform-node-shared`. It includes the updated versions and commit hashes associated with the patch change.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: none\nCODE:\n```\n\"- Updated dependencies [[`01cee56`](https://github.com/Effect-TS/effect/commit/01cee560b58d94b24cc20e98083251b73e658b41), [`c2249ea`](https://github.com/Effect-TS/effect/commit/c2249ea13fd98ab7d9aa628787931356d8ec2860), [`1358aa5`](https://github.com/Effect-TS/effect/commit/1358aa5326eaa85ef13ee8d1fed0b4a4288ed3eb), [`1de3fe7`](https://github.com/Effect-TS/effect/commit/1de3fe7d1cbafd6391eaa38c2300b99e332cc2aa)]:\\n  - effect@3.11.2\\n  - @effect/platform@0.70.2\\n  - @effect/platform-node-shared@0.20.2\"\n```\n\n----------------------------------------\n\nTITLE: Adding Cookies to HTTP Responses in Effect Platform\nDESCRIPTION: Demonstrates how to add cookies to an HTTP response using the Effect platform's HTTP server module.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Http from \"@effect/platform/HttpServer\"\n\nHttp.response.empty().pipe(\n  Http.response.setCookies([\n    [\"name\", \"value\"],\n    [\"foo\", \"bar\", { httpOnly: true }]\n  ])\n)\n```\n\n----------------------------------------\n\nTITLE: Adding SkipIf Functionality in Effect-TS\nDESCRIPTION: This snippet introduces the `it.{method}.skipIf` functionality to the Effect-TS testing framework.  This allows skipping tests based on a conditional. It adds a method for conditionally skipping tests within the Effect-TS testing environment.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/vitest/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\n- [#3319](https://github.com/Effect-TS/effect/pull/3319) [`068e322`](https://github.com/Effect-TS/effect/commit/068e322ee1d3e110e82aa275359e5cd15c04ab81) Thanks @sukovanej! - Add `it.{method}.skipIf`.\n\n```\n\n----------------------------------------\n\nTITLE: Using Service Tags in TypeScript\nDESCRIPTION: Shows how to use the defined service tags to access methods and properties, as well as using the service within effects.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_125\n\nLANGUAGE: typescript\nCODE:\n```\nDemoTag.getNumbers()\nDemoTag.strings\n\nDemoTag.use((_) => _.getNumbers())\n```\n\n----------------------------------------\n\nTITLE: Updating Context Tag Creation in TypeScript\nDESCRIPTION: Demonstrates the new required string key for tags and renaming of 'Tag' to 'GenericTag'. This change improves debuggability by making all tags global by default.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/cli/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Context } from \"effect\"\ninterface Service {\n  readonly _: unique symbol\n}\nconst Service = Context.GenericTag<\n  Service,\n  {\n    number: Effect.Effect<never, never, number>\n  }\n>(\"Service\")\n```\n\n----------------------------------------\n\nTITLE: Handling Empty Native Enums in JSONSchema\nDESCRIPTION: Fix for JSONSchema generation that properly handles empty native enums by representing them as 'never' types instead of producing invalid schemas with empty anyOf arrays.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\nimport { JSONSchema, Schema } from \"effect\"\n\nenum Empty {}\n\nconst schema = Schema.Enums(Empty)\n\nconsole.log(JSON.stringify(JSONSchema.make(schema), null, 2))\n/*\n{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"$id\": \"/schemas/never\",\n  \"not\": {}\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Improving Return Types for DataFromSelf and Data in TypeScript\nDESCRIPTION: This snippet demonstrates the enhancement of return types for Schema.DataFromSelf and Schema.Data, making them more specific and reflective of the original schema structure.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst struct = Schema.Struct({ a: Schema.NumberFromString })\n\n//       ┌─── Schema.DataFromSelf<Schema.Struct<{ a: typeof Schema.NumberFromString; }>>\n//       ▼\nconst schema1 = Schema.DataFromSelf(struct)\n\n//       ┌─── Schema.Data<Schema.Struct<{ a: typeof Schema.NumberFromString; }>>\n//       ▼\nconst schema2 = Schema.Data(struct)\n```\n\n----------------------------------------\n\nTITLE: Using Option.orElseSome for Default Values in Effect-TS\nDESCRIPTION: Shows how to use Option.orElseSome to specify a default value for an Option. Similar to Option.getOrElse, but returns an Option instead of unwrapping the value, preserving the Option wrapper.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_145\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as O from \"effect/Option\"\nimport { pipe } from \"effect/Function\"\n\nassert.deepStrictEqual(\n  pipe(\n    O.none(),\n    O.orElseSome(() => \"b\")\n  ),\n  O.some(\"b\")\n)\nassert.deepStrictEqual(\n  pipe(\n    O.some(\"a\"),\n    O.orElseSome(() => \"b\")\n  ),\n  O.some(\"a\")\n)\n```\n\n----------------------------------------\n\nTITLE: Generating OpenAPI JSON Schema from Effect Schema\nDESCRIPTION: Demonstrates how to convert an Effect Schema object into an OpenAPI-compatible JSON schema. This example shows the conversion of a simple string schema using the OpenApiJsonSchema.make function.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_99\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OpenApiJsonSchema } from \"@effect/platform\"\nimport { Schema } from \"effect\"\n\nconst schema = Schema.String\n\n// Convert the schema to OpenAPI JSON Schema\nconst openApiSchema = OpenApiJsonSchema.make(schema)\n\nconsole.log(JSON.stringify(openApiSchema, null, 2))\n/*\nOutput:\n{\n  \"type\": \"string\"\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Defining a Fallback Value for Parsing Failures with Effect/Schema\nDESCRIPTION: This snippet demonstrates how to define a fallback value for parsing failures in Effect/Schema using the decodingFallback annotation.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Either, Schema } from \"effect\"\n\nconst schema = Schema.Number.annotations({\n  decodingFallback: () => Either.right(42)\n})\n\nconsole.log(Schema.decodeUnknownSync(schema)(5)) // => 5\nconsole.log(Schema.decodeUnknownSync(schema)(\"tuna\")) // => 42\n```\n\n----------------------------------------\n\nTITLE: Feature: Array of Values in URL Params\nDESCRIPTION: This snippet describes a minor change introducing support for an array of values in URL parameter schemas within the `/platform` module. This enhancement was introduced as part of a pull request and features an associated commit hash.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node/CHANGELOG.md#2025-04-21_snippet_9\n\nLANGUAGE: none\nCODE:\n```\n- [#3835](https://github.com/Effect-TS/effect/pull/3835) [`672bde5`](https://github.com/Effect-TS/effect/commit/672bde5bec51c7d6f9862828e6a654cb2cb6f93d) Thanks @tim-smart! - support array of values in /platform url param schemas\n```\n\n----------------------------------------\n\nTITLE: Update Dependencies for Patch 0.4.26\nDESCRIPTION: This patch updates dependencies for `effect`, `@effect/platform`, and `@effect/schema`. These dependency updates likely include bug fixes, performance improvements, and new features, ensuring smooth operation and compatibility within the Effect-TS environment.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql/CHANGELOG.md#2025-04-21_snippet_17\n\nLANGUAGE: Markdown\nCODE:\n```\n\"- Updated dependencies [[`639208e`](https://github.com/Effect-TS/effect/commit/639208eeb8a44622994f832bc2d45d06ab636bc8), [`6684b4c`](https://github.com/Effect-TS/effect/commit/6684b4c27d77a7fcc7af2e261a450edf971b62b5), [`6684b4c`](https://github.com/Effect-TS/effect/commit/6684b4c27d77a7fcc7af2e261a450edf971b62b5), [`6684b4c`](https://github.com/Effect-TS/effect/commit/6684b4c27d77a7fcc7af2e261a450edf971b62b5)]:\\n  - effect@3.5.2\\n  - @effect/platform@0.58.26\\n  - @effect/schema@0.68.22\"\n```\n\n----------------------------------------\n\nTITLE: Creating OpenAI Embeddings Service with Batch Processing in TypeScript\nDESCRIPTION: This snippet shows how to create an OpenAI Embeddings service that aggregates embedding requests within a 500ms window into a single batch. It uses the Effect framework and the OpenAI integration package.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/ai/openai/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Embeddings } from \"@effect/ai\"\nimport { OpenAiClient, OpenAiEmbeddings } from \"@effect/ai-openai\"\nimport { NodeHttpClient } from \"@effect/platform-node\"\nimport { Config, Effect, Layer } from \"effect\"\n\n// Create the OpenAI client\nconst OpenAi = OpenAiClient.layerConfig({\n  apiKey: Config.redacted(\"OPENAI_API_KEY\")\n}).pipe(Layer.provide(NodeHttpClient.layerUndici))\n\n// Create an embeddings service for the `text-embedding-3-large` model\nconst TextEmbeddingsLarge = OpenAiEmbeddings.layerDataLoader({\n  model: \"text-embedding-3-large\",\n  window: \"500 millis\",\n  maxBatchSize: 2048\n}).pipe(Layer.provide(OpenAi))\n\n// Use the generic `Embeddings` service interface in your program\nconst program = Effect.gen(function* () {\n  const embeddings = yield* Embeddings.Embeddings\n  const result = yield* embeddings.embed(\"The input to embed\")\n})\n\n// Provide the specific implementation to use\nprogram.pipe(Effect.provide(TextEmbeddingsLarge), Effect.runPromise)\n```\n\n----------------------------------------\n\nTITLE: Using FiberRef as a subtype of Effect in TypeScript\nDESCRIPTION: Example showing how FiberRef is now a subtype of Effect, allowing direct use in yield expressions without explicit FiberRef.get calls.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_88\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, FiberRef } from \"effect\"\n\nEffect.gen(function* () {\n  const fiberRef = yield* FiberRef.make(\"value\")\n\n  const before = yield* FiberRef.get(fiberRef)\n  const after = yield* fiberRef\n})\n```\n\n----------------------------------------\n\nTITLE: Handling HttpClientResponse with Explicit Scoping in TypeScript\nDESCRIPTION: Demonstrates how to use HttpClientResponse methods directly with explicit scoping after the removal of scoped HttpClientResponse helpers.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FetchHttpClient, HttpClient } from \"@effect/platform\"\nimport { Effect } from \"effect\"\n\nEffect.gen(function* () {\n  const client = yield* HttpClient.HttpClient\n\n  yield* client.get(\"https://jsonplaceholder.typicode.com/todos/1\").pipe(\n    Effect.flatMap((response) => response.json),\n    Effect.scoped // supply the `Scope`\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Allow Effectful SQL Statement Transformers\nDESCRIPTION: This change allows SQL Statement transformers to be effectful, enabling more complex and asynchronous transformations of SQL statements within the Effect-TS ecosystem. This enhancement provides greater flexibility in manipulating SQL queries, allowing operations that require effects, such as database lookups or external API calls, to be integrated into the transformation process.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n\"- [#3387](https://github.com/Effect-TS/effect/pull/3387) [`42d0706`](https://github.com/Effect-TS/effect/commit/42d07067e9823ceb8977eff9672d9a290941dad5) Thanks @tim-smart! - allow sql Statement transformers to be effectful\"\n```\n\n----------------------------------------\n\nTITLE: Correcting Union Output Order in JSONSchema Generation for TypeScript\nDESCRIPTION: Shows the change in output order when generating a JSON Schema from a Union that includes literals and primitive schemas, ensuring literals come before other types.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\nimport { JSONSchema, Schema } from \"effect\"\n\nconst schema = Schema.Union(Schema.Literal(1, 2), Schema.String)\n\nconsole.log(JSON.stringify(JSONSchema.make(schema), null, 2))\n/*\n{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"anyOf\": [\n    {\n      \"type\": \"string\"\n    },\n    {\n      \"enum\": [\n        1,\n        2\n      ]\n    }\n  ]\n}\n*/\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { JSONSchema, Schema } from \"effect\"\n\nconst schema = Schema.Union(Schema.Literal(1, 2), Schema.String)\n\nconsole.log(JSON.stringify(JSONSchema.make(schema), null, 2))\n/*\n{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"anyOf\": [\n    {\n      \"enum\": [\n        1,\n        2\n      ]\n    },\n    {\n      \"type\": \"string\"\n    }\n  ]\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Improving Return Type for Schema.parseJson in TypeScript\nDESCRIPTION: This example demonstrates the enhancement of return type accuracy for Schema.parseJson, providing more detailed type information for the parsed JSON schema.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\n//      ┌─── Schema.transform<Schema.SchemaClass<unknown, string, never>, Schema.Struct<{ a: typeof Schema.NumberFromString; }>>\n//      ▼\nconst schema = Schema.parseJson(\n  Schema.Struct({\n    a: Schema.NumberFromString\n  })\n)\n\n//      ┌─── Schema.Struct<{ a: typeof Schema.NumberFromString; }>\n//      ▼\nschema.to\n```\n\n----------------------------------------\n\nTITLE: Using Effect-TS SQL Client with Queries\nDESCRIPTION: Demonstrates how to utilize the Effect-TS SQL client to perform a basic SQL select operation. It requires the `@effect/sql` package as a dependency.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-pg/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Sql from \"@effect/sql\"\nimport { Effect } from \"effect\"\n\nEffect.gen(function* () {\n  const sql = yield* Sql.client.Client\n  yield* sql`SELECT * FROM users`\n})\n```\n\n----------------------------------------\n\nTITLE: HTTP Server Helper Function for Node.js\nDESCRIPTION: Helper function to simplify server setup and initialization for Node.js runtime. Encapsulates common boilerplate code for server configuration.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_72\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { HttpPlatform, HttpServer } from \"@effect/platform\"\nimport { NodeHttpServer, NodeRuntime } from \"@effect/platform-node\"\nimport { Layer } from \"effect\"\nimport { createServer } from \"node:http\"\n\nexport const listen = (\n  app: Layer.Layer<\n    never,\n    never,\n    HttpPlatform.HttpPlatform | HttpServer.HttpServer\n  >,\n  port: number\n) =>\n  NodeRuntime.runMain(\n    Layer.launch(\n      Layer.provide(\n        app,\n        NodeHttpServer.layer(() => createServer(), { port })\n      )\n    )\n  )\n```\n\n----------------------------------------\n\nTITLE: Class-based Tag Creation in Effect-TS\nDESCRIPTION: This snippet demonstrates the new recommended way of constructing tags using a class syntax, which creates an opaque identifier at the type level and uses the class name as the key.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node-shared/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Context } from \"effect\"\nclass Service extends Context.Tag(\"Service\")<\n  Service,\n  {\n    number: Effect.Effect<never, never, number>\n  }\n>() {}\n\nconst program = Effect.flatMap(Service, ({ number }) => number).pipe(\n  Effect.flatMap((_) => Effect.log(`number: ${_}`))\n)\n```\n\n----------------------------------------\n\nTITLE: Using Deferred as a subtype of Effect in TypeScript\nDESCRIPTION: Example showing how Deferred is now a subtype of Effect, allowing direct use in yield expressions without explicit await calls.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_79\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Deferred } from \"effect\"\n\nEffect.gen(function* () {\n  const deferred = yield* Deferred.make<string>()\n\n  const before = yield* Deferred.await(deferred)\n  const after = yield* deferred\n})\n```\n\n----------------------------------------\n\nTITLE: Creating an Opaque Type for API Group - TypeScript\nDESCRIPTION: This snippet shows how to create an opaque class extending HttpApiGroup. It allows users to define additional endpoints or methods while maintaining a structured grouping of related endpoints for better organization.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// Create an opaque class extending HttpApiGroup\nclass UsersGroup extends HttpApiGroup.make(\"users\").add(getUsers).add(getUser) {\n  // Additional endpoints or methods can be added here\n}\n```\n\n----------------------------------------\n\nTITLE: Refactoring Effect Unification in TypeScript\nDESCRIPTION: Example of replacing Effect.unified and Effect.unifiedFn with the new Unify.unify approach for handling Effect variations.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_129\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect } from \"effect\"\n\nconst effect = Effect.unified(\n  Math.random() > 0.5 ? Effect.succeed(\"OK\") : Effect.fail(\"NO\")\n)\nconst effectFn = Effect.unifiedFn((n: number) =>\n  Math.random() > 0.5 ? Effect.succeed(\"OK\") : Effect.fail(\"NO\")\n)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Unify } from \"effect\"\n\nconst effect = Unify.unify(\n  Math.random() > 0.5 ? Effect.succeed(\"OK\") : Effect.fail(\"NO\")\n)\nconst effectFn = Unify.unify((n: number) =>\n  Math.random() > 0.5 ? Effect.succeed(\"OK\") : Effect.fail(\"NO\")\n)\n```\n\n----------------------------------------\n\nTITLE: Improving UnknownException Error Messages in Effect (TypeScript)\nDESCRIPTION: Enhances UnknownException error messages to include the name of the Effect API that created the error, providing more context for debugging.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect } from \"effect\"\n\nEffect.tryPromise(() =>\n  Promise.reject(new Error(\"The operation failed\"))\n).pipe(Effect.catchAllCause(Effect.logError), Effect.runFork)\n\n// timestamp=2025-01-21T00:41:03.403Z level=ERROR fiber=#0 cause=\"UnknownException: An unknown error occurred in Effect.tryPromise\n//     at fail (.../effect/packages/effect/src/internal/core-effect.ts:1654:19)\n//     at <anonymous> (.../effect/packages/effect/src/internal/core-effect.ts:1674:26) {\n//   [cause]: Error: The operation failed\n//       at <anonymous> (.../effect/scratchpad/error.ts:4:24)\n//       at .../effect/packages/effect/src/internal/core-effect.ts:1671:7\n// }\"\n```\n\n----------------------------------------\n\nTITLE: Updating Effect Dependency in TypeScript\nDESCRIPTION: This snippet demonstrates updating the 'effect' dependency to a caret version.  This ensures compatibility with a range of 'effect' versions rather than a specific one. The update is part of a patch change to address dependency management.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/printer-ansi/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"- [`d987daa`](https://github.com/Effect-TS/effect/commit/d987daafaddd43b6ade74916a08236c19ea0a9fa) Thanks [@mikearnaldi](https://github.com/mikearnaldi)! - Switch effect dependency to caret\"\n```\n\n----------------------------------------\n\nTITLE: Using GenericTag for Services\nDESCRIPTION: New required string key syntax for service tags using Context.GenericTag\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/experimental/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Context } from \"effect\"\ninterface Service {\n  readonly _: unique symbol\n}\nconst Service = Context.GenericTag<\n  Service,\n  {\n    number: Effect.Effect<never, never, number>\n  }\n>(\"Service\")\n```\n\n----------------------------------------\n\nTITLE: Dialect-Specific Query Execution in TypeScript\nDESCRIPTION: Demonstrates the onDialect API for executing different queries based on the specific SQL dialect being used, supporting multiple database systems\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-sqlite-bun/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Sql from \"@effect/sql\"\nimport { Effect } from \"effect\"\n\nEffect.gen(function* () {\n  const sql = yield* Sql.client.Client\n  yield* sql.onDialect({\n    sqlite: () => sql`SELECT * FROM sqlite_master`,\n    mysql: () => sql`SHOW TABLES`,\n    mssql: () => sql`SELECT * FROM sys.tables`,\n    pg: () => sql`SELECT * FROM pg_catalog.pg_tables`\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Catchall Schema for Additional Properties with Zod\nDESCRIPTION: This snippet shows how to define a catchall schema for additional properties using Zod.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nconst person = z\n  .object({\n    name: z.string()\n  })\n  .catchall(z.string())\n\nperson.parse({\n  name: \"bob dylan\",\n  validExtraKey: \"foo\" // works fine\n})\n\nperson.parse({\n  name: \"bob dylan\",\n  validExtraKey: false // fails\n})\n// => throws ZodError\n```\n\n----------------------------------------\n\nTITLE: Schema Definition in TypeScript\nDESCRIPTION: Example showing schema definition with JSON schema generation for a partial struct schema with number properties.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { JSONSchema, Schema } from \"effect\"\n\nconst schema = Schema.partial(\n  Schema.Struct(\n    { foo: Schema.Number },\n    {\n      key: Schema.String,\n      value: Schema.Number\n    }\n  )\n)\n\nconsole.log(JSON.stringify(JSONSchema.make(schema), null, 2))\n```\n\n----------------------------------------\n\nTITLE: Testing RPC API with curl\nDESCRIPTION: Provides a curl command to test the operational status of the RPC API by sending a POST request to the /rpc endpoint with a JSON payload for the UserList operation.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/rpc/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:3000/rpc \\\n     -H \"Content-Type: application/json\" \\\n     -d $'{\"_tag\": \"Request\", \"id\": \"123\", \"tag\": \"UserList\", \"payload\": {}, \"traceId\": \"traceId\", \"spanId\": \"spanId\", \"sampled\": true, \"headers\": {} }\\n'\n```\n\n----------------------------------------\n\nTITLE: Initializing Record Schema with JSON Schema Generation (TypeScript)\nDESCRIPTION: Demonstrates schema creation for a record with string keys and number values, highlighting the evolution of JSON schema generation with improved additionalProperties representation\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { JSONSchema, Schema } from \"effect\"\n\nconst schema = Schema.Record({ key: Schema.String, value: Schema.Number })\n\nconsole.log(JSON.stringify(JSONSchema.make(schema), null, 2))\n```\n\n----------------------------------------\n\nTITLE: Enhancing Key Type Narrowing in TagClass and ReferenceClass\nDESCRIPTION: This snippet demonstrates the enhancements made to the key type narrowing in TagClass and ReferenceClass. It provides an example with three classes, showing how their key properties now correctly retain specific string values. This improvement helps in type safety when working with service keys inside the Effect.Service context.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Context, Effect } from \"effect\"\n\n// -------------------------------------------------------------------------------------\n// `key` field\n// -------------------------------------------------------------------------------------\n\nclass A extends Effect.Service<A>()(\"A\", { succeed: { a: \"value\" } }) {}\n\n// $ExpectType \"A\"\nA.key\n\nclass B extends Context.Tag(\"B\")<B, { a: \"value\" }>() {}\n\n// $ExpectType \"B\"\nB.key\n\nclass C extends Context.Reference<C>()(\"C\", { defaultValue: () => 0 }) {}\n\n// $ExpectType \"C\"\nC.key\n```\n\n----------------------------------------\n\nTITLE: Enhancing formatUnknown Function in effect-ts Schema (TypeScript)\nDESCRIPTION: This code snippet shows the enhancement of the `formatUnknown` function in the effect-ts Schema to handle various types, such as iterables and classes, with improved error reporting. The main change is a more informative display of mismatched type details in exceptions.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst schema = Schema.Array(Schema.Number)\n\nSchema.decodeUnknownSync(schema)(new Set([1, 2]))\n// throws Expected ReadonlyArray<number>, actual {}\n\nclass A {\n  constructor(readonly a: number) {}\n}\n\nSchema.decodeUnknownSync(schema)(new A(1))\n// throws Expected ReadonlyArray<number>, actual {\"a\":1}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst schema = Schema.Array(Schema.Number)\n\nSchema.decodeUnknownSync(schema)(new Set([1, 2]))\n// throws Expected ReadonlyArray<number>, actual Set([1,2])\n\nclass A {\n  constructor(readonly a: number) {}\n}\n\nSchema.decodeUnknownSync(schema)(new A(1))\n// throws Expected ReadonlyArray<number>, actual A({\"a\":1})\n```\n\n----------------------------------------\n\nTITLE: Refactoring HTTP Client Import Structure for Effect-TS (TypeScript)\nDESCRIPTION: This code snippet demonstrates the refactoring of the HTTP client import structure within the Effect-TS project. The change involves transitioning from using the previous re-exported module to a direct import of the necessary modules, which improves clarity and functionality in using the HTTP client. It also maintains best practices by effectively managing module dependencies.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-browser/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpClient } from \"@effect/platform\"\n\nHttpClient.request.get(\"/\").pipe(HttpClient.client.fetchOk)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpClient, HttpClientRequest } from \"@effect/platform\"\n\nHttpClientRequest.get(\"/\").pipe(HttpClient.fetchOk)\n```\n\n----------------------------------------\n\nTITLE: Schema Usage Example in TypeScript\nDESCRIPTION: Example showing incorrect usage of Schema withDecodingDefault and withConstructorDefault methods that was fixed in an update.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst schema = Schema.Struct({\n  a: Schema.optional(Schema.String).pipe(\n    Schema.withConstructorDefault(() => undefined), // this is invalidated by the following call to `withDecodingDefault`\n    Schema.withDecodingDefault(() => \"\")\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in Effect TS platform\nDESCRIPTION: This snippet details the updating of dependencies for `@effect/platform` and `@effect/platform-node-shared` within a patch change. It provides the updated version numbers and associated commit hashes.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: none\nCODE:\n```\n\"- Updated dependencies [[`7044730`](https://github.com/Effect-TS/effect/commit/70447306be1aeeb7d87c230b2a96ec87b993ede9)]:\\n  - @effect/platform@0.70.3\\n  - @effect/platform-node-shared@0.20.3\"\n```\n\n----------------------------------------\n\nTITLE: Using satisfies Operator in TypeScript\nDESCRIPTION: Demonstrates the use of a new functional analogue of the 'satisfies' operator for localizing type errors in pipe chains.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_134\n\nLANGUAGE: typescript\nCODE:\n```\nimport { satisfies } from \"effect/Function\"\n\nconst test1 = satisfies<number>()(5 as const)\n// ^? const test: 5\n\n// @ts-expect-error\nconst test2 = satisfies<string>()(5)\n// ^? Argument of type 'number' is not assignable to parameter of type 'string'\n```\n\n----------------------------------------\n\nTITLE: Adding Support for Infinity in Duration Schema (TypeScript)\nDESCRIPTION: Updates the Duration schema to support encoding Duration.infinity, which is now encoded as [ -1, 0 ].\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Duration, Schema } from \"effect\"\n\nconsole.log(Schema.encodeUnknownSync(Schema.Duration)(Duration.infinity))\n// Output: [ -1, 0 ]\n```\n\n----------------------------------------\n\nTITLE: Converting Optional Fields to Required in Zod\nDESCRIPTION: This snippet illustrates how to convert optional fields back to required fields in an object schema using Zod.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = z\n  .object({\n    email: z.string(),\n    username: z.string()\n  })\n  .partial() // Makes all fields optional\n\nconst requiredUser = user.required() // Converts all fields back to required\n```\n\n----------------------------------------\n\nTITLE: Adding Refinement Support to Schema.omit (TypeScript)\nDESCRIPTION: This change adds support for refinements to the `Schema.omit` function. The enhancement allows for the omission of schema properties with conditions applied via filters, adjusting the ast representation to reflect the refined schema accurately.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst schema = Schema.Struct({\n  a: Schema.String,\n  b: Schema.String\n})\n\nconst omitted = schema.pipe(\n  Schema.filter(() => true),\n  Schema.omit(\"a\")\n)\n\nconsole.log(String(omitted.ast))\n// {} ❌\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst schema = Schema.Struct({\n  a: Schema.String,\n  b: Schema.String\n})\n\nconst omitted = schema.pipe(\n  Schema.filter(() => true),\n  Schema.omit(\"a\")\n)\n\nconsole.log(String(omitted.ast))\n// { readonly b: string }\n```\n\n----------------------------------------\n\nTITLE: Updating dependencies with Effect-TS\nDESCRIPTION: This snippet represents the action of updating dependencies within the Effect-TS ecosystem. It shows how different packages such as effect, @effect/platform, and @effect/sql are updated to specific versions.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-sqlite-node/CHANGELOG.md#2025-04-21_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Class-based Service Tag Definition\nDESCRIPTION: New recommended approach using class extension of Context.Tag with automatic opaque identifier\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/experimental/CHANGELOG.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Context } from \"effect\"\nclass Service extends Context.Tag(\"Service\")<\n  Service,\n  {\n    number: Effect.Effect<never, never, number>\n  }\n>() {}\n\nconst program = Effect.flatMap(Service, ({ number }) => number).pipe(\n  Effect.flatMap((_) => Effect.log(`number: ${_}`))\n)\n```\n\n----------------------------------------\n\nTITLE: Representing Nullable Properties in OpenAPI Schema\nDESCRIPTION: Demonstrates how OpenAPI schemas use the nullable property to indicate that a value can be null, while JSON schemas use an anyOf structure with multiple type options.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_102\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OpenApiJsonSchema } from \"@effect/platform\"\nimport { JSONSchema, Schema } from \"effect\"\n\nconst schema = Schema.NullOr(Schema.String)\n\nconst openApiSchema = OpenApiJsonSchema.make(schema)\nconst jsonSchema = JSONSchema.make(schema)\n\nconsole.log(JSON.stringify(openApiSchema, null, 2))\n/*\nOutput:\n{\n  \"type\": \"string\",\n  \"nullable\": true\n}\n*/\n\nconsole.log(JSON.stringify(jsonSchema, null, 2))\n/*\nOutput:\n{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"anyOf\": [\n    {\n      \"type\": \"string\"\n    },\n    {\n      \"type\": \"null\"\n    }\n  ]\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Exporting Field Type for Custom Constraints in effect-ts (TypeScript)\nDESCRIPTION: This snippet demonstrates the export of the `Field` type from the effect-ts Schema module, which is useful for defining schemas with custom constraints on struct fields. The example shows how to omit certain fields while utilizing the newly exported type.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst f = <Fields extends Record<\"a\" | \"b\", Schema.Struct.Field>>(\n  schema: Schema.Struct<Fields>\n) => {\n  return schema.omit(\"a\")\n}\n\n//      ┌─── Schema.Struct<{ b: typeof Schema.Number; }>\n//      ▼\nconst result = f(Schema.Struct({ a: Schema.String, b: Schema.Number }))\n```\n\n----------------------------------------\n\nTITLE: Restructure HTTP Platform Modules in Effect TS\nDESCRIPTION: This snippet shows the restructuring of the HTTP platform modules in Effect TS to use flattened modules. Instead of using re-exports, the modules are now directly imported and used. This changes how HTTP client requests are constructed and executed, simplifying the import structure.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node/CHANGELOG.md#2025-04-21_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\n\"// Before:\n// import { HttpClient } from \\\"@effect/platform\\\"\n// HttpClient.request.get(\"/\").pipe(HttpClient.client.fetchOk)\n\n// After:\n// import { HttpClient, HttpClientRequest } from \\\"@effect/platform\\\"\n// HttpClientRequest.get(\"/\").pipe(HttpClient.fetchOk)\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Tracer in Effect (TypeScript)\nDESCRIPTION: Demonstrates how to use the Effect.withTracerEnabled API to disable tracing for a specific effect. This allows for fine-grained control over which spans are registered with the tracer.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_121\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect } from \"effect\"\n\nEffect.succeed(42).pipe(\n  Effect.withSpan(\"my-span\"),\n  // the span will not be registered with the tracer\n  Effect.withTracerEnabled(false)\n)\n```\n\n----------------------------------------\n\nTITLE: Modifying URL Properties with Effect's URL Setters\nDESCRIPTION: Demonstrates how to use pipe and URL setters to modify various properties of a URL while maintaining immutability. This example changes the protocol, host, and port of a URL object.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_95\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Url } from \"@effect/platform\"\nimport { pipe } from \"effect\"\n\nconst myUrl = new URL(\"https://example.com\")\n\n// Changing protocol, host, and port\nconst newUrl = pipe(\n  myUrl,\n  Url.setProtocol(\"http:\"),\n  Url.setHost(\"google.com\"),\n  Url.setPort(\"8080\")\n)\n\nconsole.log(\"Original:\", myUrl.toString())\n// Output: Original: https://example.com/\n\nconsole.log(\"New:\", newUrl.toString())\n// Output: New: http://google.com:8080/\n```\n\n----------------------------------------\n\nTITLE: Fixing Schema.TemplateLiteralParser Runtime Error in TypeScript\nDESCRIPTION: Resolves a runtime error in Schema.TemplateLiteralParser that was causing a TypeError. The fix allows proper parsing of template literals.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_65\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst schema = Schema.TemplateLiteralParser(\"a\", \"b\")\n\nconsole.log(Schema.decodeUnknownSync(schema)(\"ab\"))\n// Output: [ 'a', 'b' ]\n```\n\n----------------------------------------\n\nTITLE: Enforcing Strict Object Validation with Zod\nDESCRIPTION: This snippet shows how to enforce strict validation on an object schema using the .strict() method in Zod.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nconst person = z\n  .object({\n    name: z.string()\n  })\n  .strict()\n\nperson.parse({\n  name: \"bob dylan\",\n  extraKey: 61\n})\n// => throws ZodError\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry in Markdown\nDESCRIPTION: A changelog entry showing dependency updates for effect and @effect/sql packages, including multiple commit references with links.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-sqlite-wasm/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [[`1b5f0c7`](https://github.com/Effect-TS/effect/commit/1b5f0c77e7fd477a0026071e82129a948227f4b3), [`d50a652`](https://github.com/Effect-TS/effect/commit/d50a652479f4d1d64f48da05c79fa847e6e51548), [`9a3bd47`](https://github.com/Effect-TS/effect/commit/9a3bd47ebd0750c7e498162734f6d21895de0cb2), [`1499974`](https://github.com/Effect-TS/effect/commit/14999741d2e19c1747f6a7e19d68977f6429cdb8), [`be9d025`](https://github.com/Effect-TS/effect/commit/be9d025e42355260ace02dd135851a8935a4deba), [`78b767c`](https://github.com/Effect-TS/effect/commit/78b767c2b1625186e17131761a0edbac25d21850), [`1499974`](https://github.com/Effect-TS/effect/commit/14999741d2e19c1747f6a7e19d68977f6429cdb8), [`1b5f0c7`](https://github.com/Effect-TS/effect/commit/1b5f0c77e7fd477a0026071e82129a948227f4b3), [`5c2b561`](https://github.com/Effect-TS/effect/commit/5c2b5614f583b88784ed68126ae939832fb3c092), [`a18f594`](https://github.com/Effect-TS/effect/commit/a18f5948f1439a147232448b2c443472fda0eceb), [`1499974`](https://github.com/Effect-TS/effect/commit/14999741d2e19c1747f6a7e19d68977f6429cdb8), [`2f96d93`](https://github.com/Effect-TS/effect/commit/2f96d938b90f8c19377583279e3c7afd9b509c50), [`5a2314b`](https://github.com/Effect-TS/effect/commit/5a2314b70ec79c2c02b51cef45a5ddec8327daa1), [`271b79f`](https://github.com/Effect-TS/effect/commit/271b79fc0b66a6c11e07a8779ff8800493a7eac2), [`1b5f0c7`](https://github.com/Effect-TS/effect/commit/1b5f0c77e7fd477a0026071e82129a948227f4b3), [`2fb7d9c`](https://github.com/Effect-TS/effect/commit/2fb7d9ca15037ff62a578bb9fe5732da5f4f317d), [`53d1c2a`](https://github.com/Effect-TS/effect/commit/53d1c2a77559081fbb89667e343346375c6d6650), [`e7e1bbe`](https://github.com/Effect-TS/effect/commit/e7e1bbe68486fdf31c8f84b0880522d39adcaad3), [`10c169e`](https://github.com/Effect-TS/effect/commit/10c169eadc874e91b4defca3f467b4e6a50fd8f3), [`6424181`](https://github.com/Effect-TS/effect/commit/64241815fe6a939e91e6947253e7dceea1306aa8)]]:\n  - effect@3.0.0\n  - @effect/sql@0.1.0\n```\n\n----------------------------------------\n\nTITLE: Class Inheritance Fix in TypeScript\nDESCRIPTION: Shows the fix for being able to override base class methods in extended classes by removing Omit from the Class interface definition.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_72\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nclass Base extends Schema.Class<Base>(\"Base\")({\n  a: Schema.String\n}) {\n  f() {\n    console.log(\"base\")\n  }\n}\n\nclass Extended extends Base.extend<Extended>(\"Extended\")({}) {\n  // Class '{ readonly a: string; } & Omit<Base, \"a\">}' defines instance member property 'f',\n  // but extended class 'Extended' defines it as instance member function.ts(2425)\n  // @ts-expect-error\n  override f() {\n    console.log(\"extended\")\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nclass Base extends Schema.Class<Base>(\"Base\")({\n  a: Schema.String\n}) {\n  f() {\n    console.log(\"base\")\n  }\n}\n\nclass Extended extends Base.extend<Extended>(\"Extended\")({}) {\n  // ok\n  override f() {\n    console.log(\"extended\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying CLI Application Help in Shell\nDESCRIPTION: This command shows how to access the help documentation for the CLI application using the '--help' flag.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/cli/README.md#2025-04-21_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nnpx tsx minigit.ts --help\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Schema NumberFromString Error Message Improvement\nDESCRIPTION: Shows how error messages for invalid Schema transformations have been improved to be more descriptive and helpful.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nSchema.decodeUnknownSync(Schema.NumberFromString)(\"a\")\n/*\nthrows:\nParseError: NumberFromString\n└─ Transformation process failure\n   └─ Unable to decode \"a\" into a number\n*/\n```\n\n----------------------------------------\n\nTITLE: Initializing SQL Client with Generic Query\nDESCRIPTION: Demonstrates basic SQL client initialization and executing a generic SELECT query using Effect's functional programming approach\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-sqlite-wasm/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Sql from \"@effect/sql\"\nimport { Effect } from \"effect\"\n\nEffect.gen(function* () {\n  const sql = yield* Sql.client.Client\n  yield* sql`SELECT * FROM users`\n})\n```\n\n----------------------------------------\n\nTITLE: Using Match.tag with Literals without as const in TypeScript\nDESCRIPTION: Demonstrates the improved functionality where Match.tag and Match.withReturnType can use literals without requiring the 'as const' assertion.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Handling Additional Properties with Effect/Schema\nDESCRIPTION: This snippet demonstrates how to handle additional properties that are not defined in an Effect/Schema object schema by setting the onExcessProperty option.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst person = Schema.Struct({\n  name: Schema.String\n})\n\nSchema.decodeUnknownSync(person)(\n  {\n    name: \"bob dylan\",\n    extraKey: 61\n  },\n  { onExcessProperty: \"preserve\" }\n)\n// => { name: \"bob dylan\", extraKey: 61 }\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Queries with MySQL Client Example\nDESCRIPTION: Example showing how to execute raw SQL queries with the underlying SQL client, particularly useful when the SQL client returns special results for certain query types like MySQL's ResultSetHeader.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-sqlite-node/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Effect from \"effect/Effect\"\nimport * as SqlClient from \"@effect/sql/SqlClient\"\nimport * as MysqlClient from \"@effect/sql/MysqlClient\"\n\nconst DatabaseLive = MysqlClient.layer({\n  database: Config.succeed(\"database\"),\n  username: Config.succeed(\"root\"),\n  password: Config.succeed(Redacted.make(\"password\"))\n})\n\nconst program = Effect.gen(function* () {\n  const sql = yield* SqlClient.SqlClient\n\n  const result = yield* sql`INSERT INTO usernames VALUES (\"Bob\")`.raw\n\n  console.log(result)\n  /**\n   * ResultSetHeader {\n   *   fieldCount: 0,\n   *   affectedRows: 1,\n   *   insertId: 0,\n   *   info: '',\n   *   serverStatus: 2,\n   *   warningStatus: 0,\n   *   changedRows: 0\n   * }\n   */\n})\n\nprogram.pipe(Effect.provide(DatabaseLive), Effect.runPromise)\n```\n\n----------------------------------------\n\nTITLE: Extending Schema Array Filter Support\nDESCRIPTION: Demonstrates new support for array filters like minItems, maxItems, and itemsCount on array-type schemas including NonEmptyArray.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\n// Previously, this would have caused an error\nconst schema = Schema.NonEmptyArray(Schema.String).pipe(Schema.maxItems(2))\n```\n\n----------------------------------------\n\nTITLE: Replacing HttpApi.empty with HttpApi.make - TypeScript\nDESCRIPTION: This code snippet demonstrates the change from using 'HttpApi.empty' to 'HttpApi.make' for creating API instances, enhancing the management of multiple API instances within HttpApiGroups.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpApi } from \"@effect/platform\"\n\n// Before\nclass Api extends HttpApi.empty.add(...) {}\n\n// After\nclass Api extends HttpApi.make(\"api\").add(...) {}\n```\n\n----------------------------------------\n\nTITLE: Version Numbers and Changes\nDESCRIPTION: Markdown formatted changelog entries showing version updates and changes across multiple releases of @effect/platform-node package\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @effect/platform-node\n\n## 0.76.21\n\n### Patch Changes\n\n- [#4758](https://github.com/Effect-TS/effect/pull/4758) [`b5ad11e`](https://github.com/Effect-TS/effect/commit/b5ad11e511424c6d5c32e34e7ee9d04f0110617d) Thanks @tim-smart! - add child_process workers to platform-node\n\n- Updated dependencies [[`e536127`](https://github.com/Effect-TS/effect/commit/e536127c1e6f2fb3a542c73ae919435a629a346b), [`b5ad11e`](https://github.com/Effect-TS/effect/commit/b5ad11e511424c6d5c32e34e7ee9d04f0110617d)]:\n  - effect@3.14.11\n  - @effect/rpc@0.55.16\n  - @effect/cluster@0.29.21\n  - @effect/platform@0.80.11\n  - @effect/platform-node-shared@0.30.21\n  - @effect/sql@0.33.11\n```\n\n----------------------------------------\n\nTITLE: Merging Refinement Fragments in JSONSchema Instead of Overwriting in TypeScript\nDESCRIPTION: Demonstrates how JSONSchema handling was improved to merge refinement fragments instead of just overwriting them. This preserves all pattern constraints in the schema.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\nimport { JSONSchema, Schema } from \"effect\"\n\nexport const schema = Schema.String.pipe(\n  Schema.startsWith(\"a\"), // <= overwritten!\n  Schema.endsWith(\"c\")\n)\n\nconsole.log(JSON.stringify(JSONSchema.make(schema), null, 2))\n/*\n{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"string\",\n  \"description\": \"a string ending with \\\"c\\\"\",\n  \"pattern\": \"^.*c$\" // <= overwritten!\n}\n*/\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { JSONSchema, Schema } from \"effect\"\n\nexport const schema = Schema.String.pipe(\n  Schema.startsWith(\"a\"), // <= preserved!\n  Schema.endsWith(\"c\")\n)\n\nconsole.log(JSON.stringify(JSONSchema.make(schema), null, 2))\n/*\n{\n  \"type\": \"string\",\n  \"description\": \"a string ending with \\\"c\\\"\",\n  \"pattern\": \"^.*c$\",\n  \"allOf\": [\n    {\n      \"pattern\": \"^a\" // <= preserved!\n    }\n  ],\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Accessing Service Constants in Effect-TS\nDESCRIPTION: This code demonstrates how to access constants in a service using Effect.serviceConstants, allowing direct access to any constant in the service, not just effects.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node-shared/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Context } from \"effect\"\n\nclass NumberRepo extends Context.TagClass(\"NumberRepo\")<\n  NumberRepo,\n  {\n    readonly numbers: Array<number>\n  }\n>() {\n  static numbers = Effect.serviceConstants(NumberRepo).numbers\n}\n```\n\n----------------------------------------\n\nTITLE: Next Power of 2 Implementation in Effect-TS Number Module\nDESCRIPTION: Example of using the Number.nextPow2 function which returns the next power of 2 from a given number. This utility function is useful for various algorithms and data structures that require power-of-2 sizes.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_143\n\nLANGUAGE: typescript\nCODE:\n```\nimport { nextPow2 } from \"effect/Number\"\n\nassert.deepStrictEqual(nextPow2(5), 8)\nassert.deepStrictEqual(nextPow2(17), 32)\n```\n\n----------------------------------------\n\nTITLE: Enforcing Finite Durations in DurationFromNanos Schema (TypeScript)\nDESCRIPTION: Updates the DurationFromNanos schema to enforce finite durations by adding a filter to validate that the duration is finite.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nDurationFromSelf\n.pipe(\n  filter((duration) => duration_.isFinite(duration), {\n    description: \"a finite duration\"\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Data Struct Type Changes in TypeScript\nDESCRIPTION: Example showing how Data.struct now returns Readonly variants at the type level while maintaining the same functionality at the value level.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_139\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Data } from \"effect\"\n\nconst obj = Data.struct({\n  a: 0,\n  b: 1\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Service Tag with Context\nDESCRIPTION: Updated syntax for creating service tags requiring a string key and using Context.Tag\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/experimental/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Context } from \"effect\"\ninterface Service {\n  readonly _: unique symbol\n}\nconst Service = Context.Tag<\n  Service,\n  {\n    number: Effect.Effect<never, never, number>\n  }\n>() \n```\n\n----------------------------------------\n\nTITLE: Updating Duration Encoding to Tagged Union Format\nDESCRIPTION: This snippet introduces a new tagged union format for encoding Duration types. It replaces the previous tuple representation to better account for various duration types such as milliseconds, infinity, and nanoseconds. The new structure emphasizes clarity and extensibility in encoding durations for transmission.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\ntype DurationEncoded =\n  | {\n      readonly _tag: \"Millis\"\n      readonly millis: number\n    }\n  | {\n      readonly _tag: \"Nanos\"\n      readonly nanos: string\n    }\n  | {\n      readonly _tag: \"Infinity\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Ignoring Never Members in Unions for JSONSchema Generation\nDESCRIPTION: Improvement to JSONSchema generation that ignores never members in unions, which creates cleaner and more accurate JSON schemas. This avoids unnecessary anyOf constructs when a union contains Schema.Never.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nimport { JSONSchema, Schema } from \"effect\"\n\nconst schema = Schema.Union(Schema.String, Schema.Never)\n\nconsole.log(JSON.stringify(JSONSchema.make(schema), null, 2))\n/*\n{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"string\"\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Platform Worker Spawn Configuration in TypeScript\nDESCRIPTION: Demonstrates the new approach to providing platform-specific worker spawn functions closer to the implementation edge\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-bun/CHANGELOG.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Worker } from \"@effect/platform\"\nimport { BrowserWorker } from \"@effect/platform-browser\"\nimport { Effect } from \"effect\"\n\nWorker.makePool({ ... }).pipe(\n  Effect.provide(BrowserWorker.layer(() => new globalThis.Worker(...)))\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling HTTP Server Tracer for Specific URLs in Effect-TS\nDESCRIPTION: Demonstrates how to disable the HTTP server tracer for specific URLs using the withTracerDisabledForUrls middleware function, which accepts an array of URL paths.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Http from \"@effect/platform/HttpServer\"\n\nHttp.router.empty.pipe(\n  Http.router.get(\"/health\"),\n  Http.server.serve(),\n  Http.middleware.withTracerDisabledForUrls([\"/health\"])\n)\n```\n\n----------------------------------------\n\nTITLE: Modifying URL Parameters with modifyUrlParams\nDESCRIPTION: Shows how to use the modifyUrlParams function to read, modify, and overwrite URL parameters in a single operation. This example appends a new parameter to an existing URL.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_98\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Url, UrlParams } from \"@effect/platform\"\n\nconst myUrl = new URL(\"https://example.com?foo=bar\")\n\nconst changedUrl = Url.modifyUrlParams(myUrl, UrlParams.append(\"key\", \"value\"))\n\nconsole.log(changedUrl.toString())\n// Output: https://example.com/?foo=bar&key=value\n```\n\n----------------------------------------\n\nTITLE: Running Single Tests\nDESCRIPTION: Demonstrates how to run a single test using it.effect.only while ignoring other tests.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/vitest/README.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { it } from \"@effect/vitest\"\nimport { Effect, Exit } from \"effect\"\nimport { expect } from \"@effect/vitest\"\n\nfunction divide(a: number, b: number) {\n  if (b === 0) return Effect.fail(\"Cannot divide by zero\")\n  return Effect.succeed(a / b)\n}\n\n// Run only this test, skipping all others\nit.effect.only(\"test failure as Exit\", () =>\n  Effect.gen(function* () {\n    const result = yield* Effect.exit(divide(4, 0))\n    expect(result).toStrictEqual(Exit.fail(\"Cannot divide by zero\"))\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Fallback Value for Parsing Failures with Zod\nDESCRIPTION: This snippet shows how to define a fallback value for parsing failures in Zod using the .catch() method.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from \"zod\"\n\nconst schema = z.number().catch(42)\n\nconsole.log(schema.parse(5)) // => 5\nconsole.log(schema.parse(\"tuna\")) // => 42\n```\n\n----------------------------------------\n\nTITLE: Dependency Update Links in Markdown\nDESCRIPTION: Markdown links referencing dependency update commits for various Effect packages\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-pg/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[[`662d1ce`](https://github.com/Effect-TS/effect/commit/662d1ce6fb7da384a95888d5b2bb5605bdf3208d), [`c99a0f3`](https://github.com/Effect-TS/effect/commit/c99a0f376d049d3793ed33e146d9873b8a5e5b78), [`11fc401`](https://github.com/Effect-TS/effect/commit/11fc401f436f99bf4be95f56d50b0e4bdfe5edea), [`c99a0f3`](https://github.com/Effect-TS/effect/commit/c99a0f376d049d3793ed33e146d9873b8a5e5b78), [`31c62d8`](https://github.com/Effect-TS/effect/commit/31c62d83cbdcf9850a8b5331faa239601c60f78a)]\n```\n\n----------------------------------------\n\nTITLE: Add Support for WebSocket Protocols Option\nDESCRIPTION: This change introduces support for specifying WebSocket protocols. It enhances the WebSocket functionality by allowing the client and server to negotiate a specific subprotocol for communication, enabling advanced features.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-bun/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n[#3769](https://github.com/Effect-TS/effect/pull/3769) [`8c33087`](https://github.com/Effect-TS/effect/commit/8c330879425e80bed2f65e407cd59e991f0d7bec) Thanks @tim-smart! - add support for WebSocket protocols option\n```\n\n----------------------------------------\n\nTITLE: Fixing Schema.TemplateLiteralParser Behavior with Non-String Literals\nDESCRIPTION: Corrects the behavior of Schema.TemplateLiteralParser when arguments include literals other than string literals, allowing proper parsing of mixed literal types.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_67\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst schema = Schema.TemplateLiteralParser(Schema.String, 1)\n\nconsole.log(Schema.decodeUnknownSync(schema)(\"a1\"))\n// Output: [ 'a', 1 ]\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Queries\nDESCRIPTION: This code demonstrates the execution of raw SQL queries using the Effect-TS framework, specifically integrating with a MySQL client. It shows how to utilize the '.raw' property to obtain results directly from SQL operations, which is especially useful for operations like 'INSERT', 'UPDATE', and 'DELETE' that return a 'ResultSetHeader'. Dependencies include 'effect/Effect', '@effect/sql/SqlClient', and '@effect/sql/MysqlClient'. The expected output of the operation is logged to the console for further inspection.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Effect from \"effect/Effect\"\nimport * as SqlClient from \"@effect/sql/SqlClient\"\nimport * as MysqlClient from \"@effect/sql/MysqlClient\"\n\nconst DatabaseLive = MysqlClient.layer({\n  database: Config.succeed(\"database\"),\n  username: Config.succeed(\"root\"),\n  password: Config.succeed(Redacted.make(\"password\"))\n})\n\nconst program = Effect.gen(function* () {\n  const sql = yield* SqlClient.SqlClient\n\n  const result = yield* sql`INSERT INTO usernames VALUES (\"Bob\")`.raw\n\n  console.log(result)\n  /**\n   * ResultSetHeader {\n   *   fieldCount: 0,\n   *   affectedRows: 1,\n   *   insertId: 0,\n   *   info: '',\n   *   serverStatus: 2,\n   *   warningStatus: 0,\n   *   changedRows: 0\n   * }\n   */\n})\n\nprogram.pipe(Effect.provide(DatabaseLive), Effect.runPromise)\n```\n\n----------------------------------------\n\nTITLE: JSON Schema Generation for OptionFromUndefinedOr in TypeScript\nDESCRIPTION: Example showing how to generate a JSON Schema for a struct with an OptionFromUndefinedOr field, which previously threw an error but now works correctly.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_74\n\nLANGUAGE: typescript\nCODE:\n```\nimport { JSONSchema, Schema } from \"effect\"\n\nconst schema = Schema.Struct({\n  a: Schema.OptionFromUndefinedOr(Schema.Number)\n})\n\nconsole.log(JSON.stringify(JSONSchema.make(schema), null, 2))\n/*\nOutput:\n{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"required\": [],\n  \"properties\": {\n    \"a\": {\n      \"type\": \"number\"\n    }\n  },\n  \"additionalProperties\": false\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Using Specific SQL Client Implementation\nDESCRIPTION: Shows how to access the specific client implementation for SQLite using Effect-TS. The `@effect/sql-sqlite-node` package is required for this code snippet.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-pg/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Sqlite from \"@effect/sql-sqlite-node\"\nimport { Effect } from \"effect\"\n\nEffect.gen(function* () {\n  const sql = yield* Sqlite.client.SqliteClient\n  const dump = yield* sql.export\n})\n```\n\n----------------------------------------\n\nTITLE: Schema Validation Filter Fix in TypeScript\nDESCRIPTION: Demonstrates the fix for stable filters like minItems only being applied when the from part fails with a Composite issue. Shows how error handling improved for undefined array properties.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_71\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst schema = Schema.Struct({\n  a: Schema.Array(Schema.String).pipe(Schema.minItems(1))\n})\n\nSchema.decodeUnknownSync(schema)({}, { errors: \"all\" })\n// throws: TypeError: Cannot read properties of undefined (reading 'length')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst schema = Schema.Struct({\n  a: Schema.Array(Schema.String).pipe(Schema.minItems(1))\n})\n\nSchema.decodeUnknownSync(schema)({}, { errors: \"all\" })\n/*\nthrows:\nParseError: { readonly a: an array of at least 1 items }\n└─ [\"a\"]\n   └─ is missing\n*/\n```\n\n----------------------------------------\n\nTITLE: Handling Nullable Keywords in OpenAPI Schemas - TypeScript\nDESCRIPTION: This snippet demonstrates how to handle the `nullable` keyword in OpenAPI schemas using Effect-TS's JSONSchema capabilities. It illustrates the transformation of a schema to represent nullable types correctly for OpenAPI.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OpenApiJsonSchema } from \"@effect/platform\"\nimport { Schema } from \"effect\"\n\nconst schema = Schema.NullOr(Schema.String)\n\nconsole.log(JSON.stringify(OpenApiJsonSchema.make(schema), null, 2))\n/*\n{\n  \"type\": \"string\",\n  \"nullable\": true\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Aligning Struct Constructor Behavior with Class API in TypeScript\nDESCRIPTION: Shows the improvement in Schema.Struct behavior to match Class API constructors when all fields have a default, allowing the make method to work without arguments.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_61\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst schema = Schema.Struct({\n  a: Schema.propertySignature(Schema.Number).pipe(\n    Schema.withConstructorDefault(() => 0)\n  )\n})\n\n// TypeScript error: Expected 1-2 arguments, but got 0.ts(2554)\nconsole.log(schema.make())\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst schema = Schema.Struct({\n  a: Schema.propertySignature(Schema.Number).pipe(\n    Schema.withConstructorDefault(() => 0)\n  )\n})\n\nconsole.log(schema.make())\n// Output: { a: 0 }\n```\n\n----------------------------------------\n\nTITLE: Accessing Object Field Schemas with Effect/Schema\nDESCRIPTION: This example illustrates how to access the individual schemas of object fields in an Effect/Schema.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nDog.fields.name // => String schema\nDog.fields.age // => Number schema\n```\n\n----------------------------------------\n\nTITLE: Add HttpServer Layer Context to platform-node/bun\nDESCRIPTION: This patch adds the HttpServer.layerContext to the platform-node/bun environment.  This allows access to the HTTP server's context within the specified platform, facilitating configuration and management.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-bun/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n[#3802](https://github.com/Effect-TS/effect/pull/3802) [`7564f56`](https://github.com/Effect-TS/effect/commit/7564f56bb2844cf39d2b0d2d9e93cf9b2205e9a8) Thanks @tim-smart! - add HttpServer.layerContext to platform-node/bun\n```\n\n----------------------------------------\n\nTITLE: Version Control Link References\nDESCRIPTION: Git commit links referenced in the changelog for tracking specific changes.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-pg/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[`320557a`](https://github.com/Effect-TS/effect/commit/320557ab18d13c5e22fc7dc0d2a157eae461012f), [`4dca30c`](https://github.com/Effect-TS/effect/commit/4dca30cfcdafe4542e236489f71d6f171a5b4e38), [`1d99867`](https://github.com/Effect-TS/effect/commit/1d998671be3cd11043f232822e91dd8c98fccfa9)\n```\n\n----------------------------------------\n\nTITLE: Implementing SQL Transaction Tracing\nDESCRIPTION: SQL transaction tracing spans implementation with SQL span attributes following semantic conventions and support for unprepared queries\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql/CHANGELOG.md#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nsql`...`.unprepared\n```\n\n----------------------------------------\n\nTITLE: New Default Way of Constructing Tags in TypeScript\nDESCRIPTION: Introduces a new recommended method for creating tags using a class extension syntax. This approach automatically creates an opaque identifier for type-level use.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/cli/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Context } from \"effect\"\nclass Service extends Context.Tag(\"Service\")<\n  Service,\n  {\n    number: Effect.Effect<never, never, number>\n  }\n>() {}\n\nconst program = Effect.flatMap(Service, ({ number }) => number).pipe(\n  Effect.flatMap((_) => Effect.log(`number: ${_}`))\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Context Tags with the New Class-based Pattern\nDESCRIPTION: Demonstrates the new recommended approach for creating context tags using a class-based syntax. This pattern uses a string key and automatically creates an opaque identifier at the type level.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Context } from \"effect\"\nclass Service extends Context.Tag(\"Service\")<\n  Service,\n  {\n    number: Effect.Effect<never, never, number>\n  }\n>() {}\n\nconst program = Effect.flatMap(Service, ({ number }) => number).pipe(\n  Effect.flatMap((_) => Effect.log(`number: ${_}`))\n)\n```\n\n----------------------------------------\n\nTITLE: JSON Schema Generation with Transformations in TypeScript\nDESCRIPTION: Demonstrates the improved JSON Schema generation to properly include transformation annotations unless overridden by user-defined annotations.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_73\n\nLANGUAGE: typescript\nCODE:\n```\nimport { JSONSchema, Schema } from \"effect\"\n\nconst schema = Schema.Struct({\n  a: Schema.optionalWith(Schema.String, { default: () => \"\" })\n}).annotations({\n  identifier: \"MyID\",\n  description: \"My description\",\n  title: \"My title\"\n})\n\nconsole.log(JSONSchema.make(schema))\n/*\nOutput:\n{\n  '$schema': 'http://json-schema.org/draft-07/schema#',\n  type: 'object',\n  required: [],\n  properties: { a: { type: 'string' } },\n  additionalProperties: false\n}\n*/\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { JSONSchema, Schema } from \"effect\"\n\nconst schema = Schema.Struct({\n  a: Schema.optionalWith(Schema.String, { default: () => \"\" })\n}).annotations({\n  identifier: \"MyID\",\n  description: \"My description\",\n  title: \"My title\"\n})\n\nconsole.log(JSONSchema.make(schema))\n/*\nOutput:\n{\n  '$schema': 'http://json-schema.org/draft-07/schema#',\n  '$ref': '#/$defs/MyID',\n  '$defs': {\n    MyID: {\n      type: 'object',\n      required: [],\n      properties: [Object],\n      additionalProperties: false,\n      description: 'My description',\n      title: 'My title'\n    }\n  }\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Correcting Tag Fields in ParseResult.ArrayFormatter (TypeScript)\nDESCRIPTION: This update corrects the `_tag` fields in `ParseResult.ArrayFormatter` for `Refinement` and `Transformation` issues, ensuring accurate labeling of error types in effect-ts Schema. The modification avoids confusion in error identification during schema processing.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, ParseResult, Schema } from \"effect\"\n\nconst schema = Schema.Struct({\n  a: Schema.NonEmptyString,\n  b: Schema.NumberFromString\n})\n\nconst input = { a: \"\", b: \"\" }\n\nconst program = Schema.decodeUnknown(schema, { errors: \"all\" })(input).pipe(\n  Effect.catchTag(\"ParseError\", (err) =>\n    ParseResult.ArrayFormatter.formatError(err).pipe(\n      Effect.map((err) => JSON.stringify(err, null, 2))\n    )\n  )\n)\n\nprogram.pipe(Effect.runPromise).then(console.log)\n/*\n[\n  {\n    \"_tag\": \"Type\", ❌\n    \"path\": [\n      \"a\"\n    ],\n    \"message\": \"Expected a non empty string, actual \"\"\"\n  },\n  {\n    \"_tag\": \"Type\", ❌\n    \"path\": [\n      \"b\"\n    ],\n    \"message\": \"Unable to decode \"\" into a number\"\n  }\n]\n*/\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, ParseResult, Schema } from \"effect\"\n\nconst schema = Schema.Struct({\n  a: Schema.NonEmptyString,\n  b: Schema.NumberFromString\n})\n\nconst input = { a: \"\", b: \"\" }\n\nconst program = Schema.decodeUnknown(schema, { errors: \"all\" })(input).pipe(\n  Effect.catchTag(\"ParseError\", (err) =>\n    ParseResult.ArrayFormatter.formatError(err).pipe(\n      Effect.map((err) => JSON.stringify(err, null, 2))\n    )\n  )\n)\n\nprogram.pipe(Effect.runPromise).then(console.log)\n/*\n[\n  {\n    \"_tag\": \"Refinement\", ✅\n    \"path\": [\n      \"a\"\n    ],\n    \"message\": \"Expected a non empty string, actual \"\"\"\n  },\n  {\n    \"_tag\": \"Transformation\", ✅\n    \"path\": [\n      \"b\"\n    ],\n    \"message\": \"Unable to decode \"\" into a number\"\n  }\n]\n*/\n```\n\n----------------------------------------\n\nTITLE: BatchedRequestResolver Implementation\nDESCRIPTION: Modified BatchedRequestResolver to work with NonEmptyArray for improved type safety\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql/CHANGELOG.md#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nBatchedRequestResolver<NonEmptyArray<T>>\n```\n\n----------------------------------------\n\nTITLE: Adding Annotations to Schema Class Components in TypeScript\nDESCRIPTION: Enhancement that allows annotations on all components of a Schema Class transformation: the type side, the transformation itself, and the encoded side. This provides more detailed error messages.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema, SchemaAST } from \"effect\"\n\nclass A extends Schema.Class<A>(\"A\")(\n  {\n    a: Schema.NonEmptyString\n  },\n  [\n    { identifier: \"TypeID\" }, // annotations for the type side\n    { identifier: \"TransformationID\" }, // annotations for the the transformation itself\n    { identifier: \"EncodedID\" } // annotations for the the encoded side\n  ]\n) {}\n\nconsole.log(SchemaAST.getIdentifierAnnotation(A.ast.to)) // Some(\"TypeID\")\nconsole.log(SchemaAST.getIdentifierAnnotation(A.ast)) // Some(\"TransformationID\")\nconsole.log(SchemaAST.getIdentifierAnnotation(A.ast.from)) // Some(\"EncodedID\")\n\nA.make({ a: \"\" })\n/*\nParseError: TypeID\n└─ [\"a\"]\n   └─ NonEmptyString\n      └─ Predicate refinement failure\n         └─ Expected NonEmptyString, actual \"\"\n*/\n\nSchema.encodeSync(A)({ a: \"\" })\n/*\nParseError: TransformationID\n└─ Type side transformation failure\n   └─ TypeID\n      └─ [\"a\"]\n         └─ NonEmptyString\n            └─ Predicate refinement failure\n               └─ Expected NonEmptyString, actual \"\"\n*/\n\n```\n\n----------------------------------------\n\nTITLE: Function With Span Definition\nDESCRIPTION: Example demonstrating how to define an effectful function wrapped with a span for tracing purposes.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_111\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect } from \"effect\"\n\nconst getTodo = Effect.functionWithSpan({\n  body: (id: number) => Effect.succeed(`Got todo ${id}!`),\n  options: (id) => ({\n    name: `getTodo-${id}`,\n    attributes: { id }\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Effect Test Import\nDESCRIPTION: Shows the main import statement for using Effect with Vitest.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/vitest/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { it } from \"@effect/vitest\"\n```\n\n----------------------------------------\n\nTITLE: Using Cookies with HTTP Client in Effect Platform\nDESCRIPTION: Shows how to use cookies with the HTTP client in the Effect platform, including storing and sending cookies in subsequent requests.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Http from \"@effect/platform/HttpClient\"\nimport { Effect, Ref } from \"effect\"\n\nEffect.gen(function* (_) {\n  const ref = yield* _(Ref.make(Http.cookies.empty))\n  const defaultClient = yield* _(Http.client.Client)\n  const clientWithCookies = defaultClient.pipe(\n    Http.client.withCookiesRef(ref),\n    Http.client.filterStatusOk\n  )\n\n  // cookies will be stored in the ref and sent in any subsequent requests\n  yield* _(\n    Http.request.get(\"https://www.google.com/\"),\n    clientWithCookies,\n    Effect.scoped\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Using Logger.withLeveledConsole in TypeScript\nDESCRIPTION: Example of using Logger.withLeveledConsole to create a logger that uses the appropriate console methods based on log level, such as console.error for errors and console.info for info messages.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_77\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Logger, Effect } from \"effect\"\n\nconst loggerLayer = Logger.withLeveledConsole(Logger.stringLogger)\n\nEffect.gen(function* () {\n  yield* Effect.logError(\"an error\")\n  yield* Effect.logInfo(\"an info\")\n}).pipe(Effect.provide(loggerLayer))\n```\n\n----------------------------------------\n\nTITLE: Fix HttpServer Layer Context Access\nDESCRIPTION: This patch fixes an issue where the HttpServer.layerContext was accessed before it was properly initialized. This ensures that the context is fully available before being accessed, preventing potential errors during server setup.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-bun/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n\n[#3806](https://github.com/Effect-TS/effect/pull/3806) [`a4aa34a`](https://github.com/Effect-TS/effect/commit/a4aa34a0c32b79f7c95f3eb36ee69a8e8e23684c) Thanks @tim-smart! - fix HttpServer.layerContext access before initialization\n\n```\n\n----------------------------------------\n\nTITLE: Using Identifier with Class APIs in JSONSchema for TypeScript\nDESCRIPTION: Improves JSONSchema generation by using the identifier from Class APIs to create a $ref instead of inlining the schema definition, better reflecting the class structure.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_63\n\nLANGUAGE: typescript\nCODE:\n```\nimport { JSONSchema, Schema } from \"effect\"\n\nclass A extends Schema.Class<A>(\"A\")({\n  a: Schema.String\n}) {}\n\nconsole.log(JSON.stringify(JSONSchema.make(A), null, 2))\n/*\n{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"required\": [\n    \"a\"\n  ],\n  \"properties\": {\n    \"a\": {\n      \"type\": \"string\"\n    }\n  },\n  \"additionalProperties\": false\n}\n*/\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { JSONSchema, Schema } from \"effect\"\n\nclass A extends Schema.Class<A>(\"A\")({\n  a: Schema.String\n}) {}\n\nconsole.log(JSON.stringify(JSONSchema.make(A), null, 2))\n/*\n{\n  \"$ref\": \"#/$defs/A\",\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"$defs\": {\n    \"A\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"a\"\n      ],\n      \"properties\": {\n        \"a\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false\n    }\n  }\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Version Headers\nDESCRIPTION: Version headers indicating package version numbers being documented.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-pg/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.21.8\\n\\n### Patch Changes\n```\n\n----------------------------------------\n\nTITLE: Nested TemplateLiteral Schema Support\nDESCRIPTION: Demonstrates fixed support for handling nested TemplateLiteral schemas in Arbitrary generation.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Arbitrary, FastCheck, Schema as S } from \"effect\"\n\nconst schema = S.TemplateLiteral(\n  \"<\",\n  S.TemplateLiteral(\"h\", S.Literal(1, 2)),\n  \">\"\n)\n\nconst arb = Arbitrary.make(schema)\n\nconsole.log(FastCheck.sample(arb, { numRuns: 10 }))\n/*\nOutput:\n[\n  '<h2>', '<h2>',\n  '<h2>', '<h2>',\n  '<h2>', '<h1>',\n  '<h2>', '<h1>',\n  '<h1>', '<h1>'\n]\n*/\n```\n\n----------------------------------------\n\nTITLE: Accessing Object Field Schemas with Zod\nDESCRIPTION: This example shows how to access the individual schemas of object fields in a Zod schema.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nDog.shape.name // => string schema\nDog.shape.age // => number schema\n```\n\n----------------------------------------\n\nTITLE: Accessing Service Constants with Effect.serviceConstants\nDESCRIPTION: Demonstrates how to access any constant in a service, not just effects. This enables direct access to non-effect properties like arrays or other values.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/opentelemetry/CHANGELOG.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Context } from \"effect\"\n\nclass NumberRepo extends Context.TagClass(\"NumberRepo\")<\n  NumberRepo,\n  {\n    readonly numbers: Array<number>\n  }\n>() {\n  static numbers = Effect.serviceConstants(NumberRepo).numbers\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing parseJson Handling in Nested Schemas for TypeScript\nDESCRIPTION: Demonstrates the fix for parseJson handling to target the \"to\" side of the transformation only at the top level, affecting how nested JSON structures are represented in schemas.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_60\n\nLANGUAGE: typescript\nCODE:\n```\nimport { JSONSchema, Schema } from \"effect\"\n\nconst schema = Schema.parseJson(\n  Schema.Struct({\n    a: Schema.parseJson(\n      Schema.Struct({\n        b: Schema.String\n      })\n    )\n  })\n)\n\nconsole.log(JSON.stringify(JSONSchema.make(schema), null, 2))\n/*\n{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"required\": [\n    \"a\"\n  ],\n  \"properties\": {\n    \"a\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"b\"\n      ],\n      \"properties\": {\n        \"b\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false\n    }\n  },\n  \"additionalProperties\": false\n}\n*/\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { JSONSchema, Schema } from \"effect\"\n\nconst schema = Schema.parseJson(\n  Schema.Struct({\n    a: Schema.parseJson(\n      Schema.Struct({\n        b: Schema.String\n      })\n    )\n  })\n)\n\nconsole.log(JSON.stringify(JSONSchema.make(schema), null, 2))\n/*\n{\n  \"type\": \"object\",\n  \"required\": [\n    \"a\"\n  ],\n  \"properties\": {\n    \"a\": {\n      \"type\": \"string\",\n      \"contentMediaType\": \"application/json\"\n    }\n  },\n  \"additionalProperties\": false,\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Accessing Implementation-Specific SQL Functionality\nDESCRIPTION: This snippet shows how to access functionality specific to a SQL implementation, such as SQLite. It imports the SQLite client and uses it to access an `export` function, demonstrating how to interact with implementation-specific APIs.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-sqlite-react-native/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Sqlite from \"@effect/sql-sqlite-node\"\nimport { Effect } from \"effect\"\n\nEffect.gen(function* () {\n  const sql = yield* Sqlite.client.SqliteClient\n  const dump = yield* sql.export\n})\n```\n\n----------------------------------------\n\nTITLE: Fixing Stream Partition in TypeScript\nDESCRIPTION: Fix for the behavior of Stream.partition to match its type definitions in the Effect library.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_68\n\nLANGUAGE: typescript\nCODE:\n```\nStream.partition\n```\n\n----------------------------------------\n\nTITLE: Making All Fields Optional in Zod\nDESCRIPTION: This snippet demonstrates how to make all fields in an object schema optional using Zod.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = z.object({\n  email: z.string(),\n  username: z.string()\n})\n\nconst partialUser = user.partial()\n```\n\n----------------------------------------\n\nTITLE: Optional Property Handling in TypeScript Structs\nDESCRIPTION: Demonstration of improved handling of optional properties in pick, omit and get operations on structs.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_130\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pipe } from \"effect/Function\"\nimport * as S from \"effect/Struct\"\n\nconst struct: {\n  a?: string\n  b: number\n  c: boolean\n} = { b: 1, c: true }\n\nconst x = pipe(struct, S.pick(\"a\", \"b\"))\nconsole.log(x) // => { b: 1 }\n\nconst record: Record<string, number> = {}\n\nconst y = pipe(record, S.pick(\"a\", \"b\"))\nconsole.log(y) // => {}\n\nconsole.log(pipe(struct, S.get(\"a\"))) // => undefined\n```\n\n----------------------------------------\n\nTITLE: Refining Return Types for Schema Filters in TypeScript\nDESCRIPTION: This example demonstrates more precise return types when using filters like Schema.maxLength, providing better type inference for the filtered schema.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\n//      ┌─── Schema.filter<typeof Schema.String>\n//      ▼\nconst schema = Schema.String.pipe(Schema.maxLength(10))\n\n// typeof Schema.String\nschema.from\n```\n\n----------------------------------------\n\nTITLE: Replacing RefailError in platform with 'cause' property\nDESCRIPTION: This snippet describes a minor change within the @effect/platform package where RefailError is replaced with the use of the 'cause' property. This modification likely impacts how errors are handled and propagated within the platform module.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-sqlite-node/CHANGELOG.md#2025-04-21_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Package Import Reference\nDESCRIPTION: Package import path for @effect/sql-drizzle integration\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-drizzle/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`@effect/sql-drizzle`\n```\n\n----------------------------------------\n\nTITLE: Demonstrating JSONSchema Refinement Merging\nDESCRIPTION: Shows how JSONSchema now preserves and merges schema refinements instead of overwriting them when using string validations.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { JSONSchema, Schema } from \"effect\"\n\nexport const schema = Schema.String.pipe(\n  Schema.startsWith(\"a\"), // <= overwritten!\n  Schema.endsWith(\"c\")\n)\n\nconsole.log(JSON.stringify(JSONSchema.make(schema), null, 2))\n/*\n{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"string\",\n  \"description\": \"a string ending with \\\"c\\\"\",\n  \"pattern\": \"^.*c$\" // <= overwritten!\n}\n*/\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { JSONSchema, Schema } from \"effect\"\n\nexport const schema = Schema.String.pipe(\n  Schema.startsWith(\"a\"), // <= preserved!\n  Schema.endsWith(\"c\")\n)\n\nconsole.log(JSON.stringify(JSONSchema.make(schema), null, 2))\n/*\n{\n  \"type\": \"string\",\n  \"description\": \"a string ending with \\\"c\\\"\",\n  \"pattern\": \"^.*c$\",\n  \"allOf\": [\n    {\n      \"pattern\": \"^a\" // <= preserved!\n    }\n  ],\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Improving Socket implementation to fix memory leak\nDESCRIPTION: This patch fixes a memory leak in the Socket implementation. It addresses resource management issues that could lead to increased memory usage over time.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_30\n\nLANGUAGE: markdown\nCODE:\n```\n- [#2750](https://github.com/Effect-TS/effect/pull/2750) [`6ac4847`](https://github.com/Effect-TS/effect/commit/6ac48479447c01a4f35d655552af93e47e562610) Thanks @tim-smart! - fix memory leak in Socket's\n```\n\n----------------------------------------\n\nTITLE: Accessing Service Constants\nDESCRIPTION: Enhanced ability to access any service constant using Effect.serviceConstants\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/experimental/CHANGELOG.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Context } from \"effect\"\n\nclass NumberRepo extends Context.TagClass(\"NumberRepo\")<\n  NumberRepo,\n  {\n    readonly numbers: Array<number>\n  }\n>() {\n  static numbers = Effect.serviceConstants(NumberRepo).numbers\n}\n```\n\n----------------------------------------\n\nTITLE: Representing 'never' Type in JSONSchema for TypeScript\nDESCRIPTION: Shows the improvement in handling Schema.Never by representing it as {\"not\":{}} in JSON Schema instead of throwing an error about missing annotation.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_59\n\nLANGUAGE: typescript\nCODE:\n```\nimport { JSONSchema, Schema } from \"effect\"\n\nconst schema = Schema.Never\n\nconsole.log(JSON.stringify(JSONSchema.make(schema), null, 2))\n/*\nthrows:\nError: Missing annotation\ndetails: Generating a JSON Schema for this schema requires a \"jsonSchema\" annotation\nschema (NeverKeyword): never\n*/\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { JSONSchema, Schema } from \"effect\"\n\nconst schema = Schema.Never\n\nconsole.log(JSON.stringify(JSONSchema.make(schema), null, 2))\n/*\n{\n  \"$id\": \"/schemas/never\",\n  \"not\": {},\n  \"title\": \"never\",\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Using OpenAI Response Format for Structured Completions\nDESCRIPTION: This patch updates the system to use OpenAI's response_format parameter to enable structured completions. This likely involves modifying the request structure to the OpenAI API to leverage the response_format for improved control over the output format.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/ai/ai/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n\n```\n[#4071](https://github.com/Effect-TS/effect/pull/4071) [`da3a607`](https://github.com/Effect-TS/effect/commit/da3a607bea16d4f08c5937cadfde0447c4123f40) Thanks @tim-smart! - use openai response_format for structured completions\n```\n```\n\n----------------------------------------\n\nTITLE: Improve Payload Encoding Handling in HttpApi\nDESCRIPTION: This snippet describes improvements to HttpApi handling of payload encoding types.  This improvement was added in a pull request, and includes an associated commit hash.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node/CHANGELOG.md#2025-04-21_snippet_17\n\nLANGUAGE: none\nCODE:\n```\n- [#4024](https://github.com/Effect-TS/effect/pull/4024) [`24cc35e`](https://github.com/Effect-TS/effect/commit/24cc35e26d6ed4a076470bc687ffd99cc50991b3) Thanks @tim-smart! - improve HttpApi handling of payload encoding types\n```\n\n----------------------------------------\n\nTITLE: Making All Fields Optional in Effect/Schema\nDESCRIPTION: This snippet demonstrates how to make all fields in an object schema optional using Effect/Schema.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst user = Schema.Struct({\n  email: Schema.String,\n  username: Schema.String\n})\n\nconst partialUser = Schema.partial(user)\n```\n\n----------------------------------------\n\nTITLE: Enhancing Return Type for Schema.compose in TypeScript\nDESCRIPTION: This code snippet shows the improvement in return type accuracy for Schema.compose, providing more detailed type information for the composed schema.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\n//      ┌─── transform<typeof Schema.NumberFromString, Schema.NullOr<typeof Schema.Number>>\n//      ▼\nconst schema = Schema.compose(\n  Schema.NumberFromString,\n  Schema.NullOr(Schema.Number)\n)\n\n//      ┌─── typeof Schema.NumberFromString\n//      ▼\nschema.from\n\n//      ┌─── Schema.NullOr<typeof Schema.Number>\n//      ▼\nschema.to\n```\n\n----------------------------------------\n\nTITLE: Skipping Tests\nDESCRIPTION: Shows how to temporarily disable tests using it.effect.skip while maintaining the test code.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/vitest/README.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { it } from \"@effect/vitest\"\nimport { Effect, Exit } from \"effect\"\nimport { expect } from \"@effect/vitest\"\n\nfunction divide(a: number, b: number) {\n  if (b === 0) return Effect.fail(\"Cannot divide by zero\")\n  return Effect.succeed(a / b)\n}\n\n// Temporarily skip the test for dividing numbers\nit.effect.skip(\"test failure as Exit\", () =>\n  Effect.gen(function* () {\n    const result = yield* Effect.exit(divide(4, 0))\n    expect(result).toStrictEqual(Exit.fail(\"Cannot divide by zero\"))\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Migrating from Render Module to Consolidated Doc Methods in @effect/printer\nDESCRIPTION: This example demonstrates how to migrate from using the deprecated Render module to the new consolidated Doc rendering methods. The Render module was removed in version 0.32.0, with all document rendering methods consolidated into a single method.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/printer/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\nimport * as Doc from \"@effect/printer/Doc\"\nimport * as Render from \"@effect/printer/Render\"\n\nconst doc = Doc.cat(Doc.text(\"Hello, \"), Doc.text(\"World!\"))\n\nconsole.log(Render.prettyDefault(doc))\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// After\nimport * as Doc from \"@effect/printer/Doc\"\n\nconst doc = Doc.cat(Doc.text(\"Hello, \"), Doc.text(\"World!\"))\n\nconsole.log(Doc.render(doc, { style: \"pretty\" }))\n```\n\n----------------------------------------\n\nTITLE: Bind All Effect Example in TypeScript\nDESCRIPTION: Demonstrates usage of Effect.bindAll API which combines Effect.all with Effect.bind for concurrent effect execution in Do notation pipeline.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_89\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect } from \"effect\"\n\nconst result = Effect.Do.pipe(\n  Effect.bind(\"x\", () => Effect.succeed(2)),\n  Effect.bindAll(\n    ({ x }) => ({\n      a: Effect.succeed(x + 1),\n      b: Effect.succeed(\"foo\")\n    }),\n    { concurrency: 2 }\n  )\n)\nassert.deepStrictEqual(Effect.runSync(result), {\n  x: 2,\n  a: 3,\n  b: \"foo\"\n})\n```\n\n----------------------------------------\n\nTITLE: Using CLI Help Command\nDESCRIPTION: Example of using the built-in help command in a CLI application\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/cli/README.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nyour-cli-app --help\n```\n\n----------------------------------------\n\nTITLE: Examples of Duration Encoding in TypeScript\nDESCRIPTION: This snippet provides examples of how to encode durations using the new tagged union format. It demonstrates the encoding for finite, infinite, and nanosecond durations by utilizing the Schema.encodeSync function.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Duration, Schema } from \"effect\"\n\n// Encoding a finite duration in milliseconds\nconsole.log(Schema.encodeSync(Schema.Duration)(Duration.millis(1000)))\n// Output: { _tag: 'Millis', millis: 1000 }\n\n// Encoding an infinite duration\nconsole.log(Schema.encodeSync(Schema.Duration)(Duration.infinity))\n// Output: { _tag: 'Infinity' }\n\n// Encoding a duration in nanoseconds\nconsole.log(Schema.encodeSync(Schema.Duration)(Duration.nanos(1000n)))\n// Output: { _tag: 'Nanos', nanos: '1000' }\n```\n\n----------------------------------------\n\nTITLE: Configuring Shell Completions\nDESCRIPTION: Command to set up bash shell completions for the CLI application\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/cli/README.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nsource <(your-cli-app --completions bash)\n```\n\n----------------------------------------\n\nTITLE: Updating JSDoc Examples in TypeScript\nDESCRIPTION: Enhancement to wrap JSDoc @example tags with TypeScript fences for improved documentation in the Effect library.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_70\n\nLANGUAGE: typescript\nCODE:\n```\n@example\n```\n\n----------------------------------------\n\nTITLE: Using Dialect-Specific SQL Client in TypeScript\nDESCRIPTION: Example of accessing a specific SQL implementation's client, demonstrating how to use SQLite-specific functionality within the Effect framework\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-sqlite-bun/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Sqlite from \"@effect/sql-sqlite-node\"\nimport { Effect } from \"effect\"\n\nEffect.gen(function* () {\n  const sql = yield* Sqlite.client.SqliteClient\n  const dump = yield* sql.export\n})\n```\n\n----------------------------------------\n\nTITLE: Using nullable Keyword for OpenAPI Schema Generation\nDESCRIPTION: Enhancement for JSONSchema generation that properly uses the 'nullable' keyword for OpenAPI target when handling Schema.NullOr, which improves compatibility with OpenAPI specifications.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OpenApiJsonSchema } from \"@effect/platform\"\nimport { Schema } from \"effect\"\n\nconst schema = Schema.NullOr(Schema.String)\n\nconsole.log(JSON.stringify(OpenApiJsonSchema.make(schema), null, 2))\n/*\n{\n  \"type\": \"string\",\n  \"nullable\": true\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Refactoring @effect/vitest Package in Effect-TS\nDESCRIPTION: This snippet shows the refactoring of the `@effect/vitest` package with improvements to the public API, type fixes, and the addition of an `each` method. This enhances the testing capabilities of the Effect-TS library.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/vitest/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n    \n- [#3122](https://github.com/Effect-TS/effect/pull/3122) [`489d20a`](https://github.com/Effect-TS/effect/commit/489d20a3661ce71b4ddd5037d1b190e9c0531f0d) Thanks @sukovanej! - Refactor `@effect/vitest` package.\n\n  - Clear separation of the public API and internals.\n  - Fix type of `scoped`, `live`, `scopedLive` and `effect` objects. Make sure `skip` and `only` are available.\n  - Add `each` method to `scoped`, `live`, `scopedLive` and `effect` objects.\n\n  Example usage\n\n  ```ts\n  import { expect, it } from \"@effect/vitest\"\n  import { Effect } from \"effect\"\n\n  it.scoped.skip(\"test skipped\", () =>\n    Effect.acquireRelease(Effect.die(\"skipped anyway\"), () => Effect.void)\n  )\n\n  it.effect.each([1, 2, 3])(\"effect each %s\", (n) =>\n    Effect.sync(() => expect(n).toEqual(n))\n  )\n  ```\n\n```\n\n----------------------------------------\n\nTITLE: Preserving MissingMessageAnnotations in Schema Property Signatures\nDESCRIPTION: Fixes an issue where MissingMessageAnnotations were not preserved on property signature declarations when another field was a property signature transformation.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_66\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Console, Effect, ParseResult, Schema } from \"effect\"\n\nconst schema = Schema.Struct({\n  a: Schema.propertySignature(Schema.String).annotations({\n    missingMessage: () => \"message1\"\n  }),\n  b: Schema.propertySignature(Schema.String)\n    .annotations({ missingMessage: () => \"message2\" })\n    .pipe(Schema.fromKey(\"c\")), // <= transformation\n  d: Schema.propertySignature(Schema.String).annotations({\n    missingMessage: () => \"message3\"\n  })\n})\n\nEffect.runPromiseExit(\n  Schema.decodeUnknown(schema, { errors: \"all\" })({}).pipe(\n    Effect.tapError((error) =>\n      Console.log(ParseResult.ArrayFormatter.formatErrorSync(error))\n    )\n  )\n)\n/*\nOutput:\n[\n  { _tag: 'Missing', path: [ 'a' ], message: 'message1' },\n  { _tag: 'Missing', path: [ 'c' ], message: 'message2' },\n  { _tag: 'Missing', path: [ 'd' ], message: 'message3' }\n]\n*/\n```\n\n----------------------------------------\n\nTITLE: API Change: Layer Provide Replacement\nDESCRIPTION: Replacing Layer.provide* methods with Layer.use* for improved API consistency\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_148\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\nLayer.provide*(dependency)\n\n// After\nLayer.use*(dependency)\n```\n\n----------------------------------------\n\nTITLE: Defining an Array Schema for Strings with Effect/Schema\nDESCRIPTION: This snippet illustrates how to define an array schema for strings using Effect/Schema.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst stringArray = Schema.Array(Schema.String)\n```\n\n----------------------------------------\n\nTITLE: Enhancing Error Messages for Discriminated Unions in Schema (TypeScript)\nDESCRIPTION: Improves error messages for discriminated unions in the Schema module by including the identifier annotation in the error output.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst schema = Schema.Union(\n  Schema.Tuple(Schema.Literal(-1), Schema.Literal(0)).annotations({\n    identifier: \"A\"\n  }),\n  Schema.Tuple(Schema.NonNegativeInt, Schema.NonNegativeInt).annotations({\n    identifier: \"B\"\n  })\n).annotations({ identifier: \"AB\" })\n\nSchema.decodeUnknownSync(schema)([-500, 0])\n/*\nthrows:\nParseError: AB\n├─ A\n│  └─ [\"0\"]\n│     └─ Expected -1, actual -500\n└─ B\n   └─ [0]\n      └─ NonNegativeInt\n         └─ From side refinement failure\n            └─ NonNegative\n               └─ Predicate refinement failure\n                  └─ Expected a non-negative number, actual -500\n*/\n```\n\n----------------------------------------\n\nTITLE: Version Migration - Replacing 'unit' with 'void'\nDESCRIPTION: Code transformation showing the replacement of 'unit' terminology with 'void' across different Effect data types in TypeScript\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/printer/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nEffect.unit // => Effect.void\nStream.unit // => Stream.void\n```\n\n----------------------------------------\n\nTITLE: Accessing Array Element Schema with Effect/Schema\nDESCRIPTION: This snippet illustrates how to access the schema for the elements in an Effect/Schema array schema.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nstringArray.value // => String schema\n```\n\n----------------------------------------\n\nTITLE: Installing @effect/cli with pnpm\nDESCRIPTION: Command to install the @effect/cli package using pnpm package manager\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/cli/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @effect/cli\n```\n\n----------------------------------------\n\nTITLE: Context Tag Implementation Changes in TypeScript\nDESCRIPTION: Illustrates the new mandatory string key for Context Tags and demonstrates two new ways of constructing tags in the Effect-TS library\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-bun/CHANGELOG.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Context } from \"effect\"\n\n// Old way (no longer valid)\ninterface Service {\n  readonly _: unique symbol\n}\nconst Service = Context.Tag<\n  Service,\n  {\n    number: Effect.Effect<never, never, number>\n  }\n>()\n\n// New way with GenericTag\nconst Service = Context.GenericTag<\n  Service,\n  {\n    number: Effect.Effect<never, never, number>\n  }\n>(\"Service\")\n\n// New class-based tag creation\nclass Service extends Context.Tag(\"Service\")<\n  Service,\n  {\n    number: Effect.Effect<never, never, number>\n  }\n>() {}\n\nconst program = Effect.flatMap(Service, ({ number }) => number).pipe(\n  Effect.flatMap((_) => Effect.log(`number: ${_}`))\n)\n```\n\n----------------------------------------\n\nTITLE: Fixing Numeric Coercion in TemplateLiteralParser in TypeScript\nDESCRIPTION: Bugfix for the TemplateLiteralParser where unions of numeric literals weren't being coerced correctly. This shows the before and after behavior when parsing template strings with numeric components.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst schema = Schema.TemplateLiteralParser(\"a\", Schema.Literal(1, 2))\n\nconsole.log(Schema.decodeUnknownSync(schema)(\"a1\"))\n// Output: [ 'a', 1 ]\n\nconsole.log(Schema.decodeUnknownSync(schema)(\"a2\"))\n// Output: [ 'a', 2 ]\n\nconsole.log(Schema.decodeUnknownSync(schema)(\"a3\"))\n/*\nthrows:\nParseError: (`a${\"1\" | \"2\"}` <-> readonly [\"a\", 1 | 2])\n└─ Encoded side transformation failure\n   └─ Expected `a${\"1\" | \"2\"}`, actual \"a3\"\n*/\n```\n\n----------------------------------------\n\nTITLE: Setting Up Git Branch for Effect.js Contribution\nDESCRIPTION: Command for creating a new branch in Git to start working on changes to the Effect.js project.\nSOURCE: https://github.com/effect-ts/effect/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b my-branch\n```\n\n----------------------------------------\n\nTITLE: Installing @effect/platform-node Package for Effect-TS in Node.js\nDESCRIPTION: This code snippet shows the package name for Node.js-specific implementations in Effect-TS. It's used to provide platform-specific functionality for Node.js environments.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `@effect/platform-node`\n```\n\n----------------------------------------\n\nTITLE: Add Pure Annotations for Tree-shakeability\nDESCRIPTION: This change adds additional pure annotations to the code to improve tree-shakeability. Tree-shaking is a process of removing dead code during bundling, and the pure annotations help the bundler identify code that has no side effects and can be safely removed if not used.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql/CHANGELOG.md#2025-04-21_snippet_10\n\nLANGUAGE: Markdown\nCODE:\n```\n\"- [#3310](https://github.com/Effect-TS/effect/pull/3310) [`99bddcf`](https://github.com/Effect-TS/effect/commit/99bddcfb3d6eab4d489d055404e26ad81afe52fc) Thanks @fubhy! - Added additional pure annotations to improve tree-shakeability\"\n```\n\n----------------------------------------\n\nTITLE: Registering Frequency Metric Words in TypeScript\nDESCRIPTION: Shows how to pre-register words for a frequency metric using the Metric API from Effect.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_115\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Metric } from \"effect\"\n\nconst counts = Metric.frequency(\"counts\", {\n  preregisteredWords: [\"a\", \"b\", \"c\"]\n}).register()\n```\n\n----------------------------------------\n\nTITLE: Getting Keys from RcMap in TypeScript\nDESCRIPTION: Example of using RcMap.keys to retrieve all keys that have been accessed in an RcMap.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_86\n\nLANGUAGE: typescript\nCODE:\n```\nEffect.gen(function* () {\n  const map = yield* RcMap.make({\n    lookup: (key) => Effect.succeed(key)\n  })\n\n  yield* RcMap.get(map, \"a\")\n  yield* RcMap.get(map, \"b\")\n  yield* RcMap.get(map, \"c\")\n\n  const keys = yield* RcMap.keys(map) // [\"a\", \"b\", \"c\"]\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Predicate Support for Refinements\nDESCRIPTION: Demonstrates how to use Predicate.or with different type refinements, enabling flexible type checking and combination of predicates\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_97\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Predicate } from \"effect\"\n\n// Refinement<unknown, string | number>\nconst isStringOrNumber = Predicate.or(Predicate.isString, Predicate.isNumber)\n```\n\n----------------------------------------\n\nTITLE: Function Renaming: ReadonlyArray and Record Compact\nDESCRIPTION: Renaming compact method to getSomes in ReadonlyArray and ReadonlyRecord modules\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_149\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\nReadonlyArray.compact(array)\nReadonlyRecord.compact(record)\n\n// After\nReadonlyArray.getSomes(array)\nReadonlyRecord.getSomes(record)\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform Worker Spawn Function\nDESCRIPTION: Demonstrates the new pattern for providing platform-specific worker implementation. The spawn function is now provided closer to the edge of the application where platform-specific implementations are configured.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Worker } from \"@effect/platform\"\nimport { BrowserWorker } from \"@effect/platform-browser\"\nimport { Effect } from \"effect\"\n\nWorker.makePool({ ... }).pipe(\n  Effect.provide(BrowserWorker.layer(() => new globalThis.Worker(...)))\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in Effect TS platform\nDESCRIPTION: This snippet illustrates the update of dependencies for `effect`, `@effect/platform`, and `@effect/platform-node-shared` in a patch change. The snippet provides the new versions and corresponding commit hashes.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: none\nCODE:\n```\n\"- Updated dependencies [[`dd8a2d8`](https://github.com/Effect-TS/effect/commit/dd8a2d8e80d33b16719fc69361eaedf0b59d4620), [`a71bfef`](https://github.com/Effect-TS/effect/commit/a71bfef46f5061bb2502a61a333638a987b62273)]:\\n  - effect@3.11.1\\n  - @effect/platform@0.70.1\\n  - @effect/platform-node-shared@0.20.1\"\n```\n\n----------------------------------------\n\nTITLE: Improving Return Types for ArrayEnsure and NonEmptyArrayEnsure in TypeScript\nDESCRIPTION: This snippet shows the enhancement of return types for Schema.ArrayEnsure and Schema.NonEmptyArrayEnsure, providing more detailed type information for the resulting schemas.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst schema1 = Schema.ArrayEnsure(Schema.String)\n\n//        ┌─── Schema.Union<[typeof Schema.String, Schema.Array$<typeof Schema.String>]>\n//        ▼\nschema1.from\n\nconst schema2 = Schema.NonEmptyArrayEnsure(Schema.String)\n\n//        ┌─── Schema.Union<[typeof Schema.String, Schema.NonEmptyArray<typeof Schema.String>]>\n//        ▼\nschema2.from\n```\n\n----------------------------------------\n\nTITLE: Pattern Handling Improvement with Union Merging\nDESCRIPTION: Shows how multiple patterns are now merged into a union for better handling in FastCheck string generation.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Arbitrary, FastCheck, Schema } from \"effect\"\n\n// /^[^A-Z]*$/ (given by Lowercase) + /^0x[0-9a-f]{40}$/\nconst schema = Schema.Lowercase.pipe(Schema.pattern(/^0x[0-9a-f]{40}$/))\n\nconst arb = Arbitrary.make(schema)\n\n// Before this fix, the first pattern would always dominate,\n// making it impossible to generate values\nconst sample = FastCheck.sample(arb, { numRuns: 100 })\n\nconsole.log(sample)\n```\n\n----------------------------------------\n\nTITLE: Update multiple dependencies to version 3.5.8\nDESCRIPTION: This patch updates dependencies including `@effect/platform`, `effect`, and `@effect/schema` to versions 0.60.2, 3.5.8, and 0.69.2 respectively. These updates could involve bug fixes, performance enhancements, and new features, ensuring the components function optimally and maintain compatibility.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: Markdown\nCODE:\n```\n\"- Updated dependencies [[`eb4d014`](https://github.com/Effect-TS/effect/commit/eb4d014c559e1b4c95b3fb9295fe77593c17ed7a), [`1ba640c`](https://github.com/Effect-TS/effect/commit/1ba640c702f187a866023bf043c26e25cce941ef), [`c8c71bd`](https://github.com/Effect-TS/effect/commit/c8c71bd20eb87d23133dac6156b83bb08941597c), [`a26ce58`](https://github.com/Effect-TS/effect/commit/a26ce581ca7d407e1e81439b58c8045b3fa65231), [`fc20f73`](https://github.com/Effect-TS/effect/commit/fc20f73c69e577981cb64714de2adc97e1004dae)]:\\n  - @effect/platform@0.60.2\\n  - effect@3.5.8\\n  - @effect/schema@0.69.2\"\n```\n\n----------------------------------------\n\nTITLE: Update Dependencies for Patch 0.5.1\nDESCRIPTION: This patch updates the dependencies `effect`, `@effect/platform`, and `@effect/schema` to versions 3.5.5, 0.59.1, and 0.68.25, respectively. These updates likely incorporate bug fixes, performance improvements, and new features, ensuring better stability and functionality.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql/CHANGELOG.md#2025-04-21_snippet_13\n\nLANGUAGE: Markdown\nCODE:\n```\n\"- Updated dependencies [[`a9d7800`](https://github.com/Effect-TS/effect/commit/a9d7800f6a253192b653d77778b0674f39b1ca39), [`fcecff7`](https://github.com/Effect-TS/effect/commit/fcecff7f7e12b295a252f124861b801c73072151), [`adbf753`](https://github.com/Effect-TS/effect/commit/adbf75340a9db15dc5cadc66e911a8978a195a65), [`adbf753`](https://github.com/Effect-TS/effect/commit/adbf75340a9db15dc5cadc66e911a8978a195a65)]:\\n  - effect@3.5.5\\n  - @effect/platform@0.59.1\\n  - @effect/schema@0.68.25\"\n```\n\n----------------------------------------\n\nTITLE: HTTP Client Code Example\nDESCRIPTION: Example showing HTTP client usage before and after Scope requirement removal\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpClient } from \"@effect/platform\"\nimport { Effect } from \"effect\"\n\nEffect.gen(function* () {\n  const client = yield* HttpClient.HttpClient\n  const response = yield* client.get(\"https://api.github.com/users/octocat\")\n  return yield* response.json\n}).pipe(Effect.scoped)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpClient } from \"@effect/platform\"\nimport { Effect } from \"effect\"\n\nEffect.gen(function* () {\n  const client = yield* HttpClient.HttpClient\n  const response = yield* client.get(\"https://api.github.com/users/octocat\")\n  return yield* response.json\n}) // no need to add Effect.scoped\n```\n\n----------------------------------------\n\nTITLE: OpenApi Adjustments in Effect TS HttpApi\nDESCRIPTION: This snippet describes adjustments made to the HttpApi's OpenApi functionality, including allowing the use of transform annotations on endpoints and groups, and preserving descriptions for \"empty\" schemas. This was part of a pull request and included an associated commit hash.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: none\nCODE:\n```\n- [#4064](https://github.com/Effect-TS/effect/pull/4064) [`c2249ea`](https://github.com/Effect-TS/effect/commit/c2249ea13fd98ab7d9aa628787931356d8ec2860) Thanks @tim-smart! - HttpApi OpenApi adjustments\\n\\n  - Allow using transform annotation on endpoints & groups\\n  - Preserve descriptions for \\\"empty\\\" schemas\n```\n\n----------------------------------------\n\nTITLE: Update Dependencies for Minor Change 0.5.0\nDESCRIPTION: This update includes changes to how `/platform` handles RefailError, replacing it with the use of the `cause` property for improved error handling. It also updates the dependencies `effect`, `@effect/platform`, and `@effect/schema` to their latest compatible versions, potentially including bug fixes and performance improvements.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql/CHANGELOG.md#2025-04-21_snippet_15\n\nLANGUAGE: Markdown\nCODE:\n```\n\"- Updated dependencies [[`53c0db0`](https://github.com/Effect-TS/effect/commit/53c0db06872d5b5edea2a706e83249908385325c), [`ed0dde4`](https://github.com/Effect-TS/effect/commit/ed0dde4888e6f1a97ad5bba06b755d26a6a1c52e), [`ada68b3`](https://github.com/Effect-TS/effect/commit/ada68b3e61c67907c2a281c024c84d818186ca4c), [`ca775ce`](https://github.com/Effect-TS/effect/commit/ca775cec53baebc1a43d9b8852a3ac6726178498), [`5be9cc0`](https://github.com/Effect-TS/effect/commit/5be9cc044025a9541b9b7acefa2d3fc05fa1301b), [`203658f`](https://github.com/Effect-TS/effect/commit/203658f8001c132b25764ab70344b171683b554c), [`eb1c4d4`](https://github.com/Effect-TS/effect/commit/eb1c4d44e54b9d8d201a366d1ff94face2a6dcd3)]:\\n  - @effect/platform@0.59.0\\n  - effect@3.5.4\\n  - @effect/schema@0.68.24\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM\nDESCRIPTION: Commands for installing vitest and @effect/vitest packages using PNPM package manager.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/vitest/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm add -D vitest\npnpm add -D @effect/vitest\n```\n\n----------------------------------------\n\nTITLE: Pretty Print Types Implementation\nDESCRIPTION: Function to format type definitions with proper spacing and arrows\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/printer/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst prettyTypes = (types: ReadonlyArray<string>): Doc.Doc<never> => {\n  const symbolDocuments = pipe(\n    Array.makeBy(types.length - 1, () => Doc.text(\"->\")),\n```\n\n----------------------------------------\n\nTITLE: Exposing Type Parameters for Schema (TypeScript)\nDESCRIPTION: Demonstrates the new feature of accessing type parameters for schemas, specifically for option schemas, improving type introspection capabilities\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst schema = Schema.OptionFromSelf(Schema.String)\n\nschema.typeParameters\n```\n\n----------------------------------------\n\nTITLE: Update @effect/schema dependency to 0.69.1\nDESCRIPTION: This patch updates the `@effect/schema` dependency to version 0.69.1, along with `@effect/platform` to 0.60.1.  This ensures the project utilizes the latest enhancements and bug fixes available in those packages.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: Markdown\nCODE:\n```\n\"- Updated dependencies [[`f241154`](https://github.com/Effect-TS/effect/commit/f241154added5d91e95866c39481f09cdb13bd4d)]:\\n  - @effect/schema@0.69.1\\n  - @effect/platform@0.60.1\"\n```\n\n----------------------------------------\n\nTITLE: Replacing Unit Terminology with Void in TypeScript\nDESCRIPTION: This snippet demonstrates the change from using `Effect.unit` and `Stream.unit` to the new terminology `Effect.void` and `Stream.void`, which improves clarity and consistency across the library. This update is part of a broader effort to standardize terminology in the project.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/opentelemetry/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nEffect.unit // => Effect.void\nStream.unit // => Stream.void\n\n// etc\n```\n\n----------------------------------------\n\nTITLE: Module Version Control in Effect Runtime\nDESCRIPTION: Example of controlling Effect runtime versions to prevent conflicts in function runtime implementations.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_132\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as ModuleVersion from \"effect/ModuleVersion\"\n\nModuleVersion.setCurrentVersion(\n  `my-effect-runtime-${ModuleVersion.getCurrentVersion()}`\n)\n\nimport { Effect } from \"effect\"\n\n// rest of code\n```\n\n----------------------------------------\n\nTITLE: Update multiple dependencies to version 3.5.9\nDESCRIPTION: This patch updates the dependencies `effect`, `@effect/schema`, and `@effect/platform` to versions 3.5.9, 0.69.3, and 0.60.3, respectively. These updates may include bug fixes, performance improvements, and new features that enhance the functionality and stability of the Effect-TS library.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\n\"- Updated dependencies [[`7c0da50`](https://github.com/Effect-TS/effect/commit/7c0da5050d30cb804f4eacb15995d0fb7f3a28d2), [`2fc0ff4`](https://github.com/Effect-TS/effect/commit/2fc0ff4c59c25977018f6ac70ced99b04a8c7b2b), [`6359644`](https://github.com/Effect-TS/effect/commit/635964446323cf55d4060559337e710e4a24496e), [`f262665`](https://github.com/Effect-TS/effect/commit/f262665c2773492c01e5dd0e8d6db235aafaaad8), [`7f41e42`](https://github.com/Effect-TS/effect/commit/7f41e428830bf3043b8be0d28dcd235d5747c942), [`9bbe7a6`](https://github.com/Effect-TS/effect/commit/9bbe7a681430ebf5c10167bb7140ba3742e46bb7), [`f566fd1`](https://github.com/Effect-TS/effect/commit/f566fd1d7eea531a0d981dd24037f14a603a1273)]:\\n  - @effect/schema@0.69.3\\n  - effect@3.5.9\\n  - @effect/platform@0.60.3\"\n```\n\n----------------------------------------\n\nTITLE: Extending Object Schema with Effect/Schema\nDESCRIPTION: This snippet demonstrates how to extend an object schema to include additional properties using Effect/Schema.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nconst DogWithBreed = Dog.pipe(\n  Schema.extend(\n    Schema.Struct({\n      breed: Schema.String\n    })\n  )\n)\n\n// Recommended alternative when working with structs\nconst DogWithBreed = Schema.Struct({\n  ...Dog.fields,\n  breed: Schema.String\n})\n```\n\n----------------------------------------\n\nTITLE: Installing @effect/platform-node with yarn\nDESCRIPTION: Command to install the Node.js platform package for @effect/cli using yarn\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/cli/README.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @effect/platform-node\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Tag Name Clash Error in TypeScript\nDESCRIPTION: Example showing how name clashes in Effect.Tag are now properly flagged as type errors when a property name conflicts with existing Tag properties.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_110\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect } from \"effect\"\n\nclass LoaderArgs extends Effect.Tag(\"@services/LoaderContext\")<\n  LoaderArgs,\n  { context: number }\n>() {}\n```\n\n----------------------------------------\n\nTITLE: Update @effect/platform dependency to 0.61.1\nDESCRIPTION: This patch updates the dependency `@effect/platform` to version 0.61.1. The update likely includes bug fixes, performance improvements, or new features within the platform package, ensuring compatibility and leveraging the latest enhancements.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n\"- Updated dependencies [[`11223bf`](https://github.com/Effect-TS/effect/commit/11223bf9cbf5b822e0bf9a9fb2b35b2ad88af692)]:\\n  - @effect/platform@0.61.1\"\n```\n\n----------------------------------------\n\nTITLE: Fixing TypeError in Arbitrary Generation with Generic Filters (TypeScript)\nDESCRIPTION: This snippet addresses a TypeError encountered when applying a filter to a schema in arbitrary generation. The fix ensures that arbitrary instances can be generated without error, even when filters are applied, by correcting property presence assumptions.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Arbitrary, Schema } from \"effect\"\n\nconst schema = Schema.BigIntFromSelf.pipe(Schema.filter(() => true))\n\nArbitrary.make(schema)\n// TypeError: Cannot read properties of undefined (reading 'min')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Arbitrary, Schema } from \"effect\"\n\nconst schema = Schema.BigIntFromSelf.pipe(Schema.filter(() => true))\n\nconst result = Arbitrary.make(schema) // Works correctly\n```\n\n----------------------------------------\n\nTITLE: Installing @effect/platform-node with pnpm\nDESCRIPTION: Command to install the Node.js platform package for @effect/cli using pnpm\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/cli/README.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @effect/platform-node\n```\n\n----------------------------------------\n\nTITLE: Optimization: Date.now Performance Improvement\nDESCRIPTION: Replacing new Date().getTime() with Date.now() for better performance in timestamp generation\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_147\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\nconst timestamp = new Date().getTime();\n\n// After\nconst timestamp = Date.now();\n```\n\n----------------------------------------\n\nTITLE: Using Dialect-Specific SQL Client\nDESCRIPTION: Shows how to access specific implementation features for a particular SQL dialect, such as using SQLite's export functionality\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-sqlite-wasm/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Sqlite from \"@effect/sql-sqlite-node\"\nimport { Effect } from \"effect\"\n\nEffect.gen(function* () {\n  const sql = yield* Sqlite.client.SqliteClient\n  const dump = yield* sql.export\n})\n```\n\n----------------------------------------\n\nTITLE: Improving Null Type Representation in JSONSchema\nDESCRIPTION: Enhancement to JSONSchema generation that uses { \"type\": \"null\" } to represent the null literal, which is more standard-compliant than using enum: [null].\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\nimport { JSONSchema, Schema } from \"effect\"\n\nconst schema = Schema.NullOr(Schema.String)\n\nconsole.log(JSON.stringify(JSONSchema.make(schema), null, 2))\n/*\n{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"anyOf\": [\n    {\n      \"type\": \"string\"\n    },\n    {\n      \"type\": \"null\"\n    }\n  ]\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in Effect TS platform\nDESCRIPTION: This snippet involves the update of dependencies for `@effect/platform` and `@effect/platform-node-shared` and gives the new version numbers together with the commit hash for the change.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node/CHANGELOG.md#2025-04-21_snippet_14\n\nLANGUAGE: none\nCODE:\n```\n\"- Updated dependencies [[`e6d4a37`](https://github.com/Effect-TS/effect/commit/e6d4a37c1d7e657b5ea44063a1cf586808228fe5)]:\\n  - @effect/platform@0.69.31\\n  - @effect/platform-node-shared@0.19.32\"\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in Effect TS platform\nDESCRIPTION: This snippet showcases the update of dependencies for `effect`, `@effect/platform`, and `@effect/platform-node-shared` within a patch change. It includes specific commit hashes and the updated versions of each dependency.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: none\nCODE:\n```\n\"- Updated dependencies [[`90906f7`](https://github.com/Effect-TS/effect/commit/90906f7f154b12c7182e8f39e3c55ef3937db857), [`3862cd3`](https://github.com/Effect-TS/effect/commit/3862cd3c7f6a542ed65fb81255b3bd696ce2f567), [`3862cd3`](https://github.com/Effect-TS/effect/commit/3862cd3c7f6a542ed65fb81255b3bd696ce2f567), [`343b6aa`](https://github.com/Effect-TS/effect/commit/343b6aa6ac4a74276bfc7c63ccbf4a1d72bc1bed), [`afba339`](https://github.com/Effect-TS/effect/commit/afba339adc11dad56b5a3b7ca94487e58f34d613)]:\\n  - effect@3.11.3\\n  - @effect/platform@0.70.4\\n  - @effect/platform-node-shared@0.20.4\"\n```\n\n----------------------------------------\n\nTITLE: Removing permits from workers to prevent pool resizing issues\nDESCRIPTION: This update removes the 'permits' feature from workers to prevent issues with pool resizing. It also ensures that worker pool construction errors are reported during creation rather than later.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_29\n\nLANGUAGE: markdown\nCODE:\n```\n- [#2801](https://github.com/Effect-TS/effect/pull/2801) [`1af94df`](https://github.com/Effect-TS/effect/commit/1af94df6b74aeb4f6ebcbe80e074b4cb252e62e3) Thanks @tim-smart! - remove `permits` from workers, to prevent issues with pool resizing\n\n- [#2801](https://github.com/Effect-TS/effect/pull/2801) [`1af94df`](https://github.com/Effect-TS/effect/commit/1af94df6b74aeb4f6ebcbe80e074b4cb252e62e3) Thanks @tim-smart! - ensure worker pool construction errors are reported during creation\n```\n\n----------------------------------------\n\nTITLE: Fixing Schema.TemplateLiteral Output Type in TypeScript\nDESCRIPTION: Fixes the output type of Schema.TemplateLiteral when arguments include a branded type. The new implementation simplifies the resulting type.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_64\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst schema = Schema.TemplateLiteral(\n  \"a \",\n  Schema.String.pipe(Schema.brand(\"MyBrand\"))\n)\n\n// type Type = `a ${string & Brand<\"MyBrand\">}`\ntype Type = typeof schema.Type\n```\n\n----------------------------------------\n\nTITLE: Update @effect/platform dependency to 0.58.25\nDESCRIPTION: This patch updates the `@effect/platform` dependency to version 0.58.25.  This ensures that the project benefits from the latest updates and improvements made to the platform package.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql/CHANGELOG.md#2025-04-21_snippet_18\n\nLANGUAGE: Markdown\nCODE:\n```\n\"- Updated dependencies [[`0623fca`](https://github.com/Effect-TS/effect/commit/0623fca41679b0e3c5a10dd0f8985f91670bd721)]:\\n  - @effect/platform@0.58.25\"\n```\n\n----------------------------------------\n\nTITLE: Pretty Print Declaration Implementation\nDESCRIPTION: Function to combine name and type formatting\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/printer/README.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst prettyDeclaration = (\n  name: string,\n  types: ReadonlyArray<string>\n): Doc.Doc<never> => Doc.catWithSpace(Doc.text(name), prettyTypes(types))\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in Effect TS platform\nDESCRIPTION: This snippet shows updating the dependencies for `effect`, `@effect/platform`, and `@effect/platform-node-shared`.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node/CHANGELOG.md#2025-04-21_snippet_23\n\nLANGUAGE: none\nCODE:\n```\n\"- Updated dependencies [[`c963886`](https://github.com/Effect-TS/effect/commit/c963886d5817986fcbd6bfa4ddf50aca8b6c8184), [`42c4ce6`](https://github.com/Effect-TS/effect/commit/42c4ce6f8d8c7d847e97757650a8ad9419a829d7)]:\\n  - @effect/platform@0.69.26\\n  - effect@3.10.17\\n  - @effect/platform-node-shared@0.19.27\"\n```\n\n----------------------------------------\n\nTITLE: Document Creation Example\nDESCRIPTION: Example of creating and formatting a document with type definitions\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/printer/README.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst name = \"example\"\nconst types = [\"Int\", \"Bool\", \"Char\", \"IO ()\"]\nconst doc: Doc.Doc<never> = prettyDeclaration(name, types)\n```\n\n----------------------------------------\n\nTITLE: Importing the Experimental Module in Effect.js\nDESCRIPTION: This code snippet shows the import path for the experimental module in the Effect.js library. It represents the package name that users would use to access experimental features.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/experimental/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`@effect/experimental`\n```\n\n----------------------------------------\n\nTITLE: Adding Type for Homogeneous Enum Schemas in JSONSchema\nDESCRIPTION: Enhancement to JSONSchema generation that adds the 'type' field for homogeneous enum schemas, making the generated schemas more specific and accurate according to JSON Schema standards.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\nimport { JSONSchema, Schema } from \"effect\"\n\nconst schema = Schema.Literal(\"a\", \"b\")\n\nconsole.log(JSON.stringify(JSONSchema.make(schema), null, 2))\n/*\n{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"string\",\n  \"enum\": [\n    \"a\",\n    \"b\"\n  ]\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Implementing DELETE Endpoint with Path Parameters\nDESCRIPTION: Shows how to create a DELETE endpoint with path parameters for user deletion\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpApiEndpoint, HttpApiSchema } from \"@effect/platform\"\nimport { Schema } from \"effect\"\n\n// Define a path parameter for the user ID\nconst idParam = HttpApiSchema.param(\"id\", Schema.NumberFromString)\n\n// Define a DELETE endpoint to delete a user by ID\nconst deleteUser = HttpApiEndpoint.del(\"deleteUser\")`/users/${idParam}`\n```\n\n----------------------------------------\n\nTITLE: Installing @effect/printer-ansi with pnpm\nDESCRIPTION: Command to install the @effect/printer-ansi package using pnpm package manager\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/printer-ansi/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @effect/printer-ansi\n```\n\n----------------------------------------\n\nTITLE: Handling Null Values in OpenAPI Schema\nDESCRIPTION: Shows how OpenAPI schemas handle null values differently from JSON schemas. OpenAPI uses an enum containing null, while JSON schemas use the type property set to null.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_101\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OpenApiJsonSchema } from \"@effect/platform\"\nimport { JSONSchema, Schema } from \"effect\"\n\nconst schema = Schema.Null\n\nconst openApiSchema = OpenApiJsonSchema.make(schema)\nconst jsonSchema = JSONSchema.make(schema)\n\nconsole.log(JSON.stringify(openApiSchema, null, 2))\n/*\nOutput:\n{\n  \"enum\": [\n    null\n  ]\n}\n*/\n\nconsole.log(JSON.stringify(jsonSchema, null, 2))\n/*\nOutput:\n{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"null\"\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Installing @effect/printer Package\nDESCRIPTION: Different package manager commands to install the @effect/printer package\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/printer/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @effect/printer\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @effect/printer\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @effect/printer\n```\n\nLANGUAGE: bash\nCODE:\n```\ndeno add npm:@effect/printer\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add @effect/printer\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in Effect TS platform\nDESCRIPTION: This snippet includes a list of updated dependencies for `effect`, `@effect/platform`, and `@effect/platform-node-shared`. It includes corresponding commit hashes and versions for the dependencies in the patch change.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node/CHANGELOG.md#2025-04-21_snippet_11\n\nLANGUAGE: none\nCODE:\n```\n\"- Updated dependencies [[`147434b`](https://github.com/Effect-TS/effect/commit/147434b03d5e1fd692dd9f126e5ab0910f3b76d3), [`6e69493`](https://github.com/Effect-TS/effect/commit/6e694930048bbaf98110f35f41566aeb9752d471), [`147434b`](https://github.com/Effect-TS/effect/commit/147434b03d5e1fd692dd9f126e5ab0910f3b76d3), [`5eff3f6`](https://github.com/Effect-TS/effect/commit/5eff3f6fa3aae7e86948a62cbfd63b8d6c3bdf92), [`d9fe79b`](https://github.com/Effect-TS/effect/commit/d9fe79bb5a3fe105d8e7a3bc2922a8ad936a5d10), [`251d189`](https://github.com/Effect-TS/effect/commit/251d189420bbba71990574e91098c499065f9a9b), [`5a259f3`](https://github.com/Effect-TS/effect/commit/5a259f3711b4369f55d885b568bdb21136155261), [`b4ce4ea`](https://github.com/Effect-TS/effect/commit/b4ce4ea7fd514a7e572f2dcd879c98f334981b0e), [`15fcc5a`](https://github.com/Effect-TS/effect/commit/15fcc5a0ea4bbf40ab48fa6a04fdda74f76f4c07), [`9bc9a47`](https://github.com/Effect-TS/effect/commit/9bc9a476800dc645903c888a68bb1d3baa3383c6), [`aadb8a4`](https://github.com/Effect-TS/effect/commit/aadb8a48d2cba197c06ec9996505510e48e4e5cb), [`1e2747c`](https://github.com/Effect-TS/effect/commit/1e2747c63a4820d1459cbbc88c71212983bd68bd), [`9264162`](https://github.com/Effect-TS/effect/commit/9264162a82783a651776fb7b87604564a63e7070), [`e0b9b09`](https://github.com/Effect-TS/effect/commit/e0b9b09e70c386b2da17d1f0a15b0511861c89e8), [`c36f3b9`](https://github.com/Effect-TS/effect/commit/c36f3b95df5ce9d71b66f22f26ce12eda8d3e848), [`672bde5`](https://github.com/Effect-TS/effect/commit/672bde5bec51c7d6f9862828e6a654cb2cb6f93d), [`aadb8a4`](https://github.com/Effect-TS/effect/commit/aadb8a48d2cba197c06ec9996505510e48e4e5cb)]:\\n  - effect@3.11.0\\n  - @effect/platform@0.70.0\\n  - @effect/platform-node-shared@0.20.0\"\n```\n\n----------------------------------------\n\nTITLE: Initial Release Changelog Entry\nDESCRIPTION: Initial release changelog entry documenting the addition of @effect/sql-sqlite-do package for Cloudflare durable object SQLite support.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-sqlite-do/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[#4141] [`b7a0a87`](https://github.com/Effect-TS/effect/commit/b7a0a87827056dfe6b6f8c460631c054b15ffcd5) Thanks @tim-smart! - add @effect/sql-sqlite-do for cloudflare durable object sqlite\n```\n\n----------------------------------------\n\nTITLE: Updated Library APIs and Features\nDESCRIPTION: This file documents changes made to the Effect-TS/effect library across different versions. Key changes include caching FiberId hash, adding Fiber{Map,Set} functionality, improving Effect.retry options, and various API additions and optimizations.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_146\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#1957](https://github.com/Effect-TS/effect/pull/1957) [`202befc`](https://github.com/Effect-TS/effect/commit/202befc2ecbeb117c4fa85ef9b12a3d3a48273d2) Thanks [@IMax153](https://github.com/IMax153)! - cache `FiberId` hash in the constructor\n\n- [#1951](https://github.com/Effect-TS/effect/pull/1951) [`ee4ff8a`](https://github.com/Effect-TS/effect/commit/ee4ff8a943141fcf2877af92c5877ee87a989fb9) Thanks [@github-actions](https://github.com/apps/github-actions)! - add Fiber{Map,Set}.makeRuntime\n\n- [#1951](https://github.com/Effect-TS/effect/pull/1951) [`ee4ff8a`](https://github.com/Effect-TS/effect/commit/ee4ff8a943141fcf2877af92c5877ee87a989fb9) Thanks [@github-actions](https://github.com/apps/github-actions)! - add Fiber{Set,Map}.runtime api\n\n- [#1952](https://github.com/Effect-TS/effect/pull/1952) [`10df798`](https://github.com/Effect-TS/effect/commit/10df798639e556f9d88265ef7fc3cf8a3bbe3874) Thanks [@tim-smart](https://github.com/tim-smart)! - avoid sleep for zero duration in schedule\n```\n\n----------------------------------------\n\nTITLE: Executing CLI Application Version Command in Shell\nDESCRIPTION: This command demonstrates how to run the CLI application to display its version using the '--version' flag.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/cli/README.md#2025-04-21_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nnpx tsx minigit.ts --version\n# Output: v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Updating OpenApi Version in Effect TS\nDESCRIPTION: This snippet updates the OpenApi version to 3.1.0. This change affects `@effect/platform` and `@effect/platform-node-shared` packages.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node/CHANGELOG.md#2025-04-21_snippet_15\n\nLANGUAGE: none\nCODE:\n```\n- [#4025](https://github.com/Effect-TS/effect/pull/4025) [`270f199`](https://github.com/Effect-TS/effect/commit/270f199b31810fd643e4c22818698adcbdb5d396) Thanks @tim-smart! - update OpenApi version to 3.1.0\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in TypeScript\nDESCRIPTION: This snippet illustrates updating several dependencies, including @effect/typeclass, @effect/printer, and effect. These updates ensure compatibility and access to the latest features and bug fixes in the respective packages. The updates are applied as part of a larger dependency management process.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/printer-ansi/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"- Updated dependencies [[`d987daa`](https://github.com/Effect-TS/effect/commit/d987daafaddd43b6ade74916a08236c19ea0a9fa), [`7b5eaa3`](https://github.com/Effect-TS/effect/commit/7b5eaa3838c79bf4bdccf91b94d61bbc38a2ec95), [`0724211`](https://github.com/Effect-TS/effect/commit/072421149c36010748ff6b6ee19c15c6cffefe09), [`9f2bc5a`](https://github.com/Effect-TS/effect/commit/9f2bc5a19e0b678a0a85e84daac290922b0fd57d), [`04fb8b4`](https://github.com/Effect-TS/effect/commit/04fb8b428b19bba85a2c79910c5e363340d074e7), [`d0471ca`](https://github.com/Effect-TS/effect/commit/d0471ca7b544746674b9e1750202da72b0a21233), [`bcf0900`](https://github.com/Effect-TS/effect/commit/bcf0900b58f449262556f80bff21e771a37272aa), [`6299b84`](https://github.com/Effect-TS/effect/commit/6299b84c11e5d1fe79fa538df8935018c7613747)]:\\n  - @effect/typeclass@0.22.0\\n  - @effect/printer@0.30.0\\n  - effect@2.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Dependency Updates Patch Change\nDESCRIPTION: List of dependency updates referencing specific commits\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/experimental/CHANGELOG.md#2025-04-21_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\nUpdated dependencies [[`5b46e99`](https://github.com/Effect-TS/effect/commit/5b46e996d30e2497eb23095e2c21eee04438edf5), [`87f7ef2`](https://github.com/Effect-TS/effect/commit/87f7ef28a3c27e2e4f2fcfa465f85bb2a45a3d6b), [`1d3a06b`](https://github.com/Effect-TS/effect/commit/1d3a06bb58ad1ac123ae8f9d42b4345f9c9c53c0), [`210d27e`](https://github.com/Effect-TS/effect/commit/210d27e999e066ea9b907301150c65f9ff080b39), [`1d3a06b`](https://github.com/Effect-TS/effect/commit/1d3a06bb58ad1ac123ae8f9d42b4345f9c9c53c0)]:\n  - @effect/schema@0.59.1\n  - effect@2.0.3\n  - @effect/platform-node@0.41.0\n  - @effect/platform@0.41.0\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in Effect TS platform\nDESCRIPTION: This snippet covers updating dependencies for `effect`, `@effect/platform`, and `@effect/platform-node-shared` packages.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node/CHANGELOG.md#2025-04-21_snippet_24\n\nLANGUAGE: none\nCODE:\n```\n\"- Updated dependencies [[`320557a`](https://github.com/Effect-TS/effect/commit/320557ab18d13c5e22fc7dc0d2a157eae461012f), [`4dca30c`](https://github.com/Effect-TS/effect/commit/4dca30cfcdafe4542e236489f71d6f171a5b4e38), [`1d99867`](https://github.com/Effect-TS/effect/commit/1d998671be3cd11043f232822e91dd8c98fccfa9), [`6dae414`](https://github.com/Effect-TS/effect/commit/6dae4147991a97ec14a99289bd25fadae7541e8d), [`6b0d737`](https://github.com/Effect-TS/effect/commit/6b0d737078bf63b97891e6bc47affc04b28f9cf7), [`d8356aa`](https://github.com/Effect-TS/effect/commit/d8356aad428a0c2290db52380220f81d9ec94232), [`7b93dd6`](https://github.com/Effect-TS/effect/commit/7b93dd622e2ab79c7072d79d0d9611e446202201)]:\\n  - @effect/platform@0.69.25\\n  - effect@3.10.16\\n  - @effect/platform-node-shared@0.19.26\"\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Multipart Support for Bun HTTP Server\nDESCRIPTION: This snippet details a patch change that fixes multipart support specifically for the Bun HTTP server. This fix was part of a pull request and has a corresponding commit hash.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node/CHANGELOG.md#2025-04-21_snippet_10\n\nLANGUAGE: none\nCODE:\n```\n- [#3835](https://github.com/Effect-TS/effect/pull/3835) [`5eff3f6`](https://github.com/Effect-TS/effect/commit/5eff3f6fa3aae7e86948a62cbfd63b8d6c3bdf92) Thanks @tim-smart! - fix multipart support for bun http server\n```\n\n----------------------------------------\n\nTITLE: Changelog Version Entries in Markdown\nDESCRIPTION: A structured changelog containing version updates and changes to the Effect-TS platform project, organized by version numbers and change types (Minor/Patch).\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_53\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#217](https://github.com/Effect-TS/platform/pull/217) [`7471ac1`](https://github.com/Effect-TS/platform/commit/7471ac139f3c6867cd0d228ec54e88abd1384f5c) Thanks [@tim-smart](https://github.com/tim-smart)! - add encode option to Worker & WorkerRunner\n\n## 0.26.0\n\n### Minor Changes\n\n- [#215](https://github.com/Effect-TS/platform/pull/215) [`59da2a6`](https://github.com/Effect-TS/platform/commit/59da2a6877e219b2ca0433aeeecab4ad7487816b) Thanks [@tim-smart](https://github.com/tim-smart)! - seperate request processing in http client\n```\n\n----------------------------------------\n\nTITLE: Importing SQL Implementation for ClickHouse in Markdown\nDESCRIPTION: This snippet shows the package name for the ClickHouse SQL implementation using @effect/sql. It also includes a brief description and a link to the full API documentation.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-clickhouse/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `@effect/sql-clickhouse`\n\nAn `@effect/sql` implementation for [ClickHouse](https://clickhouse.com/).\n\n## Documentation\n\n- **API Reference**: [View the full documentation](https://effect-ts.github.io/effect/docs/sql-clickhouse).\n```\n\n----------------------------------------\n\nTITLE: Schema.extend with Transformation and Struct Before Fix\nDESCRIPTION: Example showing how Schema.extend previously did not support combining a transformed schema with a struct schema, resulting in an error during execution.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst A = Schema.Struct({\n  a: Schema.String\n})\n\nconst B = Schema.Struct({\n  b: Schema.String\n})\n\nconst C = Schema.Struct({\n  c: Schema.String\n})\n\nconst AB = Schema.transform(A, B, {\n  strict: true,\n  decode: (a) => ({ b: a.a }),\n  encode: (b) => ({ a: b.b })\n})\n\n// Transformation + Struct\nconst schema = Schema.extend(AB, C)\n/*\nthrows:\nError: Unsupported schema or overlapping types\ndetails: cannot extend ({ readonly a: string } <-> { readonly b: string }) with { readonly c: string }\n*/\n```\n\n----------------------------------------\n\nTITLE: Version Change Links in Markdown\nDESCRIPTION: Links to specific commit changes in the project repository affecting dependencies and version updates.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/experimental/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[[`b3fe829`](https://github.com/Effect-TS/effect/commit/b3fe829e8b12726afe94086b5375968f41a26411), [`a58b7de`](https://github.com/Effect-TS/effect/commit/a58b7deb8bb1d3b0dd636decf5d16f115f37eb72), [`d90e8c3`](https://github.com/Effect-TS/effect/commit/d90e8c3090cbc78e2bc7b51c974df66ffefacdfa)]\n```\n\n----------------------------------------\n\nTITLE: Customizing Request Encoding\nDESCRIPTION: Demonstrates how to customize request encoding for different formats\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpApiEndpoint, HttpApiSchema } from \"@effect/platform\"\nimport { Schema } from \"effect\"\n\nconst createUser = HttpApiEndpoint.post(\"createUser\", \"/users\")\n  // Set the request payload as a string encoded with URL parameters\n  .setPayload(\n    Schema.Struct({\n      a: Schema.String // Parameter \"a\" must be a string\n    })\n      // Specify the encoding as URL parameters\n      .pipe(HttpApiSchema.withEncoding({ kind: \"UrlParams\" }))\n  )\n```\n\n----------------------------------------\n\nTITLE: Patch Changes for Effect-TS Dependencies\nDESCRIPTION: Update of multiple dependencies with various commit references and version bumps for @effect/platform, effect core, and @effect/platform-node packages\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/experimental/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Updated dependencies [[`5e43ce5`], [`289c13b`], [`76eb7d0`], [`8b4e75d`], [`fc5e0f0`], [`004fd2b`], [`b2a31be`], [`5514d05`], [`bf5f0ae`], [`3b19bcf`], [`b064b3b`], [`eb264ed`], [`289c13b`], [`f474678`], [`ee187d0`]]:\n  - @effect/platform@0.75.0\n  - effect@3.12.6\n  - @effect/platform-node@0.71.0\n```\n\n----------------------------------------\n\nTITLE: Preserving Identifier When Applying Refinements in JSONSchema for TypeScript\nDESCRIPTION: Fixes an issue where 'identifier' was ignored when a refinement was applied to a schema, ensuring proper $ref usage instead of inlining the schema definition.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_62\n\nLANGUAGE: typescript\nCODE:\n```\nimport { JSONSchema, Schema } from \"effect\"\n\nconst schema = Schema.NonEmptyString\n\nconsole.log(JSON.stringify(JSONSchema.make(schema), null, 2))\n/*\n{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"string\",\n  \"description\": \"a non empty string\",\n  \"title\": \"NonEmptyString\",\n  \"minLength\": 1\n}\n*/\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { JSONSchema, Schema } from \"effect\"\n\nconst schema = Schema.NonEmptyString\n\nconsole.log(JSON.stringify(JSONSchema.make(schema), null, 2))\n/*\n{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"$ref\": \"#/$defs/NonEmptyString\",\n  \"$defs\": {\n    \"NonEmptyString\": {\n      \"type\": \"string\",\n      \"description\": \"a non empty string\",\n      \"title\": \"NonEmptyString\",\n      \"minLength\": 1\n    }\n  }\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Dependency Version Updates - Patch Changes\nDESCRIPTION: Lists updated dependencies with their corresponding commit references\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-sqlite-bun/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n- Updated dependencies [[`3da0cfa`](https://github.com/Effect-TS/effect/commit/3da0cfa12c407fd930dc480be1ecc9217a8058f8), [`570e8d8`](https://github.com/Effect-TS/effect/commit/570e8d87e7c0e9ad4cd2686462fdb9b4812f7716), [`87c5687`](https://github.com/Effect-TS/effect/commit/87c5687de0782dab177b7861217fa3b040046282), [`f838c15`](https://github.com/Effect-TS/effect/commit/f838c15ca83938a5ee9bfec49deb025564a570ff), [`8edacca`](https://github.com/Effect-TS/effect/commit/8edacca37f8e37c01a63fec332b06d9361efaa7b)]:\n  - effect@3.0.1\n  - @effect/platform@0.49.1\n  - @effect/sql@0.1.1\n```\n\n----------------------------------------\n\nTITLE: Defining a Set Schema with Zod\nDESCRIPTION: Shows how to define a schema for `Set` objects using Zod's `z.set()` method.  The schema passed to `z.set()` defines the type of elements within the set.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\nconst numberSet = z.set(z.number())\ntype NumberSet = z.infer<typeof numberSet>\n// type NumberSet = Set<number>\n```\n\n----------------------------------------\n\nTITLE: Package Import Reference\nDESCRIPTION: Package name reference for the Effect SQL D1 implementation module.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-d1/README.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n@effect/sql-d1\n```\n\n----------------------------------------\n\nTITLE: JSDoc Example Tag Fix in Effect TS\nDESCRIPTION: This snippet describes wrapping JSDoc `@example` tags with a TypeScript fence to improve documentation generation. It also mentions closing issue #4002.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node/CHANGELOG.md#2025-04-21_snippet_19\n\nLANGUAGE: none\nCODE:\n```\n- [#4007](https://github.com/Effect-TS/effect/pull/4007) [`944025b`](https://github.com/Effect-TS/effect/commit/944025bc5ce139f4a85846aa689bf30ec06a8ec1) Thanks @gcanti! - Wrap JSDoc @example tags with a TypeScript fence, closes #4002\n```\n\n----------------------------------------\n\nTITLE: DeepMutable Transformation with Branded Types Before Fix\nDESCRIPTION: Example showing how DeepMutable previously incorrectly transformed branded primitive types, causing String prototype methods to be incorrectly included in the resulting type.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Brand, Types } from \"effect\"\n\ntype T = string & Brand.Brand<\"mybrand\">\n\n/*\ntype Result = {\n    [x: number]: string;\n    toString: () => string;\n    charAt: (pos: number) => string;\n    charCodeAt: (index: number) => number;\n    concat: (...strings: string[]) => string;\n    indexOf: (searchString: string, position?: number) => number;\n    ... 47 more ...;\n    [BrandTypeId]: {\n        ...;\n    };\n}\n*/\ntype Result = Types.DeepMutable<T>\n```\n\n----------------------------------------\n\nTITLE: Initializing and Accessing Module Version in TypeScript\nDESCRIPTION: This snippet defines a mutable variable 'moduleVersion' and two functions to get and set its value. The 'getCurrentVersion' function returns the current version, while 'setCurrentVersion' allows updating the version string.\nSOURCE: https://github.com/effect-ts/effect/blob/main/scripts/version.template.txt#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet moduleVersion = \"VERSION\"\n\nexport const getCurrentVersion = () => moduleVersion\n\nexport const setCurrentVersion = (version: string) => {\n  moduleVersion = version\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Pull Request Reference - Patch Changes\nDESCRIPTION: References to GitHub pull requests, commits and changes like forcing flush of otel provider before shutdown.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/opentelemetry/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n[#3254](https://github.com/Effect-TS/effect/pull/3254) [`1b45236`](https://github.com/Effect-TS/effect/commit/1b4523699f91bc1e04ce30de1c007f0c0cf6e214) Thanks @tim-smart! - force flush otel provider before calling shutdown\n```\n\n----------------------------------------\n\nTITLE: Fixing JSON Schema Output for AI Completions\nDESCRIPTION: This patch fixes the JSON schema output specifically for AI completions within the Effect-TS project. This addresses an issue related to how JSON schemas were being generated or handled in the context of AI-driven completions.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/ai/ai/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n\n```\n[#4139](https://github.com/Effect-TS/effect/pull/4139) [`1237ae8`](https://github.com/Effect-TS/effect/commit/1237ae847f6f0ff57eb7dcb4723ae6f5073fb925) Thanks @tim-smart! - fix json schema output for Ai completions\n```\n```\n\n----------------------------------------\n\nTITLE: Importing MySQL2 Package Reference\nDESCRIPTION: Package name and documentation reference for the Effect-TS MySQL2 SQL implementation\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-mysql2/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `@effect/sql-mysql2`\n\nAn `@effect/sql` implementation using the `mysql2` library.\n\n## Documentation\n\n- **API Reference**: [View the full documentation](https://effect-ts.github.io/effect/docs/sql-mysql2).\n```\n\n----------------------------------------\n\nTITLE: Committing Changes to Effect.js Project\nDESCRIPTION: Command for committing changes with a descriptive message, with instruction to include issue references when applicable.\nSOURCE: https://github.com/effect-ts/effect/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -am 'Add some feature'\n```\n\n----------------------------------------\n\nTITLE: Renaming terminology from unit to void in Effect-TS\nDESCRIPTION: This snippet demonstrates the renaming of the `unit` terminology to `void` within the Effect-TS library. This change is intended to improve clarity and consistency in the API.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/typeclass/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"Effect.unit // => Effect.void\nStream.unit // => Stream.void\n\n// etc\"\n```\n\n----------------------------------------\n\nTITLE: HTTP Server Helper Function for Bun\nDESCRIPTION: Helper function to simplify server setup and initialization for Bun runtime. Encapsulates common boilerplate code for server configuration.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_73\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { HttpPlatform, HttpServer } from \"@effect/platform\"\nimport { BunHttpServer, BunRuntime } from \"@effect/platform-bun\"\nimport { Layer } from \"effect\"\n\nexport const listen = (\n  app: Layer.Layer<\n    never,\n    never,\n    HttpPlatform.HttpPlatform | HttpServer.HttpServer\n  >,\n  port: number\n) =>\n  BunRuntime.runMain(\n    Layer.launch(Layer.provide(app, BunHttpServer.layer({ port })))\n  )\n```\n\n----------------------------------------\n\nTITLE: Version Control Updates in Markdown\nDESCRIPTION: Changelog entries documenting version updates and dependency changes across multiple versions of the @effect/sql package.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @effect/sql\n\n## 0.33.11\n\n### Patch Changes\n\n- Updated dependencies [[`e536127`](https://github.com/Effect-TS/effect/commit/e536127c1e6f2fb3a542c73ae919435a629a346b)]:\n  - effect@3.14.11\n  - @effect/experimental@0.44.11\n  - @effect/platform@0.80.11\n```\n\n----------------------------------------\n\nTITLE: Replacing isows with WebSocketConstructor service in Socket module\nDESCRIPTION: This change replaces the isows dependency with a WebSocketConstructor service in the Socket module. Users now need to provide a WebSocketConstructor implementation to the Socket.makeWebSocket API.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_31\n\nLANGUAGE: markdown\nCODE:\n```\n- [#2703](https://github.com/Effect-TS/effect/pull/2703) [`d57fbbb`](https://github.com/Effect-TS/effect/commit/d57fbbbd6c466936213a671fc3cd2390064f864e) Thanks @tim-smart! - replace isows with WebSocketConstructor service in @effect/platform/Socket\n\n  You now have to provide a WebSocketConstructor implementation to the `Socket.makeWebSocket` api.\n\n  ```ts\n  import * as Socket from \"@effect/platform/Socket\"\n  import * as NodeSocket from \"@effect/platform-node/NodeSocket\"\n  import { Effect } from \"effect\"\n\n  Socket.makeWebSocket(\"ws://localhost:8080\").pipe(\n    Effect.provide(NodeSocket.layerWebSocketConstructor) // use \"ws\" npm package\n  )\n  ```\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in package.json\nDESCRIPTION: Updates the version numbers of dependencies in package.json, including effect, @effect/platform, and @effect/platform-node-shared.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-bun/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"dependencies\": {\n  \"effect\": \"3.12.11\",\n  \"@effect/platform\": \"0.76.0\",\n  \"@effect/platform-node-shared\": \"0.26.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Update Dependencies for Patch 0.4.27\nDESCRIPTION: This patch updates dependencies for `effect`, `@effect/schema`, and `@effect/platform`. These updates likely contain bug fixes, performance improvements, and other enhancements to ensure stability and compatibility within the Effect-TS ecosystem.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql/CHANGELOG.md#2025-04-21_snippet_16\n\nLANGUAGE: Markdown\nCODE:\n```\n\"- Updated dependencies [[`edb0da3`](https://github.com/Effect-TS/effect/commit/edb0da383746d760f35d8582f5fb0cc0eeca9217), [`edb0da3`](https://github.com/Effect-TS/effect/commit/edb0da383746d760f35d8582f5fb0cc0eeca9217), [`a1db40a`](https://github.com/Effect-TS/effect/commit/a1db40a650ab842e778654f0d88e80f2ef4fd6f3), [`c8d3fb0`](https://github.com/Effect-TS/effect/commit/c8d3fb0fe23585f6efb724af51fbab3ba1ad6e83), [`dabd028`](https://github.com/Effect-TS/effect/commit/dabd028decf9b7983ca16ebe0f48c05c11a84b68), [`786b2ab`](https://github.com/Effect-TS/effect/commit/786b2ab29d525c877bb84035dac9e2d6499339d1), [`fc57354`](https://github.com/Effect-TS/effect/commit/fc573547d41667016fce05eaee75960fcc6dce4d)]:\\n  - effect@3.5.3\\n  - @effect/schema@0.68.23\\n  - @effect/platform@0.58.27\"\n```\n\n----------------------------------------\n\nTITLE: Referencing SQLite Implementation Package in Markdown\nDESCRIPTION: This snippet shows the package name for the SQLite implementation using Bun in the Effect-TS project. It's presented as a code block in Markdown format.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-sqlite-bun/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`@effect/sql-sqlite-bun`\n```\n\n----------------------------------------\n\nTITLE: TypeScript Import Setup\nDESCRIPTION: Required imports for using the pretty printer functionality\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/printer/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Doc from \"@effect/printer/Doc\"\nimport * as Array from \"effect/Array\"\nimport { pipe } from \"effect/Function\"\n```\n\n----------------------------------------\n\nTITLE: TypeScript Example for JSDoc Documentation\nDESCRIPTION: Sample TypeScript code showing how to import Effect module and execute a synchronous effect, used to demonstrate the JSDoc documentation format for examples.\nSOURCE: https://github.com/effect-ts/effect/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { Effect } from \"effect\"\n\nconsole.log(Effect.runSyncExit(Effect.succeed(1)))\n/*\nOutput:\n{\n  _id: \"Exit\",\n  _tag: \"Success\",\n  value: 1\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Change Documentation Format\nDESCRIPTION: Standardized format for documenting changes with commit references and version updates\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-libsql/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#4082](https://github.com/Effect-TS/effect/pull/4082) [`733f8be`](https://github.com/Effect-TS/effect/commit/733f8be16d71f46875598458e41d640c6f1b1d29) Thanks @thewilkybarkid! - Allow use of the URL object with libSQL\n\n- [#4090](https://github.com/Effect-TS/effect/pull/4090) [`e993627`](https://github.com/Effect-TS/effect/commit/e9936278d9b72a8b96c37cf7968d0e095069c488) Thanks @rocwang! - Add the missing dependency on @effect/experimental to @effect/sql-X\n```\n\n----------------------------------------\n\nTITLE: Anthropic Client Configuration Update\nDESCRIPTION: Patch update to ensure AnthropicClient.layerConfig includes AiModels.AiModels in its return type, matching AnthropicClient.layer.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/ai/anthropic/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[#4726] AnthropicClient.layerConfig has the same ROut as AnthropicClient.layer - specifically, AiModels.AiModels was missing\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Kysely Version Compatibility Matrix\nDESCRIPTION: Displays compatibility information between Kysely versions and Effect SQL Kysely support using a markdown table format.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-kysely/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Kysely version  | Effect SQL - Kysely support |\n| --------------- | --------------------------- |\n| 0.26.1 - 0.27.3 | ✅                          |\n```\n\n----------------------------------------\n\nTITLE: Update Multiple Dependencies for Tree-shakeability\nDESCRIPTION: This patch updates multiple dependencies, including `effect`, `@effect/platform`, and `@effect/schema`, and adds pure annotations to improve tree-shakeability. This ensures that unused code is effectively removed during bundling, resulting in smaller bundle sizes and improved application performance.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql/CHANGELOG.md#2025-04-21_snippet_11\n\nLANGUAGE: Markdown\nCODE:\n```\n\"- Updated dependencies [[`3afcc93`](https://github.com/Effect-TS/effect/commit/3afcc93413a3d910beb69e4ce9ae120e4adaffd5), [`99bddcf`](https://github.com/Effect-TS/effect/commit/99bddcfb3d6eab4d489d055404e26ad81afe52fc), [`6921c4f`](https://github.com/Effect-TS/effect/commit/6921c4fb8c45badff09b493043b85ca71302b560)]:\\n  - effect@3.5.7\\n  - @effect/platform@0.59.3\\n  - @effect/schema@0.68.27\"\n```\n\n----------------------------------------\n\nTITLE: Updating Effect Dependency in Package.json\nDESCRIPTION: Updates the effect dependency to use a caret version range in the package.json file.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/typeclass/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- [`d987daa`](https://github.com/Effect-TS/effect/commit/d987daafaddd43b6ade74916a08236c19ea0a9fa) Thanks [@mikearnaldi](https://github.com/mikearnaldi)! - Switch effect dependency to caret\n```\n\n----------------------------------------\n\nTITLE: Version Change Documentation\nDESCRIPTION: Markdown documentation of version changes and dependency updates using conventional changelog format\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/ai/openai/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [[`5b50ea4`](https://github.com/Effect-TS/effect/commit/5b50ea4a10cf9acd51f9624b2474d9d5ded74019), [`c170a68`](https://github.com/Effect-TS/effect/commit/c170a68b6266100774461fcd6c0e0fabb60112f2), [`a66c2eb`](https://github.com/Effect-TS/effect/commit/a66c2eb473245092cd41f04c2eb2b7b02cf53718), [`c9e5e1b`](https://github.com/Effect-TS/effect/commit/c9e5e1be17c0c84d3d4e2abc3c60215cdb56bbbe), [`7b3d58d`](https://github.com/Effect-TS/effect/commit/7b3d58d7aec2152ec282460871d3e9de45ed254d)]:\n  - effect@3.12.4\n  - @effect/platform@0.73.1\n  - @effect/ai@0.6.1\n  - @effect/experimental@0.37.1\n```\n\n----------------------------------------\n\nTITLE: Using Struct.keys as a Typed Alternative to Object.keys\nDESCRIPTION: Example of using Struct.keys as a type-safe alternative to Object.keys. This function returns the keys of an object with proper typing, excluding symbol properties.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_93\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Struct } from \"effect\"\n\nconst symbol: unique symbol = Symbol()\n\nconst value = {\n  a: 1,\n  b: 2,\n  [symbol]: 3\n}\n\nconst keys: Array<\"a\" | \"b\"> = Struct.keys(value)\n```\n\n----------------------------------------\n\nTITLE: Bug Fix Commit Reference\nDESCRIPTION: Pull request references for fixing stream chunk handling and schema corrections in OpenAI client implementation.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/ai/openai/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[#4630](https://github.com/Effect-TS/effect/pull/4630) [`3ed0b56`] Handle arbitrary length StreamChunkPart in OpenAiClient\n\n[#4638](https://github.com/Effect-TS/effect/pull/4638) [`d46d2c6`] Manually fix schema for `CreateChatCompletionResponse.logprobs`\n```\n\n----------------------------------------\n\nTITLE: Arbitrary Generation for Schema Classes\nDESCRIPTION: Shows how property-specific annotations like `arbitrary` are now respected when generating arbitrary instances for Schema classes, allowing more controlled random value generation.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Arbitrary, FastCheck, Schema } from \"effect\"\n\nclass Class extends Schema.Class<Class>(\"Class\")({\n  a: Schema.NumberFromString.annotations({\n    arbitrary: () => (fc) => fc.constant(1)\n  })\n}) {}\n\nconsole.log(FastCheck.sample(Arbitrary.make(Class), 5))\n// Output: [Class { a: 1 }, Class { a: 1 }, ...] \n```\n\n----------------------------------------\n\nTITLE: Package Name Reference\nDESCRIPTION: Package name declaration for the Effect AI module using inline code formatting in markdown.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/ai/ai/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`@effect/ai`\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Modification for Either\nDESCRIPTION: Changes type parameters for Either to simplify type declarations, allowing more concise type annotations\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/cli/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Either } from \"effect\"\n\nconst right: Either.Either<string> = Either.right(\"ok\")\n```\n\n----------------------------------------\n\nTITLE: Multiple Commit References\nDESCRIPTION: Links to multiple commits showing changes made to the project.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/experimental/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n[[`6f38dff`](https://github.com/Effect-TS/effect/commit/6f38dff41ffa34532cc2f25b90446550c5730bb6), [`a7b4b84`](https://github.com/Effect-TS/effect/commit/a7b4b84bd5a25f51aba922f9259c3a58c98c6a4e), [`a3b0e6c`](https://github.com/Effect-TS/effect/commit/a3b0e6c490772e6d44b5d98dcf2729c4d5310ecc), [`6f38dff`](https://github.com/Effect-TS/effect/commit/6f38dff41ffa34532cc2f25b90446550c5730bb6)]\n```\n\n----------------------------------------\n\nTITLE: AI Client Generation Update\nDESCRIPTION: Update to the generated AI clients implementation\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/ai/anthropic/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[#4592] update generated ai clients\n```\n\n----------------------------------------\n\nTITLE: Fixing HTTP ServerResponse cookie APIs\nDESCRIPTION: This patch fixes issues with the HTTP ServerResponse cookie APIs. It likely addresses bugs or inconsistencies in how cookies are handled in server responses.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_32\n\nLANGUAGE: markdown\nCODE:\n```\n- [#2698](https://github.com/Effect-TS/effect/pull/2698) [`5866c62`](https://github.com/Effect-TS/effect/commit/5866c621d7eb4cc84e4ba972bfdfd219734cd45d) Thanks @tim-smart! - fix http ServerResponse cookie apis\n```\n\n----------------------------------------\n\nTITLE: Version Number References in Markdown\nDESCRIPTION: Git commit references and version numbers used throughout the changelog\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-browser/CHANGELOG.md#2025-04-21_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n`903b599`\n`a3bcda4`\n`d0d5458`\n`843488f`\n`7e4e2a5`\n`d1c2b38`\n```\n\n----------------------------------------\n\nTITLE: Static HTML Example\nDESCRIPTION: Sample HTML file structure for static file serving example.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/README.md#2025-04-21_snippet_76\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <title>index.html</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  </head>\n  <body>\n    index.html\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Displaying Module Name in Markdown\nDESCRIPTION: This code snippet shows the module name '@effect/sql-sqlite-react-native' formatted as inline code in Markdown. It serves as the title for the documentation.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-sqlite-react-native/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# `@effect/sql-sqlite-react-native`\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Effect in tsconfig.json\nDESCRIPTION: Demonstrates the required TypeScript configuration for using the Effect framework, specifically enabling strict type-checking.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"strict\": true\n    // ...other options\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version Fix\nDESCRIPTION: A markdown entry documenting fixes for encoding logs to tracer span events and related dependency updates\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/opentelemetry/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#3644](https://github.com/Effect-TS/effect/pull/3644) [`bb5ec6b`](https://github.com/Effect-TS/effect/commit/bb5ec6b4b6a6f537394596c5a596faf52cb2aef4) Thanks @tim-smart! - fix encoding of logs to tracer span events\n\n- Updated dependencies [[`bb5ec6b`](https://github.com/Effect-TS/effect/commit/bb5ec6b4b6a6f537394596c5a596faf52cb2aef4)]:\n  - effect@3.8.3\n```\n\n----------------------------------------\n\nTITLE: Package Version Links\nDESCRIPTION: Git commit links for version updates of effect and @effect/sql packages\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/cluster/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[[`527c964`](https://github.com/Effect-TS/effect/commit/527c9645229f5be9714a7e60a38a9e753c4bbfb1)]:\n  - effect@3.13.10\n  - @effect/sql@0.32.1\n```\n\n----------------------------------------\n\nTITLE: Version Update Entry - v0.29.21\nDESCRIPTION: Changelog entry showing dependency updates for v0.29.21 including effect, @effect/rpc, @effect/platform and @effect/sql\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/cluster/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [[`e536127`](https://github.com/Effect-TS/effect/commit/e536127c1e6f2fb3a542c73ae919435a629a346b), [`b5ad11e`](https://github.com/Effect-TS/effect/commit/b5ad11e511424c6d5c32e34e7ee9d04f0110617d)]:\n  - effect@3.14.11\n  - @effect/rpc@0.55.16\n  - @effect/platform@0.80.11\n  - @effect/sql@0.33.11\n```\n\n----------------------------------------\n\nTITLE: Handling Additional Properties with Zod\nDESCRIPTION: This snippet shows how to handle additional properties that are not defined in a Zod object schema using the .passthrough() method.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nconst person = z.object({\n  name: z.string()\n})\n\nperson.parse({\n  name: \"bob dylan\",\n  extraKey: 61\n})\n// => { name: \"bob dylan\" }\n// extraKey has been stripped\n\nperson.passthrough().parse({\n  name: \"bob dylan\",\n  extraKey: 61\n})\n// => { name: \"bob dylan\", extraKey: 61 }\n```\n\n----------------------------------------\n\nTITLE: Using Structured Output with Non-Identified Schema in TypeScript\nDESCRIPTION: Demonstrates how to use the Completions.structured API with a non-identified schema by passing a correlationId parameter. This allows for using simple schemas or inline schemas with AI APIs that return structured outputs.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/ai/ai/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Completions } from \"@effect/ai\"\nimport { OpenAiClient, OpenAiCompletions } from \"@effect/ai-openai\"\nimport { NodeHttpClient } from \"@effect/platform-node\"\nimport { Config, Effect, Layer, Schema, String } from \"effect\"\n\nconst OpenAi = OpenAiClient.layerConfig({\n  apiKey: Config.redacted(\"OPENAI_API_KEY\")\n}).pipe(Layer.provide(NodeHttpClient.layerUndici))\n\nconst Gpt4oCompletions = OpenAiCompletions.layer({\n  model: \"gpt-4o\"\n}).pipe(Layer.provide(OpenAi))\n\nconst program = Effect.gen(function* () {\n  const completions = yield* Completions.Completions\n\n  const CalendarEvent = Schema.Struct({\n    name: Schema.String,\n    date: Schema.DateFromString,\n    participants: Schema.Array(Schema.String)\n  })\n\n  yield* completions.structured({\n    correlationId: \"CalendarEvent\",\n    schema: CalendarEvent,\n    input: String.stripMargin(`\n      |Extract event information from the following prose:\n      |\n      |Alice and Bob are going to a science fair on Friday.\n    `)\n  })\n})\n\nprogram.pipe(Effect.provide(Gpt4oCompletions), Effect.runPromise)\n```\n\n----------------------------------------\n\nTITLE: Updating Context Tag in Effect-TS TypeScript\nDESCRIPTION: This snippet updates the way tags are created within the Effect-TS context. It mandates the use of string keys for tags and introduces the `GenericTag` for creating tags with better debugging capabilities. The code includes examples of creating services using tags and demonstrates the updated type parameters for the `Effect` object. Dependencies include the Effect-TS library and a basic understanding of Context and You may need Typescript setup.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-browser/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Context } from \"effect\"\ninterface Service {\n  readonly _: unique symbol\n}\nconst Service = Context.GenericTag<\n  Service,\n  {\n    number: Effect.Effect<never, never, number>\n  }\n>(\"Service\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Context } from \"effect\"\nclass Service extends Context.Tag(\"Service\")<\n  Service,\n  {\n    number: Effect.Effect<never, never, number>\n  }\n> {}\n```\n\n----------------------------------------\n\nTITLE: Version Update Formatting\nDESCRIPTION: Markdown formatting for version number headers and patch changes\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node-shared/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.21.5\n\n### Patch Changes\n```\n\n----------------------------------------\n\nTITLE: HttpClient Method Usage Example\nDESCRIPTION: This example shows how to use the new HttpClient methods to make GET and POST requests. It also shows how to execute a request instance using HttpClientRequest, demonstrating the updated interface after the refactoring in version 0.44.0.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-browser/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport {\n  FetchHttpClient,\n  HttpClient,\n  HttpClientRequest\n} from \"@effect/platform\"\nimport { Effect } from \"effect\"\n\nEffect.gen(function* () {\n  const client = yield* HttpClient.HttpClient\n\n  // make a get request\n  yield* client.get(\"https://jsonplaceholder.typicode.com/todos/1\")\n  // make a post request\n  yield* client.post(\"https://jsonplaceholder.typicode.com/todos\")\n\n  // execute a request instance\n  yield* client.execute(\n    HttpClientRequest.get(\"https://jsonplaceholder.typicode.com/todos/1\")\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Version History\nDESCRIPTION: Documentation of package version changes and dependencies\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/cluster/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.28.0\n\n### Patch Changes\n\n- Updated dependencies [[`2976e52`](https://github.com/Effect-TS/effect/commit/2976e52538d9dc9ffdcbc84d4ac748cff9305971)]:\n  - effect@3.13.9\n  - @effect/sql@0.32.0\n```\n\n----------------------------------------\n\nTITLE: Version Update Commit References\nDESCRIPTION: Lists of commit references showing dependency updates and version changes for the Effect-TS library ecosystem\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-libsql/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[[`1d3df5b`](https://github.com/Effect-TS/effect/commit/1d3df5bc4324e88a392c348db35fd9d029c7b25e)]:\n  - @effect/platform@0.71.1\n  - @effect/experimental@0.34.1\n  - @effect/sql@0.23.1\n```\n\n----------------------------------------\n\nTITLE: Replace /platform RefailError with cause property\nDESCRIPTION: This change replaces the `/platform` RefailError with the use of the \"cause\" property. This modification likely improves error handling and provides more context when errors occur within the platform, utilizing the cause property to encapsulate the underlying reason for the failure.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql/CHANGELOG.md#2025-04-21_snippet_14\n\nLANGUAGE: Markdown\nCODE:\n```\n\"- [#3260](https://github.com/Effect-TS/effect/pull/3260) [`53c0db0`](https://github.com/Effect-TS/effect/commit/53c0db06872d5b5edea2a706e83249908385325c) Thanks @tim-smart! - replace /platform RefailError with use of the \\\"cause\\\" property\"\n```\n\n----------------------------------------\n\nTITLE: Installing Effect Platform Bun Package Reference\nDESCRIPTION: Package name reference for the Effect Platform Bun implementation package.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-bun/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@effect/platform-bun\n```\n\n----------------------------------------\n\nTITLE: Version Number Updates - Markdown\nDESCRIPTION: Version number and dependency updates shown in changelog format, with commit references and affected packages.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-bun/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.60.21\n\n### Patch Changes\n\n- Updated dependencies [[`e536127`](https://github.com/Effect-TS/effect/commit/e536127c1e6f2fb3a542c73ae919435a629a346b), [`b5ad11e`](https://github.com/Effect-TS/effect/commit/b5ad11e511424c6d5c32e34e7ee9d04f0110617d)]:\n  - effect@3.14.11\n  - @effect/rpc@0.55.16\n  - @effect/cluster@0.29.21\n  - @effect/platform@0.80.11\n  - @effect/platform-node-shared@0.30.21\n  - @effect/sql@0.33.11\n```\n\n----------------------------------------\n\nTITLE: Updated Dependencies Reference\nDESCRIPTION: Lists of updated dependency commits and versions\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/opentelemetry/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n[[`ed0dde4`](https://github.com/Effect-TS/effect/commit/ed0dde4888e6f1a97ad5bba06b755d26a6a1c52e), [`ca775ce`](https://github.com/Effect-TS/effect/commit/ca775cec53baebc1a43d9b8852a3ac6726178498), [`5be9cc0`](https://github.com/Effect-TS/effect/commit/5be9cc044025a9541b9b7acefa2d3fc05fa1301b), [`203658f`](https://github.com/Effect-TS/effect/commit/203658f8001c132b25764ab70344b171683b554c), [`eb1c4d4`](https://github.com/Effect-TS/effect/commit/eb1c4d44e54b9d8d201a366d1ff94face2a6dcd3)]]:\\n  - effect@3.5.4\n```\n\n----------------------------------------\n\nTITLE: Patch Version Updates Changelog Entry\nDESCRIPTION: Markdown changelog entry documenting patch version updates and dependency changes across multiple versions.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-kysely/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [[`e536127`](https://github.com/Effect-TS/effect/commit/e536127c1e6f2fb3a542c73ae919435a629a346b)]:\n  - effect@3.14.11\n  - @effect/sql@0.33.11\n```\n\n----------------------------------------\n\nTITLE: Extracting Keys of an Object Schema with Effect/Schema\nDESCRIPTION: This snippet demonstrates how to create a schema of object keys using Effect/Schema.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n//      ┌─── Schema<\"name\" | \"age\", \"name\" | \"age\", never>\n//      ▼\nconst keySchema = Schema.keyof(Dog)\n```\n\n----------------------------------------\n\nTITLE: Adding Support for Nested TemplateLiteral Parameters in TypeScript\nDESCRIPTION: Demonstration of the enhanced capability to use TemplateLiteral and TemplateLiteralParser with nested parameters, which previously caused errors. This enables more complex string pattern matching.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\n// Schema<readonly [\"<\", readonly [\"h\", 2 | 1], \">\"], \"<h2>\" | \"<h1>\", never>\nconst schema = Schema.TemplateLiteralParser(\n  \"<\",\n  Schema.TemplateLiteralParser(\"h\", Schema.Literal(1, 2)),\n  \">\"\n)\n\nconsole.log(Schema.decodeUnknownSync(schema)(\"<h1>\"))\n// Output: [ '<', [ 'h', 1 ], '>' ]\n```\n\n----------------------------------------\n\nTITLE: Commit URL Reference\nDESCRIPTION: Markdown link references to commit URLs for tracking changes\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node-shared/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[`1c08a0b`](https://github.com/Effect-TS/effect/commit/1c08a0b8505badcffb4d9cade5a746ea90c9557e), [`1ce703b`](https://github.com/Effect-TS/effect/commit/1ce703b041bbd7560c5c437c9b9be48f027937fd)\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in Effect TS platform\nDESCRIPTION: This snippet illustrates how dependencies for `@effect/platform`, `effect`, and `@effect/platform-node-shared` are updated in a patch change. It shows the updated dependency versions and their associated commit hashes.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: none\nCODE:\n```\n\"- Updated dependencies [[`415f4c9`](https://github.com/Effect-TS/effect/commit/415f4c98321868531727a83cbaad70164f5e4c40), [`518b258`](https://github.com/Effect-TS/effect/commit/518b258a8a67ecd332a9252c35cc060f8368dee2), [`6e323a3`](https://github.com/Effect-TS/effect/commit/6e323a36faaee46b328c8e3cf60a76b3aff9907f), [`518b258`](https://github.com/Effect-TS/effect/commit/518b258a8a67ecd332a9252c35cc060f8368dee2), [`6e323a3`](https://github.com/Effect-TS/effect/commit/6e323a36faaee46b328c8e3cf60a76b3aff9907f)]:\\n  - @effect/platform@0.70.5\\n  - effect@3.11.4\\n  - @effect/platform-node-shared@0.20.5\"\n```\n\n----------------------------------------\n\nTITLE: Update Dependencies for Patch 0.4.24\nDESCRIPTION: This patch updates the dependencies `effect`, `@effect/platform`, and `@effect/schema`. This update ensures the project is using the latest versions of these packages, which may include bug fixes, performance improvements, and new features.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql/CHANGELOG.md#2025-04-21_snippet_19\n\nLANGUAGE: Markdown\nCODE:\n```\n\"- Updated dependencies [[`55fdd76`](https://github.com/Effect-TS/effect/commit/55fdd761ee95afd73b6a892c13fee92b36c02837)]:\\n  - effect@3.5.1\\n  - @effect/platform@0.58.24\\n  - @effect/schema@0.68.21\"\n```\n\n----------------------------------------\n\nTITLE: Adding once:true to abort event listeners for AbortController\nDESCRIPTION: This change adds { once: true } to all 'abort' event listeners for AbortController, ensuring that handlers are automatically removed after execution to prevent potential memory leaks.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_33\n\nLANGUAGE: markdown\nCODE:\n```\n- [#2761](https://github.com/Effect-TS/effect/pull/2761) [`17fc22e`](https://github.com/Effect-TS/effect/commit/17fc22e132593c5caa563705a4748ba0f04a853c) Thanks @KhraksMamtsov! - Add `{ once: true }` to all `\"abort\"` event listeners for `AbortController` to automatically remove handlers after execution\n```\n\n----------------------------------------\n\nTITLE: Adding KeyValueStore.layerStorage wrapper for Storage type in Effect-TS\nDESCRIPTION: This change adds a KeyValueStore.layerStorage function to wrap instances of the Storage type. This allows for integration with the browser's localStorage or sessionStorage APIs.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_26\n\nLANGUAGE: markdown\nCODE:\n```\n- [#2737](https://github.com/Effect-TS/effect/pull/2737) [`2c2280b`](https://github.com/Effect-TS/effect/commit/2c2280b98a11fc002663c55792a4fa5781cd5fb6) Thanks @jessekelly881! - added KeyValueStore.layerStorage to wrap instances of the `Storage` type.\n```\n\n----------------------------------------\n\nTITLE: Updating Effect Dependency Version\nDESCRIPTION: Updates the effect dependency to version 2.0.0 in the package.json file.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/typeclass/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- Updated dependencies [[`d987daa`](https://github.com/Effect-TS/effect/commit/d987daafaddd43b6ade74916a08236c19ea0a9fa), [`7b5eaa3`](https://github.com/Effect-TS/effect/commit/7b5eaa3838c79bf4bdccf91b94d61bbc38a2ec95), [`0724211`](https://github.com/Effect-TS/effect/commit/072421149c36010748ff6b6ee19c15c6cffefe09), [`9f2bc5a`](https://github.com/Effect-TS/effect/commit/9f2bc5a19e0b678a0a85e84daac290922b0fd57d), [`04fb8b4`](https://github.com/Effect-TS/effect/commit/04fb8b428b19bba85a2c79910c5e363340d074e7), [`d0471ca`](https://github.com/Effect-TS/effect/commit/d0471ca7b544746674b9e1750202da72b0a21233), [`bcf0900`](https://github.com/Effect-TS/effect/commit/bcf0900b58f449262556f80bff21e771a37272aa), [`6299b84`](https://github.com/Effect-TS/effect/commit/6299b84c11e5d1fe79fa538df8935018c7613747)]:\n  - effect@2.0.0\n```\n\n----------------------------------------\n\nTITLE: Passing Context to HTTP Application Handlers - TypeScript\nDESCRIPTION: This snippet allows developers to pass contextual data to HTTP application handlers in Effect-TS, enabling dynamic and request-scoped responses.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Context, Effect } from \"effect\"\nimport { HttpApp, HttpServerResponse } from \"@effect/platform\"\n\nclass Env extends Context.Reference<Env>()(\"Env\", {\n  defaultValue: () => ({ foo: \"bar\" })\n}) {}\n\nconst handler = HttpApp.toWebHandler(\n  Effect.gen(function* () {\n    const env = yield* Env\n    return yield* HttpServerResponse.json(env)\n  })\n)\n\nconst response = await handler(\n  new Request(\"http://localhost:3000/\"),\n  Env.context({ foo: \"baz\" })\n)\n\nassert.deepStrictEqual(await response.json(), {\n  foo: \"baz\"\n})\n```\n\n----------------------------------------\n\nTITLE: Using HttpClientResponse Methods with Explicit Scoping in TypeScript\nDESCRIPTION: Demonstrates how to use HttpClientResponse methods directly with explicit Effect.scoped after the removal of scoped response helpers.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node/CHANGELOG.md#2025-04-21_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FetchHttpClient, HttpClient } from \"@effect/platform\"\nimport { Effect } from \"effect\"\n\nEffect.gen(function* () {\n  const client = yield* HttpClient.HttpClient\n\n  yield* client.get(\"https://jsonplaceholder.typicode.com/todos/1\").pipe(\n    Effect.flatMap((response) => response.json),\n    Effect.scoped // supply the `Scope`\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Installing @effect/platform-node with npm\nDESCRIPTION: Command to install the Node.js platform package for @effect/cli using npm\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/cli/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @effect/platform-node\n```\n\n----------------------------------------\n\nTITLE: Installing Effect Core Package via npm\nDESCRIPTION: Shows the command to install the 'effect' core package using npm as the package manager.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install effect\n```\n\n----------------------------------------\n\nTITLE: Adding Support for Schema.OptionFromUndefinedOr in JSON Schema Generation\nDESCRIPTION: Code example showing how the implementation enables JSON Schema generation with Schema.OptionFromUndefinedOr, which previously threw errors. The fix allows proper schema output without annotations.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { JSONSchema, Schema } from \"effect\"\n\nconst schema = Schema.Struct({\n  a: Schema.OptionFromUndefinedOr(Schema.Number)\n})\n\nconsole.log(JSON.stringify(JSONSchema.make(schema), null, 2))\n/*\nOutput:\n{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"required\": [],\n  \"properties\": {\n    \"a\": {\n      \"type\": \"number\"\n    }\n  },\n  \"additionalProperties\": false\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Updating Pluck Type Signature in Schema (TypeScript)\nDESCRIPTION: Updates the pluck function type signature in the Schema module to respect optional fields, ensuring correct typing for plucked optional properties.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst schema1 = Schema.Struct({ a: Schema.optional(Schema.String) })\n\n/*\nconst schema2: Schema.Schema<string | undefined, {\n    readonly a?: string | undefined;\n}, never>\n*/\nconst schema2 = Schema.pluck(schema1, \"a\")\n```\n\n----------------------------------------\n\nTITLE: Simplified HTTP Client Request Handling in TypeScript\nDESCRIPTION: Demonstrates the new simplified HTTP client request pattern with built-in response helpers in the Effect-TS platform\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-bun/CHANGELOG.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Http from \"@effect/platform/HttpClient\"\nimport { Effect } from \"effect\"\n\n// instead of\nHttp.request.get(\"/\").pipe(\n  Http.client.fetchOk(),\n  Effect.flatMap((_) => _.json),\n  Effect.scoped\n)\n\n// you can do\nHttp.request.get(\"/\").pipe(Http.client.fetchOk(), Http.response.json)\n\n// other helpers include\nHttp.response.text\nHttp.response.stream\nHttp.response.arrayBuffer\nHttp.response.urlParamsBody\nHttp.response.formData\nHttp.response.schema * Effect\n```\n\n----------------------------------------\n\nTITLE: Defining a Variadic Tuple Schema with Zod\nDESCRIPTION: Shows how to define a variadic tuple schema in Zod using the `.rest()` method. This allows a tuple to include additional elements of a specific type after a fixed set of elements.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nconst variadicTuple = z.tuple([z.string()]).rest(z.number())\nconst result = variadicTuple.parse([\"hello\", 1, 2, 3])\n// => [string, ...number[]];\n```\n\n----------------------------------------\n\nTITLE: Installing @effect/cli with npm\nDESCRIPTION: Command to install the @effect/cli package using npm package manager\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/cli/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @effect/cli\n```\n\n----------------------------------------\n\nTITLE: Catching Logger Defects in TypeScript\nDESCRIPTION: Improvement to catch logger defects that occur when calling .toJSON on data types in the Effect library.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_69\n\nLANGUAGE: typescript\nCODE:\n```\n.toJSON\n```\n\n----------------------------------------\n\nTITLE: Restructuring HttpClient Usage in TypeScript\nDESCRIPTION: This snippet illustrates the change in how HttpClient is imported and used in the Effect-TS library. Previously, the class ‘HttpClient’ was directly imported and the requests were called on this import. The updated approach requires importing 'HttpClientRequest' to perform requests, hence promoting better module structure and clarity.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-bun/CHANGELOG.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpClient } from \"@effect/platform\"\n\nHttpClient.request.get(\"/\").pipe(HttpClient.client.fetchOk)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpClient, HttpClientRequest } from \"@effect/platform\"\n\nHttpClientRequest.get(\"/\").pipe(HttpClient.fetchOk)\n```\n\n----------------------------------------\n\nTITLE: Installing @effect/cli with yarn\nDESCRIPTION: Command to install the @effect/cli package using yarn package manager\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/cli/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @effect/cli\n```\n\n----------------------------------------\n\nTITLE: Cached Hash Implementation in TypeScript\nDESCRIPTION: Example of implementing cached hashing for immutable data structures using Hash.cached.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_131\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Data, Hash } from \"effect\"\n\nclass User extends Data.Class<{\n  id: number\n  name: string\n}> {\n  [Hash.symbol]() {\n    return Hash.cached(this, Hash.string(`${this.id}-${this.name}`))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Context.Tag vs Context.GenericTag in Effect.js\nDESCRIPTION: Shows how the API has changed requiring a string key for all tags and renaming 'Tag' to 'GenericTag' for better debugging and global tag identification.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/rpc/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Context } from \"effect\"\ninterface Service {\n  readonly _: unique symbol\n}\nconst Service = Context.Tag<\n  Service,\n  {\n    number: Effect.Effect<never, never, number>\n  }\n>()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Context } from \"effect\"\ninterface Service {\n  readonly _: unique symbol\n}\nconst Service = Context.GenericTag<\n  Service,\n  {\n    number: Effect.Effect<never, never, number>\n  }\n>(\"Service\")\n```\n\n----------------------------------------\n\nTITLE: Standard Schema Generation\nDESCRIPTION: Example showing standard schema generation with JSON schema output for a Person struct.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { JSONSchema, Schema } from \"effect\"\n\nconst Person = Schema.Struct({\n  name: Schema.optionalWith(Schema.NonEmptyString, { exact: true })\n})\n\nconst standardSchema = Schema.standardSchemaV1(Person)\n\nconsole.log(JSONSchema.make(standardSchema))\n```\n\n----------------------------------------\n\nTITLE: DeepMutable Transformation with Branded Types After Fix\nDESCRIPTION: Example showing how DeepMutable now correctly preserves branded primitive types, ensuring that branded types remain unchanged during transformation and preventing type inconsistencies.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Brand, Types } from \"effect\"\n\ntype T = string & Brand.Brand<\"mybrand\">\n\n// type Result = string & Brand.Brand<\"mybrand\">\ntype Result = Types.DeepMutable<T>\n```\n\n----------------------------------------\n\nTITLE: Update @effect/schema dependency to 0.69.0\nDESCRIPTION: This patch updates the `@effect/schema` and `@effect/platform` dependencies to version 0.69.0 and 0.60.0 respectively. These updates bring the project up to date with the newest features, improvements, and bug fixes available in the `@effect/schema` and `@effect/platform` packages.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql/CHANGELOG.md#2025-04-21_snippet_9\n\nLANGUAGE: Markdown\nCODE:\n```\n\"- Updated dependencies [[`20807a4`](https://github.com/Effect-TS/effect/commit/20807a45edeb4334e903dca5d708cd62a71702d8)]:\\n  - @effect/schema@0.69.0\\n  - @effect/platform@0.60.0\"\n```\n\n----------------------------------------\n\nTITLE: Deduplicating Error Schemas in OpenAPI Spec Generation\nDESCRIPTION: This snippet shows how identical error schemas are deduplicated in the generated OpenAPI specification, improving readability and reducing redundancy.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  HttpApi,\n  HttpApiEndpoint,\n  HttpApiGroup,\n  OpenApi\n} from \"@effect/platform\"\nimport { Schema } from \"effect\"\n\nconst err = Schema.String.annotations({ identifier: \"err\" })\nconst api = HttpApi.make(\"api\")\n  .add(\n    HttpApiGroup.make(\"group1\")\n      .add(\n        HttpApiEndpoint.get(\"get1\", \"/1\")\n          .addSuccess(Schema.String)\n          .addError(err)\n          .addError(err)\n      )\n      .addError(err)\n      .addError(err)\n  )\n  .addError(err)\n  .addError(err)\n\nconst spec = OpenApi.fromApi(api)\n\nconsole.log(JSON.stringify(spec.paths, null, 2))\n```\n\n----------------------------------------\n\nTITLE: Referencing @effect/platform-node-shared Package in Markdown\nDESCRIPTION: This code snippet shows how to reference the @effect/platform-node-shared package in a markdown file. It includes a brief description of the package's purpose and a link to the full documentation.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node-shared/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `@effect/platform-node-shared`\n\nProvides shared utilities and abstractions used by the [`@effect/platform-node`](https://github.com/Effect-TS/effect/tree/main/packages/platform-node) package.\n\n## Documentation\n\n- **API Reference**: [View the full documentation](https://effect-ts.github.io/effect/docs/platform-node-shared).\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in Effect TS platform\nDESCRIPTION: This snippet presents updating the dependencies for the `effect`, `@effect/platform`, and `@effect/platform-node-shared` packages.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node/CHANGELOG.md#2025-04-21_snippet_22\n\nLANGUAGE: none\nCODE:\n```\n\"- Updated dependencies [[`af409cf`](https://github.com/Effect-TS/effect/commit/af409cf1d2ff973be11cc079ea373eaeedca25de), [`beaccae`](https://github.com/Effect-TS/effect/commit/beaccae2d15931e9fe475fb50a0b3638243fe3f7)]:\\n  - effect@3.10.18\\n  - @effect/platform@0.69.27\\n  - @effect/platform-node-shared@0.19.28\"\n```\n\n----------------------------------------\n\nTITLE: Update multiple dependencies to version 3.6.0\nDESCRIPTION: This patch updates several dependencies, including `effect`, `@effect/schema`, and `@effect/platform`, to newer versions (3.6.0, 0.70.0, and 0.61.0 respectively). These updates likely include a combination of bug fixes, new features, and performance improvements, ensuring the project benefits from the latest enhancements and stays compatible with updated dependencies.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n\"- Updated dependencies [[`1e0fe80`](https://github.com/Effect-TS/effect/commit/1e0fe802b36c257971296617473ce0abe730e8dc), [`8135294`](https://github.com/Effect-TS/effect/commit/8135294b591ea94fde7e6f94a504608f0e630520), [`cd255a4`](https://github.com/Effect-TS/effect/commit/cd255a48872d8fb924cf713ef73f0883a9cc6987), [`3845646`](https://github.com/Effect-TS/effect/commit/3845646828e98f3c7cda1217f6cfe5f642ac0603), [`2d09078`](https://github.com/Effect-TS/effect/commit/2d09078c5948b37fc2f79ef858fe4ca3e4814085), [`4bce5a0`](https://github.com/Effect-TS/effect/commit/4bce5a0274203550ccf117d830721891b0a3d182), [`4ddbff0`](https://github.com/Effect-TS/effect/commit/4ddbff0bb4e3ffddfeb509c59835b83245fb975e), [`e74cc38`](https://github.com/Effect-TS/effect/commit/e74cc38cb420a320c4d7ef98180f19d452a8b316), [`bb069b4`](https://github.com/Effect-TS/effect/commit/bb069b49ef291c532a02c1e8e74271f6d1bb32ec), [`cd255a4`](https://github.com/Effect-TS/effect/commit/cd255a48872d8fb924cf713ef73f0883a9cc6987), [`7d02174`](https://github.com/Effect-TS/effect/commit/7d02174af3bcbf054e5cdddb821c91d0f47e8285)]:\\n  - effect@3.6.0\\n  - @effect/schema@0.70.0\\n  - @effect/platform@0.61.0\"\n```\n\n----------------------------------------\n\nTITLE: Adding 'from' Property to Schema.brand Interface in TypeScript\nDESCRIPTION: This snippet shows the addition of the 'from' property to the Schema.brand interface, improving type inference for branded schemas.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from \"effect\"\n\nconst schema = Schema.String.pipe(Schema.brand(\"my-brand\"))\n\n//      ┌─── typeof Schema.String\n//      ▼\nschema.from\n```\n\n----------------------------------------\n\nTITLE: Using Readable Trait with Ref Implementation in TypeScript\nDESCRIPTION: An example demonstrating how to use the Readable trait with Ref implementation. It shows how to create a Ref, check if it implements Readable, and retrieve its value using the get operation.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/experimental/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Readable, Ref } from \"effect\"\nimport assert from \"assert\"\n\nEffect.gen(function* (_) {\n  const ref = yield* _(Ref.make(123))\n  assert(Readable.isReadable(ref))\n\n  const result = yield* _(ref.get)\n  assert(result === 123)\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in Effect TS platform\nDESCRIPTION: The code displays updating dependencies for `@effect/platform` and `@effect/platform-node-shared` packages.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node/CHANGELOG.md#2025-04-21_snippet_25\n\nLANGUAGE: none\nCODE:\n```\n\"- Updated dependencies [[`3cc6514`](https://github.com/Effect-TS/effect/commit/3cc6514d2dd64e010cb760cc29bfce98c349bb10)]:\\n  - @effect/platform@0.69.24\\n  - @effect/platform-node-shared@0.19.25\"\n```\n\n----------------------------------------\n\nTITLE: Type Definition for minigitClone Command in TypeScript\nDESCRIPTION: This snippet captures the TypeScript type definition of the 'minigitClone' command, showcasing how the parent command context is included and specifying the types of the subcommand's parameters.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/cli/README.md#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst minigitClone: Command.Command<\n  \"clone\",\n  // The parent `minigit` command has been added to the environment required by\n  // the subcommand's handler\n  Command.Command.Context<\"minigit\">,\n  never,\n  {\n    readonly repository: string\n    readonly directory: Option.Option<string>\n    readonly depth: Option.Option<number>\n  }\n>\n```\n\n----------------------------------------\n\nTITLE: Revising SchemaStore type parameters for better consistency\nDESCRIPTION: This change reorders type parameters within the SchemaStore interface to improve consistency across the codebase. This makes the API more predictable and easier to work with.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_28\n\nLANGUAGE: markdown\nCODE:\n```\n- [#2801](https://github.com/Effect-TS/effect/pull/2801) [`c07e0ce`](https://github.com/Effect-TS/effect/commit/c07e0cea8ce165887e2c9dfa5d669eba9b2fb798) Thanks @gcanti! - Revise the ordering of type parameters within the `SchemaStore` interface to enhance consistency\n```\n\n----------------------------------------\n\nTITLE: Installing @effect/printer-ansi with npm\nDESCRIPTION: Command to install the @effect/printer-ansi package using npm package manager\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/printer-ansi/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @effect/printer-ansi\n```\n\n----------------------------------------\n\nTITLE: Version Update Dependency References\nDESCRIPTION: References to commit hashes for version updates in dependencies.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/printer/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[[`f983946`](https://github.com/Effect-TS/effect/commit/f9839467b4cad6e788297764ef9f9f0b9fd203f9), [`2d8a750`](https://github.com/Effect-TS/effect/commit/2d8a75081eb83a0a81f817fdf6f428369c5064ab)]\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Module Name in Markdown\nDESCRIPTION: This snippet shows the module name '@effect/ai-anthropic' formatted as inline code in a Markdown header.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/ai/anthropic/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `@effect/ai-anthropic`\n```\n\n----------------------------------------\n\nTITLE: Executing CLI Application 'clone' Command in Shell\nDESCRIPTION: This command shows how to use the 'clone' subcommand of the CLI application with specific options and arguments.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/cli/README.md#2025-04-21_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nnpx tsx minigit.ts clone --depth 1 https://github.com/Effect-TS/cli.git\n# Output: Running 'minigit clone' with the following options and arguments: '--depth 1, https://github.com/Effect-TS/cli.git'\n```\n\n----------------------------------------\n\nTITLE: Using Type Representations for Null Literals - TypeScript\nDESCRIPTION: This code snippet shows how to utilize the type representation for null literals in JSONSchema. It reflects a design change to explicitly indicate null values within schemas.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { JSONSchema, Schema } from \"effect\"\n\nconst schema = Schema.NullOr(Schema.String)\n\nconsole.log(JSON.stringify(JSONSchema.make(schema), null, 2))\n/*\n{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"anyOf\": [\n    {\n      \"type\": \"string\"\n    },\n    {\n      \"type\": \"null\"\n    }\n  ]\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Patch Change Code Reference\nDESCRIPTION: Git commit hash reference used in dependency update\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ne536127`](https://github.com/Effect-TS/effect/commit/e536127c1e6f2fb3a542c73ae919435a629a346b)\n```\n\n----------------------------------------\n\nTITLE: Bug Fix Update\nDESCRIPTION: Changelog entry documenting a bug fix for null proxy creation error in version 0.29.5.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-kysely/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [#4661](https://github.com/Effect-TS/effect/pull/4661) [`e1dfdf1`](https://github.com/Effect-TS/effect/commit/e1dfdf123ee3927b9e57b4a184bfa4b5b530e546) Thanks @chrislambe! - prevent error caused by attempted creation of null proxy\n```\n\n----------------------------------------\n\nTITLE: Installing @effect/printer-ansi with yarn\nDESCRIPTION: Command to install the @effect/printer-ansi package using yarn package manager\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/printer-ansi/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @effect/printer-ansi\n```\n\n----------------------------------------\n\nTITLE: Selecting Fields in Zod Schema\nDESCRIPTION: This snippet shows how to select fields from an object schema using Zod.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst Recipe = z.object({\n  id: z.string(),\n  name: z.string(),\n  ingredients: z.array(z.string())\n})\n\nconst JustTheName = Recipe.pick({ name: true })\n\nconst NoIDRecipe = Recipe.omit({ id: true })\n```\n\n----------------------------------------\n\nTITLE: Update Dependencies for Patch 0.5.2\nDESCRIPTION: This patch updates multiple dependencies including `@effect/schema`, `effect`, and `@effect/platform`. The updates likely include bug fixes and performance improvements, ensuring that the affected packages function smoothly and efficiently.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql/CHANGELOG.md#2025-04-21_snippet_12\n\nLANGUAGE: Markdown\nCODE:\n```\n\"- Updated dependencies [[`f0285d3`](https://github.com/Effect-TS/effect/commit/f0285d3af6a18829123bc1818331c67206becbc4), [`8ec4955`](https://github.com/Effect-TS/effect/commit/8ec49555ed3b3c98093fa4d135a4c57a3f16ebd1), [`3ac2d76`](https://github.com/Effect-TS/effect/commit/3ac2d76048da09e876cf6c3aee3397febd843fe9), [`cc327a1`](https://github.com/Effect-TS/effect/commit/cc327a1bccd22a4ee27ec7e58b53205e93b23e2c), [`4bfe4fb`](https://github.com/Effect-TS/effect/commit/4bfe4fb5c82f597c9beea9baa92e772593598b60), [`2b14d18`](https://github.com/Effect-TS/effect/commit/2b14d181462cad8359da4fa6bc6dfda0f742c398)]:\\n  - @effect/schema@0.68.26\\n  - effect@3.5.6\\n  - @effect/platform@0.59.2\"\n```\n\n----------------------------------------\n\nTITLE: Version Update Package Names\nDESCRIPTION: Package names and version numbers being updated.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/printer/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\neffect@3.10.14\n@effect/typeclass@0.29.14\n```\n\n----------------------------------------\n\nTITLE: Version Update Dependencies\nDESCRIPTION: A code block containing Git commit references and version updates for package dependencies\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-bun/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[[`abb22a4`](https://github.com/Effect-TS/effect/commit/abb22a429b9c52c31e84856294f175d2064a9b4d), `f369a89`, `642376c`, `3d2b7a7`, `ef64c6f`, `73f9c6f`, `17cb451`, `d801820`, `e1eeb2d`, `c11f3a6`, `618f7e0`, `c0ba834`, `e1eeb2d`]]:\n  - effect@3.12.0\n  - @effect/platform@0.72.0\n  - @effect/platform-node-shared@0.22.0\n```\n\n----------------------------------------\n\nTITLE: Extracting Keys of an Object Schema with Zod\nDESCRIPTION: This snippet shows how to create a schema of object keys using Zod.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/schema-vs-zod.md#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst keySchema = Dog.keyof()\nkeySchema // ZodEnum<['name', 'age']>\n```\n\n----------------------------------------\n\nTITLE: Migrating from unit to void terminology in Effect-TS\nDESCRIPTION: A code transformation replacing 'unit' with 'void' across various data types in the Effect-TS library, standardizing terminology and improving API clarity\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/rpc/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nEffect.unit \\/\\/ => Effect.void\nStream.unit \\/\\/ => Stream.void\n```\n\n----------------------------------------\n\nTITLE: Patch Changes Documentation\nDESCRIPTION: Lists dependency updates with commit references and version changes for @effect/sql and effect packages.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/cluster/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [[`a8b0ddb`](https://github.com/Effect-TS/effect/commit/a8b0ddb84710054799fc8f57485b95d00093ada1), [`507d546`](https://github.com/Effect-TS/effect/commit/507d546bd49db31000425fb5da88c434e4291bea)]:\n  - @effect/sql@0.27.0\n  - effect@3.12.5\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in Effect TS platform\nDESCRIPTION: This code shows the updating of dependencies for `@effect/platform` and `@effect/platform-node-shared` packages.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node/CHANGELOG.md#2025-04-21_snippet_26\n\nLANGUAGE: none\nCODE:\n```\n\"- Updated dependencies [[`3aff4d3`](https://github.com/Effect-TS/effect/commit/3aff4d38837c213bb2987973dc4b98febb9f92d2)]:\\n  - @effect/platform@0.69.23\\n  - @effect/platform-node-shared@0.19.24\"\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry\nDESCRIPTION: Markdown formatted changelog entries showing version updates and dependency changes\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/rpc/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [[`eb8c52d`](https://github.com/Effect-TS/effect/commit/eb8c52d8b4c5e067ebf0a81eb742f5822e6439b5)]:\n  - @effect/platform@0.69.19\n\n## 0.44.18\n\n### Patch Changes\n\n- Updated dependencies [[`a0584ec`](https://github.com/Effect-TS/effect/commit/a0584ece92ed784bfb139e9c5a699f02d1e71c2d), [`dd14efe`](https://github.com/Effect-TS/effect/commit/dd14efe0ace255f571273aae876adea96267d7e6), [`dd14efe`](https://github.com/Effect-TS/effect/commit/dd14efe0ace255f571273aae876adea96267d7e6)]:\n  - @effect/platform@0.69.18\n  - effect@3.10.12\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.37.2\nDESCRIPTION: A markdown entry documenting dependency updates for version 0.37.2\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/opentelemetry/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.37.2\n\n### Patch Changes\n\n- Updated dependencies [[`f0d8ef1`](https://github.com/Effect-TS/effect/commit/f0d8ef1ce97ec2a87b09b3e24150cfeab85d6e2f)]:\n  - effect@3.8.2\n```\n\n----------------------------------------\n\nTITLE: Creating Context Tags with the new Tag Class Approach\nDESCRIPTION: Demonstrates the new recommended way of constructing tags using Context.Tag() as a factory function that creates an opaque identifier class.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/rpc/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Context } from \"effect\"\nclass Service extends Context.Tag(\"Service\")<\n  Service,\n  {\n    number: Effect.Effect<never, never, number>\n  }\n>() {}\n\nconst program = Effect.flatMap(Service, ({ number }) => number).pipe(\n  Effect.flatMap((_) => Effect.log(`number: ${_}`))\n)\n```\n\n----------------------------------------\n\nTITLE: Adding pure annotations for tree-shakeability\nDESCRIPTION: This snippet relates to the addition of pure annotations within the Effect-TS codebase. The goal is to improve tree-shakeability, allowing for smaller bundle sizes by removing unused code during the build process.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-sqlite-node/CHANGELOG.md#2025-04-21_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Creating a Changeset for Effect.js Changes\nDESCRIPTION: Command to document changes using a changeset, which helps track modifications and communicate them to the project team and users.\nSOURCE: https://github.com/effect-ts/effect/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm changeset\n```\n\n----------------------------------------\n\nTITLE: Dependency Version Update Block\nDESCRIPTION: Markdown block showing updated dependencies with commit references for @effect/platform and @effect/platform-node packages.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/experimental/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Updated dependencies [[`6984508`](https://github.com/Effect-TS/effect/commit/6984508c87f1bd91213b44c19b25ab5e2dcc1ce0), [`883639c`](https://github.com/Effect-TS/effect/commit/883639cc8ce47757f1cd39439391a8028c0812fe)]:\n  - @effect/platform@0.71.3\n  - @effect/platform-node@0.66.3\n```\n\n----------------------------------------\n\nTITLE: Committing Changes with Issue Reference for Effect.js\nDESCRIPTION: Command demonstrating how to commit changes with a reference to close a specific issue, which helps with project tracking.\nSOURCE: https://github.com/effect-ts/effect/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -am 'Add some feature, closes #123'\n```\n\n----------------------------------------\n\nTITLE: Rename NodeSocket method in Effect TS\nDESCRIPTION: This snippet renames the `NodeSocket.fromNetSocket` method to `.fromDuplex` in the Effect TS platform. This change is part of a minor update and affects how Node.js sockets are handled within the platform. The renaming provides better clarity and consistency within the API.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node/CHANGELOG.md#2025-04-21_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\n\"// Before:\n// NodeSocket.fromNetSocket\n\n// After:\n// .fromDuplex\"\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in Effect TS platform\nDESCRIPTION: The code shows updating dependencies for `@effect/platform` and `@effect/platform-node-shared` packages.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node/CHANGELOG.md#2025-04-21_snippet_16\n\nLANGUAGE: none\nCODE:\n```\n\"- Updated dependencies [[`270f199`](https://github.com/Effect-TS/effect/commit/270f199b31810fd643e4c22818698adcbdb5d396)]:\\n  - @effect/platform@0.69.30\\n  - @effect/platform-node-shared@0.19.31\"\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in Effect TS platform\nDESCRIPTION: This snippet demonstrates how dependencies for `@effect/platform` and `@effect/platform-node-shared` are updated in a patch change. It lists the updated dependency versions and their corresponding commit hashes.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: none\nCODE:\n```\n\"- Updated dependencies [[`9a5b8e3`](https://github.com/Effect-TS/effect/commit/9a5b8e36d184bd4967a88752cb6e755e1be263af)]:\\n  - @effect/platform@0.70.6\\n  - @effect/platform-node-shared@0.20.6\"\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to GitHub Fork for Effect.js\nDESCRIPTION: Command for pushing committed changes to a forked repository on GitHub, necessary before creating a pull request.\nSOURCE: https://github.com/effect-ts/effect/blob/main/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin my-branch\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in package.json\nDESCRIPTION: This snippet shows updates to package dependencies, including version bumps for effect and @effect/schema packages.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/rpc/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"dependencies\": {\n  \"effect\": \"2.2.4\",\n  \"@effect/schema\": \"0.61.6\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in Effect TS platform\nDESCRIPTION: This snippet presents the updated dependencies for `effect`, `@effect/platform`, and `@effect/platform-node-shared`. It also shows the specific commit hashes and the respective updated versions in the patch change.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node/CHANGELOG.md#2025-04-21_snippet_12\n\nLANGUAGE: none\nCODE:\n```\n\"- Updated dependencies [[`3069614`](https://github.com/Effect-TS/effect/commit/30696149271129fc618f6f2ccd1d8f2f6c0f9cd7), [`09a5e52`](https://github.com/Effect-TS/effect/commit/09a5e522fd9b221f05d85b1d1c8a740d4973c302)]:\\n  - effect@3.10.20\\n  - @effect/platform@0.69.32\\n  - @effect/platform-node-shared@0.19.33\"\n```\n\n----------------------------------------\n\nTITLE: Running minigit Clone Command Example in Shell\nDESCRIPTION: This snippet illustrates a shell command execution example demonstrating how to run the 'minigit clone' command with appropriate arguments and parameters, outlining expected outputs.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/cli/README.md#2025-04-21_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\nnpx tsx minigit.ts -c key1=value1 clone --depth 1 https://github.com/Effect-TS/cli.git\n# Running 'minigit clone' with the following options and arguments: '--depth 1, https://github.com/Effect-TS/cli.git'\n# and the following configuration parameters: key1=value1\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies - Markdown\nDESCRIPTION: This snippet documents the updates made to different dependencies in the Effect-TS project, ensuring that the project is kept up-to-date with the latest versions of its packages.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/cluster/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n- Updated dependencies [[`c342739`](https://github.com/Effect-TS/effect/commit/c3427396226e1ad7b95b40595a23f9bdff3e3365), [`8898e5e`](https://github.com/Effect-TS/effect/commit/8898e5e238622f6337583d91ee23609c1f5ccdf7), [`ff78636`](https://github.com/Effect-TS/effect/commit/ff786367c522975f40f0f179a0ecdfcfab7ecbdb), [`c86bd4e`](https://github.com/Effect-TS/effect/commit/c86bd4e134c23146c216f9ff97e03781d55991b6), [`bbdd365`](https://github.com/Effect-TS/effect/commit/bbdd36567706c94cdec45bacea825941c347b6cd), [`bbdd365`](https://github.com/Effect-TS/effect/commit/bbdd36567706c94cdec45bacea825941c347b6cd)]:\n```\n\nLANGUAGE: markdown\nCODE:\n```\n  - effect@3.4.3\n```\n\nLANGUAGE: markdown\nCODE:\n```\n  - @effect/schema@0.68.10\n```\n\nLANGUAGE: markdown\nCODE:\n```\n  - @effect/sql@0.4.10\n```\n\n----------------------------------------\n\nTITLE: Version Control - Package Updates\nDESCRIPTION: Documentation of version changes and dependency updates for Effect-TS packages. Shows the relationship between different package versions and their dependencies.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-pg/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [[`4a01828`](https://github.com/Effect-TS/effect/commit/4a01828b66d6213e9bbe18979c893b13f7bb29bf), [`6d9de6b`](https://github.com/Effect-TS/effect/commit/6d9de6b871c5c08e6509a4e830c3d74758faa198), [`4a01828`](https://github.com/Effect-TS/effect/commit/4a01828b66d6213e9bbe18979c893b13f7bb29bf), [`c79c4c1`](https://github.com/Effect-TS/effect/commit/c79c4c178390fe61ff6dda88c9e058862349343a), [`38d30f0`](https://github.com/Effect-TS/effect/commit/38d30f08b8da62f9c3e308b9250738cb8d17bdb5), [`5821ce3`](https://github.com/Effect-TS/effect/commit/5821ce3455b47d25e0a40cae6ce22af9db5fa556)]:\n  - effect@3.10.0\n  - @effect/platform@0.69.0\n  - @effect/sql@0.18.0\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Effect.js Project\nDESCRIPTION: Command for installing all required dependencies using pnpm, with a specific version requirement noted.\nSOURCE: https://github.com/effect-ts/effect/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install  # Requires pnpm version 10.4.0\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in Effect TS platform\nDESCRIPTION: This snippet reflects updating the dependencies for the `effect`, `@effect/platform`, and `@effect/platform-node-shared` packages. The updated version numbers are also listed.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node/CHANGELOG.md#2025-04-21_snippet_21\n\nLANGUAGE: none\nCODE:\n```\n\"- Updated dependencies [[`edd72be`](https://github.com/Effect-TS/effect/commit/edd72be57b904d60c9cbffc2537901821a9da537), [`a3e2771`](https://github.com/Effect-TS/effect/commit/a3e277170a1f7cf61fd629acb60304c7e81d9498), [`944025b`](https://github.com/Effect-TS/effect/commit/944025bc5ce139f4a85846aa689bf30ec06a8ec1), [`54addee`](https://github.com/Effect-TS/effect/commit/54addee438a644bf010646c52042c7b89c5fc0a7), [`a9e00e4`](https://github.com/Effect-TS/effect/commit/a9e00e43f0b5dd22c1f9d5b78be6383daea09c20)]:\\n  - @effect/platform@0.69.28\\n  - effect@3.10.19\\n  - @effect/platform-node-shared@0.19.29\"\n```\n\n----------------------------------------\n\nTITLE: Exporting MakeOptions Type from Schema\nDESCRIPTION: Enhancement to export the MakeOptions type from the Schema module, allowing developers to access and utilize this type in their applications.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Updating TypeScript Version - Markdown\nDESCRIPTION: This entry describes the update of the TypeScript version to 5.5 in the Effect-TS project, enhancing type checking and overall compatibility.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/cluster/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n- [#3079](https://github.com/Effect-TS/effect/pull/3079) [`bbdd365`](https://github.com/Effect-TS/effect/commit/bbdd36567706c94cdec45bacea825941c347b6cd) Thanks @tim-smart! - update to typescript 5.5\n```\n\n----------------------------------------\n\nTITLE: Package Name Reference in Markdown\nDESCRIPTION: Package name reference for the Effect-TS OpenAI integration module.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/ai/openai/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`@effect/ai-openai`\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in Effect TS platform\nDESCRIPTION: This code shows updating dependencies for the `@effect/platform` and `@effect/platform-node-shared` packages.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node/CHANGELOG.md#2025-04-21_snippet_18\n\nLANGUAGE: none\nCODE:\n```\n\"- Updated dependencies [[`24cc35e`](https://github.com/Effect-TS/effect/commit/24cc35e26d6ed4a076470bc687ffd99cc50991b3)]:\\n  - @effect/platform@0.69.29\\n  - @effect/platform-node-shared@0.19.30\"\n```\n\n----------------------------------------\n\nTITLE: Previous Tag Creation Syntax in Effect-TS\nDESCRIPTION: Shows the previous way of creating context tags without a string key. This approach is now deprecated in favor of the new approaches that require explicit string keys.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/opentelemetry/CHANGELOG.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Effect, Context } from \"effect\"\ninterface Service {\n  readonly _: unique symbol\n}\nconst Service = Context.Tag<\n  Service,\n  {\n    number: Effect.Effect<never, never, number>\n  }\n>()\n```\n\n----------------------------------------\n\nTITLE: Version Update Entry - v0.29.16\nDESCRIPTION: Changelog entry documenting changes to shard lock expiration and persisted message handling\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/cluster/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#4719](https://github.com/Effect-TS/effect/pull/4719) [`a79b732`](https://github.com/Effect-TS/effect/commit/a79b732bddea8bfca091c4fed0dd87aa0b1ab1f0) Thanks @tim-smart! - expire shard locks after 15 seconds\n\n- [#4719](https://github.com/Effect-TS/effect/pull/4719) [`a79b732`](https://github.com/Effect-TS/effect/commit/a79b732bddea8bfca091c4fed0dd87aa0b1ab1f0) Thanks @tim-smart! - ensure more persisted messages are eligible for the fast path\n```\n\n----------------------------------------\n\nTITLE: Update Dependencies Hash References\nDESCRIPTION: Git commit hash references for dependency updates in the Effect library ecosystem.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-node/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[[`5b50ea4`](https://github.com/Effect-TS/effect/commit/5b50ea4a10cf9acd51f9624b2474d9d5ded74019), [`c170a68`](https://github.com/Effect-TS/effect/commit/c170a68b6266100774461fcd6c0e0fabb60112f2), [`a66c2eb`](https://github.com/Effect-TS/effect/commit/a66c2eb473245092cd41f04c2eb2b7b02cf53718), [`c9e5e1b`](https://github.com/Effect-TS/effect/commit/c9e5e1be17c0c84d3d4e2abc3c60215cdb56bbbe), [`7b3d58d`](https://github.com/Effect-TS/effect/commit/7b3d58d7aec2152ec282460871d3e9de45ed254d)]\n```\n\n----------------------------------------\n\nTITLE: Example Haskell Type Definition\nDESCRIPTION: Sample Haskell type definition to be formatted\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/printer/README.md#2025-04-21_snippet_1\n\nLANGUAGE: haskell\nCODE:\n```\nexample :: Int -> Bool -> Char -> IO ()\n```\n\n----------------------------------------\n\nTITLE: Minor Changes Documentation - Version 0.1.0\nDESCRIPTION: Documents minor version changes including initial @effect/sql release and Effect 3.0 release\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-sqlite-bun/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n### Minor Changes\n\n- [#2104](https://github.com/Effect-TS/effect/pull/2104) [`1499974`](https://github.com/Effect-TS/effect/commit/14999741d2e19c1747f6a7e19d68977f6429cdb8) Thanks [@IMax153](https://github.com/IMax153)! - initial @effect/sql release\n\n- [#2207](https://github.com/Effect-TS/effect/pull/2207) [`2fb7d9c`](https://github.com/Effect-TS/effect/commit/2fb7d9ca15037ff62a578bb9fe5732da5f4f317d) Thanks [@github-actions](https://github.com/apps/github-actions)! - Release Effect 3.0 🎉\n```\n\n----------------------------------------\n\nTITLE: Version Release Note\nDESCRIPTION: A release note for version 0.6.1 with dependency updates\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/experimental/CHANGELOG.md#2025-04-21_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\nUpdated dependencies [[`c4b84f7`](https://github.com/Effect-TS/effect/commit/c4b84f724ae809f3450d71c3ea5d629205fc479f), [`c4b84f7`](https://github.com/Effect-TS/effect/commit/c4b84f724ae809f3450d71c3ea5d629205fc479f), [`c4b84f7`](https://github.com/Effect-TS/effect/commit/c4b84f724ae809f3450d71c3ea5d629205fc479f), [`c4b84f7`](https://github.com/Effect-TS/effect/commit/c4b84f724ae809f3450d71c3ea5d629205fc479f)]:\n  - @effect/schema@0.59.0\n  - @effect/platform@0.40.4\n  - @effect/platform-node@0.40.4\n```\n\n----------------------------------------\n\nTITLE: Using Variadic Arguments with Effect.log in TypeScript\nDESCRIPTION: Demonstrates the use of multiple arguments with Effect.log, similar to console.log functionality.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/effect/CHANGELOG.md#2025-04-21_snippet_116\n\nLANGUAGE: typescript\nCODE:\n```\nEffect.log(\"hello\", { foo: \"bar\" }, Cause.fail(\"error\"))\n```\n\n----------------------------------------\n\nTITLE: Patch Changes Dependency Update\nDESCRIPTION: Dependency updates for effect, @effect/experimental, @effect/platform, and @effect/sql packages with version numbers and commit references.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-sqlite-bun/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [[`9f5a6f7`](https://github.com/Effect-TS/effect/commit/9f5a6f701bf7ba31adccd1f1bcfa8ab5614c9be8), [`ef70ffc`](https://github.com/Effect-TS/effect/commit/ef70ffc417ec035ede40c62b7316e447cc7c1932), [`22905cf`](https://github.com/Effect-TS/effect/commit/22905cf5addfb1ff3d2a6135c52036be958ae911)]:\n  - effect@3.11.5\n  - @effect/experimental@0.33.7\n  - @effect/platform@0.70.7\n  - @effect/sql@0.22.7\n```\n\n----------------------------------------\n\nTITLE: Patch Version Updates for Effect-TS Packages\nDESCRIPTION: Markdown changelog entry showing version and dependency updates across Effect-TS packages including schema, platform, printer and printer-ansi implementations.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/cli/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [[`5745886`](https://github.com/Effect-TS/effect/commit/57458869859943410221ccc87f8cecfba7c79d92), [`6801fca`](https://github.com/Effect-TS/effect/commit/6801fca44366be3ee1b6b99f54bd4f38a1b5e4f4)]:\n  - @effect/schema@0.67.16\n  - effect@3.2.7\n  - @effect/platform@0.55.3\n  - @effect/printer@0.33.23\n  - @effect/printer-ansi@0.33.23\n```\n\n----------------------------------------\n\nTITLE: Additional Version Change Links\nDESCRIPTION: More repository commit links documenting changes to the project.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/experimental/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n[[`773b8e0`](https://github.com/Effect-TS/effect/commit/773b8e01521e8fa7c38ff15d92d21d6fd6dad56f)]\n```\n\n----------------------------------------\n\nTITLE: Patch Changes Documentation in Markdown\nDESCRIPTION: Documents patch changes and dependency updates across multiple versions of the effect package, including commit references and version numbers.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/typeclass/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [[`8baef83`](https://github.com/Effect-TS/effect/commit/8baef83e7ff0b7bc0738b680e1ef013065386cff), [`655bfe2`](https://github.com/Effect-TS/effect/commit/655bfe29e44cc3f0fb9b4e53038f50b891c188df), [`d90cbc2`](https://github.com/Effect-TS/effect/commit/d90cbc274e2742d18671fe65aa4764c057eb6cba), [`75632bd`](https://github.com/Effect-TS/effect/commit/75632bd44b8025101d652ccbaeef898c7086c91c), [`c874a2e`](https://github.com/Effect-TS/effect/commit/c874a2e4b17e9d71904ca8375bb77b020975cb1d)]:\n  - effect@3.13.0\n```\n\n----------------------------------------\n\nTITLE: Version headers\nDESCRIPTION: Semantic version numbers with change type indicators\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-browser/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.60.2\n\n### Patch Changes\n\n## 0.60.1\n\n### Patch Changes\n\n## 0.60.0\n\n### Minor Changes\n```\n\n----------------------------------------\n\nTITLE: Updating Git Commit References\nDESCRIPTION: This snippet demonstrates how git commit hashes are referenced in the changelog to link to specific changes.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/rpc/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n[[`d0b911c`](https://github.com/Effect-TS/effect/commit/d0b911c75f284c7aa87f25aa96926e6bde7690d0), [`330e1a4`](https://github.com/Effect-TS/effect/commit/330e1a4e2c1fc0af6c80c80c81dd38c3e50fab78), [`6928a2b`](https://github.com/Effect-TS/effect/commit/6928a2b0bae86a4bdfbece0aa32924207c2d5a70), [`296bc1c`](https://github.com/Effect-TS/effect/commit/296bc1c9d24986d299d2669115d584cb27b73c60)]\n```\n\n----------------------------------------\n\nTITLE: Package Version Updates - Markdown\nDESCRIPTION: Version history entries documenting dependency updates and patch changes for the @effect/sql-libsql package\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-libsql/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @effect/sql-libsql\n\n## 0.23.11\n\n### Patch Changes\n\n- Updated dependencies [[`e536127`](https://github.com/Effect-TS/effect/commit/e536127c1e6f2fb3a542c73ae919435a629a346b)]:\n  - effect@3.14.11\n  - @effect/experimental@0.44.11\n  - @effect/platform@0.80.11\n  - @effect/sql@0.33.11\n```\n\n----------------------------------------\n\nTITLE: Version Update Entry Format\nDESCRIPTION: Standard format for version update entries in the changelog, showing version number, patch changes, and dependency updates with commit links.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/sql-mssql/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.34.11\n\n### Patch Changes\n\n- Updated dependencies [[`e536127`](https://github.com/Effect-TS/effect/commit/e536127c1e6f2fb3a542c73ae919435a629a346b)]:\n  - effect@3.14.11\n  - @effect/experimental@0.44.11\n  - @effect/platform@0.80.11\n  - @effect/sql@0.33.11\n```\n\n----------------------------------------\n\nTITLE: Version Updates in Package.json Dependencies\nDESCRIPTION: Dependency updates for effect and related packages, maintaining version synchronization across the Effect ecosystem.\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/ai/openai/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"dependencies\": {\n  \"effect\": \"3.14.11\",\n  \"@effect/ai\": \"0.13.11\",\n  \"@effect/experimental\": \"0.44.11\",\n  \"@effect/platform\": \"0.80.11\"\n}\n```\n\n----------------------------------------\n\nTITLE: Commit hash references\nDESCRIPTION: Git commit hashes referenced throughout the changelog for tracking specific changes\nSOURCE: https://github.com/effect-ts/effect/blob/main/packages/platform-browser/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[`e536127`](https://github.com/Effect-TS/effect/commit/e536127c1e6f2fb3a542c73ae919435a629a346b)\n[`bc7efa3`](https://github.com/Effect-TS/effect/commit/bc7efa3b031bb25e1ed3c8f2d3fb5e8da166cadc)\n[`e857e9a`](https://github.com/Effect-TS/effect/commit/e857e9ad5d59972387b14c39ea0b253e6f659b3e)\n```"
  }
]