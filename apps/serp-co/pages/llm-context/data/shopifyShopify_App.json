[
  {
    "owner": "shopify",
    "repo": "shopify_app",
    "content": "TITLE: Including EnsureHasSession Concern in Ruby Controller\nDESCRIPTION: Demonstrates how to include the EnsureHasSession concern in a controller to ensure users have a valid session for making requests. This is used for controllers that handle authenticated actions requiring a logged-in user.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/controller-concerns.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass YourController < ApplicationController\n  include ShopifyApp::EnsureHasSession\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth Scopes in Ruby for Shopify App\nDESCRIPTION: This snippet demonstrates how to configure OAuth scopes for a Shopify app using the ShopifyApp and ShopifyAPI modules. It sets up the requested access scopes during the OAuth flow.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/authentication.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/shopify_app.rb\n\nShopifyApp.configure do |config|\n  ...\n  config.scope = [\"read_discounts\", \"write_products\"]\n  ...\nend\n\nShopifyAPI::Context.setup(\n  ...\n  scope: ShopifyApp.configuration.scope,\n  ...\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Post-Authentication Tasks in Ruby for Shopify App\nDESCRIPTION: This snippet demonstrates how to create and configure custom post-authentication tasks for a Shopify app. It includes creating a custom task class and setting it up in the ShopifyApp configuration.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/authentication.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# my_custom_post_authenticate_task.rb\nclass MyCustomPostAuthenticateTask\n  def self.perform(session)\n    # This will be triggered after OAuth callback and token exchange completion\n  end\nend\n\n# config/initializers/shopify_app.rb\nShopifyApp.configure do |config|\n  config.custom_post_authenticate_tasks = \"MyCustomPostAuthenticateTask\"\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring New Embedded App Authorization Strategy\nDESCRIPTION: Ruby configuration code for enabling the new token exchange authentication strategy, which eliminates redirects in embedded apps. Also shows how to enable session expiry checks for automatic token refresh.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/shopify_app.rb\nShopifyApp.configure do |config|\n  #.....\n  config.embedded_app = true\n  config.new_embedded_auth_strategy = true\n\n  # If your app is configured to use online sessions, you can enable session expiry date check so a new access token\n  # is fetched automatically when the session expires.\n  # See expiry date check docs: https://github.com/Shopify/shopify_app/blob/main/docs/shopify_app/sessions.md#expiry-date\n  config.check_session_expiry_date = true\n  ...\nend\n```\n\n----------------------------------------\n\nTITLE: Using with_shopify_session for Shop and User Contexts in Ruby\nDESCRIPTION: This snippet shows how to use the with_shopify_session helper to make API calls within the context of a shop or user, using their respective access tokens.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/sessions.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n# To use shop context for \"my_shopify_domain.myshopify.com\"\nshopify_domain = \"my_shopify_domain.myshopify.com\"\nshop = Shop.find_by(shopify_domain: shopify_domain)\nshop.with_shopify_session do\n  ShopifyAPI::Product.find(id: product_id)\n  # This will call the Shopify API with my_shopify_domain's access token\nend\n\n# To use user context for user ID \"my_user_id\"\nuser = User.find_by(shopify_user_id: \"my_user_id\")\nuser.with_shopify_session do\n  ShopifyAPI::Product.find(id: product_id)\n  # This will call the Shopify API with my_user_id's access token\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Shop Session Repository in Shopify App Initializer\nDESCRIPTION: This Ruby code snippet configures the shop session repository in the Shopify app initializer to enable shop access token persistence.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/sessions.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.shop_session_repository = 'Shop'\n```\n\n----------------------------------------\n\nTITLE: Configuring User Session Repository in Shopify App Initializer\nDESCRIPTION: This Ruby code snippet configures the user session repository in the Shopify app initializer to enable user access token persistence.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/sessions.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.user_session_repository = 'User'\n```\n\n----------------------------------------\n\nTITLE: Handling Unauthorized Errors with Token Refetch in Ruby\nDESCRIPTION: This snippet demonstrates how to handle unauthorized errors by using the with_token_refetch method to automatically refetch a new access token and retry the API call.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/sessions.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyController < ApplicationController\n  include ShopifyApp::EnsureHasSession\n\n  def index\n    # Your app's business logic\n    with_token_refetch(current_shopify_session, shopify_id_token) do\n      # Unauthorized errors raised within this block will initiate token exchange.\n      # `with_token_refetch` will store the new access token and use it\n      # to execute this block again.\n      # Any subsequent calls using the same session instance will have the new token.\n      client = ShopifyAPI::Clients::Graphql::Admin.new(session: current_shopify_session)\n      client.query(options)\n    end\n    # Your app's business logic continues\n  rescue => error\n    # app's specific error handling\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Including EnsureInstalled Concern in Ruby Controller\nDESCRIPTION: Shows how to include the EnsureInstalled concern in a controller to ensure the app has been installed by the Shop and they have a shop session. This is used when you don't require a user to be present but need to make requests scoped by a Shop.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/controller-concerns.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass YourController < ApplicationController\n  include ShopifyApp::EnsureInstalled\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Shopify App Scaffold in Rails\nDESCRIPTION: Command to run the Shopify App generator which creates the necessary files and configuration for an embedded Shopify app.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nrails generate shopify_app\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Callback Controller in Ruby for Shopify App\nDESCRIPTION: This code snippet shows how to create a custom callback controller for handling OAuth callbacks in a Shopify app. It includes creating the controller and configuring the routes.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/authentication.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# web/app/controllers/my_custom_callback_controller.rb\n\nclass MyCustomCallbackController\n  def callback\n    # My custom callback logic\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# web/config/routes.rb\n\nRails.application.routes.draw do\n  root to: \"home#index\"\n\n  # Overriding the callback controller to the new custom one.\n  # This must be added before mounting the ShopifyApp::Engine\n  get ShopifyApp.configuration.login_callback_url, to: 'my_custom_callback#callback'\n\n  mount ShopifyApp::Engine, at: \"/api\"\n\n  # other routes\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring After Authenticate Job in Ruby for Shopify App\nDESCRIPTION: This snippet shows how to configure an after-authenticate job in the Shopify app initializer. It allows specifying a job to run after user authentication, with an option to run it synchronously.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/authentication.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nShopifyApp.configure do |config|\n  config.after_authenticate_job = { job: \"Shopify::AfterAuthenticateJob\" }\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nShopifyApp.configure do |config|\n  config.after_authenticate_job = { job: \"Shopify::AfterAuthenticateJob\", inline: true }\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring API Credential Rotation in Ruby for Shopify App\nDESCRIPTION: This snippet demonstrates how to update the Shopify app configuration with new and old secret keys for API credential rotation. It also shows how to set up ShopifyAPI::Context with the old secret key.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/authentication.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.secret = Rails.application.secrets.shopify_secret\nconfig.old_secret = Rails.application.secrets.old_shopify_secret\n```\n\nLANGUAGE: ruby\nCODE:\n```\nShopifyAPI::Context.setup(\n  api_key: ShopifyApp.configuration.api_key,\n  api_secret_key: ShopifyApp.configuration.secret,\n  # ...\n  old_api_secret_key: ShopifyApp.configuration.old_secret,\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Shop-specific Webhooks in Ruby\nDESCRIPTION: Configuration for managing shop-specific webhooks using ShopifyApp::WebhooksManager, specifying webhook topics and paths.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/webhooks.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nShopifyApp.configure do |config|\n  config.webhooks = [\n    {topic: 'carts/update', path: 'api/webhooks/carts_update'}\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing User Sessions with EnsureHasSession in Ruby\nDESCRIPTION: This snippet demonstrates how to use the EnsureHasSession concern in a controller to manage user sessions and make API calls using the current session.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/sessions.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyController < ApplicationController\n  include ShopifyApp::EnsureHasSession\n\n  def method\n    current_session = current_shopify_session # `current_shopify_session` is a helper from `EnsureHasSession`\n\n    client = ShopifyAPI::Clients::Graphql::Admin.new(session: current_session)\n    client.query(\n      # ...\n    )\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Temporary Shopify API Sessions\nDESCRIPTION: Demonstrates how to create temporary sessions for interacting with the Shopify API outside of an AuthenticatedController context using the ShopifyAPI::Auth::Session.temp method.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/Upgrading.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nShopifyAPI::Auth::Session.temp(shop: shop_domain, access_token: shop_token) do |session|\n  # make invocations to the API\nend\n```\n\n----------------------------------------\n\nTITLE: Using EnsureInstalled Concern for Shop Sessions in Shopify App Controller\nDESCRIPTION: This Ruby code example shows how to use the EnsureInstalled concern in a controller to load a shop session and make API calls using the session.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/sessions.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyController < ApplicationController\n  include ShopifyApp::EnsureInstalled\n\n  def method\n    current_session = installed_shop_session # `installed_shop_session` is a helper from `EnsureInstalled`\n\n    client = ShopifyAPI::Clients::Graphql::Admin.new(session: current_session)\n    client.query(\n      # ...\n    )\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Access Scopes in Shopify App Initializer (Ruby)\nDESCRIPTION: This snippet shows how to modify the list of access scopes requested by a Shopify app in the initializer file. It demonstrates setting the 'config.scope' option with a comma-separated list of scopes.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/handling-access-scopes-changes.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.scope = \"read_products,write_discounts\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Shopify Domain in Ruby\nDESCRIPTION: This code snippet shows how to access the current Shopify domain or use a default value if it's not present. It's used in the context of setting up the Content-Security-Policy header for Shopify apps.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/content-security-policy.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ncurrent_shopify_domain || \"*.myshopify.com\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Reauthorization on Scope Changes in Shopify App (Ruby)\nDESCRIPTION: This code sets a configuration flag to enable automatic reauthorization via OAuth when access scope changes occur. It's typically added to the Shopify App initializer file.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/handling-access-scopes-changes.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.reauth_on_access_scope_changes = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Script Tags in ShopifyApp (Ruby)\nDESCRIPTION: This snippet demonstrates how to configure script tags in the ShopifyApp initializer. It shows how to set up basic script tags and those with template_types for app block detection.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/script-tags.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nShopifyApp.configure do |config|\n  config.script_tags = [\n    # Basic script tag\n    {cache: true, src: 'https://example.com/fancy.js'},\n    \n    # Script tag with template_types for app block detection\n    {\n      cache: true, \n      src: 'https://example.com/product-script.js',\n      template_types: ['product', 'collection']\n    }\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Webhook Handler in Rails\nDESCRIPTION: Command to scaffold necessary files for handling app-specific webhook events, creating a controller, job, and route.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/webhooks.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrails g shopify_app:add_declarative_webhook --topic carts/update --path webhooks/carts_update\n```\n\n----------------------------------------\n\nTITLE: Configuring Shopify App for JWT Session Tokens\nDESCRIPTION: Configuration settings in the shopify_app initializer to enable JWT session tokens and set the shop session repository.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/Troubleshooting.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.embedded_app = true\n\n# This line should already exist if you're using shopify_app gem 13.x.x+\nconfig.shop_session_repository = 'Shop'\n```\n\n----------------------------------------\n\nTITLE: Testing Shopify Session Authentication in Ruby\nDESCRIPTION: Example test case demonstrating how to use ShopifySessionHelper to stub out shopify_app sessions in controller tests, including session setup and verification.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/testing.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'shopify_app/test_helpers/shopify_session_helper'\n\nclass MyAuthenticatedControllerTest < ActionController::TestCase\n  include ShopifyApp::TestHelpers::ShopifySessionHelper\n\n  test \"does not redirect when there is a valid shopify session\" do\n    # note shop_domain should be the same as your shopify domain\n    shop_domain = \"my-shop.myshopify.com\"\n    setup_shopify_session(session_id: \"1\", shop_domain: shop_domain)\n\n    get :index\n\n    assert_response :ok\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Webhook Job Handler for shopify_api Gem\nDESCRIPTION: Shows how to update existing webhook jobs to implement the new handle method required by the updated shopify_api gem. This pattern delegates to the pre-existing perform_later function.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/Upgrading.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyWebhookJob < ActiveJob::Base\n  extend ShopifyAPI::Webhooks::Handler\n\n  class << self\n    # new handle function\n    def handle(topic:, shop:, body:)\n      # delegate to pre-existing perform_later function\n      perform_later(topic: topic, shop_domain: shop, webhook: body)\n    end\n  end\n\n  # original perform function\n  def perform(topic:, shop_domain:, webhook:)\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Implementing App Proxy Verification in Controller\nDESCRIPTION: Example of including the ShopifyApp::AppProxyVerification mixin in a controller to verify incoming HTTP requests from an app proxy.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/engine.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# app/controllers/app_proxy/reviews_controller.rb\nclass ReviewsController < ApplicationController\n  include ShopifyApp::AppProxyVerification\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Unauthorized API Requests in Shopify App\nDESCRIPTION: Example of redirecting to the login URL when encountering a 401 Unauthorized response from the Shopify API.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/Troubleshooting.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nredirect_to(ShopifyApp.configuration.login_url, shop: current_shopify_domain)\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Store for Third-Party Cookies in Embedded Apps\nDESCRIPTION: Ruby code to update the Rails session storage configuration to allow for 3rd party cookies. This is necessary for displaying flash messages in embedded Shopify apps.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/Quickstart.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n#session_store.rb\nRails.application.config.session_store(:cookie_store, key: '_example_session', expire_after: 14.days, secure: true, same_site: 'None')\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Login URL in Shopify App\nDESCRIPTION: Demonstrates how to customize the login URL for a Shopify app by modifying the shopify_app.rb initializer configuration.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/engine.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nShopifyApp.configure do |config|\n  config.login_url = 'https://example.com/nested/login'\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for Shopify App\nDESCRIPTION: Example .env file configuration showing the required environment variables for a Shopify app, including host and API credentials.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nHOST=http://localhost:3000\nSHOPIFY_API_KEY=<Your Shopify API key>\nSHOPIFY_API_SECRET=<Your Shopify API secret>\n```\n\n----------------------------------------\n\nTITLE: Adding Shopify App Gem to Rails Application\nDESCRIPTION: Command to add the shopify_app gem to the application's Gemfile using Bundler.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nbundle add shopify_app\n```\n\n----------------------------------------\n\nTITLE: Creating a New Rails App for Shopify Integration\nDESCRIPTION: Command to create a new Rails application that will be used as the foundation for a Shopify app.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nrails new my_shopify_app\n```\n\n----------------------------------------\n\nTITLE: Generating Shopify App with Custom Settings in Ruby on Rails\nDESCRIPTION: This snippet shows how to use the shopify_app:install generator with custom flags for application name and OAuth scopes in Ruby on Rails.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/generators.md#2025-04-23_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\n$ rails generate shopify_app:install --application_name \"My Shopify App\" --scope \"read_products, write_orders\"\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations for Shopify App\nDESCRIPTION: Command to execute database migrations that create the necessary tables for Shopify app session storage.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nrails db:migrate\n```\n\n----------------------------------------\n\nTITLE: Overriding Embedded App Layout in Ruby Controller\nDESCRIPTION: Demonstrates how to override the default embedded app layout behavior by implementing the use_embedded_app_layout? method in a controller. This is useful when running an embedded app in non-embedded mode for testing or specific environments.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/controller-concerns.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationController\n  # Ensures every controller is using the standard app/views/layouts/application.html.erb layout.\n  #\n  # @return [true, false]\n  def use_embedded_app_layout?\n    false\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring EventBridge Webhooks\nDESCRIPTION: Configuration for setting up webhook delivery to Amazon EventBridge using ARN path.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/webhooks.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nShopifyApp.configure do |config|\n  config.webhooks = [\n    {\n      delivery_method: :event_bridge,\n      topic: 'carts/update',\n      path: 'arn:aws:events....'\n    }\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Access Scope Storage for Users in Ruby\nDESCRIPTION: This snippet demonstrates how to customize the storage of access scopes for users by implementing custom getters and setters in the User model.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/sessions.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ActiveRecord::Base\n  include ShopifyApp::UserSessionStorageWithScopes\n\n  def access_scopes=(scopes)\n    # Store access scopes\n  end\n  def access_scopes\n    # Find access scopes\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Including ShopAccessScopesVerification in a Controller (Ruby)\nDESCRIPTION: This snippet demonstrates how to include the ShopAccessScopesVerification concern in a controller. This concern helps manage access scope verification and reauthorization for merchants.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/handling-access-scopes-changes.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass HomeController < AuthenticatedController\n  include ShopifyApp::ShopAccessScopesVerification\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Access Scope Storage for Shops in Ruby\nDESCRIPTION: This snippet shows how to customize the storage of access scopes for shops by implementing custom getters and setters in the Shop model.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/sessions.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nclass Shop < ActiveRecord::Base\n  include ShopifyApp::ShopSessionStorageWithScopes\n\n  def access_scopes=(scopes)\n    # Store access scopes\n  end\n  def access_scopes\n    # Find access scopes\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring In-Memory Session Storage for Testing in Shopify App\nDESCRIPTION: This Ruby code configures the Shopify app to use in-memory storage for both shop and user sessions during manual testing.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/sessions.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/shopify_app.rb\n\nconfig.shop_session_repository = ShopifyApp::InMemoryShopSessionStore\nconfig.user_session_repository = ShopifyApp::InMemoryUserSessionStore\n```\n\n----------------------------------------\n\nTITLE: Generating After Authenticate Job in Ruby for Shopify App\nDESCRIPTION: This command generates a skeleton job for the after-authenticate feature and updates the initializer in a Shopify app.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/authentication.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nbin/rails g shopify_app:add_after_authenticate_job\n```\n\n----------------------------------------\n\nTITLE: Generating Rotate Shopify Token Job in Ruby for Shopify App\nDESCRIPTION: This command generates a job and an example rake task for rotating Shopify API tokens in a Shopify app.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/authentication.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nbin/rails g shopify_app:rotate_shopify_token_job\n```\n\n----------------------------------------\n\nTITLE: Mounting Shopify Engine at Nested Route\nDESCRIPTION: Shows how to mount the Shopify App engine at a nested route in the Rails application.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/engine.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nmount ShopifyApp::Engine, at: '/nested'\n```\n\n----------------------------------------\n\nTITLE: Setting Old Client Secret in Ruby for Shopify App\nDESCRIPTION: This snippet shows how to set the old client secret in the OmniAuth strategy options for a Shopify app, which is necessary for API credential rotation.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/authentication.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nstrategy.options[:old_client_secret] = ShopifyApp.configuration.old_secret\n```\n\n----------------------------------------\n\nTITLE: Setting Up Nested Routes in Rails\nDESCRIPTION: Example of configuring Rails routes.rb to handle nested routes for the Shopify app, including root path and custom views.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/engine.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# config/routes.rb\nRails.application.routes.draw do\n  root :to => 'something_else#index'\n  get \"/nested\", to: \"home#index\"\n  mount ShopifyApp::Engine, at: '/nested'\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Webhooks Controller\nDESCRIPTION: Example of a custom controller implementation using WebhookVerification module to handle webhook requests.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/webhooks.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass CustomWebhooksController < ApplicationController\n  include ShopifyApp::WebhookVerification\n\n  def carts_update\n    params.permit!\n    SomeJob.perform_later(shop_domain: shop_domain, webhook: webhook_params.to_h)\n    head :no_content\n  end\n\n  private\n\n  def webhook_params\n    params.except(:controller, :action, :type)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Webhook Jobs Namespace\nDESCRIPTION: Setting up a namespace for webhook job processing to organize jobs by service provider.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/webhooks.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nShopifyApp.configure do |config|\n  config.webhook_jobs_namespace = 'shopify/webhooks'\nend\n```\n\n----------------------------------------\n\nTITLE: Importing Webhook Verification Test Helpers in Ruby\nDESCRIPTION: Required imports for testing ShopifyApp::WebhookVerification in controllers, including core Action Controller and webhook verification helper modules.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/testing.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'test_helper'\nrequire 'action_controller'\nrequire 'action_controller/base'\nrequire 'shopify_app/test_helpers/webhook_verification_helper'\n```\n\n----------------------------------------\n\nTITLE: Setting Access Scopes in ShopifyApp Initializer (Ruby)\nDESCRIPTION: This snippet demonstrates how to set the required access scopes for script tag management in the ShopifyApp initializer for older apps.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/script-tags.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.scope = 'write_products,write_script_tags,read_themes'\n```\n\n----------------------------------------\n\nTITLE: Setting up Cloudflared Tunnel for Local Development\nDESCRIPTION: Command to create a secure tunnel from the internet to localhost using Cloudflare's tunneling service. This allows your local development environment to receive requests securely, which is necessary for app proxy controllers and webhooks.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/Quickstart.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# The port must be the same as the one you run the Rails app on later. We use the Rails default below.\ncloudflared tunnel --url http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Configuring Rails 6.1 for Shopify App Compatibility\nDESCRIPTION: Rails 6.1 configuration update to set cookies_same_site_protection to 'none', allowing cross-domain requests in the Shopify Admin for embedded apps.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/Troubleshooting.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# config/application.rb\n\nrequire_relative 'boot'\n\nrequire 'rails/all'\n\nBundler.require(*Rails.groups)\n\nmodule AppName\n  class Application < Rails::Application\n    config.load_defaults 6.1\n\n    config.action_dispatch.cookies_same_site_protection = :none\n    ...\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting HOST Environment Variable for Tunnel URL\nDESCRIPTION: Example of setting the HOST environment variable in your .env file to use the Cloudflare tunnel URL.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/Quickstart.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nHOST='https://some-random-words.trycloudflare.com/'\n```\n\n----------------------------------------\n\nTITLE: Adding Dotenv Rails to Install Generator in Ruby\nDESCRIPTION: Adds the dotenv-rails gem to the install generator, allowing apps to fetch credentials from .env files by default.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\ngem 'dotenv-rails', groups: [:development, :test]\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Route URLs in Shopify App\nDESCRIPTION: Configuration for root URL and login callback URL when using nested routes in the Shopify app.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/engine.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nShopifyApp.configure do |config|\n  config.root_url = '/nested'\n  config.login_callback_url = '/nested/auth/shopify/callback'\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Environment in Ruby\nDESCRIPTION: Setup code for test environment configuration, including Rails environment setup and importing all Shopify app test helpers.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/testing.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nENV['RAILS_ENV'] ||= 'test'\nrequire_relative '../config/environment'\nrequire 'rails/test_help'\nrequire 'byebug'\nrequire 'shopify_app/test_helpers/all'\n```\n\n----------------------------------------\n\nTITLE: Generating User Model for Online Token Storage in Ruby on Rails\nDESCRIPTION: This command generates a user model to store individual-based access tokens for Shopify apps.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/sessions.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nrails generate shopify_app:user_model\n```\n\n----------------------------------------\n\nTITLE: Generating Shop Model for Offline Token Storage in Ruby on Rails\nDESCRIPTION: This command generates a shop model to store offline access tokens for Shopify apps.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/sessions.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nrails generate shopify_app:shop_model\n```\n\n----------------------------------------\n\nTITLE: Configuring PubSub Webhooks\nDESCRIPTION: Configuration for setting up webhook delivery to Google Cloud Pub/Sub using project and topic IDs.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/webhooks.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nShopifyApp.configure do |config|\n  config.webhooks = [\n    {\n      delivery_method: :pub_sub,\n      topic: 'carts/update',\n      path: 'pubsub://project-id:pub-sub-topic-id'\n    }\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Log Level Configuration Options\nDESCRIPTION: Lists the available log levels in order of severity from least to most severe. The levels are Debug, Info, Warn, and Error, with Error being the most severe level.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/logging.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Debug\n2. Info\n3. Warn\n4. Error\n```\n\n----------------------------------------\n\nTITLE: Setting Access Scopes in shopify.app.toml (TOML)\nDESCRIPTION: This snippet shows how to set the required access scopes for script tag management in the shopify.app.toml file for apps created with the Shopify CLI.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/script-tags.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[access_scopes]\n# Learn more at https://shopify.dev/docs/apps/tools/cli/configuration#access_scopes\nscopes = \"write_products,write_script_tags,read_themes\"\n```\n\n----------------------------------------\n\nTITLE: Generating Shopify App without Webpacker in Ruby on Rails\nDESCRIPTION: This snippet demonstrates how to generate a Shopify App without using Webpacker by setting an environment variable and configuring the ShopifyApp in Ruby.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/generators.md#2025-04-23_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ SHOPIFY_APP_DISABLE_WEBPACKER=1 rails generate shopify_app\n```\n\nLANGUAGE: ruby\nCODE:\n```\nShopifyApp.configure do |config|\n  config.disable_webpacker = true\nend\n```\n\n----------------------------------------\n\nTITLE: Stopping Spring in Ruby on Rails\nDESCRIPTION: Command to stop the Spring application preloader in Ruby on Rails, which can help resolve issues with the shopify_app:install generator hanging.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/Troubleshooting.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbundle exec spring stop\n```\n\n----------------------------------------\n\nTITLE: Configuring Embedded App Redirect in JavaScript\nDESCRIPTION: Configuration for controlling the forceRedirect behavior in Shopify embedded apps based on the Rails environment.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/testing.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nforceRedirect: <%= Rails.env.development? || Rails.env.test? ? 'false' : 'true' %>\n```\n\n----------------------------------------\n\nTITLE: Log Level Configuration Symbol\nDESCRIPTION: Shows the symbol used for configuring the default log level in the shopify_app initializer. The default level is :info and can be set to :off to disable all logging.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/logging.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n:info\n:off\n```\n\n----------------------------------------\n\nTITLE: JWT Helper Methods Replacement Example\nDESCRIPTION: Example showing the replacement of deprecated JWT environment variables with new helper methods from ShopifyApp::WithShopifyIdToken concern.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/Upgrading.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# Old approach using environment variables:\nrequest.env[\"jwt.token\"]\nrequest.env[\"jwt.shopify_domain\"]\nrequest.env[\"jwt.shopify_user_id\"]\nrequest.env[\"jwt.expire_at\"]\n\n# New approach using helper methods:\nshopify_id_token\njwt_shopify_domain\njwt_shopify_user_id\njwt_expire_at\n```\n\n----------------------------------------\n\nTITLE: Updating embedded_app.html.erb from shop_session.url to shop_session.domain\nDESCRIPTION: Shows the required changes in the embedded_app.html.erb file when upgrading from v8.6 to v9.0.0, replacing shop_session.url with shop_session.domain in the ShopifyApp initialization.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/Upgrading.md#2025-04-23_snippet_3\n\nLANGUAGE: erb\nCODE:\n```\n<script type=\"text/javascript\">\n  ShopifyApp.init({\n    apiKey: \"<%= ShopifyApp.configuration.api_key %>\",\n\n    shopOrigin: \"<%= \"https://#{@shop_session.url}\" if @shop_session %>\",\n\n    debug: false,\n    forceRedirect: true\n  });\n</script>\n```\n\nLANGUAGE: erb\nCODE:\n```\n<script type=\"text/javascript\">\n  ShopifyApp.init({\n    apiKey: \"<%= ShopifyApp.configuration.api_key %>\",\n\n    shopOrigin: \"<%= \"https://#{@shop_session.domain}\" if @shop_session %>\",\n\n    debug: false,\n    forceRedirect: true\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Starting the Rails Server for Shopify App\nDESCRIPTION: Command to start the Rails server to run the Shopify app locally.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nrails server\n```\n\n----------------------------------------\n\nTITLE: Running Shopify App Gem Tests\nDESCRIPTION: Instructions for executing tests in the Shopify App gem development environment. Shows commands for running all tests, specific test files, or individual test cases using Rake.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbundle exec rake test\nbundle exec rake test TEST=test/controllers/callback_controller_test.rb\nbundle exec rake test TEST=test/controllers/callback_controller_test.rb:50\n```\n\n----------------------------------------\n\nTITLE: Creating Git Tag for ShopifyApp Release\nDESCRIPTION: Command for creating and pushing a new version tag for the ShopifyApp release. This is executed after merging the version update PR and pulling the latest master branch.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/Releasing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git tag -f vX.Y.Z && git push origin vX.Y.Z\n```\n\n----------------------------------------\n\nTITLE: Configuring SameSite Cookie Behavior in Ruby\nDESCRIPTION: Configures compatibility of embedded apps with Chrome 80 changes to SameSite cookie behavior. This can be enabled or disabled via a configuration option.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nShopifyApp.configuration.enable_same_site_none\n```\n\n----------------------------------------\n\nTITLE: Locking Shopify API Gem Version in Ruby\nDESCRIPTION: Locks the shopify_api gem dependency to version 7.x.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\ngem 'shopify_api', '~> 7.0'\n```\n\n----------------------------------------\n\nTITLE: Updating SQLite3 Development Dependency in Ruby\nDESCRIPTION: Updates the sqlite3 development dependency to version 1.4.x.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: Ruby\nCODE:\n```\ngem 'sqlite3', '~> 1.4'\n```\n\n----------------------------------------\n\nTITLE: Removing dotenv-rails Dependency in Ruby\nDESCRIPTION: Removes the dotenv-rails gem dependency from the Shopify App gem.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\n# Removed dependency:\n# gem 'dotenv-rails'\n```\n\n----------------------------------------\n\nTITLE: Updating Rails Version Requirement in Ruby\nDESCRIPTION: Updates the required Rails version to be greater than 5.2.1 to ensure compatibility with API version 2019-07 and to address security vulnerabilities.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/CHANGELOG.md#2025-04-23_snippet_8\n\nLANGUAGE: Ruby\nCODE:\n```\ngem 'rails', '> 5.2.1'\n```\n\n----------------------------------------\n\nTITLE: Renaming Login URL Method in Ruby\nDESCRIPTION: Renames the login_url method to login_url_with_optional_shop to avoid ambiguity with Rails' route helper method.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/CHANGELOG.md#2025-04-23_snippet_7\n\nLANGUAGE: Ruby\nCODE:\n```\n# Old method name:\n# login_url\n\n# New method name:\nlogin_url_with_optional_shop\n```\n\n----------------------------------------\n\nTITLE: Updating Browser Sniffer Version in Ruby\nDESCRIPTION: Updates the browser_sniffer gem dependency to version 1.1.3.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\ngem 'browser_sniffer', '1.1.3'\n```\n\n----------------------------------------\n\nTITLE: Updating OmniAuth Shopify OAuth2 Version in Ruby\nDESCRIPTION: Updates the omniauth-shopify-oauth2 gem dependency to version 2.2.0.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\ngem 'omniauth-shopify-oauth2', '2.2.0'\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Session Repositories in Shopify App Initializer\nDESCRIPTION: This Ruby code demonstrates how to configure custom session repositories for both shop and user sessions in the Shopify app initializer.\nSOURCE: https://github.com/shopify/shopify_app/blob/main/docs/shopify_app/sessions.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/shopify_app.rb\n\nconfig.shop_session_repository = MyCustomShopSessionRepository\nconfig.user_session_repository = MyCustomUserSessionRepository\n```"
  }
]