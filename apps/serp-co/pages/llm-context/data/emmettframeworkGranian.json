[
  {
    "owner": "emmett-framework",
    "repo": "granian",
    "content": "TITLE: Implementing an RSGI Application in Python\nDESCRIPTION: Example of a minimal RSGI (Rust Server Gateway Interface) application that returns 'Hello, world!' with a 200 status code. RSGI is Granian's custom interface that provides a more streamlined API compared to ASGI.\nSOURCE: https://github.com/emmett-framework/granian/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def app(scope, proto):\n    assert scope.proto == 'http'\n\n    proto.response_str(\n        status=200,\n        headers=[\n            ('content-type', 'text/plain')\n        ],\n        body=\"Hello, world!\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing an ASGI Application in Python\nDESCRIPTION: Example of a minimal ASGI (Asynchronous Server Gateway Interface) application that returns 'Hello, world!' with a 200 status code. The app handles HTTP requests by receiving scope information and using send/receive callbacks to return a response.\nSOURCE: https://github.com/emmett-framework/granian/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def app(scope, receive, send):\n    assert scope['type'] == 'http'\n\n    await send({\n        'type': 'http.response.start',\n        'status': 200,\n        'headers': [\n            [b'content-type', b'text/plain'],\n        ],\n    })\n    await send({\n        'type': 'http.response.body',\n        'body': b'Hello, world!',\n    })\n```\n\n----------------------------------------\n\nTITLE: Implementing a WSGI Application in Python\nDESCRIPTION: Example of a minimal WSGI (Web Server Gateway Interface) application that returns 'Hello, world!' with a 200 status code. This demonstrates the traditional synchronous interface for Python web applications.\nSOURCE: https://github.com/emmett-framework/granian/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef app(environ, start_response):\n    start_response('200 OK', [('content-type', 'text/plain')])\n    return [b\"Hello, world!\"]\n```\n\n----------------------------------------\n\nTITLE: Defining RSGI Application Interface in Python\nDESCRIPTION: Defines the core interface for an RSGI application, which is an async callable that takes a scope and protocol object. This is the entry point for handling connections in RSGI.\nSOURCE: https://github.com/emmett-framework/granian/blob/master/docs/spec/RSGI.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncoroutine application(scope, protocol)\n```\n\n----------------------------------------\n\nTITLE: Implementing RSGI and ASGI Support in Python Application\nDESCRIPTION: Shows how to create an application class that supports both RSGI and ASGI protocols by implementing both __call__ and __rsgi__ methods.\nSOURCE: https://github.com/emmett-framework/granian/blob/master/docs/spec/RSGI.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass App:\n    async def __call__(self, scope, receive, send):\n        # ASGI protocol handling\n    \n    async def __rsgi__(self, scope, protocol):\n        # RSGI protocol handling\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Protocol Interface Methods in Python\nDESCRIPTION: Lists the core methods of the HTTP protocol object, including receiving request bodies, sending responses, and handling client disconnections. Each method is described with its signature and purpose.\nSOURCE: https://github.com/emmett-framework/granian/blob/master/docs/spec/RSGI.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncoroutine __call__() -> body\nasynciterator __aiter__() -> body chunks\ncoroutine client_disconnect()\nfunction response_empty(status, headers)\nfunction response_str(status, headers, body)\nfunction response_bytes(status, headers, body)\nfunction response_file(status, headers, file)\nfunction response_stream(status, headers) -> transport\n```\n\n----------------------------------------\n\nTITLE: Implementing RSGI Initialization Method in Python\nDESCRIPTION: Demonstrates how to implement the __rsgi_init__ method for performing initialization tasks during server startup. It includes both synchronous and asynchronous initialization examples.\nSOURCE: https://github.com/emmett-framework/granian/blob/master/docs/spec/RSGI.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass App:\n    def __rsgi_init__(self, loop):\n        some_sync_init_task()\n        loop.run_until_complete(some_async_init_task())\n\n    async def __rsgi__(self, scope, protocol):\n        # RSGI protocol handling\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Connection Scope in Python\nDESCRIPTION: Defines the structure of the scope object for HTTP connections in RSGI. It includes details like RSGI version, HTTP version, server and client information, and request details.\nSOURCE: https://github.com/emmett-framework/granian/blob/master/docs/spec/RSGI.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass Scope:\n    proto: Literal['http'] = 'http'\n    rsgi_version: str\n    http_version: str\n    server: str\n    client: str\n    scheme: str\n    method: str\n    path: str\n    query_string: str\n    headers: Mapping[str, str]\n    authority: Optional[str]\n```\n\n----------------------------------------\n\nTITLE: Defining WebSocket Connection Scope in Python\nDESCRIPTION: Specifies the structure of the Scope object for WebSocket connections. This object contains metadata about the connection, including protocol version, HTTP details, and headers.\nSOURCE: https://github.com/emmett-framework/granian/blob/master/docs/spec/RSGI.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass Scope:\n    proto: Literal['ws'] = 'ws'\n    rsgi_version: str\n    http_version: str\n    server: str\n    client: str\n    scheme: str\n    method: str\n    path: str\n    query_string: str\n    headers: Mapping[str, str]\n    authority: Optional[str]\n```\n\n----------------------------------------\n\nTITLE: Customizing AsyncIO Event Loop Initialization in Granian for Windows\nDESCRIPTION: Demonstrates how to customize the default event loop initialization policy in Granian to use the Windows selector event loop. This code shows how to register a custom loop builder function that sets up a Windows-specific event loop policy.\nSOURCE: https://github.com/emmett-framework/granian/blob/master/README.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom granian import Granian, loops\n\n@loops.register('auto')\ndef build_loop():\n    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())\n    return asyncio.new_event_loop()\n\n\nGranian(...).serve()\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Access Log Format in Granian\nDESCRIPTION: Default format string used by Granian for access logging, including timestamp, client address, HTTP method, path, protocol, status code and request duration.\nSOURCE: https://github.com/emmett-framework/granian/blob/master/README.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n[%(time)s] %(addr)s - \"%(method)s %(path)s %(protocol)s\" %(status)d %(dt_ms).3f\n```\n\n----------------------------------------\n\nTITLE: Implementing Streaming Response Transport Methods in Python\nDESCRIPTION: Defines the methods available on the transport object returned by the response_stream function. These methods allow sending bytes or string content in a streaming manner.\nSOURCE: https://github.com/emmett-framework/granian/blob/master/docs/spec/RSGI.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ncoroutine send_bytes(bytes)\ncoroutine send_str(str)\n```\n\n----------------------------------------\n\nTITLE: Implementing RSGI Cleanup Method in Python\nDESCRIPTION: Shows how to implement the __rsgi_del__ method for performing cleanup operations during server shutdown. It includes both synchronous and asynchronous cleanup examples.\nSOURCE: https://github.com/emmett-framework/granian/blob/master/docs/spec/RSGI.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass App:\n    def __rsgi_del__(self, loop):\n        some_sync_cleanup_task()\n        loop.run_until_complete(some_async_cleanup_task())\n\n    async def __rsgi__(self, scope, protocol):\n        # RSGI protocol handling\n```\n\n----------------------------------------\n\nTITLE: Displaying Granian CLI Help Information\nDESCRIPTION: This command shows all available options for the Granian server, including their descriptions, default values, and corresponding environment variables. It covers a wide range of configuration options from basic server settings to advanced HTTP/2 and worker management features.\nSOURCE: https://github.com/emmett-framework/granian/blob/master/README.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n$ granian --help\nUsage: granian [OPTIONS] APP\n\n  APP  Application target to serve.  [required]\n\nOptions:\n  --host TEXT                     Host address to bind to  [env var:\n                                  GRANIAN_HOST; default: (127.0.0.1)]\n  --port INTEGER                  Port to bind to.  [env var: GRANIAN_PORT;\n                                  default: 8000]\n  --interface [asgi|asginl|rsgi|wsgi]\n                                  Application interface type  [env var:\n                                  GRANIAN_INTERFACE; default: (rsgi)]\n  --http [auto|1|2]               HTTP version  [env var: GRANIAN_HTTP;\n                                  default: (auto)]\n  --ws / --no-ws                  Enable websockets handling  [env var:\n                                  GRANIAN_WEBSOCKETS; default: (enabled)]\n  --workers INTEGER RANGE         Number of worker processes  [env var:\n                                  GRANIAN_WORKERS; default: 1; x>=1]\n  --blocking-threads INTEGER RANGE\n                                  Number of blocking threads (per worker)\n                                  [env var: GRANIAN_BLOCKING_THREADS; x>=1]\n  --blocking-threads-idle-timeout INTEGER RANGE\n                                  The maximum amount of time in seconds an\n                                  idle blocking thread will be kept alive\n                                  [env var:\n                                  GRANIAN_BLOCKING_THREADS_IDLE_TIMEOUT;\n                                  default: 30; 10<=x<=600]\n  --runtime-threads INTEGER RANGE\n                                  Number of runtime threads (per worker)  [env\n                                  var: GRANIAN_RUNTIME_THREADS; default: 1;\n                                  x>=1]\n  --runtime-blocking-threads INTEGER RANGE\n                                  Number of runtime I/O blocking threads (per\n                                  worker)  [env var:\n                                  GRANIAN_RUNTIME_BLOCKING_THREADS; x>=1]\n  --runtime-mode [mt|st]          Runtime mode to use (single/multi threaded)\n                                  [env var: GRANIAN_RUNTIME_MODE; default:\n                                  (st)]\n  --loop [auto|asyncio|rloop|uvloop]\n                                  Event loop implementation  [env var:\n                                  GRANIAN_LOOP; default: (auto)]\n  --task-impl [asyncio|rust]      Async task implementation to use  [env var:\n                                  GRANIAN_TASK_IMPL; default: (asyncio)]\n  --backlog INTEGER RANGE         Maximum number of connections to hold in\n                                  backlog (globally)  [env var:\n                                  GRANIAN_BACKLOG; default: 1024; x>=128]\n  --backpressure INTEGER RANGE    Maximum number of requests to process\n                                  concurrently (per worker)  [env var:\n                                  GRANIAN_BACKPRESSURE; default:\n                                  (backlog/workers); x>=1]\n  --http1-buffer-size INTEGER RANGE\n                                  Sets the maximum buffer size for HTTP/1\n                                  connections  [env var:\n                                  GRANIAN_HTTP1_BUFFER_SIZE; default: 417792;\n                                  x>=8192]\n  --http1-header-read-timeout INTEGER RANGE\n                                  Sets a timeout (in milliseconds) to read\n                                  headers  [env var:\n                                  GRANIAN_HTTP1_HEADER_READ_TIMEOUT; default:\n                                  30000; 1<=x<=60000]\n  --http1-keep-alive / --no-http1-keep-alive\n                                  Enables or disables HTTP/1 keep-alive  [env\n                                  var: GRANIAN_HTTP1_KEEP_ALIVE; default:\n                                  (enabled)]\n  --http1-pipeline-flush / --no-http1-pipeline-flush\n                                  Aggregates HTTP/1 flushes to better support\n                                  pipelined responses (experimental)  [env\n                                  var: GRANIAN_HTTP1_PIPELINE_FLUSH; default:\n                                  (disabled)]\n  --http2-adaptive-window / --no-http2-adaptive-window\n                                  Sets whether to use an adaptive flow control\n                                  for HTTP2  [env var:\n                                  GRANIAN_HTTP2_ADAPTIVE_WINDOW; default:\n                                  (disabled)]\n  --http2-initial-connection-window-size INTEGER RANGE\n                                  Sets the max connection-level flow control\n                                  for HTTP2  [env var: GRANIAN_HTTP2_INITIAL_C\n                                  ONNECTION_WINDOW_SIZE; default: 1048576;\n                                  x>=1024]\n  --http2-initial-stream-window-size INTEGER RANGE\n                                  Sets the `SETTINGS_INITIAL_WINDOW_SIZE`\n                                  option for HTTP2 stream-level flow control\n                                  [env var:\n                                  GRANIAN_HTTP2_INITIAL_STREAM_WINDOW_SIZE;\n                                  default: 1048576; x>=1024]\n  --http2-keep-alive-interval INTEGER RANGE\n                                  Sets an interval (in milliseconds) for HTTP2\n                                  Ping frames should be sent to keep a\n                                  connection alive  [env var:\n                                  GRANIAN_HTTP2_KEEP_ALIVE_INTERVAL;\n                                  1<=x<=60000]\n  --http2-keep-alive-timeout INTEGER RANGE\n                                  Sets a timeout (in seconds) for receiving an\n                                  acknowledgement of the HTTP2 keep-alive ping\n                                  [env var: GRANIAN_HTTP2_KEEP_ALIVE_TIMEOUT;\n                                  default: 20; x>=1]\n  --http2-max-concurrent-streams INTEGER RANGE\n                                  Sets the SETTINGS_MAX_CONCURRENT_STREAMS\n                                  option for HTTP2 connections  [env var:\n                                  GRANIAN_HTTP2_MAX_CONCURRENT_STREAMS;\n                                  default: 200; x>=10]\n  --http2-max-frame-size INTEGER RANGE\n                                  Sets the maximum frame size to use for HTTP2\n                                  [env var: GRANIAN_HTTP2_MAX_FRAME_SIZE;\n                                  default: 16384; x>=1024]\n  --http2-max-headers-size INTEGER RANGE\n                                  Sets the max size of received header frames\n                                  [env var: GRANIAN_HTTP2_MAX_HEADERS_SIZE;\n                                  default: 16777216; x>=1]\n  --http2-max-send-buffer-size INTEGER RANGE\n                                  Set the maximum write buffer size for each\n                                  HTTP/2 stream  [env var:\n                                  GRANIAN_HTTP2_MAX_SEND_BUFFER_SIZE; default:\n                                  409600; x>=1024]\n  --log / --no-log                Enable logging  [env var:\n                                  GRANIAN_LOG_ENABLED; default: (enabled)]\n  --log-level [critical|error|warning|warn|info|debug|notset]\n                                  Log level  [env var: GRANIAN_LOG_LEVEL;\n                                  default: (info)]\n  --log-config FILE               Logging configuration file (json)  [env var:\n                                  GRANIAN_LOG_CONFIG]\n  --access-log / --no-access-log  Enable access log  [env var:\n                                  GRANIAN_LOG_ACCESS_ENABLED; default:\n                                  (disabled)]\n  --access-log-fmt TEXT           Access log format  [env var:\n                                  GRANIAN_LOG_ACCESS_FMT]\n  --ssl-certificate FILE          SSL certificate file  [env var:\n                                  GRANIAN_SSL_CERTIFICATE]\n  --ssl-keyfile FILE              SSL key file  [env var: GRANIAN_SSL_KEYFILE]\n  --ssl-keyfile-password TEXT     SSL key password  [env var:\n                                  GRANIAN_SSL_KEYFILE_PASSWORD]\n  --url-path-prefix TEXT          URL path prefix the app is mounted on  [env\n                                  var: GRANIAN_URL_PATH_PREFIX]\n  --respawn-failed-workers / --no-respawn-failed-workers\n                                  Enable workers respawn on unexpected exit\n                                  [env var: GRANIAN_RESPAWN_FAILED_WORKERS;\n                                  default: (disabled)]\n  --respawn-interval FLOAT        The number of seconds to sleep between\n                                  workers respawn  [env var:\n                                  GRANIAN_RESPAWN_INTERVAL; default: 3.5]\n  --workers-lifetime INTEGER RANGE\n                                  The maximum amount of time in seconds a\n                                  worker will be kept alive before respawn\n                                  [env var: GRANIAN_WORKERS_LIFETIME; x>=60]\n  --workers-kill-timeout INTEGER RANGE\n                                  The amount of time in seconds to wait for\n                                  killing workers that refused to gracefully\n                                  stop  [env var:\n                                  GRANIAN_WORKERS_KILL_TIMEOUT; default:\n                                  (disabled); 1<=x<=1800]\n  --factory / --no-factory        Treat target as a factory function, that\n                                  should be invoked to build the actual target\n                                  [env var: GRANIAN_FACTORY; default:\n                                  (disabled)]\n  --reload / --no-reload          Enable auto reload on application's files\n                                  changes (requires granian[reload] extra)\n                                  [env var: GRANIAN_RELOAD; default:\n                                  (disabled)]\n```\n\n----------------------------------------\n\nTITLE: Defining WebSocket Transport Methods in Python\nDESCRIPTION: Specifies the methods available on the WebSocket transport object, including receiving messages and sending bytes or string content.\nSOURCE: https://github.com/emmett-framework/granian/blob/master/docs/spec/RSGI.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ncoroutine receive() -> message\ncoroutine send_bytes(bytes)\ncoroutine send_str(str)\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Protocol Interface Methods in Python\nDESCRIPTION: Defines the core methods for the WebSocket protocol object, including accepting connections and closing them. The accept method returns a transport object for message handling.\nSOURCE: https://github.com/emmett-framework/granian/blob/master/docs/spec/RSGI.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ncoroutine accept() -> transport\nfunction close(status)\n```\n\n----------------------------------------\n\nTITLE: Structuring WebSocket Messages in Python\nDESCRIPTION: Defines the structure of incoming WebSocket messages, including a kind indicator and optional data payload. The kind values are explained in a separate table.\nSOURCE: https://github.com/emmett-framework/granian/blob/master/docs/spec/RSGI.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass WebsocketMessage:\n    kind: int\n    data: Optional[Union[bytes, str]]\n```\n\n----------------------------------------\n\nTITLE: Generating Markdown Table for Benchmark Results in Python\nDESCRIPTION: This code snippet generates a markdown table displaying benchmark results for different interfaces (ASGI, RSGI, WSGI). It iterates through the data, calculates maximum RPS, and formats the results into a table.\nSOURCE: https://github.com/emmett-framework/granian/blob/master/benchmarks/templates/concurrency.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n{{ for interface in [\"asgi\", \"rsgi\", \"wsgi\"]: }}\n### {{ =interface.upper() }}\n{{ max_rps = {\"runtime\": 0, \"workers\": 0} }}\n{{ for runs in data.results[\"concurrencies\"][interface].values(): }}\n{{ for crun in runs[\"res\"].values(): }}\n{{ max_rps[runs[\"m\"]] = max(int(crun[\"requests\"][\"rps\"]), max_rps[runs[\"m\"]]) }}\n{{ pass }}\n{{ pass }}\n\n| Mode | Processes | Threads | Total requests | RPS | avg latency | max latency |\n| --- | --- | --- | --- | --- | --- | --- |\n{{ for runs in data.results[\"concurrencies\"][interface].values(): }}\n{{ max_c, run = get_max_concurrency_run(runs[\"res\"]) }}\n{{ if int(run[\"requests\"][\"rps\"]) == max_rps[runs[\"m\"]]: }}\n| **{{ =runs[\"m\"] }} (c{{ =max_c }})** | **{{ =runs[\"p\"] }}** | **{{ =runs[\"t\"] }}** | **{{ =run[\"requests\"][\"total\"] }}** | **{{ =run[\"requests\"][\"rps\"] }}** | **{{ =fmt_ms(run[\"latency\"][\"avg\"]) }}** | **{{ =fmt_ms(run[\"latency\"][\"max\"]) }}** |\n{{ else: }}\n| {{ =runs[\"m\"] }} (c{{ =max_c }}) | {{ =runs[\"p\"] }} | {{ =runs[\"t\"] }} | {{ =run[\"requests\"][\"total\"] }} | {{ =run[\"requests\"][\"rps\"] }} | {{ =fmt_ms(run[\"latency\"][\"avg\"]) }} | {{ =fmt_ms(run[\"latency\"][\"max\"]) }} |\n{{ pass }}\n{{ pass }}\n\n{{ pass }}\n```\n\n----------------------------------------\n\nTITLE: Rendering Performance Comparison Table Template\nDESCRIPTION: Template code that generates a comparison table showing performance metrics for different RSGI response types. Uses a loop to iterate through data entries and formats latency values.\nSOURCE: https://github.com/emmett-framework/granian/blob/master/benchmarks/templates/_rsgi.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{{ for key, runs in _data.items(): }}\n{{ max_c, run = get_max_concurrency_run(runs) }}\n| {{ =key }} (c{{ =max_c }}) | {{ =run[\"requests\"][\"total\"] }} | {{ =run[\"requests\"][\"rps\"] }} | {{ =fmt_ms(run[\"latency\"][\"avg\"]) }} | {{ =fmt_ms(run[\"latency\"][\"max\"]) }} |\n{{ pass }}\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results Table - Plain Text Async Performance\nDESCRIPTION: Markdown table showing plain text benchmark results for async web servers, comparing RPS (Requests Per Second) and relative performance rates\nSOURCE: https://github.com/emmett-framework/granian/blob/master/benchmarks/external/tfb.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Server | RPS | Change (rate) |\n| --- | --- | --- |\n| Granian (ASGI) | 1362259 | 0.77 |\n| Granian (RSGI) | 1759305 | 1.0 |\n| Robyn | 443935 | 0.25 |\n| Uvicorn (httptools) | 1005511 | 0.57 |\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results Table - Plain Text Sync Performance\nDESCRIPTION: Markdown table showing plain text benchmark results for synchronous web servers, comparing RPS and relative performance rates\nSOURCE: https://github.com/emmett-framework/granian/blob/master/benchmarks/external/tfb.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Server | RPS | Change (rate) |\n| --- | --- | --- |\n| Fastwsgi | 4035957 | 2.16 |\n| Granian (WSGI) | 1872136 | 1.0 |\n| uWSGI | 180213 | 0.1 |\n| uWSGI + Nginx | 26940 | 0.01 |\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results Table - JSON Async Performance\nDESCRIPTION: Markdown table showing JSON response benchmark results for async web servers, comparing RPS and relative performance rates\nSOURCE: https://github.com/emmett-framework/granian/blob/master/benchmarks/external/tfb.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Server | RPS | Change (rate) |\n| --- | --- | --- |\n| FastWSGI (ASGI) | 1166556 | 0.96 |\n| Granian (ASGI) | 1018853 | 0.84 |\n| Granian (RSGI) | 1214461 | 1.0 |\n| Robyn | 335754 | 0.28 |\n| Uvicorn (httptools) | 850203 | 0.7 |\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results Table - JSON Sync Performance\nDESCRIPTION: Markdown table showing JSON response benchmark results for synchronous web servers, comparing RPS and relative performance rates\nSOURCE: https://github.com/emmett-framework/granian/blob/master/benchmarks/external/tfb.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Server | RPS | Change (rate) |\n| --- | --- | --- |\n| Fastwsgi | 2347010 | 1.67 |\n| Granian (WSGI) | 1402353 | 1.0 |\n| uWSGI | 188396 | 0.13 |\n| uWSGI + Nginx | 14150 | 0.01 |\n```\n\n----------------------------------------\n\nTITLE: Python Loop Results Processing\nDESCRIPTION: Iterates through benchmark results for different protocols and their implementations, processing and displaying performance metrics.\nSOURCE: https://github.com/emmett-framework/granian/blob/master/benchmarks/templates/asyncio.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n{{ _data = globals().get(\"datal\", {}) }}\n{{ for proto, pdata in _data.results[\"loops\"].items(): }}\n{{ for key, runs in pdata.items(): }}\n{{ max_c, run = get_max_concurrency_run(runs) }}\n```\n\n----------------------------------------\n\nTITLE: Python Version-Specific Task Implementation Processing\nDESCRIPTION: Processes benchmark results for different Python versions, comparing task implementation performance metrics.\nSOURCE: https://github.com/emmett-framework/granian/blob/master/benchmarks/templates/asyncio.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n{{ for pykey in [\"309\", \"310\", \"311\"]: }}\n{{ _data = globals().get(f\"datat{pykey}\") }}\n{{ if not _data: }}\n{{ continue }}\n{{ for key, runs in _data.results[\"task_impl\"].items(): }}\n{{ max_c, run = get_max_concurrency_run(runs) }}\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Python Versions for Benchmark Comparison\nDESCRIPTION: Loops through multiple Python versions (3.9-3.13) to display benchmark results for each version, skipping any version without data.\nSOURCE: https://github.com/emmett-framework/granian/blob/master/benchmarks/templates/pyver.md#2025-04-21_snippet_4\n\nLANGUAGE: jinja\nCODE:\n```\n{{ for pykey in [\"309\", \"310\", \"311\", \"312\", \"313\"]: }}\n{{ _data = globals().get(f\"data{pykey}\") }}\n{{ if not _data: }}\n{{ continue }}\n{{ for key, runs in _data.results[\"interfaces\"].items(): }}\n{{ max_c, run = get_max_concurrency_run(runs) }}\n| {{ =_data.pyver }} | {{ =key }} (c{{ =max_c }}) | {{ =run[\"requests\"][\"total\"] }} | {{ =run[\"requests\"][\"rps\"] }} | {{ =fmt_ms(run[\"latency\"][\"avg\"]) }} | {{ =fmt_ms(run[\"latency\"][\"max\"]) }} |\n{{ pass }}\n{{ pass }}\n```\n\n----------------------------------------\n\nTITLE: Protocol Benchmark Data Processing\nDESCRIPTION: Template code blocks for processing and displaying benchmark results for different protocols (ASGI, WSGI, HTTP/2, files, I/O)\nSOURCE: https://github.com/emmett-framework/granian/blob/master/benchmarks/templates/vs.md#2025-04-21_snippet_2\n\nLANGUAGE: template\nCODE:\n```\n{{ _data = data.results[\"vs_asgi\"] }}\n{{ include './_vs_table.tpl' }}\n```\n\n----------------------------------------\n\nTITLE: Websocket Benchmark Conditional Rendering\nDESCRIPTION: Conditional template block for processing and displaying websocket benchmark results when websocket data is available\nSOURCE: https://github.com/emmett-framework/granian/blob/master/benchmarks/templates/vs.md#2025-04-21_snippet_3\n\nLANGUAGE: template\nCODE:\n```\n{{ if wsdata := globals().get(\"wsdata\"): }}\n{{ _data = wsdata.results[\"vs_ws\"] }}\n{{ include './_vs_ws_table.tpl' }}\n{{ pass }}\n```\n\n----------------------------------------\n\nTITLE: Specifying Event Loop Library Dependencies\nDESCRIPTION: Lists required Python event loop libraries for the Granian project. The file specifies uvloop and rloop, which are performance-oriented event loop implementations for asyncio in Python.\nSOURCE: https://github.com/emmett-framework/granian/blob/master/benchmarks/envs/common.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nuvloop\nrloop\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Settings for Granian Development\nDESCRIPTION: Commands to configure git global settings with username and email for contribution setup\nSOURCE: https://github.com/emmett-framework/granian/blob/master/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git config --global user.name 'your name'\n$ git config --global user.email 'your email'\n```\n\n----------------------------------------\n\nTITLE: Cloning Granian Repository\nDESCRIPTION: Commands to clone the forked Granian repository and navigate to project directory\nSOURCE: https://github.com/emmett-framework/granian/blob/master/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone https://github.com/your-username/granian\n$ cd granian\n```\n\n----------------------------------------\n\nTITLE: Building Granian Development Environment\nDESCRIPTION: Command to initialize and build the Granian development environment\nSOURCE: https://github.com/emmett-framework/granian/blob/master/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ make build-dev\n```\n\n----------------------------------------\n\nTITLE: Creating Feature Branch in Granian\nDESCRIPTION: Commands to fetch latest changes and create a new feature branch for development\nSOURCE: https://github.com/emmett-framework/granian/blob/master/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ git fetch origin\n$ git checkout -b 123-add-some-feature origin/master\n```\n\n----------------------------------------\n\nTITLE: Running Formatters and Linters\nDESCRIPTION: Commands to run code formatters and linters on changes\nSOURCE: https://github.com/emmett-framework/granian/blob/master/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ make format\n$ make lint\n```\n\n----------------------------------------\n\nTITLE: Running Granian Test Suite\nDESCRIPTION: Commands to build development environment and run the test suite\nSOURCE: https://github.com/emmett-framework/granian/blob/master/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ make build-dev\n$ make test\n```\n\n----------------------------------------\n\nTITLE: Including Plaintext Benchmark Results Template\nDESCRIPTION: Sets the test type to 'plaintext' and includes a template file to render benchmark results for that specific test type.\nSOURCE: https://github.com/emmett-framework/granian/blob/master/benchmarks/templates/external/tfb.md#2025-04-21_snippet_3\n\nLANGUAGE: jinja\nCODE:\n```\n{{ _test = \"plaintext\" }}\n{{ include './_tfb_table.tpl' }}\n```\n\n----------------------------------------\n\nTITLE: Including JSON Benchmark Results Template\nDESCRIPTION: Sets the test type to 'json' and includes a template file to render benchmark results for that specific test type.\nSOURCE: https://github.com/emmett-framework/granian/blob/master/benchmarks/templates/external/tfb.md#2025-04-21_snippet_4\n\nLANGUAGE: jinja\nCODE:\n```\n{{ _test = \"json\" }}\n{{ include './_tfb_table.tpl' }}\n```\n\n----------------------------------------\n\nTITLE: Templating Benchmark Data in Markdown\nDESCRIPTION: The template uses custom templating syntax to include various benchmark result sections and display metadata about the benchmark environment. It references the execution timestamp, environment details, CPU count, Python version, and Granian version before including sub-templates for specific benchmark categories.\nSOURCE: https://github.com/emmett-framework/granian/blob/master/benchmarks/templates/main.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{ include './_helpers.tpl' }}\n\nRun at: {{ =datetime.datetime.fromtimestamp(data.run_at).strftime('%a %d %b %Y, %H:%M') }}    \nEnvironment: {{ =benv }} (CPUs: {{ =data.cpu }})    \nPython version: {{ =data.pyver }}    \nGranian version: {{ =data.granian }}\n\n*Note: unless otherwise specified, all benchmarks are run with 1 server worker and 1 thread.*\n\n{{ _data = data.results[\"rsgi_body\"] }}\n{{ include './_rsgi.md' }}\n\n{{ _data = data.results[\"interfaces\"] }}\n{{ include './_ifaces.md' }}\n\n{{ _data = data.results[\"http2\"] }}\n{{ include './_http2.md' }}\n\n{{ _data = data.results[\"files\"] }}\n{{ include './_files.md' }}\n```\n\n----------------------------------------\n\nTITLE: Python Template Variable Definition\nDESCRIPTION: Template variables defining common data and environment settings for benchmark results display.\nSOURCE: https://github.com/emmett-framework/granian/blob/master/benchmarks/templates/asyncio.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n{{ _common_data = globals().get(\"datal\") }}\n```\n\n----------------------------------------\n\nTITLE: Benchmark Template Including\nDESCRIPTION: Template include directive for helper functions used in benchmark reporting\nSOURCE: https://github.com/emmett-framework/granian/blob/master/benchmarks/templates/vs.md#2025-04-21_snippet_0\n\nLANGUAGE: template\nCODE:\n```\n{{ include './_helpers.tpl' }}\n```\n\n----------------------------------------\n\nTITLE: Benchmark Data Rendering\nDESCRIPTION: Template expressions for rendering benchmark environment details including timestamp, environment info, Python version and Granian version\nSOURCE: https://github.com/emmett-framework/granian/blob/master/benchmarks/templates/vs.md#2025-04-21_snippet_1\n\nLANGUAGE: template\nCODE:\n```\n{{ =datetime.datetime.fromtimestamp(data.run_at).strftime('%a %d %b %Y, %H:%M') }}\n{{ =benv }}\n{{ =data.cpu }}\n{{ =data.pyver }}\n{{ =data.granian }}\n```\n\n----------------------------------------\n\nTITLE: Displaying Benchmark Timestamp in Jinja Template\nDESCRIPTION: Renders the timestamp of when the benchmark was run using Jinja templating syntax. It converts the Unix timestamp to a formatted datetime string.\nSOURCE: https://github.com/emmett-framework/granian/blob/master/benchmarks/templates/external/tfb.md#2025-04-21_snippet_0\n\nLANGUAGE: jinja\nCODE:\n```\n{{ =datetime.datetime.fromtimestamp(data.run_at).strftime('%a %d %b %Y, %H:%M') }}\n```\n\n----------------------------------------\n\nTITLE: Rendering Benchmark Run Data with Jinja\nDESCRIPTION: Creates links to the benchmark visualization using data from the run ID and URL variables through Jinja templating.\nSOURCE: https://github.com/emmett-framework/granian/blob/master/benchmarks/templates/external/tfb.md#2025-04-21_snippet_1\n\nLANGUAGE: jinja\nCODE:\n```\n{{ =data.run }} ([visualize]({{ =data.url }}))\n```\n\n----------------------------------------\n\nTITLE: Setting Benchmark Data Variables in Jinja\nDESCRIPTION: Extracts benchmark results and labels from the data object and assigns them to local template variables for later use.\nSOURCE: https://github.com/emmett-framework/granian/blob/master/benchmarks/templates/external/tfb.md#2025-04-21_snippet_2\n\nLANGUAGE: jinja\nCODE:\n```\n{{ _data, _labels = data.results, data.labels }}\n```\n\n----------------------------------------\n\nTITLE: Including Helper Template in Jinja\nDESCRIPTION: Includes a helper template file with common functions and utilities for the benchmark report.\nSOURCE: https://github.com/emmett-framework/granian/blob/master/benchmarks/templates/pyver.md#2025-04-21_snippet_0\n\nLANGUAGE: jinja\nCODE:\n```\n{{ include './_helpers.tpl' }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Benchmark Data by Python Version\nDESCRIPTION: Retrieves benchmark data for the current Python version from a global variable.\nSOURCE: https://github.com/emmett-framework/granian/blob/master/benchmarks/templates/pyver.md#2025-04-21_snippet_1\n\nLANGUAGE: jinja\nCODE:\n```\n{{ _common_data = globals().get(f\"data{pyvb}\") }}\n```\n\n----------------------------------------\n\nTITLE: Formatting Benchmark Run Timestamp\nDESCRIPTION: Retrieves and formats the timestamp when the benchmark was run.\nSOURCE: https://github.com/emmett-framework/granian/blob/master/benchmarks/templates/pyver.md#2025-04-21_snippet_2\n\nLANGUAGE: jinja\nCODE:\n```\n{{ =datetime.datetime.fromtimestamp(_common_data.run_at).strftime('%a %d %b %Y, %H:%M') }}\n```\n\n----------------------------------------\n\nTITLE: Displaying Environment and Version Information\nDESCRIPTION: Displays benchmark environment details and Granian version information.\nSOURCE: https://github.com/emmett-framework/granian/blob/master/benchmarks/templates/pyver.md#2025-04-21_snippet_3\n\nLANGUAGE: jinja\nCODE:\n```\n{{ =benv }} (CPUs: {{ =_common_data.cpu }})\n```\n\nLANGUAGE: jinja\nCODE:\n```\n{{ =_common_data.granian }}\n```\n\n----------------------------------------\n\nTITLE: Python DateTime Formatting\nDESCRIPTION: Formats timestamp into human-readable date string for benchmark run time display.\nSOURCE: https://github.com/emmett-framework/granian/blob/master/benchmarks/templates/asyncio.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n{{ =datetime.datetime.fromtimestamp(_common_data.run_at).strftime('%a %d %b %Y, %H:%M') }}\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Version Requirement\nDESCRIPTION: Specifies the exact version (0.3.21) of the selectolax package required for the project. Uses pip's requirements.txt format for package version pinning.\nSOURCE: https://github.com/emmett-framework/granian/blob/master/benchmarks/external/tfb/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nselectolax==0.3.21\n```"
  }
]