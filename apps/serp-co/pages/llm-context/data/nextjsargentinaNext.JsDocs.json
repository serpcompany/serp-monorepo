[
  {
    "owner": "nextjsargentina",
    "repo": "next.js-docs",
    "content": "TITLE: Data Fetching with Cache Tags\nDESCRIPTION: Example of how to implement cache tags with fetch requests for granular cache invalidation in Next.js pages.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/01-fetching-caching-and-revalidating.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default async function Page() {\n  const res = await fetch('https://...', { next: { tags: ['collection'] } })\n  const data = await res.json()\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Lazy Loading Client Components in Next.js\nDESCRIPTION: This snippet demonstrates how to use next/dynamic to lazy load Client Components in Next.js. It shows immediate loading, conditional loading, and client-side only loading of components.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/07-lazy-loading.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { useState } from 'react'\nimport dynamic from 'next/dynamic'\n\n// Client Components:\nconst ComponentA = dynamic(() => import('../components/A'))\nconst ComponentB = dynamic(() => import('../components/B'))\nconst ComponentC = dynamic(() => import('../components/C'), { ssr: false })\n\nexport default function ClientComponentExample() {\n  const [showMore, setShowMore] = useState(false)\n\n  return (\n    <div>\n      {/* Load immediately, but in a separate client bundle */}\n      <ComponentA />\n\n      {/* Load on demand, only when/if the condition is met */}\n      {showMore && <ComponentB />}\n      <button onClick={() => setShowMore(!showMore)}>Toggle</button>\n\n      {/* Load only on the client side */}\n      <ComponentC />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Server Actions in Server Components with TSX\nDESCRIPTION: Shows how to create an inline Server Action within a Server Component by adding the 'use server' directive at the top of an async function. This approach enables the function to execute on the server while being called from the component.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/02-server-actions-and-mutations.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// Server Component\nexport default function Page() {\n  // Server Action\n  async function create() {\n    'use server'\n\n    // ...\n  }\n\n  return (\n    // ...\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing getStaticProps in Next.js\nDESCRIPTION: Implementation of getStaticProps to fetch external data at build time for static page generation. Shows how to fetch blog posts and pass them as props to the page component.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/02-rendering/02-static-site-generation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Blog({ posts }) {\n  // Render posts...\n}\n\n// This function gets called at build time\nexport async function getStaticProps() {\n  // Call an external API endpoint to get posts\n  const res = await fetch('https://.../posts')\n  const posts = await res.json()\n\n  // By returning { props: { posts } }, the Blog component\n  // will receive `posts` as a prop at build time\n  return {\n    props: {\n      posts,\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking Server Actions from Form Element Event Handlers in Next.js\nDESCRIPTION: This snippet shows how to invoke a Server Action from a form element's event handler, specifically saving a draft on the onChange event of a textarea in a Next.js application.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/02-server-actions-and-mutations.mdx#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { publishPost, saveDraft } from './actions'\n\nexport default function EditPost() {\n  return (\n    <form action={publishPost}>\n      <textarea\n        name=\"content\"\n        onChange={async (e) => {\n          await saveDraft(e.target.value)\n        }}\n      />\n      <button type=\"submit\">Publish</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Submit Button with Pending State in a Form with JSX\nDESCRIPTION: Demonstrates how to integrate a custom submit button component that handles pending states into a form with a Server Action in JavaScript. This pattern improves UX by providing visual feedback during submissions.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/02-server-actions-and-mutations.mdx#2025-04-22_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SubmitButton } from '@/app/submit-button'\nimport { createItem } from '@/app/actions'\n\n// Server Component\nexport default async function Home() {\n  return (\n    <form action={createItem}>\n      <input type=\"text\" name=\"field-name\" />\n      <SubmitButton />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Methods in Route Handlers (TypeScript)\nDESCRIPTION: This snippet demonstrates how to implement various HTTP methods (GET, HEAD, POST, PUT, DELETE, PATCH, OPTIONS) in a Next.js route handler using TypeScript. It shows the basic structure for each method, accepting a Request object as a parameter.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/route.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function GET(request: Request) {}\n\nexport async function HEAD(request: Request) {}\n\nexport async function POST(request: Request) {}\n\nexport async function PUT(request: Request) {}\n\nexport async function DELETE(request: Request) {}\n\nexport async function PATCH(request: Request) {}\n\n// If `OPTIONS` is not defined, Next.js will automatically implement `OPTIONS` and  set the appropriate Response `Allow` header depending on the other methods defined in the route handler.\nexport async function OPTIONS(request: Request) {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Boundary Component in Next.js (TypeScript)\nDESCRIPTION: A TypeScript implementation of an error handling component using the error.js convention in Next.js. The component wraps route segments in React Error Boundaries, logs errors, and provides a recovery mechanism through the reset function.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/05-error-handling.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n'use client' // Error components must be Client Components\n\nimport { useEffect } from 'react'\n\nexport default function Error({\n  error,\n  reset,\n}: {\n  error: Error & { digest?: string }\n  reset: () => void\n}) {\n  useEffect(() => {\n    // Log the error to an error reporting service\n    console.error(error)\n  }, [error])\n\n  return (\n    <div>\n      <h2>Something went wrong!</h2>\n      <button\n        onClick={\n          // Attempt to recover by trying to re-render the segment\n          () => reset()\n        }\n      >\n        Try again\n      </button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js Project with create-next-app\nDESCRIPTION: Command to create a new Next.js project using create-next-app, which sets up everything automatically.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/01-getting-started/01-installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest\n```\n\n----------------------------------------\n\nTITLE: Creating a Root Layout in Next.js App Router\nDESCRIPTION: Example of a required root layout that wraps all routes in the application. It must contain html and body tags and serves as the replacement for _app.js and _document.js from the Pages Router.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/02-pages-and-layouts.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>\n        {/* Layout UI */}\n        <main>{children}</main>\n      </body>\n    </html>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        {/* Layout UI */}\n        <main>{children}</main>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Revalidating Data with revalidatePath in Next.js (JavaScript)\nDESCRIPTION: This snippet demonstrates using the revalidatePath API to revalidate the Next.js Cache inside a Server Action in JavaScript. It shows revalidating the '/posts' path after creating a new post.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/02-server-actions-and-mutations.mdx#2025-04-22_snippet_28\n\nLANGUAGE: js\nCODE:\n```\n'use server'\n\nimport { revalidatePath } from 'next/cache'\n\nexport async function createPost() {\n  try {\n    // ...\n  } catch (error) {\n    // ...\n  }\n\n  revalidatePath('/posts')\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Module-Level Server Actions with JavaScript\nDESCRIPTION: Demonstrates creating a dedicated file for Server Actions using the module-level 'use server' directive in JavaScript. This allows the actions to be exported and reused across components.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/02-server-actions-and-mutations.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n'use server'\n\nexport async function create() {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking Server Actions from Event Handlers in Next.js\nDESCRIPTION: This snippet demonstrates how to invoke a Server Action from an event handler, specifically an onClick event, to increment a like count in a Next.js application.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/02-server-actions-and-mutations.mdx#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { incrementLike } from './actions'\nimport { useState } from 'react'\n\nexport default function LikeButton({ initialLikes }: { initialLikes: number }) {\n  const [likes, setLikes] = useState(initialLikes)\n\n  return (\n    <>\n      <p>Total Likes: {likes}</p>\n      <button\n        onClick={async () => {\n          const updatedLikes = await incrementLike()\n          setLikes(updatedLikes)\n        }}\n      >\n        Like\n      </button>\n    </>\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nimport { incrementLike } from './actions'\nimport { useState } from 'react'\n\nexport default function LikeButton({ initialLikes }) {\n  const [likes, setLikes] = useState(initialLikes)\n\n  return (\n    <>\n      <p>Total Likes: {likes}</p>\n      <button\n        onClick={async () => {\n          const updatedLikes = await incrementLike()\n          setLikes(updatedLikes)\n        }}\n      >\n        Like\n      </button>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Parallel Data Fetching in Next.js\nDESCRIPTION: This code snippet shows how to implement parallel data fetching in a Next.js page component. It initiates requests for artist data and album data simultaneously, then waits for both promises to resolve before rendering.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/03-patterns.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Albums from './albums'\n\nasync function getArtist(username: string) {\n  const res = await fetch(`https://api.example.com/artist/${username}`)\n  return res.json()\n}\n\nasync function getArtistAlbums(username: string) {\n  const res = await fetch(`https://api.example.com/artist/${username}/albums`)\n  return res.json()\n}\n\nexport default async function Page({\n  params: { username },\n}: {\n  params: { username: string }\n}) {\n  // Initiate both requests in parallel\n  const artistData = getArtist(username)\n  const albumsData = getArtistAlbums(username)\n\n  // Wait for the promises to resolve\n  const [artist, albums] = await Promise.all([artistData, albumsData])\n\n  return (\n    <>\n      <h1>{artist.name}</h1>\n      <Albums list={albums}></Albums>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Preload Pattern in Next.js Page Component (TypeScript)\nDESCRIPTION: This code demonstrates how to use the preload pattern in a Next.js page component. It preloads item data and performs an additional asynchronous task before rendering the Item component.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/03-patterns.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport Item, { preload, checkIsAvailable } from '@/components/Item'\n\nexport default async function Page({\n  params: { id },\n}: {\n  params: { id: string }\n}) {\n  // starting loading item data\n  preload(id)\n  // perform another asynchronous task\n  const isAvailable = await checkIsAvailable()\n\n  return isAvailable ? <Item id={id} /> : null\n}\n```\n\n----------------------------------------\n\nTITLE: Using useRouter Hook in Next.js Client Component (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the useRouter hook in a Next.js Client Component to programmatically navigate to a different route when a button is clicked.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/use-router.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { useRouter } from 'next/navigation'\n\nexport default function Page() {\n  const router = useRouter()\n\n  return (\n    <button type=\"button\" onClick={() => router.push('/dashboard')}>\n      Dashboard\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Route Handler in Next.js\nDESCRIPTION: This snippet shows how to define a basic Route Handler in Next.js using TypeScript or JavaScript. It demonstrates setting dynamic behavior and handling GET requests.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/12-route-handlers.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const dynamic = 'force-dynamic' // defaults to auto\nexport async function GET(request: Request) {}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport const dynamic = 'force-dynamic' // defaults to auto\nexport async function GET(request) {}\n```\n\n----------------------------------------\n\nTITLE: Creating a Form Submit Button with Pending State in TSX\nDESCRIPTION: Shows how to implement a submit button in TypeScript that reflects the pending state of form submission using React's useFormStatus hook. This provides visual feedback during async operations.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/02-server-actions-and-mutations.mdx#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { useFormStatus } from 'react-dom'\n\nexport function SubmitButton() {\n  const { pending } = useFormStatus()\n\n  return (\n    <button type=\"submit\" disabled={pending}>\n      Add\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Closures in Server Actions with Next.js (JavaScript)\nDESCRIPTION: This snippet shows how to use closures in Server Actions to capture a snapshot of data at render time in JavaScript. It checks if a version has changed since the initial render before proceeding with an action.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/02-server-actions-and-mutations.mdx#2025-04-22_snippet_37\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Page() {\n  const publishVersion = await getLatestVersion();\n\n  async function publish() {\n    \"use server\";\n    if (publishVersion !== await getLatestVersion()) {\n      throw new Error('The version has changed since pressing publish');\n    }\n    ...\n  }\n\n  return <button action={publish}>Publish</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Next.js Image Component Usage\nDESCRIPTION: Basic implementation of the Next.js Image Component showing required props including src, width, height, and alt attributes.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/image.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from 'next/image'\n\nexport default function Page() {\n  return (\n    <Image\n      src=\"/profile.png\"\n      width={500}\n      height={500}\n      alt=\"Picture of the author\"\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication-based Redirect using Next.js Middleware (TypeScript)\nDESCRIPTION: Implementation of authentication-based redirects using Next.js Middleware with TypeScript. Redirects unauthenticated users to the login page when accessing protected routes.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/06-redirecting.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse, NextRequest } from 'next/server'\nimport { authenticate } from 'auth-provider'\n\nexport function middleware(request: NextRequest) {\n  const isAuthenticated = authenticate(request)\n\n  // If the user is authenticated, continue as normal\n  if (isAuthenticated) {\n    return NextResponse.next()\n  }\n\n  // Redirect to login page if not authenticated\n  return NextResponse.redirect(new URL('/login', request.url))\n}\n\nexport const config = {\n  matcher: '/dashboard/:path*',\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Server-Side Data Fetching in Next.js\nDESCRIPTION: Demonstrates how to fetch data in a Next.js page component using async/await with the fetch API. Includes error handling and type safety considerations.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/01-fetching-caching-and-revalidating.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync function getData() {\n  const res = await fetch('https://api.example.com/...')\n  // The return value is *not* serialized\n  // You can return Date, Map, Set, etc.\n\n  if (!res.ok) {\n    // This will activate the closest `error.js` Error Boundary\n    throw new Error('Failed to fetch data')\n  }\n\n  return res.json()\n}\n\nexport default async function Page() {\n  const data = await getData()\n\n  return <main></main>\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Server Actions (JavaScript)\nDESCRIPTION: This snippet shows error handling in a Server Action using try/catch in JavaScript. It demonstrates how to throw a custom error message when creating a new item fails.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/02-server-actions-and-mutations.mdx#2025-04-22_snippet_26\n\nLANGUAGE: js\nCODE:\n```\n'use server'\n\nexport async function createTodo(prevState, formData) {\n  try {\n    //  Mutate data\n  } catch (e) {\n    throw new Error('Failed to create task')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: On-Demand Data Revalidation with Server Actions\nDESCRIPTION: Shows how to implement on-demand data revalidation using Next.js server actions and the revalidateTag function.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/01-fetching-caching-and-revalidating.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n'use server'\n\nimport { revalidateTag } from 'next/cache'\n\nexport default async function action() {\n  revalidateTag('collection')\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting After Server Action in Next.js (JavaScript)\nDESCRIPTION: This snippet shows how to use the redirect API in JavaScript to navigate the user to a different route after completing a Server Action. It also demonstrates revalidating cached data before redirecting.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/02-server-actions-and-mutations.mdx#2025-04-22_snippet_32\n\nLANGUAGE: js\nCODE:\n```\n'use server'\n\nimport { redirect } from 'next/navigation'\nimport { revalidateTag } from 'next/cache'\n\nexport async function createPost(id) {\n  try {\n    // ...\n  } catch (error) {\n    // ...\n  }\n\n  revalidateTag('posts') // Update cached posts\n  redirect(`/post/${id}`) // Navigate to the new post page\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Server Actions as Props to Client Components\nDESCRIPTION: Example of passing a Server Action as a prop to a Client Component, allowing the Client Component to trigger the server-side function. This approach maintains the separation between client and server code.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/02-server-actions-and-mutations.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<ClientComponent updateItem={updateItem} />\n```\n\n----------------------------------------\n\nTITLE: Large-scale Redirect Handler using Edge Config (TypeScript)\nDESCRIPTION: Implementation of a scalable redirect system using Vercel's Edge Config and Next.js Middleware with TypeScript. Handles redirects by looking up destinations in a database.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/06-redirecting.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse, NextRequest } from 'next/server'\nimport { get } from '@vercel/edge-config'\n\ntype RedirectEntry = {\n  destination: string\n  permanent: boolean\n}\n\nexport async function middleware(request: NextRequest) {\n  const pathname = request.nextUrl.pathname\n  const redirectData = await get(pathname)\n\n  if (redirectData && typeof redirectData === 'string') {\n    const redirectEntry: RedirectEntry = JSON.parse(redirectData)\n    const statusCode = redirectEntry.permanent ? 308 : 307\n    return NextResponse.redirect(redirectEntry.destination, statusCode)\n  }\n\n  // No redirect found, continue without redirecting\n  return NextResponse.next()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Preload Pattern for Data Fetching in Next.js (JavaScript)\nDESCRIPTION: This snippet shows the JavaScript version of implementing the preload pattern in a Next.js component for optimized parallel data fetching. It includes a preload function and an async component.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/03-patterns.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getItem } from '@/utils/get-item'\n\nexport const preload = (id) => {\n  // void evaluates the given expression and returns undefined\n  // https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/void\n  void getItem(id)\n}\nexport default async function Item({ id }) {\n  const result = await getItem(id)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sequential Data Fetching in Next.js\nDESCRIPTION: This code snippet demonstrates sequential data fetching in a Next.js page component. It fetches artist data first, then uses that data to fetch playlists. The component uses React Suspense for loading states.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/03-patterns.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync function Playlists({ artistID }: { artistID: string }) {\n  // Wait for the playlists\n  const playlists = await getArtistPlaylists(artistID)\n\n  return (\n    <ul>\n      {playlists.map((playlist) => (\n        <li key={playlist.id}>{playlist.name}</li>\n      ))}\n    </ul>\n  )\n}\n\nexport default async function Page({\n  params: { username },\n}: {\n  params: { username: string }\n}) {\n  // Wait for the artist\n  const artist = await getArtist(username)\n\n  return (\n    <>\n      <h1>{artist.name}</h1>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Playlists artistID={artist.id} />\n      </Suspense>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CORS in Next.js Middleware\nDESCRIPTION: Demonstrates how to implement CORS headers in middleware to handle cross-origin requests. Includes handling for both simple and preflighted requests with configurable allowed origins.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/13-middleware.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextRequest, NextResponse } from 'next/server'\n\nconst allowedOrigins = ['https://acme.com', 'https://my-app.org']\n\nconst corsOptions = {\n  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n  'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n}\n\nexport function middleware(request: NextRequest) {\n  const origin = request.headers.get('origin') ?? ''\n  const isAllowedOrigin = allowedOrigins.includes(origin)\n\n  const isPreflight = request.method === 'OPTIONS'\n\n  if (isPreflight) {\n    const preflightHeaders = {\n      ...(isAllowedOrigin && { 'Access-Control-Allow-Origin': origin }),\n      ...corsOptions,\n    }\n    return NextResponse.json({}, { headers: preflightHeaders })\n  }\n\n  const response = NextResponse.next()\n\n  if (isAllowedOrigin) {\n    response.headers.set('Access-Control-Allow-Origin', origin)\n  }\n\n  Object.entries(corsOptions).forEach(([key, value]) => {\n    response.headers.set(key, value)\n  })\n\n  return response\n}\n\nexport const config = {\n  matcher: '/api/:path*',\n}\n```\n\n----------------------------------------\n\nTITLE: Revalidating Data with revalidateTag in Next.js (TypeScript)\nDESCRIPTION: This snippet illustrates how to use the revalidateTag API to invalidate a specific data fetch with a cache tag in a Server Action. It shows revalidating the 'posts' tag after creating a new post.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/02-server-actions-and-mutations.mdx#2025-04-22_snippet_29\n\nLANGUAGE: ts\nCODE:\n```\n'use server'\n\nimport { revalidateTag } from 'next/cache'\n\nexport async function createPost() {\n  try {\n    // ...\n  } catch (error) {\n    // ...\n  }\n\n  revalidateTag('posts')\n}\n```\n\n----------------------------------------\n\nTITLE: Layout Component with Cached Data Fetching - JavaScript\nDESCRIPTION: JavaScript version of the layout component that implements cached data fetching with hourly revalidation.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/01-fetching-caching-and-revalidating.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getItem } from '@/utils/get-item'\n\nexport const revalidate = 3600 // revalidate the data at most every hour\n\nexport default async function Layout({ params: { id } }) {\n  const item = await getItem(id)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Blog Post Example with getStaticPaths\nDESCRIPTION: Full example showing how to implement getStaticPaths and getStaticProps for a blog post page with external API data fetching.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/02-functions/get-static-paths.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Post({ post }) {\n  // Render post...\n}\n\n// This function gets called at build time\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  const res = await fetch('https://.../posts')\n  const posts = await res.json()\n\n  // Get the paths we want to pre-render based on posts\n  const paths = posts.map((post) => ({\n    params: { id: post.id },\n  }))\n\n  // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  return { paths, fallback: false }\n}\n\n// This also gets called at build time\nexport async function getStaticProps({ params }) {\n  // params contains the post `id`.\n  // If the route is like /posts/1, then params.id is 1\n  const res = await fetch(`https://.../posts/${params.id}`)\n  const post = await res.json()\n\n  // Pass post data to the page via props\n  return { props: { post } }\n}\n\nexport default Post\n```\n\n----------------------------------------\n\nTITLE: Using useRouter Hook in Next.js (JavaScript)\nDESCRIPTION: Shows how to use the useRouter hook for programmatic navigation in a Client Component of a Next.js application.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/03-linking-and-navigating.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nimport { useRouter } from 'next/navigation'\n\nexport default function Page() {\n  const router = useRouter()\n\n  return (\n    <button type=\"button\" onClick={() => router.push('/dashboard')}>\n      Dashboard\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Middleware in TypeScript with Next.js\nDESCRIPTION: Example of implementing middleware in TypeScript that redirects requests to the '/home' path. The config object uses a matcher to apply this middleware only to paths starting with '/about'.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/middleware.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse, NextRequest } from 'next/server'\n\n// This function can be marked `async` if using `await` inside\nexport function middleware(request: NextRequest) {\n  return NextResponse.redirect(new URL('/home', request.url))\n}\n\nexport const config = {\n  matcher: '/about/:path*',\n}\n```\n\n----------------------------------------\n\nTITLE: Server Action Implementation\nDESCRIPTION: Example of using revalidatePath within a server action to revalidate after form submission.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/revalidatePath.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n'use server'\n\nimport { revalidatePath } from 'next/cache'\n\nexport default async function submit() {\n  await submitForm()\n  revalidatePath('/')\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-side Rendering with useEffect in Next.js\nDESCRIPTION: This code snippet demonstrates how to implement client-side rendering in a Next.js page using React's useEffect hook. It fetches data from an API and updates the component state.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/02-rendering/05-client-side-rendering.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState, useEffect } from 'react'\n\nexport function Page() {\n  const [data, setData] = useState(null)\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await fetch('https://api.example.com/data')\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`)\n      }\n      const result = await response.json()\n      setData(result)\n    }\n\n    fetchData().catch((e) => {\n      // handle the error as needed\n      console.error('An error occurred while fetching the data: ', e)\n    })\n  }, [])\n\n  return <p>{data ? `Your data: ${data}` : 'Loading...'}</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Cache Tagging with fetch in Next.js\nDESCRIPTION: This snippet shows how to tag cache entries when using fetch, which allows for fine-grained cache invalidation using the revalidateTag function later.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/04-caching/index.mdx#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n// Cache data with a tag\nfetch(`https://...`, { next: { tags: ['a', 'b', 'c'] } })\n```\n\n----------------------------------------\n\nTITLE: Implementing getServerSideProps in TypeScript for Next.js\nDESCRIPTION: This snippet demonstrates how to use getServerSideProps to fetch data from an external API and pass it to a page component in Next.js using TypeScript. It includes type definitions and proper usage of InferGetServerSidePropsType.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/02-functions/get-server-side-props.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { InferGetServerSidePropsType, GetServerSideProps } from 'next'\n\ntype Repo = {\n  name: string\n  stargazers_count: number\n}\n\nexport const getServerSideProps = (async () => {\n  // Fetch data from external API\n  const res = await fetch('https://api.github.com/repos/vercel/next.js')\n  const repo: Repo = await res.json()\n  // Pass data to the page via props\n  return { props: { repo } }\n}) satisfies GetServerSideProps<{ repo: Repo }>\n\nexport default function Page({\n  repo,\n}: InferGetServerSidePropsType<typeof getServerSideProps>) {\n  return (\n    <main>\n      <p>{repo.stargazers_count}</p>\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Priority Attribute with next/image in Next.js App Router\nDESCRIPTION: This example shows how to use the priority attribute with the Next.js Image component in the App Router. It's used for the Largest Contentful Paint (LCP) element to improve loading performance.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/01-images.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from 'next/image'\nimport profilePic from '../public/me.png'\n\nexport default function Page() {\n  return <Image src={profilePic} alt=\"Picture of the author\" priority />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Cached GET Request in Next.js Route Handler\nDESCRIPTION: This example demonstrates how to implement a cached GET request in a Next.js Route Handler. It fetches data from an external API and returns it as a JSON response.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/12-route-handlers.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function GET() {\n  const res = await fetch('https://data.mongodb-api.com/...', {\n    headers: {\n      'Content-Type': 'application/json',\n      'API-Key': process.env.DATA_API_KEY,\n    },\n  })\n  const data = await res.json()\n\n  return Response.json({ data })\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function GET() {\n  const res = await fetch('https://data.mongodb-api.com/...', {\n    headers: {\n      'Content-Type': 'application/json',\n      'API-Key': process.env.DATA_API_KEY,\n    },\n  })\n  const data = await res.json()\n\n  return Response.json({ data })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cached Data Fetching with React Cache - JavaScript\nDESCRIPTION: JavaScript version of the cached database query function using React's cache utility for memoization of database requests.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/01-fetching-caching-and-revalidating.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { cache } from 'react'\n\nexport const getItem = cache(async (id) => {\n  const item = await db.item.findUnique({ id })\n  return item\n})\n```\n\n----------------------------------------\n\nTITLE: Using Server Actions in Client Components via Props\nDESCRIPTION: Demonstrates how a Client Component can receive and use a Server Action passed as a prop, specifically in a form's action attribute. This pattern enables the client component to trigger server-side functionality.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/02-server-actions-and-mutations.mdx#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nexport default function ClientComponent({ updateItem }) {\n  return <form action={updateItem}>{/* ... */}</form>\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced Login Form with Form State Management\nDESCRIPTION: Advanced login form implementation using React's form state hooks for handling loading states and errors in Next.js App Router.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/09-authentication/index.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { authenticate } from '@/app/lib/actions'\nimport { useFormState, useFormStatus } from 'react-dom'\n\nexport default function Page() {\n  const [errorMessage, dispatch] = useFormState(authenticate, undefined)\n\n  return (\n    <form action={dispatch}>\n      <input type=\"email\" name=\"email\" placeholder=\"Email\" required />\n      <input type=\"password\" name=\"password\" placeholder=\"Password\" required />\n      <div>{errorMessage && <p>{errorMessage}</p>}</div>\n      <LoginButton />\n    </form>\n  )\n}\n\nfunction LoginButton() {\n  const { pending } = useFormStatus()\n\n  const handleClick = (event) => {\n    if (pending) {\n      event.preventDefault()\n    }\n  }\n\n  return (\n    <button aria-disabled={pending} type=\"submit\" onClick={handleClick}>\n      Login\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-side Fetching with SWR in Next.js\nDESCRIPTION: Shows how to use the SWR library for data fetching with built-in caching, revalidation, and focus tracking. Includes a fetcher function definition and simplified error handling.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/03-data-fetching/05-client-side.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR from 'swr'\n\nconst fetcher = (...args) => fetch(...args).then((res) => res.json())\n\nfunction Profile() {\n  const { data, error } = useSWR('/api/profile-data', fetcher)\n\n  if (error) return <div>Failed to load</div>\n  if (!data) return <div>Loading...</div>\n\n  return (\n    <div>\n      <h1>{data.name}</h1>\n      <p>{data.bio}</p>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Cookies in Next.js Middleware\nDESCRIPTION: Demonstrates how to access and manipulate cookies in Next.js middleware using the cookies extension on NextRequest and NextResponse. Shows methods for getting, setting, and deleting cookies.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/13-middleware.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\n\nexport function middleware(request: NextRequest) {\n  let cookie = request.cookies.get('nextjs')\n  console.log(cookie)\n  const allCookies = request.cookies.getAll()\n  console.log(allCookies)\n\n  request.cookies.has('nextjs')\n  request.cookies.delete('nextjs')\n  request.cookies.has('nextjs')\n\n  const response = NextResponse.next()\n  response.cookies.set('vercel', 'fast')\n  response.cookies.set({\n    name: 'vercel',\n    value: 'fast',\n    path: '/',\n  })\n  cookie = response.cookies.get('vercel')\n  console.log(cookie)\n\n  return response\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirection in getServerSideProps for Next.js\nDESCRIPTION: This snippet shows how to use the redirect return value in getServerSideProps to perform server-side redirects. It demonstrates how to conditionally redirect based on the API response, including setting the destination and permanence of the redirect.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/02-functions/get-server-side-props.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function getServerSideProps(context) {\n  const res = await fetch(`https://.../data`)\n  const data = await res.json()\n\n  if (!data) {\n    return {\n      redirect: {\n        destination: '/',\n        permanent: false,\n      },\n    }\n  }\n\n  return {\n    props: {}, // will be passed to the page component as props\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Route Handler Implementation TypeScript\nDESCRIPTION: TypeScript implementation of a route handler using revalidatePath with query parameters.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/revalidatePath.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { revalidatePath } from 'next/cache'\nimport { NextRequest } from 'next/server'\n\nexport async function GET(request: NextRequest) {\n  const path = request.nextUrl.searchParams.get('path')\n\n  if (path) {\n    revalidatePath(path)\n    return Response.json({ revalidated: true, now: Date.now() })\n  }\n\n  return Response.json({\n    revalidated: false,\n    now: Date.now(),\n    message: 'Missing path to revalidate',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-side Validation with Zod in Next.js\nDESCRIPTION: This snippet demonstrates how to use zod for server-side form validation in a Next.js Server Action. It validates an email field and returns errors if the validation fails.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/02-server-actions-and-mutations.mdx#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n'use server'\n\nimport { z } from 'zod'\n\nconst schema = z.object({\n  email: z.string({\n    invalid_type_error: 'Invalid Email',\n  }),\n})\n\nexport default async function createUser(formData: FormData) {\n  const validatedFields = schema.safeParse({\n    email: formData.get('email'),\n  })\n\n  // Return early if the form data is invalid\n  if (!validatedFields.success) {\n    return {\n      errors: validatedFields.error.flatten().fieldErrors,\n    }\n  }\n\n  // Mutate data\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'use server'\n\nimport { z } from 'zod'\n\nconst schema = z.object({\n  email: z.string({\n    invalid_type_error: 'Invalid Email',\n  }),\n})\n\nexport default async function createsUser(formData) {\n  const validatedFields = schema.safeParse({\n    email: formData.get('email'),\n  })\n\n  // Return early if the form data is invalid\n  if (!validatedFields.success) {\n    return {\n      errors: validatedFields.error.flatten().fieldErrors,\n    }\n  }\n\n  // Mutate data\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Cookies in Server Actions (JavaScript)\nDESCRIPTION: This snippet shows how to get, set, and delete cookies inside a Server Action using the cookies API from Next.js in JavaScript. It provides examples of each operation.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/02-server-actions-and-mutations.mdx#2025-04-22_snippet_34\n\nLANGUAGE: js\nCODE:\n```\n'use server'\n\nimport { cookies } from 'next/headers'\n\nexport async function exampleAction() {\n  // Get cookie\n  const value = cookies().get('name')?.value\n\n  // Set cookie\n  cookies().set('name', 'Delba')\n\n  // Delete cookie\n  cookies().delete('name')\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Static and Dynamic Metadata in Next.js Components\nDESCRIPTION: Shows how to define either static metadata using the metadata object or dynamic metadata using the generateMetadata function in Next.js layout or page components.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-metadata.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Metadata } from 'next'\n\n// either Static metadata\nexport const metadata: Metadata = {\n  title: '...',\n}\n\n// or Dynamic metadata\nexport async function generateMetadata({ params }) {\n  return {\n    title: '...',\n  }\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// either Static metadata\nexport const metadata = {\n  title: '...',\n}\n\n// or Dynamic metadata\nexport async function generateMetadata({ params }) {\n  return {\n    title: '...',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching CMS Data with getStaticProps in Next.js\nDESCRIPTION: This example demonstrates how to use getStaticProps to fetch a list of blog posts from a CMS and render them in a Next.js page component. It includes both TypeScript and JavaScript versions.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/03-data-fetching/01-get-static-props.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// posts will be populated at build time by getStaticProps()\nexport default function Blog({ posts }) {\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li>{post.title}</li>\n      ))}\n    </ul>\n  )\n}\n\n// This function gets called at build time on server-side.\n// It won't be called on client-side, so you can even do\n// direct database queries.\nexport async function getStaticProps() {\n  // Call an external API endpoint to get posts.\n  // You can use any data fetching library\n  const res = await fetch('https://.../posts')\n  const posts = await res.json()\n\n  // By returning { props: { posts } }, the Blog component\n  // will receive `posts` as a prop at build time\n  return {\n    props: {\n      posts,\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating searchParams with useRouter and Link in Next.js (JavaScript)\nDESCRIPTION: This code snippet shows how to update searchParams in a Next.js application using the useRouter hook and Link component, written in JavaScript. It includes a function to create a new query string and examples of navigation with updated searchParams.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/use-search-params.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function ExampleClientComponent() {\n  const router = useRouter()\n  const pathname = usePathname()\n  const searchParams = useSearchParams()\n\n  // Get a new searchParams string by merging the current\n  // searchParams with a provided key/value pair\n  const createQueryString = useCallback(\n    (name, value) => {\n      const params = new URLSearchParams(searchParams)\n      params.set(name, value)\n\n      return params.toString()\n    },\n    [searchParams]\n  )\n\n  return (\n    <>\n      <p>Sort By</p>\n\n      {/* using useRouter */}\n      <button\n        onClick={() => {\n          // <pathname>?sort=asc\n          router.push(pathname + '?' + createQueryString('sort', 'asc'))\n        }}\n      >\n        ASC\n      </button>\n\n      {/* using <Link> */}\n      <Link\n        href={\n          // <pathname>?sort=desc\n          pathname + '?' + createQueryString('sort', 'desc')\n        }\n      >\n        DESC\n      </Link>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Dashboard Layout in Next.js App Router\nDESCRIPTION: Example of a dashboard layout component that wraps child pages or layouts in the dashboard route segment. This layout adds shared UI elements like a navigation section that persists across navigation.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/02-pages-and-layouts.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function DashboardLayout({\n  children, // will be a page or nested layout\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <section>\n      {/* Include shared UI here e.g. a header or sidebar */}\n      <nav></nav>\n\n      {children}\n    </section>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function DashboardLayout({\n  children, // will be a page or nested layout\n}) {\n  return (\n    <section>\n      {/* Include shared UI here e.g. a header or sidebar */}\n      <nav></nav>\n\n      {children}\n    </section>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Cache Tags in Next.js fetch API\nDESCRIPTION: Illustrates how to set cache tags for a resource using the Next.js extended fetch API. These tags can be used for on-demand revalidation using the 'revalidateTag' function.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/fetch.mdx#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nfetch(`https://...`, { next: { tags: ['collection'] } })\n```\n\n----------------------------------------\n\nTITLE: Authentication in Server Actions\nDESCRIPTION: This snippet demonstrates how to implement authentication checks in a Server Action. It shows checking for a user's authentication status before performing an action, throwing an error if the user is not authenticated.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/02-server-actions-and-mutations.mdx#2025-04-22_snippet_35\n\nLANGUAGE: ts\nCODE:\n```\n'use server'\n\nimport { auth } from './lib'\n\nexport function addItem() {\n  const { user } = auth()\n  if (!user) {\n    throw new Error('You must be signed in to perform this action')\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Metadata API in Next.js App Router with TypeScript\nDESCRIPTION: Demonstrates the new approach for managing head elements using the built-in metadata API in the app directory with TypeScript. This replaces the need for the next/head component.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/02-app-router-migration.mdx#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: 'My Page Title',\n}\n\nexport default function Page() {\n  return '...'\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Active Links in Next.js (TypeScript)\nDESCRIPTION: Demonstrates how to use the usePathname hook to determine if a link is active and apply conditional styling in a Next.js application.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/03-linking-and-navigating.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { usePathname } from 'next/navigation'\nimport Link from 'next/link'\n\nexport function Links() {\n  const pathname = usePathname()\n\n  return (\n    <nav>\n      <ul>\n        <li>\n          <Link className={`link ${pathname === '/' ? 'active' : ''}`} href=\"/\">\n            Home\n          </Link>\n        </li>\n        <li>\n          <Link\n            className={`link ${pathname === '/about' ? 'active' : ''}`}\n            href=\"/about\"\n          >\n            About\n          </Link>\n        </li>\n      </ul>\n    </nav>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using generateMetadata for Dynamic Route-Based Metadata in Next.js\nDESCRIPTION: Shows how to implement the generateMetadata function to create dynamic metadata based on route parameters, fetch external data, and access parent metadata.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-metadata.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Metadata, ResolvingMetadata } from 'next'\n\ntype Props = {\n  params: { id: string }\n  searchParams: { [key: string]: string | string[] | undefined }\n}\n\nexport async function generateMetadata(\n  { params, searchParams }: Props,\n  parent: ResolvingMetadata\n): Promise<Metadata> {\n  // read route params\n  const id = params.id\n\n  // fetch data\n  const product = await fetch(`https://.../${id}`).then((res) => res.json())\n\n  // optionally access and extend (rather than replace) parent metadata\n  const previousImages = (await parent).openGraph?.images || []\n\n  return {\n    title: product.title,\n    openGraph: {\n      images: ['/some-specific-page-image.jpg', ...previousImages],\n    },\n  }\n}\n\nexport default function Page({ params, searchParams }: Props) {}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function generateMetadata({ params, searchParams }, parent) {\n  // read route params\n  const id = params.id\n\n  // fetch data\n  const product = await fetch(`https://.../${id}`).then((res) => res.json())\n\n  // optionally access and extend (rather than replace) parent metadata\n  const previousImages = (await parent).openGraph?.images || []\n\n  return {\n    title: product.title,\n    openGraph: {\n      images: ['/some-specific-page-image.jpg', ...previousImages],\n    },\n  }\n}\n\nexport default function Page({ params, searchParams }) {}\n```\n\n----------------------------------------\n\nTITLE: Page Component with Cached Data Fetching - TypeScript\nDESCRIPTION: Page component implementation using the cached getItem function with TypeScript typing and hourly revalidation.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/01-fetching-caching-and-revalidating.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getItem } from '@/utils/get-item'\n\nexport const revalidate = 3600 // revalidate the data at most every hour\n\nexport default async function Page({\n  params: { id },\n}: {\n  params: { id: string }\n}) {\n  const item = await getItem(id)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Preload Pattern for Data Fetching in Next.js (TypeScript)\nDESCRIPTION: This snippet demonstrates how to implement the preload pattern in a Next.js component to optimize parallel data fetching. It includes a preload function and an async component that uses the fetched data.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/03-patterns.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getItem } from '@/utils/get-item'\n\nexport const preload = (id: string) => {\n  // void evaluates the given expression and returns undefined\n  // https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/void\n  void getItem(id)\n}\nexport default async function Item({ id }: { id: string }) {\n  const result = await getItem(id)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Server Action that Accepts Additional Arguments\nDESCRIPTION: Demonstrates how to structure a Server Action function that receives both custom arguments (bound with .bind) and form data. This pattern allows combining contextual information with form submissions.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/02-server-actions-and-mutations.mdx#2025-04-22_snippet_12\n\nLANGUAGE: js\nCODE:\n```\n'use server'\n\nexport async function updateUser(userId, formData) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Statically Typed Links in Next.js\nDESCRIPTION: Examples of using statically typed links with next/link. Shows how TypeScript validates route paths and handles dynamic segments.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/01-typescript.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Route } from 'next';\nimport Link from 'next/link'\n\n// No TypeScript errors if href is a valid route\n<Link href=\"/about\" />\n<Link href=\"/blog/nextjs\" />\n<Link href={`/blog/${slug}`} />\n<Link href={('/blog' + slug) as Route} />\n\n// TypeScript errors if href is not a valid route\n<Link href=\"/aboot\" />\n```\n\n----------------------------------------\n\nTITLE: Combining React cache, server-only, and Preload Pattern (JavaScript)\nDESCRIPTION: This snippet shows the JavaScript version of combining React's cache function, the preload pattern, and the server-only package for efficient server-side data fetching and caching.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/03-patterns.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { cache } from 'react'\nimport 'server-only'\n\nexport const preload = (id) => {\n  void getItem(id)\n}\n\nexport const getItem = cache(async (id) => {\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing SSR with getServerSideProps in Next.js\nDESCRIPTION: Example of implementing server-side rendering in Next.js using getServerSideProps. This code demonstrates how to fetch data on each request and pass it to the page component through props. The function is called by the server on every request to generate dynamic HTML.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/02-rendering/01-server-side-rendering.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Page({ data }) {\n  // Render data...\n}\n\n// This gets called on every request\nexport async function getServerSideProps() {\n  // Fetch data from external API\n  const res = await fetch(`https://.../data`)\n  const data = await res.json()\n\n  // Pass data to the page via props\n  return { props: { data } }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authorization Middleware in Next.js\nDESCRIPTION: Demonstrates how to implement authentication checking middleware in Next.js that handles route protection and user redirections based on authentication status.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/09-authentication/index.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextRequest } from 'next/server'\n\nexport function middleware(request: NextRequest) {\n  const currentUser = request.cookies.get('currentUser')?.value\n\n  if (currentUser && !request.nextUrl.pathname.startsWith('/dashboard')) {\n    return Response.redirect(new URL('/dashboard', request.url))\n  }\n\n  if (!currentUser && !request.nextUrl.pathname.startsWith('/login')) {\n    return Response.redirect(new URL('/login', request.url))\n  }\n}\n\nexport const config = {\n  matcher: ['/((?!api|_next/static|_next/image|.*\\.png$).*)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Revalidating Cached Data in Next.js Route Handler\nDESCRIPTION: This snippet shows how to revalidate cached data in a Next.js Route Handler using the 'next.revalidate' option. It fetches data from an API and sets it to revalidate every 60 seconds.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/12-route-handlers.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function GET() {\n  const res = await fetch('https://data.mongodb-api.com/...', {\n    next: { revalidate: 60 }, // Revalidate every 60 seconds\n  })\n  const data = await res.json()\n\n  return Response.json(data)\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function GET() {\n  const res = await fetch('https://data.mongodb-api.com/...', {\n    next: { revalidate: 60 }, // Revalidate every 60 seconds\n  })\n  const data = await res.json()\n\n  return Response.json(data)\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Middleware Logic in Next.js (TypeScript)\nDESCRIPTION: This example shows how to implement conditional logic in Next.js middleware using TypeScript. It demonstrates rewriting URLs based on different path conditions.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/13-middleware.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\n\nexport function middleware(request: NextRequest) {\n  if (request.nextUrl.pathname.startsWith('/about')) {\n    return NextResponse.rewrite(new URL('/about-2', request.url))\n  }\n\n  if (request.nextUrl.pathname.startsWith('/dashboard')) {\n    return NextResponse.rewrite(new URL('/dashboard/user', request.url))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Combining React cache, server-only, and Preload Pattern (TypeScript)\nDESCRIPTION: This code combines React's cache function, the preload pattern, and the server-only package to create a reusable data fetching utility. It ensures server-side execution and caches responses.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/03-patterns.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cache } from 'react'\nimport 'server-only'\n\nexport const preload = (id: string) => {\n  void getItem(id)\n}\n\nexport const getItem = cache(async (id: string) => {\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Reading Files with getStaticProps in Next.js\nDESCRIPTION: This code snippet demonstrates how to read files from the filesystem using getStaticProps in Next.js. It uses process.cwd() to get the correct directory path, reads files from a 'posts' directory, and passes the content to a Blog component as props.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/02-functions/get-static-props.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { promises as fs } from 'fs'\nimport path from 'path'\n\n// posts will be populated at build time by getStaticProps()\nfunction Blog({ posts }) {\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li>\n          <h3>{post.filename}</h3>\n          <p>{post.content}</p>\n        </li>\n      ))}\n    </ul>\n  )\n}\n\n// This function gets called at build time on server-side.\n// It won't be called on client-side, so you can even do\n// direct database queries.\nexport async function getStaticProps() {\n  const postsDirectory = path.join(process.cwd(), 'posts')\n  const filenames = await fs.readdir(postsDirectory)\n\n  const posts = filenames.map(async (filename) => {\n    const filePath = path.join(postsDirectory, filename)\n    const fileContents = await fs.readFile(filePath, 'utf8')\n\n    // Generally you would parse/transform the contents\n    // For example you can transform markdown to HTML here\n\n    return {\n      filename,\n      content: fileContents,\n    }\n  })\n  // By returning { props: { posts } }, the Blog component\n  // will receive `posts` as a prop at build time\n  return {\n    props: {\n      posts: await Promise.all(posts),\n    },\n  }\n}\n\nexport default Blog\n```\n\n----------------------------------------\n\nTITLE: Implementing ActiveLink Component with useRouter in Next.js\nDESCRIPTION: This snippet demonstrates how to create an ActiveLink component using the useRouter hook. It dynamically styles the link based on the current route and handles navigation using router.push().\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/02-functions/use-router.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useRouter } from 'next/router'\n\nfunction ActiveLink({ children, href }) {\n  const router = useRouter()\n  const style = {\n    marginRight: 10,\n    color: router.asPath === href ? 'red' : 'black',\n  }\n\n  const handleClick = (e) => {\n    e.preventDefault()\n    router.push(href)\n  }\n\n  return (\n    <a href={href} onClick={handleClick} style={style}>\n      {children}\n    </a>\n  )\n}\n\nexport default ActiveLink\n```\n\n----------------------------------------\n\nTITLE: Creating and Retrieving Database Sessions in Next.js\nDESCRIPTION: These functions demonstrate creating a database session and retrieving session data in Next.js server-side logic. They use a database to store and fetch session information based on a session ID.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/09-authentication/index.mdx#2025-04-22_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nimport db from './lib/db'\n\nexport async function createSession(user) {\n  const sessionId = generateSessionId() // Generate a unique session ID\n  await db.insertSession({ sessionId, userId: user.id, createdAt: new Date() })\n  return sessionId\n}\n\nimport { cookies } from 'next/headers'\nimport db from './lib/db'\n\nexport async function getSession() {\n  const sessionId = cookies().get('sessionId')?.value\n  return sessionId ? await db.findSession(sessionId) : null\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dashboard Layout in Next.js\nDESCRIPTION: This snippet demonstrates how to create a basic dashboard layout component in Next.js. It wraps its children in a section element, providing a common structure for dashboard pages.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/layout.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function DashboardLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return <section>{children}</section>\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function DashboardLayout({ children }) {\n  return <section>{children}</section>\n}\n```\n\n----------------------------------------\n\nTITLE: Using Server Component as Child of Client Component in JavaScript\nDESCRIPTION: This code snippet shows how to use a Server Component as a child of a Client Component in a Next.js page written in JavaScript. It demonstrates the pattern of passing Server Components to Client Components, allowing them to render independently.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-22_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n// This pattern works:\n// You can pass a Server Component as a child or prop of a\n// Client Component.\nimport ClientComponent from './client-component'\nimport ServerComponent from './server-component'\n\n// Pages in Next.js are Server Components by default\nexport default function Page() {\n  return (\n    <ClientComponent>\n      <ServerComponent />\n    </ClientComponent>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Middleware in Next.js\nDESCRIPTION: This snippet demonstrates how to implement middleware in Next.js using TypeScript. It shows a basic redirect functionality and includes a matcher configuration.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/13-middleware.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\n\n// This function can be marked `async` if using `await` inside\nexport function middleware(request: NextRequest) {\n  return NextResponse.redirect(new URL('/home', request.url))\n}\n\n// See \"Matching Paths\" below to learn more\nexport const config = {\n  matcher: '/about/:path*',\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dynamic GET Request in Next.js Route Handler\nDESCRIPTION: This snippet shows how to create a dynamic GET request in a Next.js Route Handler. It uses URL search params to fetch specific data, demonstrating how to opt out of caching.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/12-route-handlers.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function GET(request: Request) {\n  const { searchParams } = new URL(request.url)\n  const id = searchParams.get('id')\n  const res = await fetch(`https://data.mongodb-api.com/product/${id}`, {\n    headers: {\n      'Content-Type': 'application/json',\n      'API-Key': process.env.DATA_API_KEY!,\n    },\n  })\n  const product = await res.json()\n\n  return Response.json({ product })\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function GET(request) {\n  const { searchParams } = new URL(request.url)\n  const id = searchParams.get('id')\n  const res = await fetch(`https://data.mongodb-api.com/product/${id}`, {\n    headers: {\n      'Content-Type': 'application/json',\n      'API-Key': process.env.DATA_API_KEY,\n    },\n  })\n  const product = await res.json()\n\n  return Response.json({ product })\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Scripts in Next.js Dashboard Layout\nDESCRIPTION: Example showing how to load a third-party script for multiple routes by importing the Script component and including it in a layout component. The script will only load once, even when navigating between routes in the same layout.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/05-scripts.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport Script from 'next/script'\n\nexport default function DashboardLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <>\n      <section>{children}</section>\n      <Script src=\"https://example.com/script.js\" />\n    </>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport Script from 'next/script'\n\nexport default function DashboardLayout({ children }) {\n  return (\n    <>\n      <section>{children}</section>\n      <Script src=\"https://example.com/script.js\" />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic API Route in Next.js (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create a simple API route that returns a JSON response with a 200 status code. It uses TypeScript for type safety.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/01-routing/07-api-routes.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from 'next'\n\ntype ResponseData = {\n  message: string\n}\n\nexport default function handler(\n  req: NextApiRequest,\n  res: NextApiResponse<ResponseData>\n) {\n  res.status(200).json({ message: 'Hello from Next.js!' })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Root Layout in Next.js App Router with TypeScript\nDESCRIPTION: Defines the required root layout component in TypeScript that must be included in the app directory. This component provides the HTML structure that wraps all pages and nested layouts.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/02-app-router-migration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function RootLayout({\n  // Layouts must accept a children prop.\n  // This will be populated with nested layouts or pages\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Methods in Route Handlers (JavaScript)\nDESCRIPTION: This snippet shows how to implement various HTTP methods (GET, HEAD, POST, PUT, DELETE, PATCH, OPTIONS) in a Next.js route handler using JavaScript. It demonstrates the basic structure for each method, accepting a request parameter.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/route.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function GET(request) {}\n\nexport async function HEAD(request) {}\n\nexport async function POST(request) {}\n\nexport async function PUT(request) {}\n\nexport async function DELETE(request) {}\n\nexport async function PATCH(request) {}\n\n// If `OPTIONS` is not defined, Next.js will automatically implement `OPTIONS` and  set the appropriate Response `Allow` header depending on the other methods defined in the route handler.\nexport async function OPTIONS(request) {}\n```\n\n----------------------------------------\n\nTITLE: Creating Module-Level Server Actions with TypeScript\nDESCRIPTION: Demonstrates creating a dedicated file for Server Actions using the module-level 'use server' directive in TypeScript. This approach allows the actions to be imported and used in both Client and Server Components.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/02-server-actions-and-mutations.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n'use server'\n\nexport async function create() {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Params for Multiple Dynamic Segments from Bottom Up in Next.js\nDESCRIPTION: This snippet shows how to generate params for multiple dynamic segments ([category] and [product]) from the child route segment. It fetches products and generates params for both category and product.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-static-params.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// Generate segments for both [category] and [product]\nexport async function generateStaticParams() {\n  const products = await fetch('https://.../products').then((res) => res.json())\n\n  return products.map((product) => ({\n    category: product.category.slug,\n    product: product.id,\n  }))\n}\n\nexport default function Page({\n  params,\n}: {\n  params: { category: string; product: string }\n}) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Matcher Configuration with Regex in Next.js Middleware\nDESCRIPTION: This example shows an advanced matcher configuration using regex to match all request paths except specific ones like API routes and static files.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/13-middleware.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - api (API routes)\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     */\n    '/((?!api|_next/static|_next/image|favicon.ico).*)',\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Incremental Static Regeneration with getStaticProps\nDESCRIPTION: Example showing how to implement Incremental Static Regeneration by setting a revalidate time in getStaticProps. This allows pages to be regenerated after the specified time when a new request comes in.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/02-functions/get-static-props.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// This function gets called at build time on server-side.\n// It may be called again, on a serverless function, if\n// revalidation is enabled and a new request comes in\nexport async function getStaticProps() {\n  const res = await fetch('https://.../posts')\n  const posts = await res.json()\n\n  return {\n    props: {\n      posts,\n    },\n    // Next.js will attempt to re-generate the page:\n    // - When a request comes in\n    // - At most once every 10 seconds\n    revalidate: 10, // In seconds\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing getStaticPaths with TypeScript\nDESCRIPTION: TypeScript example showing how to implement getStaticPaths and getStaticProps for dynamic routes in Next.js. Demonstrates type inference and fetching data from GitHub API.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/02-functions/get-static-paths.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {\n  InferGetStaticPropsType,\n  GetStaticProps,\n  GetStaticPaths,\n} from 'next'\n\ntype Repo = {\n  name: string\n  stargazers_count: number\n}\n\nexport const getStaticPaths = (async () => {\n  return {\n    paths: [\n      {\n        params: {\n          name: 'next.js',\n        },\n      },\n    ],\n    fallback: true,\n  }\n}) satisfies GetStaticPaths\n\nexport const getStaticProps = (async (context) => {\n  const res = await fetch('https://api.github.com/repos/vercel/next.js')\n  const repo = await res.json()\n  return { props: { repo } }\n}) satisfies GetStaticProps<{\n  repo: Repo\n}>\n\nexport default function Page({\n  repo,\n}: InferGetStaticPropsType<typeof getStaticProps>) {\n  return repo.stargazers_count\n}\n```\n\n----------------------------------------\n\nTITLE: Setting CORS Headers in Next.js Route Handler\nDESCRIPTION: Illustrates how to set CORS headers for a specific Route Handler using standard Web API methods.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/12-route-handlers.mdx#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport const dynamic = 'force-dynamic' // defaults to auto\n\nexport async function GET(request: Request) {\n  return new Response('Hello, Next.js!', {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    },\n  })\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport const dynamic = 'force-dynamic' // defaults to auto\n\nexport async function GET(request) {\n  return new Response('Hello, Next.js!', {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Basic useParams Hook Usage\nDESCRIPTION: This snippet demonstrates the basic syntax for using the useParams hook. It shows how to call the hook without any parameters to retrieve the current route's dynamic parameters.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/use-params.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst params = useParams()\n```\n\n----------------------------------------\n\nTITLE: Implementing Streaming with OpenAI in Next.js Route Handler\nDESCRIPTION: Demonstrates how to implement streaming responses using OpenAI and the AI SDK in a Next.js Route Handler.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/12-route-handlers.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport OpenAI from 'openai'\nimport { OpenAIStream, StreamingTextResponse } from 'ai'\n\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n})\n\nexport const runtime = 'edge'\n\nexport async function POST(req: Request) {\n  const { messages } = await req.json()\n  const response = await openai.chat.completions.create({\n    model: 'gpt-3.5-turbo',\n    stream: true,\n    messages,\n  })\n\n  const stream = OpenAIStream(response)\n\n  return new StreamingTextResponse(stream)\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport OpenAI from 'openai'\nimport { OpenAIStream, StreamingTextResponse } from 'ai'\n\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n})\n\nexport const runtime = 'edge'\n\nexport async function POST(req) {\n  const { messages } = await req.json()\n  const response = await openai.chat.completions.create({\n    model: 'gpt-3.5-turbo',\n    stream: true,\n    messages,\n  })\n\n  const stream = OpenAIStream(response)\n\n  return new StreamingTextResponse(stream)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Revalidation Time in Next.js fetch API\nDESCRIPTION: Shows how to set the cache lifetime of a resource using the 'revalidate' option in the Next.js extended fetch API. It includes options for indefinite caching, preventing caching, and specifying a cache lifetime in seconds.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/fetch.mdx#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nfetch(`https://...`, { next: { revalidate: false | 0 | number } })\n```\n\n----------------------------------------\n\nTITLE: Using Client Component Provider in Server Component\nDESCRIPTION: This snippet demonstrates how to use the Client Component provider (ThemeProvider) in a Server Component (RootLayout). The provider is rendered at the root, allowing other Client Components to consume the context.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport ThemeProvider from './theme-provider'\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html>\n      <body>\n        <ThemeProvider>{children}</ThemeProvider>\n      </body>\n    </html>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport ThemeProvider from './theme-provider'\n\nexport default function RootLayout({ children }) {\n  return (\n    <html>\n      <body>\n        <ThemeProvider>{children}</ThemeProvider>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Page Component in Next.js (TypeScript)\nDESCRIPTION: This snippet demonstrates how to define a page component in Next.js using TypeScript. It shows the structure of a page component with 'params' and 'searchParams' props, which are used for handling dynamic route parameters and URL search parameters respectively.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/page.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Page({\n  params,\n  searchParams,\n}: {\n  params: { slug: string }\n  searchParams: { [key: string]: string | string[] | undefined }\n}) {\n  return <h1>My Page</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Static Params for Single Dynamic Segment in Next.js\nDESCRIPTION: This example shows how to use generateStaticParams to create static routes for a single dynamic [id] segment in a product page. It generates three static routes with different IDs.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-static-params.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport function generateStaticParams() {\n  return [{ id: '1' }, { id: '2' }, { id: '3' }]\n}\n\n// Three versions of this page will be statically generated\n// using the `params` returned by `generateStaticParams`\n// - /product/1\n// - /product/2\n// - /product/3\nexport default function Page({ params }: { params: { id: string } }) {\n  const { id } = params\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Server Actions in Client Components with TSX\nDESCRIPTION: Shows how to import Server Actions created with module-level 'use server' directives into a Client Component using TypeScript syntax. This pattern enables Client Components to trigger server-side operations.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/02-server-actions-and-mutations.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { create } from '@/app/actions'\n\nexport function Button() {\n  return (\n    // ...\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Moving Client Components Down the Tree\nDESCRIPTION: This snippet illustrates how to optimize performance by moving Client Components (SearchBar) down the component tree, keeping the layout as a Server Component. This reduces the Client JavaScript bundle size.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n// SearchBar is a Client Component\nimport SearchBar from './searchbar'\n// Logo is a Server Component\nimport Logo from './logo'\n\n// Layout is a Server Component by default\nexport default function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <>\n      <nav>\n        <Logo />\n        <SearchBar />\n      </nav>\n      <main>{children}</main>\n    </>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// SearchBar is a Client Component\nimport SearchBar from './searchbar'\n// Logo is a Server Component\nimport Logo from './logo'\n\n// Layout is a Server Component by default\nexport default function Layout({ children }) {\n  return (\n    <>\n      <nav>\n        <Logo />\n        <SearchBar />\n      </nav>\n      <main>{children}</main>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Error Handling in Next.js TypeScript\nDESCRIPTION: A TypeScript implementation of a global error boundary for handling errors in the root layout of a Next.js application. This component replaces the entire page when an error occurs and provides a recovery mechanism.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/error.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nexport default function GlobalError({\n  error,\n  reset,\n}: {\n  error: Error & { digest?: string }\n  reset: () => void\n}) {\n  return (\n    <html>\n      <body>\n        <h2>Something went wrong!</h2>\n        <button onClick={() => reset()}>Try again</button>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Boundary Component in Next.js TypeScript\nDESCRIPTION: A TypeScript implementation of an error boundary component for Next.js applications. This client component handles unexpected errors in a dashboard route segment, displays a fallback UI, and provides a reset function to attempt recovery.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/error.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n'use client' // Error components must be Client Components\n\nimport { useEffect } from 'react'\n\nexport default function Error({\n  error,\n  reset,\n}: {\n  error: Error & { digest?: string }\n  reset: () => void\n}) {\n  useEffect(() => {\n    // Log the error to an error reporting service\n    console.error(error)\n  }, [error])\n\n  return (\n    <div>\n      <h2>Something went wrong!</h2>\n      <button\n        onClick={\n          // Attempt to recover by trying to re-render the segment\n          () => reset()\n        }\n      >\n        Try again\n      </button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Webhook Handler in Next.js (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to create a Route Handler for receiving webhooks from third-party services in Next.js using TypeScript. It processes the webhook payload and returns appropriate responses.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/12-route-handlers.mdx#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function POST(request: Request) {\n  try {\n    const text = await request.text()\n    // Process the webhook payload\n  } catch (error) {\n    return new Response(`Webhook error: ${error.message}`, {\n      status: 400,\n    })\n  }\n\n  return new Response('Success!', {\n    status: 200,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with Server-Side API Key in Next.js\nDESCRIPTION: This snippet demonstrates a data fetching function that uses a server-side API key. It's intended to be used in Server Components to keep sensitive information secure.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function getData() {\n  const res = await fetch('https://external-service.com/data', {\n    headers: {\n      authorization: process.env.API_KEY,\n    },\n  })\n\n  return res.json()\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function getData() {\n  const res = await fetch('https://external-service.com/data', {\n    headers: {\n      authorization: process.env.API_KEY,\n    },\n  })\n\n  return res.json()\n}\n```\n\n----------------------------------------\n\nTITLE: Using Wrapped Third-Party Components in Next.js Server Components\nDESCRIPTION: This example demonstrates how to use a wrapped third-party component (Carousel) within a Server Component in Next.js after it has been properly marked as a Client Component.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport Carousel from './carousel'\n\nexport default function Page() {\n  return (\n    <div>\n      <p>View pictures</p>\n\n      {/*  Works, since Carousel is a Client Component */}\n      <Carousel />\n    </div>\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport Carousel from './carousel'\n\nexport default function Page() {\n  return (\n    <div>\n      <p>View pictures</p>\n\n      {/*  Works, since Carousel is a Client Component */}\n      <Carousel />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Route Handler Implementation JavaScript\nDESCRIPTION: JavaScript implementation of a route handler using revalidatePath with query parameters.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/revalidatePath.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { revalidatePath } from 'next/cache'\n\nexport async function GET(request) {\n  const path = request.nextUrl.searchParams.get('path')\n\n  if (path) {\n    revalidatePath(path)\n    return Response.json({ revalidated: true, now: Date.now() })\n  }\n\n  return Response.json({\n    revalidated: false,\n    now: Date.now(),\n    message: 'Missing path to revalidate',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Static Params for Dynamic Routes in Next.js\nDESCRIPTION: This snippet demonstrates how to use generateStaticParams to statically generate routes for a dynamic [slug] segment in a Next.js blog application. It fetches posts and generates params for each post's slug.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-static-params.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Return a list of `params` to populate the [slug] dynamic segment\nexport async function generateStaticParams() {\n  const posts = await fetch('https://.../posts').then((res) => res.json())\n\n  return posts.map((post) => ({\n    slug: post.slug,\n  }))\n}\n\n// Multiple versions of this page will be statically generated\n// using the `params` returned by `generateStaticParams`\nexport default function Page({ params }) {\n  const { slug } = params\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Revalidating Cache by Path in Next.js\nDESCRIPTION: This snippet shows how to use revalidatePath to manually revalidate data and re-render route segments below a specific path, which affects both the Data Cache and Full Route Cache.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/04-caching/index.mdx#2025-04-22_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nrevalidatePath('/')\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-side Fetching with useEffect in Next.js\nDESCRIPTION: Demonstrates how to fetch data on the client side using React's useEffect hook. The example shows loading states, error handling, and data rendering for a profile component.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/03-data-fetching/05-client-side.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react'\n\nfunction Profile() {\n  const [data, setData] = useState(null)\n  const [isLoading, setLoading] = useState(true)\n\n  useEffect(() => {\n    fetch('/api/profile-data')\n      .then((res) => res.json())\n      .then((data) => {\n        setData(data)\n        setLoading(false)\n      })\n  }, [])\n\n  if (isLoading) return <p>Loading...</p>\n  if (!data) return <p>No profile data</p>\n\n  return (\n    <div>\n      <h1>{data.name}</h1>\n      <p>{data.bio}</p>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Redirects in Next.js Configuration\nDESCRIPTION: This snippet demonstrates how to set up a basic redirect in the next.config.js file. It shows the structure of the redirects function and explains the properties of each redirect object.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/redirects.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async redirects() {\n    return [\n      {\n        source: '/about',\n        destination: '/',\n        permanent: true,\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Server Component Page in Next.js App Directory\nDESCRIPTION: Demonstrates how to create a Server Component page that fetches data and passes it to a Client Component. Shows the new data fetching pattern in the app directory.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/02-app-router-migration.mdx#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport HomePage from './home-page'\n\nasync function getPosts() {\n  const res = await fetch('https://...')\n  const posts = await res.json()\n  return posts\n}\n\nexport default async function Page() {\n  const recentPosts = await getPosts()\n  return <HomePage recentPosts={recentPosts} />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CSS Modules in Next.js App Router\nDESCRIPTION: Example of importing and using CSS Modules in a dashboard layout component. The CSS module creates locally scoped styles with unique class names to prevent collisions.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/05-styling/01-css-modules.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport styles from './styles.module.css'\n\nexport default function DashboardLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return <section className={styles.dashboard}>{children}</section>\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport styles from './styles.module.css'\n\nexport default function DashboardLayout({ children }) {\n  return <section className={styles.dashboard}>{children}</section>\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.dashboard {\n  padding: 24px;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Form Data with Server Actions in TSX\nDESCRIPTION: Example of using a Server Action to process form submissions in a Next.js page component with TypeScript. The action receives the FormData object and extracts values using the FormData API methods.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/02-server-actions-and-mutations.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Page() {\n  async function createInvoice(formData: FormData) {\n    'use server'\n\n    const rawFormData = {\n      customerId: formData.get('customerId'),\n      amount: formData.get('amount'),\n      status: formData.get('status'),\n    }\n\n    // mutate data\n    // revalidate cache\n  }\n\n  return <form action={createInvoice}>...</form>\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting in a Next.js Server Component\nDESCRIPTION: This example demonstrates how to use the redirect function in a Next.js Server Component. It fetches team data and redirects to the login page if the team is not found.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/redirect.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { redirect } from 'next/navigation'\n\nasync function fetchTeam(id) {\n  const res = await fetch('https://...')\n  if (!res.ok) return undefined\n  return res.json()\n}\n\nexport default async function Profile({ params }) {\n  const team = await fetchTeam(params.id)\n  if (!team) {\n    redirect('/login')\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Link with URL Objects in Next.js\nDESCRIPTION: Demonstrates how to use the Link component with URL objects for both predefined and dynamic routes.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/link.mdx#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\nfunction Home() {\n  return (\n    <ul>\n      <li>\n        <Link\n          href={{\n            pathname: '/about',\n            query: { name: 'test' },\n          }}\n        >\n          About us\n        </Link>\n      </li>\n      <li>\n        <Link\n          href={{\n            pathname: '/blog/[slug]',\n            query: { slug: 'my-post' },\n          }}\n        >\n          Blog Post\n        </Link>\n      </li>\n    </ul>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Submit Button with Pending State in a Form with TSX\nDESCRIPTION: Demonstrates how to integrate a custom submit button component that handles pending states into a form with a Server Action in TypeScript. This approach improves user experience during form submissions.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/02-server-actions-and-mutations.mdx#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SubmitButton } from '@/app/submit-button'\nimport { createItem } from '@/app/actions'\n\n// Server Component\nexport default async function Home() {\n  return (\n    <form action={createItem}>\n      <input type=\"text\" name=\"field-name\" />\n      <SubmitButton />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing View Count with useEffect in Next.js (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the useEffect hook to invoke a Server Action when a component mounts, updating a view count. It uses useState to manage the view count state and calls an incrementViews action.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/02-server-actions-and-mutations.mdx#2025-04-22_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { incrementViews } from './actions'\nimport { useState, useEffect } from 'react'\n\nexport default function ViewCount({ initialViews }: { initialViews: number }) {\n  const [views, setViews] = useState(initialViews)\n\n  useEffect(() => {\n    const updateViews = async () => {\n      const updatedViews = await incrementViews()\n      setViews(updatedViews)\n    }\n\n    updateViews()\n  }, [])\n\n  return <p>Total Views: {views}</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Using Extended fetch API in Next.js Server Component (JavaScript)\nDESCRIPTION: Shows how to use the extended fetch API in a Next.js Server Component using JavaScript. It includes examples of static data caching, dynamic data fetching, and time-based revalidation.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/fetch.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default async function Page() {\n  // This request should be cached until manually invalidated.\n  // Similar to `getStaticProps`.\n  // `force-cache` is the default and can be omitted.\n  const staticData = await fetch(`https://...`, { cache: 'force-cache' })\n\n  // This request should be refetched on every request.\n  // Similar to `getServerSideProps`.\n  const dynamicData = await fetch(`https://...`, { cache: 'no-store' })\n\n  // This request should be cached with a lifetime of 10 seconds.\n  // Similar to `getStaticProps` with the `revalidate` option.\n  const revalidatedData = await fetch(`https://...`, {\n    next: { revalidate: 10 },\n  })\n\n  return <div>...</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Internationalized Routing in Next.js Middleware\nDESCRIPTION: This code snippet shows how to implement internationalized routing using Next.js middleware. It checks for supported locales in the pathname and redirects to the appropriate localized route if necessary.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/14-internationalization.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NextResponse } from \"next/server\";\n\nlet locales = ['en-US', 'nl-NL', 'nl']\n\n// Get the preferred locale, similar to the above or using a library\nfunction getLocale(request) { ... }\n\nexport function middleware(request) {\n  // Check if there is any supported locale in the pathname\n  const { pathname } = request.nextUrl\n  const pathnameHasLocale = locales.some(\n    (locale) => pathname.startsWith(`/${locale}/`) || pathname === `/${locale}`\n  )\n\n  if (pathnameHasLocale) return\n\n  // Redirect if there is no locale\n  const locale = getLocale(request)\n  request.nextUrl.pathname = `/${locale}${pathname}`\n  // e.g. incoming request is /products\n  // The new URL is now /en-US/products\n  return NextResponse.redirect(request.nextUrl)\n}\n\nexport const config = {\n  matcher: [\n    // Skip all internal paths (_next)\n    '/((?!_next).*)',\n    // Optional: only run on root (/) URL\n    // '/'\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Font Utility Module for Multiple Fonts\nDESCRIPTION: Example showing how to create a utility file to manage multiple fonts in a Next.js app, allowing fonts to be imported and used throughout the application while ensuring they are only preloaded when rendered.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/03-fonts.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inter, Roboto_Mono } from 'next/font/google'\n\nexport const inter = Inter({\n  subsets: ['latin'],\n  display: 'swap',\n})\n\nexport const roboto_mono = Roboto_Mono({\n  subsets: ['latin'],\n  display: 'swap',\n})\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Inter, Roboto_Mono } from 'next/font/google'\n\nexport const inter = Inter({\n  subsets: ['latin'],\n  display: 'swap',\n})\n\nexport const roboto_mono = Roboto_Mono({\n  subsets: ['latin'],\n  display: 'swap',\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Function for Next.js Configuration\nDESCRIPTION: This example demonstrates how to use an async function to generate the Next.js configuration, introduced in Next.js 12.1.0. It allows for asynchronous operations during configuration setup.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// @ts-check\n\nmodule.exports = async (phase, { defaultConfig }) => {\n  /**\n   * @type {import('next').NextConfig}\n   */\n  const nextConfig = {\n    /* config options here */\n  }\n  return nextConfig\n}\n```\n\n----------------------------------------\n\nTITLE: Opting Out of Caching with fetch in Next.js\nDESCRIPTION: This snippet shows how to opt out of data caching for individual fetch requests by setting the cache option to 'no-store', which will also skip the Full Route Cache for the route.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/04-caching/index.mdx#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n// Opt out of caching\nfetch(`https://...`, { cache: 'no-store' })\n```\n\n----------------------------------------\n\nTITLE: Server Action Authentication Handler\nDESCRIPTION: Server Action implementation for handling authentication in Next.js App Router. Processes credentials and handles different authentication scenarios.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/09-authentication/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n'use server'\n\nimport { signIn } from '@/auth'\n\nexport async function authenticate(_currentState: unknown, formData: FormData) {\n  try {\n    await signIn('credentials', formData)\n  } catch (error) {\n    if (error) {\n      switch (error.type) {\n        case 'CredentialsSignin':\n          return 'Invalid credentials.'\n        default:\n          return 'Something went wrong.'\n      }\n    }\n    throw error\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Font with CSS Variables\nDESCRIPTION: Demonstrates how to import and configure a Google font (Inter) with CSS variables in Next.js. Shows basic setup of the font loader object with variable option.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/font.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inter } from 'next/font/google'\nimport styles from '../styles/component.module.css'\n\nconst inter = Inter({\n  variable: '--font-inter',\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirects in Next.js API Routes\nDESCRIPTION: Shows how to implement HTTP redirects from an API route. This example processes form data and redirects to the home page upon successful submission, or returns an error status on failure.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/01-routing/07-api-routes.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from 'next'\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  const { name, message } = req.body\n\n  try {\n    await handleFormInputAsync({ name, message })\n    res.redirect(307, '/')\n  } catch (err) {\n    res.status(500).send({ error: 'Failed to fetch data' })\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default async function handler(req, res) {\n  const { name, message } = req.body\n\n  try {\n    await handleFormInputAsync({ name, message })\n    res.redirect(307, '/')\n  } catch (err) {\n    res.status(500).send({ error: 'failed to fetch data' })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling FormData in Next.js Route Handler\nDESCRIPTION: Shows how to read and process FormData in a Next.js Route Handler using the request.formData() function.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/12-route-handlers.mdx#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function POST(request: Request) {\n  const formData = await request.formData()\n  const name = formData.get('name')\n  const email = formData.get('email')\n  return Response.json({ name, email })\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function POST(request) {\n  const formData = await request.formData()\n  const name = formData.get('name')\n  const email = formData.get('email')\n  return Response.json({ name, email })\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Form Data with Server Actions in JSX\nDESCRIPTION: Example of using a Server Action to process form submissions in a Next.js page component with JavaScript. The action receives the FormData object automatically and extracts form values.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/02-server-actions-and-mutations.mdx#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Page() {\n  async function createInvoice(formData) {\n    'use server'\n\n    const rawFormData = {\n      customerId: formData.get('customerId'),\n      amount: formData.get('amount'),\n      status: formData.get('status'),\n    }\n\n    // mutate data\n    // revalidate cache\n  }\n\n  return <form action={createInvoice}>...</form>\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Headers in Next.js Middleware\nDESCRIPTION: Shows how to set request and response headers using the NextResponse API. Includes examples of cloning request headers and setting new headers for both requests and responses.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/13-middleware.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\n\nexport function middleware(request: NextRequest) {\n  const requestHeaders = new Headers(request.headers)\n  requestHeaders.set('x-hello-from-middleware1', 'hello')\n\n  const response = NextResponse.next({\n    request: {\n      headers: requestHeaders,\n    },\n  })\n\n  response.headers.set('x-hello-from-middleware2', 'hello')\n  return response\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter Component with Client-side State in TypeScript\nDESCRIPTION: Example of a Client Component using useState hook for managing click count state. The component demonstrates the use of the 'use client' directive and client-side interactivity.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/03-rendering/02-client-components.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { useState } from 'react'\n\nexport default function Counter() {\n  const [count, setCount] = useState(0)\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>Click me</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Server Actions in Server Components with JSX\nDESCRIPTION: Shows how to create an inline Server Action within a Server Component using JSX syntax. The 'use server' directive marks the function to be executed on the server side.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/02-server-actions-and-mutations.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// Server Component\nexport default function Page() {\n  // Server Action\n  async function create() {\n    'use server'\n\n    // ...\n  }\n\n  return (\n    // ...\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Programmatic Form Submission in Next.js\nDESCRIPTION: This snippet shows how to trigger a form submission programmatically using the requestSubmit() method in a Next.js application, specifically when the user presses Cmd+Enter.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/02-server-actions-and-mutations.mdx#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nexport function Entry() {\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    if (\n      (e.ctrlKey || e.metaKey) &&\n      (e.key === 'Enter' || e.key === 'NumpadEnter')\n    ) {\n      e.preventDefault()\n      e.currentTarget.form?.requestSubmit()\n    }\n  }\n\n  return (\n    <div>\n      <textarea name=\"entry\" rows={20} required onKeyDown={handleKeyDown} />\n    </div>\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nexport function Entry() {\n  const handleKeyDown = (e) => {\n    if (\n      (e.ctrlKey || e.metaKey) &&\n      (e.key === 'Enter' || e.key === 'NumpadEnter')\n    ) {\n      e.preventDefault()\n      e.currentTarget.form?.requestSubmit()\n    }\n  }\n\n  return (\n    <div>\n      <textarea name=\"entry\" rows={20} required onKeyDown={handleKeyDown} />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing getStaticProps in TypeScript for Next.js\nDESCRIPTION: This snippet demonstrates how to use getStaticProps to fetch data from the GitHub API and render it in a Next.js page component. It includes type definitions and proper TypeScript syntax.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/03-data-fetching/01-get-static-props.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { InferGetStaticPropsType, GetStaticProps } from 'next'\n\ntype Repo = {\n  name: string\n  stargazers_count: number\n}\n\nexport const getStaticProps = (async (context) => {\n  const res = await fetch('https://api.github.com/repos/vercel/next.js')\n  const repo = await res.json()\n  return { props: { repo } }\n}) satisfies GetStaticProps<{\n  repo: Repo\n}>\n\nexport default function Page({\n  repo,\n}: InferGetStaticPropsType<typeof getStaticProps>) {\n  return repo.stargazers_count\n}\n```\n\n----------------------------------------\n\nTITLE: Client-side Data Fetching with SWR in Next.js\nDESCRIPTION: This code snippet shows how to use the SWR library for client-side data fetching in a Next.js page. It demonstrates a more efficient approach to CSR with built-in features like caching and error handling.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/02-rendering/05-client-side-rendering.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR from 'swr'\n\nexport function Page() {\n  const { data, error, isLoading } = useSWR(\n    'https://api.example.com/data',\n    fetcher\n  )\n\n  if (error) return <p>Failed to load.</p>\n  if (isLoading) return <p>Loading...</p>\n\n  return <p>Your Data: {data}</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Using Next.js Router Hooks in Client Components\nDESCRIPTION: Shows how to use the new routing hooks (useRouter, usePathname, useSearchParams) from next/navigation in Client Components.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/02-app-router-migration.mdx#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { useRouter, usePathname, useSearchParams } from 'next/navigation'\n\nexport default function ExampleClientComponent() {\n  const router = useRouter()\n  const pathname = usePathname()\n  const searchParams = useSearchParams()\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Next.js Page for Draft Mode Data Fetching\nDESCRIPTION: This code shows how to update a Next.js page to fetch data based on the Draft Mode status. It uses the draftMode function to check if Draft Mode is enabled and fetches data from the appropriate URL.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/11-draft-mode.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// page that fetches data\nimport { draftMode } from 'next/headers'\n\nasync function getData() {\n  const { isEnabled } = draftMode()\n\n  const url = isEnabled\n    ? 'https://draft.example.com'\n    : 'https://production.example.com'\n\n  const res = await fetch(url)\n\n  return res.json()\n}\n\nexport default async function Page() {\n  const { title, desc } = await getData()\n\n  return (\n    <main>\n      <h1>{title}</h1>\n      <p>{desc}</p>\n    </main>\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// page that fetches data\nimport { draftMode } from 'next/headers'\n\nasync function getData() {\n  const { isEnabled } = draftMode()\n\n  const url = isEnabled\n    ? 'https://draft.example.com'\n    : 'https://production.example.com'\n\n  const res = await fetch(url)\n\n  return res.json()\n}\n\nexport default async function Page() {\n  const { title, desc } = await getData()\n\n  return (\n    <main>\n      <h1>{title}</h1>\n      <p>{desc}</p>\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic useSelectedLayoutSegment Usage in Next.js\nDESCRIPTION: Demonstrates basic usage of useSelectedLayoutSegment hook in a client component to read the active route segment.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/use-selected-layout-segment.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { useSelectedLayoutSegment } from 'next/navigation'\n\nexport default function ExampleClientComponent() {\n  const segment = useSelectedLayoutSegment()\n\n  return <p>Active segment: {segment}</p>\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nimport { useSelectedLayoutSegment } from 'next/navigation'\n\nexport default function ExampleClientComponent() {\n  const segment = useSelectedLayoutSegment()\n\n  return <p>Active segment: {segment}</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Image with Next.js Image Component\nDESCRIPTION: This snippet demonstrates how to use the Next.js Image component to create a responsive image that fills the width of its parent container while maintaining aspect ratio. It uses a static import for automatic sizing and the 'sizes' prop for responsive behavior.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/01-images.mdx#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from 'next/image'\nimport mountains from '../public/mountains.jpg'\n\nexport default function Responsive() {\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column' }}>\n      <Image\n        alt=\"Mountains\"\n        // Importing an image will\n        // automatically set the width and height\n        src={mountains}\n        sizes=\"100vw\"\n        // Make the image display full width\n        style={{\n          width: '100%',\n          height: 'auto',\n        }}\n      />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Webhook Handler in Next.js (JavaScript)\nDESCRIPTION: This code snippet shows how to create a Route Handler for receiving webhooks from third-party services in Next.js using JavaScript. It processes the webhook payload and returns appropriate responses.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/12-route-handlers.mdx#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function POST(request) {\n  try {\n    const text = await request.text()\n    // Process the webhook payload\n  } catch (error) {\n    return new Response(`Webhook error: ${error.message}`, {\n      status: 400,\n    })\n  }\n\n  return new Response('Success!', {\n    status: 200,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Request Body in Next.js Route Handler\nDESCRIPTION: Demonstrates how to read and process the request body in a Next.js Route Handler using standard Web API methods.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/12-route-handlers.mdx#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function POST(request: Request) {\n  const res = await request.json()\n  return Response.json({ res })\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function POST(request) {\n  const res = await request.json()\n  return Response.json({ res })\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Server Actions in Client Components with JSX\nDESCRIPTION: Shows how to import Server Actions created with module-level 'use server' directives into a Client Component using JavaScript syntax. This allows client-side components to trigger server-side operations.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/02-server-actions-and-mutations.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { create } from '@/app/actions'\n\nexport function Button() {\n  return (\n    // ...\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling in getStaticProps for ISR in Next.js\nDESCRIPTION: This code snippet shows how to handle errors in getStaticProps when implementing Incremental Static Regeneration. It demonstrates fetching posts, checking for server errors, and setting revalidation time.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/03-data-fetching/04-incremental-static-regeneration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function getStaticProps() {\n  // If this request throws an uncaught error, Next.js will\n  // not invalidate the currently shown page and\n  // retry getStaticProps on the next request.\n  const res = await fetch('https://.../posts')\n  const posts = await res.json()\n\n  if (!res.ok) {\n    // If there is a server error, you might want to\n    // throw an error instead of returning so that the cache is not updated\n    // until the next successful request.\n    throw new Error(`Failed to fetch posts, received status ${res.status}`)\n  }\n\n  // If the request was successful, return the posts\n  // and revalidate every 10 seconds.\n  return {\n    props: {\n      posts,\n    },\n    revalidate: 10,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Paths with getStaticPaths in pages directory (JSX)\nDESCRIPTION: This snippet demonstrates how to use getStaticPaths to define dynamic paths for pre-rendering at build time in the pages directory. It also includes getStaticProps for fetching data for each path.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/02-app-router-migration.mdx#2025-04-22_snippet_27\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function getStaticPaths() {\n  return {\n    paths: [{ params: { id: '1' } }, { params: { id: '2' } }],\n  }\n}\n\nexport async function getStaticProps({ params }) {\n  const res = await fetch(`https://.../posts/${params.id}`)\n  const post = await res.json()\n\n  return { props: { post } }\n}\n\nexport default function Post({ post }) {\n  return <PostLayout post={post} />\n}\n```\n\n----------------------------------------\n\nTITLE: Using Cookies in Next.js Route Handler\nDESCRIPTION: This example demonstrates how to read and set cookies in a Next.js Route Handler using the 'cookies' function from 'next/headers'. It retrieves a token from cookies and sets it in the response header.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/12-route-handlers.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cookies } from 'next/headers'\n\nexport async function GET(request: Request) {\n  const cookieStore = cookies()\n  const token = cookieStore.get('token')\n\n  return new Response('Hello, Next.js!', {\n    status: 200,\n    headers: { 'Set-Cookie': `token=${token.value}` },\n  })\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { cookies } from 'next/headers'\n\nexport async function GET(request) {\n  const cookieStore = cookies()\n  const token = cookieStore.get('token')\n\n  return new Response('Hello, Next.js!', {\n    status: 200,\n    headers: { 'Set-Cookie': `token=${token}` },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Required Props Example with Container\nDESCRIPTION: Example showing Image Component implementation within a container div, demonstrating all required properties.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/image.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from 'next/image'\n\nexport default function Page() {\n  return (\n    <div>\n      <Image\n        src=\"/profile.png\"\n        width={500}\n        height={500}\n        alt=\"Picture of the author\"\n      />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Next.js Project with TypeScript\nDESCRIPTION: Command to create a new Next.js project with TypeScript using create-next-app. TypeScript is included by default in new projects.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/01-typescript.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Tainting in Next.js (TypeScript)\nDESCRIPTION: This code demonstrates how to use React's taint APIs to prevent sensitive data from being passed to the client in a Next.js application. It includes both object reference and unique value tainting.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/03-patterns.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { queryDataFromDB } from './api'\nimport {\n  experimental_taintObjectReference,\n  experimental_taintUniqueValue,\n} from 'react'\n\nexport async function getUserData() {\n  const data = await queryDataFromDB()\n  experimental_taintObjectReference(\n    'Do not pass the whole user object to the client',\n    data\n  )\n  experimental_taintUniqueValue(\n    \"Do not pass the user's address to the client\",\n    data,\n    data.address\n  )\n  return data\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic API Routes in Next.js\nDESCRIPTION: Shows how to create dynamic API routes in Next.js using file-based routing with parameters. This example extracts the dynamic parameter from the request query and uses it in the response.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/01-routing/07-api-routes.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from 'next'\n\nexport default function handler(req: NextApiRequest, res: NextApiResponse) {\n  const { pid } = req.query\n  res.end(`Post: ${pid}`)\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function handler(req, res) {\n  const { pid } = req.query\n  res.end(`Post: ${pid}`)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Rendering with getServerSideProps in pages directory (JSX)\nDESCRIPTION: This snippet demonstrates how to use getServerSideProps for server-side rendering in the pages directory. It fetches data on the server and passes it as props to the React component.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/02-app-router-migration.mdx#2025-04-22_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function getServerSideProps() {\n  const res = await fetch(`https://...`)\n  const projects = await res.json()\n\n  return { props: { projects } }\n}\n\nexport default function Dashboard({ projects }) {\n  return (\n    <ul>\n      {projects.map((project) => (\n        <li key={project.id}>{project.name}</li>\n      ))}\n    </ul>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Theme Image Component Implementation\nDESCRIPTION: TypeScript implementation of a theme-aware image component that handles both light and dark mode images.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/image.mdx#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport styles from './theme-image.module.css'\nimport Image, { ImageProps } from 'next/image'\n\ntype Props = Omit<ImageProps, 'src' | 'priority' | 'loading'> & {\n  srcLight: string\n  srcDark: string\n}\n\nconst ThemeImage = (props: Props) => {\n  const { srcLight, srcDark, ...rest } = props\n\n  return (\n    <>\n      <Image {...rest} src={srcLight} className={styles.imgLight} />\n      <Image {...rest} src={srcDark} className={styles.imgDark} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Loading UI in Next.js TypeScript\nDESCRIPTION: Example of creating a loading state using loading.tsx file in a Next.js dashboard route. Shows how to implement a basic loading component that displays a loading skeleton.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/04-loading-ui-and-streaming.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function Loading() {\n  // You can add any UI inside Loading, including a Skeleton.\n  return <LoadingSkeleton />\n}\n```\n\n----------------------------------------\n\nTITLE: App Router Login Form Implementation\nDESCRIPTION: Login form implementation using Next.js App Router and Server Actions. Provides a simpler form structure that directly calls server-side authentication.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/09-authentication/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { authenticate } from '@/app/lib/actions'\n\nexport default function Page() {\n  return (\n    <form action={authenticate}>\n      <input type=\"email\" name=\"email\" placeholder=\"Email\" required />\n      <input type=\"password\" name=\"password\" placeholder=\"Password\" required />\n      <button type=\"submit\">Login</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Metadata in Next.js with TypeScript\nDESCRIPTION: This snippet demonstrates how to define metadata for a Next.js page using TypeScript. It exports a metadata object with a title property, which will be used to set the page title.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/02-pages-and-layouts.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: 'Next.js',\n}\n\nexport default function Page() {\n  return '...'\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cached Data Fetching with React Cache - TypeScript\nDESCRIPTION: Demonstrates how to create a cached database query function using React's cache utility. The function memoizes database requests to prevent duplicate queries.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/01-fetching-caching-and-revalidating.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cache } from 'react'\n\nexport const getItem = cache(async (id: string) => {\n  const item = await db.item.findUnique({ id })\n  return item\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Link Component in Next.js (JSX)\nDESCRIPTION: Shows how to import and use the Link component from next/link in a JavaScript React component within the App Router.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/link.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n  return <Link href=\"/dashboard\">Dashboard</Link>\n}\n```\n\n----------------------------------------\n\nTITLE: Revalidating Tagged Cache Entries in Next.js\nDESCRIPTION: This example demonstrates how to purge specific cached entries by using the revalidateTag function with a tag that was previously used when caching data.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/04-caching/index.mdx#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n// Revalidate entries with a specific tag\nrevalidateTag('a')\n```\n\n----------------------------------------\n\nTITLE: Disabling Caching for All Data Requests in a Route Segment\nDESCRIPTION: This snippet demonstrates how to opt out of caching for all data requests within a specific route segment in Next.js. By setting the dynamic export to 'force-dynamic', it affects all data requests in the route, including third-party libraries.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/04-caching/index.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Opt out of caching for all data requests in the route segment\nexport const dynamic = 'force-dynamic'\n```\n\n----------------------------------------\n\nTITLE: Implementing Locale Switcher with TypeScript in Next.js\nDESCRIPTION: A TypeScript React component that handles locale switching using window.history.replaceState. It uses the usePathname hook from next/navigation to get the current path and updates the URL with the selected locale without page reload.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/03-linking-and-navigating.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { usePathname } from 'next/navigation'\n\nexport function LocaleSwitcher() {\n  const pathname = usePathname()\n\n  function switchLocale(locale: string) {\n    // e.g. '/en/about' or '/fr/contact'\n    const newPath = `/${locale}${pathname}`\n    window.history.replaceState(null, '', newPath)\n  }\n\n  return (\n    <>\n      <button onClick={() => switchLocale('en')}>English</button>\n      <button onClick={() => switchLocale('fr')}>French</button>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Redirection with useRouter in Next.js\nDESCRIPTION: This example shows how to use useRouter and useEffect to conditionally redirect a user to the login page if they are not authenticated.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/02-functions/use-router.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react'\nimport { useRouter } from 'next/router'\n\n// Here you would fetch and return the user\nconst useUser = () => ({ user: null, loading: false })\n\nexport default function Page() {\n  const { user, loading } = useUser()\n  const router = useRouter()\n\n  useEffect(() => {\n    if (!(user || loading)) {\n      router.push('/login')\n    }\n  }, [user, loading])\n\n  return <p>Redirecting...</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Nested Dashboard Layout in Next.js App Router\nDESCRIPTION: Example of a nested layout specifically for the dashboard route segment. This layout will be wrapped by the root layout and will wrap any pages or nested layouts within the dashboard directory.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/02-pages-and-layouts.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function DashboardLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return <section>{children}</section>\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function DashboardLayout({ children }) {\n  return <section>{children}</section>\n}\n```\n\n----------------------------------------\n\nTITLE: Client-Side Form Submission Handler in Next.js\nDESCRIPTION: Implements client-side form submission logic with FormData API and fetch request to the server endpoint. Includes basic form structure and event handling.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FormEvent } from 'react'\n\nexport default function Page() {\n  async function onSubmit(event: FormEvent<HTMLFormElement>) {\n    event.preventDefault()\n\n    const formData = new FormData(event.currentTarget)\n    const response = await fetch('/api/submit', {\n      method: 'POST',\n      body: formData,\n    })\n\n    // Handle response if necessary\n    const data = await response.json()\n    // ...\n  }\n\n  return (\n    <form onSubmit={onSubmit}>\n      <input type=\"text\" name=\"name\" />\n      <button type=\"submit\">Submit</button>\n    </form>\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Page() {\n  async function onSubmit(event) {\n    event.preventDefault()\n\n    const formData = new FormData(event.target)\n    const response = await fetch('/api/submit', {\n      method: 'POST',\n      body: formData,\n    })\n\n    // Handle response if necessary\n    const data = await response.json()\n    // ...\n  }\n\n  return (\n    <form onSubmit={onSubmit}>\n      <input type=\"text\" name=\"name\" />\n      <button type=\"submit\">Submit</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Registering OpenTelemetry in Next.js with JavaScript\nDESCRIPTION: Implementation of the instrumentation.js file that registers OpenTelemetry in a Next.js application using @vercel/otel. This should be placed in the root directory of the project.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/10-open-telemetry.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerOTel } from '@vercel/otel'\n\nexport function register() {\n  registerOTel({ serviceName: 'next-app' })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Form Submit Button with Pending State in JSX\nDESCRIPTION: Shows how to implement a submit button in JavaScript that reflects the pending state of form submission using React's useFormStatus hook. This component can be reused across different forms.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/02-server-actions-and-mutations.mdx#2025-04-22_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { useFormStatus } from 'react-dom'\n\nexport function SubmitButton() {\n  const { pending } = useFormStatus()\n\n  return (\n    <button type=\"submit\" disabled={pending}>\n      Add\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Loading External Libraries on Demand in Next.js\nDESCRIPTION: This snippet demonstrates how to load an external library (fuse.js) on demand using dynamic import. The library is only loaded on the client after the user interacts with the search input.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/07-lazy-loading.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { useState } from 'react'\n\nconst names = ['Tim', 'Joe', 'Bel', 'Lee']\n\nexport default function Page() {\n  const [results, setResults] = useState()\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        placeholder=\"Search\"\n        onChange={async (e) => {\n          const { value } = e.currentTarget\n          // Dynamically load fuse.js\n          const Fuse = (await import('fuse.js')).default\n          const fuse = new Fuse(names)\n\n          setResults(fuse.search(value))\n        }}\n      />\n      <pre>Results: {JSON.stringify(results, null, 2)}</pre>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JSON-LD Structured Data in Next.js (JavaScript)\nDESCRIPTION: Shows how to add JSON-LD structured data to a Next.js page component using JavaScript. This example demonstrates implementing product schema markup with dynamic data.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/04-metadata.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nexport default async function Page({ params }) {\n  const product = await getProduct(params.id)\n\n  const jsonLd = {\n    '@context': 'https://schema.org',\n    '@type': 'Product',\n    name: product.name,\n    image: product.image,\n    description: product.description,\n  }\n\n  return (\n    <section>\n      {/* Add JSON-LD to your page */}\n      <script\n        type=\"application/ld+json\"\n        dangerouslySetInnerHTML={{ __html: JSON.stringify(jsonLd) }}\n      />\n      {/* ... */}\n    </section>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Third-Party Components as Client Components in Next.js\nDESCRIPTION: This snippet shows how to wrap a third-party component (Carousel) as a Client Component in Next.js, allowing it to be used within Server Components.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { Carousel } from 'acme-carousel'\n\nexport default Carousel\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nimport { Carousel } from 'acme-carousel'\n\nexport default Carousel\n```\n\n----------------------------------------\n\nTITLE: Memoizing Data Requests with React cache in JavaScript\nDESCRIPTION: This snippet shows how to use the React cache function to memoize data requests in JavaScript. It creates a cached version of a database query function that can be called multiple times while only executing once.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/04-caching/index.mdx#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { cache } from 'react'\nimport db from '@/lib/db'\n\nexport const getItem = cache(async (id) => {\n  const item = await db.item.findUnique({ id })\n  return item\n})\n```\n\n----------------------------------------\n\nTITLE: Deleting Cookies in Next.js Server Action\nDESCRIPTION: Shows multiple methods for deleting cookies in a Next.js Server Action, including using delete(), setting an empty value, and using maxAge or expires options.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/cookies.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n'use server'\n\nimport { cookies } from 'next/headers'\n\nasync function delete(data) {\n  cookies().delete('name')\n}\n\nasync function delete(data) {\n  cookies().set('name', '')\n}\n\nasync function delete(data) {\n  cookies().set('name', 'value', { maxAge: 0 })\n}\n\nasync function delete(data) {\n  const oneDay = 24 * 60 * 60 * 1000\n  cookies().set('name', 'value', { expires: Date.now() - oneDay })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Not Found Component in Next.js (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to create a basic Not Found component using TypeScript in Next.js. It imports the Link component from next/link and renders a simple UI with a heading, message, and a link to return home.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/not-found.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function NotFound() {\n  return (\n    <div>\n      <h2>Not Found</h2>\n      <p>Could not find requested resource</p>\n      <Link href=\"/\">Return Home</Link>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Securing Route Handlers in Next.js App Directory\nDESCRIPTION: Shows implementation of security checks in Next.js Route Handlers with proper HTTP status codes for different authorization scenarios.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/09-authentication/index.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function GET() {\n  // User authentication and role verification\n  const session = await getSession()\n\n  // Check if the user is authenticated\n  if (!session) {\n    return new Response(null, { status: 401 }) // User is not authenticated\n  }\n\n  // Check if the user has the 'admin' role\n  if (session.user.role !== 'admin') {\n    return new Response(null, { status: 403 }) // User is authenticated but does not have the right permissions\n  }\n\n  // Data fetching for authorized users\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Boundary Component in Next.js (JavaScript)\nDESCRIPTION: A JavaScript implementation of an error handling component using the error.js convention in Next.js. This component handles runtime errors, logs them, and provides a recovery mechanism.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/05-error-handling.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n'use client' // Error components must be Client Components\n\nimport { useEffect } from 'react'\n\nexport default function Error({ error, reset }) {\n  useEffect(() => {\n    // Log the error to an error reporting service\n    console.error(error)\n  }, [error])\n\n  return (\n    <div>\n      <h2>Something went wrong!</h2>\n      <button\n        onClick={\n          // Attempt to recover by trying to re-render the segment\n          () => reset()\n        }\n      >\n        Try again\n      </button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Context Provider in Client Component\nDESCRIPTION: This snippet shows the correct way to create a context provider by using a Client Component. The 'use client' directive is used to mark it as a Client Component.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { createContext } from 'react'\n\nexport const ThemeContext = createContext({})\n\nexport default function ThemeProvider({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return <ThemeContext.Provider value=\"dark\">{children}</ThemeContext.Provider>\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { createContext } from 'react'\n\nexport const ThemeContext = createContext({})\n\nexport default function ThemeProvider({ children }) {\n  return <ThemeContext.Provider value=\"dark\">{children}</ThemeContext.Provider>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Loading Component in JavaScript (Next.js)\nDESCRIPTION: Implements a basic loading component in JavaScript that displays a \"Loading...\" message. By default, this is a Server Component but can be converted to a Client Component by adding the \"use client\" directive.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/loading.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Loading() {\n  // Or a custom loading skeleton component\n  return <p>Loading...</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Next.js Configuration using ECMAScript Modules\nDESCRIPTION: This example shows how to create a next.config.mjs file using ECMAScript modules. It exports a default configuration object for customizing Next.js.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// @ts-check\n\n/**\n * @type {import('next').NextConfig}\n */\nconst nextConfig = {\n  /* config options here */\n}\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Using Closures in Server Actions with Next.js\nDESCRIPTION: This snippet illustrates how to use closures in Server Actions to capture a snapshot of data at render time. It demonstrates checking if a version has changed since the initial render before proceeding with an action.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/02-server-actions-and-mutations.mdx#2025-04-22_snippet_36\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Page() {\n  const publishVersion = await getLatestVersion();\n\n  async function publish(formData: FormData) {\n    \"use server\";\n    if (publishVersion !== await getLatestVersion()) {\n      throw new Error('The version has changed since pressing publish');\n    }\n    ...\n  }\n\n  return <button action={publish}>Publish</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Playwright Navigation Test\nDESCRIPTION: Example E2E test using Playwright to verify navigation between Home and About pages, including URL and content verification.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/08-testing/03-playwright.mdx#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { test, expect } from '@playwright/test'\n\ntest('should navigate to the about page', async ({ page }) => {\n  // Start from the index page (the baseURL is set via the webServer in the playwright.config.ts)\n  await page.goto('http://localhost:3000/')\n  // Find an element with the text 'About' and click on it\n  await page.click('text=About')\n  // The new URL should be \"/about\" (baseURL is used there)\n  await expect(page).toHaveURL('http://localhost:3000/about')\n  // The new page should contain an h1 with \"About\"\n  await expect(page.locator('h1')).toContainText('About')\n})\n```\n\n----------------------------------------\n\nTITLE: Next.js App Router File Conventions\nDESCRIPTION: Standard file naming conventions for routing and UI components in the App Router, including layouts, pages, loading states, and error handling.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/01-getting-started/02-project-structure.mdx#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nlayout.{js,jsx,tsx}     # Layout\npage.{js,jsx,tsx}       # Page\nloading.{js,jsx,tsx}    # Loading UI\nnot-found.{js,jsx,tsx}  # Not found UI\nerror.{js,jsx,tsx}      # Error UI\nglobal-error.{js,jsx,tsx} # Global error UI\nroute.{js,ts}          # API endpoint\ntemplate.{js,jsx,tsx}  # Re-rendered layout\ndefault.{js,jsx,tsx}   # Parallel route fallback\n```\n\n----------------------------------------\n\nTITLE: Implementing User Data Caching with unstable_cache in Next.js\nDESCRIPTION: Example showing how to cache user data fetching operations using the unstable_cache function. The code demonstrates wrapping a getUser function with caching functionality for reuse across requests.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/unstable_cache.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getUser } from './data';\nimport { unstable_cache } from 'next/cache';\n\nconst getCachedUser = unstable_cache(\n  async (id) => getUser(id),\n  ['my-app-user']\n);\n\nexport default async function Component({ userID }) {\n  const user = await getCachedUser(userID);\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Multiple Sitemaps in Next.js with TypeScript\nDESCRIPTION: This code demonstrates how to split a sitemap into multiple files using the generateSitemaps function in Next.js. It generates IDs for multiple sitemaps and then uses those IDs to fetch and format product data into sitemap entries, respecting Google's 50,000 URL limit per sitemap.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-sitemaps.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BASE_URL } from '@/app/lib/constants'\n\nexport async function generateSitemaps() {\n  // Fetch the total number of products and calculate the number of sitemaps needed\n  return [{ id: 0 }, { id: 1 }, { id: 2 }, { id: 3 }]\n}\n\nexport default async function sitemap({\n  id,\n}: {\n  id: number\n}): Promise<MetadataRoute.Sitemap> {\n  // Google's limit is 50,000 URLs per sitemap\n  const start = id * 50000\n  const end = start + 50000\n  const products = await getProducts(\n    `SELECT id, date FROM products WHERE id BETWEEN ${start} AND ${end}`\n  )\n  return products.map((product) => ({\n    url: `${BASE_URL}/product/${product.id}`,\n    lastModified: product.date,\n  }))\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Site Generation in app directory (JSX)\nDESCRIPTION: This snippet shows how to implement static site generation in the app directory. It uses the default caching behavior of fetch() to cache the request data until manually invalidated.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/02-app-router-migration.mdx#2025-04-22_snippet_26\n\nLANGUAGE: jsx\nCODE:\n```\nasync function getProjects() {\n  const res = await fetch(`https://...`)\n  const projects = await res.json()\n\n  return projects\n}\n\nexport default async function Index() {\n  const projects = await getProjects()\n\n  return projects.map((project) => <div>{project.name}</div>)\n}\n```\n\n----------------------------------------\n\nTITLE: Secure Draft Mode API Implementation\nDESCRIPTION: Secure implementation of draft mode API route with token validation and slug checking.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/06-configuring/11-draft-mode.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default async (req, res) => {\n  // Check the secret and next parameters\n  // This secret should only be known to this API route and the CMS\n  if (req.query.secret !== 'MY_SECRET_TOKEN' || !req.query.slug) {\n    return res.status(401).json({ message: 'Invalid token' })\n  }\n\n  // Fetch the headless CMS to check if the provided `slug` exists\n  // getPostBySlug would implement the required fetching logic to the headless CMS\n  const post = await getPostBySlug(req.query.slug)\n\n  // If the slug doesn't exist prevent draft mode from being enabled\n  if (!post) {\n    return res.status(401).json({ message: 'Invalid slug' })\n  }\n\n  // Enable Draft Mode by setting the cookie\n  res.setDraftMode({ enable: true })\n\n  // Redirect to the path from the fetched post\n  // We don't redirect to req.query.slug as that might lead to open redirect vulnerabilities\n  res.redirect(post.slug)\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Cookies in Next.js Server Component\nDESCRIPTION: Demonstrates how to use the cookies().get() method to read a specific cookie named 'theme' in a Next.js Server Component.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/cookies.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { cookies } from 'next/headers'\n\nexport default function Page() {\n  const cookieStore = cookies()\n  const theme = cookieStore.get('theme')\n  return '...'\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Non-Variable Font with App Router\nDESCRIPTION: Example showing how to import and apply the Roboto font (non-variable) in a Next.js app using the App Router layout component. For non-variable fonts, weight must be specified explicitly.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/03-fonts.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Roboto } from 'next/font/google'\n\nconst roboto = Roboto({\n  weight: '400',\n  subsets: ['latin'],\n  display: 'swap',\n})\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\" className={roboto.className}>\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Roboto } from 'next/font/google'\n\nconst roboto = Roboto({\n  weight: '400',\n  subsets: ['latin'],\n  display: 'swap',\n})\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\" className={roboto.className}>\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ISR with getStaticProps and getStaticPaths in Next.js\nDESCRIPTION: This code snippet demonstrates how to implement Incremental Static Regeneration using getStaticProps and getStaticPaths in a Next.js blog component. It includes fetching posts, setting revalidation time, and handling dynamic paths.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/03-data-fetching/04-incremental-static-regeneration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Blog({ posts }) {\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>{post.title}</li>\n      ))}\n    </ul>\n  )\n}\n\n// This function gets called at build time on server-side.\n// It may be called again, on a serverless function, if\n// revalidation is enabled and a new request comes in\nexport async function getStaticProps() {\n  const res = await fetch('https://.../posts')\n  const posts = await res.json()\n\n  return {\n    props: {\n      posts,\n    },\n    // Next.js will attempt to re-generate the page:\n    // - When a request comes in\n    // - At most once every 10 seconds\n    revalidate: 10, // In seconds\n  }\n}\n\n// This function gets called at build time on server-side.\n// It may be called again, on a serverless function, if\n// the path has not been generated.\nexport async function getStaticPaths() {\n  const res = await fetch('https://.../posts')\n  const posts = await res.json()\n\n  // Get the paths we want to pre-render based on posts\n  const paths = posts.map((post) => ({\n    params: { id: post.id },\n  }))\n\n  // We'll pre-render only these paths at build time.\n  // { fallback: 'blocking' } will server-render pages\n  // on-demand if the path doesn't exist.\n  return { paths, fallback: 'blocking' }\n}\n\nexport default Blog\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Data in app directory (TSX)\nDESCRIPTION: This snippet shows how to access request data in the app directory using the headers() and cookies() functions. It retrieves the authorization header and theme cookie.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/02-app-router-migration.mdx#2025-04-22_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport { cookies, headers } from 'next/headers'\n\nasync function getData() {\n  const authHeader = headers().get('authorization')\n\n  return '...'\n}\n\nexport default async function Page() {\n  const theme = cookies().get('theme')\n  const data = await getData()\n  return '...'\n}\n```\n\n----------------------------------------\n\nTITLE: Using useParams in a Next.js Client Component (TypeScript)\nDESCRIPTION: This example demonstrates how to use the useParams hook in a Client Component to access dynamic route parameters with TypeScript type safety. It shows how to retrieve and log multiple parameters from a dynamic route.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/use-params.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { useParams } from 'next/navigation'\n\nexport default function ExampleClientComponent() {\n  const params = useParams<{ tag: string; item: string }>()\n\n  // Route -> /shop/[tag]/[item]\n  // URL -> /shop/shoes/nike-air-max-97\n  // `params` -> { tag: 'shoes', item: 'nike-air-max-97' }\n  console.log(params)\n\n  return <></>\n}\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP Responses in Next.js API Routes\nDESCRIPTION: Demonstrates how to send HTTP responses in a Next.js API handler with appropriate status codes. The example shows both successful operations (status 200) and error handling (status 500).\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/01-routing/07-api-routes.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from 'next'\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  try {\n    const result = await someAsyncOperation()\n    res.status(200).send({ result })\n  } catch (err) {\n    res.status(500).send({ error: 'failed to fetch data' })\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default async function handler(req, res) {\n  try {\n    const result = await someAsyncOperation()\n    res.status(200).send({ result })\n  } catch (err) {\n    res.status(500).send({ error: 'failed to fetch data' })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Client Component in Next.js App Directory\nDESCRIPTION: Example of creating a Client Component in the app directory using the 'use client' directive. Shows how to handle props and render dynamic content.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/02-app-router-migration.mdx#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nexport default function HomePage({ recentPosts }) {\n  return (\n    <div>\n      {recentPosts.map((post) => (\n        <div key={post.id}>{post.title}</div>\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Response with NextResponse in JavaScript\nDESCRIPTION: Shows how to create a JSON response with a specific status code using NextResponse.json() method in a Next.js API route using JavaScript.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/next-response.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NextResponse } from 'next/server'\n\nexport async function GET(request) {\n  return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 })\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies in Next.js Server Action\nDESCRIPTION: Demonstrates various ways to set cookies using the cookies().set() method in a Next.js Server Action, including setting with options and as an object.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/cookies.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n'use server'\n\nimport { cookies } from 'next/headers'\n\nasync function create(data) {\n  cookies().set('name', 'lee')\n  // or\n  cookies().set('name', 'lee', { secure: true })\n  // or\n  cookies().set({\n    name: 'name',\n    value: 'lee',\n    httpOnly: true,\n    path: '/',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Middleware Function with NextRequest Parameter\nDESCRIPTION: Example showing the middleware function signature in TypeScript, featuring the NextRequest parameter that represents the incoming HTTP request. This demonstrates the proper type definition for middleware.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/middleware.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextRequest } from 'next/server'\n\nexport function middleware(request: NextRequest) {\n  // Middleware logic goes here\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Script Load Errors with Next.js Script onError Handler\nDESCRIPTION: Example showing how to handle script loading errors using the Next.js Script component's onError handler. The code demonstrates error catching and logging when a script fails to load.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/script.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport Script from 'next/script'\n\nexport default function Page() {\n  return (\n    <>\n      <Script\n        src=\"https://example.com/script.js\"\n        onError={(e: Error) => {\n          console.error('Script failed to load', e)\n        }}\n      />\n    </>\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nimport Script from 'next/script'\n\nexport default function Page() {\n  return (\n    <>\n      <Script\n        src=\"https://example.com/script.js\"\n        onError={(e: Error) => {\n          console.error('Script failed to load', e)\n        }}\n      />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Link Component in Next.js (TSX)\nDESCRIPTION: Demonstrates how to import and use the Link component from next/link in a TypeScript React component within the App Router.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/link.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n  return <Link href=\"/dashboard\">Dashboard</Link>\n}\n```\n\n----------------------------------------\n\nTITLE: Client-Side Redirect using Server Action in Next.js\nDESCRIPTION: This example shows how to implement a client-side redirect using a Server Action in Next.js. It includes a form component and a server action that performs the redirect.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/redirect.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { navigate } from './actions'\n\nexport function ClientRedirect() {\n  return (\n    <form action={navigate}>\n      <input type=\"text\" name=\"id\" />\n      <button>Submit</button>\n    </form>\n  )\n}\n```\n\nLANGUAGE: ts\nCODE:\n```\n'use server'\n\nimport { redirect } from 'next/navigation'\n\nexport async function navigate(data: FormData) {\n  redirect(`/posts/${data.get('id')}`)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Loading Component in TypeScript (Next.js)\nDESCRIPTION: Implements a basic loading component in TypeScript that displays a \"Loading...\" message. By default, this is a Server Component but can be converted to a Client Component by adding the \"use client\" directive.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/loading.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function Loading() {\n  // Or a custom loading skeleton component\n  return <p>Loading...</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Video Display with Vercel Blob in Next.js\nDESCRIPTION: Demonstrates how to fetch and display a video from Vercel Blob storage using React Suspense. The code shows implementation of a video component that retrieves the video URL and renders it using the HTML5 video tag.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/02-videos.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Suspense } from 'react'\nimport { list } from '@vercel/blob'\n\nexport default function Page() {\n  return (\n    <Suspense fallback={<p>Loading video...</p>}>\n      <VideoComponent fileName=\"my-video.mp4\" />\n    </Suspense>\n  )\n}\n\nasync function VideoComponent({ fileName }) {\n  const { blobs } = await list({\n    prefix: fileName,\n    limit: 1,\n  })\n  const { url } = blobs[0]\n\n  return (\n    <video controls preload=\"none\" aria-label=\"Video player\">\n      <source src={url} type=\"video/mp4\" />\n      Your browser does not support the video tag.\n    </video>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Client Component with Children Slot in JavaScript\nDESCRIPTION: This code snippet demonstrates creating a Client Component in JavaScript that accepts children as props. The component includes a button with a state counter and renders the children passed to it, creating a slot for Server Components.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-22_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { useState } from 'react'\n\nexport default function ClientComponent({ children }) {\n  const [count, setCount] = useState(0)\n\n  return (\n    <>\n      <button onClick={() => setCount(count + 1)}>{count}</button>\n\n      {children}\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using getInitialProps with Custom App in Next.js (TypeScript)\nDESCRIPTION: This example shows how to use getInitialProps with a custom App component in Next.js using TypeScript. It demonstrates fetching initial props and passing additional data to pages, but note that this approach is not recommended for newer Next.js applications.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/01-routing/05-custom-app.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport App, { AppContext, AppInitialProps, AppProps } from 'next/app'\n\ntype AppOwnProps = { example: string }\n\nexport default function MyApp({\n  Component,\n  pageProps,\n  example,\n}: AppProps & AppOwnProps) {\n  return (\n    <>\n      <p>Data: {example}</p>\n      <Component {...pageProps} />\n    </>\n  )\n}\n\nMyApp.getInitialProps = async (\n  context: AppContext\n): Promise<AppOwnProps & AppInitialProps> => {\n  const ctx = await App.getInitialProps(context)\n\n  return { ...ctx, example: 'data' }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Static Images with Next.js Image Component\nDESCRIPTION: This code demonstrates how to display images stored in the public directory using the Next.js Image component. It creates a reusable Avatar component that accepts an id and alt text, then shows how to implement a specific use case.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/11-static-assets.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from 'next/image'\n\nexport function Avatar({ id, alt }) {\n  return <Image src={`/avatars/${id}.png`} alt={alt} width=\"64\" height=\"64\" />\n}\n\nexport function AvatarOfMe() {\n  return <Avatar id=\"me\" alt=\"A portrait of me\" />\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Shared Layout Component\nDESCRIPTION: Implementation of a reusable layout component that includes navigation and footer for consistent page structure.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/01-routing/01-pages-and-layouts.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Navbar from './navbar'\nimport Footer from './footer'\n\nexport default function Layout({ children }) {\n  return (\n    <>\n      <Navbar />\n      <main>{children}</main>\n      <Footer />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Cookies in Server Actions (TypeScript)\nDESCRIPTION: This snippet demonstrates how to get, set, and delete cookies inside a Server Action using the cookies API from Next.js. It shows examples of each operation.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/02-server-actions-and-mutations.mdx#2025-04-22_snippet_33\n\nLANGUAGE: ts\nCODE:\n```\n'use server'\n\nimport { cookies } from 'next/headers'\n\nexport async function exampleAction() {\n  // Get cookie\n  const value = cookies().get('name')?.value\n\n  // Set cookie\n  cookies().set('name', 'Delba')\n\n  // Delete cookie\n  cookies().delete('name')\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Server Actions (TypeScript)\nDESCRIPTION: This snippet demonstrates error handling in a Server Action using try/catch. It shows how to throw a custom error message when creating a new item fails.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/02-server-actions-and-mutations.mdx#2025-04-22_snippet_25\n\nLANGUAGE: ts\nCODE:\n```\n'use server'\n\nexport async function createTodo(prevState: any, formData: FormData) {\n  try {\n    // Mutate data\n  } catch (e) {\n    throw new Error('Failed to create task')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Advanced Module Aliases in Next.js\nDESCRIPTION: Shows how to use advanced module aliases in a Next.js page component, including style imports and custom helper components.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/04-absolute-imports-and-module-aliases.mdx#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport Button from '@/components/button'\nimport '@/styles/styles.css'\nimport Helper from 'utils/helper'\n\nexport default function HomePage() {\n  return (\n    <Helper>\n      <h1>Hello World</h1>\n      <Button />\n    </Helper>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Streaming with Suspense in TypeScript\nDESCRIPTION: Example showing how to implement streaming content using React Suspense in a Next.js TypeScript application. Demonstrates wrapping components with Suspense boundaries for progressive loading.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/04-loading-ui-and-streaming.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Suspense } from 'react'\nimport { PostFeed, Weather } from './Components'\n\nexport default function Posts() {\n  return (\n    <section>\n      <Suspense fallback={<p>Loading feed...</p>}>\n        <PostFeed />\n      </Suspense>\n      <Suspense fallback={<p>Loading weather...</p>}>\n        <Weather />\n      </Suspense>\n    </section>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Generate Static Params with TypeScript\nDESCRIPTION: Function to statically generate routes at build time by fetching posts and mapping them to URL slugs. Includes TypeScript implementation.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/09-dynamic-routes.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function generateStaticParams() {\n  const posts = await fetch('https://.../posts').then((res) => res.json())\n\n  return posts.map((post) => ({\n    slug: post.slug,\n  }))\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing getServerSideProps with TypeScript\nDESCRIPTION: Example of using getServerSideProps to fetch GitHub repository data with TypeScript type safety. Demonstrates type definitions, data fetching, and prop passing.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/03-data-fetching/03-get-server-side-props.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { InferGetServerSidePropsType, GetServerSideProps } from 'next'\n\ntype Repo = {\n  name: string\n  stargazers_count: number\n}\n\nexport const getServerSideProps = (async () => {\n  // Fetch data from external API\n  const res = await fetch('https://api.github.com/repos/vercel/next.js')\n  const repo: Repo = await res.json()\n  // Pass data to the page via props\n  return { props: { repo } }\n}) satisfies GetServerSideProps<{ repo: Repo }>\n\nexport default function Page({\n  repo,\n}: InferGetServerSidePropsType<typeof getServerSideProps>) {\n  return (\n    <main>\n      <p>{repo.stargazers_count}</p>\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Manual OpenTelemetry Configuration for Node.js in TypeScript\nDESCRIPTION: Implementation of instrumentation.node.ts that manually configures OpenTelemetry SDK for Node.js with an OTLP HTTP exporter.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/10-open-telemetry.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NodeSDK } from '@opentelemetry/sdk-node'\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http'\nimport { Resource } from '@opentelemetry/resources'\nimport { SEMRESATTRS_SERVICE_NAME } from '@opentelemetry/semantic-conventions'\nimport { SimpleSpanProcessor } from '@opentelemetry/sdk-trace-node'\n\nconst sdk = new NodeSDK({\n  resource: new Resource({\n    [SEMRESATTRS_SERVICE_NAME]: 'next-app',\n  }),\n  spanProcessor: new SimpleSpanProcessor(new OTLPTraceExporter()),\n})\nsdk.start()\n```\n\n----------------------------------------\n\nTITLE: Generating a Sitemap Programmatically with TypeScript in Next.js\nDESCRIPTION: TypeScript implementation for programmatically generating a sitemap in Next.js. Uses the MetadataRoute.Sitemap type and exports a default function that returns an array of URL objects.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/01-metadata/sitemap.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MetadataRoute } from 'next'\n\nexport default function sitemap(): MetadataRoute.Sitemap {\n  return [\n    {\n      url: 'https://acme.com',\n      lastModified: new Date(),\n      changeFrequency: 'yearly',\n      priority: 1,\n    },\n    {\n      url: 'https://acme.com/about',\n      lastModified: new Date(),\n      changeFrequency: 'monthly',\n      priority: 0.8,\n    },\n    {\n      url: 'https://acme.com/blog',\n      lastModified: new Date(),\n      changeFrequency: 'weekly',\n      priority: 0.5,\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing robots.txt for specific user agents in JavaScript\nDESCRIPTION: This snippet shows how to customize robots.txt rules for specific search engine bots using JavaScript in Next.js. It demonstrates setting different rules for Googlebot, Applebot, and Bingbot.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/01-metadata/robots.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function robots() {\n  return {\n    rules: [\n      {\n        userAgent: 'Googlebot',\n        allow: ['/'],\n        disallow: ['/private/'],\n      },\n      {\n        userAgent: ['Applebot', 'Bingbot'],\n        disallow: ['/'],\n      },\n    ],\n    sitemap: 'https://acme.com/sitemap.xml',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Cookie Existence in Next.js Server Component\nDESCRIPTION: Illustrates how to use the cookies().has() method to check if a specific cookie named 'theme' exists in a Next.js Server Component.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/cookies.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { cookies } from 'next/headers'\n\nexport default function Page() {\n  const cookieStore = cookies()\n  const hasCookie = cookieStore.has('theme')\n  return '...'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Redirects with Header, Cookie, and Query Matching in Next.js\nDESCRIPTION: This complex example shows how to set up conditional redirects based on headers, cookies, and query parameters. It demonstrates the use of 'has' and 'missing' fields for advanced matching scenarios.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/redirects.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async redirects() {\n    return [\n      // if the header `x-redirect-me` is present,\n      // this redirect will be applied\n      {\n        source: '/:path((?!another-page$).*)',\n        has: [\n          {\n            type: 'header',\n            key: 'x-redirect-me',\n          },\n        ],\n        permanent: false,\n        destination: '/another-page',\n      },\n      // if the header `x-dont-redirect` is present,\n      // this redirect will NOT be applied\n      {\n        source: '/:path((?!another-page$).*)',\n        missing: [\n          {\n            type: 'header',\n            key: 'x-do-not-redirect',\n          },\n        ],\n        permanent: false,\n        destination: '/another-page',\n      },\n      // if the source, query, and cookie are matched,\n      // this redirect will be applied\n      {\n        source: '/specific/:path*',\n        has: [\n          {\n            type: 'query',\n            key: 'page',\n            // the page value will not be available in the\n            // destination since value is provided and doesn't\n            // use a named capture group e.g. (?<page>home)\n            value: 'home',\n          },\n          {\n            type: 'cookie',\n            key: 'authorized',\n            value: 'true',\n          },\n        ],\n        permanent: false,\n        destination: '/another/:path*',\n      },\n      // if the header `x-authorized` is present and\n      // contains a matching value, this redirect will be applied\n      {\n        source: '/',\n        has: [\n          {\n            type: 'header',\n            key: 'x-authorized',\n            value: '(?<authorized>yes|true)',\n          },\n        ],\n        permanent: false,\n        destination: '/home?authorized=:authorized',\n      },\n      // if the host is `example.com`,\n      // this redirect will be applied\n      {\n        source: '/:path((?!another-page$).*)',\n        has: [\n          {\n            type: 'host',\n            value: 'example.com',\n          },\n        ],\n        permanent: false,\n        destination: '/another-page',\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using useRouter Hook in Next.js Client Component (JavaScript)\nDESCRIPTION: This snippet shows how to use the useRouter hook in a Next.js Client Component written in JavaScript to navigate to a different route when a button is clicked.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/use-router.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { useRouter } from 'next/navigation'\n\nexport default function Page() {\n  const router = useRouter()\n\n  return (\n    <button type=\"button\" onClick={() => router.push('/dashboard')}>\n      Dashboard\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Next.js Head Component\nDESCRIPTION: Example showing how to import and use the Head component from Next.js to add a title to a page. The component allows you to append elements to the head of your page.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/01-components/head.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Head from 'next/head'\n\nfunction IndexPage() {\n  return (\n    <div>\n      <Head>\n        <title>My page title</title>\n      </Head>\n      <p>Hello world!</p>\n    </div>\n  )\n}\n\nexport default IndexPage\n```\n\n----------------------------------------\n\nTITLE: Implementing getStaticProps with TypeScript\nDESCRIPTION: Example of a TypeScript implementation of getStaticProps that fetches data from GitHub API and returns it as props. The example demonstrates proper type definitions using InferGetStaticPropsType and GetStaticProps.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/02-functions/get-static-props.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { InferGetStaticPropsType, GetStaticProps } from 'next'\n\ntype Repo = {\n  name: string\n  stargazers_count: number\n}\n\nexport const getStaticProps = (async (context) => {\n  const res = await fetch('https://api.github.com/repos/vercel/next.js')\n  const repo = await res.json()\n  return { props: { repo } }\n}) satisfies GetStaticProps<{\n  repo: Repo\n}>\n\nexport default function Page({\n  repo,\n}: InferGetStaticPropsType<typeof getStaticProps>) {\n  return repo.stargazers_count\n}\n```\n\n----------------------------------------\n\nTITLE: Using Server-Only Package in Next.js Data Fetching Module\nDESCRIPTION: This snippet shows how to use the 'server-only' package to prevent server-side code from being accidentally used in Client Components.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'server-only'\n\nexport async function getData() {\n  const res = await fetch('https://external-service.com/data', {\n    headers: {\n      authorization: process.env.API_KEY,\n    },\n  })\n\n  return res.json()\n}\n```\n\n----------------------------------------\n\nTITLE: Using userAgent Helper in Next.js Middleware (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the userAgent helper in a Next.js middleware function to detect the device type and set a viewport parameter in the URL. It imports necessary components from next/server and uses the userAgent function to extract device information from the request.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/userAgent.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextRequest, NextResponse, userAgent } from 'next/server'\n\nexport function middleware(request: NextRequest) {\n  const url = request.nextUrl\n  const { device } = userAgent(request)\n  const viewport = device.type === 'mobile' ? 'mobile' : 'desktop'\n  url.searchParams.set('viewport', viewport)\n  return NextResponse.rewrite(url)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic Links in Next.js (JavaScript)\nDESCRIPTION: Shows how to create a list of dynamic links using the Link component and map function in a Next.js application.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/03-linking-and-navigating.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function PostList({ posts }) {\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>\n          <Link href={`/blog/${post.slug}`}>{post.title}</Link>\n        </li>\n      ))}\n    </ul>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Paths On-Demand with getStaticPaths in Next.js\nDESCRIPTION: This snippet demonstrates how to generate paths on-demand using getStaticPaths in Next.js. It includes conditional logic for different environments and fetching posts from an external API to generate paths.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/03-data-fetching/02-get-static-paths.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function getStaticPaths() {\n  // When this is true (in preview environments) don't\n  // prerender any static pages\n  // (faster builds, but slower initial page load)\n  if (process.env.SKIP_BUILD_STATIC_GENERATION) {\n    return {\n      paths: [],\n      fallback: 'blocking',\n    }\n  }\n\n  // Call an external API endpoint to get posts\n  const res = await fetch('https://.../posts')\n  const posts = await res.json()\n\n  // Get the paths we want to prerender based on posts\n  // In production environments, prerender all pages\n  // (slower builds, but faster initial page load)\n  const paths = posts.map((post) => ({\n    params: { id: post.id },\n  }))\n\n  // { fallback: false } means other routes should 404\n  return { paths, fallback: false }\n}\n```\n\n----------------------------------------\n\nTITLE: Memoizing Data Requests with React cache in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the React cache function to memoize data requests in TypeScript. It creates a cached version of a database query function that can be called multiple times while only executing once.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/04-caching/index.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cache } from 'react'\nimport db from '@/lib/db'\n\nexport const getItem = cache(async (id: string) => {\n  const item = await db.item.findUnique({ id })\n  return item\n})\n```\n\n----------------------------------------\n\nTITLE: Client-Side Navigation using useRouter Hook\nDESCRIPTION: Demonstrates client-side navigation using the useRouter hook in a Next.js Client Component. Shows how to programmatically redirect users on button click.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/06-redirecting.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { useRouter } from 'next/navigation'\n\nexport default function Page() {\n  const router = useRouter()\n\n  return (\n    <button type=\"button\" onClick={() => router.push('/dashboard')}>\n      Dashboard\n    </button>\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nimport { useRouter } from 'next/navigation'\n\nexport default function Page() {\n  const router = useRouter()\n\n  return (\n    <button type=\"button\" onClick={() => router.push('/dashboard')}>\n      Dashboard\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic useSearchParams Usage in TypeScript\nDESCRIPTION: Demonstrates how to implement a search bar component using useSearchParams hook to access URL query parameters in TypeScript.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/use-search-params.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { useSearchParams } from 'next/navigation'\n\nexport default function SearchBar() {\n  const searchParams = useSearchParams()\n\n  const search = searchParams.get('search')\n\n  // URL -> `/dashboard?search=my-project`\n  // `search` -> 'my-project'\n  return <>Search: {search}</>\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Different HTTP Methods in Next.js API Routes\nDESCRIPTION: This example demonstrates how to handle different HTTP methods (GET, POST, etc.) in a Next.js API route using req.method.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/01-routing/07-api-routes.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from 'next'\n\nexport default function handler(req: NextApiRequest, res: NextApiResponse) {\n  if (req.method === 'POST') {\n    // Process a POST request\n  } else {\n    // Handle any other HTTP method\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Safely Accessing Browser APIs in Next.js Client Components\nDESCRIPTION: This example shows how to safely access browser APIs like 'window' in a Next.js Client Component. It uses the useEffect hook to ensure the code only runs in the browser environment.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/10-deploying/02-static-exports.mdx#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n'use client';\n\nimport { useEffect } from 'react';\n\nexport default function ClientComponent() {\n  useEffect(() => {\n    // You now have access to `window`\n    console.log(window.innerHeight);\n  }, [])\n\n  return ...;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cookie-Based Session in Next.js Server Action\nDESCRIPTION: This snippet demonstrates how to set a cookie-based session using a server action in Next.js. It encrypts session data and sets a cookie with security options using the cookies() API.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/09-authentication/index.mdx#2025-04-22_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\n'use server'\n\nimport { cookies } from 'next/headers'\n\nexport async function handleLogin(sessionData) {\n  const encryptedSessionData = encrypt(sessionData) // Encrypt your session data\n  cookies().set('session', encryptedSessionData, {\n    httpOnly: true,\n    secure: process.env.NODE_ENV === 'production',\n    maxAge: 60 * 60 * 24 * 7, // One week\n    path: '/',\n  })\n  // Redirect or handle the response after setting the cookie\n}\n```\n\nLANGUAGE: js\nCODE:\n```\n'use server'\n\nimport { cookies } from 'next/headers'\n\nexport async function handleLogin(sessionData) {\n  const encryptedSessionData = encrypt(sessionData) // Encrypt your session data\n  cookies().set('session', encryptedSessionData, {\n    httpOnly: true,\n    secure: process.env.NODE_ENV === 'production',\n    maxAge: 60 * 60 * 24 * 7, // One week\n    path: '/',\n  })\n  // Redirect or handle the response after setting the cookie\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Static Routes for Multiple Locales in Next.js\nDESCRIPTION: This code demonstrates how to use generateStaticParams to create static routes for multiple locales in a Next.js application. It's implemented in the root layout for global effect.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/14-internationalization.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function generateStaticParams() {\n  return [{ lang: 'en-US' }, { lang: 'de' }]\n}\n\nexport default function Root({ children, params }) {\n  return (\n    <html lang={params.lang}>\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Error Handling in Next.js JavaScript\nDESCRIPTION: A JavaScript implementation of a global error boundary for handling errors in the root layout of a Next.js application. This component defines its own HTML and body tags since it replaces the entire root layout when active.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/error.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nexport default function GlobalError({ error, reset }) {\n  return (\n    <html>\n      <body>\n        <h2>Something went wrong!</h2>\n        <button onClick={() => reset()}>Try again</button>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic Images with ImageResponse in Next.js\nDESCRIPTION: Demonstrates how to use the ImageResponse constructor to generate dynamic images using JSX and CSS. This example creates a simple white background with centered text, running on the Edge Runtime.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/04-metadata.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ImageResponse } from 'next/og'\n\nexport const runtime = 'edge'\n\nexport async function GET() {\n  return new ImageResponse(\n    (\n      <div\n        style={{\n          fontSize: 128,\n          background: 'white',\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          textAlign: 'center',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        Hello world!\n      </div>\n    ),\n    {\n      width: 1200,\n      height: 600,\n    }\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic and Wildcard Redirects in next.config.js\nDESCRIPTION: Example showing how to configure basic and wildcard path redirects in Next.js configuration file. Demonstrates setting up permanent redirects for both simple paths and dynamic routes with parameters.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/06-redirecting.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async redirects() {\n    return [\n      // Basic redirect\n      {\n        source: '/about',\n        destination: '/',\n        permanent: true,\n      },\n      // Wildcard path matching\n      {\n        source: '/blog/:slug',\n        destination: '/news/:slug',\n        permanent: true,\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Next.js Image Component with basePath\nDESCRIPTION: Example of using the next/image component with basePath prefix in the src attribute.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/basePath.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from 'next/image'\n\nfunction Home() {\n  return (\n    <>\n      <h1>My Homepage</h1>\n      <Image\n        src=\"/docs/me.png\"\n        alt=\"Picture of the author\"\n        width={500}\n        height={500}\n      />\n      <p>Welcome to my homepage!</p>\n    </>\n  )\n}\n\nexport default Home\n```\n\n----------------------------------------\n\nTITLE: Accessing Dynamic Route Parameters in Route Handlers (TypeScript)\nDESCRIPTION: This snippet illustrates how to access dynamic route parameters in a Next.js route handler using TypeScript. It defines a Params type for the route parameters and demonstrates how to extract the 'team' parameter from the context object.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/route.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype Params = {\n  team: string\n}\n\nexport async function GET(request: Request, context: { params: Params }) {\n  const team = context.params.team // '1'\n}\n\n// Define params type according to your route parameters (see table below)\n```\n\n----------------------------------------\n\nTITLE: Server Component Redirection in Next.js\nDESCRIPTION: Shows how to implement conditional redirects within Next.js Server Components using the redirect function for role-based navigation.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/09-authentication/index.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { redirect } from 'next/navigation'\n\nexport default function Page() {\n  // Logic to determine if a redirect is needed\n  const accessDenied = true\n  if (accessDenied) {\n    redirect('/login')\n  }\n\n  // Define other routes and logic\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Full-Page Background Image with Next.js Image Component\nDESCRIPTION: This snippet illustrates how to use the Next.js Image component to create a full-page background image. It utilizes the 'fill' prop, 'placeholder' for blur-up effect, and 'objectFit' for proper scaling.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/01-images.mdx#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from 'next/image'\nimport mountains from '../public/mountains.jpg'\n\nexport default function Background() {\n  return (\n    <Image\n      alt=\"Mountains\"\n      src={mountains}\n      placeholder=\"blur\"\n      quality={100}\n      fill\n      sizes=\"100vw\"\n      style={{\n        objectFit: 'cover',\n      }}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a POST Request in Next.js Route Handler\nDESCRIPTION: This example demonstrates how to handle a POST request in a Next.js Route Handler. It sends data to an external API and returns the response, showing how POST requests are evaluated dynamically.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/12-route-handlers.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function POST() {\n  const res = await fetch('https://data.mongodb-api.com/...', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'API-Key': process.env.DATA_API_KEY!,\n    },\n    body: JSON.stringify({ time: new Date().toISOString() }),\n  })\n\n  const data = await res.json()\n\n  return Response.json(data)\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function POST() {\n  const res = await fetch('https://data.mongodb-api.com/...', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'API-Key': process.env.DATA_API_KEY,\n    },\n    body: JSON.stringify({ time: new Date().toISOString() }),\n  })\n\n  const data = await res.json()\n\n  return Response.json(data)\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Icon Generation with TypeScript\nDESCRIPTION: Full example showing both generateImageMetadata and Icon component implementation in TypeScript, demonstrating how to generate multiple icon sizes with ImageResponse.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-image-metadata.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ImageResponse } from 'next/og'\n\nexport function generateImageMetadata() {\n  return [\n    {\n      contentType: 'image/png',\n      size: { width: 48, height: 48 },\n      id: 'small',\n    },\n    {\n      contentType: 'image/png',\n      size: { width: 72, height: 72 },\n      id: 'medium',\n    },\n  ]\n}\n\nexport default function Icon({ id }: { id: string }) {\n  return new ImageResponse(\n    (\n      <div\n        style={{\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          fontSize: 88,\n          background: '#000',\n          color: '#fafafa',\n        }}\n      >\n        Icon {id}\n      </div>\n    )\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Cookie-Based Session Data in Next.js Server Component\nDESCRIPTION: This code snippet shows how to access and decrypt session data stored in a cookie within a Next.js server component. It uses the cookies() API to retrieve the encrypted session data.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/09-authentication/index.mdx#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { cookies } from 'next/headers'\n\nexport async function getSessionData(req) {\n  const encryptedSessionData = cookies().get('session')?.value\n  return encryptedSessionData ? JSON.parse(decrypt(encryptedSessionData)) : null\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { cookies } from 'next/headers'\n\nexport async function getSessionData(req) {\n  const encryptedSessionData = cookies().get('session')?.value\n  return encryptedSessionData ? JSON.parse(decrypt(encryptedSessionData)) : null\n}\n```\n\n----------------------------------------\n\nTITLE: Revalidating Data with revalidatePath in Next.js (TypeScript)\nDESCRIPTION: This snippet shows how to use the revalidatePath API to revalidate the Next.js Cache inside a Server Action. It demonstrates revalidating the '/posts' path after creating a new post.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/02-server-actions-and-mutations.mdx#2025-04-22_snippet_27\n\nLANGUAGE: ts\nCODE:\n```\n'use server'\n\nimport { revalidatePath } from 'next/cache'\n\nexport async function createPost() {\n  try {\n    // ...\n  } catch (error) {\n    // ...\n  }\n\n  revalidatePath('/posts')\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Subset of Dynamic Route Params in Next.js (JSX)\nDESCRIPTION: This code snippet demonstrates how to generate a subset of dynamic route parameters for a blog page in Next.js. It fetches the top 10 posts and generates static params for their slugs. The dynamicParams option is set to false to return a 404 for any slugs not in the generated set.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-static-params.mdx#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n// All posts besides the top 10 will be a 404\nexport const dynamicParams = false\n\nexport async function generateStaticParams() {\n  const posts = await fetch('https://.../posts').then((res) => res.json())\n  const topPosts = posts.slice(0, 10)\n\n  return topPosts.map((post) => ({\n    slug: post.slug,\n  }))\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing getStaticPaths in Next.js\nDESCRIPTION: Example of getStaticPaths implementation for dynamic route generation based on external data. Used to pre-render specific pages at build time.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/02-rendering/02-static-site-generation.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  const res = await fetch('https://.../posts')\n  const posts = await res.json()\n\n  // Get the paths we want to pre-render based on posts\n  const paths = posts.map((post) => ({\n    params: { id: post.id },\n  }))\n\n  // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  return { paths, fallback: false }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Priority Attribute with next/image in Next.js Pages Router\nDESCRIPTION: This example demonstrates how to use the priority attribute with the Next.js Image component in the Pages Router. It's used for the Largest Contentful Paint (LCP) element to improve loading performance.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/01-images.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from 'next/image'\n\nexport default function Home() {\n  return (\n    <>\n      <h1>My Homepage</h1>\n      <Image\n        src=\"/me.png\"\n        alt=\"Picture of the author\"\n        width={500}\n        height={500}\n        priority\n      />\n      <p>Welcome to my homepage!</p>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Boundary Component in Next.js JavaScript\nDESCRIPTION: A JavaScript implementation of an error boundary component for Next.js applications. This client component handles unexpected errors in a dashboard route segment, logs errors, and provides a UI with a reset button for recovery attempts.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/error.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n'use client' // Error components must be Client Components\n\nimport { useEffect } from 'react'\n\nexport default function Error({ error, reset }) {\n  useEffect(() => {\n    // Log the error to an error reporting service\n    console.error(error)\n  }, [error])\n\n  return (\n    <div>\n      <h2>Something went wrong!</h2>\n      <button\n        onClick={\n          // Attempt to recover by trying to re-render the segment\n          () => reset()\n        }\n      >\n        Try again\n      </button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a styled-jsx Registry in JavaScript\nDESCRIPTION: JavaScript version of the styled-jsx registry component for Next.js App Router. It creates a style registry that collects CSS rules and injects them using the useServerInsertedHTML hook.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/05-styling/03-css-in-js.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport React, { useState } from 'react'\nimport { useServerInsertedHTML } from 'next/navigation'\nimport { StyleRegistry, createStyleRegistry } from 'styled-jsx'\n\nexport default function StyledJsxRegistry({ children }) {\n  // Only create stylesheet once with lazy initial state\n  // x-ref: https://reactjs.org/docs/hooks-reference.html#lazy-initial-state\n  const [jsxStyleRegistry] = useState(() => createStyleRegistry())\n\n  useServerInsertedHTML(() => {\n    const styles = jsxStyleRegistry.styles()\n    jsxStyleRegistry.flush()\n    return <>{styles}</>\n  })\n\n  return <StyleRegistry registry={jsxStyleRegistry}>{children}</StyleRegistry>\n}\n```\n\n----------------------------------------\n\nTITLE: Route Handler Implementation in TypeScript\nDESCRIPTION: Basic structure for implementing a GET route handler in the app directory using TypeScript.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/02-app-router-migration.mdx#2025-04-22_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function GET(request: Request) {}\n```\n\n----------------------------------------\n\nTITLE: Using Third-Party Components in Next.js Client Components\nDESCRIPTION: This example demonstrates how to use a third-party component (Carousel) within a Client Component in Next.js, ensuring it works with client-side features like useState.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { useState } from 'react'\nimport { Carousel } from 'acme-carousel'\n\nexport default function Gallery() {\n  let [isOpen, setIsOpen] = useState(false)\n\n  return (\n    <div>\n      <button onClick={() => setIsOpen(true)}>View pictures</button>\n\n      {/* Works, since Carousel is used within a Client Component */}\n      {isOpen && <Carousel />}\n    </div>\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nimport { useState } from 'react'\nimport { Carousel } from 'acme-carousel'\n\nexport default function Gallery() {\n  let [isOpen, setIsOpen] = useState(false)\n\n  return (\n    <div>\n      <button onClick={() => setIsOpen(true)}>View pictures</button>\n\n      {/*  Works, since Carousel is used within a Client Component */}\n      {isOpen && <Carousel />}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JSON-LD Structured Data in Next.js (TypeScript)\nDESCRIPTION: Shows how to add JSON-LD structured data to a Next.js page component using TypeScript. This example demonstrates implementing product schema markup with dynamic data.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/04-metadata.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport default async function Page({ params }) {\n  const product = await getProduct(params.id)\n\n  const jsonLd = {\n    '@context': 'https://schema.org',\n    '@type': 'Product',\n    name: product.name,\n    image: product.image,\n    description: product.description,\n  }\n\n  return (\n    <section>\n      {/* Add JSON-LD to your page */}\n      <script\n        type=\"application/ld+json\"\n        dangerouslySetInnerHTML={{ __html: JSON.stringify(jsonLd) }}\n      />\n      {/* ... */}\n    </section>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic useSearchParams Usage in JavaScript\nDESCRIPTION: Shows how to implement a search bar component using useSearchParams hook to access URL query parameters in JavaScript.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/use-search-params.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { useSearchParams } from 'next/navigation'\n\nexport default function SearchBar() {\n  const searchParams = useSearchParams()\n\n  const search = searchParams.get('search')\n\n  // URL -> `/dashboard?search=my-project`\n  // `search` -> 'my-project'\n  return <>Search: {search}</>\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication-based Redirect using Next.js Middleware (JavaScript)\nDESCRIPTION: JavaScript version of authentication-based redirects using Next.js Middleware. Redirects unauthenticated users to the login page when accessing protected routes.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/06-redirecting.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NextResponse } from 'next/server'\nimport { authenticate } from 'auth-provider'\n\nexport function middleware(request) {\n  const isAuthenticated = authenticate(request)\n\n  // If the user is authenticated, continue as normal\n  if (isAuthenticated) {\n    return NextResponse.next()\n  }\n\n  // Redirect to login page if not authenticated\n  return NextResponse.redirect(new URL('/login', request.url))\n}\n\nexport const config = {\n  matcher: '/dashboard/:path*',\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing styled-jsx Registry in Root Layout (TypeScript)\nDESCRIPTION: Shows how to integrate the styled-jsx registry in a Next.js root layout component. This setup wraps the entire application with the style registry to enable styled-jsx functionality throughout the app.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/05-styling/03-css-in-js.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport StyledJsxRegistry from './registry'\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html>\n      <body>\n        <StyledJsxRegistry>{children}</StyledJsxRegistry>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in Next.js API Route\nDESCRIPTION: Shows how to use environment variables within an API route handler for database connection.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/03-environment-variables.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function GET() {\n  const db = await myDB.connect({\n    host: process.env.DB_HOST,\n    username: process.env.DB_USER,\n    password: process.env.DB_PASS,\n  })\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Document Component in Next.js\nDESCRIPTION: This code snippet demonstrates how to create a custom Document component in Next.js to override the default document markup. It includes the necessary imports and structure for both TypeScript and JavaScript implementations.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/01-routing/06-custom-document.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Html, Head, Main, NextScript } from 'next/document'\n\nexport default function Document() {\n  return (\n    <Html lang=\"en\">\n      <Head />\n      <body>\n        <Main />\n        <NextScript />\n      </body>\n    </Html>\n  )\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Html, Head, Main, NextScript } from 'next/document'\n\nexport default function Document() {\n  return (\n    <Html lang=\"en\">\n      <Head />\n      <body>\n        <Main />\n        <NextScript />\n      </body>\n    </Html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Localized Strings in a Next.js Page Component\nDESCRIPTION: This snippet shows how to use the getDictionary function to fetch localized strings and use them in a Next.js page component. It demonstrates server-side rendering of localized content.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/14-internationalization.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getDictionary } from './dictionaries'\n\nexport default async function Page({ params: { lang } }) {\n  const dict = await getDictionary(lang) // en\n  return <button>{dict.products.cart}</button> // Add to Cart\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Page Component in Next.js\nDESCRIPTION: This code snippet demonstrates how to create a simple page component in Next.js. It exports a default function that returns a JSX element, which will be rendered as the content of the page.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/01-defining-routes.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Page() {\n  return <h1>Hello, Next.js!</h1>\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Page() {\n  return <h1>Hello, Next.js!</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Params Behavior in app directory (JSX)\nDESCRIPTION: This snippet demonstrates how to configure the behavior of dynamic parameters in the app directory using the dynamicParams option. It replaces the fallback option from getStaticPaths in the pages directory.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/02-app-router-migration.mdx#2025-04-22_snippet_29\n\nLANGUAGE: jsx\nCODE:\n```\nexport const dynamicParams = true;\n\nexport async function generateStaticParams() {\n  return [...]\n}\n\nasync function getPost(params) {\n  ...\n}\n\nexport default async function Post({ params }) {\n  const post = await getPost(params);\n\n  return ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Routes with useRouter in Next.js\nDESCRIPTION: A basic example of implementing a dynamic route for a blog post using Next.js's useRouter hook. The component accesses the dynamic segment 'slug' from the URL parameters.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/01-routing/02-dynamic-routes.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useRouter } from 'next/router'\n\nexport default function Page() {\n  const router = useRouter()\n  return <p>Post: {router.query.slug}</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Based on Development Phase\nDESCRIPTION: This snippet shows how to use the 'phase' parameter to apply different configurations based on the current development phase. It allows for separate configurations for development and production environments.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/index.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// @ts-check\n\nconst { PHASE_DEVELOPMENT_SERVER } = require('next/constants')\n\nmodule.exports = (phase, { defaultConfig }) => {\n  if (phase === PHASE_DEVELOPMENT_SERVER) {\n    return {\n      /* development only config options here */\n    }\n  }\n\n  return {\n    /* config options for all phases except development here */\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Static Metadata Object in Next.js\nDESCRIPTION: Demonstrates how to export a static metadata object from a layout or page component to define metadata properties like title and description.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-metadata.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: '...',\n  description: '...',\n}\n\nexport default function Page() {}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  title: '...',\n  description: '...',\n}\n\nexport default function Page() {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Image Loader Function\nDESCRIPTION: Example of a custom image loader function that generates URLs for optimized images with width and quality parameters.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/image.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nexport default function myImageLoader({ src, width, quality }) {\n  return `https://example.com/${src}?w=${width}&q=${quality || 75}`\n}\n```\n\n----------------------------------------\n\nTITLE: Securing API Routes in Next.js Pages Directory\nDESCRIPTION: Example of implementing authentication and authorization checks in Next.js API routes with role-based access control.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/09-authentication/index.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextApiRequest, NextApiResponse } from 'next'\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  const session = await getSession(req)\n\n  // Check if the user is authenticated\n  if (!session) {\n    res.status(401).json({\n      error: 'User is not authenticated',\n    })\n    return\n  }\n\n  // Check if the user has the 'admin' role\n  if (session.user.role !== 'admin') {\n    res.status(401).json({\n      error: 'Unauthorized access: User does not have admin privileges.',\n    })\n    return\n  }\n\n  // Proceed with the route for authorized users\n  // ... implementation of the API Route\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing getStaticPaths and getStaticProps in TypeScript\nDESCRIPTION: This snippet demonstrates how to implement getStaticPaths and getStaticProps for a dynamic route in Next.js using TypeScript. It includes type definitions, fetching data from an API, and rendering the page component.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/03-data-fetching/02-get-static-paths.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  InferGetStaticPropsType,\n  GetStaticProps,\n  GetStaticPaths,\n} from 'next'\n\ntype Repo = {\n  name: string\n  stargazers_count: number\n}\n\nexport const getStaticPaths = (async () => {\n  return {\n    paths: [\n      {\n        params: {\n          name: 'next.js',\n        },\n      }, // See the \"paths\" section below\n    ],\n    fallback: true, // false or \"blocking\"\n  }\n}) satisfies GetStaticPaths\n\nexport const getStaticProps = (async (context) => {\n  const res = await fetch('https://api.github.com/repos/vercel/next.js')\n  const repo = await res.json()\n  return { props: { repo } }\n}) satisfies GetStaticProps<{\n  repo: Repo\n}>\n\nexport default function Page({\n  repo,\n}: InferGetStaticPropsType<typeof getStaticProps>) {\n  return repo.stargazers_count\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies in Next.js API Routes\nDESCRIPTION: Demonstrates how to set cookies in the response header using Next.js API Routes.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from 'next'\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  res.setHeader('Set-Cookie', 'username=lee; Path=/; HttpOnly')\n  res.status(200).send('Cookie has been set.')\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default async function handler(req, res) {\n  res.setHeader('Set-Cookie', 'username=lee; Path=/; HttpOnly')\n  res.status(200).send('Cookie has been set.')\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata in Next.js App Router with JavaScript\nDESCRIPTION: Demonstrates how to add SEO metadata to the root layout using Next.js built-in metadata API in JavaScript. This replaces the need for next/head in the pages directory.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/02-app-router-migration.mdx#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  title: 'Home',\n  description: 'Welcome to Next.js',\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cache Control with getServerSideProps\nDESCRIPTION: Example demonstrating how to implement caching headers in getServerSideProps for dynamic responses using stale-while-revalidate strategy.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/03-data-fetching/03-get-server-side-props.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function getServerSideProps({ req, res }) {\n  res.setHeader(\n    'Cache-Control',\n    'public, s-maxage=10, stale-while-revalidate=59'\n  )\n\n  return {\n    props: {},\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Role-Based Authorization in Next.js Server Component\nDESCRIPTION: This snippet demonstrates how to conditionally render UI components based on user roles in a Next.js Server Component. It checks the user's role from the session and returns different dashboard components accordingly.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/09-authentication/index.mdx#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nexport default async function Dashboard() {\n  const session = await getSession()\n  const userRole = session?.user?.role // Assuming 'role' is part of the session object\n\n  if (userRole === 'admin') {\n    return <AdminDashboard /> // Component for admin users\n  } else if (userRole === 'user') {\n    return <UserDashboard /> // Component for regular users\n  } else {\n    return <AccessDenied /> // Component shown for unauthorized access\n  }\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Dashboard() {\n  const session = await getSession()\n  const userRole = session?.user?.role // Assuming 'role' is part of the session object\n\n  if (userRole === 'admin') {\n    return <AdminDashboard /> // Component for admin users\n  } else if (userRole === 'user') {\n    return <UserDashboard /> // Component for regular users\n  } else {\n    return <AccessDenied /> // Component shown for unauthorized access\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Typing Next.js Pages Router Data Fetching Functions\nDESCRIPTION: Example of how to use TypeScript with getStaticProps, getStaticPaths, and getServerSideProps in the Pages Router using the satisfies operator.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/01-typescript.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GetStaticProps, GetStaticPaths, GetServerSideProps } from 'next'\n\nexport const getStaticProps = (async (context) => {\n  // ...\n}) satisfies GetStaticProps\n\nexport const getStaticPaths = (async () => {\n  // ...\n}) satisfies GetStaticPaths\n\nexport const getServerSideProps = (async (context) => {\n  // ...\n}) satisfies GetServerSideProps\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom App Component in Next.js (TypeScript)\nDESCRIPTION: This snippet shows how to create a custom App component in Next.js using TypeScript. It overrides the default App to control page initialization and allows for shared layouts, data injection, and global CSS.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/01-routing/05-custom-app.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { AppProps } from 'next/app'\n\nexport default function MyApp({ Component, pageProps }: AppProps) {\n  return <Component {...pageProps} />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Redirect with createPost Function\nDESCRIPTION: Demonstrates how to use the redirect function after a database operation in a Server Action. The function creates a post, revalidates the cache, and redirects to the new post page.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/06-redirecting.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n'use server'\n\nimport { redirect } from 'next/navigation'\nimport { revalidatePath } from 'next/cache'\n\nexport async function createPost(id: string) {\n  try {\n    // Call database\n  } catch (error) {\n    // Handle errors\n  }\n\n  revalidatePath('/posts') // Update cached posts\n  redirect(`/post/${id}`) // Navigate to the new post page\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'use server'\n\nimport { redirect } from 'next/navigation'\nimport { revalidatePath } from 'next/cache'\n\nexport async function createPost(id) {\n  try {\n    // Call database\n  } catch (error) {\n    // Handle errors\n  }\n\n  revalidatePath('/posts') // Update cached posts\n  redirect(`/post/${id}`) // Navigate to the new post page\n}\n```\n\n----------------------------------------\n\nTITLE: Using useFormState for Error Handling in Next.js Forms\nDESCRIPTION: This snippet shows how to use the useFormState hook to handle form errors and display messages to the user in a Next.js application.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/02-server-actions-and-mutations.mdx#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { useFormState } from 'react-dom'\nimport { createUser } from '@/app/actions'\n\nconst initialState = {\n  message: '',\n}\n\nexport function Signup() {\n  const [state, formAction] = useFormState(createUser, initialState)\n\n  return (\n    <form action={formAction}>\n      <label htmlFor=\"email\">Email</label>\n      <input type=\"text\" id=\"email\" name=\"email\" required />\n      {/* ... */}\n      <p aria-live=\"polite\" className=\"sr-only\">\n        {state?.message}\n      </p>\n      <button>Sign up</button>\n    </form>\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nimport { useFormState } from 'react-dom'\nimport { createUser } from '@/app/actions'\n\nconst initialState = {\n  message: '',\n}\n\nexport function Signup() {\n  const [state, formAction] = useFormState(createUser, initialState)\n\n  return (\n    <form action={formAction}>\n      <label htmlFor=\"email\">Email</label>\n      <input type=\"text\" id=\"email\" name=\"email\" required />\n      {/* ... */}\n      <p aria-live=\"polite\" className=\"sr-only\">\n        {state?.message}\n      </p>\n      <button>Sign up</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Middleware Configuration with Matcher Objects in Next.js\nDESCRIPTION: Example of complex middleware configuration using the matcher option with detailed path specifications. This demonstrates how to configure middleware to run on specific API routes with conditions based on headers, query parameters, and cookies.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/middleware.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const config = {\n  matcher: [\n    {\n      source: '/api/*',\n      regexp: '^/api/(.*)',\n      locale: false,\n      has: [\n        { type: 'header', key: 'Authorization', value: 'Bearer Token' },\n        { type: 'query', key: 'userId', value: '123' },\n      ],\n      missing: [{ type: 'cookie', key: 'session', value: 'active' }],\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Regex Path Matching Redirects in Next.js\nDESCRIPTION: This example demonstrates how to use regex for path matching in redirects. It shows how to match specific patterns in the URL and use captured groups in the destination.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/redirects.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async redirects() {\n    return [\n      {\n        source: '/post/:slug(\\\\d{1,})',\n        destination: '/news/:slug', // Matched parameters can be used in the destination\n        permanent: false,\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Middleware Matcher for CSP in Next.js\nDESCRIPTION: This code snippet shows how to configure the matcher for the Middleware to apply CSP headers only to specific paths. It excludes API routes, static files, image optimization files, and favicon from CSP application.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/15-content-security-policy.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - api (API routes)\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     */\n    {\n      source: '/((?!api|_next/static|_next/image|favicon.ico).*)',\n      missing: [\n        { type: 'header', key: 'next-router-prefetch' },\n        { type: 'header', key: 'purpose', value: 'prefetch' },\n      ],\n    },\n  ],\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - api (API routes)\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     */\n    {\n      source: '/((?!api|_next/static|_next/image|favicon.ico).*)',\n      missing: [\n        { type: 'header', key: 'next-router-prefetch' },\n        { type: 'header', key: 'purpose', value: 'prefetch' },\n      ],\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Using Local Images with next/image in Next.js App Router\nDESCRIPTION: This example demonstrates how to use a local image with the Next.js Image component in the App Router. It shows automatic width and height detection and optional blur-up placeholder.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/01-images.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from 'next/image'\nimport profilePic from './me.png'\n\nexport default function Page() {\n  return (\n    <Image\n      src={profilePic}\n      alt=\"Picture of the author\"\n      // width={500} automatically provided\n      // height={500} automatically provided\n      // blurDataURL=\"data:...\" automatically provided\n      // placeholder=\"blur\" // Optional blur-up while loading\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing renderPage in Next.js Document Component\nDESCRIPTION: This advanced code snippet shows how to customize the renderPage function in the Document component for server-side rendering support. It includes examples for both TypeScript and JavaScript, demonstrating how to enhance the App and Component rendering.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/01-routing/06-custom-document.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Document, {\n  Html,\n  Head,\n  Main,\n  NextScript,\n  DocumentContext,\n  DocumentInitialProps,\n} from 'next/document'\n\nclass MyDocument extends Document {\n  static async getInitialProps(\n    ctx: DocumentContext\n  ): Promise<DocumentInitialProps> {\n    const originalRenderPage = ctx.renderPage\n\n    // Run the React rendering logic synchronously\n    ctx.renderPage = () =>\n      originalRenderPage({\n        // Useful for wrapping the whole react tree\n        enhanceApp: (App) => App,\n        // Useful for wrapping in a per-page basis\n        enhanceComponent: (Component) => Component,\n      })\n\n    // Run the parent `getInitialProps`, it now includes the custom `renderPage`\n    const initialProps = await Document.getInitialProps(ctx)\n\n    return initialProps\n  }\n\n  render() {\n    return (\n      <Html lang=\"en\">\n        <Head />\n        <body>\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    )\n  }\n}\n\nexport default MyDocument\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Document, { Html, Head, Main, NextScript } from 'next/document'\n\nclass MyDocument extends Document {\n  static async getInitialProps(ctx) {\n    const originalRenderPage = ctx.renderPage\n\n    // Run the React rendering logic synchronously\n    ctx.renderPage = () =>\n      originalRenderPage({\n        // Useful for wrapping the whole react tree\n        enhanceApp: (App) => App,\n        // Useful for wrapping in a per-page basis\n        enhanceComponent: (Component) => Component,\n      })\n\n    // Run the parent `getInitialProps`, it now includes the custom `renderPage`\n    const initialProps = await Document.getInitialProps(ctx)\n\n    return initialProps\n  }\n\n  render() {\n    return (\n      <Html lang=\"en\">\n        <Head />\n        <body>\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    )\n  }\n}\n\nexport default MyDocument\n```\n\n----------------------------------------\n\nTITLE: Creating a styled-jsx Registry in TypeScript\nDESCRIPTION: Creates a style registry component for styled-jsx in Next.js App Router. This Client Component uses useState to create the registry and useServerInsertedHTML to insert collected CSS rules before content that uses them.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/05-styling/03-css-in-js.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport React, { useState } from 'react'\nimport { useServerInsertedHTML } from 'next/navigation'\nimport { StyleRegistry, createStyleRegistry } from 'styled-jsx'\n\nexport default function StyledJsxRegistry({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  // Only create stylesheet once with lazy initial state\n  // x-ref: https://reactjs.org/docs/hooks-reference.html#lazy-initial-state\n  const [jsxStyleRegistry] = useState(() => createStyleRegistry())\n\n  useServerInsertedHTML(() => {\n    const styles = jsxStyleRegistry.styles()\n    jsxStyleRegistry.flush()\n    return <>{styles}</>\n  })\n\n  return <StyleRegistry registry={jsxStyleRegistry}>{children}</StyleRegistry>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Segment Options in Next.js (JavaScript)\nDESCRIPTION: This snippet demonstrates how to configure various segment options for a Route Handler in Next.js using JavaScript. It includes settings for dynamic behavior, revalidation, caching, runtime, and region preferences.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/12-route-handlers.mdx#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nexport const dynamic = 'auto'\nexport const dynamicParams = true\nexport const revalidate = false\nexport const fetchCache = 'auto'\nexport const runtime = 'nodejs'\nexport const preferredRegion = 'auto'\n```\n\n----------------------------------------\n\nTITLE: Disabling Scroll Restoration in Next.js Client Component (JavaScript)\nDESCRIPTION: This snippet shows how to disable the default scroll restoration behavior when navigating to a new route using the useRouter hook in a Next.js Client Component written in JavaScript.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/use-router.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { useRouter } from 'next/navigation'\n\nexport default function Page() {\n  const router = useRouter()\n\n  return (\n    <button\n      type=\"button\"\n      onClick={() => router.push('/dashboard', { scroll: false })}\n    >\n      Dashboard\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Robots Metadata in Next.js\nDESCRIPTION: This snippet shows how to configure robots metadata in Next.js, including index, follow, nocache, and specific settings for Google Bot.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-metadata.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  robots: {\n    index: false,\n    follow: true,\n    nocache: true,\n    googleBot: {\n      index: true,\n      follow: false,\n      noimageindex: true,\n      'max-video-preview': -1,\n      'max-image-preview': 'large',\n      'max-snippet': -1,\n    },\n  },\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"robots\" content=\"noindex, follow, nocache\" />\n<meta\n  name=\"googlebot\"\n  content=\"index, nofollow, noimageindex, max-video-preview:-1, max-image-preview:large, max-snippet:-1\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for Next.js using TypeScript\nDESCRIPTION: Jest configuration file using next/jest for a Next.js project with TypeScript.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/08-testing/02-jest.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Config } from 'jest'\nimport nextJest from 'next/jest.js'\n\nconst createJestConfig = nextJest({\n  // Provide the path to your Next.js app to load next.config.js and .env files in your test environment\n  dir: './',\n})\n\n// Add any custom config to be passed to Jest\nconst config: Config = {\n  coverageProvider: 'v8',\n  testEnvironment: 'jsdom',\n  // Add more setup options before each test is run\n  // setupFilesAfterEnv: ['<rootDir>/jest.setup.ts'],\n}\n\n// createJestConfig is exported this way to ensure that next/jest can load the Next.js config which is async\nexport default createJestConfig(config)\n```\n\n----------------------------------------\n\nTITLE: Importing NavigationEvents Component in Next.js Layout\nDESCRIPTION: This snippet shows how to import and use the NavigationEvents component in a Next.js layout file, wrapping it in a Suspense boundary.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/use-router.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Suspense } from 'react'\nimport { NavigationEvents } from './components/navigation-events'\n\nexport default function Layout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        {children}\n\n        <Suspense fallback={null}>\n          <NavigationEvents />\n        </Suspense>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Web Vitals Reporting in Next.js\nDESCRIPTION: Use the useReportWebVitals hook to send Core Web Vitals data to analytics tools. This allows tracking of important performance metrics in production.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/10-deploying/01-production-checklist.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nuseReportWebVitals\n```\n\n----------------------------------------\n\nTITLE: Importing Server Components with next/dynamic in Next.js\nDESCRIPTION: This example shows how to dynamically import a Server Component using next/dynamic. Only the Client Components that are children of the Server Component will be lazy-loaded.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/07-lazy-loading.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport dynamic from 'next/dynamic'\n\n// Server Component:\nconst ServerComponent = dynamic(() => import('../components/ServerComponent'))\n\nexport default function ServerComponentExample() {\n  return (\n    <div>\n      <ServerComponent />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using usePathname with useEffect for Route Change Detection\nDESCRIPTION: An example showing how to use usePathname along with useSearchParams to perform actions in response to route changes using useEffect.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/use-pathname.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { usePathname, useSearchParams } from 'next/navigation'\n\nfunction ExampleClientComponent() {\n  const pathname = usePathname()\n  const searchParams = useSearchParams()\n  useEffect(() => {\n    // Do something here...\n  }, [pathname, searchParams])\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { usePathname, useSearchParams } from 'next/navigation'\n\nfunction ExampleClientComponent() {\n  const pathname = usePathname()\n  const searchParams = useSearchParams()\n  useEffect(() => {\n    // Do something here...\n  }, [pathname, searchParams])\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Static Params for Multiple Dynamic Segments in Next.js\nDESCRIPTION: This snippet demonstrates how to use generateStaticParams to create static routes for multiple dynamic segments ([category] and [product]) in a product page. It generates three static routes with different category and product combinations.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-static-params.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport function generateStaticParams() {\n  return [\n    { category: 'a', product: '1' },\n    { category: 'b', product: '2' },\n    { category: 'c', product: '3' },\n  ]\n}\n\n// Three versions of this page will be statically generated\n// using the `params` returned by `generateStaticParams`\n// - /products/a/1\n// - /products/b/2\n// - /products/c/3\nexport default function Page({\n  params,\n}: {\n  params: { category: string; product: string }\n}) {\n  const { category, product } = params\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Extended fetch API in Next.js Server Component (TypeScript)\nDESCRIPTION: Demonstrates how to use the extended fetch API in a Next.js Server Component with different caching strategies. It shows examples of static data caching, dynamic data fetching, and time-based revalidation.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/fetch.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default async function Page() {\n  // This request should be cached until manually invalidated.\n  // Similar to `getStaticProps`.\n  // `force-cache` is the default and can be omitted.\n  const staticData = await fetch(`https://...`, { cache: 'force-cache' })\n\n  // This request should be refetched on every request.\n  // Similar to `getServerSideProps`.\n  const dynamicData = await fetch(`https://...`, { cache: 'no-store' })\n\n  // This request should be cached with a lifetime of 10 seconds.\n  // Similar to `getStaticProps` with the `revalidate` option.\n  const revalidatedData = await fetch(`https://...`, {\n    next: { revalidate: 10 },\n  })\n\n  return <div>...</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Using notFound() Function in Next.js Route Handlers\nDESCRIPTION: This example demonstrates how to use the notFound() function within an async route handler to gracefully handle cases where data cannot be found. When a user isn't found, notFound() is called to render the not-found UI and terminate rendering of the current route segment.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/not-found.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { notFound } from 'next/navigation'\n\nasync function fetchUser(id) {\n  const res = await fetch('https://...')\n  if (!res.ok) return undefined\n  return res.json()\n}\n\nexport default async function Profile({ params }) {\n  const user = await fetchUser(params.id)\n\n  if (!user) {\n    notFound()\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables in Jest Setup for Next.js\nDESCRIPTION: This code snippet demonstrates how to load environment variables in a Jest global setup file for Next.js projects. It uses the loadEnvConfig function from the @next/env package to ensure environment variables are loaded the same way as in Next.js.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/03-environment-variables.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// The below can be used in a Jest global setup file or similar for your testing set-up\nimport { loadEnvConfig } from '@next/env'\n\nexport default async () => {\n  const projectDir = process.cwd()\n  loadEnvConfig(projectDir)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring External URL Rewrites in Next.js\nDESCRIPTION: This snippet shows how to set up rewrites to external URLs in Next.js. It includes examples for redirecting specific routes to an external site and handling trailing slashes.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/rewrites.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/blog',\n        destination: 'https://example.com/blog',\n      },\n      {\n        source: '/blog/:slug',\n        destination: 'https://example.com/blog/:slug', // Matched parameters can be used in the destination\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Link with Functional Components in Next.js\nDESCRIPTION: Shows how to implement the Link component with a functional component using React.forwardRef for proper handling of onClick, href, and ref props.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/link.mdx#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\n// `onClick`, `href`, and `ref` need to be passed to the DOM element\n// for proper handling\nconst MyButton = React.forwardRef(({ onClick, href }, ref) => {\n  return (\n    <a href={href} onClick={onClick} ref={ref}>\n      Click Me\n    </a>\n  )\n})\n\nfunction Home() {\n  return (\n    <Link href=\"/about\" passHref legacyBehavior>\n      <MyButton />\n    </Link>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Cache Handler in Next.js\nDESCRIPTION: This code snippet shows an implementation of a custom cache handler in Next.js. It includes methods for getting, setting, and revalidating cached data, which can be adapted to use external storage solutions.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/10-deploying/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst cache = new Map()\n\nmodule.exports = class CacheHandler {\n  constructor(options) {\n    this.options = options\n  }\n\n  async get(key) {\n    // This could be stored anywhere, like durable storage\n    return cache.get(key)\n  }\n\n  async set(key, data, ctx) {\n    // This could be stored anywhere, like durable storage\n    cache.set(key, {\n      value: data,\n      lastModified: Date.now(),\n      tags: ctx.tags,\n    })\n  }\n\n  async revalidateTag(tag) {\n    // Iterate over all entries in the cache\n    for (let [key, value] of cache) {\n      // If the value's tags include the specified tag, delete this entry\n      if (value.tags.includes(tag)) {\n        cache.delete(key)\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useSelectedLayoutSegments in JavaScript\nDESCRIPTION: JavaScript version of the useSelectedLayoutSegments implementation, showing how to use the hook in a Next.js Client Component to render active route segments in a list structure.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/use-selected-layout-segments.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { useSelectedLayoutSegments } from 'next/navigation'\n\nexport default function ExampleClientComponent() {\n  const segments = useSelectedLayoutSegments()\n\n  return (\n    <ul>\n      {segments.map((segment, index) => (\n        <li key={index}>{segment}</li>\n      ))}\n    </ul>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Revalidating Page Path Example\nDESCRIPTION: Example demonstrating how to revalidate a page path with dynamic segments.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/revalidatePath.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { revalidatePath } from 'next/cache'\nrevalidatePath('/blog/[slug]', 'page')\n// or with route groups\nrevalidatePath('/(main)/post/[slug]', 'page')\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Streaming in Next.js Route Handler\nDESCRIPTION: Shows how to implement custom streaming using Web APIs in a Next.js Route Handler.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/12-route-handlers.mdx#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nfunction iteratorToStream(iterator: any) {\n  return new ReadableStream({\n    async pull(controller) {\n      const { value, done } = await iterator.next()\n\n      if (done) {\n        controller.close()\n      } else {\n        controller.enqueue(value)\n      }\n    },\n  })\n}\n\nfunction sleep(time: number) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, time)\n  })\n}\n\nconst encoder = new TextEncoder()\n\nasync function* makeIterator() {\n  yield encoder.encode('<p>One</p>')\n  await sleep(200)\n  yield encoder.encode('<p>Two</p>')\n  await sleep(200)\n  yield encoder.encode('<p>Three</p>')\n}\n\nexport async function GET() {\n  const iterator = makeIterator()\n  const stream = iteratorToStream(iterator)\n\n  return new Response(stream)\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction iteratorToStream(iterator) {\n  return new ReadableStream({\n    async pull(controller) {\n      const { value, done } = await iterator.next()\n\n      if (done) {\n        controller.close()\n      } else {\n        controller.enqueue(value)\n      }\n    },\n  })\n}\n\nfunction sleep(time) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, time)\n  })\n}\n\nconst encoder = new TextEncoder()\n\nasync function* makeIterator() {\n  yield encoder.encode('<p>One</p>')\n  await sleep(200)\n  yield encoder.encode('<p>Two</p>')\n  await sleep(200)\n  yield encoder.encode('<p>Three</p>')\n}\n\nexport async function GET() {\n  const iterator = makeIterator()\n  const stream = iteratorToStream(iterator)\n\n  return new Response(stream)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Matching Redirects in Next.js\nDESCRIPTION: This example shows how to set up a redirect with path matching. It demonstrates how to use parameters in the source and destination paths for dynamic redirects.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/redirects.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async redirects() {\n    return [\n      {\n        source: '/old-blog/:slug',\n        destination: '/news/:slug', // Matched parameters can be used in the destination\n        permanent: true,\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Wildcard Path Matching Configuration\nDESCRIPTION: Shows how to implement wildcard path matching in rewrites using asterisk notation\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/rewrites.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/blog/:slug*',\n        destination: '/news/:slug*',\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in Next.js Components\nDESCRIPTION: Shows how to access environment variables in a React component using process.env. The environment variable values are replaced at build time with their actual values.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/env.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Page() {\n  return <h1>The value of customKey is: {process.env.customKey}</h1>\n}\n\nexport default Page\n```\n\n----------------------------------------\n\nTITLE: Retrieving Client IP Address in Next.js\nDESCRIPTION: Demonstrates how to use the headers function to get the IP address of the client. It checks for 'x-forwarded-for' and 'x-real-ip' headers with a fallback value.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/headers.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Suspense } from 'react'\nimport { headers } from 'next/headers'\n\nfunction IP() {\n  const FALLBACK_IP_ADDRESS = '0.0.0.0'\n  const forwardedFor = headers().get('x-forwarded-for')\n\n  if (forwardedFor) {\n    return forwardedFor.split(',')[0] ?? FALLBACK_IP_ADDRESS\n  }\n\n  return headers().get('x-real-ip') ?? FALLBACK_IP_ADDRESS\n}\n\nexport default function Page() {\n  return (\n    <Suspense fallback={null}>\n      <IP />\n    </Suspense>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Options in Next.js fetch API\nDESCRIPTION: Demonstrates how to configure cache options for the Next.js extended fetch API. It shows the usage of 'force-cache' and 'no-store' cache strategies.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/fetch.mdx#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nfetch(`https://...`, { cache: 'force-cache' | 'no-store' })\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirects with basePath Support in Next.js\nDESCRIPTION: This snippet shows how to configure redirects when using the basePath feature in Next.js. It demonstrates how to automatically prefix redirects with the basePath and how to exclude the basePath for external redirects.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/redirects.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  basePath: '/docs',\n\n  async redirects() {\n    return [\n      {\n        source: '/with-basePath', // automatically becomes /docs/with-basePath\n        destination: '/another', // automatically becomes /docs/another\n        permanent: false,\n      },\n      {\n        // does not add /docs since basePath: false is set\n        source: '/without-basePath',\n        destination: 'https://example.com',\n        basePath: false,\n        permanent: false,\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Secure Draft Mode Access in Next.js Route Handler\nDESCRIPTION: This snippet shows how to implement a secure Route Handler for Draft Mode access. It checks for a secret token and slug, enables Draft Mode, and redirects to the appropriate page.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/11-draft-mode.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// route handler with secret and slug\nimport { draftMode } from 'next/headers'\nimport { redirect } from 'next/navigation'\n\nexport async function GET(request: Request) {\n  // Parse query string parameters\n  const { searchParams } = new URL(request.url)\n  const secret = searchParams.get('secret')\n  const slug = searchParams.get('slug')\n\n  // Check the secret and next parameters\n  // This secret should only be known to this route handler and the CMS\n  if (secret !== 'MY_SECRET_TOKEN' || !slug) {\n    return new Response('Invalid token', { status: 401 })\n  }\n\n  // Fetch the headless CMS to check if the provided `slug` exists\n  // getPostBySlug would implement the required fetching logic to the headless CMS\n  const post = await getPostBySlug(slug)\n\n  // If the slug doesn't exist prevent draft mode from being enabled\n  if (!post) {\n    return new Response('Invalid slug', { status: 401 })\n  }\n\n  // Enable Draft Mode by setting the cookie\n  draftMode().enable()\n\n  // Redirect to the path from the fetched post\n  // We don't redirect to searchParams.slug as that might lead to open redirect vulnerabilities\n  redirect(post.slug)\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// route handler with secret and slug\nimport { draftMode } from 'next/headers'\nimport { redirect } from 'next/navigation'\n\nexport async function GET(request) {\n  // Parse query string parameters\n  const { searchParams } = new URL(request.url)\n  const secret = searchParams.get('secret')\n  const slug = searchParams.get('slug')\n\n  // Check the secret and next parameters\n  // This secret should only be known to this route handler and the CMS\n  if (secret !== 'MY_SECRET_TOKEN' || !slug) {\n    return new Response('Invalid token', { status: 401 })\n  }\n\n  // Fetch the headless CMS to check if the provided `slug` exists\n  // getPostBySlug would implement the required fetching logic to the headless CMS\n  const post = await getPostBySlug(slug)\n\n  // If the slug doesn't exist prevent draft mode from being enabled\n  if (!post) {\n    return new Response('Invalid slug', { status: 401 })\n  }\n\n  // Enable Draft Mode by setting the cookie\n  draftMode().enable()\n\n  // Redirect to the path from the fetched post\n  // We don't redirect to searchParams.slug as that might lead to open redirect vulnerabilities\n  redirect(post.slug)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Remote Images with next/image in Next.js\nDESCRIPTION: This snippet demonstrates how to use a remote image with the Next.js Image component. It requires manual specification of width and height attributes for proper aspect ratio and layout shift prevention.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/01-images.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from 'next/image'\n\nexport default function Page() {\n  return (\n    <Image\n      src=\"https://s3.amazonaws.com/my-bucket/profile.png\"\n      alt=\"Picture of the author\"\n      width={500}\n      height={500}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirects in Next.js Route Handler\nDESCRIPTION: Demonstrates how to use the 'redirect' function from next/navigation to perform redirects in a Route Handler.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/12-route-handlers.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { redirect } from 'next/navigation'\n\nexport async function GET(request: Request) {\n  redirect('https://nextjs.org/')\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { redirect } from 'next/navigation'\n\nexport async function GET(request) {\n  redirect('https://nextjs.org/')\n}\n```\n\n----------------------------------------\n\nTITLE: Variable Reference in Next.js Environment Files\nDESCRIPTION: Example of referencing environment variables within other environment variables using $ syntax.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/03-environment-variables.mdx#2025-04-22_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\nTWITTER_USER=nextjs\nTWITTER_URL=https://twitter.com/$TWITTER_USER\n```\n\n----------------------------------------\n\nTITLE: Form Validation with Zod in Next.js API Route\nDESCRIPTION: Implements server-side form validation using the Zod schema validation library in a Next.js API Route.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from 'next'\nimport { z } from 'zod'\n\nconst schema = z.object({\n  // ...\n})\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  const parsed = schema.parse(req.body)\n  // ...\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { z } from 'zod'\n\nconst schema = z.object({\n  // ...\n})\n\nexport default async function handler(req, res) {\n  const parsed = schema.parse(req.body)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Local Fonts in Next.js App Router\nDESCRIPTION: Example showing how to implement local fonts in a Next.js application using the App Router. This snippet demonstrates importing a local font file and applying it to the root layout of the application.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/03-fonts.mdx#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport localFont from 'next/font/local'\n\n// Font files can be colocated inside of `app`\nconst myFont = localFont({\n  src: './my-font.woff2',\n  display: 'swap',\n})\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\" className={myFont.className}>\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport localFont from 'next/font/local'\n\n// Font files can be colocated inside of `app`\nconst myFont = localFont({\n  src: './my-font.woff2',\n  display: 'swap',\n})\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\" className={myFont.className}>\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure for Next.js Rendering\nDESCRIPTION: Markdown documentation defining the title and description metadata for a page about Next.js rendering concepts. Includes sections on rendering environments, request-response lifecycle, and network boundaries.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/03-rendering/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Rendering\ndescription: Learn the differences between Next.js rendering environments, strategies, and runtimes.\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Image Sizes in Next.js\nDESCRIPTION: Example of using the sizes prop to optimize image loading based on viewport breakpoints. Shows how to configure responsive images in a grid layout.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/image.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from 'next/image'\n\nexport default function Page() {\n  return (\n    <div className=\"grid-element\">\n      <Image\n        fill\n        src=\"/example.png\"\n        sizes=\"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw\"\n      />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Revalidating Specific URL Example\nDESCRIPTION: Example showing how to revalidate a specific URL path using revalidatePath.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/revalidatePath.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { revalidatePath } from 'next/cache'\nrevalidatePath('/blog/post-1')\n```\n\n----------------------------------------\n\nTITLE: Handling Redirect Requests in Next.js API Route\nDESCRIPTION: This code snippet demonstrates how to implement an API Route in Next.js for processing redirect requests. It checks a JSON file for redirect entries based on the provided pathname and returns the appropriate redirect information.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/06-redirecting.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextApiRequest, NextApiResponse } from 'next'\nimport redirects from '@/app/redirects/redirects.json'\n\ntype RedirectEntry = {\n  destination: string\n  permanent: boolean\n}\n\nexport default function handler(req: NextApiRequest, res: NextApiResponse) {\n  const pathname = req.query.pathname\n  if (!pathname) {\n    return res.status(400).json({ message: 'Bad Request' })\n  }\n\n  // Get the redirect entry from the redirects.json file\n  const redirect = (redirects as Record<string, RedirectEntry>)[pathname]\n\n  // Account for bloom filter false positives\n  if (!redirect) {\n    return res.status(400).json({ message: 'No redirect' })\n  }\n\n  // Return the redirect entry\n  return res.json(redirect)\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport redirects from '@/app/redirects/redirects.json'\n\nexport default function handler(req, res) {\n  const pathname = req.query.pathname\n  if (!pathname) {\n    return res.status(400).json({ message: 'Bad Request' })\n  }\n\n  // Get the redirect entry from the redirects.json file\n  const redirect = redirects[pathname]\n\n  // Account for bloom filter false positives\n  if (!redirect) {\n    return res.status(400).json({ message: 'No redirect' })\n  }\n\n  // Return the redirect entry\n  return res.json(redirect)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing revalidateTag in a Route Handler (JavaScript)\nDESCRIPTION: JavaScript version of using revalidateTag in a Next.js Route Handler to invalidate cache for a tag specified in the URL search parameters. Returns a JSON response confirming revalidation.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/revalidateTag.mdx#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { revalidateTag } from 'next/cache'\n\nexport async function GET(request) {\n  const tag = request.nextUrl.searchParams.get('tag')\n  revalidateTag(tag)\n  return Response.json({ revalidated: true, now: Date.now() })\n}\n```\n\n----------------------------------------\n\nTITLE: Using usePathname in a Next.js Client Component\nDESCRIPTION: A basic example demonstrating how to use the usePathname hook to read and display the current URL's pathname in a Next.js Client Component.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/use-pathname.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { usePathname } from 'next/navigation'\n\nexport default function ExampleClientComponent() {\n  const pathname = usePathname()\n  return <p>Current pathname: {pathname}</p>\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { usePathname } from 'next/navigation'\n\nexport default function ExampleClientComponent() {\n  const pathname = usePathname()\n  return <p>Current pathname: {pathname}</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Draft Mode in Next.js Route Handler\nDESCRIPTION: This code snippet demonstrates how to create a Route Handler that enables Draft Mode in Next.js. It uses the draftMode function from next/headers to set a cookie for Draft Mode.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/11-draft-mode.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// route handler enabling draft mode\nimport { draftMode } from 'next/headers'\n\nexport async function GET(request: Request) {\n  draftMode().enable()\n  return new Response('Draft mode is enabled')\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// route handler enabling draft mode\nimport { draftMode } from 'next/headers'\n\nexport async function GET(request) {\n  draftMode().enable()\n  return new Response('Draft mode is enabled')\n}\n```\n\n----------------------------------------\n\nTITLE: Handling URL Query Parameters in Next.js Route Handler\nDESCRIPTION: Shows how to access and handle URL query parameters using the NextRequest object in a Route Handler.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/12-route-handlers.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type NextRequest } from 'next/server'\n\nexport function GET(request: NextRequest) {\n  const searchParams = request.nextUrl.searchParams\n  const query = searchParams.get('query')\n  // query is \"hello\" for /api/search?query=hello\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport function GET(request) {\n  const searchParams = request.nextUrl.searchParams\n  const query = searchParams.get('query')\n  // query is \"hello\" for /api/search?query=hello\n}\n```\n\n----------------------------------------\n\nTITLE: revalidateTag Function Signature in Next.js\nDESCRIPTION: The function signature for the revalidateTag function, which takes a single parameter - a tag string associated with the cache data you want to revalidate.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/revalidateTag.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nrevalidateTag(tag: string): void;\n```\n\n----------------------------------------\n\nTITLE: Using permanentRedirect in a Next.js Server Component\nDESCRIPTION: This example demonstrates how to use permanentRedirect in a Next.js server component. It fetches team data and redirects to the login page if the team is not found.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/permanentRedirect.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { permanentRedirect } from 'next/navigation'\n\nasync function fetchTeam(id) {\n  const res = await fetch('https://...')\n  if (!res.ok) return undefined\n  return res.json()\n}\n\nexport default async function Profile({ params }) {\n  const team = await fetchTeam(params.id)\n  if (!team) {\n    permanentRedirect('/login')\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using revalidateTag in a Server Action (JavaScript)\nDESCRIPTION: JavaScript version of using revalidateTag within a Next.js server action to invalidate cache tagged as 'posts' after adding a new post.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/revalidateTag.mdx#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n'use server'\n\nimport { revalidateTag } from 'next/cache'\n\nexport default async function submit() {\n  await addPost()\n  revalidateTag('posts')\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Locale Switcher with JavaScript in Next.js\nDESCRIPTION: A JavaScript version of the LocaleSwitcher component that performs the same locale switching functionality using window.history.replaceState, but without TypeScript type definitions.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/03-linking-and-navigating.mdx#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { usePathname } from 'next/navigation'\n\nexport function LocaleSwitcher() {\n  const pathname = usePathname()\n\n  function switchLocale(locale) {\n    // e.g. '/en/about' or '/fr/contact'\n    const newPath = `/${locale}${pathname}`\n    window.history.replaceState(null, '', newPath)\n  }\n\n  return (\n    <>\n      <button onClick={() => switchLocale('en')}>English</button>\n      <button onClick={() => switchLocale('fr')}>French</button>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Parallel Routes in Next.js Layout\nDESCRIPTION: This code snippet demonstrates how to render parallel routes using slots in a Next.js layout component. It shows how to accept and render multiple slot props alongside the children prop.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/10-parallel-routes.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Layout({\n  children,\n  team,\n  analytics,\n}: {\n  children: React.ReactNode\n  analytics: React.ReactNode\n  team: React.ReactNode\n}) {\n  return (\n    <>\n      {children}\n      {team}\n      {analytics}\n    </>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Layout({ children, team, analytics }) {\n  return (\n    <>\n      {children}\n      {team}\n      {analytics}\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting Draft Mode in Next.js Server Component\nDESCRIPTION: This code snippet demonstrates how to use the draftMode function from 'next/headers' to check if Draft Mode is enabled within a Server Component. It renders a page with a heading and a message indicating the current state of Draft Mode.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/draft-mode.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { draftMode } from 'next/headers'\n\nexport default function Page() {\n  const { isEnabled } = draftMode()\n  return (\n    <main>\n      <h1>My Blog Post</h1>\n      <p>Draft Mode is currently {isEnabled ? 'Enabled' : 'Disabled'}</p>\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring basePath in Next.js Config\nDESCRIPTION: Shows how to set up basePath configuration in next.config.js to deploy the application under a sub-path.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/basePath.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  basePath: '/docs',\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing getStaticPaths and getStaticProps in JavaScript\nDESCRIPTION: This snippet shows how to implement getStaticPaths and getStaticProps for a dynamic route in Next.js using JavaScript. It includes fetching data from an API and rendering the page component.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/03-data-fetching/02-get-static-paths.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function getStaticPaths() {\n  return {\n    paths: [\n      {\n        params: {\n          name: 'next.js',\n        },\n      }, // See the \"paths\" section below\n    ],\n    fallback: true, // false or \"blocking\"\n  }\n}\n\nexport async function getStaticProps() {\n  const res = await fetch('https://api.github.com/repos/vercel/next.js')\n  const repo = await res.json()\n  return { props: { repo } }\n}\n\nexport default function Page({ repo }) {\n  return repo.stargazers_count\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Viewport with Static Object in JavaScript\nDESCRIPTION: Example of exporting a static viewport object from a layout or page component in JavaScript to define viewport options like theme color.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-viewport.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const viewport = {\n  themeColor: 'black',\n}\n\nexport default function Page() {}\n```\n\n----------------------------------------\n\nTITLE: Setting Cookie-Based Session in Next.js API Route\nDESCRIPTION: This code snippet shows how to set a cookie-based session in a Next.js API route. It encrypts session data, creates a cookie with security options, and sets it in the response header.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/09-authentication/index.mdx#2025-04-22_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nimport { serialize } from 'cookie'\nimport type { NextApiRequest, NextApiResponse } from 'next'\n\nexport default function handler(req: NextApiRequest, res: NextApiResponse) {\n  const sessionData = req.body\n  const encryptedSessionData = encrypt(sessionData)\n\n  const cookie = serialize('session', encryptedSessionData, {\n    httpOnly: true,\n    secure: process.env.NODE_ENV === 'production',\n    maxAge: 60 * 60 * 24 * 7, // One week\n    path: '/',\n  })\n  res.setHeader('Set-Cookie', cookie)\n  res.status(200).json({ message: 'Successfully set cookie!' })\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nimport { serialize } from 'cookie'\n\nexport default function handler(req, res) {\n  const sessionData = req.body\n  const encryptedSessionData = encrypt(sessionData)\n\n  const cookie = serialize('session', encryptedSessionData, {\n    httpOnly: true,\n    secure: process.env.NODE_ENV === 'production',\n    maxAge: 60 * 60 * 24 * 7, // One week\n    path: '/',\n  })\n  res.setHeader('Set-Cookie', cookie)\n  res.status(200).json({ message: 'Successfully set cookie!' })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Fill Container Image Grid with Next.js Image Component\nDESCRIPTION: This example shows how to use the Next.js Image component to create a grid of images that fill their parent containers. It uses the 'fill' prop along with CSS grid for layout and 'objectFit' for image scaling.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/01-images.mdx#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from 'next/image'\nimport mountains from '../public/mountains.jpg'\n\nexport default function Fill() {\n  return (\n    <div\n      style={{\n        display: 'grid',\n        gridGap: '8px',\n        gridTemplateColumns: 'repeat(auto-fit, minmax(400px, auto))',\n      }}\n    >\n      <div style={{ position: 'relative', height: '400px' }}>\n        <Image\n          alt=\"Mountains\"\n          src={mountains}\n          fill\n          sizes=\"(min-width: 808px) 50vw, 100vw\"\n          style={{\n            objectFit: 'cover', // cover, contain, none\n          }}\n        />\n      </div>\n      {/* And more images in the grid... */}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Web Vitals to Analytics\nDESCRIPTION: Implementation showing how to send Web Vitals data to an external analytics endpoint using navigator.sendBeacon or fetch API.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/use-report-web-vitals.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nuseReportWebVitals((metric) => {\n  const body = JSON.stringify(metric)\n  const url = 'https://example.com/analytics'\n\n  // Use `navigator.sendBeacon()` if available, falling back to `fetch()`.\n  if (navigator.sendBeacon) {\n    navigator.sendBeacon(url, body)\n  } else {\n    fetch(url, { body, method: 'POST', keepalive: true })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Testing a Component Render with React Testing Library (App Router)\nDESCRIPTION: A Jest test for the Page component that verifies a level 1 heading is rendered correctly. Uses React Testing Library to render the component and query the DOM.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/08-testing/02-jest.mdx#2025-04-22_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport '@testing-library/jest-dom'\nimport { render, screen } from '@testing-library/react'\nimport Page from '../app/page'\n\ndescribe('Page', () => {\n  it('renders a heading', () => {\n    render(<Page />)\n\n    const heading = screen.getByRole('heading', { level: 1 })\n\n    expect(heading).toBeInTheDocument()\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Generating RSS Feed using Route Handler in Next.js (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to create a Route Handler that generates an RSS feed in XML format using JavaScript. It uses dynamic rendering and returns the XML content as a Response.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/12-route-handlers.mdx#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nexport const dynamic = 'force-dynamic' // defaults to auto\n\nexport async function GET() {\n  return new Response(`<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<rss version=\"2.0\">\n\n<channel>\n  <title>Next.js Documentation</title>\n  <link>https://nextjs.org/docs</link>\n  <description>The React Framework for the Web</description>\n</channel>\n\n</rss>`)\n}\n```\n\n----------------------------------------\n\nTITLE: Transitioning Between Locales Using next/router in Next.js\nDESCRIPTION: Shows how to use the useRouter hook from next/router to programmatically transition between locales in a Next.js application. The locale is specified in the transition options.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/01-routing/10-internationalization.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useRouter } from 'next/router'\n\nexport default function IndexPage(props) {\n  const router = useRouter()\n\n  return (\n    <div\n      onClick={() => {\n        router.push('/another', '/another', { locale: 'fr' })\n      }}\n    >\n      to /fr/another\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Scripts in Next.js Root Layout\nDESCRIPTION: Example showing how to load a third-party script for all routes by importing the Script component and including it in the root layout. The script will only load once, even when navigating between multiple pages.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/05-scripts.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport Script from 'next/script'\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n      <Script src=\"https://example.com/script.js\" />\n    </html>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport Script from 'next/script'\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n      <Script src=\"https://example.com/script.js\" />\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Styles in Next.js App Router\nDESCRIPTION: Example of creating and importing global CSS styles in the app router. Shows how to apply styles to every route in the application by importing the CSS file in the root layout.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/05-styling/01-css-modules.mdx#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\nbody {\n  padding: 20px 20px 60px;\n  max-width: 680px;\n  margin: 0 auto;\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// These styles apply to every route in the application\nimport './global.css'\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// These styles apply to every route in the application\nimport './global.css'\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Global Styles in Pages Router\nDESCRIPTION: Example of implementing global styles in the pages router by importing a CSS file in the _app.js file, which applies the styles to all pages and components in the application.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/05-styling/01-css-modules.mdx#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\nbody {\n  font-family: 'SF Pro Text', 'SF Pro Icons', 'Helvetica Neue', 'Helvetica',\n    'Arial', sans-serif;\n  padding: 20px 20px 60px;\n  max-width: 680px;\n  margin: 0 auto;\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport '../styles.css'\n\n// This default export is required in a new `pages/_app.js` file.\nexport default function MyApp({ Component, pageProps }) {\n  return <Component {...pageProps} />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Routes with Parallel Routes in Next.js\nDESCRIPTION: This code example shows how to use parallel routes to conditionally render different dashboard pages based on user roles. It demonstrates checking the user role and rendering the appropriate content.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/10-parallel-routes.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { checkUserRole } from '@/lib/auth'\n\nexport default function Layout({\n  user,\n  admin,\n}: {\n  user: React.ReactNode\n  admin: React.ReactNode\n}) {\n  const role = checkUserRole()\n  return <>{role === 'admin' ? admin : user}</>\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { checkUserRole } from '@/lib/auth'\n\nexport default function Layout({ user, admin }) {\n  const role = checkUserRole()\n  return <>{role === 'admin' ? admin : user}</>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenGraph Metadata in Next.js\nDESCRIPTION: This snippet demonstrates how to set OpenGraph metadata for a Next.js page or layout, including title, description, URL, site name, images, locale, and type.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-metadata.mdx#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  openGraph: {\n    title: 'Next.js',\n    description: 'The React Framework for the Web',\n    url: 'https://nextjs.org',\n    siteName: 'Next.js',\n    images: [\n      {\n        url: 'https://nextjs.org/og.png', // Must be an absolute URL\n        width: 800,\n        height: 600,\n      },\n      {\n        url: 'https://nextjs.org/og-alt.png', // Must be an absolute URL\n        width: 1800,\n        height: 1600,\n        alt: 'My custom alt',\n      },\n    ],\n    locale: 'en_US',\n    type: 'website',\n  },\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<meta property=\"og:title\" content=\"Next.js\" />\n<meta property=\"og:description\" content=\"The React Framework for the Web\" />\n<meta property=\"og:url\" content=\"https://nextjs.org/\" />\n<meta property=\"og:site_name\" content=\"Next.js\" />\n<meta property=\"og:locale\" content=\"en_US\" />\n<meta property=\"og:image:url\" content=\"https://nextjs.org/og.png\" />\n<meta property=\"og:image:width\" content=\"800\" />\n<meta property=\"og:image:height\" content=\"600\" />\n<meta property=\"og:image:url\" content=\"https://nextjs.org/og-alt.png\" />\n<meta property=\"og:image:width\" content=\"1800\" />\n<meta property=\"og:image:height\" content=\"1600\" />\n<meta property=\"og:image:alt\" content=\"My custom alt\" />\n<meta property=\"og:type\" content=\"website\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing revalidateTag in a Route Handler (TypeScript)\nDESCRIPTION: Example of using revalidateTag in a Next.js Route Handler to invalidate cache for a tag specified in the URL search parameters. Returns a JSON response confirming revalidation.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/revalidateTag.mdx#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { NextRequest } from 'next/server'\nimport { revalidateTag } from 'next/cache'\n\nexport async function GET(request: NextRequest) {\n  const tag = request.nextUrl.searchParams.get('tag')\n  revalidateTag(tag)\n  return Response.json({ revalidated: true, now: Date.now() })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing getStaticProps with JavaScript\nDESCRIPTION: JavaScript implementation of getStaticProps that fetches repository data from GitHub API and passes it as props to the page component. This shows the simpler syntax when not using TypeScript.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/02-functions/get-static-props.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function getStaticProps() {\n  const res = await fetch('https://api.github.com/repos/vercel/next.js')\n  const repo = await res.json()\n  return { props: { repo } }\n}\n\nexport default function Page({ repo }) {\n  return repo.stargazers_count\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js Configuration in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a basic next.config.js file using JavaScript. It exports a configuration object that can be used to customize Next.js behavior.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// @ts-check\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  /* config options here */\n}\n\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: AWS CloudFront Image Loader Implementation\nDESCRIPTION: Custom image loader implementation for AWS CloudFront with image optimization settings\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/images.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function cloudfrontLoader({ src, width, quality }) {\n  const url = new URL(`https://example.com${src}`)\n  url.searchParams.set('format', 'auto')\n  url.searchParams.set('width', width.toString())\n  url.searchParams.set('quality', (quality || 75).toString())\n  return url.href\n```\n\n----------------------------------------\n\nTITLE: Revalidating Data with revalidateTag in Next.js (JavaScript)\nDESCRIPTION: This snippet shows how to use the revalidateTag API to invalidate a specific data fetch with a cache tag in a Server Action using JavaScript. It demonstrates revalidating the 'posts' tag after creating a new post.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/02-server-actions-and-mutations.mdx#2025-04-22_snippet_30\n\nLANGUAGE: js\nCODE:\n```\n'use server'\n\nimport { revalidateTag } from 'next/cache'\n\nexport async function createPost() {\n  try {\n    // ...\n  } catch (error) {\n    // ...\n  }\n\n  revalidateTag('posts')\n}\n```\n\n----------------------------------------\n\nTITLE: Streaming Video Component with React Suspense in Next.js\nDESCRIPTION: This example shows how to use React Suspense to stream a video component in a Next.js page, providing a fallback UI while the video is loading.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/02-videos.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Suspense } from 'react'\nimport VideoComponent from '../ui/VideoComponent.jsx'\n\nexport default function Page() {\n  return (\n    <section>\n      <Suspense fallback={<p>Loading video...</p>}>\n        <VideoComponent />\n      </Suspense>\n      {/* Other content of the page */}\n    </section>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Transitioning Between Locales Using next/link in Next.js\nDESCRIPTION: Demonstrates how to use the Link component from next/link to transition between different locales in a Next.js application. The locale prop is used to specify the target locale.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/01-routing/10-internationalization.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function IndexPage(props) {\n  return (\n    <Link href=\"/another\" locale=\"fr\">\n      To /fr/another\n    </Link>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata in Next.js App Router with TypeScript\nDESCRIPTION: Demonstrates how to add SEO metadata to the root layout using Next.js built-in metadata API in TypeScript. This replaces the need for next/head in the pages directory.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/02-app-router-migration.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: 'Home',\n  description: 'Welcome to Next.js',\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom 500 Page in Next.js\nDESCRIPTION: This snippet shows how to create a custom 500 error page by defining a 'pages/500.js' file. Like the 404 page, it is statically generated at build time and can use getStaticProps for data fetching if necessary.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/01-routing/08-custom-error.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Custom500() {\n  return <h1>500 - Server-side error occurred</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of unstable_noStore in Next.js\nDESCRIPTION: Demonstrates how to import and use the unstable_noStore function to opt out of static rendering for a component. This allows the component to fetch fresh data on each request rather than being cached.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/unstable_noStore.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { unstable_noStore as noStore } from 'next/cache';\n\nexport default async function Component() {\n  noStore();\n  const result = await db.query(...);\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ImageResponse Constructor in Next.js\nDESCRIPTION: Shows how to use the ImageResponse constructor to generate dynamic images with JSX and CSS. The constructor takes a React element and optional configuration parameters such as dimensions, emoji type, fonts, debug mode, and HTTP response options.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/image-response.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ImageResponse } from 'next/og'\n\nnew ImageResponse(\n  element: ReactElement,\n  options: {\n    width?: number = 1200\n    height?: number = 630\n    emoji?: 'twemoji' | 'blobmoji' | 'noto' | 'openmoji' = 'twemoji',\n    fonts?: {\n      name: string,\n      data: ArrayBuffer,\n      weight: number,\n      style: 'normal' | 'italic'\n    }[]\n    debug?: boolean = false\n\n    // Options that will be passed to the HTTP response\n    status?: number = 200\n    statusText?: string\n    headers?: Record<string, string>\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring fetchCache in Next.js Pages and Layouts\nDESCRIPTION: The fetchCache option allows overriding the default cache behavior of fetch requests in a layout or page. It accepts various string values to control caching behavior.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/route-segment-config.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nexport const fetchCache = 'auto'\n// 'auto' | 'default-cache' | 'only-cache'\n// 'force-cache' | 'force-no-store' | 'default-no-store' | 'only-no-store'\n```\n\nLANGUAGE: js\nCODE:\n```\nexport const fetchCache = 'auto'\n// 'auto' | 'default-cache' | 'only-cache'\n// 'force-cache' | 'force-no-store' | 'default-no-store' | 'only-no-store'\n```\n\n----------------------------------------\n\nTITLE: Creating Styled Components Registry in TypeScript\nDESCRIPTION: Implements a StyledComponentsRegistry component in TypeScript to collect and inject CSS styles generated by styled-components. It uses useServerInsertedHTML hook for server-side rendering.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/05-styling/03-css-in-js.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport React, { useState } from 'react'\nimport { useServerInsertedHTML } from 'next/navigation'\nimport { ServerStyleSheet, StyleSheetManager } from 'styled-components'\n\nexport default function StyledComponentsRegistry({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  // Only create stylesheet once with lazy initial state\n  // x-ref: https://reactjs.org/docs/hooks-reference.html#lazy-initial-state\n  const [styledComponentsStyleSheet] = useState(() => new ServerStyleSheet())\n\n  useServerInsertedHTML(() => {\n    const styles = styledComponentsStyleSheet.getStyleElement()\n    styledComponentsStyleSheet.instance.clearTag()\n    return <>{styles}</>\n  })\n\n  if (typeof window !== 'undefined') return <>{children}</>\n\n  return (\n    <StyleSheetManager sheet={styledComponentsStyleSheet.instance}>\n      {children}\n    </StyleSheetManager>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind Classes in App Router Page (TypeScript)\nDESCRIPTION: Example of using Tailwind CSS utility classes in a Next.js page component with the App Router and TypeScript.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/05-styling/02-tailwind-css.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Page() {\n  return <h1 className=\"text-3xl font-bold underline\">Hello, Next.js!</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind Classes in App Router Page (JavaScript)\nDESCRIPTION: Example of using Tailwind CSS utility classes in a Next.js page component with the App Router and JavaScript.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/05-styling/02-tailwind-css.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Page() {\n  return <h1 className=\"text-3xl font-bold underline\">Hello, Next.js!</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Script Workers in next.config.js\nDESCRIPTION: Configuration for enabling the experimental 'worker' strategy for scripts in Next.js. This allows scripts to be offloaded and executed in a web worker using Partytown, improving performance by freeing the main thread.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/05-scripts.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  experimental: {\n    nextScriptWorkers: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Dynamic Route Parameters in Route Handlers (JavaScript)\nDESCRIPTION: This snippet shows how to access dynamic route parameters in a Next.js route handler using JavaScript. It demonstrates how to extract the 'team' parameter from the context object passed to the GET function.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/route.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function GET(request, context: { params }) {\n  const team = context.params.team // '1'\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Revalidation Period for fetch in Next.js\nDESCRIPTION: This example demonstrates how to set a revalidation period for a fetch request using the next.revalidate option, which will revalidate both the Data Cache and Full Route Cache after the specified period.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/04-caching/index.mdx#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n// Revalidate at most after 1 hour\nfetch(`https://...`, { next: { revalidate: 3600 } })\n```\n\n----------------------------------------\n\nTITLE: Updating TypeScript Configuration for Next.js\nDESCRIPTION: Example of a tsconfig.json file with necessary changes to make it compatible with Next.js, including compiler options and file inclusions/exclusions.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/04-from-vite.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"useDefineForClassFields\": true,\n    \"lib\": [\"ES2020\", \"DOM\", \"DOM.Iterable\"],\n    \"module\": \"ESNext\",\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"noEmit\": true,\n    \"jsx\": \"preserve\",\n    \"strict\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"allowJs\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"incremental\": true,\n    \"plugins\": [{ \"name\": \"next\" }]\n  },\n  \"include\": [\"./src\", \"./dist/types/**/*.ts\", \"./next-env.d.ts\"],\n  \"exclude\": [\"./node_modules\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Sharing Server-Side Code in Next.js with getStaticProps\nDESCRIPTION: This example shows how to share server-side code between getStaticProps and API routes by using a shared function in a lib/ directory. It demonstrates efficient data fetching without unnecessary API calls.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/03-data-fetching/01-get-static-props.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// The following function is shared\n// with getStaticProps and API routes\n// from a `lib/` directory\nexport async function loadPosts() {\n  // Call an external API endpoint to get posts\n  const res = await fetch('https://.../posts/')\n  const data = await res.json()\n\n  return data\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/blog.js\nimport { loadPosts } from '../lib/load-posts'\n\n// This function runs only on the server side\nexport async function getStaticProps() {\n  // Instead of fetching your `/api` route you can call the same\n  // function directly in `getStaticProps`\n  const posts = await loadPosts()\n\n  // Props returned will be passed to the page component\n  return { props: { posts } }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Inter Variable Font with App Router\nDESCRIPTION: Example showing how to import and apply the Inter variable font globally in a Next.js app using the App Router layout component. The font is configured with Latin subset and swap display.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/03-fonts.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inter } from 'next/font/google'\n\n// If loading a variable font, you don't need to specify the font weight\nconst inter = Inter({\n  subsets: ['latin'],\n  display: 'swap',\n})\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\" className={inter.className}>\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Inter } from 'next/font/google'\n\n// If loading a variable font, you don't need to specify the font weight\nconst inter = Inter({\n  subsets: ['latin'],\n  display: 'swap',\n})\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\" className={inter.className}>\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Geo Information with NextRequest\nDESCRIPTION: Example of accessing geographic information and implementing self-hosted geo lookup\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/next-request.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Provided by Vercel\nrequest.geo.city\nrequest.geo.country\nrequest.geo.region\nrequest.geo.latitude\nrequest.geo.longitude\n\n// Self-hosting\nfunction getGeo(request) {\n  let ip = request.headers.get('X-Forwarded-For')\n  // Use a third-party service to lookup the geographic information\n}\n```\n\n----------------------------------------\n\nTITLE: Using fetch with Default Caching in Next.js\nDESCRIPTION: This snippet demonstrates the default caching behavior of fetch in Next.js, which automatically caches data in the Data Cache using 'force-cache' option.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/04-caching/index.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n// Cached by default. `force-cache` is the default option and can be omitted.\nfetch(`https://...`, { cache: 'force-cache' })\n```\n\n----------------------------------------\n\nTITLE: Using useParams in a Next.js Client Component (JavaScript)\nDESCRIPTION: This example shows how to use the useParams hook in a Client Component with JavaScript. It retrieves the same dynamic route parameters as the TypeScript example but without type annotations.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/use-params.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nimport { useParams } from 'next/navigation'\n\nexport default function ExampleClientComponent() {\n  const params = useParams()\n\n  // Route -> /shop/[tag]/[item]\n  // URL -> /shop/shoes/nike-air-max-97\n  // `params` -> { tag: 'shoes', item: 'nike-air-max-97' }\n  console.log(params)\n\n  return <></>\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Request Memoization in Next.js\nDESCRIPTION: This example shows how the `fetch` function is automatically memoized in Next.js. When the same data fetching function is called multiple times in a single render pass, the actual network request is only executed once, and subsequent calls retrieve the result from memory.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/04-caching/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync function getItem() {\n  // The `fetch` function is automatically memoized and the result\n  // is cached\n  const res = await fetch('https://.../item/1')\n  return res.json()\n}\n\n// This function is called twice, but only executed the first time\nconst item = await getItem() // cache MISS\n\n// The second call could be anywhere in your route\nconst item = await getItem() // cache HIT\n```\n\nLANGUAGE: javascript\nCODE:\n```\nasync function getItem() {\n  // The `fetch` function is automatically memoized and the result\n  // is cached\n  const res = await fetch('https://.../item/1')\n  return res.json()\n}\n\n// This function is called twice, but only executed the first time\nconst item = await getItem() // cache MISS\n\n// The second call could be anywhere in your route\nconst item = await getItem() // cache HIT\n```\n\n----------------------------------------\n\nTITLE: Unstable Cache Function Signature in Next.js\nDESCRIPTION: Code example showing the function signature and basic usage pattern of unstable_cache, including the fetchData function, keyParts array, and options object parameters.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/unstable_cache.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst data = unstable_cache(fetchData, keyParts, options)()\n```\n\n----------------------------------------\n\nTITLE: Using Server Component as Child of Client Component in TypeScript\nDESCRIPTION: This code snippet shows how to use a Server Component as a child of a Client Component in a Next.js page written in TypeScript. It demonstrates the pattern of passing Server Components to Client Components, allowing them to render independently.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n// This pattern works:\n// You can pass a Server Component as a child or prop of a\n// Client Component.\nimport ClientComponent from './client-component'\nimport ServerComponent from './server-component'\n\n// Pages in Next.js are Server Components by default\nexport default function Page() {\n  return (\n    <ClientComponent>\n      <ServerComponent />\n    </ClientComponent>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Time-based Revalidation in Next.js\nDESCRIPTION: This snippet demonstrates how to set up time-based revalidation for a fetch request in Next.js. It sets the cache lifetime of a resource to 3600 seconds (1 hour) using the next.revalidate option.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/04-caching/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Revalidate at most every hour\nfetch('https://...', { next: { revalidate: 3600 } })\n```\n\n----------------------------------------\n\nTITLE: Linking to Dynamic Routes in Next.js (JSX)\nDESCRIPTION: Demonstrates how to generate links to dynamic routes using template literals in a Next.js application.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/link.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\nfunction Page({ posts }) {\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>\n          <Link href={`/blog/${post.slug}`}>{post.title}</Link>\n        </li>\n      ))}\n    </ul>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Route Page Component with TypeScript\nDESCRIPTION: Basic implementation of a dynamic route page component that displays a blog post slug from params. Shows TypeScript type definition for params object.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/09-dynamic-routes.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function Page({ params }: { params: { slug: string } }) {\n  return <div>My Post: {params.slug}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Tag Manager in Next.js App Router\nDESCRIPTION: Example of how to include Google Tag Manager in a Next.js application using the App Router. The GoogleTagManager component is added to the root layout file.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/12-third-party-libraries.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GoogleTagManager } from '@next/third-parties/google'\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <GoogleTagManager gtmId=\"GTM-XYZ\" />\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Static Metadata Configuration in Next.js\nDESCRIPTION: Example of defining static metadata by exporting a Metadata object from layout or page files. Shows implementation in both TypeScript and JavaScript.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/04-metadata.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: '...',\n  description: '...',\n}\n\nexport default function Page() {}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  title: '...',\n  description: '...',\n}\n\nexport default function Page() {}\n```\n\n----------------------------------------\n\nTITLE: Using Preload Pattern in Next.js Page Component (JavaScript)\nDESCRIPTION: This snippet shows the JavaScript version of using the preload pattern in a Next.js page component. It preloads item data and performs an additional asynchronous task before rendering.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/03-patterns.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport Item, { preload, checkIsAvailable } from '@/components/Item'\n\nexport default async function Page({ params: { id } }) {\n  // starting loading item data\n  preload(id)\n  // perform another asynchronous task\n  const isAvailable = await checkIsAvailable()\n\n  return isAvailable ? <Item id={id} /> : null\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Database Session in Next.js API Route\nDESCRIPTION: This snippet demonstrates how to create a database session in a Next.js API route. It generates a session ID, inserts session data into a database, and returns the session ID to the client.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/09-authentication/index.mdx#2025-04-22_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nimport db from '../../lib/db'\nimport { NextApiRequest, NextApiResponse } from 'next'\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  try {\n    const user = req.body\n    const sessionId = generateSessionId()\n    await db.insertSession({\n      sessionId,\n      userId: user.id,\n      createdAt: new Date(),\n    })\n\n    res.status(200).json({ sessionId })\n  } catch (error) {\n    res.status(500).json({ error: 'Internal Server Error' })\n  }\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nimport db from '../../lib/db'\n\nexport default async function handler(req, res) {\n  try {\n    const user = req.body\n    const sessionId = generateSessionId()\n    await db.insertSession({\n      sessionId,\n      userId: user.id,\n      createdAt: new Date(),\n    })\n\n    res.status(200).json({ sessionId })\n  } catch (error) {\n    res.status(500).json({ error: 'Internal Server Error' })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Server Component Layout in Next.js App Router\nDESCRIPTION: Demonstrates how to create a server component layout that wraps a client component layout. This pattern allows for efficient rendering by keeping interactive components client-side while allowing server rendering for the rest.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/02-app-router-migration.mdx#2025-04-22_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport DashboardLayout from './DashboardLayout'\n\n// This is a Server Component\nexport default function Layout({ children }) {\n  return <DashboardLayout>{children}</DashboardLayout>\n}\n```\n\n----------------------------------------\n\nTITLE: Using Optimized Images in Next.js Static Export\nDESCRIPTION: This example shows how to use the next/image component with a custom image loader in a Next.js static export. It demonstrates rendering an optimized image from Cloudinary.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/10-deploying/02-static-exports.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport Image from 'next/image'\n\nexport default function Page() {\n  return <Image alt=\"turtles\" src=\"/turtles.jpg\" width={300} height={300} />\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Runtime Config in Next.js Components\nDESCRIPTION: Shows how to access runtime configuration values in a Next.js component using next/config. Demonstrates usage of both server-side and public configuration values with an Image component example.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/03-next-config-js/runtime-configuration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport getConfig from 'next/config'\nimport Image from 'next/image'\n\n// Only holds serverRuntimeConfig and publicRuntimeConfig\nconst { serverRuntimeConfig, publicRuntimeConfig } = getConfig()\n// Will only be available on the server-side\nconsole.log(serverRuntimeConfig.mySecret)\n// Will be available on both server-side and client-side\nconsole.log(publicRuntimeConfig.staticFolder)\n\nfunction MyImage() {\n  return (\n    <div>\n      <Image\n        src={`${publicRuntimeConfig.staticFolder}/logo.png`}\n        alt=\"logo\"\n        layout=\"fill\"\n      />\n    </div>\n  )\n}\n\nexport default MyImage\n```\n\n----------------------------------------\n\nTITLE: Implementing Middleware in Next.js (JavaScript)\nDESCRIPTION: This snippet shows the JavaScript version of implementing middleware in Next.js. It includes the same redirect functionality and matcher configuration as the TypeScript version.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/13-middleware.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NextResponse } from 'next/server'\n\n// This function can be marked `async` if using `await` inside\nexport function middleware(request) {\n  return NextResponse.redirect(new URL('/home', request.url))\n}\n\n// See \"Matching Paths\" below to learn more\nexport const config = {\n  matcher: '/about/:path*',\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Streaming with Suspense in JavaScript\nDESCRIPTION: Example showing how to implement streaming content using React Suspense in a Next.js JavaScript application. Demonstrates wrapping components with Suspense boundaries for progressive loading.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/04-loading-ui-and-streaming.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Suspense } from 'react'\nimport { PostFeed, Weather } from './Components'\n\nexport default function Posts() {\n  return (\n    <section>\n      <Suspense fallback={<p>Loading feed...</p>}>\n        <PostFeed />\n      </Suspense>\n      <Suspense fallback={<p>Loading weather...</p>}>\n        <Weather />\n      </Suspense>\n    </section>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Installation of Next.js Dependencies\nDESCRIPTION: Command to manually install the required packages for a Next.js project, including next, react, and react-dom.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/01-getting-started/01-installation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install next@latest react@latest react-dom@latest\n```\n\n----------------------------------------\n\nTITLE: Getting All Cookies with NextResponse in TypeScript\nDESCRIPTION: Illustrates how to retrieve all cookies or multiple cookies with the same name using the NextResponse.next() method and the cookies.getAll() function.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/next-response.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Given incoming request /home\nlet response = NextResponse.next()\n// [\n//   { name: 'experiments', value: 'new-pricing-page', Path: '/home' },\n//   { name: 'experiments', value: 'winter-launch', Path: '/home' },\n// ]\nresponse.cookies.getAll('experiments')\n// Alternatively, get all cookies for the response\nresponse.cookies.getAll()\n```\n\n----------------------------------------\n\nTITLE: Using redirect Function in Next.js (TypeScript)\nDESCRIPTION: Demonstrates how to use the redirect function for server-side redirection in a Server Component of a Next.js application.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/03-linking-and-navigating.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { redirect } from 'next/navigation'\n\nasync function fetchTeam(id: string) {\n  const res = await fetch('https://...')\n  if (!res.ok) return undefined\n  return res.json()\n}\n\nexport default async function Profile({ params }: { params: { id: string } }) {\n  const team = await fetchTeam(params.id)\n  if (!team) {\n    redirect('/login')\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Cookies with NextRequest\nDESCRIPTION: Example of deleting a cookie using the cookies.delete() method\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/next-request.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Returns true for deleted, false is nothing is deleted\nrequest.cookies.delete('experiments')\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Cookies in Next.js Server Component\nDESCRIPTION: Shows how to use the cookies().getAll() method to retrieve all available cookies and render them in a Next.js Server Component.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/cookies.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { cookies } from 'next/headers'\n\nexport default function Page() {\n  const cookieStore = cookies()\n  return cookieStore.getAll().map((cookie) => (\n    <div key={cookie.name}>\n      <p>Name: {cookie.name}</p>\n      <p>Value: {cookie.value}</p>\n    </div>\n  ))\n}\n```\n\n----------------------------------------\n\nTITLE: Type Checking Next.js Configuration with JSDoc\nDESCRIPTION: Example of adding type checking to next.config.js using JSDoc annotations to enable IDE type support without requiring TypeScript compilation.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/01-typescript.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// @ts-check\n\n/**\n * @type {import('next').NextConfig}\n **/\nconst nextConfig = {\n  /* config options here */\n}\n\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: Strict ESLint Configuration for Next.js\nDESCRIPTION: The recommended strict configuration that includes Next.js base ESLint config along with stricter Core Web Vitals rules.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/02-eslint.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"next/core-web-vitals\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js with Custom Base Path\nDESCRIPTION: This snippet demonstrates how to configure Next.js with a custom base path using the 'next.config.mjs' file. It sets up output as a Single-Page Application, changes the build output directory, and sets the base path.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/04-from-vite.mdx#2025-04-22_snippet_15\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  output: 'export', // Outputs a Single-Page Application (SPA).\n  distDir: './dist', // Changes the build output directory to `./dist/`.\n  basePath: process.env.NEXT_PUBLIC_BASE_PATH, // Sets the base path to `/some-base-path`.\n}\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Simplified Error Recovery Component in Next.js (JavaScript)\nDESCRIPTION: A simplified JavaScript error component demonstrating the basic implementation of error recovery functionality using the reset function to attempt re-rendering the failed segment.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/05-error-handling.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nexport default function Error({ error, reset }) {\n  return (\n    <div>\n      <h2>Something went wrong!</h2>\n      <button onClick={() => reset()}>Try again</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Root Layout with Styled Components Registry in TypeScript\nDESCRIPTION: Demonstrates how to wrap the children of the root layout with the StyledComponentsRegistry component in a TypeScript Next.js application.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/05-styling/03-css-in-js.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport StyledComponentsRegistry from './lib/registry'\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html>\n      <body>\n        <StyledComponentsRegistry>{children}</StyledComponentsRegistry>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitLab CI for Next.js Build Caching\nDESCRIPTION: GitLab CI configuration that caches Next.js build files between pipeline runs. This should be added to your .gitlab-ci.yml file to persist node_modules and the Next.js cache directory.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/09-deploying/04-ci-build-caching.mdx#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncache:\n  key: ${CI_COMMIT_REF_SLUG}\n  paths:\n    - node_modules/\n    - .next/cache/\n```\n\n----------------------------------------\n\nTITLE: Styling Images with Custom CSS in Next.js\nDESCRIPTION: Demonstrates how to apply custom CSS styles to Next.js Image component using the style prop\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/image.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst imageStyle = {\n  borderRadius: '50%',\n  border: '1px solid #fff',\n}\n\nexport default function ProfileImage() {\n  return <Image src=\"...\" style={imageStyle} />\n}\n```\n\n----------------------------------------\n\nTITLE: Using Styled-JSX in React Component\nDESCRIPTION: Shows how to use styled-jsx, a CSS-in-JS solution bundled with Next.js, to create scoped and global styles within a React component.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/05-styling/03-css-in-js.mdx#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nfunction HelloWorld() {\n  return (\n    <div>\n      Hello world\n      <p>scoped!</p>\n      <style jsx>{`\n        p {\n          color: blue;\n        }\n        div {\n          background: red;\n        }\n        @media (max-width: 600px) {\n          div {\n            background: blue;\n          }\n        }\n      `}</style>\n      <style global jsx>{`\n        body {\n          background: black;\n        }\n      `}</style>\n    </div>\n  )\n}\n\nexport default HelloWorld\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Analytics in Next.js App Router\nDESCRIPTION: Example of how to include Google Analytics in a Next.js application using the App Router. The GoogleAnalytics component is added to the root layout file.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/12-third-party-libraries.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GoogleAnalytics } from '@next/third-parties/google'\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n      <GoogleAnalytics gaId=\"G-XYZ\" />\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Headers with Data Fetching in Next.js\nDESCRIPTION: Shows how to use the headers function in combination with Suspense for Data Fetching. It retrieves the 'authorization' header and forwards it to a fetch request.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/headers.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Suspense } from 'react'\nimport { headers } from 'next/headers'\n\nasync function User() {\n  const authorization = headers().get('authorization')\n  const res = await fetch('...', {\n    headers: { authorization }, // Forward the authorization header\n  })\n  const user = await res.json()\n\n  return <h1>{user.name}</h1>\n}\n\nexport default function Page() {\n  return (\n    <Suspense fallback={null}>\n      <User />\n    </Suspense>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Cookies in Next.js API Route\nDESCRIPTION: Demonstrates how to read cookies from incoming requests using the cookies request helper in a Next.js API route. The example shows accessing an authorization cookie from the request object.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from 'next'\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  const auth = req.cookies.authorization\n  // ...\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default async function handler(req, res) {\n  const auth = req.cookies.authorization\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Path Linking with URL Object\nDESCRIPTION: Demonstrates using a URL object approach for dynamic routing, specifying pathname and query parameters separately.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/01-routing/03-linking-and-navigating.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\nfunction Posts({ posts }) {\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>\n          <Link\n            href={{\n              pathname: '/blog/[slug]',\n              query: { slug: post.slug },\n            }}\n          >\n            {post.title}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  )\n}\n\nexport default Posts\n```\n\n----------------------------------------\n\nTITLE: Generating Static Params for Catch-all Dynamic Segment in Next.js\nDESCRIPTION: This example illustrates how to use generateStaticParams with a catch-all dynamic segment [...slug] in a product page. It generates three static routes with different slug arrays.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-static-params.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport function generateStaticParams() {\n  return [{ slug: ['a', '1'] }, { slug: ['b', '2'] }, { slug: ['c', '3'] }]\n}\n\n// Three versions of this page will be statically generated\n// using the `params` returned by `generateStaticParams`\n// - /product/a/1\n// - /product/b/2\n// - /product/c/3\nexport default function Page({ params }: { params: { slug: string[] } }) {\n  const { slug } = params\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a static robots.txt file in Next.js\nDESCRIPTION: This snippet shows how to create a static robots.txt file in the root of the app directory. It includes basic rules for allowing and disallowing crawler access, as well as specifying a sitemap.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/01-metadata/robots.mdx#2025-04-22_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nUser-Agent: *\nAllow: /\nDisallow: /private/\n\nSitemap: https://acme.com/sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Customizing robots.txt for specific user agents in TypeScript\nDESCRIPTION: This snippet demonstrates how to customize robots.txt rules for specific search engine bots using TypeScript in Next.js. It shows how to set different rules for Googlebot, Applebot, and Bingbot.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/01-metadata/robots.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { MetadataRoute } from 'next'\n\nexport default function robots(): MetadataRoute.Robots {\n  return {\n    rules: [\n      {\n        userAgent: 'Googlebot',\n        allow: ['/'],\n        disallow: '/private/',\n      },\n      {\n        userAgent: ['Applebot', 'Bingbot'],\n        disallow: ['/'],\n      },\n    ],\n    sitemap: 'https://acme.com/sitemap.xml',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using beforeInteractive Strategy in Document Component\nDESCRIPTION: Example showing how to use the Script component with beforeInteractive strategy in the _document.js file for the Pages Router.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/script.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Html, Head, Main, NextScript } from 'next/document'\nimport Script from 'next/script'\n\nexport default function Document() {\n  return (\n    <Html>\n      <Head />\n      <body>\n        <Main />\n        <NextScript />\n        <Script\n          src=\"https://example.com/script.js\"\n          strategy=\"beforeInteractive\"\n        />\n      </body>\n    </Html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Metadata Generation in Next.js\nDESCRIPTION: Implementation of generateMetadata function for fetching and generating dynamic metadata based on route parameters and search queries.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/04-metadata.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Metadata, ResolvingMetadata } from 'next'\n\ntype Props = {\n  params: { id: string }\n  searchParams: { [key: string]: string | string[] | undefined }\n}\n\nexport async function generateMetadata(\n  { params, searchParams }: Props,\n  parent: ResolvingMetadata\n): Promise<Metadata> {\n  const id = params.id\n  const product = await fetch(`https://.../${id}`).then((res) => res.json())\n  const previousImages = (await parent).openGraph?.images || []\n\n  return {\n    title: product.title,\n    openGraph: {\n      images: ['/some-specific-page-image.jpg', ...previousImages],\n    },\n  }\n}\n\nexport default function Page({ params, searchParams }: Props) {}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function generateMetadata({ params, searchParams }, parent) {\n  const id = params.id\n  const product = await fetch(`https://.../${id}`).then((res) => res.json())\n  const previousImages = (await parent).openGraph?.images || []\n\n  return {\n    title: product.title,\n    openGraph: {\n      images: ['/some-specific-page-image.jpg', ...previousImages],\n    },\n  }\n}\n\nexport default function Page({ params, searchParams }) {}\n```\n\n----------------------------------------\n\nTITLE: Enabling Typed Routes in Next.js Configuration\nDESCRIPTION: Configuration for enabling statically typed routes in Next.js. This allows TypeScript to validate route paths in next/link components.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/01-typescript.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  experimental: {\n    typedRoutes: true,\n  },\n}\n\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: Non-interactive CLI Options for create-next-app\nDESCRIPTION: Complete list of command-line arguments and options available for non-interactive Next.js project creation, including TypeScript, JavaScript, Tailwind CSS, and other configuration options.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/06-create-next-app.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nUsage: create-next-app <project-directory> [options]\n\nOptions:\n  -V, --version                        output the version number\n  --ts, --typescript\n\n    Initialize as a TypeScript project. (default)\n\n  --js, --javascript\n\n    Initialize as a JavaScript project.\n\n  --tailwind\n\n    Initialize with Tailwind CSS config. (default)\n\n  --eslint\n\n    Initialize with ESLint config.\n\n  --app\n\n    Initialize as an App Router project.\n\n  --src-dir\n\n    Initialize inside a `src/` directory.\n\n  --import-alias <alias-to-configure>\n\n    Specify import alias to use (default \"@/*\").\n\n  --use-npm\n\n    Explicitly tell the CLI to bootstrap the app using npm\n\n  --use-pnpm\n\n    Explicitly tell the CLI to bootstrap the app using pnpm\n\n  --use-yarn\n\n    Explicitly tell the CLI to bootstrap the app using Yarn\n\n  --use-bun\n\n    Explicitly tell the CLI to bootstrap the app using Bun\n\n  -e, --example [name]|[github-url]\n\n    An example to bootstrap the app with. You can use an example name\n    from the official Next.js repo or a public GitHub URL. The URL can use\n    any branch and/or subdirectory\n\n  --example-path <path-to-example>\n\n    In a rare case, your GitHub URL might contain a branch name with\n    a slash (e.g. bug/fix-1) and the path to the example (e.g. foo/bar).\n    In this case, you must specify the path to the example separately:\n    --example-path foo/bar\n\n  --reset-preferences\n\n    Explicitly tell the CLI to reset any stored preferences\n\n  -h, --help                           output usage information\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Segment Options in Next.js (TypeScript)\nDESCRIPTION: Example of exporting route segment configuration options in a Next.js page, layout or route handler using TypeScript. This demonstrates how to set dynamic behavior, dynamicParams, revalidation, fetchCache, runtime preferences, preferred region, and maximum duration.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/route-segment-config.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const dynamic = 'auto'\nexport const dynamicParams = true\nexport const revalidate = false\nexport const fetchCache = 'auto'\nexport const runtime = 'nodejs'\nexport const preferredRegion = 'auto'\nexport const maxDuration = 5\n\nexport default function MyComponent() {}\n```\n\n----------------------------------------\n\nTITLE: Configuring revalidate Option in Next.js Route Segments (JavaScript)\nDESCRIPTION: Example showing how to configure the revalidate option in a Next.js route segment using JavaScript. This sets the default revalidation time for a layout or page, affecting caching behavior.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/route-segment-config.mdx#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const revalidate = false\n// false | 0 | number\n```\n\n----------------------------------------\n\nTITLE: Implementing Modal with Close Functionality in Next.js\nDESCRIPTION: This snippet creates a Modal component with a close button. It uses the Next.js router to navigate back when the close button is clicked.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/10-parallel-routes.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { useRouter } from 'next/navigation'\n\nexport function Modal({ children }: { children: React.ReactNode }) {\n  const router = useRouter()\n\n  return (\n    <>\n      <button\n        onClick={() => {\n          router.back()\n        }}\n      >\n        Close modal\n      </button>\n      <div>{children}</div>\n    </>\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nimport { useRouter } from 'next/navigation'\n\nexport function Modal({ children }) {\n  const router = useRouter()\n\n  return (\n    <>\n      <button\n        onClick={() => {\n          router.back()\n        }}\n      >\n        Close modal\n      </button>\n      <div>{children}</div>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Asynchronous Operations in Next.js API Routes\nDESCRIPTION: This example demonstrates how to handle asynchronous operations in an API route, including error handling and sending appropriate responses.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/01-routing/07-api-routes.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from 'next'\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  try {\n    const result = await someAsyncOperation()\n    res.status(200).json({ result })\n  } catch (err) {\n    res.status(500).json({ error: 'failed to load data' })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Remote MDX Component Implementation\nDESCRIPTION: Server component implementation for fetching and rendering remote MDX content\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/05-mdx.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MDXRemote } from 'next-mdx-remote/rsc'\n\nexport default async function RemoteMdxPage() {\n  // MDX text - can be from a local file, database, CMS, fetch, anywhere...\n  const res = await fetch('https://...')\n  const markdown = await res.text()\n  return <MDXRemote source={markdown} />\n}\n```\n\n----------------------------------------\n\nTITLE: Aborting Fetch Requests in Next.js\nDESCRIPTION: This snippet demonstrates how to use the AbortController API to abort in-flight fetch requests in Next.js. Note that this does not opt requests out of memoization but allows for cancellation of pending requests.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/04-caching/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { signal } = new AbortController()\nfetch(url, { signal })\n```\n\n----------------------------------------\n\nTITLE: Dynamic Route Parameters in Image Generation\nDESCRIPTION: Example showing how to access dynamic route parameters in a programmatically generated Open Graph image component using TypeScript and JavaScript.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/01-metadata/opengraph-image.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Image({ params }: { params: { slug: string } }) {\n  // ...\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Image({ params }) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Typing Response Data in Next.js API Routes\nDESCRIPTION: Example showing how to type the response data for a Next.js API route using generics with the NextApiResponse type.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/01-typescript.mdx#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from 'next'\n\ntype Data = {\n  name: string\n}\n\nexport default function handler(\n  req: NextApiRequest,\n  res: NextApiResponse<Data>\n) {\n  res.status(200).json({ name: 'John Doe' })\n}\n```\n\n----------------------------------------\n\nTITLE: Using Metadata API in Next.js App Router with JavaScript\nDESCRIPTION: Demonstrates the new approach for managing head elements using the built-in metadata API in the app directory with JavaScript. This replaces the need for the next/head component.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/02-app-router-migration.mdx#2025-04-22_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  title: 'My Page Title',\n}\n\nexport default function Page() {\n  return '...'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Matcher for Multiple Paths in Next.js Middleware\nDESCRIPTION: This snippet demonstrates how to configure the matcher in Next.js middleware to match multiple paths using an array syntax.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/13-middleware.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const config = {\n  matcher: ['/about/:path*', '/dashboard/:path*'],\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Path Linking with String Interpolation\nDESCRIPTION: Shows how to create dynamic links using string interpolation for blog posts, including proper URL encoding for UTF-8 compatibility.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/01-routing/03-linking-and-navigating.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\nfunction Posts({ posts }) {\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>\n          <Link href={`/blog/${encodeURIComponent(post.slug)}`}>\n            {post.title}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  )\n}\n\nexport default Posts\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Loading Component with next/dynamic in Next.js\nDESCRIPTION: This example shows how to add a custom loading component when using next/dynamic for lazy loading. The loading component is displayed while the main component is being loaded.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/07-lazy-loading.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport dynamic from 'next/dynamic'\n\nconst WithCustomLoading = dynamic(\n  () => import('../components/WithCustomLoading'),\n  {\n    loading: () => <p>Loading...</p>,\n  }\n)\n\nexport default function Page() {\n  return (\n    <div>\n      {/* The loading component will be rendered while  <WithCustomLoading/> is loading */}\n      <WithCustomLoading />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using onLoad Event Handler with Script Component\nDESCRIPTION: Example demonstrating how to use the onLoad prop to execute code after a script has loaded. This example loads lodash and executes a method after loading.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/script.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport Script from 'next/script'\n\nexport default function Page() {\n  return (\n    <>\n      <Script\n        src=\"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.20/lodash.min.js\"\n        onLoad={() => {\n          console.log(_.sample([1, 2, 3, 4]))\n        }}\n      />\n    </>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport Script from 'next/script'\n\nexport default function Page() {\n  return (\n    <>\n      <Script\n        src=\"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.20/lodash.min.js\"\n        onLoad={() => {\n          console.log(_.sample([1, 2, 3, 4]))\n        }}\n      />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Converting srcSet to CSS image-set Function in Next.js\nDESCRIPTION: Demonstrates how to convert a srcSet string to CSS image-set function for optimizing background images. The code shows implementation of a custom getBackgroundImage utility function and its usage with Next.js Image component props.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/image.mdx#2025-04-22_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getImageProps } from 'next/image'\n\nfunction getBackgroundImage(srcSet = '') {\n  const imageSet = srcSet\n    .split(', ')\n    .map((str) => {\n      const [url, dpi] = str.split(' ')\n      return `url(\"${url}\") ${dpi}`\n    })\n    .join(', ')\n  return `image-set(${imageSet})`\n}\n\nexport default function Home() {\n  const {\n    props: { srcSet },\n  } = getImageProps({ alt: '', width: 128, height: 128, src: '/img.png' })\n  const backgroundImage = getBackgroundImage(srcSet)\n  const style = { height: '100vh', width: '100vw', backgroundImage }\n\n  return (\n    <main style={style}>\n      <h1>Hello World</h1>\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Segment Options in Next.js (JavaScript)\nDESCRIPTION: Example of exporting route segment configuration options in a Next.js page, layout or route handler using JavaScript. This demonstrates how to set dynamic behavior, dynamicParams, revalidation, fetchCache, runtime preferences, preferred region, and maximum duration.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/route-segment-config.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const dynamic = 'auto'\nexport const dynamicParams = true\nexport const revalidate = false\nexport const fetchCache = 'auto'\nexport const runtime = 'nodejs'\nexport const preferredRegion = 'auto'\nexport const maxDuration = 5\n\nexport default function MyComponent() {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Font Files for a Single Font Family\nDESCRIPTION: Example showing how to use multiple font files for a single font family by providing an array of configurations to the src property, with different weights and styles for each file.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/03-fonts.mdx#2025-04-22_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nconst roboto = localFont({\n  src: [\n    {\n      path: './Roboto-Regular.woff2',\n      weight: '400',\n      style: 'normal',\n    },\n    {\n      path: './Roboto-Italic.woff2',\n      weight: '400',\n      style: 'italic',\n    },\n    {\n      path: './Roboto-Bold.woff2',\n      weight: '700',\n      style: 'normal',\n    },\n    {\n      path: './Roboto-BoldItalic.woff2',\n      weight: '700',\n      style: 'italic',\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring exportPathMap in Next.js\nDESCRIPTION: Example of how to configure exportPathMap in next.config.js to specify custom page mappings for static export. It demonstrates mapping request paths to page destinations with optional query parameters.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/exportPathMap.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  exportPathMap: async function (\n    defaultPathMap,\n    { dev, dir, outDir, distDir, buildId }\n  ) {\n    return {\n      '/': { page: '/' },\n      '/about': { page: '/about' },\n      '/p/hello-nextjs': { page: '/post', query: { title: 'hello-nextjs' } },\n      '/p/learn-nextjs': { page: '/post', query: { title: 'learn-nextjs' } },\n      '/p/deploy-nextjs': { page: '/post', query: { title: 'deploy-nextjs' } },\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Matcher Configuration in Next.js Middleware\nDESCRIPTION: This snippet demonstrates a complex matcher configuration using 'missing' and 'has' arrays to bypass middleware for certain requests based on headers.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/13-middleware.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport const config = {\n  matcher: [\n    {\n      source: '/((?!api|_next/static|_next/image|favicon.ico).*)',\n      missing: [\n        { type: 'header', key: 'next-router-prefetch' },\n        { type: 'header', key: 'purpose', value: 'prefetch' },\n      ],\n    },\n    {\n      source: '/((?!api|_next/static|_next/image|favicon.ico).*)',\n      has: [\n        { type: 'header', key: 'next-router-prefetch' },\n        { type: 'header', key: 'purpose', value: 'prefetch' },\n      ],\n    },\n    {\n      source: '/((?!api|_next/static|_next/image|favicon.ico).*)',\n      has: [{ type: 'header', key: 'x-present' }],\n      missing: [{ type: 'header', key: 'x-missing', value: 'prefetch' }],\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: MDX Components Configuration\nDESCRIPTION: TypeScript and JavaScript implementations of MDX components configuration file\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/05-mdx.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { MDXComponents } from 'mdx/types'\n\nexport function useMDXComponents(components: MDXComponents): MDXComponents {\n  return {\n    ...components,\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport function useMDXComponents(components) {\n  return {\n    ...components,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Response with NextResponse in TypeScript\nDESCRIPTION: Demonstrates how to create a JSON response with a specific status code using NextResponse.json() method in a Next.js API route.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/next-response.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from 'next/server'\n\nexport async function GET(request: Request) {\n  return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 })\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting with NextResponse in TypeScript\nDESCRIPTION: Illustrates how to create a redirect response using NextResponse.redirect() method with a new URL object.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/next-response.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from 'next/server'\n\nreturn NextResponse.redirect(new URL('/new', request.url))\n```\n\n----------------------------------------\n\nTITLE: Implementing the Metadata API in Root Layout\nDESCRIPTION: Replaces head tags with Next.js's Metadata API, which manages metadata through a dedicated object export. This approach improves SEO and web shareability through Next.js's built-in optimization features.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/04-from-vite.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: 'My App',\n  description: 'My App is a...',\n}\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  title: 'My App',\n  description: 'My App is a...',\n}\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic OpenGraph Image Generation with TypeScript\nDESCRIPTION: Advanced example showing how to generate multiple OpenGraph images using external data and dynamic routing in TypeScript.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-image-metadata.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ImageResponse } from 'next/og'\nimport { getCaptionForImage, getOGImages } from '@/app/utils/images'\n\nexport async function generateImageMetadata({\n  params,\n}: {\n  params: { id: string }\n}) {\n  const images = await getOGImages(params.id)\n\n  return images.map((image, idx) => ({\n    id: idx,\n    size: { width: 1200, height: 600 },\n    alt: image.text,\n    contentType: 'image/png',\n  }))\n}\n\nexport default async function Image({\n  params,\n  id,\n}: {\n  params: { id: string }\n  id: number\n}) {\n  const productId = params.id\n  const imageId = id\n  const text = await getCaptionForImage(productId, imageId)\n\n  return new ImageResponse(\n    (\n      <div\n        style={\n          {\n            // ...\n          }\n        }\n      >\n        {text}\n      </div>\n    )\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Wildcard Path Matching Redirects in Next.js\nDESCRIPTION: This snippet illustrates how to use wildcard path matching in redirects. It shows how to match multiple path segments using the asterisk (*) syntax.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/redirects.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async redirects() {\n    return [\n      {\n        source: '/blog/:slug*',\n        destination: '/news/:slug*', // Matched parameters can be used in the destination\n        permanent: true,\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to a Dynamic Route with useRouter in Next.js\nDESCRIPTION: This snippet demonstrates how to use the useRouter hook to navigate to a dynamic route ('/post/[pid]') with a specific parameter when a button is clicked.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/02-functions/use-router.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useRouter } from 'next/router'\n\nexport default function Page() {\n  const router = useRouter()\n\n  return (\n    <button type=\"button\" onClick={() => router.push('/post/abc')}>\n      Click me\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Sass Variables in App Router Component\nDESCRIPTION: React component example showing how to import and use Sass variables from a module file in the App Router. The imported color variable is applied to the h1 element's style.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/05-styling/04-sass.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// maps to root `/` URL\n\nimport variables from './variables.module.scss'\n\nexport default function Page() {\n  return <h1 style={{ color: variables.primaryColor }}>Hello, Next.js!</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Rewrite with Parameter Handling\nDESCRIPTION: Examples showing different ways to handle parameters in rewrites including automatic query passing and manual parameter configuration\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/rewrites.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/old-about/:path*',\n        destination: '/about',\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Metadata Title Fields in Next.js\nDESCRIPTION: Shows how to configure the title metadata field with options for simple string titles or template objects with default and template patterns.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-metadata.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: {\n    template: '...',\n    default: '...',\n    absolute: '...',\n  },\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  title: {\n    default: '...',\n    template: '...',\n    absolute: '...',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Setting CSP Header without Nonces in Next.js Configuration\nDESCRIPTION: This code snippet shows how to set a Content Security Policy header directly in the next.config.js file without using nonces. It defines a CSP header and applies it to all routes.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/15-content-security-policy.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst cspHeader = `\n    default-src 'self';\n    script-src 'self' 'unsafe-eval' 'unsafe-inline';\n    style-src 'self' 'unsafe-inline';\n    img-src 'self' blob: data:;\n    font-src 'self';\n    object-src 'none';\n    base-uri 'self';\n    form-action 'self';\n    frame-ancestors 'none';\n    upgrade-insecure-requests;\n`\n\nmodule.exports = {\n  async headers() {\n    return [\n      {\n        source: '/(.*)',\n        headers: [\n          {\n            key: 'Content-Security-Policy',\n            value: cspHeader.replace(/\\n/g, ''),\n          },\n        ],\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Web Vitals Data to Google Analytics\nDESCRIPTION: Example of sending Web Vitals metrics to Google Analytics, formatting the values appropriately and using unique identifiers for the current page load.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/08-analytics.mdx#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nuseReportWebVitals((metric) => {\n  // Use `window.gtag` if you initialized Google Analytics as this example:\n  // https://github.com/vercel/next.js/blob/canary/examples/with-google-analytics/pages/_app.js\n  window.gtag('event', metric.name, {\n    value: Math.round(\n      metric.name === 'CLS' ? metric.value * 1000 : metric.value\n    ), // values must be integers\n    event_label: metric.id, // id unique to current page load\n    non_interaction: true, // avoids affecting bounce rate.\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling React Strict Mode in Next.js Configuration\nDESCRIPTION: This code snippet shows how to enable React's Strict Mode globally in a Next.js application by modifying the next.config.js file. It sets the reactStrictMode option to true, which applies Strict Mode to the entire application.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/reactStrictMode.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  reactStrictMode: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Global Error Handling Component for Root Layout in Next.js (TypeScript)\nDESCRIPTION: A TypeScript implementation of the global-error.js component that handles errors in the root layout. This component provides a complete HTML structure since it replaces the entire application when active.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/05-error-handling.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nexport default function GlobalError({\n  error,\n  reset,\n}: {\n  error: Error & { digest?: string }\n  reset: () => void\n}) {\n  return (\n    <html>\n      <body>\n        <h2>Something went wrong!</h2>\n        <button onClick={() => reset()}>Try again</button>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Thumbor Loader Implementation\nDESCRIPTION: Custom image loader implementation for Thumbor image processing service\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/images.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function thumborLoader({ src, width, quality }) {\n  const params = [`${width}x0`, `filters:quality(${quality || 75})`]\n  return `https://example.com${params.join('/')}${src}`\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Router Events in Next.js Client Component\nDESCRIPTION: This example demonstrates how to listen for page changes using the usePathname and useSearchParams hooks in a Next.js Client Component.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/use-router.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { useEffect } from 'react'\nimport { usePathname, useSearchParams } from 'next/navigation'\n\nexport function NavigationEvents() {\n  const pathname = usePathname()\n  const searchParams = useSearchParams()\n\n  useEffect(() => {\n    const url = `${pathname}?${searchParams}`\n    console.log(url)\n    // You can now use the current URL\n    // ...\n  }, [pathname, searchParams])\n\n  return null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Domains for Next.js Images\nDESCRIPTION: Legacy configuration for specifying allowed image domains without pattern matching capabilities.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/image.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    domains: ['assets.acme.com'],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Multiple Sitemaps in Next.js with JavaScript\nDESCRIPTION: This JavaScript implementation splits a sitemap into multiple files using the generateSitemaps function. It creates four sitemap IDs and uses each ID to fetch the appropriate product data range, formatting them into sitemap entries according to Google's guidelines.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-sitemaps.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { BASE_URL } from '@/app/lib/constants'\n\nexport async function generateSitemaps() {\n  // Fetch the total number of products and calculate the number of sitemaps needed\n  return [{ id: 0 }, { id: 1 }, { id: 2 }, { id: 3 }]\n}\n\nexport default async function sitemap({ id }) {\n  // Google's limit is 50,000 URLs per sitemap\n  const start = id * 50000\n  const end = start + 50000\n  const products = await getProducts(\n    `SELECT id, date FROM products WHERE id BETWEEN ${start} AND ${end}`\n  )\n  return products.map((product) => ({\n    url: `${BASE_URL}/product/${id}`,\n    lastModified: product.date,\n  }))\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Middleware in JavaScript with Next.js\nDESCRIPTION: JavaScript version of the middleware implementation that redirects requests to the '/home' path. The config object specifies that this middleware should only apply to paths starting with '/about'.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/middleware.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NextResponse } from 'next/server'\n\n// This function can be marked `async` if using `await` inside\nexport function middleware(request) {\n  return NextResponse.redirect(new URL('/home', request.url))\n}\n\nexport const config = {\n  matcher: '/about/:path*',\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring dynamic Option in Next.js Route Segments (TypeScript)\nDESCRIPTION: Example showing how to configure the dynamic option in a Next.js route segment using TypeScript. This option controls the dynamic behavior of a layout or page to be static or dynamic.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/route-segment-config.mdx#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const dynamic = 'auto'\n// 'auto' | 'force-dynamic' | 'error' | 'force-static'\n```\n\n----------------------------------------\n\nTITLE: Creating a Server Component for Video Embedding in Next.js\nDESCRIPTION: This snippet demonstrates creating a Server Component in Next.js that fetches a video source URL and renders an iframe for embedding the video.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/02-videos.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport default async function VideoComponent() {\n  const src = await getVideoSrc()\n\n  return <iframe src={src} frameborder=\"0\" allowfullscreen />\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Next.js Form Submission\nDESCRIPTION: Implements comprehensive error handling for form submissions including loading states, error messages, and try-catch blocks.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState, FormEvent } from 'react'\n\nexport default function Page() {\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  const [error, setError] = useState<string | null>(null)\n\n  async function onSubmit(event: FormEvent<HTMLFormElement>) {\n    event.preventDefault()\n    setIsLoading(true)\n    setError(null)\n\n    try {\n      const formData = new FormData(event.currentTarget)\n      const response = await fetch('/api/submit', {\n        method: 'POST',\n        body: formData,\n      })\n\n      if (!response.ok) {\n        throw new Error('Failed to submit the data. Please try again.')\n      }\n\n      const data = await response.json()\n    } catch (error) {\n      setError(error.message)\n      console.error(error)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <div>\n      {error && <div style={{ color: 'red' }}>{error}</div>}\n      <form onSubmit={onSubmit}>\n        <input type=\"text\" name=\"name\" />\n        <button type=\"submit\" disabled={isLoading}>\n          {isLoading ? 'Loading...' : 'Submit'}\n        </button>\n      </form>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Google Fonts with CSS Variables for Tailwind CSS in Pages Router\nDESCRIPTION: Example showing how to use Google Fonts with CSS variables for integration with Tailwind CSS in Next.js Pages Router. This implements the Inter font and makes it available through a CSS variable.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/03-fonts.mdx#2025-04-22_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Inter } from 'next/font/google'\n\nconst inter = Inter({\n  subsets: ['latin'],\n  variable: '--font-inter',\n})\n\nexport default function MyApp({ Component, pageProps }) {\n  return (\n    <main className={`${inter.variable} font-sans`}>\n      <Component {...pageProps} />\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Type Safety to generateViewport Function\nDESCRIPTION: Adding TypeScript type safety to the generateViewport function using the Viewport type from Next.js.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-viewport.mdx#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Viewport } from 'next'\n\nexport function generateViewport(): Viewport {\n  return {\n    themeColor: 'black',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Child Params Using Parent Params in Next.js\nDESCRIPTION: This snippet shows how to generate params for a child segment ([product]) using the params passed from the parent segment's generateStaticParams function. It fetches products based on the category and generates product params.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-static-params.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// Generate segments for [product] using the `params` passed from\n// the parent segment's `generateStaticParams` function\nexport async function generateStaticParams({\n  params: { category },\n}: {\n  params: { category: string }\n}) {\n  const products = await fetch(\n    `https://.../products?category=${category}`\n  ).then((res) => res.json())\n\n  return products.map((product) => ({\n    product: product.id,\n  }))\n}\n\nexport default function Page({\n  params,\n}: {\n  params: { category: string; product: string }\n}) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Root Layout in Next.js\nDESCRIPTION: This snippet shows how to implement a root layout in Next.js. It defines the basic HTML structure including the lang attribute and body, which wraps all child components.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/layout.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rewrites with i18n Support in Next.js\nDESCRIPTION: This snippet shows how to set up rewrites when using the i18n feature in Next.js. It demonstrates how to handle locales automatically and how to configure rewrites for specific locales manually.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/rewrites.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  i18n: {\n    locales: ['en', 'fr', 'de'],\n    defaultLocale: 'en',\n  },\n\n  async rewrites() {\n    return [\n      {\n        source: '/with-locale', // automatically handles all locales\n        destination: '/another', // automatically passes the locale on\n      },\n      {\n        // does not handle locales automatically since locale: false is set\n        source: '/nl/with-locale-manual',\n        destination: '/nl/another',\n        locale: false,\n      },\n      {\n        // this matches '/' since `en` is the defaultLocale\n        source: '/en',\n        destination: '/en/another',\n        locale: false,\n      },\n      {\n        // it's possible to match all locales even when locale: false is set\n        source: '/:locale/api-alias/:path*',\n        destination: '/api/:path*',\n        locale: false,\n      },\n      {\n        // this gets converted to /(en|fr|de)/(.*) so will not match the top-level\n        // `/` or `/fr` routes like /:path* would\n        source: '/(.*)',\n        destination: '/another',\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Registering OpenTelemetry in Next.js with TypeScript\nDESCRIPTION: Implementation of the instrumentation.ts file that registers OpenTelemetry in a Next.js application using @vercel/otel. This should be placed in the root directory of the project.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/10-open-telemetry.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerOTel } from '@vercel/otel'\n\nexport function register() {\n  registerOTel({ serviceName: 'next-app' })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Template in TypeScript\nDESCRIPTION: Basic TypeScript implementation of a Next.js template component that wraps child components. Accepts children as a required prop with React.ReactNode type.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/template.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Template({ children }: { children: React.ReactNode }) {\n  return <div>{children}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Root Layout for Next.js App Router\nDESCRIPTION: TypeScript and JavaScript examples of creating a root layout file (layout.tsx/js) for the App Router, which includes the required html and body tags.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/01-getting-started/01-installation.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing On-Demand Revalidation API Route in Next.js\nDESCRIPTION: This code snippet demonstrates how to create an API route for on-demand revalidation in Next.js. It includes checking for a secret token, revalidating a specific path, and handling errors.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/03-data-fetching/04-incremental-static-regeneration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nexport default async function handler(req, res) {\n  // Check for secret to confirm this is a valid request\n  if (req.query.secret !== process.env.MY_SECRET_TOKEN) {\n    return res.status(401).json({ message: 'Invalid token' })\n  }\n\n  try {\n    // this should be the actual path not a rewritten path\n    // e.g. for \"/blog/[slug]\" this should be \"/blog/post-1\"\n    await res.revalidate('/path-to-revalidate')\n    return res.json({ revalidated: true })\n  } catch (err) {\n    // If there was an error, Next.js will continue\n    // to show the last successfully generated page\n    return res.status(500).send('Error revalidating')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Runtime for Route Handlers in Next.js\nDESCRIPTION: This snippet demonstrates how to specify the runtime for a Route Handler in Next.js. It uses the 'runtime' segment config option to set the runtime to 'edge'.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/12-route-handlers.mdx#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport const runtime = 'edge' // 'nodejs' is the default\n```\n\n----------------------------------------\n\nTITLE: Passing Additional Arguments to Server Actions with JSX\nDESCRIPTION: Shows how to use JavaScript's bind method to pass additional arguments to a Server Action in a Client Component using JavaScript. This allows for context-specific information to be sent along with the form data.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/02-server-actions-and-mutations.mdx#2025-04-22_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { updateUser } from './actions'\n\nexport function UserProfile({ userId }) {\n  const updateUserWithId = updateUser.bind(null, userId)\n\n  return (\n    <form action={updateUserWithId}>\n      <input type=\"text\" name=\"name\" />\n      <button type=\"submit\">Update User Name</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Redirect Requests in Next.js Route Handler\nDESCRIPTION: This code snippet shows how to implement a Route Handler in Next.js that processes redirect requests. It checks a JSON file for redirect entries based on the provided pathname and returns the appropriate redirect information.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/06-redirecting.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextRequest, NextResponse } from 'next/server'\nimport redirects from '@/app/redirects/redirects.json'\n\ntype RedirectEntry = {\n  destination: string\n  permanent: boolean\n}\n\nexport function GET(request: NextRequest) {\n  const pathname = request.nextUrl.searchParams.get('pathname')\n  if (!pathname) {\n    return new Response('Bad Request', { status: 400 })\n  }\n\n  // Get the redirect entry from the redirects.json file\n  const redirect = (redirects as Record<string, RedirectEntry>)[pathname]\n\n  // Account for bloom filter false positives\n  if (!redirect) {\n    return new Response('No redirect', { status: 400 })\n  }\n\n  // Return the redirect entry\n  return NextResponse.json(redirect)\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NextResponse } from 'next/server'\nimport redirects from '@/app/redirects/redirects.json'\n\nexport function GET(request) {\n  const pathname = request.nextUrl.searchParams.get('pathname')\n  if (!pathname) {\n    return new Response('Bad Request', { status: 400 })\n  }\n\n  // Get the redirect entry from the redirects.json file\n  const redirect = redirects[pathname]\n\n  // Account for bloom filter false positives\n  if (!redirect) {\n    return new Response('No redirect', { status: 400 })\n  }\n\n  // Return the redirect entry\n  return NextResponse.json(redirect)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Shop Layout with Dynamic Parameters in Next.js\nDESCRIPTION: This example demonstrates a shop layout component that receives dynamic route parameters. It shows how to type and use the params prop for nested dynamic routes.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/layout.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function ShopLayout({\n  children,\n  params,\n}: {\n  children: React.ReactNode\n  params: {\n    tag: string\n    item: string\n  }\n}) {\n  // URL -> /shop/shoes/nike-air-max-97\n  // `params` -> { tag: 'shoes', item: 'nike-air-max-97' }\n  return <section>{children}</section>\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function ShopLayout({ children, params }) {\n  // URL -> /shop/shoes/nike-air-max-97\n  // `params` -> { tag: 'shoes', item: 'nike-air-max-97' }\n  return <section>{children}</section>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Images with Static Import\nDESCRIPTION: Example of implementing a responsive image using static import with Next.js Image component.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/image.mdx#2025-04-22_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from 'next/image'\nimport me from '../photos/me.jpg'\n\nexport default function Author() {\n  return (\n    <Image\n      src={me}\n      alt=\"Picture of the author\"\n      sizes=\"100vw\"\n      style={{\n        width: '100%',\n        height: 'auto',\n      }}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Fetching in Not Found Component (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to implement data fetching in a Not Found component using TypeScript in Next.js. It uses the headers function from next/headers to get the domain and fetches site data asynchronously.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/not-found.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport Link from 'next/link'\nimport { headers } from 'next/headers'\n\nexport default async function NotFound() {\n  const headersList = headers()\n  const domain = headersList.get('host')\n  const data = await getSiteData(domain)\n  return (\n    <div>\n      <h2>Not Found: {data.name}</h2>\n      <p>Could not find requested resource</p>\n      <p>\n        View <Link href=\"/blog\">all posts</Link>\n      </p>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Header, Cookie, and Query Matching Rewrites in Next.js\nDESCRIPTION: This snippet demonstrates how to set up rewrites in Next.js based on header, cookie, and query values. It shows various scenarios including matching presence or absence of headers, specific query and cookie values, and host matching.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/rewrites.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async rewrites() {\n    return [\n      // if the header `x-rewrite-me` is present,\n      // this rewrite will be applied\n      {\n        source: '/:path*',\n        has: [\n          {\n            type: 'header',\n            key: 'x-rewrite-me',\n          },\n        ],\n        destination: '/another-page',\n      },\n      // if the header `x-rewrite-me` is not present,\n      // this rewrite will be applied\n      {\n        source: '/:path*',\n        missing: [\n          {\n            type: 'header',\n            key: 'x-rewrite-me',\n          },\n        ],\n        destination: '/another-page',\n      },\n      // if the source, query, and cookie are matched,\n      // this rewrite will be applied\n      {\n        source: '/specific/:path*',\n        has: [\n          {\n            type: 'query',\n            key: 'page',\n            // the page value will not be available in the\n            // destination since value is provided and doesn't\n            // use a named capture group e.g. (?<page>home)\n            value: 'home',\n          },\n          {\n            type: 'cookie',\n            key: 'authorized',\n            value: 'true',\n          },\n        ],\n        destination: '/:path*/home',\n      },\n      // if the header `x-authorized` is present and\n      // contains a matching value, this rewrite will be applied\n      {\n        source: '/:path*',\n        has: [\n          {\n            type: 'header',\n            key: 'x-authorized',\n            value: '(?<authorized>yes|true)',\n          },\n        ],\n        destination: '/home?authorized=:authorized',\n      },\n      // if the host is `example.com`,\n      // this rewrite will be applied\n      {\n        source: '/:path*',\n        has: [\n          {\n            type: 'host',\n            value: 'example.com',\n          },\n        ],\n        destination: '/another-page',\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Generic Component with Typed Routes\nDESCRIPTION: Example of creating a custom component that wraps next/link while maintaining proper TypeScript route validation using generics.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/01-typescript.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Route } from 'next'\nimport Link from 'next/link'\n\nfunction Card<T extends string>({ href }: { href: Route<T> | URL }) {\n  return (\n    <Link href={href}>\n      <div>My Card</div>\n    </Link>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Home Page for Next.js App Router\nDESCRIPTION: TypeScript and JavaScript examples of creating a home page (page.tsx/js) for the App Router, displaying a simple greeting.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/01-getting-started/01-installation.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Page() {\n  return <h1>Hello, Next.js!</h1>\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Page() {\n  return <h1>Hello, Next.js!</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Origins for Server Actions in Next.js\nDESCRIPTION: Sets up extra safe origin domains from which Server Actions can be invoked. This configuration helps prevent CSRF attacks by comparing the origin of a Server Action request with the host domain.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/serverActions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\n\nmodule.exports = {\n  experimental: {\n    serverActions: {\n      allowedOrigins: ['my-proxy.com', '*.my-proxy.com'],\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Escaped Characters in Rewrite Paths\nDESCRIPTION: Demonstrates how to properly escape special characters in rewrite path patterns\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/rewrites.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/english\\\\(default\\\\)/:slug',\n        destination: '/en-us/:slug',\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bundle Analyzer in Next.js\nDESCRIPTION: Configuration setup in next.config.js to enable the bundle analyzer plugin. The analyzer is enabled when the ANALYZE environment variable is set to 'true'.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/06-bundle-analyzer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst withBundleAnalyzer = require('@next/bundle-analyzer')({\n  enabled: process.env.ANALYZE === 'true',\n})\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {}\n\nmodule.exports = withBundleAnalyzer(nextConfig)\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Cache Handler in Next.js\nDESCRIPTION: This snippet demonstrates how to configure a custom cache handler in Next.js by setting the cacheHandler and disabling default in-memory caching in the next.config.js file.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/10-deploying/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  cacheHandler: require.resolve('./cache-handler.js'),\n  cacheMaxMemorySize: 0, // disable default in-memory caching\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Styled Components Registry in JavaScript\nDESCRIPTION: Implements a StyledComponentsRegistry component in JavaScript to collect and inject CSS styles generated by styled-components. It uses useServerInsertedHTML hook for server-side rendering.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/05-styling/03-css-in-js.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nimport React, { useState } from 'react'\nimport { useServerInsertedHTML } from 'next/navigation'\nimport { ServerStyleSheet, StyleSheetManager } from 'styled-components'\n\nexport default function StyledComponentsRegistry({ children }) {\n  // Only create stylesheet once with lazy initial state\n  // x-ref: https://reactjs.org/docs/hooks-reference.html#lazy-initial-state\n  const [styledComponentsStyleSheet] = useState(() => new ServerStyleSheet())\n\n  useServerInsertedHTML(() => {\n    const styles = styledComponentsStyleSheet.getStyleElement()\n    styledComponentsStyleSheet.instance.clearTag()\n    return <>{styles}</>\n  })\n\n  if (typeof window !== 'undefined') return <>{children}</>\n\n  return (\n    <StyleSheetManager sheet={styledComponentsStyleSheet.instance}>\n      {children}\n    </StyleSheetManager>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Image Patterns in Next.js\nDESCRIPTION: This configuration in next.config.js allows optimizing images from a specific AWS S3 bucket. It demonstrates how to safely define supported URL patterns for remote images.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/01-images.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: 's3.amazonaws.com',\n        port: '',\n        pathname: '/my-bucket/**',\n      },\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Link with Styled Components in Next.js\nDESCRIPTION: Demonstrates how to properly use the Next.js Link component with styled-components, including the required passHref prop for accessibility and SEO optimization.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/link.mdx#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\nimport styled from 'styled-components'\n\n// This creates a custom component that wraps an <a> tag\nconst RedLink = styled.a`\n  color: red;\n`\n\nfunction NavLink({ href, name }) {\n  return (\n    <Link href={href} passHref legacyBehavior>\n      <RedLink>{name}</RedLink>\n    </Link>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JSX Import Source in Next.js\nDESCRIPTION: Demonstrates how to set the JSX import source in Next.js using tsconfig.json or jsconfig.json.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/04-architecture/nextjs-compiler.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"jsxImportSource\": \"theme-ui\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Export in Next.js Configuration File\nDESCRIPTION: This snippet shows how to enable static export in Next.js by modifying the next.config.js file. It sets the output mode to 'export' and includes optional configurations for trailing slashes and output directory.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/10-deploying/02-static-exports.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @type {import('next').NextConfig}\n */\nconst nextConfig = {\n  output: 'export',\n\n  // Optional: Change links `/me` -> `/me/` and emit `/me.html` -> `/me/index.html`\n  // trailingSlash: true,\n\n  // Optional: Prevent automatic `/me` -> `/me/`, instead preserve `href`\n  // skipTrailingSlashRedirect: true,\n\n  // Optional: Change the output directory `out` -> `dist`\n  // distDir: 'dist',\n}\n\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: Configuring Rewrites with basePath Support in Next.js\nDESCRIPTION: This snippet demonstrates how to configure rewrites when using the basePath feature in Next.js. It shows how to automatically prefix sources and destinations with the basePath, and how to exclude the basePath for specific rewrites.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/rewrites.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  basePath: '/docs',\n\n  async rewrites() {\n    return [\n      {\n        source: '/with-basePath', // automatically becomes /docs/with-basePath\n        destination: '/another', // automatically becomes /docs/another\n      },\n      {\n        // does not add /docs to /without-basePath since basePath: false is set\n        // Note: this can not be used for internal rewrites e.g. `destination: '/another'`\n        source: '/without-basePath',\n        destination: 'https://example.com',\n        basePath: false,\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Tainting in Next.js (JavaScript)\nDESCRIPTION: This snippet shows the JavaScript version of using React's taint APIs to prevent sensitive data from being exposed to the client in a Next.js application.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/03-patterns.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { queryDataFromDB } from './api'\nimport {\n  experimental_taintObjectReference,\n  experimental_taintUniqueValue,\n} from 'react'\n\nexport async function getUserData() {\n  const data = await queryDataFromDB()\n  experimental_taintObjectReference(\n    'Do not pass the whole user object to the client',\n    data\n  )\n  experimental_taintUniqueValue(\n    \"Do not pass the user's address to the client\",\n    data,\n    data.address\n  )\n  return data\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Active Link Component with useSelectedLayoutSegment\nDESCRIPTION: Shows how to create an active link component that changes style based on the current route segment using useSelectedLayoutSegment.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/use-selected-layout-segment.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport Link from 'next/link'\nimport { useSelectedLayoutSegment } from 'next/navigation'\n\nexport default function BlogNavLink({\n  slug,\n  children,\n}: {\n  slug: string\n  children: React.ReactNode\n}) {\n  const segment = useSelectedLayoutSegment()\n  const isActive = slug === segment\n\n  return (\n    <Link\n      href={`/blog/${slug}`}\n      style={{ fontWeight: isActive ? 'bold' : 'normal' }}\n    >\n      {children}\n    </Link>\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nimport Link from 'next/link'\nimport { useSelectedLayoutSegment } from 'next/navigation'\n\nexport default function BlogNavLink({ slug, children }) {\n  const segment = useSelectedLayoutSegment()\n  const isActive = slug === segment\n\n  return (\n    <Link\n      href={`/blog/${slug}`}\n      style={{ fontWeight: isActive ? 'bold' : 'normal' }}\n    >\n      {children}\n    </Link>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Loading UI in Next.js JavaScript\nDESCRIPTION: Example of creating a loading state using loading.js file in a Next.js dashboard route. Shows how to implement a basic loading component that displays a loading skeleton.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/04-loading-ui-and-streaming.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Loading() {\n  // You can add any UI inside Loading, including a Skeleton.\n  return <LoadingSkeleton />\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Font Subset for Optimization\nDESCRIPTION: Example showing how to specify a font subset to reduce the file size and improve performance. Subsets must be defined when preload is true to avoid warnings.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/03-fonts.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst inter = Inter({ subsets: ['latin'] })\n```\n\nLANGUAGE: jsx\nCODE:\n```\nconst inter = Inter({ subsets: ['latin'] })\n```\n\n----------------------------------------\n\nTITLE: Defining permanentRedirect Function Parameters in JavaScript\nDESCRIPTION: This snippet shows the function signature for permanentRedirect, including its parameters. It accepts a path (string) and an optional type ('replace' or 'push').\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/permanentRedirect.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\npermanentRedirect(path, type)\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic Page with State Management in Next.js\nDESCRIPTION: This snippet demonstrates a dynamic page component that uses the useRouter hook to access route parameters and implements state management with useState.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/02-functions/use-router.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\nimport { useState } from 'react'\nimport { useRouter } from 'next/router'\n\nexport default function Page(props) {\n  const router = useRouter()\n  const [count, setCount] = useState(0)\n  return (\n    <div>\n      <h1>Page: {router.query.slug}</h1>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increase count</button>\n      <Link href=\"/one\">one</Link> <Link href=\"/two\">two</Link>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Localized Sitemap with TypeScript in Next.js\nDESCRIPTION: Implementation of a localized sitemap using the alternates property to specify language variants for each URL. This helps search engines identify localized versions of the same content.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/01-metadata/sitemap.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MetadataRoute } from 'next'\n\nexport default function sitemap(): MetadataRoute.Sitemap {\n  return [\n    {\n      url: 'https://acme.com',\n      lastModified: new Date(),\n      alternates: {\n        languages: {\n          es: 'https://acme.com/es',\n          de: 'https://acme.com/de',\n        },\n      },\n    },\n    {\n      url: 'https://acme.com/about',\n      lastModified: new Date(),\n      alternates: {\n        languages: {\n          es: 'https://acme.com/es/about',\n          de: 'https://acme.com/de/about',\n        },\n      },\n    },\n    {\n      url: 'https://acme.com/blog',\n      lastModified: new Date(),\n      alternates: {\n        languages: {\n          es: 'https://acme.com/es/blog',\n          de: 'https://acme.com/de/blog',\n        },\n      },\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Cloudflare Image Loader Implementation\nDESCRIPTION: Custom image loader implementation for Cloudflare Images service\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/images.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function cloudflareLoader({ src, width, quality }) {\n  const params = [`width=${width}`, `quality=${quality || 75}`, 'format=auto']\n  return `https://example.com/cdn-cgi/image/${params.join(',')}/${src}`\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies with NextRequest\nDESCRIPTION: Example of setting a cookie using the cookies.set() method to hide a banner\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/next-request.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Given incoming request /home\n// Set a cookie to hide the banner\n// request will have a `Set-Cookie:show-banner=false;path=/home` header\nrequest.cookies.set('show-banner', 'false')\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS for Next.js\nDESCRIPTION: Tailwind configuration that specifies which files to scan for Tailwind class names, including paths for both standard directory structures and src-based structures.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/05-styling/02-tailwind-css.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    './app/**/*.{js,ts,jsx,tsx,mdx}', // Note the addition of the `app` directory.\n    './pages/**/*.{js,ts,jsx,tsx,mdx}',\n    './components/**/*.{js,ts,jsx,tsx,mdx}',\n\n    // Or if using `src` directory:\n    './src/**/*.{js,ts,jsx,tsx,mdx}',\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n```\n\n----------------------------------------\n\nTITLE: Root Layout with Tailwind CSS in App Router (TypeScript)\nDESCRIPTION: Root layout component that imports global CSS styles containing Tailwind directives, making them available throughout the application when using TypeScript with App Router.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/05-styling/02-tailwind-css.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Metadata } from 'next'\n\n// These styles apply to every route in the application\nimport './globals.css'\n\nexport const metadata: Metadata = {\n  title: 'Create Next App',\n  description: 'Generated by create next app',\n}\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Tag Manager in Next.js Pages Router\nDESCRIPTION: Example of how to include Google Tag Manager in a Next.js application using the Pages Router. The GoogleTagManager component is added to the custom _app file.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/12-third-party-libraries.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GoogleTagManager } from '@next/third-parties/google'\n\nexport default function MyApp({ Component, pageProps }) {\n  return (\n    <>\n      <Component {...pageProps} />\n      <GoogleTagManager gtmId=\"GTM-XYZ\" />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Converting HTML Structure to Root Layout Component\nDESCRIPTION: Converts the content from the index.html file to a React component, maintaining the HTML structure while replacing the root div with a component that renders children. This creates the shell of the application.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/04-from-vite.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\" />\n        <link rel=\"icon\" type=\"image/svg+xml\" href=\"/icon.svg\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <title>My App</title>\n        <meta name=\"description\" content=\"My App is a...\" />\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\" />\n        <link rel=\"icon\" type=\"image/svg+xml\" href=\"/icon.svg\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <title>My App</title>\n        <meta name=\"description\" content=\"My App is a...\" />\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Next.js Link Component Implementation\nDESCRIPTION: Demonstrates how to use the Next.js Link component to create client-side navigation between pages. Shows basic route mapping for home, about, and blog pages.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/01-routing/03-linking-and-navigating.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\nfunction Home() {\n  return (\n    <ul>\n      <li>\n        <Link href=\"/\">Home</Link>\n      </li>\n      <li>\n        <Link href=\"/about\">About Us</Link>\n      </li>\n      <li>\n        <Link href=\"/blog/hello-world\">Blog Post</Link>\n      </li>\n    </ul>\n  )\n}\n\nexport default Home\n```\n\n----------------------------------------\n\nTITLE: Configuring MDX Rust Compiler in Next.js Config\nDESCRIPTION: Configuration setup for enabling the Rust-based MDX compiler in Next.js. Includes setting up page extensions for MDX files and enabling the experimental mdxRs feature. Requires @next/mdx package as a dependency.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/mdxRs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst withMDX = require('@next/mdx')()\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  pageExtensions: ['ts', 'tsx', 'mdx'],\n  experimental: {\n    mdxRs: true,\n  },\n}\n\nmodule.exports = withMDX(nextConfig)\n```\n\n----------------------------------------\n\nTITLE: Disabling Scroll Restoration in Next.js Client Component (TypeScript)\nDESCRIPTION: This example demonstrates how to disable the default scroll restoration behavior when navigating to a new route using the useRouter hook in a Next.js Client Component.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/use-router.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { useRouter } from 'next/navigation'\n\nexport default function Page() {\n  const router = useRouter()\n\n  return (\n    <button\n      type=\"button\"\n      onClick={() => router.push('/dashboard', { scroll: false })}\n    >\n      Dashboard\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SWC Trace Profiling in Next.js\nDESCRIPTION: Configuration snippet to enable SWC transform traces generation in chromium trace event format. When enabled, SWC will generate trace files under the .next/ directory that can be visualized using Chrome's trace viewer or compatible flamegraph viewers.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/04-architecture/nextjs-compiler.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  experimental: {\n    swcTraceProfiling: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Fetching in Not Found Component (JavaScript)\nDESCRIPTION: This code snippet shows how to implement data fetching in a Not Found component using JavaScript in Next.js. It uses the headers function from next/headers to get the domain and fetches site data asynchronously.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/not-found.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Link from 'next/link'\nimport { headers } from 'next/headers'\n\nexport default async function NotFound() {\n  const headersList = headers()\n  const domain = headersList.get('host')\n  const data = await getSiteData(domain)\n  return (\n    <div>\n      <h2>Not Found: {data.name}</h2>\n      <p>Could not find requested resource</p>\n      <p>\n        View <Link href=\"/blog\">all posts</Link>\n      </p>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Form with Pages Router\nDESCRIPTION: A Next.js login form implementation using the Pages Router pattern. Handles form submission with email/password credentials and makes API calls for authentication.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/09-authentication/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FormEvent } from 'react'\nimport { useRouter } from 'next/router'\n\nexport default function LoginPage() {\n  const router = useRouter()\n\n  async function handleSubmit(event: FormEvent<HTMLFormElement>) {\n    event.preventDefault()\n\n    const formData = new FormData(event.currentTarget)\n    const email = formData.get('email')\n    const password = formData.get('password')\n\n    const response = await fetch('/api/auth/login', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ email, password }),\n    })\n\n    if (response.ok) {\n      router.push('/profile')\n    } else {\n      // Handle errors\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"email\" name=\"email\" placeholder=\"Email\" required />\n      <input type=\"password\" name=\"password\" placeholder=\"Password\" required />\n      <button type=\"submit\">Login</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Static Web Manifest Configuration in Next.js\nDESCRIPTION: Example of a static manifest.json file for Next.js applications that defines basic web application metadata including name, short name, description, and start URL.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/01-metadata/manifest.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"My Next.js Application\",\n  \"short_name\": \"Next.js App\",\n  \"description\": \"An application built with Next.js\",\n  \"start_url\": \"/\"\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Button Component in TypeScript\nDESCRIPTION: Defines a simple Button component using TypeScript syntax.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/04-absolute-imports-and-module-aliases.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Button() {\n  return <button>Click me</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Default Export for Middleware Function in Next.js\nDESCRIPTION: Example showing how to export a middleware function as the default export instead of a named export. This is an alternative to using the named 'middleware' export.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/middleware.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Example of default export\nexport default function middleware(request) {\n  // Middleware logic\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring dynamicParams Option in Next.js Route Segments (JavaScript)\nDESCRIPTION: Example showing how to configure the dynamicParams option in a Next.js route segment using JavaScript. This controls what happens when a dynamic segment is visited that wasn't generated with generateStaticParams.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/route-segment-config.mdx#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const dynamicParams = true // true | false,\n```\n\n----------------------------------------\n\nTITLE: Configuring transpilePackages in Next.js Configuration\nDESCRIPTION: This snippet demonstrates how to set up the transpilePackages option in the Next.js configuration file. It specifies packages to be automatically transpiled and bundled, replacing the need for next-transpile-modules.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/transpilePackages.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  transpilePackages: ['@acme/ui', 'lodash-es'],\n}\n\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: WithRouter HOC Usage with TypeScript in Next.js\nDESCRIPTION: Shows how to use withRouter Higher Order Component with TypeScript, including proper type definitions and class component implementation.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/02-functions/use-router.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react'\nimport { withRouter, NextRouter } from 'next/router'\n\ninterface WithRouterProps {\n  router: NextRouter\n}\n\ninterface MyComponentProps extends WithRouterProps {}\n\nclass MyComponent extends React.Component<MyComponentProps> {\n  render() {\n    return <p>{this.props.router.pathname}</p>\n  }\n}\n\nexport default withRouter(MyComponent)\n```\n\n----------------------------------------\n\nTITLE: Handling Locale-Specific Content in getStaticProps for Next.js\nDESCRIPTION: Shows how to handle locale-specific content in getStaticProps for Next.js pages. It demonstrates fetching posts based on the locale and returning notFound if no posts are available for that locale.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/01-routing/10-internationalization.mdx#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nexport async function getStaticProps({ locale }) {\n  // Call an external API endpoint to get posts.\n  // You can use any data fetching library\n  const res = await fetch(`https://.../posts?locale=${locale}`)\n  const posts = await res.json()\n\n  if (posts.length === 0) {\n    return {\n      notFound: true,\n    }\n  }\n\n  // By returning { props: posts }, the Blog component\n  // will receive `posts` as a prop at build time\n  return {\n    props: {\n      posts,\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring assetPrefix in Next.js Configuration\nDESCRIPTION: This snippet demonstrates how to set up the assetPrefix in next.config.js to use a CDN in production while using localhost for development. It uses an environment variable to determine the current environment.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/assetPrefix.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst isProd = process.env.NODE_ENV === 'production'\n\nmodule.exports = {\n  // Use the CDN in production and localhost for development.\n  assetPrefix: isProd ? 'https://cdn.mydomain.com' : undefined,\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting After Server Action in Next.js (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the redirect API to navigate the user to a different route after completing a Server Action. It also shows revalidating cached data before redirecting.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/02-server-actions-and-mutations.mdx#2025-04-22_snippet_31\n\nLANGUAGE: ts\nCODE:\n```\n'use server'\n\nimport { redirect } from 'next/navigation'\nimport { revalidateTag } from 'next/cache'\n\nexport async function createPost(id: string) {\n  try {\n    // ...\n  } catch (error) {\n    // ...\n  }\n\n  revalidateTag('posts') // Update cached posts\n  redirect(`/post/${id}`) // Navigate to the new post page\n}\n```\n\n----------------------------------------\n\nTITLE: Fastly Image Loader Implementation\nDESCRIPTION: Custom image loader implementation for Fastly image optimization service\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/images.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function fastlyLoader({ src, width, quality }) {\n  const url = new URL(`https://example.com${src}`)\n  url.searchParams.set('auto', 'webp')\n  url.searchParams.set('width', width.toString())\n  url.searchParams.set('quality', (quality || 75).toString())\n  return url.href\n}\n```\n\n----------------------------------------\n\nTITLE: Basic generateImageMetadata Implementation in TypeScript\nDESCRIPTION: Demonstrates the basic usage of generateImageMetadata function with params parameter in TypeScript. Shows how to handle dynamic route parameters.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-image-metadata.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport function generateImageMetadata({\n  params,\n}: {\n  params: { slug: string }\n}) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic OpenGraph Images with External Data in Next.js\nDESCRIPTION: This comprehensive example demonstrates how to create a dynamic OpenGraph image using external data and the ImageResponse API in Next.js. It includes setting runtime, image properties, and fetching post data based on the route parameter.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/01-metadata/opengraph-image.mdx#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ImageResponse } from 'next/og'\n\nexport const runtime = 'edge'\n\nexport const alt = 'About Acme'\nexport const size = {\n  width: 1200,\n  height: 630,\n}\nexport const contentType = 'image/png'\n\nexport default async function Image({ params }: { params: { slug: string } }) {\n  const post = await fetch(`https://.../posts/${params.slug}`).then((res) =>\n    res.json()\n  )\n\n  return new ImageResponse(\n    (\n      <div\n        style={{\n          fontSize: 48,\n          background: 'white',\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        {post.title}\n      </div>\n    ),\n    {\n      ...size,\n    }\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ImageResponse } from 'next/og'\n\nexport const runtime = 'edge'\n\nexport const alt = 'About Acme'\nexport const size = {\n  width: 1200,\n  height: 630,\n}\nexport const contentType = 'image/png'\n\nexport default async function Image({ params }) {\n  const post = await fetch(`https://.../posts/${params.slug}`).then((res) =>\n    res.json()\n  )\n\n  return new ImageResponse(\n    (\n      <div\n        style={{\n          fontSize: 48,\n          background: 'white',\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        {post.title}\n      </div>\n    ),\n    {\n      ...size,\n    }\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Headers in Next.js Route Handler\nDESCRIPTION: Demonstrates how to read headers using the 'headers' function from next/headers in a Route Handler. It also shows how to set headers in the response.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/12-route-handlers.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { headers } from 'next/headers'\n\nexport async function GET(request: Request) {\n  const headersList = headers()\n  const referer = headersList.get('referer')\n\n  return new Response('Hello, Next.js!', {\n    status: 200,\n    headers: { referer: referer },\n  })\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { headers } from 'next/headers'\n\nexport async function GET(request) {\n  const headersList = headers()\n  const referer = headersList.get('referer')\n\n  return new Response('Hello, Next.js!', {\n    status: 200,\n    headers: { referer: referer },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Form Handler in Next.js API Route\nDESCRIPTION: Creates an API endpoint to handle form submissions and create items on the server. Demonstrates basic request handling and response formatting in Next.js API Routes.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from 'next'\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  const data = req.body\n  const id = await createItem(data)\n  res.status(200).json({ id })\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function handler(req, res) {\n  const data = req.body\n  const id = await createItem(data)\n  res.status(200).json({ id })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing getServerSideProps in JavaScript for Next.js\nDESCRIPTION: This snippet shows how to use getServerSideProps to fetch data from an external API and pass it to a page component in Next.js using JavaScript. It demonstrates the basic structure of the function and how to use the fetched data in the page component.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/02-functions/get-server-side-props.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function getServerSideProps() {\n  // Fetch data from external API\n  const res = await fetch('https://api.github.com/repos/vercel/next.js')\n  const repo = await res.json()\n  // Pass data to the page via props\n  return { props: { repo } }\n}\n\nexport default function Page({ repo }) {\n  return (\n    <main>\n      <p>{repo.stargazers_count}</p>\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json Scripts for Next.js Deployment\nDESCRIPTION: This snippet shows the necessary scripts in package.json for building and starting a Next.js application in production. It includes commands for development, building, and starting the production server.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/10-deploying/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Not Found Component in Next.js (JavaScript)\nDESCRIPTION: This code snippet shows how to create a basic Not Found component using JavaScript in Next.js. It imports the Link component from next/link and renders a simple UI with a heading, message, and a link to return home.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/not-found.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function NotFound() {\n  return (\n    <div>\n      <h2>Not Found</h2>\n      <p>Could not find requested resource</p>\n      <Link href=\"/\">Return Home</Link>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Static Sitemap XML File in Next.js\nDESCRIPTION: Example of a static sitemap.xml file for a small Next.js application. The file follows the Sitemaps XML format and includes URLs with lastmod, changefreq, and priority attributes.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/01-metadata/sitemap.mdx#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n  <url>\n    <loc>https://acme.com</loc>\n    <lastmod>2023-04-06T15:02:24.021Z</lastmod>\n    <changefreq>yearly</changefreq>\n    <priority>1</priority>\n  </url>\n  <url>\n    <loc>https://acme.com/about</loc>\n    <lastmod>2023-04-06T15:02:24.021Z</lastmod>\n    <changefreq>monthly</changefreq>\n    <priority>0.8</priority>\n  </url>\n  <url>\n    <loc>https://acme.com/blog</loc>\n    <lastmod>2023-04-06T15:02:24.021Z</lastmod>\n    <changefreq>weekly</changefreq>\n    <priority>0.5</priority>\n  </url>\n</urlset>\n```\n\n----------------------------------------\n\nTITLE: Building Next.js Application for Production\nDESCRIPTION: Run the next build command to create a production-ready version of the application and catch any build errors.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/10-deploying/01-production-checklist.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnext build\n```\n\n----------------------------------------\n\nTITLE: Using Video Skeleton as Fallback UI in Next.js\nDESCRIPTION: This snippet demonstrates using a custom VideoSkeleton component as a fallback UI while streaming a video component with React Suspense in Next.js.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/02-videos.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Suspense } from 'react'\nimport VideoComponent from '../ui/VideoComponent.jsx'\nimport VideoSkeleton from '../ui/VideoSkeleton.jsx'\n\nexport default function Page() {\n  return (\n    <section>\n      <Suspense fallback={<VideoSkeleton />}>\n        <VideoComponent />\n      </Suspense>\n      {/* Other content of the page */}\n    </section>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime for getServerSideProps\nDESCRIPTION: Example showing how to explicitly set the runtime (Node.js or Edge) for a page using getServerSideProps.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/03-data-fetching/03-get-server-side-props.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const config = {\n  runtime: 'nodejs', // or \"edge\"\n}\n\nexport const getServerSideProps = async () => {}\n```\n\n----------------------------------------\n\nTITLE: Creating Font CSS Variables in Layout Component\nDESCRIPTION: Example showing how to create CSS variables for fonts in a Next.js app's layout component with App Router, allowing them to be used with any CSS solution across the application.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/03-fonts.mdx#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inter, Roboto_Mono } from 'next/font/google'\nimport styles from './global.css'\n\nconst inter = Inter({\n  subsets: ['latin'],\n  variable: '--font-inter',\n  display: 'swap',\n})\n\nconst roboto_mono = Roboto_Mono({\n  subsets: ['latin'],\n  variable: '--font-roboto-mono',\n  display: 'swap',\n})\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\" className={`${inter.variable} ${roboto_mono.variable}`}>\n      <body>\n        <h1>My App</h1>\n        <div>{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Inter, Roboto_Mono } from 'next/font/google'\n\nconst inter = Inter({\n  subsets: ['latin'],\n  variable: '--font-inter',\n  display: 'swap',\n})\n\nconst roboto_mono = Roboto_Mono({\n  subsets: ['latin'],\n  variable: '--font-roboto-mono',\n  display: 'swap',\n})\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\" className={`${inter.variable} ${roboto_mono.variable}`}>\n      <body>\n        <h1>My App</h1>\n        <div>{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Template in JavaScript\nDESCRIPTION: Basic JavaScript implementation of a Next.js template component that wraps child components. Accepts children as a required prop.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/template.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Template({ children }) {\n  return <div>{children}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Headers with i18n Support in Next.js\nDESCRIPTION: This snippet demonstrates how to configure headers with internationalization support in Next.js. It shows examples of handling locales automatically and manually, as well as matching specific routes.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/headers.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  i18n: {\n    locales: ['en', 'fr', 'de'],\n    defaultLocale: 'en',\n  },\n\n  async headers() {\n    return [\n      {\n        source: '/with-locale', // automatically handles all locales\n        headers: [\n          {\n            key: 'x-hello',\n            value: 'world',\n          },\n        ],\n      },\n      {\n        // does not handle locales automatically since locale: false is set\n        source: '/nl/with-locale-manual',\n        locale: false,\n        headers: [\n          {\n            key: 'x-hello',\n            value: 'world',\n          },\n        ],\n      },\n      {\n        // this matches '/' since `en` is the defaultLocale\n        source: '/en',\n        locale: false,\n        headers: [\n          {\n            key: 'x-hello',\n            value: 'world',\n          },\n        ],\n      },\n      {\n        // this gets converted to /(en|fr|de)/(.*) so will not match the top-level\n        // `/` or `/fr` routes like /:path* would\n        source: '/(.*)',\n        headers: [\n          {\n            key: 'x-hello',\n            value: 'world',\n          },\n        ],\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Instrumentation Register Function in TypeScript\nDESCRIPTION: This code demonstrates how to implement the required register function in TypeScript. It imports and uses the registerOTel function from @vercel/otel to set up instrumentation for a Next.js app.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/instrumentation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerOTel } from '@vercel/otel'\n\nexport function register() {\n  registerOTel('next-app')\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for Next.js using JavaScript\nDESCRIPTION: Jest configuration file using next/jest for a Next.js project with JavaScript.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/08-testing/02-jest.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst nextJest = require('next/jest')\n\n/** @type {import('jest').Config} */\nconst createJestConfig = nextJest({\n  // Provide the path to your Next.js app to load next.config.js and .env files in your test environment\n  dir: './',\n})\n\n// Add any custom config to be passed to Jest\nconst config = {\n  coverageProvider: 'v8',\n  testEnvironment: 'jsdom',\n  // Add more setup options before each test is run\n  // setupFilesAfterEnv: ['<rootDir>/jest.setup.ts'],\n}\n\n// createJestConfig is exported this way to ensure that next/jest can load the Next.js config which is async\nmodule.exports = createJestConfig(config)\n```\n\n----------------------------------------\n\nTITLE: Implementing getInitialProps in TypeScript\nDESCRIPTION: Example of implementing getInitialProps in a Next.js page component using TypeScript. The code fetches star count from GitHub API and passes it as props to the page component.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/02-functions/get-initial-props.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextPageContext } from 'next'\n\nPage.getInitialProps = async (ctx: NextPageContext) => {\n  const res = await fetch('https://api.github.com/repos/vercel/next.js')\n  const json = await res.json()\n  return { stars: json.stargazers_count }\n}\n\nexport default function Page({ stars }: { stars: number }) {\n  return stars\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fallback Rewrites for Incremental Adoption in Next.js\nDESCRIPTION: This snippet shows how to set up a fallback rewrite in Next.js to proxy requests to an existing website after checking all Next.js routes. This is useful for incremental adoption of Next.js.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/rewrites.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async rewrites() {\n    return {\n      fallback: [\n        {\n          source: '/:path*',\n          destination: `https://custom-routes-proxying-endpoint.vercel.app/:path*`,\n        },\n      ],\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies with NextResponse in TypeScript\nDESCRIPTION: Demonstrates how to set a cookie using the NextResponse.next() method and the cookies.set() function.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/next-response.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Given incoming request /home\nlet response = NextResponse.next()\n// Set a cookie to hide the banner\nresponse.cookies.set('show-banner', 'false')\n// Response will have a `Set-Cookie:show-banner=false;path=/home` header\nreturn response\n```\n\n----------------------------------------\n\nTITLE: Testing a Component Render with React Testing Library (Pages Router)\nDESCRIPTION: A Jest test for the Home component that verifies a level 1 heading is rendered correctly. Uses React Testing Library to render the component and query the DOM.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/08-testing/02-jest.mdx#2025-04-22_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport '@testing-library/jest-dom'\nimport { render, screen } from '@testing-library/react'\nimport Home from '../pages/index'\n\ndescribe('Home', () => {\n  it('renders a heading', () => {\n    render(<Home />)\n\n    const heading = screen.getByRole('heading', { level: 1 })\n\n    expect(heading).toBeInTheDocument()\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring module path aliases in tsconfig.json for Next.js\nDESCRIPTION: Configuration for module path aliases in tsconfig.json or jsconfig.json for a Next.js project.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/08-testing/02-jest.mdx#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"bundler\",\n    \"baseUrl\": \"./\",\n    \"paths\": {\n      \"@/components/*\": [\"components/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Next.js Rewrite Configuration\nDESCRIPTION: Simple example of configuring a basic URL rewrite in next.config.js to map /about to the root path\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/rewrites.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/about',\n        destination: '/',\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Maps Embed in Next.js App Router\nDESCRIPTION: This snippet demonstrates how to use the GoogleMapsEmbed component from @next/third-parties/google in a Next.js application using the App Router. It shows how to embed a Google Map of the Brooklyn Bridge with custom height and width settings.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/12-third-party-libraries.mdx#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GoogleMapsEmbed } from '@next/third-parties/google'\n\nexport default function Page() {\n  return (\n    <GoogleMapsEmbed\n      apiKey=\"XYZ\"\n      height={200}\n      width=\"100%\"\n      mode=\"place\"\n      q=\"Brooklyn+Bridge,New+York,NY\"\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Open Graph Images with TypeScript in Next.js\nDESCRIPTION: A TypeScript example showing how to generate an Open Graph image programmatically using the ImageResponse API from next/og. Includes runtime configuration, metadata definitions, and JSX for image rendering.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/01-metadata/opengraph-image.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ImageResponse } from 'next/og'\n\n// Route segment config\nexport const runtime = 'edge'\n\n// Image metadata\nexport const alt = 'About Acme'\nexport const size = {\n  width: 1200,\n  height: 630,\n}\n\nexport const contentType = 'image/png'\n\n// Image generation\nexport default async function Image() {\n  // Font\n  const interSemiBold = fetch(\n    new URL('./Inter-SemiBold.ttf', import.meta.url)\n  ).then((res) => res.arrayBuffer())\n\n  return new ImageResponse(\n    (\n      // ImageResponse JSX element\n      <div\n        style={{\n          fontSize: 128,\n          background: 'white',\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        About Acme\n      </div>\n    ),\n    // ImageResponse options\n    {\n      // For convenience, we can re-use the exported opengraph-image\n      // size config to also set the ImageResponse's width and height.\n      ...size,\n      fonts: [\n        {\n          name: 'Inter',\n          data: await interSemiBold,\n          style: 'normal',\n          weight: 400,\n        },\n      ],\n    }\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Launch Settings for Next.js Debugging\nDESCRIPTION: This JSON configuration sets up three debugging scenarios for Next.js in VS Code: server-side, client-side, and full stack debugging. It includes commands to launch the development server and open Chrome for client-side debugging.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/06-configuring/13-debugging.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Next.js: debug server-side\",\n      \"type\": \"node-terminal\",\n      \"request\": \"launch\",\n      \"command\": \"npm run dev\"\n    },\n    {\n      \"name\": \"Next.js: debug client-side\",\n      \"type\": \"chrome\",\n      \"request\": \"launch\",\n      \"url\": \"http://localhost:3000\"\n    },\n    {\n      \"name\": \"Next.js: debug full stack\",\n      \"type\": \"node-terminal\",\n      \"request\": \"launch\",\n      \"command\": \"npm run dev\",\n      \"serverReadyAction\": {\n        \"pattern\": \"- Local:.+(https?://.+)\",\n        \"uriFormat\": \"%s\",\n        \"action\": \"debugWithChrome\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Local Fonts in Next.js Pages Router\nDESCRIPTION: Example showing how to implement local fonts in a Next.js application using the Pages Router. The font is imported and applied to the main component in the _app.js file.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/03-fonts.mdx#2025-04-22_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport localFont from 'next/font/local'\n\n// Font files can be colocated inside of `pages`\nconst myFont = localFont({ src: './my-font.woff2' })\n\nexport default function MyApp({ Component, pageProps }) {\n  return (\n    <main className={myFont.className}>\n      <Component {...pageProps} />\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Absolute Imports in TypeScript\nDESCRIPTION: Demonstrates how to use absolute imports in a TypeScript Next.js page component.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/04-absolute-imports-and-module-aliases.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport Button from 'components/button'\n\nexport default function HomePage() {\n  return (\n    <>\n      <h1>Hello World</h1>\n      <Button />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Custom App with Shared Layout\nDESCRIPTION: Configuration of _app.js to implement a single shared layout across all pages.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/01-routing/01-pages-and-layouts.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport Layout from '../components/layout'\n\nexport default function MyApp({ Component, pageProps }) {\n  return (\n    <Layout>\n      <Component {...pageProps} />\n    </Layout>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CircleCI for Next.js Build Caching\nDESCRIPTION: CircleCI configuration that saves the Next.js cache directory between builds. This should be added to the save_cache step in your CircleCI config.yml file to persist the .next/cache directory.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/09-deploying/04-ci-build-caching.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - save_cache:\n      key: dependency-cache-{{ checksum \"yarn.lock\" }}\n      paths:\n        - ./node_modules\n        - ./.next/cache\n```\n\n----------------------------------------\n\nTITLE: Defining a Page Component in Next.js (JavaScript)\nDESCRIPTION: This snippet shows how to define a page component in Next.js using JavaScript. It demonstrates the basic structure of a page component with 'params' and 'searchParams' props, which are used for handling dynamic route parameters and URL search parameters respectively.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/page.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Page({ params, searchParams }) {\n  return <h1>My Page</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Params for Multiple Dynamic Segments from Top Down in Next.js\nDESCRIPTION: This example demonstrates how to generate params for multiple dynamic segments from the top down. It generates params for the [category] segment in the parent layout, which can then be used by child segments.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-static-params.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// Generate segments for [category]\nexport async function generateStaticParams() {\n  const products = await fetch('https://.../products').then((res) => res.json())\n\n  return products.map((product) => ({\n    category: product.category.slug,\n  }))\n}\n\nexport default function Layout({ params }: { params: { category: string } }) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Post Page with getStaticProps and getStaticPaths\nDESCRIPTION: Complete example of a dynamic post page implementing both getStaticPaths for route generation and getStaticProps for data fetching at build time.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/02-rendering/02-static-site-generation.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Post({ post }) {\n  // Render post...\n}\n\nexport async function getStaticPaths() {\n  // ...\n}\n\n// This also gets called at build time\nexport async function getStaticProps({ params }) {\n  // params contains the post `id`.\n  // If the route is like /posts/1, then params.id is 1\n  const res = await fetch(`https://.../posts/${params.id}`)\n  const post = await res.json()\n\n  // Pass post data to the page via props\n  return { props: { post } }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Analytics in Next.js Pages Router\nDESCRIPTION: Example of how to include Google Analytics in a Next.js application using the Pages Router. The GoogleAnalytics component is added to the custom _app file.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/12-third-party-libraries.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GoogleAnalytics } from '@next/third-parties/google'\n\nexport default function MyApp({ Component, pageProps }) {\n  return (\n    <>\n      <Component {...pageProps} />\n      <GoogleAnalytics gaId=\"G-XYZ\" />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Icon Configuration in Next.js Metadata\nDESCRIPTION: This snippet shows a more advanced configuration for icons in Next.js metadata, including multiple icon options, media queries for dark mode, and specifying sizes and types for Apple touch icons.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-metadata.mdx#2025-04-22_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  icons: {\n    icon: [\n      { url: '/icon.png' },\n      new URL('/icon.png', 'https://example.com'),\n      { url: '/icon-dark.png', media: '(prefers-color-scheme: dark)' },\n    ],\n    shortcut: ['/shortcut-icon.png'],\n    apple: [\n      { url: '/apple-icon.png' },\n      { url: '/apple-icon-x3.png', sizes: '180x180', type: 'image/png' },\n    ],\n    other: [\n      {\n        rel: 'apple-touch-icon-precomposed',\n        url: '/apple-touch-icon-precomposed.png',\n      },\n    ],\n  },\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"shortcut icon\" href=\"/shortcut-icon.png\" />\n<link rel=\"icon\" href=\"/icon.png\" />\n<link rel=\"icon\" href=\"https://example.com/icon.png\" />\n<link rel=\"icon\" href=\"/icon-dark.png\" media=\"(prefers-color-scheme: dark)\" />\n<link rel=\"apple-touch-icon\" href=\"/apple-icon.png\" />\n<link\n  rel=\"apple-touch-icon-precomposed\"\n  href=\"/apple-touch-icon-precomposed.png\"\n/>\n<link\n  rel=\"apple-touch-icon\"\n  href=\"/apple-icon-x3.png\"\n  sizes=\"180x180\"\n  type=\"image/png\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Rewriting URLs with NextResponse in TypeScript\nDESCRIPTION: Shows how to rewrite (proxy) a URL while preserving the original URL in the browser using NextResponse.rewrite() method.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/next-response.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from 'next/server'\n\n// Incoming request: /about, browser shows /about\n// Rewritten request: /proxy, browser shows /about\nreturn NextResponse.rewrite(new URL('/proxy', request.url))\n```\n\n----------------------------------------\n\nTITLE: Implementing Permanent Redirect with updateUsername Function\nDESCRIPTION: Shows how to use permanentRedirect function for handling permanent URL changes after updating a user's username. Includes cache revalidation and redirection to the new profile URL.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/06-redirecting.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n'use server'\n\nimport { permanentRedirect } from 'next/navigation'\nimport { revalidateTag } from 'next/cache'\n\nexport async function updateUsername(username: string, formData: FormData) {\n  try {\n    // Call database\n  } catch (error) {\n    // Handle errors\n  }\n\n  revalidateTag('username') // Update all references to the username\n  permanentRedirect(`/profile/${username}`) // Navigate to the new user profile\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'use server'\n\nimport { permanentRedirect } from 'next/navigation'\nimport { revalidateTag } from 'next/cache'\n\nexport async function updateUsername(username, formData) {\n  try {\n    // Call database\n  } catch (error) {\n    // Handle errors\n  }\n\n  revalidateTag('username') // Update all references to the username\n  permanentRedirect(`/profile/${username}`) // Navigate to the new user profile\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing styled-jsx Registry in Root Layout (JavaScript)\nDESCRIPTION: JavaScript implementation of the root layout component that integrates the styled-jsx registry. This setup ensures all styled-jsx styles are properly collected and injected during server-side rendering.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/05-styling/03-css-in-js.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport StyledJsxRegistry from './registry'\n\nexport default function RootLayout({ children }) {\n  return (\n    <html>\n      <body>\n        <StyledJsxRegistry>{children}</StyledJsxRegistry>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic API Route in Next.js (JavaScript)\nDESCRIPTION: This snippet shows the JavaScript version of creating a simple API route that returns a JSON response with a 200 status code.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/01-routing/07-api-routes.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function handler(req, res) {\n  res.status(200).json({ message: 'Hello from Next.js!' })\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Response Handling in Next.js Middleware\nDESCRIPTION: Shows how to produce custom responses directly from middleware using Response or NextResponse instances. Includes example of authentication check and error response.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/13-middleware.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextRequest } from 'next/server'\nimport { isAuthenticated } from '@lib/auth'\n\nexport const config = {\n  matcher: '/api/:function*',\n}\n\nexport function middleware(request: NextRequest) {\n  if (!isAuthenticated(request)) {\n    return Response.json(\n      { success: false, message: 'authentication failed' },\n      { status: 401 }\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Module Path Aliases in Next.js\nDESCRIPTION: This snippet demonstrates how to use module path aliases in Next.js to simplify imports. It shows the difference between a traditional relative import and an import using an alias.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/08-colocation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// before\nimport { Button } from '../../../components/button'\n\n// after\nimport { Button } from '@/components/button'\n```\n\n----------------------------------------\n\nTITLE: Implementing React Error Boundary Class Component in Next.js\nDESCRIPTION: Creates an Error Boundary class component that catches JavaScript errors, displays a fallback UI, and provides error recovery functionality. The component tracks error state and logs error information for debugging purposes.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/06-configuring/12-error-handling.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props)\n\n    // Define a state variable to track whether is an error or not\n    this.state = { hasError: false }\n  }\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI\n\n    return { hasError: true }\n  }\n  componentDidCatch(error, errorInfo) {\n    // You can use your own error logging service here\n    console.log({ error, errorInfo })\n  }\n  render() {\n    // Check if the error is thrown\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return (\n        <div>\n          <h2>Oops, there is an error!</h2>\n          <button\n            type=\"button\"\n            onClick={() => this.setState({ hasError: false })}\n          >\n            Try again?\n          </button>\n        </div>\n      )\n    }\n\n    // Return children components in case of no error\n\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundary\n```\n\n----------------------------------------\n\nTITLE: Using Next.js Metadata API (TypeScript)\nDESCRIPTION: This code snippet shows how to use Next.js's Metadata API to manage metadata for the application. It exports a metadata object with title and description, replacing the need for manual head tag management.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/05-from-create-react-app.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: 'React App',\n  description: 'Web site created with Next.js.',\n}\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Module Configuration for Font Variables\nDESCRIPTION: Defines CSS styles for applying the font family using CSS variables, including font weight and style specifications.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/font.mdx#2025-04-22_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.text {\n  font-family: var(--font-inter);\n  font-weight: 200;\n  font-style: italic;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Script Component with Additional Attributes in Next.js App Router\nDESCRIPTION: This snippet demonstrates how to use the Next.js Script component with additional attributes in the App Router. It includes 'nonce' for security and a custom data attribute.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/05-scripts.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport Script from 'next/script'\n\nexport default function Page() {\n  return (\n    <>\n      <Script\n        src=\"https://example.com/script.js\"\n        id=\"example-script\"\n        nonce=\"XUENAJFW\"\n        data-test=\"script\"\n      />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Interactive Next.js App Creation Commands\nDESCRIPTION: Various package manager commands to create a new Next.js application interactively. Supports npm, yarn, pnpm, and bun.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/06-create-next-app.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app\n```\n\nLANGUAGE: bash\nCODE:\n```\nbunx create-next-app\n```\n\n----------------------------------------\n\nTITLE: Client-side Navigation in Next.js Static Export\nDESCRIPTION: This example shows how to implement client-side navigation in a Next.js static export using the Link component. It creates an index page with links to different posts, enabling SPA-like behavior.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/10-deploying/02-static-exports.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <>\n      <h1>Index Page</h1>\n      <hr />\n      <ul>\n        <li>\n          <Link href=\"/post/1\">Post 1</Link>\n        </li>\n        <li>\n          <Link href=\"/post/2\">Post 2</Link>\n        </li>\n      </ul>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing View Count with useEffect in Next.js (JavaScript)\nDESCRIPTION: This snippet shows the JavaScript version of using the useEffect hook to invoke a Server Action for updating a view count when a component mounts. It uses useState for state management and calls an incrementViews action.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/02-server-actions-and-mutations.mdx#2025-04-22_snippet_24\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { incrementViews } from './actions'\nimport { useState, useEffect } from 'react'\n\nexport default function ViewCount({ initialViews }: { initialViews: number }) {\n  const [views, setViews] = useState(initialViews)\n\n  useEffect(() => {\n    const updateViews = async () => {\n      const updatedViews = await incrementViews()\n      setViews(updatedViews)\n    }\n\n    updateViews()\n  }, [])\n\n  return <p>Total Views: {views}</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js project with Jest using create-next-app\nDESCRIPTION: Command to create a new Next.js project with Jest configuration using the with-jest example.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/08-testing/02-jest.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest --example with-jest with-jest-app\n```\n\n----------------------------------------\n\nTITLE: Basic HTTP Headers Configuration in Next.js\nDESCRIPTION: Basic example of setting custom HTTP headers for a specific route using the headers configuration in next.config.js.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/headers.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async headers() {\n    return [\n      {\n        source: '/about',\n        headers: [\n          {\n            key: 'x-custom-header',\n            value: 'my custom header value',\n          },\n          {\n            key: 'x-another-custom-header',\n            value: 'my other custom header value',\n          },\n        ],\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Client Component with Children Slot in TypeScript\nDESCRIPTION: This code snippet demonstrates creating a Client Component in TypeScript that accepts children as props. The component includes a button with a state counter and renders the children passed to it, creating a slot for Server Components.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { useState } from 'react'\n\nexport default function ClientComponent({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  const [count, setCount] = useState(0)\n\n  return (\n    <>\n      <button onClick={() => setCount(count + 1)}>{count}</button>\n      {children}\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic URL Import Usage\nDESCRIPTION: Example of importing modules directly from an external URL in Next.js.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/urlImports.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { a, b, c } from 'https://example.com/assets/some/module.js'\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Data Fetching in Next.js Server Components\nDESCRIPTION: Example of type-safe data fetching in a Next.js Server Component. Demonstrates how the return value doesn't need serialization and can include complex types.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/01-typescript.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nasync function getData() {\n  const res = await fetch('https://api.example.com/...')\n  // The return value is *not* serialized\n  // You can return Date, Map, Set, etc.\n  return res.json()\n}\n\nexport default async function Page() {\n  const name = await getData()\n\n  return '...'\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Cookies with NextResponse in TypeScript\nDESCRIPTION: Shows how to retrieve a cookie value using the NextResponse.next() method and the cookies.get() function.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/next-response.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Given incoming request /home\nlet response = NextResponse.next()\n// { name: 'show-banner', value: 'false', Path: '/home' }\nresponse.cookies.get('show-banner')\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirects in getStaticProps\nDESCRIPTION: Example showing how to implement redirects from getStaticProps. This allows conditionally redirecting users based on data fetched during static generation.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/02-functions/get-static-props.mdx#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nexport async function getStaticProps(context) {\n  const res = await fetch(`https://...`)\n  const data = await res.json()\n\n  if (!data) {\n    return {\n      redirect: {\n        destination: '/',\n        permanent: false,\n        // statusCode: 301\n      },\n    }\n  }\n\n  return {\n    props: { data }, // will be passed to the page component as props\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fonts in Pages Router with _app.js\nDESCRIPTION: Example showing how to apply the Inter variable font globally in a Next.js app using the Pages Router by adding it to the _app.js file.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/03-fonts.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Inter } from 'next/font/google'\n\n// If loading a variable font, you don't need to specify the font weight\nconst inter = Inter({ subsets: ['latin'] })\n\nexport default function MyApp({ Component, pageProps }) {\n  return (\n    <main className={inter.className}>\n      <Component {...pageProps} />\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Link Component Usage in Next.js 13\nDESCRIPTION: Example of how to update the Link component usage from Next.js 12 to 13, removing the need for a nested anchor tag.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/02-app-router-migration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\n// Next.js 12: `<a>` has to be nested otherwise it's excluded\n<Link href=\"/about\">\n  <a>About</a>\n</Link>\n\n// Next.js 13: `<Link>` always renders `<a>` under the hood\n<Link href=\"/about\">\n  About\n</Link>\n```\n\n----------------------------------------\n\nTITLE: Running Bundle Analysis\nDESCRIPTION: Commands to run the bundle analysis using different package managers. This will generate and open a visual report in the browser.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/06-bundle-analyzer.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nANALYZE=true npm run build\n# or\nANALYZE=true yarn build\n# or\nANALYZE=true pnpm build\n```\n\n----------------------------------------\n\nTITLE: Handling Static Image Imports in Next.js\nDESCRIPTION: Demonstrates how to handle static image imports in Next.js compared to Create React App. Shows both the CRA approach and the required Next.js modifications using the Image component or img tag.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/05-from-create-react-app.mdx#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport image from './img.png'\n\nexport default function App() {\n  return <img src={image} />\n}\n```\n\n----------------------------------------\n\nTITLE: Using Google Fonts with CSS Variables for Tailwind CSS in App Router\nDESCRIPTION: Example showing how to use Google Fonts with CSS variables for integration with Tailwind CSS in Next.js App Router. This setup allows using the fonts with Tailwind's font family utilities.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/03-fonts.mdx#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inter, Roboto_Mono } from 'next/font/google'\n\nconst inter = Inter({\n  subsets: ['latin'],\n  display: 'swap',\n  variable: '--font-inter',\n})\n\nconst roboto_mono = Roboto_Mono({\n  subsets: ['latin'],\n  display: 'swap',\n  variable: '--font-roboto-mono',\n})\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\" className={`${inter.variable} ${roboto_mono.variable}`}>\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Inter, Roboto_Mono } from 'next/font/google'\n\nconst inter = Inter({\n  subsets: ['latin'],\n  display: 'swap',\n  variable: '--font-inter',\n})\n\nconst roboto_mono = Roboto_Mono({\n  subsets: ['latin'],\n  display: 'swap',\n  variable: '--font-roboto-mono',\n})\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\" className={`${inter.variable} ${roboto_mono.variable}`}>\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Opting Out of Caching for Individual Fetch Requests in Next.js\nDESCRIPTION: This code snippet shows how to opt out of caching for a specific fetch request in Next.js. By setting the cache option to 'no-store', the data will be fetched every time the fetch function is called.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/04-caching/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Opt out of caching for an individual `fetch` request\nfetch(`https://...`, { cache: 'no-store' })\n```\n\n----------------------------------------\n\nTITLE: Deleting Cookies with NextResponse in TypeScript\nDESCRIPTION: Shows how to delete a cookie using the NextResponse.next() method and the cookies.delete() function.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/next-response.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Given incoming request /home\nlet response = NextResponse.next()\n// Returns true for deleted, false is nothing is deleted\nresponse.cookies.delete('experiments')\n```\n\n----------------------------------------\n\nTITLE: Dynamic Web Manifest Generation in Next.js (TypeScript)\nDESCRIPTION: TypeScript implementation for generating a web manifest programmatically in Next.js, including icons configuration and theme settings using the MetadataRoute.Manifest type.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/01-metadata/manifest.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MetadataRoute } from 'next'\n\nexport default function manifest(): MetadataRoute.Manifest {\n  return {\n    name: 'Next.js App',\n    short_name: 'Next.js App',\n    description: 'Next.js App',\n    start_url: '/',\n    display: 'standalone',\n    background_color: '#fff',\n    theme_color: '#fff',\n    icons: [\n      {\n        src: '/favicon.ico',\n        sizes: 'any',\n        type: 'image/x-icon',\n      },\n    ],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: New Data Fetching Patterns in Next.js App Directory\nDESCRIPTION: Demonstrates the new data fetching approaches that replace getServerSideProps and getStaticProps, showing different caching strategies.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/02-app-router-migration.mdx#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport default async function Page() {\n  const staticData = await fetch(`https://...`, { cache: 'force-cache' })\n\n  const dynamicData = await fetch(`https://...`, { cache: 'no-store' })\n\n  const revalidatedData = await fetch(`https://...`, {\n    next: { revalidate: 10 },\n  })\n\n  return <div>...</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Adding TypeScript Types to Next.js API Routes\nDESCRIPTION: Demonstrates how to add type safety to Next.js API routes using TypeScript. This example defines a custom response data type and applies it to the NextApiResponse generic type.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/01-routing/07-api-routes.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from 'next'\n\ntype ResponseData = {\n  message: string\n}\n\nexport default function handler(\n  req: NextApiRequest,\n  res: NextApiResponse<ResponseData>\n) {\n  res.status(200).json({ message: 'Hello from Next.js!' })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing getStaticPaths with JavaScript\nDESCRIPTION: JavaScript example showing basic implementation of getStaticPaths and getStaticProps for dynamic routes in Next.js with GitHub API data fetching.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/02-functions/get-static-paths.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function getStaticPaths() {\n  return {\n    paths: [\n      {\n        params: {\n          name: 'next.js',\n        },\n      },\n    ],\n    fallback: true,\n  }\n}\n\nexport async function getStaticProps() {\n  const res = await fetch('https://api.github.com/repos/vercel/next.js')\n  const repo = await res.json()\n  return { props: { repo } }\n}\n\nexport default function Page({ repo }) {\n  return repo.stargazers_count\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Tailwind Directives to App Router's Global CSS\nDESCRIPTION: CSS file that includes the required Tailwind directives to inject generated styles into the application when using the App Router.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/05-styling/02-tailwind-css.mdx#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n----------------------------------------\n\nTITLE: Using Script Event Handlers in Next.js Client Components\nDESCRIPTION: Examples showing how to use event handlers like onLoad with the Script component to execute additional code after certain events. These handlers only work when used inside Client Components.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/05-scripts.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport Script from 'next/script'\n\nexport default function Page() {\n  return (\n    <>\n      <Script\n        src=\"https://example.com/script.js\"\n        onLoad={() => {\n          console.log('Script has loaded')\n        }}\n      />\n    </>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport Script from 'next/script'\n\nexport default function Page() {\n  return (\n    <>\n      <Script\n        src=\"https://example.com/script.js\"\n        onLoad={() => {\n          console.log('Script has loaded')\n        }}\n      />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Forwarding Headers with NextResponse.next() in TypeScript\nDESCRIPTION: Illustrates how to forward and modify headers when using NextResponse.next() method in middleware.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/next-response.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from 'next/server'\n\n// Given an incoming request...\nconst newHeaders = new Headers(request.headers)\n// Add a new header\nnewHeaders.set('x-version', '123')\n// And produce a response with the new headers\nreturn NextResponse.next({\n  request: {\n    // New request headers\n    headers: newHeaders,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Conditional Import of Node-specific OpenTelemetry Configuration in JavaScript\nDESCRIPTION: Implementation of instrumentation.js that conditionally imports node-specific OpenTelemetry configuration only when running in Node.js runtime.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/10-open-telemetry.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function register() {\n  if (process.env.NEXT_RUNTIME === 'nodejs') {\n    await import('./instrumentation.node.js')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Named Exports with next/dynamic in Next.js\nDESCRIPTION: This snippet demonstrates how to dynamically import a named export using next/dynamic. It shows how to return a specific component from the Promise returned by the import function.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/07-lazy-loading.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nexport function Hello() {\n  return <p>Hello!</p>\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport dynamic from 'next/dynamic'\n\nconst ClientComponent = dynamic(() =>\n  import('../components/hello').then((mod) => mod.Hello)\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Spans with OpenTelemetry API in Next.js\nDESCRIPTION: Example function that demonstrates how to create custom spans using the OpenTelemetry API. This function creates a 'fetchGithubStars' span to track a fetch request to GitHub.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/10-open-telemetry.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { trace } from '@opentelemetry/api'\n\nexport async function fetchGithubStars() {\n  return await trace\n    .getTracer('nextjs-example')\n    .startActiveSpan('fetchGithubStars', async (span) => {\n      try {\n        return await getValue()\n      } finally {\n        span.end()\n      }\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cache-Control Headers in Next.js API Routes\nDESCRIPTION: This snippet shows how to set Cache-Control headers in Next.js API routes using the res.setHeader method. It demonstrates setting a max-age value for caching.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/headers.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from 'next'\n\ntype ResponseData = {\n  message: string\n}\n\nexport default function handler(\n  req: NextApiRequest,\n  res: NextApiResponse<ResponseData>\n) {\n  res.setHeader('Cache-Control', 's-maxage=86400')\n  res.status(200).json({ message: 'Hello from Next.js!' })\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function handler(req, res) {\n  res.setHeader('Cache-Control', 's-maxage=86400')\n  res.status(200).json({ message: 'Hello from Next.js!' })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS CodeBuild for Next.js Build Caching\nDESCRIPTION: AWS CodeBuild configuration that specifies directories to cache between builds. This should be added to your buildspec.yml file to persist node_modules and the Next.js cache directory.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/09-deploying/04-ci-build-caching.mdx#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncache:\n  paths:\n    - 'node_modules/**/*' # Cache `node_modules` for faster `yarn` or `npm i`\n    - '.next/cache/**/*' # Cache Next.js for faster application rebuilds\n```\n\n----------------------------------------\n\nTITLE: Migrated Next.js Dashboard Page in JavaScript\nDESCRIPTION: Shows a dashboard page after migration to the app directory. The page component is simplified as layout functionality is now handled separately.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/02-app-router-migration.mdx#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Page() {\n  return <p>My Page</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useSelectedLayoutSegments in TypeScript\nDESCRIPTION: Example of using useSelectedLayoutSegments hook in a Next.js Client Component to display active route segments in a list. The component maps through the segments array and renders each segment as a list item.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/use-selected-layout-segments.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { useSelectedLayoutSegments } from 'next/navigation'\n\nexport default function ExampleClientComponent() {\n  const segments = useSelectedLayoutSegments()\n\n  return (\n    <ul>\n      {segments.map((segment, index) => (\n        <li key={index}>{segment}</li>\n      ))}\n    </ul>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Static Route Handler in Next.js for JSON Generation\nDESCRIPTION: This snippet illustrates how to create a static route handler in Next.js that generates a JSON file during the build process. It demonstrates rendering a static JSON response for the GET method.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/10-deploying/02-static-exports.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function GET() {\n  return Response.json({ name: 'Lee' })\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Rendering with useSearchParams\nDESCRIPTION: Demonstrates how to use useSearchParams in a dynamically rendered route with server-side logging capabilities.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/use-search-params.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { useSearchParams } from 'next/navigation'\n\nexport default function SearchBar() {\n  const searchParams = useSearchParams()\n\n  const search = searchParams.get('search')\n\n  // This will be logged on the server during the initial render\n  // and on the client on subsequent navigations.\n  console.log(search)\n\n  return <>Search: {search}</>\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport SearchBar from './search-bar'\n\nexport const dynamic = 'force-dynamic'\n\nexport default function Page() {\n  return (\n    <>\n      <nav>\n        <SearchBar />\n      </nav>\n      <h1>Dashboard</h1>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom App for Next.js Pages Router\nDESCRIPTION: TypeScript and JavaScript examples of creating a custom App file (_app.tsx/js) for the Pages Router, defining the global layout.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/01-getting-started/01-installation.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { AppProps } from 'next/app'\n\nexport default function App({ Component, pageProps }: AppProps) {\n  return <Component {...pageProps} />\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function App({ Component, pageProps }) {\n  return <Component {...pageProps} />\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Verification Metadata in Next.js\nDESCRIPTION: This snippet demonstrates how to set up verification metadata for various search engines and custom verification tags in a Next.js application.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-metadata.mdx#2025-04-22_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  verification: {\n    google: 'google',\n    yandex: 'yandex',\n    yahoo: 'yahoo',\n    other: {\n      me: ['my-email', 'my-link'],\n    },\n  },\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"google-site-verification\" content=\"google\" />\n<meta name=\"y_key\" content=\"yahoo\" />\n<meta name=\"yandex-verification\" content=\"yandex\" />\n<meta name=\"me\" content=\"my-email\" />\n<meta name=\"me\" content=\"my-link\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitest\nDESCRIPTION: Configuration file setup for Vitest with React and jsdom environment settings\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/08-testing/01-vitest.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vitest/config'\nimport react from '@vitejs/plugin-react'\n\nexport default defineConfig({\n  plugins: [react()],\n  test: {\n    environment: 'jsdom',\n  },\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'vitest/config'\nimport react from '@vitejs/plugin-react'\n\nexport default defineConfig({\n  plugins: [react()],\n  test: {\n    environment: 'jsdom',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind Classes in Pages Router Page (JavaScript)\nDESCRIPTION: Example of using Tailwind CSS utility classes in a Next.js page component with the Pages Router and JavaScript.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/05-styling/02-tailwind-css.mdx#2025-04-22_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Page() {\n  return <h1 className=\"text-3xl font-bold underline\">Hello, Next.js!</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Middleware Implementation with Link Component\nDESCRIPTION: Shows how to implement middleware for authentication and proper Link component usage with URL rewrites.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/link.mdx#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nexport function middleware(req) {\n  const nextUrl = req.nextUrl\n  if (nextUrl.pathname === '/dashboard') {\n    if (req.cookies.authToken) {\n      return NextResponse.rewrite(new URL('/auth/dashboard', req.url))\n    } else {\n      return NextResponse.rewrite(new URL('/public/dashboard', req.url))\n    }\n  }\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nimport Link from 'next/link'\nimport useIsAuthed from './hooks/useIsAuthed'\n\nexport default function Page() {\n  const isAuthed = useIsAuthed()\n  const path = isAuthed ? '/auth/dashboard' : '/public/dashboard'\n  return (\n    <Link as=\"/dashboard\" href={path}>\n      Dashboard\n    </Link>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Build Command Help Output\nDESCRIPTION: Displays the output of the Next.js build command help, showing available options and their descriptions for creating optimized production builds.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/08-next-cli.mdx#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nUsage: next build [directory] [options]\n\nCreates an optimized production build of your application. The output displays information\nabout each route.\n\nArguments:\n  [directory]                       A directory on which to build the application. If no\n                                    provided, the current directory will be\n                                    used.\n\nOptions:\n  -d, --debug                       Enables a more verbose build output.\n  --profile                         Enables production profiling for React.\n  --no-lint                         Disables linting.\n  --no-mangling                     Disables mangling.\n  --experimental-app-only           Builds only App Router routes.\n  --experimental-build-mode [mode]  Uses an experimental build mode. (choices: \"compile\"\n                                    \"generate\", default: \"default\")\n  -h, --help                        Displays this message.\n```\n\n----------------------------------------\n\nTITLE: Sending Google Tag Manager Events in Next.js\nDESCRIPTION: Example of how to send events to Google Tag Manager using the sendGTMEvent function in a Next.js application.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/12-third-party-libraries.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { sendGTMEvent } from '@next/third-parties/google'\n\nexport function EventButton() {\n  return (\n    <div>\n      <button\n        onClick={() => sendGTMEvent({ event: 'buttonClicked', value: 'xyz' })}\n      >\n        Send Event\n      </button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring serverComponentsExternalPackages in Next.js Configuration\nDESCRIPTION: This code snippet demonstrates how to set up the 'serverComponentsExternalPackages' option in the Next.js configuration file. It shows how to opt-out specific dependencies, in this case '@acme/ui', from Server Components bundling.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/serverComponentsExternalPackages.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  experimental: {\n    serverComponentsExternalPackages: ['@acme/ui'],\n  },\n}\n\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx for Streaming Responses in Next.js\nDESCRIPTION: This code snippet shows how to configure Next.js to set the X-Accel-Buffering header to 'no' for all paths, which is necessary for enabling streaming responses when using Nginx as a proxy.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/10-deploying/index.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async headers() {\n    return [\n      {\n        source: '/:path*{/}?',\n        headers: [\n          {\n            key: 'X-Accel-Buffering',\n            value: 'no',\n          },\n        ],\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using useSelectedLayoutSegment for Parallel Routes in Next.js\nDESCRIPTION: This snippet illustrates how to use the useSelectedLayoutSegment hook to read the active route segment within a parallel route slot. It demonstrates passing a parallelRoutesKey parameter to the hook.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/10-parallel-routes.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { useSelectedLayoutSegment } from 'next/navigation'\n\nexport default function Layout({ auth }: { auth: React.ReactNode }) {\n  const loginSegment = useSelectedLayoutSegment('auth')\n  // ...\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { useSelectedLayoutSegment } from 'next/navigation'\n\nexport default function Layout({ auth }) {\n  const loginSegment = useSelectedLayoutSegment('auth')\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing External Stylesheets in App Router\nDESCRIPTION: Example of importing external stylesheets from npm packages in the app router, demonstrating how to use third-party CSS frameworks like Bootstrap in a Next.js application.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/05-styling/01-css-modules.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport 'bootstrap/dist/css/bootstrap.css'\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body className=\"container\">{children}</body>\n    </html>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport 'bootstrap/dist/css/bootstrap.css'\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body className=\"container\">{children}</body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Color Scheme in TypeScript\nDESCRIPTION: Setting the color-scheme property in TypeScript to indicate the preferred color scheme for the document.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-viewport.mdx#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Viewport } from 'next'\n\nexport const viewport: Viewport = {\n  colorScheme: 'dark',\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Cookie Existence with NextRequest\nDESCRIPTION: Example of checking if a cookie exists using the cookies.has() method\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/next-request.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Returns true if cookie exists, false if it does not\nrequest.cookies.has('experiments')\n```\n\n----------------------------------------\n\nTITLE: Next.js Start Command Help Output in Bash\nDESCRIPTION: Help output for the 'next start' command, showing available options including port specification, hostname configuration, and keep-alive timeout settings for running a Next.js application in production.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/08-next-cli.mdx#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nUsage: next start [directory] [options]\n\nStarts Next.js in production mode. The application should be compiled with `next build`\nfirst.\n\nArguments:\n  [directory]                           A directory on which to start the application.\n                                        If not directory is provided, the current\n                                        directory will be used.\n\nOptions:\n  -p, --port <port>                     Specify a port number on which to start the\n                                        application. (default: 3000, env: PORT)\n  -H, --hostname <hostname>             Specify a hostname on which to start the\n                                        application (default: 0.0.0.0).\n  --keepAliveTimeout <keepAliveTimeout> Specify the maximum amount of milliseconds to wait\n                                        before closing the inactive connections.\n  -h, --help                            Displays this message.\n```\n\n----------------------------------------\n\nTITLE: Static Rendering with useSearchParams in TypeScript\nDESCRIPTION: Example of using useSearchParams in a statically rendered route with TypeScript, showing proper component organization with Suspense boundary.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/use-search-params.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { useSearchParams } from 'next/navigation'\n\nexport default function SearchBar() {\n  const searchParams = useSearchParams()\n\n  const search = searchParams.get('search')\n\n  // This will not be logged on the server when using static rendering\n  console.log(search)\n\n  return <>Search: {search}</>\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Suspense } from 'react'\nimport SearchBar from './search-bar'\n\nfunction SearchBarFallback() {\n  return <>placeholder</>\n}\n\nexport default function Page() {\n  return (\n    <>\n      <nav>\n        <Suspense fallback={<SearchBarFallback />}>\n          <SearchBar />\n        </Suspense>\n      </nav>\n      <h1>Dashboard</h1>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Generating RSS Feed using Route Handler in Next.js (TypeScript)\nDESCRIPTION: This code snippet shows how to create a Route Handler that generates an RSS feed in XML format. It sets the content type to 'text/xml' and uses dynamic rendering.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/12-route-handlers.mdx#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport const dynamic = 'force-dynamic' // defaults to auto\n\nexport async function GET() {\n  return new Response(\n    `<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<rss version=\"2.0\">\n\n<channel>\n  <title>Next.js Documentation</title>\n  <link>https://nextjs.org/docs</link>\n  <description>The React Framework for the Web</description>\n</channel>\n\n</rss>`,\n    {\n      headers: {\n        'Content-Type': 'text/xml',\n      },\n    }\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tab Groups with Parallel Routes in Next.js\nDESCRIPTION: This snippet demonstrates how to create tab groups using parallel routes in Next.js. It shows a layout component with navigation links for different tabs, allowing independent navigation within a slot.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/10-parallel-routes.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <>\n      <nav>\n        <Link href=\"/page-views\">Page Views</Link>\n        <Link href=\"/visitors\">Visitors</Link>\n      </nav>\n      <div>{children}</div>\n    </>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <>\n      <nav>\n        <Link href=\"/page-views\">Page Views</Link>\n        <Link href=\"/visitors\">Visitors</Link>\n      </nav>\n      <div>{children}</div>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing YouTube Embed in Next.js Pages Router\nDESCRIPTION: This code example demonstrates how to use the YouTubeEmbed component from @next/third-parties/google in a Next.js application using the Pages Router. It shows how to embed a YouTube video with custom height and player parameters.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/12-third-party-libraries.mdx#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { YouTubeEmbed } from '@next/third-parties/google'\n\nexport default function Page() {\n  return <YouTubeEmbed videoid=\"ogfYd705cRs\" height={400} params=\"controls=0\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Middleware Logic in Next.js (JavaScript)\nDESCRIPTION: This snippet demonstrates the JavaScript version of implementing conditional logic in Next.js middleware. It shows the same URL rewriting functionality as the TypeScript version.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/13-middleware.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NextResponse } from 'next/server'\n\nexport function middleware(request) {\n  if (request.nextUrl.pathname.startsWith('/about')) {\n    return NextResponse.rewrite(new URL('/about-2', request.url))\n  }\n\n  if (request.nextUrl.pathname.startsWith('/dashboard')) {\n    return NextResponse.rewrite(new URL('/dashboard/user', request.url))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Sitemap Programmatically with JavaScript in Next.js\nDESCRIPTION: JavaScript implementation for programmatically generating a sitemap in Next.js. Exports a default function that returns an array of URL objects with metadata properties.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/01-metadata/sitemap.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function sitemap() {\n  return [\n    {\n      url: 'https://acme.com',\n      lastModified: new Date(),\n      changeFrequency: 'yearly',\n      priority: 1,\n    },\n    {\n      url: 'https://acme.com/about',\n      lastModified: new Date(),\n      changeFrequency: 'monthly',\n      priority: 0.8,\n    },\n    {\n      url: 'https://acme.com/blog',\n      lastModified: new Date(),\n      changeFrequency: 'weekly',\n      priority: 0.5,\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Multiple Sitemaps with TypeScript in Next.js\nDESCRIPTION: Implementation for creating multiple sitemaps to handle large websites using the generateSitemaps function. This approach allows splitting the sitemap into chunks for sites with many URLs.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/01-metadata/sitemap.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BASE_URL } from '@/app/lib/constants'\n\nexport async function generateSitemaps() {\n  // Fetch the total number of products and calculate the number of sitemaps needed\n  return [{ id: 0 }, { id: 1 }, { id: 2 }, { id: 3 }]\n}\n\nexport default async function sitemap({\n  id,\n}: {\n  id: number\n}): Promise<MetadataRoute.Sitemap> {\n  // Google's limit is 50,000 URLs per sitemap\n  const start = id * 50000\n  const end = start + 50000\n  const products = await getProducts(\n    `SELECT id, date FROM products WHERE id BETWEEN ${start} AND ${end}`\n  )\n  return products.map((product) => ({\n    url: `${BASE_URL}/product/${id}`,\n    lastModified: product.date,\n  }))\n}\n```\n\n----------------------------------------\n\nTITLE: Preserving Route Information When Switching Locales in Next.js\nDESCRIPTION: Demonstrates how to switch only the locale while preserving all routing information, including dynamic route query values and hidden href query values, using the useRouter hook in Next.js.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/01-routing/10-internationalization.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useRouter } from 'next/router'\nconst router = useRouter()\nconst { pathname, asPath, query } = router\n// change just the locale and maintain all other route information including href's query\nrouter.push({ pathname, query }, asPath, { locale: nextLocale })\n```\n\n----------------------------------------\n\nTITLE: Using a Function for Dynamic Next.js Configuration\nDESCRIPTION: This snippet illustrates how to use a function to dynamically generate the Next.js configuration. It allows for more complex logic in determining the configuration options.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// @ts-check\n\nexport default (phase, { defaultConfig }) => {\n  /**\n   * @type {import('next').NextConfig}\n   */\n  const nextConfig = {\n    /* config options here */\n  }\n  return nextConfig\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimistic Updates with useOptimistic in Next.js\nDESCRIPTION: This snippet demonstrates how to use the useOptimistic hook to update the UI optimistically before a Server Action completes in a Next.js application.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/02-server-actions-and-mutations.mdx#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { useOptimistic } from 'react'\nimport { send } from './actions'\n\ntype Message = {\n  message: string\n}\n\nexport function Thread({ messages }: { messages: Message[] }) {\n  const [optimisticMessages, addOptimisticMessage] = useOptimistic<\n    Message[],\n    string\n  >(messages, (state, newMessage) => [...state, { message: newMessage }])\n\n  return (\n    <div>\n      {optimisticMessages.map((m, k) => (\n        <div key={k}>{m.message}</div>\n      ))}\n      <form\n        action={async (formData: FormData) => {\n          const message = formData.get('message')\n          addOptimisticMessage(message)\n          await send(message)\n        }}\n      >\n        <input type=\"text\" name=\"message\" />\n        <button type=\"submit\">Send</button>\n      </form>\n    </div>\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nimport { useOptimistic } from 'react'\nimport { send } from './actions'\n\nexport function Thread({ messages }) {\n  const [optimisticMessages, addOptimisticMessage] = useOptimistic(\n    messages,\n    (state, newMessage) => [...state, { message: newMessage }]\n  )\n\n  return (\n    <div>\n      {optimisticMessages.map((m) => (\n        <div>{m.message}</div>\n      ))}\n      <form\n        action={async (formData) => {\n          const message = formData.get('message')\n          addOptimisticMessage(message)\n          await send(message)\n        }}\n      >\n        <input type=\"text\" name=\"message\" />\n        <button type=\"submit\">Send</button>\n      </form>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Partial Prerendering in Next.js\nDESCRIPTION: Configuration code for enabling the experimental Partial Prerendering feature in next.config.js file by setting the ppr flag.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/partial-prerendering.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  experimental: {\n    ppr: true,\n  },\n}\n\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: Typing Next.js API Routes\nDESCRIPTION: Example of using built-in TypeScript types for Next.js API routes, showing how to type request and response objects.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/01-typescript.mdx#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from 'next'\n\nexport default function handler(req: NextApiRequest, res: NextApiResponse) {\n  res.status(200).json({ name: 'John Doe' })\n}\n```\n\n----------------------------------------\n\nTITLE: Query Object Structure for API Routes\nDESCRIPTION: Illustrates the JSON structure of query objects in different types of API routes. These examples show how parameters are formatted in regular, catch-all, and optional catch-all routes.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/01-routing/07-api-routes.mdx#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{ \"slug\": [\"a\"] }\n```\n\nLANGUAGE: json\nCODE:\n```\n{ \"slug\": [\"a\", \"b\"] }\n```\n\nLANGUAGE: json\nCODE:\n```\n{ } // GET `/api/post` (empty object)\n{ \"slug\": [\"a\"] } // `GET /api/post/a` (single-element array)\n{ \"slug\": [\"a\", \"b\"] } // `GET /api/post/a/b` (multi-element array)\n```\n\n----------------------------------------\n\nTITLE: Configuring Edge Runtime in Next.js Page Component\nDESCRIPTION: Example of how to specify Edge Runtime in a Next.js page component using the exported runtime variable. This configuration makes the page route segment run on the Edge Runtime instead of the default Node.js Runtime.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/03-rendering/04-edge-and-nodejs-runtimes.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const runtime = 'edge' // 'nodejs' (default) | 'edge'\n```\n\n----------------------------------------\n\nTITLE: Layout Component with Cached Data Fetching - TypeScript\nDESCRIPTION: Layout component implementation that uses the cached getItem function with a revalidation period of 1 hour. Demonstrates TypeScript typing for parameters.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/01-fetching-caching-and-revalidating.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getItem } from '@/utils/get-item'\n\nexport const revalidate = 3600 // revalidate the data at most every hour\n\nexport default async function Layout({\n  params: { id },\n}: {\n  params: { id: string }\n}) {\n  const item = await getItem(id)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Cypress E2E Configuration\nDESCRIPTION: Configuration setup for Cypress E2E testing with TypeScript and JavaScript options.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/08-testing/04-cypress.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  e2e: {\n    setupNodeEvents(on, config) {},\n  },\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  e2e: {\n    setupNodeEvents(on, config) {},\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Resource Hints Implementation in Next.js\nDESCRIPTION: Shows how to implement resource hints using ReactDOM methods for preload, preconnect, and DNS prefetch operations.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-metadata.mdx#2025-04-22_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport ReactDOM from 'react-dom'\n\nexport function PreloadResources() {\n  ReactDOM.preload('...', { as: '...' })\n  ReactDOM.preconnect('...', { crossOrigin: '...' })\n  ReactDOM.prefetchDNS('...')\n\n  return null\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport ReactDOM from 'react-dom'\n\nexport function PreloadResources() {\n  ReactDOM.preload('...', { as: '...' })\n  ReactDOM.preconnect('...', { crossOrigin: '...' })\n  ReactDOM.prefetchDNS('...')\n\n  return null\n}\n```\n\n----------------------------------------\n\nTITLE: Avoiding Duplicate Tags in Next.js Head Component\nDESCRIPTION: Example demonstrating how to use the key property with the Head component to prevent duplicate tags. When multiple Head components include tags with the same key, only the last instance will be rendered.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/01-components/head.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Head from 'next/head'\n\nfunction IndexPage() {\n  return (\n    <div>\n      <Head>\n        <title>My page title</title>\n        <meta property=\"og:title\" content=\"My page title\" key=\"title\" />\n      </Head>\n      <Head>\n        <meta property=\"og:title\" content=\"My new title\" key=\"title\" />\n      </Head>\n      <p>Hello world!</p>\n    </div>\n  )\n}\n\nexport default IndexPage\n```\n\n----------------------------------------\n\nTITLE: Integrating Web Vitals Component in App Router Layout\nDESCRIPTION: Shows how to integrate the WebVitals component into a root layout file in the App Router to track metrics across the application.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/08-analytics.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { WebVitals } from './_components/web-vitals'\n\nexport default function Layout({ children }) {\n  return (\n    <html>\n      <body>\n        <WebVitals />\n        {children}\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing getStaticProps in JavaScript for Next.js\nDESCRIPTION: This snippet shows how to use getStaticProps to fetch data from the GitHub API and render it in a Next.js page component using JavaScript syntax.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/03-data-fetching/01-get-static-props.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function getStaticProps() {\n  const res = await fetch('https://api.github.com/repos/vercel/next.js')\n  const repo = await res.json()\n  return { props: { repo } }\n}\n\nexport default function Page({ repo }) {\n  return repo.stargazers_count\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind Classes in Pages Router Page (TypeScript)\nDESCRIPTION: Example of using Tailwind CSS utility classes in a Next.js page component with the Pages Router and TypeScript.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/05-styling/02-tailwind-css.mdx#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Page() {\n  return <h1 className=\"text-3xl font-bold underline\">Hello, Next.js!</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Color Scheme HTML Output\nDESCRIPTION: The resulting HTML meta tag when configuring the color-scheme property.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-viewport.mdx#2025-04-22_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"color-scheme\" content=\"dark\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint rootDir for Next.js in Monorepos\nDESCRIPTION: Example of setting the rootDir in .eslintrc.json for projects where Next.js isn't installed in the root directory, such as monorepos.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/02-eslint.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"next\",\n  \"settings\": {\n    \"next\": {\n      \"rootDir\": \"packages/my-app/\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Icons in Next.js Metadata\nDESCRIPTION: This snippet demonstrates how to set up various icon types in the metadata configuration of a Next.js application. It includes options for standard icons, shortcut icons, and Apple touch icons.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-metadata.mdx#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  icons: {\n    icon: '/icon.png',\n    shortcut: '/shortcut-icon.png',\n    apple: '/apple-icon.png',\n    other: {\n      rel: 'apple-touch-icon-precomposed',\n      url: '/apple-touch-icon-precomposed.png',\n    },\n  },\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"shortcut icon\" href=\"/shortcut-icon.png\" />\n<link rel=\"icon\" href=\"/icon.png\" />\n<link rel=\"apple-touch-icon\" href=\"/apple-icon.png\" />\n<link\n  rel=\"apple-touch-icon-precomposed\"\n  href=\"/apple-touch-icon-precomposed.png\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using generateViewport Function in JavaScript\nDESCRIPTION: Example of using the dynamic generateViewport function in JavaScript to generate viewport settings based on parameters at request time.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-viewport.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nexport function generateViewport({ params }) {\n  return {\n    themeColor: '...',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using generateViewport Function in TypeScript\nDESCRIPTION: Example of using the dynamic generateViewport function in TypeScript to generate viewport settings based on parameters at request time.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-viewport.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport function generateViewport({ params }) {\n  return {\n    themeColor: '...',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Shallow Routing Implementation\nDESCRIPTION: Demonstrates shallow routing to update URL without triggering data fetching methods, including handling URL changes and query parameters.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/01-routing/03-linking-and-navigating.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react'\nimport { useRouter } from 'next/router'\n\n// Current URL is '/'\nfunction Page() {\n  const router = useRouter()\n\n  useEffect(() => {\n    // Always do navigations after the first render\n    router.push('/?counter=10', undefined, { shallow: true })\n  }, [])\n\n  useEffect(() => {\n    // The counter changed!\n  }, [router.query.counter])\n}\n\nexport default Page\n```\n\nLANGUAGE: jsx\nCODE:\n```\ncomponentDidUpdate(prevProps) {\n  const { pathname, query } = this.props.router\n  // verify props have changed to avoid an infinite loop\n  if (query.counter !== prevProps.router.query.counter) {\n    // fetch data based on the new query\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Default Babel Loader in Custom Webpack Rule\nDESCRIPTION: This example shows how to add a custom loader (mdx) that depends on the default babel-loader configuration. It demonstrates the usage of defaultLoaders.babel.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/webpack.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  webpack: (config, options) => {\n    config.module.rules.push({\n      test: /\\.mdx/,\n      use: [\n        options.defaultLoaders.babel,\n        {\n          loader: '@mdx-js/loader',\n          options: pluginOptions.options,\n        },\n      ],\n    })\n\n    return config\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Layout Integration for Web Vitals\nDESCRIPTION: Integration of the WebVitals component into the root layout file of a Next.js application.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/use-report-web-vitals.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { WebVitals } from './_components/web-vitals'\n\nexport default function Layout({ children }) {\n  return (\n    <html>\n      <body>\n        <WebVitals />\n        {children}\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Core Web Vitals ESLint Rules in Next.js\nDESCRIPTION: Configuration to enable the next/core-web-vitals ruleset in .eslintrc.json, which errors on rules affecting Core Web Vitals.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/02-eslint.mdx#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"next/core-web-vitals\"\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific ESLint Rules in Next.js\nDESCRIPTION: Example of modifying or disabling specific ESLint rules in .eslintrc.json for Next.js projects.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/02-eslint.mdx#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"next\",\n  \"rules\": {\n    \"react/no-unescaped-entities\": \"off\",\n    \"@next/next/no-page-custom-font\": \"off\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Redirecting with NextResponse in TypeScript\nDESCRIPTION: Demonstrates how to create a more complex redirect response by modifying the URL and adding search parameters.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/next-response.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from 'next/server'\n\n// Given an incoming request...\nconst loginUrl = new URL('/login', request.url)\n// Add ?from=/incoming-url to the /login URL\nloginUrl.searchParams.set('from', request.nextUrl.pathname)\n// And redirect to the new URL\nreturn NextResponse.redirect(loginUrl)\n```\n\n----------------------------------------\n\nTITLE: Using revalidateTag in a Server Action (TypeScript)\nDESCRIPTION: Example of using revalidateTag within a Next.js server action to invalidate cache tagged as 'posts' after adding a new post.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/revalidateTag.mdx#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n'use server'\n\nimport { revalidateTag } from 'next/cache'\n\nexport default async function submit() {\n  await addPost()\n  revalidateTag('posts')\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Layout with Modal Support in Next.js\nDESCRIPTION: This code creates a layout component that includes navigation and renders both the auth slot (for the modal) and the main content. It uses Next.js Link for navigation.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/10-parallel-routes.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Layout({\n  auth,\n  children,\n}: {\n  auth: React.ReactNode\n  children: React.ReactNode\n}) {\n  return (\n    <>\n      <nav>\n        <Link href=\"/login\">Open modal</Link>\n      </nav>\n      <div>{auth}</div>\n      <div>{children}</div>\n    </>\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Layout({ auth, children }) {\n  return (\n    <>\n      <nav>\n        <Link href=\"/login\">Open modal</Link>\n      </nav>\n      <div>{auth}</div>\n      <div>{children}</div>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Server Actions in Next.js v13\nDESCRIPTION: Enables Server Actions in Next.js versions prior to 14 by setting the experimental.serverActions flag to true in the Next.js configuration file.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/serverActions.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst config = {\n  experimental: {\n    serverActions: true,\n  },\n}\n\nmodule.exports = config\n```\n\n----------------------------------------\n\nTITLE: Using waitUntil in Next.js Middleware\nDESCRIPTION: Demonstrates how to use waitUntil method from NextFetchEvent to extend middleware lifetime for background operations like analytics tracking.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/13-middleware.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from 'next/server'\nimport type { NextFetchEvent, NextRequest } from 'next/server'\n\nexport function middleware(req: NextRequest, event: NextFetchEvent) {\n  event.waitUntil(\n    fetch('https://my-analytics-platform.com', {\n      method: 'POST',\n      body: JSON.stringify({ pathname: req.nextUrl.pathname }),\n    })\n  )\n\n  return NextResponse.next()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Absolute Title in Next.js Metadata\nDESCRIPTION: This snippet demonstrates how to use the 'absolute' property in the title configuration to ignore the title template set in parent segments.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-metadata.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: {\n    template: '%s | Acme',\n  },\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  title: {\n    template: '%s | Acme',\n  },\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: {\n    absolute: 'About',\n  },\n}\n\n// Output: <title>About</title>\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  title: {\n    absolute: 'About',\n  },\n}\n\n// Output: <title>About</title>\n```\n\n----------------------------------------\n\nTITLE: Configuring resolve extensions for Turbopack in Next.js\nDESCRIPTION: This snippet illustrates how to configure custom resolve extensions for Turbopack in the next.config.js file. It shows how to overwrite the original resolve extensions with a provided list.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/turbo.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  experimental: {\n    turbo: {\n      resolveExtensions: [\n        '.mdx',\n        '.tsx',\n        '.ts',\n        '.jsx',\n        '.js',\n        '.mjs',\n        '.json',\n      ],\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Imported Fonts in Layout Component with App Router\nDESCRIPTION: Example showing how to use a font imported from a utility file in a Next.js app's layout component with App Router, applying it globally to the application.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/03-fonts.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { inter } from './fonts'\n\nexport default function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <html lang=\"en\" className={inter.className}>\n      <body>\n        <div>{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { inter } from './fonts'\n\nexport default function Layout({ children }) {\n  return (\n    <html lang=\"en\" className={inter.className}>\n      <body>\n        <div>{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Runtime Environment Variables with Server Components\nDESCRIPTION: Demonstrates accessing runtime environment variables in React Server Components using noStore.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/03-environment-variables.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { unstable_noStore as noStore } from 'next/cache'\n\nexport default function Component() {\n  noStore()\n  const value = process.env.MY_VALUE\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Page Component Basic Example\nDESCRIPTION: Simple JavaScript page component implementation for dynamic routes without type definitions.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/09-dynamic-routes.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Page({ params }) {\n  return <h1>My Page</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Typing a Custom App Component in Next.js\nDESCRIPTION: Example of typing a custom App component in Next.js Pages Router using the built-in AppProps type.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/01-typescript.mdx#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport type { AppProps } from 'next/app'\n\nexport default function MyApp({ Component, pageProps }: AppProps) {\n  return <Component {...pageProps} />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ISR with getStaticProps in Pages Directory\nDESCRIPTION: Example of implementing Incremental Static Regeneration in the pages directory using getStaticProps with a revalidate parameter to automatically regenerate pages after 60 seconds.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/02-app-router-migration.mdx#2025-04-22_snippet_30\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function getStaticProps() {\n  const res = await fetch(`https://.../posts`)\n  const posts = await res.json()\n\n  return {\n    props: { posts },\n    revalidate: 60,\n  }\n}\n\nexport default function Index({ posts }) {\n  return (\n    <Layout>\n      <PostList posts={posts} />\n    </Layout>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Logging Settings\nDESCRIPTION: Configuration code for enabling full URL logging in Next.js fetch operations. This snippet demonstrates how to modify next.config.js to show complete URLs in console logs during development mode. Currently only applies to fetch API operations.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/logging.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  logging: {\n    fetches: {\n      fullUrl: true,\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Modal with Link-based Close in Next.js\nDESCRIPTION: This code creates a Modal component with a close link. It uses Next.js Link component to navigate to the home page, effectively closing the modal.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/10-parallel-routes.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport Link from 'next/link'\n\nexport function Modal({ children }: { children: React.ReactNode }) {\n  return (\n    <>\n      <Link href=\"/\">Close modal</Link>\n      <div>{children}</div>\n    </>\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport Link from 'next/link'\n\nexport function Modal({ children }) {\n  return (\n    <>\n      <Link href=\"/\">Close modal</Link>\n      <div>{children}</div>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Web Vitals Component for App Router\nDESCRIPTION: Client-side component implementation for monitoring Web Vitals in the App Router architecture.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/use-report-web-vitals.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { useReportWebVitals } from 'next/web-vitals'\n\nexport function WebVitals() {\n  useReportWebVitals((metric) => {\n    console.log(metric)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Color Scheme in JavaScript\nDESCRIPTION: Setting the color-scheme property in JavaScript to indicate the preferred color scheme for the document.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-viewport.mdx#2025-04-22_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nexport const viewport = {\n  colorScheme: 'dark',\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Path Parameter Headers\nDESCRIPTION: Shows how to use dynamic path parameters in header keys and values using path matching patterns.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/headers.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async headers() {\n    return [\n      {\n        source: '/blog/:slug',\n        headers: [\n          {\n            key: 'x-slug',\n            value: ':slug',\n          },\n          {\n            key: 'x-slug-:slug',\n            value: 'my other custom header value',\n          },\n        ],\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server with HTTPS\nDESCRIPTION: Shows how to start the Next.js development server with HTTPS using a self-signed certificate or custom certificates.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/08-next-cli.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnext dev --experimental-https\n```\n\nLANGUAGE: bash\nCODE:\n```\nnext dev --experimental-https --experimental-https-key ./certificates/localhost-key.pem --experimental-https-cert ./certificates/localhost.pem\n```\n\n----------------------------------------\n\nTITLE: Configuring Viewport Scale Properties in TypeScript\nDESCRIPTION: Setting viewport width, scale, and user scalability options in TypeScript to control the initial display and zooming behavior.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-viewport.mdx#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Viewport } from 'next'\n\nexport const viewport: Viewport = {\n  width: 'device-width',\n  initialScale: 1,\n  maximumScale: 1,\n  userScalable: false,\n  // Also supported by less commonly used\n  // interactiveWidget: 'resizes-visual',\n}\n```\n\n----------------------------------------\n\nTITLE: Blog Layout Implementation with Active Links\nDESCRIPTION: Demonstrates how to use the BlogNavLink component within a Next.js layout component to create a navigation menu with active states.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/use-selected-layout-segment.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BlogNavLink } from './blog-nav-link'\nimport getFeaturedPosts from './get-featured-posts'\n\nexport default async function Layout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  const featuredPosts = await getFeaturedPosts()\n  return (\n    <div>\n      {featuredPosts.map((post) => (\n        <div key={post.id}>\n          <BlogNavLink slug={post.slug}>{post.title}</BlogNavLink>\n        </div>\n      ))}\n      <div>{children}</div>\n    </div>\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { BlogNavLink } from './blog-nav-link'\nimport getFeaturedPosts from './get-featured-posts'\n\nexport default async function Layout({ children }) {\n  const featuredPosts = await getFeaturedPosts()\n  return (\n    <div>\n      {featuredPosts.map((post) => (\n        <div key={post.id}>\n          <BlogNavLink slug={post.slug}>{post.title}</BlogNavLink>\n        </div>\n      ))}\n      <div>{children}</div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS for Tailwind in Next.js\nDESCRIPTION: This snippet shows the configuration for PostCSS to use Tailwind CSS in a Next.js project. It sets up the necessary plugins for Tailwind and Autoprefixer.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/05-from-create-react-app.mdx#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in Next.js Static Props\nDESCRIPTION: Demonstrates how to access environment variables within getStaticProps for database connection.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/03-environment-variables.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function getStaticProps() {\n  const db = await myDB.connect({\n    host: process.env.DB_HOST,\n    username: process.env.DB_USER,\n    password: process.env.DB_PASS,\n  })\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Additional Arguments to Server Actions with TSX\nDESCRIPTION: Shows how to use JavaScript's bind method to pass additional arguments to a Server Action in a Client Component using TypeScript. This technique allows combining component state/props with form data for server processing.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/02-server-actions-and-mutations.mdx#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { updateUser } from './actions'\n\nexport function UserProfile({ userId }: { userId: string }) {\n  const updateUserWithId = updateUser.bind(null, userId)\n\n  return (\n    <form action={updateUserWithId}>\n      <input type=\"text\" name=\"name\" />\n      <button type=\"submit\">Update User Name</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Static Paths for Internationalized Dynamic Routes in Next.js\nDESCRIPTION: Demonstrates how to use getStaticPaths to generate static paths for internationalized dynamic routes in Next.js. The locale field is used to specify which locale should be rendered for each path.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/01-routing/10-internationalization.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport const getStaticPaths = ({ locales }) => {\n  return {\n    paths: [\n      // if no `locale` is provided only the defaultLocale will be generated\n      { params: { slug: 'post-1' }, locale: 'en-US' },\n      { params: { slug: 'post-1' }, locale: 'fr' },\n    ],\n    fallback: true,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Line Highlighting in TypeScript Code\nDESCRIPTION: Example of highlighting specific lines in code blocks using the highlight prop with different highlighting patterns.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/05-community/01-contribution-guide.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n  return <Link href=\"/about\">About</Link>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Cache TTL in Next.js\nDESCRIPTION: Sets the minimum cache TTL for optimized images through next.config.js configuration.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/image.mdx#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    minimumCacheTTL: 60,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Basic generateImageMetadata Implementation in JavaScript\nDESCRIPTION: Shows the basic implementation of generateImageMetadata function in JavaScript with params handling.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-image-metadata.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport function generateImageMetadata({ params }) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring dynamic Option in Next.js Route Segments (JavaScript)\nDESCRIPTION: Example showing how to configure the dynamic option in a Next.js route segment using JavaScript. This option controls the dynamic behavior of a layout or page to be static or dynamic.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/route-segment-config.mdx#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const dynamic = 'auto'\n// 'auto' | 'force-dynamic' | 'error' | 'force-static'\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Extensions with MDX Support\nDESCRIPTION: Configuration example showing how to add MDX support to Next.js while specifying allowed page extensions. Includes MDX setup and experimental MDX features.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/pageExtensions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst withMDX = require('@next/mdx')()\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  pageExtensions: ['ts', 'tsx', 'mdx'],\n  experimental: {\n    mdxRs: true,\n  },\n}\n\nmodule.exports = withMDX(nextConfig)\n```\n\n----------------------------------------\n\nTITLE: Configuring Simple Theme Color in JavaScript\nDESCRIPTION: Setting a simple theme color in the viewport object using JavaScript, which will add a theme-color meta tag to the page head.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-viewport.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nexport const viewport = {\n  themeColor: 'black',\n}\n```\n\n----------------------------------------\n\nTITLE: Setting metadataBase in Next.js\nDESCRIPTION: This snippet shows how to use metadataBase to set a base URL prefix for metadata fields that require a fully qualified URL.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-metadata.mdx#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  metadataBase: new URL('https://acme.com'),\n  alternates: {\n    canonical: '/',\n    languages: {\n      'en-US': '/en-US',\n      'de-DE': '/de-DE',\n    },\n  },\n  openGraph: {\n    images: '/og-image.png',\n  },\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"canonical\" href=\"https://acme.com\" />\n<link rel=\"alternate\" hreflang=\"en-US\" href=\"https://acme.com/en-US\" />\n<link rel=\"alternate\" hreflang=\"de-DE\" href=\"https://acme.com/de-DE\" />\n<meta property=\"og:image\" content=\"https://acme.com/og-image.png\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling Web Vitals Attribution in Next.js Configuration\nDESCRIPTION: This code snippet demonstrates how to enable Web Vitals attribution for specific metrics (CLS and LCP) in the Next.js configuration file. It uses the experimental webVitalsAttribution option to specify which metrics to track.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/webVitalsAttribution.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexperimental: {\n  webVitalsAttribution: ['CLS', 'LCP']\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Components with Loading State in Next.js 9\nDESCRIPTION: Example of how to customize the loading behavior for dynamically imported components in Next.js 9, which no longer show 'loading...' by default.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/10-upgrading/10-version-9.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport dynamic from 'next/dynamic'\n\nconst DynamicComponentWithCustomLoading = dynamic(\n  () => import('../components/hello2'),\n  {\n    loading: () => <p>Loading</p>,\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Subtitles to Video Component in Next.js\nDESCRIPTION: Shows how to enhance the video component by adding subtitle support using the HTML5 track element. The code fetches both video and subtitle files from Vercel Blob storage.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/02-videos.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nasync function VideoComponent({ fileName }) {\n  const {blobs} = await list({\n    prefix: fileName,\n    limit: 2\n  });\n  const { url } = blobs[0];\n  const { url: captionsUrl } = blobs[1];\n\n  return (\n    <video controls preload=\"none\" aria-label=\"Video player\">\n      <source src={url} type=\"video/mp4\" />\n      <track\n        src={captionsUrl}\n        kind=\"subtitles\"\n        srcLang=\"en\"\n        label=\"English\">\n      Your browser does not support the video tag.\n    </video>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Determining Locale from Request Headers in JavaScript\nDESCRIPTION: This snippet demonstrates how to determine the user's preferred locale based on the Accept-Language header using the @formatjs/intl-localematcher and negotiator libraries.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/14-internationalization.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { match } from '@formatjs/intl-localematcher'\nimport Negotiator from 'negotiator'\n\nlet headers = { 'accept-language': 'en-US,en;q=0.5' }\nlet languages = new Negotiator({ headers }).languages()\nlet locales = ['en-US', 'nl-NL', 'nl']\nlet defaultLocale = 'en-US'\n\nmatch(languages, locales, defaultLocale) // -> 'en-US'\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Maps with Next.js Script onReady Handler\nDESCRIPTION: Example showing how to initialize Google Maps using the Next.js Script component's onReady handler. The code demonstrates mounting a map component and reinitializing it on each component mount.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/script.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { useRef } from 'react'\nimport Script from 'next/script'\n\nexport default function Page() {\n  const mapRef = useRef()\n\n  return (\n    <>\n      <div ref={mapRef}></div>\n      <Script\n        id=\"google-maps\"\n        src=\"https://maps.googleapis.com/maps/api/js\"\n        onReady={() => {\n          new google.maps.Map(mapRef.current, {\n            center: { lat: -34.397, lng: 150.644 },\n            zoom: 8,\n          })\n        }}\n      />\n    </>\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nimport { useRef } from 'react'\nimport Script from 'next/script'\n\nexport default function Page() {\n  const mapRef = useRef()\n\n  return (\n    <>\n      <div ref={mapRef}></div>\n      <Script\n        id=\"google-maps\"\n        src=\"https://maps.googleapis.com/maps/api/js\"\n        onReady={() => {\n          new google.maps.Map(mapRef.current, {\n            center: { lat: -34.397, lng: 150.644 },\n            zoom: 8,\n          })\n        }}\n      />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring External URL Rewrites with Trailing Slashes in Next.js\nDESCRIPTION: This snippet demonstrates how to configure rewrites to external URLs when using the trailingSlash option in Next.js. It shows how to include trailing slashes in both source and destination parameters.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/rewrites.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  trailingSlash: true,\n  async rewrites() {\n    return [\n      {\n        source: '/blog/',\n        destination: 'https://example.com/blog/',\n      },\n      {\n        source: '/blog/:path*/',\n        destination: 'https://example.com/blog/:path*/',\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using unstable_noStore as a Replacement for Cache Options in Next.js\nDESCRIPTION: Shows how unstable_noStore can be used instead of passing cache options to fetch requests. This is useful when you want to opt out of caching for database queries or other non-fetch operations.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/unstable_noStore.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { unstable_noStore as noStore } from 'next/cache';\n\nexport default async function Component() {\n  noStore();\n  const result = await db.query(...);\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring crossOrigin in Next.js Configuration\nDESCRIPTION: Shows how to set up cross-origin handling for script tags in next.config.js. The configuration allows setting either 'anonymous' or 'use-credentials' as values to control how cross-origin requests are handled for script resources.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/crossOrigin.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  crossOrigin: 'anonymous',\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS for Custom Fonts\nDESCRIPTION: Configuration for Tailwind CSS to use custom fonts via CSS variables. This setup extends the theme configuration to use the CSS variables defined in the font implementation.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/03-fonts.mdx#2025-04-22_snippet_18\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    './pages/**/*.{js,ts,jsx,tsx}',\n    './components/**/*.{js,ts,jsx,tsx}',\n    './app/**/*.{js,ts,jsx,tsx}',\n  ],\n  theme: {\n    extend: {\n      fontFamily: {\n        sans: ['var(--font-inter)'],\n        mono: ['var(--font-roboto-mono)'],\n      },\n    },\n  },\n  plugins: [],\n}\n```\n\n----------------------------------------\n\nTITLE: Migrated Dashboard Layout as Client Component in Next.js\nDESCRIPTION: Shows how to convert a layout into a client component in the app directory using the 'use client' directive. This maintains interactive functionality that was previously in the pages directory.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/02-app-router-migration.mdx#2025-04-22_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n'use client' // this directive should be at top of the file, before any imports.\n\n// This is a Client Component\nexport default function DashboardLayout({ children }) {\n  return (\n    <div>\n      <h2>My Dashboard</h2>\n      {children}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Runtime-Specific Instrumentation in Next.js\nDESCRIPTION: Shows how to conditionally import runtime-specific code in Next.js instrumentation using the NEXT_RUNTIME environment variable to distinguish between Edge and Node.js environments.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/09-instrumentation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function register() {\n  if (process.env.NEXT_RUNTIME === 'nodejs') {\n    await import('./instrumentation-node')\n  }\n\n  if (process.env.NEXT_RUNTIME === 'edge') {\n    await import('./instrumentation-edge')\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function register() {\n  if (process.env.NEXT_RUNTIME === 'nodejs') {\n    await import('./instrumentation-node')\n  }\n\n  if (process.env.NEXT_RUNTIME === 'edge') {\n    await import('./instrumentation-edge')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ISR with fetch in App Directory\nDESCRIPTION: Example of implementing Incremental Static Regeneration in the app directory using fetch with revalidate option to cache requests for 60 seconds.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/02-app-router-migration.mdx#2025-04-22_snippet_31\n\nLANGUAGE: jsx\nCODE:\n```\nasync function getPosts() {\n  const res = await fetch(`https://.../posts`, { next: { revalidate: 60 } })\n  const data = await res.json()\n\n  return data.posts\n}\n\nexport default async function PostList() {\n  const posts = await getPosts()\n\n  return posts.map((post) => <div>{post.name}</div>)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Side Effects in Next.js Instrumentation\nDESCRIPTION: Demonstrates how to import packages with side effects within the register function of Next.js instrumentation. This pattern ensures side effects are properly contained.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/09-instrumentation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function register() {\n  await import('package-with-side-effect')\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function register() {\n  await import('package-with-side-effect')\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Output for Programmatically Generated Open Graph Image\nDESCRIPTION: The HTML head output for a programmatically generated Open Graph image, showing the meta tags created with the values from the exported metadata in the image generator file.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/01-metadata/opengraph-image.mdx#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<meta property=\"og:image\" content=\"<generated>\" />\n<meta property=\"og:image:alt\" content=\"About Acme\" />\n<meta property=\"og:image:type\" content=\"image/png\" />\n<meta property=\"og:image:width\" content=\"1200\" />\n<meta property=\"og:image:height\" content=\"630\" />\n```\n\n----------------------------------------\n\nTITLE: Getting Cookie Value with NextRequest\nDESCRIPTION: Example of retrieving a cookie value using the cookies.get() method\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/next-request.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Given incoming request /home\n// { name: 'show-banner', value: 'false', Path: '/home' }\nrequest.cookies.get('show-banner')\n```\n\n----------------------------------------\n\nTITLE: Per-Page Layout Implementation\nDESCRIPTION: Example of implementing page-specific layouts using getLayout pattern in Next.js.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/01-routing/01-pages-and-layouts.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Layout from '../components/layout'\nimport NestedLayout from '../components/nested-layout'\n\nexport default function Page() {\n  return (\n    /** Your content */\n  )\n}\n\nPage.getLayout = function getLayout(page) {\n  return (\n    <Layout>\n      <NestedLayout>{page}</NestedLayout>\n    </Layout>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function MyApp({ Component, pageProps }) {\n  // Use the layout defined at the page level, if available\n  const getLayout = Component.getLayout ?? ((page) => page)\n\n  return getLayout(<Component {...pageProps} />)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Modal in Next.js\nDESCRIPTION: This snippet shows how to create a login modal by intercepting the /login route. It imports Modal and Login components and renders them together.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/10-parallel-routes.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Modal } from '@/app/ui/modal'\nimport { Login } from '@/app/ui/login'\n\nexport default function Page() {\n  return (\n    <Modal>\n      <Login />\n    </Modal>\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Modal } from '@/app/ui/modal'\nimport { Login } from '@/app/ui/login'\n\nexport default function Page() {\n  return (\n    <Modal>\n      <Login />\n    </Modal>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Playwright Installation\nDESCRIPTION: Commands for manually installing Playwright using npm, yarn, or pnpm package managers.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/08-testing/03-playwright.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm init playwright\n# or\nyarn create playwright\n# or\npnpm create playwright\n```\n\n----------------------------------------\n\nTITLE: Securing Server Actions in Next.js\nDESCRIPTION: Demonstrates how to implement security checks within Server Actions to verify user authorization before executing sensitive operations.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/09-authentication/index.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n'use server'\n\n// ...\n\nexport async function serverAction() {\n  const session = await getSession()\n  const userRole = session?.user?.role\n\n  // Check if user is authorized to perform the action\n  if (userRole !== 'admin') {\n    throw new Error('Unauthorized access: User does not have admin privileges.')\n  }\n\n  // Proceed with the action for authorized users\n  // ... implementation of the action\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS for App Directory\nDESCRIPTION: Configuration for Tailwind CSS to include app directory files in content scanning.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/02-app-router-migration.mdx#2025-04-22_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  content: [\n    './app/**/*.{js,ts,jsx,tsx,mdx}',\n    './pages/**/*.{js,ts,jsx,tsx,mdx}',\n    './components/**/*.{js,ts,jsx,tsx,mdx}',\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Base ESLint Configuration for Next.js\nDESCRIPTION: The basic ESLint configuration that includes Next.js' default ruleset without the stricter Core Web Vitals rules.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/02-eslint.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"next\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Different Web Vital Metrics\nDESCRIPTION: Example showing how to handle different Web Vital metrics using a switch statement in the reporting function.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/use-report-web-vitals.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { useReportWebVitals } from 'next/web-vitals'\n\nexport function WebVitals() {\n  useReportWebVitals((metric) => {\n    switch (metric.name) {\n      case 'FCP': {\n        // handle FCP results\n      }\n      case 'LCP': {\n        // handle LCP results\n      }\n      // ...\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter Component with Client-side State in JavaScript\nDESCRIPTION: JavaScript version of the Counter component using useState hook for managing click count state. The component shows basic client-side interactivity implementation.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/03-rendering/02-client-components.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { useState } from 'react'\n\nexport default function Counter() {\n  const [count, setCount] = useState(0)\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>Click me</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic AMP Page in Next.js\nDESCRIPTION: This snippet demonstrates how to create an AMP-enabled page with the amp-timeago component. Next.js automatically imports the required AMP component scripts without manual imports.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/06-configuring/07-amp.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport const config = { amp: true }\n\nfunction MyAmpPage() {\n  const date = new Date()\n\n  return (\n    <div>\n      <p>Some time: {date.toJSON()}</p>\n      <amp-timeago\n        width=\"0\"\n        height=\"15\"\n        datetime={date.toJSON()}\n        layout=\"responsive\"\n      >\n        .\n      </amp-timeago>\n    </div>\n  )\n}\n\nexport default MyAmpPage\n```\n\n----------------------------------------\n\nTITLE: Upgrading to Next.js 12 with npm\nDESCRIPTION: Command to upgrade Next.js to version 12 using npm, including updates to React 17, React DOM 17, and eslint-config-next.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/10-upgrading/07-version-12.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i next@12 react@17 react-dom@17 eslint-config-next@12\n```\n\n----------------------------------------\n\nTITLE: Adding Type Safety with Segment Props\nDESCRIPTION: Adding TypeScript type safety to the generateViewport function with segment props for params and search parameters.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-viewport.mdx#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Viewport } from 'next'\n\ntype Props = {\n  params: { id: string }\n  searchParams: { [key: string]: string | string[] | undefined }\n}\n\nexport function generateViewport({ params, searchParams }: Props): Viewport {\n  return {\n    themeColor: 'black',\n  }\n}\n\nexport default function Page({ params, searchParams }: Props) {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Preferred Region in Next.js Pages and Layouts\nDESCRIPTION: The preferredRegion option allows specifying the preferred deployment region(s) for the page or layout. It supports various string and array values.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/route-segment-config.mdx#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nexport const preferredRegion = 'auto'\n// 'auto' | 'global' | 'home' | ['iad1', 'sfo1']\n```\n\nLANGUAGE: js\nCODE:\n```\nexport const preferredRegion = 'auto'\n// 'auto' | 'global' | 'home' | ['iad1', 'sfo1']\n```\n\n----------------------------------------\n\nTITLE: Simple Draft Mode Test Implementation\nDESCRIPTION: Example API route for testing draft mode manually from the browser.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/06-configuring/11-draft-mode.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function handler(req, res) {\n  res.setDraftMode({ enable: true })\n  res.end('Draft mode is enabled')\n}\n```\n\n----------------------------------------\n\nTITLE: Layout with Client-side Data Fetching\nDESCRIPTION: Example of implementing client-side data fetching in a layout component using SWR.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/01-routing/01-pages-and-layouts.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSWR from 'swr'\nimport Navbar from './navbar'\nimport Footer from './footer'\n\nexport default function Layout({ children }) {\n  const { data, error } = useSWR('/api/navigation', fetcher)\n\n  if (error) return <div>Failed to load</div>\n  if (!data) return <div>Loading...</div>\n\n  return (\n    <>\n      <Navbar links={data.links} />\n      <main>{children}</main>\n      <Footer />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: GetStaticProps Preview Mode Context\nDESCRIPTION: Example showing how to access preview mode data within getStaticProps using the context object.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/06-configuring/14-preview-mode.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function getStaticProps(context) {\n  // If you request this page with the preview mode cookies set:\n  //\n  // - context.preview will be true\n  // - context.previewData will be the same as\n  //   the argument used for `setPreviewData`.\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading to Next.js 12 with pnpm\nDESCRIPTION: Command to upgrade Next.js to version 12 using pnpm, including updates to React 17, React DOM 17, and eslint-config-next.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/10-upgrading/07-version-12.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm up next@12 react@17 react-dom@17 eslint-config-next@12\n```\n\n----------------------------------------\n\nTITLE: Updating Entrypoint Page with Client-Only Component (JavaScript)\nDESCRIPTION: This snippet shows the JavaScript version of updating the entrypoint page in Next.js to use the client-only component. It imports global CSS and the ClientOnly component.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/05-from-create-react-app.mdx#2025-04-22_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport '../../index.css'\nimport { ClientOnly } from './client'\n\nexport function generateStaticParams() {\n  return [{ slug: [''] }]\n}\n\nexport default function Page() {\n  return <ClientOnly />\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing AMP Component Version in Next.js\nDESCRIPTION: This snippet shows how to specify a custom version of an AMP component using next/head. This allows you to control which version of an AMP component is loaded rather than defaulting to the latest.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/06-configuring/07-amp.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Head from 'next/head'\n\nexport const config = { amp: true }\n\nfunction MyAmpPage() {\n  const date = new Date()\n\n  return (\n    <div>\n      <Head>\n        <script\n          async\n          key=\"amp-timeago\"\n          custom-element=\"amp-timeago\"\n          src=\"https://cdn.ampproject.org/v0/amp-timeago-0.1.js\"\n        />\n      </Head>\n\n      <p>Some time: {date.toJSON()}</p>\n      <amp-timeago\n        width=\"0\"\n        height=\"15\"\n        datetime={date.toJSON()}\n        layout=\"responsive\"\n      >\n        .\n      </amp-timeago>\n    </div>\n  )\n}\n\nexport default MyAmpPage\n```\n\n----------------------------------------\n\nTITLE: Creating Root Layout in Next.js App Router with JavaScript\nDESCRIPTION: Defines the required root layout component in JavaScript that must be included in the app directory. This component provides the HTML structure that wraps all pages and nested layouts.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/02-app-router-migration.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function RootLayout({\n  // Layouts must accept a children prop.\n  // This will be populated with nested layouts or pages\n  children,\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Page Component with Params Type\nDESCRIPTION: Example showing TypeScript type definition for page component params in a dynamic route.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/09-dynamic-routes.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function Page({ params }: { params: { slug: string } }) {\n  return <h1>My Page</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Cookies from NextRequest in Next.js Route Handler\nDESCRIPTION: This snippet shows how to read cookies directly from the NextRequest object in a Next.js Route Handler, demonstrating an alternative method to access cookies.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/12-route-handlers.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type NextRequest } from 'next/server'\n\nexport async function GET(request: NextRequest) {\n  const token = request.cookies.get('token')\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function GET(request) {\n  const token = request.cookies.get('token')\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Client-Only Component Wrapper\nDESCRIPTION: Implements a client component that dynamically imports the main App component with SSR disabled. This preserves the client-side nature of the original SPA while working within Next.js's rendering model.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/04-from-vite.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport React from 'react'\nimport dynamic from 'next/dynamic'\n\nconst App = dynamic(() => import('../../App'), { ssr: false })\n\nexport function ClientOnly() {\n  return <App />\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport React from 'react'\nimport dynamic from 'next/dynamic'\n\nconst App = dynamic(() => import('../../App'), { ssr: false })\n\nexport function ClientOnly() {\n  return <App />\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Header Matching\nDESCRIPTION: Complex example showing conditional header application based on request properties like headers, cookies, and query parameters.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/headers.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async headers() {\n    return [\n      {\n        source: '/:path*',\n        has: [\n          {\n            type: 'header',\n            key: 'x-add-header',\n          },\n        ],\n        headers: [\n          {\n            key: 'x-another-header',\n            value: 'hello',\n          },\n        ],\n      }\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Maps Embed in Next.js Pages Router\nDESCRIPTION: This code example shows how to use the GoogleMapsEmbed component from @next/third-parties/google in a Next.js application using the Pages Router. It embeds a Google Map of the Brooklyn Bridge with specified dimensions and search query.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/12-third-party-libraries.mdx#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GoogleMapsEmbed } from '@next/third-parties/google'\n\nexport default function Page() {\n  return (\n    <GoogleMapsEmbed\n      apiKey=\"XYZ\"\n      height={200}\n      width=\"100%\"\n      mode=\"place\"\n      q=\"Brooklyn+Bridge,New+York,NY\"\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking fonts in Jest for Next.js\nDESCRIPTION: Mock file for handling font imports in Jest tests for a Next.js project.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/08-testing/02-jest.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = new Proxy(\n  {},\n  {\n    get: function getter() {\n      return () => ({\n        className: 'className',\n        variable: 'variable',\n        style: { fontFamily: 'fontFamily' },\n      })\n    },\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Language-Specific JSON Dictionaries for Localization\nDESCRIPTION: These JSON snippets show examples of language-specific dictionaries used for localization in a Next.js application. They contain key-value pairs for translated strings.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/14-internationalization.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"products\": {\n    \"cart\": \"Add to Cart\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"products\": {\n    \"cart\": \"Toevoegen aan Winkelwagen\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring API Route Options in Next.js\nDESCRIPTION: This snippet shows how to export a config object to customize API route behavior, including body parsing and response size limits.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/01-routing/07-api-routes.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const config = {\n  api: {\n    bodyParser: {\n      sizeLimit: '1mb',\n    },\n  },\n  // Specifies the maximum allowed duration for this function to execute (in seconds)\n  maxDuration: 5,\n}\n```\n\n----------------------------------------\n\nTITLE: Vitest Unit Test Example\nDESCRIPTION: Sample unit test for the Page component using Vitest and React Testing Library\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/08-testing/01-vitest.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { expect, test } from 'vitest'\nimport { render, screen } from '@testing-library/react'\nimport Page from '../app/page'\n\ntest('Page', () => {\n  render(<Page />)\n  expect(screen.getByRole('heading', { level: 1, name: 'Home' })).toBeDefined()\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { expect, test } from 'vitest'\nimport { render, screen } from '@testing-library/react'\nimport Page from '../app/page'\n\ntest('Page', () => {\n  render(<Page />)\n  expect(screen.getByRole('heading', { level: 1, name: 'Home' })).toBeDefined()\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Specific Web Vitals Metrics in Pages Router\nDESCRIPTION: Shows how to handle different web vitals metrics using a switch statement in the Pages Router implementation.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/08-analytics.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useReportWebVitals } from 'next/web-vitals'\n\nfunction MyApp({ Component, pageProps }) {\n  useReportWebVitals((metric) => {\n    switch (metric.name) {\n      case 'FCP': {\n        // handle FCP results\n      }\n      case 'LCP': {\n        // handle LCP results\n      }\n      // ...\n    }\n  })\n\n  return <Component {...pageProps} />\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring resolve aliases for Turbopack in Next.js\nDESCRIPTION: This snippet shows how to configure resolve aliases for Turbopack in the next.config.js file. It demonstrates aliasing package imports and conditional aliasing for browser environments.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/turbo.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  experimental: {\n    turbo: {\n      resolveAlias: {\n        underscore: 'lodash',\n        mocha: { browser: 'mocha/browser-entry.js' },\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Error Boundary Component in Next.js _app.js\nDESCRIPTION: Shows how to import and implement the Error Boundary component in the Next.js _app.js file, wrapping the Component prop to catch errors across all pages of the application.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/06-configuring/12-error-handling.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// Import the ErrorBoundary component\nimport ErrorBoundary from '../components/ErrorBoundary'\n\nfunction MyApp({ Component, pageProps }) {\n  return (\n    // Wrap the Component prop with ErrorBoundary component\n    <ErrorBoundary>\n      <Component {...pageProps} />\n    </ErrorBoundary>\n  )\n}\n\nexport default MyApp\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom App with Router Key in Next.js\nDESCRIPTION: This example shows how to create a custom App component that uses the router.asPath as a key to force remounting of components when navigating between pages.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/02-functions/use-router.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useRouter } from 'next/router'\n\nexport default function MyApp({ Component, pageProps }) {\n  const router = useRouter()\n  return <Component key={router.asPath} {...pageProps} />\n}\n```\n\n----------------------------------------\n\nTITLE: Using userAgent Helper in Next.js Middleware (JavaScript)\nDESCRIPTION: This snippet shows the JavaScript version of using the userAgent helper in a Next.js middleware function. It performs the same task as the TypeScript version, detecting the device type and setting a viewport parameter in the URL based on whether the device is mobile or desktop.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/userAgent.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NextResponse, userAgent } from 'next/server'\n\nexport function middleware(request) {\n  const url = request.nextUrl\n  const { device } = userAgent(request)\n  const viewport = device.type === 'mobile' ? 'mobile' : 'desktop'\n  url.searchParams.set('viewport', viewport)\n  return NextResponse.rewrite(url)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an AMP-Only Page in Next.js\nDESCRIPTION: Implementation of an AMP-only page in Next.js. The config with amp: true ensures the page has no client-side runtime and is optimized with AMP Optimizer.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/02-functions/use-amp.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const config = { amp: true }\n\nfunction About(props) {\n  return <h3>My AMP About Page!</h3>\n}\n\nexport default About\n```\n\n----------------------------------------\n\nTITLE: Disabling Draft Mode in Next.js Route Handler\nDESCRIPTION: This snippet demonstrates how to create a Route Handler that disables Draft Mode in Next.js. It uses the draftMode function from next/headers to clear the Draft Mode cookie.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/11-draft-mode.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { draftMode } from 'next/headers'\n\nexport async function GET(request: Request) {\n  draftMode().disable()\n  return new Response('Draft mode is disabled')\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { draftMode } from 'next/headers'\n\nexport async function GET(request) {\n  draftMode().disable()\n  return new Response('Draft mode is disabled')\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Multiple Cookies with NextRequest\nDESCRIPTION: Example of retrieving multiple cookies using the cookies.getAll() method\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/next-request.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Given incoming request /home\n// [\n//   { name: 'experiments', value: 'new-pricing-page', Path: '/home' },\n//   { name: 'experiments', value: 'winter-launch', Path: '/home' },\n// ]\nrequest.cookies.getAll('experiments')\n// Alternatively, get all cookies for the request\nrequest.cookies.getAll()\n```\n\n----------------------------------------\n\nTITLE: Customizing Sass Options in Next.js Configuration\nDESCRIPTION: Configuration code for customizing Sass compiler options in the Next.js project. This example shows how to set includePaths to include a styles directory.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/05-styling/04-sass.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst path = require('path')\n\nmodule.exports = {\n  sassOptions: {\n    includePaths: [path.join(__dirname, 'styles')],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using the prefetch Prop with Link Component (TSX)\nDESCRIPTION: Illustrates how to use the prefetch prop with the Link component to disable prefetching of the linked route.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/link.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <Link href=\"/dashboard\" prefetch={false}>\n      Dashboard\n    </Link>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Router Events Usage Example\nDESCRIPTION: Example showing the correct way to handle router events using useEffect in Next.js 11.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/10-upgrading/08-version-11.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(() => {\n  const handleRouteChange = (url, { shallow }) => {\n    console.log(\n      `App is changing to ${url} ${\n        shallow ? 'with' : 'without'\n      } shallow routing`\n    )\n  }\n\n  router.events.on('routeChangeStart', handleRouteChange)\n\n  // If the component is unmounted, unsubscribe\n  // from the event with the `off` method:\n  return () => {\n    router.events.off('routeChangeStart', handleRouteChange)\n  }\n}, [router])\n```\n\n----------------------------------------\n\nTITLE: Configuring App Links in Next.js Metadata\nDESCRIPTION: This snippet shows how to set up app links for iOS, Android, and web platforms in the metadata configuration of a Next.js application.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-metadata.mdx#2025-04-22_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  appLinks: {\n    ios: {\n      url: 'https://nextjs.org/ios',\n      app_store_id: 'app_store_id',\n    },\n    android: {\n      package: 'com.example.android/package',\n      app_name: 'app_name_android',\n    },\n    web: {\n      url: 'https://nextjs.org/web',\n      should_fallback: true,\n    },\n  },\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<meta property=\"al:ios:url\" content=\"https://nextjs.org/ios\" />\n<meta property=\"al:ios:app_store_id\" content=\"app_store_id\" />\n<meta property=\"al:android:package\" content=\"com.example.android/package\" />\n<meta property=\"al:android:app_name\" content=\"app_name_android\" />\n<meta property=\"al:web:url\" content=\"https://nextjs.org/web\" />\n<meta property=\"al:web:should_fallback\" content=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Module Path Aliases in Next.js Configuration\nDESCRIPTION: This code snippet demonstrates how to configure module path aliases in the Next.js configuration file (next.config.js or next.config.mjs). It shows the use of the 'paths' option to define custom import paths.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/06-configuring/04-absolute-imports-and-module-aliases.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst nextConfig = {\n  reactStrictMode: true,\n  experimental: {\n    appDir: true,\n  },\n  compiler: {\n    styledComponents: true,\n  },\n}\n\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: Accessing Runtime Environment Variables in Next.js App Router\nDESCRIPTION: This React component demonstrates how to safely access runtime environment variables on the server during dynamic rendering in Next.js App Router. It uses the unstable_noStore function to opt out of static rendering and access process.env variables.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/10-deploying/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { unstable_noStore as noStore } from 'next/cache';\n\nexport default function Component() {\n  noStore();\n  // cookies(), headers(), and other dynamic functions\n  // will also opt into dynamic rendering, making\n  // this env variable is evaluated at runtime\n  const value = process.env.MY_VALUE\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js Dependency\nDESCRIPTION: Command to install the latest version of Next.js as a project dependency using npm.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/04-from-vite.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install next@latest\n```\n\n----------------------------------------\n\nTITLE: HTML Output for Alt Text Configuration\nDESCRIPTION: The HTML head output generated when configuring alt text for a programmatically generated Open Graph image, showing the meta tag created with the exported alt text value.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/01-metadata/opengraph-image.mdx#2025-04-22_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<meta property=\"og:image:alt\" content=\"My images alt text\" />\n```\n\n----------------------------------------\n\nTITLE: Updating Next.js and React packages using npm\nDESCRIPTION: Command to update Next.js, React, React DOM, and ESLint config to their latest versions using npm.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/03-version-14.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i next@latest react@latest react-dom@latest eslint-config-next@latest\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions for Next.js Build Caching\nDESCRIPTION: GitHub Actions workflow configuration that uses actions/cache to cache Next.js build files. This step should be added to your workflow file to cache npm packages and the Next.js cache directory.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/09-deploying/04-ci-build-caching.mdx#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nuses: actions/cache@v4\nwith:\n  # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node\n  path: |\n    ~/.npm\n    ${{ github.workspace }}/.next/cache\n  # Generate a new cache whenever packages or source files change.\n  key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}\n  # If source files changed but packages didn't, rebuild from a prior cache.\n  restore-keys: |\n    ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-\n```\n\n----------------------------------------\n\nTITLE: Creating a Snapshot Test for Pages Router\nDESCRIPTION: A Jest snapshot test for the Home component that captures the rendered output and compares it to a stored snapshot to detect unexpected UI changes.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/08-testing/02-jest.mdx#2025-04-22_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render } from '@testing-library/react'\nimport Home from '../pages/index'\n\nit('renders homepage unchanged', () => {\n  const { container } = render(<Home />)\n  expect(container).toMatchSnapshot()\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Duration for Server-Side Logic in Next.js\nDESCRIPTION: The maxDuration option sets a limit on the execution time of server-side logic. It requires Next.js version 13.4.10 or higher.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/route-segment-config.mdx#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nexport const maxDuration = 5\n```\n\nLANGUAGE: js\nCODE:\n```\nexport const maxDuration = 5\n```\n\n----------------------------------------\n\nTITLE: Defining Content Type for OpenGraph and Twitter Images in Next.js\nDESCRIPTION: This snippet shows how to set the content type for OpenGraph and Twitter images in Next.js. It exports a 'contentType' constant and an empty Image component.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/01-metadata/opengraph-image.mdx#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nexport const contentType = 'image/png'\n\nexport default function Image() {}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport const contentType = 'image/png'\n\nexport default function Image() {}\n```\n\n----------------------------------------\n\nTITLE: useSelectedLayoutSegments Hook Parameters Example\nDESCRIPTION: Code signature showing the optional parallelRoutesKey parameter that can be passed to useSelectedLayoutSegments to read active route segments within a specific parallel route slot.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/use-selected-layout-segments.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst segments = useSelectedLayoutSegments(parallelRoutesKey?: string)\n```\n\n----------------------------------------\n\nTITLE: Updating Package Scripts for Next.js\nDESCRIPTION: This snippet shows how to update the scripts in package.json for a Next.js application, replacing Vite-specific commands with Next.js commands.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/04-from-vite.mdx#2025-04-22_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tainted Data in Next.js Page Component (JavaScript)\nDESCRIPTION: This snippet demonstrates the JavaScript version of how attempting to pass tainted data to a client component in a Next.js page results in an error, showcasing the tainting mechanism's effectiveness.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/03-patterns.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getUserData } from './data'\n\nexport async function Page() {\n  const userData = await getUserData()\n  return (\n    <ClientComponent\n      user={userData} // this will cause an error because of taintObjectReference\n      address={userData.address} // this will cause an error because of taintUniqueValue\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Server Component with Data Fetching in Next.js Static Export\nDESCRIPTION: This example demonstrates a Server Component in Next.js that fetches data during the build process for static export. The component will be rendered into static HTML and a static payload for client navigation.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/10-deploying/02-static-exports.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default async function Page() {\n  // This fetch will run on the server during `next build`\n  const res = await fetch('https://api.example.com/...')\n  const data = await res.json()\n\n  return <main>...</main>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring dynamicParams Option in Next.js Route Segments (TypeScript)\nDESCRIPTION: Example showing how to configure the dynamicParams option in a Next.js route segment using TypeScript. This controls what happens when a dynamic segment is visited that wasn't generated with generateStaticParams.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/route-segment-config.mdx#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const dynamicParams = true // true | false,\n```\n\n----------------------------------------\n\nTITLE: Dynamic Web Manifest Generation in Next.js (JavaScript)\nDESCRIPTION: JavaScript implementation for generating a web manifest programmatically in Next.js, including icons configuration and theme settings.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/01-metadata/manifest.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function manifest() {\n  return {\n    name: 'Next.js App',\n    short_name: 'Next.js App',\n    description: 'Next.js App',\n    start_url: '/',\n    display: 'standalone',\n    background_color: '#fff',\n    theme_color: '#fff',\n    icons: [\n      {\n        src: '/favicon.ico',\n        sizes: 'any',\n        type: 'image/x-icon',\n      },\n    ],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing the Root Layout Component in Next.js\nDESCRIPTION: Creates the basic structure of a root layout component, which is required in Next.js App Router applications. This component wraps all pages in the application and is defined at the top level of the app directory.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/04-from-vite.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return null\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function RootLayout({ children }) {\n  return null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Code Evaluation in Next.js Edge Runtime\nDESCRIPTION: Configuration example for allowing specific dynamic code evaluation in Middleware or Edge API Routes. Uses the unstable_allowDynamic option to specify files or patterns where dynamic evaluation is permitted, though execution will still fail at runtime.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/07-edge.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport const config = {\n  runtime: 'edge', // for Edge API Routes only\n  unstable_allowDynamic: [\n    // allows a single file\n    '/lib/utilities.js',\n    // use a glob to allow anything in the function-bind 3rd party module\n    '/node_modules/function-bind/**',\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Build Behavior in Next.js Config\nDESCRIPTION: Shows how to disable ESLint error checking during production builds by setting ignoreDuringBuilds to true in next.config.js. This configuration allows builds to complete even when ESLint errors are present, though it's not recommended unless ESLint is configured elsewhere in the workflow.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/eslint.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  eslint: {\n    // Warning: This allows production builds to successfully complete even if\n    // your project has ESLint errors.\n    ignoreDuringBuilds: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a dynamic robots.txt file using TypeScript in Next.js\nDESCRIPTION: This snippet demonstrates how to create a dynamic robots.txt file using TypeScript in Next.js. It exports a function that returns a Robots object, which Next.js uses to generate the robots.txt content.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/01-metadata/robots.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MetadataRoute } from 'next'\n\nexport default function robots(): MetadataRoute.Robots {\n  return {\n    rules: {\n      userAgent: '*',\n      allow: '/',\n      disallow: '/private/',\n    },\n    sitemap: 'https://acme.com/sitemap.xml',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Font CSS Variables in Global Stylesheet\nDESCRIPTION: Example showing how to use font CSS variables in a global CSS file to apply fonts to specific elements throughout a Next.js application.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/03-fonts.mdx#2025-04-22_snippet_12\n\nLANGUAGE: css\nCODE:\n```\nhtml {\n  font-family: var(--font-inter);\n}\n\nh1 {\n  font-family: var(--font-roboto-mono);\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Scripts in Next.js Custom _app\nDESCRIPTION: Example showing how to load a third-party script for all routes in Pages Router by importing the Script component and including it in the custom _app file. The script will only load once, even when navigating between multiple pages.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/05-scripts.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport Script from 'next/script'\n\nexport default function MyApp({ Component, pageProps }) {\n  return (\n    <>\n      <Component {...pageProps} />\n      <Script src=\"https://example.com/script.js\" />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Gumlet Image Loader Implementation\nDESCRIPTION: Custom image loader implementation for Gumlet image transformation service\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/images.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function gumletLoader({ src, width, quality }) {\n  const url = new URL(`https://example.com${src}`)\n  url.searchParams.set('format', 'auto')\n  url.searchParams.set('w', width.toString())\n  url.searchParams.set('q', (quality || 75).toString())\n  return url.href\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Compilation Indicator in Next.js\nDESCRIPTION: This code snippet demonstrates how to disable the compilation indicator in a Next.js application by setting the buildActivity config to false in the devIndicators object.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/devIndicators.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  devIndicators: {\n    buildActivity: false,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: revalidatePath Function Parameters TypeScript Definition\nDESCRIPTION: TypeScript definition showing the parameters and return type of the revalidatePath function.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/revalidatePath.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrevalidatePath(path: string, type?: 'page' | 'layout'): void;\n```\n\n----------------------------------------\n\nTITLE: Generating Consistent Build ID in Next.js\nDESCRIPTION: This snippet demonstrates how to generate a consistent build ID in Next.js using the generateBuildId function in next.config.js. This is useful for ensuring consistency across multiple containers.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/10-deploying/index.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  generateBuildId: async () => {\n    // This could be anything, using the latest git hash\n    return process.env.GIT_HASH\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Importing External Stylesheets in Pages Router\nDESCRIPTION: Examples of importing external CSS from node_modules in the pages router, showing both global imports in _app.js and component-specific imports for third-party components.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/05-styling/01-css-modules.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport 'bootstrap/dist/css/bootstrap.css'\n\nexport default function MyApp({ Component, pageProps }) {\n  return <Component {...pageProps} />\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react'\nimport { Dialog } from '@reach/dialog'\nimport VisuallyHidden from '@reach/visually-hidden'\nimport '@reach/dialog/styles.css'\n\nfunction ExampleDialog(props) {\n  const [showDialog, setShowDialog] = useState(false)\n  const open = () => setShowDialog(true)\n  const close = () => setShowDialog(false)\n\n  return (\n    <div>\n      <button onClick={open}>Open Dialog</button>\n      <Dialog isOpen={showDialog} onDismiss={close}>\n        <button className=\"close-button\" onClick={close}>\n          <VisuallyHidden>Close</VisuallyHidden>\n          <span aria-hidden>×</span>\n        </button>\n        <p>Hello there. I am a dialog</p>\n      </Dialog>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SVG Support in Next.js Image Optimization\nDESCRIPTION: Configuration to enable SVG support with security measures through content security policy and disposition type.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/image.mdx#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    dangerouslyAllowSVG: true,\n    contentDispositionType: 'attachment',\n    contentSecurityPolicy: \"default-src 'self'; script-src 'none'; sandbox;\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring optimizePackageImports in Next.js\nDESCRIPTION: This snippet demonstrates how to configure the experimental.optimizePackageImports option in the Next.js configuration file. It allows specifying packages for which only actually used modules will be loaded, improving performance.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/optimizePackageImports.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  experimental: {\n    optimizePackageImports: ['package-name'],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Edge Runtime in Next.js Layout Component\nDESCRIPTION: Example of how to specify Edge Runtime at the layout level in Next.js. This configuration makes all routes under the layout run on the Edge Runtime instead of the default Node.js Runtime.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/03-rendering/04-edge-and-nodejs-runtimes.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const runtime = 'edge' // 'nodejs' (default) | 'edge'\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for Next.js with Babel\nDESCRIPTION: Jest configuration for Next.js projects using Babel instead of the Next.js Compiler.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/08-testing/02-jest.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  collectCoverage: true,\n  // on node 14.x coverage provider v8 offers good speed and more or less good report\n  coverageProvider: 'v8',\n  collectCoverageFrom: [\n    '**/*.{js,jsx,ts,tsx}',\n    '!**/*.d.ts',\n    '!**/node_modules/**',\n    '!<rootDir>/out/**',\n    '!<rootDir>/.next/**',\n    '!<rootDir>/*.config.js',\n    '!<rootDir>/coverage/**',\n  ],\n  moduleNameMapper: {\n    // Handle CSS imports (with CSS modules)\n    // https://jestjs.io/docs/webpack#mocking-css-modules\n    '^.+\\\\.module\\\\.(css|sass|scss)$': 'identity-obj-proxy',\n\n    // Handle CSS imports (without CSS modules)\n    '^.+\\\\.(css|sass|scss)$': '<rootDir>/__mocks__/styleMock.js',\n\n    // Handle image imports\n    // https://jestjs.io/docs/webpack#handling-static-assets\n    '^.+\\\\.(png|jpg|jpeg|gif|webp|avif|ico|bmp|svg)$/i': `<rootDir>/__mocks__/fileMock.js`,\n\n    // Handle module aliases\n    '^@/components/(.*)$': '<rootDir>/components/$1',\n\n    // Handle @next/font\n    '@next/font/(.*)': `<rootDir>/__mocks__/nextFontMock.js`,\n    // Handle next/font\n    'next/font/(.*)': `<rootDir>/__mocks__/nextFontMock.js`,\n    // Disable server-only\n    'server-only': `<rootDir>/__mocks__/empty.js`,\n  },\n  // Add more setup options before each test is run\n  // setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],\n  testPathIgnorePatterns: ['<rootDir>/node_modules/', '<rootDir>/.next/'],\n  testEnvironment: 'jsdom',\n  transform: {\n    // Use babel-jest to transpile tests with the next/babel preset\n    // https://jestjs.io/docs/configuration#transform-objectstring-pathtotransformer--pathtotransformer-object\n    '^.+\\\\.(js|jsx|ts|tsx)$': ['babel-jest', { presets: ['next/babel'] }],\n  },\n  transformIgnorePatterns: [\n    '/node_modules/',\n    '^.+\\\\.module\\\\.(css|sass|scss)$',\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Supabase Loader Implementation\nDESCRIPTION: Custom image loader implementation for Supabase storage image transformations\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/images.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function supabaseLoader({ src, width, quality }) {\n  const url = new URL(`https://example.com${src}`)\n  url.searchParams.set('width', width.toString())\n  url.searchParams.set('quality', (quality || 75).toString())\n  return url.href\n}\n```\n\n----------------------------------------\n\nTITLE: Using Inline Styles in React Component\nDESCRIPTION: Demonstrates the use of inline styles in a React component, which is a simple CSS-in-JS approach supported by Next.js.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/05-styling/03-css-in-js.mdx#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nfunction HiThere() {\n  return <p style={{ color: 'red' }}>hi there</p>\n}\n\nexport default HiThere\n```\n\n----------------------------------------\n\nTITLE: Configuring Twitter Card Metadata in Next.js\nDESCRIPTION: This snippet demonstrates how to set up Twitter Card metadata in a Next.js application, including card type, title, description, site and creator IDs, and images.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-metadata.mdx#2025-04-22_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  twitter: {\n    card: 'summary_large_image',\n    title: 'Next.js',\n    description: 'The React Framework for the Web',\n    siteId: '1467726470533754880',\n    creator: '@nextjs',\n    creatorId: '1467726470533754880',\n    images: ['https://nextjs.org/og.png'], // Must be an absolute URL\n  },\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"twitter:card\" content=\"summary_large_image\" />\n<meta name=\"twitter:site:id\" content=\"1467726470533754880\" />\n<meta name=\"twitter:creator\" content=\"@nextjs\" />\n<meta name=\"twitter:creator:id\" content=\"1467726470533754880\" />\n<meta name=\"twitter:title\" content=\"Next.js\" />\n<meta name=\"twitter:description\" content=\"The React Framework for the Web\" />\n<meta name=\"twitter:image\" content=\"https://nextjs.org/og.png\" />\n```\n\n----------------------------------------\n\nTITLE: Next.js Documentation Component Example\nDESCRIPTION: Demonstrates the usage of PagesOnly and AppOnly components for router-specific documentation content in Next.js docs\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n```\n\n----------------------------------------\n\nTITLE: Creating Default Component for Auth Slot in Next.js\nDESCRIPTION: This code creates a default component for the @auth slot that returns null. This ensures the modal is not rendered when it's not active.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/10-parallel-routes.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function Default() {\n  return null\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Default() {\n  return null\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Link Component Usage in Next.js 13\nDESCRIPTION: Example of how to use the Link component in Next.js 13, which no longer requires manually adding an <a> tag as a child. Shows both the old (Next.js 12) and new (Next.js 13) syntax.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/10-upgrading/06-version-13.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\n// Next.js 12: `<a>` has to be nested otherwise it's excluded\n<Link href=\"/about\">\n  <a>About</a>\n</Link>\n\n// Next.js 13: `<Link>` always renders `<a>` under the hood\n<Link href=\"/about\">\n  About\n</Link>\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Next.js\nDESCRIPTION: This snippet shows how to set up environment variables in a .env file for a Next.js application, including setting a custom base path.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/04-from-vite.mdx#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n# ...\nNEXT_PUBLIC_BASE_PATH=\"/some-base-path\"\n```\n\n----------------------------------------\n\nTITLE: Defining Props for default.js in Next.js Parallel Routes\nDESCRIPTION: The default.js file can receive an optional 'params' prop, which is an object containing dynamic route parameters from the root segment down to the slot's subpages.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/default.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Example usage of params in default.js\nexport default function Default({ params }) {\n  // params object contains dynamic route parameters\n  // e.g., { artist: 'zack', album: 'next' }\n  return (\n    <div>\n      <h1>Default Fallback</h1>\n      <p>Artist: {params.artist}</p>\n      <p>Album: {params.album}</p>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Jest configuration for Next.js\nDESCRIPTION: Command to generate a basic Jest configuration file for a Next.js project.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/08-testing/02-jest.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm init jest@latest\n# or\nyarn create jest@latest\n# or\npnpm create jest@latest\n```\n\n----------------------------------------\n\nTITLE: Installing @next/third-parties Package\nDESCRIPTION: Command to install the @next/third-parties package along with the latest version of Next.js using npm.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/12-third-party-libraries.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @next/third-parties@latest next@latest\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Next.js Documentation Project Directory\nDESCRIPTION: Command to change directory into the cloned Next.js documentation project folder after cloning the repository.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd next.js-docs\n```\n\n----------------------------------------\n\nTITLE: Removing Icon Link Tags for Automatic Asset Handling\nDESCRIPTION: Removes link tags for favicon and other assets since Next.js automatically handles these files when placed in the app directory. This leverages Next.js's file-based conventions for assets.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/04-from-vite.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <title>My App</title>\n        <meta name=\"description\" content=\"My App is a...\" />\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <title>My App</title>\n        <meta name=\"description\" content=\"My App is a...\" />\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Local Images with next/image in Next.js Pages Router\nDESCRIPTION: This example shows how to use a local image with the Next.js Image component in the Pages Router. It demonstrates automatic width and height detection and optional blur-up placeholder.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/01-images.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from 'next/image'\nimport profilePic from '../public/me.png'\n\nexport default function Page() {\n  return (\n    <Image\n      src={profilePic}\n      alt=\"Picture of the author\"\n      // width={500} automatically provided\n      // height={500} automatically provided\n      // blurDataURL=\"data:...\" automatically provided\n      // placeholder=\"blur\" // Optional blur-up while loading\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Origins in Next.js Config\nDESCRIPTION: Configuration example showing how to specify allowed origins for Server Actions in next.config.js. This is useful for applications using reverse proxies or multi-layered backend architectures where the server API differs from the production domain.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/02-server-actions-and-mutations.mdx#2025-04-22_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nmodule.exports = {\n  experimental: {\n    serverActions: {\n      allowedOrigins: ['my-proxy.com', '*.my-proxy.com'],\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing getServerSideProps with JavaScript\nDESCRIPTION: JavaScript version of getServerSideProps implementation for fetching GitHub repository data. Shows basic data fetching and prop passing without type definitions.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/03-data-fetching/03-get-server-side-props.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function getServerSideProps() {\n  // Fetch data from external API\n  const res = await fetch('https://api.github.com/repos/vercel/next.js')\n  const repo = await res.json()\n  // Pass data to the page via props\n  return { props: { repo } }\n}\n\nexport default function Page({ repo }) {\n  return (\n    <main>\n      <p>{repo.stargazers_count}</p>\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom ESLint Directories in Next.js Config\nDESCRIPTION: Example of specifying custom directories for ESLint to run on during production builds in next.config.js.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/02-eslint.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  eslint: {\n    dirs: ['pages', 'utils'], // Only run ESLint on the 'pages' and 'utils' directories during production builds (next build)\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirects in next.config.js for Next.js\nDESCRIPTION: This code snippet demonstrates how to set up redirects in a Next.js application using the next.config.js file. It shows the structure of the redirects array and provides examples of different redirect configurations.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/03-next-config-js/redirects.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async redirects() {\n    return [\n      {\n        source: '/about',\n        destination: '/',\n        permanent: true,\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Custom App with Tailwind CSS in Pages Router (JavaScript)\nDESCRIPTION: Custom App component that imports global CSS styles containing Tailwind directives, making them available throughout the application when using JavaScript with Pages Router.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/05-styling/02-tailwind-css.mdx#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n// These styles apply to every route in the application\nimport '@/styles/globals.css'\n\nexport default function App({ Component, pageProps }) {\n  return <Component {...pageProps} />\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Icon Generation with JavaScript\nDESCRIPTION: Full example showing both generateImageMetadata and Icon component implementation in JavaScript, demonstrating how to generate multiple icon sizes with ImageResponse.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-image-metadata.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ImageResponse } from 'next/og'\n\nexport function generateImageMetadata() {\n  return [\n    {\n      contentType: 'image/png',\n      size: { width: 48, height: 48 },\n      id: 'small',\n    },\n    {\n      contentType: 'image/png',\n      size: { width: 72, height: 72 },\n      id: 'medium',\n    },\n  ]\n}\n\nexport default function Icon({ id }) {\n  return new ImageResponse(\n    (\n      <div\n        style={{\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          fontSize: 88,\n          background: '#000',\n          color: '#fafafa',\n        }}\n      >\n        Icon {id}\n      </div>\n    )\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Weights and Styles for a Font\nDESCRIPTION: Example showing how to specify multiple weights and styles for a font by using arrays in the font configuration object, allowing for more typography flexibility.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/03-fonts.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst roboto = Roboto({\n  weight: ['400', '700'],\n  style: ['normal', 'italic'],\n  subsets: ['latin'],\n  display: 'swap',\n})\n```\n\n----------------------------------------\n\nTITLE: Generating a dynamic robots.txt file using JavaScript in Next.js\nDESCRIPTION: This snippet shows how to create a dynamic robots.txt file using JavaScript in Next.js. It exports a function that returns a Robots object, which Next.js uses to generate the robots.txt content.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/01-metadata/robots.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function robots() {\n  return {\n    rules: {\n      userAgent: '*',\n      allow: '/',\n      disallow: '/private/',\n    },\n    sitemap: 'https://acme.com/sitemap.xml',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Image Sizes for Optimization\nDESCRIPTION: Configuration for specifying image width values used in generating srcsets for optimized images.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/image.mdx#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    imageSizes: [16, 32, 48, 64, 96, 128, 256, 384],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Router Events Handling in Next.js\nDESCRIPTION: Demonstrates how to subscribe to and handle various router events like routeChangeStart and routeChangeError using Custom App component.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/02-functions/use-router.mdx#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react'\nimport { useRouter } from 'next/router'\n\nexport default function MyApp({ Component, pageProps }) {\n  const router = useRouter()\n\n  useEffect(() => {\n    const handleRouteChange = (url, { shallow }) => {\n      console.log(\n        `App is changing to ${url} ${\n          shallow ? 'with' : 'without'\n        } shallow routing`\n      )\n    }\n\n    router.events.on('routeChangeStart', handleRouteChange)\n\n    return () => {\n      router.events.off('routeChangeStart', handleRouteChange)\n    }\n  }, [router])\n\n  return <Component {...pageProps} />\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js ESLint Plugin\nDESCRIPTION: This bash snippet demonstrates how to install the Next.js ESLint plugin using various package managers.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/02-eslint.mdx#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @next/eslint-plugin-next\n\nyarn add --dev @next/eslint-plugin-next\n\npnpm add --save-dev @next/eslint-plugin-next\n\nbun add --dev @next/eslint-plugin-next\n```\n\n----------------------------------------\n\nTITLE: TypeScript Metadata Configuration in Next.js\nDESCRIPTION: Examples of adding type safety to metadata using TypeScript, including various function patterns and JSDoc annotations.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-metadata.mdx#2025-04-22_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: 'Next.js',\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Metadata } from 'next'\n\nexport function generateMetadata(): Metadata {\n  return {\n    title: 'Next.js',\n  }\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Metadata } from 'next'\n\nexport async function generateMetadata(): Promise<Metadata> {\n  return {\n    title: 'Next.js',\n  }\n}\n```\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import(\"next\").Metadata} */\nexport const metadata = {\n  title: 'Next.js',\n}\n```\n\n----------------------------------------\n\nTITLE: Large-scale Redirect Handler using Edge Config (JavaScript)\nDESCRIPTION: JavaScript version of the scalable redirect system using Vercel's Edge Config and Next.js Middleware. Handles redirects by looking up destinations in a database.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/06-redirecting.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NextResponse } from 'next/server'\nimport { get } from '@vercel/edge-config'\n\nexport async function middleware(request) {\n  const pathname = request.nextUrl.pathname\n  const redirectData = await get(pathname)\n\n  if (redirectData) {\n    const redirectEntry = JSON.parse(redirectData)\n    const statusCode = redirectEntry.permanent ? 308 : 307\n    return NextResponse.redirect(redirectEntry.destination, statusCode)\n  }\n\n  // No redirect found, continue without redirecting\n  return NextResponse.next()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Extensions with Explicit Page Suffix\nDESCRIPTION: Configuration example showing how to require a .page suffix for all Next.js pages, which helps separate page files from other files in the pages directory.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/pageExtensions.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  pageExtensions: ['page.tsx', 'page.ts', 'page.jsx', 'page.js'],\n}\n```\n\n----------------------------------------\n\nTITLE: Manual OpenTelemetry Configuration for Node.js in JavaScript\nDESCRIPTION: Implementation of instrumentation.node.js that manually configures OpenTelemetry SDK for Node.js with an OTLP HTTP exporter.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/10-open-telemetry.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NodeSDK } from '@opentelemetry/sdk-node'\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http'\nimport { Resource } from '@opentelemetry/resources'\nimport { SEMRESATTRS_SERVICE_NAME } from '@opentelemetry/semantic-conventions'\nimport { SimpleSpanProcessor } from '@opentelemetry/sdk-trace-node'\n\nconst sdk = new NodeSDK({\n  resource: new Resource({\n    [SEMRESATTRS_SERVICE_NAME]: 'next-app',\n  }),\n  spanProcessor: new SimpleSpanProcessor(new OTLPTraceExporter()),\n})\nsdk.start()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Custom Image Loader Configuration\nDESCRIPTION: Configuration for using a custom image loader instead of the Next.js built-in Image Optimization API.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/image.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    loader: 'custom',\n    loaderFile: './my/image/loader.js',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack Cache in Next.js\nDESCRIPTION: Custom webpack configuration to disable webpack caching in production builds to reduce memory usage. The configuration modifies the cache settings to use memory-only caching with zero generations.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/13-memory-usage.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  webpack: (\n    config,\n    { buildId, dev, isServer, defaultLoaders, nextRuntime, webpack }\n  ) => {\n    if (cfg.cache && !dev) {\n      cfg.cache = Object.freeze({\n        type: 'memory',\n      })\n      cfg.cache.maxMemoryGenerations = 0\n    }\n    // Important: return the modified config\n    return config\n  },\n}\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Metadata Fields in Next.js\nDESCRIPTION: This snippet demonstrates how to set various basic metadata fields in Next.js, including generator, applicationName, referrer, keywords, authors, creator, publisher, and formatDetection.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-metadata.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  generator: 'Next.js',\n  applicationName: 'Next.js',\n  referrer: 'origin-when-cross-origin',\n  keywords: ['Next.js', 'React', 'JavaScript'],\n  authors: [{ name: 'Seb' }, { name: 'Josh', url: 'https://nextjs.org' }],\n  creator: 'Jiachi Liu',\n  publisher: 'Sebastian Markbåge',\n  formatDetection: {\n    email: false,\n    address: false,\n    telephone: false,\n  },\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"application-name\" content=\"Next.js\" />\n<meta name=\"author\" content=\"Seb\" />\n<link rel=\"author\" href=\"https://nextjs.org\" />\n<meta name=\"author\" content=\"Josh\" />\n<meta name=\"generator\" content=\"Next.js\" />\n<meta name=\"keywords\" content=\"Next.js,React,JavaScript\" />\n<meta name=\"referrer\" content=\"origin-when-cross-origin\" />\n<meta name=\"color-scheme\" content=\"dark\" />\n<meta name=\"creator\" content=\"Jiachi Liu\" />\n<meta name=\"publisher\" content=\"Sebastian Markbåge\" />\n<meta name=\"format-detection\" content=\"telephone=no, address=no, email=no\" />\n```\n\n----------------------------------------\n\nTITLE: Updating Next.js Font Imports in JavaScript\nDESCRIPTION: Transforms '@next/font' imports to use the built-in 'next/font'.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/01-codemods.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Inter } from '@next/font/google'\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Inter } from 'next/font/google'\n```\n\n----------------------------------------\n\nTITLE: Disabling Draft Mode\nDESCRIPTION: API route implementation for clearing the draft mode cookie.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/06-configuring/11-draft-mode.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function handler(req, res) {\n  res.setDraftMode({ enable: false })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Rendering in app directory (TSX)\nDESCRIPTION: This snippet shows how to implement server-side rendering in the app directory using Server Components. It uses the cache option to indicate that the fetched data should never be cached.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/02-app-router-migration.mdx#2025-04-22_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nasync function getProjects() {\n  const res = await fetch(`https://...`, { cache: 'no-store' })\n  const projects = await res.json()\n\n  return projects\n}\n\nexport default async function Dashboard() {\n  const projects = await getProjects()\n\n  return (\n    <ul>\n      {projects.map((project) => (\n        <li key={project.id}>{project.name}</li>\n      ))}\n    </ul>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tainted Data in Next.js Page Component (TypeScript)\nDESCRIPTION: This code illustrates how attempting to pass tainted data to a client component in a Next.js page will result in an error, demonstrating the effectiveness of the tainting mechanism.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/03-patterns.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getUserData } from './data'\n\nexport async function Page() {\n  const userData = getUserData()\n  return (\n    <ClientComponent\n      user={userData} // this will cause an error because of taintObjectReference\n      address={userData.address} // this will cause an error because of taintUniqueValue\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Viewport Scale Properties in JavaScript\nDESCRIPTION: Setting viewport width, scale, and user scalability options in JavaScript to control the initial display and zooming behavior.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-viewport.mdx#2025-04-22_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nexport const viewport = {\n  width: 'device-width',\n  initialScale: 1,\n  maximumScale: 1,\n  userScalable: false,\n  // Also supported by less commonly used\n  // interactiveWidget: 'resizes-visual',\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Instrumentation Register Function in JavaScript\nDESCRIPTION: This code shows how to implement the required register function in JavaScript. It imports and uses the registerOTel function from @vercel/otel to set up instrumentation for a Next.js app.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/instrumentation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerOTel } from '@vercel/otel'\n\nexport function register() {\n  registerOTel('next-app')\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ESLint Configuration for Next.js\nDESCRIPTION: Command to update the ESLint configuration for the latest version of Next.js.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/02-app-router-migration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D eslint-config-next@latest\n```\n\n----------------------------------------\n\nTITLE: Disabling ESLint Cache in Next.js\nDESCRIPTION: Command to run next lint without using the cache, useful for rules that depend on more than the contents of a single source file.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/02-eslint.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnext lint --no-cache\n```\n\n----------------------------------------\n\nTITLE: Creating Home Page for Next.js Pages Router\nDESCRIPTION: TypeScript example of creating a home page (index.tsx) for the Pages Router, displaying a simple greeting.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/01-getting-started/01-installation.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Page() {\n  return <h1>Hello, Next.js!</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling poweredByHeader in Next.js Configuration\nDESCRIPTION: Configuration snippet showing how to disable the default x-powered-by header in Next.js by setting poweredByHeader to false in next.config.js\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/poweredByHeader.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  poweredByHeader: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Updating .gitignore for Next.js\nDESCRIPTION: This snippet demonstrates how to update the .gitignore file to include Next.js-specific directories and files that should be ignored in version control.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/04-from-vite.mdx#2025-04-22_snippet_17\n\nLANGUAGE: txt\nCODE:\n```\n# ...\n.next\nnext-env.d.ts\ndist\n```\n\n----------------------------------------\n\nTITLE: Using Imported Fonts in Page Component with App Router\nDESCRIPTION: Example showing how to use a font imported from a utility file in a Next.js app's page component with App Router, applying it to specific elements in the page.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/03-fonts.mdx#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { roboto_mono } from './fonts'\n\nexport default function Page() {\n  return (\n    <>\n      <h1 className={roboto_mono.className}>My page</h1>\n    </>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { roboto_mono } from './fonts'\n\nexport default function Page() {\n  return (\n    <>\n      <h1 className={roboto_mono.className}>My page</h1>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using beforeInteractive Strategy in Root Layout\nDESCRIPTION: Example showing how to use the Script component with beforeInteractive strategy in the root layout file. This loads scripts before any page hydration occurs.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/script.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport Script from 'next/script'\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>\n        {children}\n        <Script\n          src=\"https://example.com/script.js\"\n          strategy=\"beforeInteractive\"\n        />\n      </body>\n    </html>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport Script from 'next/script'\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        {children}\n        <Script\n          src=\"https://example.com/script.js\"\n          strategy=\"beforeInteractive\"\n        />\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic Icon with ImageResponse in Next.js (TypeScript)\nDESCRIPTION: TypeScript implementation for generating a dynamic icon using ImageResponse API, including size and content type configuration.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/01-metadata/app-icons.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ImageResponse } from 'next/og'\n\nexport const runtime = 'edge'\n\nexport const size = {\n  width: 32,\n  height: 32,\n}\nexport const contentType = 'image/png'\n\nexport default function Icon() {\n  return new ImageResponse(\n    (\n      <div\n        style={{\n          fontSize: 24,\n          background: 'black',\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          color: 'white',\n        }}\n      >\n        A\n      </div>\n    ),\n    {\n      ...size,\n    }\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Image Source in JSX for Next.js\nDESCRIPTION: This snippet demonstrates how to update the image source in JSX when migrating from Vite to Next.js. It shows how to use the 'src' property of the imported image object.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/04-from-vite.mdx#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\n<img src={logo} />\n\n// After\n<img src={logo.src} />\n```\n\n----------------------------------------\n\nTITLE: Using Absolute Imports in JavaScript\nDESCRIPTION: Demonstrates how to use absolute imports in a JavaScript Next.js page component.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/04-absolute-imports-and-module-aliases.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport Button from 'components/button'\n\nexport default function HomePage() {\n  return (\n    <>\n      <h1>Hello World</h1>\n      <Button />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Typing JSON-LD with TypeScript using schema-dts\nDESCRIPTION: Demonstrates how to use the schema-dts package to add TypeScript type definitions to JSON-LD structured data for better type safety and autocompletion.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/04-metadata.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Product, WithContext } from 'schema-dts'\n\nconst jsonLd: WithContext<Product> = {\n  '@context': 'https://schema.org',\n  '@type': 'Product',\n  name: 'Next.js Sticker',\n  image: 'https://nextjs.org/imgs/sticker.png',\n  description: 'Dynamic at the speed of static.',\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Root Layout with Styled Components Registry in JavaScript\nDESCRIPTION: Demonstrates how to wrap the children of the root layout with the StyledComponentsRegistry component in a JavaScript Next.js application.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/05-styling/03-css-in-js.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport StyledComponentsRegistry from './lib/registry'\n\nexport default function RootLayout({ children }) {\n  return (\n    <html>\n      <body>\n        <StyledComponentsRegistry>{children}</StyledComponentsRegistry>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Optimization for Static Export in Next.js\nDESCRIPTION: This code snippet demonstrates how to configure image optimization for static exports in Next.js using a custom image loader. It shows the configuration in next.config.js and an example of a custom loader for Cloudinary.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/10-deploying/02-static-exports.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  output: 'export',\n  images: {\n    loader: 'custom',\n    loaderFile: './my-loader.ts',\n  },\n}\n\nmodule.exports = nextConfig\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function cloudinaryLoader({\n  src,\n  width,\n  quality,\n}: {\n  src: string\n  width: number\n  quality?: number\n}) {\n  const params = ['f_auto', 'c_limit', `w_${width}`, `q_${quality || 'auto'}`]\n  return `https://res.cloudinary.com/demo/image/upload/${params.join(\n    ','\n  )}${src}`\n}\n```\n\n----------------------------------------\n\nTITLE: Router Prefetch Implementation in Next.js\nDESCRIPTION: Demonstrates how to prefetch pages for faster client-side transitions using router.prefetch method. Shows implementation in a login form scenario with dashboard prefetching.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/02-functions/use-router.mdx#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useCallback, useEffect } from 'react'\nimport { useRouter } from 'next/router'\n\nexport default function Login() {\n  const router = useRouter()\n  const handleSubmit = useCallback((e) => {\n    e.preventDefault()\n\n    fetch('/api/login', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        /* Form data */\n      }),\n    }).then((res) => {\n      // Do a fast client-side transition to the already prefetched dashboard page\n      if (res.ok) router.push('/dashboard')\n    })\n  }, [])\n\n  useEffect(() => {\n    // Prefetch the dashboard page\n    router.prefetch('/dashboard')\n  }, [router])\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {/* Form fields */}\n      <button type=\"submit\">Login</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Simple Theme Color in TypeScript\nDESCRIPTION: Setting a simple theme color in the viewport object using TypeScript, which will add a theme-color meta tag to the page head.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-viewport.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Viewport } from 'next'\n\nexport const viewport: Viewport = {\n  themeColor: 'black',\n}\n```\n\n----------------------------------------\n\nTITLE: Cloudinary Image Loader Implementation\nDESCRIPTION: Custom image loader implementation for Cloudinary image transformation service\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/images.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function cloudinaryLoader({ src, width, quality }) {\n  const params = ['f_auto', 'c_limit', `w_${width}`, `q_${quality || 'auto'}`]\n  return `https://example.com/${params.join(',')}${src}`\n}\n```\n\n----------------------------------------\n\nTITLE: Using the scroll Prop with Link Component (TSX)\nDESCRIPTION: Shows how to use the scroll prop with the Link component to disable the default scrolling behavior after navigation.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/link.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <Link href=\"/dashboard\" scroll={false}>\n      Dashboard\n    </Link>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling instrumentationHook in Next.js Configuration\nDESCRIPTION: This code snippet shows how to enable the experimental instrumentationHook option in the next.config.js file. It allows you to set up instrumentation via the 'instrumentation' file in your Next.js application.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/instrumentationHook.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  experimental: {\n    instrumentationHook: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js App on Custom Port with Command Flag\nDESCRIPTION: Example of starting a Next.js application in production mode on port 4000 using the '-p' flag to override the default port 3000.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/08-next-cli.mdx#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nnext start -p 4000\n```\n\n----------------------------------------\n\nTITLE: Disabling Compression in Next.js Configuration\nDESCRIPTION: This code snippet shows how to disable the default compression in Next.js by setting the 'compress' option to false in the next.config.js file. This is useful when compression is already configured on the server.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/compress.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  compress: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Pipelines for Next.js Build Caching\nDESCRIPTION: Azure Pipelines task configuration that caches Next.js build files between pipeline runs. This task should be added to your pipeline YAML file before the task that executes next build.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/09-deploying/04-ci-build-caching.mdx#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- task: Cache@2\n  displayName: 'Cache .next/cache'\n  inputs:\n    key: next | $(Agent.OS) | yarn.lock\n    path: '$(System.DefaultWorkingDirectory)/.next/cache'\n```\n\n----------------------------------------\n\nTITLE: JavaScript Middleware Function with Request Parameter\nDESCRIPTION: Example showing the middleware function signature in JavaScript, featuring the request parameter that represents the incoming HTTP request without explicit typing.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/middleware.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport function middleware(request) {\n  // Middleware logic goes here\n}\n```\n\n----------------------------------------\n\nTITLE: Managing CSS Order in Next.js Pages Router\nDESCRIPTION: Example showing how to manage the order of CSS concatenation in the pages router when importing styles alongside components that have their own CSS dependencies.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/05-styling/01-css-modules.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport '../styles.css'\n// The CSS in ErrorBoundary depends on the global CSS in styles.css,\n// so we import it after styles.css.\nimport ErrorBoundary from '../components/ErrorBoundary'\n\nexport default function MyApp({ Component, pageProps }) {\n  return (\n    <ErrorBoundary>\n      <Component {...pageProps} />\n    </ErrorBoundary>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json Scripts for Next.js\nDESCRIPTION: JSON configuration for package.json, defining scripts for development, building, starting, and linting a Next.js application.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/01-getting-started/01-installation.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Link Component in Next.js (TypeScript)\nDESCRIPTION: Demonstrates how to use the Link component from next/link to create client-side navigation between routes in a Next.js application.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/03-linking-and-navigating.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n  return <Link href=\"/dashboard\">Dashboard</Link>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for Tainting (JavaScript)\nDESCRIPTION: This configuration enables the experimental tainting feature in Next.js, which helps prevent sensitive data from being exposed to the client.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/03-patterns.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  experimental: {\n    taint: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring StaleTimes in Next.js Configuration\nDESCRIPTION: Example configuration for setting custom static and dynamic stale times in next.config.js. The dynamic property (default 30s) applies to unspecified prefetch settings, while static property (default 5min) applies when prefetch is true or when using router.prefetch.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/staleTimes.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  experimental: {\n    staleTimes: {\n      dynamic: 30,\n      static: 180,\n    },\n  },\n}\n\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: Using Sass Variables in Pages Router Layout\nDESCRIPTION: Example showing how to import and use Sass variables in the Pages Router using _app.js. The imported primary color is passed to a Layout component.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/05-styling/04-sass.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport variables from '../styles/variables.module.scss'\n\nexport default function MyApp({ Component, pageProps }) {\n  return (\n    <Layout color={variables.primaryColor}>\n      <Component {...pageProps} />\n    </Layout>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Next.js and React packages using pnpm\nDESCRIPTION: Command to update Next.js, React, React DOM, and ESLint config to their latest versions using pnpm.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/03-version-14.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm up next react react-dom eslint-config-next --latest\n```\n\n----------------------------------------\n\nTITLE: Displaying Next.js Start Help Command in Bash\nDESCRIPTION: Command to show the help information for the 'next start' command, which explains available options for running Next.js in production mode.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/08-next-cli.mdx#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnext start -h\n```\n\n----------------------------------------\n\nTITLE: Running Next.js in production mode for ISR testing\nDESCRIPTION: This bash command shows how to create a production build and start the production server in Next.js, which is necessary for testing on-demand ISR configuration.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/03-data-fetching/04-incremental-static-regeneration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ next build\n$ next start\n```\n\n----------------------------------------\n\nTITLE: Cypress CI Configuration\nDESCRIPTION: Package.json configuration for running Cypress tests in CI environments.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/08-testing/04-cypress.mdx#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"e2e\": \"start-server-and-test dev http://localhost:3000 \\\"cypress open --e2e\\\"\",\n    \"e2e:headless\": \"start-server-and-test dev http://localhost:3000 \\\"cypress run --e2e\\\"\",\n    \"component\": \"cypress open --component\",\n    \"component:headless\": \"cypress run --component\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Build Error Handling in Next.js\nDESCRIPTION: Configuration code to disable TypeScript error checking during production builds in Next.js. This setting allows builds to complete even when type errors are present, which should be used with caution and only when alternative type checking processes are in place.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/typescript.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  typescript: {\n    // !! WARN !!\n    // Dangerously allow production builds to successfully complete even if\n    // your project has type errors.\n    // !! WARN !!\n    ignoreBuildErrors: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Entrypoint Page in Next.js (JavaScript)\nDESCRIPTION: This snippet shows the JavaScript version of creating the entrypoint page for a Next.js application. It uses an optional catch-all route and imports global CSS.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/05-from-create-react-app.mdx#2025-04-22_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport '../../index.css'\n\nexport function generateStaticParams() {\n  return [{ slug: [''] }]\n}\n\nexport default function Page() {\n  return '...' // We'll update this\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom HTTP Server for Next.js Application\nDESCRIPTION: This code snippet demonstrates how to create a custom HTTP server for a Next.js application. It includes handling specific routes and fallback to Next.js default handler.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/06-configuring/10-custom-server.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createServer } = require('http')\nconst { parse } = require('url')\nconst next = require('next')\n\nconst dev = process.env.NODE_ENV !== 'production'\nconst hostname = 'localhost'\nconst port = 3000\n// when using middleware `hostname` and `port` must be provided below\nconst app = next({ dev, hostname, port })\nconst handle = app.getRequestHandler()\n\napp.prepare().then(() => {\n  createServer(async (req, res) => {\n    try {\n      // Be sure to pass `true` as the second argument to `url.parse`.\n      // This tells it to parse the query portion of the URL.\n      const parsedUrl = parse(req.url, true)\n      const { pathname, query } = parsedUrl\n\n      if (pathname === '/a') {\n        await app.render(req, res, '/a', query)\n      } else if (pathname === '/b') {\n        await app.render(req, res, '/b', query)\n      } else {\n        await handle(req, res, parsedUrl)\n      }\n    } catch (err) {\n      console.error('Error occurred handling', req.url, err)\n      res.statusCode = 500\n      res.end('internal server error')\n    }\n  })\n    .once('error', (err) => {\n      console.error(err)\n      process.exit(1)\n    })\n    .listen(port, () => {\n      console.log(`> Ready on http://${hostname}:${port}`)\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Using lazyOnload Strategy in Next.js Page\nDESCRIPTION: Example showing how to use the Script component with lazyOnload strategy in a page file. This loads scripts during browser idle time.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/script.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport Script from 'next/script'\n\nexport default function Page() {\n  return (\n    <>\n      <Script src=\"https://example.com/script.js\" strategy=\"lazyOnload\" />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Locale in Next.js Page Component\nDESCRIPTION: This snippet demonstrates how to access the current locale in a Next.js page component using the lang parameter from the dynamic route.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/14-internationalization.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// You now have access to the current locale\n// e.g. /en-US/products -> `lang` is \"en-US\"\nexport default async function Page({ params: { lang } }) {\n  return ...\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Font Styles with className in React\nDESCRIPTION: Demonstrates how to apply loaded font styles using the className property returned by the font loader.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/font.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<p className={inter.className}>Hello, Next.js!</p>\n```\n\n----------------------------------------\n\nTITLE: BasePath Header Configuration\nDESCRIPTION: Demonstrates header configuration with Next.js basePath support, showing both modified and unmodified path scenarios.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/headers.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  basePath: '/docs',\n\n  async headers() {\n    return [\n      {\n        source: '/with-basePath',\n        headers: [\n          {\n            key: 'x-hello',\n            value: 'world',\n          },\n        ],\n      },\n      {\n        source: '/without-basePath',\n        headers: [\n          {\n            key: 'x-hello',\n            value: 'world',\n          },\n        ],\n        basePath: false,\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Font Definitions in Components\nDESCRIPTION: Demonstrates how to import and use font definitions in Next.js components with different application methods.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/font.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { inter, lora, sourceCodePro700, greatVibes } from '../styles/fonts'\n\nexport default function Page() {\n  return (\n    <div>\n      <p className={inter.className}>Hello world using Inter font</p>\n      <p style={lora.style}>Hello world using Lora font</p>\n      <p className={sourceCodePro700.className}>\n        Hello world using Source_Sans_3 font with weight 700\n      </p>\n      <p className={greatVibes.className}>My title in Great Vibes font</p>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Styled Components in Next.js Configuration\nDESCRIPTION: Enables styled-components in the Next.js configuration file. This setting allows the Next.js compiler to process styled-components.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/05-styling/03-css-in-js.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  compiler: {\n    styledComponents: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Cypress Component Test Configuration\nDESCRIPTION: Configuration setup for Cypress component testing with Next.js framework.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/08-testing/04-cypress.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  component: {\n    devServer: {\n      framework: 'next',\n      bundler: 'webpack',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Router BeforePopState Handler in Next.js\nDESCRIPTION: Shows how to implement beforePopState handler to control navigation behavior before router acts on popstate events. Includes example of route filtering and SSR refresh.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/02-functions/use-router.mdx#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react'\nimport { useRouter } from 'next/router'\n\nexport default function Page() {\n  const router = useRouter()\n\n  useEffect(() => {\n    router.beforePopState(({ url, as, options }) => {\n      // I only want to allow these two routes!\n      if (as !== '/' && as !== '/other') {\n        // Have SSR render bad routes as a 404.\n        window.location.href = as\n        return false\n      }\n\n      return true\n    })\n  }, [router])\n\n  return <p>Welcome to the page</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Preview Data in getStaticProps for Next.js\nDESCRIPTION: This snippet demonstrates how to modify the getStaticProps function to fetch different data based on the preview context. It conditionally appends '/preview' to the API endpoint URL when in preview mode.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/06-configuring/14-preview-mode.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function getStaticProps(context) {\n  // If context.preview is true, append \"/preview\" to the API endpoint\n  // to request draft data instead of published data. This will vary\n  // based on which headless CMS you're using.\n  const res = await fetch(`https://.../${context.preview ? 'preview' : ''}`)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Sanity Loader Implementation\nDESCRIPTION: Custom image loader implementation for Sanity image service with project and dataset configuration\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/images.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function sanityLoader({ src, width, quality }) {\n  const prj = 'zp7mbokg'\n  const dataset = 'production'\n  const url = new URL(`https://cdn.sanity.io/images/${prj}/${dataset}${src}`)\n  url.searchParams.set('auto', 'format')\n  url.searchParams.set('fit', 'max')\n  url.searchParams.set('w', width.toString())\n  if (quality) {\n    url.searchParams.set('q', quality.toString())\n  }\n  return url.href\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Basic Environment Variables in Next.js\nDESCRIPTION: Example of basic environment variables definition in a .env.local file for database configuration.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/03-environment-variables.mdx#2025-04-22_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nDB_HOST=localhost\nDB_USER=myuser\nDB_PASS=mypassword\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Imports in Next.js Configuration\nDESCRIPTION: Configuration setup in next.config.js to enable URL imports feature and specify allowed URL prefixes.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/urlImports.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  experimental: {\n    urlImports: ['https://example.com/assets/', 'https://cdn.skypack.dev'],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Context Provider in Server Component (Incorrect)\nDESCRIPTION: This snippet demonstrates an incorrect way of creating a context provider in a Server Component, which will cause an error because React context is not supported in Server Components.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createContext } from 'react'\n\n//  createContext is not supported in Server Components\nexport const ThemeContext = createContext({})\n\nexport default function RootLayout({ children }) {\n  return (\n    <html>\n      <body>\n        <ThemeContext.Provider value=\"dark\">{children}</ThemeContext.Provider>\n      </body>\n    </html>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createContext } from 'react'\n\n//  createContext is not supported in Server Components\nexport const ThemeContext = createContext({})\n\nexport default function RootLayout({ children }) {\n  return (\n    <html>\n      <body>\n        <ThemeContext.Provider value=\"dark\">{children}</ThemeContext.Provider>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling ETag Generation in Next.js Configuration\nDESCRIPTION: This code snippet shows how to disable ETag generation in Next.js by modifying the next.config.js file. It sets the generateEtags option to false, which prevents Next.js from automatically generating ETags for every page.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/generateEtags.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  generateEtags: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Lint on Custom Directory in Bash\nDESCRIPTION: Example of running ESLint on a custom directory ('utils') in a Next.js project using the '--dir' flag to specify directories beyond the default ones.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/08-next-cli.mdx#2025-04-22_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nnext lint --dir utils\n```\n\n----------------------------------------\n\nTITLE: Secure Preview Mode API Implementation\nDESCRIPTION: Complete implementation of a secure preview mode API route that validates tokens, checks content existence, and handles redirects for CMS preview functionality.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/06-configuring/14-preview-mode.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default async (req, res) => {\n  // Check the secret and next parameters\n  // This secret should only be known to this API route and the CMS\n  if (req.query.secret !== 'MY_SECRET_TOKEN' || !req.query.slug) {\n    return res.status(401).json({ message: 'Invalid token' })\n  }\n\n  // Fetch the headless CMS to check if the provided `slug` exists\n  // getPostBySlug would implement the required fetching logic to the headless CMS\n  const post = await getPostBySlug(req.query.slug)\n\n  // If the slug doesn't exist prevent preview mode from being enabled\n  if (!post) {\n    return res.status(401).json({ message: 'Invalid slug' })\n  }\n\n  // Enable Preview Mode by setting the cookies\n  res.setPreviewData({})\n\n  // Redirect to the path from the fetched post\n  // We don't redirect to req.query.slug as that might lead to open redirect vulnerabilities\n  res.redirect(post.slug)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring revalidate Option in Next.js Route Segments (TypeScript)\nDESCRIPTION: Example showing how to configure the revalidate option in a Next.js route segment using TypeScript. This sets the default revalidation time for a layout or page, affecting caching behavior.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/route-segment-config.mdx#2025-04-22_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const revalidate = false\n// false | 0 | number\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Build Output Example\nDESCRIPTION: Illustrates how Next.js processes environment variables at build time, replacing process.env references with their actual values in the final bundle.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/env.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nreturn <h1>The value of customKey is: {process.env.customKey}</h1>\n```\n\nLANGUAGE: jsx\nCODE:\n```\nreturn <h1>The value of customKey is: {'my-value'}</h1>\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Aliases in tsconfig.json or jsconfig.json\nDESCRIPTION: Sets up module path aliases using the paths configuration option, mapping @/components/* to components/*.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/04-absolute-imports-and-module-aliases.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/components/*\": [\"components/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Revalidating Layout Path Example\nDESCRIPTION: Example showing how to revalidate a layout path affecting multiple pages.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/revalidatePath.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { revalidatePath } from 'next/cache'\nrevalidatePath('/blog/[slug]', 'layout')\n// or with route groups\nrevalidatePath('/(main)/post/[slug]', 'layout')\n```\n\n----------------------------------------\n\nTITLE: Importing Base Button and CSS Module in Page Component (TypeScript)\nDESCRIPTION: This code snippet illustrates how to import a BaseButton component and a CSS module in a Page component. It demonstrates the order of imports, which affects the final CSS order in production builds.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/05-styling/01-css-modules.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BaseButton } from './base-button'\nimport styles from './page.module.css'\n\nexport function Page() {\n  return <BaseButton className={styles.primary} />\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests with npm, yarn, or pnpm\nDESCRIPTION: Terminal commands to run the configured Jest tests using different package managers: npm, yarn, or pnpm.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/08-testing/02-jest.mdx#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n# or\nyarn test\n# or\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Header Override Behavior Example\nDESCRIPTION: Demonstrates how headers are overridden when multiple configurations target the same path and header key.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/headers.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async headers() {\n    return [\n      {\n        source: '/:path*',\n        headers: [\n          {\n            key: 'x-hello',\n            value: 'there',\n          },\n        ],\n      },\n      {\n        source: '/hello',\n        headers: [\n          {\n            key: 'x-hello',\n            value: 'world',\n          },\n        ],\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Vitest Dependencies\nDESCRIPTION: Commands to install Vitest and its required dependencies including React testing library and jsdom\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/08-testing/01-vitest.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D vitest @vitejs/plugin-react jsdom @testing-library/react\n# or\nyarn add -D vitest @vitejs/plugin-react jsdom @testing-library/react\n# or\npnpm install -D vitest @vitejs/plugin-react jsdom @testing-library/react\n# or\nbun add -D vitest @vitejs/plugin-react jsdom @testing-library/react\n```\n\n----------------------------------------\n\nTITLE: Customizing Output Directory for Next.js Export\nDESCRIPTION: Command-line instruction to customize the output directory when running next export. This allows specifying a different directory than the default 'out' folder.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/exportPathMap.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnext export -o outdir\n```\n\n----------------------------------------\n\nTITLE: Creating a Template in Next.js App Router\nDESCRIPTION: Example of a template component that creates a new instance for each child on navigation. Unlike layouts, templates don't preserve state between route changes and are useful for components that need to remount with each navigation.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/02-pages-and-layouts.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Template({ children }: { children: React.ReactNode }) {\n  return <div>{children}</div>\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Template({ children }) {\n  return <div>{children}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding External Video Using Iframe in Next.js\nDESCRIPTION: This example shows how to embed an external video (e.g., from YouTube) using an <iframe> tag in a Next.js page component.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/02-videos.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Page() {\n  return (\n    <iframe\n      src=\"https://www.youtube.com/watch?v=gfU1iZnjRZM\"\n      frameborder=\"0\"\n      allowfullscreen\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS Headers in Next.js\nDESCRIPTION: This snippet demonstrates how to configure Cross-Origin Resource Sharing (CORS) headers in Next.js. It sets the Access-Control-Allow-Origin, Access-Control-Allow-Methods, and Access-Control-Allow-Headers.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/headers.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nasync headers() {\n    return [\n      {\n        source: \"/api/:path*\",\n        headers: [\n          {\n            key: \"Access-Control-Allow-Origin\",\n            value: \"*\", // Set your origin\n          },\n          {\n            key: \"Access-Control-Allow-Methods\",\n            value: \"GET, POST, PUT, DELETE, OPTIONS\",\n          },\n          {\n            key: \"Access-Control-Allow-Headers\",\n            value: \"Content-Type, Authorization\",\n          },\n        ],\n      },\n    ];\n  },\n```\n\n----------------------------------------\n\nTITLE: Configuring Device Sizes for Responsive Images\nDESCRIPTION: Configuration for specifying device width breakpoints used in responsive image optimization.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/image.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Build ID Generation in Next.js Configuration\nDESCRIPTION: This code snippet demonstrates how to use the generateBuildId option in the Next.js configuration file (next.config.js) to create a custom build identifier. The example shows a function that generates a unique build ID based on the current Git commit hash.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/03-next-config-js/generateBuildId.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```js\nmodule.exports = {\n  generateBuildId: async () => {\n    // You can, for example, get the latest git commit hash here\n    return 'my-build-id'\n  },\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Media-Dependent Theme Colors in TypeScript\nDESCRIPTION: Setting different theme colors based on color scheme preference using media queries in TypeScript.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-viewport.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Viewport } from 'next'\n\nexport const viewport: Viewport = {\n  themeColor: [\n    { media: '(prefers-color-scheme: light)', color: 'cyan' },\n    { media: '(prefers-color-scheme: dark)', color: 'black' },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Using router.replace for Navigation in Next.js\nDESCRIPTION: This example shows how to use the router.replace method to navigate to a new route without adding a new entry to the browser's history stack.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/02-functions/use-router.mdx#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useRouter } from 'next/router'\n\nexport default function Page() {\n  const router = useRouter()\n\n  return (\n    <button type=\"button\" onClick={() => router.replace('/home')}>\n      Click me\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Updating searchParams with useRouter and Link in Next.js (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to update searchParams in a Next.js application using the useRouter hook and Link component. It includes a function to create a new query string and examples of navigation with updated searchParams.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/use-search-params.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function ExampleClientComponent() {\n  const router = useRouter()\n  const pathname = usePathname()\n  const searchParams = useSearchParams()\n\n  // Get a new searchParams string by merging the current\n  // searchParams with a provided key/value pair\n  const createQueryString = useCallback(\n    (name: string, value: string) => {\n      const params = new URLSearchParams(searchParams.toString())\n      params.set(name, value)\n\n      return params.toString()\n    },\n    [searchParams]\n  )\n\n  return (\n    <>\n      <p>Sort By</p>\n\n      {/* using useRouter */}\n      <button\n        onClick={() => {\n          // <pathname>?sort=asc\n          router.push(pathname + '?' + createQueryString('sort', 'asc'))\n        }}\n      >\n        ASC\n      </button>\n\n      {/* using <Link> */}\n      <Link\n        href={\n          // <pathname>?sort=desc\n          pathname + '?' + createQueryString('sort', 'desc')\n        }\n      >\n        DESC\n      </Link>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Route Page Component with JavaScript\nDESCRIPTION: JavaScript version of the dynamic route page component for blog posts without TypeScript typing.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/09-dynamic-routes.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Page({ params }) {\n  return <div>My Post: {params.slug}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Using worker Strategy in Pages Directory\nDESCRIPTION: Example showing how to use the Script component with worker strategy to offload script execution to a web worker. Only works in the pages directory.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/script.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport Script from 'next/script'\n\nexport default function Home() {\n  return (\n    <>\n      <Script src=\"https://example.com/script.js\" strategy=\"worker\" />\n    </>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport Script from 'next/script'\n\nexport default function Home() {\n  return (\n    <>\n      <Script src=\"https://example.com/script.js\" strategy=\"worker\" />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Layout in Next.js (TypeScript)\nDESCRIPTION: This snippet shows how to set up the root layout in Next.js, including metadata and the basic HTML structure. It demonstrates the removal of default meta tags and the use of Next.js's built-in head management.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/05-from-create-react-app.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <title>React App</title>\n        <meta name=\"description\" content=\"Web site created...\" />\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication API Route Handler\nDESCRIPTION: API route implementation for handling authentication requests in Next.js Pages Router. Processes login credentials and returns appropriate response status.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/09-authentication/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextApiRequest, NextApiResponse } from 'next'\nimport { signIn } from '@/auth'\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  try {\n    const { email, password } = req.body\n    await signIn('credentials', { email, password })\n\n    res.status(200).json({ success: true })\n  } catch (error) {\n    if (error.type === 'CredentialsSignin') {\n      res.status(401).json({ error: 'Invalid credentials.' })\n    } else {\n      res.status(500).json({ error: 'Something went wrong.' })\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: React Comment for Shared Content Documentation\nDESCRIPTION: JSX comment explaining the shared content approach between app and pages router, with instructions for router-specific content using PagesOnly component.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic Icon with ImageResponse in Next.js (JavaScript)\nDESCRIPTION: JavaScript implementation for generating a dynamic icon using ImageResponse API, including size and content type configuration.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/01-metadata/app-icons.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ImageResponse } from 'next/og'\n\nexport const runtime = 'edge'\n\nexport const size = {\n  width: 32,\n  height: 32,\n}\nexport const contentType = 'image/png'\n\nexport default function Icon() {\n  return new ImageResponse(\n    (\n      <div\n        style={{\n          fontSize: 24,\n          background: 'black',\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          color: 'white',\n        }}\n      >\n        A\n      </div>\n    ),\n    {\n      ...size,\n    }\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Image Loader Implementation (Client)\nDESCRIPTION: Client-side implementation of a custom image loader function that generates image URLs with width and quality parameters\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/images.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nexport default function myImageLoader({ src, width, quality }) {\n  return `https://example.com/${src}?w=${width}&q=${quality || 75}`\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Viewport with Static Object in TypeScript\nDESCRIPTION: Example of exporting a static viewport object from a layout or page component in TypeScript to define viewport options like theme color.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-viewport.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Viewport } from 'next'\n\nexport const viewport: Viewport = {\n  themeColor: 'black',\n}\n\nexport default function Page() {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Web Vitals Reporting in Pages Router\nDESCRIPTION: Example showing how to implement the useReportWebVitals hook in Next.js pages/_app.js to monitor Core Web Vitals metrics.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/use-report-web-vitals.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useReportWebVitals } from 'next/web-vitals'\n\nfunction MyApp({ Component, pageProps }) {\n  useReportWebVitals((metric) => {\n    console.log(metric)\n  })\n\n  return <Component {...pageProps} />\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Heroku for Next.js Build Caching\nDESCRIPTION: Heroku package.json configuration that specifies directories to cache between builds. This should be added to your package.json file to cache the Next.js cache directory.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/09-deploying/04-ci-build-caching.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n\"cacheDirectories\": [\".next/cache\"]\n```\n\n----------------------------------------\n\nTITLE: Using Public Environment Variables in Browser\nDESCRIPTION: Example of using NEXT_PUBLIC_ prefixed environment variables in client-side code.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/03-environment-variables.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport setupAnalyticsService from '../lib/my-analytics-service'\n\nsetupAnalyticsService(process.env.NEXT_PUBLIC_ANALYTICS_ID)\n\nfunction HomePage() {\n  return <h1>Hello World</h1>\n}\n\nexport default HomePage\n```\n\n----------------------------------------\n\nTITLE: Revalidating All Data Example\nDESCRIPTION: Example demonstrating how to revalidate all cached data using root path.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/revalidatePath.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { revalidatePath } from 'next/cache'\n\nrevalidatePath('/', 'layout')\n```\n\n----------------------------------------\n\nTITLE: Implementing Advanced Error Handling in Next.js\nDESCRIPTION: This code defines a custom Error component in 'pages/_error.js' to handle both client-side and server-side errors. It determines the error type based on the status code and renders an appropriate message.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/01-routing/08-custom-error.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Error({ statusCode }) {\n  return (\n    <p>\n      {statusCode\n        ? `An error ${statusCode} occurred on server`\n        : 'An error occurred on client'}\n    </p>\n  )\n}\n\nError.getInitialProps = ({ res, err }) => {\n  const statusCode = res ? res.statusCode : err ? err.statusCode : 404\n  return { statusCode }\n}\n\nexport default Error\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Lint on Specific Directories and Files\nDESCRIPTION: Example of using the --dir and --file flags with next lint to lint specific directories and files.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/02-eslint.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnext lint --dir pages --dir utils --file bar.js\n```\n\n----------------------------------------\n\nTITLE: Mocking file imports in Jest for Next.js\nDESCRIPTION: Mock file for handling file imports in Jest tests for a Next.js project.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/08-testing/02-jest.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = 'test-file-stub'\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Loading with Custom Root in React\nDESCRIPTION: This example demonstrates how to implement lazy loading for images with a custom scrollable root element using the Next.js Image component and React refs.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/01-components/image-legacy.mdx#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from 'next/legacy/image'\nimport React from 'react'\n\nconst Example = () => {\n  const lazyRoot = React.useRef(null)\n\n  return (\n    <div ref={lazyRoot} style={{ overflowX: 'scroll', width: '500px' }}>\n      <Image lazyRoot={lazyRoot} src=\"/one.jpg\" width=\"500\" height=\"500\" />\n      <Image lazyRoot={lazyRoot} src=\"/two.jpg\" width=\"500\" height=\"500\" />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding ESLint Script to package.json in Next.js\nDESCRIPTION: Add the 'next lint' command as a script in your package.json file to enable ESLint checking in your Next.js project.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/02-eslint.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"lint\": \"next lint\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Object-based PostCSS Configuration in JavaScript\nDESCRIPTION: This PostCSS configuration uses an object-based format for compatibility with other non-Next.js tools in the same project.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/06-configuring/09-post-css.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: {\n    'postcss-flexbugs-fixes': {},\n    'postcss-preset-env': {\n      autoprefixer: {\n        flexbox: 'no-2009',\n      },\n      stage: 3,\n      features: {\n        'custom-properties': false,\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Next.js and React Dependencies\nDESCRIPTION: Command to update Next.js to the latest version along with React and React DOM.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/02-app-router-migration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install next@latest react@latest react-dom@latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Apple Web App Metadata in Next.js\nDESCRIPTION: This snippet shows how to configure Apple Web App specific metadata in a Next.js application, including iTunes app information and startup images.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-metadata.mdx#2025-04-22_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  itunes: {\n    appId: 'myAppStoreID',\n    appArgument: 'myAppArgument',\n  },\n  appleWebApp: {\n    title: 'Apple Web App',\n    statusBarStyle: 'black-translucent',\n    startupImage: [\n      '/assets/startup/apple-touch-startup-image-768x1004.png',\n      {\n        url: '/assets/startup/apple-touch-startup-image-1536x2008.png',\n        media: '(device-width: 768px) and (device-height: 1024px)',\n      },\n    ],\n  },\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<meta\n  name=\"apple-itunes-app\"\n  content=\"app-id=myAppStoreID, app-argument=myAppArgument\"\n/>\n<meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\n<meta name=\"apple-mobile-web-app-title\" content=\"Apple Web App\" />\n<link\n  href=\"/assets/startup/apple-touch-startup-image-768x1004.png\"\n  rel=\"apple-touch-startup-image\"\n/>\n<link\n  href=\"/assets/startup/apple-touch-startup-image-1536x2008.png\"\n  media=\"(device-width: 768px) and (device-height: 1024px)\"\n  rel=\"apple-touch-startup-image\"\n/>\n<meta\n  name=\"apple-mobile-web-app-status-bar-style\"\n  content=\"black-translucent\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirects with i18n Support in Next.js Configuration\nDESCRIPTION: This code snippet demonstrates how to set up redirects with i18n support in the Next.js configuration file. It shows various redirect scenarios, including automatic locale handling, manual locale specification, and matching all locales.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/redirects.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  i18n: {\n    locales: ['en', 'fr', 'de'],\n    defaultLocale: 'en',\n  },\n\n  async redirects() {\n    return [\n      {\n        source: '/with-locale', // automatically handles all locales\n        destination: '/another', // automatically passes the locale on\n        permanent: false,\n      },\n      {\n        // does not handle locales automatically since locale: false is set\n        source: '/nl/with-locale-manual',\n        destination: '/nl/another',\n        locale: false,\n        permanent: false,\n      },\n      {\n        // this matches '/' since `en` is the defaultLocale\n        source: '/en',\n        destination: '/en/another',\n        locale: false,\n        permanent: false,\n      },\n      // it's possible to match all locales even when locale: false is set\n      {\n        source: '/:locale/page',\n        destination: '/en/newpage',\n        permanent: false,\n        locale: false,\n      },\n      {\n        // this gets converted to /(en|fr|de)/(.*) so will not match the top-level\n        // `/` or `/fr` routes like /:path* would\n        source: '/(.*)',\n        destination: '/another',\n        permanent: false,\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenTelemetry Registration in Next.js\nDESCRIPTION: Example showing how to register OpenTelemetry in a Next.js application using @vercel/otel. The register function is called once when a new Next.js server instance is initiated.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/09-instrumentation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerOTel } from '@vercel/otel'\n\nexport function register() {\n  registerOTel('next-app')\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerOTel } from '@vercel/otel'\n\nexport function register() {\n  registerOTel('next-app')\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Output for Size Configuration\nDESCRIPTION: The HTML head output generated when configuring size for a programmatically generated Open Graph image, showing the meta tags created with the exported width and height values.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/01-metadata/opengraph-image.mdx#2025-04-22_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<meta property=\"og:image:width\" content=\"1200\" />\n<meta property=\"og:image:height\" content=\"630\" />\n```\n\n----------------------------------------\n\nTITLE: Custom MDX Components Configuration in TypeScript\nDESCRIPTION: TypeScript implementation for customizing MDX components including image handling and heading styles\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/05-mdx.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { MDXComponents } from 'mdx/types'\nimport Image, { ImageProps } from 'next/image'\n\n// This file allows you to provide custom React components\n// to be used in MDX files. You can import and use any\n// React component you want, including inline styles,\n// components from other libraries, and more.\n\nexport function useMDXComponents(components: MDXComponents): MDXComponents {\n  return {\n    // Allows customizing built-in components, e.g. to add styling.\n    h1: ({ children }) => <h1 style={{ fontSize: '100px' }}>{children}</h1>,\n    img: (props) => (\n      <Image\n        sizes=\"100vw\"\n        style={{ width: '100%', height: 'auto' }}\n        {...(props as ImageProps)}\n      />\n    ),\n    ...components,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Environment in Next.js Pages and Layouts\nDESCRIPTION: The runtime option specifies the runtime environment for the page or layout. It can be set to either 'nodejs' (default) or 'edge'.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/route-segment-config.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nexport const runtime = 'nodejs'\n// 'nodejs' | 'edge'\n```\n\nLANGUAGE: js\nCODE:\n```\nexport const runtime = 'nodejs'\n// 'nodejs' | 'edge'\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Custom Image Loader\nDESCRIPTION: Basic configuration in next.config.js to enable custom image loader functionality\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/images.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    loader: 'custom',\n    loaderFile: './my/image/loader.js',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Static Image Import from URL\nDESCRIPTION: Example showing how to import and use an image from an external URL with Next.js Image component.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/urlImports.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Image from 'next/image'\nimport logo from 'https://example.com/assets/logo.png'\n\nexport default () => (\n  <div>\n    <Image src={logo} placeholder=\"blur\" />\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Advanced Next.js Rewrite Configuration with Multiple Types\nDESCRIPTION: Complex rewrite configuration demonstrating beforeFiles, afterFiles, and fallback rewrites with conditional matching\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/rewrites.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async rewrites() {\n    return {\n      beforeFiles: [\n        {\n          source: '/some-page',\n          destination: '/somewhere-else',\n          has: [{ type: 'query', key: 'overrideMe' }],\n        },\n      ],\n      afterFiles: [\n        {\n          source: '/non-existent',\n          destination: '/somewhere-else',\n        },\n      ],\n      fallback: [\n        {\n          source: '/:path*',\n          destination: `https://my-old-site.com/:path*`,\n        },\n      ],\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Formats\nDESCRIPTION: Configuration for specifying supported image formats including WebP and AVIF options.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/image.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    formats: ['image/avif', 'image/webp'],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js About Page Component\nDESCRIPTION: Example implementation of the about page component with navigation link back to Home page using Next.js.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/08-testing/03-playwright.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <div>\n      <h1>About</h1>\n      <Link href=\"/\">Home</Link>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Unsupported Pattern: Importing Server Components into Client Components\nDESCRIPTION: This snippet shows an unsupported pattern where a Server Component is imported directly into a Client Component. This is not allowed and will cause an error.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\n// You cannot import a Server Component into a Client Component.\nimport ServerComponent from './Server-Component'\n\nexport default function ClientComponent({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  const [count, setCount] = useState(0)\n\n  return (\n    <>\n      <button onClick={() => setCount(count + 1)}>{count}</button>\n\n      <ServerComponent />\n    </>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\n// You cannot import a Server Component into a Client Component.\nimport ServerComponent from './Server-Component'\n\nexport default function ClientComponent({ children }) {\n  const [count, setCount] = useState(0)\n\n  return (\n    <>\n      <button onClick={() => setCount(count + 1)}>{count}</button>\n\n      <ServerComponent />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Layout Implementation\nDESCRIPTION: TypeScript version of per-page layout implementation with proper type definitions.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/01-routing/01-pages-and-layouts.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { ReactElement } from 'react'\nimport Layout from '../components/layout'\nimport NestedLayout from '../components/nested-layout'\nimport type { NextPageWithLayout } from './_app'\n\nconst Page: NextPageWithLayout = () => {\n  return <p>hello world</p>\n}\n\nPage.getLayout = function getLayout(page: ReactElement) {\n  return (\n    <Layout>\n      <NestedLayout>{page}</NestedLayout>\n    </Layout>\n  )\n}\n\nexport default Page\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { ReactElement, ReactNode } from 'react'\nimport type { NextPage } from 'next'\nimport type { AppProps } from 'next/app'\n\nexport type NextPageWithLayout<P = {}, IP = P> = NextPage<P, IP> & {\n  getLayout?: (page: ReactElement) => ReactNode\n}\n\ntype AppPropsWithLayout = AppProps & {\n  Component: NextPageWithLayout\n}\n\nexport default function MyApp({ Component, pageProps }: AppPropsWithLayout) {\n  const getLayout = Component.getLayout ?? ((page) => page)\n\n  return getLayout(<Component {...pageProps} />)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Frontmatter for Next.js Documentation\nDESCRIPTION: This snippet demonstrates how to set up the frontmatter for a Next.js documentation page. It includes the title and description of the page, which are crucial for SEO and providing context to readers.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/01-getting-started/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Getting Started\ndescription: Learn how to create full-stack web applications with Next.js.\n---\n```\n\n----------------------------------------\n\nTITLE: Enabling Trailing Slashes in Next.js Configuration\nDESCRIPTION: Configuration to enable trailing slashes for exported pages in Next.js. This setting changes the export behavior to generate index.html files for each route.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/exportPathMap.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  trailingSlash: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing YouTube Embed in Next.js App Router\nDESCRIPTION: This snippet illustrates how to use the YouTubeEmbed component from @next/third-parties/google in a Next.js application with the App Router. It demonstrates embedding a YouTube video with a specific height and custom player parameters.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/12-third-party-libraries.mdx#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport { YouTubeEmbed } from '@next/third-parties/google'\n\nexport default function Page() {\n  return <YouTubeEmbed videoid=\"ogfYd705cRs\" height={400} params=\"controls=0\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Static Optimization Indicator in Next.js\nDESCRIPTION: This snippet shows how to disable the automatic static optimization indicator in a Next.js application. This is useful for scenarios like working on electron applications where the indicator might not be needed.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/devIndicators.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  devIndicators: {\n    autoPrerender: false,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Next.js Debugging\nDESCRIPTION: This JSON snippet shows how to modify the package.json file to include the --inspect flag in the dev script. This enables server-side debugging when running the development server through npm or yarn.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/06-configuring/13-debugging.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"NODE_OPTIONS='--inspect' next dev\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading React with yarn\nDESCRIPTION: Command to upgrade React and React DOM to the latest version using yarn. This may be required when upgrading to Next.js 12 as it requires React version 17.0.2 at minimum.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/10-upgrading/07-version-12.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react@latest react-dom@latest\n```\n\n----------------------------------------\n\nTITLE: Adding Tailwind Directives to Pages Router's Global CSS\nDESCRIPTION: CSS file that includes the required Tailwind directives to inject generated styles into the application when using the Pages Router.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/05-styling/02-tailwind-css.mdx#2025-04-22_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n----------------------------------------\n\nTITLE: Using NextResponse.next() in Middleware\nDESCRIPTION: Demonstrates how to use NextResponse.next() method in middleware to continue routing.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/next-response.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from 'next/server'\n\nreturn NextResponse.next()\n```\n\n----------------------------------------\n\nTITLE: Updating Entrypoint Page with Client-Only Component (TypeScript)\nDESCRIPTION: This code updates the entrypoint page in Next.js to use the client-only component. It imports global CSS and the ClientOnly component, and uses generateStaticParams to generate the index route.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/05-from-create-react-app.mdx#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport '../../index.css'\nimport { ClientOnly } from './client'\n\nexport function generateStaticParams() {\n  return [{ slug: [''] }]\n}\n\nexport default function Page() {\n  return <ClientOnly />\n}\n```\n\n----------------------------------------\n\nTITLE: create-next-app Configuration Prompts\nDESCRIPTION: List of prompts shown during the installation process of create-next-app, allowing customization of the project setup.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/01-getting-started/01-installation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nWhat is your project named? my-app\nWould you like to use TypeScript? No / Yes\nWould you like to use ESLint? No / Yes\nWould you like to use Tailwind CSS? No / Yes\nWould you like to use `src/` directory? No / Yes\nWould you like to use App Router? (recommended) No / Yes\nWould you like to customize the default import alias (@/*)? No / Yes\nWhat import alias would you like configured? @/*\n```\n\n----------------------------------------\n\nTITLE: Viewport Scale Properties HTML Output\nDESCRIPTION: The resulting HTML meta tag when configuring viewport width, scale, and user scalability options.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-viewport.mdx#2025-04-22_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<meta\n  name=\"viewport\"\n  content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Enabling Relay Support in Next.js\nDESCRIPTION: Demonstrates how to configure Relay support in Next.js using the compiler options in next.config.js.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/04-architecture/nextjs-compiler.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  compiler: {\n    relay: {\n      // This should match relay.config.js\n      src: './',\n      artifactDirectory: './__generated__',\n      language: 'typescript',\n      eagerEsModules: false,\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Next.js Development Mode Help\nDESCRIPTION: Shows how to display help information for the Next.js development mode command, including available options and arguments.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/08-next-cli.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnext dev -h\n```\n\n----------------------------------------\n\nTITLE: Launching Next.js with Node Inspect Flag for Debugging\nDESCRIPTION: This command starts the Next.js development server with the --inspect flag, enabling server-side debugging. It allows connection from Chrome DevTools for inspecting server-side code.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/06-configuring/13-debugging.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nNODE_OPTIONS='--inspect' next dev\n```\n\n----------------------------------------\n\nTITLE: Displaying Next.js Info Help Command in Bash\nDESCRIPTION: Command to show the help information for the 'next info' command, which explains options for displaying system and Next.js environment details.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/08-next-cli.mdx#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nnext info -h\n```\n\n----------------------------------------\n\nTITLE: Regex Path Header Matching\nDESCRIPTION: Example of using regex patterns for precise path matching in header configuration.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/headers.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async headers() {\n    return [\n      {\n        source: '/blog/:post(\\\\d{1,})',\n        headers: [\n          {\n            key: 'x-post',\n            value: ':post',\n          },\n        ],\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Headers from NextRequest in Next.js\nDESCRIPTION: Shows how to read headers directly from the NextRequest object in a Route Handler.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/12-route-handlers.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type NextRequest } from 'next/server'\n\nexport async function GET(request: NextRequest) {\n  const requestHeaders = new Headers(request.headers)\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function GET(request) {\n  const requestHeaders = new Headers(request.headers)\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Font in Head without Wrapper in Pages Router\nDESCRIPTION: Example showing how to use a font in a Next.js app with the Pages Router by injecting it directly into the head section rather than using a wrapper with className.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/03-fonts.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Inter } from 'next/font/google'\n\nconst inter = Inter({ subsets: ['latin'] })\n\nexport default function MyApp({ Component, pageProps }) {\n  return (\n    <>\n      <style jsx global>{`\n        html {\n          font-family: ${inter.style.fontFamily};\n        }\n      `}</style>\n      <Component {...pageProps} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring webpack loaders for Turbopack in Next.js\nDESCRIPTION: This snippet demonstrates how to configure webpack loaders for Turbopack in the next.config.js file. It shows how to map file extensions to a list of loaders with options.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/turbo.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  experimental: {\n    turbo: {\n      rules: {\n        '*.svg': {\n          loaders: ['@svgr/webpack'],\n          as: '*.js',\n        },\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server with Turbopack\nDESCRIPTION: Demonstrates how to start the Next.js development server using Turbopack, a new bundler for faster local iterations.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/08-next-cli.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnext dev --turbo\n```\n\n----------------------------------------\n\nTITLE: Using Inline Scripts in Next.js\nDESCRIPTION: Examples showing how to include inline JavaScript scripts using the Script component. An 'id' property must be assigned for inline scripts to allow Next.js to track and optimize them.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/05-scripts.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Script id=\"show-banner\">\n  {`document.getElementById('banner').classList.remove('hidden')`}\n</Script>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Script\n  id=\"show-banner\"\n  dangerouslySetInnerHTML={{\n    __html: `document.getElementById('banner').classList.remove('hidden')`,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Cypress with Next.js\nDESCRIPTION: Command line instructions for installing Cypress as a dev dependency in a Next.js project.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/08-testing/04-cypress.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D cypress\n# or\nyarn add -D cypress\n# or\npnpm install -D cypress\n```\n\n----------------------------------------\n\nTITLE: Page Component with Cached Data Fetching - JavaScript\nDESCRIPTION: JavaScript version of the page component implementing cached data fetching with hourly revalidation.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/02-data-fetching/01-fetching-caching-and-revalidating.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getItem } from '@/utils/get-item'\n\nexport const revalidate = 3600 // revalidate the data at most every hour\n\nexport default async function Page({ params: { id } }) {\n  const item = await getItem(id)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Dashboard Page Component in Next.js App Router\nDESCRIPTION: Example of creating a dashboard page component by adding a page.js file inside a dashboard folder. This component will render at the /dashboard URL path.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/02-pages-and-layouts.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// `app/dashboard/page.tsx` is the UI for the `/dashboard` URL\nexport default function Page() {\n  return <h1>Hello, Dashboard Page!</h1>\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// `app/dashboard/page.js` is the UI for the `/dashboard` URL\nexport default function Page() {\n  return <h1>Hello, Dashboard Page!</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Package.json Test Script Configuration\nDESCRIPTION: Adding Vitest test script to package.json configuration\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/08-testing/01-vitest.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"test\": \"vitest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Top-Level Directories Structure\nDESCRIPTION: The main directory structure for Next.js applications, including app (App Router), pages (Pages Router), public (static assets), and src (optional source folder).\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/01-getting-started/02-project-structure.mdx#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\napp/          # App Router\npages/        # Pages Router\npublic/       # Static assets\nsrc/          # Optional source folder\n```\n\n----------------------------------------\n\nTITLE: Custom Image Loader Implementation\nDESCRIPTION: Example of implementing a custom loader function for the Image Component to resolve image URLs with custom parameters.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/image.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n'use client'\n\nimport Image from 'next/image'\n\nconst imageLoader = ({ src, width, quality }) => {\n  return `https://example.com/${src}?w=${width}&q=${quality || 75}`\n}\n\nexport default function Page() {\n  return (\n    <Image\n      loader={imageLoader}\n      src=\"me.png\"\n      alt=\"Picture of the author\"\n      width={500}\n      height={500}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Page Metadata in Markdown\nDESCRIPTION: Markdown frontmatter defining the documentation page metadata including title, description and source path.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/02-functions/userAgent.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: userAgent\ndescription: The userAgent helper extends the Web Request API with additional properties and methods to interact with the user agent object from the request.\nsource: app/api-reference/functions/userAgent\n---\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Page Component in Next.js App Router\nDESCRIPTION: Example of creating a home page component using page.js file at the root of the app directory. This component will render at the root URL path (/).\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/02-pages-and-layouts.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// `app/page.tsx` is the UI for the `/` URL\nexport default function Page() {\n  return <h1>Hello, Home page!</h1>\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// `app/page.js` is the UI for the `/` URL\nexport default function Page() {\n  return <h1>Hello, Home page!</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS for IE11 Grid Support in JSON\nDESCRIPTION: This PostCSS configuration enables CSS Grid Layout support for IE11 project-wide using autoprefixer settings.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/06-configuring/09-post-css.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    \"postcss-flexbugs-fixes\",\n    [\n      \"postcss-preset-env\",\n      {\n        \"autoprefixer\": {\n          \"flexbox\": \"no-2009\",\n          \"grid\": \"autoplace\"\n        },\n        \"stage\": 3,\n        \"features\": {\n          \"custom-properties\": false\n        }\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Loading with Forwarded Ref in React\nDESCRIPTION: This example shows how to implement lazy loading for images using a custom container component that forwards the ref to the underlying DOM element.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/01-components/image-legacy.mdx#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from 'next/legacy/image'\nimport React from 'react'\n\nconst Container = React.forwardRef((props, ref) => {\n  return (\n    <div ref={ref} style={{ overflowX: 'scroll', width: '500px' }}>\n      {props.children}\n    </div>\n  )\n})\n\nconst Example = () => {\n  const lazyRoot = React.useRef(null)\n\n  return (\n    <Container ref={lazyRoot}>\n      <Image lazyRoot={lazyRoot} src=\"/one.jpg\" width=\"500\" height=\"500\" />\n      <Image lazyRoot={lazyRoot} src=\"/two.jpg\" width=\"500\" height=\"500\" />\n    </Container>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js\nDESCRIPTION: Creation of next.config.mjs file to specify Next.js configuration options, including output type and build directory.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/05-from-create-react-app.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  output: 'export', // Outputs a Single-Page Application (SPA).\n  distDir: './dist', // Changes the build output directory to `./dist/`.\n}\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Adding Tags to Fetch in Next.js\nDESCRIPTION: Example of adding tags to a fetch request in Next.js, which can later be used for targeted cache revalidation.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/revalidateTag.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nfetch(url, { next: { tags: [...] } });\n```\n\n----------------------------------------\n\nTITLE: Configuring Turbotrace in Next.js\nDESCRIPTION: Configuration options for enabling and customizing the experimental turbotrace feature for faster dependency tracing.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/output.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  experimental: {\n    turbotrace: {\n      // control the log level of the turbotrace, default is `error`\n      logLevel?:\n      | 'bug'\n      | 'fatal'\n      | 'error'\n      | 'warning'\n      | 'hint'\n      | 'note'\n      | 'suggestions'\n      | 'info',\n      // control if the log of turbotrace should contain the details of the analysis, default is `false`\n      logDetail?: boolean\n      // show all log messages without limit\n      // turbotrace only show 1 log message for each categories by default\n      logAll?: boolean\n      // control the context directory of the turbotrace\n      // files outside of the context directory will not be traced\n      // set the `experimental.outputFileTracingRoot` has the same effect\n      // if the `experimental.outputFileTracingRoot` and this option are both set, the `experimental.turbotrace.contextDirectory` will be used\n      contextDirectory?: string\n      // if there is `process.cwd()` expression in your code, you can set this option to tell `turbotrace` the value of `process.cwd()` while tracing.\n      // for example the require(process.cwd() + '/package.json') will be traced as require('/path/to/cwd/package.json')\n      processCwd?: string\n      // control the maximum memory usage of the `turbotrace`, in `MB`, default is `6000`.\n      memoryLimit?: number\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Importing CSS Module in Base Button Component (JavaScript)\nDESCRIPTION: This snippet shows how to import and use a CSS module in a base button component using JavaScript. It imports styles from 'base-button.module.css' and applies the 'primary' class to a button element.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/05-styling/01-css-modules.mdx#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport styles from './base-button.module.css'\n\nexport function BaseButton() {\n  return <button className={styles.primary} />\n}\n```\n\n----------------------------------------\n\nTITLE: Theme Color HTML Output\nDESCRIPTION: The resulting HTML output when setting a simple theme color in the viewport configuration.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-viewport.mdx#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"theme-color\" content=\"black\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Console Removal in Next.js\nDESCRIPTION: Demonstrates how to set up removal of console statements in Next.js applications using compiler options.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/04-architecture/nextjs-compiler.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  compiler: {\n    removeConsole: true,\n  },\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  compiler: {\n    removeConsole: {\n      exclude: ['error'],\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Next.js CLI Help Information\nDESCRIPTION: Shows how to display the help information for the Next.js CLI, listing available commands and options.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/08-next-cli.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnext -h\n```\n\n----------------------------------------\n\nTITLE: Configuring Device Sizes for Next.js Images\nDESCRIPTION: Configuration for specifying device width breakpoints used by next/legacy/image component for responsive and fill layouts to serve appropriate image sizes.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/01-components/image-legacy.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Wildcard Path Header Matching\nDESCRIPTION: Demonstrates using wildcard patterns for matching multiple path segments in header configuration.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/headers.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async headers() {\n    return [\n      {\n        source: '/blog/:slug*',\n        headers: [\n          {\n            key: 'x-slug',\n            value: ':slug*',\n          },\n          {\n            key: 'x-slug-:slug*',\n            value: 'my other custom header value',\n          },\n        ],\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Dynamic Route Segments in Next.js\nDESCRIPTION: Illustrates how to use dynamic segments in Route Handlers to create request handlers from dynamic data.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/12-route-handlers.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function GET(\n  request: Request,\n  { params }: { params: { slug: string } }\n) {\n  const slug = params.slug // 'a', 'b', or 'c'\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function GET(request, { params }) {\n  const slug = params.slug // 'a', 'b', or 'c'\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Typed Routes in Next.js Configuration\nDESCRIPTION: This code snippet demonstrates how to enable the experimental 'typedRoutes' feature in a Next.js project. It configures the next.config.js file to turn on support for statically typed links. This feature requires using the App Router and TypeScript in the project.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/typedRoutes.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  experimental: {\n    typedRoutes: true,\n  },\n}\n\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: Pulling Environment Variables from Vercel\nDESCRIPTION: Command to pull environment variables from Vercel into local development.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/03-environment-variables.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nvercel env pull .env.local\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Image Patterns in Next.js\nDESCRIPTION: This next.config.js snippet shows how to configure remote patterns for image optimization. It specifies allowed external image sources to protect against malicious users.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/01-components/image-legacy.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: 'example.com',\n        port: '',\n        pathname: '/account123/**',\n      },\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Loader with Next.js Legacy Image Component\nDESCRIPTION: Shows how to implement a custom loader function with the legacy Image component. The loader function is responsible for generating the final URL for an image based on the src, width, and quality parameters.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/01-components/image-legacy.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from 'next/legacy/image'\n\nconst myLoader = ({ src, width, quality }) => {\n  return `https://example.com/${src}?w=${width}&q=${quality || 75}`\n}\n\nconst MyImage = (props) => {\n  return (\n    <Image\n      loader={myLoader}\n      src=\"me.png\"\n      alt=\"Picture of the author\"\n      width={500}\n      height={500}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables in Next.js Config\nDESCRIPTION: Demonstrates how to add environment variables to the JavaScript bundle using the env configuration in next.config.js file. This makes the variables accessible through process.env in the application code.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/env.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  env: {\n    customKey: 'my-value',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Web App Manifest in Next.js Metadata\nDESCRIPTION: This snippet shows how to specify a web application manifest in the metadata configuration of a Next.js application.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-metadata.mdx#2025-04-22_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  manifest: 'https://nextjs.org/manifest.json',\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"manifest\" href=\"https://nextjs.org/manifest.json\" />\n```\n\n----------------------------------------\n\nTITLE: Defining crossOrigin Option in Next.js Configuration\nDESCRIPTION: This snippet demonstrates how to set the crossOrigin option in the Next.js configuration file. It allows you to specify the crossOrigin attribute for script tags.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/03-next-config-js/crossOrigin.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: crossOrigin\ndescription: Use the `crossOrigin` option to add a crossOrigin tag on the `script` tags generated by `next/script` and `next/head`.\nsource: app/api-reference/next-config-js/crossOrigin\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring onDemandEntries in Next.js Configuration\nDESCRIPTION: Configuration example showing how to customize Next.js page buffer management in development mode. Controls how long pages are kept in memory and how many pages are buffered simultaneously.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/onDemandEntries.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  onDemandEntries: {\n    // period (in ms) where the server will keep pages in the buffer\n    maxInactiveAge: 25 * 1000,\n    // number of pages that should be kept simultaneously without being disposed\n    pagesBufferLength: 2,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Preview Data in Next.js API Routes\nDESCRIPTION: This code shows how to access preview mode status and data within an API route. It demonstrates accessing the preview flag and preview data from the request object.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/06-configuring/14-preview-mode.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function myApiRoute(req, res) {\n  const isPreview = req.preview\n  const previewData = req.previewData\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js App on Custom Port with Environment Variable\nDESCRIPTION: Example of starting a Next.js application in production mode on port 4000 using the PORT environment variable instead of the command-line flag.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/08-next-cli.mdx#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nPORT=4000 next start\n```\n\n----------------------------------------\n\nTITLE: Next.js MDX Configuration\nDESCRIPTION: Configuration for enabling MDX support in Next.js\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/05-mdx.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst withMDX = require('@next/mdx')()\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  // Configure `pageExtensions` to include MDX files\n  pageExtensions: ['js', 'jsx', 'mdx', 'ts', 'tsx'],\n  // Optionally, add any other Next.js config below\n}\n\nmodule.exports = withMDX(nextConfig)\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime Settings in Next.js Configuration File\nDESCRIPTION: Demonstrates how to set up server-side and public runtime configuration in next.config.js. Shows separation between server-only secrets and publicly accessible configuration values.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/03-next-config-js/runtime-configuration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  serverRuntimeConfig: {\n    // Will only be available on the server side\n    mySecret: 'secret',\n    secondSecret: process.env.SECOND_SECRET, // Pass through env variables\n  },\n  publicRuntimeConfig: {\n    // Will be available on both server and client\n    staticFolder: '/static',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Documentation Frontmatter\nDESCRIPTION: YAML frontmatter block defining metadata for a Next.js documentation page about building applications\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Building Your Application\ndescription: Learn how to use Next.js features to build your application.\nsource: app/building-your-application\n---\n```\n\n----------------------------------------\n\nTITLE: Returning 404 Not Found from getStaticProps\nDESCRIPTION: Implementation showing how to return a 404 status from getStaticProps using the notFound property. This is useful for conditionally showing 404 pages based on data availability.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/02-functions/get-static-props.mdx#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nexport async function getStaticProps(context) {\n  const res = await fetch(`https://.../data`)\n  const data = await res.json()\n\n  if (!data) {\n    return {\n      notFound: true,\n    }\n  }\n\n  return {\n    props: { data }, // will be passed to the page component as props\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Template Output Structure\nDESCRIPTION: Demonstrates how the template component is rendered within the application's component hierarchy, showing its position between layout and children components.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/template.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Layout>\n  {/* Note that the template is given a unique key. */}\n  <Template key={routeParam}>{children}</Template>\n</Layout>\n```\n\n----------------------------------------\n\nTITLE: Using Next.js Metadata API (JavaScript)\nDESCRIPTION: This snippet demonstrates the JavaScript version of using Next.js's Metadata API for managing application metadata.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/05-from-create-react-app.mdx#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  title: 'React App',\n  description: 'Web site created with Next.js.',\n}\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown to HTML Transformation Example\nDESCRIPTION: Demonstrates how to use unified, remark, and rehype to transform markdown into HTML\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/05-mdx.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { unified } from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport rehypeSanitize from 'rehype-sanitize'\nimport rehypeStringify from 'rehype-stringify'\n\nmain()\n\nasync function main() {\n  const file = await unified()\n    .use(remarkParse) // Convert into markdown AST\n    .use(remarkRehype) // Transform to HTML AST\n    .use(rehypeSanitize) // Sanitize HTML input\n    .use(rehypeStringify) // Convert AST into serialized HTML\n    .process('Hello, Next.js!')\n\n  console.log(String(file)) // <p>Hello, Next.js!</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js Version 9 with npm\nDESCRIPTION: Command to upgrade an existing Next.js application to version 9 using npm package manager.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/10-upgrading/10-version-9.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i next@9\n```\n\n----------------------------------------\n\nTITLE: Implementing Link Component in Next.js App Router\nDESCRIPTION: This TypeScript React snippet demonstrates how to import and use the Link component in a Next.js application using the App Router.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/05-community/01-contribution-guide.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n  return <Link href=\"/about\">About</Link>\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js 13 and Dependencies using npm\nDESCRIPTION: Command to upgrade Next.js to version 13 along with React and ESLint config using npm package manager.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/10-upgrading/06-version-13.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i next@13 react@latest react-dom@latest eslint-config-next@13\n```\n\n----------------------------------------\n\nTITLE: Client-side Data Fetching with SWR in Next.js\nDESCRIPTION: This snippet shows how to perform client-side data fetching in a Next.js Client Component using the SWR library. It demonstrates fetching data from an API and handling loading and error states.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/10-deploying/02-static-exports.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport useSWR from 'swr'\n\nconst fetcher = (url: string) => fetch(url).then((r) => r.json())\n\nexport default function Page() {\n  const { data, error } = useSWR(\n    `https://jsonplaceholder.typicode.com/posts/1`,\n    fetcher\n  )\n  if (error) return 'Failed to load'\n  if (!data) return 'Loading...'\n\n  return data.title\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Global Styles in App Layout\nDESCRIPTION: Example of importing global styles in the root layout file of the app directory.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/02-app-router-migration.mdx#2025-04-22_snippet_35\n\nLANGUAGE: jsx\nCODE:\n```\nimport '../styles/globals.css'\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Import Changes in Next.js 9\nDESCRIPTION: Shows the changes in TypeScript type imports required when upgrading to Next.js 9. Old imports from various Next.js modules need to be updated to the new type names.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/10-upgrading/10-version-9.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NextContext } from 'next'\nimport { NextAppContext, DefaultAppIProps } from 'next/app'\nimport { NextDocumentContext, DefaultDocumentIProps } from 'next/document'\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NextPageContext } from 'next'\nimport { AppContext, AppInitialProps } from 'next/app'\nimport { DocumentContext, DocumentInitialProps } from 'next/document'\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js v10 with pnpm\nDESCRIPTION: Command to upgrade Next.js to version 10 using pnpm package manager\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/10-upgrading/09-version-10.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm up next@10\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Build ID Generation in Next.js Configuration\nDESCRIPTION: This code snippet shows how to configure a custom build ID generation function in the next.config.js file. It uses an asynchronous function that returns a value from an environment variable, which could be a Git hash or any other unique identifier.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/generateBuildId.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nmodule.exports = {\n  generateBuildId: async () => {\n    // This could be anything, using the latest git hash\n    return process.env.GIT_HASH\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Loading State Management in Next.js Forms\nDESCRIPTION: Demonstrates how to implement and manage loading states during form submission using React state.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState, FormEvent } from 'react'\n\nexport default function Page() {\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n\n  async function onSubmit(event: FormEvent<HTMLFormElement>) {\n    event.preventDefault()\n    setIsLoading(true)\n\n    try {\n      const formData = new FormData(event.currentTarget)\n      const response = await fetch('/api/submit', {\n        method: 'POST',\n        body: formData,\n      })\n\n      const data = await response.json()\n    } catch (error) {\n      console.error(error)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <form onSubmit={onSubmit}>\n      <input type=\"text\" name=\"name\" />\n      <button type=\"submit\" disabled={isLoading}>\n        {isLoading ? 'Loading...' : 'Submit'}\n      </button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: XML Output from Localized Sitemap in Next.js\nDESCRIPTION: Example of the XML output produced by the localized sitemap function. Shows how language alternates are represented with xhtml:link elements in the generated XML.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/01-metadata/sitemap.mdx#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\" xmlns:xhtml=\"http://www.w3.org/1999/xhtml\">\n  <url>\n    <loc>https://acme.com</loc>\n    <xhtml:link\n      rel=\"alternate\"\n      hreflang=\"es\"\n      href=\"https://acme.com/es\"/>\n    <xhtml:link\n      rel=\"alternate\"\n      hreflang=\"de\"\n      href=\"https://acme.com/de\"/>\n    <lastmod>2023-04-06T15:02:24.021Z</lastmod>\n  </url>\n  <url>\n    <loc>https://acme.com/about</loc>\n    <xhtml:link\n      rel=\"alternate\"\n      hreflang=\"es\"\n      href=\"https://acme.com/es/about\"/>\n    <xhtml:link\n      rel=\"alternate\"\n      hreflang=\"de\"\n      href=\"https://acme.com/de/about\"/>\n    <lastmod>2023-04-06T15:02:24.021Z</lastmod>\n  </url>\n  <url>\n    <loc>https://acme.com/blog</loc>\n    <xhtml:link\n      rel=\"alternate\"\n      hreflang=\"es\"\n      href=\"https://acme.com/es/blog\"/>\n    <xhtml:link\n      rel=\"alternate\"\n      hreflang=\"de\"\n      href=\"https://acme.com/de/blog\"/>\n    <lastmod>2023-04-06T15:02:24.021Z</lastmod>\n  </url>\n</urlset>\n```\n\n----------------------------------------\n\nTITLE: Implementing getInitialProps in JavaScript\nDESCRIPTION: Example of implementing getInitialProps in a Next.js page component using JavaScript. The code fetches star count from GitHub API and passes it as props to the page component.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/02-functions/get-initial-props.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage.getInitialProps = async (ctx) => {\n  const res = await fetch('https://api.github.com/repos/vercel/next.js')\n  const json = await res.json()\n  return { stars: json.stargazers_count }\n}\n\nexport default function Page({ stars }) {\n  return stars\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Standalone Output in Next.js\nDESCRIPTION: Configuration code for enabling standalone output mode in Next.js, which allows for deploying the application without node_modules.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/output.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  output: 'standalone',\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Keep-Alive in Next.js Configuration\nDESCRIPTION: Configuration snippet showing how to disable HTTP Keep-Alive for all server-side fetch() calls in Next.js applications using next.config.js. This is particularly relevant for Node.js versions prior to 18 where Next.js uses undici to polyfill fetch().\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/httpAgentOptions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  httpAgentOptions: {\n    keepAlive: false,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @vercel/otel Package for Next.js\nDESCRIPTION: Command to install the @vercel/otel package, which provides a simplified way to configure OpenTelemetry in Next.js applications.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/10-open-telemetry.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @vercel/otel\n```\n\n----------------------------------------\n\nTITLE: Generate Static Params with JavaScript\nDESCRIPTION: JavaScript version of the generateStaticParams function for static route generation without TypeScript.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/09-dynamic-routes.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function generateStaticParams() {\n  const posts = await fetch('https://.../posts').then((res) => res.json())\n\n  return posts.map((post) => ({\n    slug: post.slug,\n  }))\n}\n```\n\n----------------------------------------\n\nTITLE: Default Next.js PostCSS Configuration in JSON\nDESCRIPTION: This is the default PostCSS configuration used by Next.js, defined in a JSON file.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/06-configuring/09-post-css.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    \"postcss-flexbugs-fixes\",\n    [\n      \"postcss-preset-env\",\n      {\n        \"autoprefixer\": {\n          \"flexbox\": \"no-2009\"\n        },\n        \"stage\": 3,\n        \"features\": {\n          \"custom-properties\": false\n        }\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Next.js Codemod CLI in Bash\nDESCRIPTION: Command to run Next.js codemods using npx. It requires specifying the transform name and the path to apply the transformation.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/01-codemods.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @next/codemod <transform> <path>\n```\n\n----------------------------------------\n\nTITLE: Extending Webpack Configuration in Next.js\nDESCRIPTION: This snippet demonstrates how to define a function in next.config.js to extend the webpack configuration. It shows the function signature and available parameters.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/webpack.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  webpack: (\n    config,\n    { buildId, dev, isServer, defaultLoaders, nextRuntime, webpack }\n  ) => {\n    // Important: return the modified config\n    return config\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Contentful Image Loader Implementation\nDESCRIPTION: Custom image loader implementation for Contentful Images API\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/images.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function contentfulLoader({ src, width, quality }) {\n  const url = new URL(`https://example.com${src}`)\n  url.searchParams.set('fm', 'webp')\n  url.searchParams.set('w', width.toString())\n  url.searchParams.set('q', (quality || 75).toString())\n  return url.href\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Links in a Navigation Component (JSX)\nDESCRIPTION: Illustrates how to create a navigation component with multiple Link elements pointing to different pages in the Pages Router.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/link.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\nfunction Home() {\n  return (\n    <ul>\n      <li>\n        <Link href=\"/\">Home</Link>\n      </li>\n      <li>\n        <Link href=\"/about\">About Us</Link>\n      </li>\n      <li>\n        <Link href=\"/blog/hello-world\">Blog Post</Link>\n      </li>\n    </ul>\n  )\n}\n\nexport default Home\n```\n\n----------------------------------------\n\nTITLE: Installing Sass Package for Next.js\nDESCRIPTION: Command to install the Sass package as a development dependency in a Next.js project. Required for using Sass stylesheets with .scss and .sass extensions.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/05-styling/04-sass.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev sass\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables in Next.js\nDESCRIPTION: Ensure environment variables are properly configured and secured. Public variables should be prefixed with NEXT_PUBLIC_.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/10-deploying/01-production-checklist.mdx#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nNEXT_PUBLIC_\n```\n\n----------------------------------------\n\nTITLE: Basic Page Extensions Configuration\nDESCRIPTION: Simple configuration example showing how to specify multiple file extensions that Next.js should recognize as pages, including markdown and TypeScript files.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/pageExtensions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  pageExtensions: ['mdx', 'md', 'jsx', 'js', 'tsx', 'ts'],\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Option to Error in Root Layout\nDESCRIPTION: This code snippet demonstrates how to explicitly set the dynamic option to 'error' in a root layout file, which produces similar behavior to attempting to use unsupported features with static export.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/10-deploying/02-static-exports.mdx#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nexport const dynamic = 'error'\n```\n\n----------------------------------------\n\nTITLE: Configuring Subdomain Patterns for Next.js Images\nDESCRIPTION: Example showing how to configure remote patterns to allow multiple subdomains using wildcard patterns.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/image.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: '**.example.com',\n        port: '',\n      },\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Main Login Page in Next.js\nDESCRIPTION: This snippet shows how to create a basic login page component in Next.js. It imports a Login component and renders it as the default export.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/10-parallel-routes.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Login } from '@/app/ui/login'\n\nexport default function Page() {\n  return <Login />\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Login } from '@/app/ui/login'\n\nexport default function Page() {\n  return <Login />\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Preview Mode Cookies in Next.js API Route\nDESCRIPTION: This snippet creates an API route to clear the Preview Mode cookies manually. It uses the clearPreviewData function to remove the preview session.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/06-configuring/14-preview-mode.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function handler(req, res) {\n  res.clearPreviewData({})\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Front Matter for Next.js Codemods Documentation\nDESCRIPTION: YAML front matter metadata for a documentation page about Next.js codemods, including title, description and source path information.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/10-upgrading/01-codemods.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Codemods\ndescription: Use codemods to upgrade your Next.js codebase when new features are released.\nsource: app/building-your-application/upgrading/codemods\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Production Source Maps in Next.js\nDESCRIPTION: Configuration snippet showing how to enable browser source map generation during production builds in Next.js. This is done by setting productionBrowserSourceMaps to true in the Next.js configuration file.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/productionBrowserSourceMaps.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  productionBrowserSourceMaps: true,\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Output for twitter-image\nDESCRIPTION: The HTML head output generated when using the twitter-image file convention. Shows the meta tags created for Twitter images with placeholder values for generated content.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/01-metadata/opengraph-image.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"twitter:image\" content=\"<generated>\" />\n<meta name=\"twitter:image:type\" content=\"<generated>\" />\n<meta name=\"twitter:image:width\" content=\"<generated>\" />\n<meta name=\"twitter:image:height\" content=\"<generated>\" />\n```\n\n----------------------------------------\n\nTITLE: Using afterInteractive Strategy in Next.js Page\nDESCRIPTION: Example showing how to use the Script component with afterInteractive strategy in a page file. This loads scripts after some hydration occurs.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/script.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Script from 'next/script'\n\nexport default function Page() {\n  return (\n    <>\n      <Script src=\"https://example.com/script.js\" strategy=\"afterInteractive\" />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Cookies with NextRequest\nDESCRIPTION: Example of clearing all cookies using the cookies.clear() method\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/next-request.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nrequest.cookies.clear()\n```\n\n----------------------------------------\n\nTITLE: Draft Mode in getStaticProps\nDESCRIPTION: Example of implementing draft mode support in getStaticProps with conditional data fetching.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/06-configuring/11-draft-mode.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function getStaticProps(context) {\n  if (context.draftMode) {\n    // dynamic data\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function getStaticProps(context) {\n  const url = context.draftMode\n    ? 'https://draft.example.com'\n    : 'https://production.example.com'\n  const res = await fetch(url)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Loader in Next.js\nDESCRIPTION: Configuration for setting up a cloud provider image loader with path prefix in next.config.js. This enables using relative URLs for image sources while generating correct absolute URLs for the provider.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/01-components/image-legacy.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    loader: 'imgix',\n    path: 'https://example.com/myaccount/',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Multiple ESLint Configurations in Next.js\nDESCRIPTION: This JSON snippet shows how to extend multiple ESLint configurations, including the Next.js configuration, in a project's ESLint setup.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/02-eslint.mdx#2025-04-22_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\"eslint:recommended\", \"next\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Keep-Alive Timeout for Next.js Server\nDESCRIPTION: Command to start Next.js in production mode with a custom keep-alive timeout of 70000 milliseconds, useful when deploying behind proxies or load balancers.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/08-next-cli.mdx#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nnext start --keepAliveTimeout 70000\n```\n\n----------------------------------------\n\nTITLE: Sending Web Vitals Data to External Analytics Service\nDESCRIPTION: Shows how to send collected metrics to an external analytics endpoint using either navigator.sendBeacon or fetch API.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/08-analytics.mdx#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nuseReportWebVitals((metric) => {\n  const body = JSON.stringify(metric)\n  const url = 'https://example.com/analytics'\n\n  // Use `navigator.sendBeacon()` if available, falling back to `fetch()`.\n  if (navigator.sendBeacon) {\n    navigator.sendBeacon(url, body)\n  } else {\n    fetch(url, { body, method: 'POST', keepalive: true })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Patterns in Next.js Image Component\nDESCRIPTION: Configuration example for setting up remote patterns to restrict external image sources with specific protocol, hostname, and pathname patterns.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/image.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: 'example.com',\n        port: '',\n        pathname: '/account123/**',\n      },\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Output for opengraph-image\nDESCRIPTION: The HTML head output generated when using the opengraph-image file convention. Shows the meta tags created for Open Graph images with placeholder values for generated content.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/01-metadata/opengraph-image.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<meta property=\"og:image\" content=\"<generated>\" />\n<meta property=\"og:image:type\" content=\"<generated>\" />\n<meta property=\"og:image:width\" content=\"<generated>\" />\n<meta property=\"og:image:height\" content=\"<generated>\" />\n```\n\n----------------------------------------\n\nTITLE: Migrating Viewport Metadata in JavaScript\nDESCRIPTION: Moves certain viewport metadata from the 'metadata' export to a separate 'viewport' export.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/01-codemods.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const metadata = {\n  title: 'My App',\n  themeColor: 'dark',\n  viewport: {\n    width: 1,\n  },\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport const metadata = {\n  title: 'My App',\n}\n\nexport const viewport = {\n  width: 1,\n  themeColor: 'dark',\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Non-Variable Font in Pages Router\nDESCRIPTION: Example showing how to apply the Roboto font (non-variable) globally in a Next.js app using the Pages Router by adding it to _app.js with a specific weight.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/03-fonts.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Roboto } from 'next/font/google'\n\nconst roboto = Roboto({\n  weight: '400',\n  subsets: ['latin'],\n})\n\nexport default function MyApp({ Component, pageProps }) {\n  return (\n    <main className={roboto.className}>\n      <Component {...pageProps} />\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Styled Components in Next.js\nDESCRIPTION: Demonstrates how to enable and configure styled-components compilation in Next.js using the compiler options in next.config.js.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/04-architecture/nextjs-compiler.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  compiler: {\n    styledComponents: true,\n  },\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  compiler: {\n    // see https://styled-components.com/docs/tooling#babel-plugin for more info on the options.\n    styledComponents: {\n      // Enabled by default in development, disabled in production to reduce file size,\n      // setting this will override the default for all environments.\n      displayName?: boolean,\n      // Enabled by default.\n      ssr?: boolean,\n      // Enabled by default.\n      fileName?: boolean,\n      // Empty by default.\n      topLevelImportPaths?: string[],\n      // Defaults to [\"index\"].\n      meaninglessFileNames?: string[],\n      // Enabled by default.\n      cssProp?: boolean,\n      // Empty by default.\n      namespace?: string,\n      // Not supported yet.\n      minify?: boolean,\n      // Not supported yet.\n      transpileTemplateLiterals?: boolean,\n      // Not supported yet.\n      pure?: boolean,\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration for Next.js Image Documentation\nDESCRIPTION: YAML frontmatter configuration for a Next.js documentation page about image optimization. Defines the title, navigation title, description, and source path for the documentation.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/05-optimizing/01-images.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Image Optimization\nnav_title: Images\ndescription: Optimize your images with the built-in `next/image` component.\nsource: app/building-your-application/optimizing/images\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Alternate Links in Next.js Metadata\nDESCRIPTION: This snippet demonstrates how to set up alternate links for different languages, media types, and content types in the metadata of a Next.js application.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-metadata.mdx#2025-04-22_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  alternates: {\n    canonical: 'https://nextjs.org',\n    languages: {\n      'en-US': 'https://nextjs.org/en-US',\n      'de-DE': 'https://nextjs.org/de-DE',\n    },\n    media: {\n      'only screen and (max-width: 600px)': 'https://nextjs.org/mobile',\n    },\n    types: {\n      'application/rss+xml': 'https://nextjs.org/rss',\n    },\n  },\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"canonical\" href=\"https://nextjs.org\" />\n<link rel=\"alternate\" hreflang=\"en-US\" href=\"https://nextjs.org/en-US\" />\n<link rel=\"alternate\" hreflang=\"de-DE\" href=\"https://nextjs.org/de-DE\" />\n<link\n  rel=\"alternate\"\n  media=\"only screen and (max-width: 600px)\"\n  href=\"https://nextjs.org/mobile\"\n/>\n<link\n  rel=\"alternate\"\n  type=\"application/rss+xml\"\n  href=\"https://nextjs.org/rss\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Cypress Component Test Example\nDESCRIPTION: Sample component test demonstrating component rendering validation.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/08-testing/04-cypress.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport Page from '../../app/page'\n\ndescribe('<Page />', () => {\n  it('should render and display expected content', () => {\n    cy.mount(<Page />)\n    cy.get('h1').contains('Home')\n    cy.get('a[href=\"/about\"]').should('be.visible')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Skypack CDN Integration Example\nDESCRIPTION: Implementation example showing how to import and use the canvas-confetti package from Skypack CDN in a React component.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/urlImports.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport confetti from 'https://cdn.skypack.dev/canvas-confetti'\nimport { useEffect } from 'react'\n\nexport default () => {\n  useEffect(() => {\n    confetti()\n  })\n  return <p>Hello</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Sharp Package for Image Optimization\nDESCRIPTION: Commands for installing the sharp package as a dependency for Next.js image optimization using different package managers.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/output.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i sharp\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add sharp\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add sharp\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add sharp\n```\n\n----------------------------------------\n\nTITLE: Next.js Regex Path Matching Configuration\nDESCRIPTION: Examples of using regex patterns in rewrite paths for precise URL matching\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/rewrites.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/old-blog/:post(\\\\d{1,})',\n        destination: '/blog/:post',\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Jest test scripts to package.json for Next.js\nDESCRIPTION: Configuration of test scripts in package.json for running Jest tests in a Next.js project.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/08-testing/02-jest.mdx#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"test\": \"jest\",\n    \"test:watch\": \"jest --watch\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Content Rendering for Next.js Documentation\nDESCRIPTION: JSX comment indicating a section for conditional content rendering in Next.js documentation. It suggests using a PagesOnly component to wrap content specific to the Pages Router.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/05-optimizing/03-scripts.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{/* DO NOT EDIT. The content of this doc is generated from the source above. To edit the content of this page, navigate to the source page in your editor. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n```\n\n----------------------------------------\n\nTITLE: Configuring Metadata in Next.js with JavaScript\nDESCRIPTION: This snippet shows how to define metadata for a Next.js page using JavaScript. It exports a metadata object with a title property, which will be used to set the page title.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/02-pages-and-layouts.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport const metadata = {\n  title: 'Next.js',\n}\n\nexport default function Page() {\n  return '...'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Alt Text for Generated Images\nDESCRIPTION: Example showing how to export alt text metadata for programmatically generated Open Graph or Twitter images in TypeScript and JavaScript.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/01-metadata/opengraph-image.mdx#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nexport const alt = 'My images alt text'\n\nexport default function Image() {}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport const alt = 'My images alt text'\n\nexport default function Image() {}\n```\n\n----------------------------------------\n\nTITLE: Basic Script Component Usage in Next.js\nDESCRIPTION: A basic example showing how to import and use the Script component in a Next.js dashboard page to load an external script.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/script.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport Script from 'next/script'\n\nexport default function Dashboard() {\n  return (\n    <>\n      <Script src=\"https://example.com/script.js\" />\n    </>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport Script from 'next/script'\n\nexport default function Dashboard() {\n  return (\n    <>\n      <Script src=\"https://example.com/script.js\" />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SWC Plugins in Next.js\nDESCRIPTION: Configuration example for adding experimental SWC plugins written in WebAssembly. The plugins can be specified using npm module package names or absolute paths to .wasm binaries, along with their configuration options.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/04-architecture/nextjs-compiler.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  experimental: {\n    swcPlugins: [\n      [\n        'plugin',\n        {\n          ...pluginOptions,\n        },\n      ],\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking style imports in Jest for Next.js\nDESCRIPTION: Mock file for handling style imports in Jest tests for a Next.js project.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/08-testing/02-jest.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {}\n```\n\n----------------------------------------\n\nTITLE: Enabling Draft Mode in Next.js API Route\nDESCRIPTION: Basic implementation of an API route handler that enables draft mode by setting a cookie.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/06-configuring/11-draft-mode.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function handler(req, res) {\n  // ...\n  res.setDraftMode({ enable: true })\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server with Custom Hostname\nDESCRIPTION: Shows how to start the Next.js development server with a custom hostname to make it available on the network.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/08-next-cli.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnext dev -H 192.168.1.2\n```\n\n----------------------------------------\n\nTITLE: Configuring Archives, Assets, and Bookmarks in Next.js Metadata\nDESCRIPTION: This snippet demonstrates how to set up archives, assets, and bookmarks links in the metadata configuration of a Next.js application.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-metadata.mdx#2025-04-22_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  archives: ['https://nextjs.org/13'],\n  assets: ['https://nextjs.org/assets'],\n  bookmarks: ['https://nextjs.org/13'],\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"archives\" href=\"https://nextjs.org/13\" />\n<link rel=\"assets\" href=\"https://nextjs.org/assets\" />\n<link rel=\"bookmarks\" href=\"https://nextjs.org/13\" />\n```\n\n----------------------------------------\n\nTITLE: Clearing Preview Mode Cookies with Path in Next.js\nDESCRIPTION: This API route demonstrates how to clear Preview Mode cookies when a specific path was set during preview initialization. It extracts the path from the query parameters and passes it to clearPreviewData.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/06-configuring/14-preview-mode.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function handler(req, res) {\n  const { path } = req.query\n\n  res.clearPreviewData({ path })\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming Next.js Image Imports in JSX\nDESCRIPTION: Renames 'next/image' imports to 'next/legacy/image' and 'next/future/image' to 'next/image' in Next.js 13.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/01-codemods.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image1 from 'next/image'\nimport Image2 from 'next/future/image'\n\nexport default function Home() {\n  return (\n    <div>\n      <Image1 src=\"/test.jpg\" width=\"200\" height=\"300\" />\n      <Image2 src=\"/test.png\" width=\"500\" height=\"400\" />\n    </div>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// 'next/image' becomes 'next/legacy/image'\nimport Image1 from 'next/legacy/image'\n// 'next/future/image' becomes 'next/image'\nimport Image2 from 'next/image'\n\nexport default function Home() {\n  return (\n    <div>\n      <Image1 src=\"/test.jpg\" width=\"200\" height=\"300\" />\n      <Image2 src=\"/test.png\" width=\"500\" height=\"400\" />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Build Directory in Next.js Config\nDESCRIPTION: Sets up a custom build directory named 'build' instead of the default '.next' directory in Next.js. The configuration is done through the next.config.js file. Note that the custom directory must remain within the project directory - paths like '../build' are not valid.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/distDir.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  distDir: 'build',\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring React Property Removal in Next.js\nDESCRIPTION: Shows how to set up removal of specific React properties using the Next.js compiler options.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/04-architecture/nextjs-compiler.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  compiler: {\n    reactRemoveProperties: true,\n  },\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  compiler: {\n    // The regexes defined here are processed in Rust so the syntax is different from\n    // JavaScript `RegExp`s. See https://docs.rs/regex.\n    reactRemoveProperties: { properties: ['^data-custom$'] },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Next.js Lint Help Command in Bash\nDESCRIPTION: Command to show the help information for the 'next lint' command, which explains options for running ESLint on Next.js project files.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/08-next-cli.mdx#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nnext lint -h\n```\n\n----------------------------------------\n\nTITLE: Running ESLint in Next.js project\nDESCRIPTION: Execute the lint script using yarn to check your Next.js project for code quality issues.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/02-eslint.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn lint\n```\n\n----------------------------------------\n\nTITLE: Implementing a Hybrid AMP Page with Conditional Rendering\nDESCRIPTION: Example of a hybrid AMP page that uses the useAmp hook to conditionally render components. The amp: 'hybrid' config enables both HTML and AMP versions of the page.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/02-functions/use-amp.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useAmp } from 'next/amp'\n\nexport const config = { amp: 'hybrid' }\n\nfunction About(props) {\n  const isAmp = useAmp()\n\n  return (\n    <div>\n      <h3>My AMP About Page!</h3>\n      {isAmp ? (\n        <amp-img\n          width=\"300\"\n          height=\"300\"\n          src=\"/my-img.jpg\"\n          alt=\"a cool image\"\n          layout=\"responsive\"\n        />\n      ) : (\n        <img width=\"300\" height=\"300\" src=\"/my-img.jpg\" alt=\"a cool image\" />\n      )}\n    </div>\n  )\n}\n\nexport default About\n```\n\n----------------------------------------\n\nTITLE: Next.js Path Matching Rewrite Configuration\nDESCRIPTION: Demonstrates path matching in rewrites including parameter usage in destinations\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/rewrites.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/blog/:slug',\n        destination: '/news/:slug',\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: XML Output from Programmatically Generated Sitemap in Next.js\nDESCRIPTION: Example of the XML output produced by the programmatically generated sitemap function. Shows how the JavaScript/TypeScript object is converted to the proper Sitemaps XML format.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/01-metadata/sitemap.mdx#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n  <url>\n    <loc>https://acme.com</loc>\n    <lastmod>2023-04-06T15:02:24.021Z</lastmod>\n    <changefreq>yearly</changefreq>\n    <priority>1</priority>\n  </url>\n  <url>\n    <loc>https://acme.com/about</loc>\n    <lastmod>2023-04-06T15:02:24.021Z</lastmod>\n    <changefreq>monthly</changefreq>\n    <priority>0.8</priority>\n  </url>\n  <url>\n    <loc>https://acme.com/blog</loc>\n    <lastmod>2023-04-06T15:02:24.021Z</lastmod>\n    <changefreq>weekly</changefreq>\n    <priority>0.5</priority>\n  </url>\n</urlset>\n```\n\n----------------------------------------\n\nTITLE: Custom App with Tailwind CSS in Pages Router (TypeScript)\nDESCRIPTION: Custom App component that imports global CSS styles containing Tailwind directives, making them available throughout the application when using TypeScript with Pages Router.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/05-styling/02-tailwind-css.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n// These styles apply to every route in the application\nimport '@/styles/globals.css'\nimport type { AppProps } from 'next/app'\n\nexport default function App({ Component, pageProps }: AppProps) {\n  return <Component {...pageProps} />\n}\n```\n\n----------------------------------------\n\nTITLE: Using PagesOnly Component in Next.js Documentation\nDESCRIPTION: This code snippet demonstrates how to use the PagesOnly component to add content specific to the Pages Router in Next.js documentation. It's used as a comment to guide documentation authors.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/01-components/link.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{/* DO NOT EDIT. The content of this doc is generated from the source above. To edit the content of this page, navigate to the source page in your editor. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js v10 with Yarn\nDESCRIPTION: Command to upgrade Next.js to version 10 using Yarn package manager\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/10-upgrading/09-version-10.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add next@10\n```\n\n----------------------------------------\n\nTITLE: ImageEngine Loader Implementation\nDESCRIPTION: Custom image loader implementation for ImageEngine optimization service\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/images.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function imageengineLoader({ src, width, quality }) {\n  const compression = 100 - (quality || 50)\n  const params = [`w_${width}`, `cmpr_${compression}`)];\n  return `https://example.com${src}?imgeng=/${params.join('/')`\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Transpilation in Next.js\nDESCRIPTION: Demonstrates how to set up automatic transpilation and bundling of dependencies in Next.js.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/04-architecture/nextjs-compiler.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  transpilePackages: ['@acme/ui', 'lodash-es'],\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Body Size Limit for Server Actions in Next.js\nDESCRIPTION: Configures the maximum size of the request body sent to a Server Action. This helps prevent excessive server resource consumption and potential DDoS attacks. The limit can be specified in bytes or using string formats like '500kb' or '3mb'.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/serverActions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\n\nmodule.exports = {\n  experimental: {\n    serverActions: {\n      bodySizeLimit: '2mb',\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest with Next.js\nDESCRIPTION: Shows how to set up Jest configuration for use with Next.js, including automatic mocking and SWC transformation setup.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/04-architecture/nextjs-compiler.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst nextJest = require('next/jest')\n\n// Providing the path to your Next.js app which will enable loading next.config.js and .env files\nconst createJestConfig = nextJest({ dir: './' })\n\n// Any custom config you want to pass to Jest\nconst customJestConfig = {\n  setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],\n}\n\n// createJestConfig is exported in this way to ensure that next/jest can load the Next.js configuration, which is async\nmodule.exports = createJestConfig(customJestConfig)\n```\n\n----------------------------------------\n\nTITLE: Defining Middleware Comment in Markdown\nDESCRIPTION: This code snippet is a markdown comment that provides instructions for editing the content of the page. It specifies that the content is generated from a source file and should not be edited directly.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/01-routing/11-middleware.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{/* DO NOT EDIT. The content of this doc is generated from the source above. To edit the content of this page, navigate to the source page in your editor. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n```\n\n----------------------------------------\n\nTITLE: Configuring Category Metadata in Next.js\nDESCRIPTION: Shows how to set category metadata in Next.js layout or page files and its HTML output.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-metadata.mdx#2025-04-22_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  category: 'technology',\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"category\" content=\"technology\" />\n```\n\n----------------------------------------\n\nTITLE: Deleting Cookies in Next.js API Route\nDESCRIPTION: Shows how to delete cookies by setting the cookie header with an expired Max-Age in a Next.js API route. The example demonstrates removing a username cookie with HTTP-only flag and root path.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from 'next'\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  res.setHeader('Set-Cookie', 'username=; Path=/; HttpOnly; Max-Age=0')\n  res.status(200).send('Cookie has been deleted.')\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default async function handler(req, res) {\n  res.setHeader('Set-Cookie', 'username=; Path=/; HttpOnly; Max-Age=0')\n  res.status(200).send('Cookie has been deleted.')\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Babel Configuration for Next.js\nDESCRIPTION: A minimal .babelrc file example that uses the default Next.js babel preset. This configuration maintains all the default Next.js babel settings while allowing for extension with custom plugins.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/06-configuring/08-babel.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\"next/babel\"],\n  \"plugins\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Anonymous Arrow Function Component in React\nDESCRIPTION: Example of an anonymous arrow function component export that prevents Fast Refresh from preserving local state. This pattern should be avoided in large codebases.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/04-architecture/fast-refresh.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default () => <div />;\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest moduleNameMapper for module path aliases in Next.js\nDESCRIPTION: Jest configuration for resolving module path aliases in a Next.js project.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/08-testing/02-jest.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmoduleNameMapper: {\n  // ...\n  '^@/components/(.*)$': '<rootDir>/components/$1',\n}\n```\n\n----------------------------------------\n\nTITLE: Using Script Event Handlers in Next.js Pages Router\nDESCRIPTION: Examples showing how to use event handlers like onLoad with the Script component in the Pages Router to execute additional code after certain events occur, such as when a script has finished loading.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/05-scripts.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport Script from 'next/script'\n\nexport default function Page() {\n  return (\n    <>\n      <Script\n        src=\"https://example.com/script.js\"\n        onLoad={() => {\n          console.log('Script has loaded')\n        }}\n      />\n    </>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport Script from 'next/script'\n\nexport default function Page() {\n  return (\n    <>\n      <Script\n        src=\"https://example.com/script.js\"\n        onLoad={() => {\n          console.log('Script has loaded')\n        }}\n      />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using the sizes Attribute with Next.js Legacy Image Component\nDESCRIPTION: Demonstrates how to use the sizes attribute with the legacy Image component to optimize image loading for different viewport sizes. This example shows a responsive image that adapts to different layouts across mobile, tablet, and desktop devices.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/01-components/image-legacy.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from 'next/legacy/image'\nconst Example = () => (\n  <div className=\"grid-element\">\n    <Image\n      src=\"/example.png\"\n      layout=\"fill\"\n      sizes=\"(max-width: 768px) 100vw,\n              (max-width: 1200px) 50vw,\n              33vw\"\n    />\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Specific Web Vitals Metrics in App Router (JavaScript)\nDESCRIPTION: Shows how to handle different web vitals metrics using a switch statement in the App Router implementation with JavaScript.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/08-analytics.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { useReportWebVitals } from 'next/web-vitals'\n\nexport function WebVitals() {\n  useReportWebVitals((metric) => {\n    switch (metric.name) {\n      case 'FCP': {\n        // handle FCP results\n      }\n      case 'LCP': {\n        // handle LCP results\n      }\n      // ...\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Configuration Files\nDESCRIPTION: Essential configuration files for Next.js projects including environment variables, TypeScript/JavaScript configurations, and build settings.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/01-getting-started/02-project-structure.mdx#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nnext.config.js\npackage.json\ninstrumentation.ts\nmiddleware.ts\n.env\n.env.local\n.env.production\n.env.development\n.eslintrc.json\n.gitignore\nnext-env.d.ts\ntsconfig.json\njsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Next.js Development Mode Command Output\nDESCRIPTION: Displays the output of the Next.js development mode help command, showing available options and their descriptions.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/08-next-cli.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nUsage: next dev [directory] [options]\n\nStarts Next.js in development mode with hot-code reloading, error reporting, and more.\n\nArguments:\n  [directory]                              A directory on which to build the application.\n                                           If no directory is provided, the current\n                                           directory will be used.\n\nOptions:\n  --turbo                                  Starts development mode using Turbopack (beta).\n  -p, --port <port>                        Specify a port number on which to start the\n                                           application. (default: 3000, env: PORT)\n  -H, --hostname <hostname>                Specify a hostname on which to start the\n                                           application (default: 0.0.0.0).\n  --experimental-https                     Starts the server with HTTPS and generates a\n                                           self-signed certificate.\n  --experimental-https-key, <path>         Path to a HTTPS key file.\n  --experimental-https-cert, <path>        Path to a HTTPS certificate file.\n  --experimental-https-ca, <path>          Path to a HTTPS certificate authority file.\n  --experimental-upload-trace, <traceUrl>  Reports a subset of the debugging trace to a\n                                           remote HTTP URL. Includes sensitive data.\n  -h, --help                               Displays this message.\n```\n\n----------------------------------------\n\nTITLE: Updating Image Source Properties in Next.js\nDESCRIPTION: Demonstrates how to correctly use imported image objects in Next.js by accessing the src property.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/05-from-create-react-app.mdx#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\n<img src={logo} />\n\n// After\n<img src={logo.src} />\n```\n\n----------------------------------------\n\nTITLE: Loading Images Conditionally in Next.js\nDESCRIPTION: Example of implementing an unoptimized image component wrapper in Next.js\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/image.mdx#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport Image from 'next/image'\n\nconst UnoptimizedImage = (props) => {\n  return <Image {...props} unoptimized />\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling File-System Routing in Next.js Configuration\nDESCRIPTION: This code shows how to disable file-system based routing in Next.js by modifying the next.config.js file. This is useful when using a custom server to prevent serving the same content from multiple paths.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/06-configuring/10-custom-server.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  useFileSystemPublicRoutes: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Asset URL Processing\nDESCRIPTION: Example showing how to process and use external asset URLs using URL constructor and import.meta.url.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/urlImports.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst logo = new URL('https://example.com/assets/file.txt', import.meta.url)\n\nconsole.log(logo.pathname)\n\n// prints \"/_next/static/media/file.a9727b5d.txt\"\n```\n\n----------------------------------------\n\nTITLE: Creating Root Layout in TypeScript\nDESCRIPTION: Implementation of the root layout component in TypeScript, which wraps all pages in a Next.js App Router application.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/05-from-create-react-app.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\" />\n        <link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <title>React App</title>\n        <meta name=\"description\" content=\"Web site created...\" />\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Build without Mangling\nDESCRIPTION: Demonstrates how to run the Next.js build command without mangling, which can be useful for debugging but may affect performance.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/08-next-cli.mdx#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnext build --no-mangling\n```\n\n----------------------------------------\n\nTITLE: Adding content-specific component in Next.js documentation\nDESCRIPTION: This snippet demonstrates the use of a custom component to add content specific to the Pages Router in Next.js documentation. It includes a comment explaining its purpose.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/07-testing/02-jest.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{/* DO NOT EDIT. The content of this doc is generated from the source above. To edit the content of this page, navigate to the source page in your editor. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n```\n\n----------------------------------------\n\nTITLE: Akamai Image Loader Implementation\nDESCRIPTION: Custom image loader implementation for Akamai image optimization service\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/images.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function akamaiLoader({ src, width, quality }) {\n  return `https://example.com/${src}?imwidth=${width}`\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Emotion in Next.js\nDESCRIPTION: Shows how to enable and configure Emotion support in Next.js using compiler options in next.config.js.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/04-architecture/nextjs-compiler.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  compiler: {\n    emotion: boolean | {\n      // default is true. It will be disabled when build type is production.\n      sourceMap?: boolean,\n      // default is 'dev-only'.\n      autoLabel?: 'never' | 'dev-only' | 'always',\n      // default is '[local]'.\n      // Allowed values: `[local]` `[filename]` and `[dirname]`\n      // This option only works when autoLabel is set to 'dev-only' or 'always'.\n      // It allows you to define the format of the resulting label.\n      // The format is defined via string where variable parts are enclosed in square brackets [].\n      // For example labelFormat: \"my-classname--[local]\", where [local] will be replaced with the name of the variable the result is assigned to.\n      labelFormat?: string,\n      // default is undefined.\n      // This option allows you to tell the compiler what imports it should\n      // look at to determine what it should transform so if you re-export\n      // Emotion's exports, you can still use transforms.\n      importMap?: {\n        [packageName: string]: {\n          [exportName: string]: {\n            canonicalImport?: [string, string],\n            styledBaseImport?: [string, string],\n          }\n        }\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Edge Runtime for Icon Route Handler in TypeScript\nDESCRIPTION: Demonstrates setting up an icon route handler with Edge runtime configuration in TypeScript. The code exports a runtime configuration and defines an empty Icon component function.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/01-metadata/app-icons.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport const runtime = 'edge'\n\nexport default function Icon() {}\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Output for Link Component\nDESCRIPTION: Shows the resulting HTML output when using Link component with basePath configuration.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/basePath.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"/docs/about\">About Page</a>\n```\n\n----------------------------------------\n\nTITLE: getStaticPaths Basic Return Structure\nDESCRIPTION: Example showing the basic return structure for getStaticPaths including paths and locale configuration.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/02-functions/get-static-paths.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nreturn {\n  paths: [\n    { params: { id: '1' }},\n    {\n      params: { id: '2' },\n      locale: \"en\",\n    },\n  ],\n  fallback: ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Web Vitals Tracking in Pages Router\nDESCRIPTION: Shows how to use the useReportWebVitals hook in a Pages Router _app.js file to track and log performance metrics.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/08-analytics.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useReportWebVitals } from 'next/web-vitals'\n\nfunction MyApp({ Component, pageProps }) {\n  useReportWebVitals((metric) => {\n    console.log(metric)\n  })\n\n  return <Component {...pageProps} />\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with Prettier in Next.js\nDESCRIPTION: This JSON snippet demonstrates how to extend the ESLint configuration to include Prettier in a Next.js project.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/02-eslint.mdx#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\"next\", \"prettier\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Preview Data Options in Next.js\nDESCRIPTION: This code snippet demonstrates how to use the setPreviewData function with additional options. It shows how to set the preview mode duration and limit the preview to a specific path.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/06-configuring/14-preview-mode.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nsetPreviewData(data, {\n  maxAge: 60 * 60, // The preview mode cookies expire in 1 hour\n  path: '/about', // The preview mode cookies apply to paths with /about\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Custom Next.js Metrics\nDESCRIPTION: Demonstrates how to handle custom Next.js-specific metrics such as hydration time, route change to render time, and render time.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/08-analytics.mdx#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nexport function reportWebVitals(metric) {\n  switch (metric.name) {\n    case 'Next.js-hydration':\n      // handle hydration results\n      break\n    case 'Next.js-route-change-to-render':\n      // handle route-change to render results\n      break\n    case 'Next.js-render':\n      // handle render results\n      break\n    default:\n      break\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry API for Custom Spans\nDESCRIPTION: Command to install the OpenTelemetry API package for creating custom spans in your application code.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/10-open-telemetry.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @opentelemetry/api\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Production Server\nDESCRIPTION: Use the next start command to run the application in a production-like environment and measure its performance.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/10-deploying/01-production-checklist.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnext start\n```\n\n----------------------------------------\n\nTITLE: Configuring baseUrl in tsconfig.json or jsconfig.json\nDESCRIPTION: Sets up the baseUrl configuration option to enable absolute imports from the root of the project.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/04-absolute-imports-and-module-aliases.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Build with React Production Profiling\nDESCRIPTION: Shows how to enable production profiling for React when running the Next.js build command.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/08-next-cli.mdx#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nnext build --profile\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright with create-next-app\nDESCRIPTION: Command to create a new Next.js project with Playwright pre-configured using the with-playwright example template.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/08-testing/03-playwright.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest --example with-playwright with-playwright-app\n```\n\n----------------------------------------\n\nTITLE: Reusing Built-in Error Page in Next.js\nDESCRIPTION: This example demonstrates how to use the built-in Next.js Error component. It fetches data from an API and renders the built-in error page if there's an error, otherwise displays the fetched data.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/01-routing/08-custom-error.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Error from 'next/error'\n\nexport async function getServerSideProps() {\n  const res = await fetch('https://api.github.com/repos/vercel/next.js')\n  const errorCode = res.ok ? false : res.status\n  const json = await res.json()\n\n  return {\n    props: { errorCode, stars: json.stargazers_count },\n  }\n}\n\nexport default function Page({ errorCode, stars }) {\n  if (errorCode) {\n    return <Error statusCode={errorCode} />\n  }\n\n  return <div>Next stars: {stars}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Next.js Build Command Help\nDESCRIPTION: Shows how to display help information for the Next.js build command, including available options and arguments.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/08-next-cli.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnext build -h\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom 404 Page in Next.js\nDESCRIPTION: This snippet demonstrates how to create a custom 404 page by defining a 'pages/404.js' file. The page is statically generated at build time and can include data fetching using getStaticProps if needed.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/01-routing/08-custom-error.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Custom404() {\n  return <h1>404 - Page Not Found</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom App Component in Next.js (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create a custom App component in Next.js using JavaScript. It serves the same purpose as the TypeScript version, allowing for control over page initialization.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/01-routing/05-custom-app.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function MyApp({ Component, pageProps }) {\n  return <Component {...pageProps} />\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Basic Props from getStaticProps in JavaScript\nDESCRIPTION: Example showing how to return a simple props object from getStaticProps that contains a message string. This demonstrates the basic structure for passing data to a page component.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/02-functions/get-static-props.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function getStaticProps(context) {\n  return {\n    props: { message: `Next.js is awesome` }, // will be passed to the page component as props\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Escaped Characters in Header Paths\nDESCRIPTION: Shows how to escape special regex characters in header path configurations.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/headers.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async headers() {\n    return [\n      {\n        source: '/english\\\\(default\\\\)/:slug',\n        headers: [\n          {\n            key: 'x-header',\n            value: 'value',\n          },\n        ],\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Native History API in Next.js (TypeScript)\nDESCRIPTION: Shows how to use the native window.history.pushState method to update the browser's history stack without reloading the page in a Next.js application.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/03-linking-and-navigating.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { useSearchParams } from 'next/navigation'\n\nexport default function SortProducts() {\n  const searchParams = useSearchParams()\n\n  function updateSorting(sortOrder: string) {\n    const params = new URLSearchParams(searchParams.toString())\n    params.set('sort', sortOrder)\n    window.history.pushState(null, '', `?${params.toString()}`)\n  }\n\n  return (\n    <>\n      <button onClick={() => updateSorting('asc')}>Sort Ascending</button>\n      <button onClick={() => updateSorting('desc')}>Sort Descending</button>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Static Image Imports in React Component (Vite to Next.js)\nDESCRIPTION: This snippet demonstrates how to update static image imports when migrating from Vite to Next.js. It shows the differences in image handling between the two frameworks and how to modify the code accordingly.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/04-from-vite.mdx#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport image from './img.png' // `image` will be '/assets/img.2d8efhg.png' in production\n\nexport default function App() {\n  return <img src={image} />\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript/JavaScript Language Switcher Implementation\nDESCRIPTION: Shows how to implement language switching between TypeScript and JavaScript code examples using the switcher prop.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/05-community/01-contribution-guide.mdx#2025-04-22_snippet_5\n\nLANGUAGE: mdx\nCODE:\n```\n```tsx filename=\"app/page.tsx\" switcher\n\n```\n\n```jsx filename=\"app/page.js\" switcher\n\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Image Component from next/image\nDESCRIPTION: This snippet shows how to import the Image component from the next/image module in Next.js.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/01-images.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Image from 'next/image'\n```\n\n----------------------------------------\n\nTITLE: Configuring nextScriptWorkers in next.config.js\nDESCRIPTION: Configuration example for enabling nextScriptWorkers in next.config.js, required for using the worker strategy with Script component.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/script.mdx#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  experimental: {\n    nextScriptWorkers: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Home Page Component\nDESCRIPTION: Example implementation of the home page component with navigation link to About page using Next.js.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/08-testing/03-playwright.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <div>\n      <h1>Home</h1>\n      <Link href=\"/about\">About</Link>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Font Definitions File Setup\nDESCRIPTION: Creates a centralized font definitions file that includes both Google and local fonts with various weights and configurations.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/font.mdx#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { Inter, Lora, Source_Sans_3 } from 'next/font/google'\nimport localFont from 'next/font/local'\n\n// define your variable fonts\nconst inter = Inter()\nconst lora = Lora()\n// define 2 weights of a non-variable font\nconst sourceCodePro400 = Source_Sans_3({ weight: '400' })\nconst sourceCodePro700 = Source_Sans_3({ weight: '700' })\n// define a custom local font where GreatVibes-Regular.ttf is stored in the styles folder\nconst greatVibes = localFont({ src: './GreatVibes-Regular.ttf' })\n\nexport { inter, lora, sourceCodePro400, sourceCodePro700, greatVibes }\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Next.js Version for App Router Migration\nDESCRIPTION: Command to install the latest version of Next.js, which is required for migrating to the App Router (version 13.4 or greater).\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/02-app-router-migration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install next@latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Bitbucket Pipelines for Next.js Build Caching\nDESCRIPTION: Bitbucket Pipelines configuration that defines a custom cache for Next.js builds. This should be added to your bitbucket-pipelines.yml file to cache the Next.js cache directory between pipeline runs.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/09-deploying/04-ci-build-caching.mdx#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndefinitions:\n  caches:\n    nextcache: .next/cache\n```\n\n----------------------------------------\n\nTITLE: Configuring Instrumentation in Next.js Config\nDESCRIPTION: This snippet shows how to enable the instrumentation feature in the next.config.js file. It sets the experimental.instrumentationHook option to true.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/instrumentation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  experimental: {\n    instrumentationHook: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring lint-staged for Next.js Linting\nDESCRIPTION: This JavaScript code configures lint-staged to run Next.js linting on staged git files, using the --file flag for specific file linting.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/02-eslint.mdx#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('path')\n\nconst buildEslintCommand = (filenames) =>\n  `next lint --fix --file ${filenames\n    .map((f) => path.relative(process.cwd(), f))\n    .join(' --file ')}`\n\nmodule.exports = {\n  '*.{js,jsx,ts,tsx}': [buildEslintCommand],\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Google Analytics Events in Next.js\nDESCRIPTION: Example of how to send events to Google Analytics using the sendGAEvent function in a Next.js application.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/12-third-party-libraries.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { sendGAEvent } from '@next/third-parties/google'\n\nexport function EventButton() {\n  return (\n    <div>\n      <button\n        onClick={() => sendGAEvent({ event: 'buttonClicked', value: 'xyz' })}\n      >\n        Send Event\n      </button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Type Safety in JavaScript with JSDoc\nDESCRIPTION: Using JSDoc to add type safety to the viewport object in JavaScript projects without TypeScript.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-viewport.mdx#2025-04-22_snippet_19\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import(\"next\").Viewport} */\nexport const viewport = {\n  themeColor: 'black',\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Jest and related packages for Next.js\nDESCRIPTION: Commands to install Jest and necessary packages as dev dependencies for a Next.js project.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/08-testing/02-jest.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D jest jest-environment-jsdom @testing-library/react @testing-library/jest-dom\n# or\nyarn add -D jest jest-environment-jsdom @testing-library/react @testing-library/jest-dom\n# or\npnpm install -D jest jest-environment-jsdom @testing-library/react @testing-library/jest-dom\n```\n\n----------------------------------------\n\nTITLE: Opting Out of Automatic Locale Prefixing in Next.js Link Component\nDESCRIPTION: Shows how to opt-out of automatically handling locale prefixing when using the Link component from next/link in Next.js. This is useful when the href already includes the locale.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/01-routing/10-internationalization.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function IndexPage(props) {\n  return (\n    <Link href=\"/fr/another\" locale={false}>\n      To /fr/another\n    </Link>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing MDX Dependencies\nDESCRIPTION: Command to install necessary packages for MDX support in Next.js\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/05-mdx.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @next/mdx @mdx-js/loader @mdx-js/react @types/mdx\n```\n\n----------------------------------------\n\nTITLE: Setting Edge Runtime for OpenGraph Image Generation in Next.js\nDESCRIPTION: This example shows how to set the runtime to 'edge' for OpenGraph image generation in Next.js.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/01-metadata/opengraph-image.mdx#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nexport const runtime = 'edge'\n\nexport default function Image() {}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport const runtime = 'edge'\n\nexport default function Image() {}\n```\n\n----------------------------------------\n\nTITLE: Next.js Rust-based MDX Configuration\nDESCRIPTION: Configuration for enabling the experimental Rust-based MDX compiler in Next.js\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/05-mdx.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = withMDX({\n  experimental: {\n    mdxRs: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Metadata Configuration in Next.js\nDESCRIPTION: Demonstrates how to set custom metadata tags using the 'other' option in Next.js, including single and multiple values.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-metadata.mdx#2025-04-22_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  other: {\n    custom: 'meta',\n  },\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"custom\" content=\"meta\" />\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  other: {\n    custom: ['meta1', 'meta2'],\n  },\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"custom\" content=\"meta1\" /> <meta name=\"custom\" content=\"meta2\" />\n```\n\n----------------------------------------\n\nTITLE: Migrating Multiple Module Loading in next/dynamic\nDESCRIPTION: Example showing how to migrate from the deprecated pattern of loading multiple modules at once in next/dynamic to the new recommended approach using individual dynamic imports.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/10-upgrading/10-version-9.mdx#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport dynamic from 'next/dynamic'\n\nconst HelloBundle = dynamic({\n  modules: () => {\n    const components = {\n      Hello1: () => import('../components/hello1').then((m) => m.default),\n      Hello2: () => import('../components/hello2').then((m) => m.default),\n    }\n\n    return components\n  },\n  render: (props, { Hello1, Hello2 }) => (\n    <div>\n      <h1>{props.title}</h1>\n      <Hello1 />\n      <Hello2 />\n    </div>\n  ),\n})\n\nfunction DynamicBundle() {\n  return <HelloBundle title=\"Dynamic Bundle\" />\n}\n\nexport default DynamicBundle\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport dynamic from 'next/dynamic'\n\nconst Hello1 = dynamic(() => import('../components/hello1'))\nconst Hello2 = dynamic(() => import('../components/hello2'))\n\nfunction HelloBundle({ title }) {\n  return (\n    <div>\n      <h1>{title}</h1>\n      <Hello1 />\n      <Hello2 />\n    </div>\n  )\n}\n\nfunction DynamicBundle() {\n  return <HelloBundle title=\"Dynamic Bundle\" />\n}\n\nexport default DynamicBundle\n```\n\n----------------------------------------\n\nTITLE: Customizing Next.js Babel Presets\nDESCRIPTION: Advanced configuration example showing how to customize the built-in presets in Next.js. This allows for fine-tuning preset-env, transform-runtime, styled-jsx, and class-properties configurations while maintaining compatibility.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/06-configuring/08-babel.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\n    [\n      \"next/babel\",\n      {\n        \"preset-env\": {},\n        \"transform-runtime\": {},\n        \"styled-jsx\": {},\n        \"class-properties\": {}\n      }\n    ]\n  ],\n  \"plugins\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Apple Icon Link Tag in Next.js\nDESCRIPTION: HTML output for Apple-specific icon implementation with dynamic attribute generation.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/01-metadata/app-icons.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<link\n  rel=\"apple-touch-icon\"\n  href=\"/apple-icon?<generated>\"\n  type=\"image/<generated>\"\n  sizes=\"<generated>\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Disabling Static Image Imports in Next.js\nDESCRIPTION: Configuration to disable static image imports when conflicts with other plugins arise.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/image.mdx#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    disableStaticImages: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Font to a Single Page in Pages Router\nDESCRIPTION: Example showing how to use a font on a specific page rather than globally in a Next.js app with the Pages Router by importing and applying it directly in the page component.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/03-fonts.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Inter } from 'next/font/google'\n\nconst inter = Inter({ subsets: ['latin'] })\n\nexport default function Home() {\n  return (\n    <div className={inter.className}>\n      <p>Hello World</p>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js Canary Version\nDESCRIPTION: Command to install the canary version of Next.js required for Partial Prerendering functionality.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/partial-prerendering.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install next@canary\n```\n\n----------------------------------------\n\nTITLE: Adding Page-Specific Content with PagesOnly Component\nDESCRIPTION: This comment explains how to add content specific to the Pages Router using the PagesOnly component. It also mentions that shared content should not be wrapped in a component.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/05-optimizing/09-instrumentation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{/* DO NOT EDIT. The content of this doc is generated from the source above. To edit the content of this page, navigate to the source page in your editor. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n```\n\n----------------------------------------\n\nTITLE: Updating Package.json Scripts for Next.js\nDESCRIPTION: Shows the required script modifications in package.json for running Next.js commands.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/05-from-create-react-app.mdx#2025-04-22_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Browser Targets in package.json\nDESCRIPTION: This configuration in package.json sets custom browser targets for Autoprefixer and CSS feature compilation using Browserslist.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/06-configuring/09-post-css.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"browserslist\": [\">0.3%\", \"not dead\", \"not op_mini all\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Imgix Loader Implementation\nDESCRIPTION: Custom image loader implementation for Imgix image optimization service\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/images.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function imgixLoader({ src, width, quality }) {\n  const url = new URL(`https://example.com${src}`)\n  const params = url.searchParams\n  params.set('auto', params.getAll('auto').join(',') || 'format')\n  params.set('fit', params.get('fit') || 'max')\n  params.set('w', params.get('w') || width.toString())\n  params.set('q', (quality || 50).toString())\n  return url.href\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for SPA Output\nDESCRIPTION: Next.js configuration file (next.config.mjs) setup to output a Single-Page Application (SPA) and change the build output directory to './dist/'.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/04-from-vite.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  output: 'export', // Outputs a Single-Page Application (SPA).\n  distDir: './dist', // Changes the build output directory to `./dist/`.\n}\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Extending Next.js ESLint Plugin in Custom Configuration\nDESCRIPTION: This JavaScript snippet shows how to extend the Next.js ESLint plugin in a custom ESLint configuration.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/02-eslint.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  extends: [\n    //...\n    'plugin:@next/next/recommended',\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Output for twitter-image.alt.txt\nDESCRIPTION: The HTML head output generated when using the twitter-image.alt.txt file convention, showing the meta tag created for Twitter image alt text.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/01-metadata/opengraph-image.mdx#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<meta property=\"twitter:image:alt\" content=\"About Acme\" />\n```\n\n----------------------------------------\n\nTITLE: Blog Posts Rendering with Static Generation\nDESCRIPTION: Example showing a blog posts listing component that requires external data. This demonstrates the need for data fetching during static generation.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/02-rendering/02-static-site-generation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Blog({ posts }) {\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li>{post.title}</li>\n      ))}\n    </ul>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dictionary Loader Function for Localization\nDESCRIPTION: This code defines a getDictionary function that dynamically imports language-specific JSON files based on the requested locale. It uses dynamic imports for efficient loading.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/14-internationalization.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport 'server-only'\n\nconst dictionaries = {\n  en: () => import('./dictionaries/en.json').then((module) => module.default),\n  nl: () => import('./dictionaries/nl.json').then((module) => module.default),\n}\n\nexport const getDictionary = async (locale) => dictionaries[locale]()\n```\n\n----------------------------------------\n\nTITLE: Embedding Self-Hosted Video Using HTML5 Video Tag in Next.js\nDESCRIPTION: This snippet demonstrates how to embed a self-hosted video using the HTML5 <video> tag in a Next.js application. It includes controls, preloading options, and a track for subtitles.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/02-videos.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport function Video() {\n  return (\n    <video width=\"320\" height=\"240\" controls preload=\"none\">\n      <source src=\"/path/to/video.mp4\" type=\"video/mp4\" />\n      <track\n        src=\"/path/to/captions.vtt\"\n        kind=\"subtitles\"\n        srcLang=\"en\"\n        label=\"English\"\n      />\n      Your browser does not support the video tag.\n    </video>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting the Page Component with Client-Only Wrapper\nDESCRIPTION: Updates the catch-all route page to use the ClientOnly component, enabling the original SPA to run inside the Next.js application while preserving its client-side behavior.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/04-from-vite.mdx#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport '../../index.css'\nimport { ClientOnly } from './client'\n\nexport function generateStaticParams() {\n  return [{ slug: [''] }]\n}\n\nexport default function Page() {\n  return <ClientOnly />\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport '../../index.css'\nimport { ClientOnly } from './client'\n\nexport function generateStaticParams() {\n  return [{ slug: [''] }]\n}\n\nexport default function Page() {\n  return <ClientOnly />\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Twitter Card Configuration in Next.js Metadata\nDESCRIPTION: This snippet shows a more advanced configuration for Twitter Card metadata in Next.js, including app-specific information and custom image properties.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-metadata.mdx#2025-04-22_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  twitter: {\n    card: 'app',\n    title: 'Next.js',\n    description: 'The React Framework for the Web',\n    siteId: '1467726470533754880',\n    creator: '@nextjs',\n    creatorId: '1467726470533754880',\n    images: {\n      url: 'https://nextjs.org/og.png',\n      alt: 'Next.js Logo',\n    },\n    app: {\n      name: 'twitter_app',\n      id: {\n        iphone: 'twitter_app://iphone',\n        ipad: 'twitter_app://ipad',\n        googleplay: 'twitter_app://googleplay',\n      },\n      url: {\n        iphone: 'https://iphone_url',\n        ipad: 'https://ipad_url',\n      },\n    },\n  },\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"twitter:site:id\" content=\"1467726470533754880\" />\n<meta name=\"twitter:creator\" content=\"@nextjs\" />\n<meta name=\"twitter:creator:id\" content=\"1467726470533754880\" />\n<meta name=\"twitter:title\" content=\"Next.js\" />\n<meta name=\"twitter:description\" content=\"The React Framework for the Web\" />\n<meta name=\"twitter:card\" content=\"app\" />\n<meta name=\"twitter:image\" content=\"https://nextjs.org/og.png\" />\n<meta name=\"twitter:image:alt\" content=\"Next.js Logo\" />\n<meta name=\"twitter:app:name:iphone\" content=\"twitter_app\" />\n<meta name=\"twitter:app:id:iphone\" content=\"twitter_app://iphone\" />\n<meta name=\"twitter:app:id:ipad\" content=\"twitter_app://ipad\" />\n<meta name=\"twitter:app:id:googleplay\" content=\"twitter_app://googleplay\" />\n<meta name=\"twitter:app:url:iphone\" content=\"https://iphone_url\" />\n<meta name=\"twitter:app:url:ipad\" content=\"https://ipad_url\" />\n<meta name=\"twitter:app:name:ipad\" content=\"twitter_app\" />\n<meta name=\"twitter:app:name:googleplay\" content=\"twitter_app\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Paths with generateStaticParams in app directory (JSX)\nDESCRIPTION: This snippet shows how to use generateStaticParams to define dynamic paths in the app directory. It replaces getStaticPaths and has a simplified API for returning route parameters.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/02-app-router-migration.mdx#2025-04-22_snippet_28\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function generateStaticParams() {\n  return [{ id: '1' }, { id: '2' }]\n}\n\nasync function getPost(params) {\n  const res = await fetch(`https://.../posts/${params.id}`)\n  const post = await res.json()\n\n  return post\n}\n\nexport default async function Post({ params }) {\n  const post = await getPost(params)\n\n  return <PostLayout post={post} />\n}\n```\n\n----------------------------------------\n\nTITLE: Imperative Routing with useRouter\nDESCRIPTION: Shows how to perform programmatic navigation using the useRouter hook for client-side route transitions.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/01-routing/03-linking-and-navigating.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useRouter } from 'next/router'\n\nexport default function ReadMore() {\n  const router = useRouter()\n\n  return (\n    <button onClick={() => router.push('/about')}>\n      Click here to read more\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript type definition for Robots object in Next.js\nDESCRIPTION: This snippet provides the TypeScript type definition for the Robots object used in Next.js for generating robots.txt files. It includes options for rules, sitemap, and host.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/01-metadata/robots.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype Robots = {\n  rules:\n    | {\n        userAgent?: string | string[]\n        allow?: string | string[]\n        disallow?: string | string[]\n        crawlDelay?: number\n      }\n    | Array<{\n        userAgent: string | string[]\n        allow?: string | string[]\n        disallow?: string | string[]\n        crawlDelay?: number\n      }>\n  sitemap?: string | string[]\n  host?: string\n}\n```\n\n----------------------------------------\n\nTITLE: Global Error Handling Component for Root Layout in Next.js (JavaScript)\nDESCRIPTION: A JavaScript implementation of the global-error.js component used to catch errors in root layout or template components. It provides its own HTML and body tags as it replaces the entire application UI.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/05-error-handling.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nexport default function GlobalError({ error, reset }) {\n  return (\n    <html>\n      <body>\n        <h2>Something went wrong!</h2>\n        <button onClick={() => reset()}>Try again</button>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Custom Server in Next.js\nDESCRIPTION: This snippet shows how to update the scripts in package.json to use a custom server for development and production environments in a Next.js project.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/06-configuring/10-custom-server.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"node server.js\",\n    \"build\": \"next build\",\n    \"start\": \"NODE_ENV=production node server.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Theme Detection CSS for Image Component\nDESCRIPTION: CSS module for implementing light/dark theme detection with image components.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/image.mdx#2025-04-22_snippet_19\n\nLANGUAGE: css\nCODE:\n```\n.imgDark {\n  display: none;\n}\n\n@media (prefers-color-scheme: dark) {\n  .imgLight {\n    display: none;\n  }\n  .imgDark {\n    display: unset;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Sass Variables in CSS Module\nDESCRIPTION: Example of defining and exporting Sass variables from a CSS Module file. The exported variables can be imported and used in JavaScript code.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/05-styling/04-sass.mdx#2025-04-22_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n$primary-color: #64ff00;\n\n:export {\n  primaryColor: $primary-color;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Unoptimized Images in Next.js Config\nDESCRIPTION: Shows how to disable image optimization globally in Next.js configuration\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/image.mdx#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  images: {\n    unoptimized: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Importing CSS Module in Base Button Component (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import and use a CSS module in a base button component. It imports styles from 'base-button.module.css' and applies the 'primary' class to a button element.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/05-styling/01-css-modules.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport styles from './base-button.module.css'\n\nexport function BaseButton() {\n  return <button className={styles.primary} />\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Compilation Indicator Position in Next.js\nDESCRIPTION: This snippet shows how to change the position of the compilation indicator in a Next.js application. The buildActivityPosition can be set to 'bottom-right', 'bottom-left', 'top-right', or 'top-left'.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/devIndicators.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  devIndicators: {\n    buildActivityPosition: 'bottom-right',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Meta Tag for OpenGraph Image Type\nDESCRIPTION: This snippet demonstrates the resulting HTML meta tag for specifying the OpenGraph image type.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/01-metadata/opengraph-image.mdx#2025-04-22_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<meta property=\"og:image:type\" content=\"image/png\" />\n```\n\n----------------------------------------\n\nTITLE: Using NextUrl Properties\nDESCRIPTION: Example of accessing NextUrl properties for pathname and search parameters\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/next-request.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Given a request to /home, pathname is /home\nrequest.nextUrl.pathname\n// Given a request to /home?name=lee, searchParams is { 'name': 'lee' }\nrequest.nextUrl.searchParams\n```\n\n----------------------------------------\n\nTITLE: Generating Multiple Sitemaps with JavaScript in Next.js\nDESCRIPTION: JavaScript implementation for creating multiple sitemaps to handle large websites. This code demonstrates how to generate sitemap chunks based on product IDs for sites with many URLs.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/01-metadata/sitemap.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { BASE_URL } from '@/app/lib/constants'\n\nexport async function generateSitemaps() {\n  // Fetch the total number of products and calculate the number of sitemaps needed\n  return [{ id: 0 }, { id: 1 }, { id: 2 }, { id: 3 }]\n}\n\nexport default async function sitemap({ id }) {\n  // Google's limit is 50,000 URLs per sitemap\n  const start = id * 50000\n  const end = start + 50000\n  const products = await getProducts(\n    `SELECT id, date FROM products WHERE id BETWEEN ${start} AND ${end}`\n  )\n  return products.map((product) => ({\n    url: `${BASE_URL}/product/${id}`,\n    lastModified: product.date,\n  }))\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Path Alias Configuration\nDESCRIPTION: Configures TypeScript path alias for easier font definition imports across the application.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/font.mdx#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"@/fonts\": [\"./styles/fonts\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Object in pages directory (JSX)\nDESCRIPTION: This snippet demonstrates how to access the request object in the pages directory using getServerSideProps. It retrieves the authorization header and theme cookie from the request.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/02-app-router-migration.mdx#2025-04-22_snippet_23\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function getServerSideProps({ req, query }) {\n  const authHeader = req.getHeaders()['authorization'];\n  const theme = req.cookies['theme'];\n\n  return { props: { ... }}\n}\n\nexport default function Page(props) {\n  return ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using the replace Prop with Link Component (TSX)\nDESCRIPTION: Demonstrates how to use the replace prop with the Link component to replace the current history state instead of adding a new URL to the browser's history stack.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/link.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <Link href=\"/dashboard\" replace>\n      Dashboard\n    </Link>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Build with Debug Output\nDESCRIPTION: Demonstrates how to run the Next.js build command with debug output for more verbose information.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/08-next-cli.mdx#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnext build --debug\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirects with Bloom Filter in Next.js Middleware\nDESCRIPTION: This code snippet demonstrates how to use a Bloom filter in Next.js Middleware to efficiently check for redirects before forwarding requests to a Route Handler. It improves performance by avoiding the need to import a large redirects file into Middleware.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/06-redirecting.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse, NextRequest } from 'next/server'\nimport { ScalableBloomFilter } from 'bloom-filters'\nimport GeneratedBloomFilter from './redirects/bloom-filter.json'\n\ntype RedirectEntry = {\n  destination: string\n  permanent: boolean\n}\n\n// Initialize bloom filter from a generated JSON file\nconst bloomFilter = ScalableBloomFilter.fromJSON(GeneratedBloomFilter as any)\n\nexport async function middleware(request: NextRequest) {\n  // Get the path for the incoming request\n  const pathname = request.nextUrl.pathname\n\n  // Check if the path is in the bloom filter\n  if (bloomFilter.has(pathname)) {\n    // Forward the pathname to the Route Handler\n    const api = new URL(\n      `/api/redirects?pathname=${encodeURIComponent(request.nextUrl.pathname)}`,\n      request.nextUrl.origin\n    )\n\n    try {\n      // Fetch redirect data from the Route Handler\n      const redirectData = await fetch(api)\n\n      if (redirectData.ok) {\n        const redirectEntry: RedirectEntry | undefined =\n          await redirectData.json()\n\n        if (redirectEntry) {\n          // Determine the status code\n          const statusCode = redirectEntry.permanent ? 308 : 307\n\n          // Redirect to the destination\n          return NextResponse.redirect(redirectEntry.destination, statusCode)\n        }\n      }\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  // No redirect found, continue the request without redirecting\n  return NextResponse.next()\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NextResponse } from 'next/server'\nimport { ScalableBloomFilter } from 'bloom-filters'\nimport GeneratedBloomFilter from './redirects/bloom-filter.json'\n\n// Initialize bloom filter from a generated JSON file\nconst bloomFilter = ScalableBloomFilter.fromJSON(GeneratedBloomFilter)\n\nexport async function middleware(request) {\n  // Get the path for the incoming request\n  const pathname = request.nextUrl.pathname\n\n  // Check if the path is in the bloom filter\n  if (bloomFilter.has(pathname)) {\n    // Forward the pathname to the Route Handler\n    const api = new URL(\n      `/api/redirects?pathname=${encodeURIComponent(request.nextUrl.pathname)}`,\n      request.nextUrl.origin\n    )\n\n    try {\n      // Fetch redirect data from the Route Handler\n      const redirectData = await fetch(api)\n\n      if (redirectData.ok) {\n        const redirectEntry = await redirectData.json()\n\n        if (redirectEntry) {\n          // Determine the status code\n          const statusCode = redirectEntry.permanent ? 308 : 307\n\n          // Redirect to the destination\n          return NextResponse.redirect(redirectEntry.destination, statusCode)\n        }\n      }\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  // No redirect found, continue the request without redirecting\n  return NextResponse.next()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Browserslist for Next.js in package.json\nDESCRIPTION: This snippet shows how to specify target browsers for Next.js using Browserslist configuration in the package.json file. It lists the default browser versions supported by Next.js.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/04-architecture/supported-browsers.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"browserslist\": [\n    \"chrome 64\",\n    \"edge 79\",\n    \"firefox 67\",\n    \"opera 51\",\n    \"safari 12\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Favicon Link Tag in Next.js\nDESCRIPTION: HTML output for favicon implementation in the document head, using an .ico file from the root /app directory.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/01-metadata/app-icons.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"icon\" href=\"/favicon.ico\" sizes=\"any\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Output File Tracing for Monorepos\nDESCRIPTION: Configuration for setting the tracing root in monorepo setups to include files outside the project directory.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/output.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  experimental: {\n    // this includes files from the monorepo base two directories up\n    outputFileTracingRoot: path.join(__dirname, '../../'),\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Legacy Next.js Dashboard Layout Component in JavaScript\nDESCRIPTION: Shows a component from the pages directory that implements a dashboard layout. This represents the old pattern before migrating to the app directory's native layout system.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/02-app-router-migration.mdx#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function DashboardLayout({ children }) {\n  return (\n    <div>\n      <h2>My Dashboard</h2>\n      {children}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Comment\nDESCRIPTION: A commented section indicating that the document is auto-generated and providing instructions for editing content specific to the Pages Router.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/02-functions/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{/* DO NOT EDIT. The content of this doc is generated from the source above. To edit the content of this page, navigate to the source page in your editor. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n```\n\n----------------------------------------\n\nTITLE: Enabling AVIF Support in Next.js Images\nDESCRIPTION: Configuration for enabling AVIF image format support alongside WebP in the Image Optimization API.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/01-components/image-legacy.mdx#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    formats: ['image/avif', 'image/webp'],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: MDX Comment Syntax\nDESCRIPTION: Example of an MDX comment syntax used to provide editing instructions for documentation content\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/06-configuring/06-mdx.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{/* DO NOT EDIT. The content of this doc is generated from the source above. To edit the content of this page, navigate to the source page in your editor. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n```\n\n----------------------------------------\n\nTITLE: Conditional PostCSS Configuration in JavaScript\nDESCRIPTION: This PostCSS configuration file uses JavaScript to conditionally include plugins based on the environment.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/06-configuring/09-post-css.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins:\n    process.env.NODE_ENV === 'production'\n      ? [\n          'postcss-flexbugs-fixes',\n          [\n            'postcss-preset-env',\n            {\n              autoprefixer: {\n                flexbox: 'no-2009',\n              },\n              stage: 3,\n              features: {\n                'custom-properties': false,\n              },\n            },\n          ],\n        ]\n      : [\n          // No transformations in development\n        ],\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Next.js Page Component\nDESCRIPTION: Example Next.js page component with a heading and link for testing\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/08-testing/01-vitest.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <div>\n      <h1>Home</h1>\n      <Link href=\"/about\">About</Link>\n    </div>\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <div>\n      <h1>Home</h1>\n      <Link href=\"/about\">About</Link>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Build Command Output\nDESCRIPTION: Displays the output of the Next.js build command, showing information about route sizes and first load JavaScript for an optimized production build.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/08-next-cli.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nRoute (app)                               Size     First Load JS\n┌ ○ /                                     5.3 kB         89.5 kB\n├ ○ /_not-found                           885 B          85.1 kB\n└ ○ /about                                137 B          84.4 kB\n+ First Load JS shared by all             84.2 kB\n  ├ chunks/184-d3bb186aac44da98.js        28.9 kB\n  ├ chunks/30b509c0-f3503c24f98f3936.js   53.4 kB\n  └ other shared chunks (total)\n\n\n○  (Static)  prerendered as static content\n```\n\n----------------------------------------\n\nTITLE: Next.js Lint Command Help Output in Bash\nDESCRIPTION: Help output for the 'next lint' command, showing available options for running ESLint on Next.js project files, including directory specification, file extensions, fix options, and reporting preferences.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/08-next-cli.mdx#2025-04-22_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nUsage: next lint [directory] [options]\n\nRuns ESLint for all files in the `/src`, `/app`, `/pages`, `/components`, and `/lib`\ndirectories. It also provides a guided setup to install any required dependencies if ESLint\nis not already configured in your application.\n\nArguments:\n  [directory]                            A base directory on which to lint the application.\n                                         If no directory is provided, the current\n                                         directory will be used.\n\nOptions:\n  -d, --dir, <dirs...>                   Include directory, or directories, to run ESLint.\n  --file, <files...>                     Include file, or files, to run ESLint.\n  --ext, [exts...]                       Specify JavaScript file extensions. (default:\n                                         [\".js\", \".mjs\", \".cjs\", \".jsx\", \".ts\", \".mts\", \".cts\", \".ts\nx\"])\n  -c, --config, <config>                 Uses this configuration file, overriding all other\n                                         configuration options.\n  --resolve-plugins-relative-to, <rprt>  Specify a directory where plugins should be\n                                         resolved from.\n  --strict                               Creates a `.eslintrc.json` file using the Next.js\n                                         strict configuration.\n  --rulesdir, <rulesdir...>              Uses additional rules from this directory(s).\n  --fix                                  Automatically fix linting issues.\n  --fix-type <fixType>                   Specify the types of fixes to apply (e.g., problem,\n                                         suggestion, layout).\n  --ignore-path <path>                   Specify a file to ignore.\n  --no-ignore <path>                     Disables the `--ignore-path` option.\n  --quiet                                Reports errors only.\n  --max-warnings [maxWarnings]           Specify the number of warnings before triggering a\n                                         non-zero exit code. (default: -1)\n  -o, --output-file, <outputFile>        Specify a file to write report to.\n  -f, --format, <format>                 Uses a specifc output format.\n  --no-inline-config                     Prevents comments from changing config or rules.\n  --report-unused-disable-directives     Adds reprted errors for unused eslint-disable\n                                         directives.\n  --no-cache                             Disables caching.\n  --cache-location, <cacheLocation>      Specify a location for cache.\n  --cache-strategy, [cacheStrategy]      Specify a strategy to use for detecting changed\n                                         files in the cache. (default: \"metadata\")\n  --error-on-unmatched-pattern           Reports errors when any file patterns are\n                                         unmatched.\n  -h, --help                             Displays this message.\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server on Custom Port\nDESCRIPTION: Demonstrates how to start the Next.js development server on a custom port using the CLI option or environment variable.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/08-next-cli.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnext dev -p 4000\n```\n\nLANGUAGE: bash\nCODE:\n```\nPORT=4000 next dev\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind CSS with npm\nDESCRIPTION: Command to install Tailwind CSS, PostCSS, and Autoprefixer dependencies, and initialize configuration files for a Next.js project.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/05-styling/02-tailwind-css.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D tailwindcss postcss autoprefixer\nnpx tailwindcss init -p\n```\n\n----------------------------------------\n\nTITLE: Creating Client-Only Component in Next.js (TypeScript)\nDESCRIPTION: This code creates a client-only component in Next.js using TypeScript. It uses the 'use client' directive and dynamic import to load the main App component without server-side rendering.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/05-from-create-react-app.mdx#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport React from 'react'\nimport dynamic from 'next/dynamic'\n\nconst App = dynamic(() => import('../../App'), { ssr: false })\n\nexport function ClientOnly() {\n  return <App />\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js CLI Command Output\nDESCRIPTION: Displays the output of the Next.js CLI help command, showing available options and commands with their descriptions.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/08-next-cli.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nUsage next [options] [command]\n\nThe Next.js CLI allows you to develop, build, start your application, and more.\n\nOptions:\n  -v, --version                Outputs the Next.js version.\n  -h, --help                   Displays this message.\n\nCommands:\n  build [directory] [options]  Creates an optimized production build of your application.\n                               The output displays information about each route.\n  dev [directory] [options]    Starts Next.js in development mode with hot-code reloading,\n                               error reporting, and more.\n  info [options]               Prints relevant details about the current system which can be\n                               used to report Next.js bugs.\n  lint [directory] [options]   Runs ESLint for all files in the `/src`, `/app`, `/pages`,\n                               `/components`, and `/lib` directories. It also provides a\n                               guided setup to install any required dependencies if ESLint\n                               is not already configured in your application.\n  start [directory] [options]  Starts Next.js in production mode. The application should be\n                               compiled with `next build` first.\n  telemetry [options]          Allows you to enable or disable Next.js' completely\n                               anonymous telemetry collection.\n```\n\n----------------------------------------\n\nTITLE: Creating Catch-all Route for Modal Closing in Next.js\nDESCRIPTION: This snippet implements a catch-all route that returns null. It's used to close the modal when navigating to a page that shouldn't render the @auth slot.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/10-parallel-routes.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function CatchAll() {\n  return null\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function CatchAll() {\n  return null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring exportPathMap in Next.js\nDESCRIPTION: This snippet demonstrates how to use the exportPathMap option in the next.config.js file to customize the static export process. It shows how to map routes to specific pages and pass query parameters.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/03-next-config-js/exportPathMap.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  exportPathMap: async function (\n    defaultPathMap,\n    { dev, dir, outDir, distDir, buildId }\n  ) {\n    return {\n      '/': { page: '/' },\n      '/about': { page: '/about' },\n      '/p/hello-nextjs': { page: '/post', query: { title: 'hello-nextjs' } },\n      '/p/learn-nextjs': { page: '/post', query: { title: 'learn-nextjs' } },\n      '/p/deploy-nextjs': { page: '/post', query: { title: 'deploy-nextjs' } },\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Preview Mode Test Handler\nDESCRIPTION: A basic API route implementation for manually testing preview mode functionality in the browser.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/06-configuring/14-preview-mode.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function handler(req, res) {\n  res.setPreviewData({})\n  res.end('Preview mode enabled')\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Next.js and React packages using Yarn\nDESCRIPTION: Command to update Next.js, React, React DOM, and ESLint config to their latest versions using Yarn.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/03-version-14.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add next@latest react@latest react-dom@latest eslint-config-next@latest\n```\n\n----------------------------------------\n\nTITLE: Implementing Icon Link Tag in Next.js\nDESCRIPTION: HTML output for general icon implementation showing dynamic generation of attributes based on the image file properties.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/01-metadata/app-icons.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<link\n  rel=\"icon\"\n  href=\"/icon?<generated>\"\n  type=\"image/<generated>\"\n  sizes=\"<generated>\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Ignoring TypeScript Build Errors Configuration\nDESCRIPTION: Configuration to disable TypeScript error checking during production builds. This is considered dangerous and should only be used with external type checking processes.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/01-typescript.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  typescript: {\n    // !! WARN !!\n    // Dangerously allow production builds to successfully complete even if\n    // your project has type errors.\n    // !! WARN !!\n    ignoreBuildErrors: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Legacy Next.js Page with getLayout Pattern in JavaScript\nDESCRIPTION: Demonstrates the older getLayout pattern used in the pages directory to apply custom layouts to specific pages. This approach is replaced by nested layouts in the app directory.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/02-app-router-migration.mdx#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport DashboardLayout from '../components/DashboardLayout'\n\nexport default function Page() {\n  return <p>My Page</p>\n}\n\nPage.getLayout = function getLayout(page) {\n  return <DashboardLayout>{page}</DashboardLayout>\n}\n```\n\n----------------------------------------\n\nTITLE: Express Server Configuration for Next.js 12 HMR WebSocket\nDESCRIPTION: Express server configuration for handling WebSocket connections required for Hot Module Replacement in Next.js 12. This ensures all requests to the webpack-hmr endpoint are properly passed to the Next.js request handler.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/10-upgrading/07-version-12.mdx#2025-04-22_snippet_11\n\nLANGUAGE: js\nCODE:\n```\napp.all('/_next/webpack-hmr', (req, res) => {\n  nextjsRequestHandler(req, res)\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Cache TTL for Next.js Images\nDESCRIPTION: Configuration for setting minimum Time to Live (TTL) in seconds for cached optimized images.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/01-components/image-legacy.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    minimumCacheTTL: 60,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Markdown Example\nDESCRIPTION: Demonstrates basic Markdown syntax and its HTML output\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/05-mdx.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nI **love** using [Next.js](https://nextjs.org/)\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>I <strong>love</strong> using <a href=\"https://nextjs.org/\">Next.js</a></p>\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Server for NextJS Static Export\nDESCRIPTION: This Nginx configuration example shows how to set up a server to properly serve a NextJS static export. It includes route handling for the root directory and blog paths, along with 404 error handling.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/10-deploying/02-static-exports.mdx#2025-04-22_snippet_9\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n  listen 80;\n  server_name acme.com;\n\n  root /var/www/out;\n\n  location / {\n      try_files $uri $uri.html $uri/ =404;\n  }\n\n  # This is necessary when `trailingSlash: false`.\n  # You can omit this when `trailingSlash: true`.\n  location /blog/ {\n      rewrite ^/blog/(.*)$ /blog/$1.html break;\n  }\n\n  error_page 404 /404.html;\n  location = /404.html {\n      internal;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Travis CI for Next.js Build Caching\nDESCRIPTION: Travis CI configuration that defines directories to cache between builds. This should be added to your .travis.yml file to cache node_modules and the Next.js cache directory.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/09-deploying/04-ci-build-caching.mdx#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncache:\n  directories:\n    - $HOME/.cache/yarn\n    - node_modules\n    - .next/cache\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Home Component in Pages Router\nDESCRIPTION: A simple React component from the Pages Router that renders an h1 heading with the text 'Home'.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/08-testing/02-jest.mdx#2025-04-22_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Home() {\n  return <h1>Home</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Open Graph Images with JavaScript in Next.js\nDESCRIPTION: A JavaScript example showing how to generate an Open Graph image programmatically using the ImageResponse API from next/og. Includes runtime configuration, metadata definitions, and JSX for image rendering.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/01-metadata/opengraph-image.mdx#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ImageResponse } from 'next/og'\n\n// Route segment config\nexport const runtime = 'edge'\n\n// Image metadata\nexport const alt = 'About Acme'\nexport const size = {\n  width: 1200,\n  height: 630,\n}\n\nexport const contentType = 'image/png'\n\n// Image generation\nexport default async function Image() {\n  // Font\n  const interSemiBold = fetch(\n    new URL('./Inter-SemiBold.ttf', import.meta.url)\n  ).then((res) => res.arrayBuffer())\n\n  return new ImageResponse(\n    (\n      // ImageResponse JSX element\n      <div\n        style={{\n          fontSize: 128,\n          background: 'white',\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        About Acme\n      </div>\n    ),\n    // ImageResponse options\n    {\n      // For convenience, we can re-use the exported opengraph-image\n      // size config to also set the ImageResponse's width and height.\n      ...size,\n      fonts: [\n        {\n          name: 'Inter',\n          data: await interSemiBold,\n          style: 'normal',\n          weight: 400,\n        },\n      ],\n    }\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom AMP Validator in Next.js\nDESCRIPTION: This snippet shows how to set up a custom AMP validator in the Next.js configuration file. This allows for custom validation rules when building AMP pages.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/06-configuring/07-amp.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  amp: {\n    validator: './custom_validator.js',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Root Layout in JavaScript\nDESCRIPTION: Implementation of the root layout component in JavaScript, which wraps all pages in a Next.js App Router application.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/05-from-create-react-app.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\" />\n        <link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <title>React App</title>\n        <meta name=\"description\" content=\"Web site created...\" />\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to a Predefined Route with useRouter in Next.js\nDESCRIPTION: This example shows how to use the useRouter hook to programmatically navigate to a predefined route ('/about') when a button is clicked.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/02-functions/use-router.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useRouter } from 'next/router'\n\nexport default function Page() {\n  const router = useRouter()\n\n  return (\n    <button type=\"button\" onClick={() => router.push('/about')}>\n      Click me\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring trailingSlash Option in Next.js Configuration\nDESCRIPTION: This snippet demonstrates how to set the 'trailingSlash' option to true in the Next.js configuration file. When enabled, URLs without trailing slashes will redirect to their counterparts with trailing slashes. This also affects the output structure when using static exports.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/trailingSlash.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  trailingSlash: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Side Rendered Page Output Path\nDESCRIPTION: Shows the output path of a page with getServerSideProps after running next build command.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/02-rendering/04-automatic-static-optimization.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n.next/server/pages/about.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Edge Runtime for Icon Route Handler in JavaScript\nDESCRIPTION: Demonstrates setting up an icon route handler with Edge runtime configuration in JavaScript. The code exports a runtime configuration and defines an empty Icon component function.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/01-metadata/app-icons.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nexport const runtime = 'edge'\n\nexport default function Icon() {}\n```\n\n----------------------------------------\n\nTITLE: Disabling AMP Validation in Next.js\nDESCRIPTION: This configuration snippet demonstrates how to skip AMP validation during the build process by modifying the Next.js config file. This can be useful during development or for special cases.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/06-configuring/07-amp.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nexperimental: {\n  amp: {\n    skipValidation: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy Decorators in Next.js\nDESCRIPTION: Shows how to enable support for legacy decorators in Next.js using tsconfig.json or jsconfig.json.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/04-architecture/nextjs-compiler.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"experimentalDecorators\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Route Handler Implementation in JavaScript\nDESCRIPTION: Basic structure for implementing a GET route handler in the app directory using JavaScript.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/02-app-router-migration.mdx#2025-04-22_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function GET(request) {}\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js Version 9 with bun\nDESCRIPTION: Command to upgrade an existing Next.js application to version 9 using bun package manager.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/10-upgrading/10-version-9.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun add next@9\n```\n\n----------------------------------------\n\nTITLE: Updating Gitignore for Next.js\nDESCRIPTION: Shows the necessary additions to .gitignore file for Next.js specific files and directories.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/05-from-create-react-app.mdx#2025-04-22_snippet_20\n\nLANGUAGE: plaintext\nCODE:\n```\n# ...\n.next\nnext-env.d.ts\ndist\n```\n\n----------------------------------------\n\nTITLE: Default Caching Headers for Static Assets in Next.js\nDESCRIPTION: This code snippet shows the default caching headers that Next.js applies to files in the public directory. These headers prevent aggressive caching since static assets may change.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/11-static-assets.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nCache-Control: public, max-age=0\n```\n\n----------------------------------------\n\nTITLE: Running Next.js with Node Arguments\nDESCRIPTION: Demonstrates how to pass Node.js arguments to Next.js commands for various purposes such as throwing deprecation warnings, using ESM, or enabling inspection.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/08-next-cli.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nNODE_OPTIONS='--throw-deprecation' next\nNODE_OPTIONS='-r esm' next\nNODE_OPTIONS='--inspect' next\n```\n\n----------------------------------------\n\nTITLE: Creating the Basic Entrypoint Page with CSS Import\nDESCRIPTION: Sets up a catch-all route page that imports global CSS and generates a static route for the index page. This establishes the foundation for the SPA-like behavior in Next.js.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/04-from-vite.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport '../../index.css'\n\nexport function generateStaticParams() {\n  return [{ slug: [''] }]\n}\n\nexport default function Page() {\n  return '...' // We'll update this\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport '../../index.css'\n\nexport function generateStaticParams() {\n  return [{ slug: [''] }]\n}\n\nexport default function Page() {\n  return '...' // We'll update this\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js 13 and Dependencies using bun\nDESCRIPTION: Command to upgrade Next.js to version 13 along with React and ESLint config using bun package manager.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/10-upgrading/06-version-13.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun add next@13 react@latest react-dom@latest eslint-config-next@13\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Sizes in Next.js\nDESCRIPTION: Configuration for specifying image width sizes used in generating srcsets for images with sizes prop, complementing device sizes configuration.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/01-components/image-legacy.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    imageSizes: [16, 32, 48, 64, 96, 128, 256, 384],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using next/head in Legacy Pages Directory with TypeScript\nDESCRIPTION: Shows the older method of managing head elements using the next/head component in the pages directory with TypeScript. This approach is replaced by the metadata API in the app directory.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/02-app-router-migration.mdx#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport Head from 'next/head'\n\nexport default function Page() {\n  return (\n    <>\n      <Head>\n        <title>My page title</title>\n      </Head>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding APIs Table in Markdown\nDESCRIPTION: A markdown table listing various Encoding APIs supported by the Next.js Edge Runtime, including atob, btoa, TextDecoder, TextDecoderStream, TextEncoder, and TextEncoderStream.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/07-edge.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| API                                                                                 | Description                        |\n| ----------------------------------------------------------------------------------- | ---------------------------------- |\n| [`atob`](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/atob) | Decodes a base-64 encoded string   |\n| [`btoa`](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/btoa) | Encodes a string in base-64        |\n| [`TextDecoder`](https://developer.mozilla.org/docs/Web/API/TextDecoder)             | Decodes a Uint8Array into a string |\n| [`TextDecoderStream`](https://developer.mozilla.org/docs/Web/API/TextDecoderStream) | Chainable decoder for streams      |\n| [`TextEncoder`](https://developer.mozilla.org/docs/Web/API/TextEncoder)             | Encodes a string into a Uint8Array |\n| [`TextEncoderStream`](https://developer.mozilla.org/docs/Web/API/TextEncoderStream) | Chainable encoder for streams      |\n```\n\n----------------------------------------\n\nTITLE: Using Next.js Link Component with basePath\nDESCRIPTION: Demonstrates how the Link component automatically handles basePath prefixing for internal navigation.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/basePath.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function HomePage() {\n  return (\n    <>\n      <Link href=\"/about\">About Page</Link>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Component-Specific Content in Next.js Documentation\nDESCRIPTION: A JSX comment that explains how to add router-specific content using the PagesOnly component while keeping shared content unwrapped. This allows for maintaining a single source document that targets both the App Router and Pages Router.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n```\n\n----------------------------------------\n\nTITLE: Using Script Component with Additional Attributes in Next.js Pages Router\nDESCRIPTION: This example shows how to implement the Next.js Script component with additional attributes in the Pages Router. It includes the same 'nonce' and custom data attribute as the App Router example.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/05-scripts.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport Script from 'next/script'\n\nexport default function Page() {\n  return (\n    <>\n      <Script\n        src=\"https://example.com/script.js\"\n        id=\"example-script\"\n        nonce=\"XUENAJFW\"\n        data-test=\"script\"\n      />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Preview Mode API Handler\nDESCRIPTION: Basic example of setting up a preview mode API route handler that enables preview mode by setting preview data cookies.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/06-configuring/14-preview-mode.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function handler(req, res) {\n  // ...\n  res.setPreviewData({})\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Preview URL in Next.js\nDESCRIPTION: This command shows the structure of the preview URL that should be set in the headless CMS or accessed manually to view the preview content. It includes placeholders for the site URL, secret token, and content path.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/06-configuring/14-preview-mode.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhttps://<your-site>/api/preview?secret=<token>&slug=<path>\n```\n\n----------------------------------------\n\nTITLE: HTML Output for opengraph-image.alt.txt\nDESCRIPTION: The HTML head output generated when using the opengraph-image.alt.txt file convention, showing the meta tag created for Open Graph image alt text.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/01-metadata/opengraph-image.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<meta property=\"og:image:alt\" content=\"About Acme\" />\n```\n\n----------------------------------------\n\nTITLE: Next.js Telemetry Command Help Output in Bash\nDESCRIPTION: Help output for the 'next telemetry' command, showing options to enable or disable Next.js anonymous telemetry data collection, with a link to learn more about the telemetry program.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/08-next-cli.mdx#2025-04-22_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nUsage: next telemetry [options]\n\nAllows you to enable or disable Next.js' completely anonymous telemetry collection.\n\nOptions:\n  --enable    Eanbles Next.js' telemetry collection.\n  --disable   Disables Next.js' telemetry collection.\n  -h, --help  Displays this message.\n\nLearn more: https://nextjs.org/telemetry\n```\n\n----------------------------------------\n\nTITLE: Handling Specific Web Vitals Metrics in App Router (TypeScript)\nDESCRIPTION: Shows how to handle different web vitals metrics using a switch statement in the App Router implementation with TypeScript.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/08-analytics.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { useReportWebVitals } from 'next/web-vitals'\n\nexport function WebVitals() {\n  useReportWebVitals((metric) => {\n    switch (metric.name) {\n      case 'FCP': {\n        // handle FCP results\n      }\n      case 'LCP': {\n        // handle LCP results\n      }\n      // ...\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Info Command Output Example in Bash\nDESCRIPTION: Example output from running 'next info', showing system details including OS information, installed binaries (Node.js, npm, etc.), and relevant package versions for debugging and bug reporting.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/08-next-cli.mdx#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nOperating System:\n  Platform: linux\n  Arch: x64\n  Version: #22-Ubuntu SMP Fri Nov 5 13:21:36 UTC 2021\n  Available memory (MB): 31795\n  Available CPU cores: 16\nBinaries:\n  Node: 16.13.0\n  npm: 8.1.0\n  Yarn: 1.22.17\n  pnpm: 6.24.2\nRelevant Packages:\n  next: 14.1.1-canary.61 // Latest available version is detected (14.1.1-canary.61).\n  react: 18.2.0\n  react-dom: 18.2.0\nNext.js Config:\n  output: N/A\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js Bundle Analyzer\nDESCRIPTION: Commands to install the @next/bundle-analyzer plugin using different package managers (npm, yarn, or pnpm).\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/06-bundle-analyzer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @next/bundle-analyzer\n# or\nyarn add @next/bundle-analyzer\n# or\npnpm add @next/bundle-analyzer\n```\n\n----------------------------------------\n\nTITLE: Installing eslint-config-prettier in Next.js Project\nDESCRIPTION: This snippet shows how to install eslint-config-prettier as a dev dependency using various package managers.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/02-eslint.mdx#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev eslint-config-prettier\n\nyarn add --dev eslint-config-prettier\n\npnpm add --save-dev eslint-config-prettier\n\nbun add --dev eslint-config-prettier\n```\n\n----------------------------------------\n\nTITLE: Implementing useMemo Hook with Dependencies\nDESCRIPTION: Example demonstrating useMemo hook usage with dependencies, showing how Fast Refresh handles hook updates during development.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/04-architecture/fast-refresh.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nuseMemo(() => x * 2, [x])\n```\n\n----------------------------------------\n\nTITLE: Using getServerSideProps with notFound in Next.js\nDESCRIPTION: This snippet demonstrates how to use the notFound return value in getServerSideProps to return a 404 status when data is not found. It shows how to conditionally return notFound: true based on the API response.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/02-functions/get-server-side-props.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function getServerSideProps(context) {\n  const res = await fetch(`https://.../data`)\n  const data = await res.json()\n\n  if (!data) {\n    return {\n      notFound: true,\n    }\n  }\n\n  return {\n    props: { data }, // will be passed to the page component as props\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SVG Support in Next.js Images\nDESCRIPTION: Configuration for enabling SVG support with security headers in the Image Optimization API.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/01-components/image-legacy.mdx#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    dangerouslyAllowSVG: true,\n    contentDispositionType: 'attachment',\n    contentSecurityPolicy: \"default-src 'self'; script-src 'none'; sandbox;\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Vitest with create-next-app\nDESCRIPTION: Command to create a new Next.js project with Vitest configuration using the official example template\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/08-testing/01-vitest.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest --example with-vitest with-vitest-app\n```\n\n----------------------------------------\n\nTITLE: Converting withAmp HOC to Page Config in JavaScript\nDESCRIPTION: Transforms the withAmp Higher Order Component into Next.js 9 page configuration.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/01-codemods.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Before\nimport { withAmp } from 'next/amp'\n\nfunction Home() {\n  return <h1>My AMP Page</h1>\n}\n\nexport default withAmp(Home)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// After\nexport default function Home() {\n  return <h1>My AMP Page</h1>\n}\n\nexport const config = {\n  amp: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Next.js in Custom Server\nDESCRIPTION: This code snippet demonstrates how to import and initialize Next.js in a custom server setup.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/06-configuring/10-custom-server.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst next = require('next')\nconst app = next({})\n```\n\n----------------------------------------\n\nTITLE: Running ESLint setup in Next.js\nDESCRIPTION: When running the lint command for the first time, Next.js will guide you through the ESLint setup process.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/02-eslint.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn lint\n```\n\n----------------------------------------\n\nTITLE: Defining frontmatter in Markdown for Next.js documentation\nDESCRIPTION: This snippet defines the frontmatter for a Markdown file in Next.js documentation. It specifies the title, navigation title, description, and source of the content.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/07-testing/02-jest.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Setting up Jest with Next.js\nnav_title: Jest\ndescription: Learn how to set up Next.js with Jest for Unit Testing.\nsource: app/building-your-application/testing/jest\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js Version 9 with pnpm\nDESCRIPTION: Command to upgrade an existing Next.js application to version 9 using pnpm package manager.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/10-upgrading/10-version-9.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm up next@9\n```\n\n----------------------------------------\n\nTITLE: Sirv Loader Implementation\nDESCRIPTION: Custom image loader implementation for Sirv dynamic imaging service\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/images.mdx#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function sirvLoader({ src, width, quality }) {\n  const url = new URL(`https://example.com${src}`)\n  const params = url.searchParams\n  params.set('format', params.getAll('format').join(',') || 'optimal')\n  params.set('w', params.get('w') || width.toString())\n  params.set('q', (quality || 85).toString())\n  return url.href\n}\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Configuration for Edge Runtime Documentation\nDESCRIPTION: YAML frontmatter that defines metadata for the Edge Runtime API reference page. It specifies the title, description, and source path for the documentation.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/06-edge.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Edge Runtime\ndescription: API Reference for the Edge Runtime.\nsource: app/api-reference/edge\n---\n```\n\n----------------------------------------\n\nTITLE: Advanced Module Alias Configuration\nDESCRIPTION: Demonstrates a more complex configuration of baseUrl and paths for module aliases.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/04-absolute-imports-and-module-aliases.mdx#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \"src/\",\n    \"paths\": {\n      \"@/styles/*\": [\"styles/*\"],\n      \"@/components/*\": [\"components/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Info Command Help Output in Bash\nDESCRIPTION: Help output for the 'next info' command, showing available options for gathering system information that can be used for debugging and bug reporting.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/08-next-cli.mdx#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nUsage: next info [options]\n\nPrints relevant details about the current system which can be used to report Next.js bugs.\n\nOptions:\n  --verbose   Collections additional information for debugging.\n  -h, --help  Displays this message.\n```\n\n----------------------------------------\n\nTITLE: Adding Type Safety to Viewport Object\nDESCRIPTION: Adding explicit TypeScript type safety to the viewport object using the Viewport type from Next.js.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-viewport.mdx#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Viewport } from 'next'\n\nexport const viewport: Viewport = {\n  themeColor: 'black',\n}\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Build without Linting\nDESCRIPTION: Shows how to run the Next.js build command without linting, which can be useful in certain scenarios.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/08-next-cli.mdx#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnext build --no-lint\n```\n\n----------------------------------------\n\nTITLE: Disabling Static Image Imports in Next.js\nDESCRIPTION: Configuration to disable static image imports when they conflict with other plugins.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/01-components/image-legacy.mdx#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    disableStaticImages: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Example of twitter-image.alt.txt Content\nDESCRIPTION: An example of the content within a twitter-image.alt.txt file, which provides alt text for the corresponding Twitter image.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/01-metadata/opengraph-image.mdx#2025-04-22_snippet_4\n\nLANGUAGE: txt\nCODE:\n```\nAbout Acme\n```\n\n----------------------------------------\n\nTITLE: Using PORT Environment Variable\nDESCRIPTION: Example showing how to use the PORT environment variable to set the application port in Next.js 11.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/10-upgrading/08-version-11.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nPORT=4000 next start\n```\n\n----------------------------------------\n\nTITLE: Enabling AMP in Next.js Page\nDESCRIPTION: Basic configuration to enable AMP in a Next.js page. Setting amp to true makes the page AMP-only.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/02-functions/use-amp.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport const config = { amp: true }\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js Dependency\nDESCRIPTION: Command to install the latest version of Next.js as a project dependency using npm.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/05-from-create-react-app.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install next@latest\n```\n\n----------------------------------------\n\nTITLE: Next.js Documentation Comment\nDESCRIPTION: HTML-style comment providing instructions about content editing and the usage of PagesOnly component for router-specific content\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{/* DO NOT EDIT. The content of this doc is generated from the source above. To edit the content of this page, navigate to the source page in your editor. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n```\n\n----------------------------------------\n\nTITLE: Cypress E2E Test Example\nDESCRIPTION: Sample E2E test case demonstrating navigation testing between pages.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/08-testing/04-cypress.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Navigation', () => {\n  it('should navigate to the about page', () => {\n    cy.visit('http://localhost:3000/')\n    cy.get('a[href*=\"about\"]').click()\n    cy.url().should('include', '/about')\n    cy.get('h1').contains('About')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Upgrading to Next.js 12 with bun\nDESCRIPTION: Command to upgrade Next.js to version 12 using bun, including updates to React 17, React DOM 17, and eslint-config-next.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/10-upgrading/07-version-12.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun add next@12 react@17 react-dom@17 eslint-config-next@12\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the Font Module documentation page, defining title, navigation title, description and source path.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/01-components/font.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Font Module\nnav_title: Font\ndescription: API Reference for the Font Module\nsource: app/api-reference/components/font\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Size for Generated Images\nDESCRIPTION: Example showing how to export size metadata for programmatically generated Open Graph or Twitter images in TypeScript and JavaScript.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/01-metadata/opengraph-image.mdx#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nexport const size = { width: 1200, height: 630 }\n\nexport default function Image() {}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport const size = { width: 1200, height: 630 }\n\nexport default function Image() {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Segment Options in Next.js (TypeScript)\nDESCRIPTION: This snippet shows how to configure various segment options for a Route Handler in Next.js using TypeScript. It includes settings for dynamic behavior, revalidation, caching, runtime, and region preferences.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/12-route-handlers.mdx#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nexport const dynamic = 'auto'\nexport const dynamicParams = true\nexport const revalidate = false\nexport const fetchCache = 'auto'\nexport const runtime = 'nodejs'\nexport const preferredRegion = 'auto'\n```\n\n----------------------------------------\n\nTITLE: Implementing Font Variable in JSX Component\nDESCRIPTION: Shows how to apply the configured font to components using className property with the font variable.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/font.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<main className={inter.variable}>\n  <p className={styles.text}>Hello World</p>\n</main>\n```\n\n----------------------------------------\n\nTITLE: Displaying Version History Table in Markdown\nDESCRIPTION: A markdown table showing the version history of the Next.js Image component, including version numbers and corresponding changes.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/image.mdx#2025-04-22_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\n| Version    | Changes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       |\n| ---------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `v14.2.0`  | `overrideSrc` prop added.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     |\n| `v14.1.0`  | `getImageProps()` is stable.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |\n| `v14.0.0`  | `onLoadingComplete` prop and `domains` config deprecated.                                                                                                                                                                                                                                                                                                                                                                                                                                                     |\n| `v13.4.14` | `placeholder` prop support for `data:/image...`                                                                                                                                                                                                                                                                                                                                                                                                                                                               |\n| `v13.2.0`  | `contentDispositionType` configuration added.                                                                                                                                                                                                                                                                                                                                                                                                                                                                 |\n| `v13.0.6`  | `ref` prop added.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             |\n| `v13.0.0`  | The `next/image` import was renamed to `next/legacy/image`. The `next/future/image` import was renamed to `next/image`. A [codemod is available](/docs/app/building-your-application/upgrading/codemods#next-image-to-legacy-image) to safely and automatically rename your imports. `<span>` wrapper removed. `layout`, `objectFit`, `objectPosition`, `lazyBoundary`, `lazyRoot` props removed. `alt` is required. `onLoadingComplete` receives reference to `img` element. Built-in loader config removed. |\n| `v12.3.0`  | `remotePatterns` and `unoptimized` configuration is stable.                                                                                                                                                                                                                                                                                                                                                                                                                                                   |\n| `v12.2.0`  | Experimental `remotePatterns` and experimental `unoptimized` configuration added. `layout=\"raw\"` removed.                                                                                                                                                                                                                                                                                                                                                                                                     |\n| `v12.1.1`  | `style` prop added. Experimental support for `layout=\"raw\"` added.                                                                                                                                                                                                                                                                                                                                                                                                                                            |\n| `v12.1.0`  | `dangerouslyAllowSVG` and `contentSecurityPolicy` configuration added.                                                                                                                                                                                                                                                                                                                                                                                                                                        |\n| `v12.0.9`  | `lazyRoot` prop added.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        |\n| `v12.0.0`  | `formats` configuration added.<br/>AVIF support added.<br/>Wrapper `<div>` changed to `<span>`.                                                                                                                                                                                                                                                                                                                                                                                                               |\n| `v11.1.0`  | `onLoadingComplete` and `lazyBoundary` props added.                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n| `v11.0.0`  | `src` prop support for static import.<br/>`placeholder` prop added.<br/>`blurDataURL` prop added.                                                                                                                                                                                                                                                                                                                                                                                                             |\n| `v10.0.5`  | `loader` prop added.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| `v10.0.1`  | `layout` prop added.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n```\n\n----------------------------------------\n\nTITLE: HTML Output from Markdown List\nDESCRIPTION: Shows the HTML output generated from the markdown list example\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/05-mdx.mdx#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<p>This is a list in markdown:</p>\n\n<ul>\n  <li>One</li>\n  <li>Two</li>\n  <li>Three</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Creating a Home Component with Navigation in App Router\nDESCRIPTION: A React component in the App Router that renders an h1 heading with the text 'Home' and includes a Link component for navigation to an About page.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/08-testing/02-jest.mdx#2025-04-22_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Home() {\n  return (\n    <div>\n      <h1>Home</h1>\n      <Link href=\"/about\">About</Link>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling SWC Minification in Next.js\nDESCRIPTION: Shows how to disable the default SWC minification in Next.js and fall back to Terser.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/04-architecture/nextjs-compiler.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  swcMinify: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter for Next.js Functions Documentation\nDESCRIPTION: YAML frontmatter defining the title and description for the Next.js functions documentation page.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Functions\ndescription: API Reference for Next.js Functions and Hooks.\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Trailing Slash for Next.js 9 Export\nDESCRIPTION: Configuration to revert to the previous behavior of generating index.html files when using 'next export' in Next.js 9, which now outputs direct HTML files by default.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/10-upgrading/10-version-9.mdx#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  trailingSlash: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fallback Pages with Dynamic Routing in Next.js\nDESCRIPTION: This code snippet demonstrates how to create a dynamic Post page with fallback functionality using Next.js. It utilizes getStaticPaths for route generation, getStaticProps for data fetching, and the useRouter hook to handle the fallback state.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/02-functions/get-static-paths.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useRouter } from 'next/router'\n\nfunction Post({ post }) {\n  const router = useRouter()\n\n  // If the page is not yet generated, this will be displayed\n  // initially until getStaticProps() finishes running\n  if (router.isFallback) {\n    return <div>Loading...</div>\n  }\n\n  // Render post...\n}\n\n// This function gets called at build time\nexport async function getStaticPaths() {\n  return {\n    // Only `/posts/1` and `/posts/2` are generated at build time\n    paths: [{ params: { id: '1' } }, { params: { id: '2' } }],\n    // Enable statically generating additional pages\n    // For example: `/posts/3`\n    fallback: true,\n  }\n}\n\n// This also gets called at build time\nexport async function getStaticProps({ params }) {\n  // params contains the post `id`.\n  // If the route is like /posts/1, then params.id is 1\n  const res = await fetch(`https://.../posts/${params.id}`)\n  const post = await res.json()\n\n  // Pass post data to the page via props\n  return {\n    props: { post },\n    // Re-generate the post at most once per second\n    // if a request comes in\n    revalidate: 1,\n  }\n}\n\nexport default Post\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Document for Next.js Pages Router\nDESCRIPTION: TypeScript example of creating a custom Document file (_document.tsx) for the Pages Router, controlling the initial response from the server.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/01-getting-started/01-installation.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Html, Head, Main, NextScript } from 'next/document'\n\nexport default function Document() {\n  return (\n    <Html>\n      <Head />\n      <body>\n        <Main />\n        <NextScript />\n      </body>\n    </Html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using getInitialProps with Custom App in Next.js (JavaScript)\nDESCRIPTION: This snippet illustrates how to use getInitialProps with a custom App component in Next.js using JavaScript. It shows how to fetch initial props and pass additional data to pages, but this approach is not recommended for newer Next.js applications.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/01-routing/05-custom-app.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport App from 'next/app'\n\nexport default function MyApp({ Component, pageProps, example }) {\n  return (\n    <>\n      <p>Data: {example}</p>\n      <Component {...pageProps} />\n    </>\n  )\n}\n\nMyApp.getInitialProps = async (context) => {\n  const ctx = await App.getInitialProps(context)\n\n  return { ...ctx, example: 'data' }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Next.js Telemetry Help Command in Bash\nDESCRIPTION: Command to show the help information for the 'next telemetry' command, which explains options for enabling or disabling anonymous telemetry data collection.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/08-next-cli.mdx#2025-04-22_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nnext telemetry -h\n```\n\n----------------------------------------\n\nTITLE: Removing <a> Tags from Link Components in JSX\nDESCRIPTION: Removes unnecessary <a> tags inside Link Components or adds 'legacyBehavior' prop when auto-fixing is not possible.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/01-codemods.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Link href=\"/about\">\n  <a>About</a>\n</Link>\n// transforms into\n<Link href=\"/about\">\n  About\n</Link>\n\n<Link href=\"/about\">\n  <a onClick={() => console.log('clicked')}>About</a>\n</Link>\n// transforms into\n<Link href=\"/about\" onClick={() => console.log('clicked')}>\n  About\n</Link>\n```\n\nLANGUAGE: jsx\nCODE:\n```\nconst Component = () => <a>About</a>\n\n<Link href=\"/about\">\n  <Component />\n</Link>\n// becomes\n<Link href=\"/about\" legacyBehavior>\n  <Component />\n</Link>\n```\n\n----------------------------------------\n\nTITLE: Defining Required Metadata Fields in Next.js Docs MDX Files\nDESCRIPTION: This MDX snippet demonstrates the required metadata fields (title and description) that must be included at the top of each documentation page in Next.js.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/05-community/01-contribution-guide.mdx#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Page Title\ndescription: Page Description\n---\n```\n\n----------------------------------------\n\nTITLE: Example of opengraph-image.alt.txt Content\nDESCRIPTION: An example of the content within an opengraph-image.alt.txt file, which provides alt text for the corresponding Open Graph image.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/01-metadata/opengraph-image.mdx#2025-04-22_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\nAbout Acme\n```\n\n----------------------------------------\n\nTITLE: Configuring Unoptimized Images Globally in Next.js\nDESCRIPTION: This configuration in next.config.js sets all images to be unoptimized by default. This means that source images will be served as-is without any automatic optimization.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/01-components/image-legacy.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    unoptimized: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Frontmatter for Next.js CLI Documentation\nDESCRIPTION: This code snippet defines the frontmatter for a Markdown file documenting the Next.js CLI. It specifies the title, description, and source of the documentation.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/05-next-cli.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Next.js CLI\ndescription: Next.js CLI\nsource: app/api-reference/next-cli\n---\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration for Next.js 12 HMR WebSocket\nDESCRIPTION: Nginx configuration for handling WebSocket connections required for Hot Module Replacement in Next.js 12. This configuration ensures proper proxy handling of the upgrade request for WebSockets.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/10-upgrading/07-version-12.mdx#2025-04-22_snippet_9\n\nLANGUAGE: nginx\nCODE:\n```\nlocation /_next/webpack-hmr {\n    proxy_pass http://localhost:3000/_next/webpack-hmr;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection \"upgrade\";\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from URL to withRouter in React\nDESCRIPTION: Transforms the deprecated 'url' property to use 'withRouter' and the 'router' property it injects.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/01-codemods.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nexport default class extends React.Component {\n  render() {\n    const { pathname } = this.props.url\n    return <div>Current pathname: {pathname}</div>\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport { withRouter } from 'next/router'\nexport default withRouter(\n  class extends React.Component {\n    render() {\n      const { pathname } = this.props.router\n      return <div>Current pathname: {pathname}</div>\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Next.js Page\nDESCRIPTION: Simple example of creating a basic page component in Next.js that renders at /about route.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/01-routing/01-pages-and-layouts.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function About() {\n  return <div>About</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Updating TypeScript Configuration\nDESCRIPTION: Modifications to tsconfig.json to make it compatible with Next.js, including compiler options and file inclusions.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/05-from-create-react-app.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"strict\": false,\n    \"forceConsistentCasingInFileNames\": true,\n    \"noEmit\": true,\n    \"esModuleInterop\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"node\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"jsx\": \"preserve\",\n    \"baseUrl\": \".\",\n    \"incremental\": true,\n    \"plugins\": [\n      {\n        \"name\": \"next\"\n      }\n    ],\n    \"strictNullChecks\": true\n  },\n  \"include\": [\n    \"next-env.d.ts\",\n    \"**/*.ts\",\n    \"**/*.tsx\",\n    \".next/types/**/*.ts\",\n    \"./dist/types/**/*.ts\"\n  ],\n  \"exclude\": [\"node_modules\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Cache Handler in Next.js Configuration\nDESCRIPTION: This snippet shows how to configure a custom cache handler in the next.config.js file. It specifies the path to the custom cache handler file and disables the default in-memory caching.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/incrementalCacheHandlerPath.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  cacheHandler: require.resolve('./cache-handler.js'),\n  cacheMaxMemorySize: 0, // disable default in-memory caching\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Front Matter Configuration for ESLint Documentation\nDESCRIPTION: YAML front matter configuration for the ESLint documentation page, specifying the title, description, and source path.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/06-configuring/02-eslint.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: ESLint\ndescription: Next.js reports ESLint errors and warnings during builds by default. Learn how to opt-out of this behavior here.\nsource: app/building-your-application/configuring/eslint\n---\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for Redirect Map\nDESCRIPTION: Example JSON structure for storing redirect mappings, showing the format for both simple and complex redirects with permanent flags.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/06-redirecting.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"/old\": {\n    \"destination\": \"/new\",\n    \"permanent\": true\n  },\n  \"/blog/post-old\": {\n    \"destination\": \"/blog/post-new\",\n    \"permanent\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter defining the documentation page title, description, and source path for the Next.js Image component documentation.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/01-components/image.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: <Image>\ndescription: Optimize Images in your Next.js Application using the built-in `next/image` Component.\nsource: app/api-reference/components/image\n---\n```\n\n----------------------------------------\n\nTITLE: Upgrading React with bun\nDESCRIPTION: Command to upgrade React and React DOM to the latest version using bun. This may be required when upgrading to Next.js 12 as it requires React version 17.0.2 at minimum.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/10-upgrading/07-version-12.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbun add react@latest react-dom@latest\n```\n\n----------------------------------------\n\nTITLE: Implementing Unoptimized Image Component in React\nDESCRIPTION: This snippet demonstrates how to create an unoptimized image component using Next.js Image. The unoptimized prop is set to true, which serves the source image as-is without changing quality, size, or format.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/01-components/image-legacy.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Image from 'next/image'\n\nconst UnoptimizedImage = (props) => {\n  return <Image {...props} unoptimized />\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Domains for External Images in Next.js\nDESCRIPTION: This next.config.js snippet shows how to configure allowed domains for external images. This method is simpler but less secure than remotePatterns and is deprecated since Next.js 14.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/01-components/image-legacy.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    domains: ['assets.acme.com'],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jenkins Pipeline for Next.js Build Caching\nDESCRIPTION: Jenkins Pipeline configuration using the Job Cacher plugin to cache Next.js build files between builds. This should be added to your Jenkinsfile to cache node_modules and the Next.js cache directory.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/09-deploying/04-ci-build-caching.mdx#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nstage(\"Restore npm packages\") {\n    steps {\n        // Writes lock-file to cache based on the GIT_COMMIT hash\n        writeFile file: \"next-lock.cache\", text: \"$GIT_COMMIT\"\n\n        cache(caches: [\n            arbitraryFileCache(\n                path: \"node_modules\",\n                includes: \"**/*\",\n                cacheValidityDecidingFile: \"package-lock.json\"\n            )\n        ]) {\n            sh \"npm install\"\n        }\n    }\n}\nstage(\"Build\") {\n    steps {\n        // Writes lock-file to cache based on the GIT_COMMIT hash\n        writeFile file: \"next-lock.cache\", text: \"$GIT_COMMIT\"\n\n        cache(caches: [\n            arbitraryFileCache(\n                path: \".next/cache\",\n                includes: \"**/*\",\n                cacheValidityDecidingFile: \"next-lock.cache\"\n            )\n        ]) {\n            // aka `next build`\n            sh \"npm run build\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating ImageResponse Imports in JavaScript\nDESCRIPTION: Transforms imports from 'next/server' to 'next/og' for Dynamic OG Image Generation usage.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/01-codemods.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ImageResponse } from 'next/server'\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ImageResponse } from 'next/og'\n```\n\n----------------------------------------\n\nTITLE: Configuring VSCode for MDX Preview in Next.js Docs\nDESCRIPTION: This JSON snippet shows the configuration needed in VSCode settings to enable the built-in markdown previewer for MDX files in Next.js documentation.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/05-community/01-contribution-guide.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"files.associations\": {\n    \"*.mdx\": \"markdown\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Interactive Setup Prompts for Next.js App\nDESCRIPTION: Configuration prompts shown during interactive Next.js app creation, including options for TypeScript, ESLint, Tailwind CSS, directory structure, and routing preferences.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/06-create-next-app.mdx#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nWhat is your project named?  my-app\nWould you like to use TypeScript?  No / Yes\nWould you like to use ESLint?  No / Yes\nWould you like to use Tailwind CSS?  No / Yes\nWould you like to use `src/` directory?  No / Yes\nWould you like to use App Router? (recommended)  No / Yes\nWould you like to customize the default import alias (@/*)?  No / Yes\n```\n\n----------------------------------------\n\nTITLE: Transforming Anonymous Components in JavaScript\nDESCRIPTION: Converts anonymous components to named components for compatibility with Fast Refresh.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/01-codemods.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function () {\n  return <div>Hello World</div>\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function MyComponent() {\n  return <div>Hello World</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Absolute to Relative Image Imports in Next.js\nDESCRIPTION: This snippet shows how to convert absolute import paths for images imported from '/public' into relative imports when migrating to Next.js.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/04-from-vite.mdx#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\nimport logo from '/logo.png'\n\n// After\nimport logo from '../public/logo.png'\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js 13 and Dependencies using yarn\nDESCRIPTION: Command to upgrade Next.js to version 13 along with React and ESLint config using yarn package manager.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/10-upgrading/06-version-13.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add next@13 react@latest react-dom@latest eslint-config-next@13\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for a Next.js documentation page about styling, including title, description and source path information.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/04-styling/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Styling\ndescription: Learn the different ways you can style your Next.js application.\nsource: app/building-your-application/styling\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Image Imports\nDESCRIPTION: Configuration to disable static image imports in next.config.js if using legacy image packages.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/10-upgrading/08-version-11.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    disableStaticImages: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Apache Configuration for Next.js 12 HMR WebSocket\nDESCRIPTION: Apache 2.x configuration for handling WebSocket connections required for Hot Module Replacement in Next.js 12. This configuration ensures proper handling of the upgrade request for WebSockets.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/10-upgrading/07-version-12.mdx#2025-04-22_snippet_10\n\nLANGUAGE: apache\nCODE:\n```\n<VirtualHost *:443>\n # ServerName yourwebsite.local\n ServerName \"${WEBSITE_SERVER_NAME}\"\n ProxyPass / http://localhost:3000/\n ProxyPassReverse / http://localhost:3000/\n # Next.js 12 uses websocket\n <Location /_next/webpack-hmr>\n    RewriteEngine On\n    RewriteCond %{QUERY_STRING} transport=websocket [NC]\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule /(.*) ws://localhost:3000/_next/webpack-hmr/$1 [P,L]\n    ProxyPass ws://localhost:3000/_next/webpack-hmr retry=0 timeout=30\n    ProxyPassReverse ws://localhost:3000/_next/webpack-hmr\n </Location>\n</VirtualHost>\n```\n\n----------------------------------------\n\nTITLE: Referencing Next.js Cache in Bitbucket Pipelines Steps\nDESCRIPTION: Bitbucket Pipelines step configuration that references the previously defined Next.js cache. This should be added to your pipeline steps to use both the node and Next.js caches.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/09-deploying/04-ci-build-caching.mdx#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- step:\n    name: your_step_name\n    caches:\n      - node\n      - nextcache\n```\n\n----------------------------------------\n\nTITLE: Using Icons in MDX Documentation\nDESCRIPTION: Shows how to use Check and Cross icons in MDX documentation with size specifications.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/05-community/01-contribution-guide.mdx#2025-04-22_snippet_7\n\nLANGUAGE: mdx\nCODE:\n```\n<Check size={18} />\n<Cross size={18} />\n```\n\n----------------------------------------\n\nTITLE: Upgrading React with npm\nDESCRIPTION: Command to upgrade React and React DOM to the latest version using npm. This may be required when upgrading to Next.js 12 as it requires React version 17.0.2 at minimum.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/10-upgrading/07-version-12.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react@latest react-dom@latest\n```\n\n----------------------------------------\n\nTITLE: Documentation Comment for Content Generation\nDESCRIPTION: HTML-style comment indicating that the content is auto-generated and providing instructions for editing and using the PagesOnly component for router-specific content.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/10-upgrading/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{/* DO NOT EDIT. The content of this doc is generated from the source above. To edit the content of this page, navigate to the source page in your editor. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n```\n\n----------------------------------------\n\nTITLE: Upgrading React with pnpm\nDESCRIPTION: Command to upgrade React and React DOM to the latest version using pnpm. This may be required when upgrading to Next.js 12 as it requires React version 17.0.2 at minimum.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/10-upgrading/07-version-12.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm update react@latest react-dom@latest\n```\n\n----------------------------------------\n\nTITLE: Converting Image Import Paths in Next.js\nDESCRIPTION: Shows how to convert absolute import paths for images from /public directory to relative imports in Next.js.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/05-from-create-react-app.mdx#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\nimport logo from '/logo.png'\n\n// After\nimport logo from '../public/logo.png'\n```\n\n----------------------------------------\n\nTITLE: Media-Dependent Theme Colors HTML Output\nDESCRIPTION: The resulting HTML output when configuring theme colors with media queries for different color schemes.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-viewport.mdx#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"theme-color\" media=\"(prefers-color-scheme: light)\" content=\"cyan\" />\n<meta name=\"theme-color\" media=\"(prefers-color-scheme: dark)\" content=\"black\" />\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration for Next.js CSS-in-JS Documentation\nDESCRIPTION: YAML frontmatter configuration block defining the title, description, and source path for CSS-in-JS documentation in Next.js.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/04-styling/03-css-in-js.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: CSS-in-JS\ndescription: Use CSS-in-JS libraries with Next.js\nsource: app/building-your-application/styling/css-in-js\n---\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration for Next.js Documentation\nDESCRIPTION: YAML frontmatter configuration for a documentation page about setting up Cypress with Next.js, including title, navigation title, description, and source path information.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/07-testing/04-cypress.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Setting up Cypress with Next.js\nnav_title: Cypress\ndescription: Learn how to set up Next.js with Cypress for End-to-End (E2E) and Component Testing.\nsource: app/building-your-application/testing/cypress\n---\n```\n\n----------------------------------------\n\nTITLE: Network APIs Table in Markdown\nDESCRIPTION: A markdown table listing various Network APIs supported by the Next.js Edge Runtime, including Blob, fetch, FetchEvent, File, FormData, Headers, Request, Response, URLSearchParams, and WebSocket.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/07-edge.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| API                                                                             | Description                       |\n| ------------------------------------------------------------------------------- | --------------------------------- |\n| [`Blob`](https://developer.mozilla.org/docs/Web/API/Blob)                       | Represents a blob                 |\n| [`fetch`](https://developer.mozilla.org/docs/Web/API/Fetch_API)                 | Fetches a resource                |\n| [`FetchEvent`](https://developer.mozilla.org/docs/Web/API/FetchEvent)           | Represents a fetch event          |\n| [`File`](https://developer.mozilla.org/docs/Web/API/File)                       | Represents a file                 |\n| [`FormData`](https://developer.mozilla.org/docs/Web/API/FormData)               | Represents form data              |\n| [`Headers`](https://developer.mozilla.org/docs/Web/API/Headers)                 | Represents HTTP headers           |\n| [`Request`](https://developer.mozilla.org/docs/Web/API/Request)                 | Represents an HTTP request        |\n| [`Response`](https://developer.mozilla.org/docs/Web/API/Response)               | Represents an HTTP response       |\n| [`URLSearchParams`](https://developer.mozilla.org/docs/Web/API/URLSearchParams) | Represents URL search parameters  |\n| [`WebSocket`](https://developer.mozilla.org/docs/Web/API/WebSocket)             | Represents a websocket connection |\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirects in Next.js API Routes\nDESCRIPTION: Shows how to implement redirects after form submission using the Next.js API Route response helpers.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from 'next'\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  const id = await addPost()\n  res.redirect(307, `/post/${id}`)\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default async function handler(req, res) {\n  const id = await addPost()\n  res.redirect(307, `/post/${id}`)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Metadata Fields in Next.js Docs MDX Files\nDESCRIPTION: This MDX snippet shows the optional metadata fields (nav_title, source, and related) that can be included at the top of documentation pages in Next.js.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/05-community/01-contribution-guide.mdx#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\nnav_title: Nav Item Title\nsource: app/building-your-application/optimizing/images\nrelated:\n  description: See the image component API reference.\n  links:\n    - app/api-reference/components/image\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.json for Cypress\nDESCRIPTION: Adding Cypress commands to package.json scripts for test execution.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/08-testing/04-cypress.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\",\n    \"cypress:open\": \"cypress open\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MDX Comment for Content Management\nDESCRIPTION: MDX comment providing instructions about content editing and usage of the PagesOnly component for Pages Router specific content.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/10-upgrading/01-codemods.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{/* DO NOT EDIT. The content of this doc is generated from the source above. To edit the content of this page, navigate to the source page in your editor. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Frontmatter for Next.js Documentation\nDESCRIPTION: This snippet demonstrates the frontmatter format used in Next.js documentation files. It includes the title, description, and source path for the content.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/05-optimizing/08-lazy-loading.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Lazy Loading\ndescription: Lazy load imported libraries and React Components to improve your application's loading performance.\nsource: app/building-your-application/optimizing/lazy-loading\n---\n```\n\n----------------------------------------\n\nTITLE: Next.js Frontmatter Header Definition\nDESCRIPTION: YAML frontmatter header defining the title and description for a Next.js documentation page about file conventions.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/02-file-conventions/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: File Conventions\ndescription: API Reference for Next.js Special Files.\n---\n```\n\n----------------------------------------\n\nTITLE: Displaying Router Cache Functionality in Next.js\nDESCRIPTION: This image snippet demonstrates how the Router cache works for static and dynamic routes, showing MISS and HIT for initial and subsequent navigations in Next.js.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/04-caching/index.mdx#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n<Image\n  alt=\"How the Router cache works for static and dynamic routes, showing MISS and HIT for initial and subsequent navigations.\"\n  srcLight=\"/docs/light/router-cache.png\"\n  srcDark=\"/docs/dark/router-cache.png\"\n  width=\"1600\"\n  height=\"1375\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Converting withAmp HOC to Config Object in Next.js 9\nDESCRIPTION: Shows how to migrate from the deprecated withAmp higher-order component to the new page-level configuration object for AMP pages in Next.js 9.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/10-upgrading/10-version-9.mdx#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { withAmp } from 'next/amp'\n\nfunction Home() {\n  return <h1>My AMP Page</h1>\n}\n\nexport default withAmp(Home)\n// or\nexport default withAmp(Home, { hybrid: true })\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Home() {\n  return <h1>My AMP Page</h1>\n}\n\nexport const config = {\n  amp: true,\n  // or\n  amp: 'hybrid',\n}\n```\n\n----------------------------------------\n\nTITLE: Related Links Configuration in YAML\nDESCRIPTION: Shows how to configure related links in the page metadata using YAML format.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/05-community/01-contribution-guide.mdx#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n---\nrelated:\n  description: Learn how to quickly get started with your first application.\n  links:\n    - app/building-your-application/routing/defining-routes\n    - app/building-your-application/data-fetching\n    - app/api-reference/file-conventions/page\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js Version 9 with yarn\nDESCRIPTION: Command to upgrade an existing Next.js application to version 9 using yarn package manager.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/10-upgrading/10-version-9.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add next@9\n```\n\n----------------------------------------\n\nTITLE: Using next/head in Legacy Pages Directory with JavaScript\nDESCRIPTION: Shows the older method of managing head elements using the next/head component in the pages directory with JavaScript. This approach is replaced by the metadata API in the app directory.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/02-app-router-migration.mdx#2025-04-22_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport Head from 'next/head'\n\nexport default function Page() {\n  return (\n    <>\n      <Head>\n        <title>My page title</title>\n      </Head>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Removable getInitialProps in Custom App File\nDESCRIPTION: Example of a redundant getInitialProps implementation in a custom App component that can be safely removed when upgrading to Next.js 9 to leverage new framework features.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/10-upgrading/10-version-9.mdx#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nclass MyApp extends App {\n  // Remove me, I do nothing!\n  static async getInitialProps({ Component, ctx }) {\n    let pageProps = {}\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx)\n    }\n\n    return { pageProps }\n  }\n\n  render() {\n    // ... etc\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling CSS Grid Layout for IE11 in CSS\nDESCRIPTION: This CSS comment enables CSS Grid Layout support for IE11 when placed at the top of a CSS file.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/06-configuring/09-post-css.mdx#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* autoprefixer grid: autoplace */\n```\n\n----------------------------------------\n\nTITLE: Documentation Comment Block\nDESCRIPTION: HTML-style comment block containing instructions about content editing and component usage for the documentation page.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/04-styling/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{/* DO NOT EDIT. The content of this doc is generated from the source above. To edit the content of this page, navigate to the source page in your editor. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n```\n\n----------------------------------------\n\nTITLE: Basic Static Generation without Data in Next.js\nDESCRIPTION: Simple example of a statically generated page without external data dependencies. The page will be pre-rendered at build time into a single HTML file.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/02-rendering/02-static-site-generation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction About() {\n  return <div>About</div>\n}\n\nexport default About\n```\n\n----------------------------------------\n\nTITLE: Adding Babel Plugins to Next.js\nDESCRIPTION: Example of how to add additional Babel plugins to a Next.js project without configuring them. This shows how to include the do-expressions plugin while maintaining the Next.js defaults.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/06-configuring/08-babel.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\"next/babel\"],\n  \"plugins\": [\"@babel/plugin-proposal-do-expressions\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Entrypoint Page in Next.js (TypeScript)\nDESCRIPTION: This code creates the entrypoint page for a Next.js application using TypeScript. It uses an optional catch-all route and imports global CSS. The generateStaticParams function is used to generate the index route.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/05-from-create-react-app.mdx#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport '../../index.css'\n\nexport function generateStaticParams() {\n  return [{ slug: [''] }]\n}\n\nexport default function Page() {\n  return '...' // We'll update this\n}\n```\n\n----------------------------------------\n\nTITLE: Adding React Imports in JSX\nDESCRIPTION: Adds missing React imports to files for compatibility with the new React JSX transform.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/01-codemods.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nexport default class Home extends React.Component {\n  render() {\n    return <div>Hello World</div>\n  }\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nexport default class Home extends React.Component {\n  render() {\n    return <div>Hello World</div>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter defining the page title, description and source path for documentation generation.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/10-upgrading/03-from-vite.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Migrating from Vite\ndescription: Learn how to migrate your existing React application from Vite to Next.js.\nsource: app/building-your-application/upgrading/from-vite\n---\n```\n\n----------------------------------------\n\nTITLE: Updating Next.js and React packages using Bun\nDESCRIPTION: Command to update Next.js, React, React DOM, and ESLint config to their latest versions using Bun.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/03-version-14.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun add next@latest react@latest react-dom@latest eslint-config-next@latest\n```\n\n----------------------------------------\n\nTITLE: Documentation Generation Comment for Edge Runtime\nDESCRIPTION: HTML comment that provides instructions for editing the document. It explains that the content is generated from a source file and provides guidance on adding router-specific content.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/06-edge.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{/* DO NOT EDIT. The content of this doc is generated from the source above. To edit the content of this page, navigate to the source page in your editor. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n```\n\n----------------------------------------\n\nTITLE: Using PagesOnly Component in Markdown\nDESCRIPTION: This snippet demonstrates the usage of a custom component 'PagesOnly' in markdown to wrap content specific to the Pages Router in Next.js documentation.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/03-next-config-js/instrumentationHook.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n```\n\n----------------------------------------\n\nTITLE: Documentation Comment Template\nDESCRIPTION: HTML-style comment containing instructions for documentation editing and usage of the PagesOnly component for Pages Router specific content.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/10-upgrading/03-from-vite.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{/* DO NOT EDIT. The content of this doc is generated from the source above. To edit the content of this page, navigate to the source page in your editor. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js v10 with npm\nDESCRIPTION: Command to upgrade Next.js to version 10 using npm package manager\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/10-upgrading/09-version-10.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i next@10\n```\n\n----------------------------------------\n\nTITLE: Next.js AppOnly Component Documentation Block\nDESCRIPTION: Documentation block specific to the App Router implementation, providing guidance on recommended learning path and key Next.js concepts\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<AppOnly>\n\nIf you're new to Next.js, we recommend starting with the [Routing](/docs/app/building-your-application/routing), [Rendering](/docs/app/building-your-application/rendering), [Data Fetching](/docs/app/building-your-application/data-fetching) and [Styling](/docs/app/building-your-application/styling) sections, as they introduce the fundamental Next.js and web concepts to help you get started. Then, you can dive deeper into the other sections such as [Optimizing](/docs/app/building-your-application/optimizing) and [Configuring](/docs/app/building-your-application/configuring). Finally, once you're ready, checkout the [Deploying](/docs/app/building-your-application/deploying) and [Upgrading](/docs/app/building-your-application/upgrading) sections.\n\n</AppOnly>\n```\n\n----------------------------------------\n\nTITLE: Static HTML Output Path Example\nDESCRIPTION: Shows the output path of a statically optimized page after running next build command.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/02-rendering/04-automatic-static-optimization.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n.next/server/pages/about.html\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Dependencies for Manual Configuration\nDESCRIPTION: Command to install the necessary OpenTelemetry packages for manual configuration without using @vercel/otel.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/10-open-telemetry.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @opentelemetry/sdk-node @opentelemetry/resources @opentelemetry/semantic-conventions @opentelemetry/sdk-trace-node @opentelemetry/exporter-trace-otlp-http\n```\n\n----------------------------------------\n\nTITLE: Creating Client-Only Component in Next.js (JavaScript)\nDESCRIPTION: This snippet demonstrates the JavaScript version of creating a client-only component in Next.js. It uses the 'use client' directive and dynamic import to load the main App component without server-side rendering.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/05-from-create-react-app.mdx#2025-04-22_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport React from 'react'\nimport dynamic from 'next/dynamic'\n\nconst App = dynamic(() => import('../../App'), { ssr: false })\n\nexport function ClientOnly() {\n  return <App />\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Import of Node-specific OpenTelemetry Configuration in TypeScript\nDESCRIPTION: Implementation of instrumentation.ts that conditionally imports node-specific OpenTelemetry configuration only when running in Node.js runtime.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/10-open-telemetry.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function register() {\n  if (process.env.NEXT_RUNTIME === 'nodejs') {\n    await import('./instrumentation.node.ts')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Sample Pages for Testing\nDESCRIPTION: Example Next.js page components used for demonstration in testing scenarios.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/08-testing/04-cypress.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <div>\n      <h1>Home</h1>\n      <Link href=\"/about\">About</Link>\n    </div>\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <div>\n      <h1>About</h1>\n      <Link href=\"/\">Home</Link>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata for Next.js Documentation Page\nDESCRIPTION: This code snippet defines the metadata for a Next.js documentation page about instrumentation. It specifies the title, description, and source of the content.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/05-optimizing/09-instrumentation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Instrumentation\ndescription: Learn how to use instrumentation to run code at server startup in your Next.js app\nsource: app/building-your-application/optimizing/instrumentation\n---\n```\n\n----------------------------------------\n\nTITLE: CSS URL Import Example\nDESCRIPTION: Demonstration of using external URL for background image in CSS.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/urlImports.mdx#2025-04-22_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.className {\n  background: url('https://example.com/assets/hero.jpg');\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter for Next.js Script Optimization Documentation\nDESCRIPTION: YAML frontmatter defining metadata for a Next.js documentation page about script optimization. It specifies the title, navigation title, description, and source path for the content.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/05-optimizing/03-scripts.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Script Optimization\nnav_title: Scripts\ndescription: Optimize 3rd party scripts with the built-in Script component.\nsource: app/building-your-application/optimizing/scripts\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js v10 with Bun\nDESCRIPTION: Command to upgrade Next.js to version 10 using Bun package manager\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/10-upgrading/09-version-10.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun add next@10\n```\n\n----------------------------------------\n\nTITLE: Documentation Comment Block\nDESCRIPTION: HTML-style comment indicating content editing instructions and component usage guidelines for the documentation.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/01-components/font.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{/* DO NOT EDIT. The content of this doc is generated from the source above. To edit the content of this page, navigate to the source page in your editor. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n```\n\n----------------------------------------\n\nTITLE: Creating a Button Component in JavaScript\nDESCRIPTION: Defines a simple Button component using JavaScript syntax.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/04-absolute-imports-and-module-aliases.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Button() {\n  return <button>Click me</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Page Metadata and Component Usage Comment\nDESCRIPTION: YAML frontmatter defining the page metadata and a comment explaining the document's source and editing instructions.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/04-styling/01-css-modules.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: CSS Modules\ndescription: Style your Next.js Application using CSS Modules.\nsource: app/building-your-application/styling/css-modules\n---\n\n{/* DO NOT EDIT. The content of this doc is generated from the source above. To edit the content of this page, navigate to the source page in your editor. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js 11 Dependencies\nDESCRIPTION: Commands to upgrade Next.js and React dependencies to version 11 and 17 respectively using different package managers.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/10-upgrading/08-version-11.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i next@11 react@17 react-dom@17\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add next@11 react@17 react-dom@17\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm up next@11 react@17 react-dom@17\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add next@11 react@17 react-dom@17\n```\n\n----------------------------------------\n\nTITLE: Cloning the Next.js v14 Documentation Repository\nDESCRIPTION: Command to clone the Next.js v14 documentation repository to your local machine using SSH.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:emapeire/next.js-docs.git\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Build with Heap Profiling\nDESCRIPTION: Command to start Next.js build process with heap profiling enabled to generate a .heapprofile file for memory analysis.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/13-memory-usage.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode --heap-prof node_modules/next/dist/bin/next build\n```\n\n----------------------------------------\n\nTITLE: Creating CSS Modules for Button Component in Pages Router\nDESCRIPTION: Example of implementing CSS Modules with a reusable Button component in the pages router. Demonstrates how CSS class names are accessed as properties on the imported styles object.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/05-styling/01-css-modules.mdx#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/*\nYou do not need to worry about .error {} colliding with any other `.css` or\n`.module.css` files!\n*/\n.error {\n  color: white;\n  background-color: red;\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport styles from './Button.module.css'\n\nexport function Button() {\n  return (\n    <button\n      type=\"button\"\n      // Note how the \"error\" class is accessed as a property on the imported\n      // `styles` object.\n      className={styles.error}\n    >\n      Destroy\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring File Tracing Includes and Excludes\nDESCRIPTION: Configuration for explicitly including or excluding files from the tracing process using minimatch globs.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/05-next-config-js/output.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  experimental: {\n    outputFileTracingExcludes: {\n      '/api/hello': ['./un-necessary-folder/**/*'],\n    },\n    outputFileTracingIncludes: {\n      '/api/another': ['./necessary-folder/**/*'],\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Media-Dependent Theme Colors in JavaScript\nDESCRIPTION: Setting different theme colors based on color scheme preference using media queries in JavaScript.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-viewport.mdx#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nexport const viewport = {\n  themeColor: [\n    { media: '(prefers-color-scheme: light)', color: 'cyan' },\n    { media: '(prefers-color-scheme: dark)', color: 'black' },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Using Module Aliases in JavaScript\nDESCRIPTION: Shows how to use module aliases in a JavaScript Next.js page component.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/04-absolute-imports-and-module-aliases.mdx#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport Button from '@/components/button'\n\nexport default function HomePage() {\n  return (\n    <>\n      <h1>Hello World</h1>\n      <Button />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Default Meta Tags from Root Layout\nDESCRIPTION: Removes the meta charset and viewport tags since Next.js includes these by default. This simplifies the head section while maintaining the same functionality.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/04-from-vite.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <link rel=\"icon\" type=\"image/svg+xml\" href=\"/icon.svg\" />\n        <title>My App</title>\n        <meta name=\"description\" content=\"My App is a...\" />\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <link rel=\"icon\" type=\"image/svg+xml\" href=\"/icon.svg\" />\n        <title>My App</title>\n        <meta name=\"description\" content=\"My App is a...\" />\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Custom TypeScript Declaration Configuration\nDESCRIPTION: TSConfig setup for including custom type declarations while maintaining Next.js type system integration.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/01-typescript.mdx#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"skipLibCheck\": true\n    //...truncated...\n  },\n  \"include\": [\n    \"new-types.d.ts\",\n    \"next-env.d.ts\",\n    \".next/types/**/*.ts\",\n    \"**/*.ts\",\n    \"**/*.tsx\"\n  ],\n  \"exclude\": [\"node_modules\"]\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Comment for Documentation Editing Guidelines\nDESCRIPTION: HTML-style comment providing instructions for content editing and component usage within the documentation.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/04-styling/03-css-in-js.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{/* DO NOT EDIT. The content of this doc is generated from the source above. To edit the content of this page, navigate to the source page in your editor. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n```\n\n----------------------------------------\n\nTITLE: Markdown Front Matter Configuration\nDESCRIPTION: YAML front matter metadata for a Next.js documentation page specifying the title, description, and source location for the upgrade guide content.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/10-upgrading/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Upgrading\ndescription: Learn how to upgrade to the latest versions of Next.js.\nsource: app/building-your-application/upgrading\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Layout in Next.js (JavaScript)\nDESCRIPTION: This snippet demonstrates the JavaScript version of setting up the root layout in Next.js, including basic HTML structure and metadata.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/05-from-create-react-app.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <title>React App</title>\n        <meta name=\"description\" content=\"Web site created...\" />\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js 13 and Dependencies using pnpm\nDESCRIPTION: Command to upgrade Next.js to version 13 along with React and ESLint config using pnpm package manager.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/10-upgrading/06-version-13.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm i next@13 react@latest react-dom@latest eslint-config-next@13\n```\n\n----------------------------------------\n\nTITLE: Setting Description in Next.js Metadata\nDESCRIPTION: This snippet shows how to set the description metadata for a Next.js page or layout.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-metadata.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  description: 'The React Framework for the Web',\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"description\" content=\"The React Framework for the Web\" />\n```\n\n----------------------------------------\n\nTITLE: Using Module Aliases in TypeScript\nDESCRIPTION: Shows how to use module aliases in a TypeScript Next.js page component.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/04-absolute-imports-and-module-aliases.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport Button from '@/components/button'\n\nexport default function HomePage() {\n  return (\n    <>\n      <h1>Hello World</h1>\n      <Button />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Snapshot Test for App Router\nDESCRIPTION: A Jest snapshot test for the Page component that captures the rendered output and compares it to a stored snapshot to detect unexpected UI changes.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/08-testing/02-jest.mdx#2025-04-22_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render } from '@testing-library/react'\nimport Page from '../app/page'\n\nit('renders homepage unchanged', () => {\n  const { container } = render(<Page />)\n  expect(container).toMatchSnapshot()\n})\n```\n\n----------------------------------------\n\nTITLE: Navigating with URL Object using useRouter in Next.js\nDESCRIPTION: This snippet demonstrates how to use a URL object with router.push to navigate to a dynamic route with query parameters.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/02-functions/use-router.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useRouter } from 'next/router'\n\nexport default function ReadMore({ post }) {\n  const router = useRouter()\n\n  return (\n    <button\n      type=\"button\"\n      onClick={() => {\n        router.push({\n          pathname: '/post/[pid]',\n          query: { pid: post.id },\n        })\n      }}\n    >\n      Click here to read more\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CSP with Nonces using Next.js Middleware\nDESCRIPTION: This code snippet demonstrates how to generate a nonce and set the Content-Security-Policy header using Next.js Middleware. It creates a unique nonce for each request and applies it to various content directives in the CSP header.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/15-content-security-policy.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextRequest, NextResponse } from 'next/server'\n\nexport function middleware(request: NextRequest) {\n  const nonce = Buffer.from(crypto.randomUUID()).toString('base64')\n  const cspHeader = `\n    default-src 'self';\n    script-src 'self' 'nonce-${nonce}' 'strict-dynamic';\n    style-src 'self' 'nonce-${nonce}';\n    img-src 'self' blob: data:;\n    font-src 'self';\n    object-src 'none';\n    base-uri 'self';\n    form-action 'self';\n    frame-ancestors 'none';\n    upgrade-insecure-requests;\n`\n  // Replace newline characters and spaces\n  const contentSecurityPolicyHeaderValue = cspHeader\n    .replace(/\\s{2,}/g, ' ')\n    .trim()\n\n  const requestHeaders = new Headers(request.headers)\n  requestHeaders.set('x-nonce', nonce)\n\n  requestHeaders.set(\n    'Content-Security-Policy',\n    contentSecurityPolicyHeaderValue\n  )\n\n  const response = NextResponse.next({\n    request: {\n      headers: requestHeaders,\n    },\n  })\n  response.headers.set(\n    'Content-Security-Policy',\n    contentSecurityPolicyHeaderValue\n  )\n\n  return response\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NextResponse } from 'next/server'\n\nexport function middleware(request) {\n  const nonce = Buffer.from(crypto.randomUUID()).toString('base64')\n  const cspHeader = `\n    default-src 'self';\n    script-src 'self' 'nonce-${nonce}' 'strict-dynamic';\n    style-src 'self' 'nonce-${nonce}';\n    img-src 'self' blob: data:;\n    font-src 'self';\n    object-src 'none';\n    base-uri 'self';\n    form-action 'self';\n    frame-ancestors 'none';\n    upgrade-insecure-requests;\n`\n  // Replace newline characters and spaces\n  const contentSecurityPolicyHeaderValue = cspHeader\n    .replace(/\\s{2,}/g, ' ')\n    .trim()\n\n  const requestHeaders = new Headers(request.headers)\n  requestHeaders.set('x-nonce', nonce)\n  requestHeaders.set(\n    'Content-Security-Policy',\n    contentSecurityPolicyHeaderValue\n  )\n\n  const response = NextResponse.next({\n    request: {\n      headers: requestHeaders,\n    },\n  })\n  response.headers.set(\n    'Content-Security-Policy',\n    contentSecurityPolicyHeaderValue\n  )\n\n  return response\n}\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Codemod for withAmp Migration\nDESCRIPTION: Command to automatically migrate code from using withAmp HOC to the new config-based approach in Next.js 9 using the official Next.js codemod tool.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/10-upgrading/10-version-9.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://github.com/vercel/next-codemod/archive/master.tar.gz | tar -xz --strip=2 next-codemod-master/transforms/withamp-to-config.js npx jscodeshift -t ./withamp-to-config.js pages/**/*.js\n```\n\n----------------------------------------\n\nTITLE: Stream APIs Table in Markdown\nDESCRIPTION: A markdown table listing various Stream APIs supported by the Next.js Edge Runtime, including ReadableStream, ReadableStreamBYOBReader, ReadableStreamDefaultReader, TransformStream, WritableStream, and WritableStreamDefaultWriter.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/07-edge.mdx#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| API                                                                                                     | Description                             |\n| ------------------------------------------------------------------------------------------------------- | --------------------------------------- |\n| [`ReadableStream`](https://developer.mozilla.org/docs/Web/API/ReadableStream)                           | Represents a readable stream            |\n| [`ReadableStreamBYOBReader`](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBReader)       | Represents a reader of a ReadableStream |\n| [`ReadableStreamDefaultReader`](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultReader) | Represents a reader of a ReadableStream |\n| [`TransformStream`](https://developer.mozilla.org/docs/Web/API/TransformStream)                         | Represents a transform stream           |\n| [`WritableStream`](https://developer.mozilla.org/docs/Web/API/WritableStream)                           | Represents a writable stream            |\n| [`WritableStreamDefaultWriter`](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter) | Represents a writer of a WritableStream |\n```\n\n----------------------------------------\n\nTITLE: Next.js PagesOnly Component Documentation Block\nDESCRIPTION: Documentation block specific to the Pages Router implementation, providing guidance on recommended learning path and key Next.js concepts\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<PagesOnly>\n\nIf you're new to Next.js, we recommend starting with the [Routing](/docs/pages/building-your-application/routing), [Rendering](/docs/pages/building-your-application/rendering), [Data Fetching](/docs/pages/building-your-application/data-fetching) and [Styling](/docs/pages/building-your-application/styling) sections, as they introduce the fundamental Next.js and web concepts to help you get started. Then, you can dive deeper into the other sections such as [Optimizing](/docs/pages/building-your-application/optimizing) and [Configuring](/docs/pages/building-your-application/configuring). Finally, once you're ready, checkout the [Deploying](/docs/pages/building-your-application/deploying) and [Upgrading](/docs/pages/building-your-application/upgrading) sections.\n\n</PagesOnly>\n```\n\n----------------------------------------\n\nTITLE: Dynamic OpenGraph Image Generation with JavaScript\nDESCRIPTION: Advanced example showing how to generate multiple OpenGraph images using external data and dynamic routing in JavaScript.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/generate-image-metadata.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ImageResponse } from 'next/og'\nimport { getCaptionForImage, getOGImages } from '@/app/utils/images'\n\nexport async function generateImageMetadata({ params }) {\n  const images = await getOGImages(params.id)\n\n  return images.map((image, idx) => ({\n    id: idx,\n    size: { width: 1200, height: 600 },\n    alt: image.text,\n    contentType: 'image/png',\n  }))\n}\n\nexport default async function Image({ params, id }) {\n  const productId = params.id\n  const imageId = id\n  const text = await getCaptionForImage(productId, imageId)\n\n  return new ImageResponse(\n    (\n      <div\n        style={\n          {\n            // ...\n          }\n        }\n      >\n        {text}\n      </div>\n    )\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Site Generation with getStaticProps in pages directory (JSX)\nDESCRIPTION: This snippet demonstrates how to use getStaticProps for static site generation in the pages directory. It fetches data at build time and passes it as props to the React component.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/11-upgrading/02-app-router-migration.mdx#2025-04-22_snippet_25\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function getStaticProps() {\n  const res = await fetch(`https://...`)\n  const projects = await res.json()\n\n  return { props: { projects } }\n}\n\nexport default function Index({ projects }) {\n  return projects.map((project) => <div>{project.name}</div>)\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Graceful Shutdowns in Next.js\nDESCRIPTION: This snippet demonstrates how to handle graceful shutdowns in Next.js by registering handlers for SIGTERM and SIGINT signals in the _document.js file. This is useful for running cleanup code when the server shuts down.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/10-deploying/index.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nif (process.env.NEXT_MANUAL_SIG_HANDLE) {\n  process.on('SIGTERM', () => {\n    console.log('Received SIGTERM: cleaning up')\n    process.exit(0)\n  })\n  process.on('SIGINT', () => {\n    console.log('Received SIGINT: cleaning up')\n    process.exit(0)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Next.js Documentation-Specific Comment\nDESCRIPTION: This comment is used in Next.js documentation to indicate that the content is generated and provides instructions for editing. It also mentions the use of a custom component for Pages Router-specific content.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/05-optimizing/08-lazy-loading.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{/* DO NOT EDIT. The content of this doc is generated from the source above. To edit the content of this page, navigate to the source page in your editor. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n```\n\n----------------------------------------\n\nTITLE: Importing Base Button and CSS Module in Page Component (JavaScript)\nDESCRIPTION: This code snippet shows how to import a BaseButton component and a CSS module in a Page component using JavaScript. It demonstrates the order of imports, which affects the final CSS order in production builds.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/05-styling/01-css-modules.mdx#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BaseButton } from './base-button'\nimport styles from './page.module.css'\n\nexport function Page() {\n  return <BaseButton className={styles.primary} />\n}\n```\n\n----------------------------------------\n\nTITLE: Root Layout with Tailwind CSS in App Router (JavaScript)\nDESCRIPTION: Root layout component that imports global CSS styles containing Tailwind directives, making them available throughout the application when using JavaScript with App Router.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/05-styling/02-tailwind-css.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// These styles apply to every route in the application\nimport './globals.css'\n\nexport const metadata = {\n  title: 'Create Next App',\n  description: 'Generated by create next app',\n}\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Comment for Content Editing Instructions\nDESCRIPTION: This HTML comment provides instructions for editing the content of the page. It explains that the content is generated from a source file and how to add content specific to the Pages Router.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/05-next-cli.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{/* DO NOT EDIT. The content of this doc is generated from the source above. To edit the content of this page, navigate to the source page in your editor. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n```\n\n----------------------------------------\n\nTITLE: Using Worker Strategy for Scripts in Next.js\nDESCRIPTION: Example showing how to use the experimental 'worker' strategy to offload a script to a web worker using Partytown. This improves performance by freeing up the main thread for other application code.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/05-scripts.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport Script from 'next/script'\n\nexport default function Home() {\n  return (\n    <>\n      <Script src=\"https://example.com/script.js\" strategy=\"worker\" />\n    </>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport Script from 'next/script'\n\nexport default function Home() {\n  return (\n    <>\n      <Script src=\"https://example.com/script.js\" strategy=\"worker\" />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Nonce in Next.js Server Component\nDESCRIPTION: This code snippet demonstrates how to read the nonce from the headers in a Next.js Server Component and apply it to a Script component for CSP compliance.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/15-content-security-policy.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { headers } from 'next/headers'\nimport Script from 'next/script'\n\nexport default function Page() {\n  const nonce = headers().get('x-nonce')\n\n  return (\n    <Script\n      src=\"https://www.googletagmanager.com/gtag/js\"\n      strategy=\"afterInteractive\"\n      nonce={nonce}\n    />\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { headers } from 'next/headers'\nimport Script from 'next/script'\n\nexport default function Page() {\n  const nonce = headers().get('x-nonce')\n\n  return (\n    <Script\n      src=\"https://www.googletagmanager.com/gtag/js\"\n      strategy=\"afterInteractive\"\n      nonce={nonce}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified Error Recovery Component in Next.js (TypeScript)\nDESCRIPTION: A simplified TypeScript error component focusing on the reset functionality that allows users to attempt recovery from errors by triggering a re-render of the error boundary's contents.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/01-routing/05-error-handling.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nexport default function Error({\n  error,\n  reset,\n}: {\n  error: Error & { digest?: string }\n  reset: () => void\n}) {\n  return (\n    <div>\n      <h2>Something went wrong!</h2>\n      <button onClick={() => reset()}>Try again</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Package Scripts for Turbopack\nDESCRIPTION: Package.json configuration showing how to enable Turbopack in Next.js development environment using the --turbo flag. Includes standard Next.js scripts for building, starting, and linting.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/04-architecture/turbopack.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"next dev --turbo\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Catch-All API Routes in Next.js\nDESCRIPTION: Demonstrates how to create catch-all API routes that match multiple path segments. This example joins all captured path segments and returns them in the response.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/01-routing/07-api-routes.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from 'next'\n\nexport default function handler(req: NextApiRequest, res: NextApiResponse) {\n  const { slug } = req.query\n  res.end(`Post: ${slug.join(', ')}`)\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function handler(req, res) {\n  const { slug } = req.query\n  res.end(`Post: ${slug.join(', ')}`)\n}\n```\n\n----------------------------------------\n\nTITLE: Crypto APIs Table in Markdown\nDESCRIPTION: A markdown table listing various Crypto APIs supported by the Next.js Edge Runtime, including crypto, CryptoKey, and SubtleCrypto.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/07-edge.mdx#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| API                                                                       | Description                                                                                         |\n| ------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------- |\n| [`crypto`](https://developer.mozilla.org/docs/Web/API/Window/crypto)      | Provides access to the cryptographic functionality of the platform                                  |\n| [`CryptoKey`](https://developer.mozilla.org/docs/Web/API/CryptoKey)       | Represents a cryptographic key                                                                      |\n| [`SubtleCrypto`](https://developer.mozilla.org/docs/Web/API/SubtleCrypto) | Provides access to common cryptographic primitives, like hashing, signing, encryption or decryption |\n```\n\n----------------------------------------\n\nTITLE: Configuring SWC Minification in Next.js 12\nDESCRIPTION: Configuration to enable SWC for JavaScript minification in Next.js 12. This replaces Terser and can be up to 7x faster. This was an opt-in feature in Next.js 12 before becoming the default in 12.1.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/10-upgrading/07-version-12.mdx#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  swcMinify: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Platform Debugging for Next.js on Windows\nDESCRIPTION: This package.json configuration uses the cross-env package to set NODE_OPTIONS with the --inspect flag, enabling consistent debugging across different operating systems, including Windows.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/06-configuring/13-debugging.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"cross-env NODE_OPTIONS='--inspect' next dev\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Wildcard Subdomains for Remote Images in Next.js\nDESCRIPTION: This configuration in next.config.js demonstrates how to use wildcards in remote patterns. It allows any subdomain of example.com for image sources.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/01-components/image-legacy.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: '**.example.com',\n        port: '',\n      },\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Font Styles with style Object in React\nDESCRIPTION: Shows how to apply loaded font styles using the style object returned by the font loader, which includes fontFamily and other CSS properties.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/01-components/font.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<p style={inter.style}>Hello World</p>\n```\n\n----------------------------------------\n\nTITLE: Reading HTTP Headers in Next.js Server Component\nDESCRIPTION: Demonstrates how to use the headers function to read the 'referer' header in a Next.js Server Component. The function returns a read-only Web Headers object.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/02-api-reference/04-functions/headers.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { headers } from 'next/headers'\n\nexport default function Page() {\n  const headersList = headers()\n  const referer = headersList.get('referer')\n\n  return <div>Referer: {referer}</div>\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { headers } from 'next/headers'\n\nexport default function Page() {\n  const headersList = headers()\n  const referer = headersList.get('referer')\n\n  return <div>Referer: {referer}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Using Higher-Order Component Pattern in React\nDESCRIPTION: Example showing how higher-order components are exported, which may cause state reset during Fast Refresh if the returned component is a class component.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/04-architecture/fast-refresh.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nHOC(WrappedComponent)\n```\n\n----------------------------------------\n\nTITLE: Creating a Web Vitals Component in App Router\nDESCRIPTION: Demonstrates how to create a client component that uses the useReportWebVitals hook for App Router implementations.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/08-analytics.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { useReportWebVitals } from 'next/web-vitals'\n\nexport function WebVitals() {\n  useReportWebVitals((metric) => {\n    console.log(metric)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Component Documentation Header\nDESCRIPTION: Frontmatter configuration for the Next.js components API reference documentation page, specifying the title, description and source location.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/01-components/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Components\ndescription: API Reference for Next.js built-in components in the Pages Router.\nsource: app/api-reference/components\n---\n```\n\n----------------------------------------\n\nTITLE: Upgrading to Next.js 12 with yarn\nDESCRIPTION: Command to upgrade Next.js to version 12 using yarn, including updates to React 17, React DOM 17, and eslint-config-next.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/01-building-your-application/10-upgrading/07-version-12.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add next@12 react@17 react-dom@17 eslint-config-next@12\n```\n\n----------------------------------------\n\nTITLE: Configuring Acceptable Image Formats in Next.js\nDESCRIPTION: Configuration for specifying supported image formats for the Image Optimization API. Default configuration enables WebP support.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/03-pages/02-api-reference/01-components/image-legacy.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    formats: ['image/webp'],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Code Blocks with Language and Filename in MDX\nDESCRIPTION: Demonstrates how to properly format code blocks with language specification and filename props in MDX documentation.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/05-community/01-contribution-guide.mdx#2025-04-22_snippet_4\n\nLANGUAGE: mdx\nCODE:\n```\n```bash filename=\"Terminal\"\nnpx create-next-app\n```\n```\n\n----------------------------------------\n\nTITLE: Documentation Notes Format\nDESCRIPTION: Demonstrates how to format single-line and multi-line notes in the documentation.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/05-community/01-contribution-guide.mdx#2025-04-22_snippet_8\n\nLANGUAGE: mdx\nCODE:\n```\n> **Good to know**: This is a single line note.\n\n> **Good to know**:\n>\n> - We also use this format for multi-line notes.\n> - There are sometimes multiple items worth knowing or keeping in mind.\n```\n\n----------------------------------------\n\nTITLE: Default HTML Metadata Tags in Next.js\nDESCRIPTION: Default meta tags that Next.js automatically includes for character encoding and viewport settings.\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/06-optimizing/04-metadata.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<meta charset=\"utf-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n```\n\n----------------------------------------\n\nTITLE: Sample MDX Page Content\nDESCRIPTION: Example of MDX content combining Markdown with React components\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/05-mdx.mdx#2025-04-22_snippet_4\n\nLANGUAGE: mdx\nCODE:\n```\nimport { MyComponent } from 'my-components'\n\n# Welcome to my MDX page!\n\nThis is some **bold** and _italics_ text.\n\nThis is a list in markdown:\n\n- One\n- Two\n- Three\n\nCheckout my React component:\n\n<MyComponent />\n```\n\n----------------------------------------\n\nTITLE: Basic Markdown List Example\nDESCRIPTION: Demonstrates basic markdown list syntax\nSOURCE: https://github.com/nextjsargentina/next.js-docs/blob/main/src/docs/02-app/01-building-your-application/07-configuring/05-mdx.mdx#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\nThis is a list in markdown:\n\n- One\n- Two\n- Three\n```"
  }
]